
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002321c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  08023400  08023400  00033400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023b28  08023b28  000401fc  2**0
                  CONTENTS
  4 .ARM          00000008  08023b28  08023b28  00033b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023b30  08023b30  000401fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023b30  08023b30  00033b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023b34  08023b34  00033b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08023b38  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f720  200001fc  08023d34  000401fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000f91c  08023d34  0004f91c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002790c  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006017  00000000  00000000  00067b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb8  00000000  00000000  0006db50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cc0  00000000  00000000  0006fb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002854b  00000000  00000000  000717c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031c14  00000000  00000000  00099d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb2e7  00000000  00000000  000cb927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b6c0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097ac  00000000  00000000  001b6c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	080233e4 	.word	0x080233e4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	080233e4 	.word	0x080233e4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <reset_distance>:
float fusion_speedL,fusion_speedR;
float straight_alpha;
//float E_speedR0,E_speedL0;
//float E_accelerationR,E_accelerationL;

void reset_distance(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	E_distanceL = 0;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <reset_distance+0x54>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	E_distanceR = 0;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <reset_distance+0x58>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	E_lpf_distanceL = 0;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <reset_distance+0x5c>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	E_lpf_distanceR = 0;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <reset_distance+0x60>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	G_hpf_distanceL = 0;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <reset_distance+0x64>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	G_hpf_distanceR = 0;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <reset_distance+0x68>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	fusion_distanceL=0;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <reset_distance+0x6c>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <reset_distance+0x70>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	straight_alpha=0.85;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <reset_distance+0x74>)
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <reset_distance+0x78>)
 8000fe4:	601a      	str	r2, [r3, #0]

}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000220 	.word	0x20000220
 8000ff4:	20000224 	.word	0x20000224
 8000ff8:	20000230 	.word	0x20000230
 8000ffc:	20000234 	.word	0x20000234
 8001000:	20000240 	.word	0x20000240
 8001004:	20000244 	.word	0x20000244
 8001008:	20000250 	.word	0x20000250
 800100c:	20000254 	.word	0x20000254
 8001010:	20000260 	.word	0x20000260
 8001014:	3f59999a 	.word	0x3f59999a

08001018 <reset_speed>:

void reset_speed(void) {
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

	G_hpf_speedL=0;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <reset_speed+0x44>)
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
	G_hpf_speedR=0;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <reset_speed+0x48>)
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
	E_lpf_speedL=0;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <reset_speed+0x4c>)
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
	E_lpf_speedR=0;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <reset_speed+0x50>)
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
	fusion_speedL=0;
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <reset_speed+0x54>)
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
	fusion_speedR=0;
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <reset_speed+0x58>)
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
	straight_alpha=0.85;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <reset_speed+0x5c>)
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <reset_speed+0x60>)
 8001050:	601a      	str	r2, [r3, #0]

}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	20000248 	.word	0x20000248
 8001060:	2000024c 	.word	0x2000024c
 8001064:	20000238 	.word	0x20000238
 8001068:	2000023c 	.word	0x2000023c
 800106c:	20000258 	.word	0x20000258
 8001070:	2000025c 	.word	0x2000025c
 8001074:	20000260 	.word	0x20000260
 8001078:	3f59999a 	.word	0x3f59999a
 800107c:	00000000 	.word	0x00000000

08001080 <interupt_calEncoder>:

void interupt_calEncoder(void) {
 8001080:	b5b0      	push	{r4, r5, r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	float angle_R,angle_L;
	angle_R=encoder_R-encoder_R0;
 8001086:	4bde      	ldr	r3, [pc, #888]	; (8001400 <interupt_calEncoder+0x380>)
 8001088:	ed93 7a00 	vldr	s14, [r3]
 800108c:	4bdd      	ldr	r3, [pc, #884]	; (8001404 <interupt_calEncoder+0x384>)
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001096:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R>180){angle_R=angle_R-360;}
 800109a:	edd7 7a01 	vldr	s15, [r7, #4]
 800109e:	ed9f 7ada 	vldr	s14, [pc, #872]	; 8001408 <interupt_calEncoder+0x388>
 80010a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	dd07      	ble.n	80010bc <interupt_calEncoder+0x3c>
 80010ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b0:	ed9f 7ad6 	vldr	s14, [pc, #856]	; 800140c <interupt_calEncoder+0x38c>
 80010b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010b8:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R<-180){angle_R=angle_R+360;}
 80010bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c0:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8001410 <interupt_calEncoder+0x390>
 80010c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010cc:	d507      	bpl.n	80010de <interupt_calEncoder+0x5e>
 80010ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d2:	ed9f 7ace 	vldr	s14, [pc, #824]	; 800140c <interupt_calEncoder+0x38c>
 80010d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010da:	edc7 7a01 	vstr	s15, [r7, #4]
	angle_L=-(encoder_L-encoder_L0);
 80010de:	4bcd      	ldr	r3, [pc, #820]	; (8001414 <interupt_calEncoder+0x394>)
 80010e0:	ed93 7a00 	vldr	s14, [r3]
 80010e4:	4bcc      	ldr	r3, [pc, #816]	; (8001418 <interupt_calEncoder+0x398>)
 80010e6:	edd3 7a00 	vldr	s15, [r3]
 80010ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ee:	eef1 7a67 	vneg.f32	s15, s15
 80010f2:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L>180){angle_L=angle_L-360;}
 80010f6:	edd7 7a00 	vldr	s15, [r7]
 80010fa:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8001408 <interupt_calEncoder+0x388>
 80010fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	dd07      	ble.n	8001118 <interupt_calEncoder+0x98>
 8001108:	edd7 7a00 	vldr	s15, [r7]
 800110c:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800140c <interupt_calEncoder+0x38c>
 8001110:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001114:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L<-180){angle_L=angle_L+360;}
 8001118:	edd7 7a00 	vldr	s15, [r7]
 800111c:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8001410 <interupt_calEncoder+0x390>
 8001120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001128:	d507      	bpl.n	800113a <interupt_calEncoder+0xba>
 800112a:	edd7 7a00 	vldr	s15, [r7]
 800112e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800140c <interupt_calEncoder+0x38c>
 8001132:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001136:	edc7 7a00 	vstr	s15, [r7]

	//E_speedR0 = E_speedR;
	//E_speedL0 = E_speedL;
	//one_countL = pl_count_encoderL();
	//one_countR = pl_count_encoderR();
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME;
 800113a:	6838      	ldr	r0, [r7, #0]
 800113c:	f7ff fa2c 	bl	8000598 <__aeabi_f2d>
 8001140:	a39b      	add	r3, pc, #620	; (adr r3, 80013b0 <interupt_calEncoder+0x330>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa7f 	bl	8000648 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4bb1      	ldr	r3, [pc, #708]	; (800141c <interupt_calEncoder+0x39c>)
 8001158:	f7ff fba0 	bl	800089c <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	a394      	add	r3, pc, #592	; (adr r3, 80013b8 <interupt_calEncoder+0x338>)
 8001166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116a:	f7ff fa6d 	bl	8000648 <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	a392      	add	r3, pc, #584	; (adr r3, 80013c0 <interupt_calEncoder+0x340>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff fa64 	bl	8000648 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	a38f      	add	r3, pc, #572	; (adr r3, 80013c8 <interupt_calEncoder+0x348>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	f7ff fa5b 	bl	8000648 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	a38d      	add	r3, pc, #564	; (adr r3, 80013d0 <interupt_calEncoder+0x350>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff fb7c 	bl	800089c <__aeabi_ddiv>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b9b      	ldr	r3, [pc, #620]	; (8001420 <interupt_calEncoder+0x3a0>)
 80011b2:	f7ff fa49 	bl	8000648 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	a386      	add	r3, pc, #536	; (adr r3, 80013d8 <interupt_calEncoder+0x358>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	f7ff fb6a 	bl	800089c <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	4b93      	ldr	r3, [pc, #588]	; (8001424 <interupt_calEncoder+0x3a4>)
 80011d6:	f7ff fa37 	bl	8000648 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4610      	mov	r0, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	4b90      	ldr	r3, [pc, #576]	; (8001428 <interupt_calEncoder+0x3a8>)
 80011e8:	f7ff fb58 	bl	800089c <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	a37a      	add	r3, pc, #488	; (adr r3, 80013e0 <interupt_calEncoder+0x360>)
 80011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fa:	f7ff fa25 	bl	8000648 <__aeabi_dmul>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	a378      	add	r3, pc, #480	; (adr r3, 80013e8 <interupt_calEncoder+0x368>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	f7ff fb46 	bl	800089c <__aeabi_ddiv>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001220:	f7ff fb3c 	bl	800089c <__aeabi_ddiv>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b7e      	ldr	r3, [pc, #504]	; (800142c <interupt_calEncoder+0x3ac>)
 8001232:	f7ff fa09 	bl	8000648 <__aeabi_dmul>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	a36c      	add	r3, pc, #432	; (adr r3, 80013f0 <interupt_calEncoder+0x370>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff fb2a 	bl	800089c <__aeabi_ddiv>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff fcd2 	bl	8000bf8 <__aeabi_d2f>
 8001254:	4603      	mov	r3, r0
 8001256:	4a76      	ldr	r2, [pc, #472]	; (8001430 <interupt_calEncoder+0x3b0>)
 8001258:	6013      	str	r3, [r2, #0]
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME;
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff f99c 	bl	8000598 <__aeabi_f2d>
 8001260:	a353      	add	r3, pc, #332	; (adr r3, 80013b0 <interupt_calEncoder+0x330>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f9ef 	bl	8000648 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b69      	ldr	r3, [pc, #420]	; (800141c <interupt_calEncoder+0x39c>)
 8001278:	f7ff fb10 	bl	800089c <__aeabi_ddiv>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	a34c      	add	r3, pc, #304	; (adr r3, 80013b8 <interupt_calEncoder+0x338>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff f9dd 	bl	8000648 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	a34a      	add	r3, pc, #296	; (adr r3, 80013c0 <interupt_calEncoder+0x340>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff f9d4 	bl	8000648 <__aeabi_dmul>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	a347      	add	r3, pc, #284	; (adr r3, 80013c8 <interupt_calEncoder+0x348>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	f7ff f9cb 	bl	8000648 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	a345      	add	r3, pc, #276	; (adr r3, 80013d0 <interupt_calEncoder+0x350>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff faec 	bl	800089c <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b53      	ldr	r3, [pc, #332]	; (8001420 <interupt_calEncoder+0x3a0>)
 80012d2:	f7ff f9b9 	bl	8000648 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	a346      	add	r3, pc, #280	; (adr r3, 80013f8 <interupt_calEncoder+0x378>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7ff fada 	bl	800089c <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	4b4b      	ldr	r3, [pc, #300]	; (8001424 <interupt_calEncoder+0x3a4>)
 80012f6:	f7ff f9a7 	bl	8000648 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b48      	ldr	r3, [pc, #288]	; (8001428 <interupt_calEncoder+0x3a8>)
 8001308:	f7ff fac8 	bl	800089c <__aeabi_ddiv>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800131c:	f7ff fabe 	bl	800089c <__aeabi_ddiv>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	4b3f      	ldr	r3, [pc, #252]	; (800142c <interupt_calEncoder+0x3ac>)
 800132e:	f7ff f98b 	bl	8000648 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	a32d      	add	r3, pc, #180	; (adr r3, 80013f0 <interupt_calEncoder+0x370>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff faac 	bl	800089c <__aeabi_ddiv>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fc54 	bl	8000bf8 <__aeabi_d2f>
 8001350:	4603      	mov	r3, r0
 8001352:	4a38      	ldr	r2, [pc, #224]	; (8001434 <interupt_calEncoder+0x3b4>)
 8001354:	6013      	str	r3, [r2, #0]
	E_distanceL += E_speedL * INTERRUPT_TIME;
 8001356:	4b38      	ldr	r3, [pc, #224]	; (8001438 <interupt_calEncoder+0x3b8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f91c 	bl	8000598 <__aeabi_f2d>
 8001360:	4604      	mov	r4, r0
 8001362:	460d      	mov	r5, r1
 8001364:	4b32      	ldr	r3, [pc, #200]	; (8001430 <interupt_calEncoder+0x3b0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f915 	bl	8000598 <__aeabi_f2d>
 800136e:	a320      	add	r3, pc, #128	; (adr r3, 80013f0 <interupt_calEncoder+0x370>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7ff f968 	bl	8000648 <__aeabi_dmul>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4620      	mov	r0, r4
 800137e:	4629      	mov	r1, r5
 8001380:	f7fe ffac 	bl	80002dc <__adddf3>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fc34 	bl	8000bf8 <__aeabi_d2f>
 8001390:	4603      	mov	r3, r0
 8001392:	4a29      	ldr	r2, [pc, #164]	; (8001438 <interupt_calEncoder+0x3b8>)
 8001394:	6013      	str	r3, [r2, #0]
	E_distanceR += E_speedR * INTERRUPT_TIME;
 8001396:	4b29      	ldr	r3, [pc, #164]	; (800143c <interupt_calEncoder+0x3bc>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f8fc 	bl	8000598 <__aeabi_f2d>
 80013a0:	4604      	mov	r4, r0
 80013a2:	460d      	mov	r5, r1
 80013a4:	4b23      	ldr	r3, [pc, #140]	; (8001434 <interupt_calEncoder+0x3b4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8f5 	bl	8000598 <__aeabi_f2d>
 80013ae:	e047      	b.n	8001440 <interupt_calEncoder+0x3c0>
 80013b0:	54411744 	.word	0x54411744
 80013b4:	400921fb 	.word	0x400921fb
 80013b8:	4e70a65b 	.word	0x4e70a65b
 80013bc:	3f882f36 	.word	0x3f882f36
 80013c0:	a858793e 	.word	0xa858793e
 80013c4:	3ff1cd35 	.word	0x3ff1cd35
 80013c8:	00000000 	.word	0x00000000
 80013cc:	4078c000 	.word	0x4078c000
 80013d0:	147ae148 	.word	0x147ae148
 80013d4:	4078fbae 	.word	0x4078fbae
 80013d8:	0a3d70a4 	.word	0x0a3d70a4
 80013dc:	4078efd7 	.word	0x4078efd7
 80013e0:	00000000 	.word	0x00000000
 80013e4:	4125eb2e 	.word	0x4125eb2e
 80013e8:	33333333 	.word	0x33333333
 80013ec:	4125f7be 	.word	0x4125f7be
 80013f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013f4:	3f50624d 	.word	0x3f50624d
 80013f8:	5c28f5c3 	.word	0x5c28f5c3
 80013fc:	40792a8f 	.word	0x40792a8f
 8001400:	200006d8 	.word	0x200006d8
 8001404:	20000218 	.word	0x20000218
 8001408:	43340000 	.word	0x43340000
 800140c:	43b40000 	.word	0x43b40000
 8001410:	c3340000 	.word	0xc3340000
 8001414:	200006dc 	.word	0x200006dc
 8001418:	2000021c 	.word	0x2000021c
 800141c:	40668000 	.word	0x40668000
 8001420:	40790000 	.word	0x40790000
 8001424:	40870800 	.word	0x40870800
 8001428:	40868000 	.word	0x40868000
 800142c:	408f4000 	.word	0x408f4000
 8001430:	20000228 	.word	0x20000228
 8001434:	2000022c 	.word	0x2000022c
 8001438:	20000220 	.word	0x20000220
 800143c:	20000224 	.word	0x20000224
 8001440:	a314      	add	r3, pc, #80	; (adr r3, 8001494 <interupt_calEncoder+0x414>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff f8ff 	bl	8000648 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4620      	mov	r0, r4
 8001450:	4629      	mov	r1, r5
 8001452:	f7fe ff43 	bl	80002dc <__adddf3>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fbcb 	bl	8000bf8 <__aeabi_d2f>
 8001462:	4603      	mov	r3, r0
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <interupt_calEncoder+0x400>)
 8001466:	6013      	str	r3, [r2, #0]

	encoder_L0=encoder_L;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <interupt_calEncoder+0x404>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a06      	ldr	r2, [pc, #24]	; (8001488 <interupt_calEncoder+0x408>)
 800146e:	6013      	str	r3, [r2, #0]
	encoder_R0=encoder_R;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <interupt_calEncoder+0x40c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a06      	ldr	r2, [pc, #24]	; (8001490 <interupt_calEncoder+0x410>)
 8001476:	6013      	str	r3, [r2, #0]

}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bdb0      	pop	{r4, r5, r7, pc}
 8001480:	20000224 	.word	0x20000224
 8001484:	200006dc 	.word	0x200006dc
 8001488:	2000021c 	.word	0x2000021c
 800148c:	200006d8 	.word	0x200006d8
 8001490:	20000218 	.word	0x20000218
 8001494:	d2f1a9fc 	.word	0xd2f1a9fc
 8001498:	3f50624d 	.word	0x3f50624d
 800149c:	00000000 	.word	0x00000000

080014a0 <interupt_calFusion>:


void interupt_calFusion(void) {
 80014a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014a4:	af00      	add	r7, sp, #0


	E_lpf_speedL = straight_alpha * E_lpf_speedL + (1 - straight_alpha) * E_speedL;
 80014a6:	4ba4      	ldr	r3, [pc, #656]	; (8001738 <interupt_calFusion+0x298>)
 80014a8:	ed93 7a00 	vldr	s14, [r3]
 80014ac:	4ba3      	ldr	r3, [pc, #652]	; (800173c <interupt_calFusion+0x29c>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b6:	4ba0      	ldr	r3, [pc, #640]	; (8001738 <interupt_calFusion+0x298>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014c4:	4b9e      	ldr	r3, [pc, #632]	; (8001740 <interupt_calFusion+0x2a0>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d2:	4b9a      	ldr	r3, [pc, #616]	; (800173c <interupt_calFusion+0x29c>)
 80014d4:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_speedR = straight_alpha * E_lpf_speedR + (1 - straight_alpha) * E_speedR;
 80014d8:	4b97      	ldr	r3, [pc, #604]	; (8001738 <interupt_calFusion+0x298>)
 80014da:	ed93 7a00 	vldr	s14, [r3]
 80014de:	4b99      	ldr	r3, [pc, #612]	; (8001744 <interupt_calFusion+0x2a4>)
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e8:	4b93      	ldr	r3, [pc, #588]	; (8001738 <interupt_calFusion+0x298>)
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014f6:	4b94      	ldr	r3, [pc, #592]	; (8001748 <interupt_calFusion+0x2a8>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001504:	4b8f      	ldr	r3, [pc, #572]	; (8001744 <interupt_calFusion+0x2a4>)
 8001506:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_distanceL += E_lpf_speedL * INTERRUPT_TIME;
 800150a:	4b90      	ldr	r3, [pc, #576]	; (800174c <interupt_calFusion+0x2ac>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f842 	bl	8000598 <__aeabi_f2d>
 8001514:	4604      	mov	r4, r0
 8001516:	460d      	mov	r5, r1
 8001518:	4b88      	ldr	r3, [pc, #544]	; (800173c <interupt_calFusion+0x29c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f83b 	bl	8000598 <__aeabi_f2d>
 8001522:	a383      	add	r3, pc, #524	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7ff f88e 	bl	8000648 <__aeabi_dmul>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4620      	mov	r0, r4
 8001532:	4629      	mov	r1, r5
 8001534:	f7fe fed2 	bl	80002dc <__adddf3>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	f7ff fb5a 	bl	8000bf8 <__aeabi_d2f>
 8001544:	4603      	mov	r3, r0
 8001546:	4a81      	ldr	r2, [pc, #516]	; (800174c <interupt_calFusion+0x2ac>)
 8001548:	6013      	str	r3, [r2, #0]
	E_lpf_distanceR += E_lpf_speedR * INTERRUPT_TIME;
 800154a:	4b81      	ldr	r3, [pc, #516]	; (8001750 <interupt_calFusion+0x2b0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f822 	bl	8000598 <__aeabi_f2d>
 8001554:	4604      	mov	r4, r0
 8001556:	460d      	mov	r5, r1
 8001558:	4b7a      	ldr	r3, [pc, #488]	; (8001744 <interupt_calFusion+0x2a4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff f81b 	bl	8000598 <__aeabi_f2d>
 8001562:	a373      	add	r3, pc, #460	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7ff f86e 	bl	8000648 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4620      	mov	r0, r4
 8001572:	4629      	mov	r1, r5
 8001574:	f7fe feb2 	bl	80002dc <__adddf3>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fb3a 	bl	8000bf8 <__aeabi_d2f>
 8001584:	4603      	mov	r3, r0
 8001586:	4a72      	ldr	r2, [pc, #456]	; (8001750 <interupt_calFusion+0x2b0>)
 8001588:	6013      	str	r3, [r2, #0]
	//G_hpf_speedR = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
	//G_hpf_distanceL += G_hpf_speedL * INTERRUPT_TIME;
	//G_hpf_distanceR += G_hpf_speedR * INTERRUPT_TIME;


	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedL;
 800158a:	4b6b      	ldr	r3, [pc, #428]	; (8001738 <interupt_calFusion+0x298>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff f802 	bl	8000598 <__aeabi_f2d>
 8001594:	4604      	mov	r4, r0
 8001596:	460d      	mov	r5, r1
 8001598:	4b6e      	ldr	r3, [pc, #440]	; (8001754 <interupt_calFusion+0x2b4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe fffb 	bl	8000598 <__aeabi_f2d>
 80015a2:	4680      	mov	r8, r0
 80015a4:	4689      	mov	r9, r1
 80015a6:	4b6c      	ldr	r3, [pc, #432]	; (8001758 <interupt_calFusion+0x2b8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe fff4 	bl	8000598 <__aeabi_f2d>
 80015b0:	a35f      	add	r3, pc, #380	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7ff f847 	bl	8000648 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4640      	mov	r0, r8
 80015c0:	4649      	mov	r1, r9
 80015c2:	f7fe fe8b 	bl	80002dc <__adddf3>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7ff f83b 	bl	8000648 <__aeabi_dmul>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4614      	mov	r4, r2
 80015d8:	461d      	mov	r5, r3
 80015da:	4b57      	ldr	r3, [pc, #348]	; (8001738 <interupt_calFusion+0x298>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015e8:	4b55      	ldr	r3, [pc, #340]	; (8001740 <interupt_calFusion+0x2a0>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f2:	ee17 0a90 	vmov	r0, s15
 80015f6:	f7fe ffcf 	bl	8000598 <__aeabi_f2d>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4620      	mov	r0, r4
 8001600:	4629      	mov	r1, r5
 8001602:	f7fe fe6b 	bl	80002dc <__adddf3>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff faf3 	bl	8000bf8 <__aeabi_d2f>
 8001612:	4603      	mov	r3, r0
 8001614:	4a4f      	ldr	r2, [pc, #316]	; (8001754 <interupt_calFusion+0x2b4>)
 8001616:	6013      	str	r3, [r2, #0]
	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedR;
 8001618:	4b47      	ldr	r3, [pc, #284]	; (8001738 <interupt_calFusion+0x298>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ffbb 	bl	8000598 <__aeabi_f2d>
 8001622:	4604      	mov	r4, r0
 8001624:	460d      	mov	r5, r1
 8001626:	4b4b      	ldr	r3, [pc, #300]	; (8001754 <interupt_calFusion+0x2b4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ffb4 	bl	8000598 <__aeabi_f2d>
 8001630:	4680      	mov	r8, r0
 8001632:	4689      	mov	r9, r1
 8001634:	4b48      	ldr	r3, [pc, #288]	; (8001758 <interupt_calFusion+0x2b8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ffad 	bl	8000598 <__aeabi_f2d>
 800163e:	a33c      	add	r3, pc, #240	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7ff f800 	bl	8000648 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4640      	mov	r0, r8
 800164e:	4649      	mov	r1, r9
 8001650:	f7fe fe44 	bl	80002dc <__adddf3>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4620      	mov	r0, r4
 800165a:	4629      	mov	r1, r5
 800165c:	f7fe fff4 	bl	8000648 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4614      	mov	r4, r2
 8001666:	461d      	mov	r5, r3
 8001668:	4b33      	ldr	r3, [pc, #204]	; (8001738 <interupt_calFusion+0x298>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001672:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001676:	4b34      	ldr	r3, [pc, #208]	; (8001748 <interupt_calFusion+0x2a8>)
 8001678:	edd3 7a00 	vldr	s15, [r3]
 800167c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001680:	ee17 0a90 	vmov	r0, s15
 8001684:	f7fe ff88 	bl	8000598 <__aeabi_f2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7fe fe24 	bl	80002dc <__adddf3>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff faac 	bl	8000bf8 <__aeabi_d2f>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a2e      	ldr	r2, [pc, #184]	; (800175c <interupt_calFusion+0x2bc>)
 80016a4:	6013      	str	r3, [r2, #0]
	fusion_distanceL += fusion_speedL * INTERRUPT_TIME;
 80016a6:	4b2e      	ldr	r3, [pc, #184]	; (8001760 <interupt_calFusion+0x2c0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff74 	bl	8000598 <__aeabi_f2d>
 80016b0:	4604      	mov	r4, r0
 80016b2:	460d      	mov	r5, r1
 80016b4:	4b27      	ldr	r3, [pc, #156]	; (8001754 <interupt_calFusion+0x2b4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff6d 	bl	8000598 <__aeabi_f2d>
 80016be:	a31c      	add	r3, pc, #112	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ffc0 	bl	8000648 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4620      	mov	r0, r4
 80016ce:	4629      	mov	r1, r5
 80016d0:	f7fe fe04 	bl	80002dc <__adddf3>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f7ff fa8c 	bl	8000bf8 <__aeabi_d2f>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <interupt_calFusion+0x2c0>)
 80016e4:	6013      	str	r3, [r2, #0]
	fusion_distanceR += fusion_speedR * INTERRUPT_TIME;
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <interupt_calFusion+0x2c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff54 	bl	8000598 <__aeabi_f2d>
 80016f0:	4604      	mov	r4, r0
 80016f2:	460d      	mov	r5, r1
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <interupt_calFusion+0x2bc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff4d 	bl	8000598 <__aeabi_f2d>
 80016fe:	a30c      	add	r3, pc, #48	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe ffa0 	bl	8000648 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4620      	mov	r0, r4
 800170e:	4629      	mov	r1, r5
 8001710:	f7fe fde4 	bl	80002dc <__adddf3>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff fa6c 	bl	8000bf8 <__aeabi_d2f>
 8001720:	4603      	mov	r3, r0
 8001722:	4a10      	ldr	r2, [pc, #64]	; (8001764 <interupt_calFusion+0x2c4>)
 8001724:	6013      	str	r3, [r2, #0]

}
 8001726:	bf00      	nop
 8001728:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800172c:	f3af 8000 	nop.w
 8001730:	d2f1a9fc 	.word	0xd2f1a9fc
 8001734:	3f50624d 	.word	0x3f50624d
 8001738:	20000260 	.word	0x20000260
 800173c:	20000238 	.word	0x20000238
 8001740:	20000228 	.word	0x20000228
 8001744:	2000023c 	.word	0x2000023c
 8001748:	2000022c 	.word	0x2000022c
 800174c:	20000230 	.word	0x20000230
 8001750:	20000234 	.word	0x20000234
 8001754:	20000258 	.word	0x20000258
 8001758:	20000280 	.word	0x20000280
 800175c:	2000025c 	.word	0x2000025c
 8001760:	20000250 	.word	0x20000250
 8001764:	20000254 	.word	0x20000254

08001768 <reset_gyro>:
float accelY_offset;

float angle_speed_ave[10];


void reset_gyro(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
	int s = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
	angle = 0;
 8001772:	4b3c      	ldr	r3, [pc, #240]	; (8001864 <reset_gyro+0xfc>)
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
	omegaZ_offset=0;
 800177a:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <reset_gyro+0x100>)
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	601a      	str	r2, [r3, #0]

	for (s = 1; s <= 1000; s++) {
 8001782:	2301      	movs	r3, #1
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	e026      	b.n	80017d6 <reset_gyro+0x6e>
		//ICM20602_DataUpdate();
		omegaZ_offset += gyro.omega_z;
 8001788:	4b38      	ldr	r3, [pc, #224]	; (800186c <reset_gyro+0x104>)
 800178a:	ed93 7a02 	vldr	s14, [r3, #8]
 800178e:	4b36      	ldr	r3, [pc, #216]	; (8001868 <reset_gyro+0x100>)
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001798:	4b33      	ldr	r3, [pc, #204]	; (8001868 <reset_gyro+0x100>)
 800179a:	edc3 7a00 	vstr	s15, [r3]
		omegaX_offset += gyro.omega_x;
 800179e:	4b33      	ldr	r3, [pc, #204]	; (800186c <reset_gyro+0x104>)
 80017a0:	ed93 7a00 	vldr	s14, [r3]
 80017a4:	4b32      	ldr	r3, [pc, #200]	; (8001870 <reset_gyro+0x108>)
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ae:	4b30      	ldr	r3, [pc, #192]	; (8001870 <reset_gyro+0x108>)
 80017b0:	edc3 7a00 	vstr	s15, [r3]
		accelY_offset += gyro.accel_y;
 80017b4:	4b2d      	ldr	r3, [pc, #180]	; (800186c <reset_gyro+0x104>)
 80017b6:	ed93 7a04 	vldr	s14, [r3, #16]
 80017ba:	4b2e      	ldr	r3, [pc, #184]	; (8001874 <reset_gyro+0x10c>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c4:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <reset_gyro+0x10c>)
 80017c6:	edc3 7a00 	vstr	s15, [r3]
		wait_ms_NoReset(1);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f006 fba0 	bl	8007f10 <wait_ms_NoReset>
	for (s = 1; s <= 1000; s++) {
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3301      	adds	r3, #1
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017dc:	ddd4      	ble.n	8001788 <reset_gyro+0x20>
	}
	omegaZ_offset = omegaZ_offset / 1000;
 80017de:	4b22      	ldr	r3, [pc, #136]	; (8001868 <reset_gyro+0x100>)
 80017e0:	ed93 7a00 	vldr	s14, [r3]
 80017e4:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001878 <reset_gyro+0x110>
 80017e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ec:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <reset_gyro+0x100>)
 80017ee:	edc3 7a00 	vstr	s15, [r3]
	omegaX_offset = omegaX_offset / 1000;
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <reset_gyro+0x108>)
 80017f4:	ed93 7a00 	vldr	s14, [r3]
 80017f8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001878 <reset_gyro+0x110>
 80017fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <reset_gyro+0x108>)
 8001802:	edc3 7a00 	vstr	s15, [r3]
	accelY_offset = accelY_offset / 1000;
 8001806:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <reset_gyro+0x10c>)
 8001808:	ed93 7a00 	vldr	s14, [r3]
 800180c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001878 <reset_gyro+0x110>
 8001810:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <reset_gyro+0x10c>)
 8001816:	edc3 7a00 	vstr	s15, [r3]
	//オフセットする文
	//printf("%f,%f\n",gyro.omega_z,omegaZ_offset);

	angle = 0;
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <reset_gyro+0xfc>)
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
	anglex = 0;
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <reset_gyro+0x114>)
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
	gf_speed = 0;
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <reset_gyro+0x118>)
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
	gf_distance = 0;
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <reset_gyro+0x11c>)
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	e009      	b.n	8001854 <reset_gyro+0xec>
		angle_speed_ave[s] = 0;
 8001840:	4a11      	ldr	r2, [pc, #68]	; (8001888 <reset_gyro+0x120>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3301      	adds	r3, #1
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b09      	cmp	r3, #9
 8001858:	ddf2      	ble.n	8001840 <reset_gyro+0xd8>
	}
}
 800185a:	bf00      	nop
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000264 	.word	0x20000264
 8001868:	20000288 	.word	0x20000288
 800186c:	200006e4 	.word	0x200006e4
 8001870:	20000284 	.word	0x20000284
 8001874:	2000028c 	.word	0x2000028c
 8001878:	447a0000 	.word	0x447a0000
 800187c:	2000026c 	.word	0x2000026c
 8001880:	20000278 	.word	0x20000278
 8001884:	2000027c 	.word	0x2000027c
 8001888:	20000290 	.word	0x20000290
 800188c:	00000000 	.word	0x00000000

08001890 <interrupt_calGyro>:

void interrupt_calGyro(void) {
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
	int j = 9;
 8001896:	2309      	movs	r3, #9
 8001898:	607b      	str	r3, [r7, #4]
	//angle_speed0 = angle_speed;

	for (j = 9; j >= 1; j--) {
 800189a:	2309      	movs	r3, #9
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	e00d      	b.n	80018bc <interrupt_calGyro+0x2c>
		angle_speed_ave[j] = angle_speed_ave[j - 1];
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	4aa6      	ldr	r2, [pc, #664]	; (8001b40 <interrupt_calGyro+0x2b0>)
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	49a4      	ldr	r1, [pc, #656]	; (8001b40 <interrupt_calGyro+0x2b0>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	601a      	str	r2, [r3, #0]
	for (j = 9; j >= 1; j--) {
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	dcee      	bgt.n	80018a0 <interrupt_calGyro+0x10>
	}
	angle_speed_ave[0] = (gyro.omega_z - omegaZ_offset)*GYRO_COEFFICIENT;//*0.9525321206299 ;//* 90 / 96*3690/3600*(3600-17)/3600;
 80018c2:	4ba0      	ldr	r3, [pc, #640]	; (8001b44 <interrupt_calGyro+0x2b4>)
 80018c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80018c8:	4b9f      	ldr	r3, [pc, #636]	; (8001b48 <interrupt_calGyro+0x2b8>)
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d2:	ee17 0a90 	vmov	r0, s15
 80018d6:	f7fe fe5f 	bl	8000598 <__aeabi_f2d>
 80018da:	a387      	add	r3, pc, #540	; (adr r3, 8001af8 <interrupt_calGyro+0x268>)
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	f7fe feb2 	bl	8000648 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	a384      	add	r3, pc, #528	; (adr r3, 8001b00 <interrupt_calGyro+0x270>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe fea9 	bl	8000648 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	a382      	add	r3, pc, #520	; (adr r3, 8001b08 <interrupt_calGyro+0x278>)
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	f7fe ffca 	bl	800089c <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f7ff f972 	bl	8000bf8 <__aeabi_d2f>
 8001914:	4603      	mov	r3, r0
 8001916:	4a8a      	ldr	r2, [pc, #552]	; (8001b40 <interrupt_calGyro+0x2b0>)
 8001918:	6013      	str	r3, [r2, #0]

	/*angle_speed = ((angle_speed_ave[0] + angle_speed_ave[1] + angle_speed_ave[2]
			+ angle_speed_ave[3] + angle_speed_ave[4] + angle_speed_ave[5]
			+ angle_speed_ave[6] + angle_speed_ave[7] + angle_speed_ave[8]
			+ angle_speed_ave[9]) / 10);*/
	angle_speed = angle_speed_ave[0];
 800191a:	4b89      	ldr	r3, [pc, #548]	; (8001b40 <interrupt_calGyro+0x2b0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a8b      	ldr	r2, [pc, #556]	; (8001b4c <interrupt_calGyro+0x2bc>)
 8001920:	6013      	str	r3, [r2, #0]
	//angle_speed=(gyro.omega_z-omegaZ_offset)*90/94;//deg/sec
	angle_speedx=gyro.omega_x;
 8001922:	4b88      	ldr	r3, [pc, #544]	; (8001b44 <interrupt_calGyro+0x2b4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a8a      	ldr	r2, [pc, #552]	; (8001b50 <interrupt_calGyro+0x2c0>)
 8001928:	6013      	str	r3, [r2, #0]
	angle_speedx_set=(gyro.omega_x - omegaX_offset);
 800192a:	4b86      	ldr	r3, [pc, #536]	; (8001b44 <interrupt_calGyro+0x2b4>)
 800192c:	ed93 7a00 	vldr	s14, [r3]
 8001930:	4b88      	ldr	r3, [pc, #544]	; (8001b54 <interrupt_calGyro+0x2c4>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193a:	4b87      	ldr	r3, [pc, #540]	; (8001b58 <interrupt_calGyro+0x2c8>)
 800193c:	edc3 7a00 	vstr	s15, [r3]
	angle += 0.001 * angle_speed; //deg
 8001940:	4b86      	ldr	r3, [pc, #536]	; (8001b5c <interrupt_calGyro+0x2cc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fe27 	bl	8000598 <__aeabi_f2d>
 800194a:	4604      	mov	r4, r0
 800194c:	460d      	mov	r5, r1
 800194e:	4b7f      	ldr	r3, [pc, #508]	; (8001b4c <interrupt_calGyro+0x2bc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fe20 	bl	8000598 <__aeabi_f2d>
 8001958:	a36d      	add	r3, pc, #436	; (adr r3, 8001b10 <interrupt_calGyro+0x280>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fe73 	bl	8000648 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4620      	mov	r0, r4
 8001968:	4629      	mov	r1, r5
 800196a:	f7fe fcb7 	bl	80002dc <__adddf3>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff f93f 	bl	8000bf8 <__aeabi_d2f>
 800197a:	4603      	mov	r3, r0
 800197c:	4a77      	ldr	r2, [pc, #476]	; (8001b5c <interrupt_calGyro+0x2cc>)
 800197e:	6013      	str	r3, [r2, #0]
	anglex += 0.001 * (gyro.omega_x - omegaX_offset); //deg
 8001980:	4b77      	ldr	r3, [pc, #476]	; (8001b60 <interrupt_calGyro+0x2d0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fe07 	bl	8000598 <__aeabi_f2d>
 800198a:	4604      	mov	r4, r0
 800198c:	460d      	mov	r5, r1
 800198e:	4b6d      	ldr	r3, [pc, #436]	; (8001b44 <interrupt_calGyro+0x2b4>)
 8001990:	ed93 7a00 	vldr	s14, [r3]
 8001994:	4b6f      	ldr	r3, [pc, #444]	; (8001b54 <interrupt_calGyro+0x2c4>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199e:	ee17 0a90 	vmov	r0, s15
 80019a2:	f7fe fdf9 	bl	8000598 <__aeabi_f2d>
 80019a6:	a35a      	add	r3, pc, #360	; (adr r3, 8001b10 <interrupt_calGyro+0x280>)
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	f7fe fe4c 	bl	8000648 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4620      	mov	r0, r4
 80019b6:	4629      	mov	r1, r5
 80019b8:	f7fe fc90 	bl	80002dc <__adddf3>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7ff f918 	bl	8000bf8 <__aeabi_d2f>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a65      	ldr	r2, [pc, #404]	; (8001b60 <interrupt_calGyro+0x2d0>)
 80019cc:	6013      	str	r3, [r2, #0]
	//angle_acceleration = (angle_speed - angle_speed0) * 1000; //deg/sec^2
//+0.12*0.02*angle_speed*angle_speed
	gf_accel = (gyro.accel_y - accelY_offset)*ACCEL_COEFFICIENT*1000*GRAVITATION;
 80019ce:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <interrupt_calGyro+0x2b4>)
 80019d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80019d4:	4b63      	ldr	r3, [pc, #396]	; (8001b64 <interrupt_calGyro+0x2d4>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019de:	ee17 0a90 	vmov	r0, s15
 80019e2:	f7fe fdd9 	bl	8000598 <__aeabi_f2d>
 80019e6:	a34c      	add	r3, pc, #304	; (adr r3, 8001b18 <interrupt_calGyro+0x288>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe fe2c 	bl	8000648 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	a349      	add	r3, pc, #292	; (adr r3, 8001b20 <interrupt_calGyro+0x290>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	f7fe fe23 	bl	8000648 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	a347      	add	r3, pc, #284	; (adr r3, 8001b28 <interrupt_calGyro+0x298>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe ff44 	bl	800089c <__aeabi_ddiv>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <interrupt_calGyro+0x2d8>)
 8001a22:	f7fe fe11 	bl	8000648 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	a340      	add	r3, pc, #256	; (adr r3, 8001b30 <interrupt_calGyro+0x2a0>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe ff32 	bl	800089c <__aeabi_ddiv>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	4b49      	ldr	r3, [pc, #292]	; (8001b6c <interrupt_calGyro+0x2dc>)
 8001a46:	f7fe fdff 	bl	8000648 <__aeabi_dmul>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	a339      	add	r3, pc, #228	; (adr r3, 8001b38 <interrupt_calGyro+0x2a8>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7fe fdf6 	bl	8000648 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	f7ff f8c8 	bl	8000bf8 <__aeabi_d2f>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4a41      	ldr	r2, [pc, #260]	; (8001b70 <interrupt_calGyro+0x2e0>)
 8001a6c:	6013      	str	r3, [r2, #0]
	gf_speed += gf_accel * INTERRUPT_TIME;
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <interrupt_calGyro+0x2e4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd90 	bl	8000598 <__aeabi_f2d>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	460d      	mov	r5, r1
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <interrupt_calGyro+0x2e0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd89 	bl	8000598 <__aeabi_f2d>
 8001a86:	a322      	add	r3, pc, #136	; (adr r3, 8001b10 <interrupt_calGyro+0x280>)
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	f7fe fddc 	bl	8000648 <__aeabi_dmul>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4620      	mov	r0, r4
 8001a96:	4629      	mov	r1, r5
 8001a98:	f7fe fc20 	bl	80002dc <__adddf3>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f7ff f8a8 	bl	8000bf8 <__aeabi_d2f>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4a32      	ldr	r2, [pc, #200]	; (8001b74 <interrupt_calGyro+0x2e4>)
 8001aac:	6013      	str	r3, [r2, #0]
	gf_distance += gf_speed * INTERRUPT_TIME;
 8001aae:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <interrupt_calGyro+0x2e8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd70 	bl	8000598 <__aeabi_f2d>
 8001ab8:	4604      	mov	r4, r0
 8001aba:	460d      	mov	r5, r1
 8001abc:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <interrupt_calGyro+0x2e4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd69 	bl	8000598 <__aeabi_f2d>
 8001ac6:	a312      	add	r3, pc, #72	; (adr r3, 8001b10 <interrupt_calGyro+0x280>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fdbc 	bl	8000648 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	f7fe fc00 	bl	80002dc <__adddf3>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff f888 	bl	8000bf8 <__aeabi_d2f>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4a23      	ldr	r2, [pc, #140]	; (8001b78 <interrupt_calGyro+0x2e8>)
 8001aec:	6013      	str	r3, [r2, #0]




}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bdb0      	pop	{r4, r5, r7, pc}
 8001af6:	bf00      	nop
 8001af8:	70a3d70a 	.word	0x70a3d70a
 8001afc:	3fef0a3d 	.word	0x3fef0a3d
 8001b00:	00000000 	.word	0x00000000
 8001b04:	40acd400 	.word	0x40acd400
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	40ac2000 	.word	0x40ac2000
 8001b10:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b14:	3f50624d 	.word	0x3f50624d
 8001b18:	0fcf80dc 	.word	0x0fcf80dc
 8001b1c:	3ff0a423 	.word	0x3ff0a423
 8001b20:	00000000 	.word	0x00000000
 8001b24:	4078c000 	.word	0x4078c000
 8001b28:	00000000 	.word	0x00000000
 8001b2c:	4077d000 	.word	0x4077d000
 8001b30:	00000000 	.word	0x00000000
 8001b34:	407a7000 	.word	0x407a7000
 8001b38:	3a92a305 	.word	0x3a92a305
 8001b3c:	40239d01 	.word	0x40239d01
 8001b40:	20000290 	.word	0x20000290
 8001b44:	200006e4 	.word	0x200006e4
 8001b48:	20000288 	.word	0x20000288
 8001b4c:	20000268 	.word	0x20000268
 8001b50:	20000270 	.word	0x20000270
 8001b54:	20000284 	.word	0x20000284
 8001b58:	20000274 	.word	0x20000274
 8001b5c:	20000264 	.word	0x20000264
 8001b60:	2000026c 	.word	0x2000026c
 8001b64:	2000028c 	.word	0x2000028c
 8001b68:	40790000 	.word	0x40790000
 8001b6c:	408f4000 	.word	0x408f4000
 8001b70:	20000280 	.word	0x20000280
 8001b74:	20000278 	.word	0x20000278
 8001b78:	2000027c 	.word	0x2000027c
 8001b7c:	00000000 	.word	0x00000000

08001b80 <battcheak>:
/*******************************************************************/
/*	バッテリーの確認				(battcheak)	*/
/*******************************************************************/
/*	バッテリーの残電圧のチェックし、小さい場合は機能の停止を行う．	．						*/
/*******************************************************************/
void battcheak(void){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
int i;
	for(i = 0;i <= 20-1;i++){
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	e00f      	b.n	8001bac <battcheak+0x2c>
		g_V_battery[i]=pl_getbatt();
 8001b8c:	f005 ff64 	bl	8007a58 <pl_getbatt>
 8001b90:	eef0 7a40 	vmov.f32	s15, s0
 8001b94:	4a34      	ldr	r2, [pc, #208]	; (8001c68 <battcheak+0xe8>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	edc3 7a00 	vstr	s15, [r3]
		wait_ms(10);
 8001ba0:	200a      	movs	r0, #10
 8001ba2:	f006 f971 	bl	8007e88 <wait_ms>
	for(i = 0;i <= 20-1;i++){
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b13      	cmp	r3, #19
 8001bb0:	ddec      	ble.n	8001b8c <battcheak+0xc>
	}

	g_V_battery_mean=0;
 8001bb2:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <battcheak+0xec>)
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
	for(i = 0;i <= 20-1;i++){
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	e010      	b.n	8001be2 <battcheak+0x62>
	g_V_battery_mean+=g_V_battery[i];
 8001bc0:	4a29      	ldr	r2, [pc, #164]	; (8001c68 <battcheak+0xe8>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	ed93 7a00 	vldr	s14, [r3]
 8001bcc:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <battcheak+0xec>)
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd6:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <battcheak+0xec>)
 8001bd8:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0;i <= 20-1;i++){
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3301      	adds	r3, #1
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b13      	cmp	r3, #19
 8001be6:	ddeb      	ble.n	8001bc0 <battcheak+0x40>
	}
	g_V_battery_mean/=20;
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <battcheak+0xec>)
 8001bea:	ed93 7a00 	vldr	s14, [r3]
 8001bee:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001bf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <battcheak+0xec>)
 8001bf8:	edc3 7a00 	vstr	s15, [r3]
	printf("BATT=%f\n",g_V_battery_mean);
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <battcheak+0xec>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fcc9 	bl	8000598 <__aeabi_f2d>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4819      	ldr	r0, [pc, #100]	; (8001c70 <battcheak+0xf0>)
 8001c0c:	f01e ffd8 	bl	8020bc0 <iprintf>
	//printf("%f",g_V_battery_mean);
	if(g_V_battery_mean <= BATTLIMIT){
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <battcheak+0xec>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fcbf 	bl	8000598 <__aeabi_f2d>
 8001c1a:	a311      	add	r3, pc, #68	; (adr r3, 8001c60 <battcheak+0xe0>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe ff8e 	bl	8000b40 <__aeabi_dcmple>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d100      	bne.n	8001c2c <battcheak+0xac>
		pl_r_blue_LED(OFF);
		pl_l_blue_LED(OFF);
		wait_ms(500);
		}
	}
}
 8001c2a:	e014      	b.n	8001c56 <battcheak+0xd6>
		pl_r_blue_LED(ON);
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f005 f99b 	bl	8006f68 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8001c32:	2001      	movs	r0, #1
 8001c34:	f005 f9aa 	bl	8006f8c <pl_l_blue_LED>
		wait_ms(500);
 8001c38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c3c:	f006 f924 	bl	8007e88 <wait_ms>
		pl_r_blue_LED(OFF);
 8001c40:	2000      	movs	r0, #0
 8001c42:	f005 f991 	bl	8006f68 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f005 f9a0 	bl	8006f8c <pl_l_blue_LED>
		wait_ms(500);
 8001c4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c50:	f006 f91a 	bl	8007e88 <wait_ms>
		pl_r_blue_LED(ON);
 8001c54:	e7ea      	b.n	8001c2c <battcheak+0xac>
}
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	f3af 8000 	nop.w
 8001c60:	9999999a 	.word	0x9999999a
 8001c64:	400d9999 	.word	0x400d9999
 8001c68:	20000484 	.word	0x20000484
 8001c6c:	200004d4 	.word	0x200004d4
 8001c70:	08023400 	.word	0x08023400

08001c74 <interupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interupt_calSensor(void){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
	int j;

	pl_interupt_getSensor();
 8001c7a:	f006 f88b 	bl	8007d94 <pl_interupt_getSensor>

	for (j = 19; j >= 1; j--) {
 8001c7e:	2313      	movs	r3, #19
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	e037      	b.n	8001cf4 <interupt_calSensor+0x80>
		//g_V_battery[j] = g_V_battery[j - 1];
		g_sensor[0][j] = g_sensor[0][j - 1];
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	4a56      	ldr	r2, [pc, #344]	; (8001de4 <interupt_calSensor+0x170>)
 8001c8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c8e:	4955      	ldr	r1, [pc, #340]	; (8001de4 <interupt_calSensor+0x170>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	4a52      	ldr	r2, [pc, #328]	; (8001de4 <interupt_calSensor+0x170>)
 8001c9c:	3314      	adds	r3, #20
 8001c9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ca2:	4950      	ldr	r1, [pc, #320]	; (8001de4 <interupt_calSensor+0x170>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3314      	adds	r3, #20
 8001ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	4a4c      	ldr	r2, [pc, #304]	; (8001de4 <interupt_calSensor+0x170>)
 8001cb2:	3328      	adds	r3, #40	; 0x28
 8001cb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cb8:	494a      	ldr	r1, [pc, #296]	; (8001de4 <interupt_calSensor+0x170>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3328      	adds	r3, #40	; 0x28
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	4a47      	ldr	r2, [pc, #284]	; (8001de4 <interupt_calSensor+0x170>)
 8001cc8:	333c      	adds	r3, #60	; 0x3c
 8001cca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cce:	4945      	ldr	r1, [pc, #276]	; (8001de4 <interupt_calSensor+0x170>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	333c      	adds	r3, #60	; 0x3c
 8001cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	4a41      	ldr	r2, [pc, #260]	; (8001de4 <interupt_calSensor+0x170>)
 8001cde:	3350      	adds	r3, #80	; 0x50
 8001ce0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ce4:	493f      	ldr	r1, [pc, #252]	; (8001de4 <interupt_calSensor+0x170>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3350      	adds	r3, #80	; 0x50
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	dcc4      	bgt.n	8001c84 <interupt_calSensor+0x10>
	}
	//g_V_battery[0] = g_V_batt;
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 8001cfa:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <interupt_calSensor+0x174>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <interupt_calSensor+0x178>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	4a37      	ldr	r2, [pc, #220]	; (8001de4 <interupt_calSensor+0x170>)
 8001d08:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 8001d0a:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <interupt_calSensor+0x174>)
 8001d0c:	885b      	ldrh	r3, [r3, #2]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b36      	ldr	r3, [pc, #216]	; (8001dec <interupt_calSensor+0x178>)
 8001d12:	885b      	ldrh	r3, [r3, #2]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	4a33      	ldr	r2, [pc, #204]	; (8001de4 <interupt_calSensor+0x170>)
 8001d18:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 8001d1a:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <interupt_calSensor+0x174>)
 8001d1c:	889b      	ldrh	r3, [r3, #4]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b32      	ldr	r3, [pc, #200]	; (8001dec <interupt_calSensor+0x178>)
 8001d22:	889b      	ldrh	r3, [r3, #4]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	4a2f      	ldr	r2, [pc, #188]	; (8001de4 <interupt_calSensor+0x170>)
 8001d28:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 8001d2c:	4b2e      	ldr	r3, [pc, #184]	; (8001de8 <interupt_calSensor+0x174>)
 8001d2e:	88db      	ldrh	r3, [r3, #6]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <interupt_calSensor+0x178>)
 8001d34:	88db      	ldrh	r3, [r3, #6]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	4a2a      	ldr	r2, [pc, #168]	; (8001de4 <interupt_calSensor+0x170>)
 8001d3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <interupt_calSensor+0x174>)
 8001d40:	891b      	ldrh	r3, [r3, #8]
 8001d42:	461a      	mov	r2, r3
 8001d44:	4b29      	ldr	r3, [pc, #164]	; (8001dec <interupt_calSensor+0x178>)
 8001d46:	891b      	ldrh	r3, [r3, #8]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <interupt_calSensor+0x170>)
 8001d4c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	for (j = 0; j <= 4; j++) {
 8001d50:	2300      	movs	r3, #0
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	e03d      	b.n	8001dd2 <interupt_calSensor+0x15e>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 8001d56:	4923      	ldr	r1, [pc, #140]	; (8001de4 <interupt_calSensor+0x170>)
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	440b      	add	r3, r1
 8001d64:	6819      	ldr	r1, [r3, #0]
 8001d66:	481f      	ldr	r0, [pc, #124]	; (8001de4 <interupt_calSensor+0x170>)
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	4403      	add	r3, r0
 8001d74:	332c      	adds	r3, #44	; 0x2c
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	1aca      	subs	r2, r1, r3
 8001d7a:	491d      	ldr	r1, [pc, #116]	; (8001df0 <interupt_calSensor+0x17c>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][6];
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 8001d82:	4918      	ldr	r1, [pc, #96]	; (8001de4 <interupt_calSensor+0x170>)
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	440b      	add	r3, r1
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	4814      	ldr	r0, [pc, #80]	; (8001de4 <interupt_calSensor+0x170>)
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	4403      	add	r3, r0
 8001da0:	3304      	adds	r3, #4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4419      	add	r1, r3
 8001da6:	480f      	ldr	r0, [pc, #60]	; (8001de4 <interupt_calSensor+0x170>)
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	4403      	add	r3, r0
 8001db4:	3308      	adds	r3, #8
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	440b      	add	r3, r1
 8001dba:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <interupt_calSensor+0x180>)
 8001dbc:	fb82 1203 	smull	r1, r2, r2, r3
 8001dc0:	17db      	asrs	r3, r3, #31
 8001dc2:	1ad2      	subs	r2, r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	; (8001df8 <interupt_calSensor+0x184>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	ddbe      	ble.n	8001d56 <interupt_calSensor+0xe2>
//	}
//	g_V_battery_mean/=20;



}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200002b8 	.word	0x200002b8
 8001de8:	2000070c 	.word	0x2000070c
 8001dec:	20000718 	.word	0x20000718
 8001df0:	20000448 	.word	0x20000448
 8001df4:	55555556 	.word	0x55555556
 8001df8:	20000470 	.word	0x20000470

08001dfc <Control_mode_Init>:

uint8_t noGoalPillarMode;

float g_V_L,g_V_R;

void Control_mode_Init(void){
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

	modeacc = 0;
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <Control_mode_Init+0x28>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
	g_MotorEnd_flag=0;
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <Control_mode_Init+0x2c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
	mollifier_timer=0;
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <Control_mode_Init+0x30>)
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
	noGoalPillarMode=0;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <Control_mode_Init+0x34>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]

}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	20000528 	.word	0x20000528
 8001e28:	20000805 	.word	0x20000805
 8001e2c:	20000800 	.word	0x20000800
 8001e30:	20000529 	.word	0x20000529

08001e34 <get_duty>:


void get_duty(float V_L, float V_R,int *duty_L,int *duty_R) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e3e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
//トルクの方向決定
// BATT_MEANをいつか可変にしたい願望
	if (V_L >= 0) {
 8001e46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e52:	db14      	blt.n	8001e7e <get_duty+0x4a>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8001e54:	2001      	movs	r0, #1
 8001e56:	f005 fd35 	bl	80078c4 <pl_L_DriveMotor_mode>
		*duty_L = (int) (V_L / g_V_battery_mean * MAXMOTOR);
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <get_duty+0x11c>)
 8001e5c:	ed93 7a00 	vldr	s14, [r3]
 8001e60:	edd7 6a03 	vldr	s13, [r7, #12]
 8001e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e68:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001f54 <get_duty+0x120>
 8001e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e74:	ee17 2a90 	vmov	r2, s15
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e015      	b.n	8001eaa <get_duty+0x76>
	}
	else{
		pl_L_DriveMotor_mode(MOTOR_BACK);
 8001e7e:	2002      	movs	r0, #2
 8001e80:	f005 fd20 	bl	80078c4 <pl_L_DriveMotor_mode>
	    *duty_L = (int) (-V_L / g_V_battery_mean * MAXMOTOR);
 8001e84:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e88:	eef1 6a67 	vneg.f32	s13, s15
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <get_duty+0x11c>)
 8001e8e:	ed93 7a00 	vldr	s14, [r3]
 8001e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e96:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001f54 <get_duty+0x120>
 8001e9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ea2:	ee17 2a90 	vmov	r2, s15
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	601a      	str	r2, [r3, #0]
	}
	if (V_R >= 0) {
 8001eaa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	db14      	blt.n	8001ee2 <get_duty+0xae>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f005 fd2b 	bl	8007914 <pl_R_DriveMotor_mode>
		*duty_R = (int) (V_R / g_V_battery_mean * MAXMOTOR);
 8001ebe:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <get_duty+0x11c>)
 8001ec0:	ed93 7a00 	vldr	s14, [r3]
 8001ec4:	edd7 6a02 	vldr	s13, [r7, #8]
 8001ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ecc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001f54 <get_duty+0x120>
 8001ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ed8:	ee17 2a90 	vmov	r2, s15
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	e015      	b.n	8001f0e <get_duty+0xda>
	}
	else{
		pl_R_DriveMotor_mode(MOTOR_BACK);
 8001ee2:	2002      	movs	r0, #2
 8001ee4:	f005 fd16 	bl	8007914 <pl_R_DriveMotor_mode>
	    *duty_R = (int) (-V_R / g_V_battery_mean * MAXMOTOR);
 8001ee8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eec:	eef1 6a67 	vneg.f32	s13, s15
 8001ef0:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <get_duty+0x11c>)
 8001ef2:	ed93 7a00 	vldr	s14, [r3]
 8001ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001efa:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001f54 <get_duty+0x120>
 8001efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f06:	ee17 2a90 	vmov	r2, s15
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	601a      	str	r2, [r3, #0]
	}
	*duty_L=*duty_L;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	601a      	str	r2, [r3, #0]
	*duty_R=*duty_R;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	601a      	str	r2, [r3, #0]
	//XX
	if (*duty_L >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f240 628c 	movw	r2, #1676	; 0x68c
 8001f26:	4293      	cmp	r3, r2
 8001f28:	dd03      	ble.n	8001f32 <get_duty+0xfe>
		*duty_L = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f240 628d 	movw	r2, #1677	; 0x68d
 8001f30:	601a      	str	r2, [r3, #0]
//		pl_r_blue_LED(ON);
	}
	if (*duty_R >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f240 628c 	movw	r2, #1676	; 0x68c
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	dd03      	ble.n	8001f46 <get_duty+0x112>
		*duty_R = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f240 628d 	movw	r2, #1677	; 0x68d
 8001f44:	601a      	str	r2, [r3, #0]
//		pl_l_blue_LED(ON);
	}

}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200004d4 	.word	0x200004d4
 8001f54:	44d1e000 	.word	0x44d1e000

08001f58 <interupt_DriveMotor>:



void interupt_DriveMotor(void){
 8001f58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f5c:	b08c      	sub	sp, #48	; 0x30
 8001f5e:	af02      	add	r7, sp, #8
	int duty_L=0, duty_R=0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
	float V_L=0, V_R=0;
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
	float PID_all_L,PID_all_R,PID_s,PID_t;
	float PID_w=0;
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
	float feedforward_straight=0,feedforward_turning=0;
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]



	if (modeacc == 0) {
 8001f86:	4bd2      	ldr	r3, [pc, #840]	; (80022d0 <interupt_DriveMotor+0x378>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d108      	bne.n	8001fa0 <interupt_DriveMotor+0x48>
		g_acc_flag=4;
 8001f8e:	4bd1      	ldr	r3, [pc, #836]	; (80022d4 <interupt_DriveMotor+0x37c>)
 8001f90:	2204      	movs	r2, #4
 8001f92:	701a      	strb	r2, [r3, #0]
		g_WallControl_mode=0;
 8001f94:	4bd0      	ldr	r3, [pc, #832]	; (80022d8 <interupt_DriveMotor+0x380>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 8001f9a:	4bd0      	ldr	r3, [pc, #832]	; (80022dc <interupt_DriveMotor+0x384>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]

	}
	if (modeacc == 1) {
 8001fa0:	4bcb      	ldr	r3, [pc, #812]	; (80022d0 <interupt_DriveMotor+0x378>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	f040 828f 	bne.w	80024c8 <interupt_DriveMotor+0x570>
		g_wallCut_mode=1;
 8001faa:	4bcc      	ldr	r3, [pc, #816]	; (80022dc <interupt_DriveMotor+0x384>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8001fb0:	4bcb      	ldr	r3, [pc, #812]	; (80022e0 <interupt_DriveMotor+0x388>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	4aca      	ldr	r2, [pc, #808]	; (80022e0 <interupt_DriveMotor+0x388>)
 8001fb8:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001fba:	4bca      	ldr	r3, [pc, #808]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe faea 	bl	8000598 <__aeabi_f2d>
 8001fc4:	4604      	mov	r4, r0
 8001fc6:	460d      	mov	r5, r1
 8001fc8:	4bc6      	ldr	r3, [pc, #792]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fae3 	bl	8000598 <__aeabi_f2d>
 8001fd2:	a3bb      	add	r3, pc, #748	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8001fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd8:	f7fe fb36 	bl	8000648 <__aeabi_dmul>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4690      	mov	r8, r2
 8001fe2:	4699      	mov	r9, r3
 8001fe4:	4bbf      	ldr	r3, [pc, #764]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fad5 	bl	8000598 <__aeabi_f2d>
 8001fee:	a3b4      	add	r3, pc, #720	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8001ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff4:	f7fe fb28 	bl	8000648 <__aeabi_dmul>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	a3af      	add	r3, pc, #700	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8002002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002006:	f7fe fb1f 	bl	8000648 <__aeabi_dmul>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800201a:	f7fe fc3f 	bl	800089c <__aeabi_ddiv>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4640      	mov	r0, r8
 8002024:	4649      	mov	r1, r9
 8002026:	f7fe f959 	bl	80002dc <__adddf3>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4620      	mov	r0, r4
 8002030:	4629      	mov	r1, r5
 8002032:	f7fe f953 	bl	80002dc <__adddf3>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	f7fe fddb 	bl	8000bf8 <__aeabi_d2f>
 8002042:	4603      	mov	r3, r0
 8002044:	4aa7      	ldr	r2, [pc, #668]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8002046:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002048:	4ba6      	ldr	r3, [pc, #664]	; (80022e4 <interupt_DriveMotor+0x38c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe faa3 	bl	8000598 <__aeabi_f2d>
 8002052:	4604      	mov	r4, r0
 8002054:	460d      	mov	r5, r1
 8002056:	4ba3      	ldr	r3, [pc, #652]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fa9c 	bl	8000598 <__aeabi_f2d>
 8002060:	a397      	add	r3, pc, #604	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe faef 	bl	8000648 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4620      	mov	r0, r4
 8002070:	4629      	mov	r1, r5
 8002072:	f7fe f933 	bl	80002dc <__adddf3>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	f7fe fdbb 	bl	8000bf8 <__aeabi_d2f>
 8002082:	4603      	mov	r3, r0
 8002084:	4a97      	ldr	r2, [pc, #604]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8002086:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002088:	4b97      	ldr	r3, [pc, #604]	; (80022e8 <interupt_DriveMotor+0x390>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa83 	bl	8000598 <__aeabi_f2d>
 8002092:	4604      	mov	r4, r0
 8002094:	460d      	mov	r5, r1
 8002096:	4b94      	ldr	r3, [pc, #592]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fa7c 	bl	8000598 <__aeabi_f2d>
 80020a0:	a387      	add	r3, pc, #540	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe facf 	bl	8000648 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4690      	mov	r8, r2
 80020b0:	4699      	mov	r9, r3
 80020b2:	4b8d      	ldr	r3, [pc, #564]	; (80022e8 <interupt_DriveMotor+0x390>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa6e 	bl	8000598 <__aeabi_f2d>
 80020bc:	a380      	add	r3, pc, #512	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	f7fe fac1 	bl	8000648 <__aeabi_dmul>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	a37c      	add	r3, pc, #496	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 80020d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d4:	f7fe fab8 	bl	8000648 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020e8:	f7fe fbd8 	bl	800089c <__aeabi_ddiv>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4640      	mov	r0, r8
 80020f2:	4649      	mov	r1, r9
 80020f4:	f7fe f8f2 	bl	80002dc <__adddf3>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4620      	mov	r0, r4
 80020fe:	4629      	mov	r1, r5
 8002100:	f7fe f8ec 	bl	80002dc <__adddf3>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	f7fe fd74 	bl	8000bf8 <__aeabi_d2f>
 8002110:	4603      	mov	r3, r0
 8002112:	4a75      	ldr	r2, [pc, #468]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002114:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002116:	4b74      	ldr	r3, [pc, #464]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fa3c 	bl	8000598 <__aeabi_f2d>
 8002120:	4604      	mov	r4, r0
 8002122:	460d      	mov	r5, r1
 8002124:	4b70      	ldr	r3, [pc, #448]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fa35 	bl	8000598 <__aeabi_f2d>
 800212e:	a364      	add	r3, pc, #400	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	f7fe fa88 	bl	8000648 <__aeabi_dmul>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4620      	mov	r0, r4
 800213e:	4629      	mov	r1, r5
 8002140:	f7fe f8cc 	bl	80002dc <__adddf3>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f7fe fd54 	bl	8000bf8 <__aeabi_d2f>
 8002150:	4603      	mov	r3, r0
 8002152:	4a65      	ldr	r2, [pc, #404]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002154:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_straight,&straight);
 8002156:	4b65      	ldr	r3, [pc, #404]	; (80022ec <interupt_DriveMotor+0x394>)
 8002158:	4a62      	ldr	r2, [pc, #392]	; (80022e4 <interupt_DriveMotor+0x38c>)
 800215a:	9201      	str	r2, [sp, #4]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	9200      	str	r2, [sp, #0]
 8002160:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002162:	f006 f88f 	bl	8008284 <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002166:	4b5f      	ldr	r3, [pc, #380]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8002168:	edd3 7a00 	vldr	s15, [r3]
 800216c:	4b5e      	ldr	r3, [pc, #376]	; (80022e8 <interupt_DriveMotor+0x390>)
 800216e:	ed93 7a00 	vldr	s14, [r3]
 8002172:	f107 020c 	add.w	r2, r7, #12
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	eef0 0a47 	vmov.f32	s1, s14
 800217e:	eeb0 0a67 	vmov.f32	s0, s15
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f002 fa27 	bl	80045d8 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 800218a:	4b59      	ldr	r3, [pc, #356]	; (80022f0 <interupt_DriveMotor+0x398>)
 800218c:	ed93 7a00 	vldr	s14, [r3]
 8002190:	4b58      	ldr	r3, [pc, #352]	; (80022f4 <interupt_DriveMotor+0x39c>)
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800219e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021a2:	4b50      	ldr	r3, [pc, #320]	; (80022e4 <interupt_DriveMotor+0x38c>)
 80021a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80021a8:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <interupt_DriveMotor+0x3a0>)
 80021aa:	edd3 6a00 	vldr	s13, [r3]
 80021ae:	4b4e      	ldr	r3, [pc, #312]	; (80022e8 <interupt_DriveMotor+0x390>)
 80021b0:	ed93 6a01 	vldr	s12, [r3, #4]
 80021b4:	1d3a      	adds	r2, r7, #4
 80021b6:	f107 0308 	add.w	r3, r7, #8
 80021ba:	eef0 1a46 	vmov.f32	s3, s12
 80021be:	eeb0 1a66 	vmov.f32	s2, s13
 80021c2:	4611      	mov	r1, r2
 80021c4:	eef0 0a67 	vmov.f32	s1, s15
 80021c8:	eeb0 0a47 	vmov.f32	s0, s14
 80021cc:	4618      	mov	r0, r3
 80021ce:	f001 ff57 	bl	8004080 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 80021d2:	f002 fc19 	bl	8004a08 <calWallConrol>
 80021d6:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 80021da:	ed97 7a04 	vldr	s14, [r7, #16]
 80021de:	edd7 7a03 	vldr	s15, [r7, #12]
 80021e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80021ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80021f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80021fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 8002202:	ed97 7a04 	vldr	s14, [r7, #16]
 8002206:	edd7 7a03 	vldr	s15, [r7, #12]
 800220a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800220e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002216:	edd7 7a02 	vldr	s15, [r7, #8]
 800221a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800221e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002226:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800222a:	ed97 7a04 	vldr	s14, [r7, #16]
 800222e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002236:	ee17 0a90 	vmov	r0, s15
 800223a:	f7fe f9ad 	bl	8000598 <__aeabi_f2d>
 800223e:	4604      	mov	r4, r0
 8002240:	460d      	mov	r5, r1
 8002242:	4b2e      	ldr	r3, [pc, #184]	; (80022fc <interupt_DriveMotor+0x3a4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe f9a6 	bl	8000598 <__aeabi_f2d>
 800224c:	a31e      	add	r3, pc, #120	; (adr r3, 80022c8 <interupt_DriveMotor+0x370>)
 800224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002252:	f7fe f9f9 	bl	8000648 <__aeabi_dmul>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4620      	mov	r0, r4
 800225c:	4629      	mov	r1, r5
 800225e:	f7fe fc83 	bl	8000b68 <__aeabi_dcmpgt>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 808d 	beq.w	8002384 <interupt_DriveMotor+0x42c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800226a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800226c:	f7fe f994 	bl	8000598 <__aeabi_f2d>
 8002270:	4604      	mov	r4, r0
 8002272:	460d      	mov	r5, r1
 8002274:	4b21      	ldr	r3, [pc, #132]	; (80022fc <interupt_DriveMotor+0x3a4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f98d 	bl	8000598 <__aeabi_f2d>
 800227e:	a312      	add	r3, pc, #72	; (adr r3, 80022c8 <interupt_DriveMotor+0x370>)
 8002280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002284:	f7fe f9e0 	bl	8000648 <__aeabi_dmul>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4690      	mov	r8, r2
 800228e:	4699      	mov	r9, r3
 8002290:	ed97 7a04 	vldr	s14, [r7, #16]
 8002294:	edd7 7a02 	vldr	s15, [r7, #8]
 8002298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229c:	ee17 0a90 	vmov	r0, s15
 80022a0:	f7fe f97a 	bl	8000598 <__aeabi_f2d>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4640      	mov	r0, r8
 80022aa:	4649      	mov	r1, r9
 80022ac:	f7fe f814 	bl	80002d8 <__aeabi_dsub>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4620      	mov	r0, r4
 80022b6:	4629      	mov	r1, r5
 80022b8:	e022      	b.n	8002300 <interupt_DriveMotor+0x3a8>
 80022ba:	bf00      	nop
 80022bc:	f3af 8000 	nop.w
 80022c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80022c4:	3f50624d 	.word	0x3f50624d
 80022c8:	d916872b 	.word	0xd916872b
 80022cc:	3feff7ce 	.word	0x3feff7ce
 80022d0:	20000528 	.word	0x20000528
 80022d4:	20000804 	.word	0x20000804
 80022d8:	20000590 	.word	0x20000590
 80022dc:	20000592 	.word	0x20000592
 80022e0:	20000524 	.word	0x20000524
 80022e4:	200004d8 	.word	0x200004d8
 80022e8:	200004e4 	.word	0x200004e4
 80022ec:	200004f0 	.word	0x200004f0
 80022f0:	20000238 	.word	0x20000238
 80022f4:	2000023c 	.word	0x2000023c
 80022f8:	20000268 	.word	0x20000268
 80022fc:	200004d4 	.word	0x200004d4
 8002300:	f7fd ffec 	bl	80002dc <__adddf3>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	f7fe fc74 	bl	8000bf8 <__aeabi_d2f>
 8002310:	4603      	mov	r3, r0
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002314:	6a38      	ldr	r0, [r7, #32]
 8002316:	f7fe f93f 	bl	8000598 <__aeabi_f2d>
 800231a:	4604      	mov	r4, r0
 800231c:	460d      	mov	r5, r1
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <interupt_DriveMotor+0x428>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe f938 	bl	8000598 <__aeabi_f2d>
 8002328:	a313      	add	r3, pc, #76	; (adr r3, 8002378 <interupt_DriveMotor+0x420>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fe f98b 	bl	8000648 <__aeabi_dmul>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4690      	mov	r8, r2
 8002338:	4699      	mov	r9, r3
 800233a:	ed97 7a04 	vldr	s14, [r7, #16]
 800233e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002346:	ee17 0a90 	vmov	r0, s15
 800234a:	f7fe f925 	bl	8000598 <__aeabi_f2d>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4640      	mov	r0, r8
 8002354:	4649      	mov	r1, r9
 8002356:	f7fd ffbf 	bl	80002d8 <__aeabi_dsub>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4620      	mov	r0, r4
 8002360:	4629      	mov	r1, r5
 8002362:	f7fd ffbb 	bl	80002dc <__adddf3>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7fe fc43 	bl	8000bf8 <__aeabi_d2f>
 8002372:	4603      	mov	r3, r0
 8002374:	623b      	str	r3, [r7, #32]
 8002376:	e095      	b.n	80024a4 <interupt_DriveMotor+0x54c>
 8002378:	d916872b 	.word	0xd916872b
 800237c:	3feff7ce 	.word	0x3feff7ce
 8002380:	200004d4 	.word	0x200004d4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002384:	ed97 7a04 	vldr	s14, [r7, #16]
 8002388:	edd7 7a02 	vldr	s15, [r7, #8]
 800238c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002390:	ee17 0a90 	vmov	r0, s15
 8002394:	f7fe f900 	bl	8000598 <__aeabi_f2d>
 8002398:	4604      	mov	r4, r0
 800239a:	460d      	mov	r5, r1
 800239c:	4bce      	ldr	r3, [pc, #824]	; (80026d8 <interupt_DriveMotor+0x780>)
 800239e:	edd3 7a00 	vldr	s15, [r3]
 80023a2:	eef1 7a67 	vneg.f32	s15, s15
 80023a6:	ee17 3a90 	vmov	r3, s15
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f8f4 	bl	8000598 <__aeabi_f2d>
 80023b0:	a3c5      	add	r3, pc, #788	; (adr r3, 80026c8 <interupt_DriveMotor+0x770>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	f7fe f947 	bl	8000648 <__aeabi_dmul>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4620      	mov	r0, r4
 80023c0:	4629      	mov	r1, r5
 80023c2:	f7fe fbb3 	bl	8000b2c <__aeabi_dcmplt>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d06b      	beq.n	80024a4 <interupt_DriveMotor+0x54c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80023cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023ce:	f7fe f8e3 	bl	8000598 <__aeabi_f2d>
 80023d2:	4604      	mov	r4, r0
 80023d4:	460d      	mov	r5, r1
 80023d6:	4bc0      	ldr	r3, [pc, #768]	; (80026d8 <interupt_DriveMotor+0x780>)
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	eef1 7a67 	vneg.f32	s15, s15
 80023e0:	ee17 3a90 	vmov	r3, s15
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe f8d7 	bl	8000598 <__aeabi_f2d>
 80023ea:	a3b7      	add	r3, pc, #732	; (adr r3, 80026c8 <interupt_DriveMotor+0x770>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	f7fe f92a 	bl	8000648 <__aeabi_dmul>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4690      	mov	r8, r2
 80023fa:	4699      	mov	r9, r3
 80023fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002400:	edd7 7a02 	vldr	s15, [r7, #8]
 8002404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002408:	ee17 0a90 	vmov	r0, s15
 800240c:	f7fe f8c4 	bl	8000598 <__aeabi_f2d>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4640      	mov	r0, r8
 8002416:	4649      	mov	r1, r9
 8002418:	f7fd ff5e 	bl	80002d8 <__aeabi_dsub>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4620      	mov	r0, r4
 8002422:	4629      	mov	r1, r5
 8002424:	f7fd ff5a 	bl	80002dc <__adddf3>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	f7fe fbe2 	bl	8000bf8 <__aeabi_d2f>
 8002434:	4603      	mov	r3, r0
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002438:	6a38      	ldr	r0, [r7, #32]
 800243a:	f7fe f8ad 	bl	8000598 <__aeabi_f2d>
 800243e:	4604      	mov	r4, r0
 8002440:	460d      	mov	r5, r1
 8002442:	4ba5      	ldr	r3, [pc, #660]	; (80026d8 <interupt_DriveMotor+0x780>)
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	eef1 7a67 	vneg.f32	s15, s15
 800244c:	ee17 3a90 	vmov	r3, s15
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe f8a1 	bl	8000598 <__aeabi_f2d>
 8002456:	a39c      	add	r3, pc, #624	; (adr r3, 80026c8 <interupt_DriveMotor+0x770>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	f7fe f8f4 	bl	8000648 <__aeabi_dmul>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4690      	mov	r8, r2
 8002466:	4699      	mov	r9, r3
 8002468:	ed97 7a04 	vldr	s14, [r7, #16]
 800246c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002474:	ee17 0a90 	vmov	r0, s15
 8002478:	f7fe f88e 	bl	8000598 <__aeabi_f2d>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4640      	mov	r0, r8
 8002482:	4649      	mov	r1, r9
 8002484:	f7fd ff28 	bl	80002d8 <__aeabi_dsub>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4620      	mov	r0, r4
 800248e:	4629      	mov	r1, r5
 8002490:	f7fd ff24 	bl	80002dc <__adddf3>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	f7fe fbac 	bl	8000bf8 <__aeabi_d2f>
 80024a0:	4603      	mov	r3, r0
 80024a2:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80024a4:	f107 0214 	add.w	r2, r7, #20
 80024a8:	f107 0318 	add.w	r3, r7, #24
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	edd7 0a08 	vldr	s1, [r7, #32]
 80024b4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80024b8:	f7ff fcbc 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f005 fa68 	bl	8007998 <pl_DriveMotor_duty>
	}
	if (modeacc == 2 || modeacc == 4) {//旋回とスラローム
 80024c8:	4b84      	ldr	r3, [pc, #528]	; (80026dc <interupt_DriveMotor+0x784>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d004      	beq.n	80024da <interupt_DriveMotor+0x582>
 80024d0:	4b82      	ldr	r3, [pc, #520]	; (80026dc <interupt_DriveMotor+0x784>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	f040 8287 	bne.w	80029e8 <interupt_DriveMotor+0xa90>
		g_WallControl_mode=0;
 80024da:	4b81      	ldr	r3, [pc, #516]	; (80026e0 <interupt_DriveMotor+0x788>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 80024e0:	4b80      	ldr	r3, [pc, #512]	; (80026e4 <interupt_DriveMotor+0x78c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80024e6:	4b80      	ldr	r3, [pc, #512]	; (80026e8 <interupt_DriveMotor+0x790>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3301      	adds	r3, #1
 80024ec:	4a7e      	ldr	r2, [pc, #504]	; (80026e8 <interupt_DriveMotor+0x790>)
 80024ee:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80024f0:	4b7e      	ldr	r3, [pc, #504]	; (80026ec <interupt_DriveMotor+0x794>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe f84f 	bl	8000598 <__aeabi_f2d>
 80024fa:	4604      	mov	r4, r0
 80024fc:	460d      	mov	r5, r1
 80024fe:	4b7b      	ldr	r3, [pc, #492]	; (80026ec <interupt_DriveMotor+0x794>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe f848 	bl	8000598 <__aeabi_f2d>
 8002508:	a371      	add	r3, pc, #452	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	f7fe f89b 	bl	8000648 <__aeabi_dmul>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4690      	mov	r8, r2
 8002518:	4699      	mov	r9, r3
 800251a:	4b74      	ldr	r3, [pc, #464]	; (80026ec <interupt_DriveMotor+0x794>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe f83a 	bl	8000598 <__aeabi_f2d>
 8002524:	a36a      	add	r3, pc, #424	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	f7fe f88d 	bl	8000648 <__aeabi_dmul>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	a366      	add	r3, pc, #408	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fe f884 	bl	8000648 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002550:	f7fe f9a4 	bl	800089c <__aeabi_ddiv>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4640      	mov	r0, r8
 800255a:	4649      	mov	r1, r9
 800255c:	f7fd febe 	bl	80002dc <__adddf3>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	f7fd feb8 	bl	80002dc <__adddf3>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f7fe fb40 	bl	8000bf8 <__aeabi_d2f>
 8002578:	4603      	mov	r3, r0
 800257a:	4a5c      	ldr	r2, [pc, #368]	; (80026ec <interupt_DriveMotor+0x794>)
 800257c:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 800257e:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <interupt_DriveMotor+0x794>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe f808 	bl	8000598 <__aeabi_f2d>
 8002588:	4604      	mov	r4, r0
 800258a:	460d      	mov	r5, r1
 800258c:	4b57      	ldr	r3, [pc, #348]	; (80026ec <interupt_DriveMotor+0x794>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe f801 	bl	8000598 <__aeabi_f2d>
 8002596:	a34e      	add	r3, pc, #312	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259c:	f7fe f854 	bl	8000648 <__aeabi_dmul>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4620      	mov	r0, r4
 80025a6:	4629      	mov	r1, r5
 80025a8:	f7fd fe98 	bl	80002dc <__adddf3>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	f7fe fb20 	bl	8000bf8 <__aeabi_d2f>
 80025b8:	4603      	mov	r3, r0
 80025ba:	4a4c      	ldr	r2, [pc, #304]	; (80026ec <interupt_DriveMotor+0x794>)
 80025bc:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80025be:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <interupt_DriveMotor+0x798>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fd ffe8 	bl	8000598 <__aeabi_f2d>
 80025c8:	4604      	mov	r4, r0
 80025ca:	460d      	mov	r5, r1
 80025cc:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <interupt_DriveMotor+0x798>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd ffe1 	bl	8000598 <__aeabi_f2d>
 80025d6:	a33e      	add	r3, pc, #248	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 80025d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025dc:	f7fe f834 	bl	8000648 <__aeabi_dmul>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4690      	mov	r8, r2
 80025e6:	4699      	mov	r9, r3
 80025e8:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <interupt_DriveMotor+0x798>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd ffd3 	bl	8000598 <__aeabi_f2d>
 80025f2:	a337      	add	r3, pc, #220	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 80025f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f8:	f7fe f826 	bl	8000648 <__aeabi_dmul>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	a332      	add	r3, pc, #200	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260a:	f7fe f81d 	bl	8000648 <__aeabi_dmul>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4610      	mov	r0, r2
 8002614:	4619      	mov	r1, r3
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800261e:	f7fe f93d 	bl	800089c <__aeabi_ddiv>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4640      	mov	r0, r8
 8002628:	4649      	mov	r1, r9
 800262a:	f7fd fe57 	bl	80002dc <__adddf3>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4620      	mov	r0, r4
 8002634:	4629      	mov	r1, r5
 8002636:	f7fd fe51 	bl	80002dc <__adddf3>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	f7fe fad9 	bl	8000bf8 <__aeabi_d2f>
 8002646:	4603      	mov	r3, r0
 8002648:	4a29      	ldr	r2, [pc, #164]	; (80026f0 <interupt_DriveMotor+0x798>)
 800264a:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 800264c:	4b28      	ldr	r3, [pc, #160]	; (80026f0 <interupt_DriveMotor+0x798>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7fd ffa1 	bl	8000598 <__aeabi_f2d>
 8002656:	4604      	mov	r4, r0
 8002658:	460d      	mov	r5, r1
 800265a:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <interupt_DriveMotor+0x798>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd ff9a 	bl	8000598 <__aeabi_f2d>
 8002664:	a31a      	add	r3, pc, #104	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	f7fd ffed 	bl	8000648 <__aeabi_dmul>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4620      	mov	r0, r4
 8002674:	4629      	mov	r1, r5
 8002676:	f7fd fe31 	bl	80002dc <__adddf3>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	f7fe fab9 	bl	8000bf8 <__aeabi_d2f>
 8002686:	4603      	mov	r3, r0
 8002688:	4a19      	ldr	r2, [pc, #100]	; (80026f0 <interupt_DriveMotor+0x798>)
 800268a:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_turning,&turning);
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <interupt_DriveMotor+0x79c>)
 800268e:	4a18      	ldr	r2, [pc, #96]	; (80026f0 <interupt_DriveMotor+0x798>)
 8002690:	9201      	str	r2, [sp, #4]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002698:	f005 fdf4 	bl	8008284 <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <interupt_DriveMotor+0x794>)
 800269e:	edd3 7a00 	vldr	s15, [r3]
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <interupt_DriveMotor+0x798>)
 80026a4:	ed93 7a00 	vldr	s14, [r3]
 80026a8:	f107 020c 	add.w	r2, r7, #12
 80026ac:	f107 0310 	add.w	r3, r7, #16
 80026b0:	eef0 0a47 	vmov.f32	s1, s14
 80026b4:	eeb0 0a67 	vmov.f32	s0, s15
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f001 ff8c 	bl	80045d8 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 80026c0:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <interupt_DriveMotor+0x7a0>)
 80026c2:	ed93 7a00 	vldr	s14, [r3]
 80026c6:	e019      	b.n	80026fc <interupt_DriveMotor+0x7a4>
 80026c8:	d916872b 	.word	0xd916872b
 80026cc:	3feff7ce 	.word	0x3feff7ce
 80026d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80026d4:	3f50624d 	.word	0x3f50624d
 80026d8:	200004d4 	.word	0x200004d4
 80026dc:	20000528 	.word	0x20000528
 80026e0:	20000590 	.word	0x20000590
 80026e4:	20000592 	.word	0x20000592
 80026e8:	20000524 	.word	0x20000524
 80026ec:	200004d8 	.word	0x200004d8
 80026f0:	200004e4 	.word	0x200004e4
 80026f4:	20000504 	.word	0x20000504
 80026f8:	20000238 	.word	0x20000238
 80026fc:	4b64      	ldr	r3, [pc, #400]	; (8002890 <interupt_DriveMotor+0x938>)
 80026fe:	edd3 7a00 	vldr	s15, [r3]
 8002702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002706:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800270a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800270e:	4b61      	ldr	r3, [pc, #388]	; (8002894 <interupt_DriveMotor+0x93c>)
 8002710:	edd3 7a01 	vldr	s15, [r3, #4]
 8002714:	4b60      	ldr	r3, [pc, #384]	; (8002898 <interupt_DriveMotor+0x940>)
 8002716:	edd3 6a00 	vldr	s13, [r3]
 800271a:	4b60      	ldr	r3, [pc, #384]	; (800289c <interupt_DriveMotor+0x944>)
 800271c:	ed93 6a01 	vldr	s12, [r3, #4]
 8002720:	1d3a      	adds	r2, r7, #4
 8002722:	f107 0308 	add.w	r3, r7, #8
 8002726:	eef0 1a46 	vmov.f32	s3, s12
 800272a:	eeb0 1a66 	vmov.f32	s2, s13
 800272e:	4611      	mov	r1, r2
 8002730:	eef0 0a67 	vmov.f32	s1, s15
 8002734:	eeb0 0a47 	vmov.f32	s0, s14
 8002738:	4618      	mov	r0, r3
 800273a:	f001 fca1 	bl	8004080 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 800273e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002742:	edd7 7a03 	vldr	s15, [r7, #12]
 8002746:	ee37 7a67 	vsub.f32	s14, s14, s15
 800274a:	edd7 7a02 	vldr	s15, [r7, #8]
 800274e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002752:	edd7 7a01 	vldr	s15, [r7, #4]
 8002756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 800275e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002762:	edd7 7a03 	vldr	s15, [r7, #12]
 8002766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800276a:	edd7 7a02 	vldr	s15, [r7, #8]
 800276e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002772:	edd7 7a01 	vldr	s15, [r7, #4]
 8002776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277a:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800277e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002782:	edd7 7a02 	vldr	s15, [r7, #8]
 8002786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278a:	ee17 0a90 	vmov	r0, s15
 800278e:	f7fd ff03 	bl	8000598 <__aeabi_f2d>
 8002792:	4604      	mov	r4, r0
 8002794:	460d      	mov	r5, r1
 8002796:	4b42      	ldr	r3, [pc, #264]	; (80028a0 <interupt_DriveMotor+0x948>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fefc 	bl	8000598 <__aeabi_f2d>
 80027a0:	a339      	add	r3, pc, #228	; (adr r3, 8002888 <interupt_DriveMotor+0x930>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f7fd ff4f 	bl	8000648 <__aeabi_dmul>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4620      	mov	r0, r4
 80027b0:	4629      	mov	r1, r5
 80027b2:	f7fe f9d9 	bl	8000b68 <__aeabi_dcmpgt>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d073      	beq.n	80028a4 <interupt_DriveMotor+0x94c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80027bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027be:	f7fd feeb 	bl	8000598 <__aeabi_f2d>
 80027c2:	4604      	mov	r4, r0
 80027c4:	460d      	mov	r5, r1
 80027c6:	4b36      	ldr	r3, [pc, #216]	; (80028a0 <interupt_DriveMotor+0x948>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fd fee4 	bl	8000598 <__aeabi_f2d>
 80027d0:	a32d      	add	r3, pc, #180	; (adr r3, 8002888 <interupt_DriveMotor+0x930>)
 80027d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d6:	f7fd ff37 	bl	8000648 <__aeabi_dmul>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4690      	mov	r8, r2
 80027e0:	4699      	mov	r9, r3
 80027e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80027e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ee:	ee17 0a90 	vmov	r0, s15
 80027f2:	f7fd fed1 	bl	8000598 <__aeabi_f2d>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4640      	mov	r0, r8
 80027fc:	4649      	mov	r1, r9
 80027fe:	f7fd fd6b 	bl	80002d8 <__aeabi_dsub>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4620      	mov	r0, r4
 8002808:	4629      	mov	r1, r5
 800280a:	f7fd fd67 	bl	80002dc <__adddf3>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	f7fe f9ef 	bl	8000bf8 <__aeabi_d2f>
 800281a:	4603      	mov	r3, r0
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800281e:	6a38      	ldr	r0, [r7, #32]
 8002820:	f7fd feba 	bl	8000598 <__aeabi_f2d>
 8002824:	4604      	mov	r4, r0
 8002826:	460d      	mov	r5, r1
 8002828:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <interupt_DriveMotor+0x948>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd feb3 	bl	8000598 <__aeabi_f2d>
 8002832:	a315      	add	r3, pc, #84	; (adr r3, 8002888 <interupt_DriveMotor+0x930>)
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	f7fd ff06 	bl	8000648 <__aeabi_dmul>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4690      	mov	r8, r2
 8002842:	4699      	mov	r9, r3
 8002844:	ed97 7a04 	vldr	s14, [r7, #16]
 8002848:	edd7 7a02 	vldr	s15, [r7, #8]
 800284c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002850:	ee17 0a90 	vmov	r0, s15
 8002854:	f7fd fea0 	bl	8000598 <__aeabi_f2d>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4640      	mov	r0, r8
 800285e:	4649      	mov	r1, r9
 8002860:	f7fd fd3a 	bl	80002d8 <__aeabi_dsub>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4620      	mov	r0, r4
 800286a:	4629      	mov	r1, r5
 800286c:	f7fd fd36 	bl	80002dc <__adddf3>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	f7fe f9be 	bl	8000bf8 <__aeabi_d2f>
 800287c:	4603      	mov	r3, r0
 800287e:	623b      	str	r3, [r7, #32]
 8002880:	e0a0      	b.n	80029c4 <interupt_DriveMotor+0xa6c>
 8002882:	bf00      	nop
 8002884:	f3af 8000 	nop.w
 8002888:	d916872b 	.word	0xd916872b
 800288c:	3feff7ce 	.word	0x3feff7ce
 8002890:	2000023c 	.word	0x2000023c
 8002894:	200004d8 	.word	0x200004d8
 8002898:	20000268 	.word	0x20000268
 800289c:	200004e4 	.word	0x200004e4
 80028a0:	200004d4 	.word	0x200004d4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80028a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80028a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80028ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b0:	ee17 0a90 	vmov	r0, s15
 80028b4:	f7fd fe70 	bl	8000598 <__aeabi_f2d>
 80028b8:	4604      	mov	r4, r0
 80028ba:	460d      	mov	r5, r1
 80028bc:	4bd6      	ldr	r3, [pc, #856]	; (8002c18 <interupt_DriveMotor+0xcc0>)
 80028be:	edd3 7a00 	vldr	s15, [r3]
 80028c2:	eef1 7a67 	vneg.f32	s15, s15
 80028c6:	ee17 3a90 	vmov	r3, s15
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fe64 	bl	8000598 <__aeabi_f2d>
 80028d0:	a3cd      	add	r3, pc, #820	; (adr r3, 8002c08 <interupt_DriveMotor+0xcb0>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd feb7 	bl	8000648 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4620      	mov	r0, r4
 80028e0:	4629      	mov	r1, r5
 80028e2:	f7fe f923 	bl	8000b2c <__aeabi_dcmplt>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d06b      	beq.n	80029c4 <interupt_DriveMotor+0xa6c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80028ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028ee:	f7fd fe53 	bl	8000598 <__aeabi_f2d>
 80028f2:	4604      	mov	r4, r0
 80028f4:	460d      	mov	r5, r1
 80028f6:	4bc8      	ldr	r3, [pc, #800]	; (8002c18 <interupt_DriveMotor+0xcc0>)
 80028f8:	edd3 7a00 	vldr	s15, [r3]
 80028fc:	eef1 7a67 	vneg.f32	s15, s15
 8002900:	ee17 3a90 	vmov	r3, s15
 8002904:	4618      	mov	r0, r3
 8002906:	f7fd fe47 	bl	8000598 <__aeabi_f2d>
 800290a:	a3bf      	add	r3, pc, #764	; (adr r3, 8002c08 <interupt_DriveMotor+0xcb0>)
 800290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002910:	f7fd fe9a 	bl	8000648 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4690      	mov	r8, r2
 800291a:	4699      	mov	r9, r3
 800291c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002920:	edd7 7a02 	vldr	s15, [r7, #8]
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	ee17 0a90 	vmov	r0, s15
 800292c:	f7fd fe34 	bl	8000598 <__aeabi_f2d>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4640      	mov	r0, r8
 8002936:	4649      	mov	r1, r9
 8002938:	f7fd fcce 	bl	80002d8 <__aeabi_dsub>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4620      	mov	r0, r4
 8002942:	4629      	mov	r1, r5
 8002944:	f7fd fcca 	bl	80002dc <__adddf3>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	f7fe f952 	bl	8000bf8 <__aeabi_d2f>
 8002954:	4603      	mov	r3, r0
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002958:	6a38      	ldr	r0, [r7, #32]
 800295a:	f7fd fe1d 	bl	8000598 <__aeabi_f2d>
 800295e:	4604      	mov	r4, r0
 8002960:	460d      	mov	r5, r1
 8002962:	4bad      	ldr	r3, [pc, #692]	; (8002c18 <interupt_DriveMotor+0xcc0>)
 8002964:	edd3 7a00 	vldr	s15, [r3]
 8002968:	eef1 7a67 	vneg.f32	s15, s15
 800296c:	ee17 3a90 	vmov	r3, s15
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd fe11 	bl	8000598 <__aeabi_f2d>
 8002976:	a3a4      	add	r3, pc, #656	; (adr r3, 8002c08 <interupt_DriveMotor+0xcb0>)
 8002978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297c:	f7fd fe64 	bl	8000648 <__aeabi_dmul>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4690      	mov	r8, r2
 8002986:	4699      	mov	r9, r3
 8002988:	ed97 7a04 	vldr	s14, [r7, #16]
 800298c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002994:	ee17 0a90 	vmov	r0, s15
 8002998:	f7fd fdfe 	bl	8000598 <__aeabi_f2d>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4640      	mov	r0, r8
 80029a2:	4649      	mov	r1, r9
 80029a4:	f7fd fc98 	bl	80002d8 <__aeabi_dsub>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4620      	mov	r0, r4
 80029ae:	4629      	mov	r1, r5
 80029b0:	f7fd fc94 	bl	80002dc <__adddf3>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	f7fe f91c 	bl	8000bf8 <__aeabi_d2f>
 80029c0:	4603      	mov	r3, r0
 80029c2:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80029c4:	f107 0214 	add.w	r2, r7, #20
 80029c8:	f107 0318 	add.w	r3, r7, #24
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	edd7 0a08 	vldr	s1, [r7, #32]
 80029d4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80029d8:	f7ff fa2c 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 ffd8 	bl	8007998 <pl_DriveMotor_duty>
	}
	if (modeacc == 3) {//宴会芸
 80029e8:	4b8c      	ldr	r3, [pc, #560]	; (8002c1c <interupt_DriveMotor+0xcc4>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	f040 8137 	bne.w	8002c60 <interupt_DriveMotor+0xd08>
		g_WallControl_mode=0;
 80029f2:	4b8b      	ldr	r3, [pc, #556]	; (8002c20 <interupt_DriveMotor+0xcc8>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 80029f8:	4b8a      	ldr	r3, [pc, #552]	; (8002c24 <interupt_DriveMotor+0xccc>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80029fe:	4b8a      	ldr	r3, [pc, #552]	; (8002c28 <interupt_DriveMotor+0xcd0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3301      	adds	r3, #1
 8002a04:	4a88      	ldr	r2, [pc, #544]	; (8002c28 <interupt_DriveMotor+0xcd0>)
 8002a06:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002a08:	4b88      	ldr	r3, [pc, #544]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fdc3 	bl	8000598 <__aeabi_f2d>
 8002a12:	4604      	mov	r4, r0
 8002a14:	460d      	mov	r5, r1
 8002a16:	4b85      	ldr	r3, [pc, #532]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fdbc 	bl	8000598 <__aeabi_f2d>
 8002a20:	a37b      	add	r3, pc, #492	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f7fd fe0f 	bl	8000648 <__aeabi_dmul>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4690      	mov	r8, r2
 8002a30:	4699      	mov	r9, r3
 8002a32:	4b7e      	ldr	r3, [pc, #504]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fdae 	bl	8000598 <__aeabi_f2d>
 8002a3c:	a374      	add	r3, pc, #464	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a42:	f7fd fe01 	bl	8000648 <__aeabi_dmul>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	a370      	add	r3, pc, #448	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	f7fd fdf8 	bl	8000648 <__aeabi_dmul>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a68:	f7fd ff18 	bl	800089c <__aeabi_ddiv>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4640      	mov	r0, r8
 8002a72:	4649      	mov	r1, r9
 8002a74:	f7fd fc32 	bl	80002dc <__adddf3>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	4629      	mov	r1, r5
 8002a80:	f7fd fc2c 	bl	80002dc <__adddf3>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7fe f8b4 	bl	8000bf8 <__aeabi_d2f>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4a66      	ldr	r2, [pc, #408]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a94:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002a96:	4b65      	ldr	r3, [pc, #404]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fd7c 	bl	8000598 <__aeabi_f2d>
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	460d      	mov	r5, r1
 8002aa4:	4b61      	ldr	r3, [pc, #388]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fd75 	bl	8000598 <__aeabi_f2d>
 8002aae:	a358      	add	r3, pc, #352	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	f7fd fdc8 	bl	8000648 <__aeabi_dmul>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4620      	mov	r0, r4
 8002abe:	4629      	mov	r1, r5
 8002ac0:	f7fd fc0c 	bl	80002dc <__adddf3>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	f7fe f894 	bl	8000bf8 <__aeabi_d2f>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	4a56      	ldr	r2, [pc, #344]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002ad4:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002ad6:	4b56      	ldr	r3, [pc, #344]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fd fd5c 	bl	8000598 <__aeabi_f2d>
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	460d      	mov	r5, r1
 8002ae4:	4b52      	ldr	r3, [pc, #328]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fd fd55 	bl	8000598 <__aeabi_f2d>
 8002aee:	a348      	add	r3, pc, #288	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f7fd fda8 	bl	8000648 <__aeabi_dmul>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4690      	mov	r8, r2
 8002afe:	4699      	mov	r9, r3
 8002b00:	4b4b      	ldr	r3, [pc, #300]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fd fd47 	bl	8000598 <__aeabi_f2d>
 8002b0a:	a341      	add	r3, pc, #260	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b10:	f7fd fd9a 	bl	8000648 <__aeabi_dmul>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	a33c      	add	r3, pc, #240	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	f7fd fd91 	bl	8000648 <__aeabi_dmul>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b36:	f7fd feb1 	bl	800089c <__aeabi_ddiv>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4640      	mov	r0, r8
 8002b40:	4649      	mov	r1, r9
 8002b42:	f7fd fbcb 	bl	80002dc <__adddf3>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	f7fd fbc5 	bl	80002dc <__adddf3>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe f84d 	bl	8000bf8 <__aeabi_d2f>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4a33      	ldr	r2, [pc, #204]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002b62:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002b64:	4b32      	ldr	r3, [pc, #200]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fd15 	bl	8000598 <__aeabi_f2d>
 8002b6e:	4604      	mov	r4, r0
 8002b70:	460d      	mov	r5, r1
 8002b72:	4b2f      	ldr	r3, [pc, #188]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fd0e 	bl	8000598 <__aeabi_f2d>
 8002b7c:	a324      	add	r3, pc, #144	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b82:	f7fd fd61 	bl	8000648 <__aeabi_dmul>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	f7fd fba5 	bl	80002dc <__adddf3>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4610      	mov	r0, r2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f7fe f82d 	bl	8000bf8 <__aeabi_d2f>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	4a23      	ldr	r2, [pc, #140]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002ba2:	6013      	str	r3, [r2, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002ba4:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002bac:	ed93 7a00 	vldr	s14, [r3]
 8002bb0:	f107 020c 	add.w	r2, r7, #12
 8002bb4:	f107 0310 	add.w	r3, r7, #16
 8002bb8:	eef0 0a47 	vmov.f32	s1, s14
 8002bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 fd08 	bl	80045d8 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002bc8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002be8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bec:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c00:	e018      	b.n	8002c34 <interupt_DriveMotor+0xcdc>
 8002c02:	bf00      	nop
 8002c04:	f3af 8000 	nop.w
 8002c08:	d916872b 	.word	0xd916872b
 8002c0c:	3feff7ce 	.word	0x3feff7ce
 8002c10:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c14:	3f50624d 	.word	0x3f50624d
 8002c18:	200004d4 	.word	0x200004d4
 8002c1c:	20000528 	.word	0x20000528
 8002c20:	20000590 	.word	0x20000590
 8002c24:	20000592 	.word	0x20000592
 8002c28:	20000524 	.word	0x20000524
 8002c2c:	200004d8 	.word	0x200004d8
 8002c30:	200004e4 	.word	0x200004e4
 8002c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c38:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002c3c:	f107 0214 	add.w	r2, r7, #20
 8002c40:	f107 0318 	add.w	r3, r7, #24
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	edd7 0a08 	vldr	s1, [r7, #32]
 8002c4c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002c50:	f7ff f8f0 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f004 fe9c 	bl	8007998 <pl_DriveMotor_duty>
	}if (modeacc == 5) {//前壁制御
 8002c60:	4bd3      	ldr	r3, [pc, #844]	; (8002fb0 <interupt_DriveMotor+0x1058>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d137      	bne.n	8002cd8 <interupt_DriveMotor+0xd80>
		g_WallControl_mode=0;
 8002c68:	4bd2      	ldr	r3, [pc, #840]	; (8002fb4 <interupt_DriveMotor+0x105c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002c6e:	4bd2      	ldr	r3, [pc, #840]	; (8002fb8 <interupt_DriveMotor+0x1060>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
		//calFrontWallConrol(&PID_frontwall_l,&PID_frontwall_r);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002c74:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c78:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c80:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c88:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c90:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002c94:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c98:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb0:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002cb4:	f107 0214 	add.w	r2, r7, #20
 8002cb8:	f107 0318 	add.w	r3, r7, #24
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	edd7 0a08 	vldr	s1, [r7, #32]
 8002cc4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002cc8:	f7ff f8b4 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f004 fe60 	bl	8007998 <pl_DriveMotor_duty>
	}if (modeacc == 6) {//ネイピア加速
 8002cd8:	4bb5      	ldr	r3, [pc, #724]	; (8002fb0 <interupt_DriveMotor+0x1058>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b06      	cmp	r3, #6
 8002cde:	f040 8105 	bne.w	8002eec <interupt_DriveMotor+0xf94>
		g_WallControl_mode=0;
 8002ce2:	4bb4      	ldr	r3, [pc, #720]	; (8002fb4 <interupt_DriveMotor+0x105c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002ce8:	4bb3      	ldr	r3, [pc, #716]	; (8002fb8 <interupt_DriveMotor+0x1060>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002cee:	4bb3      	ldr	r3, [pc, #716]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fc50 	bl	8000598 <__aeabi_f2d>
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	460d      	mov	r5, r1
 8002cfc:	4baf      	ldr	r3, [pc, #700]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd fc49 	bl	8000598 <__aeabi_f2d>
 8002d06:	a3a8      	add	r3, pc, #672	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	f7fd fc9c 	bl	8000648 <__aeabi_dmul>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4690      	mov	r8, r2
 8002d16:	4699      	mov	r9, r3
 8002d18:	4ba8      	ldr	r3, [pc, #672]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fd fc3b 	bl	8000598 <__aeabi_f2d>
 8002d22:	a3a1      	add	r3, pc, #644	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d28:	f7fd fc8e 	bl	8000648 <__aeabi_dmul>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4610      	mov	r0, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	a39c      	add	r3, pc, #624	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f7fd fc85 	bl	8000648 <__aeabi_dmul>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d4e:	f7fd fda5 	bl	800089c <__aeabi_ddiv>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4640      	mov	r0, r8
 8002d58:	4649      	mov	r1, r9
 8002d5a:	f7fd fabf 	bl	80002dc <__adddf3>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4620      	mov	r0, r4
 8002d64:	4629      	mov	r1, r5
 8002d66:	f7fd fab9 	bl	80002dc <__adddf3>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	f7fd ff41 	bl	8000bf8 <__aeabi_d2f>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4a90      	ldr	r2, [pc, #576]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002d7a:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002d7c:	4b8f      	ldr	r3, [pc, #572]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd fc09 	bl	8000598 <__aeabi_f2d>
 8002d86:	4604      	mov	r4, r0
 8002d88:	460d      	mov	r5, r1
 8002d8a:	4b8c      	ldr	r3, [pc, #560]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd fc02 	bl	8000598 <__aeabi_f2d>
 8002d94:	a384      	add	r3, pc, #528	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9a:	f7fd fc55 	bl	8000648 <__aeabi_dmul>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4620      	mov	r0, r4
 8002da4:	4629      	mov	r1, r5
 8002da6:	f7fd fa99 	bl	80002dc <__adddf3>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f7fd ff21 	bl	8000bf8 <__aeabi_d2f>
 8002db6:	4603      	mov	r3, r0
 8002db8:	4a80      	ldr	r2, [pc, #512]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002dba:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME;// + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002dbc:	4b80      	ldr	r3, [pc, #512]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fbe9 	bl	8000598 <__aeabi_f2d>
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	460d      	mov	r5, r1
 8002dca:	4b7d      	ldr	r3, [pc, #500]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fbe2 	bl	8000598 <__aeabi_f2d>
 8002dd4:	a374      	add	r3, pc, #464	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dda:	f7fd fc35 	bl	8000648 <__aeabi_dmul>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4620      	mov	r0, r4
 8002de4:	4629      	mov	r1, r5
 8002de6:	f7fd fa79 	bl	80002dc <__adddf3>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4610      	mov	r0, r2
 8002df0:	4619      	mov	r1, r3
 8002df2:	f7fd ff01 	bl	8000bf8 <__aeabi_d2f>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4a71      	ldr	r2, [pc, #452]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002dfa:	6093      	str	r3, [r2, #8]
		cal_mollifier_table(Mollifier_turning,&turning);//角速度と角加速度はここで決定
 8002dfc:	4b71      	ldr	r3, [pc, #452]	; (8002fc4 <interupt_DriveMotor+0x106c>)
 8002dfe:	edd3 6a00 	vldr	s13, [r3]
 8002e02:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e06:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e0a:	486d      	ldr	r0, [pc, #436]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002e0c:	eeb0 0a66 	vmov.f32	s0, s13
 8002e10:	eef0 0a47 	vmov.f32	s1, s14
 8002e14:	eeb0 1a67 	vmov.f32	s2, s15
 8002e18:	f005 fd8e 	bl	8008938 <cal_mollifier_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002e1c:	4b67      	ldr	r3, [pc, #412]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002e1e:	edd3 7a00 	vldr	s15, [r3]
 8002e22:	4b67      	ldr	r3, [pc, #412]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002e24:	ed93 7a00 	vldr	s14, [r3]
 8002e28:	f107 020c 	add.w	r2, r7, #12
 8002e2c:	f107 0310 	add.w	r3, r7, #16
 8002e30:	eef0 0a47 	vmov.f32	s1, s14
 8002e34:	eeb0 0a67 	vmov.f32	s0, s15
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 fbcc 	bl	80045d8 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002e40:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <interupt_DriveMotor+0x1070>)
 8002e42:	ed93 7a00 	vldr	s14, [r3]
 8002e46:	4b61      	ldr	r3, [pc, #388]	; (8002fcc <interupt_DriveMotor+0x1074>)
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002e54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e58:	4b58      	ldr	r3, [pc, #352]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002e5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e5e:	4b5c      	ldr	r3, [pc, #368]	; (8002fd0 <interupt_DriveMotor+0x1078>)
 8002e60:	edd3 6a00 	vldr	s13, [r3]
 8002e64:	4b56      	ldr	r3, [pc, #344]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002e66:	ed93 6a01 	vldr	s12, [r3, #4]
 8002e6a:	1d3a      	adds	r2, r7, #4
 8002e6c:	f107 0308 	add.w	r3, r7, #8
 8002e70:	eef0 1a46 	vmov.f32	s3, s12
 8002e74:	eeb0 1a66 	vmov.f32	s2, s13
 8002e78:	4611      	mov	r1, r2
 8002e7a:	eef0 0a67 	vmov.f32	s1, s15
 8002e7e:	eeb0 0a47 	vmov.f32	s0, s14
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 f8fc 	bl	8004080 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002e88:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e94:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002ea8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002eac:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002eb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec4:	edc7 7a08 	vstr	s15, [r7, #32]
//			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
//			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002ec8:	f107 0214 	add.w	r2, r7, #20
 8002ecc:	f107 0318 	add.w	r3, r7, #24
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	edd7 0a08 	vldr	s1, [r7, #32]
 8002ed8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002edc:	f7fe ffaa 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f004 fd56 	bl	8007998 <pl_DriveMotor_duty>

	}if (modeacc == 100) {
 8002eec:	4b30      	ldr	r3, [pc, #192]	; (8002fb0 <interupt_DriveMotor+0x1058>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b64      	cmp	r3, #100	; 0x64
 8002ef2:	d14b      	bne.n	8002f8c <interupt_DriveMotor+0x1034>
		straight.velocity = 0;
 8002ef4:	4b31      	ldr	r3, [pc, #196]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
		turning.velocity=0;
 8002efc:	4b30      	ldr	r3, [pc, #192]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002f04:	4b2d      	ldr	r3, [pc, #180]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002f06:	edd3 7a00 	vldr	s15, [r3]
 8002f0a:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002f0c:	ed93 7a00 	vldr	s14, [r3]
 8002f10:	f107 020c 	add.w	r2, r7, #12
 8002f14:	f107 0310 	add.w	r3, r7, #16
 8002f18:	eef0 0a47 	vmov.f32	s1, s14
 8002f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f001 fb58 	bl	80045d8 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002f28:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f34:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f44:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002f48:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f54:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f64:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002f68:	f107 0214 	add.w	r2, r7, #20
 8002f6c:	f107 0318 	add.w	r3, r7, #24
 8002f70:	4611      	mov	r1, r2
 8002f72:	4618      	mov	r0, r3
 8002f74:	edd7 0a08 	vldr	s1, [r7, #32]
 8002f78:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002f7c:	f7fe ff5a 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f004 fd06 	bl	8007998 <pl_DriveMotor_duty>
	}
		g_V_L=(float)(V_L);//V_L;
 8002f8c:	4a11      	ldr	r2, [pc, #68]	; (8002fd4 <interupt_DriveMotor+0x107c>)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	6013      	str	r3, [r2, #0]
		g_V_R=(float)(V_R);//V_R;
 8002f92:	4a11      	ldr	r2, [pc, #68]	; (8002fd8 <interupt_DriveMotor+0x1080>)
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	6013      	str	r3, [r2, #0]



}
 8002f98:	bf00      	nop
 8002f9a:	3728      	adds	r7, #40	; 0x28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fa2:	bf00      	nop
 8002fa4:	f3af 8000 	nop.w
 8002fa8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002fac:	3f50624d 	.word	0x3f50624d
 8002fb0:	20000528 	.word	0x20000528
 8002fb4:	20000590 	.word	0x20000590
 8002fb8:	20000592 	.word	0x20000592
 8002fbc:	200004d8 	.word	0x200004d8
 8002fc0:	200004e4 	.word	0x200004e4
 8002fc4:	20000518 	.word	0x20000518
 8002fc8:	20000238 	.word	0x20000238
 8002fcc:	2000023c 	.word	0x2000023c
 8002fd0:	20000268 	.word	0x20000268
 8002fd4:	2000052c 	.word	0x2000052c
 8002fd8:	20000530 	.word	0x20000530

08002fdc <straight_table2>:



float straight_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE motor_mode) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	ed87 0a05 	vstr	s0, [r7, #20]
 8002fe6:	edc7 0a04 	vstr	s1, [r7, #16]
 8002fea:	ed87 1a03 	vstr	s2, [r7, #12]
 8002fee:	edc7 1a02 	vstr	s3, [r7, #8]
 8002ff2:	ed87 2a01 	vstr	s4, [r7, #4]
 8002ff6:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8002ff8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ffc:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003000:	edd7 7a04 	vldr	s15, [r7, #16]
 8003004:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003008:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 800300c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003010:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003014:	ed97 7a01 	vldr	s14, [r7, #4]
 8003018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800301c:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003020:	edd7 7a01 	vldr	s15, [r7, #4]
 8003024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302c:	d505      	bpl.n	800303a <straight_table2+0x5e>
 800302e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003032:	eef1 7a67 	vneg.f32	s15, s15
 8003036:	edc7 7a01 	vstr	s15, [r7, #4]
	if(noGoalPillarMode==1){
 800303a:	4bb4      	ldr	r3, [pc, #720]	; (800330c <straight_table2+0x330>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <straight_table2+0x6a>
		motor_mode.WallCutMode=0;
 8003042:	2300      	movs	r3, #0
 8003044:	70fb      	strb	r3, [r7, #3]
	}


	Trapezoid_straight.displacement = input_displacement;
 8003046:	4ab2      	ldr	r2, [pc, #712]	; (8003310 <straight_table2+0x334>)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 800304c:	4ab0      	ldr	r2, [pc, #704]	; (8003310 <straight_table2+0x334>)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 8003052:	4aaf      	ldr	r2, [pc, #700]	; (8003310 <straight_table2+0x334>)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8003058:	4aad      	ldr	r2, [pc, #692]	; (8003310 <straight_table2+0x334>)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 800305e:	4aac      	ldr	r2, [pc, #688]	; (8003310 <straight_table2+0x334>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003064:	edd7 7a02 	vldr	s15, [r7, #8]
 8003068:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800306c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003070:	db03      	blt.n	800307a <straight_table2+0x9e>
 8003072:	4aa8      	ldr	r2, [pc, #672]	; (8003314 <straight_table2+0x338>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6053      	str	r3, [r2, #4]
 8003078:	e006      	b.n	8003088 <straight_table2+0xac>
	}else{straight.acceleration = -input_acceleration;}
 800307a:	edd7 7a01 	vldr	s15, [r7, #4]
 800307e:	eef1 7a67 	vneg.f32	s15, s15
 8003082:	4ba4      	ldr	r3, [pc, #656]	; (8003314 <straight_table2+0x338>)
 8003084:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8003088:	4aa2      	ldr	r2, [pc, #648]	; (8003314 <straight_table2+0x338>)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 800308e:	4ba1      	ldr	r3, [pc, #644]	; (8003314 <straight_table2+0x338>)
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 8003096:	4ba0      	ldr	r3, [pc, #640]	; (8003318 <straight_table2+0x33c>)
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 800309e:	4b9e      	ldr	r3, [pc, #632]	; (8003318 <straight_table2+0x33c>)
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 80030a6:	4b9c      	ldr	r3, [pc, #624]	; (8003318 <straight_table2+0x33c>)
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 80030ae:	4b9b      	ldr	r3, [pc, #620]	; (800331c <straight_table2+0x340>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 80030b4:	4b9a      	ldr	r3, [pc, #616]	; (8003320 <straight_table2+0x344>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80030ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80030be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c6:	dd0e      	ble.n	80030e6 <straight_table2+0x10a>
 80030c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80030cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80030d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d8:	dd05      	ble.n	80030e6 <straight_table2+0x10a>
 80030da:	4b91      	ldr	r3, [pc, #580]	; (8003320 <straight_table2+0x344>)
 80030dc:	2205      	movs	r2, #5
 80030de:	701a      	strb	r2, [r3, #0]
 80030e0:	4a8c      	ldr	r2, [pc, #560]	; (8003314 <straight_table2+0x338>)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80030e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80030ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f2:	dd14      	ble.n	800311e <straight_table2+0x142>
 80030f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80030f8:	eef1 7a67 	vneg.f32	s15, s15
 80030fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003100:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003108:	d509      	bpl.n	800311e <straight_table2+0x142>
 800310a:	4b85      	ldr	r3, [pc, #532]	; (8003320 <straight_table2+0x344>)
 800310c:	2206      	movs	r2, #6
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	edd7 7a01 	vldr	s15, [r7, #4]
 8003114:	eef1 7a67 	vneg.f32	s15, s15
 8003118:	4b7e      	ldr	r3, [pc, #504]	; (8003314 <straight_table2+0x338>)
 800311a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800311e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003122:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312a:	d514      	bpl.n	8003156 <straight_table2+0x17a>
 800312c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003130:	eef1 7a67 	vneg.f32	s15, s15
 8003134:	ed97 7a07 	vldr	s14, [r7, #28]
 8003138:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003140:	dd09      	ble.n	8003156 <straight_table2+0x17a>
 8003142:	4b77      	ldr	r3, [pc, #476]	; (8003320 <straight_table2+0x344>)
 8003144:	2205      	movs	r2, #5
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	edd7 7a01 	vldr	s15, [r7, #4]
 800314c:	eef1 7a67 	vneg.f32	s15, s15
 8003150:	4b70      	ldr	r3, [pc, #448]	; (8003314 <straight_table2+0x338>)
 8003152:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003156:	edd7 7a05 	vldr	s15, [r7, #20]
 800315a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800315e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003162:	d50e      	bpl.n	8003182 <straight_table2+0x1a6>
 8003164:	ed97 7a07 	vldr	s14, [r7, #28]
 8003168:	edd7 7a05 	vldr	s15, [r7, #20]
 800316c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003174:	d505      	bpl.n	8003182 <straight_table2+0x1a6>
 8003176:	4b6a      	ldr	r3, [pc, #424]	; (8003320 <straight_table2+0x344>)
 8003178:	2206      	movs	r2, #6
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	4a65      	ldr	r2, [pc, #404]	; (8003314 <straight_table2+0x338>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 8003182:	4b68      	ldr	r3, [pc, #416]	; (8003324 <straight_table2+0x348>)
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 8003188:	783a      	ldrb	r2, [r7, #0]
 800318a:	4b67      	ldr	r3, [pc, #412]	; (8003328 <straight_table2+0x34c>)
 800318c:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 800318e:	f004 fbe7 	bl	8007960 <pl_DriveMotor_start>
	if(motor_mode.WallCutMode==1){
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	2b01      	cmp	r3, #1
 8003196:	f040 80d3 	bne.w	8003340 <straight_table2+0x364>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 800319a:	4b64      	ldr	r3, [pc, #400]	; (800332c <straight_table2+0x350>)
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80031a2:	4b5f      	ldr	r3, [pc, #380]	; (8003320 <straight_table2+0x344>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80031a8:	4b5a      	ldr	r3, [pc, #360]	; (8003314 <straight_table2+0x338>)
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 80031b0:	bf00      	nop
 80031b2:	4b5f      	ldr	r3, [pc, #380]	; (8003330 <straight_table2+0x354>)
 80031b4:	edd3 7a00 	vldr	s15, [r3]
 80031b8:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 80031bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c4:	d409      	bmi.n	80031da <straight_table2+0x1fe>
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 80031c6:	4b5a      	ldr	r3, [pc, #360]	; (8003330 <straight_table2+0x354>)
 80031c8:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 80031cc:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003334 <straight_table2+0x358>
 80031d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d8:	dd18      	ble.n	800320c <straight_table2+0x230>
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 80031da:	4b57      	ldr	r3, [pc, #348]	; (8003338 <straight_table2+0x35c>)
 80031dc:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 80031e0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80031e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	d409      	bmi.n	8003202 <straight_table2+0x226>
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 80031ee:	4b52      	ldr	r3, [pc, #328]	; (8003338 <straight_table2+0x35c>)
 80031f0:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 80031f4:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003334 <straight_table2+0x358>
 80031f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003200:	dd04      	ble.n	800320c <straight_table2+0x230>
			  front_wall_break_90==0){}
 8003202:	4b4e      	ldr	r3, [pc, #312]	; (800333c <straight_table2+0x360>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0d2      	beq.n	80031b2 <straight_table2+0x1d6>
		straight.displacement=0;
 800320c:	4b41      	ldr	r3, [pc, #260]	; (8003314 <straight_table2+0x338>)
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003214:	edd7 7a02 	vldr	s15, [r7, #8]
 8003218:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003220:	db03      	blt.n	800322a <straight_table2+0x24e>
 8003222:	4a3c      	ldr	r2, [pc, #240]	; (8003314 <straight_table2+0x338>)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6053      	str	r3, [r2, #4]
 8003228:	e006      	b.n	8003238 <straight_table2+0x25c>
			}else{straight.acceleration = -input_acceleration;}
 800322a:	edd7 7a01 	vldr	s15, [r7, #4]
 800322e:	eef1 7a67 	vneg.f32	s15, s15
 8003232:	4b38      	ldr	r3, [pc, #224]	; (8003314 <straight_table2+0x338>)
 8003234:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003238:	4b39      	ldr	r3, [pc, #228]	; (8003320 <straight_table2+0x344>)
 800323a:	2201      	movs	r2, #1
 800323c:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800323e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003242:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324a:	dd0e      	ble.n	800326a <straight_table2+0x28e>
 800324c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003250:	edd7 7a05 	vldr	s15, [r7, #20]
 8003254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325c:	dd05      	ble.n	800326a <straight_table2+0x28e>
 800325e:	4b30      	ldr	r3, [pc, #192]	; (8003320 <straight_table2+0x344>)
 8003260:	2205      	movs	r2, #5
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	4a2b      	ldr	r2, [pc, #172]	; (8003314 <straight_table2+0x338>)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800326a:	edd7 7a05 	vldr	s15, [r7, #20]
 800326e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003276:	dd14      	ble.n	80032a2 <straight_table2+0x2c6>
 8003278:	edd7 7a05 	vldr	s15, [r7, #20]
 800327c:	eef1 7a67 	vneg.f32	s15, s15
 8003280:	ed97 7a07 	vldr	s14, [r7, #28]
 8003284:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328c:	d509      	bpl.n	80032a2 <straight_table2+0x2c6>
 800328e:	4b24      	ldr	r3, [pc, #144]	; (8003320 <straight_table2+0x344>)
 8003290:	2206      	movs	r2, #6
 8003292:	701a      	strb	r2, [r3, #0]
 8003294:	edd7 7a01 	vldr	s15, [r7, #4]
 8003298:	eef1 7a67 	vneg.f32	s15, s15
 800329c:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <straight_table2+0x338>)
 800329e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80032a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80032a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ae:	d514      	bpl.n	80032da <straight_table2+0x2fe>
 80032b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80032b4:	eef1 7a67 	vneg.f32	s15, s15
 80032b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80032bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c4:	dd09      	ble.n	80032da <straight_table2+0x2fe>
 80032c6:	4b16      	ldr	r3, [pc, #88]	; (8003320 <straight_table2+0x344>)
 80032c8:	2205      	movs	r2, #5
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80032d0:	eef1 7a67 	vneg.f32	s15, s15
 80032d4:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <straight_table2+0x338>)
 80032d6:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80032da:	edd7 7a05 	vldr	s15, [r7, #20]
 80032de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e6:	f140 825b 	bpl.w	80037a0 <straight_table2+0x7c4>
 80032ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80032ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80032f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fa:	f140 8251 	bpl.w	80037a0 <straight_table2+0x7c4>
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <straight_table2+0x344>)
 8003300:	2206      	movs	r2, #6
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	4a03      	ldr	r2, [pc, #12]	; (8003314 <straight_table2+0x338>)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6053      	str	r3, [r2, #4]
 800330a:	e249      	b.n	80037a0 <straight_table2+0x7c4>
 800330c:	20000529 	.word	0x20000529
 8003310:	200004f0 	.word	0x200004f0
 8003314:	200004d8 	.word	0x200004d8
 8003318:	200004e4 	.word	0x200004e4
 800331c:	20000805 	.word	0x20000805
 8003320:	20000804 	.word	0x20000804
 8003324:	20000528 	.word	0x20000528
 8003328:	20000590 	.word	0x20000590
 800332c:	20000534 	.word	0x20000534
 8003330:	200005cc 	.word	0x200005cc
 8003334:	425c0000 	.word	0x425c0000
 8003338:	200005d0 	.word	0x200005d0
 800333c:	200005f2 	.word	0x200005f2
	}else if(motor_mode.WallCutMode==2){
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	2b02      	cmp	r3, #2
 8003344:	f040 80c9 	bne.w	80034da <straight_table2+0x4fe>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003348:	4bb8      	ldr	r3, [pc, #736]	; (800362c <straight_table2+0x650>)
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003350:	4bb7      	ldr	r3, [pc, #732]	; (8003630 <straight_table2+0x654>)
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003356:	4bb7      	ldr	r3, [pc, #732]	; (8003634 <straight_table2+0x658>)
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 800335e:	bf00      	nop
 8003360:	4bb5      	ldr	r3, [pc, #724]	; (8003638 <straight_table2+0x65c>)
 8003362:	edd3 7a00 	vldr	s15, [r3]
 8003366:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800336a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336e:	d913      	bls.n	8003398 <straight_table2+0x3bc>
 8003370:	4bb1      	ldr	r3, [pc, #708]	; (8003638 <straight_table2+0x65c>)
 8003372:	edd3 7a00 	vldr	s15, [r3]
 8003376:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 800337a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800337e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003382:	d909      	bls.n	8003398 <straight_table2+0x3bc>
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 8003384:	4bac      	ldr	r3, [pc, #688]	; (8003638 <straight_table2+0x65c>)
 8003386:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 800338a:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800363c <straight_table2+0x660>
 800338e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003396:	db20      	blt.n	80033da <straight_table2+0x3fe>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003398:	4ba9      	ldr	r3, [pc, #676]	; (8003640 <straight_table2+0x664>)
 800339a:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 800339e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a6:	d913      	bls.n	80033d0 <straight_table2+0x3f4>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 80033a8:	4ba5      	ldr	r3, [pc, #660]	; (8003640 <straight_table2+0x664>)
 80033aa:	edd3 7a00 	vldr	s15, [r3]
 80033ae:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80033b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ba:	d909      	bls.n	80033d0 <straight_table2+0x3f4>
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 80033bc:	4ba0      	ldr	r3, [pc, #640]	; (8003640 <straight_table2+0x664>)
 80033be:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 80033c2:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800363c <straight_table2+0x660>
 80033c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ce:	db04      	blt.n	80033da <straight_table2+0x3fe>
			  front_wall_break_45==0){}
 80033d0:	4b9c      	ldr	r3, [pc, #624]	; (8003644 <straight_table2+0x668>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0c2      	beq.n	8003360 <straight_table2+0x384>
//		while((NoWallDisplacementR90<=0 ||
//				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R45) &&
//				(NoWallDisplacementL90<=0 ||
//			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L45) &&
//			  front_wall_break_90==0){}
		straight.displacement=0;
 80033da:	4b96      	ldr	r3, [pc, #600]	; (8003634 <straight_table2+0x658>)
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80033e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80033e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ee:	db03      	blt.n	80033f8 <straight_table2+0x41c>
 80033f0:	4a90      	ldr	r2, [pc, #576]	; (8003634 <straight_table2+0x658>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6053      	str	r3, [r2, #4]
 80033f6:	e006      	b.n	8003406 <straight_table2+0x42a>
			}else{straight.acceleration = -input_acceleration;}
 80033f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80033fc:	eef1 7a67 	vneg.f32	s15, s15
 8003400:	4b8c      	ldr	r3, [pc, #560]	; (8003634 <straight_table2+0x658>)
 8003402:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003406:	4b8a      	ldr	r3, [pc, #552]	; (8003630 <straight_table2+0x654>)
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800340c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003410:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003418:	dd0e      	ble.n	8003438 <straight_table2+0x45c>
 800341a:	ed97 7a07 	vldr	s14, [r7, #28]
 800341e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003422:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342a:	dd05      	ble.n	8003438 <straight_table2+0x45c>
 800342c:	4b80      	ldr	r3, [pc, #512]	; (8003630 <straight_table2+0x654>)
 800342e:	2205      	movs	r2, #5
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	4a80      	ldr	r2, [pc, #512]	; (8003634 <straight_table2+0x658>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003438:	edd7 7a05 	vldr	s15, [r7, #20]
 800343c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003444:	dd14      	ble.n	8003470 <straight_table2+0x494>
 8003446:	edd7 7a05 	vldr	s15, [r7, #20]
 800344a:	eef1 7a67 	vneg.f32	s15, s15
 800344e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345a:	d509      	bpl.n	8003470 <straight_table2+0x494>
 800345c:	4b74      	ldr	r3, [pc, #464]	; (8003630 <straight_table2+0x654>)
 800345e:	2206      	movs	r2, #6
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	edd7 7a01 	vldr	s15, [r7, #4]
 8003466:	eef1 7a67 	vneg.f32	s15, s15
 800346a:	4b72      	ldr	r3, [pc, #456]	; (8003634 <straight_table2+0x658>)
 800346c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003470:	edd7 7a05 	vldr	s15, [r7, #20]
 8003474:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347c:	d514      	bpl.n	80034a8 <straight_table2+0x4cc>
 800347e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003482:	eef1 7a67 	vneg.f32	s15, s15
 8003486:	ed97 7a07 	vldr	s14, [r7, #28]
 800348a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800348e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003492:	dd09      	ble.n	80034a8 <straight_table2+0x4cc>
 8003494:	4b66      	ldr	r3, [pc, #408]	; (8003630 <straight_table2+0x654>)
 8003496:	2205      	movs	r2, #5
 8003498:	701a      	strb	r2, [r3, #0]
 800349a:	edd7 7a01 	vldr	s15, [r7, #4]
 800349e:	eef1 7a67 	vneg.f32	s15, s15
 80034a2:	4b64      	ldr	r3, [pc, #400]	; (8003634 <straight_table2+0x658>)
 80034a4:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80034a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80034ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b4:	f140 8174 	bpl.w	80037a0 <straight_table2+0x7c4>
 80034b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80034bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80034c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c8:	f140 816a 	bpl.w	80037a0 <straight_table2+0x7c4>
 80034cc:	4b58      	ldr	r3, [pc, #352]	; (8003630 <straight_table2+0x654>)
 80034ce:	2206      	movs	r2, #6
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	4a58      	ldr	r2, [pc, #352]	; (8003634 <straight_table2+0x658>)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6053      	str	r3, [r2, #4]
 80034d8:	e162      	b.n	80037a0 <straight_table2+0x7c4>
	}else if(motor_mode.WallCutMode==3){
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	f040 80b9 	bne.w	8003654 <straight_table2+0x678>
		//斜めの右旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 80034e2:	4b52      	ldr	r3, [pc, #328]	; (800362c <straight_table2+0x650>)
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80034ea:	4b51      	ldr	r3, [pc, #324]	; (8003630 <straight_table2+0x654>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80034f0:	4b50      	ldr	r3, [pc, #320]	; (8003634 <straight_table2+0x658>)
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 80034f8:	bf00      	nop
 80034fa:	4b53      	ldr	r3, [pc, #332]	; (8003648 <straight_table2+0x66c>)
 80034fc:	edd3 7a00 	vldr	s15, [r3]
 8003500:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350c:	d409      	bmi.n	8003522 <straight_table2+0x546>
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 800350e:	4b4e      	ldr	r3, [pc, #312]	; (8003648 <straight_table2+0x66c>)
 8003510:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 8003514:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800364c <straight_table2+0x670>
 8003518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800351c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003520:	dd04      	ble.n	800352c <straight_table2+0x550>
				  front_wall_break_45slant==0){}
 8003522:	4b4b      	ldr	r3, [pc, #300]	; (8003650 <straight_table2+0x674>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	b2db      	uxtb	r3, r3
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0e6      	beq.n	80034fa <straight_table2+0x51e>
		straight.displacement=0;
 800352c:	4b41      	ldr	r3, [pc, #260]	; (8003634 <straight_table2+0x658>)
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003534:	edd7 7a02 	vldr	s15, [r7, #8]
 8003538:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800353c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003540:	db03      	blt.n	800354a <straight_table2+0x56e>
 8003542:	4a3c      	ldr	r2, [pc, #240]	; (8003634 <straight_table2+0x658>)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6053      	str	r3, [r2, #4]
 8003548:	e006      	b.n	8003558 <straight_table2+0x57c>
			}else{straight.acceleration = -input_acceleration;}
 800354a:	edd7 7a01 	vldr	s15, [r7, #4]
 800354e:	eef1 7a67 	vneg.f32	s15, s15
 8003552:	4b38      	ldr	r3, [pc, #224]	; (8003634 <straight_table2+0x658>)
 8003554:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003558:	4b35      	ldr	r3, [pc, #212]	; (8003630 <straight_table2+0x654>)
 800355a:	2201      	movs	r2, #1
 800355c:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800355e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003562:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356a:	dd0e      	ble.n	800358a <straight_table2+0x5ae>
 800356c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003570:	edd7 7a05 	vldr	s15, [r7, #20]
 8003574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357c:	dd05      	ble.n	800358a <straight_table2+0x5ae>
 800357e:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <straight_table2+0x654>)
 8003580:	2205      	movs	r2, #5
 8003582:	701a      	strb	r2, [r3, #0]
 8003584:	4a2b      	ldr	r2, [pc, #172]	; (8003634 <straight_table2+0x658>)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800358a:	edd7 7a05 	vldr	s15, [r7, #20]
 800358e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003596:	dd14      	ble.n	80035c2 <straight_table2+0x5e6>
 8003598:	edd7 7a05 	vldr	s15, [r7, #20]
 800359c:	eef1 7a67 	vneg.f32	s15, s15
 80035a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80035a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ac:	d509      	bpl.n	80035c2 <straight_table2+0x5e6>
 80035ae:	4b20      	ldr	r3, [pc, #128]	; (8003630 <straight_table2+0x654>)
 80035b0:	2206      	movs	r2, #6
 80035b2:	701a      	strb	r2, [r3, #0]
 80035b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80035b8:	eef1 7a67 	vneg.f32	s15, s15
 80035bc:	4b1d      	ldr	r3, [pc, #116]	; (8003634 <straight_table2+0x658>)
 80035be:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80035c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80035c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ce:	d514      	bpl.n	80035fa <straight_table2+0x61e>
 80035d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80035d4:	eef1 7a67 	vneg.f32	s15, s15
 80035d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80035dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e4:	dd09      	ble.n	80035fa <straight_table2+0x61e>
 80035e6:	4b12      	ldr	r3, [pc, #72]	; (8003630 <straight_table2+0x654>)
 80035e8:	2205      	movs	r2, #5
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80035f0:	eef1 7a67 	vneg.f32	s15, s15
 80035f4:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <straight_table2+0x658>)
 80035f6:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80035fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80035fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003606:	f140 80cb 	bpl.w	80037a0 <straight_table2+0x7c4>
 800360a:	ed97 7a07 	vldr	s14, [r7, #28]
 800360e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003612:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361a:	f140 80c1 	bpl.w	80037a0 <straight_table2+0x7c4>
 800361e:	4b04      	ldr	r3, [pc, #16]	; (8003630 <straight_table2+0x654>)
 8003620:	2206      	movs	r2, #6
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	4a03      	ldr	r2, [pc, #12]	; (8003634 <straight_table2+0x658>)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6053      	str	r3, [r2, #4]
 800362a:	e0b9      	b.n	80037a0 <straight_table2+0x7c4>
 800362c:	20000534 	.word	0x20000534
 8003630:	20000804 	.word	0x20000804
 8003634:	200004d8 	.word	0x200004d8
 8003638:	200005d4 	.word	0x200005d4
 800363c:	42000000 	.word	0x42000000
 8003640:	200005d8 	.word	0x200005d8
 8003644:	200005f3 	.word	0x200005f3
 8003648:	200005e4 	.word	0x200005e4
 800364c:	420c0000 	.word	0x420c0000
 8003650:	200005f4 	.word	0x200005f4
	}else if(motor_mode.WallCutMode==4){
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	2b04      	cmp	r3, #4
 8003658:	f040 80a2 	bne.w	80037a0 <straight_table2+0x7c4>
		//斜めの左旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 800365c:	4ba6      	ldr	r3, [pc, #664]	; (80038f8 <straight_table2+0x91c>)
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003664:	4ba5      	ldr	r3, [pc, #660]	; (80038fc <straight_table2+0x920>)
 8003666:	2200      	movs	r2, #0
 8003668:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 800366a:	4ba5      	ldr	r3, [pc, #660]	; (8003900 <straight_table2+0x924>)
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8003672:	bf00      	nop
 8003674:	4ba3      	ldr	r3, [pc, #652]	; (8003904 <straight_table2+0x928>)
 8003676:	edd3 7a00 	vldr	s15, [r3]
 800367a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800367e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003686:	d409      	bmi.n	800369c <straight_table2+0x6c0>
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8003688:	4b9e      	ldr	r3, [pc, #632]	; (8003904 <straight_table2+0x928>)
 800368a:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 800368e:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003908 <straight_table2+0x92c>
 8003692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369a:	dd04      	ble.n	80036a6 <straight_table2+0x6ca>
				  front_wall_break_45slant==0){}
 800369c:	4b9b      	ldr	r3, [pc, #620]	; (800390c <straight_table2+0x930>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0e6      	beq.n	8003674 <straight_table2+0x698>
		straight.displacement=0;
 80036a6:	4b96      	ldr	r3, [pc, #600]	; (8003900 <straight_table2+0x924>)
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80036ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80036b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ba:	db03      	blt.n	80036c4 <straight_table2+0x6e8>
 80036bc:	4a90      	ldr	r2, [pc, #576]	; (8003900 <straight_table2+0x924>)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6053      	str	r3, [r2, #4]
 80036c2:	e006      	b.n	80036d2 <straight_table2+0x6f6>
			}else{straight.acceleration = -input_acceleration;}
 80036c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80036c8:	eef1 7a67 	vneg.f32	s15, s15
 80036cc:	4b8c      	ldr	r3, [pc, #560]	; (8003900 <straight_table2+0x924>)
 80036ce:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80036d2:	4b8a      	ldr	r3, [pc, #552]	; (80038fc <straight_table2+0x920>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80036d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80036dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e4:	dd0e      	ble.n	8003704 <straight_table2+0x728>
 80036e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80036ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80036ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f6:	dd05      	ble.n	8003704 <straight_table2+0x728>
 80036f8:	4b80      	ldr	r3, [pc, #512]	; (80038fc <straight_table2+0x920>)
 80036fa:	2205      	movs	r2, #5
 80036fc:	701a      	strb	r2, [r3, #0]
 80036fe:	4a80      	ldr	r2, [pc, #512]	; (8003900 <straight_table2+0x924>)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003704:	edd7 7a05 	vldr	s15, [r7, #20]
 8003708:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003710:	dd14      	ble.n	800373c <straight_table2+0x760>
 8003712:	edd7 7a05 	vldr	s15, [r7, #20]
 8003716:	eef1 7a67 	vneg.f32	s15, s15
 800371a:	ed97 7a07 	vldr	s14, [r7, #28]
 800371e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003726:	d509      	bpl.n	800373c <straight_table2+0x760>
 8003728:	4b74      	ldr	r3, [pc, #464]	; (80038fc <straight_table2+0x920>)
 800372a:	2206      	movs	r2, #6
 800372c:	701a      	strb	r2, [r3, #0]
 800372e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003732:	eef1 7a67 	vneg.f32	s15, s15
 8003736:	4b72      	ldr	r3, [pc, #456]	; (8003900 <straight_table2+0x924>)
 8003738:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800373c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003740:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003748:	d514      	bpl.n	8003774 <straight_table2+0x798>
 800374a:	edd7 7a05 	vldr	s15, [r7, #20]
 800374e:	eef1 7a67 	vneg.f32	s15, s15
 8003752:	ed97 7a07 	vldr	s14, [r7, #28]
 8003756:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800375a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375e:	dd09      	ble.n	8003774 <straight_table2+0x798>
 8003760:	4b66      	ldr	r3, [pc, #408]	; (80038fc <straight_table2+0x920>)
 8003762:	2205      	movs	r2, #5
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	edd7 7a01 	vldr	s15, [r7, #4]
 800376a:	eef1 7a67 	vneg.f32	s15, s15
 800376e:	4b64      	ldr	r3, [pc, #400]	; (8003900 <straight_table2+0x924>)
 8003770:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003774:	edd7 7a05 	vldr	s15, [r7, #20]
 8003778:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800377c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003780:	d50e      	bpl.n	80037a0 <straight_table2+0x7c4>
 8003782:	ed97 7a07 	vldr	s14, [r7, #28]
 8003786:	edd7 7a05 	vldr	s15, [r7, #20]
 800378a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800378e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003792:	d505      	bpl.n	80037a0 <straight_table2+0x7c4>
 8003794:	4b59      	ldr	r3, [pc, #356]	; (80038fc <straight_table2+0x920>)
 8003796:	2206      	movs	r2, #6
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	4a59      	ldr	r2, [pc, #356]	; (8003900 <straight_table2+0x924>)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6053      	str	r3, [r2, #4]
	}

	if(motor_mode.calMazeMode==0){
 80037a0:	78bb      	ldrb	r3, [r7, #2]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 809e 	bne.w	80038e4 <straight_table2+0x908>
	while (g_acc_flag!=4){
 80037a8:	e074      	b.n	8003894 <straight_table2+0x8b8>
		if(motor_mode.WallCutMode==1){
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d120      	bne.n	80037f2 <straight_table2+0x816>
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80037b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80037b4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80037b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037bc:	4b54      	ldr	r3, [pc, #336]	; (8003910 <straight_table2+0x934>)
 80037be:	edd3 7a00 	vldr	s15, [r3]
 80037c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ca:	d90e      	bls.n	80037ea <straight_table2+0x80e>
			   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90)){
 80037cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80037d0:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 80037d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037d8:	4b4e      	ldr	r3, [pc, #312]	; (8003914 <straight_table2+0x938>)
 80037da:	edd3 7a00 	vldr	s15, [r3]
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80037de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e6:	d900      	bls.n	80037ea <straight_table2+0x80e>
 80037e8:	e054      	b.n	8003894 <straight_table2+0x8b8>
				g_acc_flag=4;
 80037ea:	4b44      	ldr	r3, [pc, #272]	; (80038fc <straight_table2+0x920>)
 80037ec:	2204      	movs	r2, #4
 80037ee:	701a      	strb	r2, [r3, #0]
				break;
 80037f0:	e055      	b.n	800389e <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==2){
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d121      	bne.n	800383c <straight_table2+0x860>
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 80037f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80037fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003800:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003804:	4b44      	ldr	r3, [pc, #272]	; (8003918 <straight_table2+0x93c>)
 8003806:	edd3 7a00 	vldr	s15, [r3]
 800380a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800380e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003812:	d900      	bls.n	8003816 <straight_table2+0x83a>
 8003814:	e03e      	b.n	8003894 <straight_table2+0x8b8>
			   NoWallDisplacementR45>=input_displacement+CUTPLACE_TO_CENTER_R45 ){
 8003816:	edd7 7a05 	vldr	s15, [r7, #20]
 800381a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800381e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003822:	4b3e      	ldr	r3, [pc, #248]	; (800391c <straight_table2+0x940>)
 8003824:	edd3 7a00 	vldr	s15, [r3]
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8003828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800382c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003830:	d900      	bls.n	8003834 <straight_table2+0x858>
 8003832:	e02f      	b.n	8003894 <straight_table2+0x8b8>
				g_acc_flag=4;
 8003834:	4b31      	ldr	r3, [pc, #196]	; (80038fc <straight_table2+0x920>)
 8003836:	2204      	movs	r2, #4
 8003838:	701a      	strb	r2, [r3, #0]
				break;
 800383a:	e030      	b.n	800389e <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==3){
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	2b03      	cmp	r3, #3
 8003840:	d112      	bne.n	8003868 <straight_table2+0x88c>
			if(NoWallDisplacementR45slant2>=input_displacement+CUTPLACE_TO_CENTER_R45_SLANT ){
 8003842:	edd7 7a05 	vldr	s15, [r7, #20]
 8003846:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800384a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800384e:	4b34      	ldr	r3, [pc, #208]	; (8003920 <straight_table2+0x944>)
 8003850:	edd3 7a00 	vldr	s15, [r3]
 8003854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385c:	d900      	bls.n	8003860 <straight_table2+0x884>
 800385e:	e019      	b.n	8003894 <straight_table2+0x8b8>
				g_acc_flag=4;
 8003860:	4b26      	ldr	r3, [pc, #152]	; (80038fc <straight_table2+0x920>)
 8003862:	2204      	movs	r2, #4
 8003864:	701a      	strb	r2, [r3, #0]
				break;
 8003866:	e01a      	b.n	800389e <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==4){
 8003868:	78fb      	ldrb	r3, [r7, #3]
 800386a:	2b04      	cmp	r3, #4
 800386c:	d112      	bne.n	8003894 <straight_table2+0x8b8>
			if(NoWallDisplacementL45slant2>=input_displacement+CUTPLACE_TO_CENTER_L45_SLANT){
 800386e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003872:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800387a:	4b22      	ldr	r3, [pc, #136]	; (8003904 <straight_table2+0x928>)
 800387c:	edd3 7a00 	vldr	s15, [r3]
 8003880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003888:	d900      	bls.n	800388c <straight_table2+0x8b0>
 800388a:	e003      	b.n	8003894 <straight_table2+0x8b8>
				g_acc_flag=4;
 800388c:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <straight_table2+0x920>)
 800388e:	2204      	movs	r2, #4
 8003890:	701a      	strb	r2, [r3, #0]
				break;
 8003892:	e004      	b.n	800389e <straight_table2+0x8c2>
	while (g_acc_flag!=4){
 8003894:	4b19      	ldr	r3, [pc, #100]	; (80038fc <straight_table2+0x920>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b04      	cmp	r3, #4
 800389c:	d185      	bne.n	80037aa <straight_table2+0x7ce>
			}
		}

	}
	if(input_end_velocity==0){//BREAK
 800389e:	edd7 7a03 	vldr	s15, [r7, #12]
 80038a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038aa:	d105      	bne.n	80038b8 <straight_table2+0x8dc>
		wait_ms_NoReset(100);
 80038ac:	2064      	movs	r0, #100	; 0x64
 80038ae:	f004 fb2f 	bl	8007f10 <wait_ms_NoReset>
		modeacc = 0;
 80038b2:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <straight_table2+0x948>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 80038b8:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <straight_table2+0x94c>)
 80038ba:	ed93 7a00 	vldr	s14, [r3]
 80038be:	edd7 7a05 	vldr	s15, [r7, #20]
 80038c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038c6:	4b18      	ldr	r3, [pc, #96]	; (8003928 <straight_table2+0x94c>)
 80038c8:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 80038cc:	4b17      	ldr	r3, [pc, #92]	; (800392c <straight_table2+0x950>)
 80038ce:	ed93 7a00 	vldr	s14, [r3]
 80038d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80038d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038da:	4b14      	ldr	r3, [pc, #80]	; (800392c <straight_table2+0x950>)
 80038dc:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 80038e0:	f004 f84c 	bl	800797c <pl_DriveMotor_stop>

	}

	return straight.velocity;
 80038e4:	4b06      	ldr	r3, [pc, #24]	; (8003900 <straight_table2+0x924>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	ee07 3a90 	vmov	s15, r3



}
 80038ec:	eeb0 0a67 	vmov.f32	s0, s15
 80038f0:	3720      	adds	r7, #32
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000534 	.word	0x20000534
 80038fc:	20000804 	.word	0x20000804
 8003900:	200004d8 	.word	0x200004d8
 8003904:	200005e8 	.word	0x200005e8
 8003908:	420c0000 	.word	0x420c0000
 800390c:	200005f4 	.word	0x200005f4
 8003910:	200005d0 	.word	0x200005d0
 8003914:	200005cc 	.word	0x200005cc
 8003918:	200005d8 	.word	0x200005d8
 800391c:	200005d4 	.word	0x200005d4
 8003920:	200005e4 	.word	0x200005e4
 8003924:	20000528 	.word	0x20000528
 8003928:	20000220 	.word	0x20000220
 800392c:	20000224 	.word	0x20000224

08003930 <End_straight>:

void End_straight(float input_displacement,MOTOR_MODE motor_mode,_Bool right_wall,_Bool left_wall){
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	ed87 0a03 	vstr	s0, [r7, #12]
 800393a:	60b8      	str	r0, [r7, #8]
 800393c:	460b      	mov	r3, r1
 800393e:	71fb      	strb	r3, [r7, #7]
 8003940:	4613      	mov	r3, r2
 8003942:	71bb      	strb	r3, [r7, #6]
	while (g_acc_flag!=4){
 8003944:	e02f      	b.n	80039a6 <End_straight+0x76>
		if(right_wall == 0 || left_wall == 0){
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	f083 0301 	eor.w	r3, r3, #1
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d105      	bne.n	800395e <End_straight+0x2e>
 8003952:	79bb      	ldrb	r3, [r7, #6]
 8003954:	f083 0301 	eor.w	r3, r3, #1
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d023      	beq.n	80039a6 <End_straight+0x76>
		if(motor_mode.WallCutMode==1){
 800395e:	7afb      	ldrb	r3, [r7, #11]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d120      	bne.n	80039a6 <End_straight+0x76>
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003964:	edd7 7a03 	vldr	s15, [r7, #12]
 8003968:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800396c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003970:	4b1c      	ldr	r3, [pc, #112]	; (80039e4 <End_straight+0xb4>)
 8003972:	edd3 7a00 	vldr	s15, [r3]
 8003976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800397a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397e:	d90e      	bls.n	800399e <End_straight+0x6e>
					   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90 ){
 8003980:	edd7 7a03 	vldr	s15, [r7, #12]
 8003984:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8003988:	ee37 7a87 	vadd.f32	s14, s15, s14
 800398c:	4b16      	ldr	r3, [pc, #88]	; (80039e8 <End_straight+0xb8>)
 800398e:	edd3 7a00 	vldr	s15, [r3]
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800399a:	d900      	bls.n	800399e <End_straight+0x6e>
 800399c:	e003      	b.n	80039a6 <End_straight+0x76>
						g_acc_flag=4;
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <End_straight+0xbc>)
 80039a0:	2204      	movs	r2, #4
 80039a2:	701a      	strb	r2, [r3, #0]
						break;
 80039a4:	e004      	b.n	80039b0 <End_straight+0x80>
	while (g_acc_flag!=4){
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <End_straight+0xbc>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d1ca      	bne.n	8003946 <End_straight+0x16>
//			}
//		}

	}
//	while(g_MotorEnd_flag==0){}
	E_distanceL = E_distanceL - input_displacement;
 80039b0:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <End_straight+0xc0>)
 80039b2:	ed93 7a00 	vldr	s14, [r3]
 80039b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80039ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <End_straight+0xc0>)
 80039c0:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <End_straight+0xc4>)
 80039c6:	ed93 7a00 	vldr	s14, [r3]
 80039ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80039ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <End_straight+0xc4>)
 80039d4:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 80039d8:	f003 ffd0 	bl	800797c <pl_DriveMotor_stop>
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	200005d0 	.word	0x200005d0
 80039e8:	200005cc 	.word	0x200005cc
 80039ec:	20000804 	.word	0x20000804
 80039f0:	20000220 	.word	0x20000220
 80039f4:	20000224 	.word	0x20000224

080039f8 <turning_table2>:

float turning_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	ed87 0a05 	vstr	s0, [r7, #20]
 8003a02:	edc7 0a04 	vstr	s1, [r7, #16]
 8003a06:	ed87 1a03 	vstr	s2, [r7, #12]
 8003a0a:	edc7 1a02 	vstr	s3, [r7, #8]
 8003a0e:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003a12:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a16:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003a1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a22:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003a26:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003a2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003a2e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a36:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003a3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a46:	d505      	bpl.n	8003a54 <turning_table2+0x5c>
 8003a48:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a4c:	eef1 7a67 	vneg.f32	s15, s15
 8003a50:	edc7 7a01 	vstr	s15, [r7, #4]

	Trapezoid_turning.displacement = input_displacement;
 8003a54:	4a69      	ldr	r2, [pc, #420]	; (8003bfc <turning_table2+0x204>)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003a5a:	4a68      	ldr	r2, [pc, #416]	; (8003bfc <turning_table2+0x204>)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003a60:	4a66      	ldr	r2, [pc, #408]	; (8003bfc <turning_table2+0x204>)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003a66:	4a65      	ldr	r2, [pc, #404]	; (8003bfc <turning_table2+0x204>)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003a6c:	4a63      	ldr	r2, [pc, #396]	; (8003bfc <turning_table2+0x204>)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003a72:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7e:	db03      	blt.n	8003a88 <turning_table2+0x90>
 8003a80:	4a5f      	ldr	r2, [pc, #380]	; (8003c00 <turning_table2+0x208>)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6053      	str	r3, [r2, #4]
 8003a86:	e006      	b.n	8003a96 <turning_table2+0x9e>
	}else{turning.acceleration = -input_acceleration;}
 8003a88:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a8c:	eef1 7a67 	vneg.f32	s15, s15
 8003a90:	4b5b      	ldr	r3, [pc, #364]	; (8003c00 <turning_table2+0x208>)
 8003a92:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003a96:	4a5a      	ldr	r2, [pc, #360]	; (8003c00 <turning_table2+0x208>)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003a9c:	4b58      	ldr	r3, [pc, #352]	; (8003c00 <turning_table2+0x208>)
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003aa4:	4b57      	ldr	r3, [pc, #348]	; (8003c04 <turning_table2+0x20c>)
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003aac:	4b55      	ldr	r3, [pc, #340]	; (8003c04 <turning_table2+0x20c>)
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003ab4:	4b53      	ldr	r3, [pc, #332]	; (8003c04 <turning_table2+0x20c>)
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003abc:	4b52      	ldr	r3, [pc, #328]	; (8003c08 <turning_table2+0x210>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003ac2:	4b52      	ldr	r3, [pc, #328]	; (8003c0c <turning_table2+0x214>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003ac8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003acc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad4:	dd0e      	ble.n	8003af4 <turning_table2+0xfc>
 8003ad6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ada:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ade:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae6:	dd05      	ble.n	8003af4 <turning_table2+0xfc>
 8003ae8:	4b48      	ldr	r3, [pc, #288]	; (8003c0c <turning_table2+0x214>)
 8003aea:	2205      	movs	r2, #5
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	4a44      	ldr	r2, [pc, #272]	; (8003c00 <turning_table2+0x208>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003af4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b00:	dd14      	ble.n	8003b2c <turning_table2+0x134>
 8003b02:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b06:	eef1 7a67 	vneg.f32	s15, s15
 8003b0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b16:	d509      	bpl.n	8003b2c <turning_table2+0x134>
 8003b18:	4b3c      	ldr	r3, [pc, #240]	; (8003c0c <turning_table2+0x214>)
 8003b1a:	2206      	movs	r2, #6
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b22:	eef1 7a67 	vneg.f32	s15, s15
 8003b26:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <turning_table2+0x208>)
 8003b28:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003b2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b38:	d514      	bpl.n	8003b64 <turning_table2+0x16c>
 8003b3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b3e:	eef1 7a67 	vneg.f32	s15, s15
 8003b42:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4e:	dd09      	ble.n	8003b64 <turning_table2+0x16c>
 8003b50:	4b2e      	ldr	r3, [pc, #184]	; (8003c0c <turning_table2+0x214>)
 8003b52:	2205      	movs	r2, #5
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b5a:	eef1 7a67 	vneg.f32	s15, s15
 8003b5e:	4b28      	ldr	r3, [pc, #160]	; (8003c00 <turning_table2+0x208>)
 8003b60:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003b64:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b70:	d50e      	bpl.n	8003b90 <turning_table2+0x198>
 8003b72:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b76:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b82:	d505      	bpl.n	8003b90 <turning_table2+0x198>
 8003b84:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <turning_table2+0x214>)
 8003b86:	2206      	movs	r2, #6
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	4a1d      	ldr	r2, [pc, #116]	; (8003c00 <turning_table2+0x208>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8003b90:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <turning_table2+0x218>)
 8003b92:	2202      	movs	r2, #2
 8003b94:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003b96:	f003 fee3 	bl	8007960 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003b9a:	bf00      	nop
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <turning_table2+0x214>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d1fa      	bne.n	8003b9c <turning_table2+0x1a4>

	}
	if(input_end_velocity==0){//BREAK
 8003ba6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003baa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb2:	d106      	bne.n	8003bc2 <turning_table2+0x1ca>
		wait_ms_NoReset(300);
 8003bb4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003bb8:	f004 f9aa 	bl	8007f10 <wait_ms_NoReset>
		modeacc = 0;
 8003bbc:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <turning_table2+0x218>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <turning_table2+0x21c>)
 8003bc4:	ed93 7a00 	vldr	s14, [r3]
 8003bc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bd0:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <turning_table2+0x21c>)
 8003bd2:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003bd6:	f003 fed1 	bl	800797c <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003bda:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <turning_table2+0x220>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a0f      	ldr	r2, [pc, #60]	; (8003c1c <turning_table2+0x224>)
 8003be0:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003be2:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <turning_table2+0x228>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a0f      	ldr	r2, [pc, #60]	; (8003c24 <turning_table2+0x22c>)
 8003be8:	6013      	str	r3, [r2, #0]

	return turning.velocity;
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <turning_table2+0x208>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	ee07 3a90 	vmov	s15, r3
}
 8003bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf6:	3720      	adds	r7, #32
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000504 	.word	0x20000504
 8003c00:	200004e4 	.word	0x200004e4
 8003c04:	200004d8 	.word	0x200004d8
 8003c08:	20000805 	.word	0x20000805
 8003c0c:	20000804 	.word	0x20000804
 8003c10:	20000528 	.word	0x20000528
 8003c14:	20000264 	.word	0x20000264
 8003c18:	20000228 	.word	0x20000228
 8003c1c:	20000258 	.word	0x20000258
 8003c20:	2000022c 	.word	0x2000022c
 8003c24:	2000025c 	.word	0x2000025c

08003c28 <slalom_table2>:



float slalom_table2(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003c32:	edc7 0a04 	vstr	s1, [r7, #16]
 8003c36:	ed87 1a03 	vstr	s2, [r7, #12]
 8003c3a:	edc7 1a02 	vstr	s3, [r7, #8]
 8003c3e:	ed87 2a01 	vstr	s4, [r7, #4]
 8003c42:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003c46:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c4a:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003c4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c56:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003c5a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003c5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003c62:	ed97 7a00 	vldr	s14, [r7]
 8003c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c6a:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003c6e:	edd7 7a00 	vldr	s15, [r7]
 8003c72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7a:	d505      	bpl.n	8003c88 <slalom_table2+0x60>
 8003c7c:	edd7 7a00 	vldr	s15, [r7]
 8003c80:	eef1 7a67 	vneg.f32	s15, s15
 8003c84:	edc7 7a00 	vstr	s15, [r7]

	Trapezoid_turning.displacement = input_displacement;
 8003c88:	4a5e      	ldr	r2, [pc, #376]	; (8003e04 <slalom_table2+0x1dc>)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003c8e:	4a5d      	ldr	r2, [pc, #372]	; (8003e04 <slalom_table2+0x1dc>)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003c94:	4a5b      	ldr	r2, [pc, #364]	; (8003e04 <slalom_table2+0x1dc>)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003c9a:	4a5a      	ldr	r2, [pc, #360]	; (8003e04 <slalom_table2+0x1dc>)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003ca0:	4a58      	ldr	r2, [pc, #352]	; (8003e04 <slalom_table2+0x1dc>)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003ca6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003caa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb2:	db03      	blt.n	8003cbc <slalom_table2+0x94>
 8003cb4:	4a54      	ldr	r2, [pc, #336]	; (8003e08 <slalom_table2+0x1e0>)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6053      	str	r3, [r2, #4]
 8003cba:	e006      	b.n	8003cca <slalom_table2+0xa2>
	}else{turning.acceleration = -input_acceleration;}
 8003cbc:	edd7 7a00 	vldr	s15, [r7]
 8003cc0:	eef1 7a67 	vneg.f32	s15, s15
 8003cc4:	4b50      	ldr	r3, [pc, #320]	; (8003e08 <slalom_table2+0x1e0>)
 8003cc6:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003cca:	4a4f      	ldr	r2, [pc, #316]	; (8003e08 <slalom_table2+0x1e0>)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003cd0:	4b4d      	ldr	r3, [pc, #308]	; (8003e08 <slalom_table2+0x1e0>)
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003cd8:	4a4c      	ldr	r2, [pc, #304]	; (8003e0c <slalom_table2+0x1e4>)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003cde:	4b4b      	ldr	r3, [pc, #300]	; (8003e0c <slalom_table2+0x1e4>)
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003ce6:	4b49      	ldr	r3, [pc, #292]	; (8003e0c <slalom_table2+0x1e4>)
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003cee:	4b48      	ldr	r3, [pc, #288]	; (8003e10 <slalom_table2+0x1e8>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003cf4:	4b47      	ldr	r3, [pc, #284]	; (8003e14 <slalom_table2+0x1ec>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003cfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d06:	dd0e      	ble.n	8003d26 <slalom_table2+0xfe>
 8003d08:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d18:	dd05      	ble.n	8003d26 <slalom_table2+0xfe>
 8003d1a:	4b3e      	ldr	r3, [pc, #248]	; (8003e14 <slalom_table2+0x1ec>)
 8003d1c:	2205      	movs	r2, #5
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	4a39      	ldr	r2, [pc, #228]	; (8003e08 <slalom_table2+0x1e0>)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003d26:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d32:	dd14      	ble.n	8003d5e <slalom_table2+0x136>
 8003d34:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d38:	eef1 7a67 	vneg.f32	s15, s15
 8003d3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d48:	d509      	bpl.n	8003d5e <slalom_table2+0x136>
 8003d4a:	4b32      	ldr	r3, [pc, #200]	; (8003e14 <slalom_table2+0x1ec>)
 8003d4c:	2206      	movs	r2, #6
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	edd7 7a00 	vldr	s15, [r7]
 8003d54:	eef1 7a67 	vneg.f32	s15, s15
 8003d58:	4b2b      	ldr	r3, [pc, #172]	; (8003e08 <slalom_table2+0x1e0>)
 8003d5a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003d5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6a:	d514      	bpl.n	8003d96 <slalom_table2+0x16e>
 8003d6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d70:	eef1 7a67 	vneg.f32	s15, s15
 8003d74:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d80:	dd09      	ble.n	8003d96 <slalom_table2+0x16e>
 8003d82:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <slalom_table2+0x1ec>)
 8003d84:	2205      	movs	r2, #5
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	edd7 7a00 	vldr	s15, [r7]
 8003d8c:	eef1 7a67 	vneg.f32	s15, s15
 8003d90:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <slalom_table2+0x1e0>)
 8003d92:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003d96:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da2:	d50e      	bpl.n	8003dc2 <slalom_table2+0x19a>
 8003da4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003da8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db4:	d505      	bpl.n	8003dc2 <slalom_table2+0x19a>
 8003db6:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <slalom_table2+0x1ec>)
 8003db8:	2206      	movs	r2, #6
 8003dba:	701a      	strb	r2, [r3, #0]
 8003dbc:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <slalom_table2+0x1e0>)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6053      	str	r3, [r2, #4]
	modeacc = 4;
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <slalom_table2+0x1f0>)
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	701a      	strb	r2, [r3, #0]
//	enc.sigma_error=0;
	pl_DriveMotor_start();
 8003dc8:	f003 fdca 	bl	8007960 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003dcc:	bf00      	nop
 8003dce:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <slalom_table2+0x1ec>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d1fa      	bne.n	8003dce <slalom_table2+0x1a6>

	}
//	modeacc = 0;
//	enc.sigma_error=0;

	angle = angle - input_displacement;
 8003dd8:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <slalom_table2+0x1f4>)
 8003dda:	ed93 7a00 	vldr	s14, [r3]
 8003dde:	edd7 7a04 	vldr	s15, [r7, #16]
 8003de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003de6:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <slalom_table2+0x1f4>)
 8003de8:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003dec:	f003 fdc6 	bl	800797c <pl_DriveMotor_stop>

	return turning.velocity;
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <slalom_table2+0x1e0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	ee07 3a90 	vmov	s15, r3
}
 8003df8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000504 	.word	0x20000504
 8003e08:	200004e4 	.word	0x200004e4
 8003e0c:	200004d8 	.word	0x200004d8
 8003e10:	20000805 	.word	0x20000805
 8003e14:	20000804 	.word	0x20000804
 8003e18:	20000528 	.word	0x20000528
 8003e1c:	20000264 	.word	0x20000264

08003e20 <no_angle>:

void no_angle(void){
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003e24:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <no_angle+0x88>)
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003e2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ea8 <no_angle+0x88>)
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003e34:	4b1c      	ldr	r3, [pc, #112]	; (8003ea8 <no_angle+0x88>)
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <no_angle+0x8c>)
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <no_angle+0x8c>)
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003e4c:	4b17      	ldr	r3, [pc, #92]	; (8003eac <no_angle+0x8c>)
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	609a      	str	r2, [r3, #8]

	modeacc = 3;
 8003e54:	4b16      	ldr	r3, [pc, #88]	; (8003eb0 <no_angle+0x90>)
 8003e56:	2203      	movs	r2, #3
 8003e58:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003e5a:	f003 fd81 	bl	8007960 <pl_DriveMotor_start>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003e5e:	e002      	b.n	8003e66 <no_angle+0x46>
		HAL_Delay(1);
 8003e60:	2001      	movs	r0, #1
 8003e62:	f014 ff5b 	bl	8018d1c <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003e66:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <no_angle+0x94>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e6e:	ddf7      	ble.n	8003e60 <no_angle+0x40>
 8003e70:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <no_angle+0x94>)
 8003e72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e76:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e7a:	ddf1      	ble.n	8003e60 <no_angle+0x40>
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <no_angle+0x94>)
 8003e7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003e82:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e86:	ddeb      	ble.n	8003e60 <no_angle+0x40>
//		if(record_time >= max_record_time){
//			break;
//		}
	}
	modeacc = 0;
 8003e88:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <no_angle+0x90>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8003e8e:	f003 fd75 	bl	800797c <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <no_angle+0x98>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a09      	ldr	r2, [pc, #36]	; (8003ebc <no_angle+0x9c>)
 8003e98:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003e9a:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <no_angle+0xa0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a09      	ldr	r2, [pc, #36]	; (8003ec4 <no_angle+0xa4>)
 8003ea0:	6013      	str	r3, [r2, #0]

}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	200004e4 	.word	0x200004e4
 8003eac:	200004d8 	.word	0x200004d8
 8003eb0:	20000528 	.word	0x20000528
 8003eb4:	200002b8 	.word	0x200002b8
 8003eb8:	20000228 	.word	0x20000228
 8003ebc:	20000258 	.word	0x20000258
 8003ec0:	2000022c 	.word	0x2000022c
 8003ec4:	2000025c 	.word	0x2000025c

08003ec8 <mollifier_slalom_table>:


void mollifier_slalom_table(float input_center_velocity,float input_displacement, float input_max_turning_velocity) {
 8003ec8:	b5b0      	push	{r4, r5, r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	ed87 0a03 	vstr	s0, [r7, #12]
 8003ed2:	edc7 0a02 	vstr	s1, [r7, #8]
 8003ed6:	ed87 1a01 	vstr	s2, [r7, #4]

	// 例外処理

	Mollifier_turning.center_velocity = input_center_velocity;
 8003eda:	4a3d      	ldr	r2, [pc, #244]	; (8003fd0 <mollifier_slalom_table+0x108>)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6053      	str	r3, [r2, #4]
	Mollifier_turning.displacement = input_displacement;
 8003ee0:	4a3b      	ldr	r2, [pc, #236]	; (8003fd0 <mollifier_slalom_table+0x108>)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	6013      	str	r3, [r2, #0]
	Mollifier_turning.max_turning_velocity = input_max_turning_velocity;
 8003ee6:	4a3a      	ldr	r2, [pc, #232]	; (8003fd0 <mollifier_slalom_table+0x108>)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6093      	str	r3, [r2, #8]


	turning.velocity = 0;
 8003eec:	4b39      	ldr	r3, [pc, #228]	; (8003fd4 <mollifier_slalom_table+0x10c>)
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003ef4:	4b37      	ldr	r3, [pc, #220]	; (8003fd4 <mollifier_slalom_table+0x10c>)
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003efc:	4a36      	ldr	r2, [pc, #216]	; (8003fd8 <mollifier_slalom_table+0x110>)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003f02:	4b35      	ldr	r3, [pc, #212]	; (8003fd8 <mollifier_slalom_table+0x110>)
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003f0a:	4b33      	ldr	r3, [pc, #204]	; (8003fd8 <mollifier_slalom_table+0x110>)
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003f12:	4b32      	ldr	r3, [pc, #200]	; (8003fdc <mollifier_slalom_table+0x114>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003f18:	4b31      	ldr	r3, [pc, #196]	; (8003fe0 <mollifier_slalom_table+0x118>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	701a      	strb	r2, [r3, #0]
	mollifier_timer=-fabs(input_displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input_max_turning_velocity;
 8003f1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f22:	eef0 7ae7 	vabs.f32	s15, s15
 8003f26:	ee17 0a90 	vmov	r0, s15
 8003f2a:	f7fc fb35 	bl	8000598 <__aeabi_f2d>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4614      	mov	r4, r2
 8003f34:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003f38:	a321      	add	r3, pc, #132	; (adr r3, 8003fc0 <mollifier_slalom_table+0xf8>)
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	4620      	mov	r0, r4
 8003f40:	4629      	mov	r1, r5
 8003f42:	f7fc fcab 	bl	800089c <__aeabi_ddiv>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	a31e      	add	r3, pc, #120	; (adr r3, 8003fc8 <mollifier_slalom_table+0x100>)
 8003f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f54:	f7fc fb78 	bl	8000648 <__aeabi_dmul>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4614      	mov	r4, r2
 8003f5e:	461d      	mov	r5, r3
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7fc fb19 	bl	8000598 <__aeabi_f2d>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	f7fc fc95 	bl	800089c <__aeabi_ddiv>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4610      	mov	r0, r2
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f7fc fe3d 	bl	8000bf8 <__aeabi_d2f>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <mollifier_slalom_table+0x11c>)
 8003f82:	6013      	str	r3, [r2, #0]
	modeacc = 6;
 8003f84:	4b18      	ldr	r3, [pc, #96]	; (8003fe8 <mollifier_slalom_table+0x120>)
 8003f86:	2206      	movs	r2, #6
 8003f88:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003f8a:	f003 fce9 	bl	8007960 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003f8e:	bf00      	nop
 8003f90:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <mollifier_slalom_table+0x118>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d1fa      	bne.n	8003f90 <mollifier_slalom_table+0xc8>

	}
//	modeacc = 0;


	angle = angle - input_displacement;
 8003f9a:	4b14      	ldr	r3, [pc, #80]	; (8003fec <mollifier_slalom_table+0x124>)
 8003f9c:	ed93 7a00 	vldr	s14, [r3]
 8003fa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fa8:	4b10      	ldr	r3, [pc, #64]	; (8003fec <mollifier_slalom_table+0x124>)
 8003faa:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003fae:	f003 fce5 	bl	800797c <pl_DriveMotor_stop>

}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	f3af 8000 	nop.w
 8003fc0:	f9db22d1 	.word	0xf9db22d1
 8003fc4:	3fdc6a7e 	.word	0x3fdc6a7e
 8003fc8:	362cef38 	.word	0x362cef38
 8003fcc:	3fd78b56 	.word	0x3fd78b56
 8003fd0:	20000518 	.word	0x20000518
 8003fd4:	200004e4 	.word	0x200004e4
 8003fd8:	200004d8 	.word	0x200004d8
 8003fdc:	20000805 	.word	0x20000805
 8003fe0:	20000804 	.word	0x20000804
 8003fe4:	20000800 	.word	0x20000800
 8003fe8:	20000528 	.word	0x20000528
 8003fec:	20000264 	.word	0x20000264

08003ff0 <no_frontwall_straight>:


void no_frontwall_straight(void){
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003ff4:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <no_frontwall_straight+0x70>)
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003ffc:	4b18      	ldr	r3, [pc, #96]	; (8004060 <no_frontwall_straight+0x70>)
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8004004:	4b16      	ldr	r3, [pc, #88]	; (8004060 <no_frontwall_straight+0x70>)
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 800400c:	4b15      	ldr	r3, [pc, #84]	; (8004064 <no_frontwall_straight+0x74>)
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8004014:	4b13      	ldr	r3, [pc, #76]	; (8004064 <no_frontwall_straight+0x74>)
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <no_frontwall_straight+0x74>)
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	609a      	str	r2, [r3, #8]

	g_FrontWallControl_mode=1;
 8004024:	4b10      	ldr	r3, [pc, #64]	; (8004068 <no_frontwall_straight+0x78>)
 8004026:	2201      	movs	r2, #1
 8004028:	701a      	strb	r2, [r3, #0]
	modeacc = 5;
 800402a:	4b10      	ldr	r3, [pc, #64]	; (800406c <no_frontwall_straight+0x7c>)
 800402c:	2205      	movs	r2, #5
 800402e:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004030:	f003 fc96 	bl	8007960 <pl_DriveMotor_start>
	wait_ms_NoReset(150);
 8004034:	2096      	movs	r0, #150	; 0x96
 8004036:	f003 ff6b 	bl	8007f10 <wait_ms_NoReset>
//		HAL_Delay(1);
////		if(record_time >= max_record_time){
////			break;
////		}
//	}
	g_FrontWallControl_mode=0;
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <no_frontwall_straight+0x78>)
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
	modeacc = 0;
 8004040:	4b0a      	ldr	r3, [pc, #40]	; (800406c <no_frontwall_straight+0x7c>)
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8004046:	f003 fc99 	bl	800797c <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <no_frontwall_straight+0x80>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a09      	ldr	r2, [pc, #36]	; (8004074 <no_frontwall_straight+0x84>)
 8004050:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8004052:	4b09      	ldr	r3, [pc, #36]	; (8004078 <no_frontwall_straight+0x88>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a09      	ldr	r2, [pc, #36]	; (800407c <no_frontwall_straight+0x8c>)
 8004058:	6013      	str	r3, [r2, #0]

}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	200004e4 	.word	0x200004e4
 8004064:	200004d8 	.word	0x200004d8
 8004068:	20000591 	.word	0x20000591
 800406c:	20000528 	.word	0x20000528
 8004070:	20000228 	.word	0x20000228
 8004074:	20000258 	.word	0x20000258
 8004078:	2000022c 	.word	0x2000022c
 800407c:	2000025c 	.word	0x2000025c

08004080 <feedforward_const_accel>:
#include "fail_safe.h"

void feedforward_const_accel(float *feedforward_straight,
		float straight_velocity, float straight_acceleration,
		float *feedforward_turning, float turning_velocity,
		float turning_acceleration) {
 8004080:	b5b0      	push	{r4, r5, r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	6178      	str	r0, [r7, #20]
 8004088:	ed87 0a04 	vstr	s0, [r7, #16]
 800408c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	ed87 1a01 	vstr	s2, [r7, #4]
 8004096:	edc7 1a00 	vstr	s3, [r7]

float ImT;//0.00000116 //kg/m^2 ロータ慣性モーメントターン用

if(highspeed_mode == 1){
 800409a:	4bd3      	ldr	r3, [pc, #844]	; (80043e8 <feedforward_const_accel+0x368>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d102      	bne.n	80040a8 <feedforward_const_accel+0x28>
	ImT=0.00000052;
 80040a2:	4bd2      	ldr	r3, [pc, #840]	; (80043ec <feedforward_const_accel+0x36c>)
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	e001      	b.n	80040ac <feedforward_const_accel+0x2c>
}else{
	ImT=0.00000035;
 80040a8:	4bd1      	ldr	r3, [pc, #836]	; (80043f0 <feedforward_const_accel+0x370>)
 80040aa:	61fb      	str	r3, [r7, #28]

}

	if (straight_velocity >= 0) {
 80040ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80040b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b8:	db7c      	blt.n	80041b4 <feedforward_const_accel+0x134>
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f7fc fa6c 	bl	8000598 <__aeabi_f2d>
 80040c0:	a3bd      	add	r3, pc, #756	; (adr r3, 80043b8 <feedforward_const_accel+0x338>)
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	f7fc fabf 	bl	8000648 <__aeabi_dmul>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4610      	mov	r0, r2
 80040d0:	4619      	mov	r1, r3
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	4bc7      	ldr	r3, [pc, #796]	; (80043f4 <feedforward_const_accel+0x374>)
 80040d8:	f7fc fbe0 	bl	800089c <__aeabi_ddiv>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 80040e4:	a3b6      	add	r3, pc, #728	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	f7fc fbd7 	bl	800089c <__aeabi_ddiv>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4610      	mov	r0, r2
 80040f4:	4619      	mov	r1, r3
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040fe:	f7fc fbcd 	bl	800089c <__aeabi_ddiv>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4610      	mov	r0, r2
 8004108:	4619      	mov	r1, r3
 800410a:	a3af      	add	r3, pc, #700	; (adr r3, 80043c8 <feedforward_const_accel+0x348>)
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f7fc f8e4 	bl	80002dc <__adddf3>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4610      	mov	r0, r2
 800411a:	4619      	mov	r1, r3
 800411c:	a3ac      	add	r3, pc, #688	; (adr r3, 80043d0 <feedforward_const_accel+0x350>)
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f7fc fa91 	bl	8000648 <__aeabi_dmul>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	a3aa      	add	r3, pc, #680	; (adr r3, 80043d8 <feedforward_const_accel+0x358>)
 8004130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004134:	f7fc fbb2 	bl	800089c <__aeabi_ddiv>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4614      	mov	r4, r2
 800413e:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004140:	ed97 7a04 	vldr	s14, [r7, #16]
 8004144:	eddf 6aad 	vldr	s13, [pc, #692]	; 80043fc <feedforward_const_accel+0x37c>
 8004148:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800414c:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 80043f8 <feedforward_const_accel+0x378>
 8004150:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004154:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004158:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800415c:	ee16 0a90 	vmov	r0, s13
 8004160:	f7fc fa1a 	bl	8000598 <__aeabi_f2d>
 8004164:	a39e      	add	r3, pc, #632	; (adr r3, 80043e0 <feedforward_const_accel+0x360>)
 8004166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416a:	f7fc fa6d 	bl	8000648 <__aeabi_dmul>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4610      	mov	r0, r2
 8004174:	4619      	mov	r1, r3
 8004176:	a392      	add	r3, pc, #584	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	f7fc fb8e 	bl	800089c <__aeabi_ddiv>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4610      	mov	r0, r2
 8004186:	4619      	mov	r1, r3
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004190:	f7fc fb84 	bl	800089c <__aeabi_ddiv>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4620      	mov	r0, r4
 800419a:	4629      	mov	r1, r5
 800419c:	f7fc f89e 	bl	80002dc <__adddf3>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	f7fc fd26 	bl	8000bf8 <__aeabi_d2f>
 80041ac:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	e07b      	b.n	80042ac <feedforward_const_accel+0x22c>
	} else {
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f7fc f9ef 	bl	8000598 <__aeabi_f2d>
 80041ba:	a37f      	add	r3, pc, #508	; (adr r3, 80043b8 <feedforward_const_accel+0x338>)
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f7fc fa42 	bl	8000648 <__aeabi_dmul>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4610      	mov	r0, r2
 80041ca:	4619      	mov	r1, r3
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	4b88      	ldr	r3, [pc, #544]	; (80043f4 <feedforward_const_accel+0x374>)
 80041d2:	f7fc fb63 	bl	800089c <__aeabi_ddiv>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4610      	mov	r0, r2
 80041dc:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 80041de:	a378      	add	r3, pc, #480	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f7fc fb5a 	bl	800089c <__aeabi_ddiv>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4610      	mov	r0, r2
 80041ee:	4619      	mov	r1, r3
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041f8:	f7fc fb50 	bl	800089c <__aeabi_ddiv>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	a370      	add	r3, pc, #448	; (adr r3, 80043c8 <feedforward_const_accel+0x348>)
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	f7fc f865 	bl	80002d8 <__aeabi_dsub>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	a36e      	add	r3, pc, #440	; (adr r3, 80043d0 <feedforward_const_accel+0x350>)
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	f7fc fa14 	bl	8000648 <__aeabi_dmul>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4610      	mov	r0, r2
 8004226:	4619      	mov	r1, r3
 8004228:	a36b      	add	r3, pc, #428	; (adr r3, 80043d8 <feedforward_const_accel+0x358>)
 800422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422e:	f7fc fb35 	bl	800089c <__aeabi_ddiv>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4614      	mov	r4, r2
 8004238:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 800423a:	ed97 7a04 	vldr	s14, [r7, #16]
 800423e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80043fc <feedforward_const_accel+0x37c>
 8004242:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004246:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80043f8 <feedforward_const_accel+0x378>
 800424a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800424e:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004252:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004256:	ee16 0a90 	vmov	r0, s13
 800425a:	f7fc f99d 	bl	8000598 <__aeabi_f2d>
 800425e:	a360      	add	r3, pc, #384	; (adr r3, 80043e0 <feedforward_const_accel+0x360>)
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f7fc f9f0 	bl	8000648 <__aeabi_dmul>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4610      	mov	r0, r2
 800426e:	4619      	mov	r1, r3
 8004270:	a353      	add	r3, pc, #332	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 8004272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004276:	f7fc fb11 	bl	800089c <__aeabi_ddiv>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4610      	mov	r0, r2
 8004280:	4619      	mov	r1, r3
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800428a:	f7fc fb07 	bl	800089c <__aeabi_ddiv>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	4620      	mov	r0, r4
 8004294:	4629      	mov	r1, r5
 8004296:	f7fc f821 	bl	80002dc <__adddf3>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4610      	mov	r0, r2
 80042a0:	4619      	mov	r1, r3
 80042a2:	f7fc fca9 	bl	8000bf8 <__aeabi_d2f>
 80042a6:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	601a      	str	r2, [r3, #0]
	}
	if (turning_velocity >= 0) {
 80042ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80042b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b8:	f2c0 80a2 	blt.w	8004400 <feedforward_const_accel+0x380>
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80042bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80042c0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80043f8 <feedforward_const_accel+0x378>
 80042c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042c8:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 80042cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80042d0:	edd7 7a00 	vldr	s15, [r7]
 80042d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80043fc <feedforward_const_accel+0x37c>
 80042dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80042e0:	ee16 0a90 	vmov	r0, s13
 80042e4:	f7fc f958 	bl	8000598 <__aeabi_f2d>
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 80042e8:	a335      	add	r3, pc, #212	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	f7fc fad5 	bl	800089c <__aeabi_ddiv>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4610      	mov	r0, r2
 80042f8:	4619      	mov	r1, r3
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004302:	f7fc facb 	bl	800089c <__aeabi_ddiv>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4610      	mov	r0, r2
 800430c:	4619      	mov	r1, r3
 800430e:	a32e      	add	r3, pc, #184	; (adr r3, 80043c8 <feedforward_const_accel+0x348>)
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	f7fb ffe2 	bl	80002dc <__adddf3>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4610      	mov	r0, r2
 800431e:	4619      	mov	r1, r3
 8004320:	a32b      	add	r3, pc, #172	; (adr r3, 80043d0 <feedforward_const_accel+0x350>)
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f7fc f98f 	bl	8000648 <__aeabi_dmul>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4610      	mov	r0, r2
 8004330:	4619      	mov	r1, r3
 8004332:	a329      	add	r3, pc, #164	; (adr r3, 80043d8 <feedforward_const_accel+0x358>)
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f7fc fab0 	bl	800089c <__aeabi_ddiv>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4614      	mov	r4, r2
 8004342:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004344:	ed97 7a01 	vldr	s14, [r7, #4]
 8004348:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80043fc <feedforward_const_accel+0x37c>
 800434c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004350:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80043f8 <feedforward_const_accel+0x378>
 8004354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004358:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800435c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004360:	ee16 0a90 	vmov	r0, s13
 8004364:	f7fc f918 	bl	8000598 <__aeabi_f2d>
 8004368:	a31d      	add	r3, pc, #116	; (adr r3, 80043e0 <feedforward_const_accel+0x360>)
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	f7fc f96b 	bl	8000648 <__aeabi_dmul>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4610      	mov	r0, r2
 8004378:	4619      	mov	r1, r3
 800437a:	a311      	add	r3, pc, #68	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f7fc fa8c 	bl	800089c <__aeabi_ddiv>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4610      	mov	r0, r2
 800438a:	4619      	mov	r1, r3
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004394:	f7fc fa82 	bl	800089c <__aeabi_ddiv>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4620      	mov	r0, r4
 800439e:	4629      	mov	r1, r5
 80043a0:	f7fb ff9c 	bl	80002dc <__adddf3>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4610      	mov	r0, r2
 80043aa:	4619      	mov	r1, r3
 80043ac:	f7fc fc24 	bl	8000bf8 <__aeabi_d2f>
 80043b0:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	601a      	str	r2, [r3, #0]
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
	}
	//*feedforward_straight=0;
	//*feedforward_turning =0;

}
 80043b6:	e0a0      	b.n	80044fa <feedforward_const_accel+0x47a>
 80043b8:	7df8b79b 	.word	0x7df8b79b
 80043bc:	3ed5fdfc 	.word	0x3ed5fdfc
 80043c0:	ca619631 	.word	0xca619631
 80043c4:	3f9b3322 	.word	0x3f9b3322
 80043c8:	eb1c432d 	.word	0xeb1c432d
 80043cc:	3f1a36e2 	.word	0x3f1a36e2
 80043d0:	51eb851f 	.word	0x51eb851f
 80043d4:	3ff11eb8 	.word	0x3ff11eb8
 80043d8:	b7952d23 	.word	0xb7952d23
 80043dc:	3f569c23 	.word	0x3f569c23
 80043e0:	761b0f50 	.word	0x761b0f50
 80043e4:	3f66bf29 	.word	0x3f66bf29
 80043e8:	20000808 	.word	0x20000808
 80043ec:	350b9621 	.word	0x350b9621
 80043f0:	34bbe7a2 	.word	0x34bbe7a2
 80043f4:	408f4000 	.word	0x408f4000
 80043f8:	421c0000 	.word	0x421c0000
 80043fc:	447a0000 	.word	0x447a0000
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004400:	edd7 7a07 	vldr	s15, [r7, #28]
 8004404:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 80043f8 <feedforward_const_accel+0x378>
 8004408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800440c:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8004410:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004414:	edd7 7a00 	vldr	s15, [r7]
 8004418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441c:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 80043fc <feedforward_const_accel+0x37c>
 8004420:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004424:	ee16 0a90 	vmov	r0, s13
 8004428:	f7fc f8b6 	bl	8000598 <__aeabi_f2d>
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 800442c:	a338      	add	r3, pc, #224	; (adr r3, 8004510 <feedforward_const_accel+0x490>)
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	f7fc fa33 	bl	800089c <__aeabi_ddiv>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	4610      	mov	r0, r2
 800443c:	4619      	mov	r1, r3
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004446:	f7fc fa29 	bl	800089c <__aeabi_ddiv>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4610      	mov	r0, r2
 8004450:	4619      	mov	r1, r3
 8004452:	a333      	add	r3, pc, #204	; (adr r3, 8004520 <feedforward_const_accel+0x4a0>)
 8004454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004458:	f7fb ff3e 	bl	80002d8 <__aeabi_dsub>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4610      	mov	r0, r2
 8004462:	4619      	mov	r1, r3
 8004464:	a330      	add	r3, pc, #192	; (adr r3, 8004528 <feedforward_const_accel+0x4a8>)
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	f7fc f8ed 	bl	8000648 <__aeabi_dmul>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	a32e      	add	r3, pc, #184	; (adr r3, 8004530 <feedforward_const_accel+0x4b0>)
 8004478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447c:	f7fc fa0e 	bl	800089c <__aeabi_ddiv>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4614      	mov	r4, r2
 8004486:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004488:	ed97 7a01 	vldr	s14, [r7, #4]
 800448c:	eddf 6a22 	vldr	s13, [pc, #136]	; 8004518 <feedforward_const_accel+0x498>
 8004490:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004494:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800451c <feedforward_const_accel+0x49c>
 8004498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800449c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80044a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80044a4:	ee16 0a90 	vmov	r0, s13
 80044a8:	f7fc f876 	bl	8000598 <__aeabi_f2d>
 80044ac:	a316      	add	r3, pc, #88	; (adr r3, 8004508 <feedforward_const_accel+0x488>)
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	f7fc f8c9 	bl	8000648 <__aeabi_dmul>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4610      	mov	r0, r2
 80044bc:	4619      	mov	r1, r3
 80044be:	a314      	add	r3, pc, #80	; (adr r3, 8004510 <feedforward_const_accel+0x490>)
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f7fc f9ea 	bl	800089c <__aeabi_ddiv>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044d8:	f7fc f9e0 	bl	800089c <__aeabi_ddiv>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4620      	mov	r0, r4
 80044e2:	4629      	mov	r1, r5
 80044e4:	f7fb fefa 	bl	80002dc <__adddf3>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4610      	mov	r0, r2
 80044ee:	4619      	mov	r1, r3
 80044f0:	f7fc fb82 	bl	8000bf8 <__aeabi_d2f>
 80044f4:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	601a      	str	r2, [r3, #0]
}
 80044fa:	bf00      	nop
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bdb0      	pop	{r4, r5, r7, pc}
 8004502:	bf00      	nop
 8004504:	f3af 8000 	nop.w
 8004508:	761b0f50 	.word	0x761b0f50
 800450c:	3f66bf29 	.word	0x3f66bf29
 8004510:	ca619631 	.word	0xca619631
 8004514:	3f9b3322 	.word	0x3f9b3322
 8004518:	447a0000 	.word	0x447a0000
 800451c:	421c0000 	.word	0x421c0000
 8004520:	eb1c432d 	.word	0xeb1c432d
 8004524:	3f1a36e2 	.word	0x3f1a36e2
 8004528:	51eb851f 	.word	0x51eb851f
 800452c:	3ff11eb8 	.word	0x3ff11eb8
 8004530:	b7952d23 	.word	0xb7952d23
 8004534:	3f569c23 	.word	0x3f569c23

08004538 <PID_Init>:
struct PID Gyro;

float Ksp, Ksi, Ksd;
float Ktp, Kti, Ktd;

void PID_Init(void) {
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0

	Ksp = 3.1; //3//P項の制御量直進*****************************************************
 800453c:	4b0f      	ldr	r3, [pc, #60]	; (800457c <PID_Init+0x44>)
 800453e:	4a10      	ldr	r2, [pc, #64]	; (8004580 <PID_Init+0x48>)
 8004540:	601a      	str	r2, [r3, #0]
	Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
 8004542:	4b10      	ldr	r3, [pc, #64]	; (8004584 <PID_Init+0x4c>)
 8004544:	4a10      	ldr	r2, [pc, #64]	; (8004588 <PID_Init+0x50>)
 8004546:	601a      	str	r2, [r3, #0]
	Ksd = 0.00; //D項の制御量直進*****************************************************
 8004548:	4b10      	ldr	r3, [pc, #64]	; (800458c <PID_Init+0x54>)
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
	Ktp = 1.6; //295//P項の制御量旋回*****************************************************
 8004550:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <PID_Init+0x58>)
 8004552:	4a10      	ldr	r2, [pc, #64]	; (8004594 <PID_Init+0x5c>)
 8004554:	601a      	str	r2, [r3, #0]
	Kti = 0.06; //1//.6//I項の制御量旋回*****************************************************
 8004556:	4b10      	ldr	r3, [pc, #64]	; (8004598 <PID_Init+0x60>)
 8004558:	4a10      	ldr	r2, [pc, #64]	; (800459c <PID_Init+0x64>)
 800455a:	601a      	str	r2, [r3, #0]
	Ktd = 0.002; //205//D項の制御量旋回*****************************************************
 800455c:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <PID_Init+0x68>)
 800455e:	4a11      	ldr	r2, [pc, #68]	; (80045a4 <PID_Init+0x6c>)
 8004560:	601a      	str	r2, [r3, #0]
	enc.sigma_error = 0;
 8004562:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <PID_Init+0x70>)
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 800456a:	4b10      	ldr	r3, [pc, #64]	; (80045ac <PID_Init+0x74>)
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	609a      	str	r2, [r3, #8]

}
 8004572:	bf00      	nop
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	20000554 	.word	0x20000554
 8004580:	40466666 	.word	0x40466666
 8004584:	20000558 	.word	0x20000558
 8004588:	3da3d70a 	.word	0x3da3d70a
 800458c:	2000055c 	.word	0x2000055c
 8004590:	20000560 	.word	0x20000560
 8004594:	3fcccccd 	.word	0x3fcccccd
 8004598:	20000564 	.word	0x20000564
 800459c:	3d75c28f 	.word	0x3d75c28f
 80045a0:	20000568 	.word	0x20000568
 80045a4:	3b03126f 	.word	0x3b03126f
 80045a8:	20000534 	.word	0x20000534
 80045ac:	20000544 	.word	0x20000544

080045b0 <clear_Ierror>:

void clear_Ierror(void) {
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
	enc.sigma_error = 0;
 80045b4:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <clear_Ierror+0x20>)
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <clear_Ierror+0x24>)
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	609a      	str	r2, [r3, #8]
}
 80045c4:	bf00      	nop
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000534 	.word	0x20000534
 80045d4:	20000544 	.word	0x20000544

080045d8 <EncoderGyro_PID>:


void EncoderGyro_PID(float *PID_s, float *PID_t,float straight_velocity,float turning_velocity) {
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80045e6:	edc7 0a00 	vstr	s1, [r7]
	float PID_stra = 0;
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
	float PID_turn = 0;
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	613b      	str	r3, [r7, #16]
	if(highspeed_mode == 1){
 80045f6:	4b80      	ldr	r3, [pc, #512]	; (80047f8 <EncoderGyro_PID+0x220>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d111      	bne.n	8004622 <EncoderGyro_PID+0x4a>
		Ksp = 3.7; //3//P項の制御量直進*****************************************************
 80045fe:	4b7f      	ldr	r3, [pc, #508]	; (80047fc <EncoderGyro_PID+0x224>)
 8004600:	4a7f      	ldr	r2, [pc, #508]	; (8004800 <EncoderGyro_PID+0x228>)
 8004602:	601a      	str	r2, [r3, #0]
		Ksi = 0.09; //80//5//43//I項の制御量直進*****************************************************
 8004604:	4b7f      	ldr	r3, [pc, #508]	; (8004804 <EncoderGyro_PID+0x22c>)
 8004606:	4a80      	ldr	r2, [pc, #512]	; (8004808 <EncoderGyro_PID+0x230>)
 8004608:	601a      	str	r2, [r3, #0]
		Ksd = -0.007; //D項の制御量直進*****************************************************
 800460a:	4b80      	ldr	r3, [pc, #512]	; (800480c <EncoderGyro_PID+0x234>)
 800460c:	4a80      	ldr	r2, [pc, #512]	; (8004810 <EncoderGyro_PID+0x238>)
 800460e:	601a      	str	r2, [r3, #0]
		Ktp = 2.2; //295//P項の制御量旋回*****************************************************
 8004610:	4b80      	ldr	r3, [pc, #512]	; (8004814 <EncoderGyro_PID+0x23c>)
 8004612:	4a81      	ldr	r2, [pc, #516]	; (8004818 <EncoderGyro_PID+0x240>)
 8004614:	601a      	str	r2, [r3, #0]
		Kti = 0.07; //1//.6//I項の制御量旋回*****************************************************
 8004616:	4b81      	ldr	r3, [pc, #516]	; (800481c <EncoderGyro_PID+0x244>)
 8004618:	4a81      	ldr	r2, [pc, #516]	; (8004820 <EncoderGyro_PID+0x248>)
 800461a:	601a      	str	r2, [r3, #0]
		Ktd = -0.001; //205//D項の制御量旋回*****************************************************
 800461c:	4b81      	ldr	r3, [pc, #516]	; (8004824 <EncoderGyro_PID+0x24c>)
 800461e:	4a82      	ldr	r2, [pc, #520]	; (8004828 <EncoderGyro_PID+0x250>)
 8004620:	601a      	str	r2, [r3, #0]
	}

	if (straight_velocity == 0) {
 8004622:	edd7 7a01 	vldr	s15, [r7, #4]
 8004626:	eef5 7a40 	vcmp.f32	s15, #0.0
 800462a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462e:	d101      	bne.n	8004634 <EncoderGyro_PID+0x5c>
		reset_speed();
 8004630:	f7fc fcf2 	bl	8001018 <reset_speed>
	}
	//straight.velocity>=2500 && fabs(angle_speed)<100
	if (fabs(angle_speed) < 120 && straight_velocity >= 100 && modeacc!=4) {
 8004634:	4b7d      	ldr	r3, [pc, #500]	; (800482c <EncoderGyro_PID+0x254>)
 8004636:	edd3 7a00 	vldr	s15, [r3]
 800463a:	eef0 7ae7 	vabs.f32	s15, s15
 800463e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8004830 <EncoderGyro_PID+0x258>
 8004642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464a:	d520      	bpl.n	800468e <EncoderGyro_PID+0xb6>
 800464c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004650:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8004834 <EncoderGyro_PID+0x25c>
 8004654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465c:	db17      	blt.n	800468e <EncoderGyro_PID+0xb6>
 800465e:	4b76      	ldr	r3, [pc, #472]	; (8004838 <EncoderGyro_PID+0x260>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b04      	cmp	r3, #4
 8004664:	d013      	beq.n	800468e <EncoderGyro_PID+0xb6>
		enc.error = (straight_velocity - (fusion_speedR + fusion_speedL) / 2);
 8004666:	4b75      	ldr	r3, [pc, #468]	; (800483c <EncoderGyro_PID+0x264>)
 8004668:	ed93 7a00 	vldr	s14, [r3]
 800466c:	4b74      	ldr	r3, [pc, #464]	; (8004840 <EncoderGyro_PID+0x268>)
 800466e:	edd3 7a00 	vldr	s15, [r3]
 8004672:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004676:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800467a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800467e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004686:	4b6f      	ldr	r3, [pc, #444]	; (8004844 <EncoderGyro_PID+0x26c>)
 8004688:	edc3 7a00 	vstr	s15, [r3]
 800468c:	e01a      	b.n	80046c4 <EncoderGyro_PID+0xec>
	} else {
		enc.error = (straight_velocity - (E_speedR + E_speedL) / 2);
 800468e:	4b6e      	ldr	r3, [pc, #440]	; (8004848 <EncoderGyro_PID+0x270>)
 8004690:	ed93 7a00 	vldr	s14, [r3]
 8004694:	4b6d      	ldr	r3, [pc, #436]	; (800484c <EncoderGyro_PID+0x274>)
 8004696:	edd3 7a00 	vldr	s15, [r3]
 800469a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800469e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80046a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80046aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ae:	4b65      	ldr	r3, [pc, #404]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046b0:	edc3 7a00 	vstr	s15, [r3]
		fusion_speedL = E_lpf_speedL;
 80046b4:	4b66      	ldr	r3, [pc, #408]	; (8004850 <EncoderGyro_PID+0x278>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a61      	ldr	r2, [pc, #388]	; (8004840 <EncoderGyro_PID+0x268>)
 80046ba:	6013      	str	r3, [r2, #0]
		fusion_speedR = E_lpf_speedR;
 80046bc:	4b65      	ldr	r3, [pc, #404]	; (8004854 <EncoderGyro_PID+0x27c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a5e      	ldr	r2, [pc, #376]	; (800483c <EncoderGyro_PID+0x264>)
 80046c2:	6013      	str	r3, [r2, #0]
	}
	//enc.error = (straight.velocity - (fusion_speedR + fusion_speedL) / 2);
	enc.delta_error = enc.error - enc.old_error;
 80046c4:	4b5f      	ldr	r3, [pc, #380]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046c6:	ed93 7a00 	vldr	s14, [r3]
 80046ca:	4b5e      	ldr	r3, [pc, #376]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80046d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046d4:	4b5b      	ldr	r3, [pc, #364]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046d6:	edc3 7a03 	vstr	s15, [r3, #12]
	enc.old_error = enc.error;
 80046da:	4b5a      	ldr	r3, [pc, #360]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a59      	ldr	r2, [pc, #356]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046e0:	6053      	str	r3, [r2, #4]
	enc.sigma_error += enc.error;
 80046e2:	4b58      	ldr	r3, [pc, #352]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80046e8:	4b56      	ldr	r3, [pc, #344]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046ea:	edd3 7a00 	vldr	s15, [r3]
 80046ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046f2:	4b54      	ldr	r3, [pc, #336]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046f4:	edc3 7a02 	vstr	s15, [r3, #8]
	PID_stra = Ksp * enc.error + Ksi * enc.sigma_error + Ksd * enc.delta_error;
 80046f8:	4b52      	ldr	r3, [pc, #328]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046fa:	ed93 7a00 	vldr	s14, [r3]
 80046fe:	4b3f      	ldr	r3, [pc, #252]	; (80047fc <EncoderGyro_PID+0x224>)
 8004700:	edd3 7a00 	vldr	s15, [r3]
 8004704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004708:	4b4e      	ldr	r3, [pc, #312]	; (8004844 <EncoderGyro_PID+0x26c>)
 800470a:	edd3 6a02 	vldr	s13, [r3, #8]
 800470e:	4b3d      	ldr	r3, [pc, #244]	; (8004804 <EncoderGyro_PID+0x22c>)
 8004710:	edd3 7a00 	vldr	s15, [r3]
 8004714:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004718:	ee37 7a27 	vadd.f32	s14, s14, s15
 800471c:	4b49      	ldr	r3, [pc, #292]	; (8004844 <EncoderGyro_PID+0x26c>)
 800471e:	edd3 6a03 	vldr	s13, [r3, #12]
 8004722:	4b3a      	ldr	r3, [pc, #232]	; (800480c <EncoderGyro_PID+0x234>)
 8004724:	edd3 7a00 	vldr	s15, [r3]
 8004728:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800472c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004730:	edc7 7a05 	vstr	s15, [r7, #20]



//	if ((g_WallControl_mode == 3 || g_WallControl_mode == 1)
//			&& (highspeed_mode == 1)) {
		Gyro.error = (turning_velocity - angle_speed);
 8004734:	4b3d      	ldr	r3, [pc, #244]	; (800482c <EncoderGyro_PID+0x254>)
 8004736:	edd3 7a00 	vldr	s15, [r3]
 800473a:	ed97 7a00 	vldr	s14, [r7]
 800473e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004742:	4b45      	ldr	r3, [pc, #276]	; (8004858 <EncoderGyro_PID+0x280>)
 8004744:	edc3 7a00 	vstr	s15, [r3]
		Gyro.delta_error = Gyro.error - Gyro.old_error;
 8004748:	4b43      	ldr	r3, [pc, #268]	; (8004858 <EncoderGyro_PID+0x280>)
 800474a:	ed93 7a00 	vldr	s14, [r3]
 800474e:	4b42      	ldr	r3, [pc, #264]	; (8004858 <EncoderGyro_PID+0x280>)
 8004750:	edd3 7a01 	vldr	s15, [r3, #4]
 8004754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004758:	4b3f      	ldr	r3, [pc, #252]	; (8004858 <EncoderGyro_PID+0x280>)
 800475a:	edc3 7a03 	vstr	s15, [r3, #12]
		Gyro.old_error = Gyro.error;
 800475e:	4b3e      	ldr	r3, [pc, #248]	; (8004858 <EncoderGyro_PID+0x280>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a3d      	ldr	r2, [pc, #244]	; (8004858 <EncoderGyro_PID+0x280>)
 8004764:	6053      	str	r3, [r2, #4]
		Gyro.sigma_error += Gyro.error;
 8004766:	4b3c      	ldr	r3, [pc, #240]	; (8004858 <EncoderGyro_PID+0x280>)
 8004768:	ed93 7a02 	vldr	s14, [r3, #8]
 800476c:	4b3a      	ldr	r3, [pc, #232]	; (8004858 <EncoderGyro_PID+0x280>)
 800476e:	edd3 7a00 	vldr	s15, [r3]
 8004772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004776:	4b38      	ldr	r3, [pc, #224]	; (8004858 <EncoderGyro_PID+0x280>)
 8004778:	edc3 7a02 	vstr	s15, [r3, #8]
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 800477c:	4b36      	ldr	r3, [pc, #216]	; (8004858 <EncoderGyro_PID+0x280>)
 800477e:	ed93 7a00 	vldr	s14, [r3]
 8004782:	4b24      	ldr	r3, [pc, #144]	; (8004814 <EncoderGyro_PID+0x23c>)
 8004784:	edd3 7a00 	vldr	s15, [r3]
 8004788:	ee27 7a27 	vmul.f32	s14, s14, s15
 800478c:	4b32      	ldr	r3, [pc, #200]	; (8004858 <EncoderGyro_PID+0x280>)
 800478e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004792:	4b22      	ldr	r3, [pc, #136]	; (800481c <EncoderGyro_PID+0x244>)
 8004794:	edd3 7a00 	vldr	s15, [r3]
 8004798:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800479c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Ktd * Gyro.delta_error;
 80047a0:	4b2d      	ldr	r3, [pc, #180]	; (8004858 <EncoderGyro_PID+0x280>)
 80047a2:	edd3 6a03 	vldr	s13, [r3, #12]
 80047a6:	4b1f      	ldr	r3, [pc, #124]	; (8004824 <EncoderGyro_PID+0x24c>)
 80047a8:	edd3 7a00 	vldr	s15, [r3]
 80047ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 80047b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047b4:	edc7 7a04 	vstr	s15, [r7, #16]
//
//		*PID_all_R += PID_turn;
//		*PID_all_L -= PID_turn;
//	}

	*PID_s = PID_stra / MAXMOTOR * g_V_battery_mean;
 80047b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80047bc:	eddf 6a27 	vldr	s13, [pc, #156]	; 800485c <EncoderGyro_PID+0x284>
 80047c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80047c4:	4b26      	ldr	r3, [pc, #152]	; (8004860 <EncoderGyro_PID+0x288>)
 80047c6:	edd3 7a00 	vldr	s15, [r3]
 80047ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	edc3 7a00 	vstr	s15, [r3]
	*PID_t = PID_turn / MAXMOTOR * g_V_battery_mean;
 80047d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80047d8:	eddf 6a20 	vldr	s13, [pc, #128]	; 800485c <EncoderGyro_PID+0x284>
 80047dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80047e0:	4b1f      	ldr	r3, [pc, #124]	; (8004860 <EncoderGyro_PID+0x288>)
 80047e2:	edd3 7a00 	vldr	s15, [r3]
 80047e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	edc3 7a00 	vstr	s15, [r3]

}
 80047f0:	bf00      	nop
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20000808 	.word	0x20000808
 80047fc:	20000554 	.word	0x20000554
 8004800:	406ccccd 	.word	0x406ccccd
 8004804:	20000558 	.word	0x20000558
 8004808:	3db851ec 	.word	0x3db851ec
 800480c:	2000055c 	.word	0x2000055c
 8004810:	bbe56042 	.word	0xbbe56042
 8004814:	20000560 	.word	0x20000560
 8004818:	400ccccd 	.word	0x400ccccd
 800481c:	20000564 	.word	0x20000564
 8004820:	3d8f5c29 	.word	0x3d8f5c29
 8004824:	20000568 	.word	0x20000568
 8004828:	ba83126f 	.word	0xba83126f
 800482c:	20000268 	.word	0x20000268
 8004830:	42f00000 	.word	0x42f00000
 8004834:	42c80000 	.word	0x42c80000
 8004838:	20000528 	.word	0x20000528
 800483c:	2000025c 	.word	0x2000025c
 8004840:	20000258 	.word	0x20000258
 8004844:	20000534 	.word	0x20000534
 8004848:	2000022c 	.word	0x2000022c
 800484c:	20000228 	.word	0x20000228
 8004850:	20000238 	.word	0x20000238
 8004854:	2000023c 	.word	0x2000023c
 8004858:	20000544 	.word	0x20000544
 800485c:	44d1e000 	.word	0x44d1e000
 8004860:	200004d4 	.word	0x200004d4

08004864 <init_WallControl>:
float g_CenterSlantR90_diff, g_CenterSlantL90_diff, g_CenterSlantR45_diff,
		g_CenterSlantL45_diff;



void init_WallControl(void) {
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
	g_WallControl_mode = 0;
 8004868:	4b3f      	ldr	r3, [pc, #252]	; (8004968 <init_WallControl+0x104>)
 800486a:	2200      	movs	r2, #0
 800486c:	701a      	strb	r2, [r3, #0]
	g_FrontWallControl_mode = 0;
 800486e:	4b3f      	ldr	r3, [pc, #252]	; (800496c <init_WallControl+0x108>)
 8004870:	2200      	movs	r2, #0
 8004872:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus = 0;
 8004874:	4b3e      	ldr	r3, [pc, #248]	; (8004970 <init_WallControl+0x10c>)
 8004876:	2200      	movs	r2, #0
 8004878:	701a      	strb	r2, [r3, #0]
	g_wallCut_mode = 0;
 800487a:	4b3e      	ldr	r3, [pc, #248]	; (8004974 <init_WallControl+0x110>)
 800487c:	2200      	movs	r2, #0
 800487e:	701a      	strb	r2, [r3, #0]
	StabilityCount_reset = 0;
 8004880:	4b3d      	ldr	r3, [pc, #244]	; (8004978 <init_WallControl+0x114>)
 8004882:	2200      	movs	r2, #0
 8004884:	701a      	strb	r2, [r3, #0]
	StabilityCount_L = 0;
 8004886:	4b3d      	ldr	r3, [pc, #244]	; (800497c <init_WallControl+0x118>)
 8004888:	2200      	movs	r2, #0
 800488a:	701a      	strb	r2, [r3, #0]
	StabilityCount_R = 0;
 800488c:	4b3c      	ldr	r3, [pc, #240]	; (8004980 <init_WallControl+0x11c>)
 800488e:	2200      	movs	r2, #0
 8004890:	701a      	strb	r2, [r3, #0]
	g_sensor_max_l = CENTER_L;
 8004892:	4b3c      	ldr	r3, [pc, #240]	; (8004984 <init_WallControl+0x120>)
 8004894:	4a3c      	ldr	r2, [pc, #240]	; (8004988 <init_WallControl+0x124>)
 8004896:	601a      	str	r2, [r3, #0]
	g_sensor_max_r = CENTER_R;
 8004898:	4b3c      	ldr	r3, [pc, #240]	; (800498c <init_WallControl+0x128>)
 800489a:	4a3d      	ldr	r2, [pc, #244]	; (8004990 <init_WallControl+0x12c>)
 800489c:	601a      	str	r2, [r3, #0]
	g_skewer_displacement = SKEWER_LIMIT;
 800489e:	4b3d      	ldr	r3, [pc, #244]	; (8004994 <init_WallControl+0x130>)
 80048a0:	4a3d      	ldr	r2, [pc, #244]	; (8004998 <init_WallControl+0x134>)
 80048a2:	601a      	str	r2, [r3, #0]

	NoWallCountL90 = 0;
 80048a4:	4b3d      	ldr	r3, [pc, #244]	; (800499c <init_WallControl+0x138>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
	NoWallCountR90 = 0;
 80048aa:	4b3d      	ldr	r3, [pc, #244]	; (80049a0 <init_WallControl+0x13c>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
	NoWallCountL45 = 0;
 80048b0:	4b3c      	ldr	r3, [pc, #240]	; (80049a4 <init_WallControl+0x140>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
	NoWallCountR45 = 0;
 80048b6:	4b3c      	ldr	r3, [pc, #240]	; (80049a8 <init_WallControl+0x144>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
	NoWallCountL45slant = 0;
 80048bc:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <init_WallControl+0x148>)
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
	NoWallCountR45slant = 0;
 80048c2:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <init_WallControl+0x14c>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]

	NoWallDisplacementL90 = 0;
 80048c8:	4b3a      	ldr	r3, [pc, #232]	; (80049b4 <init_WallControl+0x150>)
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR90 = 0;
 80048d0:	4b39      	ldr	r3, [pc, #228]	; (80049b8 <init_WallControl+0x154>)
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 80048d8:	4b38      	ldr	r3, [pc, #224]	; (80049bc <init_WallControl+0x158>)
 80048da:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80048de:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 80048e0:	4b37      	ldr	r3, [pc, #220]	; (80049c0 <init_WallControl+0x15c>)
 80048e2:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80048e6:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant = 0;
 80048e8:	4b36      	ldr	r3, [pc, #216]	; (80049c4 <init_WallControl+0x160>)
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant = 0;
 80048f0:	4b35      	ldr	r3, [pc, #212]	; (80049c8 <init_WallControl+0x164>)
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant2 = 0;
 80048f8:	4b34      	ldr	r3, [pc, #208]	; (80049cc <init_WallControl+0x168>)
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant2 = 0;
 8004900:	4b33      	ldr	r3, [pc, #204]	; (80049d0 <init_WallControl+0x16c>)
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

	NoWallCountL45_flag = 0;
 8004908:	4b32      	ldr	r3, [pc, #200]	; (80049d4 <init_WallControl+0x170>)
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
	NoWallCountR45_flag = 0;
 800490e:	4b32      	ldr	r3, [pc, #200]	; (80049d8 <init_WallControl+0x174>)
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]
	NoWallCountL45slant_flag = 0;
 8004914:	4b31      	ldr	r3, [pc, #196]	; (80049dc <init_WallControl+0x178>)
 8004916:	2200      	movs	r2, #0
 8004918:	701a      	strb	r2, [r3, #0]
	NoWallCountR45slant_flag = 0;
 800491a:	4b31      	ldr	r3, [pc, #196]	; (80049e0 <init_WallControl+0x17c>)
 800491c:	2200      	movs	r2, #0
 800491e:	701a      	strb	r2, [r3, #0]
	slantWallControlL_flag = 0;
 8004920:	4b30      	ldr	r3, [pc, #192]	; (80049e4 <init_WallControl+0x180>)
 8004922:	2200      	movs	r2, #0
 8004924:	701a      	strb	r2, [r3, #0]
	slantWallControlR_flag = 0;
 8004926:	4b30      	ldr	r3, [pc, #192]	; (80049e8 <init_WallControl+0x184>)
 8004928:	2200      	movs	r2, #0
 800492a:	701a      	strb	r2, [r3, #0]

	front_wall_break_90 = 0;
 800492c:	4b2f      	ldr	r3, [pc, #188]	; (80049ec <init_WallControl+0x188>)
 800492e:	2200      	movs	r2, #0
 8004930:	701a      	strb	r2, [r3, #0]
	front_wall_break_45 = 0;
 8004932:	4b2f      	ldr	r3, [pc, #188]	; (80049f0 <init_WallControl+0x18c>)
 8004934:	2200      	movs	r2, #0
 8004936:	701a      	strb	r2, [r3, #0]
	front_wall_break_45slant = 0;
 8004938:	4b2e      	ldr	r3, [pc, #184]	; (80049f4 <init_WallControl+0x190>)
 800493a:	2200      	movs	r2, #0
 800493c:	701a      	strb	r2, [r3, #0]

	g_sensor_max_fl = 0;
 800493e:	4b2e      	ldr	r3, [pc, #184]	; (80049f8 <init_WallControl+0x194>)
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr = 0;
 8004946:	4b2d      	ldr	r3, [pc, #180]	; (80049fc <init_WallControl+0x198>)
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
	g_sensor_max_fl_slant = 0;
 800494e:	4b2c      	ldr	r3, [pc, #176]	; (8004a00 <init_WallControl+0x19c>)
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr_slant = 0;
 8004956:	4b2b      	ldr	r3, [pc, #172]	; (8004a04 <init_WallControl+0x1a0>)
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	601a      	str	r2, [r3, #0]
}
 800495e:	bf00      	nop
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	20000590 	.word	0x20000590
 800496c:	20000591 	.word	0x20000591
 8004970:	20000593 	.word	0x20000593
 8004974:	20000592 	.word	0x20000592
 8004978:	20000595 	.word	0x20000595
 800497c:	20000596 	.word	0x20000596
 8004980:	20000597 	.word	0x20000597
 8004984:	20000598 	.word	0x20000598
 8004988:	44be6000 	.word	0x44be6000
 800498c:	2000059c 	.word	0x2000059c
 8004990:	44974000 	.word	0x44974000
 8004994:	200005a0 	.word	0x200005a0
 8004998:	41a00000 	.word	0x41a00000
 800499c:	200005b8 	.word	0x200005b8
 80049a0:	200005b4 	.word	0x200005b4
 80049a4:	200005c0 	.word	0x200005c0
 80049a8:	200005bc 	.word	0x200005bc
 80049ac:	200005c8 	.word	0x200005c8
 80049b0:	200005c4 	.word	0x200005c4
 80049b4:	200005d0 	.word	0x200005d0
 80049b8:	200005cc 	.word	0x200005cc
 80049bc:	200005d8 	.word	0x200005d8
 80049c0:	200005d4 	.word	0x200005d4
 80049c4:	200005e0 	.word	0x200005e0
 80049c8:	200005dc 	.word	0x200005dc
 80049cc:	200005e8 	.word	0x200005e8
 80049d0:	200005e4 	.word	0x200005e4
 80049d4:	200005ec 	.word	0x200005ec
 80049d8:	200005ed 	.word	0x200005ed
 80049dc:	200005ee 	.word	0x200005ee
 80049e0:	200005ef 	.word	0x200005ef
 80049e4:	200005f0 	.word	0x200005f0
 80049e8:	200005f1 	.word	0x200005f1
 80049ec:	200005f2 	.word	0x200005f2
 80049f0:	200005f3 	.word	0x200005f3
 80049f4:	200005f4 	.word	0x200005f4
 80049f8:	200005f8 	.word	0x200005f8
 80049fc:	200005fc 	.word	0x200005fc
 8004a00:	20000600 	.word	0x20000600
 8004a04:	20000604 	.word	0x20000604

08004a08 <calWallConrol>:


float calWallConrol(void) {
 8004a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a0c:	b0aa      	sub	sp, #168	; 0xa8
 8004a0e:	af00      	add	r7, sp, #0
	float PID_wall,PID_w;
	float sensor_gain_p, sensor_gain_d;
	float sensorWall_L, sensorWall_R;
	float wallcut_threshold_L, wallcut_threshold_R;

	if (highspeed_mode == 1) {
 8004a10:	4ba1      	ldr	r3, [pc, #644]	; (8004c98 <calWallConrol+0x290>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d13d      	bne.n	8004a94 <calWallConrol+0x8c>
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_SHORT_L;
 8004a18:	4ba0      	ldr	r3, [pc, #640]	; (8004c9c <calWallConrol+0x294>)
 8004a1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_SHORT_R;
 8004a1e:	4ba0      	ldr	r3, [pc, #640]	; (8004ca0 <calWallConrol+0x298>)
 8004a20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		if (straight.velocity > 1000) {
 8004a24:	4b9f      	ldr	r3, [pc, #636]	; (8004ca4 <calWallConrol+0x29c>)
 8004a26:	edd3 7a00 	vldr	s15, [r3]
 8004a2a:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8004ca8 <calWallConrol+0x2a0>
 8004a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a36:	dd06      	ble.n	8004a46 <calWallConrol+0x3e>
			sensor_gain_p = SENSOR_GAIN_SHORT_P * 1000;
 8004a38:	4b9c      	ldr	r3, [pc, #624]	; (8004cac <calWallConrol+0x2a4>)
 8004a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * 1000;
 8004a3e:	4b9c      	ldr	r3, [pc, #624]	; (8004cb0 <calWallConrol+0x2a8>)
 8004a40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a44:	e052      	b.n	8004aec <calWallConrol+0xe4>
		} else {
			sensor_gain_p = SENSOR_GAIN_SHORT_P * straight.velocity;
 8004a46:	4b97      	ldr	r3, [pc, #604]	; (8004ca4 <calWallConrol+0x29c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fb fda4 	bl	8000598 <__aeabi_f2d>
 8004a50:	a389      	add	r3, pc, #548	; (adr r3, 8004c78 <calWallConrol+0x270>)
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	f7fb fdf7 	bl	8000648 <__aeabi_dmul>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4610      	mov	r0, r2
 8004a60:	4619      	mov	r1, r3
 8004a62:	f7fc f8c9 	bl	8000bf8 <__aeabi_d2f>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * straight.velocity;
 8004a6c:	4b8d      	ldr	r3, [pc, #564]	; (8004ca4 <calWallConrol+0x29c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fb fd91 	bl	8000598 <__aeabi_f2d>
 8004a76:	a382      	add	r3, pc, #520	; (adr r3, 8004c80 <calWallConrol+0x278>)
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f7fb fde4 	bl	8000648 <__aeabi_dmul>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4610      	mov	r0, r2
 8004a86:	4619      	mov	r1, r3
 8004a88:	f7fc f8b6 	bl	8000bf8 <__aeabi_d2f>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a92:	e02b      	b.n	8004aec <calWallConrol+0xe4>
		}
	} else {
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_L;
 8004a94:	4b87      	ldr	r3, [pc, #540]	; (8004cb4 <calWallConrol+0x2ac>)
 8004a96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_R;
 8004a9a:	4b87      	ldr	r3, [pc, #540]	; (8004cb8 <calWallConrol+0x2b0>)
 8004a9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sensor_gain_p = SENSOR_GAIN_P * straight.velocity;
 8004aa0:	4b80      	ldr	r3, [pc, #512]	; (8004ca4 <calWallConrol+0x29c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fb fd77 	bl	8000598 <__aeabi_f2d>
 8004aaa:	a377      	add	r3, pc, #476	; (adr r3, 8004c88 <calWallConrol+0x280>)
 8004aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab0:	f7fb fdca 	bl	8000648 <__aeabi_dmul>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4610      	mov	r0, r2
 8004aba:	4619      	mov	r1, r3
 8004abc:	f7fc f89c 	bl	8000bf8 <__aeabi_d2f>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		sensor_gain_d = SENSOR_GAIN_D * straight.velocity;
 8004ac6:	4b77      	ldr	r3, [pc, #476]	; (8004ca4 <calWallConrol+0x29c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fb fd64 	bl	8000598 <__aeabi_f2d>
 8004ad0:	a36f      	add	r3, pc, #444	; (adr r3, 8004c90 <calWallConrol+0x288>)
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	f7fb fdb7 	bl	8000648 <__aeabi_dmul>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4610      	mov	r0, r2
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	f7fc f889 	bl	8000bf8 <__aeabi_d2f>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	if (g_sensor[SENSOR_LEFT][0] < SENSOR_L_MIN) {
 8004aec:	4b73      	ldr	r3, [pc, #460]	; (8004cbc <calWallConrol+0x2b4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f240 2289 	movw	r2, #649	; 0x289
 8004af4:	4293      	cmp	r3, r2
 8004af6:	dc03      	bgt.n	8004b00 <calWallConrol+0xf8>
		sensorWall_L = SENSOR_L_MIN;
 8004af8:	4b71      	ldr	r3, [pc, #452]	; (8004cc0 <calWallConrol+0x2b8>)
 8004afa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004afe:	e011      	b.n	8004b24 <calWallConrol+0x11c>
	} else if (g_sensor[SENSOR_LEFT][0] > SENSOR_L_MAX) {
 8004b00:	4b6e      	ldr	r3, [pc, #440]	; (8004cbc <calWallConrol+0x2b4>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	dd03      	ble.n	8004b14 <calWallConrol+0x10c>
		sensorWall_L = SENSOR_L_MAX;
 8004b0c:	4b6d      	ldr	r3, [pc, #436]	; (8004cc4 <calWallConrol+0x2bc>)
 8004b0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b12:	e007      	b.n	8004b24 <calWallConrol+0x11c>
	} else {
		sensorWall_L = (float) (g_sensor[SENSOR_LEFT][0]);
 8004b14:	4b69      	ldr	r3, [pc, #420]	; (8004cbc <calWallConrol+0x2b4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	ee07 3a90 	vmov	s15, r3
 8004b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b20:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	}
	if (g_sensor[SENSOR_RIGHT][0] < SENSOR_R_MIN) {
 8004b24:	4b65      	ldr	r3, [pc, #404]	; (8004cbc <calWallConrol+0x2b4>)
 8004b26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b2a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004b2e:	da03      	bge.n	8004b38 <calWallConrol+0x130>
		sensorWall_R = SENSOR_R_MIN;
 8004b30:	4b65      	ldr	r3, [pc, #404]	; (8004cc8 <calWallConrol+0x2c0>)
 8004b32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b36:	e012      	b.n	8004b5e <calWallConrol+0x156>
	} else if (g_sensor[SENSOR_RIGHT][0] > SENSOR_R_MAX) {
 8004b38:	4b60      	ldr	r3, [pc, #384]	; (8004cbc <calWallConrol+0x2b4>)
 8004b3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004b42:	dd03      	ble.n	8004b4c <calWallConrol+0x144>
		sensorWall_R = SENSOR_R_MAX;
 8004b44:	4b61      	ldr	r3, [pc, #388]	; (8004ccc <calWallConrol+0x2c4>)
 8004b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b4a:	e008      	b.n	8004b5e <calWallConrol+0x156>
	} else {
		sensorWall_R = (float) (g_sensor[SENSOR_RIGHT][0]);
 8004b4c:	4b5b      	ldr	r3, [pc, #364]	; (8004cbc <calWallConrol+0x2b4>)
 8004b4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b5a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
//
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;

	PID_wall = 0;
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PID_w = 0;
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	66bb      	str	r3, [r7, #104]	; 0x68
	if (g_WallControl_mode == 0) {
 8004b6c:	4b58      	ldr	r3, [pc, #352]	; (8004cd0 <calWallConrol+0x2c8>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d11c      	bne.n	8004bae <calWallConrol+0x1a6>
		g_WallControlStatus = 0;
 8004b74:	4b57      	ldr	r3, [pc, #348]	; (8004cd4 <calWallConrol+0x2cc>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	701a      	strb	r2, [r3, #0]
		StabilityCount_reset = 0;
 8004b7a:	4b57      	ldr	r3, [pc, #348]	; (8004cd8 <calWallConrol+0x2d0>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
		StabilityCount_L = 0;
 8004b80:	4b56      	ldr	r3, [pc, #344]	; (8004cdc <calWallConrol+0x2d4>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
		StabilityCount_R = 0;
 8004b86:	4b56      	ldr	r3, [pc, #344]	; (8004ce0 <calWallConrol+0x2d8>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
		g_sensor_max_l = CENTER_L;
 8004b8c:	4b55      	ldr	r3, [pc, #340]	; (8004ce4 <calWallConrol+0x2dc>)
 8004b8e:	4a56      	ldr	r2, [pc, #344]	; (8004ce8 <calWallConrol+0x2e0>)
 8004b90:	601a      	str	r2, [r3, #0]
		g_sensor_max_r = CENTER_R;
 8004b92:	4b56      	ldr	r3, [pc, #344]	; (8004cec <calWallConrol+0x2e4>)
 8004b94:	4a56      	ldr	r2, [pc, #344]	; (8004cf0 <calWallConrol+0x2e8>)
 8004b96:	601a      	str	r2, [r3, #0]
		g_skewer_displacement = SKEWER_LIMIT;
 8004b98:	4b56      	ldr	r3, [pc, #344]	; (8004cf4 <calWallConrol+0x2ec>)
 8004b9a:	4a57      	ldr	r2, [pc, #348]	; (8004cf8 <calWallConrol+0x2f0>)
 8004b9c:	601a      	str	r2, [r3, #0]
		PID_wall = 0;
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		pl_yellow_LED_off();
 8004ba6:	f002 f8f5 	bl	8006d94 <pl_yellow_LED_off>
 8004baa:	f001 ba3c 	b.w	8006026 <calWallConrol+0x161e>

	} else if (g_WallControl_mode == 1) {
 8004bae:	4b48      	ldr	r3, [pc, #288]	; (8004cd0 <calWallConrol+0x2c8>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	f040 82ef 	bne.w	8005196 <calWallConrol+0x78e>

		// 左壁の有無の判定
		if (((g_WallControlStatus >> 0) & 1) == 1) {
 8004bb8:	4b46      	ldr	r3, [pc, #280]	; (8004cd4 <calWallConrol+0x2cc>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 809d 	beq.w	8004d00 <calWallConrol+0x2f8>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L
 8004bc6:	4b3d      	ldr	r3, [pc, #244]	; (8004cbc <calWallConrol+0x2b4>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004bce:	db16      	blt.n	8004bfe <calWallConrol+0x1f6>
					|| fabs(g_sensor_diff[SENSOR_LEFT]) > wallcut_threshold_L) {
 8004bd0:	4b4a      	ldr	r3, [pc, #296]	; (8004cfc <calWallConrol+0x2f4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fb fccd 	bl	8000574 <__aeabi_i2d>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4690      	mov	r8, r2
 8004be0:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8004be4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004be8:	f7fb fcd6 	bl	8000598 <__aeabi_f2d>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4640      	mov	r0, r8
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	f7fb ffb8 	bl	8000b68 <__aeabi_dcmpgt>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d037      	beq.n	8004c6e <calWallConrol+0x266>
				g_WallControlStatus = g_WallControlStatus - 1;
 8004bfe:	4b35      	ldr	r3, [pc, #212]	; (8004cd4 <calWallConrol+0x2cc>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	4b33      	ldr	r3, [pc, #204]	; (8004cd4 <calWallConrol+0x2cc>)
 8004c08:	701a      	strb	r2, [r3, #0]
				g_sensor_max_l = 0;
 8004c0a:	4b36      	ldr	r3, [pc, #216]	; (8004ce4 <calWallConrol+0x2dc>)
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8004c12:	2300      	movs	r3, #0
 8004c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c18:	e021      	b.n	8004c5e <calWallConrol+0x256>
					if (g_sensor_max_l < (float) (g_sensor[SENSOR_LEFT][i])) {
 8004c1a:	4a28      	ldr	r2, [pc, #160]	; (8004cbc <calWallConrol+0x2b4>)
 8004c1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c24:	ee07 3a90 	vmov	s15, r3
 8004c28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c2c:	4b2d      	ldr	r3, [pc, #180]	; (8004ce4 <calWallConrol+0x2dc>)
 8004c2e:	edd3 7a00 	vldr	s15, [r3]
 8004c32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3a:	dd0b      	ble.n	8004c54 <calWallConrol+0x24c>
						g_sensor_max_l = (float) (g_sensor[SENSOR_LEFT][i]);
 8004c3c:	4a1f      	ldr	r2, [pc, #124]	; (8004cbc <calWallConrol+0x2b4>)
 8004c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c4e:	4b25      	ldr	r3, [pc, #148]	; (8004ce4 <calWallConrol+0x2dc>)
 8004c50:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8004c54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c58:	3301      	adds	r3, #1
 8004c5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c62:	2b13      	cmp	r3, #19
 8004c64:	ddd9      	ble.n	8004c1a <calWallConrol+0x212>
					}
				}
				g_skewer_displacement = 0;
 8004c66:	4b23      	ldr	r3, [pc, #140]	; (8004cf4 <calWallConrol+0x2ec>)
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_L = 0;
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <calWallConrol+0x2d4>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	e066      	b.n	8004d44 <calWallConrol+0x33c>
 8004c76:	bf00      	nop
 8004c78:	33333333 	.word	0x33333333
 8004c7c:	3fd33333 	.word	0x3fd33333
 8004c80:	d2f1a9fc 	.word	0xd2f1a9fc
 8004c84:	bf70624d 	.word	0xbf70624d
 8004c88:	33333333 	.word	0x33333333
 8004c8c:	3fe33333 	.word	0x3fe33333
 8004c90:	bc6a7efa 	.word	0xbc6a7efa
 8004c94:	3f789374 	.word	0x3f789374
 8004c98:	20000808 	.word	0x20000808
 8004c9c:	435c0000 	.word	0x435c0000
 8004ca0:	43480000 	.word	0x43480000
 8004ca4:	200004d8 	.word	0x200004d8
 8004ca8:	447a0000 	.word	0x447a0000
 8004cac:	43960000 	.word	0x43960000
 8004cb0:	c0800000 	.word	0xc0800000
 8004cb4:	431d0000 	.word	0x431d0000
 8004cb8:	42dc0000 	.word	0x42dc0000
 8004cbc:	200002b8 	.word	0x200002b8
 8004cc0:	44228000 	.word	0x44228000
 8004cc4:	450fc000 	.word	0x450fc000
 8004cc8:	44160000 	.word	0x44160000
 8004ccc:	44fa0000 	.word	0x44fa0000
 8004cd0:	20000590 	.word	0x20000590
 8004cd4:	20000593 	.word	0x20000593
 8004cd8:	20000595 	.word	0x20000595
 8004cdc:	20000596 	.word	0x20000596
 8004ce0:	20000597 	.word	0x20000597
 8004ce4:	20000598 	.word	0x20000598
 8004ce8:	44be6000 	.word	0x44be6000
 8004cec:	2000059c 	.word	0x2000059c
 8004cf0:	44974000 	.word	0x44974000
 8004cf4:	200005a0 	.word	0x200005a0
 8004cf8:	41a00000 	.word	0x41a00000
 8004cfc:	20000448 	.word	0x20000448
		} else {
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L
 8004d00:	4bbf      	ldr	r3, [pc, #764]	; (8005000 <calWallConrol+0x5f8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004d08:	dd1c      	ble.n	8004d44 <calWallConrol+0x33c>
					&& fabs(g_sensor_diff[SENSOR_LEFT]) < wallcut_threshold_L) {
 8004d0a:	4bbe      	ldr	r3, [pc, #760]	; (8005004 <calWallConrol+0x5fc>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fb fc30 	bl	8000574 <__aeabi_i2d>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4614      	mov	r4, r2
 8004d1a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004d1e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004d22:	f7fb fc39 	bl	8000598 <__aeabi_f2d>
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	f7fb fefd 	bl	8000b2c <__aeabi_dcmplt>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <calWallConrol+0x33c>
				g_WallControlStatus = g_WallControlStatus + 1;
 8004d38:	4bb3      	ldr	r3, [pc, #716]	; (8005008 <calWallConrol+0x600>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	4bb1      	ldr	r3, [pc, #708]	; (8005008 <calWallConrol+0x600>)
 8004d42:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_L >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 1;
//			}
		}
		// 右壁の有無の判定
		if (((g_WallControlStatus >> 1) & 1) == 1) {
 8004d44:	4bb0      	ldr	r3, [pc, #704]	; (8005008 <calWallConrol+0x600>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	085b      	lsrs	r3, r3, #1
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d05c      	beq.n	8004e0e <calWallConrol+0x406>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R
 8004d54:	4baa      	ldr	r3, [pc, #680]	; (8005000 <calWallConrol+0x5f8>)
 8004d56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004d5a:	f240 2225 	movw	r2, #549	; 0x225
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	dd17      	ble.n	8004d92 <calWallConrol+0x38a>
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8004d62:	4ba8      	ldr	r3, [pc, #672]	; (8005004 <calWallConrol+0x5fc>)
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fb fc04 	bl	8000574 <__aeabi_i2d>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	613a      	str	r2, [r7, #16]
 8004d72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d76:	617b      	str	r3, [r7, #20]
							> wallcut_threshold_R) {
 8004d78:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004d7c:	f7fb fc0c 	bl	8000598 <__aeabi_f2d>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8004d84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d88:	f7fb feee 	bl	8000b68 <__aeabi_dcmpgt>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d039      	beq.n	8004e06 <calWallConrol+0x3fe>
				g_WallControlStatus = g_WallControlStatus - 2;
 8004d92:	4b9d      	ldr	r3, [pc, #628]	; (8005008 <calWallConrol+0x600>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	3b02      	subs	r3, #2
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	4b9b      	ldr	r3, [pc, #620]	; (8005008 <calWallConrol+0x600>)
 8004d9c:	701a      	strb	r2, [r3, #0]
				g_sensor_max_r = 0;
 8004d9e:	4b9b      	ldr	r3, [pc, #620]	; (800500c <calWallConrol+0x604>)
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8004da6:	2300      	movs	r3, #0
 8004da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dac:	e023      	b.n	8004df6 <calWallConrol+0x3ee>
					if (g_sensor_max_r < (float) (g_sensor[SENSOR_RIGHT][i])) {
 8004dae:	4a94      	ldr	r2, [pc, #592]	; (8005000 <calWallConrol+0x5f8>)
 8004db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004db4:	3350      	adds	r3, #80	; 0x50
 8004db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dc2:	4b92      	ldr	r3, [pc, #584]	; (800500c <calWallConrol+0x604>)
 8004dc4:	edd3 7a00 	vldr	s15, [r3]
 8004dc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd0:	dd0c      	ble.n	8004dec <calWallConrol+0x3e4>
						g_sensor_max_r = (float) (g_sensor[SENSOR_RIGHT][i]);
 8004dd2:	4a8b      	ldr	r2, [pc, #556]	; (8005000 <calWallConrol+0x5f8>)
 8004dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dd8:	3350      	adds	r3, #80	; 0x50
 8004dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004de6:	4b89      	ldr	r3, [pc, #548]	; (800500c <calWallConrol+0x604>)
 8004de8:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8004dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004df0:	3301      	adds	r3, #1
 8004df2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004df6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dfa:	2b13      	cmp	r3, #19
 8004dfc:	ddd7      	ble.n	8004dae <calWallConrol+0x3a6>
					}
				}
				g_skewer_displacement = 0;
 8004dfe:	4b84      	ldr	r3, [pc, #528]	; (8005010 <calWallConrol+0x608>)
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_R = 0;
 8004e06:	4b83      	ldr	r3, [pc, #524]	; (8005014 <calWallConrol+0x60c>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	701a      	strb	r2, [r3, #0]
 8004e0c:	e024      	b.n	8004e58 <calWallConrol+0x450>
		} else {
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R
 8004e0e:	4b7c      	ldr	r3, [pc, #496]	; (8005000 <calWallConrol+0x5f8>)
 8004e10:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004e14:	f240 2226 	movw	r2, #550	; 0x226
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	dd1d      	ble.n	8004e58 <calWallConrol+0x450>
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8004e1c:	4b79      	ldr	r3, [pc, #484]	; (8005004 <calWallConrol+0x5fc>)
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fb fba7 	bl	8000574 <__aeabi_i2d>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	60ba      	str	r2, [r7, #8]
 8004e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e30:	60fb      	str	r3, [r7, #12]
							< wallcut_threshold_R) {
 8004e32:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004e36:	f7fb fbaf 	bl	8000598 <__aeabi_f2d>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8004e3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e42:	f7fb fe73 	bl	8000b2c <__aeabi_dcmplt>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <calWallConrol+0x450>
				//StabilityCount_R++;
				g_WallControlStatus = g_WallControlStatus + 2;			//安定消す
 8004e4c:	4b6e      	ldr	r3, [pc, #440]	; (8005008 <calWallConrol+0x600>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	3302      	adds	r3, #2
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	4b6c      	ldr	r3, [pc, #432]	; (8005008 <calWallConrol+0x600>)
 8004e56:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_R >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 2;
//			}
		}

		switch (g_WallControlStatus) {
 8004e58:	4b6b      	ldr	r3, [pc, #428]	; (8005008 <calWallConrol+0x600>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	f201 80e2 	bhi.w	8006026 <calWallConrol+0x161e>
 8004e62:	a201      	add	r2, pc, #4	; (adr r2, 8004e68 <calWallConrol+0x460>)
 8004e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e68:	08004e79 	.word	0x08004e79
 8004e6c:	08004f7f 	.word	0x08004f7f
 8004e70:	0800502d 	.word	0x0800502d
 8004e74:	08005097 	.word	0x08005097
		case 0:			//両壁なし
			g_skewer_displacement += straight.velocity * INTERRUPT_TIME;
 8004e78:	4b65      	ldr	r3, [pc, #404]	; (8005010 <calWallConrol+0x608>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fb fb8b 	bl	8000598 <__aeabi_f2d>
 8004e82:	4604      	mov	r4, r0
 8004e84:	460d      	mov	r5, r1
 8004e86:	4b64      	ldr	r3, [pc, #400]	; (8005018 <calWallConrol+0x610>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fb fb84 	bl	8000598 <__aeabi_f2d>
 8004e90:	a357      	add	r3, pc, #348	; (adr r3, 8004ff0 <calWallConrol+0x5e8>)
 8004e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e96:	f7fb fbd7 	bl	8000648 <__aeabi_dmul>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	f7fb fa1b 	bl	80002dc <__adddf3>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4610      	mov	r0, r2
 8004eac:	4619      	mov	r1, r3
 8004eae:	f7fb fea3 	bl	8000bf8 <__aeabi_d2f>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4a56      	ldr	r2, [pc, #344]	; (8005010 <calWallConrol+0x608>)
 8004eb6:	6013      	str	r3, [r2, #0]
			if (g_skewer_displacement < SKEWER_LIMIT) {
 8004eb8:	4b55      	ldr	r3, [pc, #340]	; (8005010 <calWallConrol+0x608>)
 8004eba:	edd3 7a00 	vldr	s15, [r3]
 8004ebe:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eca:	d52e      	bpl.n	8004f2a <calWallConrol+0x522>
				wall_normal.error = 0.7
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8004ecc:	4b53      	ldr	r3, [pc, #332]	; (800501c <calWallConrol+0x614>)
 8004ece:	edd3 7a00 	vldr	s15, [r3]
 8004ed2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8005020 <calWallConrol+0x618>
 8004ed6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004eda:	eef1 6a67 	vneg.f32	s13, s15
 8004ede:	4b4f      	ldr	r3, [pc, #316]	; (800501c <calWallConrol+0x614>)
 8004ee0:	edd3 7a00 	vldr	s15, [r3]
 8004ee4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
								+ (g_sensor_max_r - CENTER_R) / g_sensor_max_r);
 8004ee8:	4b48      	ldr	r3, [pc, #288]	; (800500c <calWallConrol+0x604>)
 8004eea:	edd3 7a00 	vldr	s15, [r3]
 8004eee:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005028 <calWallConrol+0x620>
 8004ef2:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8004ef6:	4b45      	ldr	r3, [pc, #276]	; (800500c <calWallConrol+0x604>)
 8004ef8:	edd3 6a00 	vldr	s13, [r3]
 8004efc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f04:	ee17 0a90 	vmov	r0, s15
 8004f08:	f7fb fb46 	bl	8000598 <__aeabi_f2d>
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8004f0c:	a33a      	add	r3, pc, #232	; (adr r3, 8004ff8 <calWallConrol+0x5f0>)
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	f7fb fb99 	bl	8000648 <__aeabi_dmul>
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	f7fb fe6b 	bl	8000bf8 <__aeabi_d2f>
 8004f22:	4603      	mov	r3, r0
				wall_normal.error = 0.7
 8004f24:	4a3f      	ldr	r2, [pc, #252]	; (8005024 <calWallConrol+0x61c>)
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	e003      	b.n	8004f32 <calWallConrol+0x52a>
			} else {
				wall_normal.error = 0;
 8004f2a:	4b3e      	ldr	r3, [pc, #248]	; (8005024 <calWallConrol+0x61c>)
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
			}
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8004f32:	4b3c      	ldr	r3, [pc, #240]	; (8005024 <calWallConrol+0x61c>)
 8004f34:	ed93 7a00 	vldr	s14, [r3]
 8004f38:	4b3a      	ldr	r3, [pc, #232]	; (8005024 <calWallConrol+0x61c>)
 8004f3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f42:	4b38      	ldr	r3, [pc, #224]	; (8005024 <calWallConrol+0x61c>)
 8004f44:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8004f48:	4b36      	ldr	r3, [pc, #216]	; (8005024 <calWallConrol+0x61c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a35      	ldr	r2, [pc, #212]	; (8005024 <calWallConrol+0x61c>)
 8004f4e:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8004f50:	4b34      	ldr	r3, [pc, #208]	; (8005024 <calWallConrol+0x61c>)
 8004f52:	ed93 7a00 	vldr	s14, [r3]
 8004f56:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004f5a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8004f5e:	4b31      	ldr	r3, [pc, #196]	; (8005024 <calWallConrol+0x61c>)
 8004f60:	edd3 6a02 	vldr	s13, [r3, #8]
 8004f64:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004f68:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8004f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f70:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_count(0);
 8004f74:	2000      	movs	r0, #0
 8004f76:	f001 ff47 	bl	8006e08 <pl_yellow_LED_count>
			break;
 8004f7a:	f001 b854 	b.w	8006026 <calWallConrol+0x161e>
		case 1:			//左壁のみ
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8004f7e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8004f82:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005020 <calWallConrol+0x618>
 8004f86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f8a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8004f8e:	ee67 6a87 	vmul.f32	s13, s15, s14
					/ (float) (sensorWall_L));
 8004f92:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8004f9a:	4b22      	ldr	r3, [pc, #136]	; (8005024 <calWallConrol+0x61c>)
 8004f9c:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8004fa0:	4b20      	ldr	r3, [pc, #128]	; (8005024 <calWallConrol+0x61c>)
 8004fa2:	ed93 7a00 	vldr	s14, [r3]
 8004fa6:	4b1f      	ldr	r3, [pc, #124]	; (8005024 <calWallConrol+0x61c>)
 8004fa8:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fb0:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <calWallConrol+0x61c>)
 8004fb2:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8004fb6:	4b1b      	ldr	r3, [pc, #108]	; (8005024 <calWallConrol+0x61c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a1a      	ldr	r2, [pc, #104]	; (8005024 <calWallConrol+0x61c>)
 8004fbc:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8004fbe:	4b19      	ldr	r3, [pc, #100]	; (8005024 <calWallConrol+0x61c>)
 8004fc0:	ed93 7a00 	vldr	s14, [r3]
 8004fc4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004fc8:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8004fcc:	4b15      	ldr	r3, [pc, #84]	; (8005024 <calWallConrol+0x61c>)
 8004fce:	edd3 6a02 	vldr	s13, [r3, #8]
 8004fd2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004fd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8004fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fde:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-2 * (float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0]));
			pl_yellow_LED_count(128);
 8004fe2:	2080      	movs	r0, #128	; 0x80
 8004fe4:	f001 ff10 	bl	8006e08 <pl_yellow_LED_count>
			break;
 8004fe8:	f001 b81d 	b.w	8006026 <calWallConrol+0x161e>
 8004fec:	f3af 8000 	nop.w
 8004ff0:	d2f1a9fc 	.word	0xd2f1a9fc
 8004ff4:	3f50624d 	.word	0x3f50624d
 8004ff8:	66666666 	.word	0x66666666
 8004ffc:	3fe66666 	.word	0x3fe66666
 8005000:	200002b8 	.word	0x200002b8
 8005004:	20000448 	.word	0x20000448
 8005008:	20000593 	.word	0x20000593
 800500c:	2000059c 	.word	0x2000059c
 8005010:	200005a0 	.word	0x200005a0
 8005014:	20000597 	.word	0x20000597
 8005018:	200004d8 	.word	0x200004d8
 800501c:	20000598 	.word	0x20000598
 8005020:	44be6000 	.word	0x44be6000
 8005024:	2000056c 	.word	0x2000056c
 8005028:	44974000 	.word	0x44974000
		case 2:			//右壁のみ
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 800502c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005030:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8005028 <calWallConrol+0x620>
 8005034:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005038:	ee77 6aa7 	vadd.f32	s13, s15, s15
					/ (float) (sensorWall_R));
 800503c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005040:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005044:	4ba2      	ldr	r3, [pc, #648]	; (80052d0 <calWallConrol+0x8c8>)
 8005046:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 800504a:	4ba1      	ldr	r3, [pc, #644]	; (80052d0 <calWallConrol+0x8c8>)
 800504c:	ed93 7a00 	vldr	s14, [r3]
 8005050:	4b9f      	ldr	r3, [pc, #636]	; (80052d0 <calWallConrol+0x8c8>)
 8005052:	edd3 7a01 	vldr	s15, [r3, #4]
 8005056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800505a:	4b9d      	ldr	r3, [pc, #628]	; (80052d0 <calWallConrol+0x8c8>)
 800505c:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005060:	4b9b      	ldr	r3, [pc, #620]	; (80052d0 <calWallConrol+0x8c8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a9a      	ldr	r2, [pc, #616]	; (80052d0 <calWallConrol+0x8c8>)
 8005066:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005068:	4b99      	ldr	r3, [pc, #612]	; (80052d0 <calWallConrol+0x8c8>)
 800506a:	ed93 7a00 	vldr	s14, [r3]
 800506e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005072:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005076:	4b96      	ldr	r3, [pc, #600]	; (80052d0 <calWallConrol+0x8c8>)
 8005078:	edd3 6a02 	vldr	s13, [r3, #8]
 800507c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005080:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005088:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (2 * (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(1);
 800508c:	2001      	movs	r0, #1
 800508e:	f001 febb 	bl	8006e08 <pl_yellow_LED_count>
			break;
 8005092:	f000 bfc8 	b.w	8006026 <calWallConrol+0x161e>
		case 3:			//両壁あり
			wall_normal.error =
					(-(float) (sensorWall_L - CENTER_L) / (float) (sensorWall_L)
 8005096:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800509a:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80052d4 <calWallConrol+0x8cc>
 800509e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80050a2:	eef1 6a67 	vneg.f32	s13, s15
 80050a6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80050aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
							+ (float) (sensorWall_R - CENTER_R)
 80050ae:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80050b2:	eddf 6a89 	vldr	s13, [pc, #548]	; 80052d8 <calWallConrol+0x8d0>
 80050b6:	ee37 6ae6 	vsub.f32	s12, s15, s13
									/ (float) (sensorWall_R));
 80050ba:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80050be:	eec6 7a26 	vdiv.f32	s15, s12, s13
							+ (float) (sensorWall_R - CENTER_R)
 80050c2:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_normal.error =
 80050c6:	4b82      	ldr	r3, [pc, #520]	; (80052d0 <calWallConrol+0x8c8>)
 80050c8:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 80050cc:	4b80      	ldr	r3, [pc, #512]	; (80052d0 <calWallConrol+0x8c8>)
 80050ce:	ed93 7a00 	vldr	s14, [r3]
 80050d2:	4b7f      	ldr	r3, [pc, #508]	; (80052d0 <calWallConrol+0x8c8>)
 80050d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80050d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050dc:	4b7c      	ldr	r3, [pc, #496]	; (80052d0 <calWallConrol+0x8c8>)
 80050de:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80050e2:	4b7b      	ldr	r3, [pc, #492]	; (80052d0 <calWallConrol+0x8c8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a7a      	ldr	r2, [pc, #488]	; (80052d0 <calWallConrol+0x8c8>)
 80050e8:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80050ea:	4b79      	ldr	r3, [pc, #484]	; (80052d0 <calWallConrol+0x8c8>)
 80050ec:	ed93 7a00 	vldr	s14, [r3]
 80050f0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80050f4:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80050f8:	4b75      	ldr	r3, [pc, #468]	; (80052d0 <calWallConrol+0x8c8>)
 80050fa:	edd3 6a02 	vldr	s13, [r3, #8]
 80050fe:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005102:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800510a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-(float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0])
//							+ (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(129);
 800510e:	2081      	movs	r0, #129	; 0x81
 8005110:	f001 fe7a 	bl	8006e08 <pl_yellow_LED_count>
			if ((fabs(g_sensor_diff[SENSOR_LEFT]) < 30)
 8005114:	4b71      	ldr	r3, [pc, #452]	; (80052dc <calWallConrol+0x8d4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4618      	mov	r0, r3
 800511a:	f7fb fa2b 	bl	8000574 <__aeabi_i2d>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	603a      	str	r2, [r7, #0]
 8005124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005128:	607b      	str	r3, [r7, #4]
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	4b6c      	ldr	r3, [pc, #432]	; (80052e0 <calWallConrol+0x8d8>)
 8005130:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005134:	f7fb fcfa 	bl	8000b2c <__aeabi_dcmplt>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d01a      	beq.n	8005174 <calWallConrol+0x76c>
					&& (fabs(g_sensor_diff[SENSOR_RIGHT]) < 30)) {
 800513e:	4b67      	ldr	r3, [pc, #412]	; (80052dc <calWallConrol+0x8d4>)
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	4618      	mov	r0, r3
 8005144:	f7fb fa16 	bl	8000574 <__aeabi_i2d>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4692      	mov	sl, r2
 800514e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	4b62      	ldr	r3, [pc, #392]	; (80052e0 <calWallConrol+0x8d8>)
 8005158:	4650      	mov	r0, sl
 800515a:	4659      	mov	r1, fp
 800515c:	f7fb fce6 	bl	8000b2c <__aeabi_dcmplt>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d006      	beq.n	8005174 <calWallConrol+0x76c>
				StabilityCount_reset++;
 8005166:	4b5f      	ldr	r3, [pc, #380]	; (80052e4 <calWallConrol+0x8dc>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	3301      	adds	r3, #1
 800516c:	b2da      	uxtb	r2, r3
 800516e:	4b5d      	ldr	r3, [pc, #372]	; (80052e4 <calWallConrol+0x8dc>)
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	e002      	b.n	800517a <calWallConrol+0x772>
			} else {
				StabilityCount_reset = 0;
 8005174:	4b5b      	ldr	r3, [pc, #364]	; (80052e4 <calWallConrol+0x8dc>)
 8005176:	2200      	movs	r2, #0
 8005178:	701a      	strb	r2, [r3, #0]
			}
			if (StabilityCount_reset >= 25) {
 800517a:	4b5a      	ldr	r3, [pc, #360]	; (80052e4 <calWallConrol+0x8dc>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b18      	cmp	r3, #24
 8005180:	f240 8750 	bls.w	8006024 <calWallConrol+0x161c>
				Gyro.sigma_error = 0;
 8005184:	4b58      	ldr	r3, [pc, #352]	; (80052e8 <calWallConrol+0x8e0>)
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	609a      	str	r2, [r3, #8]
				StabilityCount_reset = 0;
 800518c:	4b55      	ldr	r3, [pc, #340]	; (80052e4 <calWallConrol+0x8dc>)
 800518e:	2200      	movs	r2, #0
 8005190:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005192:	f000 bf47 	b.w	8006024 <calWallConrol+0x161c>
		}
//		if (highspeed_mode == 1) {
//			PID_wall = PID_wall * 0.7;
//		}

	} else if (g_WallControl_mode == 2) {
 8005196:	4b55      	ldr	r3, [pc, #340]	; (80052ec <calWallConrol+0x8e4>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b02      	cmp	r3, #2
 800519c:	f000 8743 	beq.w	8006026 <calWallConrol+0x161e>
// 斜めの制御


	} else if (g_WallControl_mode == 3) {
 80051a0:	4b52      	ldr	r3, [pc, #328]	; (80052ec <calWallConrol+0x8e4>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	f040 873e 	bne.w	8006026 <calWallConrol+0x161e>
		//g_WallControlStatus=3;
		float CenterSlantR, CenterSlantL;
		float coefficientR[4];
		float coefficientL[4];
		float sensor_gain_slant90_p, sensor_gain_slant90_d;
		if (straight.velocity > 1000) {
 80051aa:	4b51      	ldr	r3, [pc, #324]	; (80052f0 <calWallConrol+0x8e8>)
 80051ac:	edd3 7a00 	vldr	s15, [r3]
 80051b0:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80052f4 <calWallConrol+0x8ec>
 80051b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051bc:	dd05      	ble.n	80051ca <calWallConrol+0x7c2>
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * 1000;
 80051be:	4b4e      	ldr	r3, [pc, #312]	; (80052f8 <calWallConrol+0x8f0>)
 80051c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * 1000;
 80051c4:	4b4d      	ldr	r3, [pc, #308]	; (80052fc <calWallConrol+0x8f4>)
 80051c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80051c8:	e01a      	b.n	8005200 <calWallConrol+0x7f8>
		} else {
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * straight.velocity;
 80051ca:	4b49      	ldr	r3, [pc, #292]	; (80052f0 <calWallConrol+0x8e8>)
 80051cc:	edd3 7a00 	vldr	s15, [r3]
 80051d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80051d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051d8:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * straight.velocity;
 80051dc:	4b44      	ldr	r3, [pc, #272]	; (80052f0 <calWallConrol+0x8e8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fb f9d9 	bl	8000598 <__aeabi_f2d>
 80051e6:	a338      	add	r3, pc, #224	; (adr r3, 80052c8 <calWallConrol+0x8c0>)
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	f7fb fa2c 	bl	8000648 <__aeabi_dmul>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4610      	mov	r0, r2
 80051f6:	4619      	mov	r1, r3
 80051f8:	f7fb fcfe 	bl	8000bf8 <__aeabi_d2f>
 80051fc:	4603      	mov	r3, r0
 80051fe:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if (NoWallDisplacementR45slant > AREAMIN_R0
 8005200:	4b3f      	ldr	r3, [pc, #252]	; (8005300 <calWallConrol+0x8f8>)
 8005202:	edd3 7a00 	vldr	s15, [r3]
 8005206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800520a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800520e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005212:	dd12      	ble.n	800523a <calWallConrol+0x832>
				&& NoWallDisplacementR45slant <= AREAMAX_R0) {
 8005214:	4b3a      	ldr	r3, [pc, #232]	; (8005300 <calWallConrol+0x8f8>)
 8005216:	edd3 7a00 	vldr	s15, [r3]
 800521a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800521e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005226:	d808      	bhi.n	800523a <calWallConrol+0x832>
			coefficientR[0] = COEFFICIENT_R0_0;
 8005228:	4b36      	ldr	r3, [pc, #216]	; (8005304 <calWallConrol+0x8fc>)
 800522a:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R0_1;
 800522c:	4b36      	ldr	r3, [pc, #216]	; (8005308 <calWallConrol+0x900>)
 800522e:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R0_2;
 8005230:	4b36      	ldr	r3, [pc, #216]	; (800530c <calWallConrol+0x904>)
 8005232:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R0_3;
 8005234:	4b36      	ldr	r3, [pc, #216]	; (8005310 <calWallConrol+0x908>)
 8005236:	657b      	str	r3, [r7, #84]	; 0x54
 8005238:	e0a1      	b.n	800537e <calWallConrol+0x976>
		} else if (NoWallDisplacementR45slant > AREAMIN_R1
 800523a:	4b31      	ldr	r3, [pc, #196]	; (8005300 <calWallConrol+0x8f8>)
 800523c:	edd3 7a00 	vldr	s15, [r3]
 8005240:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8005314 <calWallConrol+0x90c>
 8005244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800524c:	dd12      	ble.n	8005274 <calWallConrol+0x86c>
				&& NoWallDisplacementR45slant <= AREAMAX_R1) {
 800524e:	4b2c      	ldr	r3, [pc, #176]	; (8005300 <calWallConrol+0x8f8>)
 8005250:	edd3 7a00 	vldr	s15, [r3]
 8005254:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005318 <calWallConrol+0x910>
 8005258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800525c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005260:	d808      	bhi.n	8005274 <calWallConrol+0x86c>
			coefficientR[0] = COEFFICIENT_R1_0;
 8005262:	4b2e      	ldr	r3, [pc, #184]	; (800531c <calWallConrol+0x914>)
 8005264:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R1_1;
 8005266:	4b2e      	ldr	r3, [pc, #184]	; (8005320 <calWallConrol+0x918>)
 8005268:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R1_2;
 800526a:	4b2e      	ldr	r3, [pc, #184]	; (8005324 <calWallConrol+0x91c>)
 800526c:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R1_3;
 800526e:	4b2e      	ldr	r3, [pc, #184]	; (8005328 <calWallConrol+0x920>)
 8005270:	657b      	str	r3, [r7, #84]	; 0x54
 8005272:	e084      	b.n	800537e <calWallConrol+0x976>
		} else if (NoWallDisplacementR45slant > AREAMIN_R2
 8005274:	4b22      	ldr	r3, [pc, #136]	; (8005300 <calWallConrol+0x8f8>)
 8005276:	edd3 7a00 	vldr	s15, [r3]
 800527a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800532c <calWallConrol+0x924>
 800527e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005286:	dd12      	ble.n	80052ae <calWallConrol+0x8a6>
				&& NoWallDisplacementR45slant <= AREAMAX_R2) {
 8005288:	4b1d      	ldr	r3, [pc, #116]	; (8005300 <calWallConrol+0x8f8>)
 800528a:	edd3 7a00 	vldr	s15, [r3]
 800528e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8005330 <calWallConrol+0x928>
 8005292:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529a:	d808      	bhi.n	80052ae <calWallConrol+0x8a6>
			coefficientR[0] = COEFFICIENT_R2_0;
 800529c:	4b25      	ldr	r3, [pc, #148]	; (8005334 <calWallConrol+0x92c>)
 800529e:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R2_1;
 80052a0:	4b25      	ldr	r3, [pc, #148]	; (8005338 <calWallConrol+0x930>)
 80052a2:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R2_2;
 80052a4:	4b25      	ldr	r3, [pc, #148]	; (800533c <calWallConrol+0x934>)
 80052a6:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R2_3;
 80052a8:	4b25      	ldr	r3, [pc, #148]	; (8005340 <calWallConrol+0x938>)
 80052aa:	657b      	str	r3, [r7, #84]	; 0x54
 80052ac:	e067      	b.n	800537e <calWallConrol+0x976>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R) {
 80052ae:	4b25      	ldr	r3, [pc, #148]	; (8005344 <calWallConrol+0x93c>)
 80052b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80052b4:	2bb4      	cmp	r3, #180	; 0xb4
 80052b6:	dd49      	ble.n	800534c <calWallConrol+0x944>
				g_WallControlStatus = g_WallControlStatus | (1 << 1);
 80052b8:	4b23      	ldr	r3, [pc, #140]	; (8005348 <calWallConrol+0x940>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	f043 0302 	orr.w	r3, r3, #2
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	4b21      	ldr	r3, [pc, #132]	; (8005348 <calWallConrol+0x940>)
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	e048      	b.n	800535a <calWallConrol+0x952>
 80052c8:	9999999a 	.word	0x9999999a
 80052cc:	bfa99999 	.word	0xbfa99999
 80052d0:	2000056c 	.word	0x2000056c
 80052d4:	44be6000 	.word	0x44be6000
 80052d8:	44974000 	.word	0x44974000
 80052dc:	20000448 	.word	0x20000448
 80052e0:	403e0000 	.word	0x403e0000
 80052e4:	20000595 	.word	0x20000595
 80052e8:	20000544 	.word	0x20000544
 80052ec:	20000590 	.word	0x20000590
 80052f0:	200004d8 	.word	0x200004d8
 80052f4:	447a0000 	.word	0x447a0000
 80052f8:	43fa0000 	.word	0x43fa0000
 80052fc:	c2480000 	.word	0xc2480000
 8005300:	200005dc 	.word	0x200005dc
 8005304:	440b73b2 	.word	0x440b73b2
 8005308:	42034f5d 	.word	0x42034f5d
 800530c:	c00b4f6f 	.word	0xc00b4f6f
 8005310:	3e841893 	.word	0x3e841893
 8005314:	420c0000 	.word	0x420c0000
 8005318:	42700000 	.word	0x42700000
 800531c:	4552aadc 	.word	0x4552aadc
 8005320:	c311f514 	.word	0xc311f514
 8005324:	40181a18 	.word	0x40181a18
 8005328:	bc61178f 	.word	0xbc61178f
 800532c:	42c80000 	.word	0x42c80000
 8005330:	42f00000 	.word	0x42f00000
 8005334:	c5ea06b5 	.word	0xc5ea06b5
 8005338:	4363b05d 	.word	0x4363b05d
 800533c:	c0129590 	.word	0xc0129590
 8005340:	3c009d49 	.word	0x3c009d49
 8005344:	200002b8 	.word	0x200002b8
 8005348:	20000593 	.word	0x20000593
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 800534c:	4b79      	ldr	r3, [pc, #484]	; (8005534 <calWallConrol+0xb2c>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f023 0302 	bic.w	r3, r3, #2
 8005354:	b2da      	uxtb	r2, r3
 8005356:	4b77      	ldr	r3, [pc, #476]	; (8005534 <calWallConrol+0xb2c>)
 8005358:	701a      	strb	r2, [r3, #0]
			}
			coefficientR[0] = (float) (g_sensor[SENSOR_RIGHT][0]);
 800535a:	4b77      	ldr	r3, [pc, #476]	; (8005538 <calWallConrol+0xb30>)
 800535c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005360:	ee07 3a90 	vmov	s15, r3
 8005364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005368:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			coefficientR[1] = 0;
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = 0;
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = 0;
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	657b      	str	r3, [r7, #84]	; 0x54
		}

		if (NoWallDisplacementL45slant > AREAMIN_L0
 800537e:	4b6f      	ldr	r3, [pc, #444]	; (800553c <calWallConrol+0xb34>)
 8005380:	edd3 7a00 	vldr	s15, [r3]
 8005384:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800538c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005390:	dd12      	ble.n	80053b8 <calWallConrol+0x9b0>
				&& NoWallDisplacementL45slant <= AREAMAX_L0) {
 8005392:	4b6a      	ldr	r3, [pc, #424]	; (800553c <calWallConrol+0xb34>)
 8005394:	edd3 7a00 	vldr	s15, [r3]
 8005398:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800539c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a4:	d808      	bhi.n	80053b8 <calWallConrol+0x9b0>
			coefficientL[0] = COEFFICIENT_L0_0;
 80053a6:	4b66      	ldr	r3, [pc, #408]	; (8005540 <calWallConrol+0xb38>)
 80053a8:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L0_1;
 80053aa:	4b66      	ldr	r3, [pc, #408]	; (8005544 <calWallConrol+0xb3c>)
 80053ac:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L0_2;
 80053ae:	4b66      	ldr	r3, [pc, #408]	; (8005548 <calWallConrol+0xb40>)
 80053b0:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L0_3;
 80053b2:	4b66      	ldr	r3, [pc, #408]	; (800554c <calWallConrol+0xb44>)
 80053b4:	647b      	str	r3, [r7, #68]	; 0x44
 80053b6:	e05d      	b.n	8005474 <calWallConrol+0xa6c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L1
 80053b8:	4b60      	ldr	r3, [pc, #384]	; (800553c <calWallConrol+0xb34>)
 80053ba:	edd3 7a00 	vldr	s15, [r3]
 80053be:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005550 <calWallConrol+0xb48>
 80053c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ca:	dd12      	ble.n	80053f2 <calWallConrol+0x9ea>
				&& NoWallDisplacementL45slant <= AREAMAX_L1) {
 80053cc:	4b5b      	ldr	r3, [pc, #364]	; (800553c <calWallConrol+0xb34>)
 80053ce:	edd3 7a00 	vldr	s15, [r3]
 80053d2:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8005554 <calWallConrol+0xb4c>
 80053d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053de:	d808      	bhi.n	80053f2 <calWallConrol+0x9ea>
			coefficientL[0] = COEFFICIENT_L1_0;
 80053e0:	4b5d      	ldr	r3, [pc, #372]	; (8005558 <calWallConrol+0xb50>)
 80053e2:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L1_1;
 80053e4:	4b5d      	ldr	r3, [pc, #372]	; (800555c <calWallConrol+0xb54>)
 80053e6:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L1_2;
 80053e8:	4b5d      	ldr	r3, [pc, #372]	; (8005560 <calWallConrol+0xb58>)
 80053ea:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L1_3;
 80053ec:	4b5d      	ldr	r3, [pc, #372]	; (8005564 <calWallConrol+0xb5c>)
 80053ee:	647b      	str	r3, [r7, #68]	; 0x44
 80053f0:	e040      	b.n	8005474 <calWallConrol+0xa6c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L2
 80053f2:	4b52      	ldr	r3, [pc, #328]	; (800553c <calWallConrol+0xb34>)
 80053f4:	edd3 7a00 	vldr	s15, [r3]
 80053f8:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8005568 <calWallConrol+0xb60>
 80053fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005404:	dd12      	ble.n	800542c <calWallConrol+0xa24>
				&& NoWallDisplacementL45slant <= AREAMAX_L2) {
 8005406:	4b4d      	ldr	r3, [pc, #308]	; (800553c <calWallConrol+0xb34>)
 8005408:	edd3 7a00 	vldr	s15, [r3]
 800540c:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800556c <calWallConrol+0xb64>
 8005410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005418:	d808      	bhi.n	800542c <calWallConrol+0xa24>
			coefficientL[0] = COEFFICIENT_L2_0;
 800541a:	4b55      	ldr	r3, [pc, #340]	; (8005570 <calWallConrol+0xb68>)
 800541c:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L2_1;
 800541e:	4b55      	ldr	r3, [pc, #340]	; (8005574 <calWallConrol+0xb6c>)
 8005420:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L2_2;
 8005422:	4b55      	ldr	r3, [pc, #340]	; (8005578 <calWallConrol+0xb70>)
 8005424:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L2_3;
 8005426:	4b55      	ldr	r3, [pc, #340]	; (800557c <calWallConrol+0xb74>)
 8005428:	647b      	str	r3, [r7, #68]	; 0x44
 800542a:	e023      	b.n	8005474 <calWallConrol+0xa6c>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L) {
 800542c:	4b42      	ldr	r3, [pc, #264]	; (8005538 <calWallConrol+0xb30>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2bb4      	cmp	r3, #180	; 0xb4
 8005432:	dd07      	ble.n	8005444 <calWallConrol+0xa3c>
				g_WallControlStatus = g_WallControlStatus | (1 << 0);
 8005434:	4b3f      	ldr	r3, [pc, #252]	; (8005534 <calWallConrol+0xb2c>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	f043 0301 	orr.w	r3, r3, #1
 800543c:	b2da      	uxtb	r2, r3
 800543e:	4b3d      	ldr	r3, [pc, #244]	; (8005534 <calWallConrol+0xb2c>)
 8005440:	701a      	strb	r2, [r3, #0]
 8005442:	e006      	b.n	8005452 <calWallConrol+0xa4a>
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 8005444:	4b3b      	ldr	r3, [pc, #236]	; (8005534 <calWallConrol+0xb2c>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	f023 0301 	bic.w	r3, r3, #1
 800544c:	b2da      	uxtb	r2, r3
 800544e:	4b39      	ldr	r3, [pc, #228]	; (8005534 <calWallConrol+0xb2c>)
 8005450:	701a      	strb	r2, [r3, #0]
			}
			coefficientL[0] = (float) (g_sensor[SENSOR_LEFT][0]);
 8005452:	4b39      	ldr	r3, [pc, #228]	; (8005538 <calWallConrol+0xb30>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800545e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			coefficientL[1] = 0;
 8005462:	f04f 0300 	mov.w	r3, #0
 8005466:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = 0;
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = 0;
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	647b      	str	r3, [r7, #68]	; 0x44
		}

		CenterSlantR = coefficientR[0]
 8005474:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
				+ coefficientR[1] * NoWallDisplacementR45slant
 8005478:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800547c:	4b40      	ldr	r3, [pc, #256]	; (8005580 <calWallConrol+0xb78>)
 800547e:	edd3 7a00 	vldr	s15, [r3]
 8005482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005486:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 800548a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800548e:	4b3c      	ldr	r3, [pc, #240]	; (8005580 <calWallConrol+0xb78>)
 8005490:	edd3 7a00 	vldr	s15, [r3]
 8005494:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005498:	4b39      	ldr	r3, [pc, #228]	; (8005580 <calWallConrol+0xb78>)
 800549a:	edd3 7a00 	vldr	s15, [r3]
 800549e:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 80054a2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[3] * NoWallDisplacementR45slant
 80054a6:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80054aa:	4b35      	ldr	r3, [pc, #212]	; (8005580 <calWallConrol+0xb78>)
 80054ac:	edd3 7a00 	vldr	s15, [r3]
 80054b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80054b4:	4b32      	ldr	r3, [pc, #200]	; (8005580 <calWallConrol+0xb78>)
 80054b6:	edd3 7a00 	vldr	s15, [r3]
 80054ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 80054be:	4b30      	ldr	r3, [pc, #192]	; (8005580 <calWallConrol+0xb78>)
 80054c0:	edd3 7a00 	vldr	s15, [r3]
 80054c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR = coefficientR[0]
 80054c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054cc:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		CenterSlantL = coefficientL[0]
 80054d0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
				+ coefficientL[1] * NoWallDisplacementL45slant
 80054d4:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80054d8:	4b18      	ldr	r3, [pc, #96]	; (800553c <calWallConrol+0xb34>)
 80054da:	edd3 7a00 	vldr	s15, [r3]
 80054de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054e2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 80054e6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80054ea:	4b14      	ldr	r3, [pc, #80]	; (800553c <calWallConrol+0xb34>)
 80054ec:	edd3 7a00 	vldr	s15, [r3]
 80054f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 80054f4:	4b11      	ldr	r3, [pc, #68]	; (800553c <calWallConrol+0xb34>)
 80054f6:	edd3 7a00 	vldr	s15, [r3]
 80054fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 80054fe:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[3] * NoWallDisplacementL45slant
 8005502:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005506:	4b0d      	ldr	r3, [pc, #52]	; (800553c <calWallConrol+0xb34>)
 8005508:	edd3 7a00 	vldr	s15, [r3]
 800550c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005510:	4b0a      	ldr	r3, [pc, #40]	; (800553c <calWallConrol+0xb34>)
 8005512:	edd3 7a00 	vldr	s15, [r3]
 8005516:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 800551a:	4b08      	ldr	r3, [pc, #32]	; (800553c <calWallConrol+0xb34>)
 800551c:	edd3 7a00 	vldr	s15, [r3]
 8005520:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL = coefficientL[0]
 8005524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005528:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		for (int j = 11; j >= 1; j--) {
 800552c:	230b      	movs	r3, #11
 800552e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005530:	e041      	b.n	80055b6 <calWallConrol+0xbae>
 8005532:	bf00      	nop
 8005534:	20000593 	.word	0x20000593
 8005538:	200002b8 	.word	0x200002b8
 800553c:	200005e0 	.word	0x200005e0
 8005540:	442d03ae 	.word	0x442d03ae
 8005544:	42439d9f 	.word	0x42439d9f
 8005548:	bff6b63b 	.word	0xbff6b63b
 800554c:	3e7390fc 	.word	0x3e7390fc
 8005550:	420c0000 	.word	0x420c0000
 8005554:	42700000 	.word	0x42700000
 8005558:	45e113ba 	.word	0x45e113ba
 800555c:	c3b10eee 	.word	0xc3b10eee
 8005560:	40c8f16a 	.word	0x40c8f16a
 8005564:	bd1d8a1b 	.word	0xbd1d8a1b
 8005568:	42c80000 	.word	0x42c80000
 800556c:	42f00000 	.word	0x42f00000
 8005570:	c6ad8946 	.word	0xc6ad8946
 8005574:	441be93e 	.word	0x441be93e
 8005578:	c0ba6847 	.word	0xc0ba6847
 800557c:	3c96bb99 	.word	0x3c96bb99
 8005580:	200005dc 	.word	0x200005dc
			g_CenterSlantR90[j] = g_CenterSlantR90[j - 1];
 8005584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005586:	3b01      	subs	r3, #1
 8005588:	4a9c      	ldr	r2, [pc, #624]	; (80057fc <calWallConrol+0xdf4>)
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	499a      	ldr	r1, [pc, #616]	; (80057fc <calWallConrol+0xdf4>)
 8005592:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	601a      	str	r2, [r3, #0]
			g_CenterSlantL90[j] = g_CenterSlantL90[j - 1];
 800559a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800559c:	3b01      	subs	r3, #1
 800559e:	4a98      	ldr	r2, [pc, #608]	; (8005800 <calWallConrol+0xdf8>)
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4996      	ldr	r1, [pc, #600]	; (8005800 <calWallConrol+0xdf8>)
 80055a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 80055b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055b2:	3b01      	subs	r3, #1
 80055b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80055b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	dce3      	bgt.n	8005584 <calWallConrol+0xb7c>
		}
		g_CenterSlantR90[0] = CenterSlantR;
 80055bc:	4a8f      	ldr	r2, [pc, #572]	; (80057fc <calWallConrol+0xdf4>)
 80055be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055c0:	6013      	str	r3, [r2, #0]
		g_CenterSlantL90[0] = CenterSlantL;
 80055c2:	4a8f      	ldr	r2, [pc, #572]	; (8005800 <calWallConrol+0xdf8>)
 80055c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055c6:	6013      	str	r3, [r2, #0]

		g_CenterSlantR90_diff = g_CenterSlantR90[0] - g_CenterSlantR90[11];
 80055c8:	4b8c      	ldr	r3, [pc, #560]	; (80057fc <calWallConrol+0xdf4>)
 80055ca:	ed93 7a00 	vldr	s14, [r3]
 80055ce:	4b8b      	ldr	r3, [pc, #556]	; (80057fc <calWallConrol+0xdf4>)
 80055d0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80055d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055d8:	4b8a      	ldr	r3, [pc, #552]	; (8005804 <calWallConrol+0xdfc>)
 80055da:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL90_diff = g_CenterSlantL90[0] - g_CenterSlantL90[11];
 80055de:	4b88      	ldr	r3, [pc, #544]	; (8005800 <calWallConrol+0xdf8>)
 80055e0:	ed93 7a00 	vldr	s14, [r3]
 80055e4:	4b86      	ldr	r3, [pc, #536]	; (8005800 <calWallConrol+0xdf8>)
 80055e6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80055ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055ee:	4b86      	ldr	r3, [pc, #536]	; (8005808 <calWallConrol+0xe00>)
 80055f0:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R
 80055f4:	4b85      	ldr	r3, [pc, #532]	; (800580c <calWallConrol+0xe04>)
 80055f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80055fa:	2bb4      	cmp	r3, #180	; 0xb4
 80055fc:	dd1a      	ble.n	8005634 <calWallConrol+0xc2c>
				&& fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 80055fe:	4b84      	ldr	r3, [pc, #528]	; (8005810 <calWallConrol+0xe08>)
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800560a:	4b7e      	ldr	r3, [pc, #504]	; (8005804 <calWallConrol+0xdfc>)
 800560c:	edd3 7a00 	vldr	s15, [r3]
 8005610:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005614:	eef0 7ae7 	vabs.f32	s15, s15
 8005618:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8005814 <calWallConrol+0xe0c>
 800561c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005624:	d506      	bpl.n	8005634 <calWallConrol+0xc2c>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8005626:	4b7c      	ldr	r3, [pc, #496]	; (8005818 <calWallConrol+0xe10>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	f043 0302 	orr.w	r3, r3, #2
 800562e:	b2da      	uxtb	r2, r3
 8005630:	4b79      	ldr	r3, [pc, #484]	; (8005818 <calWallConrol+0xe10>)
 8005632:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L
 8005634:	4b75      	ldr	r3, [pc, #468]	; (800580c <calWallConrol+0xe04>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2bb4      	cmp	r3, #180	; 0xb4
 800563a:	dd1a      	ble.n	8005672 <calWallConrol+0xc6a>
				&& fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 800563c:	4b74      	ldr	r3, [pc, #464]	; (8005810 <calWallConrol+0xe08>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	ee07 3a90 	vmov	s15, r3
 8005644:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005648:	4b6f      	ldr	r3, [pc, #444]	; (8005808 <calWallConrol+0xe00>)
 800564a:	edd3 7a00 	vldr	s15, [r3]
 800564e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005652:	eef0 7ae7 	vabs.f32	s15, s15
 8005656:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8005814 <calWallConrol+0xe0c>
 800565a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800565e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005662:	d506      	bpl.n	8005672 <calWallConrol+0xc6a>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus | (1 << 0);
 8005664:	4b6c      	ldr	r3, [pc, #432]	; (8005818 <calWallConrol+0xe10>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	f043 0301 	orr.w	r3, r3, #1
 800566c:	b2da      	uxtb	r2, r3
 800566e:	4b6a      	ldr	r3, [pc, #424]	; (8005818 <calWallConrol+0xe10>)
 8005670:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT_R
 8005672:	4b66      	ldr	r3, [pc, #408]	; (800580c <calWallConrol+0xe04>)
 8005674:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005678:	2bb3      	cmp	r3, #179	; 0xb3
 800567a:	dd13      	ble.n	80056a4 <calWallConrol+0xc9c>
				|| fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 800567c:	4b64      	ldr	r3, [pc, #400]	; (8005810 <calWallConrol+0xe08>)
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	ee07 3a90 	vmov	s15, r3
 8005684:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005688:	4b5e      	ldr	r3, [pc, #376]	; (8005804 <calWallConrol+0xdfc>)
 800568a:	edd3 7a00 	vldr	s15, [r3]
 800568e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005692:	eef0 7ae7 	vabs.f32	s15, s15
 8005696:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005814 <calWallConrol+0xe0c>
 800569a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800569e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a2:	dd06      	ble.n	80056b2 <calWallConrol+0xcaa>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 80056a4:	4b5c      	ldr	r3, [pc, #368]	; (8005818 <calWallConrol+0xe10>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	f023 0302 	bic.w	r3, r3, #2
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	4b5a      	ldr	r3, [pc, #360]	; (8005818 <calWallConrol+0xe10>)
 80056b0:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT_L
 80056b2:	4b56      	ldr	r3, [pc, #344]	; (800580c <calWallConrol+0xe04>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2bb3      	cmp	r3, #179	; 0xb3
 80056b8:	dd13      	ble.n	80056e2 <calWallConrol+0xcda>
				|| fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 80056ba:	4b55      	ldr	r3, [pc, #340]	; (8005810 <calWallConrol+0xe08>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	ee07 3a90 	vmov	s15, r3
 80056c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056c6:	4b50      	ldr	r3, [pc, #320]	; (8005808 <calWallConrol+0xe00>)
 80056c8:	edd3 7a00 	vldr	s15, [r3]
 80056cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056d0:	eef0 7ae7 	vabs.f32	s15, s15
 80056d4:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005814 <calWallConrol+0xe0c>
 80056d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e0:	dd06      	ble.n	80056f0 <calWallConrol+0xce8>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 80056e2:	4b4d      	ldr	r3, [pc, #308]	; (8005818 <calWallConrol+0xe10>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	f023 0301 	bic.w	r3, r3, #1
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	4b4a      	ldr	r3, [pc, #296]	; (8005818 <calWallConrol+0xe10>)
 80056ee:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus) {
 80056f0:	4b49      	ldr	r3, [pc, #292]	; (8005818 <calWallConrol+0xe10>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	f200 813d 	bhi.w	8005974 <calWallConrol+0xf6c>
 80056fa:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <calWallConrol+0xcf8>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	08005711 	.word	0x08005711
 8005704:	08005765 	.word	0x08005765
 8005708:	08005829 	.word	0x08005829
 800570c:	080058bf 	.word	0x080058bf
		case 0:			//両壁なし
			PID_wall = 0;
 8005710:	f04f 0300 	mov.w	r3, #0
 8005714:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			pl_yellow_LED_1(0);
 8005718:	2000      	movs	r0, #0
 800571a:	f001 faf3 	bl	8006d04 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 800571e:	2000      	movs	r0, #0
 8005720:	f001 fb26 	bl	8006d70 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005724:	4b39      	ldr	r3, [pc, #228]	; (800580c <calWallConrol+0xe04>)
 8005726:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005732:	4b3a      	ldr	r3, [pc, #232]	; (800581c <calWallConrol+0xe14>)
 8005734:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8005738:	4b34      	ldr	r3, [pc, #208]	; (800580c <calWallConrol+0xe04>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	ee07 3a90 	vmov	s15, r3
 8005740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005744:	4b36      	ldr	r3, [pc, #216]	; (8005820 <calWallConrol+0xe18>)
 8005746:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = 0;
 800574a:	4b36      	ldr	r3, [pc, #216]	; (8005824 <calWallConrol+0xe1c>)
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
			wall_slant90.delta_error = 0;
 8005752:	4b34      	ldr	r3, [pc, #208]	; (8005824 <calWallConrol+0xe1c>)
 8005754:	f04f 0200 	mov.w	r2, #0
 8005758:	609a      	str	r2, [r3, #8]
			wall_slant90.old_error = 0;
 800575a:	4b32      	ldr	r3, [pc, #200]	; (8005824 <calWallConrol+0xe1c>)
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	605a      	str	r2, [r3, #4]
			break;
 8005762:	e107      	b.n	8005974 <calWallConrol+0xf6c>
		case 1:			//左壁のみ
			pl_yellow_LED_1(0);
 8005764:	2000      	movs	r0, #0
 8005766:	f001 facd 	bl	8006d04 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 800576a:	2001      	movs	r0, #1
 800576c:	f001 fb00 	bl	8006d70 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005770:	4b26      	ldr	r3, [pc, #152]	; (800580c <calWallConrol+0xe04>)
 8005772:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800577e:	4b27      	ldr	r3, [pc, #156]	; (800581c <calWallConrol+0xe14>)
 8005780:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = CenterSlantL;
 8005784:	4a26      	ldr	r2, [pc, #152]	; (8005820 <calWallConrol+0xe18>)
 8005786:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005788:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 800578a:	4b20      	ldr	r3, [pc, #128]	; (800580c <calWallConrol+0xe04>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	ee07 3a90 	vmov	s15, r3
 8005792:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005796:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800579a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800579e:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0]));
 80057a2:	4b1a      	ldr	r3, [pc, #104]	; (800580c <calWallConrol+0xe04>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	ee07 3a90 	vmov	s15, r3
 80057aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 80057b2:	4b1c      	ldr	r3, [pc, #112]	; (8005824 <calWallConrol+0xe1c>)
 80057b4:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 80057b8:	4b1a      	ldr	r3, [pc, #104]	; (8005824 <calWallConrol+0xe1c>)
 80057ba:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 80057be:	4b19      	ldr	r3, [pc, #100]	; (8005824 <calWallConrol+0xe1c>)
 80057c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80057c4:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 80057c8:	4b16      	ldr	r3, [pc, #88]	; (8005824 <calWallConrol+0xe1c>)
 80057ca:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 80057ce:	4b15      	ldr	r3, [pc, #84]	; (8005824 <calWallConrol+0xe1c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a14      	ldr	r2, [pc, #80]	; (8005824 <calWallConrol+0xe1c>)
 80057d4:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80057d6:	4b13      	ldr	r3, [pc, #76]	; (8005824 <calWallConrol+0xe1c>)
 80057d8:	ed93 7a00 	vldr	s14, [r3]
 80057dc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80057e0:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 80057e4:	4b0f      	ldr	r3, [pc, #60]	; (8005824 <calWallConrol+0xe1c>)
 80057e6:	edd3 6a02 	vldr	s13, [r3, #8]
 80057ea:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80057ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80057f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057f6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80057fa:	e0bb      	b.n	8005974 <calWallConrol+0xf6c>
 80057fc:	20000608 	.word	0x20000608
 8005800:	20000638 	.word	0x20000638
 8005804:	200006c8 	.word	0x200006c8
 8005808:	200006cc 	.word	0x200006cc
 800580c:	200002b8 	.word	0x200002b8
 8005810:	20000448 	.word	0x20000448
 8005814:	42a00000 	.word	0x42a00000
 8005818:	20000593 	.word	0x20000593
 800581c:	200005ac 	.word	0x200005ac
 8005820:	200005b0 	.word	0x200005b0
 8005824:	20000578 	.word	0x20000578
		case 2:			//右壁のみ
			pl_yellow_LED_1(1);
 8005828:	2001      	movs	r0, #1
 800582a:	f001 fa6b 	bl	8006d04 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 800582e:	2000      	movs	r0, #0
 8005830:	f001 fa9e 	bl	8006d70 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8005834:	4aa4      	ldr	r2, [pc, #656]	; (8005ac8 <calWallConrol+0x10c0>)
 8005836:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005838:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 800583a:	4ba4      	ldr	r3, [pc, #656]	; (8005acc <calWallConrol+0x10c4>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005846:	4ba2      	ldr	r3, [pc, #648]	; (8005ad0 <calWallConrol+0x10c8>)
 8005848:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 800584c:	4b9f      	ldr	r3, [pc, #636]	; (8005acc <calWallConrol+0x10c4>)
 800584e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800585a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800585e:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR) / (float) (g_sensor[SENSOR_RIGHT][0]));
 8005862:	4b9a      	ldr	r3, [pc, #616]	; (8005acc <calWallConrol+0x10c4>)
 8005864:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005868:	ee07 3a90 	vmov	s15, r3
 800586c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005870:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005874:	4b97      	ldr	r3, [pc, #604]	; (8005ad4 <calWallConrol+0x10cc>)
 8005876:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 800587a:	4b96      	ldr	r3, [pc, #600]	; (8005ad4 <calWallConrol+0x10cc>)
 800587c:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005880:	4b94      	ldr	r3, [pc, #592]	; (8005ad4 <calWallConrol+0x10cc>)
 8005882:	edd3 7a01 	vldr	s15, [r3, #4]
 8005886:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 800588a:	4b92      	ldr	r3, [pc, #584]	; (8005ad4 <calWallConrol+0x10cc>)
 800588c:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005890:	4b90      	ldr	r3, [pc, #576]	; (8005ad4 <calWallConrol+0x10cc>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a8f      	ldr	r2, [pc, #572]	; (8005ad4 <calWallConrol+0x10cc>)
 8005896:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005898:	4b8e      	ldr	r3, [pc, #568]	; (8005ad4 <calWallConrol+0x10cc>)
 800589a:	ed93 7a00 	vldr	s14, [r3]
 800589e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80058a2:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 80058a6:	4b8b      	ldr	r3, [pc, #556]	; (8005ad4 <calWallConrol+0x10cc>)
 80058a8:	edd3 6a02 	vldr	s13, [r3, #8]
 80058ac:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80058b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80058b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058b8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80058bc:	e05a      	b.n	8005974 <calWallConrol+0xf6c>
		case 3:			//両壁あり
			pl_yellow_LED_1(1);
 80058be:	2001      	movs	r0, #1
 80058c0:	f001 fa20 	bl	8006d04 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 80058c4:	2001      	movs	r0, #1
 80058c6:	f001 fa53 	bl	8006d70 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 80058ca:	4a7f      	ldr	r2, [pc, #508]	; (8005ac8 <calWallConrol+0x10c0>)
 80058cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ce:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = CenterSlantL;
 80058d0:	4a7f      	ldr	r2, [pc, #508]	; (8005ad0 <calWallConrol+0x10c8>)
 80058d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058d4:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 80058d6:	4b7d      	ldr	r3, [pc, #500]	; (8005acc <calWallConrol+0x10c4>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80058e2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80058e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058ea:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0])
 80058ee:	4b77      	ldr	r3, [pc, #476]	; (8005acc <calWallConrol+0x10c4>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	ee07 3a90 	vmov	s15, r3
 80058f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 80058fe:	4b73      	ldr	r3, [pc, #460]	; (8005acc <calWallConrol+0x10c4>)
 8005900:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005904:	ee07 3a90 	vmov	s15, r3
 8005908:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800590c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005910:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_RIGHT][0]));
 8005914:	4b6d      	ldr	r3, [pc, #436]	; (8005acc <calWallConrol+0x10c4>)
 8005916:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005922:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005926:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 800592a:	4b6a      	ldr	r3, [pc, #424]	; (8005ad4 <calWallConrol+0x10cc>)
 800592c:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005930:	4b68      	ldr	r3, [pc, #416]	; (8005ad4 <calWallConrol+0x10cc>)
 8005932:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005936:	4b67      	ldr	r3, [pc, #412]	; (8005ad4 <calWallConrol+0x10cc>)
 8005938:	edd3 7a01 	vldr	s15, [r3, #4]
 800593c:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005940:	4b64      	ldr	r3, [pc, #400]	; (8005ad4 <calWallConrol+0x10cc>)
 8005942:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005946:	4b63      	ldr	r3, [pc, #396]	; (8005ad4 <calWallConrol+0x10cc>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a62      	ldr	r2, [pc, #392]	; (8005ad4 <calWallConrol+0x10cc>)
 800594c:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 800594e:	4b61      	ldr	r3, [pc, #388]	; (8005ad4 <calWallConrol+0x10cc>)
 8005950:	ed93 7a00 	vldr	s14, [r3]
 8005954:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005958:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 800595c:	4b5d      	ldr	r3, [pc, #372]	; (8005ad4 <calWallConrol+0x10cc>)
 800595e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005962:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005966:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 800596a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800596e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005972:	bf00      	nop
// 斜め45度
		float CenterSlantR45, CenterSlantL45;
		float coefficientR45[4];
		float coefficientL45[4];
		float sensor_gain_slant45_p, sensor_gain_slant45_d;
		if (straight.velocity > 1000) {
 8005974:	4b58      	ldr	r3, [pc, #352]	; (8005ad8 <calWallConrol+0x10d0>)
 8005976:	edd3 7a00 	vldr	s15, [r3]
 800597a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005adc <calWallConrol+0x10d4>
 800597e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005986:	dd04      	ble.n	8005992 <calWallConrol+0xf8a>
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * 1000;
 8005988:	4b55      	ldr	r3, [pc, #340]	; (8005ae0 <calWallConrol+0x10d8>)
 800598a:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * 1000;
 800598c:	4b55      	ldr	r3, [pc, #340]	; (8005ae4 <calWallConrol+0x10dc>)
 800598e:	673b      	str	r3, [r7, #112]	; 0x70
 8005990:	e023      	b.n	80059da <calWallConrol+0xfd2>
		} else {
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * straight.velocity;
 8005992:	4b51      	ldr	r3, [pc, #324]	; (8005ad8 <calWallConrol+0x10d0>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4618      	mov	r0, r3
 8005998:	f7fa fdfe 	bl	8000598 <__aeabi_f2d>
 800599c:	a346      	add	r3, pc, #280	; (adr r3, 8005ab8 <calWallConrol+0x10b0>)
 800599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a2:	f7fa fe51 	bl	8000648 <__aeabi_dmul>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	4610      	mov	r0, r2
 80059ac:	4619      	mov	r1, r3
 80059ae:	f7fb f923 	bl	8000bf8 <__aeabi_d2f>
 80059b2:	4603      	mov	r3, r0
 80059b4:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * straight.velocity;
 80059b6:	4b48      	ldr	r3, [pc, #288]	; (8005ad8 <calWallConrol+0x10d0>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fa fdec 	bl	8000598 <__aeabi_f2d>
 80059c0:	a33f      	add	r3, pc, #252	; (adr r3, 8005ac0 <calWallConrol+0x10b8>)
 80059c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c6:	f7fa fe3f 	bl	8000648 <__aeabi_dmul>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4610      	mov	r0, r2
 80059d0:	4619      	mov	r1, r3
 80059d2:	f7fb f911 	bl	8000bf8 <__aeabi_d2f>
 80059d6:	4603      	mov	r3, r0
 80059d8:	673b      	str	r3, [r7, #112]	; 0x70
		}

		if (NoWallDisplacementR45slant > AREAMIN45_R0
 80059da:	4b43      	ldr	r3, [pc, #268]	; (8005ae8 <calWallConrol+0x10e0>)
 80059dc:	edd3 7a00 	vldr	s15, [r3]
 80059e0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80059e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ec:	dd12      	ble.n	8005a14 <calWallConrol+0x100c>
				&& NoWallDisplacementR45slant <= AREAMAX45_R0) {
 80059ee:	4b3e      	ldr	r3, [pc, #248]	; (8005ae8 <calWallConrol+0x10e0>)
 80059f0:	edd3 7a00 	vldr	s15, [r3]
 80059f4:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8005aec <calWallConrol+0x10e4>
 80059f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a00:	d808      	bhi.n	8005a14 <calWallConrol+0x100c>
			coefficientR45[0] = COEFFICIENT45_R0_0;
 8005a02:	4b3b      	ldr	r3, [pc, #236]	; (8005af0 <calWallConrol+0x10e8>)
 8005a04:	62bb      	str	r3, [r7, #40]	; 0x28
			coefficientR45[1] = COEFFICIENT45_R0_1;
 8005a06:	4b3b      	ldr	r3, [pc, #236]	; (8005af4 <calWallConrol+0x10ec>)
 8005a08:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = COEFFICIENT45_R0_2;
 8005a0a:	4b3b      	ldr	r3, [pc, #236]	; (8005af8 <calWallConrol+0x10f0>)
 8005a0c:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = COEFFICIENT45_R0_3;
 8005a0e:	4b3b      	ldr	r3, [pc, #236]	; (8005afc <calWallConrol+0x10f4>)
 8005a10:	637b      	str	r3, [r7, #52]	; 0x34
 8005a12:	e025      	b.n	8005a60 <calWallConrol+0x1058>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005a14:	4b2d      	ldr	r3, [pc, #180]	; (8005acc <calWallConrol+0x10c4>)
 8005a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a1a:	2bdc      	cmp	r3, #220	; 0xdc
 8005a1c:	dd07      	ble.n	8005a2e <calWallConrol+0x1026>
					> CONTROLWALL_THRESHOLD_SLANT45_R) {
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005a1e:	4b38      	ldr	r3, [pc, #224]	; (8005b00 <calWallConrol+0x10f8>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	f043 0302 	orr.w	r3, r3, #2
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	4b35      	ldr	r3, [pc, #212]	; (8005b00 <calWallConrol+0x10f8>)
 8005a2a:	701a      	strb	r2, [r3, #0]
 8005a2c:	e006      	b.n	8005a3c <calWallConrol+0x1034>
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005a2e:	4b34      	ldr	r3, [pc, #208]	; (8005b00 <calWallConrol+0x10f8>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	f023 0302 	bic.w	r3, r3, #2
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	4b31      	ldr	r3, [pc, #196]	; (8005b00 <calWallConrol+0x10f8>)
 8005a3a:	701a      	strb	r2, [r3, #0]
			}
			coefficientR45[0] = g_sensor[SENSOR_FRONT_RIGHT][0];
 8005a3c:	4b23      	ldr	r3, [pc, #140]	; (8005acc <calWallConrol+0x10c4>)
 8005a3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a42:	ee07 3a90 	vmov	s15, r3
 8005a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a4a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			coefficientR45[1] = 0;
 8005a4e:	f04f 0300 	mov.w	r3, #0
 8005a52:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = 0;
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = 0;
 8005a5a:	f04f 0300 	mov.w	r3, #0
 8005a5e:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (NoWallDisplacementL45slant > AREAMIN45_L0
 8005a60:	4b28      	ldr	r3, [pc, #160]	; (8005b04 <calWallConrol+0x10fc>)
 8005a62:	edd3 7a00 	vldr	s15, [r3]
 8005a66:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005a6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a72:	dd12      	ble.n	8005a9a <calWallConrol+0x1092>
				&& NoWallDisplacementL45slant <= AREAMAX45_L0) {
 8005a74:	4b23      	ldr	r3, [pc, #140]	; (8005b04 <calWallConrol+0x10fc>)
 8005a76:	edd3 7a00 	vldr	s15, [r3]
 8005a7a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005aec <calWallConrol+0x10e4>
 8005a7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a86:	d808      	bhi.n	8005a9a <calWallConrol+0x1092>
			coefficientL45[0] = COEFFICIENT45_L0_0;
 8005a88:	4b1f      	ldr	r3, [pc, #124]	; (8005b08 <calWallConrol+0x1100>)
 8005a8a:	61bb      	str	r3, [r7, #24]
			coefficientL45[1] = COEFFICIENT45_L0_1;
 8005a8c:	4b1f      	ldr	r3, [pc, #124]	; (8005b0c <calWallConrol+0x1104>)
 8005a8e:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = COEFFICIENT45_L0_2;
 8005a90:	4b1f      	ldr	r3, [pc, #124]	; (8005b10 <calWallConrol+0x1108>)
 8005a92:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = COEFFICIENT45_L0_3;
 8005a94:	4b1f      	ldr	r3, [pc, #124]	; (8005b14 <calWallConrol+0x110c>)
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24
 8005a98:	e056      	b.n	8005b48 <calWallConrol+0x1140>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L) {
 8005a9a:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <calWallConrol+0x10c4>)
 8005a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a9e:	2bdc      	cmp	r3, #220	; 0xdc
 8005aa0:	dd3a      	ble.n	8005b18 <calWallConrol+0x1110>
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005aa2:	4b17      	ldr	r3, [pc, #92]	; (8005b00 <calWallConrol+0x10f8>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	f043 0301 	orr.w	r3, r3, #1
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	4b14      	ldr	r3, [pc, #80]	; (8005b00 <calWallConrol+0x10f8>)
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	e039      	b.n	8005b26 <calWallConrol+0x111e>
 8005ab2:	bf00      	nop
 8005ab4:	f3af 8000 	nop.w
 8005ab8:	9999999a 	.word	0x9999999a
 8005abc:	3fd99999 	.word	0x3fd99999
 8005ac0:	70a3d70a 	.word	0x70a3d70a
 8005ac4:	bfa70a3d 	.word	0xbfa70a3d
 8005ac8:	200005ac 	.word	0x200005ac
 8005acc:	200002b8 	.word	0x200002b8
 8005ad0:	200005b0 	.word	0x200005b0
 8005ad4:	20000578 	.word	0x20000578
 8005ad8:	200004d8 	.word	0x200004d8
 8005adc:	447a0000 	.word	0x447a0000
 8005ae0:	43c80000 	.word	0x43c80000
 8005ae4:	c2340000 	.word	0xc2340000
 8005ae8:	200005dc 	.word	0x200005dc
 8005aec:	42a00000 	.word	0x42a00000
 8005af0:	43ed6bde 	.word	0x43ed6bde
 8005af4:	c13ba67f 	.word	0xc13ba67f
 8005af8:	3e6b0689 	.word	0x3e6b0689
 8005afc:	ba5a1a93 	.word	0xba5a1a93
 8005b00:	20000594 	.word	0x20000594
 8005b04:	200005e0 	.word	0x200005e0
 8005b08:	4418de03 	.word	0x4418de03
 8005b0c:	c19d4f72 	.word	0xc19d4f72
 8005b10:	3ebdd743 	.word	0x3ebdd743
 8005b14:	bad03f6a 	.word	0xbad03f6a
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005b18:	4bb5      	ldr	r3, [pc, #724]	; (8005df0 <calWallConrol+0x13e8>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	f023 0301 	bic.w	r3, r3, #1
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	4bb3      	ldr	r3, [pc, #716]	; (8005df0 <calWallConrol+0x13e8>)
 8005b24:	701a      	strb	r2, [r3, #0]
			}
			coefficientL45[0] = g_sensor[SENSOR_FRONT_LEFT][0];
 8005b26:	4bb3      	ldr	r3, [pc, #716]	; (8005df4 <calWallConrol+0x13ec>)
 8005b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b2a:	ee07 3a90 	vmov	s15, r3
 8005b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b32:	edc7 7a06 	vstr	s15, [r7, #24]
			coefficientL45[1] = 0;
 8005b36:	f04f 0300 	mov.w	r3, #0
 8005b3a:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = 0;
 8005b3c:	f04f 0300 	mov.w	r3, #0
 8005b40:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = 0;
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	627b      	str	r3, [r7, #36]	; 0x24
		}
		CenterSlantR45 = coefficientR45[0]
 8005b48:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
				+ coefficientR45[1] * NoWallDisplacementR45slant
 8005b4c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8005b50:	4ba9      	ldr	r3, [pc, #676]	; (8005df8 <calWallConrol+0x13f0>)
 8005b52:	edd3 7a00 	vldr	s15, [r3]
 8005b56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b5a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005b5e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005b62:	4ba5      	ldr	r3, [pc, #660]	; (8005df8 <calWallConrol+0x13f0>)
 8005b64:	edd3 7a00 	vldr	s15, [r3]
 8005b68:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005b6c:	4ba2      	ldr	r3, [pc, #648]	; (8005df8 <calWallConrol+0x13f0>)
 8005b6e:	edd3 7a00 	vldr	s15, [r3]
 8005b72:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005b76:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[3] * NoWallDisplacementR45slant
 8005b7a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005b7e:	4b9e      	ldr	r3, [pc, #632]	; (8005df8 <calWallConrol+0x13f0>)
 8005b80:	edd3 7a00 	vldr	s15, [r3]
 8005b84:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005b88:	4b9b      	ldr	r3, [pc, #620]	; (8005df8 <calWallConrol+0x13f0>)
 8005b8a:	edd3 7a00 	vldr	s15, [r3]
 8005b8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 8005b92:	4b99      	ldr	r3, [pc, #612]	; (8005df8 <calWallConrol+0x13f0>)
 8005b94:	edd3 7a00 	vldr	s15, [r3]
 8005b98:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR45 = coefficientR45[0]
 8005b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ba0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		CenterSlantL45 = coefficientL45[0]
 8005ba4:	ed97 7a06 	vldr	s14, [r7, #24]
				+ coefficientL45[1] * NoWallDisplacementL45slant
 8005ba8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bac:	4b93      	ldr	r3, [pc, #588]	; (8005dfc <calWallConrol+0x13f4>)
 8005bae:	edd3 7a00 	vldr	s15, [r3]
 8005bb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bb6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8005bba:	edd7 6a08 	vldr	s13, [r7, #32]
 8005bbe:	4b8f      	ldr	r3, [pc, #572]	; (8005dfc <calWallConrol+0x13f4>)
 8005bc0:	edd3 7a00 	vldr	s15, [r3]
 8005bc4:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005bc8:	4b8c      	ldr	r3, [pc, #560]	; (8005dfc <calWallConrol+0x13f4>)
 8005bca:	edd3 7a00 	vldr	s15, [r3]
 8005bce:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8005bd2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[3] * NoWallDisplacementL45slant
 8005bd6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005bda:	4b88      	ldr	r3, [pc, #544]	; (8005dfc <calWallConrol+0x13f4>)
 8005bdc:	edd3 7a00 	vldr	s15, [r3]
 8005be0:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005be4:	4b85      	ldr	r3, [pc, #532]	; (8005dfc <calWallConrol+0x13f4>)
 8005be6:	edd3 7a00 	vldr	s15, [r3]
 8005bea:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8005bee:	4b83      	ldr	r3, [pc, #524]	; (8005dfc <calWallConrol+0x13f4>)
 8005bf0:	edd3 7a00 	vldr	s15, [r3]
 8005bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL45 = coefficientL45[0]
 8005bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bfc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		for (int j = 11; j >= 1; j--) {
 8005c00:	230b      	movs	r3, #11
 8005c02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c04:	e018      	b.n	8005c38 <calWallConrol+0x1230>
			g_CenterSlantR45[j] = g_CenterSlantR45[j - 1];
 8005c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	4a7d      	ldr	r2, [pc, #500]	; (8005e00 <calWallConrol+0x13f8>)
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	497b      	ldr	r1, [pc, #492]	; (8005e00 <calWallConrol+0x13f8>)
 8005c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	601a      	str	r2, [r3, #0]
			g_CenterSlantL45[j] = g_CenterSlantL45[j - 1];
 8005c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	4a78      	ldr	r2, [pc, #480]	; (8005e04 <calWallConrol+0x13fc>)
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	4976      	ldr	r1, [pc, #472]	; (8005e04 <calWallConrol+0x13fc>)
 8005c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	440b      	add	r3, r1
 8005c30:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8005c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c34:	3b01      	subs	r3, #1
 8005c36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	dce3      	bgt.n	8005c06 <calWallConrol+0x11fe>
		}
		g_CenterSlantR45[0] = CenterSlantR45;
 8005c3e:	4a70      	ldr	r2, [pc, #448]	; (8005e00 <calWallConrol+0x13f8>)
 8005c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c42:	6013      	str	r3, [r2, #0]
		g_CenterSlantL45[0] = CenterSlantL45;
 8005c44:	4a6f      	ldr	r2, [pc, #444]	; (8005e04 <calWallConrol+0x13fc>)
 8005c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c48:	6013      	str	r3, [r2, #0]

		g_CenterSlantR45_diff = g_CenterSlantR45[0] - g_CenterSlantR45[11];
 8005c4a:	4b6d      	ldr	r3, [pc, #436]	; (8005e00 <calWallConrol+0x13f8>)
 8005c4c:	ed93 7a00 	vldr	s14, [r3]
 8005c50:	4b6b      	ldr	r3, [pc, #428]	; (8005e00 <calWallConrol+0x13f8>)
 8005c52:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c5a:	4b6b      	ldr	r3, [pc, #428]	; (8005e08 <calWallConrol+0x1400>)
 8005c5c:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL45_diff = g_CenterSlantL45[0] - g_CenterSlantL45[11];
 8005c60:	4b68      	ldr	r3, [pc, #416]	; (8005e04 <calWallConrol+0x13fc>)
 8005c62:	ed93 7a00 	vldr	s14, [r3]
 8005c66:	4b67      	ldr	r3, [pc, #412]	; (8005e04 <calWallConrol+0x13fc>)
 8005c68:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c70:	4b66      	ldr	r3, [pc, #408]	; (8005e0c <calWallConrol+0x1404>)
 8005c72:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT45_R
 8005c76:	4b5f      	ldr	r3, [pc, #380]	; (8005df4 <calWallConrol+0x13ec>)
 8005c78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c7c:	2bdc      	cmp	r3, #220	; 0xdc
 8005c7e:	dd1a      	ble.n	8005cb6 <calWallConrol+0x12ae>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8005c80:	4b63      	ldr	r3, [pc, #396]	; (8005e10 <calWallConrol+0x1408>)
 8005c82:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8005c84:	ee07 3a90 	vmov	s15, r3
 8005c88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c8c:	4b5e      	ldr	r3, [pc, #376]	; (8005e08 <calWallConrol+0x1400>)
 8005c8e:	edd3 7a00 	vldr	s15, [r3]
 8005c92:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8005c96:	eef0 7ae7 	vabs.f32	s15, s15
 8005c9a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8005e14 <calWallConrol+0x140c>
 8005c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca6:	d506      	bpl.n	8005cb6 <calWallConrol+0x12ae>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005ca8:	4b51      	ldr	r3, [pc, #324]	; (8005df0 <calWallConrol+0x13e8>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	f043 0302 	orr.w	r3, r3, #2
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	4b4f      	ldr	r3, [pc, #316]	; (8005df0 <calWallConrol+0x13e8>)
 8005cb4:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L
 8005cb6:	4b4f      	ldr	r3, [pc, #316]	; (8005df4 <calWallConrol+0x13ec>)
 8005cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cba:	2bdc      	cmp	r3, #220	; 0xdc
 8005cbc:	dd1a      	ble.n	8005cf4 <calWallConrol+0x12ec>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8005cbe:	4b54      	ldr	r3, [pc, #336]	; (8005e10 <calWallConrol+0x1408>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cca:	4b50      	ldr	r3, [pc, #320]	; (8005e0c <calWallConrol+0x1404>)
 8005ccc:	edd3 7a00 	vldr	s15, [r3]
 8005cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8005cd4:	eef0 7ae7 	vabs.f32	s15, s15
 8005cd8:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8005e14 <calWallConrol+0x140c>
 8005cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce4:	d506      	bpl.n	8005cf4 <calWallConrol+0x12ec>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005ce6:	4b42      	ldr	r3, [pc, #264]	; (8005df0 <calWallConrol+0x13e8>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f043 0301 	orr.w	r3, r3, #1
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	4b3f      	ldr	r3, [pc, #252]	; (8005df0 <calWallConrol+0x13e8>)
 8005cf2:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT45_R
 8005cf4:	4b3f      	ldr	r3, [pc, #252]	; (8005df4 <calWallConrol+0x13ec>)
 8005cf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005cfa:	2bdb      	cmp	r3, #219	; 0xdb
 8005cfc:	dd13      	ble.n	8005d26 <calWallConrol+0x131e>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8005cfe:	4b44      	ldr	r3, [pc, #272]	; (8005e10 <calWallConrol+0x1408>)
 8005d00:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d0a:	4b3f      	ldr	r3, [pc, #252]	; (8005e08 <calWallConrol+0x1400>)
 8005d0c:	edd3 7a00 	vldr	s15, [r3]
 8005d10:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8005d14:	eef0 7ae7 	vabs.f32	s15, s15
 8005d18:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005e14 <calWallConrol+0x140c>
 8005d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d24:	dd06      	ble.n	8005d34 <calWallConrol+0x132c>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005d26:	4b32      	ldr	r3, [pc, #200]	; (8005df0 <calWallConrol+0x13e8>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	f023 0302 	bic.w	r3, r3, #2
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	4b2f      	ldr	r3, [pc, #188]	; (8005df0 <calWallConrol+0x13e8>)
 8005d32:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT45_L
 8005d34:	4b2f      	ldr	r3, [pc, #188]	; (8005df4 <calWallConrol+0x13ec>)
 8005d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d38:	2bdb      	cmp	r3, #219	; 0xdb
 8005d3a:	dd13      	ble.n	8005d64 <calWallConrol+0x135c>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8005d3c:	4b34      	ldr	r3, [pc, #208]	; (8005e10 <calWallConrol+0x1408>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8005d40:	ee07 3a90 	vmov	s15, r3
 8005d44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d48:	4b30      	ldr	r3, [pc, #192]	; (8005e0c <calWallConrol+0x1404>)
 8005d4a:	edd3 7a00 	vldr	s15, [r3]
 8005d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8005d52:	eef0 7ae7 	vabs.f32	s15, s15
 8005d56:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005e14 <calWallConrol+0x140c>
 8005d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d62:	dd06      	ble.n	8005d72 <calWallConrol+0x136a>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005d64:	4b22      	ldr	r3, [pc, #136]	; (8005df0 <calWallConrol+0x13e8>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	f023 0301 	bic.w	r3, r3, #1
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	4b20      	ldr	r3, [pc, #128]	; (8005df0 <calWallConrol+0x13e8>)
 8005d70:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus45) {
 8005d72:	4b1f      	ldr	r3, [pc, #124]	; (8005df0 <calWallConrol+0x13e8>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	f200 8155 	bhi.w	8006026 <calWallConrol+0x161e>
 8005d7c:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <calWallConrol+0x137c>)
 8005d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d82:	bf00      	nop
 8005d84:	08005d95 	.word	0x08005d95
 8005d88:	08005e29 	.word	0x08005e29
 8005d8c:	08005ec9 	.word	0x08005ec9
 8005d90:	08005f67 	.word	0x08005f67
		case 0:			//両壁なし
			PID_wall += 0;
 8005d94:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005d98:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005e18 <calWallConrol+0x1410>
 8005d9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005da0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_3(0);
 8005da4:	2000      	movs	r0, #0
 8005da6:	f000 ffbf 	bl	8006d28 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8005daa:	2000      	movs	r0, #0
 8005dac:	f000 ffce 	bl	8006d4c <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8005db0:	4b10      	ldr	r3, [pc, #64]	; (8005df4 <calWallConrol+0x13ec>)
 8005db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005db6:	ee07 3a90 	vmov	s15, r3
 8005dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dbe:	4b17      	ldr	r3, [pc, #92]	; (8005e1c <calWallConrol+0x1414>)
 8005dc0:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8005dc4:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <calWallConrol+0x13ec>)
 8005dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc8:	ee07 3a90 	vmov	s15, r3
 8005dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dd0:	4b13      	ldr	r3, [pc, #76]	; (8005e20 <calWallConrol+0x1418>)
 8005dd2:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = 0;
 8005dd6:	4b13      	ldr	r3, [pc, #76]	; (8005e24 <calWallConrol+0x141c>)
 8005dd8:	f04f 0200 	mov.w	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
			wall_slant45.delta_error = 0;
 8005dde:	4b11      	ldr	r3, [pc, #68]	; (8005e24 <calWallConrol+0x141c>)
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	609a      	str	r2, [r3, #8]
			wall_slant45.old_error = 0;
 8005de6:	4b0f      	ldr	r3, [pc, #60]	; (8005e24 <calWallConrol+0x141c>)
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	605a      	str	r2, [r3, #4]
			break;
 8005dee:	e11a      	b.n	8006026 <calWallConrol+0x161e>
 8005df0:	20000594 	.word	0x20000594
 8005df4:	200002b8 	.word	0x200002b8
 8005df8:	200005dc 	.word	0x200005dc
 8005dfc:	200005e0 	.word	0x200005e0
 8005e00:	20000668 	.word	0x20000668
 8005e04:	20000698 	.word	0x20000698
 8005e08:	200006d0 	.word	0x200006d0
 8005e0c:	200006d4 	.word	0x200006d4
 8005e10:	20000448 	.word	0x20000448
 8005e14:	42a00000 	.word	0x42a00000
 8005e18:	00000000 	.word	0x00000000
 8005e1c:	200005a4 	.word	0x200005a4
 8005e20:	200005a8 	.word	0x200005a8
 8005e24:	20000584 	.word	0x20000584
		case 1:			//左壁のみ
			pl_yellow_LED_3(0);
 8005e28:	2000      	movs	r0, #0
 8005e2a:	f000 ff7d 	bl	8006d28 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8005e2e:	2001      	movs	r0, #1
 8005e30:	f000 ff8c 	bl	8006d4c <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8005e34:	4b87      	ldr	r3, [pc, #540]	; (8006054 <calWallConrol+0x164c>)
 8005e36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e42:	4b85      	ldr	r3, [pc, #532]	; (8006058 <calWallConrol+0x1650>)
 8005e44:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = CenterSlantL45;
 8005e48:	4a84      	ldr	r2, [pc, #528]	; (800605c <calWallConrol+0x1654>)
 8005e4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e4c:	6013      	str	r3, [r2, #0]
			wall_slant45.error =
					(-(float) (g_sensor[SENSOR_FRONT_LEFT][0] - CenterSlantL45)
 8005e4e:	4b81      	ldr	r3, [pc, #516]	; (8006054 <calWallConrol+0x164c>)
 8005e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e5a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e62:	eef1 6a67 	vneg.f32	s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_LEFT][0]));
 8005e66:	4b7b      	ldr	r3, [pc, #492]	; (8006054 <calWallConrol+0x164c>)
 8005e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error =
 8005e76:	4b7a      	ldr	r3, [pc, #488]	; (8006060 <calWallConrol+0x1658>)
 8005e78:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8005e7c:	4b78      	ldr	r3, [pc, #480]	; (8006060 <calWallConrol+0x1658>)
 8005e7e:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8005e82:	4b77      	ldr	r3, [pc, #476]	; (8006060 <calWallConrol+0x1658>)
 8005e84:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e88:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8005e8c:	4b74      	ldr	r3, [pc, #464]	; (8006060 <calWallConrol+0x1658>)
 8005e8e:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8005e92:	4b73      	ldr	r3, [pc, #460]	; (8006060 <calWallConrol+0x1658>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a72      	ldr	r2, [pc, #456]	; (8006060 <calWallConrol+0x1658>)
 8005e98:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005e9a:	4b71      	ldr	r3, [pc, #452]	; (8006060 <calWallConrol+0x1658>)
 8005e9c:	ed93 7a00 	vldr	s14, [r3]
 8005ea0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8005ea8:	4b6d      	ldr	r3, [pc, #436]	; (8006060 <calWallConrol+0x1658>)
 8005eaa:	edd3 6a02 	vldr	s13, [r3, #8]
 8005eae:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005eb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005eba:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ec2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005ec6:	e0ae      	b.n	8006026 <calWallConrol+0x161e>
		case 2:			//右壁のみ
			pl_yellow_LED_3(1);
 8005ec8:	2001      	movs	r0, #1
 8005eca:	f000 ff2d 	bl	8006d28 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8005ece:	2000      	movs	r0, #0
 8005ed0:	f000 ff3c 	bl	8006d4c <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8005ed4:	4a60      	ldr	r2, [pc, #384]	; (8006058 <calWallConrol+0x1650>)
 8005ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ed8:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8005eda:	4b5e      	ldr	r3, [pc, #376]	; (8006054 <calWallConrol+0x164c>)
 8005edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ee6:	4b5d      	ldr	r3, [pc, #372]	; (800605c <calWallConrol+0x1654>)
 8005ee8:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005eec:	4b59      	ldr	r3, [pc, #356]	; (8006054 <calWallConrol+0x164c>)
 8005eee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005efa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005efe:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR45)
					/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 8005f02:	4b54      	ldr	r3, [pc, #336]	; (8006054 <calWallConrol+0x164c>)
 8005f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f08:	ee07 3a90 	vmov	s15, r3
 8005f0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005f14:	4b52      	ldr	r3, [pc, #328]	; (8006060 <calWallConrol+0x1658>)
 8005f16:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8005f1a:	4b51      	ldr	r3, [pc, #324]	; (8006060 <calWallConrol+0x1658>)
 8005f1c:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8005f20:	4b4f      	ldr	r3, [pc, #316]	; (8006060 <calWallConrol+0x1658>)
 8005f22:	edd3 7a01 	vldr	s15, [r3, #4]
 8005f26:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8005f2a:	4b4d      	ldr	r3, [pc, #308]	; (8006060 <calWallConrol+0x1658>)
 8005f2c:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8005f30:	4b4b      	ldr	r3, [pc, #300]	; (8006060 <calWallConrol+0x1658>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a4a      	ldr	r2, [pc, #296]	; (8006060 <calWallConrol+0x1658>)
 8005f36:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005f38:	4b49      	ldr	r3, [pc, #292]	; (8006060 <calWallConrol+0x1658>)
 8005f3a:	ed93 7a00 	vldr	s14, [r3]
 8005f3e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005f42:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8005f46:	4b46      	ldr	r3, [pc, #280]	; (8006060 <calWallConrol+0x1658>)
 8005f48:	edd3 6a02 	vldr	s13, [r3, #8]
 8005f4c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f54:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005f58:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f60:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005f64:	e05f      	b.n	8006026 <calWallConrol+0x161e>
		case 3:			//両壁あり
			pl_yellow_LED_3(1);
 8005f66:	2001      	movs	r0, #1
 8005f68:	f000 fede 	bl	8006d28 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8005f6c:	2001      	movs	r0, #1
 8005f6e:	f000 feed 	bl	8006d4c <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8005f72:	4a39      	ldr	r2, [pc, #228]	; (8006058 <calWallConrol+0x1650>)
 8005f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f76:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = CenterSlantL45;
 8005f78:	4a38      	ldr	r2, [pc, #224]	; (800605c <calWallConrol+0x1654>)
 8005f7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f7c:	6013      	str	r3, [r2, #0]
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8005f7e:	4b35      	ldr	r3, [pc, #212]	; (8006054 <calWallConrol+0x164c>)
 8005f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f8a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f92:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL45) / (float) (g_sensor[SENSOR_FRONT_LEFT][0])
 8005f96:	4b2f      	ldr	r3, [pc, #188]	; (8006054 <calWallConrol+0x164c>)
 8005f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8005fa6:	4b2b      	ldr	r3, [pc, #172]	; (8006054 <calWallConrol+0x164c>)
 8005fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fac:	ee07 3a90 	vmov	s15, r3
 8005fb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005fb4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005fb8:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 8005fbc:	4b25      	ldr	r3, [pc, #148]	; (8006054 <calWallConrol+0x164c>)
 8005fbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fc2:	ee07 3a90 	vmov	s15, r3
 8005fc6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005fca:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8005fce:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8005fd2:	4b23      	ldr	r3, [pc, #140]	; (8006060 <calWallConrol+0x1658>)
 8005fd4:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8005fd8:	4b21      	ldr	r3, [pc, #132]	; (8006060 <calWallConrol+0x1658>)
 8005fda:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8005fde:	4b20      	ldr	r3, [pc, #128]	; (8006060 <calWallConrol+0x1658>)
 8005fe0:	edd3 7a01 	vldr	s15, [r3, #4]
 8005fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8005fe8:	4b1d      	ldr	r3, [pc, #116]	; (8006060 <calWallConrol+0x1658>)
 8005fea:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8005fee:	4b1c      	ldr	r3, [pc, #112]	; (8006060 <calWallConrol+0x1658>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a1b      	ldr	r2, [pc, #108]	; (8006060 <calWallConrol+0x1658>)
 8005ff4:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005ff6:	4b1a      	ldr	r3, [pc, #104]	; (8006060 <calWallConrol+0x1658>)
 8005ff8:	ed93 7a00 	vldr	s14, [r3]
 8005ffc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006000:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006004:	4b16      	ldr	r3, [pc, #88]	; (8006060 <calWallConrol+0x1658>)
 8006006:	edd3 6a02 	vldr	s13, [r3, #8]
 800600a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800600e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006012:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006016:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800601a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800601e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006022:	e000      	b.n	8006026 <calWallConrol+0x161e>
			break;
 8006024:	bf00      	nop
		}

	}
	PID_w = PID_wall / MAXMOTOR * g_V_battery_mean;
 8006026:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800602a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006064 <calWallConrol+0x165c>
 800602e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006032:	4b0d      	ldr	r3, [pc, #52]	; (8006068 <calWallConrol+0x1660>)
 8006034:	edd3 7a00 	vldr	s15, [r3]
 8006038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800603c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	return PID_w;
 8006040:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006042:	ee07 3a90 	vmov	s15, r3
}
 8006046:	eeb0 0a67 	vmov.f32	s0, s15
 800604a:	37a8      	adds	r7, #168	; 0xa8
 800604c:	46bd      	mov	sp, r7
 800604e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006052:	bf00      	nop
 8006054:	200002b8 	.word	0x200002b8
 8006058:	200005a4 	.word	0x200005a4
 800605c:	200005a8 	.word	0x200005a8
 8006060:	20000584 	.word	0x20000584
 8006064:	44d1e000 	.word	0x44d1e000
 8006068:	200004d4 	.word	0x200004d4
 800606c:	00000000 	.word	0x00000000

08006070 <interrupt_WallCut>:
			*PID_frontwall_r = 0;
		}
	}
}

void interrupt_WallCut(void) {
 8006070:	b5b0      	push	{r4, r5, r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
	int del_time=ceil(3.5/INTERRUPT_TIME/fabs(straight.velocity));
 8006076:	4ba0      	ldr	r3, [pc, #640]	; (80062f8 <interrupt_WallCut+0x288>)
 8006078:	edd3 7a00 	vldr	s15, [r3]
 800607c:	eef0 7ae7 	vabs.f32	s15, s15
 8006080:	ee17 0a90 	vmov	r0, s15
 8006084:	f7fa fa88 	bl	8000598 <__aeabi_f2d>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	a196      	add	r1, pc, #600	; (adr r1, 80062e8 <interrupt_WallCut+0x278>)
 800608e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006092:	f7fa fc03 	bl	800089c <__aeabi_ddiv>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	ec43 2b17 	vmov	d7, r2, r3
 800609e:	eeb0 0a47 	vmov.f32	s0, s14
 80060a2:	eef0 0a67 	vmov.f32	s1, s15
 80060a6:	f01c ff13 	bl	8022ed0 <ceil>
 80060aa:	ec53 2b10 	vmov	r2, r3, d0
 80060ae:	4610      	mov	r0, r2
 80060b0:	4619      	mov	r1, r3
 80060b2:	f7fa fd79 	bl	8000ba8 <__aeabi_d2iz>
 80060b6:	4603      	mov	r3, r0
 80060b8:	617b      	str	r3, [r7, #20]
	if(del_time>=11){del_time=11;}
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2b0a      	cmp	r3, #10
 80060be:	dd01      	ble.n	80060c4 <interrupt_WallCut+0x54>
 80060c0:	230b      	movs	r3, #11
 80060c2:	617b      	str	r3, [r7, #20]
	for (int j = 0; j <= 4; j++) {
 80060c4:	2300      	movs	r3, #0
 80060c6:	613b      	str	r3, [r7, #16]
 80060c8:	e019      	b.n	80060fe <interrupt_WallCut+0x8e>
		g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][del_time];
 80060ca:	498c      	ldr	r1, [pc, #560]	; (80062fc <interrupt_WallCut+0x28c>)
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	4613      	mov	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	011b      	lsls	r3, r3, #4
 80060d6:	440b      	add	r3, r1
 80060d8:	6819      	ldr	r1, [r3, #0]
 80060da:	4888      	ldr	r0, [pc, #544]	; (80062fc <interrupt_WallCut+0x28c>)
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	4613      	mov	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	4413      	add	r3, r2
 80060ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80060ee:	1aca      	subs	r2, r1, r3
 80060f0:	4983      	ldr	r1, [pc, #524]	; (8006300 <interrupt_WallCut+0x290>)
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int j = 0; j <= 4; j++) {
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	3301      	adds	r3, #1
 80060fc:	613b      	str	r3, [r7, #16]
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	2b04      	cmp	r3, #4
 8006102:	dde2      	ble.n	80060ca <interrupt_WallCut+0x5a>
	}
//	if (maze_mode == 1 || (modeacc != 0 && modeacc != 3)) {}

	if (g_wallCut_mode == 1) {
 8006104:	4b7f      	ldr	r3, [pc, #508]	; (8006304 <interrupt_WallCut+0x294>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b01      	cmp	r3, #1
 800610a:	f040 8556 	bne.w	8006bba <interrupt_WallCut+0xb4a>
// 壁壁の検知判定()
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_90) {
 800610e:	4b7b      	ldr	r3, [pc, #492]	; (80062fc <interrupt_WallCut+0x28c>)
 8006110:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006118:	dd03      	ble.n	8006122 <interrupt_WallCut+0xb2>
			front_wall_break_90 = 1;
 800611a:	4b7b      	ldr	r3, [pc, #492]	; (8006308 <interrupt_WallCut+0x298>)
 800611c:	2201      	movs	r2, #1
 800611e:	701a      	strb	r2, [r3, #0]
 8006120:	e002      	b.n	8006128 <interrupt_WallCut+0xb8>
		} else {
			front_wall_break_90 = 0;
 8006122:	4b79      	ldr	r3, [pc, #484]	; (8006308 <interrupt_WallCut+0x298>)
 8006124:	2200      	movs	r2, #0
 8006126:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45) {
 8006128:	4b74      	ldr	r3, [pc, #464]	; (80062fc <interrupt_WallCut+0x28c>)
 800612a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800612e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006132:	dd03      	ble.n	800613c <interrupt_WallCut+0xcc>
			front_wall_break_45 = 1;
 8006134:	4b75      	ldr	r3, [pc, #468]	; (800630c <interrupt_WallCut+0x29c>)
 8006136:	2201      	movs	r2, #1
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	e002      	b.n	8006142 <interrupt_WallCut+0xd2>
		} else {
			front_wall_break_45 = 0;
 800613c:	4b73      	ldr	r3, [pc, #460]	; (800630c <interrupt_WallCut+0x29c>)
 800613e:	2200      	movs	r2, #0
 8006140:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45SLANT) {
 8006142:	4b6e      	ldr	r3, [pc, #440]	; (80062fc <interrupt_WallCut+0x28c>)
 8006144:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006148:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800614c:	dd03      	ble.n	8006156 <interrupt_WallCut+0xe6>
			front_wall_break_45slant = 1;
 800614e:	4b70      	ldr	r3, [pc, #448]	; (8006310 <interrupt_WallCut+0x2a0>)
 8006150:	2201      	movs	r2, #1
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	e002      	b.n	800615c <interrupt_WallCut+0xec>
		} else {
			front_wall_break_45slant = 0;
 8006156:	4b6e      	ldr	r3, [pc, #440]	; (8006310 <interrupt_WallCut+0x2a0>)
 8006158:	2200      	movs	r2, #0
 800615a:	701a      	strb	r2, [r3, #0]
		}

// スラロームで用いる90度センサーの壁切れ
		if (g_sensor[SENSOR_LEFT][0] < WALLCUT_THRESHOLD_L90) {
 800615c:	4b67      	ldr	r3, [pc, #412]	; (80062fc <interrupt_WallCut+0x28c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006164:	da30      	bge.n	80061c8 <interrupt_WallCut+0x158>
			NoWallCountL90++;
 8006166:	4b6b      	ldr	r3, [pc, #428]	; (8006314 <interrupt_WallCut+0x2a4>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3301      	adds	r3, #1
 800616c:	4a69      	ldr	r2, [pc, #420]	; (8006314 <interrupt_WallCut+0x2a4>)
 800616e:	6013      	str	r3, [r2, #0]
			//straight.velocityのほうが良き？
			NoWallDisplacementL90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006170:	4b69      	ldr	r3, [pc, #420]	; (8006318 <interrupt_WallCut+0x2a8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4618      	mov	r0, r3
 8006176:	f7fa fa0f 	bl	8000598 <__aeabi_f2d>
 800617a:	4604      	mov	r4, r0
 800617c:	460d      	mov	r5, r1
 800617e:	4b67      	ldr	r3, [pc, #412]	; (800631c <interrupt_WallCut+0x2ac>)
 8006180:	ed93 7a00 	vldr	s14, [r3]
 8006184:	4b66      	ldr	r3, [pc, #408]	; (8006320 <interrupt_WallCut+0x2b0>)
 8006186:	edd3 7a00 	vldr	s15, [r3]
 800618a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800618e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006192:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006196:	ee16 0a90 	vmov	r0, s13
 800619a:	f7fa f9fd 	bl	8000598 <__aeabi_f2d>
 800619e:	a354      	add	r3, pc, #336	; (adr r3, 80062f0 <interrupt_WallCut+0x280>)
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f7fa fa50 	bl	8000648 <__aeabi_dmul>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4620      	mov	r0, r4
 80061ae:	4629      	mov	r1, r5
 80061b0:	f7fa f894 	bl	80002dc <__adddf3>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4610      	mov	r0, r2
 80061ba:	4619      	mov	r1, r3
 80061bc:	f7fa fd1c 	bl	8000bf8 <__aeabi_d2f>
 80061c0:	4603      	mov	r3, r0
 80061c2:	4a55      	ldr	r2, [pc, #340]	; (8006318 <interrupt_WallCut+0x2a8>)
 80061c4:	6013      	str	r3, [r2, #0]
 80061c6:	e006      	b.n	80061d6 <interrupt_WallCut+0x166>
//			straight.velocity*INTERRUPT_TIME - straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2
		} else {
			NoWallCountL90 = 0;
 80061c8:	4b52      	ldr	r3, [pc, #328]	; (8006314 <interrupt_WallCut+0x2a4>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]
			NoWallDisplacementL90 = 0;
 80061ce:	4b52      	ldr	r3, [pc, #328]	; (8006318 <interrupt_WallCut+0x2a8>)
 80061d0:	f04f 0200 	mov.w	r2, #0
 80061d4:	601a      	str	r2, [r3, #0]
		}

		if (g_sensor[SENSOR_RIGHT][0] < WALLCUT_THRESHOLD_R90) {
 80061d6:	4b49      	ldr	r3, [pc, #292]	; (80062fc <interrupt_WallCut+0x28c>)
 80061d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80061dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80061e0:	da30      	bge.n	8006244 <interrupt_WallCut+0x1d4>
			NoWallCountR90++;
 80061e2:	4b50      	ldr	r3, [pc, #320]	; (8006324 <interrupt_WallCut+0x2b4>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3301      	adds	r3, #1
 80061e8:	4a4e      	ldr	r2, [pc, #312]	; (8006324 <interrupt_WallCut+0x2b4>)
 80061ea:	6013      	str	r3, [r2, #0]
			NoWallDisplacementR90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 80061ec:	4b4e      	ldr	r3, [pc, #312]	; (8006328 <interrupt_WallCut+0x2b8>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fa f9d1 	bl	8000598 <__aeabi_f2d>
 80061f6:	4604      	mov	r4, r0
 80061f8:	460d      	mov	r5, r1
 80061fa:	4b48      	ldr	r3, [pc, #288]	; (800631c <interrupt_WallCut+0x2ac>)
 80061fc:	ed93 7a00 	vldr	s14, [r3]
 8006200:	4b47      	ldr	r3, [pc, #284]	; (8006320 <interrupt_WallCut+0x2b0>)
 8006202:	edd3 7a00 	vldr	s15, [r3]
 8006206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800620a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800620e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006212:	ee16 0a90 	vmov	r0, s13
 8006216:	f7fa f9bf 	bl	8000598 <__aeabi_f2d>
 800621a:	a335      	add	r3, pc, #212	; (adr r3, 80062f0 <interrupt_WallCut+0x280>)
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	f7fa fa12 	bl	8000648 <__aeabi_dmul>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4620      	mov	r0, r4
 800622a:	4629      	mov	r1, r5
 800622c:	f7fa f856 	bl	80002dc <__adddf3>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	4610      	mov	r0, r2
 8006236:	4619      	mov	r1, r3
 8006238:	f7fa fcde 	bl	8000bf8 <__aeabi_d2f>
 800623c:	4603      	mov	r3, r0
 800623e:	4a3a      	ldr	r2, [pc, #232]	; (8006328 <interrupt_WallCut+0x2b8>)
 8006240:	6013      	str	r3, [r2, #0]
 8006242:	e006      	b.n	8006252 <interrupt_WallCut+0x1e2>
		} else {
			NoWallCountR90 = 0;
 8006244:	4b37      	ldr	r3, [pc, #220]	; (8006324 <interrupt_WallCut+0x2b4>)
 8006246:	2200      	movs	r2, #0
 8006248:	601a      	str	r2, [r3, #0]
			NoWallDisplacementR90 = 0;
 800624a:	4b37      	ldr	r3, [pc, #220]	; (8006328 <interrupt_WallCut+0x2b8>)
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
		}

// 大回りターンで用いる45度センサーの壁切れ
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 8006252:	4b2b      	ldr	r3, [pc, #172]	; (8006300 <interrupt_WallCut+0x290>)
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f113 0f59 	cmn.w	r3, #89	; 0x59
 800625a:	da03      	bge.n	8006264 <interrupt_WallCut+0x1f4>
				> WALLCUT_THRESHOLD_DIFF_L45 || g_sensor[SENSOR_FRONT_LEFT][0]
 800625c:	4b27      	ldr	r3, [pc, #156]	; (80062fc <interrupt_WallCut+0x28c>)
 800625e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006260:	2bc8      	cmp	r3, #200	; 0xc8
 8006262:	dd37      	ble.n	80062d4 <interrupt_WallCut+0x264>
																				> WALLCUT_THRESHOLD_L45) {
			g_sensor_max_fl = 0;			//CENTER_FL;
 8006264:	4b31      	ldr	r3, [pc, #196]	; (800632c <interrupt_WallCut+0x2bc>)
 8006266:	f04f 0200 	mov.w	r2, #0
 800626a:	601a      	str	r2, [r3, #0]
			NoWallCountL45++;
 800626c:	4b30      	ldr	r3, [pc, #192]	; (8006330 <interrupt_WallCut+0x2c0>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3301      	adds	r3, #1
 8006272:	4a2f      	ldr	r2, [pc, #188]	; (8006330 <interrupt_WallCut+0x2c0>)
 8006274:	6013      	str	r3, [r2, #0]
			//pl_l_blue_LED(0);
			NoWallCountL45_flag = 0;
 8006276:	4b2f      	ldr	r3, [pc, #188]	; (8006334 <interrupt_WallCut+0x2c4>)
 8006278:	2200      	movs	r2, #0
 800627a:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountL45_flag == 1) {
//			NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 800627c:	4b2e      	ldr	r3, [pc, #184]	; (8006338 <interrupt_WallCut+0x2c8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4618      	mov	r0, r3
 8006282:	f7fa f989 	bl	8000598 <__aeabi_f2d>
 8006286:	4604      	mov	r4, r0
 8006288:	460d      	mov	r5, r1
 800628a:	4b24      	ldr	r3, [pc, #144]	; (800631c <interrupt_WallCut+0x2ac>)
 800628c:	ed93 7a00 	vldr	s14, [r3]
 8006290:	4b23      	ldr	r3, [pc, #140]	; (8006320 <interrupt_WallCut+0x2b0>)
 8006292:	edd3 7a00 	vldr	s15, [r3]
 8006296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800629a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800629e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062a2:	ee16 0a90 	vmov	r0, s13
 80062a6:	f7fa f977 	bl	8000598 <__aeabi_f2d>
 80062aa:	a311      	add	r3, pc, #68	; (adr r3, 80062f0 <interrupt_WallCut+0x280>)
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	f7fa f9ca 	bl	8000648 <__aeabi_dmul>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4620      	mov	r0, r4
 80062ba:	4629      	mov	r1, r5
 80062bc:	f7fa f80e 	bl	80002dc <__adddf3>
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
 80062c4:	4610      	mov	r0, r2
 80062c6:	4619      	mov	r1, r3
 80062c8:	f7fa fc96 	bl	8000bf8 <__aeabi_d2f>
 80062cc:	4603      	mov	r3, r0
 80062ce:	4a1a      	ldr	r2, [pc, #104]	; (8006338 <interrupt_WallCut+0x2c8>)
 80062d0:	6013      	str	r3, [r2, #0]
 80062d2:	e0a0      	b.n	8006416 <interrupt_WallCut+0x3a6>
//			}
		} else {

			if (NoWallCountL45_flag == 0) {
 80062d4:	4b17      	ldr	r3, [pc, #92]	; (8006334 <interrupt_WallCut+0x2c4>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d16c      	bne.n	80063b6 <interrupt_WallCut+0x346>
				for (int i = 0; i <= 19; i++) {
 80062dc:	2300      	movs	r3, #0
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	e04c      	b.n	800637c <interrupt_WallCut+0x30c>
 80062e2:	bf00      	nop
 80062e4:	f3af 8000 	nop.w
 80062e8:	00000000 	.word	0x00000000
 80062ec:	40ab5800 	.word	0x40ab5800
 80062f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80062f4:	3f50624d 	.word	0x3f50624d
 80062f8:	200004d8 	.word	0x200004d8
 80062fc:	200002b8 	.word	0x200002b8
 8006300:	2000045c 	.word	0x2000045c
 8006304:	20000592 	.word	0x20000592
 8006308:	200005f2 	.word	0x200005f2
 800630c:	200005f3 	.word	0x200005f3
 8006310:	200005f4 	.word	0x200005f4
 8006314:	200005b8 	.word	0x200005b8
 8006318:	200005d0 	.word	0x200005d0
 800631c:	20000258 	.word	0x20000258
 8006320:	2000025c 	.word	0x2000025c
 8006324:	200005b4 	.word	0x200005b4
 8006328:	200005cc 	.word	0x200005cc
 800632c:	200005f8 	.word	0x200005f8
 8006330:	200005c0 	.word	0x200005c0
 8006334:	200005ec 	.word	0x200005ec
 8006338:	200005d8 	.word	0x200005d8
					if (g_sensor_max_fl
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 800633c:	4a7c      	ldr	r2, [pc, #496]	; (8006530 <interrupt_WallCut+0x4c0>)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3314      	adds	r3, #20
 8006342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006346:	ee07 3a90 	vmov	s15, r3
 800634a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800634e:	4b79      	ldr	r3, [pc, #484]	; (8006534 <interrupt_WallCut+0x4c4>)
 8006350:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl
 8006354:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800635c:	dd0b      	ble.n	8006376 <interrupt_WallCut+0x306>
						g_sensor_max_fl =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 800635e:	4a74      	ldr	r2, [pc, #464]	; (8006530 <interrupt_WallCut+0x4c0>)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	3314      	adds	r3, #20
 8006364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006368:	ee07 3a90 	vmov	s15, r3
 800636c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl =
 8006370:	4b70      	ldr	r3, [pc, #448]	; (8006534 <interrupt_WallCut+0x4c4>)
 8006372:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3301      	adds	r3, #1
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b13      	cmp	r3, #19
 8006380:	dddc      	ble.n	800633c <interrupt_WallCut+0x2cc>
					}
				}
				NoWallCountL45 = 0;
 8006382:	4b6d      	ldr	r3, [pc, #436]	; (8006538 <interrupt_WallCut+0x4c8>)
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]
				NoWallCountL45_flag = 1;
 8006388:	4b6c      	ldr	r3, [pc, #432]	; (800653c <interrupt_WallCut+0x4cc>)
 800638a:	2201      	movs	r2, #1
 800638c:	701a      	strb	r2, [r3, #0]
				//pl_l_blue_LED(1);
				//NoWallDisplacementL45 = 0;
				NoWallDisplacementL45 = GAIN_WALLCUT
						* (g_sensor_max_fl - CENTER_FL) / g_sensor_max_fl;
 800638e:	4b69      	ldr	r3, [pc, #420]	; (8006534 <interrupt_WallCut+0x4c4>)
 8006390:	edd3 7a00 	vldr	s15, [r3]
 8006394:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8006540 <interrupt_WallCut+0x4d0>
 8006398:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800639c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8006544 <interrupt_WallCut+0x4d4>
 80063a0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80063a4:	4b63      	ldr	r3, [pc, #396]	; (8006534 <interrupt_WallCut+0x4c4>)
 80063a6:	ed93 7a00 	vldr	s14, [r3]
 80063aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementL45 = GAIN_WALLCUT
 80063ae:	4b66      	ldr	r3, [pc, #408]	; (8006548 <interrupt_WallCut+0x4d8>)
 80063b0:	edc3 7a00 	vstr	s15, [r3]
 80063b4:	e02f      	b.n	8006416 <interrupt_WallCut+0x3a6>
			} else {
				NoWallCountL45++;
 80063b6:	4b60      	ldr	r3, [pc, #384]	; (8006538 <interrupt_WallCut+0x4c8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3301      	adds	r3, #1
 80063bc:	4a5e      	ldr	r2, [pc, #376]	; (8006538 <interrupt_WallCut+0x4c8>)
 80063be:	6013      	str	r3, [r2, #0]
//				NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 80063c0:	4b61      	ldr	r3, [pc, #388]	; (8006548 <interrupt_WallCut+0x4d8>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fa f8e7 	bl	8000598 <__aeabi_f2d>
 80063ca:	4604      	mov	r4, r0
 80063cc:	460d      	mov	r5, r1
 80063ce:	4b5f      	ldr	r3, [pc, #380]	; (800654c <interrupt_WallCut+0x4dc>)
 80063d0:	ed93 7a00 	vldr	s14, [r3]
 80063d4:	4b5e      	ldr	r3, [pc, #376]	; (8006550 <interrupt_WallCut+0x4e0>)
 80063d6:	edd3 7a00 	vldr	s15, [r3]
 80063da:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 80063de:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80063e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80063e6:	ee16 0a90 	vmov	r0, s13
 80063ea:	f7fa f8d5 	bl	8000598 <__aeabi_f2d>
 80063ee:	a34e      	add	r3, pc, #312	; (adr r3, 8006528 <interrupt_WallCut+0x4b8>)
 80063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f4:	f7fa f928 	bl	8000648 <__aeabi_dmul>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 80063fc:	4620      	mov	r0, r4
 80063fe:	4629      	mov	r1, r5
 8006400:	f7f9 ff6c 	bl	80002dc <__adddf3>
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	4610      	mov	r0, r2
 800640a:	4619      	mov	r1, r3
 800640c:	f7fa fbf4 	bl	8000bf8 <__aeabi_d2f>
 8006410:	4603      	mov	r3, r0
 8006412:	4a4d      	ldr	r2, [pc, #308]	; (8006548 <interrupt_WallCut+0x4d8>)
 8006414:	6013      	str	r3, [r2, #0]
			}
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 8006416:	4b4f      	ldr	r3, [pc, #316]	; (8006554 <interrupt_WallCut+0x4e4>)
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f113 0f59 	cmn.w	r3, #89	; 0x59
 800641e:	da05      	bge.n	800642c <interrupt_WallCut+0x3bc>
				> WALLCUT_THRESHOLD_DIFF_R45 || g_sensor[SENSOR_FRONT_RIGHT][0]
 8006420:	4b43      	ldr	r3, [pc, #268]	; (8006530 <interrupt_WallCut+0x4c0>)
 8006422:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006426:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800642a:	dd37      	ble.n	800649c <interrupt_WallCut+0x42c>
																		> WALLCUT_THRESHOLD_R45) {
			g_sensor_max_fr = 0;			//CENTER_FR;
 800642c:	4b4a      	ldr	r3, [pc, #296]	; (8006558 <interrupt_WallCut+0x4e8>)
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	601a      	str	r2, [r3, #0]
			NoWallCountR45++;
 8006434:	4b49      	ldr	r3, [pc, #292]	; (800655c <interrupt_WallCut+0x4ec>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3301      	adds	r3, #1
 800643a:	4a48      	ldr	r2, [pc, #288]	; (800655c <interrupt_WallCut+0x4ec>)
 800643c:	6013      	str	r3, [r2, #0]
			//pl_r_blue_LED(0);
			NoWallCountR45_flag = 0;
 800643e:	4b48      	ldr	r3, [pc, #288]	; (8006560 <interrupt_WallCut+0x4f0>)
 8006440:	2200      	movs	r2, #0
 8006442:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountR45_flag == 1) {
//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006444:	4b47      	ldr	r3, [pc, #284]	; (8006564 <interrupt_WallCut+0x4f4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4618      	mov	r0, r3
 800644a:	f7fa f8a5 	bl	8000598 <__aeabi_f2d>
 800644e:	4604      	mov	r4, r0
 8006450:	460d      	mov	r5, r1
 8006452:	4b3e      	ldr	r3, [pc, #248]	; (800654c <interrupt_WallCut+0x4dc>)
 8006454:	ed93 7a00 	vldr	s14, [r3]
 8006458:	4b3d      	ldr	r3, [pc, #244]	; (8006550 <interrupt_WallCut+0x4e0>)
 800645a:	edd3 7a00 	vldr	s15, [r3]
 800645e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006462:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006466:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800646a:	ee16 0a90 	vmov	r0, s13
 800646e:	f7fa f893 	bl	8000598 <__aeabi_f2d>
 8006472:	a32d      	add	r3, pc, #180	; (adr r3, 8006528 <interrupt_WallCut+0x4b8>)
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	f7fa f8e6 	bl	8000648 <__aeabi_dmul>
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
 8006480:	4620      	mov	r0, r4
 8006482:	4629      	mov	r1, r5
 8006484:	f7f9 ff2a 	bl	80002dc <__adddf3>
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	4610      	mov	r0, r2
 800648e:	4619      	mov	r1, r3
 8006490:	f7fa fbb2 	bl	8000bf8 <__aeabi_d2f>
 8006494:	4603      	mov	r3, r0
 8006496:	4a33      	ldr	r2, [pc, #204]	; (8006564 <interrupt_WallCut+0x4f4>)
 8006498:	6013      	str	r3, [r2, #0]
 800649a:	e097      	b.n	80065cc <interrupt_WallCut+0x55c>
//			}
		} else {
			if (NoWallCountR45_flag == 0) {
 800649c:	4b30      	ldr	r3, [pc, #192]	; (8006560 <interrupt_WallCut+0x4f0>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d163      	bne.n	800656c <interrupt_WallCut+0x4fc>
				for (int i = 0; i <= 19; i++) {
 80064a4:	2300      	movs	r3, #0
 80064a6:	60bb      	str	r3, [r7, #8]
 80064a8:	e01f      	b.n	80064ea <interrupt_WallCut+0x47a>
					if (g_sensor_max_fr
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 80064aa:	4a21      	ldr	r2, [pc, #132]	; (8006530 <interrupt_WallCut+0x4c0>)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	333c      	adds	r3, #60	; 0x3c
 80064b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064b4:	ee07 3a90 	vmov	s15, r3
 80064b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064bc:	4b26      	ldr	r3, [pc, #152]	; (8006558 <interrupt_WallCut+0x4e8>)
 80064be:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr
 80064c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ca:	dd0b      	ble.n	80064e4 <interrupt_WallCut+0x474>
						g_sensor_max_fr =
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 80064cc:	4a18      	ldr	r2, [pc, #96]	; (8006530 <interrupt_WallCut+0x4c0>)
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	333c      	adds	r3, #60	; 0x3c
 80064d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064d6:	ee07 3a90 	vmov	s15, r3
 80064da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr =
 80064de:	4b1e      	ldr	r3, [pc, #120]	; (8006558 <interrupt_WallCut+0x4e8>)
 80064e0:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	3301      	adds	r3, #1
 80064e8:	60bb      	str	r3, [r7, #8]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b13      	cmp	r3, #19
 80064ee:	dddc      	ble.n	80064aa <interrupt_WallCut+0x43a>
					}
				}
				NoWallCountR45 = 0;
 80064f0:	4b1a      	ldr	r3, [pc, #104]	; (800655c <interrupt_WallCut+0x4ec>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	601a      	str	r2, [r3, #0]
				NoWallCountR45_flag = 1;
 80064f6:	4b1a      	ldr	r3, [pc, #104]	; (8006560 <interrupt_WallCut+0x4f0>)
 80064f8:	2201      	movs	r2, #1
 80064fa:	701a      	strb	r2, [r3, #0]
				//pl_r_blue_LED(1);
				//NoWallDisplacementR45 = 0;
				NoWallDisplacementR45 = GAIN_WALLCUT
						* (g_sensor_max_fr - CENTER_FR) / g_sensor_max_fr;
 80064fc:	4b16      	ldr	r3, [pc, #88]	; (8006558 <interrupt_WallCut+0x4e8>)
 80064fe:	edd3 7a00 	vldr	s15, [r3]
 8006502:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006568 <interrupt_WallCut+0x4f8>
 8006506:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800650a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8006544 <interrupt_WallCut+0x4d4>
 800650e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006512:	4b11      	ldr	r3, [pc, #68]	; (8006558 <interrupt_WallCut+0x4e8>)
 8006514:	ed93 7a00 	vldr	s14, [r3]
 8006518:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementR45 = GAIN_WALLCUT
 800651c:	4b11      	ldr	r3, [pc, #68]	; (8006564 <interrupt_WallCut+0x4f4>)
 800651e:	edc3 7a00 	vstr	s15, [r3]
 8006522:	e053      	b.n	80065cc <interrupt_WallCut+0x55c>
 8006524:	f3af 8000 	nop.w
 8006528:	d2f1a9fc 	.word	0xd2f1a9fc
 800652c:	3f50624d 	.word	0x3f50624d
 8006530:	200002b8 	.word	0x200002b8
 8006534:	200005f8 	.word	0x200005f8
 8006538:	200005c0 	.word	0x200005c0
 800653c:	200005ec 	.word	0x200005ec
 8006540:	43f68000 	.word	0x43f68000
 8006544:	00000000 	.word	0x00000000
 8006548:	200005d8 	.word	0x200005d8
 800654c:	20000258 	.word	0x20000258
 8006550:	2000025c 	.word	0x2000025c
 8006554:	2000045c 	.word	0x2000045c
 8006558:	200005fc 	.word	0x200005fc
 800655c:	200005bc 	.word	0x200005bc
 8006560:	200005ed 	.word	0x200005ed
 8006564:	200005d4 	.word	0x200005d4
 8006568:	44484000 	.word	0x44484000
			} else {
				NoWallCountR45++;
 800656c:	4b94      	ldr	r3, [pc, #592]	; (80067c0 <interrupt_WallCut+0x750>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3301      	adds	r3, #1
 8006572:	4a93      	ldr	r2, [pc, #588]	; (80067c0 <interrupt_WallCut+0x750>)
 8006574:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 8006576:	4b93      	ldr	r3, [pc, #588]	; (80067c4 <interrupt_WallCut+0x754>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4618      	mov	r0, r3
 800657c:	f7fa f80c 	bl	8000598 <__aeabi_f2d>
 8006580:	4604      	mov	r4, r0
 8006582:	460d      	mov	r5, r1
 8006584:	4b90      	ldr	r3, [pc, #576]	; (80067c8 <interrupt_WallCut+0x758>)
 8006586:	ed93 7a00 	vldr	s14, [r3]
 800658a:	4b90      	ldr	r3, [pc, #576]	; (80067cc <interrupt_WallCut+0x75c>)
 800658c:	edd3 7a00 	vldr	s15, [r3]
 8006590:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 8006594:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006598:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800659c:	ee16 0a90 	vmov	r0, s13
 80065a0:	f7f9 fffa 	bl	8000598 <__aeabi_f2d>
 80065a4:	a384      	add	r3, pc, #528	; (adr r3, 80067b8 <interrupt_WallCut+0x748>)
 80065a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065aa:	f7fa f84d 	bl	8000648 <__aeabi_dmul>
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 80065b2:	4620      	mov	r0, r4
 80065b4:	4629      	mov	r1, r5
 80065b6:	f7f9 fe91 	bl	80002dc <__adddf3>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	4610      	mov	r0, r2
 80065c0:	4619      	mov	r1, r3
 80065c2:	f7fa fb19 	bl	8000bf8 <__aeabi_d2f>
 80065c6:	4603      	mov	r3, r0
 80065c8:	4a7e      	ldr	r2, [pc, #504]	; (80067c4 <interrupt_WallCut+0x754>)
 80065ca:	6013      	str	r3, [r2, #0]
			}

		}

		// 大回りターンで用いる45度センサーの壁切れ(斜め)
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 80065cc:	4b80      	ldr	r3, [pc, #512]	; (80067d0 <interrupt_WallCut+0x760>)
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f113 0fef 	cmn.w	r3, #239	; 0xef
 80065d4:	db5f      	blt.n	8006696 <interrupt_WallCut+0x626>
				> WALLCUT_THRESHOLD_DIFF_L45_SLANT) {
			g_sensor_max_fl_slant = 0;			//CENTER_FL_SLANT;
 80065d6:	4b7f      	ldr	r3, [pc, #508]	; (80067d4 <interrupt_WallCut+0x764>)
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	601a      	str	r2, [r3, #0]
			NoWallCountL45slant++;
 80065de:	4b7e      	ldr	r3, [pc, #504]	; (80067d8 <interrupt_WallCut+0x768>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3301      	adds	r3, #1
 80065e4:	4a7c      	ldr	r2, [pc, #496]	; (80067d8 <interrupt_WallCut+0x768>)
 80065e6:	6013      	str	r3, [r2, #0]
			pl_l_blue_LED(0);
 80065e8:	2000      	movs	r0, #0
 80065ea:	f000 fccf 	bl	8006f8c <pl_l_blue_LED>
			NoWallCountL45slant_flag = 0;
 80065ee:	4b7b      	ldr	r3, [pc, #492]	; (80067dc <interrupt_WallCut+0x76c>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	701a      	strb	r2, [r3, #0]
			//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 80065f4:	4b7a      	ldr	r3, [pc, #488]	; (80067e0 <interrupt_WallCut+0x770>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7f9 ffcd 	bl	8000598 <__aeabi_f2d>
 80065fe:	4604      	mov	r4, r0
 8006600:	460d      	mov	r5, r1
 8006602:	4b71      	ldr	r3, [pc, #452]	; (80067c8 <interrupt_WallCut+0x758>)
 8006604:	ed93 7a00 	vldr	s14, [r3]
 8006608:	4b70      	ldr	r3, [pc, #448]	; (80067cc <interrupt_WallCut+0x75c>)
 800660a:	edd3 7a00 	vldr	s15, [r3]
 800660e:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8006612:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006616:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800661a:	ee16 0a90 	vmov	r0, s13
 800661e:	f7f9 ffbb 	bl	8000598 <__aeabi_f2d>
 8006622:	a365      	add	r3, pc, #404	; (adr r3, 80067b8 <interrupt_WallCut+0x748>)
 8006624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006628:	f7fa f80e 	bl	8000648 <__aeabi_dmul>
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006630:	4620      	mov	r0, r4
 8006632:	4629      	mov	r1, r5
 8006634:	f7f9 fe52 	bl	80002dc <__adddf3>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4610      	mov	r0, r2
 800663e:	4619      	mov	r1, r3
 8006640:	f7fa fada 	bl	8000bf8 <__aeabi_d2f>
 8006644:	4603      	mov	r3, r0
 8006646:	4a66      	ldr	r2, [pc, #408]	; (80067e0 <interrupt_WallCut+0x770>)
 8006648:	6013      	str	r3, [r2, #0]
			if (slantWallControlL_flag == 1) {
 800664a:	4b66      	ldr	r3, [pc, #408]	; (80067e4 <interrupt_WallCut+0x774>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	2b01      	cmp	r3, #1
 8006650:	f040 812b 	bne.w	80068aa <interrupt_WallCut+0x83a>
				NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8006654:	4b64      	ldr	r3, [pc, #400]	; (80067e8 <interrupt_WallCut+0x778>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4618      	mov	r0, r3
 800665a:	f7f9 ff9d 	bl	8000598 <__aeabi_f2d>
 800665e:	4604      	mov	r4, r0
 8006660:	460d      	mov	r5, r1
 8006662:	4b62      	ldr	r3, [pc, #392]	; (80067ec <interrupt_WallCut+0x77c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4618      	mov	r0, r3
 8006668:	f7f9 ff96 	bl	8000598 <__aeabi_f2d>
 800666c:	a352      	add	r3, pc, #328	; (adr r3, 80067b8 <interrupt_WallCut+0x748>)
 800666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006672:	f7f9 ffe9 	bl	8000648 <__aeabi_dmul>
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	4620      	mov	r0, r4
 800667c:	4629      	mov	r1, r5
 800667e:	f7f9 fe2d 	bl	80002dc <__adddf3>
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	4610      	mov	r0, r2
 8006688:	4619      	mov	r1, r3
 800668a:	f7fa fab5 	bl	8000bf8 <__aeabi_d2f>
 800668e:	4603      	mov	r3, r0
 8006690:	4a55      	ldr	r2, [pc, #340]	; (80067e8 <interrupt_WallCut+0x778>)
 8006692:	6013      	str	r3, [r2, #0]
 8006694:	e109      	b.n	80068aa <interrupt_WallCut+0x83a>
				//NoWallDisplacementL45slant += (E_speedL + E_speedR)
				//		/ 2*INTERRUPT_TIME;
			}
		} else {
			if (NoWallCountL45slant_flag == 0) {
 8006696:	4b51      	ldr	r3, [pc, #324]	; (80067dc <interrupt_WallCut+0x76c>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	f040 80ae 	bne.w	80067fc <interrupt_WallCut+0x78c>
				for (int i = 0; i <= 19; i++) {
 80066a0:	2300      	movs	r3, #0
 80066a2:	607b      	str	r3, [r7, #4]
 80066a4:	e01f      	b.n	80066e6 <interrupt_WallCut+0x676>
					if (g_sensor_max_fl_slant
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 80066a6:	4a52      	ldr	r2, [pc, #328]	; (80067f0 <interrupt_WallCut+0x780>)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	3314      	adds	r3, #20
 80066ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066b0:	ee07 3a90 	vmov	s15, r3
 80066b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066b8:	4b46      	ldr	r3, [pc, #280]	; (80067d4 <interrupt_WallCut+0x764>)
 80066ba:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl_slant
 80066be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c6:	dd0b      	ble.n	80066e0 <interrupt_WallCut+0x670>
						g_sensor_max_fl_slant =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 80066c8:	4a49      	ldr	r2, [pc, #292]	; (80067f0 <interrupt_WallCut+0x780>)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	3314      	adds	r3, #20
 80066ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066d2:	ee07 3a90 	vmov	s15, r3
 80066d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl_slant =
 80066da:	4b3e      	ldr	r3, [pc, #248]	; (80067d4 <interrupt_WallCut+0x764>)
 80066dc:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3301      	adds	r3, #1
 80066e4:	607b      	str	r3, [r7, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b13      	cmp	r3, #19
 80066ea:	dddc      	ble.n	80066a6 <interrupt_WallCut+0x636>
					}
				}
				NoWallCountL45slant = 0;
 80066ec:	4b3a      	ldr	r3, [pc, #232]	; (80067d8 <interrupt_WallCut+0x768>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]
				NoWallCountL45slant_flag = 1;
 80066f2:	4b3a      	ldr	r3, [pc, #232]	; (80067dc <interrupt_WallCut+0x76c>)
 80066f4:	2201      	movs	r2, #1
 80066f6:	701a      	strb	r2, [r3, #0]
				pl_l_blue_LED(1);
 80066f8:	2001      	movs	r0, #1
 80066fa:	f000 fc47 	bl	8006f8c <pl_l_blue_LED>
				//			NoWallDisplacementL45slant = 0;
				//			NoWallDisplacementL45slant2 = 0;
				if (g_sensor_max_fl_slant - CENTER_FL_SLANT >= 0) {
 80066fe:	4b35      	ldr	r3, [pc, #212]	; (80067d4 <interrupt_WallCut+0x764>)
 8006700:	edd3 7a00 	vldr	s15, [r3]
 8006704:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80067f4 <interrupt_WallCut+0x784>
 8006708:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800670c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006714:	db26      	blt.n	8006764 <interrupt_WallCut+0x6f4>
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006716:	4b2f      	ldr	r3, [pc, #188]	; (80067d4 <interrupt_WallCut+0x764>)
 8006718:	edd3 7a00 	vldr	s15, [r3]
 800671c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80067f4 <interrupt_WallCut+0x784>
 8006720:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006724:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80067f8 <interrupt_WallCut+0x788>
 8006728:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 800672c:	4b29      	ldr	r3, [pc, #164]	; (80067d4 <interrupt_WallCut+0x764>)
 800672e:	ed93 7a00 	vldr	s14, [r3]
 8006732:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
 8006736:	4b2c      	ldr	r3, [pc, #176]	; (80067e8 <interrupt_WallCut+0x778>)
 8006738:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 800673c:	4b25      	ldr	r3, [pc, #148]	; (80067d4 <interrupt_WallCut+0x764>)
 800673e:	edd3 7a00 	vldr	s15, [r3]
 8006742:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80067f4 <interrupt_WallCut+0x784>
 8006746:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800674a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80067f8 <interrupt_WallCut+0x788>
 800674e:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006752:	4b20      	ldr	r3, [pc, #128]	; (80067d4 <interrupt_WallCut+0x764>)
 8006754:	ed93 7a00 	vldr	s14, [r3]
 8006758:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
 800675c:	4b20      	ldr	r3, [pc, #128]	; (80067e0 <interrupt_WallCut+0x770>)
 800675e:	edc3 7a00 	vstr	s15, [r3]
 8006762:	e09f      	b.n	80068a4 <interrupt_WallCut+0x834>
				} else {
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006764:	4b1b      	ldr	r3, [pc, #108]	; (80067d4 <interrupt_WallCut+0x764>)
 8006766:	edd3 7a00 	vldr	s15, [r3]
 800676a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80067f4 <interrupt_WallCut+0x784>
 800676e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006772:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80067f8 <interrupt_WallCut+0x788>
 8006776:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 800677a:	4b16      	ldr	r3, [pc, #88]	; (80067d4 <interrupt_WallCut+0x764>)
 800677c:	ed93 7a00 	vldr	s14, [r3]
 8006780:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
 8006784:	4b18      	ldr	r3, [pc, #96]	; (80067e8 <interrupt_WallCut+0x778>)
 8006786:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 800678a:	4b12      	ldr	r3, [pc, #72]	; (80067d4 <interrupt_WallCut+0x764>)
 800678c:	edd3 7a00 	vldr	s15, [r3]
 8006790:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80067f4 <interrupt_WallCut+0x784>
 8006794:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006798:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80067f8 <interrupt_WallCut+0x788>
 800679c:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 80067a0:	4b0c      	ldr	r3, [pc, #48]	; (80067d4 <interrupt_WallCut+0x764>)
 80067a2:	ed93 7a00 	vldr	s14, [r3]
 80067a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
 80067aa:	4b0d      	ldr	r3, [pc, #52]	; (80067e0 <interrupt_WallCut+0x770>)
 80067ac:	edc3 7a00 	vstr	s15, [r3]
 80067b0:	e078      	b.n	80068a4 <interrupt_WallCut+0x834>
 80067b2:	bf00      	nop
 80067b4:	f3af 8000 	nop.w
 80067b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80067bc:	3f50624d 	.word	0x3f50624d
 80067c0:	200005bc 	.word	0x200005bc
 80067c4:	200005d4 	.word	0x200005d4
 80067c8:	20000258 	.word	0x20000258
 80067cc:	2000025c 	.word	0x2000025c
 80067d0:	2000045c 	.word	0x2000045c
 80067d4:	20000600 	.word	0x20000600
 80067d8:	200005c8 	.word	0x200005c8
 80067dc:	200005ee 	.word	0x200005ee
 80067e0:	200005e8 	.word	0x200005e8
 80067e4:	200005f0 	.word	0x200005f0
 80067e8:	200005e0 	.word	0x200005e0
 80067ec:	200004d8 	.word	0x200004d8
 80067f0:	200002b8 	.word	0x200002b8
 80067f4:	455ac000 	.word	0x455ac000
 80067f8:	00000000 	.word	0x00000000
				}

			} else {
				NoWallCountL45slant++;
 80067fc:	4bac      	ldr	r3, [pc, #688]	; (8006ab0 <interrupt_WallCut+0xa40>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3301      	adds	r3, #1
 8006802:	4aab      	ldr	r2, [pc, #684]	; (8006ab0 <interrupt_WallCut+0xa40>)
 8006804:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006806:	4bab      	ldr	r3, [pc, #684]	; (8006ab4 <interrupt_WallCut+0xa44>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	f7f9 fec4 	bl	8000598 <__aeabi_f2d>
 8006810:	4604      	mov	r4, r0
 8006812:	460d      	mov	r5, r1
 8006814:	4ba8      	ldr	r3, [pc, #672]	; (8006ab8 <interrupt_WallCut+0xa48>)
 8006816:	ed93 7a00 	vldr	s14, [r3]
 800681a:	4ba8      	ldr	r3, [pc, #672]	; (8006abc <interrupt_WallCut+0xa4c>)
 800681c:	edd3 7a00 	vldr	s15, [r3]
 8006820:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006824:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006828:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800682c:	ee16 0a90 	vmov	r0, s13
 8006830:	f7f9 feb2 	bl	8000598 <__aeabi_f2d>
 8006834:	a39c      	add	r3, pc, #624	; (adr r3, 8006aa8 <interrupt_WallCut+0xa38>)
 8006836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683a:	f7f9 ff05 	bl	8000648 <__aeabi_dmul>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006842:	4620      	mov	r0, r4
 8006844:	4629      	mov	r1, r5
 8006846:	f7f9 fd49 	bl	80002dc <__adddf3>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	4610      	mov	r0, r2
 8006850:	4619      	mov	r1, r3
 8006852:	f7fa f9d1 	bl	8000bf8 <__aeabi_d2f>
 8006856:	4603      	mov	r3, r0
 8006858:	4a96      	ldr	r2, [pc, #600]	; (8006ab4 <interrupt_WallCut+0xa44>)
 800685a:	6013      	str	r3, [r2, #0]
				if (slantWallControlL_flag == 1) {
 800685c:	4b98      	ldr	r3, [pc, #608]	; (8006ac0 <interrupt_WallCut+0xa50>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d11f      	bne.n	80068a4 <interrupt_WallCut+0x834>
					NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8006864:	4b97      	ldr	r3, [pc, #604]	; (8006ac4 <interrupt_WallCut+0xa54>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4618      	mov	r0, r3
 800686a:	f7f9 fe95 	bl	8000598 <__aeabi_f2d>
 800686e:	4604      	mov	r4, r0
 8006870:	460d      	mov	r5, r1
 8006872:	4b95      	ldr	r3, [pc, #596]	; (8006ac8 <interrupt_WallCut+0xa58>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4618      	mov	r0, r3
 8006878:	f7f9 fe8e 	bl	8000598 <__aeabi_f2d>
 800687c:	a38a      	add	r3, pc, #552	; (adr r3, 8006aa8 <interrupt_WallCut+0xa38>)
 800687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006882:	f7f9 fee1 	bl	8000648 <__aeabi_dmul>
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	4620      	mov	r0, r4
 800688c:	4629      	mov	r1, r5
 800688e:	f7f9 fd25 	bl	80002dc <__adddf3>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4610      	mov	r0, r2
 8006898:	4619      	mov	r1, r3
 800689a:	f7fa f9ad 	bl	8000bf8 <__aeabi_d2f>
 800689e:	4603      	mov	r3, r0
 80068a0:	4a88      	ldr	r2, [pc, #544]	; (8006ac4 <interrupt_WallCut+0xa54>)
 80068a2:	6013      	str	r3, [r2, #0]
//					NoWallDisplacementL45slant += (E_speedL + E_speedR)
//							/ 2*INTERRUPT_TIME;
				}
			}

			slantWallControlL_flag = 1;
 80068a4:	4b86      	ldr	r3, [pc, #536]	; (8006ac0 <interrupt_WallCut+0xa50>)
 80068a6:	2201      	movs	r2, #1
 80068a8:	701a      	strb	r2, [r3, #0]
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 80068aa:	4b88      	ldr	r3, [pc, #544]	; (8006acc <interrupt_WallCut+0xa5c>)
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f113 0fef 	cmn.w	r3, #239	; 0xef
 80068b2:	db6a      	blt.n	800698a <interrupt_WallCut+0x91a>
				> WALLCUT_THRESHOLD_DIFF_R45_SLANT) {
			g_sensor_max_fr_slant = 0;				//CENTER_FR_SLANT;
 80068b4:	4b86      	ldr	r3, [pc, #536]	; (8006ad0 <interrupt_WallCut+0xa60>)
 80068b6:	f04f 0200 	mov.w	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]
			NoWallCountR45slant++;
 80068bc:	4b85      	ldr	r3, [pc, #532]	; (8006ad4 <interrupt_WallCut+0xa64>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3301      	adds	r3, #1
 80068c2:	4a84      	ldr	r2, [pc, #528]	; (8006ad4 <interrupt_WallCut+0xa64>)
 80068c4:	6013      	str	r3, [r2, #0]
			pl_r_blue_LED(0);
 80068c6:	2000      	movs	r0, #0
 80068c8:	f000 fb4e 	bl	8006f68 <pl_r_blue_LED>
			NoWallCountR45slant_flag = 0;
 80068cc:	4b82      	ldr	r3, [pc, #520]	; (8006ad8 <interrupt_WallCut+0xa68>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	701a      	strb	r2, [r3, #0]
//	 		NoWallDisplacementR45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 80068d2:	4b82      	ldr	r3, [pc, #520]	; (8006adc <interrupt_WallCut+0xa6c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7f9 fe5e 	bl	8000598 <__aeabi_f2d>
 80068dc:	4604      	mov	r4, r0
 80068de:	460d      	mov	r5, r1
 80068e0:	4b75      	ldr	r3, [pc, #468]	; (8006ab8 <interrupt_WallCut+0xa48>)
 80068e2:	ed93 7a00 	vldr	s14, [r3]
 80068e6:	4b75      	ldr	r3, [pc, #468]	; (8006abc <interrupt_WallCut+0xa4c>)
 80068e8:	edd3 7a00 	vldr	s15, [r3]
 80068ec:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 80068f0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80068f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80068f8:	ee16 0a90 	vmov	r0, s13
 80068fc:	f7f9 fe4c 	bl	8000598 <__aeabi_f2d>
 8006900:	a369      	add	r3, pc, #420	; (adr r3, 8006aa8 <interrupt_WallCut+0xa38>)
 8006902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006906:	f7f9 fe9f 	bl	8000648 <__aeabi_dmul>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 800690e:	4620      	mov	r0, r4
 8006910:	4629      	mov	r1, r5
 8006912:	f7f9 fce3 	bl	80002dc <__adddf3>
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	4610      	mov	r0, r2
 800691c:	4619      	mov	r1, r3
 800691e:	f7fa f96b 	bl	8000bf8 <__aeabi_d2f>
 8006922:	4603      	mov	r3, r0
 8006924:	4a6d      	ldr	r2, [pc, #436]	; (8006adc <interrupt_WallCut+0xa6c>)
 8006926:	6013      	str	r3, [r2, #0]
			if (slantWallControlR_flag == 1) {
 8006928:	4b6d      	ldr	r3, [pc, #436]	; (8006ae0 <interrupt_WallCut+0xa70>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	2b01      	cmp	r3, #1
 800692e:	f040 81a4 	bne.w	8006c7a <interrupt_WallCut+0xc0a>
//				NoWallDisplacementR45slant += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006932:	4b6c      	ldr	r3, [pc, #432]	; (8006ae4 <interrupt_WallCut+0xa74>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4618      	mov	r0, r3
 8006938:	f7f9 fe2e 	bl	8000598 <__aeabi_f2d>
 800693c:	4604      	mov	r4, r0
 800693e:	460d      	mov	r5, r1
 8006940:	4b5d      	ldr	r3, [pc, #372]	; (8006ab8 <interrupt_WallCut+0xa48>)
 8006942:	ed93 7a00 	vldr	s14, [r3]
 8006946:	4b5d      	ldr	r3, [pc, #372]	; (8006abc <interrupt_WallCut+0xa4c>)
 8006948:	edd3 7a00 	vldr	s15, [r3]
 800694c:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006950:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006954:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006958:	ee16 0a90 	vmov	r0, s13
 800695c:	f7f9 fe1c 	bl	8000598 <__aeabi_f2d>
 8006960:	a351      	add	r3, pc, #324	; (adr r3, 8006aa8 <interrupt_WallCut+0xa38>)
 8006962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006966:	f7f9 fe6f 	bl	8000648 <__aeabi_dmul>
 800696a:	4602      	mov	r2, r0
 800696c:	460b      	mov	r3, r1
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 800696e:	4620      	mov	r0, r4
 8006970:	4629      	mov	r1, r5
 8006972:	f7f9 fcb3 	bl	80002dc <__adddf3>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	4610      	mov	r0, r2
 800697c:	4619      	mov	r1, r3
 800697e:	f7fa f93b 	bl	8000bf8 <__aeabi_d2f>
 8006982:	4603      	mov	r3, r0
 8006984:	4a57      	ldr	r2, [pc, #348]	; (8006ae4 <interrupt_WallCut+0xa74>)
 8006986:	6013      	str	r3, [r2, #0]
		g_sensor_max_fl_slant = 0;
		g_sensor_max_fr_slant = 0;

	}

}
 8006988:	e177      	b.n	8006c7a <interrupt_WallCut+0xc0a>
			if (NoWallCountR45slant_flag == 0) {
 800698a:	4b53      	ldr	r3, [pc, #332]	; (8006ad8 <interrupt_WallCut+0xa68>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f040 80b0 	bne.w	8006af4 <interrupt_WallCut+0xa84>
				for (int i = 0; i <= 19; i++) {
 8006994:	2300      	movs	r3, #0
 8006996:	603b      	str	r3, [r7, #0]
 8006998:	e01f      	b.n	80069da <interrupt_WallCut+0x96a>
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 800699a:	4a53      	ldr	r2, [pc, #332]	; (8006ae8 <interrupt_WallCut+0xa78>)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	333c      	adds	r3, #60	; 0x3c
 80069a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069a4:	ee07 3a90 	vmov	s15, r3
 80069a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069ac:	4b48      	ldr	r3, [pc, #288]	; (8006ad0 <interrupt_WallCut+0xa60>)
 80069ae:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr_slant
 80069b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ba:	dd0b      	ble.n	80069d4 <interrupt_WallCut+0x964>
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 80069bc:	4a4a      	ldr	r2, [pc, #296]	; (8006ae8 <interrupt_WallCut+0xa78>)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	333c      	adds	r3, #60	; 0x3c
 80069c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c6:	ee07 3a90 	vmov	s15, r3
 80069ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr_slant =
 80069ce:	4b40      	ldr	r3, [pc, #256]	; (8006ad0 <interrupt_WallCut+0xa60>)
 80069d0:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	3301      	adds	r3, #1
 80069d8:	603b      	str	r3, [r7, #0]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b13      	cmp	r3, #19
 80069de:	dddc      	ble.n	800699a <interrupt_WallCut+0x92a>
				NoWallCountR45slant = 0;
 80069e0:	4b3c      	ldr	r3, [pc, #240]	; (8006ad4 <interrupt_WallCut+0xa64>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]
				NoWallCountR45slant_flag = 1;
 80069e6:	4b3c      	ldr	r3, [pc, #240]	; (8006ad8 <interrupt_WallCut+0xa68>)
 80069e8:	2201      	movs	r2, #1
 80069ea:	701a      	strb	r2, [r3, #0]
				pl_r_blue_LED(1);
 80069ec:	2001      	movs	r0, #1
 80069ee:	f000 fabb 	bl	8006f68 <pl_r_blue_LED>
				if (g_sensor_max_fr_slant - CENTER_FR_SLANT >= 0) {
 80069f2:	4b37      	ldr	r3, [pc, #220]	; (8006ad0 <interrupt_WallCut+0xa60>)
 80069f4:	edd3 7a00 	vldr	s15, [r3]
 80069f8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8006aec <interrupt_WallCut+0xa7c>
 80069fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a08:	db26      	blt.n	8006a58 <interrupt_WallCut+0x9e8>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006a0a:	4b31      	ldr	r3, [pc, #196]	; (8006ad0 <interrupt_WallCut+0xa60>)
 8006a0c:	edd3 7a00 	vldr	s15, [r3]
 8006a10:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006aec <interrupt_WallCut+0xa7c>
 8006a14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a18:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8006af0 <interrupt_WallCut+0xa80>
 8006a1c:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006a20:	4b2b      	ldr	r3, [pc, #172]	; (8006ad0 <interrupt_WallCut+0xa60>)
 8006a22:	ed93 7a00 	vldr	s14, [r3]
 8006a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT
 8006a2a:	4b2e      	ldr	r3, [pc, #184]	; (8006ae4 <interrupt_WallCut+0xa74>)
 8006a2c:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006a30:	4b27      	ldr	r3, [pc, #156]	; (8006ad0 <interrupt_WallCut+0xa60>)
 8006a32:	edd3 7a00 	vldr	s15, [r3]
 8006a36:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8006aec <interrupt_WallCut+0xa7c>
 8006a3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a3e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006af0 <interrupt_WallCut+0xa80>
 8006a42:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006a46:	4b22      	ldr	r3, [pc, #136]	; (8006ad0 <interrupt_WallCut+0xa60>)
 8006a48:	ed93 7a00 	vldr	s14, [r3]
 8006a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT
 8006a50:	4b22      	ldr	r3, [pc, #136]	; (8006adc <interrupt_WallCut+0xa6c>)
 8006a52:	edc3 7a00 	vstr	s15, [r3]
 8006a56:	e0ac      	b.n	8006bb2 <interrupt_WallCut+0xb42>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006a58:	4b1d      	ldr	r3, [pc, #116]	; (8006ad0 <interrupt_WallCut+0xa60>)
 8006a5a:	edd3 7a00 	vldr	s15, [r3]
 8006a5e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006aec <interrupt_WallCut+0xa7c>
 8006a62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a66:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006af0 <interrupt_WallCut+0xa80>
 8006a6a:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006a6e:	4b18      	ldr	r3, [pc, #96]	; (8006ad0 <interrupt_WallCut+0xa60>)
 8006a70:	ed93 7a00 	vldr	s14, [r3]
 8006a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT2
 8006a78:	4b1a      	ldr	r3, [pc, #104]	; (8006ae4 <interrupt_WallCut+0xa74>)
 8006a7a:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006a7e:	4b14      	ldr	r3, [pc, #80]	; (8006ad0 <interrupt_WallCut+0xa60>)
 8006a80:	edd3 7a00 	vldr	s15, [r3]
 8006a84:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006aec <interrupt_WallCut+0xa7c>
 8006a88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a8c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006af0 <interrupt_WallCut+0xa80>
 8006a90:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006a94:	4b0e      	ldr	r3, [pc, #56]	; (8006ad0 <interrupt_WallCut+0xa60>)
 8006a96:	ed93 7a00 	vldr	s14, [r3]
 8006a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT2
 8006a9e:	4b0f      	ldr	r3, [pc, #60]	; (8006adc <interrupt_WallCut+0xa6c>)
 8006aa0:	edc3 7a00 	vstr	s15, [r3]
 8006aa4:	e085      	b.n	8006bb2 <interrupt_WallCut+0xb42>
 8006aa6:	bf00      	nop
 8006aa8:	d2f1a9fc 	.word	0xd2f1a9fc
 8006aac:	3f50624d 	.word	0x3f50624d
 8006ab0:	200005c8 	.word	0x200005c8
 8006ab4:	200005e8 	.word	0x200005e8
 8006ab8:	20000258 	.word	0x20000258
 8006abc:	2000025c 	.word	0x2000025c
 8006ac0:	200005f0 	.word	0x200005f0
 8006ac4:	200005e0 	.word	0x200005e0
 8006ac8:	200004d8 	.word	0x200004d8
 8006acc:	2000045c 	.word	0x2000045c
 8006ad0:	20000604 	.word	0x20000604
 8006ad4:	200005c4 	.word	0x200005c4
 8006ad8:	200005ef 	.word	0x200005ef
 8006adc:	200005e4 	.word	0x200005e4
 8006ae0:	200005f1 	.word	0x200005f1
 8006ae4:	200005dc 	.word	0x200005dc
 8006ae8:	200002b8 	.word	0x200002b8
 8006aec:	455ac000 	.word	0x455ac000
 8006af0:	00000000 	.word	0x00000000
				NoWallCountR45slant++;
 8006af4:	4b66      	ldr	r3, [pc, #408]	; (8006c90 <interrupt_WallCut+0xc20>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3301      	adds	r3, #1
 8006afa:	4a65      	ldr	r2, [pc, #404]	; (8006c90 <interrupt_WallCut+0xc20>)
 8006afc:	6013      	str	r3, [r2, #0]
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006afe:	4b65      	ldr	r3, [pc, #404]	; (8006c94 <interrupt_WallCut+0xc24>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7f9 fd48 	bl	8000598 <__aeabi_f2d>
 8006b08:	4604      	mov	r4, r0
 8006b0a:	460d      	mov	r5, r1
 8006b0c:	4b62      	ldr	r3, [pc, #392]	; (8006c98 <interrupt_WallCut+0xc28>)
 8006b0e:	ed93 7a00 	vldr	s14, [r3]
 8006b12:	4b62      	ldr	r3, [pc, #392]	; (8006c9c <interrupt_WallCut+0xc2c>)
 8006b14:	edd3 7a00 	vldr	s15, [r3]
 8006b18:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006b1c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006b20:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006b24:	ee16 0a90 	vmov	r0, s13
 8006b28:	f7f9 fd36 	bl	8000598 <__aeabi_f2d>
 8006b2c:	a356      	add	r3, pc, #344	; (adr r3, 8006c88 <interrupt_WallCut+0xc18>)
 8006b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b32:	f7f9 fd89 	bl	8000648 <__aeabi_dmul>
 8006b36:	4602      	mov	r2, r0
 8006b38:	460b      	mov	r3, r1
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	f7f9 fbcd 	bl	80002dc <__adddf3>
 8006b42:	4602      	mov	r2, r0
 8006b44:	460b      	mov	r3, r1
 8006b46:	4610      	mov	r0, r2
 8006b48:	4619      	mov	r1, r3
 8006b4a:	f7fa f855 	bl	8000bf8 <__aeabi_d2f>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	4a50      	ldr	r2, [pc, #320]	; (8006c94 <interrupt_WallCut+0xc24>)
 8006b52:	6013      	str	r3, [r2, #0]
				if (slantWallControlR_flag == 1) {
 8006b54:	4b52      	ldr	r3, [pc, #328]	; (8006ca0 <interrupt_WallCut+0xc30>)
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d12a      	bne.n	8006bb2 <interrupt_WallCut+0xb42>
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006b5c:	4b51      	ldr	r3, [pc, #324]	; (8006ca4 <interrupt_WallCut+0xc34>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7f9 fd19 	bl	8000598 <__aeabi_f2d>
 8006b66:	4604      	mov	r4, r0
 8006b68:	460d      	mov	r5, r1
 8006b6a:	4b4b      	ldr	r3, [pc, #300]	; (8006c98 <interrupt_WallCut+0xc28>)
 8006b6c:	ed93 7a00 	vldr	s14, [r3]
 8006b70:	4b4a      	ldr	r3, [pc, #296]	; (8006c9c <interrupt_WallCut+0xc2c>)
 8006b72:	edd3 7a00 	vldr	s15, [r3]
 8006b76:	ee77 7a27 	vadd.f32	s15, s14, s15
							/ 2*INTERRUPT_TIME;
 8006b7a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006b7e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006b82:	ee16 0a90 	vmov	r0, s13
 8006b86:	f7f9 fd07 	bl	8000598 <__aeabi_f2d>
 8006b8a:	a33f      	add	r3, pc, #252	; (adr r3, 8006c88 <interrupt_WallCut+0xc18>)
 8006b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b90:	f7f9 fd5a 	bl	8000648 <__aeabi_dmul>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006b98:	4620      	mov	r0, r4
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	f7f9 fb9e 	bl	80002dc <__adddf3>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	f7fa f826 	bl	8000bf8 <__aeabi_d2f>
 8006bac:	4603      	mov	r3, r0
 8006bae:	4a3d      	ldr	r2, [pc, #244]	; (8006ca4 <interrupt_WallCut+0xc34>)
 8006bb0:	6013      	str	r3, [r2, #0]
			slantWallControlR_flag = 1;
 8006bb2:	4b3b      	ldr	r3, [pc, #236]	; (8006ca0 <interrupt_WallCut+0xc30>)
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	701a      	strb	r2, [r3, #0]
}
 8006bb8:	e05f      	b.n	8006c7a <interrupt_WallCut+0xc0a>
		NoWallCountL90 = 0;
 8006bba:	4b3b      	ldr	r3, [pc, #236]	; (8006ca8 <interrupt_WallCut+0xc38>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]
		NoWallCountR90 = 0;
 8006bc0:	4b3a      	ldr	r3, [pc, #232]	; (8006cac <interrupt_WallCut+0xc3c>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	601a      	str	r2, [r3, #0]
		NoWallCountL45 = 0;
 8006bc6:	4b3a      	ldr	r3, [pc, #232]	; (8006cb0 <interrupt_WallCut+0xc40>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
		NoWallCountR45 = 0;
 8006bcc:	4b39      	ldr	r3, [pc, #228]	; (8006cb4 <interrupt_WallCut+0xc44>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	601a      	str	r2, [r3, #0]
		NoWallCountL45slant = 0;
 8006bd2:	4b39      	ldr	r3, [pc, #228]	; (8006cb8 <interrupt_WallCut+0xc48>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	601a      	str	r2, [r3, #0]
		NoWallCountR45slant = 0;
 8006bd8:	4b2d      	ldr	r3, [pc, #180]	; (8006c90 <interrupt_WallCut+0xc20>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL90 = 0;
 8006bde:	4b37      	ldr	r3, [pc, #220]	; (8006cbc <interrupt_WallCut+0xc4c>)
 8006be0:	f04f 0200 	mov.w	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR90 = 0;
 8006be6:	4b36      	ldr	r3, [pc, #216]	; (8006cc0 <interrupt_WallCut+0xc50>)
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8006bee:	4b35      	ldr	r3, [pc, #212]	; (8006cc4 <interrupt_WallCut+0xc54>)
 8006bf0:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006bf4:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8006bf6:	4b34      	ldr	r3, [pc, #208]	; (8006cc8 <interrupt_WallCut+0xc58>)
 8006bf8:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006bfc:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant = 0;
 8006bfe:	4b33      	ldr	r3, [pc, #204]	; (8006ccc <interrupt_WallCut+0xc5c>)
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant = 0;
 8006c06:	4b27      	ldr	r3, [pc, #156]	; (8006ca4 <interrupt_WallCut+0xc34>)
 8006c08:	f04f 0200 	mov.w	r2, #0
 8006c0c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant2 = 0;			//単純な壁切れ用
 8006c0e:	4b30      	ldr	r3, [pc, #192]	; (8006cd0 <interrupt_WallCut+0xc60>)
 8006c10:	f04f 0200 	mov.w	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant2 = 0;			//単純な壁切れ用
 8006c16:	4b1f      	ldr	r3, [pc, #124]	; (8006c94 <interrupt_WallCut+0xc24>)
 8006c18:	f04f 0200 	mov.w	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
		NoWallCountL45_flag = 0;
 8006c1e:	4b2d      	ldr	r3, [pc, #180]	; (8006cd4 <interrupt_WallCut+0xc64>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	701a      	strb	r2, [r3, #0]
		NoWallCountR45_flag = 0;
 8006c24:	4b2c      	ldr	r3, [pc, #176]	; (8006cd8 <interrupt_WallCut+0xc68>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	701a      	strb	r2, [r3, #0]
		NoWallCountL45slant_flag = 0;
 8006c2a:	4b2c      	ldr	r3, [pc, #176]	; (8006cdc <interrupt_WallCut+0xc6c>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	701a      	strb	r2, [r3, #0]
		NoWallCountR45slant_flag = 0;
 8006c30:	4b2b      	ldr	r3, [pc, #172]	; (8006ce0 <interrupt_WallCut+0xc70>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	701a      	strb	r2, [r3, #0]
		slantWallControlL_flag = 0;
 8006c36:	4b2b      	ldr	r3, [pc, #172]	; (8006ce4 <interrupt_WallCut+0xc74>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	701a      	strb	r2, [r3, #0]
		slantWallControlR_flag = 0;
 8006c3c:	4b18      	ldr	r3, [pc, #96]	; (8006ca0 <interrupt_WallCut+0xc30>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	701a      	strb	r2, [r3, #0]
		front_wall_break_90 = 0;
 8006c42:	4b29      	ldr	r3, [pc, #164]	; (8006ce8 <interrupt_WallCut+0xc78>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	701a      	strb	r2, [r3, #0]
		front_wall_break_45 = 0;
 8006c48:	4b28      	ldr	r3, [pc, #160]	; (8006cec <interrupt_WallCut+0xc7c>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006c4e:	4b28      	ldr	r3, [pc, #160]	; (8006cf0 <interrupt_WallCut+0xc80>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006c54:	4b26      	ldr	r3, [pc, #152]	; (8006cf0 <interrupt_WallCut+0xc80>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	701a      	strb	r2, [r3, #0]
		g_sensor_max_fl = 0;
 8006c5a:	4b26      	ldr	r3, [pc, #152]	; (8006cf4 <interrupt_WallCut+0xc84>)
 8006c5c:	f04f 0200 	mov.w	r2, #0
 8006c60:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr = 0;
 8006c62:	4b25      	ldr	r3, [pc, #148]	; (8006cf8 <interrupt_WallCut+0xc88>)
 8006c64:	f04f 0200 	mov.w	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]
		g_sensor_max_fl_slant = 0;
 8006c6a:	4b24      	ldr	r3, [pc, #144]	; (8006cfc <interrupt_WallCut+0xc8c>)
 8006c6c:	f04f 0200 	mov.w	r2, #0
 8006c70:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr_slant = 0;
 8006c72:	4b23      	ldr	r3, [pc, #140]	; (8006d00 <interrupt_WallCut+0xc90>)
 8006c74:	f04f 0200 	mov.w	r2, #0
 8006c78:	601a      	str	r2, [r3, #0]
}
 8006c7a:	bf00      	nop
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bdb0      	pop	{r4, r5, r7, pc}
 8006c82:	bf00      	nop
 8006c84:	f3af 8000 	nop.w
 8006c88:	d2f1a9fc 	.word	0xd2f1a9fc
 8006c8c:	3f50624d 	.word	0x3f50624d
 8006c90:	200005c4 	.word	0x200005c4
 8006c94:	200005e4 	.word	0x200005e4
 8006c98:	20000258 	.word	0x20000258
 8006c9c:	2000025c 	.word	0x2000025c
 8006ca0:	200005f1 	.word	0x200005f1
 8006ca4:	200005dc 	.word	0x200005dc
 8006ca8:	200005b8 	.word	0x200005b8
 8006cac:	200005b4 	.word	0x200005b4
 8006cb0:	200005c0 	.word	0x200005c0
 8006cb4:	200005bc 	.word	0x200005bc
 8006cb8:	200005c8 	.word	0x200005c8
 8006cbc:	200005d0 	.word	0x200005d0
 8006cc0:	200005cc 	.word	0x200005cc
 8006cc4:	200005d8 	.word	0x200005d8
 8006cc8:	200005d4 	.word	0x200005d4
 8006ccc:	200005e0 	.word	0x200005e0
 8006cd0:	200005e8 	.word	0x200005e8
 8006cd4:	200005ec 	.word	0x200005ec
 8006cd8:	200005ed 	.word	0x200005ed
 8006cdc:	200005ee 	.word	0x200005ee
 8006ce0:	200005ef 	.word	0x200005ef
 8006ce4:	200005f0 	.word	0x200005f0
 8006ce8:	200005f2 	.word	0x200005f2
 8006cec:	200005f3 	.word	0x200005f3
 8006cf0:	200005f4 	.word	0x200005f4
 8006cf4:	200005f8 	.word	0x200005f8
 8006cf8:	200005fc 	.word	0x200005fc
 8006cfc:	20000600 	.word	0x20000600
 8006d00:	20000604 	.word	0x20000604

08006d04 <pl_yellow_LED_1>:
#include "gpio.h"
#include "main.h"



void pl_yellow_LED_1(int pin){
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,pin);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	461a      	mov	r2, r3
 8006d12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d1a:	f015 f9bb 	bl	801c094 <HAL_GPIO_WritePin>
}
 8006d1e:	bf00      	nop
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <pl_yellow_LED_3>:
void pl_yellow_LED_2(int pin){
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,pin);
}
void pl_yellow_LED_3(int pin){
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,pin);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	461a      	mov	r2, r3
 8006d36:	2140      	movs	r1, #64	; 0x40
 8006d38:	4803      	ldr	r0, [pc, #12]	; (8006d48 <pl_yellow_LED_3+0x20>)
 8006d3a:	f015 f9ab 	bl	801c094 <HAL_GPIO_WritePin>
}
 8006d3e:	bf00      	nop
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	48000800 	.word	0x48000800

08006d4c <pl_yellow_LED_6>:
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,pin);
}
void pl_yellow_LED_5(int pin){
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,pin);
}
void pl_yellow_LED_6(int pin){
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,pin);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	461a      	mov	r2, r3
 8006d5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d5e:	4803      	ldr	r0, [pc, #12]	; (8006d6c <pl_yellow_LED_6+0x20>)
 8006d60:	f015 f998 	bl	801c094 <HAL_GPIO_WritePin>
}
 8006d64:	bf00      	nop
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	48000400 	.word	0x48000400

08006d70 <pl_yellow_LED_8>:
void pl_yellow_LED_7(int pin){
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,pin);
}
void pl_yellow_LED_8(int pin){
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,pin);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d82:	4803      	ldr	r0, [pc, #12]	; (8006d90 <pl_yellow_LED_8+0x20>)
 8006d84:	f015 f986 	bl	801c094 <HAL_GPIO_WritePin>
}
 8006d88:	bf00      	nop
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	48000400 	.word	0x48000400

08006d94 <pl_yellow_LED_off>:




void pl_yellow_LED_off(void){
 8006d94:	b580      	push	{r7, lr}
 8006d96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006da2:	f015 f977 	bl	801c094 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8006da6:	2200      	movs	r2, #0
 8006da8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006db0:	f015 f970 	bl	801c094 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8006db4:	2200      	movs	r2, #0
 8006db6:	2140      	movs	r1, #64	; 0x40
 8006db8:	4811      	ldr	r0, [pc, #68]	; (8006e00 <pl_yellow_LED_off+0x6c>)
 8006dba:	f015 f96b 	bl	801c094 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006dc4:	480f      	ldr	r0, [pc, #60]	; (8006e04 <pl_yellow_LED_off+0x70>)
 8006dc6:	f015 f965 	bl	801c094 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006dd0:	480c      	ldr	r0, [pc, #48]	; (8006e04 <pl_yellow_LED_off+0x70>)
 8006dd2:	f015 f95f 	bl	801c094 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ddc:	4809      	ldr	r0, [pc, #36]	; (8006e04 <pl_yellow_LED_off+0x70>)
 8006dde:	f015 f959 	bl	801c094 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8006de2:	2200      	movs	r2, #0
 8006de4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006de8:	4806      	ldr	r0, [pc, #24]	; (8006e04 <pl_yellow_LED_off+0x70>)
 8006dea:	f015 f953 	bl	801c094 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8006dee:	2200      	movs	r2, #0
 8006df0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006df4:	4803      	ldr	r0, [pc, #12]	; (8006e04 <pl_yellow_LED_off+0x70>)
 8006df6:	f015 f94d 	bl	801c094 <HAL_GPIO_WritePin>
}
 8006dfa:	bf00      	nop
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	48000800 	.word	0x48000800
 8006e04:	48000400 	.word	0x48000400

08006e08 <pl_yellow_LED_count>:
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
}


void pl_yellow_LED_count(unsigned char yy){
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	4603      	mov	r3, r0
 8006e10:	71fb      	strb	r3, [r7, #7]

unsigned char yy1,yy2,yy3,yy4,yy5,yy6,yy7,yy8;

yy1 = yy & 1;
 8006e12:	79fb      	ldrb	r3, [r7, #7]
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	73fb      	strb	r3, [r7, #15]
yy2 = yy & 2;
 8006e1a:	79fb      	ldrb	r3, [r7, #7]
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	73bb      	strb	r3, [r7, #14]
yy3 = yy & 4;
 8006e22:	79fb      	ldrb	r3, [r7, #7]
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	737b      	strb	r3, [r7, #13]
yy4 = yy & 8;
 8006e2a:	79fb      	ldrb	r3, [r7, #7]
 8006e2c:	f003 0308 	and.w	r3, r3, #8
 8006e30:	733b      	strb	r3, [r7, #12]
yy5 = yy & 16;
 8006e32:	79fb      	ldrb	r3, [r7, #7]
 8006e34:	f003 0310 	and.w	r3, r3, #16
 8006e38:	72fb      	strb	r3, [r7, #11]
yy6 = yy & 32;
 8006e3a:	79fb      	ldrb	r3, [r7, #7]
 8006e3c:	f003 0320 	and.w	r3, r3, #32
 8006e40:	72bb      	strb	r3, [r7, #10]
yy7 = yy & 64;
 8006e42:	79fb      	ldrb	r3, [r7, #7]
 8006e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e48:	727b      	strb	r3, [r7, #9]
yy8 = yy & 128;
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e50:	723b      	strb	r3, [r7, #8]

if(yy1 >= 1){
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d007      	beq.n	8006e68 <pl_yellow_LED_count+0x60>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e62:	f015 f917 	bl	801c094 <HAL_GPIO_WritePin>
 8006e66:	e006      	b.n	8006e76 <pl_yellow_LED_count+0x6e>
}else{
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e72:	f015 f90f 	bl	801c094 <HAL_GPIO_WritePin>
}
if(yy2 >= 1){
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d007      	beq.n	8006e8c <pl_yellow_LED_count+0x84>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e86:	f015 f905 	bl	801c094 <HAL_GPIO_WritePin>
 8006e8a:	e006      	b.n	8006e9a <pl_yellow_LED_count+0x92>
}
else{
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e96:	f015 f8fd 	bl	801c094 <HAL_GPIO_WritePin>
}
if(yy3 >= 1){
 8006e9a:	7b7b      	ldrb	r3, [r7, #13]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <pl_yellow_LED_count+0xa4>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	2140      	movs	r1, #64	; 0x40
 8006ea4:	482e      	ldr	r0, [pc, #184]	; (8006f60 <pl_yellow_LED_count+0x158>)
 8006ea6:	f015 f8f5 	bl	801c094 <HAL_GPIO_WritePin>
 8006eaa:	e004      	b.n	8006eb6 <pl_yellow_LED_count+0xae>
}else{
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8006eac:	2200      	movs	r2, #0
 8006eae:	2140      	movs	r1, #64	; 0x40
 8006eb0:	482b      	ldr	r0, [pc, #172]	; (8006f60 <pl_yellow_LED_count+0x158>)
 8006eb2:	f015 f8ef 	bl	801c094 <HAL_GPIO_WritePin>
}
if(yy4 >= 1){
 8006eb6:	7b3b      	ldrb	r3, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d006      	beq.n	8006eca <pl_yellow_LED_count+0xc2>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ec2:	4828      	ldr	r0, [pc, #160]	; (8006f64 <pl_yellow_LED_count+0x15c>)
 8006ec4:	f015 f8e6 	bl	801c094 <HAL_GPIO_WritePin>
 8006ec8:	e005      	b.n	8006ed6 <pl_yellow_LED_count+0xce>
}else{
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ed0:	4824      	ldr	r0, [pc, #144]	; (8006f64 <pl_yellow_LED_count+0x15c>)
 8006ed2:	f015 f8df 	bl	801c094 <HAL_GPIO_WritePin>
}
if(yy5 >= 1){
 8006ed6:	7afb      	ldrb	r3, [r7, #11]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d006      	beq.n	8006eea <pl_yellow_LED_count+0xe2>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 8006edc:	2201      	movs	r2, #1
 8006ede:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ee2:	4820      	ldr	r0, [pc, #128]	; (8006f64 <pl_yellow_LED_count+0x15c>)
 8006ee4:	f015 f8d6 	bl	801c094 <HAL_GPIO_WritePin>
 8006ee8:	e005      	b.n	8006ef6 <pl_yellow_LED_count+0xee>
}else{
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8006eea:	2200      	movs	r2, #0
 8006eec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ef0:	481c      	ldr	r0, [pc, #112]	; (8006f64 <pl_yellow_LED_count+0x15c>)
 8006ef2:	f015 f8cf 	bl	801c094 <HAL_GPIO_WritePin>
}
if(yy6 >= 1){
 8006ef6:	7abb      	ldrb	r3, [r7, #10]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d006      	beq.n	8006f0a <pl_yellow_LED_count+0x102>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 8006efc:	2201      	movs	r2, #1
 8006efe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f02:	4818      	ldr	r0, [pc, #96]	; (8006f64 <pl_yellow_LED_count+0x15c>)
 8006f04:	f015 f8c6 	bl	801c094 <HAL_GPIO_WritePin>
 8006f08:	e005      	b.n	8006f16 <pl_yellow_LED_count+0x10e>
}else{
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f10:	4814      	ldr	r0, [pc, #80]	; (8006f64 <pl_yellow_LED_count+0x15c>)
 8006f12:	f015 f8bf 	bl	801c094 <HAL_GPIO_WritePin>
}
if(yy7 >= 1){
 8006f16:	7a7b      	ldrb	r3, [r7, #9]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d006      	beq.n	8006f2a <pl_yellow_LED_count+0x122>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f22:	4810      	ldr	r0, [pc, #64]	; (8006f64 <pl_yellow_LED_count+0x15c>)
 8006f24:	f015 f8b6 	bl	801c094 <HAL_GPIO_WritePin>
 8006f28:	e005      	b.n	8006f36 <pl_yellow_LED_count+0x12e>
}else{
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f30:	480c      	ldr	r0, [pc, #48]	; (8006f64 <pl_yellow_LED_count+0x15c>)
 8006f32:	f015 f8af 	bl	801c094 <HAL_GPIO_WritePin>
}
if(yy8 >= 1){
 8006f36:	7a3b      	ldrb	r3, [r7, #8]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d006      	beq.n	8006f4a <pl_yellow_LED_count+0x142>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f42:	4808      	ldr	r0, [pc, #32]	; (8006f64 <pl_yellow_LED_count+0x15c>)
 8006f44:	f015 f8a6 	bl	801c094 <HAL_GPIO_WritePin>
}else{
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
}
}
 8006f48:	e005      	b.n	8006f56 <pl_yellow_LED_count+0x14e>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f50:	4804      	ldr	r0, [pc, #16]	; (8006f64 <pl_yellow_LED_count+0x15c>)
 8006f52:	f015 f89f 	bl	801c094 <HAL_GPIO_WritePin>
}
 8006f56:	bf00      	nop
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	48000800 	.word	0x48000800
 8006f64:	48000400 	.word	0x48000400

08006f68 <pl_r_blue_LED>:


void pl_r_blue_LED(int pin){
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,pin);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f7a:	4803      	ldr	r0, [pc, #12]	; (8006f88 <pl_r_blue_LED+0x20>)
 8006f7c:	f015 f88a 	bl	801c094 <HAL_GPIO_WritePin>
}
 8006f80:	bf00      	nop
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	48000800 	.word	0x48000800

08006f8c <pl_l_blue_LED>:

void pl_l_blue_LED(int pin){
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,pin);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	461a      	mov	r2, r3
 8006f9a:	2104      	movs	r1, #4
 8006f9c:	4803      	ldr	r0, [pc, #12]	; (8006fac <pl_l_blue_LED+0x20>)
 8006f9e:	f015 f879 	bl	801c094 <HAL_GPIO_WritePin>
}
 8006fa2:	bf00      	nop
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	48000400 	.word	0x48000400

08006fb0 <encoder_read_byte_R>:
#include "spi.h"
#include <stdio.h>

float encoder_R,encoder_L;

uint16_t encoder_read_byte_R(uint16_t address,uint16_t data){
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	460a      	mov	r2, r1
 8006fba:	80fb      	strh	r3, [r7, #6]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	2110      	movs	r1, #16
 8006fc4:	4833      	ldr	r0, [pc, #204]	; (8007094 <encoder_read_byte_R+0xe4>)
 8006fc6:	f015 f865 	bl	801c094 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 8006fca:	88fb      	ldrh	r3, [r7, #6]
 8006fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fd0:	80fb      	strh	r3, [r7, #6]
	parity=0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	61bb      	str	r3, [r7, #24]
 8006fda:	e00d      	b.n	8006ff8 <encoder_read_byte_R+0x48>
 8006fdc:	88fa      	ldrh	r2, [r7, #6]
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	fa42 f303 	asr.w	r3, r2, r3
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	8bfb      	ldrh	r3, [r7, #30]
 8006fee:	4413      	add	r3, r2
 8006ff0:	83fb      	strh	r3, [r7, #30]
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	61bb      	str	r3, [r7, #24]
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	2b0e      	cmp	r3, #14
 8006ffc:	ddee      	ble.n	8006fdc <encoder_read_byte_R+0x2c>
	address = address | ((parity % 2) << 15);
 8006ffe:	8bfb      	ldrh	r3, [r7, #30]
 8007000:	03db      	lsls	r3, r3, #15
 8007002:	b21a      	sxth	r2, r3
 8007004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007008:	4313      	orrs	r3, r2
 800700a:	b21b      	sxth	r3, r3
 800700c:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 800700e:	88fb      	ldrh	r3, [r7, #6]
 8007010:	0a1b      	lsrs	r3, r3, #8
 8007012:	b29b      	uxth	r3, r3
 8007014:	b2db      	uxtb	r3, r3
 8007016:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007018:	88fb      	ldrh	r3, [r7, #6]
 800701a:	b2db      	uxtb	r3, r3
 800701c:	747b      	strb	r3, [r7, #17]


	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 800701e:	f107 0110 	add.w	r1, r7, #16
 8007022:	2364      	movs	r3, #100	; 0x64
 8007024:	2202      	movs	r2, #2
 8007026:	481c      	ldr	r0, [pc, #112]	; (8007098 <encoder_read_byte_R+0xe8>)
 8007028:	f016 f917 	bl	801d25a <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, address, 2, 100);

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 800702c:	2201      	movs	r2, #1
 800702e:	2110      	movs	r1, #16
 8007030:	4818      	ldr	r0, [pc, #96]	; (8007094 <encoder_read_byte_R+0xe4>)
 8007032:	f015 f82f 	bl	801c094 <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 8007036:	2300      	movs	r3, #0
 8007038:	617b      	str	r3, [r7, #20]
 800703a:	e002      	b.n	8007042 <encoder_read_byte_R+0x92>
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	3301      	adds	r3, #1
 8007040:	617b      	str	r3, [r7, #20]
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2b95      	cmp	r3, #149	; 0x95
 8007046:	ddf9      	ble.n	800703c <encoder_read_byte_R+0x8c>

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007048:	2200      	movs	r2, #0
 800704a:	2110      	movs	r1, #16
 800704c:	4811      	ldr	r0, [pc, #68]	; (8007094 <encoder_read_byte_R+0xe4>)
 800704e:	f015 f821 	bl	801c094 <HAL_GPIO_WritePin>

//	data=0xC000;
	dataBuffer[0]=data>>8;
 8007052:	88bb      	ldrh	r3, [r7, #4]
 8007054:	0a1b      	lsrs	r3, r3, #8
 8007056:	b29b      	uxth	r3, r3
 8007058:	b2db      	uxtb	r3, r3
 800705a:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 800705c:	88bb      	ldrh	r3, [r7, #4]
 800705e:	b2db      	uxtb	r3, r3
 8007060:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 8007062:	f107 010c 	add.w	r1, r7, #12
 8007066:	2364      	movs	r3, #100	; 0x64
 8007068:	2202      	movs	r2, #2
 800706a:	480b      	ldr	r0, [pc, #44]	; (8007098 <encoder_read_byte_R+0xe8>)
 800706c:	f016 fa63 	bl	801d536 <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007070:	7b3b      	ldrb	r3, [r7, #12]
 8007072:	021b      	lsls	r3, r3, #8
 8007074:	b21a      	sxth	r2, r3
 8007076:	7b7b      	ldrb	r3, [r7, #13]
 8007078:	b21b      	sxth	r3, r3
 800707a:	4313      	orrs	r3, r2
 800707c:	b21b      	sxth	r3, r3
 800707e:	80bb      	strh	r3, [r7, #4]
//	HAL_SPI_Transmit(&hspi3, data, 2, 100);
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007080:	2201      	movs	r2, #1
 8007082:	2110      	movs	r1, #16
 8007084:	4803      	ldr	r0, [pc, #12]	; (8007094 <encoder_read_byte_R+0xe4>)
 8007086:	f015 f805 	bl	801c094 <HAL_GPIO_WritePin>

	return data;
 800708a:	88bb      	ldrh	r3, [r7, #4]

}
 800708c:	4618      	mov	r0, r3
 800708e:	3720      	adds	r7, #32
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	48000400 	.word	0x48000400
 8007098:	2000ee34 	.word	0x2000ee34

0800709c <encoder_read_byte_L>:
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;

}


uint16_t encoder_read_byte_L(uint16_t address,uint16_t data){
 800709c:	b580      	push	{r7, lr}
 800709e:	b088      	sub	sp, #32
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	4603      	mov	r3, r0
 80070a4:	460a      	mov	r2, r1
 80070a6:	80fb      	strh	r3, [r7, #6]
 80070a8:	4613      	mov	r3, r2
 80070aa:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80070ac:	2200      	movs	r2, #0
 80070ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070b6:	f014 ffed 	bl	801c094 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 80070ba:	88fb      	ldrh	r3, [r7, #6]
 80070bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070c0:	80fb      	strh	r3, [r7, #6]
	parity=0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 80070c6:	2300      	movs	r3, #0
 80070c8:	61bb      	str	r3, [r7, #24]
 80070ca:	e00d      	b.n	80070e8 <encoder_read_byte_L+0x4c>
 80070cc:	88fa      	ldrh	r2, [r7, #6]
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	fa42 f303 	asr.w	r3, r2, r3
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	b29a      	uxth	r2, r3
 80070dc:	8bfb      	ldrh	r3, [r7, #30]
 80070de:	4413      	add	r3, r2
 80070e0:	83fb      	strh	r3, [r7, #30]
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	3301      	adds	r3, #1
 80070e6:	61bb      	str	r3, [r7, #24]
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	2b0e      	cmp	r3, #14
 80070ec:	ddee      	ble.n	80070cc <encoder_read_byte_L+0x30>
	address = address | ((parity % 2) << 15);
 80070ee:	8bfb      	ldrh	r3, [r7, #30]
 80070f0:	03db      	lsls	r3, r3, #15
 80070f2:	b21a      	sxth	r2, r3
 80070f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	b21b      	sxth	r3, r3
 80070fc:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 80070fe:	88fb      	ldrh	r3, [r7, #6]
 8007100:	0a1b      	lsrs	r3, r3, #8
 8007102:	b29b      	uxth	r3, r3
 8007104:	b2db      	uxtb	r3, r3
 8007106:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007108:	88fb      	ldrh	r3, [r7, #6]
 800710a:	b2db      	uxtb	r3, r3
 800710c:	747b      	strb	r3, [r7, #17]

	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 800710e:	f107 0110 	add.w	r1, r7, #16
 8007112:	2364      	movs	r3, #100	; 0x64
 8007114:	2202      	movs	r2, #2
 8007116:	481e      	ldr	r0, [pc, #120]	; (8007190 <encoder_read_byte_L+0xf4>)
 8007118:	f016 f89f 	bl	801d25a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 800711c:	2201      	movs	r2, #1
 800711e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007126:	f014 ffb5 	bl	801c094 <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 800712a:	2300      	movs	r3, #0
 800712c:	617b      	str	r3, [r7, #20]
 800712e:	e002      	b.n	8007136 <encoder_read_byte_L+0x9a>
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	3301      	adds	r3, #1
 8007134:	617b      	str	r3, [r7, #20]
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2b95      	cmp	r3, #149	; 0x95
 800713a:	ddf9      	ble.n	8007130 <encoder_read_byte_L+0x94>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 800713c:	2200      	movs	r2, #0
 800713e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007146:	f014 ffa5 	bl	801c094 <HAL_GPIO_WritePin>

//	data=0x0000;
	dataBuffer[0]=data>>8;
 800714a:	88bb      	ldrh	r3, [r7, #4]
 800714c:	0a1b      	lsrs	r3, r3, #8
 800714e:	b29b      	uxth	r3, r3
 8007150:	b2db      	uxtb	r3, r3
 8007152:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8007154:	88bb      	ldrh	r3, [r7, #4]
 8007156:	b2db      	uxtb	r3, r3
 8007158:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 800715a:	f107 010c 	add.w	r1, r7, #12
 800715e:	2364      	movs	r3, #100	; 0x64
 8007160:	2202      	movs	r2, #2
 8007162:	480b      	ldr	r0, [pc, #44]	; (8007190 <encoder_read_byte_L+0xf4>)
 8007164:	f016 f9e7 	bl	801d536 <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007168:	7b3b      	ldrb	r3, [r7, #12]
 800716a:	021b      	lsls	r3, r3, #8
 800716c:	b21a      	sxth	r2, r3
 800716e:	7b7b      	ldrb	r3, [r7, #13]
 8007170:	b21b      	sxth	r3, r3
 8007172:	4313      	orrs	r3, r2
 8007174:	b21b      	sxth	r3, r3
 8007176:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007178:	2201      	movs	r2, #1
 800717a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800717e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007182:	f014 ff87 	bl	801c094 <HAL_GPIO_WritePin>

	return data;
 8007186:	88bb      	ldrh	r3, [r7, #4]

}
 8007188:	4618      	mov	r0, r3
 800718a:	3720      	adds	r7, #32
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	2000ee34 	.word	0x2000ee34

08007194 <AS5047_DataUpdate>:

}



void AS5047_DataUpdate(void){
 8007194:	b580      	push	{r7, lr}
 8007196:	af00      	add	r7, sp, #0

		//encoder_read_byte_L(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_R=(float)(encoder_read_byte_R(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 8007198:	2100      	movs	r1, #0
 800719a:	f643 70ff 	movw	r0, #16383	; 0x3fff
 800719e:	f7ff ff07 	bl	8006fb0 <encoder_read_byte_R>
 80071a2:	4603      	mov	r3, r0
 80071a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071b0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80071f8 <AS5047_DataUpdate+0x64>
 80071b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80071b8:	eddf 6a10 	vldr	s13, [pc, #64]	; 80071fc <AS5047_DataUpdate+0x68>
 80071bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071c0:	4b0f      	ldr	r3, [pc, #60]	; (8007200 <AS5047_DataUpdate+0x6c>)
 80071c2:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(500);

		//encoder_read_byte_R(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_L=(float)(encoder_read_byte_L(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 80071c6:	2100      	movs	r1, #0
 80071c8:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80071cc:	f7ff ff66 	bl	800709c <encoder_read_byte_L>
 80071d0:	4603      	mov	r3, r0
 80071d2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071de:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80071f8 <AS5047_DataUpdate+0x64>
 80071e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80071e6:	eddf 6a05 	vldr	s13, [pc, #20]	; 80071fc <AS5047_DataUpdate+0x68>
 80071ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071ee:	4b05      	ldr	r3, [pc, #20]	; (8007204 <AS5047_DataUpdate+0x70>)
 80071f0:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(5);

}
 80071f4:	bf00      	nop
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	43b40000 	.word	0x43b40000
 80071fc:	46800000 	.word	0x46800000
 8007200:	200006d8 	.word	0x200006d8
 8007204:	200006dc 	.word	0x200006dc

08007208 <test_flash>:


const uint32_t start_address = 0x807F000; //bank1 page last start address
const uint32_t end_adress = 0x807FFFF; // bank1 page last end address

void test_flash(void){
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
		  record_out();
 800720c:	f000 f91a 	bl	8007444 <record_out>
		  maze_display();
 8007210:	f00d fdf8 	bl	8014e04 <maze_display>
		  flash_record_init();
 8007214:	f000 f9c2 	bl	800759c <flash_record_init>
		  record_in();
 8007218:	f000 f858 	bl	80072cc <record_in>
}
 800721c:	bf00      	nop
 800721e:	bd80      	pop	{r7, pc}

08007220 <eraseFlash>:


void eraseFlash( void )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_PAGES;	// select page
 8007226:	2300      	movs	r3, #0
 8007228:	60bb      	str	r3, [r7, #8]
	erase.Banks = FLASH_BANK_1;		       // set bank1
 800722a:	2301      	movs	r3, #1
 800722c:	60fb      	str	r3, [r7, #12]
	erase.Page = 254;// set page254(127)
 800722e:	23fe      	movs	r3, #254	; 0xfe
 8007230:	613b      	str	r3, [r7, #16]
	erase.NbPages = 1;//delete page
 8007232:	2301      	movs	r3, #1
 8007234:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	607b      	str	r3, [r7, #4]

	HAL_FLASHEx_Erase(&erase, &pageError);	// erase sector
 800723a:	1d3a      	adds	r2, r7, #4
 800723c:	f107 0308 	add.w	r3, r7, #8
 8007240:	4611      	mov	r1, r2
 8007242:	4618      	mov	r0, r3
 8007244:	f014 fc7e 	bl	801bb44 <HAL_FLASHEx_Erase>

//	for (int i=0;i<10;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 8007248:	bf00      	nop
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <writeFlash>:


void writeFlash(uint32_t address, uint64_t *data, uint32_t size,uint8_t erasemode)
{
 8007250:	b5b0      	push	{r4, r5, r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
 800725c:	70fb      	strb	r3, [r7, #3]
	HAL_FLASH_Unlock();		// unlock flash
 800725e:	f014 fb85 	bl	801b96c <HAL_FLASH_Unlock>
	if(erasemode==1){eraseFlash();}
 8007262:	78fb      	ldrb	r3, [r7, #3]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d101      	bne.n	800726c <writeFlash+0x1c>
 8007268:	f7ff ffda 	bl	8007220 <eraseFlash>

	for ( uint32_t add = address; add < (address + size); add+=8 ){
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	e00f      	b.n	8007292 <writeFlash+0x42>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, add, (uint64_t *)data); // write byte
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	17da      	asrs	r2, r3, #31
 8007276:	461c      	mov	r4, r3
 8007278:	4615      	mov	r5, r2
 800727a:	4622      	mov	r2, r4
 800727c:	462b      	mov	r3, r5
 800727e:	6979      	ldr	r1, [r7, #20]
 8007280:	2000      	movs	r0, #0
 8007282:	f014 fb1d 	bl	801b8c0 <HAL_FLASH_Program>
		data=data+4;  // add data pointer
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	3320      	adds	r3, #32
 800728a:	60bb      	str	r3, [r7, #8]
	for ( uint32_t add = address; add < (address + size); add+=8 ){
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	3308      	adds	r3, #8
 8007290:	617b      	str	r3, [r7, #20]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4413      	add	r3, r2
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	429a      	cmp	r2, r3
 800729c:	d3e9      	bcc.n	8007272 <writeFlash+0x22>
	}

	HAL_FLASH_Lock();		// lock flash
 800729e:	f014 fb87 	bl	801b9b0 <HAL_FLASH_Lock>

}
 80072a2:	bf00      	nop
 80072a4:	3718      	adds	r7, #24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bdb0      	pop	{r4, r5, r7, pc}

080072aa <loadFlash>:

void loadFlash(uint32_t address, uint64_t *data, uint32_t size )
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b084      	sub	sp, #16
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*)address,size); // copy data
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	4619      	mov	r1, r3
 80072bc:	68b8      	ldr	r0, [r7, #8]
 80072be:	f018 ffff 	bl	80202c0 <memcpy>

}
 80072c2:	bf00      	nop
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
	...

080072cc <record_in>:


void record_in(void) {
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
	int t = 0;
 80072d2:	2300      	movs	r3, #0
 80072d4:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 80072d6:	4b58      	ldr	r3, [pc, #352]	; (8007438 <record_in+0x16c>)
 80072d8:	603b      	str	r3, [r7, #0]

	while (t <= 14) {
 80072da:	e017      	b.n	800730c <record_in+0x40>
		record.row[t] = wall.row[t];
 80072dc:	4a57      	ldr	r2, [pc, #348]	; (800743c <record_in+0x170>)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80072e4:	4a56      	ldr	r2, [pc, #344]	; (8007440 <record_in+0x174>)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[t] = wall.column[t];
 80072ec:	4a53      	ldr	r2, [pc, #332]	; (800743c <record_in+0x170>)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	330c      	adds	r3, #12
 80072f2:	005b      	lsls	r3, r3, #1
 80072f4:	4413      	add	r3, r2
 80072f6:	88d9      	ldrh	r1, [r3, #6]
 80072f8:	4a51      	ldr	r2, [pc, #324]	; (8007440 <record_in+0x174>)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	330c      	adds	r3, #12
 80072fe:	005b      	lsls	r3, r3, #1
 8007300:	4413      	add	r3, r2
 8007302:	460a      	mov	r2, r1
 8007304:	80da      	strh	r2, [r3, #6]
		t++;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	3301      	adds	r3, #1
 800730a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b0e      	cmp	r3, #14
 8007310:	dde4      	ble.n	80072dc <record_in+0x10>
	}
	t = 0;
 8007312:	2300      	movs	r3, #0
 8007314:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007316:	e01c      	b.n	8007352 <record_in+0x86>
		record.row_look[t] = wall.row_look[t];
 8007318:	4a48      	ldr	r2, [pc, #288]	; (800743c <record_in+0x170>)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	331c      	adds	r3, #28
 800731e:	005b      	lsls	r3, r3, #1
 8007320:	4413      	add	r3, r2
 8007322:	8899      	ldrh	r1, [r3, #4]
 8007324:	4a46      	ldr	r2, [pc, #280]	; (8007440 <record_in+0x174>)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	331c      	adds	r3, #28
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	4413      	add	r3, r2
 800732e:	460a      	mov	r2, r1
 8007330:	809a      	strh	r2, [r3, #4]
		record.column_look[t] = wall.column_look[t];
 8007332:	4a42      	ldr	r2, [pc, #264]	; (800743c <record_in+0x170>)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	332c      	adds	r3, #44	; 0x2c
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	4413      	add	r3, r2
 800733c:	8859      	ldrh	r1, [r3, #2]
 800733e:	4a40      	ldr	r2, [pc, #256]	; (8007440 <record_in+0x174>)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	332c      	adds	r3, #44	; 0x2c
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	4413      	add	r3, r2
 8007348:	460a      	mov	r2, r1
 800734a:	805a      	strh	r2, [r3, #2]
		t++;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3301      	adds	r3, #1
 8007350:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b0e      	cmp	r3, #14
 8007356:	dddf      	ble.n	8007318 <record_in+0x4c>
	}
	t = 0;
 8007358:	2300      	movs	r3, #0
 800735a:	607b      	str	r3, [r7, #4]

	writeFlash(address, (uint64_t*) record.row[0], 1, ON);
 800735c:	4b38      	ldr	r3, [pc, #224]	; (8007440 <record_in+0x174>)
 800735e:	881b      	ldrh	r3, [r3, #0]
 8007360:	4619      	mov	r1, r3
 8007362:	2301      	movs	r3, #1
 8007364:	2201      	movs	r2, #1
 8007366:	6838      	ldr	r0, [r7, #0]
 8007368:	f7ff ff72 	bl	8007250 <writeFlash>
	address+=16;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	3310      	adds	r3, #16
 8007370:	603b      	str	r3, [r7, #0]
	t=1;
 8007372:	2301      	movs	r3, #1
 8007374:	607b      	str	r3, [r7, #4]

	while (t <= 14) {
 8007376:	e00f      	b.n	8007398 <record_in+0xcc>
	writeFlash(address, (uint64_t*) record.row[t], 1, OFF);
 8007378:	4a31      	ldr	r2, [pc, #196]	; (8007440 <record_in+0x174>)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007380:	4619      	mov	r1, r3
 8007382:	2300      	movs	r3, #0
 8007384:	2201      	movs	r2, #1
 8007386:	6838      	ldr	r0, [r7, #0]
 8007388:	f7ff ff62 	bl	8007250 <writeFlash>
	address+=16;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	3310      	adds	r3, #16
 8007390:	603b      	str	r3, [r7, #0]
	t++;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3301      	adds	r3, #1
 8007396:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b0e      	cmp	r3, #14
 800739c:	ddec      	ble.n	8007378 <record_in+0xac>
	}

	t=0;
 800739e:	2300      	movs	r3, #0
 80073a0:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80073a2:	e011      	b.n	80073c8 <record_in+0xfc>
	writeFlash(address, (uint64_t*) record.column[t], 1, OFF);
 80073a4:	4a26      	ldr	r2, [pc, #152]	; (8007440 <record_in+0x174>)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	330c      	adds	r3, #12
 80073aa:	005b      	lsls	r3, r3, #1
 80073ac:	4413      	add	r3, r2
 80073ae:	88db      	ldrh	r3, [r3, #6]
 80073b0:	4619      	mov	r1, r3
 80073b2:	2300      	movs	r3, #0
 80073b4:	2201      	movs	r2, #1
 80073b6:	6838      	ldr	r0, [r7, #0]
 80073b8:	f7ff ff4a 	bl	8007250 <writeFlash>
	address+=16;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	3310      	adds	r3, #16
 80073c0:	603b      	str	r3, [r7, #0]
	t++;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	3301      	adds	r3, #1
 80073c6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b0e      	cmp	r3, #14
 80073cc:	ddea      	ble.n	80073a4 <record_in+0xd8>
	}

	t=0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80073d2:	e011      	b.n	80073f8 <record_in+0x12c>
	writeFlash(address, (uint64_t*) record.row_look[t], 1, OFF);
 80073d4:	4a1a      	ldr	r2, [pc, #104]	; (8007440 <record_in+0x174>)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	331c      	adds	r3, #28
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	4413      	add	r3, r2
 80073de:	889b      	ldrh	r3, [r3, #4]
 80073e0:	4619      	mov	r1, r3
 80073e2:	2300      	movs	r3, #0
 80073e4:	2201      	movs	r2, #1
 80073e6:	6838      	ldr	r0, [r7, #0]
 80073e8:	f7ff ff32 	bl	8007250 <writeFlash>
	address+=16;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	3310      	adds	r3, #16
 80073f0:	603b      	str	r3, [r7, #0]
	t++;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3301      	adds	r3, #1
 80073f6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b0e      	cmp	r3, #14
 80073fc:	ddea      	ble.n	80073d4 <record_in+0x108>
	}

	t=0;
 80073fe:	2300      	movs	r3, #0
 8007400:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007402:	e011      	b.n	8007428 <record_in+0x15c>
	writeFlash(address, (uint64_t*) record.column_look[t], 1, OFF);
 8007404:	4a0e      	ldr	r2, [pc, #56]	; (8007440 <record_in+0x174>)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	332c      	adds	r3, #44	; 0x2c
 800740a:	005b      	lsls	r3, r3, #1
 800740c:	4413      	add	r3, r2
 800740e:	885b      	ldrh	r3, [r3, #2]
 8007410:	4619      	mov	r1, r3
 8007412:	2300      	movs	r3, #0
 8007414:	2201      	movs	r2, #1
 8007416:	6838      	ldr	r0, [r7, #0]
 8007418:	f7ff ff1a 	bl	8007250 <writeFlash>
	address+=16;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	3310      	adds	r3, #16
 8007420:	603b      	str	r3, [r7, #0]
	t++;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3301      	adds	r3, #1
 8007426:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b0e      	cmp	r3, #14
 800742c:	ddea      	ble.n	8007404 <record_in+0x138>

//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 800742e:	bf00      	nop
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	0807f000 	.word	0x0807f000
 800743c:	20000c3c 	.word	0x20000c3c
 8007440:	20000cb4 	.word	0x20000cb4

08007444 <record_out>:


void record_out(void) {
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

	int t=0;
 800744a:	2300      	movs	r3, #0
 800744c:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 800744e:	4b50      	ldr	r3, [pc, #320]	; (8007590 <record_out+0x14c>)
 8007450:	603b      	str	r3, [r7, #0]
	while (t <= 14) {
 8007452:	e00e      	b.n	8007472 <record_out+0x2e>
	loadFlash(address, (uint64_t*)&record.row[t], 2);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	005b      	lsls	r3, r3, #1
 8007458:	4a4e      	ldr	r2, [pc, #312]	; (8007594 <record_out+0x150>)
 800745a:	4413      	add	r3, r2
 800745c:	2202      	movs	r2, #2
 800745e:	4619      	mov	r1, r3
 8007460:	6838      	ldr	r0, [r7, #0]
 8007462:	f7ff ff22 	bl	80072aa <loadFlash>
	address+=16;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	3310      	adds	r3, #16
 800746a:	603b      	str	r3, [r7, #0]
	t++;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	3301      	adds	r3, #1
 8007470:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b0e      	cmp	r3, #14
 8007476:	dded      	ble.n	8007454 <record_out+0x10>
	}

	t=0;
 8007478:	2300      	movs	r3, #0
 800747a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800747c:	e010      	b.n	80074a0 <record_out+0x5c>
	loadFlash(address, (uint64_t*)&record.column[t], 2);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	330c      	adds	r3, #12
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	4a43      	ldr	r2, [pc, #268]	; (8007594 <record_out+0x150>)
 8007486:	4413      	add	r3, r2
 8007488:	3306      	adds	r3, #6
 800748a:	2202      	movs	r2, #2
 800748c:	4619      	mov	r1, r3
 800748e:	6838      	ldr	r0, [r7, #0]
 8007490:	f7ff ff0b 	bl	80072aa <loadFlash>
	address+=16;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	3310      	adds	r3, #16
 8007498:	603b      	str	r3, [r7, #0]
	t++;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3301      	adds	r3, #1
 800749e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b0e      	cmp	r3, #14
 80074a4:	ddeb      	ble.n	800747e <record_out+0x3a>
	}

	t=0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074aa:	e010      	b.n	80074ce <record_out+0x8a>
		loadFlash(address, (uint64_t*)&record.row_look[t], 2);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	331c      	adds	r3, #28
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	4a38      	ldr	r2, [pc, #224]	; (8007594 <record_out+0x150>)
 80074b4:	4413      	add	r3, r2
 80074b6:	3304      	adds	r3, #4
 80074b8:	2202      	movs	r2, #2
 80074ba:	4619      	mov	r1, r3
 80074bc:	6838      	ldr	r0, [r7, #0]
 80074be:	f7ff fef4 	bl	80072aa <loadFlash>
		address+=16;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	3310      	adds	r3, #16
 80074c6:	603b      	str	r3, [r7, #0]
		t++;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3301      	adds	r3, #1
 80074cc:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b0e      	cmp	r3, #14
 80074d2:	ddeb      	ble.n	80074ac <record_out+0x68>
	}

	t=0;
 80074d4:	2300      	movs	r3, #0
 80074d6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074d8:	e010      	b.n	80074fc <record_out+0xb8>
		loadFlash(address, (uint64_t*)&record.column_look[t], 2);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	332c      	adds	r3, #44	; 0x2c
 80074de:	005b      	lsls	r3, r3, #1
 80074e0:	4a2c      	ldr	r2, [pc, #176]	; (8007594 <record_out+0x150>)
 80074e2:	4413      	add	r3, r2
 80074e4:	3302      	adds	r3, #2
 80074e6:	2202      	movs	r2, #2
 80074e8:	4619      	mov	r1, r3
 80074ea:	6838      	ldr	r0, [r7, #0]
 80074ec:	f7ff fedd 	bl	80072aa <loadFlash>
		address+=16;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	3310      	adds	r3, #16
 80074f4:	603b      	str	r3, [r7, #0]
		t++;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3301      	adds	r3, #1
 80074fa:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b0e      	cmp	r3, #14
 8007500:	ddeb      	ble.n	80074da <record_out+0x96>
//			sizeof(record.column));
//	loadFlash(start_address + 2 * sizeof(record.row),
//			(uint64_t*) record.row_look, sizeof(record.row_look));
//	loadFlash(start_address + 3 * sizeof(record.row),
//			(uint64_t*) record.column_look, sizeof(record.column_look));
	t = 0;
 8007502:	2300      	movs	r3, #0
 8007504:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007506:	e017      	b.n	8007538 <record_out+0xf4>
		wall.row[t] = record.row[t];
 8007508:	4a22      	ldr	r2, [pc, #136]	; (8007594 <record_out+0x150>)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007510:	4a21      	ldr	r2, [pc, #132]	; (8007598 <record_out+0x154>)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 8007518:	4a1e      	ldr	r2, [pc, #120]	; (8007594 <record_out+0x150>)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	330c      	adds	r3, #12
 800751e:	005b      	lsls	r3, r3, #1
 8007520:	4413      	add	r3, r2
 8007522:	88d9      	ldrh	r1, [r3, #6]
 8007524:	4a1c      	ldr	r2, [pc, #112]	; (8007598 <record_out+0x154>)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	330c      	adds	r3, #12
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	4413      	add	r3, r2
 800752e:	460a      	mov	r2, r1
 8007530:	80da      	strh	r2, [r3, #6]
		t++;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3301      	adds	r3, #1
 8007536:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b0e      	cmp	r3, #14
 800753c:	dde4      	ble.n	8007508 <record_out+0xc4>
	}
	t = 0;
 800753e:	2300      	movs	r3, #0
 8007540:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007542:	e01c      	b.n	800757e <record_out+0x13a>
		wall.row_look[t] = record.row_look[t];
 8007544:	4a13      	ldr	r2, [pc, #76]	; (8007594 <record_out+0x150>)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	331c      	adds	r3, #28
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	4413      	add	r3, r2
 800754e:	8899      	ldrh	r1, [r3, #4]
 8007550:	4a11      	ldr	r2, [pc, #68]	; (8007598 <record_out+0x154>)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	331c      	adds	r3, #28
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	4413      	add	r3, r2
 800755a:	460a      	mov	r2, r1
 800755c:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = record.column_look[t];
 800755e:	4a0d      	ldr	r2, [pc, #52]	; (8007594 <record_out+0x150>)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	332c      	adds	r3, #44	; 0x2c
 8007564:	005b      	lsls	r3, r3, #1
 8007566:	4413      	add	r3, r2
 8007568:	8859      	ldrh	r1, [r3, #2]
 800756a:	4a0b      	ldr	r2, [pc, #44]	; (8007598 <record_out+0x154>)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	332c      	adds	r3, #44	; 0x2c
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	4413      	add	r3, r2
 8007574:	460a      	mov	r2, r1
 8007576:	805a      	strh	r2, [r3, #2]
		t++;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3301      	adds	r3, #1
 800757c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b0e      	cmp	r3, #14
 8007582:	dddf      	ble.n	8007544 <record_out+0x100>
	}

	t = 0;
 8007584:	2300      	movs	r3, #0
 8007586:	607b      	str	r3, [r7, #4]

}
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	0807f000 	.word	0x0807f000
 8007594:	20000cb4 	.word	0x20000cb4
 8007598:	20000c3c 	.word	0x20000c3c

0800759c <flash_record_init>:

void flash_record_init(void){
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
	int t = 0;
 80075a2:	2300      	movs	r3, #0
 80075a4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075a6:	e013      	b.n	80075d0 <flash_record_init+0x34>
		wall.row[t] = 0b111100011;
 80075a8:	4a1e      	ldr	r2, [pc, #120]	; (8007624 <flash_record_init+0x88>)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f240 11e3 	movw	r1, #483	; 0x1e3
 80075b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = t*2;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	b299      	uxth	r1, r3
 80075bc:	4a19      	ldr	r2, [pc, #100]	; (8007624 <flash_record_init+0x88>)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	330c      	adds	r3, #12
 80075c2:	005b      	lsls	r3, r3, #1
 80075c4:	4413      	add	r3, r2
 80075c6:	460a      	mov	r2, r1
 80075c8:	80da      	strh	r2, [r3, #6]
		t++;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3301      	adds	r3, #1
 80075ce:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b0e      	cmp	r3, #14
 80075d4:	dde8      	ble.n	80075a8 <flash_record_init+0xc>
	}
	t = 0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075da:	e018      	b.n	800760e <flash_record_init+0x72>
		wall.row_look[t] = t*4;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	b299      	uxth	r1, r3
 80075e4:	4a0f      	ldr	r2, [pc, #60]	; (8007624 <flash_record_init+0x88>)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	331c      	adds	r3, #28
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	4413      	add	r3, r2
 80075ee:	460a      	mov	r2, r1
 80075f0:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = t*8;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	b299      	uxth	r1, r3
 80075fa:	4a0a      	ldr	r2, [pc, #40]	; (8007624 <flash_record_init+0x88>)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	332c      	adds	r3, #44	; 0x2c
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	4413      	add	r3, r2
 8007604:	460a      	mov	r2, r1
 8007606:	805a      	strh	r2, [r3, #2]
		t++;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	3301      	adds	r3, #1
 800760c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2b0e      	cmp	r3, #14
 8007612:	dde3      	ble.n	80075dc <flash_record_init+0x40>
	}

}
 8007614:	bf00      	nop
 8007616:	bf00      	nop
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	20000c3c 	.word	0x20000c3c

08007628 <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007632:	2200      	movs	r2, #0
 8007634:	2110      	movs	r1, #16
 8007636:	4810      	ldr	r0, [pc, #64]	; (8007678 <gyro_read_byte+0x50>)
 8007638:	f014 fd2c 	bl	801c094 <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 800763c:	79fb      	ldrb	r3, [r7, #7]
 800763e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007642:	b2db      	uxtb	r3, r3
 8007644:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 8007646:	f107 010f 	add.w	r1, r7, #15
 800764a:	2364      	movs	r3, #100	; 0x64
 800764c:	2201      	movs	r2, #1
 800764e:	480b      	ldr	r0, [pc, #44]	; (800767c <gyro_read_byte+0x54>)
 8007650:	f015 fe03 	bl	801d25a <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 8007654:	f107 010e 	add.w	r1, r7, #14
 8007658:	2364      	movs	r3, #100	; 0x64
 800765a:	2201      	movs	r2, #1
 800765c:	4807      	ldr	r0, [pc, #28]	; (800767c <gyro_read_byte+0x54>)
 800765e:	f015 ff6a 	bl	801d536 <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007662:	2201      	movs	r2, #1
 8007664:	2110      	movs	r1, #16
 8007666:	4804      	ldr	r0, [pc, #16]	; (8007678 <gyro_read_byte+0x50>)
 8007668:	f014 fd14 	bl	801c094 <HAL_GPIO_WritePin>

	return val;
 800766c:	7bbb      	ldrb	r3, [r7, #14]

}
 800766e:	4618      	mov	r0, r3
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	48000800 	.word	0x48000800
 800767c:	2000edd0 	.word	0x2000edd0

08007680 <gyro_write_byte>:

void gyro_write_byte(uint8_t reg, uint8_t val)

{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	4603      	mov	r3, r0
 8007688:	460a      	mov	r2, r1
 800768a:	71fb      	strb	r3, [r7, #7]
 800768c:	4613      	mov	r3, r2
 800768e:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;

	ret = reg & 0x7F;//先頭のbitを0に
 8007690:	79fb      	ldrb	r3, [r7, #7]
 8007692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007696:	b2db      	uxtb	r3, r3
 8007698:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 800769a:	2200      	movs	r2, #0
 800769c:	2110      	movs	r1, #16
 800769e:	480c      	ldr	r0, [pc, #48]	; (80076d0 <gyro_write_byte+0x50>)
 80076a0:	f014 fcf8 	bl	801c094 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 80076a4:	f107 010f 	add.w	r1, r7, #15
 80076a8:	2364      	movs	r3, #100	; 0x64
 80076aa:	2201      	movs	r2, #1
 80076ac:	4809      	ldr	r0, [pc, #36]	; (80076d4 <gyro_write_byte+0x54>)
 80076ae:	f015 fdd4 	bl	801d25a <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &val, 1, 100);
 80076b2:	1db9      	adds	r1, r7, #6
 80076b4:	2364      	movs	r3, #100	; 0x64
 80076b6:	2201      	movs	r2, #1
 80076b8:	4806      	ldr	r0, [pc, #24]	; (80076d4 <gyro_write_byte+0x54>)
 80076ba:	f015 fdce 	bl	801d25a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80076be:	2201      	movs	r2, #1
 80076c0:	2110      	movs	r1, #16
 80076c2:	4803      	ldr	r0, [pc, #12]	; (80076d0 <gyro_write_byte+0x50>)
 80076c4:	f014 fce6 	bl	801c094 <HAL_GPIO_WritePin>

}
 80076c8:	bf00      	nop
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	48000800 	.word	0x48000800
 80076d4:	2000edd0 	.word	0x2000edd0

080076d8 <pl_gyro_init>:

void pl_gyro_init(void)

{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80076de:	2300      	movs	r3, #0
 80076e0:	71fb      	strb	r3, [r7, #7]

// check WHO_AM_I (0x75)

	who_am_i = gyro_read_byte(0x75);
 80076e2:	2075      	movs	r0, #117	; 0x75
 80076e4:	f7ff ffa0 	bl	8007628 <gyro_read_byte>
 80076e8:	4603      	mov	r3, r0
 80076ea:	71fb      	strb	r3, [r7, #7]

// who am i = 0x12

	printf("\r\nwho_am_i = 0x%x\r\n", who_am_i);
 80076ec:	79fb      	ldrb	r3, [r7, #7]
 80076ee:	4619      	mov	r1, r3
 80076f0:	481b      	ldr	r0, [pc, #108]	; (8007760 <pl_gyro_init+0x88>)
 80076f2:	f019 fa65 	bl	8020bc0 <iprintf>

// recheck

	if (who_am_i != 0x98) {
 80076f6:	79fb      	ldrb	r3, [r7, #7]
 80076f8:	2b98      	cmp	r3, #152	; 0x98
 80076fa:	d00e      	beq.n	800771a <pl_gyro_init+0x42>

		HAL_Delay(100);
 80076fc:	2064      	movs	r0, #100	; 0x64
 80076fe:	f011 fb0d 	bl	8018d1c <HAL_Delay>

		who_am_i = gyro_read_byte(0x75);
 8007702:	2075      	movs	r0, #117	; 0x75
 8007704:	f7ff ff90 	bl	8007628 <gyro_read_byte>
 8007708:	4603      	mov	r3, r0
 800770a:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x98) {
 800770c:	79fb      	ldrb	r3, [r7, #7]
 800770e:	2b98      	cmp	r3, #152	; 0x98
 8007710:	d003      	beq.n	800771a <pl_gyro_init+0x42>

			while (1) {

				printf("gyro_error\r");
 8007712:	4814      	ldr	r0, [pc, #80]	; (8007764 <pl_gyro_init+0x8c>)
 8007714:	f019 fa54 	bl	8020bc0 <iprintf>
 8007718:	e7fb      	b.n	8007712 <pl_gyro_init+0x3a>

// set pwr might

// PWR_MIGHT_1 0x6B

	gyro_write_byte(0x6B, 0x00);
 800771a:	2100      	movs	r1, #0
 800771c:	206b      	movs	r0, #107	; 0x6b
 800771e:	f7ff ffaf 	bl	8007680 <gyro_write_byte>

	HAL_Delay(50);
 8007722:	2032      	movs	r0, #50	; 0x32
 8007724:	f011 fafa 	bl	8018d1c <HAL_Delay>

// PWR_MIGHT_2 0x6C

	gyro_write_byte(0x6C, 0x00);
 8007728:	2100      	movs	r1, #0
 800772a:	206c      	movs	r0, #108	; 0x6c
 800772c:	f7ff ffa8 	bl	8007680 <gyro_write_byte>

	HAL_Delay(50);
 8007730:	2032      	movs	r0, #50	; 0x32
 8007732:	f011 faf3 	bl	8018d1c <HAL_Delay>

// set gyro config

// GYRO_CONFIG 0x1B

	gyro_write_byte(0x1B, 0x18); // use 2000 dps
 8007736:	2118      	movs	r1, #24
 8007738:	201b      	movs	r0, #27
 800773a:	f7ff ffa1 	bl	8007680 <gyro_write_byte>

	HAL_Delay(50);
 800773e:	2032      	movs	r0, #50	; 0x32
 8007740:	f011 faec 	bl	8018d1c <HAL_Delay>

// ACCEL_CONFIG 0x1C

	gyro_write_byte(0x1C, 0x18); // use pm 16g
 8007744:	2118      	movs	r1, #24
 8007746:	201c      	movs	r0, #28
 8007748:	f7ff ff9a 	bl	8007680 <gyro_write_byte>

	HAL_Delay(50);
 800774c:	2032      	movs	r0, #50	; 0x32
 800774e:	f011 fae5 	bl	8018d1c <HAL_Delay>

	//gyro_write_byte(0x1D, 0x08);
	//HAL_Delay(50);

	set_flag = 1;
 8007752:	4b05      	ldr	r3, [pc, #20]	; (8007768 <pl_gyro_init+0x90>)
 8007754:	2201      	movs	r2, #1
 8007756:	701a      	strb	r2, [r3, #0]

}
 8007758:	bf00      	nop
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	08023460 	.word	0x08023460
 8007764:	08023474 	.word	0x08023474
 8007768:	200006e0 	.word	0x200006e0

0800776c <ICM20602_GYRO_READ>:

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 800776c:	b590      	push	{r4, r7, lr}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	4603      	mov	r3, r0
 8007774:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007776:	79fb      	ldrb	r3, [r7, #7]
 8007778:	4618      	mov	r0, r3
 800777a:	f7ff ff55 	bl	8007628 <gyro_read_byte>
 800777e:	4603      	mov	r3, r0
 8007780:	021b      	lsls	r3, r3, #8
 8007782:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 8007784:	79fb      	ldrb	r3, [r7, #7]
 8007786:	3301      	adds	r3, #1
 8007788:	b2db      	uxtb	r3, r3
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff ff4c 	bl	8007628 <gyro_read_byte>
 8007790:	4603      	mov	r3, r0
 8007792:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007794:	4323      	orrs	r3, r4
 8007796:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 8007798:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800779c:	ee07 3a90 	vmov	s15, r3
 80077a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077a4:	eddf 6a06 	vldr	s13, [pc, #24]	; 80077c0 <ICM20602_GYRO_READ+0x54>
 80077a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077ac:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	ee07 3a90 	vmov	s15, r3

}
 80077b6:	eeb0 0a67 	vmov.f32	s0, s15
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd90      	pop	{r4, r7, pc}
 80077c0:	41833333 	.word	0x41833333

080077c4 <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 80077c4:	b590      	push	{r4, r7, lr}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	4603      	mov	r3, r0
 80077cc:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80077ce:	79fb      	ldrb	r3, [r7, #7]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7ff ff29 	bl	8007628 <gyro_read_byte>
 80077d6:	4603      	mov	r3, r0
 80077d8:	021b      	lsls	r3, r3, #8
 80077da:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 80077dc:	79fb      	ldrb	r3, [r7, #7]
 80077de:	3301      	adds	r3, #1
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7ff ff20 	bl	8007628 <gyro_read_byte>
 80077e8:	4603      	mov	r3, r0
 80077ea:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80077ec:	4323      	orrs	r3, r4
 80077ee:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 80077f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80077f4:	ee07 3a90 	vmov	s15, r3
 80077f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077fc:	eddf 6a06 	vldr	s13, [pc, #24]	; 8007818 <ICM20602_ACCEL_READ+0x54>
 8007800:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007804:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	ee07 3a90 	vmov	s15, r3

}
 800780e:	eeb0 0a67 	vmov.f32	s0, s15
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	bd90      	pop	{r4, r7, pc}
 8007818:	45000000 	.word	0x45000000

0800781c <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 800781c:	b580      	push	{r7, lr}
 800781e:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 8007820:	4b0e      	ldr	r3, [pc, #56]	; (800785c <ICM20602_DataUpdate+0x40>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d117      	bne.n	8007858 <ICM20602_DataUpdate+0x3c>

// get yawrate

		//gyro.omega_y = ICM20602_GYRO_READ(0x43);

		gyro.omega_x = ICM20602_GYRO_READ(0x45);
 8007828:	2045      	movs	r0, #69	; 0x45
 800782a:	f7ff ff9f 	bl	800776c <ICM20602_GYRO_READ>
 800782e:	eef0 7a40 	vmov.f32	s15, s0
 8007832:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <ICM20602_DataUpdate+0x44>)
 8007834:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 8007838:	2047      	movs	r0, #71	; 0x47
 800783a:	f7ff ff97 	bl	800776c <ICM20602_GYRO_READ>
 800783e:	eef0 7a40 	vmov.f32	s15, s0
 8007842:	4b07      	ldr	r3, [pc, #28]	; (8007860 <ICM20602_DataUpdate+0x44>)
 8007844:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_y = ICM20602_ACCEL_READ(0x3B);
 8007848:	203b      	movs	r0, #59	; 0x3b
 800784a:	f7ff ffbb 	bl	80077c4 <ICM20602_ACCEL_READ>
 800784e:	eef0 7a40 	vmov.f32	s15, s0
 8007852:	4b03      	ldr	r3, [pc, #12]	; (8007860 <ICM20602_DataUpdate+0x44>)
 8007854:	edc3 7a04 	vstr	s15, [r3, #16]

		//gyro.accel_z = ICM20602_ACCEL_READ(0x3F);

	}

}
 8007858:	bf00      	nop
 800785a:	bd80      	pop	{r7, pc}
 800785c:	200006e0 	.word	0x200006e0
 8007860:	200006e4 	.word	0x200006e4

08007864 <pl_motor_init>:
#include "PL_motor.h"
#include "tim.h"
#include "gpio.h"
#include "define.h"

void pl_motor_init(void){
 8007864:	b580      	push	{r7, lr}
 8007866:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim8);//モータ
 8007868:	480f      	ldr	r0, [pc, #60]	; (80078a8 <pl_motor_init+0x44>)
 800786a:	f016 fbbb 	bl	801dfe4 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim8);//モータ
 800786e:	480e      	ldr	r0, [pc, #56]	; (80078a8 <pl_motor_init+0x44>)
 8007870:	f010 f8ee 	bl	8017a50 <HAL_TIM_PWM_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);//吸
 8007874:	480d      	ldr	r0, [pc, #52]	; (80078ac <pl_motor_init+0x48>)
 8007876:	f016 fbb5 	bl	801dfe4 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim16);//吸
 800787a:	480c      	ldr	r0, [pc, #48]	; (80078ac <pl_motor_init+0x48>)
 800787c:	f010 f8e8 	bl	8017a50 <HAL_TIM_PWM_MspInit>

	pl_L_DriveMotor_mode(MOTOR_FRONT);
 8007880:	2001      	movs	r0, #1
 8007882:	f000 f81f 	bl	80078c4 <pl_L_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,90);
 8007886:	4b08      	ldr	r3, [pc, #32]	; (80078a8 <pl_motor_init+0x44>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	225a      	movs	r2, #90	; 0x5a
 800788c:	63da      	str	r2, [r3, #60]	; 0x3c
	pl_R_DriveMotor_mode(MOTOR_FRONT);
 800788e:	2001      	movs	r0, #1
 8007890:	f000 f840 	bl	8007914 <pl_R_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,90);
 8007894:	4b04      	ldr	r3, [pc, #16]	; (80078a8 <pl_motor_init+0x44>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	225a      	movs	r2, #90	; 0x5a
 800789a:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,30);
 800789c:	4b03      	ldr	r3, [pc, #12]	; (80078ac <pl_motor_init+0x48>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	221e      	movs	r2, #30
 80078a2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80078a4:	bf00      	nop
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	2000eee8 	.word	0x2000eee8
 80078ac:	2000ef34 	.word	0x2000ef34

080078b0 <pl_DriveMotor_standby>:

void pl_DriveMotor_standby(int pin){
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, pin);
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <pl_L_DriveMotor_mode>:

void pl_L_DriveMotor_mode(int l_motor_mode){
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]

switch (l_motor_mode){
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d819      	bhi.n	8007906 <pl_L_DriveMotor_mode+0x42>
 80078d2:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <pl_L_DriveMotor_mode+0x14>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	08007905 	.word	0x08007905
 80078dc:	080078e9 	.word	0x080078e9
 80078e0:	080078f7 	.word	0x080078f7
 80078e4:	08007905 	.word	0x08007905
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 80078e8:	2200      	movs	r2, #0
 80078ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80078ee:	4808      	ldr	r0, [pc, #32]	; (8007910 <pl_L_DriveMotor_mode+0x4c>)
 80078f0:	f014 fbd0 	bl	801c094 <HAL_GPIO_WritePin>
break;
 80078f4:	e007      	b.n	8007906 <pl_L_DriveMotor_mode+0x42>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_SET);
 80078f6:	2201      	movs	r2, #1
 80078f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80078fc:	4804      	ldr	r0, [pc, #16]	; (8007910 <pl_L_DriveMotor_mode+0x4c>)
 80078fe:	f014 fbc9 	bl	801c094 <HAL_GPIO_WritePin>
break;
 8007902:	e000      	b.n	8007906 <pl_L_DriveMotor_mode+0x42>
break;
 8007904:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8007906:	bf00      	nop
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	48000800 	.word	0x48000800

08007914 <pl_R_DriveMotor_mode>:

void pl_R_DriveMotor_mode(int r_motor_mode){
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]

switch (r_motor_mode){
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b03      	cmp	r3, #3
 8007920:	d817      	bhi.n	8007952 <pl_R_DriveMotor_mode+0x3e>
 8007922:	a201      	add	r2, pc, #4	; (adr r2, 8007928 <pl_R_DriveMotor_mode+0x14>)
 8007924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007928:	08007951 	.word	0x08007951
 800792c:	08007939 	.word	0x08007939
 8007930:	08007945 	.word	0x08007945
 8007934:	08007951 	.word	0x08007951
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 8007938:	2201      	movs	r2, #1
 800793a:	2180      	movs	r1, #128	; 0x80
 800793c:	4807      	ldr	r0, [pc, #28]	; (800795c <pl_R_DriveMotor_mode+0x48>)
 800793e:	f014 fba9 	bl	801c094 <HAL_GPIO_WritePin>
break;
 8007942:	e006      	b.n	8007952 <pl_R_DriveMotor_mode+0x3e>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_RESET);
 8007944:	2200      	movs	r2, #0
 8007946:	2180      	movs	r1, #128	; 0x80
 8007948:	4804      	ldr	r0, [pc, #16]	; (800795c <pl_R_DriveMotor_mode+0x48>)
 800794a:	f014 fba3 	bl	801c094 <HAL_GPIO_WritePin>
break;
 800794e:	e000      	b.n	8007952 <pl_R_DriveMotor_mode+0x3e>
break;
 8007950:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8007952:	bf00      	nop
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	48000400 	.word	0x48000400

08007960 <pl_DriveMotor_start>:



void pl_DriveMotor_start(void){
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8007964:	2108      	movs	r1, #8
 8007966:	4804      	ldr	r0, [pc, #16]	; (8007978 <pl_DriveMotor_start+0x18>)
 8007968:	f016 fc04 	bl	801e174 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800796c:	2100      	movs	r1, #0
 800796e:	4802      	ldr	r0, [pc, #8]	; (8007978 <pl_DriveMotor_start+0x18>)
 8007970:	f016 fc00 	bl	801e174 <HAL_TIM_PWM_Start>
}
 8007974:	bf00      	nop
 8007976:	bd80      	pop	{r7, pc}
 8007978:	2000eee8 	.word	0x2000eee8

0800797c <pl_DriveMotor_stop>:

void pl_DriveMotor_stop(void){
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8007980:	2108      	movs	r1, #8
 8007982:	4804      	ldr	r0, [pc, #16]	; (8007994 <pl_DriveMotor_stop+0x18>)
 8007984:	f016 fd02 	bl	801e38c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8007988:	2100      	movs	r1, #0
 800798a:	4802      	ldr	r0, [pc, #8]	; (8007994 <pl_DriveMotor_stop+0x18>)
 800798c:	f016 fcfe 	bl	801e38c <HAL_TIM_PWM_Stop>
}
 8007990:	bf00      	nop
 8007992:	bd80      	pop	{r7, pc}
 8007994:	2000eee8 	.word	0x2000eee8

08007998 <pl_DriveMotor_duty>:

void pl_DriveMotor_duty(int duty_l,int duty_r){
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,duty_l);
 80079a2:	4b07      	ldr	r3, [pc, #28]	; (80079c0 <pl_DriveMotor_duty+0x28>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,duty_r);
 80079aa:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <pl_DriveMotor_duty+0x28>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80079b2:	bf00      	nop
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	2000eee8 	.word	0x2000eee8

080079c4 <pl_FunMotor_start>:



void pl_FunMotor_start(void){
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80079c8:	2100      	movs	r1, #0
 80079ca:	4802      	ldr	r0, [pc, #8]	; (80079d4 <pl_FunMotor_start+0x10>)
 80079cc:	f016 fbd2 	bl	801e174 <HAL_TIM_PWM_Start>
}
 80079d0:	bf00      	nop
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	2000ef34 	.word	0x2000ef34

080079d8 <pl_FunMotor_stop>:

void pl_FunMotor_stop(void){
 80079d8:	b580      	push	{r7, lr}
 80079da:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80079dc:	2100      	movs	r1, #0
 80079de:	4802      	ldr	r0, [pc, #8]	; (80079e8 <pl_FunMotor_stop+0x10>)
 80079e0:	f016 fcd4 	bl	801e38c <HAL_TIM_PWM_Stop>
}
 80079e4:	bf00      	nop
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	2000ef34 	.word	0x2000ef34

080079ec <pl_FunMotor_duty>:

void pl_FunMotor_duty(float fun_ratio){
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_fun=(int)(FUN_MAX_DUTY*fun_ratio);
 80079f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80079fa:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007a30 <pl_FunMotor_duty+0x44>
 80079fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a06:	ee17 3a90 	vmov	r3, s15
 8007a0a:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim16, FUN_MAX_DUTY);
 8007a0c:	4b09      	ldr	r3, [pc, #36]	; (8007a34 <pl_FunMotor_duty+0x48>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2264      	movs	r2, #100	; 0x64
 8007a12:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a14:	4b07      	ldr	r3, [pc, #28]	; (8007a34 <pl_FunMotor_duty+0x48>)
 8007a16:	2264      	movs	r2, #100	; 0x64
 8007a18:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,duty_fun);
 8007a1a:	4b06      	ldr	r3, [pc, #24]	; (8007a34 <pl_FunMotor_duty+0x48>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	635a      	str	r2, [r3, #52]	; 0x34

}
 8007a22:	bf00      	nop
 8007a24:	3714      	adds	r7, #20
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	42c80000 	.word	0x42c80000
 8007a34:	2000ef34 	.word	0x2000ef34

08007a38 <pl_sensor_init>:
/*******************************************************************/
/*	sensorのinit					(pl_sensor_init)	*/
/*******************************************************************/
/*	sensorを初期設定						*/
/*******************************************************************/
void pl_sensor_init(void){
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	af00      	add	r7, sp, #0
	AD_step=0;
 8007a3c:	4b04      	ldr	r3, [pc, #16]	; (8007a50 <pl_sensor_init+0x18>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Init(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007a42:	217f      	movs	r1, #127	; 0x7f
 8007a44:	4803      	ldr	r0, [pc, #12]	; (8007a54 <pl_sensor_init+0x1c>)
 8007a46:	f013 f9e3 	bl	801ae10 <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_ConfigChannel(&hadc1,&sConfig);
}
 8007a4a:	bf00      	nop
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20000708 	.word	0x20000708
 8007a54:	20000734 	.word	0x20000734

08007a58 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 8007a5e:	483c      	ldr	r0, [pc, #240]	; (8007b50 <pl_getbatt+0xf8>)
 8007a60:	f011 fdc4 	bl	80195ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8007a64:	2132      	movs	r1, #50	; 0x32
 8007a66:	483a      	ldr	r0, [pc, #232]	; (8007b50 <pl_getbatt+0xf8>)
 8007a68:	f011 febe 	bl	80197e8 <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 8007a6c:	4838      	ldr	r0, [pc, #224]	; (8007b50 <pl_getbatt+0xf8>)
 8007a6e:	f012 f8da 	bl	8019c26 <HAL_ADC_GetValue>
 8007a72:	4603      	mov	r3, r0
 8007a74:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8007a76:	4836      	ldr	r0, [pc, #216]	; (8007b50 <pl_getbatt+0xf8>)
 8007a78:	f011 fe82 	bl	8019780 <HAL_ADC_Stop>
	batt = 3.3 * (float) battAD / 4095 * (10.0 + 10.0) / 10.0*1.15*3.7/3.86;//* 1.2975
 8007a7c:	88fb      	ldrh	r3, [r7, #6]
 8007a7e:	ee07 3a90 	vmov	s15, r3
 8007a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a86:	ee17 0a90 	vmov	r0, s15
 8007a8a:	f7f8 fd85 	bl	8000598 <__aeabi_f2d>
 8007a8e:	a326      	add	r3, pc, #152	; (adr r3, 8007b28 <pl_getbatt+0xd0>)
 8007a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a94:	f7f8 fdd8 	bl	8000648 <__aeabi_dmul>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	a323      	add	r3, pc, #140	; (adr r3, 8007b30 <pl_getbatt+0xd8>)
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	f7f8 fef9 	bl	800089c <__aeabi_ddiv>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	4610      	mov	r0, r2
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	f04f 0200 	mov.w	r2, #0
 8007ab6:	4b27      	ldr	r3, [pc, #156]	; (8007b54 <pl_getbatt+0xfc>)
 8007ab8:	f7f8 fdc6 	bl	8000648 <__aeabi_dmul>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	4b23      	ldr	r3, [pc, #140]	; (8007b58 <pl_getbatt+0x100>)
 8007aca:	f7f8 fee7 	bl	800089c <__aeabi_ddiv>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	4610      	mov	r0, r2
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	a318      	add	r3, pc, #96	; (adr r3, 8007b38 <pl_getbatt+0xe0>)
 8007ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007adc:	f7f8 fdb4 	bl	8000648 <__aeabi_dmul>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	a315      	add	r3, pc, #84	; (adr r3, 8007b40 <pl_getbatt+0xe8>)
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	f7f8 fdab 	bl	8000648 <__aeabi_dmul>
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	4610      	mov	r0, r2
 8007af8:	4619      	mov	r1, r3
 8007afa:	a313      	add	r3, pc, #76	; (adr r3, 8007b48 <pl_getbatt+0xf0>)
 8007afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b00:	f7f8 fecc 	bl	800089c <__aeabi_ddiv>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4610      	mov	r0, r2
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	f7f9 f874 	bl	8000bf8 <__aeabi_d2f>
 8007b10:	4603      	mov	r3, r0
 8007b12:	603b      	str	r3, [r7, #0]
return batt;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	ee07 3a90 	vmov	s15, r3
}
 8007b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	f3af 8000 	nop.w
 8007b28:	66666666 	.word	0x66666666
 8007b2c:	400a6666 	.word	0x400a6666
 8007b30:	00000000 	.word	0x00000000
 8007b34:	40affe00 	.word	0x40affe00
 8007b38:	66666666 	.word	0x66666666
 8007b3c:	3ff26666 	.word	0x3ff26666
 8007b40:	9999999a 	.word	0x9999999a
 8007b44:	400d9999 	.word	0x400d9999
 8007b48:	ae147ae1 	.word	0xae147ae1
 8007b4c:	400ee147 	.word	0x400ee147
 8007b50:	20000734 	.word	0x20000734
 8007b54:	40340000 	.word	0x40340000
 8007b58:	40240000 	.word	0x40240000
 8007b5c:	00000000 	.word	0x00000000

08007b60 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 8007b66:	4882      	ldr	r0, [pc, #520]	; (8007d70 <pl_callback_getSensor+0x210>)
 8007b68:	f011 fffc 	bl	8019b64 <HAL_ADC_Stop_DMA>


	switch (AD_step) {
 8007b6c:	4b81      	ldr	r3, [pc, #516]	; (8007d74 <pl_callback_getSensor+0x214>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	f200 80d9 	bhi.w	8007d28 <pl_callback_getSensor+0x1c8>
 8007b76:	a201      	add	r2, pc, #4	; (adr r2, 8007b7c <pl_callback_getSensor+0x1c>)
 8007b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7c:	08007b91 	.word	0x08007b91
 8007b80:	08007bc9 	.word	0x08007bc9
 8007b84:	08007c29 	.word	0x08007c29
 8007b88:	08007c69 	.word	0x08007c69
 8007b8c:	08007d29 	.word	0x08007d29
	case 0:
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin, GPIO_PIN_SET);
 8007b90:	2201      	movs	r2, #1
 8007b92:	2102      	movs	r1, #2
 8007b94:	4878      	ldr	r0, [pc, #480]	; (8007d78 <pl_callback_getSensor+0x218>)
 8007b96:	f014 fa7d 	bl	801c094 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	2110      	movs	r1, #16
 8007b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007ba2:	f014 fa77 	bl	801c094 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bac:	4873      	ldr	r0, [pc, #460]	; (8007d7c <pl_callback_getSensor+0x21c>)
 8007bae:	f014 fa71 	bl	801c094 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007bb6:	e002      	b.n	8007bbe <pl_callback_getSensor+0x5e>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	607b      	str	r3, [r7, #4]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bc4:	ddf8      	ble.n	8007bb8 <pl_callback_getSensor+0x58>
		break;
 8007bc6:	e0af      	b.n	8007d28 <pl_callback_getSensor+0x1c8>
	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 8007bc8:	4b6d      	ldr	r3, [pc, #436]	; (8007d80 <pl_callback_getSensor+0x220>)
 8007bca:	885a      	ldrh	r2, [r3, #2]
 8007bcc:	4b6d      	ldr	r3, [pc, #436]	; (8007d84 <pl_callback_getSensor+0x224>)
 8007bce:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 8007bd0:	4b6b      	ldr	r3, [pc, #428]	; (8007d80 <pl_callback_getSensor+0x220>)
 8007bd2:	889a      	ldrh	r2, [r3, #4]
 8007bd4:	4b6b      	ldr	r3, [pc, #428]	; (8007d84 <pl_callback_getSensor+0x224>)
 8007bd6:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 8007bd8:	4b69      	ldr	r3, [pc, #420]	; (8007d80 <pl_callback_getSensor+0x220>)
 8007bda:	88da      	ldrh	r2, [r3, #6]
 8007bdc:	4b6a      	ldr	r3, [pc, #424]	; (8007d88 <pl_callback_getSensor+0x228>)
 8007bde:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 8007be0:	4b67      	ldr	r3, [pc, #412]	; (8007d80 <pl_callback_getSensor+0x220>)
 8007be2:	891a      	ldrh	r2, [r3, #8]
 8007be4:	4b68      	ldr	r3, [pc, #416]	; (8007d88 <pl_callback_getSensor+0x228>)
 8007be6:	80da      	strh	r2, [r3, #6]
		g_sensor_off[4] = g_ADCBuffer[5];
 8007be8:	4b65      	ldr	r3, [pc, #404]	; (8007d80 <pl_callback_getSensor+0x220>)
 8007bea:	895a      	ldrh	r2, [r3, #10]
 8007bec:	4b66      	ldr	r3, [pc, #408]	; (8007d88 <pl_callback_getSensor+0x228>)
 8007bee:	811a      	strh	r2, [r3, #8]

		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	2102      	movs	r1, #2
 8007bf4:	4860      	ldr	r0, [pc, #384]	; (8007d78 <pl_callback_getSensor+0x218>)
 8007bf6:	f014 fa4d 	bl	801c094 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin, GPIO_PIN_SET);
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	2110      	movs	r1, #16
 8007bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c02:	f014 fa47 	bl	801c094 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007c06:	2200      	movs	r2, #0
 8007c08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c0c:	485b      	ldr	r0, [pc, #364]	; (8007d7c <pl_callback_getSensor+0x21c>)
 8007c0e:	f014 fa41 	bl	801c094 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007c12:	2300      	movs	r3, #0
 8007c14:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007c16:	e002      	b.n	8007c1e <pl_callback_getSensor+0xbe>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	607b      	str	r3, [r7, #4]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c24:	ddf8      	ble.n	8007c18 <pl_callback_getSensor+0xb8>
		break;
 8007c26:	e07f      	b.n	8007d28 <pl_callback_getSensor+0x1c8>
	case 2:
		g_sensor_on[2] = g_ADCBuffer[3];
 8007c28:	4b55      	ldr	r3, [pc, #340]	; (8007d80 <pl_callback_getSensor+0x220>)
 8007c2a:	88da      	ldrh	r2, [r3, #6]
 8007c2c:	4b55      	ldr	r3, [pc, #340]	; (8007d84 <pl_callback_getSensor+0x224>)
 8007c2e:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007c30:	2200      	movs	r2, #0
 8007c32:	2102      	movs	r1, #2
 8007c34:	4850      	ldr	r0, [pc, #320]	; (8007d78 <pl_callback_getSensor+0x218>)
 8007c36:	f014 fa2d 	bl	801c094 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2110      	movs	r1, #16
 8007c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c42:	f014 fa27 	bl	801c094 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin, GPIO_PIN_SET);
 8007c46:	2201      	movs	r2, #1
 8007c48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c4c:	484b      	ldr	r0, [pc, #300]	; (8007d7c <pl_callback_getSensor+0x21c>)
 8007c4e:	f014 fa21 	bl	801c094 <HAL_GPIO_WritePin>
		j=0;
 8007c52:	2300      	movs	r3, #0
 8007c54:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007c56:	e002      	b.n	8007c5e <pl_callback_getSensor+0xfe>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	607b      	str	r3, [r7, #4]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c64:	ddf8      	ble.n	8007c58 <pl_callback_getSensor+0xf8>
		break;
 8007c66:	e05f      	b.n	8007d28 <pl_callback_getSensor+0x1c8>
	case 3:
		g_sensor_off[0] = g_ADCBuffer[1];
 8007c68:	4b45      	ldr	r3, [pc, #276]	; (8007d80 <pl_callback_getSensor+0x220>)
 8007c6a:	885a      	ldrh	r2, [r3, #2]
 8007c6c:	4b46      	ldr	r3, [pc, #280]	; (8007d88 <pl_callback_getSensor+0x228>)
 8007c6e:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 8007c70:	4b43      	ldr	r3, [pc, #268]	; (8007d80 <pl_callback_getSensor+0x220>)
 8007c72:	889a      	ldrh	r2, [r3, #4]
 8007c74:	4b44      	ldr	r3, [pc, #272]	; (8007d88 <pl_callback_getSensor+0x228>)
 8007c76:	805a      	strh	r2, [r3, #2]
		g_sensor_on[3] = g_ADCBuffer[4];
 8007c78:	4b41      	ldr	r3, [pc, #260]	; (8007d80 <pl_callback_getSensor+0x220>)
 8007c7a:	891a      	ldrh	r2, [r3, #8]
 8007c7c:	4b41      	ldr	r3, [pc, #260]	; (8007d84 <pl_callback_getSensor+0x224>)
 8007c7e:	80da      	strh	r2, [r3, #6]
		g_sensor_on[4] = g_ADCBuffer[5];
 8007c80:	4b3f      	ldr	r3, [pc, #252]	; (8007d80 <pl_callback_getSensor+0x220>)
 8007c82:	895a      	ldrh	r2, [r3, #10]
 8007c84:	4b3f      	ldr	r3, [pc, #252]	; (8007d84 <pl_callback_getSensor+0x224>)
 8007c86:	811a      	strh	r2, [r3, #8]


		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007c88:	2200      	movs	r2, #0
 8007c8a:	2102      	movs	r1, #2
 8007c8c:	483a      	ldr	r0, [pc, #232]	; (8007d78 <pl_callback_getSensor+0x218>)
 8007c8e:	f014 fa01 	bl	801c094 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007c92:	2200      	movs	r2, #0
 8007c94:	2110      	movs	r1, #16
 8007c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c9a:	f014 f9fb 	bl	801c094 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ca4:	4835      	ldr	r0, [pc, #212]	; (8007d7c <pl_callback_getSensor+0x21c>)
 8007ca6:	f014 f9f5 	bl	801c094 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007caa:	2300      	movs	r3, #0
 8007cac:	607b      	str	r3, [r7, #4]
		while (j <= 50) {j++;}
 8007cae:	e002      	b.n	8007cb6 <pl_callback_getSensor+0x156>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	607b      	str	r3, [r7, #4]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2b32      	cmp	r3, #50	; 0x32
 8007cba:	ddf9      	ble.n	8007cb0 <pl_callback_getSensor+0x150>
		V_battAD = g_ADCBuffer[0];
 8007cbc:	4b30      	ldr	r3, [pc, #192]	; (8007d80 <pl_callback_getSensor+0x220>)
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 4095.0 * (100.0 + 50.0) / 50.0;
 8007cc2:	887b      	ldrh	r3, [r7, #2]
 8007cc4:	ee07 3a90 	vmov	s15, r3
 8007cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ccc:	ee17 0a90 	vmov	r0, s15
 8007cd0:	f7f8 fc62 	bl	8000598 <__aeabi_f2d>
 8007cd4:	a320      	add	r3, pc, #128	; (adr r3, 8007d58 <pl_callback_getSensor+0x1f8>)
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	f7f8 fcb5 	bl	8000648 <__aeabi_dmul>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	a31e      	add	r3, pc, #120	; (adr r3, 8007d60 <pl_callback_getSensor+0x200>)
 8007ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cec:	f7f8 fdd6 	bl	800089c <__aeabi_ddiv>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	a31b      	add	r3, pc, #108	; (adr r3, 8007d68 <pl_callback_getSensor+0x208>)
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	f7f8 fca3 	bl	8000648 <__aeabi_dmul>
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	4610      	mov	r0, r2
 8007d08:	4619      	mov	r1, r3
 8007d0a:	f04f 0200 	mov.w	r2, #0
 8007d0e:	4b1f      	ldr	r3, [pc, #124]	; (8007d8c <pl_callback_getSensor+0x22c>)
 8007d10:	f7f8 fdc4 	bl	800089c <__aeabi_ddiv>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	f7f8 ff6c 	bl	8000bf8 <__aeabi_d2f>
 8007d20:	4603      	mov	r3, r0
 8007d22:	4a1b      	ldr	r2, [pc, #108]	; (8007d90 <pl_callback_getSensor+0x230>)
 8007d24:	6013      	str	r3, [r2, #0]
		break;
 8007d26:	bf00      	nop

		break;
	}


	AD_step++;
 8007d28:	4b12      	ldr	r3, [pc, #72]	; (8007d74 <pl_callback_getSensor+0x214>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	4b10      	ldr	r3, [pc, #64]	; (8007d74 <pl_callback_getSensor+0x214>)
 8007d32:	701a      	strb	r2, [r3, #0]
	//for(j=0;j<=2000;j++){}
	if (AD_step != 4) {
 8007d34:	4b0f      	ldr	r3, [pc, #60]	; (8007d74 <pl_callback_getSensor+0x214>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	2b04      	cmp	r3, #4
 8007d3a:	d005      	beq.n	8007d48 <pl_callback_getSensor+0x1e8>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007d3c:	2206      	movs	r2, #6
 8007d3e:	4910      	ldr	r1, [pc, #64]	; (8007d80 <pl_callback_getSensor+0x220>)
 8007d40:	480b      	ldr	r0, [pc, #44]	; (8007d70 <pl_callback_getSensor+0x210>)
 8007d42:	f011 fe45 	bl	80199d0 <HAL_ADC_Start_DMA>
	 the HAL_ADC_ConvCpltCallback could be implemented in the user file
	 */
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer)/sizeof(uint16_t));
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
	//	sizeof(g_ADCBuffer) / sizeof(uint16_t));
}
 8007d46:	e002      	b.n	8007d4e <pl_callback_getSensor+0x1ee>
		AD_step = 0;
 8007d48:	4b0a      	ldr	r3, [pc, #40]	; (8007d74 <pl_callback_getSensor+0x214>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	701a      	strb	r2, [r3, #0]
}
 8007d4e:	bf00      	nop
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	66666666 	.word	0x66666666
 8007d5c:	400a6666 	.word	0x400a6666
 8007d60:	00000000 	.word	0x00000000
 8007d64:	40affe00 	.word	0x40affe00
 8007d68:	00000000 	.word	0x00000000
 8007d6c:	4062c000 	.word	0x4062c000
 8007d70:	20000734 	.word	0x20000734
 8007d74:	20000708 	.word	0x20000708
 8007d78:	48000400 	.word	0x48000400
 8007d7c:	48000800 	.word	0x48000800
 8007d80:	200006fc 	.word	0x200006fc
 8007d84:	2000070c 	.word	0x2000070c
 8007d88:	20000718 	.word	0x20000718
 8007d8c:	40490000 	.word	0x40490000
 8007d90:	20000724 	.word	0x20000724

08007d94 <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8007d94:	b580      	push	{r7, lr}
 8007d96:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007d98:	2206      	movs	r2, #6
 8007d9a:	4903      	ldr	r1, [pc, #12]	; (8007da8 <pl_interupt_getSensor+0x14>)
 8007d9c:	4803      	ldr	r0, [pc, #12]	; (8007dac <pl_interupt_getSensor+0x18>)
 8007d9e:	f011 fe17 	bl	80199d0 <HAL_ADC_Start_DMA>

}
 8007da2:	bf00      	nop
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	200006fc 	.word	0x200006fc
 8007dac:	20000734 	.word	0x20000734

08007db0 <pl_timer_init>:

volatile uint32_t g_timCount;
float g_timCount_sec;
uint8_t count_mode;

void pl_timer_init(void){
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
	count_mode=0;
 8007db4:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <pl_timer_init+0x1c>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007dba:	4b05      	ldr	r3, [pc, #20]	; (8007dd0 <pl_timer_init+0x20>)
 8007dbc:	f04f 0200 	mov.w	r2, #0
 8007dc0:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);//割り込み
 8007dc2:	4804      	ldr	r0, [pc, #16]	; (8007dd4 <pl_timer_init+0x24>)
 8007dc4:	f016 f90e 	bl	801dfe4 <HAL_TIM_Base_Start_IT>
}
 8007dc8:	bf00      	nop
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	20000730 	.word	0x20000730
 8007dd0:	2000072c 	.word	0x2000072c
 8007dd4:	2000ee9c 	.word	0x2000ee9c

08007dd8 <interrupt_timer>:

void interrupt_timer(void){
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	af00      	add	r7, sp, #0
	g_timCount++;
 8007ddc:	4b10      	ldr	r3, [pc, #64]	; (8007e20 <interrupt_timer+0x48>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	3301      	adds	r3, #1
 8007de2:	4a0f      	ldr	r2, [pc, #60]	; (8007e20 <interrupt_timer+0x48>)
 8007de4:	6013      	str	r3, [r2, #0]
	if(count_mode==1){
 8007de6:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <interrupt_timer+0x4c>)
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d112      	bne.n	8007e14 <interrupt_timer+0x3c>
	g_timCount_sec=g_timCount_sec + INTERRUPT_TIME;
 8007dee:	4b0e      	ldr	r3, [pc, #56]	; (8007e28 <interrupt_timer+0x50>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7f8 fbd0 	bl	8000598 <__aeabi_f2d>
 8007df8:	a307      	add	r3, pc, #28	; (adr r3, 8007e18 <interrupt_timer+0x40>)
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f7f8 fa6d 	bl	80002dc <__adddf3>
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	4610      	mov	r0, r2
 8007e08:	4619      	mov	r1, r3
 8007e0a:	f7f8 fef5 	bl	8000bf8 <__aeabi_d2f>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	4a05      	ldr	r2, [pc, #20]	; (8007e28 <interrupt_timer+0x50>)
 8007e12:	6013      	str	r3, [r2, #0]
	}

}
 8007e14:	bf00      	nop
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	d2f1a9fc 	.word	0xd2f1a9fc
 8007e1c:	3f50624d 	.word	0x3f50624d
 8007e20:	20000728 	.word	0x20000728
 8007e24:	20000730 	.word	0x20000730
 8007e28:	2000072c 	.word	0x2000072c

08007e2c <tic_timer>:

void tic_timer(void){
 8007e2c:	b480      	push	{r7}
 8007e2e:	af00      	add	r7, sp, #0
	count_mode=1;
 8007e30:	4b05      	ldr	r3, [pc, #20]	; (8007e48 <tic_timer+0x1c>)
 8007e32:	2201      	movs	r2, #1
 8007e34:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007e36:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <tic_timer+0x20>)
 8007e38:	f04f 0200 	mov.w	r2, #0
 8007e3c:	601a      	str	r2, [r3, #0]
}
 8007e3e:	bf00      	nop
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	20000730 	.word	0x20000730
 8007e4c:	2000072c 	.word	0x2000072c

08007e50 <toc_timer>:

float toc_timer(void){
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
	float timer;
	timer=g_timCount_sec;
 8007e56:	4b0a      	ldr	r3, [pc, #40]	; (8007e80 <toc_timer+0x30>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	607b      	str	r3, [r7, #4]
	count_mode=0;
 8007e5c:	4b09      	ldr	r3, [pc, #36]	; (8007e84 <toc_timer+0x34>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007e62:	4b07      	ldr	r3, [pc, #28]	; (8007e80 <toc_timer+0x30>)
 8007e64:	f04f 0200 	mov.w	r2, #0
 8007e68:	601a      	str	r2, [r3, #0]
	return timer;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	ee07 3a90 	vmov	s15, r3
}
 8007e70:	eeb0 0a67 	vmov.f32	s0, s15
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	2000072c 	.word	0x2000072c
 8007e84:	20000730 	.word	0x20000730

08007e88 <wait_ms>:

void wait_ms(uint32_t waitTime) {
 8007e88:	b5b0      	push	{r4, r5, r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8007e90:	4b1d      	ldr	r3, [pc, #116]	; (8007f08 <wait_ms+0x80>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 8007e96:	4b1d      	ldr	r3, [pc, #116]	; (8007f0c <wait_ms+0x84>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	625a      	str	r2, [r3, #36]	; 0x24
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8007e9e:	bf00      	nop
 8007ea0:	4b19      	ldr	r3, [pc, #100]	; (8007f08 <wait_ms+0x80>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	ee07 3a90 	vmov	s15, r3
 8007ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eac:	ee17 0a90 	vmov	r0, s15
 8007eb0:	f7f8 fb72 	bl	8000598 <__aeabi_f2d>
 8007eb4:	a312      	add	r3, pc, #72	; (adr r3, 8007f00 <wait_ms+0x78>)
 8007eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eba:	f7f8 fbc5 	bl	8000648 <__aeabi_dmul>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	a30e      	add	r3, pc, #56	; (adr r3, 8007f00 <wait_ms+0x78>)
 8007ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ecc:	f7f8 fce6 	bl	800089c <__aeabi_ddiv>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4614      	mov	r4, r2
 8007ed6:	461d      	mov	r5, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7f8 fb3b 	bl	8000554 <__aeabi_ui2d>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	4629      	mov	r1, r5
 8007ee6:	f7f8 fe21 	bl	8000b2c <__aeabi_dcmplt>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1d7      	bne.n	8007ea0 <wait_ms+0x18>
        }

}
 8007ef0:	bf00      	nop
 8007ef2:	bf00      	nop
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8007efa:	bf00      	nop
 8007efc:	f3af 8000 	nop.w
 8007f00:	d2f1a9fc 	.word	0xd2f1a9fc
 8007f04:	3f50624d 	.word	0x3f50624d
 8007f08:	20000728 	.word	0x20000728
 8007f0c:	2000ee9c 	.word	0x2000ee9c

08007f10 <wait_ms_NoReset>:

void wait_ms_NoReset(uint32_t waitTime) {
 8007f10:	b5b0      	push	{r4, r5, r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8007f18:	4b1b      	ldr	r3, [pc, #108]	; (8007f88 <wait_ms_NoReset+0x78>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	601a      	str	r2, [r3, #0]
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8007f1e:	bf00      	nop
 8007f20:	4b19      	ldr	r3, [pc, #100]	; (8007f88 <wait_ms_NoReset+0x78>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	ee07 3a90 	vmov	s15, r3
 8007f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2c:	ee17 0a90 	vmov	r0, s15
 8007f30:	f7f8 fb32 	bl	8000598 <__aeabi_f2d>
 8007f34:	a312      	add	r3, pc, #72	; (adr r3, 8007f80 <wait_ms_NoReset+0x70>)
 8007f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3a:	f7f8 fb85 	bl	8000648 <__aeabi_dmul>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	4610      	mov	r0, r2
 8007f44:	4619      	mov	r1, r3
 8007f46:	a30e      	add	r3, pc, #56	; (adr r3, 8007f80 <wait_ms_NoReset+0x70>)
 8007f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4c:	f7f8 fca6 	bl	800089c <__aeabi_ddiv>
 8007f50:	4602      	mov	r2, r0
 8007f52:	460b      	mov	r3, r1
 8007f54:	4614      	mov	r4, r2
 8007f56:	461d      	mov	r5, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7f8 fafb 	bl	8000554 <__aeabi_ui2d>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	4620      	mov	r0, r4
 8007f64:	4629      	mov	r1, r5
 8007f66:	f7f8 fde1 	bl	8000b2c <__aeabi_dcmplt>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1d7      	bne.n	8007f20 <wait_ms_NoReset+0x10>
        }

}
 8007f70:	bf00      	nop
 8007f72:	bf00      	nop
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bdb0      	pop	{r4, r5, r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	f3af 8000 	nop.w
 8007f80:	d2f1a9fc 	.word	0xd2f1a9fc
 8007f84:	3f50624d 	.word	0x3f50624d
 8007f88:	20000728 	.word	0x20000728

08007f8c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b08c      	sub	sp, #48	; 0x30
 8007f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8007f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f96:	2200      	movs	r2, #0
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	605a      	str	r2, [r3, #4]
 8007f9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007f9e:	1d3b      	adds	r3, r7, #4
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f018 f999 	bl	80202dc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007faa:	4b56      	ldr	r3, [pc, #344]	; (8008104 <MX_ADC1_Init+0x178>)
 8007fac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fb0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007fb2:	4b54      	ldr	r3, [pc, #336]	; (8008104 <MX_ADC1_Init+0x178>)
 8007fb4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007fb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007fba:	4b52      	ldr	r3, [pc, #328]	; (8008104 <MX_ADC1_Init+0x178>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007fc0:	4b50      	ldr	r3, [pc, #320]	; (8008104 <MX_ADC1_Init+0x178>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8007fc6:	4b4f      	ldr	r3, [pc, #316]	; (8008104 <MX_ADC1_Init+0x178>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007fcc:	4b4d      	ldr	r3, [pc, #308]	; (8008104 <MX_ADC1_Init+0x178>)
 8007fce:	2201      	movs	r2, #1
 8007fd0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007fd2:	4b4c      	ldr	r3, [pc, #304]	; (8008104 <MX_ADC1_Init+0x178>)
 8007fd4:	2208      	movs	r2, #8
 8007fd6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007fd8:	4b4a      	ldr	r3, [pc, #296]	; (8008104 <MX_ADC1_Init+0x178>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007fde:	4b49      	ldr	r3, [pc, #292]	; (8008104 <MX_ADC1_Init+0x178>)
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 8007fe4:	4b47      	ldr	r3, [pc, #284]	; (8008104 <MX_ADC1_Init+0x178>)
 8007fe6:	2206      	movs	r2, #6
 8007fe8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007fea:	4b46      	ldr	r3, [pc, #280]	; (8008104 <MX_ADC1_Init+0x178>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007ff2:	4b44      	ldr	r3, [pc, #272]	; (8008104 <MX_ADC1_Init+0x178>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007ff8:	4b42      	ldr	r3, [pc, #264]	; (8008104 <MX_ADC1_Init+0x178>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007ffe:	4b41      	ldr	r3, [pc, #260]	; (8008104 <MX_ADC1_Init+0x178>)
 8008000:	2201      	movs	r2, #1
 8008002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008006:	4b3f      	ldr	r3, [pc, #252]	; (8008104 <MX_ADC1_Init+0x178>)
 8008008:	2200      	movs	r2, #0
 800800a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800800c:	4b3d      	ldr	r3, [pc, #244]	; (8008104 <MX_ADC1_Init+0x178>)
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008014:	483b      	ldr	r0, [pc, #236]	; (8008104 <MX_ADC1_Init+0x178>)
 8008016:	f011 f935 	bl	8019284 <HAL_ADC_Init>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8008020:	f001 fecb 	bl	8009dba <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8008024:	2300      	movs	r3, #0
 8008026:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8008028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800802c:	4619      	mov	r1, r3
 800802e:	4835      	ldr	r0, [pc, #212]	; (8008104 <MX_ADC1_Init+0x178>)
 8008030:	f012 ff82 	bl	801af38 <HAL_ADCEx_MultiModeConfigChannel>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800803a:	f001 febe 	bl	8009dba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800803e:	4b32      	ldr	r3, [pc, #200]	; (8008108 <MX_ADC1_Init+0x17c>)
 8008040:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008042:	2306      	movs	r3, #6
 8008044:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8008046:	2301      	movs	r3, #1
 8008048:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800804a:	237f      	movs	r3, #127	; 0x7f
 800804c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800804e:	2304      	movs	r3, #4
 8008050:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8008052:	2300      	movs	r3, #0
 8008054:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008056:	1d3b      	adds	r3, r7, #4
 8008058:	4619      	mov	r1, r3
 800805a:	482a      	ldr	r0, [pc, #168]	; (8008104 <MX_ADC1_Init+0x178>)
 800805c:	f012 f848 	bl	801a0f0 <HAL_ADC_ConfigChannel>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8008066:	f001 fea8 	bl	8009dba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800806a:	4b28      	ldr	r3, [pc, #160]	; (800810c <MX_ADC1_Init+0x180>)
 800806c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800806e:	230c      	movs	r3, #12
 8008070:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008072:	1d3b      	adds	r3, r7, #4
 8008074:	4619      	mov	r1, r3
 8008076:	4823      	ldr	r0, [pc, #140]	; (8008104 <MX_ADC1_Init+0x178>)
 8008078:	f012 f83a 	bl	801a0f0 <HAL_ADC_ConfigChannel>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8008082:	f001 fe9a 	bl	8009dba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8008086:	4b22      	ldr	r3, [pc, #136]	; (8008110 <MX_ADC1_Init+0x184>)
 8008088:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800808a:	2312      	movs	r3, #18
 800808c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800808e:	1d3b      	adds	r3, r7, #4
 8008090:	4619      	mov	r1, r3
 8008092:	481c      	ldr	r0, [pc, #112]	; (8008104 <MX_ADC1_Init+0x178>)
 8008094:	f012 f82c 	bl	801a0f0 <HAL_ADC_ConfigChannel>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800809e:	f001 fe8c 	bl	8009dba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80080a2:	4b1c      	ldr	r3, [pc, #112]	; (8008114 <MX_ADC1_Init+0x188>)
 80080a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80080a6:	2318      	movs	r3, #24
 80080a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080aa:	1d3b      	adds	r3, r7, #4
 80080ac:	4619      	mov	r1, r3
 80080ae:	4815      	ldr	r0, [pc, #84]	; (8008104 <MX_ADC1_Init+0x178>)
 80080b0:	f012 f81e 	bl	801a0f0 <HAL_ADC_ConfigChannel>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80080ba:	f001 fe7e 	bl	8009dba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80080be:	4b16      	ldr	r3, [pc, #88]	; (8008118 <MX_ADC1_Init+0x18c>)
 80080c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80080c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080c8:	1d3b      	adds	r3, r7, #4
 80080ca:	4619      	mov	r1, r3
 80080cc:	480d      	ldr	r0, [pc, #52]	; (8008104 <MX_ADC1_Init+0x178>)
 80080ce:	f012 f80f 	bl	801a0f0 <HAL_ADC_ConfigChannel>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80080d8:	f001 fe6f 	bl	8009dba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80080dc:	4b0f      	ldr	r3, [pc, #60]	; (800811c <MX_ADC1_Init+0x190>)
 80080de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80080e0:	f44f 7383 	mov.w	r3, #262	; 0x106
 80080e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080e6:	1d3b      	adds	r3, r7, #4
 80080e8:	4619      	mov	r1, r3
 80080ea:	4806      	ldr	r0, [pc, #24]	; (8008104 <MX_ADC1_Init+0x178>)
 80080ec:	f012 f800 	bl	801a0f0 <HAL_ADC_ConfigChannel>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80080f6:	f001 fe60 	bl	8009dba <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80080fa:	bf00      	nop
 80080fc:	3730      	adds	r7, #48	; 0x30
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	20000734 	.word	0x20000734
 8008108:	2e300800 	.word	0x2e300800
 800810c:	3ef08000 	.word	0x3ef08000
 8008110:	10c00010 	.word	0x10c00010
 8008114:	0c900008 	.word	0x0c900008
 8008118:	08600004 	.word	0x08600004
 800811c:	04300002 	.word	0x04300002

08008120 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b09e      	sub	sp, #120	; 0x78
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008128:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800812c:	2200      	movs	r2, #0
 800812e:	601a      	str	r2, [r3, #0]
 8008130:	605a      	str	r2, [r3, #4]
 8008132:	609a      	str	r2, [r3, #8]
 8008134:	60da      	str	r2, [r3, #12]
 8008136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008138:	f107 0314 	add.w	r3, r7, #20
 800813c:	2250      	movs	r2, #80	; 0x50
 800813e:	2100      	movs	r1, #0
 8008140:	4618      	mov	r0, r3
 8008142:	f018 f8cb 	bl	80202dc <memset>
  if(adcHandle->Instance==ADC1)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800814e:	f040 8082 	bne.w	8008256 <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8008152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008156:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8008158:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800815c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800815e:	f107 0314 	add.w	r3, r7, #20
 8008162:	4618      	mov	r0, r3
 8008164:	f014 fd92 	bl	801cc8c <HAL_RCCEx_PeriphCLKConfig>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800816e:	f001 fe24 	bl	8009dba <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8008172:	4b3b      	ldr	r3, [pc, #236]	; (8008260 <HAL_ADC_MspInit+0x140>)
 8008174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008176:	4a3a      	ldr	r2, [pc, #232]	; (8008260 <HAL_ADC_MspInit+0x140>)
 8008178:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800817c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800817e:	4b38      	ldr	r3, [pc, #224]	; (8008260 <HAL_ADC_MspInit+0x140>)
 8008180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008186:	613b      	str	r3, [r7, #16]
 8008188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800818a:	4b35      	ldr	r3, [pc, #212]	; (8008260 <HAL_ADC_MspInit+0x140>)
 800818c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800818e:	4a34      	ldr	r2, [pc, #208]	; (8008260 <HAL_ADC_MspInit+0x140>)
 8008190:	f043 0301 	orr.w	r3, r3, #1
 8008194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008196:	4b32      	ldr	r3, [pc, #200]	; (8008260 <HAL_ADC_MspInit+0x140>)
 8008198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081a2:	4b2f      	ldr	r3, [pc, #188]	; (8008260 <HAL_ADC_MspInit+0x140>)
 80081a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081a6:	4a2e      	ldr	r2, [pc, #184]	; (8008260 <HAL_ADC_MspInit+0x140>)
 80081a8:	f043 0302 	orr.w	r3, r3, #2
 80081ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081ae:	4b2c      	ldr	r3, [pc, #176]	; (8008260 <HAL_ADC_MspInit+0x140>)
 80081b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b2:	f003 0302 	and.w	r3, r3, #2
 80081b6:	60bb      	str	r3, [r7, #8]
 80081b8:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 80081ba:	230f      	movs	r3, #15
 80081bc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80081be:	2303      	movs	r3, #3
 80081c0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081c2:	2300      	movs	r3, #0
 80081c4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081c6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80081ca:	4619      	mov	r1, r3
 80081cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80081d0:	f013 fdde 	bl	801bd90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 80081d4:	f241 0301 	movw	r3, #4097	; 0x1001
 80081d8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80081da:	2303      	movs	r3, #3
 80081dc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081de:	2300      	movs	r3, #0
 80081e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80081e6:	4619      	mov	r1, r3
 80081e8:	481e      	ldr	r0, [pc, #120]	; (8008264 <HAL_ADC_MspInit+0x144>)
 80081ea:	f013 fdd1 	bl	801bd90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80081ee:	4b1e      	ldr	r3, [pc, #120]	; (8008268 <HAL_ADC_MspInit+0x148>)
 80081f0:	4a1e      	ldr	r2, [pc, #120]	; (800826c <HAL_ADC_MspInit+0x14c>)
 80081f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80081f4:	4b1c      	ldr	r3, [pc, #112]	; (8008268 <HAL_ADC_MspInit+0x148>)
 80081f6:	2205      	movs	r2, #5
 80081f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80081fa:	4b1b      	ldr	r3, [pc, #108]	; (8008268 <HAL_ADC_MspInit+0x148>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008200:	4b19      	ldr	r3, [pc, #100]	; (8008268 <HAL_ADC_MspInit+0x148>)
 8008202:	2200      	movs	r2, #0
 8008204:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008206:	4b18      	ldr	r3, [pc, #96]	; (8008268 <HAL_ADC_MspInit+0x148>)
 8008208:	2280      	movs	r2, #128	; 0x80
 800820a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800820c:	4b16      	ldr	r3, [pc, #88]	; (8008268 <HAL_ADC_MspInit+0x148>)
 800820e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008212:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008214:	4b14      	ldr	r3, [pc, #80]	; (8008268 <HAL_ADC_MspInit+0x148>)
 8008216:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800821a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800821c:	4b12      	ldr	r3, [pc, #72]	; (8008268 <HAL_ADC_MspInit+0x148>)
 800821e:	2220      	movs	r2, #32
 8008220:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8008222:	4b11      	ldr	r3, [pc, #68]	; (8008268 <HAL_ADC_MspInit+0x148>)
 8008224:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008228:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800822a:	480f      	ldr	r0, [pc, #60]	; (8008268 <HAL_ADC_MspInit+0x148>)
 800822c:	f013 f87c 	bl	801b328 <HAL_DMA_Init>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 8008236:	f001 fdc0 	bl	8009dba <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a0a      	ldr	r2, [pc, #40]	; (8008268 <HAL_ADC_MspInit+0x148>)
 800823e:	655a      	str	r2, [r3, #84]	; 0x54
 8008240:	4a09      	ldr	r2, [pc, #36]	; (8008268 <HAL_ADC_MspInit+0x148>)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8008246:	2200      	movs	r2, #0
 8008248:	2100      	movs	r1, #0
 800824a:	2012      	movs	r0, #18
 800824c:	f013 f837 	bl	801b2be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8008250:	2012      	movs	r0, #18
 8008252:	f013 f84e 	bl	801b2f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008256:	bf00      	nop
 8008258:	3778      	adds	r7, #120	; 0x78
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	40021000 	.word	0x40021000
 8008264:	48000400 	.word	0x48000400
 8008268:	200007a0 	.word	0x200007a0
 800826c:	40020008 	.word	0x40020008

08008270 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8008278:	f7ff fc72 	bl	8007b60 <pl_callback_getSensor>
}
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <cal_table>:

volatile char g_acc_flag;
volatile char g_MotorEnd_flag;


void cal_table(TRAPEZOID input,TARGET *target){
 8008284:	b084      	sub	sp, #16
 8008286:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	f107 0420 	add.w	r4, r7, #32
 8008292:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 8008296:	edd7 7a08 	vldr	s15, [r7, #32]
 800829a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800829e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082a2:	f2c0 819d 	blt.w	80085e0 <cal_table+0x35c>
	switch (g_acc_flag) {
 80082a6:	4bcd      	ldr	r3, [pc, #820]	; (80085dc <cal_table+0x358>)
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	2b06      	cmp	r3, #6
 80082ae:	f200 833a 	bhi.w	8008926 <cal_table+0x6a2>
 80082b2:	a201      	add	r2, pc, #4	; (adr r2, 80082b8 <cal_table+0x34>)
 80082b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b8:	08008919 	.word	0x08008919
 80082bc:	080082d5 	.word	0x080082d5
 80082c0:	08008447 	.word	0x08008447
 80082c4:	08008565 	.word	0x08008565
 80082c8:	08008919 	.word	0x08008919
 80082cc:	08008591 	.word	0x08008591
 80082d0:	080085b7 	.word	0x080085b7
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 80082d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d6:	ed93 7a00 	vldr	s14, [r3]
 80082da:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80082de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80082e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e6:	db0a      	blt.n	80082fe <cal_table+0x7a>
				target->velocity = input.count_velocity;
 80082e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ec:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 80082ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f0:	f04f 0200 	mov.w	r2, #0
 80082f4:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 80082f6:	4bb9      	ldr	r3, [pc, #740]	; (80085dc <cal_table+0x358>)
 80082f8:	2202      	movs	r2, #2
 80082fa:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 80082fc:	e313      	b.n	8008926 <cal_table+0x6a2>
			else if((input.displacement <= (2*target->velocity*target->velocity
 80082fe:	ed97 7a08 	vldr	s14, [r7, #32]
 8008302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008304:	edd3 7a00 	vldr	s15, [r3]
 8008308:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800830c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800830e:	edd3 7a00 	vldr	s15, [r3]
 8008312:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 8008316:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 800831a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800831e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008322:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 8008326:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800832a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800832e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008332:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8008336:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800833a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800833e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008342:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 8008346:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800834a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800834e:	d900      	bls.n	8008352 <cal_table+0xce>
		break;
 8008350:	e2e9      	b.n	8008926 <cal_table+0x6a2>
				time_over=((2*target->velocity*target->velocity
 8008352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008354:	edd3 7a00 	vldr	s15, [r3]
 8008358:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800835c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800835e:	edd3 7a00 	vldr	s15, [r3]
 8008362:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 8008366:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800836a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800836e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008372:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 8008376:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800837a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800837e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008382:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 8008386:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800838a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800838e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008396:	edd7 7a08 	vldr	s15, [r7, #32]
 800839a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800839e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a0:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 80083a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083a8:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 80083ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7f8 f8f1 	bl	8000598 <__aeabi_f2d>
 80083b6:	4604      	mov	r4, r0
 80083b8:	460d      	mov	r5, r1
 80083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083bc:	4618      	mov	r0, r3
 80083be:	f7f8 f8eb 	bl	8000598 <__aeabi_f2d>
 80083c2:	f04f 0200 	mov.w	r2, #0
 80083c6:	f04f 0300 	mov.w	r3, #0
 80083ca:	f7f8 f93d 	bl	8000648 <__aeabi_dmul>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	4690      	mov	r8, r2
 80083d4:	4699      	mov	r9, r3
 80083d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80083da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80083de:	ee17 0a90 	vmov	r0, s15
 80083e2:	f7f8 f8d9 	bl	8000598 <__aeabi_f2d>
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	4640      	mov	r0, r8
 80083ec:	4649      	mov	r1, r9
 80083ee:	f7f8 f92b 	bl	8000648 <__aeabi_dmul>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	4620      	mov	r0, r4
 80083f8:	4629      	mov	r1, r5
 80083fa:	f7f7 ff6d 	bl	80002d8 <__aeabi_dsub>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	4610      	mov	r0, r2
 8008404:	4619      	mov	r1, r3
 8008406:	f7f8 fbf7 	bl	8000bf8 <__aeabi_d2f>
 800840a:	4602      	mov	r2, r0
 800840c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840e:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 8008410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008412:	ed93 7a00 	vldr	s14, [r3]
 8008416:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800841a:	edd7 7a01 	vldr	s15, [r7, #4]
 800841e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800842a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842c:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 8008430:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008434:	eef1 7a67 	vneg.f32	s15, s15
 8008438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800843a:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 800843e:	4b67      	ldr	r3, [pc, #412]	; (80085dc <cal_table+0x358>)
 8008440:	2203      	movs	r2, #3
 8008442:	701a      	strb	r2, [r3, #0]
		break;
 8008444:	e26f      	b.n	8008926 <cal_table+0x6a2>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 8008446:	ed97 7a08 	vldr	s14, [r7, #32]
 800844a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800844c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008450:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8008454:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008458:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800845c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8008460:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008464:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008468:	ee66 7a27 	vmul.f32	s15, s12, s15
 800846c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008470:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008474:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008478:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800847c:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 8008480:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008488:	d900      	bls.n	800848c <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 800848a:	e24c      	b.n	8008926 <cal_table+0x6a2>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 800848c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008492:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008496:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800849a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 800849e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80084a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80084a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80084aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80084ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80084b2:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 80084b6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80084ba:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80084be:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 80084c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80084c6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80084ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084cc:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80084d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084d4:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 80084d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	4618      	mov	r0, r3
 80084de:	f7f8 f85b 	bl	8000598 <__aeabi_f2d>
 80084e2:	4604      	mov	r4, r0
 80084e4:	460d      	mov	r5, r1
 80084e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7f8 f855 	bl	8000598 <__aeabi_f2d>
 80084ee:	f04f 0200 	mov.w	r2, #0
 80084f2:	f04f 0300 	mov.w	r3, #0
 80084f6:	f7f8 f8a7 	bl	8000648 <__aeabi_dmul>
 80084fa:	4602      	mov	r2, r0
 80084fc:	460b      	mov	r3, r1
 80084fe:	4690      	mov	r8, r2
 8008500:	4699      	mov	r9, r3
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7f8 f848 	bl	8000598 <__aeabi_f2d>
 8008508:	4602      	mov	r2, r0
 800850a:	460b      	mov	r3, r1
 800850c:	4640      	mov	r0, r8
 800850e:	4649      	mov	r1, r9
 8008510:	f7f8 f89a 	bl	8000648 <__aeabi_dmul>
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	4620      	mov	r0, r4
 800851a:	4629      	mov	r1, r5
 800851c:	f7f7 fedc 	bl	80002d8 <__aeabi_dsub>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4610      	mov	r0, r2
 8008526:	4619      	mov	r1, r3
 8008528:	f7f8 fb66 	bl	8000bf8 <__aeabi_d2f>
 800852c:	4602      	mov	r2, r0
 800852e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008530:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 8008532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008534:	ed93 7a00 	vldr	s14, [r3]
 8008538:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800853c:	edd7 7a01 	vldr	s15, [r7, #4]
 8008540:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854a:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 800854e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008552:	eef1 7a67 	vneg.f32	s15, s15
 8008556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008558:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 800855c:	4b1f      	ldr	r3, [pc, #124]	; (80085dc <cal_table+0x358>)
 800855e:	2203      	movs	r2, #3
 8008560:	701a      	strb	r2, [r3, #0]
		break;
 8008562:	e1e0      	b.n	8008926 <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 8008564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008566:	ed93 7a00 	vldr	s14, [r3]
 800856a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800856e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008576:	d900      	bls.n	800857a <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008578:	e1d5      	b.n	8008926 <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 800857a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800857c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800857e:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8008580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008582:	f04f 0200 	mov.w	r2, #0
 8008586:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008588:	4b14      	ldr	r3, [pc, #80]	; (80085dc <cal_table+0x358>)
 800858a:	2204      	movs	r2, #4
 800858c:	701a      	strb	r2, [r3, #0]
		break;
 800858e:	e1ca      	b.n	8008926 <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 8008590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008592:	ed93 7a02 	vldr	s14, [r3, #8]
 8008596:	edd7 7a08 	vldr	s15, [r7, #32]
 800859a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800859e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a2:	da00      	bge.n	80085a6 <cal_table+0x322>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80085a4:	e1bf      	b.n	8008926 <cal_table+0x6a2>
			target->acceleration = 0;
 80085a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a8:	f04f 0200 	mov.w	r2, #0
 80085ac:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80085ae:	4b0b      	ldr	r3, [pc, #44]	; (80085dc <cal_table+0x358>)
 80085b0:	2204      	movs	r2, #4
 80085b2:	701a      	strb	r2, [r3, #0]
		break;
 80085b4:	e1b7      	b.n	8008926 <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 80085b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80085bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80085c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c8:	da00      	bge.n	80085cc <cal_table+0x348>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80085ca:	e1ac      	b.n	8008926 <cal_table+0x6a2>
			target->acceleration = 0;
 80085cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ce:	f04f 0200 	mov.w	r2, #0
 80085d2:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80085d4:	4b01      	ldr	r3, [pc, #4]	; (80085dc <cal_table+0x358>)
 80085d6:	2204      	movs	r2, #4
 80085d8:	701a      	strb	r2, [r3, #0]
		break;
 80085da:	e1a4      	b.n	8008926 <cal_table+0x6a2>
 80085dc:	20000804 	.word	0x20000804
	}
}else{
	switch (g_acc_flag) {
 80085e0:	4bce      	ldr	r3, [pc, #824]	; (800891c <cal_table+0x698>)
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	2b06      	cmp	r3, #6
 80085e8:	f200 819d 	bhi.w	8008926 <cal_table+0x6a2>
 80085ec:	a201      	add	r2, pc, #4	; (adr r2, 80085f4 <cal_table+0x370>)
 80085ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f2:	bf00      	nop
 80085f4:	08008925 	.word	0x08008925
 80085f8:	08008611 	.word	0x08008611
 80085fc:	08008783 	.word	0x08008783
 8008600:	08008899 	.word	0x08008899
 8008604:	080088c5 	.word	0x080088c5
 8008608:	080088cd 	.word	0x080088cd
 800860c:	080088f3 	.word	0x080088f3
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 8008610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008612:	ed93 7a00 	vldr	s14, [r3]
 8008616:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800861a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800861e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008622:	d80a      	bhi.n	800863a <cal_table+0x3b6>
				target->velocity = input.count_velocity;
 8008624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008628:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 800862a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800862c:	f04f 0200 	mov.w	r2, #0
 8008630:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 8008632:	4bba      	ldr	r3, [pc, #744]	; (800891c <cal_table+0x698>)
 8008634:	2202      	movs	r2, #2
 8008636:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 8008638:	e175      	b.n	8008926 <cal_table+0x6a2>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 800863a:	edd7 7a08 	vldr	s15, [r7, #32]
 800863e:	eeb1 7a67 	vneg.f32	s14, s15
 8008642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008644:	edd3 7a00 	vldr	s15, [r3]
 8008648:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800864c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800864e:	edd3 7a00 	vldr	s15, [r3]
 8008652:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 8008656:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 800865a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800865e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008662:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 8008666:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800866a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800866e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008672:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8008676:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800867a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800867e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008682:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8008686:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800868a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800868e:	d900      	bls.n	8008692 <cal_table+0x40e>
		break;
 8008690:	e149      	b.n	8008926 <cal_table+0x6a2>
				time_over=(-(2*target->velocity*target->velocity
 8008692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008694:	edd3 7a00 	vldr	s15, [r3]
 8008698:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800869c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869e:	edd3 7a00 	vldr	s15, [r3]
 80086a2:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 80086a6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80086aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80086ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086b2:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 80086b6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80086ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80086be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086c2:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 80086c6:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 80086ca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80086ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80086d2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80086d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086da:	edd7 7a08 	vldr	s15, [r7, #32]
 80086de:	ee77 6a67 	vsub.f32	s13, s14, s15
 80086e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e4:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 80086e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086ec:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 80086f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7f7 ff4f 	bl	8000598 <__aeabi_f2d>
 80086fa:	4604      	mov	r4, r0
 80086fc:	460d      	mov	r5, r1
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	4618      	mov	r0, r3
 8008702:	f7f7 ff49 	bl	8000598 <__aeabi_f2d>
 8008706:	f04f 0200 	mov.w	r2, #0
 800870a:	f04f 0300 	mov.w	r3, #0
 800870e:	f7f7 ff9b 	bl	8000648 <__aeabi_dmul>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4690      	mov	r8, r2
 8008718:	4699      	mov	r9, r3
 800871a:	edd7 7a01 	vldr	s15, [r7, #4]
 800871e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008722:	ee17 0a90 	vmov	r0, s15
 8008726:	f7f7 ff37 	bl	8000598 <__aeabi_f2d>
 800872a:	4602      	mov	r2, r0
 800872c:	460b      	mov	r3, r1
 800872e:	4640      	mov	r0, r8
 8008730:	4649      	mov	r1, r9
 8008732:	f7f7 ff89 	bl	8000648 <__aeabi_dmul>
 8008736:	4602      	mov	r2, r0
 8008738:	460b      	mov	r3, r1
 800873a:	4620      	mov	r0, r4
 800873c:	4629      	mov	r1, r5
 800873e:	f7f7 fdcd 	bl	80002dc <__adddf3>
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	4610      	mov	r0, r2
 8008748:	4619      	mov	r1, r3
 800874a:	f7f8 fa55 	bl	8000bf8 <__aeabi_d2f>
 800874e:	4602      	mov	r2, r0
 8008750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008752:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 8008754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008756:	ed93 7a00 	vldr	s14, [r3]
 800875a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800875e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008762:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008766:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800876a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800876e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008770:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 8008774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008778:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 800877a:	4b68      	ldr	r3, [pc, #416]	; (800891c <cal_table+0x698>)
 800877c:	2203      	movs	r2, #3
 800877e:	701a      	strb	r2, [r3, #0]
		break;
 8008780:	e0d1      	b.n	8008926 <cal_table+0x6a2>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 8008782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008784:	ed93 7a02 	vldr	s14, [r3, #8]
 8008788:	edd7 7a08 	vldr	s15, [r7, #32]
 800878c:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8008790:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008794:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008798:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 800879c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80087a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80087a4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80087a8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80087ac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80087b0:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80087b4:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80087b8:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 80087bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80087c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087c4:	d900      	bls.n	80087c8 <cal_table+0x544>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 80087c6:	e0ae      	b.n	8008926 <cal_table+0x6a2>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 80087c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80087ce:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80087d2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80087d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 80087da:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80087de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80087e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80087e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80087ea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80087ee:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 80087f2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80087f6:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 80087fa:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 80087fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8008802:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008808:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 800880c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008810:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8008814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	4618      	mov	r0, r3
 800881a:	f7f7 febd 	bl	8000598 <__aeabi_f2d>
 800881e:	4604      	mov	r4, r0
 8008820:	460d      	mov	r5, r1
 8008822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008824:	4618      	mov	r0, r3
 8008826:	f7f7 feb7 	bl	8000598 <__aeabi_f2d>
 800882a:	f04f 0200 	mov.w	r2, #0
 800882e:	f04f 0300 	mov.w	r3, #0
 8008832:	f7f7 ff09 	bl	8000648 <__aeabi_dmul>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	4690      	mov	r8, r2
 800883c:	4699      	mov	r9, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7f7 feaa 	bl	8000598 <__aeabi_f2d>
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	4640      	mov	r0, r8
 800884a:	4649      	mov	r1, r9
 800884c:	f7f7 fefc 	bl	8000648 <__aeabi_dmul>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	4620      	mov	r0, r4
 8008856:	4629      	mov	r1, r5
 8008858:	f7f7 fd40 	bl	80002dc <__adddf3>
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	4610      	mov	r0, r2
 8008862:	4619      	mov	r1, r3
 8008864:	f7f8 f9c8 	bl	8000bf8 <__aeabi_d2f>
 8008868:	4602      	mov	r2, r0
 800886a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800886c:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 800886e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008870:	ed93 7a00 	vldr	s14, [r3]
 8008874:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008878:	edd7 7a01 	vldr	s15, [r7, #4]
 800887c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008886:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 800888a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800888c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888e:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8008890:	4b22      	ldr	r3, [pc, #136]	; (800891c <cal_table+0x698>)
 8008892:	2203      	movs	r2, #3
 8008894:	701a      	strb	r2, [r3, #0]
		break;
 8008896:	e046      	b.n	8008926 <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8008898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889a:	ed93 7a00 	vldr	s14, [r3]
 800889e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80088a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088aa:	da00      	bge.n	80088ae <cal_table+0x62a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80088ac:	e03b      	b.n	8008926 <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 80088ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b2:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 80088b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b6:	f04f 0200 	mov.w	r2, #0
 80088ba:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80088bc:	4b17      	ldr	r3, [pc, #92]	; (800891c <cal_table+0x698>)
 80088be:	2204      	movs	r2, #4
 80088c0:	701a      	strb	r2, [r3, #0]
		break;
 80088c2:	e030      	b.n	8008926 <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 80088c4:	4b16      	ldr	r3, [pc, #88]	; (8008920 <cal_table+0x69c>)
 80088c6:	2201      	movs	r2, #1
 80088c8:	701a      	strb	r2, [r3, #0]
		break;
 80088ca:	e02c      	b.n	8008926 <cal_table+0x6a2>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 80088cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ce:	ed93 7a02 	vldr	s14, [r3, #8]
 80088d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80088d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088de:	d900      	bls.n	80088e2 <cal_table+0x65e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80088e0:	e021      	b.n	8008926 <cal_table+0x6a2>
			target->acceleration = 0;
 80088e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e4:	f04f 0200 	mov.w	r2, #0
 80088e8:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80088ea:	4b0c      	ldr	r3, [pc, #48]	; (800891c <cal_table+0x698>)
 80088ec:	2204      	movs	r2, #4
 80088ee:	701a      	strb	r2, [r3, #0]
		break;
 80088f0:	e019      	b.n	8008926 <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 80088f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80088f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80088fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008904:	d900      	bls.n	8008908 <cal_table+0x684>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008906:	e00e      	b.n	8008926 <cal_table+0x6a2>
			target->acceleration = 0;
 8008908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800890a:	f04f 0200 	mov.w	r2, #0
 800890e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008910:	4b02      	ldr	r3, [pc, #8]	; (800891c <cal_table+0x698>)
 8008912:	2204      	movs	r2, #4
 8008914:	701a      	strb	r2, [r3, #0]
		break;
 8008916:	e006      	b.n	8008926 <cal_table+0x6a2>
		break;
 8008918:	bf00      	nop
 800891a:	e004      	b.n	8008926 <cal_table+0x6a2>
 800891c:	20000804 	.word	0x20000804
 8008920:	20000805 	.word	0x20000805
		break;
 8008924:	bf00      	nop
	}

}

}
 8008926:	bf00      	nop
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8008930:	b004      	add	sp, #16
 8008932:	4770      	bx	lr
 8008934:	0000      	movs	r0, r0
	...

08008938 <cal_mollifier_table>:





void cal_mollifier_table(MOLLIFIER input,TARGET *target){
 8008938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800893c:	b08c      	sub	sp, #48	; 0x30
 800893e:	af00      	add	r7, sp, #0
 8008940:	eef0 6a40 	vmov.f32	s13, s0
 8008944:	eeb0 7a60 	vmov.f32	s14, s1
 8008948:	eef0 7a41 	vmov.f32	s15, s2
 800894c:	6138      	str	r0, [r7, #16]
 800894e:	edc7 6a05 	vstr	s13, [r7, #20]
 8008952:	ed87 7a06 	vstr	s14, [r7, #24]
 8008956:	edc7 7a07 	vstr	s15, [r7, #28]

float mollifier_T;
float old_velocity;
float time_delay=15;
 800895a:	4be7      	ldr	r3, [pc, #924]	; (8008cf8 <cal_mollifier_table+0x3c0>)
 800895c:	62fb      	str	r3, [r7, #44]	; 0x2c
float time_delay2=-15;
 800895e:	4be7      	ldr	r3, [pc, #924]	; (8008cfc <cal_mollifier_table+0x3c4>)
 8008960:	62bb      	str	r3, [r7, #40]	; 0x28
	mollifier_timer+=INTERRUPT_TIME;
 8008962:	4be7      	ldr	r3, [pc, #924]	; (8008d00 <cal_mollifier_table+0x3c8>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4618      	mov	r0, r3
 8008968:	f7f7 fe16 	bl	8000598 <__aeabi_f2d>
 800896c:	a3da      	add	r3, pc, #872	; (adr r3, 8008cd8 <cal_mollifier_table+0x3a0>)
 800896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008972:	f7f7 fcb3 	bl	80002dc <__adddf3>
 8008976:	4602      	mov	r2, r0
 8008978:	460b      	mov	r3, r1
 800897a:	4610      	mov	r0, r2
 800897c:	4619      	mov	r1, r3
 800897e:	f7f8 f93b 	bl	8000bf8 <__aeabi_d2f>
 8008982:	4603      	mov	r3, r0
 8008984:	4ade      	ldr	r2, [pc, #888]	; (8008d00 <cal_mollifier_table+0x3c8>)
 8008986:	6013      	str	r3, [r2, #0]
		mollifier_T=2*fabs(input.displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input.max_turning_velocity;
 8008988:	edd7 7a05 	vldr	s15, [r7, #20]
 800898c:	eef0 7ae7 	vabs.f32	s15, s15
 8008990:	ee17 0a90 	vmov	r0, s15
 8008994:	f7f7 fe00 	bl	8000598 <__aeabi_f2d>
 8008998:	4602      	mov	r2, r0
 800899a:	460b      	mov	r3, r1
 800899c:	f7f7 fc9e 	bl	80002dc <__adddf3>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4610      	mov	r0, r2
 80089a6:	4619      	mov	r1, r3
 80089a8:	a3cd      	add	r3, pc, #820	; (adr r3, 8008ce0 <cal_mollifier_table+0x3a8>)
 80089aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ae:	f7f7 ff75 	bl	800089c <__aeabi_ddiv>
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	4610      	mov	r0, r2
 80089b8:	4619      	mov	r1, r3
 80089ba:	a3cb      	add	r3, pc, #812	; (adr r3, 8008ce8 <cal_mollifier_table+0x3b0>)
 80089bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c0:	f7f7 fe42 	bl	8000648 <__aeabi_dmul>
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	4614      	mov	r4, r2
 80089ca:	461d      	mov	r5, r3
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7f7 fde2 	bl	8000598 <__aeabi_f2d>
 80089d4:	4602      	mov	r2, r0
 80089d6:	460b      	mov	r3, r1
 80089d8:	4620      	mov	r0, r4
 80089da:	4629      	mov	r1, r5
 80089dc:	f7f7 ff5e 	bl	800089c <__aeabi_ddiv>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4610      	mov	r0, r2
 80089e6:	4619      	mov	r1, r3
 80089e8:	f7f8 f906 	bl	8000bf8 <__aeabi_d2f>
 80089ec:	4603      	mov	r3, r0
 80089ee:	627b      	str	r3, [r7, #36]	; 0x24
		if (mollifier_timer>-mollifier_T/2 && mollifier_timer<mollifier_T/2){
 80089f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80089f4:	eef1 7a67 	vneg.f32	s15, s15
 80089f8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80089fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008a00:	4bbf      	ldr	r3, [pc, #764]	; (8008d00 <cal_mollifier_table+0x3c8>)
 8008a02:	edd3 7a00 	vldr	s15, [r3]
 8008a06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a0e:	f140 8698 	bpl.w	8009742 <cal_mollifier_table+0xe0a>
 8008a12:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a16:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008a1a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008a1e:	4bb8      	ldr	r3, [pc, #736]	; (8008d00 <cal_mollifier_table+0x3c8>)
 8008a20:	edd3 7a00 	vldr	s15, [r3]
 8008a24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a2c:	f340 8689 	ble.w	8009742 <cal_mollifier_table+0xe0a>
			old_velocity=target->velocity;
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	623b      	str	r3, [r7, #32]
			target->velocity = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-mollifier_timer*mollifier_timer));
 8008a36:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008a3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a42:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a4a:	ee17 0a90 	vmov	r0, s15
 8008a4e:	f7f7 fda3 	bl	8000598 <__aeabi_f2d>
 8008a52:	a3a3      	add	r3, pc, #652	; (adr r3, 8008ce0 <cal_mollifier_table+0x3a8>)
 8008a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a58:	f7f7 ff20 	bl	800089c <__aeabi_ddiv>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4614      	mov	r4, r2
 8008a62:	461d      	mov	r5, r3
 8008a64:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a68:	eeb1 7a67 	vneg.f32	s14, s15
 8008a6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a74:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8008a78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008a7c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008a84:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8008a88:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8008a8c:	4b9c      	ldr	r3, [pc, #624]	; (8008d00 <cal_mollifier_table+0x3c8>)
 8008a8e:	ed93 6a00 	vldr	s12, [r3]
 8008a92:	4b9b      	ldr	r3, [pc, #620]	; (8008d00 <cal_mollifier_table+0x3c8>)
 8008a94:	edd3 7a00 	vldr	s15, [r3]
 8008a98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008a9c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008aa0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008aa4:	ee16 0a90 	vmov	r0, s13
 8008aa8:	f7f7 fd76 	bl	8000598 <__aeabi_f2d>
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	ec43 2b10 	vmov	d0, r2, r3
 8008ab4:	f01a fa90 	bl	8022fd8 <exp>
 8008ab8:	ec53 2b10 	vmov	r2, r3, d0
 8008abc:	4620      	mov	r0, r4
 8008abe:	4629      	mov	r1, r5
 8008ac0:	f7f7 fdc2 	bl	8000648 <__aeabi_dmul>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	4610      	mov	r0, r2
 8008aca:	4619      	mov	r1, r3
 8008acc:	f7f8 f894 	bl	8000bf8 <__aeabi_d2f>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	601a      	str	r2, [r3, #0]
			//if(mollifier_timer<0){
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008ad6:	4b8a      	ldr	r3, [pc, #552]	; (8008d00 <cal_mollifier_table+0x3c8>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7f7 fd5c 	bl	8000598 <__aeabi_f2d>
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	460d      	mov	r5, r1
 8008ae4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ae8:	eef1 7a67 	vneg.f32	s15, s15
 8008aec:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008af0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008af4:	ee16 0a90 	vmov	r0, s13
 8008af8:	f7f7 fd4e 	bl	8000598 <__aeabi_f2d>
 8008afc:	a37c      	add	r3, pc, #496	; (adr r3, 8008cf0 <cal_mollifier_table+0x3b8>)
 8008afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b02:	f7f7 fecb 	bl	800089c <__aeabi_ddiv>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4690      	mov	r8, r2
 8008b0c:	4699      	mov	r9, r3
 8008b0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b10:	f7f7 fd42 	bl	8000598 <__aeabi_f2d>
 8008b14:	a370      	add	r3, pc, #448	; (adr r3, 8008cd8 <cal_mollifier_table+0x3a0>)
 8008b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1a:	f7f7 fd95 	bl	8000648 <__aeabi_dmul>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4640      	mov	r0, r8
 8008b24:	4649      	mov	r1, r9
 8008b26:	f7f7 fbd9 	bl	80002dc <__adddf3>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4620      	mov	r0, r4
 8008b30:	4629      	mov	r1, r5
 8008b32:	f7f7 fffb 	bl	8000b2c <__aeabi_dcmplt>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 8163 	beq.w	8008e04 <cal_mollifier_table+0x4cc>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(-mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)));
 8008b3e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008b42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b52:	ee17 0a90 	vmov	r0, s15
 8008b56:	f7f7 fd1f 	bl	8000598 <__aeabi_f2d>
 8008b5a:	a361      	add	r3, pc, #388	; (adr r3, 8008ce0 <cal_mollifier_table+0x3a8>)
 8008b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b60:	f7f7 fe9c 	bl	800089c <__aeabi_ddiv>
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008b6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b70:	eeb1 7a67 	vneg.f32	s14, s15
 8008b74:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008b80:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b84:	ee16 0a90 	vmov	r0, s13
 8008b88:	f7f7 fd06 	bl	8000598 <__aeabi_f2d>
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	460d      	mov	r5, r1
 8008b90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b94:	eef1 7a67 	vneg.f32	s15, s15
 8008b98:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008b9c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ba0:	ee16 0a90 	vmov	r0, s13
 8008ba4:	f7f7 fcf8 	bl	8000598 <__aeabi_f2d>
 8008ba8:	a351      	add	r3, pc, #324	; (adr r3, 8008cf0 <cal_mollifier_table+0x3b8>)
 8008baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bae:	f7f7 fe75 	bl	800089c <__aeabi_ddiv>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	4629      	mov	r1, r5
 8008bba:	f7f7 fd45 	bl	8000648 <__aeabi_dmul>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4690      	mov	r8, r2
 8008bc4:	4699      	mov	r9, r3
 8008bc6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008bca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008bce:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008bd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008bd6:	ee16 0a90 	vmov	r0, s13
 8008bda:	f7f7 fcdd 	bl	8000598 <__aeabi_f2d>
 8008bde:	4604      	mov	r4, r0
 8008be0:	460d      	mov	r5, r1
 8008be2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008be6:	eef1 7a67 	vneg.f32	s15, s15
 8008bea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008bee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008bf2:	ee16 0a90 	vmov	r0, s13
 8008bf6:	f7f7 fccf 	bl	8000598 <__aeabi_f2d>
 8008bfa:	a33d      	add	r3, pc, #244	; (adr r3, 8008cf0 <cal_mollifier_table+0x3b8>)
 8008bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c00:	f7f7 fe4c 	bl	800089c <__aeabi_ddiv>
 8008c04:	4602      	mov	r2, r0
 8008c06:	460b      	mov	r3, r1
 8008c08:	4692      	mov	sl, r2
 8008c0a:	469b      	mov	fp, r3
 8008c0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c10:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c14:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c18:	ee16 0a90 	vmov	r0, s13
 8008c1c:	f7f7 fcbc 	bl	8000598 <__aeabi_f2d>
 8008c20:	a333      	add	r3, pc, #204	; (adr r3, 8008cf0 <cal_mollifier_table+0x3b8>)
 8008c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c26:	f7f7 fe39 	bl	800089c <__aeabi_ddiv>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4650      	mov	r0, sl
 8008c30:	4659      	mov	r1, fp
 8008c32:	f7f7 fd09 	bl	8000648 <__aeabi_dmul>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	4629      	mov	r1, r5
 8008c3e:	f7f7 fb4d 	bl	80002dc <__adddf3>
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	4640      	mov	r0, r8
 8008c48:	4649      	mov	r1, r9
 8008c4a:	f7f7 fe27 	bl	800089c <__aeabi_ddiv>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4690      	mov	r8, r2
 8008c54:	4699      	mov	r9, r3
 8008c56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c5a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008c5e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008c62:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c66:	ee16 0a90 	vmov	r0, s13
 8008c6a:	f7f7 fc95 	bl	8000598 <__aeabi_f2d>
 8008c6e:	4604      	mov	r4, r0
 8008c70:	460d      	mov	r5, r1
 8008c72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c76:	eef1 7a67 	vneg.f32	s15, s15
 8008c7a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c7e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c82:	ee16 0a90 	vmov	r0, s13
 8008c86:	f7f7 fc87 	bl	8000598 <__aeabi_f2d>
 8008c8a:	a319      	add	r3, pc, #100	; (adr r3, 8008cf0 <cal_mollifier_table+0x3b8>)
 8008c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c90:	f7f7 fe04 	bl	800089c <__aeabi_ddiv>
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	4692      	mov	sl, r2
 8008c9a:	469b      	mov	fp, r3
 8008c9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ca0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008ca4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ca8:	ee16 0a90 	vmov	r0, s13
 8008cac:	f7f7 fc74 	bl	8000598 <__aeabi_f2d>
 8008cb0:	a30f      	add	r3, pc, #60	; (adr r3, 8008cf0 <cal_mollifier_table+0x3b8>)
 8008cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb6:	f7f7 fdf1 	bl	800089c <__aeabi_ddiv>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	4650      	mov	r0, sl
 8008cc0:	4659      	mov	r1, fp
 8008cc2:	f7f7 fcc1 	bl	8000648 <__aeabi_dmul>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	4620      	mov	r0, r4
 8008ccc:	4629      	mov	r1, r5
 8008cce:	f7f7 fb05 	bl	80002dc <__adddf3>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	e016      	b.n	8008d04 <cal_mollifier_table+0x3cc>
 8008cd6:	bf00      	nop
 8008cd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8008cdc:	3f50624d 	.word	0x3f50624d
 8008ce0:	f9db22d1 	.word	0xf9db22d1
 8008ce4:	3fdc6a7e 	.word	0x3fdc6a7e
 8008ce8:	362cef38 	.word	0x362cef38
 8008cec:	3fd78b56 	.word	0x3fd78b56
 8008cf0:	04189375 	.word	0x04189375
 8008cf4:	3ff50e56 	.word	0x3ff50e56
 8008cf8:	41700000 	.word	0x41700000
 8008cfc:	c1700000 	.word	0xc1700000
 8008d00:	20000800 	.word	0x20000800
 8008d04:	460b      	mov	r3, r1
 8008d06:	4640      	mov	r0, r8
 8008d08:	4649      	mov	r1, r9
 8008d0a:	f7f7 fdc7 	bl	800089c <__aeabi_ddiv>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d16:	f7f7 fc97 	bl	8000648 <__aeabi_dmul>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	4692      	mov	sl, r2
 8008d20:	469b      	mov	fp, r3
 8008d22:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d26:	eeb1 7a67 	vneg.f32	s14, s15
 8008d2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d32:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008d36:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d3a:	ee16 0a90 	vmov	r0, s13
 8008d3e:	f7f7 fc2b 	bl	8000598 <__aeabi_f2d>
 8008d42:	4604      	mov	r4, r0
 8008d44:	460d      	mov	r5, r1
 8008d46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008d4e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008d52:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d56:	ee16 0a90 	vmov	r0, s13
 8008d5a:	f7f7 fc1d 	bl	8000598 <__aeabi_f2d>
 8008d5e:	4680      	mov	r8, r0
 8008d60:	4689      	mov	r9, r1
 8008d62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d66:	eef1 7a67 	vneg.f32	s15, s15
 8008d6a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008d6e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d72:	ee16 0a90 	vmov	r0, s13
 8008d76:	f7f7 fc0f 	bl	8000598 <__aeabi_f2d>
 8008d7a:	a3e1      	add	r3, pc, #900	; (adr r3, 8009100 <cal_mollifier_table+0x7c8>)
 8008d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d80:	f7f7 fd8c 	bl	800089c <__aeabi_ddiv>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008d8c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d90:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008d94:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d98:	ee16 0a90 	vmov	r0, s13
 8008d9c:	f7f7 fbfc 	bl	8000598 <__aeabi_f2d>
 8008da0:	a3d7      	add	r3, pc, #860	; (adr r3, 8009100 <cal_mollifier_table+0x7c8>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	f7f7 fd79 	bl	800089c <__aeabi_ddiv>
 8008daa:	4602      	mov	r2, r0
 8008dac:	460b      	mov	r3, r1
 8008dae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008db2:	f7f7 fc49 	bl	8000648 <__aeabi_dmul>
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	4640      	mov	r0, r8
 8008dbc:	4649      	mov	r1, r9
 8008dbe:	f7f7 fa8d 	bl	80002dc <__adddf3>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	4629      	mov	r1, r5
 8008dca:	f7f7 fd67 	bl	800089c <__aeabi_ddiv>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	ec43 2b17 	vmov	d7, r2, r3
 8008dd6:	eeb0 0a47 	vmov.f32	s0, s14
 8008dda:	eef0 0a67 	vmov.f32	s1, s15
 8008dde:	f01a f8fb 	bl	8022fd8 <exp>
 8008de2:	ec53 2b10 	vmov	r2, r3, d0
 8008de6:	4650      	mov	r0, sl
 8008de8:	4659      	mov	r1, fp
 8008dea:	f7f7 fc2d 	bl	8000648 <__aeabi_dmul>
 8008dee:	4602      	mov	r2, r0
 8008df0:	460b      	mov	r3, r1
 8008df2:	4610      	mov	r0, r2
 8008df4:	4619      	mov	r1, r3
 8008df6:	f7f7 feff 	bl	8000bf8 <__aeabi_d2f>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008e00:	f000 bcb4 	b.w	800976c <cal_mollifier_table+0xe34>
			}else if(mollifier_timer<0){
 8008e04:	4bc0      	ldr	r3, [pc, #768]	; (8009108 <cal_mollifier_table+0x7d0>)
 8008e06:	edd3 7a00 	vldr	s15, [r3]
 8008e0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e12:	f140 817b 	bpl.w	800910c <cal_mollifier_table+0x7d4>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8008e16:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008e1a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e22:	edd7 7a05 	vldr	s15, [r7, #20]
 8008e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e2a:	ee17 0a90 	vmov	r0, s15
 8008e2e:	f7f7 fbb3 	bl	8000598 <__aeabi_f2d>
 8008e32:	a3af      	add	r3, pc, #700	; (adr r3, 80090f0 <cal_mollifier_table+0x7b8>)
 8008e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e38:	f7f7 fd30 	bl	800089c <__aeabi_ddiv>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008e44:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e48:	eeb1 7a67 	vneg.f32	s14, s15
 8008e4c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e54:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008e58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e5c:	ee16 0a90 	vmov	r0, s13
 8008e60:	f7f7 fb9a 	bl	8000598 <__aeabi_f2d>
 8008e64:	4604      	mov	r4, r0
 8008e66:	460d      	mov	r5, r1
 8008e68:	4ba7      	ldr	r3, [pc, #668]	; (8009108 <cal_mollifier_table+0x7d0>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7f7 fb93 	bl	8000598 <__aeabi_f2d>
 8008e72:	4680      	mov	r8, r0
 8008e74:	4689      	mov	r9, r1
 8008e76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e78:	f7f7 fb8e 	bl	8000598 <__aeabi_f2d>
 8008e7c:	a39e      	add	r3, pc, #632	; (adr r3, 80090f8 <cal_mollifier_table+0x7c0>)
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	f7f7 fbe1 	bl	8000648 <__aeabi_dmul>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	4640      	mov	r0, r8
 8008e8c:	4649      	mov	r1, r9
 8008e8e:	f7f7 fa23 	bl	80002d8 <__aeabi_dsub>
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	4620      	mov	r0, r4
 8008e98:	4629      	mov	r1, r5
 8008e9a:	f7f7 fbd5 	bl	8000648 <__aeabi_dmul>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	e9c7 2300 	strd	r2, r3, [r7]
 8008ea6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008eaa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008eae:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008eb2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008eb6:	ee16 0a90 	vmov	r0, s13
 8008eba:	f7f7 fb6d 	bl	8000598 <__aeabi_f2d>
 8008ebe:	4680      	mov	r8, r0
 8008ec0:	4689      	mov	r9, r1
 8008ec2:	4b91      	ldr	r3, [pc, #580]	; (8009108 <cal_mollifier_table+0x7d0>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7f7 fb66 	bl	8000598 <__aeabi_f2d>
 8008ecc:	4604      	mov	r4, r0
 8008ece:	460d      	mov	r5, r1
 8008ed0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ed2:	f7f7 fb61 	bl	8000598 <__aeabi_f2d>
 8008ed6:	a388      	add	r3, pc, #544	; (adr r3, 80090f8 <cal_mollifier_table+0x7c0>)
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	f7f7 fbb4 	bl	8000648 <__aeabi_dmul>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	f7f7 f9f6 	bl	80002d8 <__aeabi_dsub>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4692      	mov	sl, r2
 8008ef2:	469b      	mov	fp, r3
 8008ef4:	4b84      	ldr	r3, [pc, #528]	; (8009108 <cal_mollifier_table+0x7d0>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7f7 fb4d 	bl	8000598 <__aeabi_f2d>
 8008efe:	4604      	mov	r4, r0
 8008f00:	460d      	mov	r5, r1
 8008f02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f04:	f7f7 fb48 	bl	8000598 <__aeabi_f2d>
 8008f08:	a37b      	add	r3, pc, #492	; (adr r3, 80090f8 <cal_mollifier_table+0x7c0>)
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	f7f7 fb9b 	bl	8000648 <__aeabi_dmul>
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	4620      	mov	r0, r4
 8008f18:	4629      	mov	r1, r5
 8008f1a:	f7f7 f9dd 	bl	80002d8 <__aeabi_dsub>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	4650      	mov	r0, sl
 8008f24:	4659      	mov	r1, fp
 8008f26:	f7f7 fb8f 	bl	8000648 <__aeabi_dmul>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	4640      	mov	r0, r8
 8008f30:	4649      	mov	r1, r9
 8008f32:	f7f7 f9d1 	bl	80002d8 <__aeabi_dsub>
 8008f36:	4602      	mov	r2, r0
 8008f38:	460b      	mov	r3, r1
 8008f3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f3e:	f7f7 fcad 	bl	800089c <__aeabi_ddiv>
 8008f42:	4602      	mov	r2, r0
 8008f44:	460b      	mov	r3, r1
 8008f46:	e9c7 2300 	strd	r2, r3, [r7]
 8008f4a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f52:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008f56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f5a:	ee16 0a90 	vmov	r0, s13
 8008f5e:	f7f7 fb1b 	bl	8000598 <__aeabi_f2d>
 8008f62:	4680      	mov	r8, r0
 8008f64:	4689      	mov	r9, r1
 8008f66:	4b68      	ldr	r3, [pc, #416]	; (8009108 <cal_mollifier_table+0x7d0>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7f7 fb14 	bl	8000598 <__aeabi_f2d>
 8008f70:	4604      	mov	r4, r0
 8008f72:	460d      	mov	r5, r1
 8008f74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f76:	f7f7 fb0f 	bl	8000598 <__aeabi_f2d>
 8008f7a:	a35f      	add	r3, pc, #380	; (adr r3, 80090f8 <cal_mollifier_table+0x7c0>)
 8008f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f80:	f7f7 fb62 	bl	8000648 <__aeabi_dmul>
 8008f84:	4602      	mov	r2, r0
 8008f86:	460b      	mov	r3, r1
 8008f88:	4620      	mov	r0, r4
 8008f8a:	4629      	mov	r1, r5
 8008f8c:	f7f7 f9a4 	bl	80002d8 <__aeabi_dsub>
 8008f90:	4602      	mov	r2, r0
 8008f92:	460b      	mov	r3, r1
 8008f94:	4692      	mov	sl, r2
 8008f96:	469b      	mov	fp, r3
 8008f98:	4b5b      	ldr	r3, [pc, #364]	; (8009108 <cal_mollifier_table+0x7d0>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7f7 fafb 	bl	8000598 <__aeabi_f2d>
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	460d      	mov	r5, r1
 8008fa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fa8:	f7f7 faf6 	bl	8000598 <__aeabi_f2d>
 8008fac:	a352      	add	r3, pc, #328	; (adr r3, 80090f8 <cal_mollifier_table+0x7c0>)
 8008fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb2:	f7f7 fb49 	bl	8000648 <__aeabi_dmul>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	4620      	mov	r0, r4
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	f7f7 f98b 	bl	80002d8 <__aeabi_dsub>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	4650      	mov	r0, sl
 8008fc8:	4659      	mov	r1, fp
 8008fca:	f7f7 fb3d 	bl	8000648 <__aeabi_dmul>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	f7f7 f97f 	bl	80002d8 <__aeabi_dsub>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fe2:	f7f7 fc5b 	bl	800089c <__aeabi_ddiv>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008fee:	f7f7 fb2b 	bl	8000648 <__aeabi_dmul>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008ffa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ffe:	eeb1 7a67 	vneg.f32	s14, s15
 8009002:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800900a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800900e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009012:	ee16 0a90 	vmov	r0, s13
 8009016:	f7f7 fabf 	bl	8000598 <__aeabi_f2d>
 800901a:	4680      	mov	r8, r0
 800901c:	4689      	mov	r9, r1
 800901e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009022:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009026:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800902a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800902e:	ee16 0a90 	vmov	r0, s13
 8009032:	f7f7 fab1 	bl	8000598 <__aeabi_f2d>
 8009036:	4682      	mov	sl, r0
 8009038:	468b      	mov	fp, r1
 800903a:	4b33      	ldr	r3, [pc, #204]	; (8009108 <cal_mollifier_table+0x7d0>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4618      	mov	r0, r3
 8009040:	f7f7 faaa 	bl	8000598 <__aeabi_f2d>
 8009044:	4604      	mov	r4, r0
 8009046:	460d      	mov	r5, r1
 8009048:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800904a:	f7f7 faa5 	bl	8000598 <__aeabi_f2d>
 800904e:	a32a      	add	r3, pc, #168	; (adr r3, 80090f8 <cal_mollifier_table+0x7c0>)
 8009050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009054:	f7f7 faf8 	bl	8000648 <__aeabi_dmul>
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	4620      	mov	r0, r4
 800905e:	4629      	mov	r1, r5
 8009060:	f7f7 f93a 	bl	80002d8 <__aeabi_dsub>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	e9c7 2300 	strd	r2, r3, [r7]
 800906c:	4b26      	ldr	r3, [pc, #152]	; (8009108 <cal_mollifier_table+0x7d0>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4618      	mov	r0, r3
 8009072:	f7f7 fa91 	bl	8000598 <__aeabi_f2d>
 8009076:	4604      	mov	r4, r0
 8009078:	460d      	mov	r5, r1
 800907a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800907c:	f7f7 fa8c 	bl	8000598 <__aeabi_f2d>
 8009080:	a31d      	add	r3, pc, #116	; (adr r3, 80090f8 <cal_mollifier_table+0x7c0>)
 8009082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009086:	f7f7 fadf 	bl	8000648 <__aeabi_dmul>
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	4620      	mov	r0, r4
 8009090:	4629      	mov	r1, r5
 8009092:	f7f7 f921 	bl	80002d8 <__aeabi_dsub>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800909e:	f7f7 fad3 	bl	8000648 <__aeabi_dmul>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4650      	mov	r0, sl
 80090a8:	4659      	mov	r1, fp
 80090aa:	f7f7 f915 	bl	80002d8 <__aeabi_dsub>
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	4640      	mov	r0, r8
 80090b4:	4649      	mov	r1, r9
 80090b6:	f7f7 fbf1 	bl	800089c <__aeabi_ddiv>
 80090ba:	4602      	mov	r2, r0
 80090bc:	460b      	mov	r3, r1
 80090be:	ec43 2b17 	vmov	d7, r2, r3
 80090c2:	eeb0 0a47 	vmov.f32	s0, s14
 80090c6:	eef0 0a67 	vmov.f32	s1, s15
 80090ca:	f019 ff85 	bl	8022fd8 <exp>
 80090ce:	ec53 2b10 	vmov	r2, r3, d0
 80090d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090d6:	f7f7 fab7 	bl	8000648 <__aeabi_dmul>
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	4610      	mov	r0, r2
 80090e0:	4619      	mov	r1, r3
 80090e2:	f7f7 fd89 	bl	8000bf8 <__aeabi_d2f>
 80090e6:	4602      	mov	r2, r0
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 80090ec:	e33e      	b.n	800976c <cal_mollifier_table+0xe34>
 80090ee:	bf00      	nop
 80090f0:	f9db22d1 	.word	0xf9db22d1
 80090f4:	3fdc6a7e 	.word	0x3fdc6a7e
 80090f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80090fc:	3f50624d 	.word	0x3f50624d
 8009100:	04189375 	.word	0x04189375
 8009104:	3ff50e56 	.word	0x3ff50e56
 8009108:	20000800 	.word	0x20000800
			}else if(mollifier_timer<mollifier_T/2/1.316+time_delay2*INTERRUPT_TIME){
 800910c:	4bd4      	ldr	r3, [pc, #848]	; (8009460 <cal_mollifier_table+0xb28>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4618      	mov	r0, r3
 8009112:	f7f7 fa41 	bl	8000598 <__aeabi_f2d>
 8009116:	4604      	mov	r4, r0
 8009118:	460d      	mov	r5, r1
 800911a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800911e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009122:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009126:	ee16 0a90 	vmov	r0, s13
 800912a:	f7f7 fa35 	bl	8000598 <__aeabi_f2d>
 800912e:	a3c6      	add	r3, pc, #792	; (adr r3, 8009448 <cal_mollifier_table+0xb10>)
 8009130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009134:	f7f7 fbb2 	bl	800089c <__aeabi_ddiv>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	4690      	mov	r8, r2
 800913e:	4699      	mov	r9, r3
 8009140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009142:	f7f7 fa29 	bl	8000598 <__aeabi_f2d>
 8009146:	a3c2      	add	r3, pc, #776	; (adr r3, 8009450 <cal_mollifier_table+0xb18>)
 8009148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914c:	f7f7 fa7c 	bl	8000648 <__aeabi_dmul>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	4640      	mov	r0, r8
 8009156:	4649      	mov	r1, r9
 8009158:	f7f7 f8c0 	bl	80002dc <__adddf3>
 800915c:	4602      	mov	r2, r0
 800915e:	460b      	mov	r3, r1
 8009160:	4620      	mov	r0, r4
 8009162:	4629      	mov	r1, r5
 8009164:	f7f7 fce2 	bl	8000b2c <__aeabi_dcmplt>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	f000 817a 	beq.w	8009464 <cal_mollifier_table+0xb2c>
				//target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay2)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)));
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8009170:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009174:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009178:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800917c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009184:	ee17 0a90 	vmov	r0, s15
 8009188:	f7f7 fa06 	bl	8000598 <__aeabi_f2d>
 800918c:	a3b2      	add	r3, pc, #712	; (adr r3, 8009458 <cal_mollifier_table+0xb20>)
 800918e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009192:	f7f7 fb83 	bl	800089c <__aeabi_ddiv>
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800919e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80091a2:	eeb1 7a67 	vneg.f32	s14, s15
 80091a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80091aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ae:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80091b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80091b6:	ee16 0a90 	vmov	r0, s13
 80091ba:	f7f7 f9ed 	bl	8000598 <__aeabi_f2d>
 80091be:	4604      	mov	r4, r0
 80091c0:	460d      	mov	r5, r1
 80091c2:	4ba7      	ldr	r3, [pc, #668]	; (8009460 <cal_mollifier_table+0xb28>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7f7 f9e6 	bl	8000598 <__aeabi_f2d>
 80091cc:	4680      	mov	r8, r0
 80091ce:	4689      	mov	r9, r1
 80091d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091d2:	f7f7 f9e1 	bl	8000598 <__aeabi_f2d>
 80091d6:	a39e      	add	r3, pc, #632	; (adr r3, 8009450 <cal_mollifier_table+0xb18>)
 80091d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091dc:	f7f7 fa34 	bl	8000648 <__aeabi_dmul>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4640      	mov	r0, r8
 80091e6:	4649      	mov	r1, r9
 80091e8:	f7f7 f876 	bl	80002d8 <__aeabi_dsub>
 80091ec:	4602      	mov	r2, r0
 80091ee:	460b      	mov	r3, r1
 80091f0:	4620      	mov	r0, r4
 80091f2:	4629      	mov	r1, r5
 80091f4:	f7f7 fa28 	bl	8000648 <__aeabi_dmul>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	e9c7 2300 	strd	r2, r3, [r7]
 8009200:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009204:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009208:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800920c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009210:	ee16 0a90 	vmov	r0, s13
 8009214:	f7f7 f9c0 	bl	8000598 <__aeabi_f2d>
 8009218:	4680      	mov	r8, r0
 800921a:	4689      	mov	r9, r1
 800921c:	4b90      	ldr	r3, [pc, #576]	; (8009460 <cal_mollifier_table+0xb28>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4618      	mov	r0, r3
 8009222:	f7f7 f9b9 	bl	8000598 <__aeabi_f2d>
 8009226:	4604      	mov	r4, r0
 8009228:	460d      	mov	r5, r1
 800922a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800922c:	f7f7 f9b4 	bl	8000598 <__aeabi_f2d>
 8009230:	a387      	add	r3, pc, #540	; (adr r3, 8009450 <cal_mollifier_table+0xb18>)
 8009232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009236:	f7f7 fa07 	bl	8000648 <__aeabi_dmul>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	4620      	mov	r0, r4
 8009240:	4629      	mov	r1, r5
 8009242:	f7f7 f849 	bl	80002d8 <__aeabi_dsub>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	4692      	mov	sl, r2
 800924c:	469b      	mov	fp, r3
 800924e:	4b84      	ldr	r3, [pc, #528]	; (8009460 <cal_mollifier_table+0xb28>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4618      	mov	r0, r3
 8009254:	f7f7 f9a0 	bl	8000598 <__aeabi_f2d>
 8009258:	4604      	mov	r4, r0
 800925a:	460d      	mov	r5, r1
 800925c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800925e:	f7f7 f99b 	bl	8000598 <__aeabi_f2d>
 8009262:	a37b      	add	r3, pc, #492	; (adr r3, 8009450 <cal_mollifier_table+0xb18>)
 8009264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009268:	f7f7 f9ee 	bl	8000648 <__aeabi_dmul>
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	4620      	mov	r0, r4
 8009272:	4629      	mov	r1, r5
 8009274:	f7f7 f830 	bl	80002d8 <__aeabi_dsub>
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	4650      	mov	r0, sl
 800927e:	4659      	mov	r1, fp
 8009280:	f7f7 f9e2 	bl	8000648 <__aeabi_dmul>
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	4640      	mov	r0, r8
 800928a:	4649      	mov	r1, r9
 800928c:	f7f7 f824 	bl	80002d8 <__aeabi_dsub>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009298:	f7f7 fb00 	bl	800089c <__aeabi_ddiv>
 800929c:	4602      	mov	r2, r0
 800929e:	460b      	mov	r3, r1
 80092a0:	e9c7 2300 	strd	r2, r3, [r7]
 80092a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80092a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80092ac:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80092b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80092b4:	ee16 0a90 	vmov	r0, s13
 80092b8:	f7f7 f96e 	bl	8000598 <__aeabi_f2d>
 80092bc:	4680      	mov	r8, r0
 80092be:	4689      	mov	r9, r1
 80092c0:	4b67      	ldr	r3, [pc, #412]	; (8009460 <cal_mollifier_table+0xb28>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7f7 f967 	bl	8000598 <__aeabi_f2d>
 80092ca:	4604      	mov	r4, r0
 80092cc:	460d      	mov	r5, r1
 80092ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092d0:	f7f7 f962 	bl	8000598 <__aeabi_f2d>
 80092d4:	a35e      	add	r3, pc, #376	; (adr r3, 8009450 <cal_mollifier_table+0xb18>)
 80092d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092da:	f7f7 f9b5 	bl	8000648 <__aeabi_dmul>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	4620      	mov	r0, r4
 80092e4:	4629      	mov	r1, r5
 80092e6:	f7f6 fff7 	bl	80002d8 <__aeabi_dsub>
 80092ea:	4602      	mov	r2, r0
 80092ec:	460b      	mov	r3, r1
 80092ee:	4692      	mov	sl, r2
 80092f0:	469b      	mov	fp, r3
 80092f2:	4b5b      	ldr	r3, [pc, #364]	; (8009460 <cal_mollifier_table+0xb28>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7f7 f94e 	bl	8000598 <__aeabi_f2d>
 80092fc:	4604      	mov	r4, r0
 80092fe:	460d      	mov	r5, r1
 8009300:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009302:	f7f7 f949 	bl	8000598 <__aeabi_f2d>
 8009306:	a352      	add	r3, pc, #328	; (adr r3, 8009450 <cal_mollifier_table+0xb18>)
 8009308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930c:	f7f7 f99c 	bl	8000648 <__aeabi_dmul>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4620      	mov	r0, r4
 8009316:	4629      	mov	r1, r5
 8009318:	f7f6 ffde 	bl	80002d8 <__aeabi_dsub>
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	4650      	mov	r0, sl
 8009322:	4659      	mov	r1, fp
 8009324:	f7f7 f990 	bl	8000648 <__aeabi_dmul>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	4640      	mov	r0, r8
 800932e:	4649      	mov	r1, r9
 8009330:	f7f6 ffd2 	bl	80002d8 <__aeabi_dsub>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	e9d7 0100 	ldrd	r0, r1, [r7]
 800933c:	f7f7 faae 	bl	800089c <__aeabi_ddiv>
 8009340:	4602      	mov	r2, r0
 8009342:	460b      	mov	r3, r1
 8009344:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009348:	f7f7 f97e 	bl	8000648 <__aeabi_dmul>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009354:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009358:	eeb1 7a67 	vneg.f32	s14, s15
 800935c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009364:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009368:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800936c:	ee16 0a90 	vmov	r0, s13
 8009370:	f7f7 f912 	bl	8000598 <__aeabi_f2d>
 8009374:	4680      	mov	r8, r0
 8009376:	4689      	mov	r9, r1
 8009378:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800937c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009380:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009384:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009388:	ee16 0a90 	vmov	r0, s13
 800938c:	f7f7 f904 	bl	8000598 <__aeabi_f2d>
 8009390:	4682      	mov	sl, r0
 8009392:	468b      	mov	fp, r1
 8009394:	4b32      	ldr	r3, [pc, #200]	; (8009460 <cal_mollifier_table+0xb28>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4618      	mov	r0, r3
 800939a:	f7f7 f8fd 	bl	8000598 <__aeabi_f2d>
 800939e:	4604      	mov	r4, r0
 80093a0:	460d      	mov	r5, r1
 80093a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093a4:	f7f7 f8f8 	bl	8000598 <__aeabi_f2d>
 80093a8:	a329      	add	r3, pc, #164	; (adr r3, 8009450 <cal_mollifier_table+0xb18>)
 80093aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ae:	f7f7 f94b 	bl	8000648 <__aeabi_dmul>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	4620      	mov	r0, r4
 80093b8:	4629      	mov	r1, r5
 80093ba:	f7f6 ff8d 	bl	80002d8 <__aeabi_dsub>
 80093be:	4602      	mov	r2, r0
 80093c0:	460b      	mov	r3, r1
 80093c2:	e9c7 2300 	strd	r2, r3, [r7]
 80093c6:	4b26      	ldr	r3, [pc, #152]	; (8009460 <cal_mollifier_table+0xb28>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7f7 f8e4 	bl	8000598 <__aeabi_f2d>
 80093d0:	4604      	mov	r4, r0
 80093d2:	460d      	mov	r5, r1
 80093d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093d6:	f7f7 f8df 	bl	8000598 <__aeabi_f2d>
 80093da:	a31d      	add	r3, pc, #116	; (adr r3, 8009450 <cal_mollifier_table+0xb18>)
 80093dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e0:	f7f7 f932 	bl	8000648 <__aeabi_dmul>
 80093e4:	4602      	mov	r2, r0
 80093e6:	460b      	mov	r3, r1
 80093e8:	4620      	mov	r0, r4
 80093ea:	4629      	mov	r1, r5
 80093ec:	f7f6 ff74 	bl	80002d8 <__aeabi_dsub>
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093f8:	f7f7 f926 	bl	8000648 <__aeabi_dmul>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	4650      	mov	r0, sl
 8009402:	4659      	mov	r1, fp
 8009404:	f7f6 ff68 	bl	80002d8 <__aeabi_dsub>
 8009408:	4602      	mov	r2, r0
 800940a:	460b      	mov	r3, r1
 800940c:	4640      	mov	r0, r8
 800940e:	4649      	mov	r1, r9
 8009410:	f7f7 fa44 	bl	800089c <__aeabi_ddiv>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	ec43 2b17 	vmov	d7, r2, r3
 800941c:	eeb0 0a47 	vmov.f32	s0, s14
 8009420:	eef0 0a67 	vmov.f32	s1, s15
 8009424:	f019 fdd8 	bl	8022fd8 <exp>
 8009428:	ec53 2b10 	vmov	r2, r3, d0
 800942c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009430:	f7f7 f90a 	bl	8000648 <__aeabi_dmul>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	4610      	mov	r0, r2
 800943a:	4619      	mov	r1, r3
 800943c:	f7f7 fbdc 	bl	8000bf8 <__aeabi_d2f>
 8009440:	4602      	mov	r2, r0
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009446:	e191      	b.n	800976c <cal_mollifier_table+0xe34>
 8009448:	04189375 	.word	0x04189375
 800944c:	3ff50e56 	.word	0x3ff50e56
 8009450:	d2f1a9fc 	.word	0xd2f1a9fc
 8009454:	3f50624d 	.word	0x3f50624d
 8009458:	f9db22d1 	.word	0xf9db22d1
 800945c:	3fdc6a7e 	.word	0x3fdc6a7e
 8009460:	20000800 	.word	0x20000800
			}else{
				time_delay=0;
 8009464:	f04f 0300 	mov.w	r3, #0
 8009468:	62fb      	str	r3, [r7, #44]	; 0x2c
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 800946a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800946e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009476:	edd7 7a05 	vldr	s15, [r7, #20]
 800947a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947e:	ee17 0a90 	vmov	r0, s15
 8009482:	f7f7 f889 	bl	8000598 <__aeabi_f2d>
 8009486:	a3c0      	add	r3, pc, #768	; (adr r3, 8009788 <cal_mollifier_table+0xe50>)
 8009488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948c:	f7f7 fa06 	bl	800089c <__aeabi_ddiv>
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009498:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800949c:	eeb1 7a67 	vneg.f32	s14, s15
 80094a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80094a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80094ac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80094b0:	ee16 0a90 	vmov	r0, s13
 80094b4:	f7f7 f870 	bl	8000598 <__aeabi_f2d>
 80094b8:	4604      	mov	r4, r0
 80094ba:	460d      	mov	r5, r1
 80094bc:	4bb0      	ldr	r3, [pc, #704]	; (8009780 <cal_mollifier_table+0xe48>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7f7 f869 	bl	8000598 <__aeabi_f2d>
 80094c6:	4680      	mov	r8, r0
 80094c8:	4689      	mov	r9, r1
 80094ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094cc:	f7f7 f864 	bl	8000598 <__aeabi_f2d>
 80094d0:	a3a9      	add	r3, pc, #676	; (adr r3, 8009778 <cal_mollifier_table+0xe40>)
 80094d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d6:	f7f7 f8b7 	bl	8000648 <__aeabi_dmul>
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
 80094de:	4640      	mov	r0, r8
 80094e0:	4649      	mov	r1, r9
 80094e2:	f7f6 fef9 	bl	80002d8 <__aeabi_dsub>
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	4620      	mov	r0, r4
 80094ec:	4629      	mov	r1, r5
 80094ee:	f7f7 f8ab 	bl	8000648 <__aeabi_dmul>
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	e9c7 2300 	strd	r2, r3, [r7]
 80094fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80094fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009502:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009506:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800950a:	ee16 0a90 	vmov	r0, s13
 800950e:	f7f7 f843 	bl	8000598 <__aeabi_f2d>
 8009512:	4680      	mov	r8, r0
 8009514:	4689      	mov	r9, r1
 8009516:	4b9a      	ldr	r3, [pc, #616]	; (8009780 <cal_mollifier_table+0xe48>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4618      	mov	r0, r3
 800951c:	f7f7 f83c 	bl	8000598 <__aeabi_f2d>
 8009520:	4604      	mov	r4, r0
 8009522:	460d      	mov	r5, r1
 8009524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009526:	f7f7 f837 	bl	8000598 <__aeabi_f2d>
 800952a:	a393      	add	r3, pc, #588	; (adr r3, 8009778 <cal_mollifier_table+0xe40>)
 800952c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009530:	f7f7 f88a 	bl	8000648 <__aeabi_dmul>
 8009534:	4602      	mov	r2, r0
 8009536:	460b      	mov	r3, r1
 8009538:	4620      	mov	r0, r4
 800953a:	4629      	mov	r1, r5
 800953c:	f7f6 fecc 	bl	80002d8 <__aeabi_dsub>
 8009540:	4602      	mov	r2, r0
 8009542:	460b      	mov	r3, r1
 8009544:	4692      	mov	sl, r2
 8009546:	469b      	mov	fp, r3
 8009548:	4b8d      	ldr	r3, [pc, #564]	; (8009780 <cal_mollifier_table+0xe48>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4618      	mov	r0, r3
 800954e:	f7f7 f823 	bl	8000598 <__aeabi_f2d>
 8009552:	4604      	mov	r4, r0
 8009554:	460d      	mov	r5, r1
 8009556:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009558:	f7f7 f81e 	bl	8000598 <__aeabi_f2d>
 800955c:	a386      	add	r3, pc, #536	; (adr r3, 8009778 <cal_mollifier_table+0xe40>)
 800955e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009562:	f7f7 f871 	bl	8000648 <__aeabi_dmul>
 8009566:	4602      	mov	r2, r0
 8009568:	460b      	mov	r3, r1
 800956a:	4620      	mov	r0, r4
 800956c:	4629      	mov	r1, r5
 800956e:	f7f6 feb3 	bl	80002d8 <__aeabi_dsub>
 8009572:	4602      	mov	r2, r0
 8009574:	460b      	mov	r3, r1
 8009576:	4650      	mov	r0, sl
 8009578:	4659      	mov	r1, fp
 800957a:	f7f7 f865 	bl	8000648 <__aeabi_dmul>
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	4640      	mov	r0, r8
 8009584:	4649      	mov	r1, r9
 8009586:	f7f6 fea7 	bl	80002d8 <__aeabi_dsub>
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
 800958e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009592:	f7f7 f983 	bl	800089c <__aeabi_ddiv>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	e9c7 2300 	strd	r2, r3, [r7]
 800959e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80095a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80095a6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80095aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80095ae:	ee16 0a90 	vmov	r0, s13
 80095b2:	f7f6 fff1 	bl	8000598 <__aeabi_f2d>
 80095b6:	4680      	mov	r8, r0
 80095b8:	4689      	mov	r9, r1
 80095ba:	4b71      	ldr	r3, [pc, #452]	; (8009780 <cal_mollifier_table+0xe48>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4618      	mov	r0, r3
 80095c0:	f7f6 ffea 	bl	8000598 <__aeabi_f2d>
 80095c4:	4604      	mov	r4, r0
 80095c6:	460d      	mov	r5, r1
 80095c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095ca:	f7f6 ffe5 	bl	8000598 <__aeabi_f2d>
 80095ce:	a36a      	add	r3, pc, #424	; (adr r3, 8009778 <cal_mollifier_table+0xe40>)
 80095d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d4:	f7f7 f838 	bl	8000648 <__aeabi_dmul>
 80095d8:	4602      	mov	r2, r0
 80095da:	460b      	mov	r3, r1
 80095dc:	4620      	mov	r0, r4
 80095de:	4629      	mov	r1, r5
 80095e0:	f7f6 fe7a 	bl	80002d8 <__aeabi_dsub>
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	4692      	mov	sl, r2
 80095ea:	469b      	mov	fp, r3
 80095ec:	4b64      	ldr	r3, [pc, #400]	; (8009780 <cal_mollifier_table+0xe48>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7f6 ffd1 	bl	8000598 <__aeabi_f2d>
 80095f6:	4604      	mov	r4, r0
 80095f8:	460d      	mov	r5, r1
 80095fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095fc:	f7f6 ffcc 	bl	8000598 <__aeabi_f2d>
 8009600:	a35d      	add	r3, pc, #372	; (adr r3, 8009778 <cal_mollifier_table+0xe40>)
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	f7f7 f81f 	bl	8000648 <__aeabi_dmul>
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	4620      	mov	r0, r4
 8009610:	4629      	mov	r1, r5
 8009612:	f7f6 fe61 	bl	80002d8 <__aeabi_dsub>
 8009616:	4602      	mov	r2, r0
 8009618:	460b      	mov	r3, r1
 800961a:	4650      	mov	r0, sl
 800961c:	4659      	mov	r1, fp
 800961e:	f7f7 f813 	bl	8000648 <__aeabi_dmul>
 8009622:	4602      	mov	r2, r0
 8009624:	460b      	mov	r3, r1
 8009626:	4640      	mov	r0, r8
 8009628:	4649      	mov	r1, r9
 800962a:	f7f6 fe55 	bl	80002d8 <__aeabi_dsub>
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009636:	f7f7 f931 	bl	800089c <__aeabi_ddiv>
 800963a:	4602      	mov	r2, r0
 800963c:	460b      	mov	r3, r1
 800963e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009642:	f7f7 f801 	bl	8000648 <__aeabi_dmul>
 8009646:	4602      	mov	r2, r0
 8009648:	460b      	mov	r3, r1
 800964a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800964e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009652:	eeb1 7a67 	vneg.f32	s14, s15
 8009656:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800965a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800965e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009662:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009666:	ee16 0a90 	vmov	r0, s13
 800966a:	f7f6 ff95 	bl	8000598 <__aeabi_f2d>
 800966e:	4680      	mov	r8, r0
 8009670:	4689      	mov	r9, r1
 8009672:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009676:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800967a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800967e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009682:	ee16 0a90 	vmov	r0, s13
 8009686:	f7f6 ff87 	bl	8000598 <__aeabi_f2d>
 800968a:	4682      	mov	sl, r0
 800968c:	468b      	mov	fp, r1
 800968e:	4b3c      	ldr	r3, [pc, #240]	; (8009780 <cal_mollifier_table+0xe48>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4618      	mov	r0, r3
 8009694:	f7f6 ff80 	bl	8000598 <__aeabi_f2d>
 8009698:	4604      	mov	r4, r0
 800969a:	460d      	mov	r5, r1
 800969c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800969e:	f7f6 ff7b 	bl	8000598 <__aeabi_f2d>
 80096a2:	a335      	add	r3, pc, #212	; (adr r3, 8009778 <cal_mollifier_table+0xe40>)
 80096a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a8:	f7f6 ffce 	bl	8000648 <__aeabi_dmul>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4620      	mov	r0, r4
 80096b2:	4629      	mov	r1, r5
 80096b4:	f7f6 fe10 	bl	80002d8 <__aeabi_dsub>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	e9c7 2300 	strd	r2, r3, [r7]
 80096c0:	4b2f      	ldr	r3, [pc, #188]	; (8009780 <cal_mollifier_table+0xe48>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7f6 ff67 	bl	8000598 <__aeabi_f2d>
 80096ca:	4604      	mov	r4, r0
 80096cc:	460d      	mov	r5, r1
 80096ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096d0:	f7f6 ff62 	bl	8000598 <__aeabi_f2d>
 80096d4:	a328      	add	r3, pc, #160	; (adr r3, 8009778 <cal_mollifier_table+0xe40>)
 80096d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096da:	f7f6 ffb5 	bl	8000648 <__aeabi_dmul>
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	4620      	mov	r0, r4
 80096e4:	4629      	mov	r1, r5
 80096e6:	f7f6 fdf7 	bl	80002d8 <__aeabi_dsub>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096f2:	f7f6 ffa9 	bl	8000648 <__aeabi_dmul>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4650      	mov	r0, sl
 80096fc:	4659      	mov	r1, fp
 80096fe:	f7f6 fdeb 	bl	80002d8 <__aeabi_dsub>
 8009702:	4602      	mov	r2, r0
 8009704:	460b      	mov	r3, r1
 8009706:	4640      	mov	r0, r8
 8009708:	4649      	mov	r1, r9
 800970a:	f7f7 f8c7 	bl	800089c <__aeabi_ddiv>
 800970e:	4602      	mov	r2, r0
 8009710:	460b      	mov	r3, r1
 8009712:	ec43 2b17 	vmov	d7, r2, r3
 8009716:	eeb0 0a47 	vmov.f32	s0, s14
 800971a:	eef0 0a67 	vmov.f32	s1, s15
 800971e:	f019 fc5b 	bl	8022fd8 <exp>
 8009722:	ec53 2b10 	vmov	r2, r3, d0
 8009726:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800972a:	f7f6 ff8d 	bl	8000648 <__aeabi_dmul>
 800972e:	4602      	mov	r2, r0
 8009730:	460b      	mov	r3, r1
 8009732:	4610      	mov	r0, r2
 8009734:	4619      	mov	r1, r3
 8009736:	f7f7 fa5f 	bl	8000bf8 <__aeabi_d2f>
 800973a:	4602      	mov	r2, r0
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009740:	e014      	b.n	800976c <cal_mollifier_table+0xe34>
//				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)));;
				//target->acceleration = 0;
			}
		}else{
			old_velocity=target->velocity;
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	623b      	str	r3, [r7, #32]
			target->velocity=0;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	f04f 0200 	mov.w	r2, #0
 800974e:	601a      	str	r2, [r3, #0]
			target->acceleration = target->velocity-old_velocity;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	ed93 7a00 	vldr	s14, [r3]
 8009756:	edd7 7a08 	vldr	s15, [r7, #32]
 800975a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=4;
 8009764:	4b07      	ldr	r3, [pc, #28]	; (8009784 <cal_mollifier_table+0xe4c>)
 8009766:	2204      	movs	r2, #4
 8009768:	701a      	strb	r2, [r3, #0]
		}

}
 800976a:	bf00      	nop
 800976c:	bf00      	nop
 800976e:	3730      	adds	r7, #48	; 0x30
 8009770:	46bd      	mov	sp, r7
 8009772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009776:	bf00      	nop
 8009778:	d2f1a9fc 	.word	0xd2f1a9fc
 800977c:	3f50624d 	.word	0x3f50624d
 8009780:	20000800 	.word	0x20000800
 8009784:	20000804 	.word	0x20000804
 8009788:	f9db22d1 	.word	0xf9db22d1
 800978c:	3fdc6a7e 	.word	0x3fdc6a7e

08009790 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8009796:	4b12      	ldr	r3, [pc, #72]	; (80097e0 <MX_DMA_Init+0x50>)
 8009798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800979a:	4a11      	ldr	r2, [pc, #68]	; (80097e0 <MX_DMA_Init+0x50>)
 800979c:	f043 0304 	orr.w	r3, r3, #4
 80097a0:	6493      	str	r3, [r2, #72]	; 0x48
 80097a2:	4b0f      	ldr	r3, [pc, #60]	; (80097e0 <MX_DMA_Init+0x50>)
 80097a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097a6:	f003 0304 	and.w	r3, r3, #4
 80097aa:	607b      	str	r3, [r7, #4]
 80097ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80097ae:	4b0c      	ldr	r3, [pc, #48]	; (80097e0 <MX_DMA_Init+0x50>)
 80097b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097b2:	4a0b      	ldr	r2, [pc, #44]	; (80097e0 <MX_DMA_Init+0x50>)
 80097b4:	f043 0301 	orr.w	r3, r3, #1
 80097b8:	6493      	str	r3, [r2, #72]	; 0x48
 80097ba:	4b09      	ldr	r3, [pc, #36]	; (80097e0 <MX_DMA_Init+0x50>)
 80097bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097be:	f003 0301 	and.w	r3, r3, #1
 80097c2:	603b      	str	r3, [r7, #0]
 80097c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80097c6:	2200      	movs	r2, #0
 80097c8:	2100      	movs	r1, #0
 80097ca:	200b      	movs	r0, #11
 80097cc:	f011 fd77 	bl	801b2be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80097d0:	200b      	movs	r0, #11
 80097d2:	f011 fd8e 	bl	801b2f2 <HAL_NVIC_EnableIRQ>

}
 80097d6:	bf00      	nop
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	40021000 	.word	0x40021000

080097e4 <init_FailSafe>:
float encoder_PID_error_highspeed;
float gyro_PID_error_highspeed;
float gyro_x_error_highspeed;
int error_time_count;

void init_FailSafe(void){
 80097e4:	b480      	push	{r7}
 80097e6:	af00      	add	r7, sp, #0
	error_mode=0;
 80097e8:	4b11      	ldr	r3, [pc, #68]	; (8009830 <init_FailSafe+0x4c>)
 80097ea:	2200      	movs	r2, #0
 80097ec:	701a      	strb	r2, [r3, #0]
	no_safty=0;
 80097ee:	4b11      	ldr	r3, [pc, #68]	; (8009834 <init_FailSafe+0x50>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 80097f4:	4b10      	ldr	r3, [pc, #64]	; (8009838 <init_FailSafe+0x54>)
 80097f6:	2200      	movs	r2, #0
 80097f8:	701a      	strb	r2, [r3, #0]
	error_time_count=0;
 80097fa:	4b10      	ldr	r3, [pc, #64]	; (800983c <init_FailSafe+0x58>)
 80097fc:	2200      	movs	r2, #0
 80097fe:	601a      	str	r2, [r3, #0]
	encoder_PID_error=1500;
 8009800:	4b0f      	ldr	r3, [pc, #60]	; (8009840 <init_FailSafe+0x5c>)
 8009802:	4a10      	ldr	r2, [pc, #64]	; (8009844 <init_FailSafe+0x60>)
 8009804:	601a      	str	r2, [r3, #0]
	gyro_PID_error=800;
 8009806:	4b10      	ldr	r3, [pc, #64]	; (8009848 <init_FailSafe+0x64>)
 8009808:	4a10      	ldr	r2, [pc, #64]	; (800984c <init_FailSafe+0x68>)
 800980a:	601a      	str	r2, [r3, #0]
	gyro_x_error=1500;
 800980c:	4b10      	ldr	r3, [pc, #64]	; (8009850 <init_FailSafe+0x6c>)
 800980e:	4a0d      	ldr	r2, [pc, #52]	; (8009844 <init_FailSafe+0x60>)
 8009810:	601a      	str	r2, [r3, #0]

	encoder_PID_error_highspeed=3500;//3000
 8009812:	4b10      	ldr	r3, [pc, #64]	; (8009854 <init_FailSafe+0x70>)
 8009814:	4a10      	ldr	r2, [pc, #64]	; (8009858 <init_FailSafe+0x74>)
 8009816:	601a      	str	r2, [r3, #0]
	gyro_PID_error_highspeed=1900;
 8009818:	4b10      	ldr	r3, [pc, #64]	; (800985c <init_FailSafe+0x78>)
 800981a:	4a11      	ldr	r2, [pc, #68]	; (8009860 <init_FailSafe+0x7c>)
 800981c:	601a      	str	r2, [r3, #0]
	gyro_x_error_highspeed=1900;
 800981e:	4b11      	ldr	r3, [pc, #68]	; (8009864 <init_FailSafe+0x80>)
 8009820:	4a0f      	ldr	r2, [pc, #60]	; (8009860 <init_FailSafe+0x7c>)
 8009822:	601a      	str	r2, [r3, #0]
}
 8009824:	bf00      	nop
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	20000807 	.word	0x20000807
 8009834:	20000806 	.word	0x20000806
 8009838:	20000808 	.word	0x20000808
 800983c:	20000824 	.word	0x20000824
 8009840:	2000080c 	.word	0x2000080c
 8009844:	44bb8000 	.word	0x44bb8000
 8009848:	20000810 	.word	0x20000810
 800984c:	44480000 	.word	0x44480000
 8009850:	20000814 	.word	0x20000814
 8009854:	20000818 	.word	0x20000818
 8009858:	455ac000 	.word	0x455ac000
 800985c:	2000081c 	.word	0x2000081c
 8009860:	44ed8000 	.word	0x44ed8000
 8009864:	20000820 	.word	0x20000820

08009868 <interrupt_FailSafe>:


void interrupt_FailSafe(void){
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
	float encoder_PID_error_in;
	float gyro_PID_error_in;
	float gyro_x_error_in;

	if (highspeed_mode == 0) {
 800986e:	4b6e      	ldr	r3, [pc, #440]	; (8009a28 <interrupt_FailSafe+0x1c0>)
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d109      	bne.n	800988a <interrupt_FailSafe+0x22>
		encoder_PID_error_in=encoder_PID_error;
 8009876:	4b6d      	ldr	r3, [pc, #436]	; (8009a2c <interrupt_FailSafe+0x1c4>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error;
 800987c:	4b6c      	ldr	r3, [pc, #432]	; (8009a30 <interrupt_FailSafe+0x1c8>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error;
 8009882:	4b6c      	ldr	r3, [pc, #432]	; (8009a34 <interrupt_FailSafe+0x1cc>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	607b      	str	r3, [r7, #4]
 8009888:	e008      	b.n	800989c <interrupt_FailSafe+0x34>
	}else{
		encoder_PID_error_in=encoder_PID_error_highspeed;
 800988a:	4b6b      	ldr	r3, [pc, #428]	; (8009a38 <interrupt_FailSafe+0x1d0>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error_highspeed;
 8009890:	4b6a      	ldr	r3, [pc, #424]	; (8009a3c <interrupt_FailSafe+0x1d4>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error_highspeed;
 8009896:	4b6a      	ldr	r3, [pc, #424]	; (8009a40 <interrupt_FailSafe+0x1d8>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	607b      	str	r3, [r7, #4]
	}

	if (modeacc != 0 && modeacc != 3){
 800989c:	4b69      	ldr	r3, [pc, #420]	; (8009a44 <interrupt_FailSafe+0x1dc>)
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d062      	beq.n	800996a <interrupt_FailSafe+0x102>
 80098a4:	4b67      	ldr	r3, [pc, #412]	; (8009a44 <interrupt_FailSafe+0x1dc>)
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	2b03      	cmp	r3, #3
 80098aa:	d05e      	beq.n	800996a <interrupt_FailSafe+0x102>
		if (no_safty == 0 && error_mode == 0) {
 80098ac:	4b66      	ldr	r3, [pc, #408]	; (8009a48 <interrupt_FailSafe+0x1e0>)
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d15a      	bne.n	800996a <interrupt_FailSafe+0x102>
 80098b4:	4b65      	ldr	r3, [pc, #404]	; (8009a4c <interrupt_FailSafe+0x1e4>)
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d156      	bne.n	800996a <interrupt_FailSafe+0x102>
			//ジャイロの誤差が一定以上
					if (fabs(turning.velocity - angle_speed) >= gyro_PID_error_in ) {
 80098bc:	4b64      	ldr	r3, [pc, #400]	; (8009a50 <interrupt_FailSafe+0x1e8>)
 80098be:	ed93 7a00 	vldr	s14, [r3]
 80098c2:	4b64      	ldr	r3, [pc, #400]	; (8009a54 <interrupt_FailSafe+0x1ec>)
 80098c4:	edd3 7a00 	vldr	s15, [r3]
 80098c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098cc:	eef0 7ae7 	vabs.f32	s15, s15
 80098d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80098d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098dc:	d809      	bhi.n	80098f2 <interrupt_FailSafe+0x8a>
						//(gyro.omega_x >= 320 && gyro.omega_y >= 320) ||
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 80098de:	f7fe f87b 	bl	80079d8 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(1);
 80098e2:	2001      	movs	r0, #1
 80098e4:	f7fd fa90 	bl	8006e08 <pl_yellow_LED_count>
						error_mode = 1;
 80098e8:	4b58      	ldr	r3, [pc, #352]	; (8009a4c <interrupt_FailSafe+0x1e4>)
 80098ea:	2201      	movs	r2, #1
 80098ec:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 80098ee:	f7fa fe5f 	bl	80045b0 <clear_Ierror>
					}
					if (angle_speedx_set >= gyro_x_error_in) {
 80098f2:	4b59      	ldr	r3, [pc, #356]	; (8009a58 <interrupt_FailSafe+0x1f0>)
 80098f4:	edd3 7a00 	vldr	s15, [r3]
 80098f8:	ed97 7a01 	vldr	s14, [r7, #4]
 80098fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009904:	d809      	bhi.n	800991a <interrupt_FailSafe+0xb2>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009906:	f7fe f867 	bl	80079d8 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(2);
 800990a:	2002      	movs	r0, #2
 800990c:	f7fd fa7c 	bl	8006e08 <pl_yellow_LED_count>
						error_mode = 1;
 8009910:	4b4e      	ldr	r3, [pc, #312]	; (8009a4c <interrupt_FailSafe+0x1e4>)
 8009912:	2201      	movs	r2, #1
 8009914:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8009916:	f7fa fe4b 	bl	80045b0 <clear_Ierror>
					}
					if(fabs(straight.velocity - (fusion_speedR+fusion_speedL)/2) >= encoder_PID_error_in && modeacc==1){
 800991a:	4b50      	ldr	r3, [pc, #320]	; (8009a5c <interrupt_FailSafe+0x1f4>)
 800991c:	ed93 7a00 	vldr	s14, [r3]
 8009920:	4b4f      	ldr	r3, [pc, #316]	; (8009a60 <interrupt_FailSafe+0x1f8>)
 8009922:	edd3 6a00 	vldr	s13, [r3]
 8009926:	4b4f      	ldr	r3, [pc, #316]	; (8009a64 <interrupt_FailSafe+0x1fc>)
 8009928:	edd3 7a00 	vldr	s15, [r3]
 800992c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009930:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009934:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009938:	ee77 7a67 	vsub.f32	s15, s14, s15
 800993c:	eef0 7ae7 	vabs.f32	s15, s15
 8009940:	ed97 7a03 	vldr	s14, [r7, #12]
 8009944:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800994c:	d80d      	bhi.n	800996a <interrupt_FailSafe+0x102>
 800994e:	4b3d      	ldr	r3, [pc, #244]	; (8009a44 <interrupt_FailSafe+0x1dc>)
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	2b01      	cmp	r3, #1
 8009954:	d109      	bne.n	800996a <interrupt_FailSafe+0x102>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009956:	f7fe f83f 	bl	80079d8 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(4);
 800995a:	2004      	movs	r0, #4
 800995c:	f7fd fa54 	bl	8006e08 <pl_yellow_LED_count>
						error_mode = 1;
 8009960:	4b3a      	ldr	r3, [pc, #232]	; (8009a4c <interrupt_FailSafe+0x1e4>)
 8009962:	2201      	movs	r2, #1
 8009964:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8009966:	f7fa fe23 	bl	80045b0 <clear_Ierror>

				}

	}

	if(error_mode==1){
 800996a:	4b38      	ldr	r3, [pc, #224]	; (8009a4c <interrupt_FailSafe+0x1e4>)
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	2b01      	cmp	r3, #1
 8009970:	d153      	bne.n	8009a1a <interrupt_FailSafe+0x1b2>
		record_mode=0;
 8009972:	4b3d      	ldr	r3, [pc, #244]	; (8009a68 <interrupt_FailSafe+0x200>)
 8009974:	2200      	movs	r2, #0
 8009976:	701a      	strb	r2, [r3, #0]
		error_time_count++;
 8009978:	4b3c      	ldr	r3, [pc, #240]	; (8009a6c <interrupt_FailSafe+0x204>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3301      	adds	r3, #1
 800997e:	4a3b      	ldr	r2, [pc, #236]	; (8009a6c <interrupt_FailSafe+0x204>)
 8009980:	6013      	str	r3, [r2, #0]
		if(error_time_count<=1000){
 8009982:	4b3a      	ldr	r3, [pc, #232]	; (8009a6c <interrupt_FailSafe+0x204>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800998a:	dc05      	bgt.n	8009998 <interrupt_FailSafe+0x130>
			init_WallControl();
 800998c:	f7fa ff6a 	bl	8004864 <init_WallControl>
			modeacc=100;//エラー用
 8009990:	4b2c      	ldr	r3, [pc, #176]	; (8009a44 <interrupt_FailSafe+0x1dc>)
 8009992:	2264      	movs	r2, #100	; 0x64
 8009994:	701a      	strb	r2, [r3, #0]
 8009996:	e009      	b.n	80099ac <interrupt_FailSafe+0x144>
			//pl_R_DriveMotor_mode(MOTOR_BREAK);
			//pl_L_DriveMotor_mode(MOTOR_BREAK);
		}else{
			pl_DriveMotor_standby(OFF);
 8009998:	2000      	movs	r0, #0
 800999a:	f7fd ff89 	bl	80078b0 <pl_DriveMotor_standby>
			pl_DriveMotor_stop();
 800999e:	f7fd ffed 	bl	800797c <pl_DriveMotor_stop>
			pl_FunMotor_stop();
 80099a2:	f7fe f819 	bl	80079d8 <pl_FunMotor_stop>
			modeacc=0;
 80099a6:	4b27      	ldr	r3, [pc, #156]	; (8009a44 <interrupt_FailSafe+0x1dc>)
 80099a8:	2200      	movs	r2, #0
 80099aa:	701a      	strb	r2, [r3, #0]
		}
					NoWallCountL90 = 4294967295;
 80099ac:	4b30      	ldr	r3, [pc, #192]	; (8009a70 <interrupt_FailSafe+0x208>)
 80099ae:	f04f 32ff 	mov.w	r2, #4294967295
 80099b2:	601a      	str	r2, [r3, #0]
					NoWallCountR90 = 4294967295;
 80099b4:	4b2f      	ldr	r3, [pc, #188]	; (8009a74 <interrupt_FailSafe+0x20c>)
 80099b6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ba:	601a      	str	r2, [r3, #0]
					NoWallCountL45 = 4294967295;
 80099bc:	4b2e      	ldr	r3, [pc, #184]	; (8009a78 <interrupt_FailSafe+0x210>)
 80099be:	f04f 32ff 	mov.w	r2, #4294967295
 80099c2:	601a      	str	r2, [r3, #0]
					NoWallCountR45 = 4294967295;
 80099c4:	4b2d      	ldr	r3, [pc, #180]	; (8009a7c <interrupt_FailSafe+0x214>)
 80099c6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ca:	601a      	str	r2, [r3, #0]
					NoWallCountL45slant = 4294967295;
 80099cc:	4b2c      	ldr	r3, [pc, #176]	; (8009a80 <interrupt_FailSafe+0x218>)
 80099ce:	f04f 32ff 	mov.w	r2, #4294967295
 80099d2:	601a      	str	r2, [r3, #0]
					NoWallCountR45slant = 4294967295;
 80099d4:	4b2b      	ldr	r3, [pc, #172]	; (8009a84 <interrupt_FailSafe+0x21c>)
 80099d6:	f04f 32ff 	mov.w	r2, #4294967295
 80099da:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL90 = 50;
 80099dc:	4b2a      	ldr	r3, [pc, #168]	; (8009a88 <interrupt_FailSafe+0x220>)
 80099de:	4a2b      	ldr	r2, [pc, #172]	; (8009a8c <interrupt_FailSafe+0x224>)
 80099e0:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR90 = 50;
 80099e2:	4b2b      	ldr	r3, [pc, #172]	; (8009a90 <interrupt_FailSafe+0x228>)
 80099e4:	4a29      	ldr	r2, [pc, #164]	; (8009a8c <interrupt_FailSafe+0x224>)
 80099e6:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45 = 20;
 80099e8:	4b2a      	ldr	r3, [pc, #168]	; (8009a94 <interrupt_FailSafe+0x22c>)
 80099ea:	4a2b      	ldr	r2, [pc, #172]	; (8009a98 <interrupt_FailSafe+0x230>)
 80099ec:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45 = 20;
 80099ee:	4b2b      	ldr	r3, [pc, #172]	; (8009a9c <interrupt_FailSafe+0x234>)
 80099f0:	4a29      	ldr	r2, [pc, #164]	; (8009a98 <interrupt_FailSafe+0x230>)
 80099f2:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant = 35;
 80099f4:	4b2a      	ldr	r3, [pc, #168]	; (8009aa0 <interrupt_FailSafe+0x238>)
 80099f6:	4a2b      	ldr	r2, [pc, #172]	; (8009aa4 <interrupt_FailSafe+0x23c>)
 80099f8:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant = 35;
 80099fa:	4b2b      	ldr	r3, [pc, #172]	; (8009aa8 <interrupt_FailSafe+0x240>)
 80099fc:	4a29      	ldr	r2, [pc, #164]	; (8009aa4 <interrupt_FailSafe+0x23c>)
 80099fe:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant2 = 35;
 8009a00:	4b2a      	ldr	r3, [pc, #168]	; (8009aac <interrupt_FailSafe+0x244>)
 8009a02:	4a28      	ldr	r2, [pc, #160]	; (8009aa4 <interrupt_FailSafe+0x23c>)
 8009a04:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant2 = 35;
 8009a06:	4b2a      	ldr	r3, [pc, #168]	; (8009ab0 <interrupt_FailSafe+0x248>)
 8009a08:	4a26      	ldr	r2, [pc, #152]	; (8009aa4 <interrupt_FailSafe+0x23c>)
 8009a0a:	601a      	str	r2, [r3, #0]
					g_acc_flag=4;
 8009a0c:	4b29      	ldr	r3, [pc, #164]	; (8009ab4 <interrupt_FailSafe+0x24c>)
 8009a0e:	2204      	movs	r2, #4
 8009a10:	701a      	strb	r2, [r3, #0]
					g_wallCut_mode = 0;
 8009a12:	4b29      	ldr	r3, [pc, #164]	; (8009ab8 <interrupt_FailSafe+0x250>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	701a      	strb	r2, [r3, #0]
	}else{
		error_time_count=0;
	}


}
 8009a18:	e002      	b.n	8009a20 <interrupt_FailSafe+0x1b8>
		error_time_count=0;
 8009a1a:	4b14      	ldr	r3, [pc, #80]	; (8009a6c <interrupt_FailSafe+0x204>)
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	601a      	str	r2, [r3, #0]
}
 8009a20:	bf00      	nop
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	20000808 	.word	0x20000808
 8009a2c:	2000080c 	.word	0x2000080c
 8009a30:	20000810 	.word	0x20000810
 8009a34:	20000814 	.word	0x20000814
 8009a38:	20000818 	.word	0x20000818
 8009a3c:	2000081c 	.word	0x2000081c
 8009a40:	20000820 	.word	0x20000820
 8009a44:	20000528 	.word	0x20000528
 8009a48:	20000806 	.word	0x20000806
 8009a4c:	20000807 	.word	0x20000807
 8009a50:	200004e4 	.word	0x200004e4
 8009a54:	20000268 	.word	0x20000268
 8009a58:	20000274 	.word	0x20000274
 8009a5c:	200004d8 	.word	0x200004d8
 8009a60:	2000025c 	.word	0x2000025c
 8009a64:	20000258 	.word	0x20000258
 8009a68:	2000edc0 	.word	0x2000edc0
 8009a6c:	20000824 	.word	0x20000824
 8009a70:	200005b8 	.word	0x200005b8
 8009a74:	200005b4 	.word	0x200005b4
 8009a78:	200005c0 	.word	0x200005c0
 8009a7c:	200005bc 	.word	0x200005bc
 8009a80:	200005c8 	.word	0x200005c8
 8009a84:	200005c4 	.word	0x200005c4
 8009a88:	200005d0 	.word	0x200005d0
 8009a8c:	42480000 	.word	0x42480000
 8009a90:	200005cc 	.word	0x200005cc
 8009a94:	200005d8 	.word	0x200005d8
 8009a98:	41a00000 	.word	0x41a00000
 8009a9c:	200005d4 	.word	0x200005d4
 8009aa0:	200005e0 	.word	0x200005e0
 8009aa4:	420c0000 	.word	0x420c0000
 8009aa8:	200005dc 	.word	0x200005dc
 8009aac:	200005e8 	.word	0x200005e8
 8009ab0:	200005e4 	.word	0x200005e4
 8009ab4:	20000804 	.word	0x20000804
 8009ab8:	20000592 	.word	0x20000592

08009abc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b08a      	sub	sp, #40	; 0x28
 8009ac0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ac2:	f107 0314 	add.w	r3, r7, #20
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	601a      	str	r2, [r3, #0]
 8009aca:	605a      	str	r2, [r3, #4]
 8009acc:	609a      	str	r2, [r3, #8]
 8009ace:	60da      	str	r2, [r3, #12]
 8009ad0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009ad2:	4b3a      	ldr	r3, [pc, #232]	; (8009bbc <MX_GPIO_Init+0x100>)
 8009ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ad6:	4a39      	ldr	r2, [pc, #228]	; (8009bbc <MX_GPIO_Init+0x100>)
 8009ad8:	f043 0304 	orr.w	r3, r3, #4
 8009adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ade:	4b37      	ldr	r3, [pc, #220]	; (8009bbc <MX_GPIO_Init+0x100>)
 8009ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ae2:	f003 0304 	and.w	r3, r3, #4
 8009ae6:	613b      	str	r3, [r7, #16]
 8009ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009aea:	4b34      	ldr	r3, [pc, #208]	; (8009bbc <MX_GPIO_Init+0x100>)
 8009aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aee:	4a33      	ldr	r2, [pc, #204]	; (8009bbc <MX_GPIO_Init+0x100>)
 8009af0:	f043 0320 	orr.w	r3, r3, #32
 8009af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009af6:	4b31      	ldr	r3, [pc, #196]	; (8009bbc <MX_GPIO_Init+0x100>)
 8009af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009afa:	f003 0320 	and.w	r3, r3, #32
 8009afe:	60fb      	str	r3, [r7, #12]
 8009b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b02:	4b2e      	ldr	r3, [pc, #184]	; (8009bbc <MX_GPIO_Init+0x100>)
 8009b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b06:	4a2d      	ldr	r2, [pc, #180]	; (8009bbc <MX_GPIO_Init+0x100>)
 8009b08:	f043 0301 	orr.w	r3, r3, #1
 8009b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b0e:	4b2b      	ldr	r3, [pc, #172]	; (8009bbc <MX_GPIO_Init+0x100>)
 8009b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b12:	f003 0301 	and.w	r3, r3, #1
 8009b16:	60bb      	str	r3, [r7, #8]
 8009b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b1a:	4b28      	ldr	r3, [pc, #160]	; (8009bbc <MX_GPIO_Init+0x100>)
 8009b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b1e:	4a27      	ldr	r2, [pc, #156]	; (8009bbc <MX_GPIO_Init+0x100>)
 8009b20:	f043 0302 	orr.w	r3, r3, #2
 8009b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b26:	4b25      	ldr	r3, [pc, #148]	; (8009bbc <MX_GPIO_Init+0x100>)
 8009b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b2a:	f003 0302 	and.w	r3, r3, #2
 8009b2e:	607b      	str	r3, [r7, #4]
 8009b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009b32:	2200      	movs	r2, #0
 8009b34:	f24e 0150 	movw	r1, #57424	; 0xe050
 8009b38:	4821      	ldr	r0, [pc, #132]	; (8009bc0 <MX_GPIO_Init+0x104>)
 8009b3a:	f012 faab 	bl	801c094 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f648 1110 	movw	r1, #35088	; 0x8910
 8009b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b48:	f012 faa4 	bl	801c094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f64e 4196 	movw	r1, #60566	; 0xec96
 8009b52:	481c      	ldr	r0, [pc, #112]	; (8009bc4 <MX_GPIO_Init+0x108>)
 8009b54:	f012 fa9e 	bl	801c094 <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009b58:	f24e 0350 	movw	r3, #57424	; 0xe050
 8009b5c:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b62:	2300      	movs	r3, #0
 8009b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b66:	2300      	movs	r3, #0
 8009b68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b6a:	f107 0314 	add.w	r3, r7, #20
 8009b6e:	4619      	mov	r1, r3
 8009b70:	4813      	ldr	r0, [pc, #76]	; (8009bc0 <MX_GPIO_Init+0x104>)
 8009b72:	f012 f90d 	bl	801bd90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 8009b76:	f648 1310 	movw	r3, #35088	; 0x8910
 8009b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b80:	2300      	movs	r3, #0
 8009b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b84:	2300      	movs	r3, #0
 8009b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b88:	f107 0314 	add.w	r3, r7, #20
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b92:	f012 f8fd 	bl	801bd90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009b96:	f64e 4396 	movw	r3, #60566	; 0xec96
 8009b9a:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ba8:	f107 0314 	add.w	r3, r7, #20
 8009bac:	4619      	mov	r1, r3
 8009bae:	4805      	ldr	r0, [pc, #20]	; (8009bc4 <MX_GPIO_Init+0x108>)
 8009bb0:	f012 f8ee 	bl	801bd90 <HAL_GPIO_Init>

}
 8009bb4:	bf00      	nop
 8009bb6:	3728      	adds	r7, #40	; 0x28
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	40021000 	.word	0x40021000
 8009bc0:	48000800 	.word	0x48000800
 8009bc4:	48000400 	.word	0x48000400

08009bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009bc8:	b590      	push	{r4, r7, lr}
 8009bca:	b087      	sub	sp, #28
 8009bcc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009bce:	f00f f82d 	bl	8018c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009bd2:	f000 f8a7 	bl	8009d24 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8009bd6:	f7ff fddb 	bl	8009790 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009bda:	f7ff ff6f 	bl	8009abc <MX_GPIO_Init>
  MX_ADC1_Init();
 8009bde:	f7fe f9d5 	bl	8007f8c <MX_ADC1_Init>
  MX_SPI1_Init();
 8009be2:	f00d fb3f 	bl	8017264 <MX_SPI1_Init>
  MX_TIM6_Init();
 8009be6:	f00d fdab 	bl	8017740 <MX_TIM6_Init>
  MX_TIM8_Init();
 8009bea:	f00d fddf 	bl	80177ac <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8009bee:	f00e ff4f 	bl	8018a90 <MX_USART1_UART_Init>
  //MX_DMA_Init();
  MX_SPI3_Init();
 8009bf2:	f00d fb75 	bl	80172e0 <MX_SPI3_Init>
  MX_TIM16_Init();
 8009bf6:	f00d fe79 	bl	80178ec <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  pl_timer_init();
 8009bfa:	f7fe f8d9 	bl	8007db0 <pl_timer_init>
  pl_gyro_init();
 8009bfe:	f7fd fd6b 	bl	80076d8 <pl_gyro_init>
  pl_sensor_init();
 8009c02:	f7fd ff19 	bl	8007a38 <pl_sensor_init>
  reset_distance();
 8009c06:	f7f7 f9c9 	bl	8000f9c <reset_distance>
  reset_gyro();
 8009c0a:	f7f7 fdad 	bl	8001768 <reset_gyro>
  reset_speed();
 8009c0e:	f7f7 fa03 	bl	8001018 <reset_speed>
  record_reset();
 8009c12:	f00d f8b5 	bl	8016d80 <record_reset>
  pl_motor_init();
 8009c16:	f7fd fe25 	bl	8007864 <pl_motor_init>
  PID_Init();
 8009c1a:	f7fa fc8d 	bl	8004538 <PID_Init>
  init_WallControl();
 8009c1e:	f7fa fe21 	bl	8004864 <init_WallControl>
  Control_mode_Init();
 8009c22:	f7f8 f8eb 	bl	8001dfc <Control_mode_Init>
  init_FailSafe();
 8009c26:	f7ff fddd 	bl	80097e4 <init_FailSafe>
  input_parameter();
 8009c2a:	f00e f83f 	bl	8017cac <input_parameter>

	//uint8_t hello[] = "Hello World\n\r";
  //float PI=3.14;
  //uint8_t hoge = 3;
  int mode=0;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	60fb      	str	r3, [r7, #12]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c32:	4b37      	ldr	r3, [pc, #220]	; (8009d10 <main+0x148>)
 8009c34:	881b      	ldrh	r3, [r3, #0]
 8009c36:	4619      	mov	r1, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009c38:	4b35      	ldr	r3, [pc, #212]	; (8009d10 <main+0x148>)
 8009c3a:	885b      	ldrh	r3, [r3, #2]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c3c:	4618      	mov	r0, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009c3e:	4b34      	ldr	r3, [pc, #208]	; (8009d10 <main+0x148>)
 8009c40:	889b      	ldrh	r3, [r3, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c42:	461c      	mov	r4, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009c44:	4b32      	ldr	r3, [pc, #200]	; (8009d10 <main+0x148>)
 8009c46:	88db      	ldrh	r3, [r3, #6]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c48:	461a      	mov	r2, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009c4a:	4b31      	ldr	r3, [pc, #196]	; (8009d10 <main+0x148>)
 8009c4c:	891b      	ldrh	r3, [r3, #8]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c4e:	9301      	str	r3, [sp, #4]
 8009c50:	9200      	str	r2, [sp, #0]
 8009c52:	4623      	mov	r3, r4
 8009c54:	4602      	mov	r2, r0
 8009c56:	482f      	ldr	r0, [pc, #188]	; (8009d14 <main+0x14c>)
 8009c58:	f016 ffb2 	bl	8020bc0 <iprintf>
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c5c:	4b2e      	ldr	r3, [pc, #184]	; (8009d18 <main+0x150>)
 8009c5e:	881b      	ldrh	r3, [r3, #0]
 8009c60:	4619      	mov	r1, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c62:	4b2d      	ldr	r3, [pc, #180]	; (8009d18 <main+0x150>)
 8009c64:	885b      	ldrh	r3, [r3, #2]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c66:	4618      	mov	r0, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c68:	4b2b      	ldr	r3, [pc, #172]	; (8009d18 <main+0x150>)
 8009c6a:	889b      	ldrh	r3, [r3, #4]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c6c:	461c      	mov	r4, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c6e:	4b2a      	ldr	r3, [pc, #168]	; (8009d18 <main+0x150>)
 8009c70:	88db      	ldrh	r3, [r3, #6]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c72:	461a      	mov	r2, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c74:	4b28      	ldr	r3, [pc, #160]	; (8009d18 <main+0x150>)
 8009c76:	891b      	ldrh	r3, [r3, #8]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c78:	9301      	str	r3, [sp, #4]
 8009c7a:	9200      	str	r2, [sp, #0]
 8009c7c:	4623      	mov	r3, r4
 8009c7e:	4602      	mov	r2, r0
 8009c80:	4826      	ldr	r0, [pc, #152]	; (8009d1c <main+0x154>)
 8009c82:	f016 ff9d 	bl	8020bc0 <iprintf>
	battcheak();
 8009c86:	f7f7 ff7b 	bl	8001b80 <battcheak>

//起動cheak
	int yellow_count=1;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009c8e:	2300      	movs	r3, #0
 8009c90:	607b      	str	r3, [r7, #4]
 8009c92:	e00d      	b.n	8009cb0 <main+0xe8>
		pl_yellow_LED_count(yellow_count);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7fd f8b5 	bl	8006e08 <pl_yellow_LED_count>
		HAL_Delay(50);
 8009c9e:	2032      	movs	r0, #50	; 0x32
 8009ca0:	f00f f83c 	bl	8018d1c <HAL_Delay>
		yellow_count=yellow_count*2;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	005b      	lsls	r3, r3, #1
 8009ca8:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	3301      	adds	r3, #1
 8009cae:	607b      	str	r3, [r7, #4]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2b07      	cmp	r3, #7
 8009cb4:	ddee      	ble.n	8009c94 <main+0xcc>
	}
	for(int i=0;i<9;i++){
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	603b      	str	r3, [r7, #0]
 8009cba:	e00f      	b.n	8009cdc <main+0x114>
			pl_yellow_LED_count(yellow_count);
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7fd f8a1 	bl	8006e08 <pl_yellow_LED_count>
			HAL_Delay(50);
 8009cc6:	2032      	movs	r0, #50	; 0x32
 8009cc8:	f00f f828 	bl	8018d1c <HAL_Delay>
			yellow_count=yellow_count/2;
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	0fda      	lsrs	r2, r3, #31
 8009cd0:	4413      	add	r3, r2
 8009cd2:	105b      	asrs	r3, r3, #1
 8009cd4:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<9;i++){
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	603b      	str	r3, [r7, #0]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	2b08      	cmp	r3, #8
 8009ce0:	ddec      	ble.n	8009cbc <main+0xf4>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  		mode=mode_decision(mode);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f00b fa92 	bl	8015210 <mode_decision>
 8009cec:	4603      	mov	r3, r0
 8009cee:	60fb      	str	r3, [r7, #12]
//	  		clear_Ierror();
	  		reset_distance();
 8009cf0:	f7f7 f954 	bl	8000f9c <reset_distance>
	  		reset_gyro();
 8009cf4:	f7f7 fd38 	bl	8001768 <reset_gyro>
	  		reset_speed();
 8009cf8:	f7f7 f98e 	bl	8001018 <reset_speed>

	  		mode_execution(mode);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	4618      	mov	r0, r3
 8009d02:	f00b fb7f 	bl	8015404 <mode_execution>

	  		error_mode = 0;
 8009d06:	4b06      	ldr	r3, [pc, #24]	; (8009d20 <main+0x158>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	701a      	strb	r2, [r3, #0]
	  		mode=mode_decision(mode);
 8009d0c:	e7e9      	b.n	8009ce2 <main+0x11a>
 8009d0e:	bf00      	nop
 8009d10:	2000070c 	.word	0x2000070c
 8009d14:	08023480 	.word	0x08023480
 8009d18:	20000718 	.word	0x20000718
 8009d1c:	080234ac 	.word	0x080234ac
 8009d20:	20000807 	.word	0x20000807

08009d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b094      	sub	sp, #80	; 0x50
 8009d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009d2a:	f107 0318 	add.w	r3, r7, #24
 8009d2e:	2238      	movs	r2, #56	; 0x38
 8009d30:	2100      	movs	r1, #0
 8009d32:	4618      	mov	r0, r3
 8009d34:	f016 fad2 	bl	80202dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009d38:	1d3b      	adds	r3, r7, #4
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	601a      	str	r2, [r3, #0]
 8009d3e:	605a      	str	r2, [r3, #4]
 8009d40:	609a      	str	r2, [r3, #8]
 8009d42:	60da      	str	r2, [r3, #12]
 8009d44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8009d46:	2000      	movs	r0, #0
 8009d48:	f012 f9bc 	bl	801c0c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009d50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d54:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009d56:	2302      	movs	r3, #2
 8009d58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8009d5e:	2304      	movs	r3, #4
 8009d60:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8009d62:	2355      	movs	r3, #85	; 0x55
 8009d64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009d66:	2302      	movs	r3, #2
 8009d68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009d6a:	2302      	movs	r3, #2
 8009d6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009d6e:	2302      	movs	r3, #2
 8009d70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009d72:	f107 0318 	add.w	r3, r7, #24
 8009d76:	4618      	mov	r0, r3
 8009d78:	f012 fa58 	bl	801c22c <HAL_RCC_OscConfig>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8009d82:	f000 f81a 	bl	8009dba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009d86:	230f      	movs	r3, #15
 8009d88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009d92:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009d96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009d9e:	1d3b      	adds	r3, r7, #4
 8009da0:	2104      	movs	r1, #4
 8009da2:	4618      	mov	r0, r3
 8009da4:	f012 fd5a 	bl	801c85c <HAL_RCC_ClockConfig>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8009dae:	f000 f804 	bl	8009dba <Error_Handler>
  }
}
 8009db2:	bf00      	nop
 8009db4:	3750      	adds	r7, #80	; 0x50
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009dba:	b480      	push	{r7}
 8009dbc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009dbe:	b672      	cpsid	i
}
 8009dc0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009dc2:	e7fe      	b.n	8009dc2 <Error_Handler+0x8>

08009dc4 <backTurn_controlWall>:
		pl_L_DriveMotor_mode(MOTOR_BREAK);
	}

}

void backTurn_controlWall(float input_TurningVelocity,float input_TurningAcceleration,_Bool front_wall,_Bool left_wall,_Bool right_wall){
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	ed87 0a03 	vstr	s0, [r7, #12]
 8009dce:	edc7 0a02 	vstr	s1, [r7, #8]
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	71fb      	strb	r3, [r7, #7]
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	71bb      	strb	r3, [r7, #6]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	717b      	strb	r3, [r7, #5]
	if(front_wall){
 8009dde:	79fb      	ldrb	r3, [r7, #7]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00a      	beq.n	8009dfa <backTurn_controlWall+0x36>
		no_frontwall_straight();
 8009de4:	f7fa f904 	bl	8003ff0 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009de8:	2003      	movs	r0, #3
 8009dea:	f7fd fd93 	bl	8007914 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009dee:	2003      	movs	r0, #3
 8009df0:	f7fd fd68 	bl	80078c4 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009df4:	2032      	movs	r0, #50	; 0x32
 8009df6:	f7fe f88b 	bl	8007f10 <wait_ms_NoReset>
	}
	if(left_wall){
 8009dfa:	79bb      	ldrb	r3, [r7, #6]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d02c      	beq.n	8009e5a <backTurn_controlWall+0x96>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009e00:	ed97 2a02 	vldr	s4, [r7, #8]
 8009e04:	edd7 1a03 	vldr	s3, [r7, #12]
 8009e08:	ed9f 1a50 	vldr	s2, [pc, #320]	; 8009f4c <backTurn_controlWall+0x188>
 8009e0c:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8009f4c <backTurn_controlWall+0x188>
 8009e10:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8009f50 <backTurn_controlWall+0x18c>
 8009e14:	f7f9 fdf0 	bl	80039f8 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009e18:	2003      	movs	r0, #3
 8009e1a:	f7fd fd7b 	bl	8007914 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009e1e:	2003      	movs	r0, #3
 8009e20:	f7fd fd50 	bl	80078c4 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009e24:	2032      	movs	r0, #50	; 0x32
 8009e26:	f7fe f873 	bl	8007f10 <wait_ms_NoReset>
		no_frontwall_straight();
 8009e2a:	f7fa f8e1 	bl	8003ff0 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009e2e:	2003      	movs	r0, #3
 8009e30:	f7fd fd70 	bl	8007914 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009e34:	2003      	movs	r0, #3
 8009e36:	f7fd fd45 	bl	80078c4 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009e3a:	2032      	movs	r0, #50	; 0x32
 8009e3c:	f7fe f868 	bl	8007f10 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009e40:	ed97 2a02 	vldr	s4, [r7, #8]
 8009e44:	edd7 1a03 	vldr	s3, [r7, #12]
 8009e48:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8009f4c <backTurn_controlWall+0x188>
 8009e4c:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8009f4c <backTurn_controlWall+0x188>
 8009e50:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8009f50 <backTurn_controlWall+0x18c>
 8009e54:	f7f9 fdd0 	bl	80039f8 <turning_table2>
 8009e58:	e06a      	b.n	8009f30 <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall){
 8009e5a:	79bb      	ldrb	r3, [r7, #6]
 8009e5c:	f083 0301 	eor.w	r3, r3, #1
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d037      	beq.n	8009ed6 <backTurn_controlWall+0x112>
 8009e66:	797b      	ldrb	r3, [r7, #5]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d034      	beq.n	8009ed6 <backTurn_controlWall+0x112>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 8009e6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e70:	eef1 7a67 	vneg.f32	s15, s15
 8009e74:	ed97 2a02 	vldr	s4, [r7, #8]
 8009e78:	eef0 1a67 	vmov.f32	s3, s15
 8009e7c:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8009f4c <backTurn_controlWall+0x188>
 8009e80:	eddf 0a32 	vldr	s1, [pc, #200]	; 8009f4c <backTurn_controlWall+0x188>
 8009e84:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8009f54 <backTurn_controlWall+0x190>
 8009e88:	f7f9 fdb6 	bl	80039f8 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009e8c:	2003      	movs	r0, #3
 8009e8e:	f7fd fd41 	bl	8007914 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009e92:	2003      	movs	r0, #3
 8009e94:	f7fd fd16 	bl	80078c4 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009e98:	2032      	movs	r0, #50	; 0x32
 8009e9a:	f7fe f839 	bl	8007f10 <wait_ms_NoReset>
		no_frontwall_straight();
 8009e9e:	f7fa f8a7 	bl	8003ff0 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009ea2:	2003      	movs	r0, #3
 8009ea4:	f7fd fd36 	bl	8007914 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009ea8:	2003      	movs	r0, #3
 8009eaa:	f7fd fd0b 	bl	80078c4 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009eae:	2032      	movs	r0, #50	; 0x32
 8009eb0:	f7fe f82e 	bl	8007f10 <wait_ms_NoReset>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 8009eb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8009eb8:	eef1 7a67 	vneg.f32	s15, s15
 8009ebc:	ed97 2a02 	vldr	s4, [r7, #8]
 8009ec0:	eef0 1a67 	vmov.f32	s3, s15
 8009ec4:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8009f4c <backTurn_controlWall+0x188>
 8009ec8:	eddf 0a20 	vldr	s1, [pc, #128]	; 8009f4c <backTurn_controlWall+0x188>
 8009ecc:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8009f54 <backTurn_controlWall+0x190>
 8009ed0:	f7f9 fd92 	bl	80039f8 <turning_table2>
 8009ed4:	e02c      	b.n	8009f30 <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall==0){
 8009ed6:	79bb      	ldrb	r3, [r7, #6]
 8009ed8:	f083 0301 	eor.w	r3, r3, #1
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d026      	beq.n	8009f30 <backTurn_controlWall+0x16c>
 8009ee2:	797b      	ldrb	r3, [r7, #5]
 8009ee4:	f083 0301 	eor.w	r3, r3, #1
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d020      	beq.n	8009f30 <backTurn_controlWall+0x16c>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009eee:	ed97 2a02 	vldr	s4, [r7, #8]
 8009ef2:	edd7 1a03 	vldr	s3, [r7, #12]
 8009ef6:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8009f4c <backTurn_controlWall+0x188>
 8009efa:	eddf 0a14 	vldr	s1, [pc, #80]	; 8009f4c <backTurn_controlWall+0x188>
 8009efe:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8009f50 <backTurn_controlWall+0x18c>
 8009f02:	f7f9 fd79 	bl	80039f8 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009f06:	2003      	movs	r0, #3
 8009f08:	f7fd fd04 	bl	8007914 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009f0c:	2003      	movs	r0, #3
 8009f0e:	f7fd fcd9 	bl	80078c4 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009f12:	2032      	movs	r0, #50	; 0x32
 8009f14:	f7fd fffc 	bl	8007f10 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009f18:	ed97 2a02 	vldr	s4, [r7, #8]
 8009f1c:	edd7 1a03 	vldr	s3, [r7, #12]
 8009f20:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8009f4c <backTurn_controlWall+0x188>
 8009f24:	eddf 0a09 	vldr	s1, [pc, #36]	; 8009f4c <backTurn_controlWall+0x188>
 8009f28:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8009f50 <backTurn_controlWall+0x18c>
 8009f2c:	f7f9 fd64 	bl	80039f8 <turning_table2>
	}
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009f30:	2003      	movs	r0, #3
 8009f32:	f7fd fcef 	bl	8007914 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009f36:	2003      	movs	r0, #3
 8009f38:	f7fd fcc4 	bl	80078c4 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(50);
 8009f3c:	2032      	movs	r0, #50	; 0x32
 8009f3e:	f7fd ffe7 	bl	8007f10 <wait_ms_NoReset>

}
 8009f42:	bf00      	nop
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	00000000 	.word	0x00000000
 8009f50:	42b40000 	.word	0x42b40000
 8009f54:	c2b40000 	.word	0xc2b40000

08009f58 <slalomR>:


void slalomR(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 8009f58:	b084      	sub	sp, #16
 8009f5a:	b5b0      	push	{r4, r5, r7, lr}
 8009f5c:	ed2d 8b02 	vpush	{d8}
 8009f60:	b084      	sub	sp, #16
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8009f68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009f6c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 8009f70:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	f040 80f5 	bne.w	800a164 <slalomR+0x20c>
		highspeed_mode = 0;
 8009f7a:	4be3      	ldr	r3, [pc, #908]	; (800a308 <slalomR+0x3b0>)
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 8009f80:	2301      	movs	r3, #1
 8009f82:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 8009f84:	2300      	movs	r3, #0
 8009f86:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 8009f90:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d11f      	bne.n	8009fd8 <slalomR+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009f98:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009f9c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009fa0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009fa4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009fa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009fac:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009fb0:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009fb4:	eddf 5ad5 	vldr	s11, [pc, #852]	; 800a30c <slalomR+0x3b4>
 8009fb8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	eeb0 2a47 	vmov.f32	s4, s14
 8009fc2:	eef0 1a46 	vmov.f32	s3, s12
 8009fc6:	eeb0 1a66 	vmov.f32	s2, s13
 8009fca:	eddf 0ad1 	vldr	s1, [pc, #836]	; 800a310 <slalomR+0x3b8>
 8009fce:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 800a314 <slalomR+0x3bc>
 8009fd2:	f7f9 f803 	bl	8002fdc <straight_table2>
 8009fd6:	e01e      	b.n	800a016 <slalomR+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009fd8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009fdc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009fe0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009fe4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009fec:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009ff0:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009ff4:	eddf 5ac5 	vldr	s11, [pc, #788]	; 800a30c <slalomR+0x3b4>
 8009ff8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	eeb0 2a47 	vmov.f32	s4, s14
 800a002:	eef0 1a46 	vmov.f32	s3, s12
 800a006:	eeb0 1a66 	vmov.f32	s2, s13
 800a00a:	eddf 0ac1 	vldr	s1, [pc, #772]	; 800a310 <slalomR+0x3b8>
 800a00e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800a318 <slalomR+0x3c0>
 800a012:	f7f8 ffe3 	bl	8002fdc <straight_table2>
		}
		wallmode.WallCutMode=1;
 800a016:	2301      	movs	r3, #1
 800a018:	73fb      	strb	r3, [r7, #15]
		wallmode.WallControlMode=0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	733b      	strb	r3, [r7, #12]
		if(shortest_mode==0){
 800a01e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a022:	2b00      	cmp	r3, #0
 800a024:	d127      	bne.n	800a076 <slalomR+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a026:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a02a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a02e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a032:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a036:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a03a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a03e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a042:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a04a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a04e:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a052:	eddf 4aae 	vldr	s9, [pc, #696]	; 800a30c <slalomR+0x3b4>
 800a056:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	eeb0 2a47 	vmov.f32	s4, s14
 800a060:	eef0 1a45 	vmov.f32	s3, s10
 800a064:	eeb0 1a65 	vmov.f32	s2, s11
 800a068:	eef0 0a46 	vmov.f32	s1, s12
 800a06c:	eeb0 0a66 	vmov.f32	s0, s13
 800a070:	f7f8 ffb4 	bl	8002fdc <straight_table2>
 800a074:	e022      	b.n	800a0bc <slalomR+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a076:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a07a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a07e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a082:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a086:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a08a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a08e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a092:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a096:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a09a:	eddf 4a9c 	vldr	s9, [pc, #624]	; 800a30c <slalomR+0x3b4>
 800a09e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	eeb0 2a47 	vmov.f32	s4, s14
 800a0a8:	eef0 1a45 	vmov.f32	s3, s10
 800a0ac:	eeb0 1a65 	vmov.f32	s2, s11
 800a0b0:	eef0 0a46 	vmov.f32	s1, s12
 800a0b4:	eeb0 0a66 	vmov.f32	s0, s13
 800a0b8:	f7f8 ff90 	bl	8002fdc <straight_table2>
		}
		if(mollifier_mode == ON){
 800a0bc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d10c      	bne.n	800a0de <slalomR+0x186>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a0c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a0c8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a0cc:	eeb0 1a47 	vmov.f32	s2, s14
 800a0d0:	eddf 0a92 	vldr	s1, [pc, #584]	; 800a31c <slalomR+0x3c4>
 800a0d4:	eeb0 0a67 	vmov.f32	s0, s15
 800a0d8:	f7f9 fef6 	bl	8003ec8 <mollifier_slalom_table>
 800a0dc:	e015      	b.n	800a10a <slalomR+0x1b2>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a0de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a0e2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a0e6:	eef1 7a67 	vneg.f32	s15, s15
 800a0ea:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a0ee:	eef0 2a66 	vmov.f32	s5, s13
 800a0f2:	eeb0 2a67 	vmov.f32	s4, s15
 800a0f6:	eddf 1a86 	vldr	s3, [pc, #536]	; 800a310 <slalomR+0x3b8>
 800a0fa:	ed9f 1a85 	vldr	s2, [pc, #532]	; 800a310 <slalomR+0x3b8>
 800a0fe:	eddf 0a87 	vldr	s1, [pc, #540]	; 800a31c <slalomR+0x3c4>
 800a102:	eeb0 0a47 	vmov.f32	s0, s14
 800a106:	f7f9 fd8f 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a10a:	2300      	movs	r3, #0
 800a10c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a10e:	2300      	movs	r3, #0
 800a110:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a112:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a116:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800a30c <slalomR+0x3b4>
 800a11a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a11e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a122:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a126:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a12a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a12e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a132:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a136:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a13a:	ed9f 5a74 	vldr	s10, [pc, #464]	; 800a30c <slalomR+0x3b4>
 800a13e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	eeb0 2a47 	vmov.f32	s4, s14
 800a148:	eef0 1a65 	vmov.f32	s3, s11
 800a14c:	ed9f 1a70 	vldr	s2, [pc, #448]	; 800a310 <slalomR+0x3b8>
 800a150:	eef0 0a46 	vmov.f32	s1, s12
 800a154:	eeb0 0a66 	vmov.f32	s0, s13
 800a158:	f7f8 ff40 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800a15c:	4b6a      	ldr	r3, [pc, #424]	; (800a308 <slalomR+0x3b0>)
 800a15e:	2200      	movs	r2, #0
 800a160:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
//		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
//										fabs(end_velocity*end_velocity-turnpara.g_speed * turnpara.g_speed)  / 2 / turnpara.e_ofset,wallmode);
	}
}
 800a162:	e0c8      	b.n	800a2f6 <slalomR+0x39e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a164:	2300      	movs	r3, #0
 800a166:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a168:	2300      	movs	r3, #0
 800a16a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a16c:	2301      	movs	r3, #1
 800a16e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a170:	2300      	movs	r3, #0
 800a172:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a174:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d127      	bne.n	800a1cc <slalomR+0x274>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a17c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a180:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a184:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a188:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a18c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a190:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a194:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a198:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a19c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1a0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a1a4:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a1a8:	eddf 4a58 	vldr	s9, [pc, #352]	; 800a30c <slalomR+0x3b4>
 800a1ac:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	eeb0 2a47 	vmov.f32	s4, s14
 800a1b6:	eef0 1a45 	vmov.f32	s3, s10
 800a1ba:	eeb0 1a65 	vmov.f32	s2, s11
 800a1be:	eef0 0a46 	vmov.f32	s1, s12
 800a1c2:	eeb0 0a66 	vmov.f32	s0, s13
 800a1c6:	f7f8 ff09 	bl	8002fdc <straight_table2>
 800a1ca:	e022      	b.n	800a212 <slalomR+0x2ba>
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a1cc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a1d0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a1d4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a1d8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a1dc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a1e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1e8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a1ec:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a1f0:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a30c <slalomR+0x3b4>
 800a1f4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	eeb0 2a47 	vmov.f32	s4, s14
 800a1fe:	eef0 1a45 	vmov.f32	s3, s10
 800a202:	eeb0 1a65 	vmov.f32	s2, s11
 800a206:	eef0 0a46 	vmov.f32	s1, s12
 800a20a:	eeb0 0a66 	vmov.f32	s0, s13
 800a20e:	f7f8 fee5 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a212:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a216:	2b01      	cmp	r3, #1
 800a218:	d10c      	bne.n	800a234 <slalomR+0x2dc>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a21a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a21e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a222:	eeb0 1a47 	vmov.f32	s2, s14
 800a226:	eddf 0a3d 	vldr	s1, [pc, #244]	; 800a31c <slalomR+0x3c4>
 800a22a:	eeb0 0a67 	vmov.f32	s0, s15
 800a22e:	f7f9 fe4b 	bl	8003ec8 <mollifier_slalom_table>
 800a232:	e015      	b.n	800a260 <slalomR+0x308>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a234:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a238:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a23c:	eef1 7a67 	vneg.f32	s15, s15
 800a240:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a244:	eef0 2a66 	vmov.f32	s5, s13
 800a248:	eeb0 2a67 	vmov.f32	s4, s15
 800a24c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a310 <slalomR+0x3b8>
 800a250:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a310 <slalomR+0x3b8>
 800a254:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a31c <slalomR+0x3c4>
 800a258:	eeb0 0a47 	vmov.f32	s0, s14
 800a25c:	f7f9 fce4 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a260:	2300      	movs	r3, #0
 800a262:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a264:	2300      	movs	r3, #0
 800a266:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a268:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a26c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a270:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a274:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a27c:	edd7 7a01 	vldr	s15, [r7, #4]
 800a280:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a284:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a288:	eef0 7ae7 	vabs.f32	s15, s15
 800a28c:	ee17 0a90 	vmov	r0, s15
 800a290:	f7f6 f982 	bl	8000598 <__aeabi_f2d>
 800a294:	f04f 0200 	mov.w	r2, #0
 800a298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a29c:	f7f6 fafe 	bl	800089c <__aeabi_ddiv>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	4614      	mov	r4, r2
 800a2a6:	461d      	mov	r5, r3
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7f6 f974 	bl	8000598 <__aeabi_f2d>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	f7f6 faf0 	bl	800089c <__aeabi_ddiv>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	460b      	mov	r3, r1
 800a2c0:	4610      	mov	r0, r2
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	f04f 0200 	mov.w	r2, #0
 800a2c8:	4b15      	ldr	r3, [pc, #84]	; (800a320 <slalomR+0x3c8>)
 800a2ca:	f7f6 f807 	bl	80002dc <__adddf3>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a2d2:	4610      	mov	r0, r2
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	f7f6 fc8f 	bl	8000bf8 <__aeabi_d2f>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	ee02 3a10 	vmov	s4, r3
 800a2e2:	edd7 1a01 	vldr	s3, [r7, #4]
 800a2e6:	ed97 1a01 	vldr	s2, [r7, #4]
 800a2ea:	eef0 0a68 	vmov.f32	s1, s17
 800a2ee:	eeb0 0a48 	vmov.f32	s0, s16
 800a2f2:	f7f8 fe73 	bl	8002fdc <straight_table2>
}
 800a2f6:	bf00      	nop
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	ecbd 8b02 	vpop	{d8}
 800a300:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a304:	b004      	add	sp, #16
 800a306:	4770      	bx	lr
 800a308:	20000808 	.word	0x20000808
 800a30c:	42340000 	.word	0x42340000
 800a310:	00000000 	.word	0x00000000
 800a314:	431b8000 	.word	0x431b8000
 800a318:	43138000 	.word	0x43138000
 800a31c:	c2b40000 	.word	0xc2b40000
 800a320:	408f4000 	.word	0x408f4000

0800a324 <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800a324:	b084      	sub	sp, #16
 800a326:	b5b0      	push	{r4, r5, r7, lr}
 800a328:	ed2d 8b02 	vpush	{d8}
 800a32c:	b084      	sub	sp, #16
 800a32e:	af00      	add	r7, sp, #0
 800a330:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a334:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a338:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800a33c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a340:	2b01      	cmp	r3, #1
 800a342:	f040 80f3 	bne.w	800a52c <slalomL+0x208>
		highspeed_mode = 0;
 800a346:	4be1      	ldr	r3, [pc, #900]	; (800a6cc <slalomL+0x3a8>)
 800a348:	2200      	movs	r2, #0
 800a34a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a34c:	2301      	movs	r3, #1
 800a34e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a350:	2300      	movs	r3, #0
 800a352:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a354:	2300      	movs	r3, #0
 800a356:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a358:	2300      	movs	r3, #0
 800a35a:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a35c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a360:	2b00      	cmp	r3, #0
 800a362:	d11f      	bne.n	800a3a4 <slalomL+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a364:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a368:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a36c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a370:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a374:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a378:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a37c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a380:	eddf 5ad3 	vldr	s11, [pc, #844]	; 800a6d0 <slalomL+0x3ac>
 800a384:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	eeb0 2a47 	vmov.f32	s4, s14
 800a38e:	eef0 1a46 	vmov.f32	s3, s12
 800a392:	eeb0 1a66 	vmov.f32	s2, s13
 800a396:	eddf 0acf 	vldr	s1, [pc, #828]	; 800a6d4 <slalomL+0x3b0>
 800a39a:	ed9f 0acf 	vldr	s0, [pc, #828]	; 800a6d8 <slalomL+0x3b4>
 800a39e:	f7f8 fe1d 	bl	8002fdc <straight_table2>
 800a3a2:	e01e      	b.n	800a3e2 <slalomL+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a3a4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a3a8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a3ac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a3b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a3b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a3b8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a3bc:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a3c0:	eddf 5ac3 	vldr	s11, [pc, #780]	; 800a6d0 <slalomL+0x3ac>
 800a3c4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	eeb0 2a47 	vmov.f32	s4, s14
 800a3ce:	eef0 1a46 	vmov.f32	s3, s12
 800a3d2:	eeb0 1a66 	vmov.f32	s2, s13
 800a3d6:	eddf 0abf 	vldr	s1, [pc, #764]	; 800a6d4 <slalomL+0x3b0>
 800a3da:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 800a6dc <slalomL+0x3b8>
 800a3de:	f7f8 fdfd 	bl	8002fdc <straight_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=1;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	73fb      	strb	r3, [r7, #15]
		if(shortest_mode==0){
 800a3ea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d127      	bne.n	800a442 <slalomL+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a3f2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a3f6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a3fa:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a3fe:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a402:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a406:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a40a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a40e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a412:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a416:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a41a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a41e:	eddf 4aac 	vldr	s9, [pc, #688]	; 800a6d0 <slalomL+0x3ac>
 800a422:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	eeb0 2a47 	vmov.f32	s4, s14
 800a42c:	eef0 1a45 	vmov.f32	s3, s10
 800a430:	eeb0 1a65 	vmov.f32	s2, s11
 800a434:	eef0 0a46 	vmov.f32	s1, s12
 800a438:	eeb0 0a66 	vmov.f32	s0, s13
 800a43c:	f7f8 fdce 	bl	8002fdc <straight_table2>
 800a440:	e022      	b.n	800a488 <slalomL+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a442:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a446:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a44a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a44e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a452:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a456:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a45a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a45e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a462:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a466:	eddf 4a9a 	vldr	s9, [pc, #616]	; 800a6d0 <slalomL+0x3ac>
 800a46a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	eeb0 2a47 	vmov.f32	s4, s14
 800a474:	eef0 1a45 	vmov.f32	s3, s10
 800a478:	eeb0 1a65 	vmov.f32	s2, s11
 800a47c:	eef0 0a46 	vmov.f32	s1, s12
 800a480:	eeb0 0a66 	vmov.f32	s0, s13
 800a484:	f7f8 fdaa 	bl	8002fdc <straight_table2>
		}
		if(mollifier_mode == ON){
 800a488:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d10c      	bne.n	800a4aa <slalomL+0x186>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a490:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a494:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a498:	eeb0 1a47 	vmov.f32	s2, s14
 800a49c:	eddf 0a90 	vldr	s1, [pc, #576]	; 800a6e0 <slalomL+0x3bc>
 800a4a0:	eeb0 0a67 	vmov.f32	s0, s15
 800a4a4:	f7f9 fd10 	bl	8003ec8 <mollifier_slalom_table>
 800a4a8:	e013      	b.n	800a4d2 <slalomL+0x1ae>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a4aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4ae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a4b2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a4b6:	eef0 2a66 	vmov.f32	s5, s13
 800a4ba:	eeb0 2a47 	vmov.f32	s4, s14
 800a4be:	eddf 1a85 	vldr	s3, [pc, #532]	; 800a6d4 <slalomL+0x3b0>
 800a4c2:	ed9f 1a84 	vldr	s2, [pc, #528]	; 800a6d4 <slalomL+0x3b0>
 800a4c6:	eddf 0a86 	vldr	s1, [pc, #536]	; 800a6e0 <slalomL+0x3bc>
 800a4ca:	eeb0 0a67 	vmov.f32	s0, s15
 800a4ce:	f7f9 fbab 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a4da:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a4de:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800a6d0 <slalomL+0x3ac>
 800a4e2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a4e6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a4ea:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a4ee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a4f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4fa:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a4fe:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a502:	ed9f 5a73 	vldr	s10, [pc, #460]	; 800a6d0 <slalomL+0x3ac>
 800a506:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	eeb0 2a47 	vmov.f32	s4, s14
 800a510:	eef0 1a65 	vmov.f32	s3, s11
 800a514:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a6d4 <slalomL+0x3b0>
 800a518:	eef0 0a46 	vmov.f32	s1, s12
 800a51c:	eeb0 0a66 	vmov.f32	s0, s13
 800a520:	f7f8 fd5c 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800a524:	4b69      	ldr	r3, [pc, #420]	; (800a6cc <slalomL+0x3a8>)
 800a526:	2200      	movs	r2, #0
 800a528:	701a      	strb	r2, [r3, #0]
		wallmode.WallCutMode=0;
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}
}
 800a52a:	e0c6      	b.n	800a6ba <slalomL+0x396>
		wallmode.WallControlMode=0;
 800a52c:	2300      	movs	r3, #0
 800a52e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a530:	2300      	movs	r3, #0
 800a532:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a534:	2301      	movs	r3, #1
 800a536:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a538:	2300      	movs	r3, #0
 800a53a:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a53c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a540:	2b00      	cmp	r3, #0
 800a542:	d127      	bne.n	800a594 <slalomL+0x270>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a544:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a548:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a54c:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a550:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a554:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a558:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a55c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a560:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a564:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a568:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a56c:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a570:	eddf 4a57 	vldr	s9, [pc, #348]	; 800a6d0 <slalomL+0x3ac>
 800a574:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	eeb0 2a47 	vmov.f32	s4, s14
 800a57e:	eef0 1a45 	vmov.f32	s3, s10
 800a582:	eeb0 1a65 	vmov.f32	s2, s11
 800a586:	eef0 0a46 	vmov.f32	s1, s12
 800a58a:	eeb0 0a66 	vmov.f32	s0, s13
 800a58e:	f7f8 fd25 	bl	8002fdc <straight_table2>
 800a592:	e022      	b.n	800a5da <slalomL+0x2b6>
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a594:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a598:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a59c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a5a0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a5a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a5a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a5ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a5b0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a5b4:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a5b8:	eddf 4a45 	vldr	s9, [pc, #276]	; 800a6d0 <slalomL+0x3ac>
 800a5bc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	eeb0 2a47 	vmov.f32	s4, s14
 800a5c6:	eef0 1a45 	vmov.f32	s3, s10
 800a5ca:	eeb0 1a65 	vmov.f32	s2, s11
 800a5ce:	eef0 0a46 	vmov.f32	s1, s12
 800a5d2:	eeb0 0a66 	vmov.f32	s0, s13
 800a5d6:	f7f8 fd01 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a5da:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d10c      	bne.n	800a5fc <slalomL+0x2d8>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a5e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a5e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a5ea:	eeb0 1a47 	vmov.f32	s2, s14
 800a5ee:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a6e0 <slalomL+0x3bc>
 800a5f2:	eeb0 0a67 	vmov.f32	s0, s15
 800a5f6:	f7f9 fc67 	bl	8003ec8 <mollifier_slalom_table>
 800a5fa:	e013      	b.n	800a624 <slalomL+0x300>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a5fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a600:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a604:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a608:	eef0 2a66 	vmov.f32	s5, s13
 800a60c:	eeb0 2a47 	vmov.f32	s4, s14
 800a610:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a6d4 <slalomL+0x3b0>
 800a614:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a6d4 <slalomL+0x3b0>
 800a618:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a6e0 <slalomL+0x3bc>
 800a61c:	eeb0 0a67 	vmov.f32	s0, s15
 800a620:	f7f9 fb02 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800a624:	2300      	movs	r3, #0
 800a626:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a628:	2300      	movs	r3, #0
 800a62a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a62c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a630:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a634:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a638:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a63c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a640:	edd7 7a01 	vldr	s15, [r7, #4]
 800a644:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a64c:	eef0 7ae7 	vabs.f32	s15, s15
 800a650:	ee17 0a90 	vmov	r0, s15
 800a654:	f7f5 ffa0 	bl	8000598 <__aeabi_f2d>
 800a658:	f04f 0200 	mov.w	r2, #0
 800a65c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a660:	f7f6 f91c 	bl	800089c <__aeabi_ddiv>
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	4614      	mov	r4, r2
 800a66a:	461d      	mov	r5, r3
 800a66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66e:	4618      	mov	r0, r3
 800a670:	f7f5 ff92 	bl	8000598 <__aeabi_f2d>
 800a674:	4602      	mov	r2, r0
 800a676:	460b      	mov	r3, r1
 800a678:	4620      	mov	r0, r4
 800a67a:	4629      	mov	r1, r5
 800a67c:	f7f6 f90e 	bl	800089c <__aeabi_ddiv>
 800a680:	4602      	mov	r2, r0
 800a682:	460b      	mov	r3, r1
 800a684:	4610      	mov	r0, r2
 800a686:	4619      	mov	r1, r3
 800a688:	f04f 0200 	mov.w	r2, #0
 800a68c:	4b15      	ldr	r3, [pc, #84]	; (800a6e4 <slalomL+0x3c0>)
 800a68e:	f7f5 fe25 	bl	80002dc <__adddf3>
 800a692:	4602      	mov	r2, r0
 800a694:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a696:	4610      	mov	r0, r2
 800a698:	4619      	mov	r1, r3
 800a69a:	f7f6 faad 	bl	8000bf8 <__aeabi_d2f>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	ee02 3a10 	vmov	s4, r3
 800a6a6:	edd7 1a01 	vldr	s3, [r7, #4]
 800a6aa:	ed97 1a01 	vldr	s2, [r7, #4]
 800a6ae:	eef0 0a68 	vmov.f32	s1, s17
 800a6b2:	eeb0 0a48 	vmov.f32	s0, s16
 800a6b6:	f7f8 fc91 	bl	8002fdc <straight_table2>
}
 800a6ba:	bf00      	nop
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	ecbd 8b02 	vpop	{d8}
 800a6c4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a6c8:	b004      	add	sp, #16
 800a6ca:	4770      	bx	lr
 800a6cc:	20000808 	.word	0x20000808
 800a6d0:	42340000 	.word	0x42340000
 800a6d4:	00000000 	.word	0x00000000
 800a6d8:	431b8000 	.word	0x431b8000
 800a6dc:	43138000 	.word	0x43138000
 800a6e0:	42b40000 	.word	0x42b40000
 800a6e4:	408f4000 	.word	0x408f4000

0800a6e8 <turn90R>:


void turn90R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a6e8:	b084      	sub	sp, #16
 800a6ea:	b5b0      	push	{r4, r5, r7, lr}
 800a6ec:	ed2d 8b02 	vpush	{d8}
 800a6f0:	b084      	sub	sp, #16
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a6f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a6fc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a700:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a704:	2b01      	cmp	r3, #1
 800a706:	f040 80a5 	bne.w	800a854 <turn90R+0x16c>
		highspeed_mode = 1;
 800a70a:	4ba5      	ldr	r3, [pc, #660]	; (800a9a0 <turn90R+0x2b8>)
 800a70c:	2201      	movs	r2, #1
 800a70e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a710:	2301      	movs	r3, #1
 800a712:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a714:	2300      	movs	r3, #0
 800a716:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a718:	2300      	movs	r3, #0
 800a71a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a71c:	2300      	movs	r3, #0
 800a71e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a720:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a724:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a728:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a72c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a730:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a734:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a738:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a73c:	eddf 5a99 	vldr	s11, [pc, #612]	; 800a9a4 <turn90R+0x2bc>
 800a740:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	eeb0 2a47 	vmov.f32	s4, s14
 800a74a:	eef0 1a46 	vmov.f32	s3, s12
 800a74e:	eeb0 1a66 	vmov.f32	s2, s13
 800a752:	eddf 0a95 	vldr	s1, [pc, #596]	; 800a9a8 <turn90R+0x2c0>
 800a756:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800a9ac <turn90R+0x2c4>
 800a75a:	f7f8 fc3f 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800a75e:	2300      	movs	r3, #0
 800a760:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800a762:	2302      	movs	r3, #2
 800a764:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a766:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a76a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a76e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a772:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a776:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a77a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a77e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a782:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a786:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a78a:	eddf 4a86 	vldr	s9, [pc, #536]	; 800a9a4 <turn90R+0x2bc>
 800a78e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	eeb0 2a47 	vmov.f32	s4, s14
 800a798:	eef0 1a45 	vmov.f32	s3, s10
 800a79c:	eeb0 1a65 	vmov.f32	s2, s11
 800a7a0:	eef0 0a46 	vmov.f32	s1, s12
 800a7a4:	eeb0 0a66 	vmov.f32	s0, s13
 800a7a8:	f7f8 fc18 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a7ac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d10c      	bne.n	800a7ce <turn90R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a7b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7b8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a7bc:	eeb0 1a47 	vmov.f32	s2, s14
 800a7c0:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800a9b0 <turn90R+0x2c8>
 800a7c4:	eeb0 0a67 	vmov.f32	s0, s15
 800a7c8:	f7f9 fb7e 	bl	8003ec8 <mollifier_slalom_table>
 800a7cc:	e015      	b.n	800a7fa <turn90R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a7ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a7d2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a7d6:	eef1 7a67 	vneg.f32	s15, s15
 800a7da:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a7de:	eef0 2a66 	vmov.f32	s5, s13
 800a7e2:	eeb0 2a67 	vmov.f32	s4, s15
 800a7e6:	eddf 1a70 	vldr	s3, [pc, #448]	; 800a9a8 <turn90R+0x2c0>
 800a7ea:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a9a8 <turn90R+0x2c0>
 800a7ee:	eddf 0a70 	vldr	s1, [pc, #448]	; 800a9b0 <turn90R+0x2c8>
 800a7f2:	eeb0 0a47 	vmov.f32	s0, s14
 800a7f6:	f7f9 fa17 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a7fe:	2300      	movs	r3, #0
 800a800:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a802:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a806:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800a9b4 <turn90R+0x2cc>
 800a80a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a80e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a812:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a816:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a81a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a81e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a822:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a826:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a82a:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800a9a4 <turn90R+0x2bc>
 800a82e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	eeb0 2a47 	vmov.f32	s4, s14
 800a838:	eef0 1a65 	vmov.f32	s3, s11
 800a83c:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800a9a8 <turn90R+0x2c0>
 800a840:	eef0 0a46 	vmov.f32	s1, s12
 800a844:	eeb0 0a66 	vmov.f32	s0, s13
 800a848:	f7f8 fbc8 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800a84c:	4b54      	ldr	r3, [pc, #336]	; (800a9a0 <turn90R+0x2b8>)
 800a84e:	2200      	movs	r2, #0
 800a850:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800a852:	e09c      	b.n	800a98e <turn90R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800a854:	2300      	movs	r3, #0
 800a856:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a858:	2300      	movs	r3, #0
 800a85a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800a85c:	2302      	movs	r3, #2
 800a85e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a860:	2300      	movs	r3, #0
 800a862:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a864:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a868:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a86c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a870:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a874:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a878:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a87c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a880:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a884:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a888:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a9a4 <turn90R+0x2bc>
 800a88c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	eeb0 2a47 	vmov.f32	s4, s14
 800a896:	eef0 1a45 	vmov.f32	s3, s10
 800a89a:	eeb0 1a65 	vmov.f32	s2, s11
 800a89e:	eef0 0a46 	vmov.f32	s1, s12
 800a8a2:	eeb0 0a66 	vmov.f32	s0, s13
 800a8a6:	f7f8 fb99 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a8aa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d10c      	bne.n	800a8cc <turn90R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a8b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a8b6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a8ba:	eeb0 1a47 	vmov.f32	s2, s14
 800a8be:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a9b0 <turn90R+0x2c8>
 800a8c2:	eeb0 0a67 	vmov.f32	s0, s15
 800a8c6:	f7f9 faff 	bl	8003ec8 <mollifier_slalom_table>
 800a8ca:	e015      	b.n	800a8f8 <turn90R+0x210>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a8cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a8d0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a8d4:	eef1 7a67 	vneg.f32	s15, s15
 800a8d8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a8dc:	eef0 2a66 	vmov.f32	s5, s13
 800a8e0:	eeb0 2a67 	vmov.f32	s4, s15
 800a8e4:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a9a8 <turn90R+0x2c0>
 800a8e8:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a9a8 <turn90R+0x2c0>
 800a8ec:	eddf 0a30 	vldr	s1, [pc, #192]	; 800a9b0 <turn90R+0x2c8>
 800a8f0:	eeb0 0a47 	vmov.f32	s0, s14
 800a8f4:	f7f9 f998 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a900:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a904:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a908:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a90c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a910:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a914:	edd7 7a01 	vldr	s15, [r7, #4]
 800a918:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a91c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a920:	eef0 7ae7 	vabs.f32	s15, s15
 800a924:	ee17 0a90 	vmov	r0, s15
 800a928:	f7f5 fe36 	bl	8000598 <__aeabi_f2d>
 800a92c:	f04f 0200 	mov.w	r2, #0
 800a930:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a934:	f7f5 ffb2 	bl	800089c <__aeabi_ddiv>
 800a938:	4602      	mov	r2, r0
 800a93a:	460b      	mov	r3, r1
 800a93c:	4614      	mov	r4, r2
 800a93e:	461d      	mov	r5, r3
 800a940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a942:	4618      	mov	r0, r3
 800a944:	f7f5 fe28 	bl	8000598 <__aeabi_f2d>
 800a948:	4602      	mov	r2, r0
 800a94a:	460b      	mov	r3, r1
 800a94c:	4620      	mov	r0, r4
 800a94e:	4629      	mov	r1, r5
 800a950:	f7f5 ffa4 	bl	800089c <__aeabi_ddiv>
 800a954:	4602      	mov	r2, r0
 800a956:	460b      	mov	r3, r1
 800a958:	4610      	mov	r0, r2
 800a95a:	4619      	mov	r1, r3
 800a95c:	f04f 0200 	mov.w	r2, #0
 800a960:	4b15      	ldr	r3, [pc, #84]	; (800a9b8 <turn90R+0x2d0>)
 800a962:	f7f5 fcbb 	bl	80002dc <__adddf3>
 800a966:	4602      	mov	r2, r0
 800a968:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a96a:	4610      	mov	r0, r2
 800a96c:	4619      	mov	r1, r3
 800a96e:	f7f6 f943 	bl	8000bf8 <__aeabi_d2f>
 800a972:	4603      	mov	r3, r0
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	ee02 3a10 	vmov	s4, r3
 800a97a:	edd7 1a01 	vldr	s3, [r7, #4]
 800a97e:	ed97 1a01 	vldr	s2, [r7, #4]
 800a982:	eef0 0a68 	vmov.f32	s1, s17
 800a986:	eeb0 0a48 	vmov.f32	s0, s16
 800a98a:	f7f8 fb27 	bl	8002fdc <straight_table2>
}
 800a98e:	bf00      	nop
 800a990:	3710      	adds	r7, #16
 800a992:	46bd      	mov	sp, r7
 800a994:	ecbd 8b02 	vpop	{d8}
 800a998:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a99c:	b004      	add	sp, #16
 800a99e:	4770      	bx	lr
 800a9a0:	20000808 	.word	0x20000808
 800a9a4:	42340000 	.word	0x42340000
 800a9a8:	00000000 	.word	0x00000000
 800a9ac:	42cd0000 	.word	0x42cd0000
 800a9b0:	c2b40000 	.word	0xc2b40000
 800a9b4:	42b40000 	.word	0x42b40000
 800a9b8:	408f4000 	.word	0x408f4000

0800a9bc <turn90L>:

void turn90L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a9bc:	b084      	sub	sp, #16
 800a9be:	b5b0      	push	{r4, r5, r7, lr}
 800a9c0:	ed2d 8b02 	vpush	{d8}
 800a9c4:	b084      	sub	sp, #16
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a9cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a9d0:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a9d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	f040 80a3 	bne.w	800ab24 <turn90L+0x168>
		highspeed_mode = 1;
 800a9de:	4ba3      	ldr	r3, [pc, #652]	; (800ac6c <turn90L+0x2b0>)
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a9f4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a9f8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a9fc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa00:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa04:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa08:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800aa0c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aa10:	eddf 5a97 	vldr	s11, [pc, #604]	; 800ac70 <turn90L+0x2b4>
 800aa14:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	eeb0 2a47 	vmov.f32	s4, s14
 800aa1e:	eef0 1a46 	vmov.f32	s3, s12
 800aa22:	eeb0 1a66 	vmov.f32	s2, s13
 800aa26:	eddf 0a93 	vldr	s1, [pc, #588]	; 800ac74 <turn90L+0x2b8>
 800aa2a:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800ac78 <turn90L+0x2bc>
 800aa2e:	f7f8 fad5 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800aa32:	2300      	movs	r3, #0
 800aa34:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800aa36:	2302      	movs	r3, #2
 800aa38:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aa3a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aa3e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aa42:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800aa46:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa4a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa4e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa52:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa56:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800aa5a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aa5e:	eddf 4a84 	vldr	s9, [pc, #528]	; 800ac70 <turn90L+0x2b4>
 800aa62:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	eeb0 2a47 	vmov.f32	s4, s14
 800aa6c:	eef0 1a45 	vmov.f32	s3, s10
 800aa70:	eeb0 1a65 	vmov.f32	s2, s11
 800aa74:	eef0 0a46 	vmov.f32	s1, s12
 800aa78:	eeb0 0a66 	vmov.f32	s0, s13
 800aa7c:	f7f8 faae 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800aa80:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d10c      	bne.n	800aaa2 <turn90L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800aa88:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa8c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aa90:	eeb0 1a47 	vmov.f32	s2, s14
 800aa94:	eddf 0a79 	vldr	s1, [pc, #484]	; 800ac7c <turn90L+0x2c0>
 800aa98:	eeb0 0a67 	vmov.f32	s0, s15
 800aa9c:	f7f9 fa14 	bl	8003ec8 <mollifier_slalom_table>
 800aaa0:	e013      	b.n	800aaca <turn90L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800aaa2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aaa6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aaaa:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800aaae:	eef0 2a66 	vmov.f32	s5, s13
 800aab2:	eeb0 2a47 	vmov.f32	s4, s14
 800aab6:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800ac74 <turn90L+0x2b8>
 800aaba:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800ac74 <turn90L+0x2b8>
 800aabe:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800ac7c <turn90L+0x2c0>
 800aac2:	eeb0 0a67 	vmov.f32	s0, s15
 800aac6:	f7f9 f8af 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800aaca:	2300      	movs	r3, #0
 800aacc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800aace:	2300      	movs	r3, #0
 800aad0:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800aad2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800aad6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800ac7c <turn90L+0x2c0>
 800aada:	ee77 6a87 	vadd.f32	s13, s15, s14
 800aade:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aae2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aae6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aaea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aaee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aaf2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800aaf6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800aafa:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800ac70 <turn90L+0x2b4>
 800aafe:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	eeb0 2a47 	vmov.f32	s4, s14
 800ab08:	eef0 1a65 	vmov.f32	s3, s11
 800ab0c:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800ac74 <turn90L+0x2b8>
 800ab10:	eef0 0a46 	vmov.f32	s1, s12
 800ab14:	eeb0 0a66 	vmov.f32	s0, s13
 800ab18:	f7f8 fa60 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800ab1c:	4b53      	ldr	r3, [pc, #332]	; (800ac6c <turn90L+0x2b0>)
 800ab1e:	2200      	movs	r2, #0
 800ab20:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ab22:	e09a      	b.n	800ac5a <turn90L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ab24:	2300      	movs	r3, #0
 800ab26:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ab2c:	2302      	movs	r3, #2
 800ab2e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ab30:	2300      	movs	r3, #0
 800ab32:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab34:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ab38:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ab3c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ab40:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ab44:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab48:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab50:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ab54:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab58:	eddf 4a45 	vldr	s9, [pc, #276]	; 800ac70 <turn90L+0x2b4>
 800ab5c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ab60:	68f8      	ldr	r0, [r7, #12]
 800ab62:	eeb0 2a47 	vmov.f32	s4, s14
 800ab66:	eef0 1a45 	vmov.f32	s3, s10
 800ab6a:	eeb0 1a65 	vmov.f32	s2, s11
 800ab6e:	eef0 0a46 	vmov.f32	s1, s12
 800ab72:	eeb0 0a66 	vmov.f32	s0, s13
 800ab76:	f7f8 fa31 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ab7a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d10c      	bne.n	800ab9c <turn90L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800ab82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab86:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ab8a:	eeb0 1a47 	vmov.f32	s2, s14
 800ab8e:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800ac7c <turn90L+0x2c0>
 800ab92:	eeb0 0a67 	vmov.f32	s0, s15
 800ab96:	f7f9 f997 	bl	8003ec8 <mollifier_slalom_table>
 800ab9a:	e013      	b.n	800abc4 <turn90L+0x208>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ab9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aba0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aba4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800aba8:	eef0 2a66 	vmov.f32	s5, s13
 800abac:	eeb0 2a47 	vmov.f32	s4, s14
 800abb0:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ac74 <turn90L+0x2b8>
 800abb4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ac74 <turn90L+0x2b8>
 800abb8:	eddf 0a30 	vldr	s1, [pc, #192]	; 800ac7c <turn90L+0x2c0>
 800abbc:	eeb0 0a67 	vmov.f32	s0, s15
 800abc0:	f7f9 f832 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800abc4:	2301      	movs	r3, #1
 800abc6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800abc8:	2300      	movs	r3, #0
 800abca:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800abcc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800abd0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800abd4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800abd8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abe0:	edd7 7a01 	vldr	s15, [r7, #4]
 800abe4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800abe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abec:	eef0 7ae7 	vabs.f32	s15, s15
 800abf0:	ee17 0a90 	vmov	r0, s15
 800abf4:	f7f5 fcd0 	bl	8000598 <__aeabi_f2d>
 800abf8:	f04f 0200 	mov.w	r2, #0
 800abfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac00:	f7f5 fe4c 	bl	800089c <__aeabi_ddiv>
 800ac04:	4602      	mov	r2, r0
 800ac06:	460b      	mov	r3, r1
 800ac08:	4614      	mov	r4, r2
 800ac0a:	461d      	mov	r5, r3
 800ac0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7f5 fcc2 	bl	8000598 <__aeabi_f2d>
 800ac14:	4602      	mov	r2, r0
 800ac16:	460b      	mov	r3, r1
 800ac18:	4620      	mov	r0, r4
 800ac1a:	4629      	mov	r1, r5
 800ac1c:	f7f5 fe3e 	bl	800089c <__aeabi_ddiv>
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	4610      	mov	r0, r2
 800ac26:	4619      	mov	r1, r3
 800ac28:	f04f 0200 	mov.w	r2, #0
 800ac2c:	4b14      	ldr	r3, [pc, #80]	; (800ac80 <turn90L+0x2c4>)
 800ac2e:	f7f5 fb55 	bl	80002dc <__adddf3>
 800ac32:	4602      	mov	r2, r0
 800ac34:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ac36:	4610      	mov	r0, r2
 800ac38:	4619      	mov	r1, r3
 800ac3a:	f7f5 ffdd 	bl	8000bf8 <__aeabi_d2f>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	ee02 3a10 	vmov	s4, r3
 800ac46:	edd7 1a01 	vldr	s3, [r7, #4]
 800ac4a:	ed97 1a01 	vldr	s2, [r7, #4]
 800ac4e:	eef0 0a68 	vmov.f32	s1, s17
 800ac52:	eeb0 0a48 	vmov.f32	s0, s16
 800ac56:	f7f8 f9c1 	bl	8002fdc <straight_table2>
}
 800ac5a:	bf00      	nop
 800ac5c:	3710      	adds	r7, #16
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	ecbd 8b02 	vpop	{d8}
 800ac64:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ac68:	b004      	add	sp, #16
 800ac6a:	4770      	bx	lr
 800ac6c:	20000808 	.word	0x20000808
 800ac70:	42340000 	.word	0x42340000
 800ac74:	00000000 	.word	0x00000000
 800ac78:	42cd0000 	.word	0x42cd0000
 800ac7c:	42b40000 	.word	0x42b40000
 800ac80:	408f4000 	.word	0x408f4000

0800ac84 <turn180R>:


void turn180R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800ac84:	b084      	sub	sp, #16
 800ac86:	b5b0      	push	{r4, r5, r7, lr}
 800ac88:	ed2d 8b02 	vpush	{d8}
 800ac8c:	b084      	sub	sp, #16
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ac94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ac98:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800ac9c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	f040 80a5 	bne.w	800adf0 <turn180R+0x16c>
		highspeed_mode = 1;
 800aca6:	4ba5      	ldr	r3, [pc, #660]	; (800af3c <turn180R+0x2b8>)
 800aca8:	2201      	movs	r2, #1
 800acaa:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800acac:	2301      	movs	r3, #1
 800acae:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800acb4:	2300      	movs	r3, #0
 800acb6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800acb8:	2300      	movs	r3, #0
 800acba:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800acbc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800acc0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800acc4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800acc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800accc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800acd0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800acd4:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800acd8:	eddf 5a99 	vldr	s11, [pc, #612]	; 800af40 <turn180R+0x2bc>
 800acdc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	eeb0 2a47 	vmov.f32	s4, s14
 800ace6:	eef0 1a46 	vmov.f32	s3, s12
 800acea:	eeb0 1a66 	vmov.f32	s2, s13
 800acee:	eddf 0a95 	vldr	s1, [pc, #596]	; 800af44 <turn180R+0x2c0>
 800acf2:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800af48 <turn180R+0x2c4>
 800acf6:	f7f8 f971 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800acfe:	2302      	movs	r3, #2
 800ad00:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad02:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ad06:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ad0a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ad0e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ad12:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad16:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad1e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ad22:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad26:	eddf 4a86 	vldr	s9, [pc, #536]	; 800af40 <turn180R+0x2bc>
 800ad2a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	eeb0 2a47 	vmov.f32	s4, s14
 800ad34:	eef0 1a45 	vmov.f32	s3, s10
 800ad38:	eeb0 1a65 	vmov.f32	s2, s11
 800ad3c:	eef0 0a46 	vmov.f32	s1, s12
 800ad40:	eeb0 0a66 	vmov.f32	s0, s13
 800ad44:	f7f8 f94a 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ad48:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d10c      	bne.n	800ad6a <turn180R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800ad50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad54:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ad58:	eeb0 1a47 	vmov.f32	s2, s14
 800ad5c:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800af4c <turn180R+0x2c8>
 800ad60:	eeb0 0a67 	vmov.f32	s0, s15
 800ad64:	f7f9 f8b0 	bl	8003ec8 <mollifier_slalom_table>
 800ad68:	e015      	b.n	800ad96 <turn180R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ad6a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad6e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ad72:	eef1 7a67 	vneg.f32	s15, s15
 800ad76:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ad7a:	eef0 2a66 	vmov.f32	s5, s13
 800ad7e:	eeb0 2a67 	vmov.f32	s4, s15
 800ad82:	eddf 1a70 	vldr	s3, [pc, #448]	; 800af44 <turn180R+0x2c0>
 800ad86:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800af44 <turn180R+0x2c0>
 800ad8a:	eddf 0a70 	vldr	s1, [pc, #448]	; 800af4c <turn180R+0x2c8>
 800ad8e:	eeb0 0a47 	vmov.f32	s0, s14
 800ad92:	f7f8 ff49 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ad96:	2300      	movs	r3, #0
 800ad98:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ad9e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ada2:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800af50 <turn180R+0x2cc>
 800ada6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800adaa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800adae:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800adb2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800adb6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800adba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800adbe:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800adc2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800adc6:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800af40 <turn180R+0x2bc>
 800adca:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	eeb0 2a47 	vmov.f32	s4, s14
 800add4:	eef0 1a65 	vmov.f32	s3, s11
 800add8:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800af44 <turn180R+0x2c0>
 800addc:	eef0 0a46 	vmov.f32	s1, s12
 800ade0:	eeb0 0a66 	vmov.f32	s0, s13
 800ade4:	f7f8 f8fa 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800ade8:	4b54      	ldr	r3, [pc, #336]	; (800af3c <turn180R+0x2b8>)
 800adea:	2200      	movs	r2, #0
 800adec:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800adee:	e09c      	b.n	800af2a <turn180R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800adf0:	2300      	movs	r3, #0
 800adf2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800adf4:	2300      	movs	r3, #0
 800adf6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800adf8:	2302      	movs	r3, #2
 800adfa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800adfc:	2300      	movs	r3, #0
 800adfe:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ae00:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ae04:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ae08:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ae0c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ae10:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae14:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae18:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae1c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ae20:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ae24:	eddf 4a46 	vldr	s9, [pc, #280]	; 800af40 <turn180R+0x2bc>
 800ae28:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	eeb0 2a47 	vmov.f32	s4, s14
 800ae32:	eef0 1a45 	vmov.f32	s3, s10
 800ae36:	eeb0 1a65 	vmov.f32	s2, s11
 800ae3a:	eef0 0a46 	vmov.f32	s1, s12
 800ae3e:	eeb0 0a66 	vmov.f32	s0, s13
 800ae42:	f7f8 f8cb 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ae46:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d10c      	bne.n	800ae68 <turn180R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800ae4e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae52:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ae56:	eeb0 1a47 	vmov.f32	s2, s14
 800ae5a:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800af4c <turn180R+0x2c8>
 800ae5e:	eeb0 0a67 	vmov.f32	s0, s15
 800ae62:	f7f9 f831 	bl	8003ec8 <mollifier_slalom_table>
 800ae66:	e015      	b.n	800ae94 <turn180R+0x210>
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ae68:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae6c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ae70:	eef1 7a67 	vneg.f32	s15, s15
 800ae74:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ae78:	eef0 2a66 	vmov.f32	s5, s13
 800ae7c:	eeb0 2a67 	vmov.f32	s4, s15
 800ae80:	eddf 1a30 	vldr	s3, [pc, #192]	; 800af44 <turn180R+0x2c0>
 800ae84:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800af44 <turn180R+0x2c0>
 800ae88:	eddf 0a30 	vldr	s1, [pc, #192]	; 800af4c <turn180R+0x2c8>
 800ae8c:	eeb0 0a47 	vmov.f32	s0, s14
 800ae90:	f7f8 feca 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800ae94:	2301      	movs	r3, #1
 800ae96:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ae9c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800aea0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800aea4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aea8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aeac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aeb0:	edd7 7a01 	vldr	s15, [r7, #4]
 800aeb4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aeb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aebc:	eef0 7ae7 	vabs.f32	s15, s15
 800aec0:	ee17 0a90 	vmov	r0, s15
 800aec4:	f7f5 fb68 	bl	8000598 <__aeabi_f2d>
 800aec8:	f04f 0200 	mov.w	r2, #0
 800aecc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aed0:	f7f5 fce4 	bl	800089c <__aeabi_ddiv>
 800aed4:	4602      	mov	r2, r0
 800aed6:	460b      	mov	r3, r1
 800aed8:	4614      	mov	r4, r2
 800aeda:	461d      	mov	r5, r3
 800aedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aede:	4618      	mov	r0, r3
 800aee0:	f7f5 fb5a 	bl	8000598 <__aeabi_f2d>
 800aee4:	4602      	mov	r2, r0
 800aee6:	460b      	mov	r3, r1
 800aee8:	4620      	mov	r0, r4
 800aeea:	4629      	mov	r1, r5
 800aeec:	f7f5 fcd6 	bl	800089c <__aeabi_ddiv>
 800aef0:	4602      	mov	r2, r0
 800aef2:	460b      	mov	r3, r1
 800aef4:	4610      	mov	r0, r2
 800aef6:	4619      	mov	r1, r3
 800aef8:	f04f 0200 	mov.w	r2, #0
 800aefc:	4b15      	ldr	r3, [pc, #84]	; (800af54 <turn180R+0x2d0>)
 800aefe:	f7f5 f9ed 	bl	80002dc <__adddf3>
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800af06:	4610      	mov	r0, r2
 800af08:	4619      	mov	r1, r3
 800af0a:	f7f5 fe75 	bl	8000bf8 <__aeabi_d2f>
 800af0e:	4603      	mov	r3, r0
 800af10:	68f8      	ldr	r0, [r7, #12]
 800af12:	ee02 3a10 	vmov	s4, r3
 800af16:	edd7 1a01 	vldr	s3, [r7, #4]
 800af1a:	ed97 1a01 	vldr	s2, [r7, #4]
 800af1e:	eef0 0a68 	vmov.f32	s1, s17
 800af22:	eeb0 0a48 	vmov.f32	s0, s16
 800af26:	f7f8 f859 	bl	8002fdc <straight_table2>
}
 800af2a:	bf00      	nop
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	ecbd 8b02 	vpop	{d8}
 800af34:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800af38:	b004      	add	sp, #16
 800af3a:	4770      	bx	lr
 800af3c:	20000808 	.word	0x20000808
 800af40:	42340000 	.word	0x42340000
 800af44:	00000000 	.word	0x00000000
 800af48:	42cd0000 	.word	0x42cd0000
 800af4c:	c3340000 	.word	0xc3340000
 800af50:	42b40000 	.word	0x42b40000
 800af54:	408f4000 	.word	0x408f4000

0800af58 <turn180L>:

void turn180L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800af58:	b084      	sub	sp, #16
 800af5a:	b5b0      	push	{r4, r5, r7, lr}
 800af5c:	ed2d 8b02 	vpush	{d8}
 800af60:	b084      	sub	sp, #16
 800af62:	af00      	add	r7, sp, #0
 800af64:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800af68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800af6c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800af70:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800af74:	2b01      	cmp	r3, #1
 800af76:	f040 80a3 	bne.w	800b0c0 <turn180L+0x168>
		highspeed_mode = 1;
 800af7a:	4ba3      	ldr	r3, [pc, #652]	; (800b208 <turn180L+0x2b0>)
 800af7c:	2201      	movs	r2, #1
 800af7e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800af80:	2301      	movs	r3, #1
 800af82:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800af84:	2300      	movs	r3, #0
 800af86:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800af88:	2300      	movs	r3, #0
 800af8a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800af8c:	2300      	movs	r3, #0
 800af8e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800af90:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800af94:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800af98:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800af9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800afa4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800afa8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800afac:	eddf 5a97 	vldr	s11, [pc, #604]	; 800b20c <turn180L+0x2b4>
 800afb0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	eeb0 2a47 	vmov.f32	s4, s14
 800afba:	eef0 1a46 	vmov.f32	s3, s12
 800afbe:	eeb0 1a66 	vmov.f32	s2, s13
 800afc2:	eddf 0a93 	vldr	s1, [pc, #588]	; 800b210 <turn180L+0x2b8>
 800afc6:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800b214 <turn180L+0x2bc>
 800afca:	f7f8 f807 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800afce:	2300      	movs	r3, #0
 800afd0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800afd2:	2302      	movs	r3, #2
 800afd4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800afd6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800afda:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800afde:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800afe2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800afe6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800afea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aff2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800aff6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800affa:	eddf 4a84 	vldr	s9, [pc, #528]	; 800b20c <turn180L+0x2b4>
 800affe:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	eeb0 2a47 	vmov.f32	s4, s14
 800b008:	eef0 1a45 	vmov.f32	s3, s10
 800b00c:	eeb0 1a65 	vmov.f32	s2, s11
 800b010:	eef0 0a46 	vmov.f32	s1, s12
 800b014:	eeb0 0a66 	vmov.f32	s0, s13
 800b018:	f7f7 ffe0 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b01c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b020:	2b01      	cmp	r3, #1
 800b022:	d10c      	bne.n	800b03e <turn180L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800b024:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b028:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b02c:	eeb0 1a47 	vmov.f32	s2, s14
 800b030:	eddf 0a79 	vldr	s1, [pc, #484]	; 800b218 <turn180L+0x2c0>
 800b034:	eeb0 0a67 	vmov.f32	s0, s15
 800b038:	f7f8 ff46 	bl	8003ec8 <mollifier_slalom_table>
 800b03c:	e013      	b.n	800b066 <turn180L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b03e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b042:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b046:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b04a:	eef0 2a66 	vmov.f32	s5, s13
 800b04e:	eeb0 2a47 	vmov.f32	s4, s14
 800b052:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800b210 <turn180L+0x2b8>
 800b056:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800b210 <turn180L+0x2b8>
 800b05a:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800b218 <turn180L+0x2c0>
 800b05e:	eeb0 0a67 	vmov.f32	s0, s15
 800b062:	f7f8 fde1 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b066:	2300      	movs	r3, #0
 800b068:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b06a:	2300      	movs	r3, #0
 800b06c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b06e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b072:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800b21c <turn180L+0x2c4>
 800b076:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b07a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b07e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b082:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b086:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b08a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b08e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b092:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b096:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800b20c <turn180L+0x2b4>
 800b09a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	eeb0 2a47 	vmov.f32	s4, s14
 800b0a4:	eef0 1a65 	vmov.f32	s3, s11
 800b0a8:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800b210 <turn180L+0x2b8>
 800b0ac:	eef0 0a46 	vmov.f32	s1, s12
 800b0b0:	eeb0 0a66 	vmov.f32	s0, s13
 800b0b4:	f7f7 ff92 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800b0b8:	4b53      	ldr	r3, [pc, #332]	; (800b208 <turn180L+0x2b0>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800b0be:	e09a      	b.n	800b1f6 <turn180L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b0c8:	2302      	movs	r3, #2
 800b0ca:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b0d0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b0d4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b0d8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b0dc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b0e0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b0e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b0e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0ec:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b0f0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b0f4:	eddf 4a45 	vldr	s9, [pc, #276]	; 800b20c <turn180L+0x2b4>
 800b0f8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	eeb0 2a47 	vmov.f32	s4, s14
 800b102:	eef0 1a45 	vmov.f32	s3, s10
 800b106:	eeb0 1a65 	vmov.f32	s2, s11
 800b10a:	eef0 0a46 	vmov.f32	s1, s12
 800b10e:	eeb0 0a66 	vmov.f32	s0, s13
 800b112:	f7f7 ff63 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b116:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d10c      	bne.n	800b138 <turn180L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800b11e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b122:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b126:	eeb0 1a47 	vmov.f32	s2, s14
 800b12a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800b218 <turn180L+0x2c0>
 800b12e:	eeb0 0a67 	vmov.f32	s0, s15
 800b132:	f7f8 fec9 	bl	8003ec8 <mollifier_slalom_table>
 800b136:	e013      	b.n	800b160 <turn180L+0x208>
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b138:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b13c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b140:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b144:	eef0 2a66 	vmov.f32	s5, s13
 800b148:	eeb0 2a47 	vmov.f32	s4, s14
 800b14c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b210 <turn180L+0x2b8>
 800b150:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b210 <turn180L+0x2b8>
 800b154:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b218 <turn180L+0x2c0>
 800b158:	eeb0 0a67 	vmov.f32	s0, s15
 800b15c:	f7f8 fd64 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b160:	2301      	movs	r3, #1
 800b162:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b164:	2300      	movs	r3, #0
 800b166:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b168:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b16c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b170:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b174:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b178:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b17c:	edd7 7a01 	vldr	s15, [r7, #4]
 800b180:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b184:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b188:	eef0 7ae7 	vabs.f32	s15, s15
 800b18c:	ee17 0a90 	vmov	r0, s15
 800b190:	f7f5 fa02 	bl	8000598 <__aeabi_f2d>
 800b194:	f04f 0200 	mov.w	r2, #0
 800b198:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b19c:	f7f5 fb7e 	bl	800089c <__aeabi_ddiv>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	4614      	mov	r4, r2
 800b1a6:	461d      	mov	r5, r3
 800b1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7f5 f9f4 	bl	8000598 <__aeabi_f2d>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	4629      	mov	r1, r5
 800b1b8:	f7f5 fb70 	bl	800089c <__aeabi_ddiv>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	460b      	mov	r3, r1
 800b1c0:	4610      	mov	r0, r2
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	f04f 0200 	mov.w	r2, #0
 800b1c8:	4b15      	ldr	r3, [pc, #84]	; (800b220 <turn180L+0x2c8>)
 800b1ca:	f7f5 f887 	bl	80002dc <__adddf3>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b1d2:	4610      	mov	r0, r2
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	f7f5 fd0f 	bl	8000bf8 <__aeabi_d2f>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	ee02 3a10 	vmov	s4, r3
 800b1e2:	edd7 1a01 	vldr	s3, [r7, #4]
 800b1e6:	ed97 1a01 	vldr	s2, [r7, #4]
 800b1ea:	eef0 0a68 	vmov.f32	s1, s17
 800b1ee:	eeb0 0a48 	vmov.f32	s0, s16
 800b1f2:	f7f7 fef3 	bl	8002fdc <straight_table2>
}
 800b1f6:	bf00      	nop
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	ecbd 8b02 	vpop	{d8}
 800b200:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b204:	b004      	add	sp, #16
 800b206:	4770      	bx	lr
 800b208:	20000808 	.word	0x20000808
 800b20c:	42340000 	.word	0x42340000
 800b210:	00000000 	.word	0x00000000
 800b214:	42cd0000 	.word	0x42cd0000
 800b218:	43340000 	.word	0x43340000
 800b21c:	42b40000 	.word	0x42b40000
 800b220:	408f4000 	.word	0x408f4000
 800b224:	00000000 	.word	0x00000000

0800b228 <turn45inR>:



void turn45inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b228:	b084      	sub	sp, #16
 800b22a:	b5b0      	push	{r4, r5, r7, lr}
 800b22c:	ed2d 8b02 	vpush	{d8}
 800b230:	b084      	sub	sp, #16
 800b232:	af00      	add	r7, sp, #0
 800b234:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b238:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b23c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b240:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b244:	2b01      	cmp	r3, #1
 800b246:	f040 80ae 	bne.w	800b3a6 <turn45inR+0x17e>
		highspeed_mode = 1;
 800b24a:	4bdd      	ldr	r3, [pc, #884]	; (800b5c0 <turn45inR+0x398>)
 800b24c:	2201      	movs	r2, #1
 800b24e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b250:	2301      	movs	r3, #1
 800b252:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b254:	2300      	movs	r3, #0
 800b256:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b258:	2300      	movs	r3, #0
 800b25a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b25c:	2300      	movs	r3, #0
 800b25e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b260:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b264:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b268:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b26c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b270:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b274:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b278:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b27c:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800b5c4 <turn45inR+0x39c>
 800b280:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	eeb0 2a47 	vmov.f32	s4, s14
 800b28a:	eef0 1a46 	vmov.f32	s3, s12
 800b28e:	eeb0 1a66 	vmov.f32	s2, s13
 800b292:	eddf 0acf 	vldr	s1, [pc, #828]	; 800b5d0 <turn45inR+0x3a8>
 800b296:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800b5c8 <turn45inR+0x3a0>
 800b29a:	f7f7 fe9f 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b2a2:	2302      	movs	r3, #2
 800b2a4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b2a6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b2aa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b2ae:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b2b2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b2b6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b2ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b2be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b2c2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b2c6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b2ca:	eddf 4abe 	vldr	s9, [pc, #760]	; 800b5c4 <turn45inR+0x39c>
 800b2ce:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	eeb0 2a47 	vmov.f32	s4, s14
 800b2d8:	eef0 1a45 	vmov.f32	s3, s10
 800b2dc:	eeb0 1a65 	vmov.f32	s2, s11
 800b2e0:	eef0 0a46 	vmov.f32	s1, s12
 800b2e4:	eeb0 0a66 	vmov.f32	s0, s13
 800b2e8:	f7f7 fe78 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b2ec:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d10c      	bne.n	800b30e <turn45inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b2f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b2f8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b2fc:	eeb0 1a47 	vmov.f32	s2, s14
 800b300:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800b5d4 <turn45inR+0x3ac>
 800b304:	eeb0 0a67 	vmov.f32	s0, s15
 800b308:	f7f8 fdde 	bl	8003ec8 <mollifier_slalom_table>
 800b30c:	e015      	b.n	800b33a <turn45inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b30e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b312:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b316:	eef1 7a67 	vneg.f32	s15, s15
 800b31a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b31e:	eef0 2a66 	vmov.f32	s5, s13
 800b322:	eeb0 2a67 	vmov.f32	s4, s15
 800b326:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800b5d0 <turn45inR+0x3a8>
 800b32a:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800b5d0 <turn45inR+0x3a8>
 800b32e:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800b5d4 <turn45inR+0x3ac>
 800b332:	eeb0 0a47 	vmov.f32	s0, s14
 800b336:	f7f8 fc77 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b33a:	2300      	movs	r3, #0
 800b33c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b33e:	2300      	movs	r3, #0
 800b340:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b344:	4618      	mov	r0, r3
 800b346:	f7f5 f927 	bl	8000598 <__aeabi_f2d>
 800b34a:	a39b      	add	r3, pc, #620	; (adr r3, 800b5b8 <turn45inR+0x390>)
 800b34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b350:	f7f4 ffc4 	bl	80002dc <__adddf3>
 800b354:	4602      	mov	r2, r0
 800b356:	460b      	mov	r3, r1
 800b358:	4610      	mov	r0, r2
 800b35a:	4619      	mov	r1, r3
 800b35c:	f7f5 fc4c 	bl	8000bf8 <__aeabi_d2f>
 800b360:	4603      	mov	r3, r0
 800b362:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b366:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b36a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b36e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b372:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b376:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b37a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b37e:	eddf 5a91 	vldr	s11, [pc, #580]	; 800b5c4 <turn45inR+0x39c>
 800b382:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	eeb0 2a47 	vmov.f32	s4, s14
 800b38c:	eef0 1a46 	vmov.f32	s3, s12
 800b390:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800b5d0 <turn45inR+0x3a8>
 800b394:	eef0 0a66 	vmov.f32	s1, s13
 800b398:	ee00 3a10 	vmov	s0, r3
 800b39c:	f7f7 fe1e 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800b3a0:	4b87      	ldr	r3, [pc, #540]	; (800b5c0 <turn45inR+0x398>)
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b3a6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f040 809d 	bne.w	800b4ea <turn45inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b3b8:	2302      	movs	r3, #2
 800b3ba:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b3c0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b3c4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b3c8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b3cc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b3d0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b3d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b3d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b3dc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b3e0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b3e4:	eddf 4a77 	vldr	s9, [pc, #476]	; 800b5c4 <turn45inR+0x39c>
 800b3e8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	eeb0 2a47 	vmov.f32	s4, s14
 800b3f2:	eef0 1a45 	vmov.f32	s3, s10
 800b3f6:	eeb0 1a65 	vmov.f32	s2, s11
 800b3fa:	eef0 0a46 	vmov.f32	s1, s12
 800b3fe:	eeb0 0a66 	vmov.f32	s0, s13
 800b402:	f7f7 fdeb 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b406:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d10c      	bne.n	800b428 <turn45inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b40e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b412:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b416:	eeb0 1a47 	vmov.f32	s2, s14
 800b41a:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800b5d4 <turn45inR+0x3ac>
 800b41e:	eeb0 0a67 	vmov.f32	s0, s15
 800b422:	f7f8 fd51 	bl	8003ec8 <mollifier_slalom_table>
 800b426:	e015      	b.n	800b454 <turn45inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b428:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b42c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b430:	eef1 7a67 	vneg.f32	s15, s15
 800b434:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b438:	eef0 2a66 	vmov.f32	s5, s13
 800b43c:	eeb0 2a67 	vmov.f32	s4, s15
 800b440:	eddf 1a63 	vldr	s3, [pc, #396]	; 800b5d0 <turn45inR+0x3a8>
 800b444:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800b5d0 <turn45inR+0x3a8>
 800b448:	eddf 0a62 	vldr	s1, [pc, #392]	; 800b5d4 <turn45inR+0x3ac>
 800b44c:	eeb0 0a47 	vmov.f32	s0, s14
 800b450:	f7f8 fbea 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b454:	2303      	movs	r3, #3
 800b456:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b458:	2300      	movs	r3, #0
 800b45a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b45c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b460:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b464:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b468:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b46c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b470:	edd7 7a01 	vldr	s15, [r7, #4]
 800b474:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b47c:	eef0 7ae7 	vabs.f32	s15, s15
 800b480:	ee17 0a90 	vmov	r0, s15
 800b484:	f7f5 f888 	bl	8000598 <__aeabi_f2d>
 800b488:	f04f 0200 	mov.w	r2, #0
 800b48c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b490:	f7f5 fa04 	bl	800089c <__aeabi_ddiv>
 800b494:	4602      	mov	r2, r0
 800b496:	460b      	mov	r3, r1
 800b498:	4614      	mov	r4, r2
 800b49a:	461d      	mov	r5, r3
 800b49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7f5 f87a 	bl	8000598 <__aeabi_f2d>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	f7f5 f9f6 	bl	800089c <__aeabi_ddiv>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	4610      	mov	r0, r2
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	f04f 0200 	mov.w	r2, #0
 800b4bc:	4b43      	ldr	r3, [pc, #268]	; (800b5cc <turn45inR+0x3a4>)
 800b4be:	f7f4 ff0d 	bl	80002dc <__adddf3>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b4c6:	4610      	mov	r0, r2
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	f7f5 fb95 	bl	8000bf8 <__aeabi_d2f>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	ee02 3a10 	vmov	s4, r3
 800b4d6:	edd7 1a01 	vldr	s3, [r7, #4]
 800b4da:	ed97 1a01 	vldr	s2, [r7, #4]
 800b4de:	eef0 0a68 	vmov.f32	s1, s17
 800b4e2:	eeb0 0a48 	vmov.f32	s0, s16
 800b4e6:	f7f7 fd79 	bl	8002fdc <straight_table2>

	}
	if (test_mode >= 2) {
 800b4ea:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	f240 80d0 	bls.w	800b694 <turn45inR+0x46c>

		highspeed_mode = 1;
 800b4f4:	4b32      	ldr	r3, [pc, #200]	; (800b5c0 <turn45inR+0x398>)
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b4fe:	2300      	movs	r3, #0
 800b500:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b502:	2300      	movs	r3, #0
 800b504:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b506:	2300      	movs	r3, #0
 800b508:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b50a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b50e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b512:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b516:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b51a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b51e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b522:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b526:	eddf 5a27 	vldr	s11, [pc, #156]	; 800b5c4 <turn45inR+0x39c>
 800b52a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b52e:	68f8      	ldr	r0, [r7, #12]
 800b530:	eeb0 2a47 	vmov.f32	s4, s14
 800b534:	eef0 1a46 	vmov.f32	s3, s12
 800b538:	eeb0 1a66 	vmov.f32	s2, s13
 800b53c:	eddf 0a24 	vldr	s1, [pc, #144]	; 800b5d0 <turn45inR+0x3a8>
 800b540:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b5c8 <turn45inR+0x3a0>
 800b544:	f7f7 fd4a 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800b548:	2300      	movs	r3, #0
 800b54a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b54c:	2302      	movs	r3, #2
 800b54e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b550:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b554:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b558:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b55c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b560:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b564:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b568:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b56c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b570:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b574:	eddf 4a13 	vldr	s9, [pc, #76]	; 800b5c4 <turn45inR+0x39c>
 800b578:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	eeb0 2a47 	vmov.f32	s4, s14
 800b582:	eef0 1a45 	vmov.f32	s3, s10
 800b586:	eeb0 1a65 	vmov.f32	s2, s11
 800b58a:	eef0 0a46 	vmov.f32	s1, s12
 800b58e:	eeb0 0a66 	vmov.f32	s0, s13
 800b592:	f7f7 fd23 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b596:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d11c      	bne.n	800b5d8 <turn45inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b59e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b5a2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b5a6:	eeb0 1a47 	vmov.f32	s2, s14
 800b5aa:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800b5d4 <turn45inR+0x3ac>
 800b5ae:	eeb0 0a67 	vmov.f32	s0, s15
 800b5b2:	f7f8 fc89 	bl	8003ec8 <mollifier_slalom_table>
 800b5b6:	e025      	b.n	800b604 <turn45inR+0x3dc>
 800b5b8:	c022ec18 	.word	0xc022ec18
 800b5bc:	405fd1de 	.word	0x405fd1de
 800b5c0:	20000808 	.word	0x20000808
 800b5c4:	42340000 	.word	0x42340000
 800b5c8:	42cd0000 	.word	0x42cd0000
 800b5cc:	408f4000 	.word	0x408f4000
 800b5d0:	00000000 	.word	0x00000000
 800b5d4:	c2340000 	.word	0xc2340000
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b5d8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b5dc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b5e0:	eef1 7a67 	vneg.f32	s15, s15
 800b5e4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b5e8:	eef0 2a66 	vmov.f32	s5, s13
 800b5ec:	eeb0 2a67 	vmov.f32	s4, s15
 800b5f0:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800b5d0 <turn45inR+0x3a8>
 800b5f4:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800b5d0 <turn45inR+0x3a8>
 800b5f8:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800b5d4 <turn45inR+0x3ac>
 800b5fc:	eeb0 0a47 	vmov.f32	s0, s14
 800b600:	f7f8 fb12 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b604:	2300      	movs	r3, #0
 800b606:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b608:	2300      	movs	r3, #0
 800b60a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b60c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b610:	3b02      	subs	r3, #2
 800b612:	4618      	mov	r0, r3
 800b614:	f7f4 ffae 	bl	8000574 <__aeabi_i2d>
 800b618:	a325      	add	r3, pc, #148	; (adr r3, 800b6b0 <turn45inR+0x488>)
 800b61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61e:	f7f5 f813 	bl	8000648 <__aeabi_dmul>
 800b622:	4602      	mov	r2, r0
 800b624:	460b      	mov	r3, r1
 800b626:	4614      	mov	r4, r2
 800b628:	461d      	mov	r5, r3
 800b62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7f4 ffb3 	bl	8000598 <__aeabi_f2d>
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	4620      	mov	r0, r4
 800b638:	4629      	mov	r1, r5
 800b63a:	f7f4 fe4f 	bl	80002dc <__adddf3>
 800b63e:	4602      	mov	r2, r0
 800b640:	460b      	mov	r3, r1
 800b642:	4610      	mov	r0, r2
 800b644:	4619      	mov	r1, r3
 800b646:	f7f5 fad7 	bl	8000bf8 <__aeabi_d2f>
 800b64a:	4603      	mov	r3, r0
 800b64c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b650:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b654:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b658:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b65c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b660:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b664:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b668:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b66c:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800b6a8 <turn45inR+0x480>
 800b670:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b674:	68f8      	ldr	r0, [r7, #12]
 800b676:	eeb0 2a47 	vmov.f32	s4, s14
 800b67a:	eef0 1a65 	vmov.f32	s3, s11
 800b67e:	eeb0 1a46 	vmov.f32	s2, s12
 800b682:	eef0 0a66 	vmov.f32	s1, s13
 800b686:	ee00 3a10 	vmov	s0, r3
 800b68a:	f7f7 fca7 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800b68e:	4b07      	ldr	r3, [pc, #28]	; (800b6ac <turn45inR+0x484>)
 800b690:	2200      	movs	r2, #0
 800b692:	701a      	strb	r2, [r3, #0]
	}

}
 800b694:	bf00      	nop
 800b696:	3710      	adds	r7, #16
 800b698:	46bd      	mov	sp, r7
 800b69a:	ecbd 8b02 	vpop	{d8}
 800b69e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b6a2:	b004      	add	sp, #16
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	42340000 	.word	0x42340000
 800b6ac:	20000808 	.word	0x20000808
 800b6b0:	c022ec18 	.word	0xc022ec18
 800b6b4:	404fd1de 	.word	0x404fd1de

0800b6b8 <turn45inL>:

void turn45inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b6b8:	b084      	sub	sp, #16
 800b6ba:	b5b0      	push	{r4, r5, r7, lr}
 800b6bc:	ed2d 8b02 	vpush	{d8}
 800b6c0:	b084      	sub	sp, #16
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b6c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b6cc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b6d0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	f040 80ac 	bne.w	800b832 <turn45inL+0x17a>
		highspeed_mode = 1;
 800b6da:	4bdb      	ldr	r3, [pc, #876]	; (800ba48 <turn45inL+0x390>)
 800b6dc:	2201      	movs	r2, #1
 800b6de:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b6f0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b6f4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b6f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b6fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b700:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b704:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b708:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b70c:	eddf 5ad2 	vldr	s11, [pc, #840]	; 800ba58 <turn45inL+0x3a0>
 800b710:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	eeb0 2a47 	vmov.f32	s4, s14
 800b71a:	eef0 1a46 	vmov.f32	s3, s12
 800b71e:	eeb0 1a66 	vmov.f32	s2, s13
 800b722:	eddf 0acc 	vldr	s1, [pc, #816]	; 800ba54 <turn45inL+0x39c>
 800b726:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800ba4c <turn45inL+0x394>
 800b72a:	f7f7 fc57 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800b72e:	2300      	movs	r3, #0
 800b730:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b732:	2302      	movs	r3, #2
 800b734:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b736:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b73a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b73e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b742:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b746:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b74a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b74e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b752:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b756:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b75a:	eddf 4abf 	vldr	s9, [pc, #764]	; 800ba58 <turn45inL+0x3a0>
 800b75e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	eeb0 2a47 	vmov.f32	s4, s14
 800b768:	eef0 1a45 	vmov.f32	s3, s10
 800b76c:	eeb0 1a65 	vmov.f32	s2, s11
 800b770:	eef0 0a46 	vmov.f32	s1, s12
 800b774:	eeb0 0a66 	vmov.f32	s0, s13
 800b778:	f7f7 fc30 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b77c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b780:	2b01      	cmp	r3, #1
 800b782:	d10c      	bne.n	800b79e <turn45inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b784:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b788:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b78c:	eeb0 1a47 	vmov.f32	s2, s14
 800b790:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800ba58 <turn45inL+0x3a0>
 800b794:	eeb0 0a67 	vmov.f32	s0, s15
 800b798:	f7f8 fb96 	bl	8003ec8 <mollifier_slalom_table>
 800b79c:	e013      	b.n	800b7c6 <turn45inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b79e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7a2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b7a6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b7aa:	eef0 2a66 	vmov.f32	s5, s13
 800b7ae:	eeb0 2a47 	vmov.f32	s4, s14
 800b7b2:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800ba54 <turn45inL+0x39c>
 800b7b6:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 800ba54 <turn45inL+0x39c>
 800b7ba:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800ba58 <turn45inL+0x3a0>
 800b7be:	eeb0 0a67 	vmov.f32	s0, s15
 800b7c2:	f7f8 fa31 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7f4 fee1 	bl	8000598 <__aeabi_f2d>
 800b7d6:	a39a      	add	r3, pc, #616	; (adr r3, 800ba40 <turn45inL+0x388>)
 800b7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7dc:	f7f4 fd7e 	bl	80002dc <__adddf3>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	4610      	mov	r0, r2
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	f7f5 fa06 	bl	8000bf8 <__aeabi_d2f>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b7f2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b7f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b7fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b802:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b806:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b80a:	eddf 5a93 	vldr	s11, [pc, #588]	; 800ba58 <turn45inL+0x3a0>
 800b80e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	eeb0 2a47 	vmov.f32	s4, s14
 800b818:	eef0 1a46 	vmov.f32	s3, s12
 800b81c:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800ba54 <turn45inL+0x39c>
 800b820:	eef0 0a66 	vmov.f32	s1, s13
 800b824:	ee00 3a10 	vmov	s0, r3
 800b828:	f7f7 fbd8 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800b82c:	4b86      	ldr	r3, [pc, #536]	; (800ba48 <turn45inL+0x390>)
 800b82e:	2200      	movs	r2, #0
 800b830:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b832:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b836:	2b00      	cmp	r3, #0
 800b838:	f040 809b 	bne.w	800b972 <turn45inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b83c:	2300      	movs	r3, #0
 800b83e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b840:	2300      	movs	r3, #0
 800b842:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b844:	2302      	movs	r3, #2
 800b846:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b848:	2300      	movs	r3, #0
 800b84a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b84c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b850:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b854:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b858:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b85c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b860:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b864:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b868:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b86c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b870:	eddf 4a79 	vldr	s9, [pc, #484]	; 800ba58 <turn45inL+0x3a0>
 800b874:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	eeb0 2a47 	vmov.f32	s4, s14
 800b87e:	eef0 1a45 	vmov.f32	s3, s10
 800b882:	eeb0 1a65 	vmov.f32	s2, s11
 800b886:	eef0 0a46 	vmov.f32	s1, s12
 800b88a:	eeb0 0a66 	vmov.f32	s0, s13
 800b88e:	f7f7 fba5 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b892:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b896:	2b01      	cmp	r3, #1
 800b898:	d10c      	bne.n	800b8b4 <turn45inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b89a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b89e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b8a2:	eeb0 1a47 	vmov.f32	s2, s14
 800b8a6:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800ba58 <turn45inL+0x3a0>
 800b8aa:	eeb0 0a67 	vmov.f32	s0, s15
 800b8ae:	f7f8 fb0b 	bl	8003ec8 <mollifier_slalom_table>
 800b8b2:	e013      	b.n	800b8dc <turn45inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b8b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8b8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b8bc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b8c0:	eef0 2a66 	vmov.f32	s5, s13
 800b8c4:	eeb0 2a47 	vmov.f32	s4, s14
 800b8c8:	eddf 1a62 	vldr	s3, [pc, #392]	; 800ba54 <turn45inL+0x39c>
 800b8cc:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800ba54 <turn45inL+0x39c>
 800b8d0:	eddf 0a61 	vldr	s1, [pc, #388]	; 800ba58 <turn45inL+0x3a0>
 800b8d4:	eeb0 0a67 	vmov.f32	s0, s15
 800b8d8:	f7f8 f9a6 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b8e4:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b8e8:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b8ec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b8f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8f8:	edd7 7a01 	vldr	s15, [r7, #4]
 800b8fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b900:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b904:	eef0 7ae7 	vabs.f32	s15, s15
 800b908:	ee17 0a90 	vmov	r0, s15
 800b90c:	f7f4 fe44 	bl	8000598 <__aeabi_f2d>
 800b910:	f04f 0200 	mov.w	r2, #0
 800b914:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b918:	f7f4 ffc0 	bl	800089c <__aeabi_ddiv>
 800b91c:	4602      	mov	r2, r0
 800b91e:	460b      	mov	r3, r1
 800b920:	4614      	mov	r4, r2
 800b922:	461d      	mov	r5, r3
 800b924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b926:	4618      	mov	r0, r3
 800b928:	f7f4 fe36 	bl	8000598 <__aeabi_f2d>
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	4620      	mov	r0, r4
 800b932:	4629      	mov	r1, r5
 800b934:	f7f4 ffb2 	bl	800089c <__aeabi_ddiv>
 800b938:	4602      	mov	r2, r0
 800b93a:	460b      	mov	r3, r1
 800b93c:	4610      	mov	r0, r2
 800b93e:	4619      	mov	r1, r3
 800b940:	f04f 0200 	mov.w	r2, #0
 800b944:	4b42      	ldr	r3, [pc, #264]	; (800ba50 <turn45inL+0x398>)
 800b946:	f7f4 fcc9 	bl	80002dc <__adddf3>
 800b94a:	4602      	mov	r2, r0
 800b94c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b94e:	4610      	mov	r0, r2
 800b950:	4619      	mov	r1, r3
 800b952:	f7f5 f951 	bl	8000bf8 <__aeabi_d2f>
 800b956:	4603      	mov	r3, r0
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	ee02 3a10 	vmov	s4, r3
 800b95e:	edd7 1a01 	vldr	s3, [r7, #4]
 800b962:	ed97 1a01 	vldr	s2, [r7, #4]
 800b966:	eef0 0a68 	vmov.f32	s1, s17
 800b96a:	eeb0 0a48 	vmov.f32	s0, s16
 800b96e:	f7f7 fb35 	bl	8002fdc <straight_table2>

	}
	if (test_mode >= 2) {
 800b972:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b976:	2b01      	cmp	r3, #1
 800b978:	f240 80cc 	bls.w	800bb14 <turn45inL+0x45c>

		highspeed_mode = 1;
 800b97c:	4b32      	ldr	r3, [pc, #200]	; (800ba48 <turn45inL+0x390>)
 800b97e:	2201      	movs	r2, #1
 800b980:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b982:	2301      	movs	r3, #1
 800b984:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b986:	2300      	movs	r3, #0
 800b988:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b98a:	2300      	movs	r3, #0
 800b98c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b98e:	2300      	movs	r3, #0
 800b990:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b992:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b996:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b99a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b99e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b9a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9a6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b9aa:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b9ae:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800ba58 <turn45inL+0x3a0>
 800b9b2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b9b6:	68f8      	ldr	r0, [r7, #12]
 800b9b8:	eeb0 2a47 	vmov.f32	s4, s14
 800b9bc:	eef0 1a46 	vmov.f32	s3, s12
 800b9c0:	eeb0 1a66 	vmov.f32	s2, s13
 800b9c4:	eddf 0a23 	vldr	s1, [pc, #140]	; 800ba54 <turn45inL+0x39c>
 800b9c8:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800ba4c <turn45inL+0x394>
 800b9cc:	f7f7 fb06 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b9d8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b9dc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b9e0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b9e4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b9e8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b9ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b9f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9f4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b9f8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b9fc:	eddf 4a16 	vldr	s9, [pc, #88]	; 800ba58 <turn45inL+0x3a0>
 800ba00:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	eeb0 2a47 	vmov.f32	s4, s14
 800ba0a:	eef0 1a45 	vmov.f32	s3, s10
 800ba0e:	eeb0 1a65 	vmov.f32	s2, s11
 800ba12:	eef0 0a46 	vmov.f32	s1, s12
 800ba16:	eeb0 0a66 	vmov.f32	s0, s13
 800ba1a:	f7f7 fadf 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ba1e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d11a      	bne.n	800ba5c <turn45inL+0x3a4>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800ba26:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba2a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ba2e:	eeb0 1a47 	vmov.f32	s2, s14
 800ba32:	eddf 0a09 	vldr	s1, [pc, #36]	; 800ba58 <turn45inL+0x3a0>
 800ba36:	eeb0 0a67 	vmov.f32	s0, s15
 800ba3a:	f7f8 fa45 	bl	8003ec8 <mollifier_slalom_table>
 800ba3e:	e021      	b.n	800ba84 <turn45inL+0x3cc>
 800ba40:	c022ec18 	.word	0xc022ec18
 800ba44:	405fd1de 	.word	0x405fd1de
 800ba48:	20000808 	.word	0x20000808
 800ba4c:	42cd0000 	.word	0x42cd0000
 800ba50:	408f4000 	.word	0x408f4000
 800ba54:	00000000 	.word	0x00000000
 800ba58:	42340000 	.word	0x42340000
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ba5c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba60:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ba64:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ba68:	eef0 2a66 	vmov.f32	s5, s13
 800ba6c:	eeb0 2a47 	vmov.f32	s4, s14
 800ba70:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800ba54 <turn45inL+0x39c>
 800ba74:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800ba54 <turn45inL+0x39c>
 800ba78:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800ba58 <turn45inL+0x3a0>
 800ba7c:	eeb0 0a67 	vmov.f32	s0, s15
 800ba80:	f7f8 f8d2 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ba84:	2300      	movs	r3, #0
 800ba86:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ba8c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ba90:	3b02      	subs	r3, #2
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7f4 fd6e 	bl	8000574 <__aeabi_i2d>
 800ba98:	a325      	add	r3, pc, #148	; (adr r3, 800bb30 <turn45inL+0x478>)
 800ba9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9e:	f7f4 fdd3 	bl	8000648 <__aeabi_dmul>
 800baa2:	4602      	mov	r2, r0
 800baa4:	460b      	mov	r3, r1
 800baa6:	4614      	mov	r4, r2
 800baa8:	461d      	mov	r5, r3
 800baaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baac:	4618      	mov	r0, r3
 800baae:	f7f4 fd73 	bl	8000598 <__aeabi_f2d>
 800bab2:	4602      	mov	r2, r0
 800bab4:	460b      	mov	r3, r1
 800bab6:	4620      	mov	r0, r4
 800bab8:	4629      	mov	r1, r5
 800baba:	f7f4 fc0f 	bl	80002dc <__adddf3>
 800babe:	4602      	mov	r2, r0
 800bac0:	460b      	mov	r3, r1
 800bac2:	4610      	mov	r0, r2
 800bac4:	4619      	mov	r1, r3
 800bac6:	f7f5 f897 	bl	8000bf8 <__aeabi_d2f>
 800baca:	4603      	mov	r3, r0
 800bacc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bad0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bad4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bad8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800badc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bae0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bae4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bae8:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800baec:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800bb28 <turn45inL+0x470>
 800baf0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	eeb0 2a47 	vmov.f32	s4, s14
 800bafa:	eef0 1a65 	vmov.f32	s3, s11
 800bafe:	eeb0 1a46 	vmov.f32	s2, s12
 800bb02:	eef0 0a66 	vmov.f32	s1, s13
 800bb06:	ee00 3a10 	vmov	s0, r3
 800bb0a:	f7f7 fa67 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800bb0e:	4b07      	ldr	r3, [pc, #28]	; (800bb2c <turn45inL+0x474>)
 800bb10:	2200      	movs	r2, #0
 800bb12:	701a      	strb	r2, [r3, #0]
	}

}
 800bb14:	bf00      	nop
 800bb16:	3710      	adds	r7, #16
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	ecbd 8b02 	vpop	{d8}
 800bb1e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bb22:	b004      	add	sp, #16
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop
 800bb28:	42340000 	.word	0x42340000
 800bb2c:	20000808 	.word	0x20000808
 800bb30:	c022ec18 	.word	0xc022ec18
 800bb34:	404fd1de 	.word	0x404fd1de

0800bb38 <turn135inR>:

void turn135inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bb38:	b084      	sub	sp, #16
 800bb3a:	b5b0      	push	{r4, r5, r7, lr}
 800bb3c:	ed2d 8b02 	vpush	{d8}
 800bb40:	b084      	sub	sp, #16
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bb48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bb4c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800bb50:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	f040 80ae 	bne.w	800bcb6 <turn135inR+0x17e>
		highspeed_mode = 1;
 800bb5a:	4bdd      	ldr	r3, [pc, #884]	; (800bed0 <turn135inR+0x398>)
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bb60:	2301      	movs	r3, #1
 800bb62:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bb64:	2300      	movs	r3, #0
 800bb66:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bb70:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bb74:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bb78:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bb7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb80:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb84:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bb88:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bb8c:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800bed4 <turn135inR+0x39c>
 800bb90:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	eeb0 2a47 	vmov.f32	s4, s14
 800bb9a:	eef0 1a46 	vmov.f32	s3, s12
 800bb9e:	eeb0 1a66 	vmov.f32	s2, s13
 800bba2:	eddf 0acf 	vldr	s1, [pc, #828]	; 800bee0 <turn135inR+0x3a8>
 800bba6:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800bed8 <turn135inR+0x3a0>
 800bbaa:	f7f7 fa17 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bbb2:	2302      	movs	r3, #2
 800bbb4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bbb6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bbba:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bbbe:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bbc2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bbc6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bbca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bbce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbd2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bbd6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bbda:	eddf 4abe 	vldr	s9, [pc, #760]	; 800bed4 <turn135inR+0x39c>
 800bbde:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	eeb0 2a47 	vmov.f32	s4, s14
 800bbe8:	eef0 1a45 	vmov.f32	s3, s10
 800bbec:	eeb0 1a65 	vmov.f32	s2, s11
 800bbf0:	eef0 0a46 	vmov.f32	s1, s12
 800bbf4:	eeb0 0a66 	vmov.f32	s0, s13
 800bbf8:	f7f7 f9f0 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800bbfc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d10c      	bne.n	800bc1e <turn135inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bc04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc08:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bc0c:	eeb0 1a47 	vmov.f32	s2, s14
 800bc10:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800bee4 <turn135inR+0x3ac>
 800bc14:	eeb0 0a67 	vmov.f32	s0, s15
 800bc18:	f7f8 f956 	bl	8003ec8 <mollifier_slalom_table>
 800bc1c:	e015      	b.n	800bc4a <turn135inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bc1e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc22:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bc26:	eef1 7a67 	vneg.f32	s15, s15
 800bc2a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bc2e:	eef0 2a66 	vmov.f32	s5, s13
 800bc32:	eeb0 2a67 	vmov.f32	s4, s15
 800bc36:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800bee0 <turn135inR+0x3a8>
 800bc3a:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800bee0 <turn135inR+0x3a8>
 800bc3e:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800bee4 <turn135inR+0x3ac>
 800bc42:	eeb0 0a47 	vmov.f32	s0, s14
 800bc46:	f7f7 ffef 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc54:	4618      	mov	r0, r3
 800bc56:	f7f4 fc9f 	bl	8000598 <__aeabi_f2d>
 800bc5a:	a39b      	add	r3, pc, #620	; (adr r3, 800bec8 <turn135inR+0x390>)
 800bc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc60:	f7f4 fb3c 	bl	80002dc <__adddf3>
 800bc64:	4602      	mov	r2, r0
 800bc66:	460b      	mov	r3, r1
 800bc68:	4610      	mov	r0, r2
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	f7f4 ffc4 	bl	8000bf8 <__aeabi_d2f>
 800bc70:	4603      	mov	r3, r0
 800bc72:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bc76:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bc7a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc7e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc82:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc86:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bc8a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bc8e:	eddf 5a91 	vldr	s11, [pc, #580]	; 800bed4 <turn135inR+0x39c>
 800bc92:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bc96:	68f8      	ldr	r0, [r7, #12]
 800bc98:	eeb0 2a47 	vmov.f32	s4, s14
 800bc9c:	eef0 1a46 	vmov.f32	s3, s12
 800bca0:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800bee0 <turn135inR+0x3a8>
 800bca4:	eef0 0a66 	vmov.f32	s1, s13
 800bca8:	ee00 3a10 	vmov	s0, r3
 800bcac:	f7f7 f996 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800bcb0:	4b87      	ldr	r3, [pc, #540]	; (800bed0 <turn135inR+0x398>)
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800bcb6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	f040 809d 	bne.w	800bdfa <turn135inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800bcc8:	2302      	movs	r3, #2
 800bcca:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bccc:	2300      	movs	r3, #0
 800bcce:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bcd0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bcd4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bcd8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bcdc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bce0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bce4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bce8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bcec:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bcf0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bcf4:	eddf 4a77 	vldr	s9, [pc, #476]	; 800bed4 <turn135inR+0x39c>
 800bcf8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	eeb0 2a47 	vmov.f32	s4, s14
 800bd02:	eef0 1a45 	vmov.f32	s3, s10
 800bd06:	eeb0 1a65 	vmov.f32	s2, s11
 800bd0a:	eef0 0a46 	vmov.f32	s1, s12
 800bd0e:	eeb0 0a66 	vmov.f32	s0, s13
 800bd12:	f7f7 f963 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800bd16:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d10c      	bne.n	800bd38 <turn135inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bd1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd22:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bd26:	eeb0 1a47 	vmov.f32	s2, s14
 800bd2a:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800bee4 <turn135inR+0x3ac>
 800bd2e:	eeb0 0a67 	vmov.f32	s0, s15
 800bd32:	f7f8 f8c9 	bl	8003ec8 <mollifier_slalom_table>
 800bd36:	e015      	b.n	800bd64 <turn135inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bd38:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd3c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bd40:	eef1 7a67 	vneg.f32	s15, s15
 800bd44:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bd48:	eef0 2a66 	vmov.f32	s5, s13
 800bd4c:	eeb0 2a67 	vmov.f32	s4, s15
 800bd50:	eddf 1a63 	vldr	s3, [pc, #396]	; 800bee0 <turn135inR+0x3a8>
 800bd54:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800bee0 <turn135inR+0x3a8>
 800bd58:	eddf 0a62 	vldr	s1, [pc, #392]	; 800bee4 <turn135inR+0x3ac>
 800bd5c:	eeb0 0a47 	vmov.f32	s0, s14
 800bd60:	f7f7 ff62 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800bd64:	2303      	movs	r3, #3
 800bd66:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bd6c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bd70:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bd74:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd80:	edd7 7a01 	vldr	s15, [r7, #4]
 800bd84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bd88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd8c:	eef0 7ae7 	vabs.f32	s15, s15
 800bd90:	ee17 0a90 	vmov	r0, s15
 800bd94:	f7f4 fc00 	bl	8000598 <__aeabi_f2d>
 800bd98:	f04f 0200 	mov.w	r2, #0
 800bd9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bda0:	f7f4 fd7c 	bl	800089c <__aeabi_ddiv>
 800bda4:	4602      	mov	r2, r0
 800bda6:	460b      	mov	r3, r1
 800bda8:	4614      	mov	r4, r2
 800bdaa:	461d      	mov	r5, r3
 800bdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7f4 fbf2 	bl	8000598 <__aeabi_f2d>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	4620      	mov	r0, r4
 800bdba:	4629      	mov	r1, r5
 800bdbc:	f7f4 fd6e 	bl	800089c <__aeabi_ddiv>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	4610      	mov	r0, r2
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	f04f 0200 	mov.w	r2, #0
 800bdcc:	4b43      	ldr	r3, [pc, #268]	; (800bedc <turn135inR+0x3a4>)
 800bdce:	f7f4 fa85 	bl	80002dc <__adddf3>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bdd6:	4610      	mov	r0, r2
 800bdd8:	4619      	mov	r1, r3
 800bdda:	f7f4 ff0d 	bl	8000bf8 <__aeabi_d2f>
 800bdde:	4603      	mov	r3, r0
 800bde0:	68f8      	ldr	r0, [r7, #12]
 800bde2:	ee02 3a10 	vmov	s4, r3
 800bde6:	edd7 1a01 	vldr	s3, [r7, #4]
 800bdea:	ed97 1a01 	vldr	s2, [r7, #4]
 800bdee:	eef0 0a68 	vmov.f32	s1, s17
 800bdf2:	eeb0 0a48 	vmov.f32	s0, s16
 800bdf6:	f7f7 f8f1 	bl	8002fdc <straight_table2>

	}
	if (test_mode >= 2) {
 800bdfa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	f240 80d0 	bls.w	800bfa4 <turn135inR+0x46c>

		highspeed_mode = 1;
 800be04:	4b32      	ldr	r3, [pc, #200]	; (800bed0 <turn135inR+0x398>)
 800be06:	2201      	movs	r2, #1
 800be08:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800be0a:	2301      	movs	r3, #1
 800be0c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800be0e:	2300      	movs	r3, #0
 800be10:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800be12:	2300      	movs	r3, #0
 800be14:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800be16:	2300      	movs	r3, #0
 800be18:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800be1a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800be1e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be22:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be26:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be2e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800be32:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800be36:	eddf 5a27 	vldr	s11, [pc, #156]	; 800bed4 <turn135inR+0x39c>
 800be3a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	eeb0 2a47 	vmov.f32	s4, s14
 800be44:	eef0 1a46 	vmov.f32	s3, s12
 800be48:	eeb0 1a66 	vmov.f32	s2, s13
 800be4c:	eddf 0a24 	vldr	s1, [pc, #144]	; 800bee0 <turn135inR+0x3a8>
 800be50:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800bed8 <turn135inR+0x3a0>
 800be54:	f7f7 f8c2 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800be58:	2300      	movs	r3, #0
 800be5a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800be5c:	2302      	movs	r3, #2
 800be5e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800be60:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800be64:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800be68:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800be6c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be70:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be74:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be78:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be7c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800be80:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800be84:	eddf 4a13 	vldr	s9, [pc, #76]	; 800bed4 <turn135inR+0x39c>
 800be88:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	eeb0 2a47 	vmov.f32	s4, s14
 800be92:	eef0 1a45 	vmov.f32	s3, s10
 800be96:	eeb0 1a65 	vmov.f32	s2, s11
 800be9a:	eef0 0a46 	vmov.f32	s1, s12
 800be9e:	eeb0 0a66 	vmov.f32	s0, s13
 800bea2:	f7f7 f89b 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800bea6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d11c      	bne.n	800bee8 <turn135inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800beae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800beb2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800beb6:	eeb0 1a47 	vmov.f32	s2, s14
 800beba:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800bee4 <turn135inR+0x3ac>
 800bebe:	eeb0 0a67 	vmov.f32	s0, s15
 800bec2:	f7f8 f801 	bl	8003ec8 <mollifier_slalom_table>
 800bec6:	e025      	b.n	800bf14 <turn135inR+0x3dc>
 800bec8:	c022ec18 	.word	0xc022ec18
 800becc:	405fd1de 	.word	0x405fd1de
 800bed0:	20000808 	.word	0x20000808
 800bed4:	42340000 	.word	0x42340000
 800bed8:	42cd0000 	.word	0x42cd0000
 800bedc:	408f4000 	.word	0x408f4000
 800bee0:	00000000 	.word	0x00000000
 800bee4:	c3070000 	.word	0xc3070000
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bee8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800beec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bef0:	eef1 7a67 	vneg.f32	s15, s15
 800bef4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bef8:	eef0 2a66 	vmov.f32	s5, s13
 800befc:	eeb0 2a67 	vmov.f32	s4, s15
 800bf00:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800bee0 <turn135inR+0x3a8>
 800bf04:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800bee0 <turn135inR+0x3a8>
 800bf08:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800bee4 <turn135inR+0x3ac>
 800bf0c:	eeb0 0a47 	vmov.f32	s0, s14
 800bf10:	f7f7 fe8a 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bf14:	2300      	movs	r3, #0
 800bf16:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf1c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bf20:	3b02      	subs	r3, #2
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7f4 fb26 	bl	8000574 <__aeabi_i2d>
 800bf28:	a325      	add	r3, pc, #148	; (adr r3, 800bfc0 <turn135inR+0x488>)
 800bf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2e:	f7f4 fb8b 	bl	8000648 <__aeabi_dmul>
 800bf32:	4602      	mov	r2, r0
 800bf34:	460b      	mov	r3, r1
 800bf36:	4614      	mov	r4, r2
 800bf38:	461d      	mov	r5, r3
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7f4 fb2b 	bl	8000598 <__aeabi_f2d>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	4620      	mov	r0, r4
 800bf48:	4629      	mov	r1, r5
 800bf4a:	f7f4 f9c7 	bl	80002dc <__adddf3>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	460b      	mov	r3, r1
 800bf52:	4610      	mov	r0, r2
 800bf54:	4619      	mov	r1, r3
 800bf56:	f7f4 fe4f 	bl	8000bf8 <__aeabi_d2f>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bf60:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bf64:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bf68:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf70:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf74:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bf78:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf7c:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800bfb8 <turn135inR+0x480>
 800bf80:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	eeb0 2a47 	vmov.f32	s4, s14
 800bf8a:	eef0 1a65 	vmov.f32	s3, s11
 800bf8e:	eeb0 1a46 	vmov.f32	s2, s12
 800bf92:	eef0 0a66 	vmov.f32	s1, s13
 800bf96:	ee00 3a10 	vmov	s0, r3
 800bf9a:	f7f7 f81f 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800bf9e:	4b07      	ldr	r3, [pc, #28]	; (800bfbc <turn135inR+0x484>)
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	701a      	strb	r2, [r3, #0]
	}

}
 800bfa4:	bf00      	nop
 800bfa6:	3710      	adds	r7, #16
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	ecbd 8b02 	vpop	{d8}
 800bfae:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bfb2:	b004      	add	sp, #16
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	42340000 	.word	0x42340000
 800bfbc:	20000808 	.word	0x20000808
 800bfc0:	c022ec18 	.word	0xc022ec18
 800bfc4:	404fd1de 	.word	0x404fd1de

0800bfc8 <turn135inL>:

void turn135inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bfc8:	b084      	sub	sp, #16
 800bfca:	b5b0      	push	{r4, r5, r7, lr}
 800bfcc:	ed2d 8b02 	vpush	{d8}
 800bfd0:	b084      	sub	sp, #16
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bfd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bfdc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800bfe0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	f040 80ac 	bne.w	800c142 <turn135inL+0x17a>
		highspeed_mode = 1;
 800bfea:	4bdb      	ldr	r3, [pc, #876]	; (800c358 <turn135inL+0x390>)
 800bfec:	2201      	movs	r2, #1
 800bfee:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bff0:	2301      	movs	r3, #1
 800bff2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bff4:	2300      	movs	r3, #0
 800bff6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bff8:	2300      	movs	r3, #0
 800bffa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bffc:	2300      	movs	r3, #0
 800bffe:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c000:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c004:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c008:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c00c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c010:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c014:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c018:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c01c:	eddf 5acf 	vldr	s11, [pc, #828]	; 800c35c <turn135inL+0x394>
 800c020:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	eeb0 2a47 	vmov.f32	s4, s14
 800c02a:	eef0 1a46 	vmov.f32	s3, s12
 800c02e:	eeb0 1a66 	vmov.f32	s2, s13
 800c032:	eddf 0acd 	vldr	s1, [pc, #820]	; 800c368 <turn135inL+0x3a0>
 800c036:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800c360 <turn135inL+0x398>
 800c03a:	f7f6 ffcf 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800c03e:	2300      	movs	r3, #0
 800c040:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c042:	2302      	movs	r3, #2
 800c044:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c046:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c04a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c04e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c052:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c056:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c05a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c05e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c062:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c066:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c06a:	eddf 4abc 	vldr	s9, [pc, #752]	; 800c35c <turn135inL+0x394>
 800c06e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c072:	68f8      	ldr	r0, [r7, #12]
 800c074:	eeb0 2a47 	vmov.f32	s4, s14
 800c078:	eef0 1a45 	vmov.f32	s3, s10
 800c07c:	eeb0 1a65 	vmov.f32	s2, s11
 800c080:	eef0 0a46 	vmov.f32	s1, s12
 800c084:	eeb0 0a66 	vmov.f32	s0, s13
 800c088:	f7f6 ffa8 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c08c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c090:	2b01      	cmp	r3, #1
 800c092:	d10c      	bne.n	800c0ae <turn135inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c094:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c098:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c09c:	eeb0 1a47 	vmov.f32	s2, s14
 800c0a0:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800c36c <turn135inL+0x3a4>
 800c0a4:	eeb0 0a67 	vmov.f32	s0, s15
 800c0a8:	f7f7 ff0e 	bl	8003ec8 <mollifier_slalom_table>
 800c0ac:	e013      	b.n	800c0d6 <turn135inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c0ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0b2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c0b6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c0ba:	eef0 2a66 	vmov.f32	s5, s13
 800c0be:	eeb0 2a47 	vmov.f32	s4, s14
 800c0c2:	eddf 1aa9 	vldr	s3, [pc, #676]	; 800c368 <turn135inL+0x3a0>
 800c0c6:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 800c368 <turn135inL+0x3a0>
 800c0ca:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800c36c <turn135inL+0x3a4>
 800c0ce:	eeb0 0a67 	vmov.f32	s0, s15
 800c0d2:	f7f7 fda9 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7f4 fa59 	bl	8000598 <__aeabi_f2d>
 800c0e6:	a39a      	add	r3, pc, #616	; (adr r3, 800c350 <turn135inL+0x388>)
 800c0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ec:	f7f4 f8f6 	bl	80002dc <__adddf3>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	4610      	mov	r0, r2
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	f7f4 fd7e 	bl	8000bf8 <__aeabi_d2f>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c102:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c106:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c10a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c10e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c112:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c116:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c11a:	eddf 5a90 	vldr	s11, [pc, #576]	; 800c35c <turn135inL+0x394>
 800c11e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c122:	68f8      	ldr	r0, [r7, #12]
 800c124:	eeb0 2a47 	vmov.f32	s4, s14
 800c128:	eef0 1a46 	vmov.f32	s3, s12
 800c12c:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800c368 <turn135inL+0x3a0>
 800c130:	eef0 0a66 	vmov.f32	s1, s13
 800c134:	ee00 3a10 	vmov	s0, r3
 800c138:	f7f6 ff50 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c13c:	4b86      	ldr	r3, [pc, #536]	; (800c358 <turn135inL+0x390>)
 800c13e:	2200      	movs	r2, #0
 800c140:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800c142:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c146:	2b00      	cmp	r3, #0
 800c148:	f040 809b 	bne.w	800c282 <turn135inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800c14c:	2300      	movs	r3, #0
 800c14e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c150:	2300      	movs	r3, #0
 800c152:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800c154:	2302      	movs	r3, #2
 800c156:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c158:	2300      	movs	r3, #0
 800c15a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c15c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c160:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c164:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c168:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c16c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c170:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c174:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c178:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c17c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c180:	eddf 4a76 	vldr	s9, [pc, #472]	; 800c35c <turn135inL+0x394>
 800c184:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c188:	68f8      	ldr	r0, [r7, #12]
 800c18a:	eeb0 2a47 	vmov.f32	s4, s14
 800c18e:	eef0 1a45 	vmov.f32	s3, s10
 800c192:	eeb0 1a65 	vmov.f32	s2, s11
 800c196:	eef0 0a46 	vmov.f32	s1, s12
 800c19a:	eeb0 0a66 	vmov.f32	s0, s13
 800c19e:	f7f6 ff1d 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c1a2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d10c      	bne.n	800c1c4 <turn135inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c1aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1ae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c1b2:	eeb0 1a47 	vmov.f32	s2, s14
 800c1b6:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800c36c <turn135inL+0x3a4>
 800c1ba:	eeb0 0a67 	vmov.f32	s0, s15
 800c1be:	f7f7 fe83 	bl	8003ec8 <mollifier_slalom_table>
 800c1c2:	e013      	b.n	800c1ec <turn135inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c1c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1c8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c1cc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c1d0:	eef0 2a66 	vmov.f32	s5, s13
 800c1d4:	eeb0 2a47 	vmov.f32	s4, s14
 800c1d8:	eddf 1a63 	vldr	s3, [pc, #396]	; 800c368 <turn135inL+0x3a0>
 800c1dc:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800c368 <turn135inL+0x3a0>
 800c1e0:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c36c <turn135inL+0x3a4>
 800c1e4:	eeb0 0a67 	vmov.f32	s0, s15
 800c1e8:	f7f7 fd1e 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800c1ec:	2303      	movs	r3, #3
 800c1ee:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c1f4:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c1f8:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c1fc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c200:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c204:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c208:	edd7 7a01 	vldr	s15, [r7, #4]
 800c20c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c210:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c214:	eef0 7ae7 	vabs.f32	s15, s15
 800c218:	ee17 0a90 	vmov	r0, s15
 800c21c:	f7f4 f9bc 	bl	8000598 <__aeabi_f2d>
 800c220:	f04f 0200 	mov.w	r2, #0
 800c224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c228:	f7f4 fb38 	bl	800089c <__aeabi_ddiv>
 800c22c:	4602      	mov	r2, r0
 800c22e:	460b      	mov	r3, r1
 800c230:	4614      	mov	r4, r2
 800c232:	461d      	mov	r5, r3
 800c234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c236:	4618      	mov	r0, r3
 800c238:	f7f4 f9ae 	bl	8000598 <__aeabi_f2d>
 800c23c:	4602      	mov	r2, r0
 800c23e:	460b      	mov	r3, r1
 800c240:	4620      	mov	r0, r4
 800c242:	4629      	mov	r1, r5
 800c244:	f7f4 fb2a 	bl	800089c <__aeabi_ddiv>
 800c248:	4602      	mov	r2, r0
 800c24a:	460b      	mov	r3, r1
 800c24c:	4610      	mov	r0, r2
 800c24e:	4619      	mov	r1, r3
 800c250:	f04f 0200 	mov.w	r2, #0
 800c254:	4b43      	ldr	r3, [pc, #268]	; (800c364 <turn135inL+0x39c>)
 800c256:	f7f4 f841 	bl	80002dc <__adddf3>
 800c25a:	4602      	mov	r2, r0
 800c25c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c25e:	4610      	mov	r0, r2
 800c260:	4619      	mov	r1, r3
 800c262:	f7f4 fcc9 	bl	8000bf8 <__aeabi_d2f>
 800c266:	4603      	mov	r3, r0
 800c268:	68f8      	ldr	r0, [r7, #12]
 800c26a:	ee02 3a10 	vmov	s4, r3
 800c26e:	edd7 1a01 	vldr	s3, [r7, #4]
 800c272:	ed97 1a01 	vldr	s2, [r7, #4]
 800c276:	eef0 0a68 	vmov.f32	s1, s17
 800c27a:	eeb0 0a48 	vmov.f32	s0, s16
 800c27e:	f7f6 fead 	bl	8002fdc <straight_table2>

	}
	if (test_mode >= 2) {
 800c282:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c286:	2b01      	cmp	r3, #1
 800c288:	f240 80ce 	bls.w	800c428 <turn135inL+0x460>

		highspeed_mode = 1;
 800c28c:	4b32      	ldr	r3, [pc, #200]	; (800c358 <turn135inL+0x390>)
 800c28e:	2201      	movs	r2, #1
 800c290:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c292:	2301      	movs	r3, #1
 800c294:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c296:	2300      	movs	r3, #0
 800c298:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c29a:	2300      	movs	r3, #0
 800c29c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c2a2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c2a6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c2aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c2ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2b6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c2ba:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c2be:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c35c <turn135inL+0x394>
 800c2c2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	eeb0 2a47 	vmov.f32	s4, s14
 800c2cc:	eef0 1a46 	vmov.f32	s3, s12
 800c2d0:	eeb0 1a66 	vmov.f32	s2, s13
 800c2d4:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c368 <turn135inL+0x3a0>
 800c2d8:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c360 <turn135inL+0x398>
 800c2dc:	f7f6 fe7e 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c2e4:	2302      	movs	r3, #2
 800c2e6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c2e8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c2ec:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c2f0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c2f4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c2f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c2fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c300:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c304:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c308:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c30c:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c35c <turn135inL+0x394>
 800c310:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c314:	68f8      	ldr	r0, [r7, #12]
 800c316:	eeb0 2a47 	vmov.f32	s4, s14
 800c31a:	eef0 1a45 	vmov.f32	s3, s10
 800c31e:	eeb0 1a65 	vmov.f32	s2, s11
 800c322:	eef0 0a46 	vmov.f32	s1, s12
 800c326:	eeb0 0a66 	vmov.f32	s0, s13
 800c32a:	f7f6 fe57 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c32e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c332:	2b01      	cmp	r3, #1
 800c334:	d11c      	bne.n	800c370 <turn135inL+0x3a8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c336:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c33a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c33e:	eeb0 1a47 	vmov.f32	s2, s14
 800c342:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800c36c <turn135inL+0x3a4>
 800c346:	eeb0 0a67 	vmov.f32	s0, s15
 800c34a:	f7f7 fdbd 	bl	8003ec8 <mollifier_slalom_table>
 800c34e:	e023      	b.n	800c398 <turn135inL+0x3d0>
 800c350:	c022ec18 	.word	0xc022ec18
 800c354:	405fd1de 	.word	0x405fd1de
 800c358:	20000808 	.word	0x20000808
 800c35c:	42340000 	.word	0x42340000
 800c360:	42cd0000 	.word	0x42cd0000
 800c364:	408f4000 	.word	0x408f4000
 800c368:	00000000 	.word	0x00000000
 800c36c:	43070000 	.word	0x43070000
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c370:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c374:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c378:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c37c:	eef0 2a66 	vmov.f32	s5, s13
 800c380:	eeb0 2a47 	vmov.f32	s4, s14
 800c384:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800c368 <turn135inL+0x3a0>
 800c388:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800c368 <turn135inL+0x3a0>
 800c38c:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800c36c <turn135inL+0x3a4>
 800c390:	eeb0 0a67 	vmov.f32	s0, s15
 800c394:	f7f7 fc48 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c398:	2300      	movs	r3, #0
 800c39a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c39c:	2300      	movs	r3, #0
 800c39e:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c3a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c3a4:	3b02      	subs	r3, #2
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7f4 f8e4 	bl	8000574 <__aeabi_i2d>
 800c3ac:	a326      	add	r3, pc, #152	; (adr r3, 800c448 <turn135inL+0x480>)
 800c3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b2:	f7f4 f949 	bl	8000648 <__aeabi_dmul>
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	4614      	mov	r4, r2
 800c3bc:	461d      	mov	r5, r3
 800c3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7f4 f8e9 	bl	8000598 <__aeabi_f2d>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	4629      	mov	r1, r5
 800c3ce:	f7f3 ff85 	bl	80002dc <__adddf3>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	4610      	mov	r0, r2
 800c3d8:	4619      	mov	r1, r3
 800c3da:	f7f4 fc0d 	bl	8000bf8 <__aeabi_d2f>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c3e4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c3e8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c3ec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c3f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c3f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3f8:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c3fc:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c400:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 800c440 <turn135inL+0x478>
 800c404:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	eeb0 2a47 	vmov.f32	s4, s14
 800c40e:	eef0 1a65 	vmov.f32	s3, s11
 800c412:	eeb0 1a46 	vmov.f32	s2, s12
 800c416:	eef0 0a66 	vmov.f32	s1, s13
 800c41a:	ee00 3a10 	vmov	s0, r3
 800c41e:	f7f6 fddd 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c422:	4b08      	ldr	r3, [pc, #32]	; (800c444 <turn135inL+0x47c>)
 800c424:	2200      	movs	r2, #0
 800c426:	701a      	strb	r2, [r3, #0]
	}

}
 800c428:	bf00      	nop
 800c42a:	3710      	adds	r7, #16
 800c42c:	46bd      	mov	sp, r7
 800c42e:	ecbd 8b02 	vpop	{d8}
 800c432:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c436:	b004      	add	sp, #16
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	f3af 8000 	nop.w
 800c440:	42340000 	.word	0x42340000
 800c444:	20000808 	.word	0x20000808
 800c448:	c022ec18 	.word	0xc022ec18
 800c44c:	404fd1de 	.word	0x404fd1de

0800c450 <turn45outR>:


void turn45outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c450:	b084      	sub	sp, #16
 800c452:	b5b0      	push	{r4, r5, r7, lr}
 800c454:	ed2d 8b02 	vpush	{d8}
 800c458:	b084      	sub	sp, #16
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c460:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c464:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;

	if (test_mode == 1) {
 800c468:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	f040 80a5 	bne.w	800c5bc <turn45outR+0x16c>
		highspeed_mode = 1;
 800c472:	4be9      	ldr	r3, [pc, #932]	; (800c818 <turn45outR+0x3c8>)
 800c474:	2201      	movs	r2, #1
 800c476:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c478:	2300      	movs	r3, #0
 800c47a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c47c:	2300      	movs	r3, #0
 800c47e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c480:	2300      	movs	r3, #0
 800c482:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c484:	2300      	movs	r3, #0
 800c486:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c488:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c48c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c490:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c494:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c49c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c4a0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c4a4:	eddf 5add 	vldr	s11, [pc, #884]	; 800c81c <turn45outR+0x3cc>
 800c4a8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c4ac:	68f8      	ldr	r0, [r7, #12]
 800c4ae:	eeb0 2a47 	vmov.f32	s4, s14
 800c4b2:	eef0 1a46 	vmov.f32	s3, s12
 800c4b6:	eeb0 1a66 	vmov.f32	s2, s13
 800c4ba:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800c820 <turn45outR+0x3d0>
 800c4be:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800c824 <turn45outR+0x3d4>
 800c4c2:	f7f6 fd8b 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=3;
 800c4ca:	2303      	movs	r3, #3
 800c4cc:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c4ce:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c4d2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c4d6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c4da:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c4de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c4e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c4e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4ea:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c4ee:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c4f2:	eddf 4aca 	vldr	s9, [pc, #808]	; 800c81c <turn45outR+0x3cc>
 800c4f6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c4fa:	68f8      	ldr	r0, [r7, #12]
 800c4fc:	eeb0 2a47 	vmov.f32	s4, s14
 800c500:	eef0 1a45 	vmov.f32	s3, s10
 800c504:	eeb0 1a65 	vmov.f32	s2, s11
 800c508:	eef0 0a46 	vmov.f32	s1, s12
 800c50c:	eeb0 0a66 	vmov.f32	s0, s13
 800c510:	f7f6 fd64 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c514:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d10c      	bne.n	800c536 <turn45outR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c51c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c520:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c524:	eeb0 1a47 	vmov.f32	s2, s14
 800c528:	eddf 0abf 	vldr	s1, [pc, #764]	; 800c828 <turn45outR+0x3d8>
 800c52c:	eeb0 0a67 	vmov.f32	s0, s15
 800c530:	f7f7 fcca 	bl	8003ec8 <mollifier_slalom_table>
 800c534:	e015      	b.n	800c562 <turn45outR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c536:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c53a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c53e:	eef1 7a67 	vneg.f32	s15, s15
 800c542:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c546:	eef0 2a66 	vmov.f32	s5, s13
 800c54a:	eeb0 2a67 	vmov.f32	s4, s15
 800c54e:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800c820 <turn45outR+0x3d0>
 800c552:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800c820 <turn45outR+0x3d0>
 800c556:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800c828 <turn45outR+0x3d8>
 800c55a:	eeb0 0a47 	vmov.f32	s0, s14
 800c55e:	f7f7 fb63 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c562:	2300      	movs	r3, #0
 800c564:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c566:	2300      	movs	r3, #0
 800c568:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c56a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c56e:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800c82c <turn45outR+0x3dc>
 800c572:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c576:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c57a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c57e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c582:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c586:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c58a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c58e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c592:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800c81c <turn45outR+0x3cc>
 800c596:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c59a:	68f8      	ldr	r0, [r7, #12]
 800c59c:	eeb0 2a47 	vmov.f32	s4, s14
 800c5a0:	eef0 1a65 	vmov.f32	s3, s11
 800c5a4:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800c820 <turn45outR+0x3d0>
 800c5a8:	eef0 0a46 	vmov.f32	s1, s12
 800c5ac:	eeb0 0a66 	vmov.f32	s0, s13
 800c5b0:	f7f6 fd14 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c5b4:	4b98      	ldr	r3, [pc, #608]	; (800c818 <turn45outR+0x3c8>)
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c5ba:	e123      	b.n	800c804 <turn45outR+0x3b4>
	}else if (test_mode >= 2) {
 800c5bc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	f240 8082 	bls.w	800c6ca <turn45outR+0x27a>
		highspeed_mode = 1;
 800c5c6:	4b94      	ldr	r3, [pc, #592]	; (800c818 <turn45outR+0x3c8>)
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c5d4:	2303      	movs	r3, #3
 800c5d6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c5dc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c5e0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c5e4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c5e8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c5ec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c5f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c5f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5f8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c5fc:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c600:	eddf 4a86 	vldr	s9, [pc, #536]	; 800c81c <turn45outR+0x3cc>
 800c604:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c608:	68f8      	ldr	r0, [r7, #12]
 800c60a:	eeb0 2a47 	vmov.f32	s4, s14
 800c60e:	eef0 1a45 	vmov.f32	s3, s10
 800c612:	eeb0 1a65 	vmov.f32	s2, s11
 800c616:	eef0 0a46 	vmov.f32	s1, s12
 800c61a:	eeb0 0a66 	vmov.f32	s0, s13
 800c61e:	f7f6 fcdd 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c622:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c626:	2b01      	cmp	r3, #1
 800c628:	d10c      	bne.n	800c644 <turn45outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c62a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c62e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c632:	eeb0 1a47 	vmov.f32	s2, s14
 800c636:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800c828 <turn45outR+0x3d8>
 800c63a:	eeb0 0a67 	vmov.f32	s0, s15
 800c63e:	f7f7 fc43 	bl	8003ec8 <mollifier_slalom_table>
 800c642:	e015      	b.n	800c670 <turn45outR+0x220>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c644:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c648:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c64c:	eef1 7a67 	vneg.f32	s15, s15
 800c650:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c654:	eef0 2a66 	vmov.f32	s5, s13
 800c658:	eeb0 2a67 	vmov.f32	s4, s15
 800c65c:	eddf 1a70 	vldr	s3, [pc, #448]	; 800c820 <turn45outR+0x3d0>
 800c660:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800c820 <turn45outR+0x3d0>
 800c664:	eddf 0a70 	vldr	s1, [pc, #448]	; 800c828 <turn45outR+0x3d8>
 800c668:	eeb0 0a47 	vmov.f32	s0, s14
 800c66c:	f7f7 fadc 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800c670:	2300      	movs	r3, #0
 800c672:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c674:	2300      	movs	r3, #0
 800c676:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c678:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c67c:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800c82c <turn45outR+0x3dc>
 800c680:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c684:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c688:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c68c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c690:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c694:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c698:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c69c:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c6a0:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800c81c <turn45outR+0x3cc>
 800c6a4:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c6a8:	68f8      	ldr	r0, [r7, #12]
 800c6aa:	eeb0 2a47 	vmov.f32	s4, s14
 800c6ae:	eef0 1a65 	vmov.f32	s3, s11
 800c6b2:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800c820 <turn45outR+0x3d0>
 800c6b6:	eef0 0a46 	vmov.f32	s1, s12
 800c6ba:	eeb0 0a66 	vmov.f32	s0, s13
 800c6be:	f7f6 fc8d 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c6c2:	4b55      	ldr	r3, [pc, #340]	; (800c818 <turn45outR+0x3c8>)
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	701a      	strb	r2, [r3, #0]
}
 800c6c8:	e09c      	b.n	800c804 <turn45outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c6d2:	2303      	movs	r3, #3
 800c6d4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c6da:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c6de:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c6e2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c6e6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c6ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c6ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6f6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c6fa:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c6fe:	eddf 4a47 	vldr	s9, [pc, #284]	; 800c81c <turn45outR+0x3cc>
 800c702:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	eeb0 2a47 	vmov.f32	s4, s14
 800c70c:	eef0 1a45 	vmov.f32	s3, s10
 800c710:	eeb0 1a65 	vmov.f32	s2, s11
 800c714:	eef0 0a46 	vmov.f32	s1, s12
 800c718:	eeb0 0a66 	vmov.f32	s0, s13
 800c71c:	f7f6 fc5e 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c720:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c724:	2b01      	cmp	r3, #1
 800c726:	d10c      	bne.n	800c742 <turn45outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c728:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c72c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c730:	eeb0 1a47 	vmov.f32	s2, s14
 800c734:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800c828 <turn45outR+0x3d8>
 800c738:	eeb0 0a67 	vmov.f32	s0, s15
 800c73c:	f7f7 fbc4 	bl	8003ec8 <mollifier_slalom_table>
 800c740:	e015      	b.n	800c76e <turn45outR+0x31e>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c742:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c746:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c74a:	eef1 7a67 	vneg.f32	s15, s15
 800c74e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c752:	eef0 2a66 	vmov.f32	s5, s13
 800c756:	eeb0 2a67 	vmov.f32	s4, s15
 800c75a:	eddf 1a31 	vldr	s3, [pc, #196]	; 800c820 <turn45outR+0x3d0>
 800c75e:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800c820 <turn45outR+0x3d0>
 800c762:	eddf 0a31 	vldr	s1, [pc, #196]	; 800c828 <turn45outR+0x3d8>
 800c766:	eeb0 0a47 	vmov.f32	s0, s14
 800c76a:	f7f7 fa5d 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800c76e:	2301      	movs	r3, #1
 800c770:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c772:	2300      	movs	r3, #0
 800c774:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c776:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c77a:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c77e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c782:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c786:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c78a:	edd7 7a01 	vldr	s15, [r7, #4]
 800c78e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c792:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c796:	eef0 7ae7 	vabs.f32	s15, s15
 800c79a:	ee17 0a90 	vmov	r0, s15
 800c79e:	f7f3 fefb 	bl	8000598 <__aeabi_f2d>
 800c7a2:	f04f 0200 	mov.w	r2, #0
 800c7a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c7aa:	f7f4 f877 	bl	800089c <__aeabi_ddiv>
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	4614      	mov	r4, r2
 800c7b4:	461d      	mov	r5, r3
 800c7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7f3 feed 	bl	8000598 <__aeabi_f2d>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	f7f4 f869 	bl	800089c <__aeabi_ddiv>
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	4610      	mov	r0, r2
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	f04f 0200 	mov.w	r2, #0
 800c7d6:	4b16      	ldr	r3, [pc, #88]	; (800c830 <turn45outR+0x3e0>)
 800c7d8:	f7f3 fd80 	bl	80002dc <__adddf3>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c7e0:	4610      	mov	r0, r2
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	f7f4 fa08 	bl	8000bf8 <__aeabi_d2f>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	68f8      	ldr	r0, [r7, #12]
 800c7ec:	ee02 3a10 	vmov	s4, r3
 800c7f0:	edd7 1a01 	vldr	s3, [r7, #4]
 800c7f4:	ed97 1a01 	vldr	s2, [r7, #4]
 800c7f8:	eef0 0a68 	vmov.f32	s1, s17
 800c7fc:	eeb0 0a48 	vmov.f32	s0, s16
 800c800:	f7f6 fbec 	bl	8002fdc <straight_table2>
}
 800c804:	bf00      	nop
 800c806:	3710      	adds	r7, #16
 800c808:	46bd      	mov	sp, r7
 800c80a:	ecbd 8b02 	vpop	{d8}
 800c80e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c812:	b004      	add	sp, #16
 800c814:	4770      	bx	lr
 800c816:	bf00      	nop
 800c818:	20000808 	.word	0x20000808
 800c81c:	42340000 	.word	0x42340000
 800c820:	00000000 	.word	0x00000000
 800c824:	42c4477b 	.word	0x42c4477b
 800c828:	c2340000 	.word	0xc2340000
 800c82c:	42b40000 	.word	0x42b40000
 800c830:	408f4000 	.word	0x408f4000

0800c834 <turn45outL>:


void turn45outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c834:	b084      	sub	sp, #16
 800c836:	b5b0      	push	{r4, r5, r7, lr}
 800c838:	ed2d 8b02 	vpush	{d8}
 800c83c:	b084      	sub	sp, #16
 800c83e:	af00      	add	r7, sp, #0
 800c840:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c848:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c84c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c850:	2b01      	cmp	r3, #1
 800c852:	f040 80a3 	bne.w	800c99c <turn45outL+0x168>
			highspeed_mode = 1;
 800c856:	4be5      	ldr	r3, [pc, #916]	; (800cbec <turn45outL+0x3b8>)
 800c858:	2201      	movs	r2, #1
 800c85a:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800c85c:	2300      	movs	r3, #0
 800c85e:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800c860:	2300      	movs	r3, #0
 800c862:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800c864:	2300      	movs	r3, #0
 800c866:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800c868:	2300      	movs	r3, #0
 800c86a:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c86c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c870:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c874:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c878:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c87c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c880:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c884:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c888:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800cbf0 <turn45outL+0x3bc>
 800c88c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c890:	68f8      	ldr	r0, [r7, #12]
 800c892:	eeb0 2a47 	vmov.f32	s4, s14
 800c896:	eef0 1a46 	vmov.f32	s3, s12
 800c89a:	eeb0 1a66 	vmov.f32	s2, s13
 800c89e:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800cbf4 <turn45outL+0x3c0>
 800c8a2:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800cbf8 <turn45outL+0x3c4>
 800c8a6:	f7f6 fb99 	bl	8002fdc <straight_table2>
			wallmode.WallControlMode=0;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=4;
 800c8ae:	2304      	movs	r3, #4
 800c8b0:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c8b2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c8b6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c8ba:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c8be:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c8c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c8c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c8ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8ce:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c8d2:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c8d6:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800cbf0 <turn45outL+0x3bc>
 800c8da:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	eeb0 2a47 	vmov.f32	s4, s14
 800c8e4:	eef0 1a45 	vmov.f32	s3, s10
 800c8e8:	eeb0 1a65 	vmov.f32	s2, s11
 800c8ec:	eef0 0a46 	vmov.f32	s1, s12
 800c8f0:	eeb0 0a66 	vmov.f32	s0, s13
 800c8f4:	f7f6 fb72 	bl	8002fdc <straight_table2>
			if(mollifier_mode == ON){
 800c8f8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d10c      	bne.n	800c91a <turn45outL+0xe6>
				mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c900:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c904:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c908:	eeb0 1a47 	vmov.f32	s2, s14
 800c90c:	eddf 0ab8 	vldr	s1, [pc, #736]	; 800cbf0 <turn45outL+0x3bc>
 800c910:	eeb0 0a67 	vmov.f32	s0, s15
 800c914:	f7f7 fad8 	bl	8003ec8 <mollifier_slalom_table>
 800c918:	e013      	b.n	800c942 <turn45outL+0x10e>
			}else{
				slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c91a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c91e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c922:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c926:	eef0 2a66 	vmov.f32	s5, s13
 800c92a:	eeb0 2a47 	vmov.f32	s4, s14
 800c92e:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800cbf4 <turn45outL+0x3c0>
 800c932:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800cbf4 <turn45outL+0x3c0>
 800c936:	eddf 0aae 	vldr	s1, [pc, #696]	; 800cbf0 <turn45outL+0x3bc>
 800c93a:	eeb0 0a67 	vmov.f32	s0, s15
 800c93e:	f7f7 f973 	bl	8003c28 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800c942:	2300      	movs	r3, #0
 800c944:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800c946:	2300      	movs	r3, #0
 800c948:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c94a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c94e:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800cbfc <turn45outL+0x3c8>
 800c952:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c956:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c95a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c95e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c962:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c96a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c96e:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c972:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800cbf0 <turn45outL+0x3bc>
 800c976:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c97a:	68f8      	ldr	r0, [r7, #12]
 800c97c:	eeb0 2a47 	vmov.f32	s4, s14
 800c980:	eef0 1a65 	vmov.f32	s3, s11
 800c984:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800cbf4 <turn45outL+0x3c0>
 800c988:	eef0 0a46 	vmov.f32	s1, s12
 800c98c:	eeb0 0a66 	vmov.f32	s0, s13
 800c990:	f7f6 fb24 	bl	8002fdc <straight_table2>
			highspeed_mode = 0;
 800c994:	4b95      	ldr	r3, [pc, #596]	; (800cbec <turn45outL+0x3b8>)
 800c996:	2200      	movs	r2, #0
 800c998:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c99a:	e11e      	b.n	800cbda <turn45outL+0x3a6>
		}else if (test_mode >= 2) {
 800c99c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d97f      	bls.n	800caa4 <turn45outL+0x270>
		highspeed_mode = 1;
 800c9a4:	4b91      	ldr	r3, [pc, #580]	; (800cbec <turn45outL+0x3b8>)
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800c9b2:	2304      	movs	r3, #4
 800c9b4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c9ba:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c9be:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c9c2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c9c6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c9ca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c9ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c9d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9d6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c9da:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c9de:	eddf 4a84 	vldr	s9, [pc, #528]	; 800cbf0 <turn45outL+0x3bc>
 800c9e2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c9e6:	68f8      	ldr	r0, [r7, #12]
 800c9e8:	eeb0 2a47 	vmov.f32	s4, s14
 800c9ec:	eef0 1a45 	vmov.f32	s3, s10
 800c9f0:	eeb0 1a65 	vmov.f32	s2, s11
 800c9f4:	eef0 0a46 	vmov.f32	s1, s12
 800c9f8:	eeb0 0a66 	vmov.f32	s0, s13
 800c9fc:	f7f6 faee 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ca00:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d10c      	bne.n	800ca22 <turn45outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800ca08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca0c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ca10:	eeb0 1a47 	vmov.f32	s2, s14
 800ca14:	eddf 0a76 	vldr	s1, [pc, #472]	; 800cbf0 <turn45outL+0x3bc>
 800ca18:	eeb0 0a67 	vmov.f32	s0, s15
 800ca1c:	f7f7 fa54 	bl	8003ec8 <mollifier_slalom_table>
 800ca20:	e013      	b.n	800ca4a <turn45outL+0x216>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ca22:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca26:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ca2a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ca2e:	eef0 2a66 	vmov.f32	s5, s13
 800ca32:	eeb0 2a47 	vmov.f32	s4, s14
 800ca36:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800cbf4 <turn45outL+0x3c0>
 800ca3a:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800cbf4 <turn45outL+0x3c0>
 800ca3e:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800cbf0 <turn45outL+0x3bc>
 800ca42:	eeb0 0a67 	vmov.f32	s0, s15
 800ca46:	f7f7 f8ef 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ca52:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ca56:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800cbfc <turn45outL+0x3c8>
 800ca5a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ca5e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ca62:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ca66:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca6a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca72:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ca76:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ca7a:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800cbf0 <turn45outL+0x3bc>
 800ca7e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ca82:	68f8      	ldr	r0, [r7, #12]
 800ca84:	eeb0 2a47 	vmov.f32	s4, s14
 800ca88:	eef0 1a65 	vmov.f32	s3, s11
 800ca8c:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800cbf4 <turn45outL+0x3c0>
 800ca90:	eef0 0a46 	vmov.f32	s1, s12
 800ca94:	eeb0 0a66 	vmov.f32	s0, s13
 800ca98:	f7f6 faa0 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800ca9c:	4b53      	ldr	r3, [pc, #332]	; (800cbec <turn45outL+0x3b8>)
 800ca9e:	2200      	movs	r2, #0
 800caa0:	701a      	strb	r2, [r3, #0]
}
 800caa2:	e09a      	b.n	800cbda <turn45outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800caa4:	2300      	movs	r3, #0
 800caa6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800caa8:	2300      	movs	r3, #0
 800caaa:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800caac:	2304      	movs	r3, #4
 800caae:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cab0:	2300      	movs	r3, #0
 800cab2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cab4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cab8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cabc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cac0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cac4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cac8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cacc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cad0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cad4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cad8:	eddf 4a45 	vldr	s9, [pc, #276]	; 800cbf0 <turn45outL+0x3bc>
 800cadc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cae0:	68f8      	ldr	r0, [r7, #12]
 800cae2:	eeb0 2a47 	vmov.f32	s4, s14
 800cae6:	eef0 1a45 	vmov.f32	s3, s10
 800caea:	eeb0 1a65 	vmov.f32	s2, s11
 800caee:	eef0 0a46 	vmov.f32	s1, s12
 800caf2:	eeb0 0a66 	vmov.f32	s0, s13
 800caf6:	f7f6 fa71 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800cafa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d10c      	bne.n	800cb1c <turn45outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800cb02:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb06:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cb0a:	eeb0 1a47 	vmov.f32	s2, s14
 800cb0e:	eddf 0a38 	vldr	s1, [pc, #224]	; 800cbf0 <turn45outL+0x3bc>
 800cb12:	eeb0 0a67 	vmov.f32	s0, s15
 800cb16:	f7f7 f9d7 	bl	8003ec8 <mollifier_slalom_table>
 800cb1a:	e013      	b.n	800cb44 <turn45outL+0x310>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cb1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb20:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cb24:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cb28:	eef0 2a66 	vmov.f32	s5, s13
 800cb2c:	eeb0 2a47 	vmov.f32	s4, s14
 800cb30:	eddf 1a30 	vldr	s3, [pc, #192]	; 800cbf4 <turn45outL+0x3c0>
 800cb34:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800cbf4 <turn45outL+0x3c0>
 800cb38:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800cbf0 <turn45outL+0x3bc>
 800cb3c:	eeb0 0a67 	vmov.f32	s0, s15
 800cb40:	f7f7 f872 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cb44:	2301      	movs	r3, #1
 800cb46:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cb4c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cb50:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cb54:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb58:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb60:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cb68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb6c:	eef0 7ae7 	vabs.f32	s15, s15
 800cb70:	ee17 0a90 	vmov	r0, s15
 800cb74:	f7f3 fd10 	bl	8000598 <__aeabi_f2d>
 800cb78:	f04f 0200 	mov.w	r2, #0
 800cb7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb80:	f7f3 fe8c 	bl	800089c <__aeabi_ddiv>
 800cb84:	4602      	mov	r2, r0
 800cb86:	460b      	mov	r3, r1
 800cb88:	4614      	mov	r4, r2
 800cb8a:	461d      	mov	r5, r3
 800cb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7f3 fd02 	bl	8000598 <__aeabi_f2d>
 800cb94:	4602      	mov	r2, r0
 800cb96:	460b      	mov	r3, r1
 800cb98:	4620      	mov	r0, r4
 800cb9a:	4629      	mov	r1, r5
 800cb9c:	f7f3 fe7e 	bl	800089c <__aeabi_ddiv>
 800cba0:	4602      	mov	r2, r0
 800cba2:	460b      	mov	r3, r1
 800cba4:	4610      	mov	r0, r2
 800cba6:	4619      	mov	r1, r3
 800cba8:	f04f 0200 	mov.w	r2, #0
 800cbac:	4b14      	ldr	r3, [pc, #80]	; (800cc00 <turn45outL+0x3cc>)
 800cbae:	f7f3 fb95 	bl	80002dc <__adddf3>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cbb6:	4610      	mov	r0, r2
 800cbb8:	4619      	mov	r1, r3
 800cbba:	f7f4 f81d 	bl	8000bf8 <__aeabi_d2f>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	68f8      	ldr	r0, [r7, #12]
 800cbc2:	ee02 3a10 	vmov	s4, r3
 800cbc6:	edd7 1a01 	vldr	s3, [r7, #4]
 800cbca:	ed97 1a01 	vldr	s2, [r7, #4]
 800cbce:	eef0 0a68 	vmov.f32	s1, s17
 800cbd2:	eeb0 0a48 	vmov.f32	s0, s16
 800cbd6:	f7f6 fa01 	bl	8002fdc <straight_table2>
}
 800cbda:	bf00      	nop
 800cbdc:	3710      	adds	r7, #16
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	ecbd 8b02 	vpop	{d8}
 800cbe4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cbe8:	b004      	add	sp, #16
 800cbea:	4770      	bx	lr
 800cbec:	20000808 	.word	0x20000808
 800cbf0:	42340000 	.word	0x42340000
 800cbf4:	00000000 	.word	0x00000000
 800cbf8:	42c4477b 	.word	0x42c4477b
 800cbfc:	42b40000 	.word	0x42b40000
 800cc00:	408f4000 	.word	0x408f4000

0800cc04 <turn135outR>:



void turn135outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800cc04:	b084      	sub	sp, #16
 800cc06:	b5b0      	push	{r4, r5, r7, lr}
 800cc08:	ed2d 8b02 	vpush	{d8}
 800cc0c:	b084      	sub	sp, #16
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800cc14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cc18:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800cc1c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	f040 80a5 	bne.w	800cd70 <turn135outR+0x16c>
			highspeed_mode = 1;
 800cc26:	4be9      	ldr	r3, [pc, #932]	; (800cfcc <turn135outR+0x3c8>)
 800cc28:	2201      	movs	r2, #1
 800cc2a:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800cc30:	2300      	movs	r3, #0
 800cc32:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800cc34:	2300      	movs	r3, #0
 800cc36:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cc3c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cc40:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cc44:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc48:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc50:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cc54:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cc58:	eddf 5add 	vldr	s11, [pc, #884]	; 800cfd0 <turn135outR+0x3cc>
 800cc5c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cc60:	68f8      	ldr	r0, [r7, #12]
 800cc62:	eeb0 2a47 	vmov.f32	s4, s14
 800cc66:	eef0 1a46 	vmov.f32	s3, s12
 800cc6a:	eeb0 1a66 	vmov.f32	s2, s13
 800cc6e:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800cfd4 <turn135outR+0x3d0>
 800cc72:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800cfd8 <turn135outR+0x3d4>
 800cc76:	f7f6 f9b1 	bl	8002fdc <straight_table2>
			wallmode.WallControlMode=0;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800cc7e:	2303      	movs	r3, #3
 800cc80:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cc82:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cc86:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cc8a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cc8e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cc92:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc9e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cca2:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cca6:	eddf 4aca 	vldr	s9, [pc, #808]	; 800cfd0 <turn135outR+0x3cc>
 800ccaa:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ccae:	68f8      	ldr	r0, [r7, #12]
 800ccb0:	eeb0 2a47 	vmov.f32	s4, s14
 800ccb4:	eef0 1a45 	vmov.f32	s3, s10
 800ccb8:	eeb0 1a65 	vmov.f32	s2, s11
 800ccbc:	eef0 0a46 	vmov.f32	s1, s12
 800ccc0:	eeb0 0a66 	vmov.f32	s0, s13
 800ccc4:	f7f6 f98a 	bl	8002fdc <straight_table2>
			if(mollifier_mode == ON){
 800ccc8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	d10c      	bne.n	800ccea <turn135outR+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800ccd0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccd4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ccd8:	eeb0 1a47 	vmov.f32	s2, s14
 800ccdc:	eddf 0abf 	vldr	s1, [pc, #764]	; 800cfdc <turn135outR+0x3d8>
 800cce0:	eeb0 0a67 	vmov.f32	s0, s15
 800cce4:	f7f7 f8f0 	bl	8003ec8 <mollifier_slalom_table>
 800cce8:	e015      	b.n	800cd16 <turn135outR+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ccea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ccee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ccf2:	eef1 7a67 	vneg.f32	s15, s15
 800ccf6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ccfa:	eef0 2a66 	vmov.f32	s5, s13
 800ccfe:	eeb0 2a67 	vmov.f32	s4, s15
 800cd02:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800cfd4 <turn135outR+0x3d0>
 800cd06:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800cfd4 <turn135outR+0x3d0>
 800cd0a:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800cfdc <turn135outR+0x3d8>
 800cd0e:	eeb0 0a47 	vmov.f32	s0, s14
 800cd12:	f7f6 ff89 	bl	8003c28 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800cd16:	2300      	movs	r3, #0
 800cd18:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cd1e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cd22:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800cfe0 <turn135outR+0x3dc>
 800cd26:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cd2a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cd2e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cd32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd36:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd3e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cd42:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cd46:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800cfd0 <turn135outR+0x3cc>
 800cd4a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cd4e:	68f8      	ldr	r0, [r7, #12]
 800cd50:	eeb0 2a47 	vmov.f32	s4, s14
 800cd54:	eef0 1a65 	vmov.f32	s3, s11
 800cd58:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800cfd4 <turn135outR+0x3d0>
 800cd5c:	eef0 0a46 	vmov.f32	s1, s12
 800cd60:	eeb0 0a66 	vmov.f32	s0, s13
 800cd64:	f7f6 f93a 	bl	8002fdc <straight_table2>
			highspeed_mode = 0;
 800cd68:	4b98      	ldr	r3, [pc, #608]	; (800cfcc <turn135outR+0x3c8>)
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800cd6e:	e123      	b.n	800cfb8 <turn135outR+0x3b4>
		}else if (test_mode >= 2) {
 800cd70:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	f240 8082 	bls.w	800ce7e <turn135outR+0x27a>
		highspeed_mode = 1;
 800cd7a:	4b94      	ldr	r3, [pc, #592]	; (800cfcc <turn135outR+0x3c8>)
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cd80:	2300      	movs	r3, #0
 800cd82:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cd84:	2300      	movs	r3, #0
 800cd86:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800cd88:	2303      	movs	r3, #3
 800cd8a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cd90:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cd94:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cd98:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cd9c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cda0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cda4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cda8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdac:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cdb0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cdb4:	eddf 4a86 	vldr	s9, [pc, #536]	; 800cfd0 <turn135outR+0x3cc>
 800cdb8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cdbc:	68f8      	ldr	r0, [r7, #12]
 800cdbe:	eeb0 2a47 	vmov.f32	s4, s14
 800cdc2:	eef0 1a45 	vmov.f32	s3, s10
 800cdc6:	eeb0 1a65 	vmov.f32	s2, s11
 800cdca:	eef0 0a46 	vmov.f32	s1, s12
 800cdce:	eeb0 0a66 	vmov.f32	s0, s13
 800cdd2:	f7f6 f903 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800cdd6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d10c      	bne.n	800cdf8 <turn135outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cdde:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cde2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cde6:	eeb0 1a47 	vmov.f32	s2, s14
 800cdea:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800cfdc <turn135outR+0x3d8>
 800cdee:	eeb0 0a67 	vmov.f32	s0, s15
 800cdf2:	f7f7 f869 	bl	8003ec8 <mollifier_slalom_table>
 800cdf6:	e015      	b.n	800ce24 <turn135outR+0x220>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cdf8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cdfc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ce00:	eef1 7a67 	vneg.f32	s15, s15
 800ce04:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ce08:	eef0 2a66 	vmov.f32	s5, s13
 800ce0c:	eeb0 2a67 	vmov.f32	s4, s15
 800ce10:	eddf 1a70 	vldr	s3, [pc, #448]	; 800cfd4 <turn135outR+0x3d0>
 800ce14:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800cfd4 <turn135outR+0x3d0>
 800ce18:	eddf 0a70 	vldr	s1, [pc, #448]	; 800cfdc <turn135outR+0x3d8>
 800ce1c:	eeb0 0a47 	vmov.f32	s0, s14
 800ce20:	f7f6 ff02 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800ce24:	2300      	movs	r3, #0
 800ce26:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ce2c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ce30:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800cfe0 <turn135outR+0x3dc>
 800ce34:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ce38:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ce3c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ce40:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce48:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce4c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ce50:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ce54:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800cfd0 <turn135outR+0x3cc>
 800ce58:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ce5c:	68f8      	ldr	r0, [r7, #12]
 800ce5e:	eeb0 2a47 	vmov.f32	s4, s14
 800ce62:	eef0 1a65 	vmov.f32	s3, s11
 800ce66:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800cfd4 <turn135outR+0x3d0>
 800ce6a:	eef0 0a46 	vmov.f32	s1, s12
 800ce6e:	eeb0 0a66 	vmov.f32	s0, s13
 800ce72:	f7f6 f8b3 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800ce76:	4b55      	ldr	r3, [pc, #340]	; (800cfcc <turn135outR+0x3c8>)
 800ce78:	2200      	movs	r2, #0
 800ce7a:	701a      	strb	r2, [r3, #0]
}
 800ce7c:	e09c      	b.n	800cfb8 <turn135outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ce82:	2300      	movs	r3, #0
 800ce84:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800ce86:	2303      	movs	r3, #3
 800ce88:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ce8e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ce92:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ce96:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ce9a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ce9e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cea2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cea6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ceaa:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ceae:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ceb2:	eddf 4a47 	vldr	s9, [pc, #284]	; 800cfd0 <turn135outR+0x3cc>
 800ceb6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ceba:	68f8      	ldr	r0, [r7, #12]
 800cebc:	eeb0 2a47 	vmov.f32	s4, s14
 800cec0:	eef0 1a45 	vmov.f32	s3, s10
 800cec4:	eeb0 1a65 	vmov.f32	s2, s11
 800cec8:	eef0 0a46 	vmov.f32	s1, s12
 800cecc:	eeb0 0a66 	vmov.f32	s0, s13
 800ced0:	f7f6 f884 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ced4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d10c      	bne.n	800cef6 <turn135outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cedc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cee0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cee4:	eeb0 1a47 	vmov.f32	s2, s14
 800cee8:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800cfdc <turn135outR+0x3d8>
 800ceec:	eeb0 0a67 	vmov.f32	s0, s15
 800cef0:	f7f6 ffea 	bl	8003ec8 <mollifier_slalom_table>
 800cef4:	e015      	b.n	800cf22 <turn135outR+0x31e>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cef6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cefa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cefe:	eef1 7a67 	vneg.f32	s15, s15
 800cf02:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cf06:	eef0 2a66 	vmov.f32	s5, s13
 800cf0a:	eeb0 2a67 	vmov.f32	s4, s15
 800cf0e:	eddf 1a31 	vldr	s3, [pc, #196]	; 800cfd4 <turn135outR+0x3d0>
 800cf12:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800cfd4 <turn135outR+0x3d0>
 800cf16:	eddf 0a31 	vldr	s1, [pc, #196]	; 800cfdc <turn135outR+0x3d8>
 800cf1a:	eeb0 0a47 	vmov.f32	s0, s14
 800cf1e:	f7f6 fe83 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cf22:	2301      	movs	r3, #1
 800cf24:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cf26:	2300      	movs	r3, #0
 800cf28:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cf2a:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cf2e:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cf32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf36:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf3e:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf42:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cf46:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf4a:	eef0 7ae7 	vabs.f32	s15, s15
 800cf4e:	ee17 0a90 	vmov	r0, s15
 800cf52:	f7f3 fb21 	bl	8000598 <__aeabi_f2d>
 800cf56:	f04f 0200 	mov.w	r2, #0
 800cf5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf5e:	f7f3 fc9d 	bl	800089c <__aeabi_ddiv>
 800cf62:	4602      	mov	r2, r0
 800cf64:	460b      	mov	r3, r1
 800cf66:	4614      	mov	r4, r2
 800cf68:	461d      	mov	r5, r3
 800cf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7f3 fb13 	bl	8000598 <__aeabi_f2d>
 800cf72:	4602      	mov	r2, r0
 800cf74:	460b      	mov	r3, r1
 800cf76:	4620      	mov	r0, r4
 800cf78:	4629      	mov	r1, r5
 800cf7a:	f7f3 fc8f 	bl	800089c <__aeabi_ddiv>
 800cf7e:	4602      	mov	r2, r0
 800cf80:	460b      	mov	r3, r1
 800cf82:	4610      	mov	r0, r2
 800cf84:	4619      	mov	r1, r3
 800cf86:	f04f 0200 	mov.w	r2, #0
 800cf8a:	4b16      	ldr	r3, [pc, #88]	; (800cfe4 <turn135outR+0x3e0>)
 800cf8c:	f7f3 f9a6 	bl	80002dc <__adddf3>
 800cf90:	4602      	mov	r2, r0
 800cf92:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cf94:	4610      	mov	r0, r2
 800cf96:	4619      	mov	r1, r3
 800cf98:	f7f3 fe2e 	bl	8000bf8 <__aeabi_d2f>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	68f8      	ldr	r0, [r7, #12]
 800cfa0:	ee02 3a10 	vmov	s4, r3
 800cfa4:	edd7 1a01 	vldr	s3, [r7, #4]
 800cfa8:	ed97 1a01 	vldr	s2, [r7, #4]
 800cfac:	eef0 0a68 	vmov.f32	s1, s17
 800cfb0:	eeb0 0a48 	vmov.f32	s0, s16
 800cfb4:	f7f6 f812 	bl	8002fdc <straight_table2>
}
 800cfb8:	bf00      	nop
 800cfba:	3710      	adds	r7, #16
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	ecbd 8b02 	vpop	{d8}
 800cfc2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cfc6:	b004      	add	sp, #16
 800cfc8:	4770      	bx	lr
 800cfca:	bf00      	nop
 800cfcc:	20000808 	.word	0x20000808
 800cfd0:	42340000 	.word	0x42340000
 800cfd4:	00000000 	.word	0x00000000
 800cfd8:	42c4477b 	.word	0x42c4477b
 800cfdc:	c3070000 	.word	0xc3070000
 800cfe0:	42b40000 	.word	0x42b40000
 800cfe4:	408f4000 	.word	0x408f4000

0800cfe8 <turn135outL>:


void turn135outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800cfe8:	b084      	sub	sp, #16
 800cfea:	b5b0      	push	{r4, r5, r7, lr}
 800cfec:	ed2d 8b02 	vpush	{d8}
 800cff0:	b084      	sub	sp, #16
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800cff8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cffc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d000:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d004:	2b01      	cmp	r3, #1
 800d006:	f040 80a3 	bne.w	800d150 <turn135outL+0x168>
		highspeed_mode = 1;
 800d00a:	4be5      	ldr	r3, [pc, #916]	; (800d3a0 <turn135outL+0x3b8>)
 800d00c:	2201      	movs	r2, #1
 800d00e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d010:	2300      	movs	r3, #0
 800d012:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d014:	2300      	movs	r3, #0
 800d016:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800d018:	2300      	movs	r3, #0
 800d01a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d01c:	2300      	movs	r3, #0
 800d01e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d020:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d024:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d028:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d02c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d030:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d034:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d038:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d03c:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800d3a4 <turn135outL+0x3bc>
 800d040:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d044:	68f8      	ldr	r0, [r7, #12]
 800d046:	eeb0 2a47 	vmov.f32	s4, s14
 800d04a:	eef0 1a46 	vmov.f32	s3, s12
 800d04e:	eeb0 1a66 	vmov.f32	s2, s13
 800d052:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800d3a8 <turn135outL+0x3c0>
 800d056:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800d3ac <turn135outL+0x3c4>
 800d05a:	f7f5 ffbf 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800d05e:	2300      	movs	r3, #0
 800d060:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=4;
 800d062:	2304      	movs	r3, #4
 800d064:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d066:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d06a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d06e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d072:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d076:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d07a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d07e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d082:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d086:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d08a:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800d3a4 <turn135outL+0x3bc>
 800d08e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d092:	68f8      	ldr	r0, [r7, #12]
 800d094:	eeb0 2a47 	vmov.f32	s4, s14
 800d098:	eef0 1a45 	vmov.f32	s3, s10
 800d09c:	eeb0 1a65 	vmov.f32	s2, s11
 800d0a0:	eef0 0a46 	vmov.f32	s1, s12
 800d0a4:	eeb0 0a66 	vmov.f32	s0, s13
 800d0a8:	f7f5 ff98 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d0ac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d10c      	bne.n	800d0ce <turn135outL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d0b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0b8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d0bc:	eeb0 1a47 	vmov.f32	s2, s14
 800d0c0:	eddf 0abb 	vldr	s1, [pc, #748]	; 800d3b0 <turn135outL+0x3c8>
 800d0c4:	eeb0 0a67 	vmov.f32	s0, s15
 800d0c8:	f7f6 fefe 	bl	8003ec8 <mollifier_slalom_table>
 800d0cc:	e013      	b.n	800d0f6 <turn135outL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d0ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0d2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d0d6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d0da:	eef0 2a66 	vmov.f32	s5, s13
 800d0de:	eeb0 2a47 	vmov.f32	s4, s14
 800d0e2:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800d3a8 <turn135outL+0x3c0>
 800d0e6:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800d3a8 <turn135outL+0x3c0>
 800d0ea:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800d3b0 <turn135outL+0x3c8>
 800d0ee:	eeb0 0a67 	vmov.f32	s0, s15
 800d0f2:	f7f6 fd99 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d0fe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d102:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800d3b4 <turn135outL+0x3cc>
 800d106:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d10a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d10e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d112:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d116:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d11a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d11e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d122:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d126:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800d3a4 <turn135outL+0x3bc>
 800d12a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	eeb0 2a47 	vmov.f32	s4, s14
 800d134:	eef0 1a65 	vmov.f32	s3, s11
 800d138:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800d3a8 <turn135outL+0x3c0>
 800d13c:	eef0 0a46 	vmov.f32	s1, s12
 800d140:	eeb0 0a66 	vmov.f32	s0, s13
 800d144:	f7f5 ff4a 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800d148:	4b95      	ldr	r3, [pc, #596]	; (800d3a0 <turn135outL+0x3b8>)
 800d14a:	2200      	movs	r2, #0
 800d14c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d14e:	e11e      	b.n	800d38e <turn135outL+0x3a6>
	}else if (test_mode >= 2) {
 800d150:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d154:	2b01      	cmp	r3, #1
 800d156:	d97f      	bls.n	800d258 <turn135outL+0x270>
		highspeed_mode = 1;
 800d158:	4b91      	ldr	r3, [pc, #580]	; (800d3a0 <turn135outL+0x3b8>)
 800d15a:	2201      	movs	r2, #1
 800d15c:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d15e:	2300      	movs	r3, #0
 800d160:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d162:	2300      	movs	r3, #0
 800d164:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d166:	2304      	movs	r3, #4
 800d168:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d16a:	2300      	movs	r3, #0
 800d16c:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d16e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d172:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d176:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d17a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d17e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d182:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d186:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d18a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d18e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d192:	eddf 4a84 	vldr	s9, [pc, #528]	; 800d3a4 <turn135outL+0x3bc>
 800d196:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d19a:	68f8      	ldr	r0, [r7, #12]
 800d19c:	eeb0 2a47 	vmov.f32	s4, s14
 800d1a0:	eef0 1a45 	vmov.f32	s3, s10
 800d1a4:	eeb0 1a65 	vmov.f32	s2, s11
 800d1a8:	eef0 0a46 	vmov.f32	s1, s12
 800d1ac:	eeb0 0a66 	vmov.f32	s0, s13
 800d1b0:	f7f5 ff14 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d1b4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d10c      	bne.n	800d1d6 <turn135outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d1bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1c0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d1c4:	eeb0 1a47 	vmov.f32	s2, s14
 800d1c8:	eddf 0a79 	vldr	s1, [pc, #484]	; 800d3b0 <turn135outL+0x3c8>
 800d1cc:	eeb0 0a67 	vmov.f32	s0, s15
 800d1d0:	f7f6 fe7a 	bl	8003ec8 <mollifier_slalom_table>
 800d1d4:	e013      	b.n	800d1fe <turn135outL+0x216>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d1d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1da:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d1de:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d1e2:	eef0 2a66 	vmov.f32	s5, s13
 800d1e6:	eeb0 2a47 	vmov.f32	s4, s14
 800d1ea:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800d3a8 <turn135outL+0x3c0>
 800d1ee:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800d3a8 <turn135outL+0x3c0>
 800d1f2:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800d3b0 <turn135outL+0x3c8>
 800d1f6:	eeb0 0a67 	vmov.f32	s0, s15
 800d1fa:	f7f6 fd15 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800d1fe:	2300      	movs	r3, #0
 800d200:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d202:	2300      	movs	r3, #0
 800d204:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d206:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d20a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800d3b4 <turn135outL+0x3cc>
 800d20e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d212:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d216:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d21a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d21e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d222:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d226:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d22a:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d22e:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800d3a4 <turn135outL+0x3bc>
 800d232:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	eeb0 2a47 	vmov.f32	s4, s14
 800d23c:	eef0 1a65 	vmov.f32	s3, s11
 800d240:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800d3a8 <turn135outL+0x3c0>
 800d244:	eef0 0a46 	vmov.f32	s1, s12
 800d248:	eeb0 0a66 	vmov.f32	s0, s13
 800d24c:	f7f5 fec6 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800d250:	4b53      	ldr	r3, [pc, #332]	; (800d3a0 <turn135outL+0x3b8>)
 800d252:	2200      	movs	r2, #0
 800d254:	701a      	strb	r2, [r3, #0]
}
 800d256:	e09a      	b.n	800d38e <turn135outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d258:	2300      	movs	r3, #0
 800d25a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d25c:	2300      	movs	r3, #0
 800d25e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d260:	2304      	movs	r3, #4
 800d262:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d264:	2300      	movs	r3, #0
 800d266:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d268:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d26c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d270:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d274:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d278:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d27c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d280:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d284:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d288:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d28c:	eddf 4a45 	vldr	s9, [pc, #276]	; 800d3a4 <turn135outL+0x3bc>
 800d290:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d294:	68f8      	ldr	r0, [r7, #12]
 800d296:	eeb0 2a47 	vmov.f32	s4, s14
 800d29a:	eef0 1a45 	vmov.f32	s3, s10
 800d29e:	eeb0 1a65 	vmov.f32	s2, s11
 800d2a2:	eef0 0a46 	vmov.f32	s1, s12
 800d2a6:	eeb0 0a66 	vmov.f32	s0, s13
 800d2aa:	f7f5 fe97 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d2ae:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d10c      	bne.n	800d2d0 <turn135outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d2b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2ba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d2be:	eeb0 1a47 	vmov.f32	s2, s14
 800d2c2:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800d3b0 <turn135outL+0x3c8>
 800d2c6:	eeb0 0a67 	vmov.f32	s0, s15
 800d2ca:	f7f6 fdfd 	bl	8003ec8 <mollifier_slalom_table>
 800d2ce:	e013      	b.n	800d2f8 <turn135outL+0x310>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d2d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2d4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d2d8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d2dc:	eef0 2a66 	vmov.f32	s5, s13
 800d2e0:	eeb0 2a47 	vmov.f32	s4, s14
 800d2e4:	eddf 1a30 	vldr	s3, [pc, #192]	; 800d3a8 <turn135outL+0x3c0>
 800d2e8:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800d3a8 <turn135outL+0x3c0>
 800d2ec:	eddf 0a30 	vldr	s1, [pc, #192]	; 800d3b0 <turn135outL+0x3c8>
 800d2f0:	eeb0 0a67 	vmov.f32	s0, s15
 800d2f4:	f7f6 fc98 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d300:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d304:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d308:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d30c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d310:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d314:	edd7 7a01 	vldr	s15, [r7, #4]
 800d318:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d31c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d320:	eef0 7ae7 	vabs.f32	s15, s15
 800d324:	ee17 0a90 	vmov	r0, s15
 800d328:	f7f3 f936 	bl	8000598 <__aeabi_f2d>
 800d32c:	f04f 0200 	mov.w	r2, #0
 800d330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d334:	f7f3 fab2 	bl	800089c <__aeabi_ddiv>
 800d338:	4602      	mov	r2, r0
 800d33a:	460b      	mov	r3, r1
 800d33c:	4614      	mov	r4, r2
 800d33e:	461d      	mov	r5, r3
 800d340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d342:	4618      	mov	r0, r3
 800d344:	f7f3 f928 	bl	8000598 <__aeabi_f2d>
 800d348:	4602      	mov	r2, r0
 800d34a:	460b      	mov	r3, r1
 800d34c:	4620      	mov	r0, r4
 800d34e:	4629      	mov	r1, r5
 800d350:	f7f3 faa4 	bl	800089c <__aeabi_ddiv>
 800d354:	4602      	mov	r2, r0
 800d356:	460b      	mov	r3, r1
 800d358:	4610      	mov	r0, r2
 800d35a:	4619      	mov	r1, r3
 800d35c:	f04f 0200 	mov.w	r2, #0
 800d360:	4b15      	ldr	r3, [pc, #84]	; (800d3b8 <turn135outL+0x3d0>)
 800d362:	f7f2 ffbb 	bl	80002dc <__adddf3>
 800d366:	4602      	mov	r2, r0
 800d368:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d36a:	4610      	mov	r0, r2
 800d36c:	4619      	mov	r1, r3
 800d36e:	f7f3 fc43 	bl	8000bf8 <__aeabi_d2f>
 800d372:	4603      	mov	r3, r0
 800d374:	68f8      	ldr	r0, [r7, #12]
 800d376:	ee02 3a10 	vmov	s4, r3
 800d37a:	edd7 1a01 	vldr	s3, [r7, #4]
 800d37e:	ed97 1a01 	vldr	s2, [r7, #4]
 800d382:	eef0 0a68 	vmov.f32	s1, s17
 800d386:	eeb0 0a48 	vmov.f32	s0, s16
 800d38a:	f7f5 fe27 	bl	8002fdc <straight_table2>
}
 800d38e:	bf00      	nop
 800d390:	3710      	adds	r7, #16
 800d392:	46bd      	mov	sp, r7
 800d394:	ecbd 8b02 	vpop	{d8}
 800d398:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d39c:	b004      	add	sp, #16
 800d39e:	4770      	bx	lr
 800d3a0:	20000808 	.word	0x20000808
 800d3a4:	42340000 	.word	0x42340000
 800d3a8:	00000000 	.word	0x00000000
 800d3ac:	42c4477b 	.word	0x42c4477b
 800d3b0:	43070000 	.word	0x43070000
 800d3b4:	42b40000 	.word	0x42b40000
 800d3b8:	408f4000 	.word	0x408f4000
 800d3bc:	00000000 	.word	0x00000000

0800d3c0 <V90R>:


void V90R(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d3c0:	b084      	sub	sp, #16
 800d3c2:	b5b0      	push	{r4, r5, r7, lr}
 800d3c4:	ed2d 8b02 	vpush	{d8}
 800d3c8:	b084      	sub	sp, #16
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d3d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d3d4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d3d8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	f040 80af 	bne.w	800d540 <V90R+0x180>
			highspeed_mode = 1;
 800d3e2:	4bc1      	ldr	r3, [pc, #772]	; (800d6e8 <V90R+0x328>)
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d3f8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d3fc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d400:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d404:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d408:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d40c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d410:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d414:	eddf 5ab5 	vldr	s11, [pc, #724]	; 800d6ec <V90R+0x32c>
 800d418:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d41c:	68f8      	ldr	r0, [r7, #12]
 800d41e:	eeb0 2a47 	vmov.f32	s4, s14
 800d422:	eef0 1a46 	vmov.f32	s3, s12
 800d426:	eeb0 1a66 	vmov.f32	s2, s13
 800d42a:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800d6f4 <V90R+0x334>
 800d42e:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800d6f0 <V90R+0x330>
 800d432:	f7f5 fdd3 	bl	8002fdc <straight_table2>
			wallmode.WallControlMode=0;
 800d436:	2300      	movs	r3, #0
 800d438:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800d43a:	2303      	movs	r3, #3
 800d43c:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d43e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d442:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d446:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d44a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d44e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d452:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d45a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d45e:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d462:	eddf 4aa2 	vldr	s9, [pc, #648]	; 800d6ec <V90R+0x32c>
 800d466:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d46a:	68f8      	ldr	r0, [r7, #12]
 800d46c:	eeb0 2a47 	vmov.f32	s4, s14
 800d470:	eef0 1a45 	vmov.f32	s3, s10
 800d474:	eeb0 1a65 	vmov.f32	s2, s11
 800d478:	eef0 0a46 	vmov.f32	s1, s12
 800d47c:	eeb0 0a66 	vmov.f32	s0, s13
 800d480:	f7f5 fdac 	bl	8002fdc <straight_table2>
			if(mollifier_mode == ON){
 800d484:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d10c      	bne.n	800d4a6 <V90R+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d48c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d490:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d494:	eeb0 1a47 	vmov.f32	s2, s14
 800d498:	eddf 0a97 	vldr	s1, [pc, #604]	; 800d6f8 <V90R+0x338>
 800d49c:	eeb0 0a67 	vmov.f32	s0, s15
 800d4a0:	f7f6 fd12 	bl	8003ec8 <mollifier_slalom_table>
 800d4a4:	e015      	b.n	800d4d2 <V90R+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d4a6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d4aa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d4ae:	eef1 7a67 	vneg.f32	s15, s15
 800d4b2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d4b6:	eef0 2a66 	vmov.f32	s5, s13
 800d4ba:	eeb0 2a67 	vmov.f32	s4, s15
 800d4be:	eddf 1a8d 	vldr	s3, [pc, #564]	; 800d6f4 <V90R+0x334>
 800d4c2:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 800d6f4 <V90R+0x334>
 800d4c6:	eddf 0a8c 	vldr	s1, [pc, #560]	; 800d6f8 <V90R+0x338>
 800d4ca:	eeb0 0a47 	vmov.f32	s0, s14
 800d4ce:	f7f6 fbab 	bl	8003c28 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	73fb      	strb	r3, [r7, #15]
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7f3 f85b 	bl	8000598 <__aeabi_f2d>
 800d4e2:	a37f      	add	r3, pc, #508	; (adr r3, 800d6e0 <V90R+0x320>)
 800d4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e8:	f7f2 fef8 	bl	80002dc <__adddf3>
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	460b      	mov	r3, r1
 800d4f0:	4610      	mov	r0, r2
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	f7f3 fb80 	bl	8000bf8 <__aeabi_d2f>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d4fe:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d502:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d506:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d50a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d50e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d512:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d516:	eddf 5a75 	vldr	s11, [pc, #468]	; 800d6ec <V90R+0x32c>
 800d51a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d51e:	68f8      	ldr	r0, [r7, #12]
 800d520:	eeb0 2a47 	vmov.f32	s4, s14
 800d524:	eef0 1a46 	vmov.f32	s3, s12
 800d528:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800d6f4 <V90R+0x334>
 800d52c:	eef0 0a66 	vmov.f32	s1, s13
 800d530:	ee00 3a10 	vmov	s0, r3
 800d534:	f7f5 fd52 	bl	8002fdc <straight_table2>
			highspeed_mode = 0;
 800d538:	4b6b      	ldr	r3, [pc, #428]	; (800d6e8 <V90R+0x328>)
 800d53a:	2200      	movs	r2, #0
 800d53c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d53e:	e13e      	b.n	800d7be <V90R+0x3fe>
		}else if (test_mode >= 2) {
 800d540:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d544:	2b01      	cmp	r3, #1
 800d546:	f240 808c 	bls.w	800d662 <V90R+0x2a2>
		highspeed_mode = 1;
 800d54a:	4b67      	ldr	r3, [pc, #412]	; (800d6e8 <V90R+0x328>)
 800d54c:	2201      	movs	r2, #1
 800d54e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d550:	2300      	movs	r3, #0
 800d552:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d554:	2300      	movs	r3, #0
 800d556:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d558:	2303      	movs	r3, #3
 800d55a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d55c:	2300      	movs	r3, #0
 800d55e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d560:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d564:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d568:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d56c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d570:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d574:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d578:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d57c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d580:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d584:	eddf 4a59 	vldr	s9, [pc, #356]	; 800d6ec <V90R+0x32c>
 800d588:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	eeb0 2a47 	vmov.f32	s4, s14
 800d592:	eef0 1a45 	vmov.f32	s3, s10
 800d596:	eeb0 1a65 	vmov.f32	s2, s11
 800d59a:	eef0 0a46 	vmov.f32	s1, s12
 800d59e:	eeb0 0a66 	vmov.f32	s0, s13
 800d5a2:	f7f5 fd1b 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d5a6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d5aa:	2b01      	cmp	r3, #1
 800d5ac:	d10c      	bne.n	800d5c8 <V90R+0x208>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d5ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d5b2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d5b6:	eeb0 1a47 	vmov.f32	s2, s14
 800d5ba:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800d6f8 <V90R+0x338>
 800d5be:	eeb0 0a67 	vmov.f32	s0, s15
 800d5c2:	f7f6 fc81 	bl	8003ec8 <mollifier_slalom_table>
 800d5c6:	e015      	b.n	800d5f4 <V90R+0x234>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d5c8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d5cc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d5d0:	eef1 7a67 	vneg.f32	s15, s15
 800d5d4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d5d8:	eef0 2a66 	vmov.f32	s5, s13
 800d5dc:	eeb0 2a67 	vmov.f32	s4, s15
 800d5e0:	eddf 1a44 	vldr	s3, [pc, #272]	; 800d6f4 <V90R+0x334>
 800d5e4:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800d6f4 <V90R+0x334>
 800d5e8:	eddf 0a43 	vldr	s1, [pc, #268]	; 800d6f8 <V90R+0x338>
 800d5ec:	eeb0 0a47 	vmov.f32	s0, s14
 800d5f0:	f7f6 fb1a 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7f2 ffca 	bl	8000598 <__aeabi_f2d>
 800d604:	a336      	add	r3, pc, #216	; (adr r3, 800d6e0 <V90R+0x320>)
 800d606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60a:	f7f2 fe67 	bl	80002dc <__adddf3>
 800d60e:	4602      	mov	r2, r0
 800d610:	460b      	mov	r3, r1
 800d612:	4610      	mov	r0, r2
 800d614:	4619      	mov	r1, r3
 800d616:	f7f3 faef 	bl	8000bf8 <__aeabi_d2f>
 800d61a:	4603      	mov	r3, r0
 800d61c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d620:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d624:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d628:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d62c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d630:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d634:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d638:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d6ec <V90R+0x32c>
 800d63c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	eeb0 2a47 	vmov.f32	s4, s14
 800d646:	eef0 1a46 	vmov.f32	s3, s12
 800d64a:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800d6f4 <V90R+0x334>
 800d64e:	eef0 0a66 	vmov.f32	s1, s13
 800d652:	ee00 3a10 	vmov	s0, r3
 800d656:	f7f5 fcc1 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800d65a:	4b23      	ldr	r3, [pc, #140]	; (800d6e8 <V90R+0x328>)
 800d65c:	2200      	movs	r2, #0
 800d65e:	701a      	strb	r2, [r3, #0]
}
 800d660:	e0ad      	b.n	800d7be <V90R+0x3fe>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d662:	2300      	movs	r3, #0
 800d664:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d666:	2300      	movs	r3, #0
 800d668:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d66a:	2303      	movs	r3, #3
 800d66c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d66e:	2300      	movs	r3, #0
 800d670:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d672:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d676:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d67a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d67e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d682:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d686:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d68a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d68e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d692:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d696:	eddf 4a15 	vldr	s9, [pc, #84]	; 800d6ec <V90R+0x32c>
 800d69a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d69e:	68f8      	ldr	r0, [r7, #12]
 800d6a0:	eeb0 2a47 	vmov.f32	s4, s14
 800d6a4:	eef0 1a45 	vmov.f32	s3, s10
 800d6a8:	eeb0 1a65 	vmov.f32	s2, s11
 800d6ac:	eef0 0a46 	vmov.f32	s1, s12
 800d6b0:	eeb0 0a66 	vmov.f32	s0, s13
 800d6b4:	f7f5 fc92 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d6b8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d11d      	bne.n	800d6fc <V90R+0x33c>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d6c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6c4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d6c8:	eeb0 1a47 	vmov.f32	s2, s14
 800d6cc:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800d6f8 <V90R+0x338>
 800d6d0:	eeb0 0a67 	vmov.f32	s0, s15
 800d6d4:	f7f6 fbf8 	bl	8003ec8 <mollifier_slalom_table>
 800d6d8:	e026      	b.n	800d728 <V90R+0x368>
 800d6da:	bf00      	nop
 800d6dc:	f3af 8000 	nop.w
 800d6e0:	c022ec18 	.word	0xc022ec18
 800d6e4:	405fd1de 	.word	0x405fd1de
 800d6e8:	20000808 	.word	0x20000808
 800d6ec:	42340000 	.word	0x42340000
 800d6f0:	42c4477b 	.word	0x42c4477b
 800d6f4:	00000000 	.word	0x00000000
 800d6f8:	c2b40000 	.word	0xc2b40000
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d6fc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d700:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d704:	eef1 7a67 	vneg.f32	s15, s15
 800d708:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d70c:	eef0 2a66 	vmov.f32	s5, s13
 800d710:	eeb0 2a67 	vmov.f32	s4, s15
 800d714:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800d6f4 <V90R+0x334>
 800d718:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800d6f4 <V90R+0x334>
 800d71c:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800d6f8 <V90R+0x338>
 800d720:	eeb0 0a47 	vmov.f32	s0, s14
 800d724:	f7f6 fa80 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800d728:	2303      	movs	r3, #3
 800d72a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d72c:	2300      	movs	r3, #0
 800d72e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d730:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d734:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d738:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d73c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d740:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d744:	edd7 7a01 	vldr	s15, [r7, #4]
 800d748:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d74c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d750:	eef0 7ae7 	vabs.f32	s15, s15
 800d754:	ee17 0a90 	vmov	r0, s15
 800d758:	f7f2 ff1e 	bl	8000598 <__aeabi_f2d>
 800d75c:	f04f 0200 	mov.w	r2, #0
 800d760:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d764:	f7f3 f89a 	bl	800089c <__aeabi_ddiv>
 800d768:	4602      	mov	r2, r0
 800d76a:	460b      	mov	r3, r1
 800d76c:	4614      	mov	r4, r2
 800d76e:	461d      	mov	r5, r3
 800d770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d772:	4618      	mov	r0, r3
 800d774:	f7f2 ff10 	bl	8000598 <__aeabi_f2d>
 800d778:	4602      	mov	r2, r0
 800d77a:	460b      	mov	r3, r1
 800d77c:	4620      	mov	r0, r4
 800d77e:	4629      	mov	r1, r5
 800d780:	f7f3 f88c 	bl	800089c <__aeabi_ddiv>
 800d784:	4602      	mov	r2, r0
 800d786:	460b      	mov	r3, r1
 800d788:	4610      	mov	r0, r2
 800d78a:	4619      	mov	r1, r3
 800d78c:	f04f 0200 	mov.w	r2, #0
 800d790:	4b0f      	ldr	r3, [pc, #60]	; (800d7d0 <V90R+0x410>)
 800d792:	f7f2 fda3 	bl	80002dc <__adddf3>
 800d796:	4602      	mov	r2, r0
 800d798:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d79a:	4610      	mov	r0, r2
 800d79c:	4619      	mov	r1, r3
 800d79e:	f7f3 fa2b 	bl	8000bf8 <__aeabi_d2f>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	68f8      	ldr	r0, [r7, #12]
 800d7a6:	ee02 3a10 	vmov	s4, r3
 800d7aa:	edd7 1a01 	vldr	s3, [r7, #4]
 800d7ae:	ed97 1a01 	vldr	s2, [r7, #4]
 800d7b2:	eef0 0a68 	vmov.f32	s1, s17
 800d7b6:	eeb0 0a48 	vmov.f32	s0, s16
 800d7ba:	f7f5 fc0f 	bl	8002fdc <straight_table2>
}
 800d7be:	bf00      	nop
 800d7c0:	3710      	adds	r7, #16
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	ecbd 8b02 	vpop	{d8}
 800d7c8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d7cc:	b004      	add	sp, #16
 800d7ce:	4770      	bx	lr
 800d7d0:	408f4000 	.word	0x408f4000
 800d7d4:	00000000 	.word	0x00000000

0800d7d8 <V90L>:

void V90L(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d7d8:	b084      	sub	sp, #16
 800d7da:	b5b0      	push	{r4, r5, r7, lr}
 800d7dc:	ed2d 8b02 	vpush	{d8}
 800d7e0:	b084      	sub	sp, #16
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d7e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d7ec:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d7f0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	f040 80ad 	bne.w	800d954 <V90L+0x17c>
				highspeed_mode = 1;
 800d7fa:	4bbf      	ldr	r3, [pc, #764]	; (800daf8 <V90L+0x320>)
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	701a      	strb	r2, [r3, #0]
				wallmode.WallControlMode=0;
 800d800:	2300      	movs	r3, #0
 800d802:	733b      	strb	r3, [r7, #12]
				wallmode.WallControlStatus=0;
 800d804:	2300      	movs	r3, #0
 800d806:	737b      	strb	r3, [r7, #13]
				wallmode.WallCutMode=0;
 800d808:	2300      	movs	r3, #0
 800d80a:	73fb      	strb	r3, [r7, #15]
				wallmode.calMazeMode=0;
 800d80c:	2300      	movs	r3, #0
 800d80e:	73bb      	strb	r3, [r7, #14]
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d810:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d814:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
							turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d818:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d81c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d820:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d824:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d828:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d82c:	eddf 5ab3 	vldr	s11, [pc, #716]	; 800dafc <V90L+0x324>
 800d830:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d834:	68f8      	ldr	r0, [r7, #12]
 800d836:	eeb0 2a47 	vmov.f32	s4, s14
 800d83a:	eef0 1a46 	vmov.f32	s3, s12
 800d83e:	eeb0 1a66 	vmov.f32	s2, s13
 800d842:	eddf 0ab0 	vldr	s1, [pc, #704]	; 800db04 <V90L+0x32c>
 800d846:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800db00 <V90L+0x328>
 800d84a:	f7f5 fbc7 	bl	8002fdc <straight_table2>
				wallmode.WallControlMode=0;
 800d84e:	2300      	movs	r3, #0
 800d850:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=4;
 800d852:	2304      	movs	r3, #4
 800d854:	73fb      	strb	r3, [r7, #15]
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d856:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d85a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d85e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d862:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d866:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d86a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d86e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d872:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d876:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d87a:	eddf 4aa0 	vldr	s9, [pc, #640]	; 800dafc <V90L+0x324>
 800d87e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d882:	68f8      	ldr	r0, [r7, #12]
 800d884:	eeb0 2a47 	vmov.f32	s4, s14
 800d888:	eef0 1a45 	vmov.f32	s3, s10
 800d88c:	eeb0 1a65 	vmov.f32	s2, s11
 800d890:	eef0 0a46 	vmov.f32	s1, s12
 800d894:	eeb0 0a66 	vmov.f32	s0, s13
 800d898:	f7f5 fba0 	bl	8002fdc <straight_table2>
				if(mollifier_mode == ON){
 800d89c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	d10c      	bne.n	800d8be <V90L+0xe6>
					mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d8a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8a8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d8ac:	eeb0 1a47 	vmov.f32	s2, s14
 800d8b0:	eddf 0a95 	vldr	s1, [pc, #596]	; 800db08 <V90L+0x330>
 800d8b4:	eeb0 0a67 	vmov.f32	s0, s15
 800d8b8:	f7f6 fb06 	bl	8003ec8 <mollifier_slalom_table>
 800d8bc:	e013      	b.n	800d8e6 <V90L+0x10e>
				}else{
					slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d8be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8c2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d8c6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d8ca:	eef0 2a66 	vmov.f32	s5, s13
 800d8ce:	eeb0 2a47 	vmov.f32	s4, s14
 800d8d2:	eddf 1a8c 	vldr	s3, [pc, #560]	; 800db04 <V90L+0x32c>
 800d8d6:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 800db04 <V90L+0x32c>
 800d8da:	eddf 0a8b 	vldr	s1, [pc, #556]	; 800db08 <V90L+0x330>
 800d8de:	eeb0 0a67 	vmov.f32	s0, s15
 800d8e2:	f7f6 f9a1 	bl	8003c28 <slalom_table2>
				}
				wallmode.WallControlMode=0;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=0;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	73fb      	strb	r3, [r7, #15]
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7f2 fe51 	bl	8000598 <__aeabi_f2d>
 800d8f6:	a37e      	add	r3, pc, #504	; (adr r3, 800daf0 <V90L+0x318>)
 800d8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fc:	f7f2 fcee 	bl	80002dc <__adddf3>
 800d900:	4602      	mov	r2, r0
 800d902:	460b      	mov	r3, r1
 800d904:	4610      	mov	r0, r2
 800d906:	4619      	mov	r1, r3
 800d908:	f7f3 f976 	bl	8000bf8 <__aeabi_d2f>
 800d90c:	4603      	mov	r3, r0
 800d90e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d912:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d916:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d91a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d91e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d922:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d926:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d92a:	eddf 5a74 	vldr	s11, [pc, #464]	; 800dafc <V90L+0x324>
 800d92e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d932:	68f8      	ldr	r0, [r7, #12]
 800d934:	eeb0 2a47 	vmov.f32	s4, s14
 800d938:	eef0 1a46 	vmov.f32	s3, s12
 800d93c:	ed9f 1a71 	vldr	s2, [pc, #452]	; 800db04 <V90L+0x32c>
 800d940:	eef0 0a66 	vmov.f32	s1, s13
 800d944:	ee00 3a10 	vmov	s0, r3
 800d948:	f7f5 fb48 	bl	8002fdc <straight_table2>
				highspeed_mode = 0;
 800d94c:	4b6a      	ldr	r3, [pc, #424]	; (800daf8 <V90L+0x320>)
 800d94e:	2200      	movs	r2, #0
 800d950:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d952:	e13a      	b.n	800dbca <V90L+0x3f2>
			}else if (test_mode >= 2) {
 800d954:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d958:	2b01      	cmp	r3, #1
 800d95a:	f240 808a 	bls.w	800da72 <V90L+0x29a>
		highspeed_mode = 1;
 800d95e:	4b66      	ldr	r3, [pc, #408]	; (800daf8 <V90L+0x320>)
 800d960:	2201      	movs	r2, #1
 800d962:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d964:	2300      	movs	r3, #0
 800d966:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d968:	2300      	movs	r3, #0
 800d96a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d96c:	2304      	movs	r3, #4
 800d96e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d970:	2300      	movs	r3, #0
 800d972:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d974:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d978:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d97c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d980:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d984:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d988:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d98c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d990:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d994:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d998:	eddf 4a58 	vldr	s9, [pc, #352]	; 800dafc <V90L+0x324>
 800d99c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	eeb0 2a47 	vmov.f32	s4, s14
 800d9a6:	eef0 1a45 	vmov.f32	s3, s10
 800d9aa:	eeb0 1a65 	vmov.f32	s2, s11
 800d9ae:	eef0 0a46 	vmov.f32	s1, s12
 800d9b2:	eeb0 0a66 	vmov.f32	s0, s13
 800d9b6:	f7f5 fb11 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d9ba:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d10c      	bne.n	800d9dc <V90L+0x204>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d9c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9c6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d9ca:	eeb0 1a47 	vmov.f32	s2, s14
 800d9ce:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800db08 <V90L+0x330>
 800d9d2:	eeb0 0a67 	vmov.f32	s0, s15
 800d9d6:	f7f6 fa77 	bl	8003ec8 <mollifier_slalom_table>
 800d9da:	e013      	b.n	800da04 <V90L+0x22c>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d9dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9e0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d9e4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d9e8:	eef0 2a66 	vmov.f32	s5, s13
 800d9ec:	eeb0 2a47 	vmov.f32	s4, s14
 800d9f0:	eddf 1a44 	vldr	s3, [pc, #272]	; 800db04 <V90L+0x32c>
 800d9f4:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800db04 <V90L+0x32c>
 800d9f8:	eddf 0a43 	vldr	s1, [pc, #268]	; 800db08 <V90L+0x330>
 800d9fc:	eeb0 0a67 	vmov.f32	s0, s15
 800da00:	f7f6 f912 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800da04:	2300      	movs	r3, #0
 800da06:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800da08:	2300      	movs	r3, #0
 800da0a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800da0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da0e:	4618      	mov	r0, r3
 800da10:	f7f2 fdc2 	bl	8000598 <__aeabi_f2d>
 800da14:	a336      	add	r3, pc, #216	; (adr r3, 800daf0 <V90L+0x318>)
 800da16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1a:	f7f2 fc5f 	bl	80002dc <__adddf3>
 800da1e:	4602      	mov	r2, r0
 800da20:	460b      	mov	r3, r1
 800da22:	4610      	mov	r0, r2
 800da24:	4619      	mov	r1, r3
 800da26:	f7f3 f8e7 	bl	8000bf8 <__aeabi_d2f>
 800da2a:	4603      	mov	r3, r0
 800da2c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800da30:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800da34:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800da38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da40:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800da44:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800da48:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800dafc <V90L+0x324>
 800da4c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800da50:	68f8      	ldr	r0, [r7, #12]
 800da52:	eeb0 2a47 	vmov.f32	s4, s14
 800da56:	eef0 1a46 	vmov.f32	s3, s12
 800da5a:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800db04 <V90L+0x32c>
 800da5e:	eef0 0a66 	vmov.f32	s1, s13
 800da62:	ee00 3a10 	vmov	s0, r3
 800da66:	f7f5 fab9 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800da6a:	4b23      	ldr	r3, [pc, #140]	; (800daf8 <V90L+0x320>)
 800da6c:	2200      	movs	r2, #0
 800da6e:	701a      	strb	r2, [r3, #0]
}
 800da70:	e0ab      	b.n	800dbca <V90L+0x3f2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800da72:	2300      	movs	r3, #0
 800da74:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800da76:	2300      	movs	r3, #0
 800da78:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800da7a:	2304      	movs	r3, #4
 800da7c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800da7e:	2300      	movs	r3, #0
 800da80:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800da82:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800da86:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800da8a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800da8e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800da92:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800da96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da9e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800daa2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800daa6:	eddf 4a15 	vldr	s9, [pc, #84]	; 800dafc <V90L+0x324>
 800daaa:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800daae:	68f8      	ldr	r0, [r7, #12]
 800dab0:	eeb0 2a47 	vmov.f32	s4, s14
 800dab4:	eef0 1a45 	vmov.f32	s3, s10
 800dab8:	eeb0 1a65 	vmov.f32	s2, s11
 800dabc:	eef0 0a46 	vmov.f32	s1, s12
 800dac0:	eeb0 0a66 	vmov.f32	s0, s13
 800dac4:	f7f5 fa8a 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800dac8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d11d      	bne.n	800db0c <V90L+0x334>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800dad0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dad4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dad8:	eeb0 1a47 	vmov.f32	s2, s14
 800dadc:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800db08 <V90L+0x330>
 800dae0:	eeb0 0a67 	vmov.f32	s0, s15
 800dae4:	f7f6 f9f0 	bl	8003ec8 <mollifier_slalom_table>
 800dae8:	e024      	b.n	800db34 <V90L+0x35c>
 800daea:	bf00      	nop
 800daec:	f3af 8000 	nop.w
 800daf0:	c022ec18 	.word	0xc022ec18
 800daf4:	405fd1de 	.word	0x405fd1de
 800daf8:	20000808 	.word	0x20000808
 800dafc:	42340000 	.word	0x42340000
 800db00:	42d4477b 	.word	0x42d4477b
 800db04:	00000000 	.word	0x00000000
 800db08:	42b40000 	.word	0x42b40000
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800db0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db10:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800db14:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800db18:	eef0 2a66 	vmov.f32	s5, s13
 800db1c:	eeb0 2a47 	vmov.f32	s4, s14
 800db20:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800db04 <V90L+0x32c>
 800db24:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800db04 <V90L+0x32c>
 800db28:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800db08 <V90L+0x330>
 800db2c:	eeb0 0a67 	vmov.f32	s0, s15
 800db30:	f7f6 f87a 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800db34:	2303      	movs	r3, #3
 800db36:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800db38:	2300      	movs	r3, #0
 800db3a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800db3c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800db40:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800db44:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800db48:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db50:	edd7 7a01 	vldr	s15, [r7, #4]
 800db54:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800db58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db5c:	eef0 7ae7 	vabs.f32	s15, s15
 800db60:	ee17 0a90 	vmov	r0, s15
 800db64:	f7f2 fd18 	bl	8000598 <__aeabi_f2d>
 800db68:	f04f 0200 	mov.w	r2, #0
 800db6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db70:	f7f2 fe94 	bl	800089c <__aeabi_ddiv>
 800db74:	4602      	mov	r2, r0
 800db76:	460b      	mov	r3, r1
 800db78:	4614      	mov	r4, r2
 800db7a:	461d      	mov	r5, r3
 800db7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7e:	4618      	mov	r0, r3
 800db80:	f7f2 fd0a 	bl	8000598 <__aeabi_f2d>
 800db84:	4602      	mov	r2, r0
 800db86:	460b      	mov	r3, r1
 800db88:	4620      	mov	r0, r4
 800db8a:	4629      	mov	r1, r5
 800db8c:	f7f2 fe86 	bl	800089c <__aeabi_ddiv>
 800db90:	4602      	mov	r2, r0
 800db92:	460b      	mov	r3, r1
 800db94:	4610      	mov	r0, r2
 800db96:	4619      	mov	r1, r3
 800db98:	f04f 0200 	mov.w	r2, #0
 800db9c:	4b0f      	ldr	r3, [pc, #60]	; (800dbdc <V90L+0x404>)
 800db9e:	f7f2 fb9d 	bl	80002dc <__adddf3>
 800dba2:	4602      	mov	r2, r0
 800dba4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800dba6:	4610      	mov	r0, r2
 800dba8:	4619      	mov	r1, r3
 800dbaa:	f7f3 f825 	bl	8000bf8 <__aeabi_d2f>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	68f8      	ldr	r0, [r7, #12]
 800dbb2:	ee02 3a10 	vmov	s4, r3
 800dbb6:	edd7 1a01 	vldr	s3, [r7, #4]
 800dbba:	ed97 1a01 	vldr	s2, [r7, #4]
 800dbbe:	eef0 0a68 	vmov.f32	s1, s17
 800dbc2:	eeb0 0a48 	vmov.f32	s0, s16
 800dbc6:	f7f5 fa09 	bl	8002fdc <straight_table2>
}
 800dbca:	bf00      	nop
 800dbcc:	3710      	adds	r7, #16
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	ecbd 8b02 	vpop	{d8}
 800dbd4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800dbd8:	b004      	add	sp, #16
 800dbda:	4770      	bx	lr
 800dbdc:	408f4000 	.word	0x408f4000

0800dbe0 <testturning>:


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode,char funmode,float funduty,char mollifier_mode){
 800dbe0:	b084      	sub	sp, #16
 800dbe2:	b580      	push	{r7, lr}
 800dbe4:	b086      	sub	sp, #24
 800dbe6:	af04      	add	r7, sp, #16
 800dbe8:	f107 0c10 	add.w	ip, r7, #16
 800dbec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800dbf0:	ed87 0a01 	vstr	s0, [r7, #4]
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L
	if(funmode==ON){
 800dbf4:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d116      	bne.n	800dc2a <testturning+0x4a>
		pl_DriveMotor_standby(ON);
 800dbfc:	2001      	movs	r0, #1
 800dbfe:	f7f9 fe57 	bl	80078b0 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dc02:	2003      	movs	r0, #3
 800dc04:	f7f9 fe5e 	bl	80078c4 <pl_L_DriveMotor_mode>
		pl_FunMotor_duty(funduty);
 800dc08:	ed97 0a01 	vldr	s0, [r7, #4]
 800dc0c:	f7f9 feee 	bl	80079ec <pl_FunMotor_duty>
		pl_FunMotor_start();
 800dc10:	f7f9 fed8 	bl	80079c4 <pl_FunMotor_start>
		HAL_Delay(600);
 800dc14:	f44f 7016 	mov.w	r0, #600	; 0x258
 800dc18:	f00b f880 	bl	8018d1c <HAL_Delay>
		reset_gyro();
 800dc1c:	f7f3 fda4 	bl	8001768 <reset_gyro>
		reset_speed();
 800dc20:	f7f3 f9fa 	bl	8001018 <reset_speed>
		clear_Ierror();
 800dc24:	f7f6 fcc4 	bl	80045b0 <clear_Ierror>
 800dc28:	e00b      	b.n	800dc42 <testturning+0x62>

	}else{
		pl_DriveMotor_standby(ON);
 800dc2a:	2001      	movs	r0, #1
 800dc2c:	f7f9 fe40 	bl	80078b0 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dc30:	2003      	movs	r0, #3
 800dc32:	f7f9 fe47 	bl	80078c4 <pl_L_DriveMotor_mode>
		reset_gyro();
 800dc36:	f7f3 fd97 	bl	8001768 <reset_gyro>
		reset_speed();
 800dc3a:	f7f3 f9ed 	bl	8001018 <reset_speed>
		clear_Ierror();
 800dc3e:	f7f6 fcb7 	bl	80045b0 <clear_Ierror>

	}
	record_mode=2;
 800dc42:	4ba8      	ldr	r3, [pc, #672]	; (800dee4 <testturning+0x304>)
 800dc44:	2202      	movs	r2, #2
 800dc46:	701a      	strb	r2, [r3, #0]
//	if(turnmode==0){test_mollifier_slalomR(Howspeed.slalom_R);}
	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode,mollifier_mode,-100);}
 800dc48:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d110      	bne.n	800dc72 <testturning+0x92>
 800dc50:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dc54:	9303      	str	r3, [sp, #12]
 800dc56:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800dc5a:	9302      	str	r3, [sp, #8]
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	9301      	str	r3, [sp, #4]
 800dc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc62:	9300      	str	r3, [sp, #0]
 800dc64:	f107 0318 	add.w	r3, r7, #24
 800dc68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc6a:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800dee8 <testturning+0x308>
 800dc6e:	f7fc f973 	bl	8009f58 <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode,mollifier_mode,-100);}
 800dc72:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	d110      	bne.n	800dc9c <testturning+0xbc>
 800dc7a:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dc7e:	9303      	str	r3, [sp, #12]
 800dc80:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800dc84:	9302      	str	r3, [sp, #8]
 800dc86:	2301      	movs	r3, #1
 800dc88:	9301      	str	r3, [sp, #4]
 800dc8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc8c:	9300      	str	r3, [sp, #0]
 800dc8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dc92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc94:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800dee8 <testturning+0x308>
 800dc98:	f7fc fb44 	bl	800a324 <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON,mollifier_mode,-100);}
 800dc9c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dca0:	2b02      	cmp	r3, #2
 800dca2:	d10d      	bne.n	800dcc0 <testturning+0xe0>
 800dca4:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dca8:	9302      	str	r3, [sp, #8]
 800dcaa:	2301      	movs	r3, #1
 800dcac:	9301      	str	r3, [sp, #4]
 800dcae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcb0:	9300      	str	r3, [sp, #0]
 800dcb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dcb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcb8:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800dee8 <testturning+0x308>
 800dcbc:	f7fc fd14 	bl	800a6e8 <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON,mollifier_mode,-100);}
 800dcc0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dcc4:	2b03      	cmp	r3, #3
 800dcc6:	d10d      	bne.n	800dce4 <testturning+0x104>
 800dcc8:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dccc:	9302      	str	r3, [sp, #8]
 800dcce:	2301      	movs	r3, #1
 800dcd0:	9301      	str	r3, [sp, #4]
 800dcd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dcd4:	9300      	str	r3, [sp, #0]
 800dcd6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800dcda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcdc:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800dee8 <testturning+0x308>
 800dce0:	f7fc fe6c 	bl	800a9bc <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON,mollifier_mode,-100);}
 800dce4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dce8:	2b04      	cmp	r3, #4
 800dcea:	d10d      	bne.n	800dd08 <testturning+0x128>
 800dcec:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dcf0:	9302      	str	r3, [sp, #8]
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	9301      	str	r3, [sp, #4]
 800dcf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dcf8:	9300      	str	r3, [sp, #0]
 800dcfa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800dcfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd00:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800dee8 <testturning+0x308>
 800dd04:	f7fc ffbe 	bl	800ac84 <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON,mollifier_mode,-100);}
 800dd08:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd0c:	2b05      	cmp	r3, #5
 800dd0e:	d10e      	bne.n	800dd2e <testturning+0x14e>
 800dd10:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd14:	9302      	str	r3, [sp, #8]
 800dd16:	2301      	movs	r3, #1
 800dd18:	9301      	str	r3, [sp, #4]
 800dd1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd1e:	9300      	str	r3, [sp, #0]
 800dd20:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800dd24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd26:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800dee8 <testturning+0x308>
 800dd2a:	f7fd f915 	bl	800af58 <turn180L>
	if(turnmode==6){turn45inR(Howspeed.turn45in_R,ON,mollifier_mode,-100);}
 800dd2e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd32:	2b06      	cmp	r3, #6
 800dd34:	d10e      	bne.n	800dd54 <testturning+0x174>
 800dd36:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd3a:	9302      	str	r3, [sp, #8]
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	9301      	str	r3, [sp, #4]
 800dd40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dd44:	9300      	str	r3, [sp, #0]
 800dd46:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800dd4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd4c:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800dee8 <testturning+0x308>
 800dd50:	f7fd fa6a 	bl	800b228 <turn45inR>
	if(turnmode==7){turn45inL(Howspeed.turn45in_L,ON,mollifier_mode,-100);}
 800dd54:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd58:	2b07      	cmp	r3, #7
 800dd5a:	d10e      	bne.n	800dd7a <testturning+0x19a>
 800dd5c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd60:	9302      	str	r3, [sp, #8]
 800dd62:	2301      	movs	r3, #1
 800dd64:	9301      	str	r3, [sp, #4]
 800dd66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd6a:	9300      	str	r3, [sp, #0]
 800dd6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dd70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd72:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800dee8 <testturning+0x308>
 800dd76:	f7fd fc9f 	bl	800b6b8 <turn45inL>
	if(turnmode==8){turn135inR(Howspeed.turn135in_R,ON,mollifier_mode,-100);}
 800dd7a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd7e:	2b08      	cmp	r3, #8
 800dd80:	d10e      	bne.n	800dda0 <testturning+0x1c0>
 800dd82:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd86:	9302      	str	r3, [sp, #8]
 800dd88:	2301      	movs	r3, #1
 800dd8a:	9301      	str	r3, [sp, #4]
 800dd8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dd90:	9300      	str	r3, [sp, #0]
 800dd92:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800dd96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd98:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800dee8 <testturning+0x308>
 800dd9c:	f7fd fecc 	bl	800bb38 <turn135inR>
	if(turnmode==9){turn135inL(Howspeed.turn135in_L,ON,mollifier_mode,-100);}
 800dda0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dda4:	2b09      	cmp	r3, #9
 800dda6:	d10e      	bne.n	800ddc6 <testturning+0x1e6>
 800dda8:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800ddac:	9302      	str	r3, [sp, #8]
 800ddae:	2301      	movs	r3, #1
 800ddb0:	9301      	str	r3, [sp, #4]
 800ddb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddb6:	9300      	str	r3, [sp, #0]
 800ddb8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ddbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ddbe:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800dee8 <testturning+0x308>
 800ddc2:	f7fe f901 	bl	800bfc8 <turn135inL>
	if(turnmode==10){turn45outR(Howspeed.turn45out_R,ON,mollifier_mode,-100);}
 800ddc6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ddca:	2b0a      	cmp	r3, #10
 800ddcc:	d10e      	bne.n	800ddec <testturning+0x20c>
 800ddce:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800ddd2:	9302      	str	r3, [sp, #8]
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	9301      	str	r3, [sp, #4]
 800ddd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800dddc:	9300      	str	r3, [sp, #0]
 800ddde:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800dde2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dde4:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800dee8 <testturning+0x308>
 800dde8:	f7fe fb32 	bl	800c450 <turn45outR>
	if(turnmode==11){turn45outL(Howspeed.turn45out_L,ON,mollifier_mode,-100);}
 800ddec:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ddf0:	2b0b      	cmp	r3, #11
 800ddf2:	d10e      	bne.n	800de12 <testturning+0x232>
 800ddf4:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800ddf8:	9302      	str	r3, [sp, #8]
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	9301      	str	r3, [sp, #4]
 800ddfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800de08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de0a:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800dee8 <testturning+0x308>
 800de0e:	f7fe fd11 	bl	800c834 <turn45outL>
	if(turnmode==12){turn135outR(Howspeed.turn135out_R,ON,mollifier_mode,-100);}
 800de12:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de16:	2b0c      	cmp	r3, #12
 800de18:	d10e      	bne.n	800de38 <testturning+0x258>
 800de1a:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de1e:	9302      	str	r3, [sp, #8]
 800de20:	2301      	movs	r3, #1
 800de22:	9301      	str	r3, [sp, #4]
 800de24:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800de28:	9300      	str	r3, [sp, #0]
 800de2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de30:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800dee8 <testturning+0x308>
 800de34:	f7fe fee6 	bl	800cc04 <turn135outR>
	if(turnmode==13){turn135outL(Howspeed.turn135out_L,ON,mollifier_mode,-100);}
 800de38:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de3c:	2b0d      	cmp	r3, #13
 800de3e:	d10e      	bne.n	800de5e <testturning+0x27e>
 800de40:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de44:	9302      	str	r3, [sp, #8]
 800de46:	2301      	movs	r3, #1
 800de48:	9301      	str	r3, [sp, #4]
 800de4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800de4e:	9300      	str	r3, [sp, #0]
 800de50:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800de54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de56:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800dee8 <testturning+0x308>
 800de5a:	f7ff f8c5 	bl	800cfe8 <turn135outL>
	if(turnmode==14){V90R(Howspeed.V90_R,ON,mollifier_mode,-100);}
 800de5e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de62:	2b0e      	cmp	r3, #14
 800de64:	d10e      	bne.n	800de84 <testturning+0x2a4>
 800de66:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de6a:	9302      	str	r3, [sp, #8]
 800de6c:	2301      	movs	r3, #1
 800de6e:	9301      	str	r3, [sp, #4]
 800de70:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800de74:	9300      	str	r3, [sp, #0]
 800de76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800de7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de7c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800dee8 <testturning+0x308>
 800de80:	f7ff fa9e 	bl	800d3c0 <V90R>
	if(turnmode==15){V90L(Howspeed.V90_L,ON,mollifier_mode,-100);}
 800de84:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de88:	2b0f      	cmp	r3, #15
 800de8a:	d10e      	bne.n	800deaa <testturning+0x2ca>
 800de8c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de90:	9302      	str	r3, [sp, #8]
 800de92:	2301      	movs	r3, #1
 800de94:	9301      	str	r3, [sp, #4]
 800de96:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800de9a:	9300      	str	r3, [sp, #0]
 800de9c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800dea0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dea2:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800dee8 <testturning+0x308>
 800dea6:	f7ff fc97 	bl	800d7d8 <V90L>
//	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,CONNECT);}
//	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,CONNECT);}
//	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,CONNECT);}
//	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,CONNECT);}

	record_mode=0;
 800deaa:	4b0e      	ldr	r3, [pc, #56]	; (800dee4 <testturning+0x304>)
 800deac:	2200      	movs	r2, #0
 800deae:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800deb0:	2003      	movs	r0, #3
 800deb2:	f7f9 fd2f 	bl	8007914 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800deb6:	2003      	movs	r0, #3
 800deb8:	f7f9 fd04 	bl	80078c4 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800debc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dec0:	f7fa f826 	bl	8007f10 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800dec4:	f7f9 fd88 	bl	80079d8 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 800dec8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800decc:	f7fa f820 	bl	8007f10 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800ded0:	2000      	movs	r0, #0
 800ded2:	f7f9 fced 	bl	80078b0 <pl_DriveMotor_standby>

}
 800ded6:	bf00      	nop
 800ded8:	3708      	adds	r7, #8
 800deda:	46bd      	mov	sp, r7
 800dedc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dee0:	b004      	add	sp, #16
 800dee2:	4770      	bx	lr
 800dee4:	2000edc0 	.word	0x2000edc0
 800dee8:	c2c80000 	.word	0xc2c80000

0800deec <update_coordinate>:
//char slant_break;
//拡張左手法***********************************************



void update_coordinate(int *x,int *y,int direction){
 800deec:	b480      	push	{r7}
 800deee:	b085      	sub	sp, #20
 800def0:	af00      	add	r7, sp, #0
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]
// int direction,int *x_coordinate,int *y_coordinate
//	*direction = *direction % 4;
//	if (*direction <= 0) {
//		*direction = *direction+4;
//	}
	switch (direction) {
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	3b01      	subs	r3, #1
 800defc:	2b03      	cmp	r3, #3
 800defe:	d823      	bhi.n	800df48 <update_coordinate+0x5c>
 800df00:	a201      	add	r2, pc, #4	; (adr r2, 800df08 <update_coordinate+0x1c>)
 800df02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df06:	bf00      	nop
 800df08:	0800df19 	.word	0x0800df19
 800df0c:	0800df25 	.word	0x0800df25
 800df10:	0800df31 	.word	0x0800df31
 800df14:	0800df3d 	.word	0x0800df3d
	case 1://北
		*y += 1;
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	1c5a      	adds	r2, r3, #1
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	601a      	str	r2, [r3, #0]
		break;
 800df22:	e011      	b.n	800df48 <update_coordinate+0x5c>
	case 2://東
		*x += 1;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	1c5a      	adds	r2, r3, #1
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	601a      	str	r2, [r3, #0]
		break;
 800df2e:	e00b      	b.n	800df48 <update_coordinate+0x5c>
	case 3://南
		*y -= 1;
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	1e5a      	subs	r2, r3, #1
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	601a      	str	r2, [r3, #0]
		break;
 800df3a:	e005      	b.n	800df48 <update_coordinate+0x5c>
	case 4://西
		*x -= 1;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	1e5a      	subs	r2, r3, #1
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	601a      	str	r2, [r3, #0]
		break;
 800df46:	bf00      	nop
	}



}
 800df48:	bf00      	nop
 800df4a:	3714      	adds	r7, #20
 800df4c:	46bd      	mov	sp, r7
 800df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df52:	4770      	bx	lr

0800df54 <AdatiWayReturn>:




void AdatiWayReturn(float input_StraightVelocity, float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,int know_mode,uint8_t Dijkstra_mode) {
 800df54:	b084      	sub	sp, #16
 800df56:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df58:	b091      	sub	sp, #68	; 0x44
 800df5a:	af04      	add	r7, sp, #16
 800df5c:	ed87 0a03 	vstr	s0, [r7, #12]
 800df60:	edc7 0a02 	vstr	s1, [r7, #8]
 800df64:	ed87 1a01 	vstr	s2, [r7, #4]
 800df68:	edc7 1a00 	vstr	s3, [r7]
 800df6c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800df70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned short front_count, right_count, back_count, left_count;
//	float v_e,v_ea;

	maze_mode = 1; //***************************************************************************************
 800df74:	4b7d      	ldr	r3, [pc, #500]	; (800e16c <AdatiWayReturn+0x218>)
 800df76:	2201      	movs	r2, #1
 800df78:	701a      	strb	r2, [r3, #0]
	//Avespeed = 700;
	pl_DriveMotor_standby(ON);
 800df7a:	2001      	movs	r0, #1
 800df7c:	f7f9 fc98 	bl	80078b0 <pl_DriveMotor_standby>
	HAL_Delay(500);
 800df80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800df84:	f00a feca 	bl	8018d1c <HAL_Delay>
//初期化
	//構造体にする
	int x=0;
 800df88:	2300      	movs	r3, #0
 800df8a:	623b      	str	r3, [r7, #32]
	int y=0;
 800df8c:	2300      	movs	r3, #0
 800df8e:	61fb      	str	r3, [r7, #28]
	int direction=1;
 800df90:	2301      	movs	r3, #1
 800df92:	61bb      	str	r3, [r7, #24]
	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;
	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800df94:	2301      	movs	r3, #1
 800df96:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 800df98:	2300      	movs	r3, #0
 800df9a:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 800df9c:	2300      	movs	r3, #0
 800df9e:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	75bb      	strb	r3, [r7, #22]


//初期位置のセンサー確認
	front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800dfa4:	4b72      	ldr	r3, [pc, #456]	; (800e170 <AdatiWayReturn+0x21c>)
 800dfa6:	689b      	ldr	r3, [r3, #8]
 800dfa8:	2b95      	cmp	r3, #149	; 0x95
 800dfaa:	bfcc      	ite	gt
 800dfac:	2301      	movgt	r3, #1
 800dfae:	2300      	movle	r3, #0
 800dfb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800dfb4:	4b6e      	ldr	r3, [pc, #440]	; (800e170 <AdatiWayReturn+0x21c>)
 800dfb6:	691b      	ldr	r3, [r3, #16]
 800dfb8:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	bfcc      	ite	gt
 800dfc0:	2301      	movgt	r3, #1
 800dfc2:	2300      	movle	r3, #0
 800dfc4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800dfc8:	4b69      	ldr	r3, [pc, #420]	; (800e170 <AdatiWayReturn+0x21c>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	bfcc      	ite	gt
 800dfd4:	2301      	movgt	r3, #1
 800dfd6:	2300      	movle	r3, #0
 800dfd8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800dfdc:	6a38      	ldr	r0, [r7, #32]
 800dfde:	69f9      	ldr	r1, [r7, #28]
 800dfe0:	69ba      	ldr	r2, [r7, #24]
 800dfe2:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800dfe6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dfea:	9301      	str	r3, [sp, #4]
 800dfec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dff0:	9300      	str	r3, [sp, #0]
 800dff2:	4623      	mov	r3, r4
 800dff4:	f002 fcbe 	bl	8010974 <update_wall>
	//初期位置での迷路展開
	create_StepCountMap_queue();
 800dff8:	f006 f8e0 	bl	80141bc <create_StepCountMap_queue>
	HAL_Delay(100);
 800dffc:	2064      	movs	r0, #100	; 0x64
 800dffe:	f00a fe8d 	bl	8018d1c <HAL_Delay>
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e002:	6978      	ldr	r0, [r7, #20]
 800e004:	ed97 2a01 	vldr	s4, [r7, #4]
 800e008:	edd7 1a03 	vldr	s3, [r7, #12]
 800e00c:	ed97 1a03 	vldr	s2, [r7, #12]
 800e010:	eddf 0a58 	vldr	s1, [pc, #352]	; 800e174 <AdatiWayReturn+0x220>
 800e014:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800e178 <AdatiWayReturn+0x224>
 800e018:	f7f4 ffe0 	bl	8002fdc <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800e01c:	69ba      	ldr	r2, [r7, #24]
 800e01e:	f107 011c 	add.w	r1, r7, #28
 800e022:	f107 0320 	add.w	r3, r7, #32
 800e026:	4618      	mov	r0, r3
 800e028:	f7ff ff60 	bl	800deec <update_coordinate>


		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e02c:	4b50      	ldr	r3, [pc, #320]	; (800e170 <AdatiWayReturn+0x21c>)
 800e02e:	689b      	ldr	r3, [r3, #8]
 800e030:	2b95      	cmp	r3, #149	; 0x95
 800e032:	bfcc      	ite	gt
 800e034:	2301      	movgt	r3, #1
 800e036:	2300      	movle	r3, #0
 800e038:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e03c:	4b4c      	ldr	r3, [pc, #304]	; (800e170 <AdatiWayReturn+0x21c>)
 800e03e:	691b      	ldr	r3, [r3, #16]
 800e040:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e044:	4293      	cmp	r3, r2
 800e046:	bfcc      	ite	gt
 800e048:	2301      	movgt	r3, #1
 800e04a:	2300      	movle	r3, #0
 800e04c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e050:	4b47      	ldr	r3, [pc, #284]	; (800e170 <AdatiWayReturn+0x21c>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e058:	4293      	cmp	r3, r2
 800e05a:	bfcc      	ite	gt
 800e05c:	2301      	movgt	r3, #1
 800e05e:	2300      	movle	r3, #0
 800e060:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		mode.WallControlMode=1;
 800e064:	2301      	movs	r3, #1
 800e066:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800e068:	2301      	movs	r3, #1
 800e06a:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800e06c:	2300      	movs	r3, #0
 800e06e:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e070:	6978      	ldr	r0, [r7, #20]
 800e072:	ed97 2a01 	vldr	s4, [r7, #4]
 800e076:	edd7 1a03 	vldr	s3, [r7, #12]
 800e07a:	ed97 1a03 	vldr	s2, [r7, #12]
 800e07e:	edd7 0a03 	vldr	s1, [r7, #12]
 800e082:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e086:	f7f4 ffa9 	bl	8002fdc <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e08a:	6a38      	ldr	r0, [r7, #32]
 800e08c:	69f9      	ldr	r1, [r7, #28]
 800e08e:	69ba      	ldr	r2, [r7, #24]
 800e090:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e094:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e098:	9301      	str	r3, [sp, #4]
 800e09a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e09e:	9300      	str	r3, [sp, #0]
 800e0a0:	4623      	mov	r3, r4
 800e0a2:	f002 fc67 	bl	8010974 <update_wall>
		if(Dijkstra_mode==2){
 800e0a6:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800e0aa:	2b02      	cmp	r3, #2
 800e0ac:	d104      	bne.n	800e0b8 <AdatiWayReturn+0x164>
					route_Dijkstra();
 800e0ae:	f005 f84b 	bl	8013148 <route_Dijkstra>
					create_StepCountMap_unknown();
 800e0b2:	f005 fd4d 	bl	8013b50 <create_StepCountMap_unknown>
 800e0b6:	e001      	b.n	800e0bc <AdatiWayReturn+0x168>
				}else{
					create_StepCountMap_queue();
 800e0b8:	f006 f880 	bl	80141bc <create_StepCountMap_queue>
				}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e0bc:	6a3b      	ldr	r3, [r7, #32]
 800e0be:	69fa      	ldr	r2, [r7, #28]
 800e0c0:	69b9      	ldr	r1, [r7, #24]
 800e0c2:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e0c6:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e0ca:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e0ce:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e0d2:	9102      	str	r1, [sp, #8]
 800e0d4:	9201      	str	r2, [sp, #4]
 800e0d6:	9300      	str	r3, [sp, #0]
 800e0d8:	4633      	mov	r3, r6
 800e0da:	462a      	mov	r2, r5
 800e0dc:	4621      	mov	r1, r4
 800e0de:	f003 f9c3 	bl	8011468 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e0e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d001      	beq.n	800e0ee <AdatiWayReturn+0x19a>
 800e0ea:	23ff      	movs	r3, #255	; 0xff
 800e0ec:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e0ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d001      	beq.n	800e0fa <AdatiWayReturn+0x1a6>
 800e0f6:	23ff      	movs	r3, #255	; 0xff
 800e0f8:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e0fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d001      	beq.n	800e106 <AdatiWayReturn+0x1b2>
 800e102:	23ff      	movs	r3, #255	; 0xff
 800e104:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800e106:	6a38      	ldr	r0, [r7, #32]
 800e108:	69fc      	ldr	r4, [r7, #28]
 800e10a:	69bd      	ldr	r5, [r7, #24]
 800e10c:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800e10e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e110:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e112:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e114:	9102      	str	r1, [sp, #8]
 800e116:	9201      	str	r2, [sp, #4]
 800e118:	9300      	str	r3, [sp, #0]
 800e11a:	4633      	mov	r3, r6
 800e11c:	462a      	mov	r2, r5
 800e11e:	4621      	mov	r1, r4
 800e120:	f002 f9d4 	bl	80104cc <decision_kitiku>
		mode.WallCutMode=1;
 800e124:	2301      	movs	r3, #1
 800e126:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET, mode,right_wall,left_wall);
 800e128:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e12c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e130:	4619      	mov	r1, r3
 800e132:	6978      	ldr	r0, [r7, #20]
 800e134:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e138:	f7f5 fbfa 	bl	8003930 <End_straight>



		if (x == 0 && y == 0) {break;}
 800e13c:	6a3b      	ldr	r3, [r7, #32]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d103      	bne.n	800e14a <AdatiWayReturn+0x1f6>
 800e142:	69fb      	ldr	r3, [r7, #28]
 800e144:	2b00      	cmp	r3, #0
 800e146:	f000 827c 	beq.w	800e642 <AdatiWayReturn+0x6ee>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800e14a:	6a3b      	ldr	r3, [r7, #32]
 800e14c:	2b01      	cmp	r3, #1
 800e14e:	d003      	beq.n	800e158 <AdatiWayReturn+0x204>
 800e150:	6a3b      	ldr	r3, [r7, #32]
 800e152:	2b02      	cmp	r3, #2
 800e154:	f040 810d 	bne.w	800e372 <AdatiWayReturn+0x41e>
 800e158:	69fb      	ldr	r3, [r7, #28]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f000 809b 	beq.w	800e296 <AdatiWayReturn+0x342>
 800e160:	69fb      	ldr	r3, [r7, #28]
 800e162:	2b01      	cmp	r3, #1
 800e164:	f040 8105 	bne.w	800e372 <AdatiWayReturn+0x41e>


			while (front_wall==0) {
 800e168:	e095      	b.n	800e296 <AdatiWayReturn+0x342>
 800e16a:	bf00      	nop
 800e16c:	20000834 	.word	0x20000834
 800e170:	20000470 	.word	0x20000470
 800e174:	00000000 	.word	0x00000000
 800e178:	42830000 	.word	0x42830000
 800e17c:	42a40000 	.word	0x42a40000
				//直進
				mode.WallControlMode=1;
 800e180:	2301      	movs	r3, #1
 800e182:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e184:	2300      	movs	r3, #0
 800e186:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e188:	2300      	movs	r3, #0
 800e18a:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e18c:	6978      	ldr	r0, [r7, #20]
 800e18e:	ed97 2a01 	vldr	s4, [r7, #4]
 800e192:	edd7 1a03 	vldr	s3, [r7, #12]
 800e196:	ed97 1a03 	vldr	s2, [r7, #12]
 800e19a:	edd7 0a03 	vldr	s1, [r7, #12]
 800e19e:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800e17c <AdatiWayReturn+0x228>
 800e1a2:	f7f4 ff1b 	bl	8002fdc <straight_table2>

				update_coordinate(&x,&y,direction);
 800e1a6:	69ba      	ldr	r2, [r7, #24]
 800e1a8:	f107 011c 	add.w	r1, r7, #28
 800e1ac:	f107 0320 	add.w	r3, r7, #32
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f7ff fe9b 	bl	800deec <update_coordinate>

				front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e1b6:	4b7f      	ldr	r3, [pc, #508]	; (800e3b4 <AdatiWayReturn+0x460>)
 800e1b8:	689b      	ldr	r3, [r3, #8]
 800e1ba:	2b95      	cmp	r3, #149	; 0x95
 800e1bc:	bfcc      	ite	gt
 800e1be:	2301      	movgt	r3, #1
 800e1c0:	2300      	movle	r3, #0
 800e1c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e1c6:	4b7b      	ldr	r3, [pc, #492]	; (800e3b4 <AdatiWayReturn+0x460>)
 800e1c8:	691b      	ldr	r3, [r3, #16]
 800e1ca:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	bfcc      	ite	gt
 800e1d2:	2301      	movgt	r3, #1
 800e1d4:	2300      	movle	r3, #0
 800e1d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e1da:	4b76      	ldr	r3, [pc, #472]	; (800e3b4 <AdatiWayReturn+0x460>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	bfcc      	ite	gt
 800e1e6:	2301      	movgt	r3, #1
 800e1e8:	2300      	movle	r3, #0
 800e1ea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				mode.WallControlMode=1;
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	75fb      	strb	r3, [r7, #23]
				straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e1fa:	6978      	ldr	r0, [r7, #20]
 800e1fc:	ed97 2a01 	vldr	s4, [r7, #4]
 800e200:	edd7 1a03 	vldr	s3, [r7, #12]
 800e204:	ed97 1a03 	vldr	s2, [r7, #12]
 800e208:	edd7 0a03 	vldr	s1, [r7, #12]
 800e20c:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e210:	f7f4 fee4 	bl	8002fdc <straight_table2>
				update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e214:	6a38      	ldr	r0, [r7, #32]
 800e216:	69f9      	ldr	r1, [r7, #28]
 800e218:	69ba      	ldr	r2, [r7, #24]
 800e21a:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e21e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e222:	9301      	str	r3, [sp, #4]
 800e224:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	4623      	mov	r3, r4
 800e22c:	f002 fba2 	bl	8010974 <update_wall>
				create_StepCountMap_queue();
 800e230:	f005 ffc4 	bl	80141bc <create_StepCountMap_queue>
				search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e234:	6a3b      	ldr	r3, [r7, #32]
 800e236:	69fa      	ldr	r2, [r7, #28]
 800e238:	69b9      	ldr	r1, [r7, #24]
 800e23a:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e23e:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e242:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e246:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e24a:	9102      	str	r1, [sp, #8]
 800e24c:	9201      	str	r2, [sp, #4]
 800e24e:	9300      	str	r3, [sp, #0]
 800e250:	4633      	mov	r3, r6
 800e252:	462a      	mov	r2, r5
 800e254:	4621      	mov	r1, r4
 800e256:	f003 f907 	bl	8011468 <search_AroundWalkCount>
				if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e25a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d001      	beq.n	800e266 <AdatiWayReturn+0x312>
 800e262:	23ff      	movs	r3, #255	; 0xff
 800e264:	857b      	strh	r3, [r7, #42]	; 0x2a
				if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e266:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d001      	beq.n	800e272 <AdatiWayReturn+0x31e>
 800e26e:	23ff      	movs	r3, #255	; 0xff
 800e270:	853b      	strh	r3, [r7, #40]	; 0x28
				if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e272:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e276:	2b00      	cmp	r3, #0
 800e278:	d001      	beq.n	800e27e <AdatiWayReturn+0x32a>
 800e27a:	23ff      	movs	r3, #255	; 0xff
 800e27c:	84bb      	strh	r3, [r7, #36]	; 0x24
				mode.WallCutMode=1;
 800e27e:	2301      	movs	r3, #1
 800e280:	75fb      	strb	r3, [r7, #23]
				End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800e282:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e286:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e28a:	4619      	mov	r1, r3
 800e28c:	6978      	ldr	r0, [r7, #20]
 800e28e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e292:	f7f5 fb4d 	bl	8003930 <End_straight>
			while (front_wall==0) {
 800e296:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e29a:	f083 0301 	eor.w	r3, r3, #1
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f47f af6d 	bne.w	800e180 <AdatiWayReturn+0x22c>


			}
			mode.WallControlMode=0;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e2b2:	6978      	ldr	r0, [r7, #20]
 800e2b4:	ed97 2a01 	vldr	s4, [r7, #4]
 800e2b8:	edd7 1a03 	vldr	s3, [r7, #12]
 800e2bc:	ed9f 1a48 	vldr	s2, [pc, #288]	; 800e3e0 <AdatiWayReturn+0x48c>
 800e2c0:	edd7 0a03 	vldr	s1, [r7, #12]
 800e2c4:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800e3b8 <AdatiWayReturn+0x464>
 800e2c8:	f7f4 fe88 	bl	8002fdc <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e2cc:	2003      	movs	r0, #3
 800e2ce:	f7f9 fb21 	bl	8007914 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e2d2:	2003      	movs	r0, #3
 800e2d4:	f7f9 faf6 	bl	80078c4 <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e2d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e2dc:	f7f9 fe18 	bl	8007f10 <wait_ms_NoReset>
			no_safty = 1;
 800e2e0:	4b36      	ldr	r3, [pc, #216]	; (800e3bc <AdatiWayReturn+0x468>)
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	701a      	strb	r2, [r3, #0]
			turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e2e6:	ed97 2a00 	vldr	s4, [r7]
 800e2ea:	edd7 1a02 	vldr	s3, [r7, #8]
 800e2ee:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 800e3e0 <AdatiWayReturn+0x48c>
 800e2f2:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800e3e0 <AdatiWayReturn+0x48c>
 800e2f6:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800e3c0 <AdatiWayReturn+0x46c>
 800e2fa:	f7f5 fb7d 	bl	80039f8 <turning_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e2fe:	2003      	movs	r0, #3
 800e300:	f7f9 fb08 	bl	8007914 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e304:	2003      	movs	r0, #3
 800e306:	f7f9 fadd 	bl	80078c4 <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e30a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e30e:	f7f9 fdff 	bl	8007f10 <wait_ms_NoReset>
			straight_table2(-BACK_TO_CENTER-20/2, 0,0,-150,1000, mode);
 800e312:	6978      	ldr	r0, [r7, #20]
 800e314:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800e3c4 <AdatiWayReturn+0x470>
 800e318:	eddf 1a2b 	vldr	s3, [pc, #172]	; 800e3c8 <AdatiWayReturn+0x474>
 800e31c:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800e3e0 <AdatiWayReturn+0x48c>
 800e320:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800e3e0 <AdatiWayReturn+0x48c>
 800e324:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800e3cc <AdatiWayReturn+0x478>
 800e328:	f7f4 fe58 	bl	8002fdc <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e32c:	2003      	movs	r0, #3
 800e32e:	f7f9 faf1 	bl	8007914 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e332:	2003      	movs	r0, #3
 800e334:	f7f9 fac6 	bl	80078c4 <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e338:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e33c:	f7f9 fde8 	bl	8007f10 <wait_ms_NoReset>
			no_safty = 0;
 800e340:	4b1e      	ldr	r3, [pc, #120]	; (800e3bc <AdatiWayReturn+0x468>)
 800e342:	2200      	movs	r2, #0
 800e344:	701a      	strb	r2, [r3, #0]
			clear_Ierror();
 800e346:	f7f6 f933 	bl	80045b0 <clear_Ierror>
			maze_mode = 0;
 800e34a:	4b21      	ldr	r3, [pc, #132]	; (800e3d0 <AdatiWayReturn+0x47c>)
 800e34c:	2200      	movs	r2, #0
 800e34e:	701a      	strb	r2, [r3, #0]

			direction = direction + 2;
 800e350:	69bb      	ldr	r3, [r7, #24]
 800e352:	3302      	adds	r3, #2
 800e354:	61bb      	str	r3, [r7, #24]

			if (direction >= 5) {
 800e356:	69bb      	ldr	r3, [r7, #24]
 800e358:	2b04      	cmp	r3, #4
 800e35a:	dd02      	ble.n	800e362 <AdatiWayReturn+0x40e>
				direction = direction-4;
 800e35c:	69bb      	ldr	r3, [r7, #24]
 800e35e:	3b04      	subs	r3, #4
 800e360:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800e362:	69bb      	ldr	r3, [r7, #24]
 800e364:	2b00      	cmp	r3, #0
 800e366:	f300 816e 	bgt.w	800e646 <AdatiWayReturn+0x6f2>
				direction = direction+4;
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	3304      	adds	r3, #4
 800e36e:	61bb      	str	r3, [r7, #24]
			}

			break;
 800e370:	e169      	b.n	800e646 <AdatiWayReturn+0x6f2>
		}
		if(know_mode==0){
 800e372:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e376:	2b00      	cmp	r3, #0
 800e378:	d102      	bne.n	800e380 <AdatiWayReturn+0x42c>
			kitikukan = 0;
 800e37a:	4b16      	ldr	r3, [pc, #88]	; (800e3d4 <AdatiWayReturn+0x480>)
 800e37c:	2200      	movs	r2, #0
 800e37e:	601a      	str	r2, [r3, #0]
		}
		if (kitikukan == OFF) {
 800e380:	4b14      	ldr	r3, [pc, #80]	; (800e3d4 <AdatiWayReturn+0x480>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	f040 80f8 	bne.w	800e57a <AdatiWayReturn+0x626>

			// 移動の優先順位 ： 前→右→左→後
			if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e38a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e38c:	2bff      	cmp	r3, #255	; 0xff
 800e38e:	d12b      	bne.n	800e3e8 <AdatiWayReturn+0x494>
 800e390:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e392:	2bff      	cmp	r3, #255	; 0xff
 800e394:	d128      	bne.n	800e3e8 <AdatiWayReturn+0x494>
 800e396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e398:	2bff      	cmp	r3, #255	; 0xff
 800e39a:	d125      	bne.n	800e3e8 <AdatiWayReturn+0x494>
 800e39c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e39e:	2bff      	cmp	r3, #255	; 0xff
 800e3a0:	d122      	bne.n	800e3e8 <AdatiWayReturn+0x494>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
				error_mode=1;
 800e3a2:	4b0d      	ldr	r3, [pc, #52]	; (800e3d8 <AdatiWayReturn+0x484>)
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	701a      	strb	r2, [r3, #0]
				pl_DriveMotor_stop();
 800e3a8:	f7f9 fae8 	bl	800797c <pl_DriveMotor_stop>
				pl_DriveMotor_standby(OFF);
 800e3ac:	2000      	movs	r0, #0
 800e3ae:	f7f9 fa7f 	bl	80078b0 <pl_DriveMotor_standby>

				break;
 800e3b2:	e14b      	b.n	800e64c <AdatiWayReturn+0x6f8>
 800e3b4:	20000470 	.word	0x20000470
 800e3b8:	42140000 	.word	0x42140000
 800e3bc:	20000806 	.word	0x20000806
 800e3c0:	43340000 	.word	0x43340000
 800e3c4:	447a0000 	.word	0x447a0000
 800e3c8:	c3160000 	.word	0xc3160000
 800e3cc:	c1f40000 	.word	0xc1f40000
 800e3d0:	20000834 	.word	0x20000834
 800e3d4:	20000838 	.word	0x20000838
 800e3d8:	20000807 	.word	0x20000807
 800e3dc:	42a40000 	.word	0x42a40000
 800e3e0:	00000000 	.word	0x00000000
 800e3e4:	42080000 	.word	0x42080000
			}
			if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e3e8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e3ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d81a      	bhi.n	800e426 <AdatiWayReturn+0x4d2>
 800e3f0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e3f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d816      	bhi.n	800e426 <AdatiWayReturn+0x4d2>
 800e3f8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e3fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	d812      	bhi.n	800e426 <AdatiWayReturn+0x4d2>
				// 直進
				mode.WallControlMode=1;
 800e400:	2301      	movs	r3, #1
 800e402:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e404:	2300      	movs	r3, #0
 800e406:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e408:	2300      	movs	r3, #0
 800e40a:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e40c:	6978      	ldr	r0, [r7, #20]
 800e40e:	ed97 2a01 	vldr	s4, [r7, #4]
 800e412:	edd7 1a03 	vldr	s3, [r7, #12]
 800e416:	ed97 1a03 	vldr	s2, [r7, #12]
 800e41a:	edd7 0a03 	vldr	s1, [r7, #12]
 800e41e:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 800e3dc <AdatiWayReturn+0x488>
 800e422:	f7f4 fddb 	bl	8002fdc <straight_table2>
			}
			if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e426:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e428:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d219      	bcs.n	800e462 <AdatiWayReturn+0x50e>
 800e42e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e432:	429a      	cmp	r2, r3
 800e434:	d815      	bhi.n	800e462 <AdatiWayReturn+0x50e>
 800e436:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e438:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e43a:	429a      	cmp	r2, r3
 800e43c:	d811      	bhi.n	800e462 <AdatiWayReturn+0x50e>
				// 右旋回
				slalomR(howspeed.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800e43e:	2300      	movs	r3, #0
 800e440:	9303      	str	r3, [sp, #12]
 800e442:	2300      	movs	r3, #0
 800e444:	9302      	str	r3, [sp, #8]
 800e446:	2300      	movs	r3, #0
 800e448:	9301      	str	r3, [sp, #4]
 800e44a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e44c:	9300      	str	r3, [sp, #0]
 800e44e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e454:	ed97 0a03 	vldr	s0, [r7, #12]
 800e458:	f7fb fd7e 	bl	8009f58 <slalomR>
				direction++;
 800e45c:	69bb      	ldr	r3, [r7, #24]
 800e45e:	3301      	adds	r3, #1
 800e460:	61bb      	str	r3, [r7, #24]
			}
			if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e462:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e464:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e466:	429a      	cmp	r2, r3
 800e468:	d219      	bcs.n	800e49e <AdatiWayReturn+0x54a>
 800e46a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e46c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e46e:	429a      	cmp	r2, r3
 800e470:	d215      	bcs.n	800e49e <AdatiWayReturn+0x54a>
 800e472:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e474:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e476:	429a      	cmp	r2, r3
 800e478:	d811      	bhi.n	800e49e <AdatiWayReturn+0x54a>
				// 左旋回
				slalomL(howspeed.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800e47a:	2300      	movs	r3, #0
 800e47c:	9303      	str	r3, [sp, #12]
 800e47e:	2300      	movs	r3, #0
 800e480:	9302      	str	r3, [sp, #8]
 800e482:	2300      	movs	r3, #0
 800e484:	9301      	str	r3, [sp, #4]
 800e486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e488:	9300      	str	r3, [sp, #0]
 800e48a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e48e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e490:	ed97 0a03 	vldr	s0, [r7, #12]
 800e494:	f7fb ff46 	bl	800a324 <slalomL>
				direction--;
 800e498:	69bb      	ldr	r3, [r7, #24]
 800e49a:	3b01      	subs	r3, #1
 800e49c:	61bb      	str	r3, [r7, #24]
			}
			if(back_count < front_count && back_count < right_count
 800e49e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	f080 80ac 	bcs.w	800e600 <AdatiWayReturn+0x6ac>
 800e4a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	f080 80a7 	bcs.w	800e600 <AdatiWayReturn+0x6ac>
					&& back_count < left_count){
 800e4b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	f080 80a2 	bcs.w	800e600 <AdatiWayReturn+0x6ac>
				//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
				mode.WallControlMode=1;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET-3, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e4c8:	6978      	ldr	r0, [r7, #20]
 800e4ca:	ed97 2a01 	vldr	s4, [r7, #4]
 800e4ce:	edd7 1a03 	vldr	s3, [r7, #12]
 800e4d2:	ed1f 1a3d 	vldr	s2, [pc, #-244]	; 800e3e0 <AdatiWayReturn+0x48c>
 800e4d6:	edd7 0a03 	vldr	s1, [r7, #12]
 800e4da:	ed1f 0a3e 	vldr	s0, [pc, #-248]	; 800e3e4 <AdatiWayReturn+0x490>
 800e4de:	f7f4 fd7d 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e4e2:	2003      	movs	r0, #3
 800e4e4:	f7f9 fa16 	bl	8007914 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e4e8:	2003      	movs	r0, #3
 800e4ea:	f7f9 f9eb 	bl	80078c4 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e4ee:	2064      	movs	r0, #100	; 0x64
 800e4f0:	f7f9 fd0e 	bl	8007f10 <wait_ms_NoReset>
				no_safty = 1;
 800e4f4:	4b8a      	ldr	r3, [pc, #552]	; (800e720 <AdatiWayReturn+0x7cc>)
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	701a      	strb	r2, [r3, #0]
				backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800e4fa:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e4fe:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800e502:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e506:	4618      	mov	r0, r3
 800e508:	edd7 0a00 	vldr	s1, [r7]
 800e50c:	ed97 0a02 	vldr	s0, [r7, #8]
 800e510:	f7fb fc58 	bl	8009dc4 <backTurn_controlWall>
				//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
				wait_ms_NoReset(100);
 800e514:	2064      	movs	r0, #100	; 0x64
 800e516:	f7f9 fcfb 	bl	8007f10 <wait_ms_NoReset>
				no_safty = 0;
 800e51a:	4b81      	ldr	r3, [pc, #516]	; (800e720 <AdatiWayReturn+0x7cc>)
 800e51c:	2200      	movs	r2, #0
 800e51e:	701a      	strb	r2, [r3, #0]
				//clear_Ierror();
				mode.WallControlMode=0;
 800e520:	2300      	movs	r3, #0
 800e522:	753b      	strb	r3, [r7, #20]
				straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800e524:	6978      	ldr	r0, [r7, #20]
 800e526:	ed9f 2a7f 	vldr	s4, [pc, #508]	; 800e724 <AdatiWayReturn+0x7d0>
 800e52a:	eddf 1a7f 	vldr	s3, [pc, #508]	; 800e728 <AdatiWayReturn+0x7d4>
 800e52e:	ed9f 1a88 	vldr	s2, [pc, #544]	; 800e750 <AdatiWayReturn+0x7fc>
 800e532:	eddf 0a87 	vldr	s1, [pc, #540]	; 800e750 <AdatiWayReturn+0x7fc>
 800e536:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800e72c <AdatiWayReturn+0x7d8>
 800e53a:	f7f4 fd4f 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e53e:	2003      	movs	r0, #3
 800e540:	f7f9 f9e8 	bl	8007914 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e544:	2003      	movs	r0, #3
 800e546:	f7f9 f9bd 	bl	80078c4 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e54a:	2064      	movs	r0, #100	; 0x64
 800e54c:	f7f9 fce0 	bl	8007f10 <wait_ms_NoReset>
				clear_Ierror();
 800e550:	f7f6 f82e 	bl	80045b0 <clear_Ierror>
				mode.WallControlMode=1;
 800e554:	2301      	movs	r3, #1
 800e556:	753b      	strb	r3, [r7, #20]
				straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e558:	6978      	ldr	r0, [r7, #20]
 800e55a:	ed97 2a01 	vldr	s4, [r7, #4]
 800e55e:	edd7 1a03 	vldr	s3, [r7, #12]
 800e562:	ed97 1a03 	vldr	s2, [r7, #12]
 800e566:	eddf 0a7a 	vldr	s1, [pc, #488]	; 800e750 <AdatiWayReturn+0x7fc>
 800e56a:	ed9f 0a71 	vldr	s0, [pc, #452]	; 800e730 <AdatiWayReturn+0x7dc>
 800e56e:	f7f4 fd35 	bl	8002fdc <straight_table2>
				//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
				direction = direction + 2;
 800e572:	69bb      	ldr	r3, [r7, #24]
 800e574:	3302      	adds	r3, #2
 800e576:	61bb      	str	r3, [r7, #24]
 800e578:	e042      	b.n	800e600 <AdatiWayReturn+0x6ac>

			}

		} else {
			mode.WallControlMode=1;
 800e57a:	2301      	movs	r3, #1
 800e57c:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e57e:	2300      	movs	r3, #0
 800e580:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e582:	2300      	movs	r3, #0
 800e584:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e586:	6978      	ldr	r0, [r7, #20]
 800e588:	ed97 2a01 	vldr	s4, [r7, #4]
 800e58c:	edd7 1a03 	vldr	s3, [r7, #12]
 800e590:	ed97 1a03 	vldr	s2, [r7, #12]
 800e594:	edd7 0a03 	vldr	s1, [r7, #12]
 800e598:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 800e754 <AdatiWayReturn+0x800>
 800e59c:	f7f4 fd1e 	bl	8002fdc <straight_table2>
			compress_kitiku(&x,&y,&direction);
 800e5a0:	f107 0218 	add.w	r2, r7, #24
 800e5a4:	f107 011c 	add.w	r1, r7, #28
 800e5a8:	f107 0320 	add.w	r3, r7, #32
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f001 ffff 	bl	80105b0 <compress_kitiku>
			mode.WallCutMode=0;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	75fb      	strb	r3, [r7, #23]
			End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	2101      	movs	r1, #1
 800e5ba:	6978      	ldr	r0, [r7, #20]
 800e5bc:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800e754 <AdatiWayReturn+0x800>
 800e5c0:	f7f5 f9b6 	bl	8003930 <End_straight>
			mode.WallControlMode=1;
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	75fb      	strb	r3, [r7, #23]
			straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,900,input_StraightAcceleration, mode);
 800e5d0:	4b58      	ldr	r3, [pc, #352]	; (800e734 <AdatiWayReturn+0x7e0>)
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	4613      	mov	r3, r2
 800e5d6:	005b      	lsls	r3, r3, #1
 800e5d8:	4413      	add	r3, r2
 800e5da:	011a      	lsls	r2, r3, #4
 800e5dc:	1ad3      	subs	r3, r2, r3
 800e5de:	ee07 3a90 	vmov	s15, r3
 800e5e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e5e6:	6978      	ldr	r0, [r7, #20]
 800e5e8:	ed97 2a01 	vldr	s4, [r7, #4]
 800e5ec:	eddf 1a52 	vldr	s3, [pc, #328]	; 800e738 <AdatiWayReturn+0x7e4>
 800e5f0:	ed97 1a03 	vldr	s2, [r7, #12]
 800e5f4:	edd7 0a03 	vldr	s1, [r7, #12]
 800e5f8:	eeb0 0a67 	vmov.f32	s0, s15
 800e5fc:	f7f4 fcee 	bl	8002fdc <straight_table2>

		}

		if (direction >= 5) {
 800e600:	69bb      	ldr	r3, [r7, #24]
 800e602:	2b04      	cmp	r3, #4
 800e604:	dd02      	ble.n	800e60c <AdatiWayReturn+0x6b8>
			direction = direction-4;
 800e606:	69bb      	ldr	r3, [r7, #24]
 800e608:	3b04      	subs	r3, #4
 800e60a:	61bb      	str	r3, [r7, #24]
		}
		if (direction <= 0) {
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	dc02      	bgt.n	800e618 <AdatiWayReturn+0x6c4>
			direction = direction+4;
 800e612:	69bb      	ldr	r3, [r7, #24]
 800e614:	3304      	adds	r3, #4
 800e616:	61bb      	str	r3, [r7, #24]
//基地区間**********************************************************************
//		if (know_road == 1) {
//			most_speed_kitikukan_play(850, 1600);
//		}
//基地区間
		if(error_mode==1){break;}
 800e618:	4b48      	ldr	r3, [pc, #288]	; (800e73c <AdatiWayReturn+0x7e8>)
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	2b01      	cmp	r3, #1
 800e61e:	d014      	beq.n	800e64a <AdatiWayReturn+0x6f6>
		if (g_timCount_sec>240){
 800e620:	4b47      	ldr	r3, [pc, #284]	; (800e740 <AdatiWayReturn+0x7ec>)
 800e622:	edd3 7a00 	vldr	s15, [r3]
 800e626:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800e744 <AdatiWayReturn+0x7f0>
 800e62a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e632:	dd05      	ble.n	800e640 <AdatiWayReturn+0x6ec>
					// 秒数エンド

						pl_DriveMotor_stop();
 800e634:	f7f9 f9a2 	bl	800797c <pl_DriveMotor_stop>
						pl_DriveMotor_standby(OFF);
 800e638:	2000      	movs	r0, #0
 800e63a:	f7f9 f939 	bl	80078b0 <pl_DriveMotor_standby>
						break;
 800e63e:	e005      	b.n	800e64c <AdatiWayReturn+0x6f8>
		update_coordinate(&x,&y,direction);
 800e640:	e4ec      	b.n	800e01c <AdatiWayReturn+0xc8>
		if (x == 0 && y == 0) {break;}
 800e642:	bf00      	nop
 800e644:	e002      	b.n	800e64c <AdatiWayReturn+0x6f8>
			break;
 800e646:	bf00      	nop
 800e648:	e000      	b.n	800e64c <AdatiWayReturn+0x6f8>
		if(error_mode==1){break;}
 800e64a:	bf00      	nop
					}

	}
	if(error_mode==0){
 800e64c:	4b3b      	ldr	r3, [pc, #236]	; (800e73c <AdatiWayReturn+0x7e8>)
 800e64e:	781b      	ldrb	r3, [r3, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d101      	bne.n	800e658 <AdatiWayReturn+0x704>
	record_in();
 800e654:	f7f8 fe3a 	bl	80072cc <record_in>
	}
	create_DijkstraMap();
 800e658:	f003 f82e 	bl	80116b8 <create_DijkstraMap>
	clear_Ierror();
 800e65c:	f7f5 ffa8 	bl	80045b0 <clear_Ierror>
	reset_gyro();
 800e660:	f7f3 f882 	bl	8001768 <reset_gyro>
	//reset_speed();
	maze_mode = 1;
 800e664:	4b38      	ldr	r3, [pc, #224]	; (800e748 <AdatiWayReturn+0x7f4>)
 800e666:	2201      	movs	r2, #1
 800e668:	701a      	strb	r2, [r3, #0]
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e66a:	6978      	ldr	r0, [r7, #20]
 800e66c:	ed97 2a01 	vldr	s4, [r7, #4]
 800e670:	edd7 1a03 	vldr	s3, [r7, #12]
 800e674:	ed97 1a03 	vldr	s2, [r7, #12]
 800e678:	eddf 0a35 	vldr	s1, [pc, #212]	; 800e750 <AdatiWayReturn+0x7fc>
 800e67c:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800e730 <AdatiWayReturn+0x7dc>
 800e680:	f7f4 fcac 	bl	8002fdc <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800e684:	69ba      	ldr	r2, [r7, #24]
 800e686:	f107 011c 	add.w	r1, r7, #28
 800e68a:	f107 0320 	add.w	r3, r7, #32
 800e68e:	4618      	mov	r0, r3
 800e690:	f7ff fc2c 	bl	800deec <update_coordinate>

		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e694:	4b2d      	ldr	r3, [pc, #180]	; (800e74c <AdatiWayReturn+0x7f8>)
 800e696:	689b      	ldr	r3, [r3, #8]
 800e698:	2b95      	cmp	r3, #149	; 0x95
 800e69a:	bfcc      	ite	gt
 800e69c:	2301      	movgt	r3, #1
 800e69e:	2300      	movle	r3, #0
 800e6a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e6a4:	4b29      	ldr	r3, [pc, #164]	; (800e74c <AdatiWayReturn+0x7f8>)
 800e6a6:	691b      	ldr	r3, [r3, #16]
 800e6a8:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	bfcc      	ite	gt
 800e6b0:	2301      	movgt	r3, #1
 800e6b2:	2300      	movle	r3, #0
 800e6b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e6b8:	4b24      	ldr	r3, [pc, #144]	; (800e74c <AdatiWayReturn+0x7f8>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	bfcc      	ite	gt
 800e6c4:	2301      	movgt	r3, #1
 800e6c6:	2300      	movle	r3, #0
 800e6c8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		mode.WallControlMode=1;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e6d8:	6978      	ldr	r0, [r7, #20]
 800e6da:	ed97 2a01 	vldr	s4, [r7, #4]
 800e6de:	edd7 1a03 	vldr	s3, [r7, #12]
 800e6e2:	ed97 1a03 	vldr	s2, [r7, #12]
 800e6e6:	edd7 0a03 	vldr	s1, [r7, #12]
 800e6ea:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e6ee:	f7f4 fc75 	bl	8002fdc <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e6f2:	6a38      	ldr	r0, [r7, #32]
 800e6f4:	69f9      	ldr	r1, [r7, #28]
 800e6f6:	69ba      	ldr	r2, [r7, #24]
 800e6f8:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e6fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e700:	9301      	str	r3, [sp, #4]
 800e702:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e706:	9300      	str	r3, [sp, #0]
 800e708:	4623      	mov	r3, r4
 800e70a:	f002 f933 	bl	8010974 <update_wall>
		if(Dijkstra_mode==1){
 800e70e:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800e712:	2b01      	cmp	r3, #1
 800e714:	d120      	bne.n	800e758 <AdatiWayReturn+0x804>
			route_Dijkstra();//ダイクストラ法のマップを作成
 800e716:	f004 fd17 	bl	8013148 <route_Dijkstra>
			create_StepCountMap_unknown();
 800e71a:	f005 fa19 	bl	8013b50 <create_StepCountMap_unknown>
 800e71e:	e01d      	b.n	800e75c <AdatiWayReturn+0x808>
 800e720:	20000806 	.word	0x20000806
 800e724:	447a0000 	.word	0x447a0000
 800e728:	c3160000 	.word	0xc3160000
 800e72c:	c1a40000 	.word	0xc1a40000
 800e730:	42830000 	.word	0x42830000
 800e734:	2000082c 	.word	0x2000082c
 800e738:	44610000 	.word	0x44610000
 800e73c:	20000807 	.word	0x20000807
 800e740:	2000072c 	.word	0x2000072c
 800e744:	43700000 	.word	0x43700000
 800e748:	20000834 	.word	0x20000834
 800e74c:	20000470 	.word	0x20000470
 800e750:	00000000 	.word	0x00000000
 800e754:	42140000 	.word	0x42140000
		}else{
			create_StepCountMapBack_queue();
 800e758:	f006 f818 	bl	801478c <create_StepCountMapBack_queue>
		}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e75c:	6a3b      	ldr	r3, [r7, #32]
 800e75e:	69fa      	ldr	r2, [r7, #28]
 800e760:	69b9      	ldr	r1, [r7, #24]
 800e762:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e766:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e76a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e76e:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e772:	9102      	str	r1, [sp, #8]
 800e774:	9201      	str	r2, [sp, #4]
 800e776:	9300      	str	r3, [sp, #0]
 800e778:	4633      	mov	r3, r6
 800e77a:	462a      	mov	r2, r5
 800e77c:	4621      	mov	r1, r4
 800e77e:	f002 fe73 	bl	8011468 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e782:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e786:	2b00      	cmp	r3, #0
 800e788:	d001      	beq.n	800e78e <AdatiWayReturn+0x83a>
 800e78a:	23ff      	movs	r3, #255	; 0xff
 800e78c:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e78e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e792:	2b00      	cmp	r3, #0
 800e794:	d001      	beq.n	800e79a <AdatiWayReturn+0x846>
 800e796:	23ff      	movs	r3, #255	; 0xff
 800e798:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e79a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d001      	beq.n	800e7a6 <AdatiWayReturn+0x852>
 800e7a2:	23ff      	movs	r3, #255	; 0xff
 800e7a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800e7a6:	6a38      	ldr	r0, [r7, #32]
 800e7a8:	69fc      	ldr	r4, [r7, #28]
 800e7aa:	69bd      	ldr	r5, [r7, #24]
 800e7ac:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800e7ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e7b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e7b2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e7b4:	9102      	str	r1, [sp, #8]
 800e7b6:	9201      	str	r2, [sp, #4]
 800e7b8:	9300      	str	r3, [sp, #0]
 800e7ba:	4633      	mov	r3, r6
 800e7bc:	462a      	mov	r2, r5
 800e7be:	4621      	mov	r1, r4
 800e7c0:	f001 fe84 	bl	80104cc <decision_kitiku>
		mode.WallCutMode=1;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800e7c8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e7cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	6978      	ldr	r0, [r7, #20]
 800e7d4:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e7d8:	f7f5 f8aa 	bl	8003930 <End_straight>


			if(x == 0 && y == 0) {
 800e7dc:	6a3b      	ldr	r3, [r7, #32]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d165      	bne.n	800e8ae <AdatiWayReturn+0x95a>
 800e7e2:	69fb      	ldr	r3, [r7, #28]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d162      	bne.n	800e8ae <AdatiWayReturn+0x95a>

				mode.WallControlMode=0;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e7f4:	6978      	ldr	r0, [r7, #20]
 800e7f6:	ed97 2a01 	vldr	s4, [r7, #4]
 800e7fa:	edd7 1a03 	vldr	s3, [r7, #12]
 800e7fe:	ed1f 1a2c 	vldr	s2, [pc, #-176]	; 800e750 <AdatiWayReturn+0x7fc>
 800e802:	edd7 0a03 	vldr	s1, [r7, #12]
 800e806:	ed1f 0a2d 	vldr	s0, [pc, #-180]	; 800e754 <AdatiWayReturn+0x800>
 800e80a:	f7f4 fbe7 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e80e:	2003      	movs	r0, #3
 800e810:	f7f9 f880 	bl	8007914 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e814:	2003      	movs	r0, #3
 800e816:	f7f9 f855 	bl	80078c4 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e81a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e81e:	f7f9 fb77 	bl	8007f10 <wait_ms_NoReset>
				no_safty = 1;
 800e822:	4bbb      	ldr	r3, [pc, #748]	; (800eb10 <AdatiWayReturn+0xbbc>)
 800e824:	2201      	movs	r2, #1
 800e826:	701a      	strb	r2, [r3, #0]
				turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e828:	ed97 2a00 	vldr	s4, [r7]
 800e82c:	edd7 1a02 	vldr	s3, [r7, #8]
 800e830:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 800eb14 <AdatiWayReturn+0xbc0>
 800e834:	eddf 0ab7 	vldr	s1, [pc, #732]	; 800eb14 <AdatiWayReturn+0xbc0>
 800e838:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 800eb18 <AdatiWayReturn+0xbc4>
 800e83c:	f7f5 f8dc 	bl	80039f8 <turning_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e840:	2003      	movs	r0, #3
 800e842:	f7f9 f867 	bl	8007914 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e846:	2003      	movs	r0, #3
 800e848:	f7f9 f83c 	bl	80078c4 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e84c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e850:	f7f9 fb5e 	bl	8007f10 <wait_ms_NoReset>
				straight_table2(-60/2, 0,0,-150,1000, mode);
 800e854:	6978      	ldr	r0, [r7, #20]
 800e856:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 800eb1c <AdatiWayReturn+0xbc8>
 800e85a:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800eb20 <AdatiWayReturn+0xbcc>
 800e85e:	ed9f 1aad 	vldr	s2, [pc, #692]	; 800eb14 <AdatiWayReturn+0xbc0>
 800e862:	eddf 0aac 	vldr	s1, [pc, #688]	; 800eb14 <AdatiWayReturn+0xbc0>
 800e866:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 800e86a:	f7f4 fbb7 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e86e:	2003      	movs	r0, #3
 800e870:	f7f9 f850 	bl	8007914 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e874:	2003      	movs	r0, #3
 800e876:	f7f9 f825 	bl	80078c4 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e87a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e87e:	f7f9 fb47 	bl	8007f10 <wait_ms_NoReset>
				no_safty = 0;
 800e882:	4ba3      	ldr	r3, [pc, #652]	; (800eb10 <AdatiWayReturn+0xbbc>)
 800e884:	2200      	movs	r2, #0
 800e886:	701a      	strb	r2, [r3, #0]
				clear_Ierror();
 800e888:	f7f5 fe92 	bl	80045b0 <clear_Ierror>

				direction = direction + 2;
 800e88c:	69bb      	ldr	r3, [r7, #24]
 800e88e:	3302      	adds	r3, #2
 800e890:	61bb      	str	r3, [r7, #24]

				if (direction >= 5) {
 800e892:	69bb      	ldr	r3, [r7, #24]
 800e894:	2b04      	cmp	r3, #4
 800e896:	dd02      	ble.n	800e89e <AdatiWayReturn+0x94a>
					direction = direction-4;
 800e898:	69bb      	ldr	r3, [r7, #24]
 800e89a:	3b04      	subs	r3, #4
 800e89c:	61bb      	str	r3, [r7, #24]
				}
				if (direction <= 0) {
 800e89e:	69bb      	ldr	r3, [r7, #24]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	f300 82f0 	bgt.w	800ee86 <AdatiWayReturn+0xf32>
					direction = direction+4;
 800e8a6:	69bb      	ldr	r3, [r7, #24]
 800e8a8:	3304      	adds	r3, #4
 800e8aa:	61bb      	str	r3, [r7, #24]
				}

				break;
 800e8ac:	e2eb      	b.n	800ee86 <AdatiWayReturn+0xf32>
			}


			if(Dijkstra_maker_flag==1){
 800e8ae:	4b9d      	ldr	r3, [pc, #628]	; (800eb24 <AdatiWayReturn+0xbd0>)
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	f040 8144 	bne.w	800eb40 <AdatiWayReturn+0xbec>
				// 移動の優先順位 ： 前→右→左→後
				mode.WallControlMode=1;
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET-(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e8c4:	6978      	ldr	r0, [r7, #20]
 800e8c6:	ed97 2a01 	vldr	s4, [r7, #4]
 800e8ca:	edd7 1a03 	vldr	s3, [r7, #12]
 800e8ce:	ed9f 1a91 	vldr	s2, [pc, #580]	; 800eb14 <AdatiWayReturn+0xbc0>
 800e8d2:	edd7 0a03 	vldr	s1, [r7, #12]
 800e8d6:	eeb3 0a0d 	vmov.f32	s0, #61	; 0x41e80000  29.0
 800e8da:	f7f4 fb7f 	bl	8002fdc <straight_table2>

				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e8de:	2003      	movs	r0, #3
 800e8e0:	f7f9 f818 	bl	8007914 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e8e4:	2003      	movs	r0, #3
 800e8e6:	f7f8 ffed 	bl	80078c4 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e8ea:	2064      	movs	r0, #100	; 0x64
 800e8ec:	f7f9 fb10 	bl	8007f10 <wait_ms_NoReset>
				create_DijkstraMap();
 800e8f0:	f002 fee2 	bl	80116b8 <create_DijkstraMap>
								if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e8f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e8f6:	2bff      	cmp	r3, #255	; 0xff
 800e8f8:	d10c      	bne.n	800e914 <AdatiWayReturn+0x9c0>
 800e8fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e8fc:	2bff      	cmp	r3, #255	; 0xff
 800e8fe:	d109      	bne.n	800e914 <AdatiWayReturn+0x9c0>
 800e900:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e902:	2bff      	cmp	r3, #255	; 0xff
 800e904:	d106      	bne.n	800e914 <AdatiWayReturn+0x9c0>
 800e906:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e908:	2bff      	cmp	r3, #255	; 0xff
 800e90a:	d103      	bne.n	800e914 <AdatiWayReturn+0x9c0>
								// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
									error_mode=1;
 800e90c:	4b86      	ldr	r3, [pc, #536]	; (800eb28 <AdatiWayReturn+0xbd4>)
 800e90e:	2201      	movs	r2, #1
 800e910:	701a      	strb	r2, [r3, #0]
									break;
 800e912:	e2bb      	b.n	800ee8c <AdatiWayReturn+0xf38>
								}
								if (x<0 || y<0 || x>15 || y>15){
 800e914:	6a3b      	ldr	r3, [r7, #32]
 800e916:	2b00      	cmp	r3, #0
 800e918:	db08      	blt.n	800e92c <AdatiWayReturn+0x9d8>
 800e91a:	69fb      	ldr	r3, [r7, #28]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	db05      	blt.n	800e92c <AdatiWayReturn+0x9d8>
 800e920:	6a3b      	ldr	r3, [r7, #32]
 800e922:	2b0f      	cmp	r3, #15
 800e924:	dc02      	bgt.n	800e92c <AdatiWayReturn+0x9d8>
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	2b0f      	cmp	r3, #15
 800e92a:	dd03      	ble.n	800e934 <AdatiWayReturn+0x9e0>
												// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
													error_mode=1;
 800e92c:	4b7e      	ldr	r3, [pc, #504]	; (800eb28 <AdatiWayReturn+0xbd4>)
 800e92e:	2201      	movs	r2, #1
 800e930:	701a      	strb	r2, [r3, #0]
													break;
 800e932:	e2ab      	b.n	800ee8c <AdatiWayReturn+0xf38>
								}
								mode.WallControlMode=0;
 800e934:	2300      	movs	r3, #0
 800e936:	753b      	strb	r3, [r7, #20]
								mode.WallCutMode=0;
 800e938:	2300      	movs	r3, #0
 800e93a:	75fb      	strb	r3, [r7, #23]
								mode.calMazeMode=0;
 800e93c:	2300      	movs	r3, #0
 800e93e:	75bb      	strb	r3, [r7, #22]
								if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e940:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e942:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e944:	429a      	cmp	r2, r3
 800e946:	d814      	bhi.n	800e972 <AdatiWayReturn+0xa1e>
 800e948:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e94a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d810      	bhi.n	800e972 <AdatiWayReturn+0xa1e>
 800e950:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e952:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e954:	429a      	cmp	r2, r3
 800e956:	d80c      	bhi.n	800e972 <AdatiWayReturn+0xa1e>
									// 直進
									straight_table2(90/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e958:	6978      	ldr	r0, [r7, #20]
 800e95a:	ed97 2a01 	vldr	s4, [r7, #4]
 800e95e:	edd7 1a03 	vldr	s3, [r7, #12]
 800e962:	ed97 1a03 	vldr	s2, [r7, #12]
 800e966:	eddf 0a6b 	vldr	s1, [pc, #428]	; 800eb14 <AdatiWayReturn+0xbc0>
 800e96a:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800eb2c <AdatiWayReturn+0xbd8>
 800e96e:	f7f4 fb35 	bl	8002fdc <straight_table2>
								}
								if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e972:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e974:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e976:	429a      	cmp	r2, r3
 800e978:	d230      	bcs.n	800e9dc <AdatiWayReturn+0xa88>
 800e97a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e97c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e97e:	429a      	cmp	r2, r3
 800e980:	d82c      	bhi.n	800e9dc <AdatiWayReturn+0xa88>
 800e982:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e984:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e986:	429a      	cmp	r2, r3
 800e988:	d828      	bhi.n	800e9dc <AdatiWayReturn+0xa88>
									// 右旋回
									turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800e98a:	edd7 7a02 	vldr	s15, [r7, #8]
 800e98e:	eef1 7a67 	vneg.f32	s15, s15
 800e992:	ed97 2a00 	vldr	s4, [r7]
 800e996:	eef0 1a67 	vmov.f32	s3, s15
 800e99a:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 800eb14 <AdatiWayReturn+0xbc0>
 800e99e:	eddf 0a5d 	vldr	s1, [pc, #372]	; 800eb14 <AdatiWayReturn+0xbc0>
 800e9a2:	ed9f 0a63 	vldr	s0, [pc, #396]	; 800eb30 <AdatiWayReturn+0xbdc>
 800e9a6:	f7f5 f827 	bl	80039f8 <turning_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e9aa:	2003      	movs	r0, #3
 800e9ac:	f7f8 ffb2 	bl	8007914 <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e9b0:	2003      	movs	r0, #3
 800e9b2:	f7f8 ff87 	bl	80078c4 <pl_L_DriveMotor_mode>
									wait_ms_NoReset(100);
 800e9b6:	2064      	movs	r0, #100	; 0x64
 800e9b8:	f7f9 faaa 	bl	8007f10 <wait_ms_NoReset>
									straight_table2(90/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e9bc:	6978      	ldr	r0, [r7, #20]
 800e9be:	ed97 2a01 	vldr	s4, [r7, #4]
 800e9c2:	edd7 1a03 	vldr	s3, [r7, #12]
 800e9c6:	ed97 1a03 	vldr	s2, [r7, #12]
 800e9ca:	eddf 0a52 	vldr	s1, [pc, #328]	; 800eb14 <AdatiWayReturn+0xbc0>
 800e9ce:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800eb2c <AdatiWayReturn+0xbd8>
 800e9d2:	f7f4 fb03 	bl	8002fdc <straight_table2>
									direction++;
 800e9d6:	69bb      	ldr	r3, [r7, #24]
 800e9d8:	3301      	adds	r3, #1
 800e9da:	61bb      	str	r3, [r7, #24]
								}
								if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e9dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e9e0:	429a      	cmp	r2, r3
 800e9e2:	d22c      	bcs.n	800ea3e <AdatiWayReturn+0xaea>
 800e9e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d228      	bcs.n	800ea3e <AdatiWayReturn+0xaea>
 800e9ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d824      	bhi.n	800ea3e <AdatiWayReturn+0xaea>
									// 左旋回
									turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e9f4:	ed97 2a00 	vldr	s4, [r7]
 800e9f8:	edd7 1a02 	vldr	s3, [r7, #8]
 800e9fc:	ed9f 1a45 	vldr	s2, [pc, #276]	; 800eb14 <AdatiWayReturn+0xbc0>
 800ea00:	eddf 0a44 	vldr	s1, [pc, #272]	; 800eb14 <AdatiWayReturn+0xbc0>
 800ea04:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 800eb34 <AdatiWayReturn+0xbe0>
 800ea08:	f7f4 fff6 	bl	80039f8 <turning_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ea0c:	2003      	movs	r0, #3
 800ea0e:	f7f8 ff81 	bl	8007914 <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ea12:	2003      	movs	r0, #3
 800ea14:	f7f8 ff56 	bl	80078c4 <pl_L_DriveMotor_mode>
									wait_ms_NoReset(100);
 800ea18:	2064      	movs	r0, #100	; 0x64
 800ea1a:	f7f9 fa79 	bl	8007f10 <wait_ms_NoReset>
									straight_table2(90/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ea1e:	6978      	ldr	r0, [r7, #20]
 800ea20:	ed97 2a01 	vldr	s4, [r7, #4]
 800ea24:	edd7 1a03 	vldr	s3, [r7, #12]
 800ea28:	ed97 1a03 	vldr	s2, [r7, #12]
 800ea2c:	eddf 0a39 	vldr	s1, [pc, #228]	; 800eb14 <AdatiWayReturn+0xbc0>
 800ea30:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 800eb2c <AdatiWayReturn+0xbd8>
 800ea34:	f7f4 fad2 	bl	8002fdc <straight_table2>
									direction--;
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	3b01      	subs	r3, #1
 800ea3c:	61bb      	str	r3, [r7, #24]
								}
								if(back_count < front_count && back_count < right_count
 800ea3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea42:	429a      	cmp	r2, r3
 800ea44:	f080 820d 	bcs.w	800ee62 <AdatiWayReturn+0xf0e>
 800ea48:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	f080 8208 	bcs.w	800ee62 <AdatiWayReturn+0xf0e>
										&& back_count < left_count){
 800ea52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea56:	429a      	cmp	r2, r3
 800ea58:	f080 8203 	bcs.w	800ee62 <AdatiWayReturn+0xf0e>
									//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
									no_safty = 1;
 800ea5c:	4b2c      	ldr	r3, [pc, #176]	; (800eb10 <AdatiWayReturn+0xbbc>)
 800ea5e:	2201      	movs	r2, #1
 800ea60:	701a      	strb	r2, [r3, #0]
									backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800ea62:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ea66:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800ea6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea6e:	4618      	mov	r0, r3
 800ea70:	edd7 0a00 	vldr	s1, [r7]
 800ea74:	ed97 0a02 	vldr	s0, [r7, #8]
 800ea78:	f7fb f9a4 	bl	8009dc4 <backTurn_controlWall>
									//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
									wait_ms_NoReset(100);
 800ea7c:	2064      	movs	r0, #100	; 0x64
 800ea7e:	f7f9 fa47 	bl	8007f10 <wait_ms_NoReset>
									no_safty = 0;
 800ea82:	4b23      	ldr	r3, [pc, #140]	; (800eb10 <AdatiWayReturn+0xbbc>)
 800ea84:	2200      	movs	r2, #0
 800ea86:	701a      	strb	r2, [r3, #0]
									//clear_Ierror();
									mode.WallControlMode=0;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	753b      	strb	r3, [r7, #20]
									if(front_wall){
 800ea8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d027      	beq.n	800eae4 <AdatiWayReturn+0xb90>
									straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800ea94:	6978      	ldr	r0, [r7, #20]
 800ea96:	ed9f 2a21 	vldr	s4, [pc, #132]	; 800eb1c <AdatiWayReturn+0xbc8>
 800ea9a:	eddf 1a21 	vldr	s3, [pc, #132]	; 800eb20 <AdatiWayReturn+0xbcc>
 800ea9e:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 800eb14 <AdatiWayReturn+0xbc0>
 800eaa2:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800eb14 <AdatiWayReturn+0xbc0>
 800eaa6:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800eb38 <AdatiWayReturn+0xbe4>
 800eaaa:	f7f4 fa97 	bl	8002fdc <straight_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800eaae:	2003      	movs	r0, #3
 800eab0:	f7f8 ff30 	bl	8007914 <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800eab4:	2003      	movs	r0, #3
 800eab6:	f7f8 ff05 	bl	80078c4 <pl_L_DriveMotor_mode>
									wait_ms_NoReset(100);
 800eaba:	2064      	movs	r0, #100	; 0x64
 800eabc:	f7f9 fa28 	bl	8007f10 <wait_ms_NoReset>

									clear_Ierror();
 800eac0:	f7f5 fd76 	bl	80045b0 <clear_Ierror>
									mode.WallControlMode=1;
 800eac4:	2301      	movs	r3, #1
 800eac6:	753b      	strb	r3, [r7, #20]
									straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eac8:	6978      	ldr	r0, [r7, #20]
 800eaca:	ed97 2a01 	vldr	s4, [r7, #4]
 800eace:	edd7 1a03 	vldr	s3, [r7, #12]
 800ead2:	ed97 1a03 	vldr	s2, [r7, #12]
 800ead6:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800eb14 <AdatiWayReturn+0xbc0>
 800eada:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800eb3c <AdatiWayReturn+0xbe8>
 800eade:	f7f4 fa7d 	bl	8002fdc <straight_table2>
 800eae2:	e010      	b.n	800eb06 <AdatiWayReturn+0xbb2>
									}else{
										clear_Ierror();
 800eae4:	f7f5 fd64 	bl	80045b0 <clear_Ierror>
										mode.WallControlMode=1;
 800eae8:	2301      	movs	r3, #1
 800eaea:	753b      	strb	r3, [r7, #20]
										straight_table2(90/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT),0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eaec:	6978      	ldr	r0, [r7, #20]
 800eaee:	ed97 2a01 	vldr	s4, [r7, #4]
 800eaf2:	edd7 1a03 	vldr	s3, [r7, #12]
 800eaf6:	ed97 1a03 	vldr	s2, [r7, #12]
 800eafa:	eddf 0a06 	vldr	s1, [pc, #24]	; 800eb14 <AdatiWayReturn+0xbc0>
 800eafe:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800eb2c <AdatiWayReturn+0xbd8>
 800eb02:	f7f4 fa6b 	bl	8002fdc <straight_table2>

									}
									//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
									direction = direction + 2;
 800eb06:	69bb      	ldr	r3, [r7, #24]
 800eb08:	3302      	adds	r3, #2
 800eb0a:	61bb      	str	r3, [r7, #24]
 800eb0c:	e1a9      	b.n	800ee62 <AdatiWayReturn+0xf0e>
 800eb0e:	bf00      	nop
 800eb10:	20000806 	.word	0x20000806
 800eb14:	00000000 	.word	0x00000000
 800eb18:	43340000 	.word	0x43340000
 800eb1c:	447a0000 	.word	0x447a0000
 800eb20:	c3160000 	.word	0xc3160000
 800eb24:	20000d2c 	.word	0x20000d2c
 800eb28:	20000807 	.word	0x20000807
 800eb2c:	42540000 	.word	0x42540000
 800eb30:	c2b40000 	.word	0xc2b40000
 800eb34:	42b40000 	.word	0x42b40000
 800eb38:	c1a40000 	.word	0xc1a40000
 800eb3c:	42830000 	.word	0x42830000
								}


			}else{

				if(know_mode==0){
 800eb40:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d102      	bne.n	800eb4e <AdatiWayReturn+0xbfa>
					kitikukan = 0;
 800eb48:	4b97      	ldr	r3, [pc, #604]	; (800eda8 <AdatiWayReturn+0xe54>)
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	601a      	str	r2, [r3, #0]
				}
			if (kitikukan == OFF) {
 800eb4e:	4b96      	ldr	r3, [pc, #600]	; (800eda8 <AdatiWayReturn+0xe54>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	f040 8142 	bne.w	800eddc <AdatiWayReturn+0xe88>

				// 移動の優先順位 ： 前→右→左→後
				if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800eb58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eb5a:	2bff      	cmp	r3, #255	; 0xff
 800eb5c:	d10c      	bne.n	800eb78 <AdatiWayReturn+0xc24>
 800eb5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb60:	2bff      	cmp	r3, #255	; 0xff
 800eb62:	d109      	bne.n	800eb78 <AdatiWayReturn+0xc24>
 800eb64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb66:	2bff      	cmp	r3, #255	; 0xff
 800eb68:	d106      	bne.n	800eb78 <AdatiWayReturn+0xc24>
 800eb6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eb6c:	2bff      	cmp	r3, #255	; 0xff
 800eb6e:	d103      	bne.n	800eb78 <AdatiWayReturn+0xc24>
				// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

					error_mode=1;
 800eb70:	4b8e      	ldr	r3, [pc, #568]	; (800edac <AdatiWayReturn+0xe58>)
 800eb72:	2201      	movs	r2, #1
 800eb74:	701a      	strb	r2, [r3, #0]
					break;
 800eb76:	e189      	b.n	800ee8c <AdatiWayReturn+0xf38>
				}
				if (x<0 || y<0 || x>15 || y>15){
 800eb78:	6a3b      	ldr	r3, [r7, #32]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	db08      	blt.n	800eb90 <AdatiWayReturn+0xc3c>
 800eb7e:	69fb      	ldr	r3, [r7, #28]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	db05      	blt.n	800eb90 <AdatiWayReturn+0xc3c>
 800eb84:	6a3b      	ldr	r3, [r7, #32]
 800eb86:	2b0f      	cmp	r3, #15
 800eb88:	dc02      	bgt.n	800eb90 <AdatiWayReturn+0xc3c>
 800eb8a:	69fb      	ldr	r3, [r7, #28]
 800eb8c:	2b0f      	cmp	r3, #15
 800eb8e:	dd03      	ble.n	800eb98 <AdatiWayReturn+0xc44>
								// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

									error_mode=1;
 800eb90:	4b86      	ldr	r3, [pc, #536]	; (800edac <AdatiWayReturn+0xe58>)
 800eb92:	2201      	movs	r2, #1
 800eb94:	701a      	strb	r2, [r3, #0]
									break;
 800eb96:	e179      	b.n	800ee8c <AdatiWayReturn+0xf38>
				}
				if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800eb98:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800eb9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d81a      	bhi.n	800ebd6 <AdatiWayReturn+0xc82>
 800eba0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800eba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d816      	bhi.n	800ebd6 <AdatiWayReturn+0xc82>
 800eba8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ebaa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d812      	bhi.n	800ebd6 <AdatiWayReturn+0xc82>
					// 直進
					mode.WallControlMode=1;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	75fb      	strb	r3, [r7, #23]
					straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ebbc:	6978      	ldr	r0, [r7, #20]
 800ebbe:	ed97 2a01 	vldr	s4, [r7, #4]
 800ebc2:	edd7 1a03 	vldr	s3, [r7, #12]
 800ebc6:	ed97 1a03 	vldr	s2, [r7, #12]
 800ebca:	edd7 0a03 	vldr	s1, [r7, #12]
 800ebce:	ed9f 0a78 	vldr	s0, [pc, #480]	; 800edb0 <AdatiWayReturn+0xe5c>
 800ebd2:	f7f4 fa03 	bl	8002fdc <straight_table2>
				}
				if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800ebd6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ebd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d22c      	bcs.n	800ec38 <AdatiWayReturn+0xce4>
 800ebde:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ebe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	d828      	bhi.n	800ec38 <AdatiWayReturn+0xce4>
 800ebe6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ebe8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d824      	bhi.n	800ec38 <AdatiWayReturn+0xce4>
					// 右旋回
					if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ebee:	6a3b      	ldr	r3, [r7, #32]
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d002      	beq.n	800ebfa <AdatiWayReturn+0xca6>
 800ebf4:	6a3b      	ldr	r3, [r7, #32]
 800ebf6:	2b02      	cmp	r3, #2
 800ebf8:	d109      	bne.n	800ec0e <AdatiWayReturn+0xcba>
 800ebfa:	69fb      	ldr	r3, [r7, #28]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d002      	beq.n	800ec06 <AdatiWayReturn+0xcb2>
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d103      	bne.n	800ec0e <AdatiWayReturn+0xcba>
						noGoalPillarMode=1;
 800ec06:	4b6b      	ldr	r3, [pc, #428]	; (800edb4 <AdatiWayReturn+0xe60>)
 800ec08:	2201      	movs	r2, #1
 800ec0a:	701a      	strb	r2, [r3, #0]
 800ec0c:	e002      	b.n	800ec14 <AdatiWayReturn+0xcc0>
					}else{
						noGoalPillarMode=0;
 800ec0e:	4b69      	ldr	r3, [pc, #420]	; (800edb4 <AdatiWayReturn+0xe60>)
 800ec10:	2200      	movs	r2, #0
 800ec12:	701a      	strb	r2, [r3, #0]
					}
					slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800ec14:	4b68      	ldr	r3, [pc, #416]	; (800edb8 <AdatiWayReturn+0xe64>)
 800ec16:	2200      	movs	r2, #0
 800ec18:	9203      	str	r2, [sp, #12]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	9202      	str	r2, [sp, #8]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	9201      	str	r2, [sp, #4]
 800ec22:	699a      	ldr	r2, [r3, #24]
 800ec24:	9200      	str	r2, [sp, #0]
 800ec26:	3308      	adds	r3, #8
 800ec28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ec2a:	ed97 0a03 	vldr	s0, [r7, #12]
 800ec2e:	f7fb f993 	bl	8009f58 <slalomR>
					direction++;
 800ec32:	69bb      	ldr	r3, [r7, #24]
 800ec34:	3301      	adds	r3, #1
 800ec36:	61bb      	str	r3, [r7, #24]
				}
				if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800ec38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d22c      	bcs.n	800ec9a <AdatiWayReturn+0xd46>
 800ec40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d228      	bcs.n	800ec9a <AdatiWayReturn+0xd46>
 800ec48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d824      	bhi.n	800ec9a <AdatiWayReturn+0xd46>
					// 左旋回
					if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ec50:	6a3b      	ldr	r3, [r7, #32]
 800ec52:	2b01      	cmp	r3, #1
 800ec54:	d002      	beq.n	800ec5c <AdatiWayReturn+0xd08>
 800ec56:	6a3b      	ldr	r3, [r7, #32]
 800ec58:	2b02      	cmp	r3, #2
 800ec5a:	d109      	bne.n	800ec70 <AdatiWayReturn+0xd1c>
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d002      	beq.n	800ec68 <AdatiWayReturn+0xd14>
 800ec62:	69fb      	ldr	r3, [r7, #28]
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d103      	bne.n	800ec70 <AdatiWayReturn+0xd1c>
						noGoalPillarMode=1;
 800ec68:	4b52      	ldr	r3, [pc, #328]	; (800edb4 <AdatiWayReturn+0xe60>)
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	701a      	strb	r2, [r3, #0]
 800ec6e:	e002      	b.n	800ec76 <AdatiWayReturn+0xd22>
					}else{
						noGoalPillarMode=0;
 800ec70:	4b50      	ldr	r3, [pc, #320]	; (800edb4 <AdatiWayReturn+0xe60>)
 800ec72:	2200      	movs	r2, #0
 800ec74:	701a      	strb	r2, [r3, #0]
					}
					slalomL(speed300_exploration.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800ec76:	4b50      	ldr	r3, [pc, #320]	; (800edb8 <AdatiWayReturn+0xe64>)
 800ec78:	2200      	movs	r2, #0
 800ec7a:	9203      	str	r2, [sp, #12]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	9202      	str	r2, [sp, #8]
 800ec80:	2200      	movs	r2, #0
 800ec82:	9201      	str	r2, [sp, #4]
 800ec84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec86:	9200      	str	r2, [sp, #0]
 800ec88:	331c      	adds	r3, #28
 800ec8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ec8c:	ed97 0a03 	vldr	s0, [r7, #12]
 800ec90:	f7fb fb48 	bl	800a324 <slalomL>
					direction--;
 800ec94:	69bb      	ldr	r3, [r7, #24]
 800ec96:	3b01      	subs	r3, #1
 800ec98:	61bb      	str	r3, [r7, #24]
				}
				if(back_count < front_count && back_count < right_count
 800ec9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ec9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	f080 80df 	bcs.w	800ee62 <AdatiWayReturn+0xf0e>
 800eca4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eca6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	f080 80da 	bcs.w	800ee62 <AdatiWayReturn+0xf0e>
						&& back_count < left_count){
 800ecae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ecb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	f080 80d5 	bcs.w	800ee62 <AdatiWayReturn+0xf0e>
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					mode.WallControlMode=1;
 800ecb8:	2301      	movs	r3, #1
 800ecba:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	75fb      	strb	r3, [r7, #23]
					straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800ecc4:	6978      	ldr	r0, [r7, #20]
 800ecc6:	ed97 2a01 	vldr	s4, [r7, #4]
 800ecca:	edd7 1a03 	vldr	s3, [r7, #12]
 800ecce:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 800edbc <AdatiWayReturn+0xe68>
 800ecd2:	edd7 0a03 	vldr	s1, [r7, #12]
 800ecd6:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800edd8 <AdatiWayReturn+0xe84>
 800ecda:	f7f4 f97f 	bl	8002fdc <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ecde:	2003      	movs	r0, #3
 800ece0:	f7f8 fe18 	bl	8007914 <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ece4:	2003      	movs	r0, #3
 800ece6:	f7f8 fded 	bl	80078c4 <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800ecea:	2064      	movs	r0, #100	; 0x64
 800ecec:	f7f9 f910 	bl	8007f10 <wait_ms_NoReset>
					create_DijkstraMap();
 800ecf0:	f002 fce2 	bl	80116b8 <create_DijkstraMap>
					no_safty = 1;
 800ecf4:	4b32      	ldr	r3, [pc, #200]	; (800edc0 <AdatiWayReturn+0xe6c>)
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	701a      	strb	r2, [r3, #0]
					backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800ecfa:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ecfe:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800ed02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed06:	4618      	mov	r0, r3
 800ed08:	edd7 0a00 	vldr	s1, [r7]
 800ed0c:	ed97 0a02 	vldr	s0, [r7, #8]
 800ed10:	f7fb f858 	bl	8009dc4 <backTurn_controlWall>
					//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
					wait_ms_NoReset(100);
 800ed14:	2064      	movs	r0, #100	; 0x64
 800ed16:	f7f9 f8fb 	bl	8007f10 <wait_ms_NoReset>
					no_safty = 0;
 800ed1a:	4b29      	ldr	r3, [pc, #164]	; (800edc0 <AdatiWayReturn+0xe6c>)
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	701a      	strb	r2, [r3, #0]
					//clear_Ierror();
					mode.WallControlMode=0;
 800ed20:	2300      	movs	r3, #0
 800ed22:	753b      	strb	r3, [r7, #20]
					if(front_wall){
 800ed24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d027      	beq.n	800ed7c <AdatiWayReturn+0xe28>
					straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800ed2c:	6978      	ldr	r0, [r7, #20]
 800ed2e:	ed9f 2a25 	vldr	s4, [pc, #148]	; 800edc4 <AdatiWayReturn+0xe70>
 800ed32:	eddf 1a25 	vldr	s3, [pc, #148]	; 800edc8 <AdatiWayReturn+0xe74>
 800ed36:	ed9f 1a21 	vldr	s2, [pc, #132]	; 800edbc <AdatiWayReturn+0xe68>
 800ed3a:	eddf 0a20 	vldr	s1, [pc, #128]	; 800edbc <AdatiWayReturn+0xe68>
 800ed3e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800edcc <AdatiWayReturn+0xe78>
 800ed42:	f7f4 f94b 	bl	8002fdc <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ed46:	2003      	movs	r0, #3
 800ed48:	f7f8 fde4 	bl	8007914 <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ed4c:	2003      	movs	r0, #3
 800ed4e:	f7f8 fdb9 	bl	80078c4 <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800ed52:	2064      	movs	r0, #100	; 0x64
 800ed54:	f7f9 f8dc 	bl	8007f10 <wait_ms_NoReset>

					clear_Ierror();
 800ed58:	f7f5 fc2a 	bl	80045b0 <clear_Ierror>
					mode.WallControlMode=1;
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	753b      	strb	r3, [r7, #20]
					straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ed60:	6978      	ldr	r0, [r7, #20]
 800ed62:	ed97 2a01 	vldr	s4, [r7, #4]
 800ed66:	edd7 1a03 	vldr	s3, [r7, #12]
 800ed6a:	ed97 1a03 	vldr	s2, [r7, #12]
 800ed6e:	eddf 0a13 	vldr	s1, [pc, #76]	; 800edbc <AdatiWayReturn+0xe68>
 800ed72:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800edd0 <AdatiWayReturn+0xe7c>
 800ed76:	f7f4 f931 	bl	8002fdc <straight_table2>
 800ed7a:	e010      	b.n	800ed9e <AdatiWayReturn+0xe4a>
					}else{
						clear_Ierror();
 800ed7c:	f7f5 fc18 	bl	80045b0 <clear_Ierror>
						mode.WallControlMode=1;
 800ed80:	2301      	movs	r3, #1
 800ed82:	753b      	strb	r3, [r7, #20]
						straight_table2(90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ed84:	6978      	ldr	r0, [r7, #20]
 800ed86:	ed97 2a01 	vldr	s4, [r7, #4]
 800ed8a:	edd7 1a03 	vldr	s3, [r7, #12]
 800ed8e:	ed97 1a03 	vldr	s2, [r7, #12]
 800ed92:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800edbc <AdatiWayReturn+0xe68>
 800ed96:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800edd4 <AdatiWayReturn+0xe80>
 800ed9a:	f7f4 f91f 	bl	8002fdc <straight_table2>

					}
					//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
					direction = direction + 2;
 800ed9e:	69bb      	ldr	r3, [r7, #24]
 800eda0:	3302      	adds	r3, #2
 800eda2:	61bb      	str	r3, [r7, #24]
 800eda4:	e05d      	b.n	800ee62 <AdatiWayReturn+0xf0e>
 800eda6:	bf00      	nop
 800eda8:	20000838 	.word	0x20000838
 800edac:	20000807 	.word	0x20000807
 800edb0:	42a40000 	.word	0x42a40000
 800edb4:	20000529 	.word	0x20000529
 800edb8:	2000ef80 	.word	0x2000ef80
 800edbc:	00000000 	.word	0x00000000
 800edc0:	20000806 	.word	0x20000806
 800edc4:	447a0000 	.word	0x447a0000
 800edc8:	c3160000 	.word	0xc3160000
 800edcc:	c1a40000 	.word	0xc1a40000
 800edd0:	42830000 	.word	0x42830000
 800edd4:	42340000 	.word	0x42340000
 800edd8:	42140000 	.word	0x42140000

				}

			} else {
				mode.WallControlMode=1;
 800eddc:	2301      	movs	r3, #1
 800edde:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800ede0:	2301      	movs	r3, #1
 800ede2:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800ede4:	2300      	movs	r3, #0
 800ede6:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ede8:	6978      	ldr	r0, [r7, #20]
 800edea:	ed97 2a01 	vldr	s4, [r7, #4]
 800edee:	edd7 1a03 	vldr	s3, [r7, #12]
 800edf2:	ed97 1a03 	vldr	s2, [r7, #12]
 800edf6:	edd7 0a03 	vldr	s1, [r7, #12]
 800edfa:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800edd8 <AdatiWayReturn+0xe84>
 800edfe:	f7f4 f8ed 	bl	8002fdc <straight_table2>
				compress_kitiku(&x,&y,&direction);
 800ee02:	f107 0218 	add.w	r2, r7, #24
 800ee06:	f107 011c 	add.w	r1, r7, #28
 800ee0a:	f107 0320 	add.w	r3, r7, #32
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f001 fbce 	bl	80105b0 <compress_kitiku>
				mode.WallCutMode=0;
 800ee14:	2300      	movs	r3, #0
 800ee16:	75fb      	strb	r3, [r7, #23]
				End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800ee18:	2201      	movs	r2, #1
 800ee1a:	2101      	movs	r1, #1
 800ee1c:	6978      	ldr	r0, [r7, #20]
 800ee1e:	ed1f 0a12 	vldr	s0, [pc, #-72]	; 800edd8 <AdatiWayReturn+0xe84>
 800ee22:	f7f4 fd85 	bl	8003930 <End_straight>
				mode.WallControlMode=1;
 800ee26:	2301      	movs	r3, #1
 800ee28:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	75fb      	strb	r3, [r7, #23]
				straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,1000,input_StraightAcceleration, mode);
 800ee32:	4b28      	ldr	r3, [pc, #160]	; (800eed4 <AdatiWayReturn+0xf80>)
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	4613      	mov	r3, r2
 800ee38:	005b      	lsls	r3, r3, #1
 800ee3a:	4413      	add	r3, r2
 800ee3c:	011a      	lsls	r2, r3, #4
 800ee3e:	1ad3      	subs	r3, r2, r3
 800ee40:	ee07 3a90 	vmov	s15, r3
 800ee44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee48:	6978      	ldr	r0, [r7, #20]
 800ee4a:	ed97 2a01 	vldr	s4, [r7, #4]
 800ee4e:	eddf 1a22 	vldr	s3, [pc, #136]	; 800eed8 <AdatiWayReturn+0xf84>
 800ee52:	ed97 1a03 	vldr	s2, [r7, #12]
 800ee56:	edd7 0a03 	vldr	s1, [r7, #12]
 800ee5a:	eeb0 0a67 	vmov.f32	s0, s15
 800ee5e:	f7f4 f8bd 	bl	8002fdc <straight_table2>

			}
			}

			if (direction >= 5) {
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	2b04      	cmp	r3, #4
 800ee66:	dd02      	ble.n	800ee6e <AdatiWayReturn+0xf1a>
				direction = direction-4;
 800ee68:	69bb      	ldr	r3, [r7, #24]
 800ee6a:	3b04      	subs	r3, #4
 800ee6c:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800ee6e:	69bb      	ldr	r3, [r7, #24]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	dc02      	bgt.n	800ee7a <AdatiWayReturn+0xf26>
				direction = direction+4;
 800ee74:	69bb      	ldr	r3, [r7, #24]
 800ee76:	3304      	adds	r3, #4
 800ee78:	61bb      	str	r3, [r7, #24]
	//基地区間**********************************************************************
	//		if (know_road == 1) {
	//			most_speed_kitikukan_play(850, 1600);
	//		}
	//基地区間
			if(error_mode==1){break;}
 800ee7a:	4b18      	ldr	r3, [pc, #96]	; (800eedc <AdatiWayReturn+0xf88>)
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	d003      	beq.n	800ee8a <AdatiWayReturn+0xf36>
		update_coordinate(&x,&y,direction);
 800ee82:	f7ff bbff 	b.w	800e684 <AdatiWayReturn+0x730>
				break;
 800ee86:	bf00      	nop
 800ee88:	e000      	b.n	800ee8c <AdatiWayReturn+0xf38>
			if(error_mode==1){break;}
 800ee8a:	bf00      	nop
		}

	pl_DriveMotor_standby(OFF); //MTU2.TSTR.BIT.CST0 = 0;
 800ee8c:	2000      	movs	r0, #0
 800ee8e:	f7f8 fd0f 	bl	80078b0 <pl_DriveMotor_standby>
	maze_mode = 0;
 800ee92:	4b13      	ldr	r3, [pc, #76]	; (800eee0 <AdatiWayReturn+0xf8c>)
 800ee94:	2200      	movs	r2, #0
 800ee96:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800ee98:	2064      	movs	r0, #100	; 0x64
 800ee9a:	f009 ff3f 	bl	8018d1c <HAL_Delay>
	maze_display();
 800ee9e:	f005 ffb1 	bl	8014e04 <maze_display>
	create_StepCountMap_queue();
 800eea2:	f005 f98b 	bl	80141bc <create_StepCountMap_queue>
	if(walk_count[0][0] == 255){
 800eea6:	4b0f      	ldr	r3, [pc, #60]	; (800eee4 <AdatiWayReturn+0xf90>)
 800eea8:	881b      	ldrh	r3, [r3, #0]
 800eeaa:	2bff      	cmp	r3, #255	; 0xff
 800eeac:	d102      	bne.n	800eeb4 <AdatiWayReturn+0xf60>
		error_mode = 1;
 800eeae:	4b0b      	ldr	r3, [pc, #44]	; (800eedc <AdatiWayReturn+0xf88>)
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	701a      	strb	r2, [r3, #0]
	}
	if (error_mode == 0) {
 800eeb4:	4b09      	ldr	r3, [pc, #36]	; (800eedc <AdatiWayReturn+0xf88>)
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d102      	bne.n	800eec2 <AdatiWayReturn+0xf6e>
		record_in();
 800eebc:	f7f8 fa06 	bl	80072cc <record_in>
	} else {
		record_out();
	}

}
 800eec0:	e001      	b.n	800eec6 <AdatiWayReturn+0xf72>
		record_out();
 800eec2:	f7f8 fabf 	bl	8007444 <record_out>
}
 800eec6:	bf00      	nop
 800eec8:	3734      	adds	r7, #52	; 0x34
 800eeca:	46bd      	mov	sp, r7
 800eecc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800eed0:	b004      	add	sp, #16
 800eed2:	4770      	bx	lr
 800eed4:	2000082c 	.word	0x2000082c
 800eed8:	447a0000 	.word	0x447a0000
 800eedc:	20000807 	.word	0x20000807
 800eee0:	20000834 	.word	0x20000834
 800eee4:	20000d30 	.word	0x20000d30

0800eee8 <pass_maker_Dijkstra>:





void pass_maker_Dijkstra(void){
 800eee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eeea:	b08b      	sub	sp, #44	; 0x2c
 800eeec:	af04      	add	r7, sp, #16

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 800eeee:	2300      	movs	r3, #0
 800eef0:	607b      	str	r3, [r7, #4]
	int y = 0;
 800eef2:	2300      	movs	r3, #0
 800eef4:	603b      	str	r3, [r7, #0]
	int direction = 1;
 800eef6:	2301      	movs	r3, #1
 800eef8:	617b      	str	r3, [r7, #20]
	pass_count = 0;
 800eefa:	4b8b      	ldr	r3, [pc, #556]	; (800f128 <pass_maker_Dijkstra+0x240>)
 800eefc:	2200      	movs	r2, #0
 800eefe:	701a      	strb	r2, [r3, #0]
	create_DijkstraMap();
 800ef00:	f002 fbda 	bl	80116b8 <create_DijkstraMap>
	maze_display_Dijkstra();
 800ef04:	f006 f89c 	bl	8015040 <maze_display_Dijkstra>
	pass[0] = 1;
 800ef08:	4b88      	ldr	r3, [pc, #544]	; (800f12c <pass_maker_Dijkstra+0x244>)
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	601a      	str	r2, [r3, #0]
	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 800ef0e:	4639      	mov	r1, r7
 800ef10:	1d3b      	adds	r3, r7, #4
 800ef12:	697a      	ldr	r2, [r7, #20]
 800ef14:	4618      	mov	r0, r3
 800ef16:	f7fe ffe9 	bl	800deec <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2b01      	cmp	r3, #1
 800ef1e:	d002      	beq.n	800ef26 <pass_maker_Dijkstra+0x3e>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2b02      	cmp	r3, #2
 800ef24:	d13a      	bne.n	800ef9c <pass_maker_Dijkstra+0xb4>
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d002      	beq.n	800ef32 <pass_maker_Dijkstra+0x4a>
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	2b01      	cmp	r3, #1
 800ef30:	d134      	bne.n	800ef9c <pass_maker_Dijkstra+0xb4>

			if (pass[pass_count] >= 0) {
 800ef32:	4b7d      	ldr	r3, [pc, #500]	; (800f128 <pass_maker_Dijkstra+0x240>)
 800ef34:	781b      	ldrb	r3, [r3, #0]
 800ef36:	461a      	mov	r2, r3
 800ef38:	4b7c      	ldr	r3, [pc, #496]	; (800f12c <pass_maker_Dijkstra+0x244>)
 800ef3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	da05      	bge.n	800ef4e <pass_maker_Dijkstra+0x66>
					} else {
						pass_count++;
 800ef42:	4b79      	ldr	r3, [pc, #484]	; (800f128 <pass_maker_Dijkstra+0x240>)
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	3301      	adds	r3, #1
 800ef48:	b2da      	uxtb	r2, r3
 800ef4a:	4b77      	ldr	r3, [pc, #476]	; (800f128 <pass_maker_Dijkstra+0x240>)
 800ef4c:	701a      	strb	r2, [r3, #0]
					}
					pass[pass_count] = pass[pass_count] + 1;
 800ef4e:	4b76      	ldr	r3, [pc, #472]	; (800f128 <pass_maker_Dijkstra+0x240>)
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	461a      	mov	r2, r3
 800ef54:	4b75      	ldr	r3, [pc, #468]	; (800f12c <pass_maker_Dijkstra+0x244>)
 800ef56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef5a:	4a73      	ldr	r2, [pc, #460]	; (800f128 <pass_maker_Dijkstra+0x240>)
 800ef5c:	7812      	ldrb	r2, [r2, #0]
 800ef5e:	4611      	mov	r1, r2
 800ef60:	3301      	adds	r3, #1
 800ef62:	4a72      	ldr	r2, [pc, #456]	; (800f12c <pass_maker_Dijkstra+0x244>)
 800ef64:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//			wait(10);
		//			maze_display();
		//			x = 0;
		//			y = 0;
					direction = direction + 2;
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	3302      	adds	r3, #2
 800ef6c:	617b      	str	r3, [r7, #20]
					if (direction == 5) {
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	2b05      	cmp	r3, #5
 800ef72:	d101      	bne.n	800ef78 <pass_maker_Dijkstra+0x90>
						direction = 1;
 800ef74:	2301      	movs	r3, #1
 800ef76:	617b      	str	r3, [r7, #20]
					}
					if (direction == 6) {
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	2b06      	cmp	r3, #6
 800ef7c:	d101      	bne.n	800ef82 <pass_maker_Dijkstra+0x9a>
						direction = 2;
 800ef7e:	2302      	movs	r3, #2
 800ef80:	617b      	str	r3, [r7, #20]
					}
					if (direction == 0) {
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d101      	bne.n	800ef8c <pass_maker_Dijkstra+0xa4>
						direction = 4;
 800ef88:	2304      	movs	r3, #4
 800ef8a:	617b      	str	r3, [r7, #20]
					}
					if (direction == -1) {
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef92:	f040 80c2 	bne.w	800f11a <pass_maker_Dijkstra+0x232>
						direction = 3;
 800ef96:	2303      	movs	r3, #3
 800ef98:	617b      	str	r3, [r7, #20]
					}
					break;
 800ef9a:	e0be      	b.n	800f11a <pass_maker_Dijkstra+0x232>

		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	6839      	ldr	r1, [r7, #0]
 800efa0:	f107 020b 	add.w	r2, r7, #11
 800efa4:	f107 0309 	add.w	r3, r7, #9
 800efa8:	9301      	str	r3, [sp, #4]
 800efaa:	f107 030a 	add.w	r3, r7, #10
 800efae:	9300      	str	r3, [sp, #0]
 800efb0:	4613      	mov	r3, r2
 800efb2:	697a      	ldr	r2, [r7, #20]
 800efb4:	f001 ff64 	bl	8010e80 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	683a      	ldr	r2, [r7, #0]
 800efbc:	f107 060c 	add.w	r6, r7, #12
 800efc0:	f107 050e 	add.w	r5, r7, #14
 800efc4:	f107 0410 	add.w	r4, r7, #16
 800efc8:	f107 0012 	add.w	r0, r7, #18
 800efcc:	6979      	ldr	r1, [r7, #20]
 800efce:	9102      	str	r1, [sp, #8]
 800efd0:	9201      	str	r2, [sp, #4]
 800efd2:	9300      	str	r3, [sp, #0]
 800efd4:	4633      	mov	r3, r6
 800efd6:	462a      	mov	r2, r5
 800efd8:	4621      	mov	r1, r4
 800efda:	f002 fad3 	bl	8011584 <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 800efde:	7afb      	ldrb	r3, [r7, #11]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d002      	beq.n	800efea <pass_maker_Dijkstra+0x102>
 800efe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800efe8:	827b      	strh	r3, [r7, #18]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 800efea:	7abb      	ldrb	r3, [r7, #10]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d002      	beq.n	800eff6 <pass_maker_Dijkstra+0x10e>
 800eff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eff4:	823b      	strh	r3, [r7, #16]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 800eff6:	7a7b      	ldrb	r3, [r7, #9]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d002      	beq.n	800f002 <pass_maker_Dijkstra+0x11a>
 800effc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f000:	81bb      	strh	r3, [r7, #12]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 800f002:	8a7b      	ldrh	r3, [r7, #18]
 800f004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f008:	4293      	cmp	r3, r2
 800f00a:	d10e      	bne.n	800f02a <pass_maker_Dijkstra+0x142>
 800f00c:	8a3b      	ldrh	r3, [r7, #16]
 800f00e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f012:	4293      	cmp	r3, r2
 800f014:	d109      	bne.n	800f02a <pass_maker_Dijkstra+0x142>
 800f016:	89bb      	ldrh	r3, [r7, #12]
 800f018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d104      	bne.n	800f02a <pass_maker_Dijkstra+0x142>
 800f020:	89fb      	ldrh	r3, [r7, #14]
 800f022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f026:	4293      	cmp	r3, r2
 800f028:	d079      	beq.n	800f11e <pass_maker_Dijkstra+0x236>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800f02a:	8a7a      	ldrh	r2, [r7, #18]
 800f02c:	8a3b      	ldrh	r3, [r7, #16]
 800f02e:	429a      	cmp	r2, r3
 800f030:	d822      	bhi.n	800f078 <pass_maker_Dijkstra+0x190>
 800f032:	8a7a      	ldrh	r2, [r7, #18]
 800f034:	89bb      	ldrh	r3, [r7, #12]
 800f036:	429a      	cmp	r2, r3
 800f038:	d81e      	bhi.n	800f078 <pass_maker_Dijkstra+0x190>
 800f03a:	8a7a      	ldrh	r2, [r7, #18]
 800f03c:	89fb      	ldrh	r3, [r7, #14]
 800f03e:	429a      	cmp	r2, r3
 800f040:	d81a      	bhi.n	800f078 <pass_maker_Dijkstra+0x190>
			// 直進
			if (pass[pass_count] >= 0) {} else {pass_count++;}
 800f042:	4b39      	ldr	r3, [pc, #228]	; (800f128 <pass_maker_Dijkstra+0x240>)
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	461a      	mov	r2, r3
 800f048:	4b38      	ldr	r3, [pc, #224]	; (800f12c <pass_maker_Dijkstra+0x244>)
 800f04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	da05      	bge.n	800f05e <pass_maker_Dijkstra+0x176>
 800f052:	4b35      	ldr	r3, [pc, #212]	; (800f128 <pass_maker_Dijkstra+0x240>)
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	3301      	adds	r3, #1
 800f058:	b2da      	uxtb	r2, r3
 800f05a:	4b33      	ldr	r3, [pc, #204]	; (800f128 <pass_maker_Dijkstra+0x240>)
 800f05c:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = pass[pass_count] + 2;
 800f05e:	4b32      	ldr	r3, [pc, #200]	; (800f128 <pass_maker_Dijkstra+0x240>)
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	461a      	mov	r2, r3
 800f064:	4b31      	ldr	r3, [pc, #196]	; (800f12c <pass_maker_Dijkstra+0x244>)
 800f066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f06a:	4a2f      	ldr	r2, [pc, #188]	; (800f128 <pass_maker_Dijkstra+0x240>)
 800f06c:	7812      	ldrb	r2, [r2, #0]
 800f06e:	4611      	mov	r1, r2
 800f070:	3302      	adds	r3, #2
 800f072:	4a2e      	ldr	r2, [pc, #184]	; (800f12c <pass_maker_Dijkstra+0x244>)
 800f074:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800f078:	8a3a      	ldrh	r2, [r7, #16]
 800f07a:	8a7b      	ldrh	r3, [r7, #18]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d218      	bcs.n	800f0b2 <pass_maker_Dijkstra+0x1ca>
 800f080:	8a3a      	ldrh	r2, [r7, #16]
 800f082:	89bb      	ldrh	r3, [r7, #12]
 800f084:	429a      	cmp	r2, r3
 800f086:	d814      	bhi.n	800f0b2 <pass_maker_Dijkstra+0x1ca>
 800f088:	8a3a      	ldrh	r2, [r7, #16]
 800f08a:	89fb      	ldrh	r3, [r7, #14]
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d810      	bhi.n	800f0b2 <pass_maker_Dijkstra+0x1ca>
			// 右旋回
			pass_count++;
 800f090:	4b25      	ldr	r3, [pc, #148]	; (800f128 <pass_maker_Dijkstra+0x240>)
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	3301      	adds	r3, #1
 800f096:	b2da      	uxtb	r2, r3
 800f098:	4b23      	ldr	r3, [pc, #140]	; (800f128 <pass_maker_Dijkstra+0x240>)
 800f09a:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -2;
 800f09c:	4b22      	ldr	r3, [pc, #136]	; (800f128 <pass_maker_Dijkstra+0x240>)
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	4b22      	ldr	r3, [pc, #136]	; (800f12c <pass_maker_Dijkstra+0x244>)
 800f0a4:	f06f 0201 	mvn.w	r2, #1
 800f0a8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction++;
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	617b      	str	r3, [r7, #20]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800f0b2:	89ba      	ldrh	r2, [r7, #12]
 800f0b4:	8a7b      	ldrh	r3, [r7, #18]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d218      	bcs.n	800f0ec <pass_maker_Dijkstra+0x204>
 800f0ba:	89ba      	ldrh	r2, [r7, #12]
 800f0bc:	8a3b      	ldrh	r3, [r7, #16]
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d214      	bcs.n	800f0ec <pass_maker_Dijkstra+0x204>
 800f0c2:	89ba      	ldrh	r2, [r7, #12]
 800f0c4:	89fb      	ldrh	r3, [r7, #14]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d810      	bhi.n	800f0ec <pass_maker_Dijkstra+0x204>
			// 左旋回
			pass_count++;
 800f0ca:	4b17      	ldr	r3, [pc, #92]	; (800f128 <pass_maker_Dijkstra+0x240>)
 800f0cc:	781b      	ldrb	r3, [r3, #0]
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	b2da      	uxtb	r2, r3
 800f0d2:	4b15      	ldr	r3, [pc, #84]	; (800f128 <pass_maker_Dijkstra+0x240>)
 800f0d4:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -3;
 800f0d6:	4b14      	ldr	r3, [pc, #80]	; (800f128 <pass_maker_Dijkstra+0x240>)
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	4619      	mov	r1, r3
 800f0dc:	4b13      	ldr	r3, [pc, #76]	; (800f12c <pass_maker_Dijkstra+0x244>)
 800f0de:	f06f 0202 	mvn.w	r2, #2
 800f0e2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction--;
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	3b01      	subs	r3, #1
 800f0ea:	617b      	str	r3, [r7, #20]
		}

		if (direction == 5) {
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	2b05      	cmp	r3, #5
 800f0f0:	d101      	bne.n	800f0f6 <pass_maker_Dijkstra+0x20e>
			direction = 1;
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	617b      	str	r3, [r7, #20]
		}
		if (direction == 6) {
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	2b06      	cmp	r3, #6
 800f0fa:	d101      	bne.n	800f100 <pass_maker_Dijkstra+0x218>
			direction = 2;
 800f0fc:	2302      	movs	r3, #2
 800f0fe:	617b      	str	r3, [r7, #20]
		}
		if (direction == 0) {
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d101      	bne.n	800f10a <pass_maker_Dijkstra+0x222>
			direction = 4;
 800f106:	2304      	movs	r3, #4
 800f108:	617b      	str	r3, [r7, #20]
		}
		if (direction == -1) {
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f110:	f47f aefd 	bne.w	800ef0e <pass_maker_Dijkstra+0x26>
			direction = 3;
 800f114:	2303      	movs	r3, #3
 800f116:	617b      	str	r3, [r7, #20]
		update_coordinate(&x,&y,direction);
 800f118:	e6f9      	b.n	800ef0e <pass_maker_Dijkstra+0x26>
					break;
 800f11a:	bf00      	nop
 800f11c:	e000      	b.n	800f120 <pass_maker_Dijkstra+0x238>
			break;
 800f11e:	bf00      	nop
		}

	}
}
 800f120:	bf00      	nop
 800f122:	371c      	adds	r7, #28
 800f124:	46bd      	mov	sp, r7
 800f126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f128:	20000828 	.word	0x20000828
 800f12c:	2000083c 	.word	0x2000083c

0800f130 <run_shortest>:


void run_shortest(float inspeed, float inacc, int stmass, char pass_mode, char fun_mode,
		char slant_mode, parameter_speed howspeed,float fun_ratio,char mollifier_mode) {
 800f130:	b5b0      	push	{r4, r5, r7, lr}
 800f132:	b0e0      	sub	sp, #384	; 0x180
 800f134:	af50      	add	r7, sp, #320	; 0x140
 800f136:	ed87 0a05 	vstr	s0, [r7, #20]
 800f13a:	edc7 0a04 	vstr	s1, [r7, #16]
 800f13e:	60f8      	str	r0, [r7, #12]
 800f140:	4608      	mov	r0, r1
 800f142:	4611      	mov	r1, r2
 800f144:	461a      	mov	r2, r3
 800f146:	ed87 1a01 	vstr	s2, [r7, #4]
 800f14a:	4603      	mov	r3, r0
 800f14c:	72fb      	strb	r3, [r7, #11]
 800f14e:	460b      	mov	r3, r1
 800f150:	72bb      	strb	r3, [r7, #10]
 800f152:	4613      	mov	r3, r2
 800f154:	727b      	strb	r3, [r7, #9]
//	_Bool left_wall;
//
//	int x = 0;
//	int y = 0;
//	int direction = 1;
	slant_direction = -2;
 800f156:	f06f 0301 	mvn.w	r3, #1
 800f15a:	63bb      	str	r3, [r7, #56]	; 0x38

	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800f15c:	2301      	movs	r3, #1
 800f15e:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800f160:	2300      	movs	r3, #0
 800f162:	767b      	strb	r3, [r7, #25]
	mode.WallCutMode=0;
 800f164:	2300      	movs	r3, #0
 800f166:	76fb      	strb	r3, [r7, #27]
	mode.calMazeMode=0;
 800f168:	2300      	movs	r3, #0
 800f16a:	76bb      	strb	r3, [r7, #26]

	//highspeed_mode = 1;
	for(int i = 0; i <= 254; i++){pass[i] = 0;}
 800f16c:	2300      	movs	r3, #0
 800f16e:	633b      	str	r3, [r7, #48]	; 0x30
 800f170:	e007      	b.n	800f182 <run_shortest+0x52>
 800f172:	4a07      	ldr	r2, [pc, #28]	; (800f190 <run_shortest+0x60>)
 800f174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f176:	2100      	movs	r1, #0
 800f178:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17e:	3301      	adds	r3, #1
 800f180:	633b      	str	r3, [r7, #48]	; 0x30
 800f182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f184:	2bfe      	cmp	r3, #254	; 0xfe
 800f186:	ddf4      	ble.n	800f172 <run_shortest+0x42>
	for(int i = 0; i <= 14; i++){
 800f188:	2300      	movs	r3, #0
 800f18a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f18c:	e077      	b.n	800f27e <run_shortest+0x14e>
 800f18e:	bf00      	nop
 800f190:	2000083c 	.word	0x2000083c
		record.row[i] = wall.row[i];
 800f194:	4aa9      	ldr	r2, [pc, #676]	; (800f43c <run_shortest+0x30c>)
 800f196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f198:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800f19c:	4aa8      	ldr	r2, [pc, #672]	; (800f440 <run_shortest+0x310>)
 800f19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[i] = wall.column[i];
 800f1a4:	4aa5      	ldr	r2, [pc, #660]	; (800f43c <run_shortest+0x30c>)
 800f1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a8:	330c      	adds	r3, #12
 800f1aa:	005b      	lsls	r3, r3, #1
 800f1ac:	4413      	add	r3, r2
 800f1ae:	88d9      	ldrh	r1, [r3, #6]
 800f1b0:	4aa3      	ldr	r2, [pc, #652]	; (800f440 <run_shortest+0x310>)
 800f1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b4:	330c      	adds	r3, #12
 800f1b6:	005b      	lsls	r3, r3, #1
 800f1b8:	4413      	add	r3, r2
 800f1ba:	460a      	mov	r2, r1
 800f1bc:	80da      	strh	r2, [r3, #6]
		record.row_look[i] = wall.row_look[i];
 800f1be:	4a9f      	ldr	r2, [pc, #636]	; (800f43c <run_shortest+0x30c>)
 800f1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c2:	331c      	adds	r3, #28
 800f1c4:	005b      	lsls	r3, r3, #1
 800f1c6:	4413      	add	r3, r2
 800f1c8:	8899      	ldrh	r1, [r3, #4]
 800f1ca:	4a9d      	ldr	r2, [pc, #628]	; (800f440 <run_shortest+0x310>)
 800f1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ce:	331c      	adds	r3, #28
 800f1d0:	005b      	lsls	r3, r3, #1
 800f1d2:	4413      	add	r3, r2
 800f1d4:	460a      	mov	r2, r1
 800f1d6:	809a      	strh	r2, [r3, #4]
		record.column_look[i] = wall.column_look[i];
 800f1d8:	4a98      	ldr	r2, [pc, #608]	; (800f43c <run_shortest+0x30c>)
 800f1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1dc:	332c      	adds	r3, #44	; 0x2c
 800f1de:	005b      	lsls	r3, r3, #1
 800f1e0:	4413      	add	r3, r2
 800f1e2:	8859      	ldrh	r1, [r3, #2]
 800f1e4:	4a96      	ldr	r2, [pc, #600]	; (800f440 <run_shortest+0x310>)
 800f1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e8:	332c      	adds	r3, #44	; 0x2c
 800f1ea:	005b      	lsls	r3, r3, #1
 800f1ec:	4413      	add	r3, r2
 800f1ee:	460a      	mov	r2, r1
 800f1f0:	805a      	strh	r2, [r3, #2]
		wall.row_look[i] = ~wall.row_look[i];
 800f1f2:	4a92      	ldr	r2, [pc, #584]	; (800f43c <run_shortest+0x30c>)
 800f1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f6:	331c      	adds	r3, #28
 800f1f8:	005b      	lsls	r3, r3, #1
 800f1fa:	4413      	add	r3, r2
 800f1fc:	889b      	ldrh	r3, [r3, #4]
 800f1fe:	43db      	mvns	r3, r3
 800f200:	b299      	uxth	r1, r3
 800f202:	4a8e      	ldr	r2, [pc, #568]	; (800f43c <run_shortest+0x30c>)
 800f204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f206:	331c      	adds	r3, #28
 800f208:	005b      	lsls	r3, r3, #1
 800f20a:	4413      	add	r3, r2
 800f20c:	460a      	mov	r2, r1
 800f20e:	809a      	strh	r2, [r3, #4]
		wall.column_look[i] = ~wall.column_look[i];
 800f210:	4a8a      	ldr	r2, [pc, #552]	; (800f43c <run_shortest+0x30c>)
 800f212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f214:	332c      	adds	r3, #44	; 0x2c
 800f216:	005b      	lsls	r3, r3, #1
 800f218:	4413      	add	r3, r2
 800f21a:	885b      	ldrh	r3, [r3, #2]
 800f21c:	43db      	mvns	r3, r3
 800f21e:	b299      	uxth	r1, r3
 800f220:	4a86      	ldr	r2, [pc, #536]	; (800f43c <run_shortest+0x30c>)
 800f222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f224:	332c      	adds	r3, #44	; 0x2c
 800f226:	005b      	lsls	r3, r3, #1
 800f228:	4413      	add	r3, r2
 800f22a:	460a      	mov	r2, r1
 800f22c:	805a      	strh	r2, [r3, #2]
		wall.row[i] = wall.row[i] | wall.row_look[i];
 800f22e:	4a83      	ldr	r2, [pc, #524]	; (800f43c <run_shortest+0x30c>)
 800f230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f232:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800f236:	4981      	ldr	r1, [pc, #516]	; (800f43c <run_shortest+0x30c>)
 800f238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23a:	331c      	adds	r3, #28
 800f23c:	005b      	lsls	r3, r3, #1
 800f23e:	440b      	add	r3, r1
 800f240:	889b      	ldrh	r3, [r3, #4]
 800f242:	4313      	orrs	r3, r2
 800f244:	b299      	uxth	r1, r3
 800f246:	4a7d      	ldr	r2, [pc, #500]	; (800f43c <run_shortest+0x30c>)
 800f248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[i] = wall.column[i] | wall.column_look[i];
 800f24e:	4a7b      	ldr	r2, [pc, #492]	; (800f43c <run_shortest+0x30c>)
 800f250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f252:	330c      	adds	r3, #12
 800f254:	005b      	lsls	r3, r3, #1
 800f256:	4413      	add	r3, r2
 800f258:	88da      	ldrh	r2, [r3, #6]
 800f25a:	4978      	ldr	r1, [pc, #480]	; (800f43c <run_shortest+0x30c>)
 800f25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25e:	332c      	adds	r3, #44	; 0x2c
 800f260:	005b      	lsls	r3, r3, #1
 800f262:	440b      	add	r3, r1
 800f264:	885b      	ldrh	r3, [r3, #2]
 800f266:	4313      	orrs	r3, r2
 800f268:	b299      	uxth	r1, r3
 800f26a:	4a74      	ldr	r2, [pc, #464]	; (800f43c <run_shortest+0x30c>)
 800f26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26e:	330c      	adds	r3, #12
 800f270:	005b      	lsls	r3, r3, #1
 800f272:	4413      	add	r3, r2
 800f274:	460a      	mov	r2, r1
 800f276:	80da      	strh	r2, [r3, #6]
	for(int i = 0; i <= 14; i++){
 800f278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27a:	3301      	adds	r3, #1
 800f27c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f280:	2b0e      	cmp	r3, #14
 800f282:	dd87      	ble.n	800f194 <run_shortest+0x64>
	}
	//pass_maker();
   pass_maker_Dijkstra();
 800f284:	f7ff fe30 	bl	800eee8 <pass_maker_Dijkstra>

	pass_count = 1;
 800f288:	4b6e      	ldr	r3, [pc, #440]	; (800f444 <run_shortest+0x314>)
 800f28a:	2201      	movs	r2, #1
 800f28c:	701a      	strb	r2, [r3, #0]
if(pass_mode==1){
 800f28e:	7afb      	ldrb	r3, [r7, #11]
 800f290:	2b01      	cmp	r3, #1
 800f292:	f040 84b5 	bne.w	800fc00 <run_shortest+0xad0>
	while (1) {		//パス圧縮
//		if (mode_safty == 1) {
//
//			break;
//		}
		if (pass[pass_count] == 0) {
 800f296:	4b6b      	ldr	r3, [pc, #428]	; (800f444 <run_shortest+0x314>)
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	461a      	mov	r2, r3
 800f29c:	4b6a      	ldr	r3, [pc, #424]	; (800f448 <run_shortest+0x318>)
 800f29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	f000 813a 	beq.w	800f51c <run_shortest+0x3ec>
			break;
		}

		if (pass[pass_count] == -2 && pass[pass_count - 1] >= 1	//右90度大回りの条件
 800f2a8:	4b66      	ldr	r3, [pc, #408]	; (800f444 <run_shortest+0x314>)
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	4b66      	ldr	r3, [pc, #408]	; (800f448 <run_shortest+0x318>)
 800f2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2b4:	f113 0f02 	cmn.w	r3, #2
 800f2b8:	d131      	bne.n	800f31e <run_shortest+0x1ee>
 800f2ba:	4b62      	ldr	r3, [pc, #392]	; (800f444 <run_shortest+0x314>)
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	3b01      	subs	r3, #1
 800f2c0:	4a61      	ldr	r2, [pc, #388]	; (800f448 <run_shortest+0x318>)
 800f2c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	dd29      	ble.n	800f31e <run_shortest+0x1ee>
		&& pass[pass_count + 1] >= 1) {
 800f2ca:	4b5e      	ldr	r3, [pc, #376]	; (800f444 <run_shortest+0x314>)
 800f2cc:	781b      	ldrb	r3, [r3, #0]
 800f2ce:	3301      	adds	r3, #1
 800f2d0:	4a5d      	ldr	r2, [pc, #372]	; (800f448 <run_shortest+0x318>)
 800f2d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	dd21      	ble.n	800f31e <run_shortest+0x1ee>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f2da:	4b5a      	ldr	r3, [pc, #360]	; (800f444 <run_shortest+0x314>)
 800f2dc:	781b      	ldrb	r3, [r3, #0]
 800f2de:	3b01      	subs	r3, #1
 800f2e0:	4a59      	ldr	r2, [pc, #356]	; (800f448 <run_shortest+0x318>)
 800f2e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f2e6:	4b57      	ldr	r3, [pc, #348]	; (800f444 <run_shortest+0x314>)
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	3b01      	subs	r3, #1
 800f2ec:	3a01      	subs	r2, #1
 800f2ee:	4956      	ldr	r1, [pc, #344]	; (800f448 <run_shortest+0x318>)
 800f2f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f2f4:	4b53      	ldr	r3, [pc, #332]	; (800f444 <run_shortest+0x314>)
 800f2f6:	781b      	ldrb	r3, [r3, #0]
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	4a53      	ldr	r2, [pc, #332]	; (800f448 <run_shortest+0x318>)
 800f2fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f300:	4b50      	ldr	r3, [pc, #320]	; (800f444 <run_shortest+0x314>)
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	3301      	adds	r3, #1
 800f306:	3a01      	subs	r2, #1
 800f308:	494f      	ldr	r1, [pc, #316]	; (800f448 <run_shortest+0x318>)
 800f30a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -4;		//右90度大回り
 800f30e:	4b4d      	ldr	r3, [pc, #308]	; (800f444 <run_shortest+0x314>)
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	4619      	mov	r1, r3
 800f314:	4b4c      	ldr	r3, [pc, #304]	; (800f448 <run_shortest+0x318>)
 800f316:	f06f 0203 	mvn.w	r2, #3
 800f31a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count] == -3 && pass[pass_count - 1] >= 1	//左90度大回りの条件
 800f31e:	4b49      	ldr	r3, [pc, #292]	; (800f444 <run_shortest+0x314>)
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	461a      	mov	r2, r3
 800f324:	4b48      	ldr	r3, [pc, #288]	; (800f448 <run_shortest+0x318>)
 800f326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f32a:	f113 0f03 	cmn.w	r3, #3
 800f32e:	d131      	bne.n	800f394 <run_shortest+0x264>
 800f330:	4b44      	ldr	r3, [pc, #272]	; (800f444 <run_shortest+0x314>)
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	3b01      	subs	r3, #1
 800f336:	4a44      	ldr	r2, [pc, #272]	; (800f448 <run_shortest+0x318>)
 800f338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	dd29      	ble.n	800f394 <run_shortest+0x264>
		&& pass[pass_count + 1] >= 1) {
 800f340:	4b40      	ldr	r3, [pc, #256]	; (800f444 <run_shortest+0x314>)
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	3301      	adds	r3, #1
 800f346:	4a40      	ldr	r2, [pc, #256]	; (800f448 <run_shortest+0x318>)
 800f348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	dd21      	ble.n	800f394 <run_shortest+0x264>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f350:	4b3c      	ldr	r3, [pc, #240]	; (800f444 <run_shortest+0x314>)
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	3b01      	subs	r3, #1
 800f356:	4a3c      	ldr	r2, [pc, #240]	; (800f448 <run_shortest+0x318>)
 800f358:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f35c:	4b39      	ldr	r3, [pc, #228]	; (800f444 <run_shortest+0x314>)
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	3b01      	subs	r3, #1
 800f362:	3a01      	subs	r2, #1
 800f364:	4938      	ldr	r1, [pc, #224]	; (800f448 <run_shortest+0x318>)
 800f366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f36a:	4b36      	ldr	r3, [pc, #216]	; (800f444 <run_shortest+0x314>)
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	3301      	adds	r3, #1
 800f370:	4a35      	ldr	r2, [pc, #212]	; (800f448 <run_shortest+0x318>)
 800f372:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f376:	4b33      	ldr	r3, [pc, #204]	; (800f444 <run_shortest+0x314>)
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	3301      	adds	r3, #1
 800f37c:	3a01      	subs	r2, #1
 800f37e:	4932      	ldr	r1, [pc, #200]	; (800f448 <run_shortest+0x318>)
 800f380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -5;		//左90度大回り
 800f384:	4b2f      	ldr	r3, [pc, #188]	; (800f444 <run_shortest+0x314>)
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	4619      	mov	r1, r3
 800f38a:	4b2f      	ldr	r3, [pc, #188]	; (800f448 <run_shortest+0x318>)
 800f38c:	f06f 0204 	mvn.w	r2, #4
 800f390:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -2
 800f394:	4b2b      	ldr	r3, [pc, #172]	; (800f444 <run_shortest+0x314>)
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	3b01      	subs	r3, #1
 800f39a:	4a2b      	ldr	r2, [pc, #172]	; (800f448 <run_shortest+0x318>)
 800f39c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	dd43      	ble.n	800f42c <run_shortest+0x2fc>
 800f3a4:	4b27      	ldr	r3, [pc, #156]	; (800f444 <run_shortest+0x314>)
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	461a      	mov	r2, r3
 800f3aa:	4b27      	ldr	r3, [pc, #156]	; (800f448 <run_shortest+0x318>)
 800f3ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3b0:	f113 0f02 	cmn.w	r3, #2
 800f3b4:	d13a      	bne.n	800f42c <run_shortest+0x2fc>
				&& pass[pass_count + 1] == -2 && pass[pass_count + 2] >= 1) {//右180度大回りの条件
 800f3b6:	4b23      	ldr	r3, [pc, #140]	; (800f444 <run_shortest+0x314>)
 800f3b8:	781b      	ldrb	r3, [r3, #0]
 800f3ba:	3301      	adds	r3, #1
 800f3bc:	4a22      	ldr	r2, [pc, #136]	; (800f448 <run_shortest+0x318>)
 800f3be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3c2:	f113 0f02 	cmn.w	r3, #2
 800f3c6:	d131      	bne.n	800f42c <run_shortest+0x2fc>
 800f3c8:	4b1e      	ldr	r3, [pc, #120]	; (800f444 <run_shortest+0x314>)
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	3302      	adds	r3, #2
 800f3ce:	4a1e      	ldr	r2, [pc, #120]	; (800f448 <run_shortest+0x318>)
 800f3d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	dd29      	ble.n	800f42c <run_shortest+0x2fc>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f3d8:	4b1a      	ldr	r3, [pc, #104]	; (800f444 <run_shortest+0x314>)
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	3b01      	subs	r3, #1
 800f3de:	4a1a      	ldr	r2, [pc, #104]	; (800f448 <run_shortest+0x318>)
 800f3e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f3e4:	4b17      	ldr	r3, [pc, #92]	; (800f444 <run_shortest+0x314>)
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	3b01      	subs	r3, #1
 800f3ea:	3a01      	subs	r2, #1
 800f3ec:	4916      	ldr	r1, [pc, #88]	; (800f448 <run_shortest+0x318>)
 800f3ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -6;
 800f3f2:	4b14      	ldr	r3, [pc, #80]	; (800f444 <run_shortest+0x314>)
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	4b13      	ldr	r3, [pc, #76]	; (800f448 <run_shortest+0x318>)
 800f3fa:	f06f 0205 	mvn.w	r2, #5
 800f3fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f402:	4b10      	ldr	r3, [pc, #64]	; (800f444 <run_shortest+0x314>)
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	3301      	adds	r3, #1
 800f408:	4a0f      	ldr	r2, [pc, #60]	; (800f448 <run_shortest+0x318>)
 800f40a:	f04f 31ff 	mov.w	r1, #4294967295
 800f40e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f412:	4b0c      	ldr	r3, [pc, #48]	; (800f444 <run_shortest+0x314>)
 800f414:	781b      	ldrb	r3, [r3, #0]
 800f416:	3302      	adds	r3, #2
 800f418:	4a0b      	ldr	r2, [pc, #44]	; (800f448 <run_shortest+0x318>)
 800f41a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f41e:	4b09      	ldr	r3, [pc, #36]	; (800f444 <run_shortest+0x314>)
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	3302      	adds	r3, #2
 800f424:	3a01      	subs	r2, #1
 800f426:	4908      	ldr	r1, [pc, #32]	; (800f448 <run_shortest+0x318>)
 800f428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -3
 800f42c:	4b05      	ldr	r3, [pc, #20]	; (800f444 <run_shortest+0x314>)
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	3b01      	subs	r3, #1
 800f432:	4a05      	ldr	r2, [pc, #20]	; (800f448 <run_shortest+0x318>)
 800f434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	e007      	b.n	800f44c <run_shortest+0x31c>
 800f43c:	20000c3c 	.word	0x20000c3c
 800f440:	20000cb4 	.word	0x20000cb4
 800f444:	20000828 	.word	0x20000828
 800f448:	2000083c 	.word	0x2000083c
 800f44c:	dd43      	ble.n	800f4d6 <run_shortest+0x3a6>
 800f44e:	4b31      	ldr	r3, [pc, #196]	; (800f514 <run_shortest+0x3e4>)
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	461a      	mov	r2, r3
 800f454:	4b30      	ldr	r3, [pc, #192]	; (800f518 <run_shortest+0x3e8>)
 800f456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f45a:	f113 0f03 	cmn.w	r3, #3
 800f45e:	d13a      	bne.n	800f4d6 <run_shortest+0x3a6>
				&& pass[pass_count + 1] == -3 && pass[pass_count + 2] >= 1) {//左180度大回りの条件
 800f460:	4b2c      	ldr	r3, [pc, #176]	; (800f514 <run_shortest+0x3e4>)
 800f462:	781b      	ldrb	r3, [r3, #0]
 800f464:	3301      	adds	r3, #1
 800f466:	4a2c      	ldr	r2, [pc, #176]	; (800f518 <run_shortest+0x3e8>)
 800f468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f46c:	f113 0f03 	cmn.w	r3, #3
 800f470:	d131      	bne.n	800f4d6 <run_shortest+0x3a6>
 800f472:	4b28      	ldr	r3, [pc, #160]	; (800f514 <run_shortest+0x3e4>)
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	3302      	adds	r3, #2
 800f478:	4a27      	ldr	r2, [pc, #156]	; (800f518 <run_shortest+0x3e8>)
 800f47a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	dd29      	ble.n	800f4d6 <run_shortest+0x3a6>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f482:	4b24      	ldr	r3, [pc, #144]	; (800f514 <run_shortest+0x3e4>)
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	3b01      	subs	r3, #1
 800f488:	4a23      	ldr	r2, [pc, #140]	; (800f518 <run_shortest+0x3e8>)
 800f48a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f48e:	4b21      	ldr	r3, [pc, #132]	; (800f514 <run_shortest+0x3e4>)
 800f490:	781b      	ldrb	r3, [r3, #0]
 800f492:	3b01      	subs	r3, #1
 800f494:	3a01      	subs	r2, #1
 800f496:	4920      	ldr	r1, [pc, #128]	; (800f518 <run_shortest+0x3e8>)
 800f498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -7;
 800f49c:	4b1d      	ldr	r3, [pc, #116]	; (800f514 <run_shortest+0x3e4>)
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	4619      	mov	r1, r3
 800f4a2:	4b1d      	ldr	r3, [pc, #116]	; (800f518 <run_shortest+0x3e8>)
 800f4a4:	f06f 0206 	mvn.w	r2, #6
 800f4a8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f4ac:	4b19      	ldr	r3, [pc, #100]	; (800f514 <run_shortest+0x3e4>)
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	4a19      	ldr	r2, [pc, #100]	; (800f518 <run_shortest+0x3e8>)
 800f4b4:	f04f 31ff 	mov.w	r1, #4294967295
 800f4b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f4bc:	4b15      	ldr	r3, [pc, #84]	; (800f514 <run_shortest+0x3e4>)
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	3302      	adds	r3, #2
 800f4c2:	4a15      	ldr	r2, [pc, #84]	; (800f518 <run_shortest+0x3e8>)
 800f4c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f4c8:	4b12      	ldr	r3, [pc, #72]	; (800f514 <run_shortest+0x3e4>)
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	3302      	adds	r3, #2
 800f4ce:	3a01      	subs	r2, #1
 800f4d0:	4911      	ldr	r1, [pc, #68]	; (800f518 <run_shortest+0x3e8>)
 800f4d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (pass[pass_count] == -2 && pass[pass_count - 1] == -3	//左90度大回りの条件
 800f4d6:	4b0f      	ldr	r3, [pc, #60]	; (800f514 <run_shortest+0x3e4>)
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	461a      	mov	r2, r3
 800f4dc:	4b0e      	ldr	r3, [pc, #56]	; (800f518 <run_shortest+0x3e8>)
 800f4de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4e2:	f113 0f02 	cmn.w	r3, #2

				) {
		}
//		if(){}
		if (pass[pass_count - 1] == 0) {
 800f4e6:	4b0b      	ldr	r3, [pc, #44]	; (800f514 <run_shortest+0x3e4>)
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	3b01      	subs	r3, #1
 800f4ec:	4a0a      	ldr	r2, [pc, #40]	; (800f518 <run_shortest+0x3e8>)
 800f4ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d107      	bne.n	800f506 <run_shortest+0x3d6>
			pass[pass_count - 1] = -1;		//passが0になってしまったときの対策
 800f4f6:	4b07      	ldr	r3, [pc, #28]	; (800f514 <run_shortest+0x3e4>)
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	3b01      	subs	r3, #1
 800f4fc:	4a06      	ldr	r2, [pc, #24]	; (800f518 <run_shortest+0x3e8>)
 800f4fe:	f04f 31ff 	mov.w	r1, #4294967295
 800f502:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		pass_count++;
 800f506:	4b03      	ldr	r3, [pc, #12]	; (800f514 <run_shortest+0x3e4>)
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	3301      	adds	r3, #1
 800f50c:	b2da      	uxtb	r2, r3
 800f50e:	4b01      	ldr	r3, [pc, #4]	; (800f514 <run_shortest+0x3e4>)
 800f510:	701a      	strb	r2, [r3, #0]
		if (pass[pass_count] == 0) {
 800f512:	e6c0      	b.n	800f296 <run_shortest+0x166>
 800f514:	20000828 	.word	0x20000828
 800f518:	2000083c 	.word	0x2000083c
			break;
 800f51c:	bf00      	nop
	}

	pass_count = 1;
 800f51e:	4b8c      	ldr	r3, [pc, #560]	; (800f750 <run_shortest+0x620>)
 800f520:	2201      	movs	r2, #1
 800f522:	701a      	strb	r2, [r3, #0]
	if (slant_mode == 1) {
 800f524:	7a7b      	ldrb	r3, [r7, #9]
 800f526:	2b01      	cmp	r3, #1
 800f528:	f040 836a 	bne.w	800fc00 <run_shortest+0xad0>
		while (1) {		//斜め入出の圧縮
			if (pass[pass_count] == 0) {
 800f52c:	4b88      	ldr	r3, [pc, #544]	; (800f750 <run_shortest+0x620>)
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	461a      	mov	r2, r3
 800f532:	4b88      	ldr	r3, [pc, #544]	; (800f754 <run_shortest+0x624>)
 800f534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	f000 81f1 	beq.w	800f920 <run_shortest+0x7f0>
				break;
			}

			if (pass[pass_count - 1] >= 1) {
 800f53e:	4b84      	ldr	r3, [pc, #528]	; (800f750 <run_shortest+0x620>)
 800f540:	781b      	ldrb	r3, [r3, #0]
 800f542:	3b01      	subs	r3, #1
 800f544:	4a83      	ldr	r2, [pc, #524]	; (800f754 <run_shortest+0x624>)
 800f546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	f340 81dc 	ble.w	800f908 <run_shortest+0x7d8>
				if (pass[pass_count] == -2 || pass[pass_count] == -3) {
 800f550:	4b7f      	ldr	r3, [pc, #508]	; (800f750 <run_shortest+0x620>)
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	461a      	mov	r2, r3
 800f556:	4b7f      	ldr	r3, [pc, #508]	; (800f754 <run_shortest+0x624>)
 800f558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f55c:	f113 0f02 	cmn.w	r3, #2
 800f560:	d009      	beq.n	800f576 <run_shortest+0x446>
 800f562:	4b7b      	ldr	r3, [pc, #492]	; (800f750 <run_shortest+0x620>)
 800f564:	781b      	ldrb	r3, [r3, #0]
 800f566:	461a      	mov	r2, r3
 800f568:	4b7a      	ldr	r3, [pc, #488]	; (800f754 <run_shortest+0x624>)
 800f56a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f56e:	f113 0f03 	cmn.w	r3, #3
 800f572:	f040 81c9 	bne.w	800f908 <run_shortest+0x7d8>
//***************************************************************************************入りのモーションstart
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -3) {
 800f576:	4b76      	ldr	r3, [pc, #472]	; (800f750 <run_shortest+0x620>)
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	461a      	mov	r2, r3
 800f57c:	4b75      	ldr	r3, [pc, #468]	; (800f754 <run_shortest+0x624>)
 800f57e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f582:	f113 0f02 	cmn.w	r3, #2
 800f586:	d12d      	bne.n	800f5e4 <run_shortest+0x4b4>
 800f588:	4b71      	ldr	r3, [pc, #452]	; (800f750 <run_shortest+0x620>)
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	3301      	adds	r3, #1
 800f58e:	4a71      	ldr	r2, [pc, #452]	; (800f754 <run_shortest+0x624>)
 800f590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f594:	f113 0f03 	cmn.w	r3, #3
 800f598:	d124      	bne.n	800f5e4 <run_shortest+0x4b4>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f59a:	4b6d      	ldr	r3, [pc, #436]	; (800f750 <run_shortest+0x620>)
 800f59c:	781b      	ldrb	r3, [r3, #0]
 800f59e:	3b01      	subs	r3, #1
 800f5a0:	4a6c      	ldr	r2, [pc, #432]	; (800f754 <run_shortest+0x624>)
 800f5a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f5a6:	4b6a      	ldr	r3, [pc, #424]	; (800f750 <run_shortest+0x620>)
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	3b01      	subs	r3, #1
 800f5ac:	3a01      	subs	r2, #1
 800f5ae:	4969      	ldr	r1, [pc, #420]	; (800f754 <run_shortest+0x624>)
 800f5b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f5b4:	4b66      	ldr	r3, [pc, #408]	; (800f750 <run_shortest+0x620>)
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	3b01      	subs	r3, #1
 800f5ba:	4a66      	ldr	r2, [pc, #408]	; (800f754 <run_shortest+0x624>)
 800f5bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d107      	bne.n	800f5d4 <run_shortest+0x4a4>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f5c4:	4b62      	ldr	r3, [pc, #392]	; (800f750 <run_shortest+0x620>)
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	3b01      	subs	r3, #1
 800f5ca:	4a62      	ldr	r2, [pc, #392]	; (800f754 <run_shortest+0x624>)
 800f5cc:	f04f 31ff 	mov.w	r1, #4294967295
 800f5d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -8;		//右45
 800f5d4:	4b5e      	ldr	r3, [pc, #376]	; (800f750 <run_shortest+0x620>)
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	4619      	mov	r1, r3
 800f5da:	4b5e      	ldr	r3, [pc, #376]	; (800f754 <run_shortest+0x624>)
 800f5dc:	f06f 0207 	mvn.w	r2, #7
 800f5e0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -2) {
 800f5e4:	4b5a      	ldr	r3, [pc, #360]	; (800f750 <run_shortest+0x620>)
 800f5e6:	781b      	ldrb	r3, [r3, #0]
 800f5e8:	461a      	mov	r2, r3
 800f5ea:	4b5a      	ldr	r3, [pc, #360]	; (800f754 <run_shortest+0x624>)
 800f5ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5f0:	f113 0f03 	cmn.w	r3, #3
 800f5f4:	d12d      	bne.n	800f652 <run_shortest+0x522>
 800f5f6:	4b56      	ldr	r3, [pc, #344]	; (800f750 <run_shortest+0x620>)
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	4a55      	ldr	r2, [pc, #340]	; (800f754 <run_shortest+0x624>)
 800f5fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f602:	f113 0f02 	cmn.w	r3, #2
 800f606:	d124      	bne.n	800f652 <run_shortest+0x522>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f608:	4b51      	ldr	r3, [pc, #324]	; (800f750 <run_shortest+0x620>)
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	3b01      	subs	r3, #1
 800f60e:	4a51      	ldr	r2, [pc, #324]	; (800f754 <run_shortest+0x624>)
 800f610:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f614:	4b4e      	ldr	r3, [pc, #312]	; (800f750 <run_shortest+0x620>)
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	3b01      	subs	r3, #1
 800f61a:	3a01      	subs	r2, #1
 800f61c:	494d      	ldr	r1, [pc, #308]	; (800f754 <run_shortest+0x624>)
 800f61e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f622:	4b4b      	ldr	r3, [pc, #300]	; (800f750 <run_shortest+0x620>)
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	3b01      	subs	r3, #1
 800f628:	4a4a      	ldr	r2, [pc, #296]	; (800f754 <run_shortest+0x624>)
 800f62a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d107      	bne.n	800f642 <run_shortest+0x512>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f632:	4b47      	ldr	r3, [pc, #284]	; (800f750 <run_shortest+0x620>)
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	3b01      	subs	r3, #1
 800f638:	4a46      	ldr	r2, [pc, #280]	; (800f754 <run_shortest+0x624>)
 800f63a:	f04f 31ff 	mov.w	r1, #4294967295
 800f63e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -9;		//左45
 800f642:	4b43      	ldr	r3, [pc, #268]	; (800f750 <run_shortest+0x620>)
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	4619      	mov	r1, r3
 800f648:	4b42      	ldr	r3, [pc, #264]	; (800f754 <run_shortest+0x624>)
 800f64a:	f06f 0208 	mvn.w	r2, #8
 800f64e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -2) {
 800f652:	4b3f      	ldr	r3, [pc, #252]	; (800f750 <run_shortest+0x620>)
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	461a      	mov	r2, r3
 800f658:	4b3e      	ldr	r3, [pc, #248]	; (800f754 <run_shortest+0x624>)
 800f65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f65e:	f113 0f02 	cmn.w	r3, #2
 800f662:	d135      	bne.n	800f6d0 <run_shortest+0x5a0>
 800f664:	4b3a      	ldr	r3, [pc, #232]	; (800f750 <run_shortest+0x620>)
 800f666:	781b      	ldrb	r3, [r3, #0]
 800f668:	3301      	adds	r3, #1
 800f66a:	4a3a      	ldr	r2, [pc, #232]	; (800f754 <run_shortest+0x624>)
 800f66c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f670:	f113 0f02 	cmn.w	r3, #2
 800f674:	d12c      	bne.n	800f6d0 <run_shortest+0x5a0>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f676:	4b36      	ldr	r3, [pc, #216]	; (800f750 <run_shortest+0x620>)
 800f678:	781b      	ldrb	r3, [r3, #0]
 800f67a:	3b01      	subs	r3, #1
 800f67c:	4a35      	ldr	r2, [pc, #212]	; (800f754 <run_shortest+0x624>)
 800f67e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f682:	4b33      	ldr	r3, [pc, #204]	; (800f750 <run_shortest+0x620>)
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	3b01      	subs	r3, #1
 800f688:	3a01      	subs	r2, #1
 800f68a:	4932      	ldr	r1, [pc, #200]	; (800f754 <run_shortest+0x624>)
 800f68c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f690:	4b2f      	ldr	r3, [pc, #188]	; (800f750 <run_shortest+0x620>)
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	3b01      	subs	r3, #1
 800f696:	4a2f      	ldr	r2, [pc, #188]	; (800f754 <run_shortest+0x624>)
 800f698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d107      	bne.n	800f6b0 <run_shortest+0x580>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f6a0:	4b2b      	ldr	r3, [pc, #172]	; (800f750 <run_shortest+0x620>)
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	3b01      	subs	r3, #1
 800f6a6:	4a2b      	ldr	r2, [pc, #172]	; (800f754 <run_shortest+0x624>)
 800f6a8:	f04f 31ff 	mov.w	r1, #4294967295
 800f6ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -10;		//右135
 800f6b0:	4b27      	ldr	r3, [pc, #156]	; (800f750 <run_shortest+0x620>)
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	4b27      	ldr	r3, [pc, #156]	; (800f754 <run_shortest+0x624>)
 800f6b8:	f06f 0209 	mvn.w	r2, #9
 800f6bc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f6c0:	4b23      	ldr	r3, [pc, #140]	; (800f750 <run_shortest+0x620>)
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	4a23      	ldr	r2, [pc, #140]	; (800f754 <run_shortest+0x624>)
 800f6c8:	f04f 31ff 	mov.w	r1, #4294967295
 800f6cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -3) {
 800f6d0:	4b1f      	ldr	r3, [pc, #124]	; (800f750 <run_shortest+0x620>)
 800f6d2:	781b      	ldrb	r3, [r3, #0]
 800f6d4:	461a      	mov	r2, r3
 800f6d6:	4b1f      	ldr	r3, [pc, #124]	; (800f754 <run_shortest+0x624>)
 800f6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6dc:	f113 0f03 	cmn.w	r3, #3
 800f6e0:	d140      	bne.n	800f764 <run_shortest+0x634>
 800f6e2:	4b1b      	ldr	r3, [pc, #108]	; (800f750 <run_shortest+0x620>)
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	4a1a      	ldr	r2, [pc, #104]	; (800f754 <run_shortest+0x624>)
 800f6ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6ee:	f113 0f03 	cmn.w	r3, #3
 800f6f2:	d137      	bne.n	800f764 <run_shortest+0x634>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f6f4:	4b16      	ldr	r3, [pc, #88]	; (800f750 <run_shortest+0x620>)
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	3b01      	subs	r3, #1
 800f6fa:	4a16      	ldr	r2, [pc, #88]	; (800f754 <run_shortest+0x624>)
 800f6fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f700:	4b13      	ldr	r3, [pc, #76]	; (800f750 <run_shortest+0x620>)
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	3b01      	subs	r3, #1
 800f706:	3a01      	subs	r2, #1
 800f708:	4912      	ldr	r1, [pc, #72]	; (800f754 <run_shortest+0x624>)
 800f70a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f70e:	4b10      	ldr	r3, [pc, #64]	; (800f750 <run_shortest+0x620>)
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	3b01      	subs	r3, #1
 800f714:	4a0f      	ldr	r2, [pc, #60]	; (800f754 <run_shortest+0x624>)
 800f716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d107      	bne.n	800f72e <run_shortest+0x5fe>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f71e:	4b0c      	ldr	r3, [pc, #48]	; (800f750 <run_shortest+0x620>)
 800f720:	781b      	ldrb	r3, [r3, #0]
 800f722:	3b01      	subs	r3, #1
 800f724:	4a0b      	ldr	r2, [pc, #44]	; (800f754 <run_shortest+0x624>)
 800f726:	f04f 31ff 	mov.w	r1, #4294967295
 800f72a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -11;		//左135
 800f72e:	4b08      	ldr	r3, [pc, #32]	; (800f750 <run_shortest+0x620>)
 800f730:	781b      	ldrb	r3, [r3, #0]
 800f732:	4619      	mov	r1, r3
 800f734:	4b07      	ldr	r3, [pc, #28]	; (800f754 <run_shortest+0x624>)
 800f736:	f06f 020a 	mvn.w	r2, #10
 800f73a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f73e:	4b04      	ldr	r3, [pc, #16]	; (800f750 <run_shortest+0x620>)
 800f740:	781b      	ldrb	r3, [r3, #0]
 800f742:	3301      	adds	r3, #1
 800f744:	4a03      	ldr	r2, [pc, #12]	; (800f754 <run_shortest+0x624>)
 800f746:	f04f 31ff 	mov.w	r1, #4294967295
 800f74a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
//***************************************************************************************入りのモーションend

//***************************************************************************************途中のモーションstart
					while (pass[pass_count] <= -1) {
 800f74e:	e009      	b.n	800f764 <run_shortest+0x634>
 800f750:	20000828 	.word	0x20000828
 800f754:	2000083c 	.word	0x2000083c
						pass_count++;
 800f758:	4b6f      	ldr	r3, [pc, #444]	; (800f918 <run_shortest+0x7e8>)
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	3301      	adds	r3, #1
 800f75e:	b2da      	uxtb	r2, r3
 800f760:	4b6d      	ldr	r3, [pc, #436]	; (800f918 <run_shortest+0x7e8>)
 800f762:	701a      	strb	r2, [r3, #0]
					while (pass[pass_count] <= -1) {
 800f764:	4b6c      	ldr	r3, [pc, #432]	; (800f918 <run_shortest+0x7e8>)
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	461a      	mov	r2, r3
 800f76a:	4b6c      	ldr	r3, [pc, #432]	; (800f91c <run_shortest+0x7ec>)
 800f76c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f770:	2b00      	cmp	r3, #0
 800f772:	dbf1      	blt.n	800f758 <run_shortest+0x628>
					}
//***************************************************************************************途中のモーションend

//***************************************************************************************出のモーションstart
					if (pass[pass_count - 1] == -2) {
 800f774:	4b68      	ldr	r3, [pc, #416]	; (800f918 <run_shortest+0x7e8>)
 800f776:	781b      	ldrb	r3, [r3, #0]
 800f778:	3b01      	subs	r3, #1
 800f77a:	4a68      	ldr	r2, [pc, #416]	; (800f91c <run_shortest+0x7ec>)
 800f77c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f780:	f113 0f02 	cmn.w	r3, #2
 800f784:	d15b      	bne.n	800f83e <run_shortest+0x70e>
						if (pass[pass_count - 2] == -2) {
 800f786:	4b64      	ldr	r3, [pc, #400]	; (800f918 <run_shortest+0x7e8>)
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	3b02      	subs	r3, #2
 800f78c:	4a63      	ldr	r2, [pc, #396]	; (800f91c <run_shortest+0x7ec>)
 800f78e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f792:	f113 0f02 	cmn.w	r3, #2
 800f796:	d12d      	bne.n	800f7f4 <run_shortest+0x6c4>
							pass[pass_count] = pass[pass_count] - 1;
 800f798:	4b5f      	ldr	r3, [pc, #380]	; (800f918 <run_shortest+0x7e8>)
 800f79a:	781b      	ldrb	r3, [r3, #0]
 800f79c:	461a      	mov	r2, r3
 800f79e:	4b5f      	ldr	r3, [pc, #380]	; (800f91c <run_shortest+0x7ec>)
 800f7a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7a4:	4a5c      	ldr	r2, [pc, #368]	; (800f918 <run_shortest+0x7e8>)
 800f7a6:	7812      	ldrb	r2, [r2, #0]
 800f7a8:	4611      	mov	r1, r2
 800f7aa:	3b01      	subs	r3, #1
 800f7ac:	4a5b      	ldr	r2, [pc, #364]	; (800f91c <run_shortest+0x7ec>)
 800f7ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f7b2:	4b59      	ldr	r3, [pc, #356]	; (800f918 <run_shortest+0x7e8>)
 800f7b4:	781b      	ldrb	r3, [r3, #0]
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	4b58      	ldr	r3, [pc, #352]	; (800f91c <run_shortest+0x7ec>)
 800f7ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d107      	bne.n	800f7d2 <run_shortest+0x6a2>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f7c2:	4b55      	ldr	r3, [pc, #340]	; (800f918 <run_shortest+0x7e8>)
 800f7c4:	781b      	ldrb	r3, [r3, #0]
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	4b54      	ldr	r3, [pc, #336]	; (800f91c <run_shortest+0x7ec>)
 800f7ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f7ce:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -14;		//右135
 800f7d2:	4b51      	ldr	r3, [pc, #324]	; (800f918 <run_shortest+0x7e8>)
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	3b01      	subs	r3, #1
 800f7d8:	4a50      	ldr	r2, [pc, #320]	; (800f91c <run_shortest+0x7ec>)
 800f7da:	f06f 010d 	mvn.w	r1, #13
 800f7de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f7e2:	4b4d      	ldr	r3, [pc, #308]	; (800f918 <run_shortest+0x7e8>)
 800f7e4:	781b      	ldrb	r3, [r3, #0]
 800f7e6:	3b02      	subs	r3, #2
 800f7e8:	4a4c      	ldr	r2, [pc, #304]	; (800f91c <run_shortest+0x7ec>)
 800f7ea:	f04f 31ff 	mov.w	r1, #4294967295
 800f7ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f7f2:	e024      	b.n	800f83e <run_shortest+0x70e>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f7f4:	4b48      	ldr	r3, [pc, #288]	; (800f918 <run_shortest+0x7e8>)
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	461a      	mov	r2, r3
 800f7fa:	4b48      	ldr	r3, [pc, #288]	; (800f91c <run_shortest+0x7ec>)
 800f7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f800:	4a45      	ldr	r2, [pc, #276]	; (800f918 <run_shortest+0x7e8>)
 800f802:	7812      	ldrb	r2, [r2, #0]
 800f804:	4611      	mov	r1, r2
 800f806:	3b01      	subs	r3, #1
 800f808:	4a44      	ldr	r2, [pc, #272]	; (800f91c <run_shortest+0x7ec>)
 800f80a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f80e:	4b42      	ldr	r3, [pc, #264]	; (800f918 <run_shortest+0x7e8>)
 800f810:	781b      	ldrb	r3, [r3, #0]
 800f812:	461a      	mov	r2, r3
 800f814:	4b41      	ldr	r3, [pc, #260]	; (800f91c <run_shortest+0x7ec>)
 800f816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d107      	bne.n	800f82e <run_shortest+0x6fe>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f81e:	4b3e      	ldr	r3, [pc, #248]	; (800f918 <run_shortest+0x7e8>)
 800f820:	781b      	ldrb	r3, [r3, #0]
 800f822:	4619      	mov	r1, r3
 800f824:	4b3d      	ldr	r3, [pc, #244]	; (800f91c <run_shortest+0x7ec>)
 800f826:	f04f 32ff 	mov.w	r2, #4294967295
 800f82a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -12;		//右45
 800f82e:	4b3a      	ldr	r3, [pc, #232]	; (800f918 <run_shortest+0x7e8>)
 800f830:	781b      	ldrb	r3, [r3, #0]
 800f832:	3b01      	subs	r3, #1
 800f834:	4a39      	ldr	r2, [pc, #228]	; (800f91c <run_shortest+0x7ec>)
 800f836:	f06f 010b 	mvn.w	r1, #11
 800f83a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

					}
					if (pass[pass_count - 1] == -3) {
 800f83e:	4b36      	ldr	r3, [pc, #216]	; (800f918 <run_shortest+0x7e8>)
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	3b01      	subs	r3, #1
 800f844:	4a35      	ldr	r2, [pc, #212]	; (800f91c <run_shortest+0x7ec>)
 800f846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f84a:	f113 0f03 	cmn.w	r3, #3
 800f84e:	d15b      	bne.n	800f908 <run_shortest+0x7d8>
						if (pass[pass_count - 2] == -3) {
 800f850:	4b31      	ldr	r3, [pc, #196]	; (800f918 <run_shortest+0x7e8>)
 800f852:	781b      	ldrb	r3, [r3, #0]
 800f854:	3b02      	subs	r3, #2
 800f856:	4a31      	ldr	r2, [pc, #196]	; (800f91c <run_shortest+0x7ec>)
 800f858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f85c:	f113 0f03 	cmn.w	r3, #3
 800f860:	d12d      	bne.n	800f8be <run_shortest+0x78e>
							pass[pass_count] = pass[pass_count] - 1;
 800f862:	4b2d      	ldr	r3, [pc, #180]	; (800f918 <run_shortest+0x7e8>)
 800f864:	781b      	ldrb	r3, [r3, #0]
 800f866:	461a      	mov	r2, r3
 800f868:	4b2c      	ldr	r3, [pc, #176]	; (800f91c <run_shortest+0x7ec>)
 800f86a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f86e:	4a2a      	ldr	r2, [pc, #168]	; (800f918 <run_shortest+0x7e8>)
 800f870:	7812      	ldrb	r2, [r2, #0]
 800f872:	4611      	mov	r1, r2
 800f874:	3b01      	subs	r3, #1
 800f876:	4a29      	ldr	r2, [pc, #164]	; (800f91c <run_shortest+0x7ec>)
 800f878:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f87c:	4b26      	ldr	r3, [pc, #152]	; (800f918 <run_shortest+0x7e8>)
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	461a      	mov	r2, r3
 800f882:	4b26      	ldr	r3, [pc, #152]	; (800f91c <run_shortest+0x7ec>)
 800f884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d107      	bne.n	800f89c <run_shortest+0x76c>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f88c:	4b22      	ldr	r3, [pc, #136]	; (800f918 <run_shortest+0x7e8>)
 800f88e:	781b      	ldrb	r3, [r3, #0]
 800f890:	4619      	mov	r1, r3
 800f892:	4b22      	ldr	r3, [pc, #136]	; (800f91c <run_shortest+0x7ec>)
 800f894:	f04f 32ff 	mov.w	r2, #4294967295
 800f898:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -15;		//左135
 800f89c:	4b1e      	ldr	r3, [pc, #120]	; (800f918 <run_shortest+0x7e8>)
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	3b01      	subs	r3, #1
 800f8a2:	4a1e      	ldr	r2, [pc, #120]	; (800f91c <run_shortest+0x7ec>)
 800f8a4:	f06f 010e 	mvn.w	r1, #14
 800f8a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f8ac:	4b1a      	ldr	r3, [pc, #104]	; (800f918 <run_shortest+0x7e8>)
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	3b02      	subs	r3, #2
 800f8b2:	4a1a      	ldr	r2, [pc, #104]	; (800f91c <run_shortest+0x7ec>)
 800f8b4:	f04f 31ff 	mov.w	r1, #4294967295
 800f8b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f8bc:	e024      	b.n	800f908 <run_shortest+0x7d8>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f8be:	4b16      	ldr	r3, [pc, #88]	; (800f918 <run_shortest+0x7e8>)
 800f8c0:	781b      	ldrb	r3, [r3, #0]
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	4b15      	ldr	r3, [pc, #84]	; (800f91c <run_shortest+0x7ec>)
 800f8c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8ca:	4a13      	ldr	r2, [pc, #76]	; (800f918 <run_shortest+0x7e8>)
 800f8cc:	7812      	ldrb	r2, [r2, #0]
 800f8ce:	4611      	mov	r1, r2
 800f8d0:	3b01      	subs	r3, #1
 800f8d2:	4a12      	ldr	r2, [pc, #72]	; (800f91c <run_shortest+0x7ec>)
 800f8d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f8d8:	4b0f      	ldr	r3, [pc, #60]	; (800f918 <run_shortest+0x7e8>)
 800f8da:	781b      	ldrb	r3, [r3, #0]
 800f8dc:	461a      	mov	r2, r3
 800f8de:	4b0f      	ldr	r3, [pc, #60]	; (800f91c <run_shortest+0x7ec>)
 800f8e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d107      	bne.n	800f8f8 <run_shortest+0x7c8>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f8e8:	4b0b      	ldr	r3, [pc, #44]	; (800f918 <run_shortest+0x7e8>)
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	4619      	mov	r1, r3
 800f8ee:	4b0b      	ldr	r3, [pc, #44]	; (800f91c <run_shortest+0x7ec>)
 800f8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800f8f4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -13;		//左45
 800f8f8:	4b07      	ldr	r3, [pc, #28]	; (800f918 <run_shortest+0x7e8>)
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	3b01      	subs	r3, #1
 800f8fe:	4a07      	ldr	r2, [pc, #28]	; (800f91c <run_shortest+0x7ec>)
 800f900:	f06f 010c 	mvn.w	r1, #12
 800f904:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//***************************************************************************************出のモーションend
				}
			}
			//		if(){}

			pass_count++;
 800f908:	4b03      	ldr	r3, [pc, #12]	; (800f918 <run_shortest+0x7e8>)
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	3301      	adds	r3, #1
 800f90e:	b2da      	uxtb	r2, r3
 800f910:	4b01      	ldr	r3, [pc, #4]	; (800f918 <run_shortest+0x7e8>)
 800f912:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800f914:	e60a      	b.n	800f52c <run_shortest+0x3fc>
 800f916:	bf00      	nop
 800f918:	20000828 	.word	0x20000828
 800f91c:	2000083c 	.word	0x2000083c
				break;
 800f920:	bf00      	nop
		}

		pass_count = 1;
 800f922:	4ba3      	ldr	r3, [pc, #652]	; (800fbb0 <run_shortest+0xa80>)
 800f924:	2201      	movs	r2, #1
 800f926:	701a      	strb	r2, [r3, #0]
		while (1) {		//斜の圧縮
			if (pass[pass_count] == 0) {
 800f928:	4ba1      	ldr	r3, [pc, #644]	; (800fbb0 <run_shortest+0xa80>)
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	461a      	mov	r2, r3
 800f92e:	4ba1      	ldr	r3, [pc, #644]	; (800fbb4 <run_shortest+0xa84>)
 800f930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f934:	2b00      	cmp	r3, #0
 800f936:	f000 813f 	beq.w	800fbb8 <run_shortest+0xa88>
				break;
			}

			if (pass[pass_count] == -8 || pass[pass_count] == -9
 800f93a:	4b9d      	ldr	r3, [pc, #628]	; (800fbb0 <run_shortest+0xa80>)
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	461a      	mov	r2, r3
 800f940:	4b9c      	ldr	r3, [pc, #624]	; (800fbb4 <run_shortest+0xa84>)
 800f942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f946:	f113 0f08 	cmn.w	r3, #8
 800f94a:	d01b      	beq.n	800f984 <run_shortest+0x854>
 800f94c:	4b98      	ldr	r3, [pc, #608]	; (800fbb0 <run_shortest+0xa80>)
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	461a      	mov	r2, r3
 800f952:	4b98      	ldr	r3, [pc, #608]	; (800fbb4 <run_shortest+0xa84>)
 800f954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f958:	f113 0f09 	cmn.w	r3, #9
 800f95c:	d012      	beq.n	800f984 <run_shortest+0x854>
					|| pass[pass_count] == -10 || pass[pass_count] == -11) {
 800f95e:	4b94      	ldr	r3, [pc, #592]	; (800fbb0 <run_shortest+0xa80>)
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	461a      	mov	r2, r3
 800f964:	4b93      	ldr	r3, [pc, #588]	; (800fbb4 <run_shortest+0xa84>)
 800f966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f96a:	f113 0f0a 	cmn.w	r3, #10
 800f96e:	d009      	beq.n	800f984 <run_shortest+0x854>
 800f970:	4b8f      	ldr	r3, [pc, #572]	; (800fbb0 <run_shortest+0xa80>)
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	461a      	mov	r2, r3
 800f976:	4b8f      	ldr	r3, [pc, #572]	; (800fbb4 <run_shortest+0xa84>)
 800f978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f97c:	f113 0f0b 	cmn.w	r3, #11
 800f980:	f040 810f 	bne.w	800fba2 <run_shortest+0xa72>
				if (pass[pass_count] == -8 || pass[pass_count] == -10) {
 800f984:	4b8a      	ldr	r3, [pc, #552]	; (800fbb0 <run_shortest+0xa80>)
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	461a      	mov	r2, r3
 800f98a:	4b8a      	ldr	r3, [pc, #552]	; (800fbb4 <run_shortest+0xa84>)
 800f98c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f990:	f113 0f08 	cmn.w	r3, #8
 800f994:	d008      	beq.n	800f9a8 <run_shortest+0x878>
 800f996:	4b86      	ldr	r3, [pc, #536]	; (800fbb0 <run_shortest+0xa80>)
 800f998:	781b      	ldrb	r3, [r3, #0]
 800f99a:	461a      	mov	r2, r3
 800f99c:	4b85      	ldr	r3, [pc, #532]	; (800fbb4 <run_shortest+0xa84>)
 800f99e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9a2:	f113 0f0a 	cmn.w	r3, #10
 800f9a6:	d102      	bne.n	800f9ae <run_shortest+0x87e>
					slant_direction = -3;
 800f9a8:	f06f 0302 	mvn.w	r3, #2
 800f9ac:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				if (pass[pass_count] == -9 || pass[pass_count] == -11) {
 800f9ae:	4b80      	ldr	r3, [pc, #512]	; (800fbb0 <run_shortest+0xa80>)
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	4b7f      	ldr	r3, [pc, #508]	; (800fbb4 <run_shortest+0xa84>)
 800f9b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9ba:	f113 0f09 	cmn.w	r3, #9
 800f9be:	d008      	beq.n	800f9d2 <run_shortest+0x8a2>
 800f9c0:	4b7b      	ldr	r3, [pc, #492]	; (800fbb0 <run_shortest+0xa80>)
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	4b7b      	ldr	r3, [pc, #492]	; (800fbb4 <run_shortest+0xa84>)
 800f9c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9cc:	f113 0f0b 	cmn.w	r3, #11
 800f9d0:	d102      	bne.n	800f9d8 <run_shortest+0x8a8>
					slant_direction = -2;
 800f9d2:	f06f 0301 	mvn.w	r3, #1
 800f9d6:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				pass_count++;
 800f9d8:	4b75      	ldr	r3, [pc, #468]	; (800fbb0 <run_shortest+0xa80>)
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	3301      	adds	r3, #1
 800f9de:	b2da      	uxtb	r2, r3
 800f9e0:	4b73      	ldr	r3, [pc, #460]	; (800fbb0 <run_shortest+0xa80>)
 800f9e2:	701a      	strb	r2, [r3, #0]
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800f9e4:	4b72      	ldr	r3, [pc, #456]	; (800fbb0 <run_shortest+0xa80>)
 800f9e6:	781b      	ldrb	r3, [r3, #0]
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	4b72      	ldr	r3, [pc, #456]	; (800fbb4 <run_shortest+0xa84>)
 800f9ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9f4:	d105      	bne.n	800fa02 <run_shortest+0x8d2>
					pass_count++;
 800f9f6:	4b6e      	ldr	r3, [pc, #440]	; (800fbb0 <run_shortest+0xa80>)
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	b2da      	uxtb	r2, r3
 800f9fe:	4b6c      	ldr	r3, [pc, #432]	; (800fbb0 <run_shortest+0xa80>)
 800fa00:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800fa02:	4b6b      	ldr	r3, [pc, #428]	; (800fbb0 <run_shortest+0xa80>)
 800fa04:	781b      	ldrb	r3, [r3, #0]
 800fa06:	461a      	mov	r2, r3
 800fa08:	4b6a      	ldr	r3, [pc, #424]	; (800fbb4 <run_shortest+0xa84>)
 800fa0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa12:	d105      	bne.n	800fa20 <run_shortest+0x8f0>
					pass_count++;
 800fa14:	4b66      	ldr	r3, [pc, #408]	; (800fbb0 <run_shortest+0xa80>)
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	3301      	adds	r3, #1
 800fa1a:	b2da      	uxtb	r2, r3
 800fa1c:	4b64      	ldr	r3, [pc, #400]	; (800fbb0 <run_shortest+0xa80>)
 800fa1e:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] >= -3) {
 800fa20:	4b63      	ldr	r3, [pc, #396]	; (800fbb0 <run_shortest+0xa80>)
 800fa22:	781b      	ldrb	r3, [r3, #0]
 800fa24:	461a      	mov	r2, r3
 800fa26:	4b63      	ldr	r3, [pc, #396]	; (800fbb4 <run_shortest+0xa84>)
 800fa28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa2c:	f113 0f03 	cmn.w	r3, #3
 800fa30:	f2c0 80ad 	blt.w	800fb8e <run_shortest+0xa5e>
					slant_count = pass_count;
 800fa34:	4b5e      	ldr	r3, [pc, #376]	; (800fbb0 <run_shortest+0xa80>)
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					pass[slant_count] = 51;
 800fa3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fa40:	4a5c      	ldr	r2, [pc, #368]	; (800fbb4 <run_shortest+0xa84>)
 800fa42:	2133      	movs	r1, #51	; 0x33
 800fa44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					pass_count++;
 800fa48:	4b59      	ldr	r3, [pc, #356]	; (800fbb0 <run_shortest+0xa80>)
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	b2da      	uxtb	r2, r3
 800fa50:	4b57      	ldr	r3, [pc, #348]	; (800fbb0 <run_shortest+0xa80>)
 800fa52:	701a      	strb	r2, [r3, #0]
				}

				//***************************************************************************************途中のモーションstart
				while (pass[pass_count] >= -3) {
 800fa54:	e09b      	b.n	800fb8e <run_shortest+0xa5e>
					if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800fa56:	4b56      	ldr	r3, [pc, #344]	; (800fbb0 <run_shortest+0xa80>)
 800fa58:	781b      	ldrb	r3, [r3, #0]
 800fa5a:	461a      	mov	r2, r3
 800fa5c:	4b55      	ldr	r3, [pc, #340]	; (800fbb4 <run_shortest+0xa84>)
 800fa5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa66:	d105      	bne.n	800fa74 <run_shortest+0x944>
						pass_count++;
 800fa68:	4b51      	ldr	r3, [pc, #324]	; (800fbb0 <run_shortest+0xa80>)
 800fa6a:	781b      	ldrb	r3, [r3, #0]
 800fa6c:	3301      	adds	r3, #1
 800fa6e:	b2da      	uxtb	r2, r3
 800fa70:	4b4f      	ldr	r3, [pc, #316]	; (800fbb0 <run_shortest+0xa80>)
 800fa72:	701a      	strb	r2, [r3, #0]
					}
					if (pass[pass_count] == -12 || pass[pass_count] == -13
 800fa74:	4b4e      	ldr	r3, [pc, #312]	; (800fbb0 <run_shortest+0xa80>)
 800fa76:	781b      	ldrb	r3, [r3, #0]
 800fa78:	461a      	mov	r2, r3
 800fa7a:	4b4e      	ldr	r3, [pc, #312]	; (800fbb4 <run_shortest+0xa84>)
 800fa7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa80:	f113 0f0c 	cmn.w	r3, #12
 800fa84:	f000 808d 	beq.w	800fba2 <run_shortest+0xa72>
 800fa88:	4b49      	ldr	r3, [pc, #292]	; (800fbb0 <run_shortest+0xa80>)
 800fa8a:	781b      	ldrb	r3, [r3, #0]
 800fa8c:	461a      	mov	r2, r3
 800fa8e:	4b49      	ldr	r3, [pc, #292]	; (800fbb4 <run_shortest+0xa84>)
 800fa90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa94:	f113 0f0d 	cmn.w	r3, #13
 800fa98:	f000 8083 	beq.w	800fba2 <run_shortest+0xa72>
							|| pass[pass_count] == -14
 800fa9c:	4b44      	ldr	r3, [pc, #272]	; (800fbb0 <run_shortest+0xa80>)
 800fa9e:	781b      	ldrb	r3, [r3, #0]
 800faa0:	461a      	mov	r2, r3
 800faa2:	4b44      	ldr	r3, [pc, #272]	; (800fbb4 <run_shortest+0xa84>)
 800faa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faa8:	f113 0f0e 	cmn.w	r3, #14
 800faac:	d079      	beq.n	800fba2 <run_shortest+0xa72>
							|| pass[pass_count] == -15) {
 800faae:	4b40      	ldr	r3, [pc, #256]	; (800fbb0 <run_shortest+0xa80>)
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	461a      	mov	r2, r3
 800fab4:	4b3f      	ldr	r3, [pc, #252]	; (800fbb4 <run_shortest+0xa84>)
 800fab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faba:	f113 0f0f 	cmn.w	r3, #15
 800fabe:	d070      	beq.n	800fba2 <run_shortest+0xa72>
						break;
					}
					if (pass[pass_count] == slant_direction) {
 800fac0:	4b3b      	ldr	r3, [pc, #236]	; (800fbb0 <run_shortest+0xa80>)
 800fac2:	781b      	ldrb	r3, [r3, #0]
 800fac4:	461a      	mov	r2, r3
 800fac6:	4b3b      	ldr	r3, [pc, #236]	; (800fbb4 <run_shortest+0xa84>)
 800fac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800facc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800face:	429a      	cmp	r2, r3
 800fad0:	d127      	bne.n	800fb22 <run_shortest+0x9f2>
						pass[slant_count] = pass[slant_count] - 1;
 800fad2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fad6:	4a37      	ldr	r2, [pc, #220]	; (800fbb4 <run_shortest+0xa84>)
 800fad8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fadc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fae0:	3a01      	subs	r2, #1
 800fae2:	4934      	ldr	r1, [pc, #208]	; (800fbb4 <run_shortest+0xa84>)
 800fae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						slant_count = pass_count;
 800fae8:	4b31      	ldr	r3, [pc, #196]	; (800fbb0 <run_shortest+0xa80>)
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						if (slant_direction == -2) {
 800faf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf2:	f113 0f02 	cmn.w	r3, #2
 800faf6:	d107      	bne.n	800fb08 <run_shortest+0x9d8>
							pass[pass_count] = -16;
 800faf8:	4b2d      	ldr	r3, [pc, #180]	; (800fbb0 <run_shortest+0xa80>)
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	4619      	mov	r1, r3
 800fafe:	4b2d      	ldr	r3, [pc, #180]	; (800fbb4 <run_shortest+0xa84>)
 800fb00:	f06f 020f 	mvn.w	r2, #15
 800fb04:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						}
						if (slant_direction == -3) {
 800fb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb0a:	f113 0f03 	cmn.w	r3, #3
 800fb0e:	d138      	bne.n	800fb82 <run_shortest+0xa52>
							pass[pass_count] = -17;
 800fb10:	4b27      	ldr	r3, [pc, #156]	; (800fbb0 <run_shortest+0xa80>)
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	4619      	mov	r1, r3
 800fb16:	4b27      	ldr	r3, [pc, #156]	; (800fbb4 <run_shortest+0xa84>)
 800fb18:	f06f 0210 	mvn.w	r2, #16
 800fb1c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800fb20:	e02f      	b.n	800fb82 <run_shortest+0xa52>
						}

					} else {
						if (pass[slant_count] >= 50) {
 800fb22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb26:	4a23      	ldr	r2, [pc, #140]	; (800fbb4 <run_shortest+0xa84>)
 800fb28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb2c:	2b31      	cmp	r3, #49	; 0x31
 800fb2e:	dd08      	ble.n	800fb42 <run_shortest+0xa12>
							pass[pass_count] = -1;
 800fb30:	4b1f      	ldr	r3, [pc, #124]	; (800fbb0 <run_shortest+0xa80>)
 800fb32:	781b      	ldrb	r3, [r3, #0]
 800fb34:	4619      	mov	r1, r3
 800fb36:	4b1f      	ldr	r3, [pc, #124]	; (800fbb4 <run_shortest+0xa84>)
 800fb38:	f04f 32ff 	mov.w	r2, #4294967295
 800fb3c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800fb40:	e009      	b.n	800fb56 <run_shortest+0xa26>
						} else {
							slant_count = pass_count;
 800fb42:	4b1b      	ldr	r3, [pc, #108]	; (800fbb0 <run_shortest+0xa80>)
 800fb44:	781b      	ldrb	r3, [r3, #0]
 800fb46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							pass[slant_count] = 50;
 800fb4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb4e:	4a19      	ldr	r2, [pc, #100]	; (800fbb4 <run_shortest+0xa84>)
 800fb50:	2132      	movs	r1, #50	; 0x32
 800fb52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[slant_count] = pass[slant_count] + 1;
 800fb56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb5a:	4a16      	ldr	r2, [pc, #88]	; (800fbb4 <run_shortest+0xa84>)
 800fb5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fb60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb64:	3201      	adds	r2, #1
 800fb66:	4913      	ldr	r1, [pc, #76]	; (800fbb4 <run_shortest+0xa84>)
 800fb68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (slant_direction == -2) {
 800fb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb6e:	f113 0f02 	cmn.w	r3, #2
 800fb72:	d103      	bne.n	800fb7c <run_shortest+0xa4c>
							slant_direction = -3;
 800fb74:	f06f 0302 	mvn.w	r3, #2
 800fb78:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb7a:	e002      	b.n	800fb82 <run_shortest+0xa52>
						} else {
							slant_direction = -2;
 800fb7c:	f06f 0301 	mvn.w	r3, #1
 800fb80:	63bb      	str	r3, [r7, #56]	; 0x38
						}

					}

					pass_count++;
 800fb82:	4b0b      	ldr	r3, [pc, #44]	; (800fbb0 <run_shortest+0xa80>)
 800fb84:	781b      	ldrb	r3, [r3, #0]
 800fb86:	3301      	adds	r3, #1
 800fb88:	b2da      	uxtb	r2, r3
 800fb8a:	4b09      	ldr	r3, [pc, #36]	; (800fbb0 <run_shortest+0xa80>)
 800fb8c:	701a      	strb	r2, [r3, #0]
				while (pass[pass_count] >= -3) {
 800fb8e:	4b08      	ldr	r3, [pc, #32]	; (800fbb0 <run_shortest+0xa80>)
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	461a      	mov	r2, r3
 800fb94:	4b07      	ldr	r3, [pc, #28]	; (800fbb4 <run_shortest+0xa84>)
 800fb96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb9a:	f113 0f03 	cmn.w	r3, #3
 800fb9e:	f6bf af5a 	bge.w	800fa56 <run_shortest+0x926>

			}

			//		if(){}

			pass_count++;
 800fba2:	4b03      	ldr	r3, [pc, #12]	; (800fbb0 <run_shortest+0xa80>)
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	3301      	adds	r3, #1
 800fba8:	b2da      	uxtb	r2, r3
 800fbaa:	4b01      	ldr	r3, [pc, #4]	; (800fbb0 <run_shortest+0xa80>)
 800fbac:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800fbae:	e6bb      	b.n	800f928 <run_shortest+0x7f8>
 800fbb0:	20000828 	.word	0x20000828
 800fbb4:	2000083c 	.word	0x2000083c
				break;
 800fbb8:	bf00      	nop
		}
		pass_count=0;
 800fbba:	4bb3      	ldr	r3, [pc, #716]	; (800fe88 <run_shortest+0xd58>)
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	701a      	strb	r2, [r3, #0]
		while (1) {		//パス圧縮

			if (pass[pass_count] == 50) {
 800fbc0:	4bb1      	ldr	r3, [pc, #708]	; (800fe88 <run_shortest+0xd58>)
 800fbc2:	781b      	ldrb	r3, [r3, #0]
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	4bb1      	ldr	r3, [pc, #708]	; (800fe8c <run_shortest+0xd5c>)
 800fbc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbcc:	2b32      	cmp	r3, #50	; 0x32
 800fbce:	d107      	bne.n	800fbe0 <run_shortest+0xab0>
				pass[pass_count] =-1;
 800fbd0:	4bad      	ldr	r3, [pc, #692]	; (800fe88 <run_shortest+0xd58>)
 800fbd2:	781b      	ldrb	r3, [r3, #0]
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	4bad      	ldr	r3, [pc, #692]	; (800fe8c <run_shortest+0xd5c>)
 800fbd8:	f04f 32ff 	mov.w	r2, #4294967295
 800fbdc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

			}
			if (pass[pass_count] == 0) {
 800fbe0:	4ba9      	ldr	r3, [pc, #676]	; (800fe88 <run_shortest+0xd58>)
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	4ba9      	ldr	r3, [pc, #676]	; (800fe8c <run_shortest+0xd5c>)
 800fbe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d006      	beq.n	800fbfe <run_shortest+0xace>
				break;
			}
			pass_count++;
 800fbf0:	4ba5      	ldr	r3, [pc, #660]	; (800fe88 <run_shortest+0xd58>)
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	b2da      	uxtb	r2, r3
 800fbf8:	4ba3      	ldr	r3, [pc, #652]	; (800fe88 <run_shortest+0xd58>)
 800fbfa:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 50) {
 800fbfc:	e7e0      	b.n	800fbc0 <run_shortest+0xa90>
				break;
 800fbfe:	bf00      	nop
		}

	}
}
	int j = 0;
 800fc00:	2300      	movs	r3, #0
 800fc02:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800fc04:	e00b      	b.n	800fc1e <run_shortest+0xaee>
		printf("pass_count %d pass %d\n", j, pass[j]);
 800fc06:	4aa1      	ldr	r2, [pc, #644]	; (800fe8c <run_shortest+0xd5c>)
 800fc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc0e:	461a      	mov	r2, r3
 800fc10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc12:	489f      	ldr	r0, [pc, #636]	; (800fe90 <run_shortest+0xd60>)
 800fc14:	f010 ffd4 	bl	8020bc0 <iprintf>
		j++;
 800fc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800fc1e:	4a9b      	ldr	r2, [pc, #620]	; (800fe8c <run_shortest+0xd5c>)
 800fc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d1ed      	bne.n	800fc06 <run_shortest+0xad6>
	}
	int pass_count2;
	pass_count2=0;
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fc2e:	e002      	b.n	800fc36 <run_shortest+0xb06>
		pass_count2++;
 800fc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc32:	3301      	adds	r3, #1
 800fc34:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fc36:	4a95      	ldr	r2, [pc, #596]	; (800fe8c <run_shortest+0xd5c>)
 800fc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc42:	d0f5      	beq.n	800fc30 <run_shortest+0xb00>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fc44:	4a91      	ldr	r2, [pc, #580]	; (800fe8c <run_shortest+0xd5c>)
 800fc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc4c:	934e      	str	r3, [sp, #312]	; 0x138
 800fc4e:	4668      	mov	r0, sp
 800fc50:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fc54:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fc58:	4619      	mov	r1, r3
 800fc5a:	f010 fb31 	bl	80202c0 <memcpy>
 800fc5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fc62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc64:	f007 ff82 	bl	8017b6c <get_center_velocity>
 800fc68:	ed87 0a08 	vstr	s0, [r7, #32]
	printf("%d,%f\n",pass_count2, end_velocity);
 800fc6c:	6a38      	ldr	r0, [r7, #32]
 800fc6e:	f7f0 fc93 	bl	8000598 <__aeabi_f2d>
 800fc72:	4602      	mov	r2, r0
 800fc74:	460b      	mov	r3, r1
 800fc76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc78:	4886      	ldr	r0, [pc, #536]	; (800fe94 <run_shortest+0xd64>)
 800fc7a:	f010 ffa1 	bl	8020bc0 <iprintf>

	HAL_Delay(500);
 800fc7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fc82:	f009 f84b 	bl	8018d1c <HAL_Delay>
	pl_DriveMotor_standby(ON);
 800fc86:	2001      	movs	r0, #1
 800fc88:	f7f7 fe12 	bl	80078b0 <pl_DriveMotor_standby>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800fc8c:	2003      	movs	r0, #3
 800fc8e:	f7f7 fe41 	bl	8007914 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800fc92:	2003      	movs	r0, #3
 800fc94:	f7f7 fe16 	bl	80078c4 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800fc98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fc9c:	f7f8 f938 	bl	8007f10 <wait_ms_NoReset>
	no_safty = 1;
 800fca0:	4b7d      	ldr	r3, [pc, #500]	; (800fe98 <run_shortest+0xd68>)
 800fca2:	2201      	movs	r2, #1
 800fca4:	701a      	strb	r2, [r3, #0]
	no_safty = 0;
 800fca6:	4b7c      	ldr	r3, [pc, #496]	; (800fe98 <run_shortest+0xd68>)
 800fca8:	2200      	movs	r2, #0
 800fcaa:	701a      	strb	r2, [r3, #0]
	clear_Ierror();
 800fcac:	f7f4 fc80 	bl	80045b0 <clear_Ierror>
	////wall_control_mode = 1;
	if (fun_mode == 1) {
 800fcb0:	7abb      	ldrb	r3, [r7, #10]
 800fcb2:	2b01      	cmp	r3, #1
 800fcb4:	d12d      	bne.n	800fd12 <run_shortest+0xbe2>
		pl_FunMotor_duty(fun_ratio*BATT_MAX/g_V_battery_mean);
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f7f0 fc6e 	bl	8000598 <__aeabi_f2d>
 800fcbc:	a370      	add	r3, pc, #448	; (adr r3, 800fe80 <run_shortest+0xd50>)
 800fcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc2:	f7f0 fcc1 	bl	8000648 <__aeabi_dmul>
 800fcc6:	4602      	mov	r2, r0
 800fcc8:	460b      	mov	r3, r1
 800fcca:	4614      	mov	r4, r2
 800fccc:	461d      	mov	r5, r3
 800fcce:	4b73      	ldr	r3, [pc, #460]	; (800fe9c <run_shortest+0xd6c>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7f0 fc60 	bl	8000598 <__aeabi_f2d>
 800fcd8:	4602      	mov	r2, r0
 800fcda:	460b      	mov	r3, r1
 800fcdc:	4620      	mov	r0, r4
 800fcde:	4629      	mov	r1, r5
 800fce0:	f7f0 fddc 	bl	800089c <__aeabi_ddiv>
 800fce4:	4602      	mov	r2, r0
 800fce6:	460b      	mov	r3, r1
 800fce8:	4610      	mov	r0, r2
 800fcea:	4619      	mov	r1, r3
 800fcec:	f7f0 ff84 	bl	8000bf8 <__aeabi_d2f>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	ee00 3a10 	vmov	s0, r3
 800fcf6:	f7f7 fe79 	bl	80079ec <pl_FunMotor_duty>
		pl_FunMotor_start();
 800fcfa:	f7f7 fe63 	bl	80079c4 <pl_FunMotor_start>
		HAL_Delay(600);
 800fcfe:	f44f 7016 	mov.w	r0, #600	; 0x258
 800fd02:	f009 f80b 	bl	8018d1c <HAL_Delay>
		reset_gyro();
 800fd06:	f7f1 fd2f 	bl	8001768 <reset_gyro>
		reset_speed();
 800fd0a:	f7f1 f985 	bl	8001018 <reset_speed>
		clear_Ierror();
 800fd0e:	f7f4 fc4f 	bl	80045b0 <clear_Ierror>
//				pl_FunMotor_duty(160);
//		pl_FunMotor_start();
//						HAL_Delay(2000);	//候補1

	}
	maze_mode = 1;
 800fd12:	4b63      	ldr	r3, [pc, #396]	; (800fea0 <run_shortest+0xd70>)
 800fd14:	2201      	movs	r2, #1
 800fd16:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 1;
 800fd18:	4b62      	ldr	r3, [pc, #392]	; (800fea4 <run_shortest+0xd74>)
 800fd1a:	2201      	movs	r2, #1
 800fd1c:	701a      	strb	r2, [r3, #0]
//	record_mode=14;
	record_mode=18;
 800fd1e:	4b62      	ldr	r3, [pc, #392]	; (800fea8 <run_shortest+0xd78>)
 800fd20:	2212      	movs	r2, #18
 800fd22:	701a      	strb	r2, [r3, #0]
//	encoder_PID_error=2500;
//	gyro_PID_error=1800;
	wall_control = 0;
 800fd24:	4b61      	ldr	r3, [pc, #388]	; (800feac <run_shortest+0xd7c>)
 800fd26:	2200      	movs	r2, #0
 800fd28:	601a      	str	r2, [r3, #0]
	pass_count = 0;
 800fd2a:	4b57      	ldr	r3, [pc, #348]	; (800fe88 <run_shortest+0xd58>)
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	701a      	strb	r2, [r3, #0]


	mode.WallControlMode=1;
 800fd30:	2301      	movs	r3, #1
 800fd32:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800fd34:	2300      	movs	r3, #0
 800fd36:	767b      	strb	r3, [r7, #25]
	mode.calMazeMode=0;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	76bb      	strb	r3, [r7, #26]
	mode.WallCutMode=0;
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	76fb      	strb	r3, [r7, #27]
	pass_count2=0;
 800fd40:	2300      	movs	r3, #0
 800fd42:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fd44:	e002      	b.n	800fd4c <run_shortest+0xc1c>
		pass_count2++;
 800fd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd48:	3301      	adds	r3, #1
 800fd4a:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fd4c:	4a4f      	ldr	r2, [pc, #316]	; (800fe8c <run_shortest+0xd5c>)
 800fd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd58:	d0f5      	beq.n	800fd46 <run_shortest+0xc16>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fd5a:	4a4c      	ldr	r2, [pc, #304]	; (800fe8c <run_shortest+0xd5c>)
 800fd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd62:	934e      	str	r3, [sp, #312]	; 0x138
 800fd64:	4668      	mov	r0, sp
 800fd66:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fd6a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fd6e:	4619      	mov	r1, r3
 800fd70:	f010 faa6 	bl	80202c0 <memcpy>
 800fd74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fd78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd7a:	f007 fef7 	bl	8017b6c <get_center_velocity>
 800fd7e:	ed87 0a08 	vstr	s0, [r7, #32]
	straight_table2(BACK_TO_CENTER_FRONT,0,end_velocity,end_velocity,end_velocity*end_velocity/ BACK_TO_CENTER_FRONT/2, mode);
 800fd82:	edd7 7a08 	vldr	s15, [r7, #32]
 800fd86:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fd8a:	ee17 0a90 	vmov	r0, s15
 800fd8e:	f7f0 fc03 	bl	8000598 <__aeabi_f2d>
 800fd92:	f04f 0200 	mov.w	r2, #0
 800fd96:	4b46      	ldr	r3, [pc, #280]	; (800feb0 <run_shortest+0xd80>)
 800fd98:	f7f0 fd80 	bl	800089c <__aeabi_ddiv>
 800fd9c:	4602      	mov	r2, r0
 800fd9e:	460b      	mov	r3, r1
 800fda0:	4610      	mov	r0, r2
 800fda2:	4619      	mov	r1, r3
 800fda4:	f04f 0200 	mov.w	r2, #0
 800fda8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fdac:	f7f0 fd76 	bl	800089c <__aeabi_ddiv>
 800fdb0:	4602      	mov	r2, r0
 800fdb2:	460b      	mov	r3, r1
 800fdb4:	4610      	mov	r0, r2
 800fdb6:	4619      	mov	r1, r3
 800fdb8:	f7f0 ff1e 	bl	8000bf8 <__aeabi_d2f>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	69b8      	ldr	r0, [r7, #24]
 800fdc0:	ee02 3a10 	vmov	s4, r3
 800fdc4:	edd7 1a08 	vldr	s3, [r7, #32]
 800fdc8:	ed97 1a08 	vldr	s2, [r7, #32]
 800fdcc:	eddf 0a39 	vldr	s1, [pc, #228]	; 800feb4 <run_shortest+0xd84>
 800fdd0:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 800fdd4:	f7f3 f902 	bl	8002fdc <straight_table2>


	while (pass_count <= 255) {
		pass_count2=pass_count+1;
 800fdd8:	4b2b      	ldr	r3, [pc, #172]	; (800fe88 <run_shortest+0xd58>)
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	3301      	adds	r3, #1
 800fdde:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800fde0:	e002      	b.n	800fde8 <run_shortest+0xcb8>
			pass_count2++;
 800fde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde4:	3301      	adds	r3, #1
 800fde6:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800fde8:	4a28      	ldr	r2, [pc, #160]	; (800fe8c <run_shortest+0xd5c>)
 800fdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdf4:	d0f5      	beq.n	800fde2 <run_shortest+0xcb2>
		}
		end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fdf6:	4a25      	ldr	r2, [pc, #148]	; (800fe8c <run_shortest+0xd5c>)
 800fdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdfe:	934e      	str	r3, [sp, #312]	; 0x138
 800fe00:	4668      	mov	r0, sp
 800fe02:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fe06:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fe0a:	4619      	mov	r1, r3
 800fe0c:	f010 fa58 	bl	80202c0 <memcpy>
 800fe10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fe14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe16:	f007 fea9 	bl	8017b6c <get_center_velocity>
 800fe1a:	ed87 0a08 	vstr	s0, [r7, #32]

		if (pass[pass_count] == -1) {
 800fe1e:	4b1a      	ldr	r3, [pc, #104]	; (800fe88 <run_shortest+0xd58>)
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	461a      	mov	r2, r3
 800fe24:	4b19      	ldr	r3, [pc, #100]	; (800fe8c <run_shortest+0xd5c>)
 800fe26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe2e:	d106      	bne.n	800fe3e <run_shortest+0xd0e>
			pass_count++;
 800fe30:	4b15      	ldr	r3, [pc, #84]	; (800fe88 <run_shortest+0xd58>)
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	3301      	adds	r3, #1
 800fe36:	b2da      	uxtb	r2, r3
 800fe38:	4b13      	ldr	r3, [pc, #76]	; (800fe88 <run_shortest+0xd58>)
 800fe3a:	701a      	strb	r2, [r3, #0]
 800fe3c:	e2a1      	b.n	8010382 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -2) {
 800fe3e:	4b12      	ldr	r3, [pc, #72]	; (800fe88 <run_shortest+0xd58>)
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	461a      	mov	r2, r3
 800fe44:	4b11      	ldr	r3, [pc, #68]	; (800fe8c <run_shortest+0xd5c>)
 800fe46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe4a:	f113 0f02 	cmn.w	r3, #2
 800fe4e:	d133      	bne.n	800feb8 <run_shortest+0xd88>

			slalomR(howspeed.slalom_R, OFF,SHORTEST,mollifier_mode,end_velocity);
 800fe50:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fe54:	9303      	str	r3, [sp, #12]
 800fe56:	2301      	movs	r3, #1
 800fe58:	9302      	str	r3, [sp, #8]
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	9301      	str	r3, [sp, #4]
 800fe5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe60:	9300      	str	r3, [sp, #0]
 800fe62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fe66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe68:	ed97 0a08 	vldr	s0, [r7, #32]
 800fe6c:	f7fa f874 	bl	8009f58 <slalomR>

			pass_count++;
 800fe70:	4b05      	ldr	r3, [pc, #20]	; (800fe88 <run_shortest+0xd58>)
 800fe72:	781b      	ldrb	r3, [r3, #0]
 800fe74:	3301      	adds	r3, #1
 800fe76:	b2da      	uxtb	r2, r3
 800fe78:	4b03      	ldr	r3, [pc, #12]	; (800fe88 <run_shortest+0xd58>)
 800fe7a:	701a      	strb	r2, [r3, #0]
 800fe7c:	e281      	b.n	8010382 <run_shortest+0x1252>
 800fe7e:	bf00      	nop
 800fe80:	cccccccd 	.word	0xcccccccd
 800fe84:	4010cccc 	.word	0x4010cccc
 800fe88:	20000828 	.word	0x20000828
 800fe8c:	2000083c 	.word	0x2000083c
 800fe90:	080234dc 	.word	0x080234dc
 800fe94:	080234f4 	.word	0x080234f4
 800fe98:	20000806 	.word	0x20000806
 800fe9c:	200004d4 	.word	0x200004d4
 800fea0:	20000834 	.word	0x20000834
 800fea4:	20000808 	.word	0x20000808
 800fea8:	2000edc0 	.word	0x2000edc0
 800feac:	20000830 	.word	0x20000830
 800feb0:	40290000 	.word	0x40290000
 800feb4:	00000000 	.word	0x00000000
		}
		else if (pass[pass_count] == -3) {
 800feb8:	4baa      	ldr	r3, [pc, #680]	; (8010164 <run_shortest+0x1034>)
 800feba:	781b      	ldrb	r3, [r3, #0]
 800febc:	461a      	mov	r2, r3
 800febe:	4baa      	ldr	r3, [pc, #680]	; (8010168 <run_shortest+0x1038>)
 800fec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fec4:	f113 0f03 	cmn.w	r3, #3
 800fec8:	d116      	bne.n	800fef8 <run_shortest+0xdc8>

			slalomL(howspeed.slalom_L, OFF,SHORTEST,mollifier_mode,end_velocity);
 800feca:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fece:	9303      	str	r3, [sp, #12]
 800fed0:	2301      	movs	r3, #1
 800fed2:	9302      	str	r3, [sp, #8]
 800fed4:	2300      	movs	r3, #0
 800fed6:	9301      	str	r3, [sp, #4]
 800fed8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800feda:	9300      	str	r3, [sp, #0]
 800fedc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fee0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fee2:	ed97 0a08 	vldr	s0, [r7, #32]
 800fee6:	f7fa fa1d 	bl	800a324 <slalomL>

			pass_count++;
 800feea:	4b9e      	ldr	r3, [pc, #632]	; (8010164 <run_shortest+0x1034>)
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	3301      	adds	r3, #1
 800fef0:	b2da      	uxtb	r2, r3
 800fef2:	4b9c      	ldr	r3, [pc, #624]	; (8010164 <run_shortest+0x1034>)
 800fef4:	701a      	strb	r2, [r3, #0]
 800fef6:	e244      	b.n	8010382 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -4) {
 800fef8:	4b9a      	ldr	r3, [pc, #616]	; (8010164 <run_shortest+0x1034>)
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	461a      	mov	r2, r3
 800fefe:	4b9a      	ldr	r3, [pc, #616]	; (8010168 <run_shortest+0x1038>)
 800ff00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff04:	f113 0f04 	cmn.w	r3, #4
 800ff08:	d115      	bne.n	800ff36 <run_shortest+0xe06>
			turn90R(howspeed.turn90_R, OFF,mollifier_mode,end_velocity);
 800ff0a:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff0e:	9302      	str	r3, [sp, #8]
 800ff10:	2300      	movs	r3, #0
 800ff12:	9301      	str	r3, [sp, #4]
 800ff14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff18:	9300      	str	r3, [sp, #0]
 800ff1a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ff1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff20:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff24:	f7fa fbe0 	bl	800a6e8 <turn90R>
			pass_count++;
 800ff28:	4b8e      	ldr	r3, [pc, #568]	; (8010164 <run_shortest+0x1034>)
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	3301      	adds	r3, #1
 800ff2e:	b2da      	uxtb	r2, r3
 800ff30:	4b8c      	ldr	r3, [pc, #560]	; (8010164 <run_shortest+0x1034>)
 800ff32:	701a      	strb	r2, [r3, #0]
 800ff34:	e225      	b.n	8010382 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -5) {
 800ff36:	4b8b      	ldr	r3, [pc, #556]	; (8010164 <run_shortest+0x1034>)
 800ff38:	781b      	ldrb	r3, [r3, #0]
 800ff3a:	461a      	mov	r2, r3
 800ff3c:	4b8a      	ldr	r3, [pc, #552]	; (8010168 <run_shortest+0x1038>)
 800ff3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff42:	f113 0f05 	cmn.w	r3, #5
 800ff46:	d115      	bne.n	800ff74 <run_shortest+0xe44>
			turn90L(howspeed.turn90_L, OFF,mollifier_mode,end_velocity);
 800ff48:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff4c:	9302      	str	r3, [sp, #8]
 800ff4e:	2300      	movs	r3, #0
 800ff50:	9301      	str	r3, [sp, #4]
 800ff52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ff56:	9300      	str	r3, [sp, #0]
 800ff58:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ff5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff5e:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff62:	f7fa fd2b 	bl	800a9bc <turn90L>
			pass_count++;
 800ff66:	4b7f      	ldr	r3, [pc, #508]	; (8010164 <run_shortest+0x1034>)
 800ff68:	781b      	ldrb	r3, [r3, #0]
 800ff6a:	3301      	adds	r3, #1
 800ff6c:	b2da      	uxtb	r2, r3
 800ff6e:	4b7d      	ldr	r3, [pc, #500]	; (8010164 <run_shortest+0x1034>)
 800ff70:	701a      	strb	r2, [r3, #0]
 800ff72:	e206      	b.n	8010382 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -6) {
 800ff74:	4b7b      	ldr	r3, [pc, #492]	; (8010164 <run_shortest+0x1034>)
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	461a      	mov	r2, r3
 800ff7a:	4b7b      	ldr	r3, [pc, #492]	; (8010168 <run_shortest+0x1038>)
 800ff7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff80:	f113 0f06 	cmn.w	r3, #6
 800ff84:	d115      	bne.n	800ffb2 <run_shortest+0xe82>
			turn180R(howspeed.turn180_R, OFF,mollifier_mode,end_velocity);
 800ff86:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff8a:	9302      	str	r3, [sp, #8]
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	9301      	str	r3, [sp, #4]
 800ff90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ff94:	9300      	str	r3, [sp, #0]
 800ff96:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800ff9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff9c:	ed97 0a08 	vldr	s0, [r7, #32]
 800ffa0:	f7fa fe70 	bl	800ac84 <turn180R>
			pass_count++;
 800ffa4:	4b6f      	ldr	r3, [pc, #444]	; (8010164 <run_shortest+0x1034>)
 800ffa6:	781b      	ldrb	r3, [r3, #0]
 800ffa8:	3301      	adds	r3, #1
 800ffaa:	b2da      	uxtb	r2, r3
 800ffac:	4b6d      	ldr	r3, [pc, #436]	; (8010164 <run_shortest+0x1034>)
 800ffae:	701a      	strb	r2, [r3, #0]
 800ffb0:	e1e7      	b.n	8010382 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -7) {
 800ffb2:	4b6c      	ldr	r3, [pc, #432]	; (8010164 <run_shortest+0x1034>)
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	461a      	mov	r2, r3
 800ffb8:	4b6b      	ldr	r3, [pc, #428]	; (8010168 <run_shortest+0x1038>)
 800ffba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffbe:	f113 0f07 	cmn.w	r3, #7
 800ffc2:	d115      	bne.n	800fff0 <run_shortest+0xec0>
			turn180L(howspeed.turn180_L, OFF,mollifier_mode,end_velocity);
 800ffc4:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ffc8:	9302      	str	r3, [sp, #8]
 800ffca:	2300      	movs	r3, #0
 800ffcc:	9301      	str	r3, [sp, #4]
 800ffce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ffd2:	9300      	str	r3, [sp, #0]
 800ffd4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800ffd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffda:	ed97 0a08 	vldr	s0, [r7, #32]
 800ffde:	f7fa ffbb 	bl	800af58 <turn180L>
			pass_count++;
 800ffe2:	4b60      	ldr	r3, [pc, #384]	; (8010164 <run_shortest+0x1034>)
 800ffe4:	781b      	ldrb	r3, [r3, #0]
 800ffe6:	3301      	adds	r3, #1
 800ffe8:	b2da      	uxtb	r2, r3
 800ffea:	4b5e      	ldr	r3, [pc, #376]	; (8010164 <run_shortest+0x1034>)
 800ffec:	701a      	strb	r2, [r3, #0]
 800ffee:	e1c8      	b.n	8010382 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -8) { //入り45R
 800fff0:	4b5c      	ldr	r3, [pc, #368]	; (8010164 <run_shortest+0x1034>)
 800fff2:	781b      	ldrb	r3, [r3, #0]
 800fff4:	461a      	mov	r2, r3
 800fff6:	4b5c      	ldr	r3, [pc, #368]	; (8010168 <run_shortest+0x1038>)
 800fff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fffc:	f113 0f08 	cmn.w	r3, #8
 8010000:	d115      	bne.n	801002e <run_shortest+0xefe>
			turn45inR(howspeed.turn45in_R, OFF,mollifier_mode,end_velocity);
 8010002:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010006:	9302      	str	r3, [sp, #8]
 8010008:	2300      	movs	r3, #0
 801000a:	9301      	str	r3, [sp, #4]
 801000c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010010:	9300      	str	r3, [sp, #0]
 8010012:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010016:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010018:	ed97 0a08 	vldr	s0, [r7, #32]
 801001c:	f7fb f904 	bl	800b228 <turn45inR>
			pass_count++;
 8010020:	4b50      	ldr	r3, [pc, #320]	; (8010164 <run_shortest+0x1034>)
 8010022:	781b      	ldrb	r3, [r3, #0]
 8010024:	3301      	adds	r3, #1
 8010026:	b2da      	uxtb	r2, r3
 8010028:	4b4e      	ldr	r3, [pc, #312]	; (8010164 <run_shortest+0x1034>)
 801002a:	701a      	strb	r2, [r3, #0]
 801002c:	e1a9      	b.n	8010382 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -9) { //入り45L
 801002e:	4b4d      	ldr	r3, [pc, #308]	; (8010164 <run_shortest+0x1034>)
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	461a      	mov	r2, r3
 8010034:	4b4c      	ldr	r3, [pc, #304]	; (8010168 <run_shortest+0x1038>)
 8010036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801003a:	f113 0f09 	cmn.w	r3, #9
 801003e:	d115      	bne.n	801006c <run_shortest+0xf3c>
			turn45inL(howspeed.turn45in_L, OFF,mollifier_mode,end_velocity);
 8010040:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010044:	9302      	str	r3, [sp, #8]
 8010046:	2300      	movs	r3, #0
 8010048:	9301      	str	r3, [sp, #4]
 801004a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801004e:	9300      	str	r3, [sp, #0]
 8010050:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8010054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010056:	ed97 0a08 	vldr	s0, [r7, #32]
 801005a:	f7fb fb2d 	bl	800b6b8 <turn45inL>
			pass_count++;
 801005e:	4b41      	ldr	r3, [pc, #260]	; (8010164 <run_shortest+0x1034>)
 8010060:	781b      	ldrb	r3, [r3, #0]
 8010062:	3301      	adds	r3, #1
 8010064:	b2da      	uxtb	r2, r3
 8010066:	4b3f      	ldr	r3, [pc, #252]	; (8010164 <run_shortest+0x1034>)
 8010068:	701a      	strb	r2, [r3, #0]
 801006a:	e18a      	b.n	8010382 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -10) { //入り135R
 801006c:	4b3d      	ldr	r3, [pc, #244]	; (8010164 <run_shortest+0x1034>)
 801006e:	781b      	ldrb	r3, [r3, #0]
 8010070:	461a      	mov	r2, r3
 8010072:	4b3d      	ldr	r3, [pc, #244]	; (8010168 <run_shortest+0x1038>)
 8010074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010078:	f113 0f0a 	cmn.w	r3, #10
 801007c:	d115      	bne.n	80100aa <run_shortest+0xf7a>
			turn135inR(howspeed.turn135in_R, OFF,mollifier_mode,end_velocity);
 801007e:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010082:	9302      	str	r3, [sp, #8]
 8010084:	2300      	movs	r3, #0
 8010086:	9301      	str	r3, [sp, #4]
 8010088:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801008c:	9300      	str	r3, [sp, #0]
 801008e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8010092:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010094:	ed97 0a08 	vldr	s0, [r7, #32]
 8010098:	f7fb fd4e 	bl	800bb38 <turn135inR>
			pass_count++;
 801009c:	4b31      	ldr	r3, [pc, #196]	; (8010164 <run_shortest+0x1034>)
 801009e:	781b      	ldrb	r3, [r3, #0]
 80100a0:	3301      	adds	r3, #1
 80100a2:	b2da      	uxtb	r2, r3
 80100a4:	4b2f      	ldr	r3, [pc, #188]	; (8010164 <run_shortest+0x1034>)
 80100a6:	701a      	strb	r2, [r3, #0]
 80100a8:	e16b      	b.n	8010382 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -11) { //入り135L
 80100aa:	4b2e      	ldr	r3, [pc, #184]	; (8010164 <run_shortest+0x1034>)
 80100ac:	781b      	ldrb	r3, [r3, #0]
 80100ae:	461a      	mov	r2, r3
 80100b0:	4b2d      	ldr	r3, [pc, #180]	; (8010168 <run_shortest+0x1038>)
 80100b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100b6:	f113 0f0b 	cmn.w	r3, #11
 80100ba:	d115      	bne.n	80100e8 <run_shortest+0xfb8>
			turn135inL(howspeed.turn135in_L, OFF,mollifier_mode,end_velocity);
 80100bc:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80100c0:	9302      	str	r3, [sp, #8]
 80100c2:	2300      	movs	r3, #0
 80100c4:	9301      	str	r3, [sp, #4]
 80100c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80100ca:	9300      	str	r3, [sp, #0]
 80100cc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80100d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80100d2:	ed97 0a08 	vldr	s0, [r7, #32]
 80100d6:	f7fb ff77 	bl	800bfc8 <turn135inL>
			pass_count++;
 80100da:	4b22      	ldr	r3, [pc, #136]	; (8010164 <run_shortest+0x1034>)
 80100dc:	781b      	ldrb	r3, [r3, #0]
 80100de:	3301      	adds	r3, #1
 80100e0:	b2da      	uxtb	r2, r3
 80100e2:	4b20      	ldr	r3, [pc, #128]	; (8010164 <run_shortest+0x1034>)
 80100e4:	701a      	strb	r2, [r3, #0]
 80100e6:	e14c      	b.n	8010382 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -12) { //出り45R
 80100e8:	4b1e      	ldr	r3, [pc, #120]	; (8010164 <run_shortest+0x1034>)
 80100ea:	781b      	ldrb	r3, [r3, #0]
 80100ec:	461a      	mov	r2, r3
 80100ee:	4b1e      	ldr	r3, [pc, #120]	; (8010168 <run_shortest+0x1038>)
 80100f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100f4:	f113 0f0c 	cmn.w	r3, #12
 80100f8:	d115      	bne.n	8010126 <run_shortest+0xff6>
			turn45outR(howspeed.turn45out_R, OFF,mollifier_mode,end_velocity);
 80100fa:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80100fe:	9302      	str	r3, [sp, #8]
 8010100:	2300      	movs	r3, #0
 8010102:	9301      	str	r3, [sp, #4]
 8010104:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010108:	9300      	str	r3, [sp, #0]
 801010a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801010e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010110:	ed97 0a08 	vldr	s0, [r7, #32]
 8010114:	f7fc f99c 	bl	800c450 <turn45outR>
			pass_count++;
 8010118:	4b12      	ldr	r3, [pc, #72]	; (8010164 <run_shortest+0x1034>)
 801011a:	781b      	ldrb	r3, [r3, #0]
 801011c:	3301      	adds	r3, #1
 801011e:	b2da      	uxtb	r2, r3
 8010120:	4b10      	ldr	r3, [pc, #64]	; (8010164 <run_shortest+0x1034>)
 8010122:	701a      	strb	r2, [r3, #0]
 8010124:	e12d      	b.n	8010382 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -13) { //出り45L
 8010126:	4b0f      	ldr	r3, [pc, #60]	; (8010164 <run_shortest+0x1034>)
 8010128:	781b      	ldrb	r3, [r3, #0]
 801012a:	461a      	mov	r2, r3
 801012c:	4b0e      	ldr	r3, [pc, #56]	; (8010168 <run_shortest+0x1038>)
 801012e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010132:	f113 0f0d 	cmn.w	r3, #13
 8010136:	d119      	bne.n	801016c <run_shortest+0x103c>
			turn45outL(howspeed.turn45out_L, OFF,mollifier_mode,end_velocity);
 8010138:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801013c:	9302      	str	r3, [sp, #8]
 801013e:	2300      	movs	r3, #0
 8010140:	9301      	str	r3, [sp, #4]
 8010142:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8010146:	9300      	str	r3, [sp, #0]
 8010148:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801014c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801014e:	ed97 0a08 	vldr	s0, [r7, #32]
 8010152:	f7fc fb6f 	bl	800c834 <turn45outL>
			pass_count++;
 8010156:	4b03      	ldr	r3, [pc, #12]	; (8010164 <run_shortest+0x1034>)
 8010158:	781b      	ldrb	r3, [r3, #0]
 801015a:	3301      	adds	r3, #1
 801015c:	b2da      	uxtb	r2, r3
 801015e:	4b01      	ldr	r3, [pc, #4]	; (8010164 <run_shortest+0x1034>)
 8010160:	701a      	strb	r2, [r3, #0]
 8010162:	e10e      	b.n	8010382 <run_shortest+0x1252>
 8010164:	20000828 	.word	0x20000828
 8010168:	2000083c 	.word	0x2000083c
		}
		else if (pass[pass_count] == -14) { //出り135R
 801016c:	4ba0      	ldr	r3, [pc, #640]	; (80103f0 <run_shortest+0x12c0>)
 801016e:	781b      	ldrb	r3, [r3, #0]
 8010170:	461a      	mov	r2, r3
 8010172:	4ba0      	ldr	r3, [pc, #640]	; (80103f4 <run_shortest+0x12c4>)
 8010174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010178:	f113 0f0e 	cmn.w	r3, #14
 801017c:	d115      	bne.n	80101aa <run_shortest+0x107a>
			turn135outR(howspeed.turn135out_R, OFF,mollifier_mode,end_velocity);
 801017e:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010182:	9302      	str	r3, [sp, #8]
 8010184:	2300      	movs	r3, #0
 8010186:	9301      	str	r3, [sp, #4]
 8010188:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801018c:	9300      	str	r3, [sp, #0]
 801018e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8010192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010194:	ed97 0a08 	vldr	s0, [r7, #32]
 8010198:	f7fc fd34 	bl	800cc04 <turn135outR>
			pass_count++;
 801019c:	4b94      	ldr	r3, [pc, #592]	; (80103f0 <run_shortest+0x12c0>)
 801019e:	781b      	ldrb	r3, [r3, #0]
 80101a0:	3301      	adds	r3, #1
 80101a2:	b2da      	uxtb	r2, r3
 80101a4:	4b92      	ldr	r3, [pc, #584]	; (80103f0 <run_shortest+0x12c0>)
 80101a6:	701a      	strb	r2, [r3, #0]
 80101a8:	e0eb      	b.n	8010382 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -15) { //出り135L
 80101aa:	4b91      	ldr	r3, [pc, #580]	; (80103f0 <run_shortest+0x12c0>)
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	461a      	mov	r2, r3
 80101b0:	4b90      	ldr	r3, [pc, #576]	; (80103f4 <run_shortest+0x12c4>)
 80101b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101b6:	f113 0f0f 	cmn.w	r3, #15
 80101ba:	d115      	bne.n	80101e8 <run_shortest+0x10b8>
			turn135outL(howspeed.turn135out_L, OFF,mollifier_mode,end_velocity);
 80101bc:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80101c0:	9302      	str	r3, [sp, #8]
 80101c2:	2300      	movs	r3, #0
 80101c4:	9301      	str	r3, [sp, #4]
 80101c6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80101ca:	9300      	str	r3, [sp, #0]
 80101cc:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80101d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80101d2:	ed97 0a08 	vldr	s0, [r7, #32]
 80101d6:	f7fc ff07 	bl	800cfe8 <turn135outL>
			pass_count++;
 80101da:	4b85      	ldr	r3, [pc, #532]	; (80103f0 <run_shortest+0x12c0>)
 80101dc:	781b      	ldrb	r3, [r3, #0]
 80101de:	3301      	adds	r3, #1
 80101e0:	b2da      	uxtb	r2, r3
 80101e2:	4b83      	ldr	r3, [pc, #524]	; (80103f0 <run_shortest+0x12c0>)
 80101e4:	701a      	strb	r2, [r3, #0]
 80101e6:	e0cc      	b.n	8010382 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -16) { //V90R
 80101e8:	4b81      	ldr	r3, [pc, #516]	; (80103f0 <run_shortest+0x12c0>)
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	461a      	mov	r2, r3
 80101ee:	4b81      	ldr	r3, [pc, #516]	; (80103f4 <run_shortest+0x12c4>)
 80101f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101f4:	f113 0f10 	cmn.w	r3, #16
 80101f8:	d115      	bne.n	8010226 <run_shortest+0x10f6>
			V90R(howspeed.V90_R, OFF,mollifier_mode,end_velocity);
 80101fa:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80101fe:	9302      	str	r3, [sp, #8]
 8010200:	2300      	movs	r3, #0
 8010202:	9301      	str	r3, [sp, #4]
 8010204:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8010208:	9300      	str	r3, [sp, #0]
 801020a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801020e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010210:	ed97 0a08 	vldr	s0, [r7, #32]
 8010214:	f7fd f8d4 	bl	800d3c0 <V90R>
			pass_count++;
 8010218:	4b75      	ldr	r3, [pc, #468]	; (80103f0 <run_shortest+0x12c0>)
 801021a:	781b      	ldrb	r3, [r3, #0]
 801021c:	3301      	adds	r3, #1
 801021e:	b2da      	uxtb	r2, r3
 8010220:	4b73      	ldr	r3, [pc, #460]	; (80103f0 <run_shortest+0x12c0>)
 8010222:	701a      	strb	r2, [r3, #0]
 8010224:	e0ad      	b.n	8010382 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -17) { //V90L
 8010226:	4b72      	ldr	r3, [pc, #456]	; (80103f0 <run_shortest+0x12c0>)
 8010228:	781b      	ldrb	r3, [r3, #0]
 801022a:	461a      	mov	r2, r3
 801022c:	4b71      	ldr	r3, [pc, #452]	; (80103f4 <run_shortest+0x12c4>)
 801022e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010232:	f113 0f11 	cmn.w	r3, #17
 8010236:	d115      	bne.n	8010264 <run_shortest+0x1134>
			V90L(howspeed.V90_L, OFF,mollifier_mode,end_velocity);
 8010238:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801023c:	9302      	str	r3, [sp, #8]
 801023e:	2300      	movs	r3, #0
 8010240:	9301      	str	r3, [sp, #4]
 8010242:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8010246:	9300      	str	r3, [sp, #0]
 8010248:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801024c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801024e:	ed97 0a08 	vldr	s0, [r7, #32]
 8010252:	f7fd fac1 	bl	800d7d8 <V90L>
			pass_count++;
 8010256:	4b66      	ldr	r3, [pc, #408]	; (80103f0 <run_shortest+0x12c0>)
 8010258:	781b      	ldrb	r3, [r3, #0]
 801025a:	3301      	adds	r3, #1
 801025c:	b2da      	uxtb	r2, r3
 801025e:	4b64      	ldr	r3, [pc, #400]	; (80103f0 <run_shortest+0x12c0>)
 8010260:	701a      	strb	r2, [r3, #0]
 8010262:	e08e      	b.n	8010382 <run_shortest+0x1252>
		}
		else if (pass[pass_count] >= 1) {
 8010264:	4b62      	ldr	r3, [pc, #392]	; (80103f0 <run_shortest+0x12c0>)
 8010266:	781b      	ldrb	r3, [r3, #0]
 8010268:	461a      	mov	r2, r3
 801026a:	4b62      	ldr	r3, [pc, #392]	; (80103f4 <run_shortest+0x12c4>)
 801026c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010270:	2b00      	cmp	r3, #0
 8010272:	f340 8086 	ble.w	8010382 <run_shortest+0x1252>
			first_v = howspeed.TurnCentervelocity;
 8010276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010278:	637b      	str	r3, [r7, #52]	; 0x34
			last_v = howspeed.TurnCentervelocity;
 801027a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801027c:	61fb      	str	r3, [r7, #28]
			if (pass_count >= 1) {
 801027e:	4b5c      	ldr	r3, [pc, #368]	; (80103f0 <run_shortest+0x12c0>)
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d013      	beq.n	80102ae <run_shortest+0x117e>

				if (pass[pass_count - 1] == -2 || pass[pass_count - 1] == -3) {
 8010286:	4b5a      	ldr	r3, [pc, #360]	; (80103f0 <run_shortest+0x12c0>)
 8010288:	781b      	ldrb	r3, [r3, #0]
 801028a:	3b01      	subs	r3, #1
 801028c:	4a59      	ldr	r2, [pc, #356]	; (80103f4 <run_shortest+0x12c4>)
 801028e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010292:	f113 0f02 	cmn.w	r3, #2
 8010296:	d008      	beq.n	80102aa <run_shortest+0x117a>
 8010298:	4b55      	ldr	r3, [pc, #340]	; (80103f0 <run_shortest+0x12c0>)
 801029a:	781b      	ldrb	r3, [r3, #0]
 801029c:	3b01      	subs	r3, #1
 801029e:	4a55      	ldr	r2, [pc, #340]	; (80103f4 <run_shortest+0x12c4>)
 80102a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102a4:	f113 0f03 	cmn.w	r3, #3
 80102a8:	d101      	bne.n	80102ae <run_shortest+0x117e>
					first_v = howspeed.SlalomCentervelocity;
 80102aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102ac:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
			if (pass[pass_count + 1] == -2 || pass[pass_count + 1] == -3) {
 80102ae:	4b50      	ldr	r3, [pc, #320]	; (80103f0 <run_shortest+0x12c0>)
 80102b0:	781b      	ldrb	r3, [r3, #0]
 80102b2:	3301      	adds	r3, #1
 80102b4:	4a4f      	ldr	r2, [pc, #316]	; (80103f4 <run_shortest+0x12c4>)
 80102b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102ba:	f113 0f02 	cmn.w	r3, #2
 80102be:	d008      	beq.n	80102d2 <run_shortest+0x11a2>
 80102c0:	4b4b      	ldr	r3, [pc, #300]	; (80103f0 <run_shortest+0x12c0>)
 80102c2:	781b      	ldrb	r3, [r3, #0]
 80102c4:	3301      	adds	r3, #1
 80102c6:	4a4b      	ldr	r2, [pc, #300]	; (80103f4 <run_shortest+0x12c4>)
 80102c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102cc:	f113 0f03 	cmn.w	r3, #3
 80102d0:	d101      	bne.n	80102d6 <run_shortest+0x11a6>
				last_v = howspeed.SlalomCentervelocity;
 80102d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102d4:	61fb      	str	r3, [r7, #28]
			}
			if (pass[pass_count] >= 50) {
 80102d6:	4b46      	ldr	r3, [pc, #280]	; (80103f0 <run_shortest+0x12c0>)
 80102d8:	781b      	ldrb	r3, [r3, #0]
 80102da:	461a      	mov	r2, r3
 80102dc:	4b45      	ldr	r3, [pc, #276]	; (80103f4 <run_shortest+0x12c4>)
 80102de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102e2:	2b31      	cmp	r3, #49	; 0x31
 80102e4:	dd27      	ble.n	8010336 <run_shortest+0x1206>
				mode.WallControlMode=3;
 80102e6:	2303      	movs	r3, #3
 80102e8:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 80102ea:	2300      	movs	r3, #0
 80102ec:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc, mode);
 80102ee:	4b40      	ldr	r3, [pc, #256]	; (80103f0 <run_shortest+0x12c0>)
 80102f0:	781b      	ldrb	r3, [r3, #0]
 80102f2:	461a      	mov	r2, r3
 80102f4:	4b3f      	ldr	r3, [pc, #252]	; (80103f4 <run_shortest+0x12c4>)
 80102f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102fa:	3b32      	subs	r3, #50	; 0x32
 80102fc:	4618      	mov	r0, r3
 80102fe:	f7f0 f939 	bl	8000574 <__aeabi_i2d>
 8010302:	a339      	add	r3, pc, #228	; (adr r3, 80103e8 <run_shortest+0x12b8>)
 8010304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010308:	f7f0 f99e 	bl	8000648 <__aeabi_dmul>
 801030c:	4602      	mov	r2, r0
 801030e:	460b      	mov	r3, r1
 8010310:	4610      	mov	r0, r2
 8010312:	4619      	mov	r1, r3
 8010314:	f7f0 fc70 	bl	8000bf8 <__aeabi_d2f>
 8010318:	4603      	mov	r3, r0
 801031a:	69b8      	ldr	r0, [r7, #24]
 801031c:	ed97 2a04 	vldr	s4, [r7, #16]
 8010320:	edd7 1a05 	vldr	s3, [r7, #20]
 8010324:	ed97 1a08 	vldr	s2, [r7, #32]
 8010328:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 801032c:	ee00 3a10 	vmov	s0, r3
 8010330:	f7f2 fe54 	bl	8002fdc <straight_table2>
 8010334:	e01f      	b.n	8010376 <run_shortest+0x1246>
			} else {
				mode.WallControlMode=1;
 8010336:	2301      	movs	r3, #1
 8010338:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 801033a:	2300      	movs	r3, #0
 801033c:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc, mode);
 801033e:	4b2c      	ldr	r3, [pc, #176]	; (80103f0 <run_shortest+0x12c0>)
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	461a      	mov	r2, r3
 8010344:	4b2b      	ldr	r3, [pc, #172]	; (80103f4 <run_shortest+0x12c4>)
 8010346:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801034a:	4613      	mov	r3, r2
 801034c:	005b      	lsls	r3, r3, #1
 801034e:	4413      	add	r3, r2
 8010350:	011a      	lsls	r2, r3, #4
 8010352:	1ad3      	subs	r3, r2, r3
 8010354:	ee07 3a90 	vmov	s15, r3
 8010358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801035c:	69b8      	ldr	r0, [r7, #24]
 801035e:	ed97 2a04 	vldr	s4, [r7, #16]
 8010362:	edd7 1a05 	vldr	s3, [r7, #20]
 8010366:	ed97 1a08 	vldr	s2, [r7, #32]
 801036a:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 801036e:	eeb0 0a67 	vmov.f32	s0, s15
 8010372:	f7f2 fe33 	bl	8002fdc <straight_table2>
			}

			pass_count++;
 8010376:	4b1e      	ldr	r3, [pc, #120]	; (80103f0 <run_shortest+0x12c0>)
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	3301      	adds	r3, #1
 801037c:	b2da      	uxtb	r2, r3
 801037e:	4b1c      	ldr	r3, [pc, #112]	; (80103f0 <run_shortest+0x12c0>)
 8010380:	701a      	strb	r2, [r3, #0]
		}

		if (pass[pass_count] == 0) {
 8010382:	4b1b      	ldr	r3, [pc, #108]	; (80103f0 <run_shortest+0x12c0>)
 8010384:	781b      	ldrb	r3, [r3, #0]
 8010386:	461a      	mov	r2, r3
 8010388:	4b1a      	ldr	r3, [pc, #104]	; (80103f4 <run_shortest+0x12c4>)
 801038a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d000      	beq.n	8010394 <run_shortest+0x1264>
		pass_count2=pass_count+1;
 8010392:	e521      	b.n	800fdd8 <run_shortest+0xca8>
			break;
 8010394:	bf00      	nop
//
//			break;
//		}
	}

		mode.WallControlMode=1;
 8010396:	2301      	movs	r3, #1
 8010398:	763b      	strb	r3, [r7, #24]
		mode.WallControlStatus=0;
 801039a:	2300      	movs	r3, #0
 801039c:	767b      	strb	r3, [r7, #25]
		straight_table2(90,end_velocity, 0,inspeed, inacc, mode);
 801039e:	69b8      	ldr	r0, [r7, #24]
 80103a0:	ed97 2a04 	vldr	s4, [r7, #16]
 80103a4:	edd7 1a05 	vldr	s3, [r7, #20]
 80103a8:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80103f8 <run_shortest+0x12c8>
 80103ac:	edd7 0a08 	vldr	s1, [r7, #32]
 80103b0:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80103fc <run_shortest+0x12cc>
 80103b4:	f7f2 fe12 	bl	8002fdc <straight_table2>
		HAL_Delay(700);
 80103b8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80103bc:	f008 fcae 	bl	8018d1c <HAL_Delay>
		pl_FunMotor_stop();
 80103c0:	f7f7 fb0a 	bl	80079d8 <pl_FunMotor_stop>
//		turning_table(180, 0, 0, 400, 5000);

	maze_mode = 0;
 80103c4:	4b0e      	ldr	r3, [pc, #56]	; (8010400 <run_shortest+0x12d0>)
 80103c6:	2200      	movs	r2, #0
 80103c8:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 80103ca:	4b0e      	ldr	r3, [pc, #56]	; (8010404 <run_shortest+0x12d4>)
 80103cc:	2200      	movs	r2, #0
 80103ce:	701a      	strb	r2, [r3, #0]
	record_mode=0;
 80103d0:	4b0d      	ldr	r3, [pc, #52]	; (8010408 <run_shortest+0x12d8>)
 80103d2:	2200      	movs	r2, #0
 80103d4:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_standby(OFF);
 80103d6:	2000      	movs	r0, #0
 80103d8:	f7f7 fa6a 	bl	80078b0 <pl_DriveMotor_standby>
	t = 0;
 80103dc:	4b0b      	ldr	r3, [pc, #44]	; (801040c <run_shortest+0x12dc>)
 80103de:	2200      	movs	r2, #0
 80103e0:	601a      	str	r2, [r3, #0]

	while (t <= 14) {
 80103e2:	e034      	b.n	801044e <run_shortest+0x131e>
 80103e4:	f3af 8000 	nop.w
 80103e8:	c022ec18 	.word	0xc022ec18
 80103ec:	404fd1de 	.word	0x404fd1de
 80103f0:	20000828 	.word	0x20000828
 80103f4:	2000083c 	.word	0x2000083c
 80103f8:	00000000 	.word	0x00000000
 80103fc:	42b40000 	.word	0x42b40000
 8010400:	20000834 	.word	0x20000834
 8010404:	20000808 	.word	0x20000808
 8010408:	2000edc0 	.word	0x2000edc0
 801040c:	20000c38 	.word	0x20000c38
		wall.row[t] = record.row[t];
 8010410:	4b2b      	ldr	r3, [pc, #172]	; (80104c0 <run_shortest+0x1390>)
 8010412:	681a      	ldr	r2, [r3, #0]
 8010414:	4b2a      	ldr	r3, [pc, #168]	; (80104c0 <run_shortest+0x1390>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	492a      	ldr	r1, [pc, #168]	; (80104c4 <run_shortest+0x1394>)
 801041a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 801041e:	4a2a      	ldr	r2, [pc, #168]	; (80104c8 <run_shortest+0x1398>)
 8010420:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 8010424:	4b26      	ldr	r3, [pc, #152]	; (80104c0 <run_shortest+0x1390>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	4a25      	ldr	r2, [pc, #148]	; (80104c0 <run_shortest+0x1390>)
 801042a:	6812      	ldr	r2, [r2, #0]
 801042c:	4925      	ldr	r1, [pc, #148]	; (80104c4 <run_shortest+0x1394>)
 801042e:	330c      	adds	r3, #12
 8010430:	005b      	lsls	r3, r3, #1
 8010432:	440b      	add	r3, r1
 8010434:	88d8      	ldrh	r0, [r3, #6]
 8010436:	4924      	ldr	r1, [pc, #144]	; (80104c8 <run_shortest+0x1398>)
 8010438:	f102 030c 	add.w	r3, r2, #12
 801043c:	005b      	lsls	r3, r3, #1
 801043e:	440b      	add	r3, r1
 8010440:	4602      	mov	r2, r0
 8010442:	80da      	strh	r2, [r3, #6]
		t++;
 8010444:	4b1e      	ldr	r3, [pc, #120]	; (80104c0 <run_shortest+0x1390>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	3301      	adds	r3, #1
 801044a:	4a1d      	ldr	r2, [pc, #116]	; (80104c0 <run_shortest+0x1390>)
 801044c:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 801044e:	4b1c      	ldr	r3, [pc, #112]	; (80104c0 <run_shortest+0x1390>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	2b0e      	cmp	r3, #14
 8010454:	dddc      	ble.n	8010410 <run_shortest+0x12e0>
	}
	t = 0;
 8010456:	4b1a      	ldr	r3, [pc, #104]	; (80104c0 <run_shortest+0x1390>)
 8010458:	2200      	movs	r2, #0
 801045a:	601a      	str	r2, [r3, #0]
	while (t <= 14) {
 801045c:	e026      	b.n	80104ac <run_shortest+0x137c>
		wall.row_look[t] = ~wall.row_look[t];
 801045e:	4b18      	ldr	r3, [pc, #96]	; (80104c0 <run_shortest+0x1390>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	4a19      	ldr	r2, [pc, #100]	; (80104c8 <run_shortest+0x1398>)
 8010464:	331c      	adds	r3, #28
 8010466:	005b      	lsls	r3, r3, #1
 8010468:	4413      	add	r3, r2
 801046a:	889a      	ldrh	r2, [r3, #4]
 801046c:	4b14      	ldr	r3, [pc, #80]	; (80104c0 <run_shortest+0x1390>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	43d2      	mvns	r2, r2
 8010472:	b291      	uxth	r1, r2
 8010474:	4a14      	ldr	r2, [pc, #80]	; (80104c8 <run_shortest+0x1398>)
 8010476:	331c      	adds	r3, #28
 8010478:	005b      	lsls	r3, r3, #1
 801047a:	4413      	add	r3, r2
 801047c:	460a      	mov	r2, r1
 801047e:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = ~wall.column_look[t];
 8010480:	4b0f      	ldr	r3, [pc, #60]	; (80104c0 <run_shortest+0x1390>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	4a10      	ldr	r2, [pc, #64]	; (80104c8 <run_shortest+0x1398>)
 8010486:	332c      	adds	r3, #44	; 0x2c
 8010488:	005b      	lsls	r3, r3, #1
 801048a:	4413      	add	r3, r2
 801048c:	885a      	ldrh	r2, [r3, #2]
 801048e:	4b0c      	ldr	r3, [pc, #48]	; (80104c0 <run_shortest+0x1390>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	43d2      	mvns	r2, r2
 8010494:	b291      	uxth	r1, r2
 8010496:	4a0c      	ldr	r2, [pc, #48]	; (80104c8 <run_shortest+0x1398>)
 8010498:	332c      	adds	r3, #44	; 0x2c
 801049a:	005b      	lsls	r3, r3, #1
 801049c:	4413      	add	r3, r2
 801049e:	460a      	mov	r2, r1
 80104a0:	805a      	strh	r2, [r3, #2]
		t++;
 80104a2:	4b07      	ldr	r3, [pc, #28]	; (80104c0 <run_shortest+0x1390>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	3301      	adds	r3, #1
 80104a8:	4a05      	ldr	r2, [pc, #20]	; (80104c0 <run_shortest+0x1390>)
 80104aa:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 80104ac:	4b04      	ldr	r3, [pc, #16]	; (80104c0 <run_shortest+0x1390>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	2b0e      	cmp	r3, #14
 80104b2:	ddd4      	ble.n	801045e <run_shortest+0x132e>
	}

}
 80104b4:	bf00      	nop
 80104b6:	bf00      	nop
 80104b8:	3740      	adds	r7, #64	; 0x40
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bdb0      	pop	{r4, r5, r7, pc}
 80104be:	bf00      	nop
 80104c0:	20000c38 	.word	0x20000c38
 80104c4:	20000cb4 	.word	0x20000cb4
 80104c8:	20000c3c 	.word	0x20000c3c

080104cc <decision_kitiku>:





void decision_kitiku(int x,int y,int direction,unsigned short front_count,unsigned short right_count,unsigned short back_count,unsigned short left_count){
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b08a      	sub	sp, #40	; 0x28
 80104d0:	af02      	add	r7, sp, #8
 80104d2:	60f8      	str	r0, [r7, #12]
 80104d4:	60b9      	str	r1, [r7, #8]
 80104d6:	607a      	str	r2, [r7, #4]
 80104d8:	807b      	strh	r3, [r7, #2]
	_Bool front_wall=1;
 80104da:	2301      	movs	r3, #1
 80104dc:	77bb      	strb	r3, [r7, #30]
	_Bool right_wall=1;
 80104de:	2301      	movs	r3, #1
 80104e0:	777b      	strb	r3, [r7, #29]
	_Bool left_wall=1;
 80104e2:	2301      	movs	r3, #1
 80104e4:	773b      	strb	r3, [r7, #28]
	int x_front=x;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	61bb      	str	r3, [r7, #24]
	int y_front=y;
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	617b      	str	r3, [r7, #20]
	update_coordinate(&x_front,&y_front,direction);
 80104ee:	f107 0114 	add.w	r1, r7, #20
 80104f2:	f107 0318 	add.w	r3, r7, #24
 80104f6:	687a      	ldr	r2, [r7, #4]
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7fd fcf7 	bl	800deec <update_coordinate>
	get_wall_look(x_front,y_front,direction,&front_wall,&right_wall,&left_wall);
 80104fe:	69b8      	ldr	r0, [r7, #24]
 8010500:	6979      	ldr	r1, [r7, #20]
 8010502:	f107 021e 	add.w	r2, r7, #30
 8010506:	f107 031c 	add.w	r3, r7, #28
 801050a:	9301      	str	r3, [sp, #4]
 801050c:	f107 031d 	add.w	r3, r7, #29
 8010510:	9300      	str	r3, [sp, #0]
 8010512:	4613      	mov	r3, r2
 8010514:	687a      	ldr	r2, [r7, #4]
 8010516:	f000 fe27 	bl	8011168 <get_wall_look>
	_Bool look_f=(front_wall && right_wall && left_wall);
 801051a:	7fbb      	ldrb	r3, [r7, #30]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d007      	beq.n	8010530 <decision_kitiku+0x64>
 8010520:	7f7b      	ldrb	r3, [r7, #29]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d004      	beq.n	8010530 <decision_kitiku+0x64>
 8010526:	7f3b      	ldrb	r3, [r7, #28]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d001      	beq.n	8010530 <decision_kitiku+0x64>
 801052c:	2301      	movs	r3, #1
 801052e:	e000      	b.n	8010532 <decision_kitiku+0x66>
 8010530:	2300      	movs	r3, #0
 8010532:	77fb      	strb	r3, [r7, #31]
 8010534:	7ffb      	ldrb	r3, [r7, #31]
 8010536:	f003 0301 	and.w	r3, r3, #1
 801053a:	77fb      	strb	r3, [r7, #31]

	//ここに壁条件がない
	if (look_f && front_count <= right_count
 801053c:	7ffb      	ldrb	r3, [r7, #31]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d02b      	beq.n	801059a <decision_kitiku+0xce>
 8010542:	887a      	ldrh	r2, [r7, #2]
 8010544:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010546:	429a      	cmp	r2, r3
 8010548:	d827      	bhi.n	801059a <decision_kitiku+0xce>
			&& front_count <= left_count && front_count <= back_count) {
 801054a:	887a      	ldrh	r2, [r7, #2]
 801054c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801054e:	429a      	cmp	r2, r3
 8010550:	d823      	bhi.n	801059a <decision_kitiku+0xce>
 8010552:	887a      	ldrh	r2, [r7, #2]
 8010554:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010556:	429a      	cmp	r2, r3
 8010558:	d81f      	bhi.n	801059a <decision_kitiku+0xce>
		if ((direction==1 && y>=14) ||
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2b01      	cmp	r3, #1
 801055e:	d102      	bne.n	8010566 <decision_kitiku+0x9a>
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	2b0d      	cmp	r3, #13
 8010564:	dc11      	bgt.n	801058a <decision_kitiku+0xbe>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2b02      	cmp	r3, #2
 801056a:	d102      	bne.n	8010572 <decision_kitiku+0xa6>
			(direction==2 && x>=14) ||
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2b0d      	cmp	r3, #13
 8010570:	dc0b      	bgt.n	801058a <decision_kitiku+0xbe>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2b03      	cmp	r3, #3
 8010576:	d102      	bne.n	801057e <decision_kitiku+0xb2>
			(direction==3 && y<=1) ||
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	2b01      	cmp	r3, #1
 801057c:	dd05      	ble.n	801058a <decision_kitiku+0xbe>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	2b04      	cmp	r3, #4
 8010582:	d106      	bne.n	8010592 <decision_kitiku+0xc6>
			(direction==4 && x<=1) ){
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	2b01      	cmp	r3, #1
 8010588:	dc03      	bgt.n	8010592 <decision_kitiku+0xc6>
			kitikukan = 0;
 801058a:	4b08      	ldr	r3, [pc, #32]	; (80105ac <decision_kitiku+0xe0>)
 801058c:	2200      	movs	r2, #0
 801058e:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010590:	e007      	b.n	80105a2 <decision_kitiku+0xd6>
		}else{
			kitikukan = 1;
 8010592:	4b06      	ldr	r3, [pc, #24]	; (80105ac <decision_kitiku+0xe0>)
 8010594:	2201      	movs	r2, #1
 8010596:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010598:	e003      	b.n	80105a2 <decision_kitiku+0xd6>
		}

	} else {
		kitikukan = 0;
 801059a:	4b04      	ldr	r3, [pc, #16]	; (80105ac <decision_kitiku+0xe0>)
 801059c:	2200      	movs	r2, #0
 801059e:	601a      	str	r2, [r3, #0]
	}


}
 80105a0:	bf00      	nop
 80105a2:	bf00      	nop
 80105a4:	3720      	adds	r7, #32
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}
 80105aa:	bf00      	nop
 80105ac:	20000838 	.word	0x20000838

080105b0 <compress_kitiku>:

void compress_kitiku(int *x,int *y,int *direction) {
 80105b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105b2:	b099      	sub	sp, #100	; 0x64
 80105b4:	af04      	add	r7, sp, #16
 80105b6:	60f8      	str	r0, [r7, #12]
 80105b8:	60b9      	str	r1, [r7, #8]
 80105ba:	607a      	str	r2, [r7, #4]
	kitiku_distance = 1;
 80105bc:	4b9f      	ldr	r3, [pc, #636]	; (801083c <compress_kitiku+0x28c>)
 80105be:	2201      	movs	r2, #1
 80105c0:	601a      	str	r2, [r3, #0]
	kitiku = 1;
 80105c2:	4b9f      	ldr	r3, [pc, #636]	; (8010840 <compress_kitiku+0x290>)
 80105c4:	2201      	movs	r2, #1
 80105c6:	701a      	strb	r2, [r3, #0]
	_Bool look_f,look_r,look_l;
	int x_now,y_now,direction_now;
	int x_front,y_front,x_right,y_right,x_left,y_left;
	int direction_right,direction_left;
	unsigned short front_count, right_count, back_count, left_count;
	x_now=*x;y_now=*y;direction_now=*direction;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	637b      	str	r3, [r7, #52]	; 0x34
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	633b      	str	r3, [r7, #48]	; 0x30
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (1) {
		update_coordinate(&x_now,&y_now,direction_now);
 80105da:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80105de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80105e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7fd fc81 	bl	800deec <update_coordinate>
		x_front=x_now;y_front=y_now;x_right=x_now;y_right=y_now;x_left=x_now;y_left=y_now;
 80105ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80105f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105f4:	627b      	str	r3, [r7, #36]	; 0x24
 80105f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f8:	623b      	str	r3, [r7, #32]
 80105fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105fc:	61fb      	str	r3, [r7, #28]
 80105fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010600:	61bb      	str	r3, [r7, #24]

		update_coordinate(&x_front,&y_front,direction_now);
 8010602:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010606:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801060a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801060c:	4618      	mov	r0, r3
 801060e:	f7fd fc6d 	bl	800deec <update_coordinate>
		get_wall_look(x_front,y_front,direction_now,&front_wall,&right_wall,&left_wall);
 8010612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010614:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010616:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801061a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 801061e:	9301      	str	r3, [sp, #4]
 8010620:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8010624:	9300      	str	r3, [sp, #0]
 8010626:	4613      	mov	r3, r2
 8010628:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801062a:	f000 fd9d 	bl	8011168 <get_wall_look>
		look_f=(front_wall && right_wall && left_wall);
 801062e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010632:	2b00      	cmp	r3, #0
 8010634:	d009      	beq.n	801064a <compress_kitiku+0x9a>
 8010636:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801063a:	2b00      	cmp	r3, #0
 801063c:	d005      	beq.n	801064a <compress_kitiku+0x9a>
 801063e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8010642:	2b00      	cmp	r3, #0
 8010644:	d001      	beq.n	801064a <compress_kitiku+0x9a>
 8010646:	2301      	movs	r3, #1
 8010648:	e000      	b.n	801064c <compress_kitiku+0x9c>
 801064a:	2300      	movs	r3, #0
 801064c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010650:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010654:	f003 0301 	and.w	r3, r3, #1
 8010658:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


		if(direction_now==4){direction_right=1;}else{direction_right=direction_now+1;}
 801065c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801065e:	2b04      	cmp	r3, #4
 8010660:	d102      	bne.n	8010668 <compress_kitiku+0xb8>
 8010662:	2301      	movs	r3, #1
 8010664:	64bb      	str	r3, [r7, #72]	; 0x48
 8010666:	e002      	b.n	801066e <compress_kitiku+0xbe>
 8010668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801066a:	3301      	adds	r3, #1
 801066c:	64bb      	str	r3, [r7, #72]	; 0x48
		update_coordinate(&x_right,&y_right,direction_right);
 801066e:	f107 0120 	add.w	r1, r7, #32
 8010672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010678:	4618      	mov	r0, r3
 801067a:	f7fd fc37 	bl	800deec <update_coordinate>
		get_wall_look(x_right,y_right,direction_right,&front_wall,&right_wall,&left_wall);
 801067e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010680:	6a39      	ldr	r1, [r7, #32]
 8010682:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8010686:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 801068a:	9301      	str	r3, [sp, #4]
 801068c:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8010690:	9300      	str	r3, [sp, #0]
 8010692:	4613      	mov	r3, r2
 8010694:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010696:	f000 fd67 	bl	8011168 <get_wall_look>
		look_r=(front_wall && right_wall && left_wall);
 801069a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d009      	beq.n	80106b6 <compress_kitiku+0x106>
 80106a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d005      	beq.n	80106b6 <compress_kitiku+0x106>
 80106aa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d001      	beq.n	80106b6 <compress_kitiku+0x106>
 80106b2:	2301      	movs	r3, #1
 80106b4:	e000      	b.n	80106b8 <compress_kitiku+0x108>
 80106b6:	2300      	movs	r3, #0
 80106b8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80106bc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80106c0:	f003 0301 	and.w	r3, r3, #1
 80106c4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e


		if(direction_now==1){direction_left=4;}else{direction_left=direction_now-1;}
 80106c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106ca:	2b01      	cmp	r3, #1
 80106cc:	d102      	bne.n	80106d4 <compress_kitiku+0x124>
 80106ce:	2304      	movs	r3, #4
 80106d0:	647b      	str	r3, [r7, #68]	; 0x44
 80106d2:	e002      	b.n	80106da <compress_kitiku+0x12a>
 80106d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106d6:	3b01      	subs	r3, #1
 80106d8:	647b      	str	r3, [r7, #68]	; 0x44
		update_coordinate(&x_left,&y_left,direction_left);
 80106da:	f107 0118 	add.w	r1, r7, #24
 80106de:	f107 031c 	add.w	r3, r7, #28
 80106e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7fd fc01 	bl	800deec <update_coordinate>
		get_wall_look(x_left,y_left,direction_left,&front_wall,&right_wall,&left_wall);
 80106ea:	69f8      	ldr	r0, [r7, #28]
 80106ec:	69b9      	ldr	r1, [r7, #24]
 80106ee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80106f2:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80106f6:	9301      	str	r3, [sp, #4]
 80106f8:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80106fc:	9300      	str	r3, [sp, #0]
 80106fe:	4613      	mov	r3, r2
 8010700:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010702:	f000 fd31 	bl	8011168 <get_wall_look>
		look_l=(front_wall && right_wall && left_wall);
 8010706:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801070a:	2b00      	cmp	r3, #0
 801070c:	d009      	beq.n	8010722 <compress_kitiku+0x172>
 801070e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010712:	2b00      	cmp	r3, #0
 8010714:	d005      	beq.n	8010722 <compress_kitiku+0x172>
 8010716:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801071a:	2b00      	cmp	r3, #0
 801071c:	d001      	beq.n	8010722 <compress_kitiku+0x172>
 801071e:	2301      	movs	r3, #1
 8010720:	e000      	b.n	8010724 <compress_kitiku+0x174>
 8010722:	2300      	movs	r3, #0
 8010724:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8010728:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801072c:	f003 0301 	and.w	r3, r3, #1
 8010730:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		get_wall(x_now,y_now,direction_now,&front_wall,&right_wall,&left_wall);
 8010734:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010736:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010738:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801073c:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8010740:	9301      	str	r3, [sp, #4]
 8010742:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8010746:	9300      	str	r3, [sp, #0]
 8010748:	4613      	mov	r3, r2
 801074a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801074c:	f000 fb98 	bl	8010e80 <get_wall>

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x_now,y_now,direction_now);
 8010750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010754:	f107 0610 	add.w	r6, r7, #16
 8010758:	f107 0512 	add.w	r5, r7, #18
 801075c:	f107 0414 	add.w	r4, r7, #20
 8010760:	f107 0016 	add.w	r0, r7, #22
 8010764:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010766:	9102      	str	r1, [sp, #8]
 8010768:	9201      	str	r2, [sp, #4]
 801076a:	9300      	str	r3, [sp, #0]
 801076c:	4633      	mov	r3, r6
 801076e:	462a      	mov	r2, r5
 8010770:	4621      	mov	r1, r4
 8010772:	f000 fe79 	bl	8011468 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 8010776:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801077a:	2b00      	cmp	r3, #0
 801077c:	d001      	beq.n	8010782 <compress_kitiku+0x1d2>
 801077e:	23ff      	movs	r3, #255	; 0xff
 8010780:	82fb      	strh	r3, [r7, #22]
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 8010782:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010786:	2b00      	cmp	r3, #0
 8010788:	d001      	beq.n	801078e <compress_kitiku+0x1de>
 801078a:	23ff      	movs	r3, #255	; 0xff
 801078c:	82bb      	strh	r3, [r7, #20]
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 801078e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8010792:	2b00      	cmp	r3, #0
 8010794:	d001      	beq.n	801079a <compress_kitiku+0x1ea>
 8010796:	23ff      	movs	r3, #255	; 0xff
 8010798:	823b      	strh	r3, [r7, #16]
		// 移動の優先順位 ： 前→右→左→後
		if (walk_count[x_now][y_now] <= 1) {
 801079a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801079c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801079e:	4929      	ldr	r1, [pc, #164]	; (8010844 <compress_kitiku+0x294>)
 80107a0:	0112      	lsls	r2, r2, #4
 80107a2:	4413      	add	r3, r2
 80107a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	f240 80a9 	bls.w	8010900 <compress_kitiku+0x350>
			//goal間近で停止
			break;
		}
		if (direction_now==1 && y_now>=14) {break;}
 80107ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107b0:	2b01      	cmp	r3, #1
 80107b2:	d103      	bne.n	80107bc <compress_kitiku+0x20c>
 80107b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b6:	2b0d      	cmp	r3, #13
 80107b8:	f300 80a4 	bgt.w	8010904 <compress_kitiku+0x354>
		if (direction_now==2 && x_now>=14) {break;}
 80107bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107be:	2b02      	cmp	r3, #2
 80107c0:	d103      	bne.n	80107ca <compress_kitiku+0x21a>
 80107c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107c4:	2b0d      	cmp	r3, #13
 80107c6:	f300 809f 	bgt.w	8010908 <compress_kitiku+0x358>
		if (direction_now==3 && y_now<=1) {break;}
 80107ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107cc:	2b03      	cmp	r3, #3
 80107ce:	d103      	bne.n	80107d8 <compress_kitiku+0x228>
 80107d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d2:	2b01      	cmp	r3, #1
 80107d4:	f340 809a 	ble.w	801090c <compress_kitiku+0x35c>
		if (direction_now==4 && x_now<=1) {break;}
 80107d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107da:	2b04      	cmp	r3, #4
 80107dc:	d103      	bne.n	80107e6 <compress_kitiku+0x236>
 80107de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e0:	2b01      	cmp	r3, #1
 80107e2:	f340 8095 	ble.w	8010910 <compress_kitiku+0x360>
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 80107e6:	8afb      	ldrh	r3, [r7, #22]
 80107e8:	2bff      	cmp	r3, #255	; 0xff
 80107ea:	d10c      	bne.n	8010806 <compress_kitiku+0x256>
 80107ec:	8abb      	ldrh	r3, [r7, #20]
 80107ee:	2bff      	cmp	r3, #255	; 0xff
 80107f0:	d109      	bne.n	8010806 <compress_kitiku+0x256>
 80107f2:	8a3b      	ldrh	r3, [r7, #16]
 80107f4:	2bff      	cmp	r3, #255	; 0xff
 80107f6:	d106      	bne.n	8010806 <compress_kitiku+0x256>
 80107f8:	8a7b      	ldrh	r3, [r7, #18]
 80107fa:	2bff      	cmp	r3, #255	; 0xff
 80107fc:	d103      	bne.n	8010806 <compress_kitiku+0x256>
		// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 80107fe:	4b12      	ldr	r3, [pc, #72]	; (8010848 <compress_kitiku+0x298>)
 8010800:	2201      	movs	r2, #1
 8010802:	701a      	strb	r2, [r3, #0]
		break;
 8010804:	e087      	b.n	8010916 <compress_kitiku+0x366>
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 8010806:	8afa      	ldrh	r2, [r7, #22]
 8010808:	8abb      	ldrh	r3, [r7, #20]
 801080a:	429a      	cmp	r2, r3
 801080c:	d81e      	bhi.n	801084c <compress_kitiku+0x29c>
 801080e:	8afa      	ldrh	r2, [r7, #22]
 8010810:	8a3b      	ldrh	r3, [r7, #16]
 8010812:	429a      	cmp	r2, r3
 8010814:	d81a      	bhi.n	801084c <compress_kitiku+0x29c>
 8010816:	8afa      	ldrh	r2, [r7, #22]
 8010818:	8a7b      	ldrh	r3, [r7, #18]
 801081a:	429a      	cmp	r2, r3
 801081c:	d816      	bhi.n	801084c <compress_kitiku+0x29c>
		// 直進
			if(look_f){
 801081e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010822:	2b00      	cmp	r3, #0
 8010824:	d005      	beq.n	8010832 <compress_kitiku+0x282>
				kitiku_distance += 2;
 8010826:	4b05      	ldr	r3, [pc, #20]	; (801083c <compress_kitiku+0x28c>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	3302      	adds	r3, #2
 801082c:	4a03      	ldr	r2, [pc, #12]	; (801083c <compress_kitiku+0x28c>)
 801082e:	6013      	str	r3, [r2, #0]
 8010830:	e00c      	b.n	801084c <compress_kitiku+0x29c>
			}else{
				kitiku = 0;
 8010832:	4b03      	ldr	r3, [pc, #12]	; (8010840 <compress_kitiku+0x290>)
 8010834:	2200      	movs	r2, #0
 8010836:	701a      	strb	r2, [r3, #0]
				break;
 8010838:	e06d      	b.n	8010916 <compress_kitiku+0x366>
 801083a:	bf00      	nop
 801083c:	2000082c 	.word	0x2000082c
 8010840:	20000829 	.word	0x20000829
 8010844:	20000d30 	.word	0x20000d30
 8010848:	20000807 	.word	0x20000807
			}
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 801084c:	8aba      	ldrh	r2, [r7, #20]
 801084e:	8afb      	ldrh	r3, [r7, #22]
 8010850:	429a      	cmp	r2, r3
 8010852:	d213      	bcs.n	801087c <compress_kitiku+0x2cc>
 8010854:	8aba      	ldrh	r2, [r7, #20]
 8010856:	8a3b      	ldrh	r3, [r7, #16]
 8010858:	429a      	cmp	r2, r3
 801085a:	d80f      	bhi.n	801087c <compress_kitiku+0x2cc>
 801085c:	8aba      	ldrh	r2, [r7, #20]
 801085e:	8a7b      	ldrh	r3, [r7, #18]
 8010860:	429a      	cmp	r2, r3
 8010862:	d80b      	bhi.n	801087c <compress_kitiku+0x2cc>
		// 右旋回
			if(look_r){
 8010864:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010868:	2b00      	cmp	r3, #0
 801086a:	d003      	beq.n	8010874 <compress_kitiku+0x2c4>
				kitiku = 0;
 801086c:	4b40      	ldr	r3, [pc, #256]	; (8010970 <compress_kitiku+0x3c0>)
 801086e:	2200      	movs	r2, #0
 8010870:	701a      	strb	r2, [r3, #0]
				break;
 8010872:	e050      	b.n	8010916 <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 8010874:	4b3e      	ldr	r3, [pc, #248]	; (8010970 <compress_kitiku+0x3c0>)
 8010876:	2200      	movs	r2, #0
 8010878:	701a      	strb	r2, [r3, #0]
				break;
 801087a:	e04c      	b.n	8010916 <compress_kitiku+0x366>
			}
			direction_now++;
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 801087c:	8a3a      	ldrh	r2, [r7, #16]
 801087e:	8afb      	ldrh	r3, [r7, #22]
 8010880:	429a      	cmp	r2, r3
 8010882:	d213      	bcs.n	80108ac <compress_kitiku+0x2fc>
 8010884:	8a3a      	ldrh	r2, [r7, #16]
 8010886:	8abb      	ldrh	r3, [r7, #20]
 8010888:	429a      	cmp	r2, r3
 801088a:	d20f      	bcs.n	80108ac <compress_kitiku+0x2fc>
 801088c:	8a3a      	ldrh	r2, [r7, #16]
 801088e:	8a7b      	ldrh	r3, [r7, #18]
 8010890:	429a      	cmp	r2, r3
 8010892:	d80b      	bhi.n	80108ac <compress_kitiku+0x2fc>
		// 左旋回
			if(look_l){
 8010894:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010898:	2b00      	cmp	r3, #0
 801089a:	d003      	beq.n	80108a4 <compress_kitiku+0x2f4>
				kitiku = 0;
 801089c:	4b34      	ldr	r3, [pc, #208]	; (8010970 <compress_kitiku+0x3c0>)
 801089e:	2200      	movs	r2, #0
 80108a0:	701a      	strb	r2, [r3, #0]
				break;
 80108a2:	e038      	b.n	8010916 <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 80108a4:	4b32      	ldr	r3, [pc, #200]	; (8010970 <compress_kitiku+0x3c0>)
 80108a6:	2200      	movs	r2, #0
 80108a8:	701a      	strb	r2, [r3, #0]
				break;
 80108aa:	e034      	b.n	8010916 <compress_kitiku+0x366>
			}
			direction_now--;
		}
		if(back_count < front_count && back_count < right_count
 80108ac:	8a7a      	ldrh	r2, [r7, #18]
 80108ae:	8afb      	ldrh	r3, [r7, #22]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d20b      	bcs.n	80108cc <compress_kitiku+0x31c>
 80108b4:	8a7a      	ldrh	r2, [r7, #18]
 80108b6:	8abb      	ldrh	r3, [r7, #20]
 80108b8:	429a      	cmp	r2, r3
 80108ba:	d207      	bcs.n	80108cc <compress_kitiku+0x31c>
								&& back_count < left_count){
 80108bc:	8a7a      	ldrh	r2, [r7, #18]
 80108be:	8a3b      	ldrh	r3, [r7, #16]
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d203      	bcs.n	80108cc <compress_kitiku+0x31c>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
			kitiku = 0;
 80108c4:	4b2a      	ldr	r3, [pc, #168]	; (8010970 <compress_kitiku+0x3c0>)
 80108c6:	2200      	movs	r2, #0
 80108c8:	701a      	strb	r2, [r3, #0]
			break;
 80108ca:	e024      	b.n	8010916 <compress_kitiku+0x366>
			direction_now+=2;
		}


		if (direction_now == 5) {
 80108cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108ce:	2b05      	cmp	r3, #5
 80108d0:	d101      	bne.n	80108d6 <compress_kitiku+0x326>
			direction_now = 1;
 80108d2:	2301      	movs	r3, #1
 80108d4:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 6) {
 80108d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108d8:	2b06      	cmp	r3, #6
 80108da:	d101      	bne.n	80108e0 <compress_kitiku+0x330>
			direction_now = 2;
 80108dc:	2302      	movs	r3, #2
 80108de:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 0) {
 80108e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d101      	bne.n	80108ea <compress_kitiku+0x33a>
			direction_now = 4;
 80108e6:	2304      	movs	r3, #4
 80108e8:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == -1) {
 80108ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108f0:	d101      	bne.n	80108f6 <compress_kitiku+0x346>
			direction_now = 3;
 80108f2:	2303      	movs	r3, #3
 80108f4:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (kitiku == 0) {
 80108f6:	4b1e      	ldr	r3, [pc, #120]	; (8010970 <compress_kitiku+0x3c0>)
 80108f8:	781b      	ldrb	r3, [r3, #0]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d00a      	beq.n	8010914 <compress_kitiku+0x364>
		update_coordinate(&x_now,&y_now,direction_now);
 80108fe:	e66c      	b.n	80105da <compress_kitiku+0x2a>
			break;
 8010900:	bf00      	nop
 8010902:	e008      	b.n	8010916 <compress_kitiku+0x366>
		if (direction_now==1 && y_now>=14) {break;}
 8010904:	bf00      	nop
 8010906:	e006      	b.n	8010916 <compress_kitiku+0x366>
		if (direction_now==2 && x_now>=14) {break;}
 8010908:	bf00      	nop
 801090a:	e004      	b.n	8010916 <compress_kitiku+0x366>
		if (direction_now==3 && y_now<=1) {break;}
 801090c:	bf00      	nop
 801090e:	e002      	b.n	8010916 <compress_kitiku+0x366>
		if (direction_now==4 && x_now<=1) {break;}
 8010910:	bf00      	nop
 8010912:	e000      	b.n	8010916 <compress_kitiku+0x366>

			break;
 8010914:	bf00      	nop
		}

	}

	int direction2=direction_now+2;
 8010916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010918:	3302      	adds	r3, #2
 801091a:	643b      	str	r3, [r7, #64]	; 0x40
	if (direction2 == 5) {
 801091c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801091e:	2b05      	cmp	r3, #5
 8010920:	d101      	bne.n	8010926 <compress_kitiku+0x376>
				direction2 = 1;
 8010922:	2301      	movs	r3, #1
 8010924:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 6) {
 8010926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010928:	2b06      	cmp	r3, #6
 801092a:	d101      	bne.n	8010930 <compress_kitiku+0x380>
				direction2 = 2;
 801092c:	2302      	movs	r3, #2
 801092e:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 0) {
 8010930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010932:	2b00      	cmp	r3, #0
 8010934:	d101      	bne.n	801093a <compress_kitiku+0x38a>
				direction2 = 4;
 8010936:	2304      	movs	r3, #4
 8010938:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == -1) {
 801093a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801093c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010940:	d101      	bne.n	8010946 <compress_kitiku+0x396>
				direction2 = 3;
 8010942:	2303      	movs	r3, #3
 8010944:	643b      	str	r3, [r7, #64]	; 0x40
			}

	update_coordinate(&x_now,&y_now,direction2);
 8010946:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801094a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801094e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010950:	4618      	mov	r0, r3
 8010952:	f7fd facb 	bl	800deec <update_coordinate>

	*x=x_now;
 8010956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	601a      	str	r2, [r3, #0]
	*y=y_now;
 801095c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	601a      	str	r2, [r3, #0]
	*direction=direction_now;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010966:	601a      	str	r2, [r3, #0]

}
 8010968:	bf00      	nop
 801096a:	3754      	adds	r7, #84	; 0x54
 801096c:	46bd      	mov	sp, r7
 801096e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010970:	20000829 	.word	0x20000829

08010974 <update_wall>:

}



void update_wall(int x,int y,int direction,_Bool front_wall,_Bool right_wall,_Bool left_wall){
 8010974:	b480      	push	{r7}
 8010976:	b085      	sub	sp, #20
 8010978:	af00      	add	r7, sp, #0
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	607a      	str	r2, [r7, #4]
 8010980:	70fb      	strb	r3, [r7, #3]
// x:x座標, y:y座標, direction:向き(北1東2南3西4),
//front_wall:前壁の有無(Ture=1 false=0), right_wall:右壁の有無(Ture=1 false=0), left_wall:左壁の有無(Ture=1 false=0)

	switch (direction) {
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	3b01      	subs	r3, #1
 8010986:	2b03      	cmp	r3, #3
 8010988:	f200 8272 	bhi.w	8010e70 <update_wall+0x4fc>
 801098c:	a201      	add	r2, pc, #4	; (adr r2, 8010994 <update_wall+0x20>)
 801098e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010992:	bf00      	nop
 8010994:	080109a5 	.word	0x080109a5
 8010998:	08010acb 	.word	0x08010acb
 801099c:	08010c01 	.word	0x08010c01
 80109a0:	08010d2f 	.word	0x08010d2f
	case 1:
		if (y <= 14) {
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	2b0e      	cmp	r3, #14
 80109a8:	dc2e      	bgt.n	8010a08 <update_wall+0x94>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 80109aa:	4a94      	ldr	r2, [pc, #592]	; (8010bfc <update_wall+0x288>)
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	332c      	adds	r3, #44	; 0x2c
 80109b0:	005b      	lsls	r3, r3, #1
 80109b2:	4413      	add	r3, r2
 80109b4:	885b      	ldrh	r3, [r3, #2]
 80109b6:	b21a      	sxth	r2, r3
 80109b8:	2101      	movs	r1, #1
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	fa01 f303 	lsl.w	r3, r1, r3
 80109c0:	b21b      	sxth	r3, r3
 80109c2:	4313      	orrs	r3, r2
 80109c4:	b21b      	sxth	r3, r3
 80109c6:	b299      	uxth	r1, r3
 80109c8:	4a8c      	ldr	r2, [pc, #560]	; (8010bfc <update_wall+0x288>)
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	332c      	adds	r3, #44	; 0x2c
 80109ce:	005b      	lsls	r3, r3, #1
 80109d0:	4413      	add	r3, r2
 80109d2:	460a      	mov	r2, r1
 80109d4:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y] = wall.column[y] | (1 << x);}
 80109d6:	78fb      	ldrb	r3, [r7, #3]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d015      	beq.n	8010a08 <update_wall+0x94>
 80109dc:	4a87      	ldr	r2, [pc, #540]	; (8010bfc <update_wall+0x288>)
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	330c      	adds	r3, #12
 80109e2:	005b      	lsls	r3, r3, #1
 80109e4:	4413      	add	r3, r2
 80109e6:	88db      	ldrh	r3, [r3, #6]
 80109e8:	b21a      	sxth	r2, r3
 80109ea:	2101      	movs	r1, #1
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	fa01 f303 	lsl.w	r3, r1, r3
 80109f2:	b21b      	sxth	r3, r3
 80109f4:	4313      	orrs	r3, r2
 80109f6:	b21b      	sxth	r3, r3
 80109f8:	b299      	uxth	r1, r3
 80109fa:	4a80      	ldr	r2, [pc, #512]	; (8010bfc <update_wall+0x288>)
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	330c      	adds	r3, #12
 8010a00:	005b      	lsls	r3, r3, #1
 8010a02:	4413      	add	r3, r2
 8010a04:	460a      	mov	r2, r1
 8010a06:	80da      	strh	r2, [r3, #6]
		}

		if (x >= 1) {
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	dd2d      	ble.n	8010a6a <update_wall+0xf6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	3b01      	subs	r3, #1
 8010a12:	4a7a      	ldr	r2, [pc, #488]	; (8010bfc <update_wall+0x288>)
 8010a14:	331c      	adds	r3, #28
 8010a16:	005b      	lsls	r3, r3, #1
 8010a18:	4413      	add	r3, r2
 8010a1a:	889b      	ldrh	r3, [r3, #4]
 8010a1c:	b21a      	sxth	r2, r3
 8010a1e:	2101      	movs	r1, #1
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	fa01 f303 	lsl.w	r3, r1, r3
 8010a26:	b21b      	sxth	r3, r3
 8010a28:	4313      	orrs	r3, r2
 8010a2a:	b21a      	sxth	r2, r3
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	3b01      	subs	r3, #1
 8010a30:	b291      	uxth	r1, r2
 8010a32:	4a72      	ldr	r2, [pc, #456]	; (8010bfc <update_wall+0x288>)
 8010a34:	331c      	adds	r3, #28
 8010a36:	005b      	lsls	r3, r3, #1
 8010a38:	4413      	add	r3, r2
 8010a3a:	460a      	mov	r2, r1
 8010a3c:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010a3e:	7f3b      	ldrb	r3, [r7, #28]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d012      	beq.n	8010a6a <update_wall+0xf6>
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	3b01      	subs	r3, #1
 8010a48:	4a6c      	ldr	r2, [pc, #432]	; (8010bfc <update_wall+0x288>)
 8010a4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a4e:	b21a      	sxth	r2, r3
 8010a50:	2101      	movs	r1, #1
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	fa01 f303 	lsl.w	r3, r1, r3
 8010a58:	b21b      	sxth	r3, r3
 8010a5a:	4313      	orrs	r3, r2
 8010a5c:	b21a      	sxth	r2, r3
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	3b01      	subs	r3, #1
 8010a62:	b291      	uxth	r1, r2
 8010a64:	4a65      	ldr	r2, [pc, #404]	; (8010bfc <update_wall+0x288>)
 8010a66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x <= 14) {
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2b0e      	cmp	r3, #14
 8010a6e:	f300 81f8 	bgt.w	8010e62 <update_wall+0x4ee>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010a72:	4a62      	ldr	r2, [pc, #392]	; (8010bfc <update_wall+0x288>)
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	331c      	adds	r3, #28
 8010a78:	005b      	lsls	r3, r3, #1
 8010a7a:	4413      	add	r3, r2
 8010a7c:	889b      	ldrh	r3, [r3, #4]
 8010a7e:	b21a      	sxth	r2, r3
 8010a80:	2101      	movs	r1, #1
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	fa01 f303 	lsl.w	r3, r1, r3
 8010a88:	b21b      	sxth	r3, r3
 8010a8a:	4313      	orrs	r3, r2
 8010a8c:	b21b      	sxth	r3, r3
 8010a8e:	b299      	uxth	r1, r3
 8010a90:	4a5a      	ldr	r2, [pc, #360]	; (8010bfc <update_wall+0x288>)
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	331c      	adds	r3, #28
 8010a96:	005b      	lsls	r3, r3, #1
 8010a98:	4413      	add	r3, r2
 8010a9a:	460a      	mov	r2, r1
 8010a9c:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010a9e:	7e3b      	ldrb	r3, [r7, #24]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	f000 81de 	beq.w	8010e62 <update_wall+0x4ee>
 8010aa6:	4a55      	ldr	r2, [pc, #340]	; (8010bfc <update_wall+0x288>)
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010aae:	b21a      	sxth	r2, r3
 8010ab0:	2101      	movs	r1, #1
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8010ab8:	b21b      	sxth	r3, r3
 8010aba:	4313      	orrs	r3, r2
 8010abc:	b21b      	sxth	r3, r3
 8010abe:	b299      	uxth	r1, r3
 8010ac0:	4a4e      	ldr	r2, [pc, #312]	; (8010bfc <update_wall+0x288>)
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010ac8:	e1cb      	b.n	8010e62 <update_wall+0x4ee>
	case 2:
		if (x <= 14) {
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	2b0e      	cmp	r3, #14
 8010ace:	dc29      	bgt.n	8010b24 <update_wall+0x1b0>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010ad0:	4a4a      	ldr	r2, [pc, #296]	; (8010bfc <update_wall+0x288>)
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	331c      	adds	r3, #28
 8010ad6:	005b      	lsls	r3, r3, #1
 8010ad8:	4413      	add	r3, r2
 8010ada:	889b      	ldrh	r3, [r3, #4]
 8010adc:	b21a      	sxth	r2, r3
 8010ade:	2101      	movs	r1, #1
 8010ae0:	68bb      	ldr	r3, [r7, #8]
 8010ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8010ae6:	b21b      	sxth	r3, r3
 8010ae8:	4313      	orrs	r3, r2
 8010aea:	b21b      	sxth	r3, r3
 8010aec:	b299      	uxth	r1, r3
 8010aee:	4a43      	ldr	r2, [pc, #268]	; (8010bfc <update_wall+0x288>)
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	331c      	adds	r3, #28
 8010af4:	005b      	lsls	r3, r3, #1
 8010af6:	4413      	add	r3, r2
 8010af8:	460a      	mov	r2, r1
 8010afa:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010afc:	78fb      	ldrb	r3, [r7, #3]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d010      	beq.n	8010b24 <update_wall+0x1b0>
 8010b02:	4a3e      	ldr	r2, [pc, #248]	; (8010bfc <update_wall+0x288>)
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b0a:	b21a      	sxth	r2, r3
 8010b0c:	2101      	movs	r1, #1
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	fa01 f303 	lsl.w	r3, r1, r3
 8010b14:	b21b      	sxth	r3, r3
 8010b16:	4313      	orrs	r3, r2
 8010b18:	b21b      	sxth	r3, r3
 8010b1a:	b299      	uxth	r1, r3
 8010b1c:	4a37      	ldr	r2, [pc, #220]	; (8010bfc <update_wall+0x288>)
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y <= 14) {
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	2b0e      	cmp	r3, #14
 8010b28:	dc2e      	bgt.n	8010b88 <update_wall+0x214>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010b2a:	4a34      	ldr	r2, [pc, #208]	; (8010bfc <update_wall+0x288>)
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	332c      	adds	r3, #44	; 0x2c
 8010b30:	005b      	lsls	r3, r3, #1
 8010b32:	4413      	add	r3, r2
 8010b34:	885b      	ldrh	r3, [r3, #2]
 8010b36:	b21a      	sxth	r2, r3
 8010b38:	2101      	movs	r1, #1
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8010b40:	b21b      	sxth	r3, r3
 8010b42:	4313      	orrs	r3, r2
 8010b44:	b21b      	sxth	r3, r3
 8010b46:	b299      	uxth	r1, r3
 8010b48:	4a2c      	ldr	r2, [pc, #176]	; (8010bfc <update_wall+0x288>)
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	332c      	adds	r3, #44	; 0x2c
 8010b4e:	005b      	lsls	r3, r3, #1
 8010b50:	4413      	add	r3, r2
 8010b52:	460a      	mov	r2, r1
 8010b54:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010b56:	7f3b      	ldrb	r3, [r7, #28]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d015      	beq.n	8010b88 <update_wall+0x214>
 8010b5c:	4a27      	ldr	r2, [pc, #156]	; (8010bfc <update_wall+0x288>)
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	330c      	adds	r3, #12
 8010b62:	005b      	lsls	r3, r3, #1
 8010b64:	4413      	add	r3, r2
 8010b66:	88db      	ldrh	r3, [r3, #6]
 8010b68:	b21a      	sxth	r2, r3
 8010b6a:	2101      	movs	r1, #1
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8010b72:	b21b      	sxth	r3, r3
 8010b74:	4313      	orrs	r3, r2
 8010b76:	b21b      	sxth	r3, r3
 8010b78:	b299      	uxth	r1, r3
 8010b7a:	4a20      	ldr	r2, [pc, #128]	; (8010bfc <update_wall+0x288>)
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	330c      	adds	r3, #12
 8010b80:	005b      	lsls	r3, r3, #1
 8010b82:	4413      	add	r3, r2
 8010b84:	460a      	mov	r2, r1
 8010b86:	80da      	strh	r2, [r3, #6]
		}

		if (y >= 1) {
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	f340 816b 	ble.w	8010e66 <update_wall+0x4f2>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	3b01      	subs	r3, #1
 8010b94:	4a19      	ldr	r2, [pc, #100]	; (8010bfc <update_wall+0x288>)
 8010b96:	332c      	adds	r3, #44	; 0x2c
 8010b98:	005b      	lsls	r3, r3, #1
 8010b9a:	4413      	add	r3, r2
 8010b9c:	885b      	ldrh	r3, [r3, #2]
 8010b9e:	b21a      	sxth	r2, r3
 8010ba0:	2101      	movs	r1, #1
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8010ba8:	b21b      	sxth	r3, r3
 8010baa:	4313      	orrs	r3, r2
 8010bac:	b21a      	sxth	r2, r3
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	3b01      	subs	r3, #1
 8010bb2:	b291      	uxth	r1, r2
 8010bb4:	4a11      	ldr	r2, [pc, #68]	; (8010bfc <update_wall+0x288>)
 8010bb6:	332c      	adds	r3, #44	; 0x2c
 8010bb8:	005b      	lsls	r3, r3, #1
 8010bba:	4413      	add	r3, r2
 8010bbc:	460a      	mov	r2, r1
 8010bbe:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010bc0:	7e3b      	ldrb	r3, [r7, #24]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	f000 814f 	beq.w	8010e66 <update_wall+0x4f2>
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	3b01      	subs	r3, #1
 8010bcc:	4a0b      	ldr	r2, [pc, #44]	; (8010bfc <update_wall+0x288>)
 8010bce:	330c      	adds	r3, #12
 8010bd0:	005b      	lsls	r3, r3, #1
 8010bd2:	4413      	add	r3, r2
 8010bd4:	88db      	ldrh	r3, [r3, #6]
 8010bd6:	b21a      	sxth	r2, r3
 8010bd8:	2101      	movs	r1, #1
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8010be0:	b21b      	sxth	r3, r3
 8010be2:	4313      	orrs	r3, r2
 8010be4:	b21a      	sxth	r2, r3
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	3b01      	subs	r3, #1
 8010bea:	b291      	uxth	r1, r2
 8010bec:	4a03      	ldr	r2, [pc, #12]	; (8010bfc <update_wall+0x288>)
 8010bee:	330c      	adds	r3, #12
 8010bf0:	005b      	lsls	r3, r3, #1
 8010bf2:	4413      	add	r3, r2
 8010bf4:	460a      	mov	r2, r1
 8010bf6:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010bf8:	e135      	b.n	8010e66 <update_wall+0x4f2>
 8010bfa:	bf00      	nop
 8010bfc:	20000c3c 	.word	0x20000c3c
	case 3:
		if (y >= 1) {
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	dd32      	ble.n	8010c6c <update_wall+0x2f8>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	3b01      	subs	r3, #1
 8010c0a:	4a9c      	ldr	r2, [pc, #624]	; (8010e7c <update_wall+0x508>)
 8010c0c:	332c      	adds	r3, #44	; 0x2c
 8010c0e:	005b      	lsls	r3, r3, #1
 8010c10:	4413      	add	r3, r2
 8010c12:	885b      	ldrh	r3, [r3, #2]
 8010c14:	b21a      	sxth	r2, r3
 8010c16:	2101      	movs	r1, #1
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8010c1e:	b21b      	sxth	r3, r3
 8010c20:	4313      	orrs	r3, r2
 8010c22:	b21a      	sxth	r2, r3
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	3b01      	subs	r3, #1
 8010c28:	b291      	uxth	r1, r2
 8010c2a:	4a94      	ldr	r2, [pc, #592]	; (8010e7c <update_wall+0x508>)
 8010c2c:	332c      	adds	r3, #44	; 0x2c
 8010c2e:	005b      	lsls	r3, r3, #1
 8010c30:	4413      	add	r3, r2
 8010c32:	460a      	mov	r2, r1
 8010c34:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010c36:	78fb      	ldrb	r3, [r7, #3]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d017      	beq.n	8010c6c <update_wall+0x2f8>
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	3b01      	subs	r3, #1
 8010c40:	4a8e      	ldr	r2, [pc, #568]	; (8010e7c <update_wall+0x508>)
 8010c42:	330c      	adds	r3, #12
 8010c44:	005b      	lsls	r3, r3, #1
 8010c46:	4413      	add	r3, r2
 8010c48:	88db      	ldrh	r3, [r3, #6]
 8010c4a:	b21a      	sxth	r2, r3
 8010c4c:	2101      	movs	r1, #1
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	fa01 f303 	lsl.w	r3, r1, r3
 8010c54:	b21b      	sxth	r3, r3
 8010c56:	4313      	orrs	r3, r2
 8010c58:	b21a      	sxth	r2, r3
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	3b01      	subs	r3, #1
 8010c5e:	b291      	uxth	r1, r2
 8010c60:	4a86      	ldr	r2, [pc, #536]	; (8010e7c <update_wall+0x508>)
 8010c62:	330c      	adds	r3, #12
 8010c64:	005b      	lsls	r3, r3, #1
 8010c66:	4413      	add	r3, r2
 8010c68:	460a      	mov	r2, r1
 8010c6a:	80da      	strh	r2, [r3, #6]
		}

		if (x <= 14) {
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	2b0e      	cmp	r3, #14
 8010c70:	dc29      	bgt.n	8010cc6 <update_wall+0x352>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010c72:	4a82      	ldr	r2, [pc, #520]	; (8010e7c <update_wall+0x508>)
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	331c      	adds	r3, #28
 8010c78:	005b      	lsls	r3, r3, #1
 8010c7a:	4413      	add	r3, r2
 8010c7c:	889b      	ldrh	r3, [r3, #4]
 8010c7e:	b21a      	sxth	r2, r3
 8010c80:	2101      	movs	r1, #1
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	fa01 f303 	lsl.w	r3, r1, r3
 8010c88:	b21b      	sxth	r3, r3
 8010c8a:	4313      	orrs	r3, r2
 8010c8c:	b21b      	sxth	r3, r3
 8010c8e:	b299      	uxth	r1, r3
 8010c90:	4a7a      	ldr	r2, [pc, #488]	; (8010e7c <update_wall+0x508>)
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	331c      	adds	r3, #28
 8010c96:	005b      	lsls	r3, r3, #1
 8010c98:	4413      	add	r3, r2
 8010c9a:	460a      	mov	r2, r1
 8010c9c:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010c9e:	7f3b      	ldrb	r3, [r7, #28]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d010      	beq.n	8010cc6 <update_wall+0x352>
 8010ca4:	4a75      	ldr	r2, [pc, #468]	; (8010e7c <update_wall+0x508>)
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010cac:	b21a      	sxth	r2, r3
 8010cae:	2101      	movs	r1, #1
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8010cb6:	b21b      	sxth	r3, r3
 8010cb8:	4313      	orrs	r3, r2
 8010cba:	b21b      	sxth	r3, r3
 8010cbc:	b299      	uxth	r1, r3
 8010cbe:	4a6f      	ldr	r2, [pc, #444]	; (8010e7c <update_wall+0x508>)
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x >= 1) {
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	f340 80ce 	ble.w	8010e6a <update_wall+0x4f6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	3b01      	subs	r3, #1
 8010cd2:	4a6a      	ldr	r2, [pc, #424]	; (8010e7c <update_wall+0x508>)
 8010cd4:	331c      	adds	r3, #28
 8010cd6:	005b      	lsls	r3, r3, #1
 8010cd8:	4413      	add	r3, r2
 8010cda:	889b      	ldrh	r3, [r3, #4]
 8010cdc:	b21a      	sxth	r2, r3
 8010cde:	2101      	movs	r1, #1
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8010ce6:	b21b      	sxth	r3, r3
 8010ce8:	4313      	orrs	r3, r2
 8010cea:	b21a      	sxth	r2, r3
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	3b01      	subs	r3, #1
 8010cf0:	b291      	uxth	r1, r2
 8010cf2:	4a62      	ldr	r2, [pc, #392]	; (8010e7c <update_wall+0x508>)
 8010cf4:	331c      	adds	r3, #28
 8010cf6:	005b      	lsls	r3, r3, #1
 8010cf8:	4413      	add	r3, r2
 8010cfa:	460a      	mov	r2, r1
 8010cfc:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010cfe:	7e3b      	ldrb	r3, [r7, #24]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	f000 80b2 	beq.w	8010e6a <update_wall+0x4f6>
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	3b01      	subs	r3, #1
 8010d0a:	4a5c      	ldr	r2, [pc, #368]	; (8010e7c <update_wall+0x508>)
 8010d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d10:	b21a      	sxth	r2, r3
 8010d12:	2101      	movs	r1, #1
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	fa01 f303 	lsl.w	r3, r1, r3
 8010d1a:	b21b      	sxth	r3, r3
 8010d1c:	4313      	orrs	r3, r2
 8010d1e:	b21a      	sxth	r2, r3
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	3b01      	subs	r3, #1
 8010d24:	b291      	uxth	r1, r2
 8010d26:	4a55      	ldr	r2, [pc, #340]	; (8010e7c <update_wall+0x508>)
 8010d28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010d2c:	e09d      	b.n	8010e6a <update_wall+0x4f6>
	case 4:
		if (x >= 1) {
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	dd2d      	ble.n	8010d90 <update_wall+0x41c>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	3b01      	subs	r3, #1
 8010d38:	4a50      	ldr	r2, [pc, #320]	; (8010e7c <update_wall+0x508>)
 8010d3a:	331c      	adds	r3, #28
 8010d3c:	005b      	lsls	r3, r3, #1
 8010d3e:	4413      	add	r3, r2
 8010d40:	889b      	ldrh	r3, [r3, #4]
 8010d42:	b21a      	sxth	r2, r3
 8010d44:	2101      	movs	r1, #1
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	fa01 f303 	lsl.w	r3, r1, r3
 8010d4c:	b21b      	sxth	r3, r3
 8010d4e:	4313      	orrs	r3, r2
 8010d50:	b21a      	sxth	r2, r3
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	3b01      	subs	r3, #1
 8010d56:	b291      	uxth	r1, r2
 8010d58:	4a48      	ldr	r2, [pc, #288]	; (8010e7c <update_wall+0x508>)
 8010d5a:	331c      	adds	r3, #28
 8010d5c:	005b      	lsls	r3, r3, #1
 8010d5e:	4413      	add	r3, r2
 8010d60:	460a      	mov	r2, r1
 8010d62:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010d64:	78fb      	ldrb	r3, [r7, #3]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d012      	beq.n	8010d90 <update_wall+0x41c>
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	3b01      	subs	r3, #1
 8010d6e:	4a43      	ldr	r2, [pc, #268]	; (8010e7c <update_wall+0x508>)
 8010d70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d74:	b21a      	sxth	r2, r3
 8010d76:	2101      	movs	r1, #1
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8010d7e:	b21b      	sxth	r3, r3
 8010d80:	4313      	orrs	r3, r2
 8010d82:	b21a      	sxth	r2, r3
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	3b01      	subs	r3, #1
 8010d88:	b291      	uxth	r1, r2
 8010d8a:	4a3c      	ldr	r2, [pc, #240]	; (8010e7c <update_wall+0x508>)
 8010d8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y >= 1) {
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	dd32      	ble.n	8010dfc <update_wall+0x488>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	3b01      	subs	r3, #1
 8010d9a:	4a38      	ldr	r2, [pc, #224]	; (8010e7c <update_wall+0x508>)
 8010d9c:	332c      	adds	r3, #44	; 0x2c
 8010d9e:	005b      	lsls	r3, r3, #1
 8010da0:	4413      	add	r3, r2
 8010da2:	885b      	ldrh	r3, [r3, #2]
 8010da4:	b21a      	sxth	r2, r3
 8010da6:	2101      	movs	r1, #1
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	fa01 f303 	lsl.w	r3, r1, r3
 8010dae:	b21b      	sxth	r3, r3
 8010db0:	4313      	orrs	r3, r2
 8010db2:	b21a      	sxth	r2, r3
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	3b01      	subs	r3, #1
 8010db8:	b291      	uxth	r1, r2
 8010dba:	4a30      	ldr	r2, [pc, #192]	; (8010e7c <update_wall+0x508>)
 8010dbc:	332c      	adds	r3, #44	; 0x2c
 8010dbe:	005b      	lsls	r3, r3, #1
 8010dc0:	4413      	add	r3, r2
 8010dc2:	460a      	mov	r2, r1
 8010dc4:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010dc6:	7f3b      	ldrb	r3, [r7, #28]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d017      	beq.n	8010dfc <update_wall+0x488>
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	3b01      	subs	r3, #1
 8010dd0:	4a2a      	ldr	r2, [pc, #168]	; (8010e7c <update_wall+0x508>)
 8010dd2:	330c      	adds	r3, #12
 8010dd4:	005b      	lsls	r3, r3, #1
 8010dd6:	4413      	add	r3, r2
 8010dd8:	88db      	ldrh	r3, [r3, #6]
 8010dda:	b21a      	sxth	r2, r3
 8010ddc:	2101      	movs	r1, #1
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	fa01 f303 	lsl.w	r3, r1, r3
 8010de4:	b21b      	sxth	r3, r3
 8010de6:	4313      	orrs	r3, r2
 8010de8:	b21a      	sxth	r2, r3
 8010dea:	68bb      	ldr	r3, [r7, #8]
 8010dec:	3b01      	subs	r3, #1
 8010dee:	b291      	uxth	r1, r2
 8010df0:	4a22      	ldr	r2, [pc, #136]	; (8010e7c <update_wall+0x508>)
 8010df2:	330c      	adds	r3, #12
 8010df4:	005b      	lsls	r3, r3, #1
 8010df6:	4413      	add	r3, r2
 8010df8:	460a      	mov	r2, r1
 8010dfa:	80da      	strh	r2, [r3, #6]
		}

		if (y <= 14) {
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	2b0e      	cmp	r3, #14
 8010e00:	dc35      	bgt.n	8010e6e <update_wall+0x4fa>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010e02:	4a1e      	ldr	r2, [pc, #120]	; (8010e7c <update_wall+0x508>)
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	332c      	adds	r3, #44	; 0x2c
 8010e08:	005b      	lsls	r3, r3, #1
 8010e0a:	4413      	add	r3, r2
 8010e0c:	885b      	ldrh	r3, [r3, #2]
 8010e0e:	b21a      	sxth	r2, r3
 8010e10:	2101      	movs	r1, #1
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	fa01 f303 	lsl.w	r3, r1, r3
 8010e18:	b21b      	sxth	r3, r3
 8010e1a:	4313      	orrs	r3, r2
 8010e1c:	b21b      	sxth	r3, r3
 8010e1e:	b299      	uxth	r1, r3
 8010e20:	4a16      	ldr	r2, [pc, #88]	; (8010e7c <update_wall+0x508>)
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	332c      	adds	r3, #44	; 0x2c
 8010e26:	005b      	lsls	r3, r3, #1
 8010e28:	4413      	add	r3, r2
 8010e2a:	460a      	mov	r2, r1
 8010e2c:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010e2e:	7e3b      	ldrb	r3, [r7, #24]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d01c      	beq.n	8010e6e <update_wall+0x4fa>
 8010e34:	4a11      	ldr	r2, [pc, #68]	; (8010e7c <update_wall+0x508>)
 8010e36:	68bb      	ldr	r3, [r7, #8]
 8010e38:	330c      	adds	r3, #12
 8010e3a:	005b      	lsls	r3, r3, #1
 8010e3c:	4413      	add	r3, r2
 8010e3e:	88db      	ldrh	r3, [r3, #6]
 8010e40:	b21a      	sxth	r2, r3
 8010e42:	2101      	movs	r1, #1
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	fa01 f303 	lsl.w	r3, r1, r3
 8010e4a:	b21b      	sxth	r3, r3
 8010e4c:	4313      	orrs	r3, r2
 8010e4e:	b21b      	sxth	r3, r3
 8010e50:	b299      	uxth	r1, r3
 8010e52:	4a0a      	ldr	r2, [pc, #40]	; (8010e7c <update_wall+0x508>)
 8010e54:	68bb      	ldr	r3, [r7, #8]
 8010e56:	330c      	adds	r3, #12
 8010e58:	005b      	lsls	r3, r3, #1
 8010e5a:	4413      	add	r3, r2
 8010e5c:	460a      	mov	r2, r1
 8010e5e:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010e60:	e005      	b.n	8010e6e <update_wall+0x4fa>
		break;
 8010e62:	bf00      	nop
 8010e64:	e004      	b.n	8010e70 <update_wall+0x4fc>
		break;
 8010e66:	bf00      	nop
 8010e68:	e002      	b.n	8010e70 <update_wall+0x4fc>
		break;
 8010e6a:	bf00      	nop
 8010e6c:	e000      	b.n	8010e70 <update_wall+0x4fc>
		break;
 8010e6e:	bf00      	nop

	}


}
 8010e70:	bf00      	nop
 8010e72:	3714      	adds	r7, #20
 8010e74:	46bd      	mov	sp, r7
 8010e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7a:	4770      	bx	lr
 8010e7c:	20000c3c 	.word	0x20000c3c

08010e80 <get_wall>:



void get_wall(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8010e80:	b480      	push	{r7}
 8010e82:	b085      	sub	sp, #20
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	60f8      	str	r0, [r7, #12]
 8010e88:	60b9      	str	r1, [r7, #8]
 8010e8a:	607a      	str	r2, [r7, #4]
 8010e8c:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	2201      	movs	r2, #1
 8010e92:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8010e94:	69bb      	ldr	r3, [r7, #24]
 8010e96:	2201      	movs	r2, #1
 8010e98:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8010e9a:	69fb      	ldr	r3, [r7, #28]
 8010e9c:	2201      	movs	r2, #1
 8010e9e:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	3b01      	subs	r3, #1
 8010ea4:	2b03      	cmp	r3, #3
 8010ea6:	f200 8156 	bhi.w	8011156 <get_wall+0x2d6>
 8010eaa:	a201      	add	r2, pc, #4	; (adr r2, 8010eb0 <get_wall+0x30>)
 8010eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eb0:	08010ec1 	.word	0x08010ec1
 8010eb4:	08010f61 	.word	0x08010f61
 8010eb8:	08011005 	.word	0x08011005
 8010ebc:	080110a5 	.word	0x080110a5
	case 1:
		if (y <= 14) {
 8010ec0:	68bb      	ldr	r3, [r7, #8]
 8010ec2:	2b0e      	cmp	r3, #14
 8010ec4:	dc17      	bgt.n	8010ef6 <get_wall+0x76>
			*front_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010ec6:	4aa7      	ldr	r2, [pc, #668]	; (8011164 <get_wall+0x2e4>)
 8010ec8:	68bb      	ldr	r3, [r7, #8]
 8010eca:	330c      	adds	r3, #12
 8010ecc:	005b      	lsls	r3, r3, #1
 8010ece:	4413      	add	r3, r2
 8010ed0:	88db      	ldrh	r3, [r3, #6]
 8010ed2:	4619      	mov	r1, r3
 8010ed4:	2201      	movs	r2, #1
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8010edc:	ea01 0203 	and.w	r2, r1, r3
 8010ee0:	2101      	movs	r1, #1
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	bf0c      	ite	eq
 8010eec:	2301      	moveq	r3, #1
 8010eee:	2300      	movne	r3, #0
 8010ef0:	b2da      	uxtb	r2, r3
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	dd16      	ble.n	8010f2a <get_wall+0xaa>
			*left_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	3b01      	subs	r3, #1
 8010f00:	4a98      	ldr	r2, [pc, #608]	; (8011164 <get_wall+0x2e4>)
 8010f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f06:	4619      	mov	r1, r3
 8010f08:	2201      	movs	r2, #1
 8010f0a:	68bb      	ldr	r3, [r7, #8]
 8010f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8010f10:	ea01 0203 	and.w	r2, r1, r3
 8010f14:	2101      	movs	r1, #1
 8010f16:	68bb      	ldr	r3, [r7, #8]
 8010f18:	fa01 f303 	lsl.w	r3, r1, r3
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	bf0c      	ite	eq
 8010f20:	2301      	moveq	r3, #1
 8010f22:	2300      	movne	r3, #0
 8010f24:	b2da      	uxtb	r2, r3
 8010f26:	69fb      	ldr	r3, [r7, #28]
 8010f28:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	2b0e      	cmp	r3, #14
 8010f2e:	f300 810b 	bgt.w	8011148 <get_wall+0x2c8>
			*right_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010f32:	4a8c      	ldr	r2, [pc, #560]	; (8011164 <get_wall+0x2e4>)
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f3a:	4619      	mov	r1, r3
 8010f3c:	2201      	movs	r2, #1
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	fa02 f303 	lsl.w	r3, r2, r3
 8010f44:	ea01 0203 	and.w	r2, r1, r3
 8010f48:	2101      	movs	r1, #1
 8010f4a:	68bb      	ldr	r3, [r7, #8]
 8010f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8010f50:	429a      	cmp	r2, r3
 8010f52:	bf0c      	ite	eq
 8010f54:	2301      	moveq	r3, #1
 8010f56:	2300      	movne	r3, #0
 8010f58:	b2da      	uxtb	r2, r3
 8010f5a:	69bb      	ldr	r3, [r7, #24]
 8010f5c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010f5e:	e0f3      	b.n	8011148 <get_wall+0x2c8>
	case 2:
		if (x <= 14) {
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	2b0e      	cmp	r3, #14
 8010f64:	dc15      	bgt.n	8010f92 <get_wall+0x112>
			*front_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010f66:	4a7f      	ldr	r2, [pc, #508]	; (8011164 <get_wall+0x2e4>)
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f6e:	4619      	mov	r1, r3
 8010f70:	2201      	movs	r2, #1
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	fa02 f303 	lsl.w	r3, r2, r3
 8010f78:	ea01 0203 	and.w	r2, r1, r3
 8010f7c:	2101      	movs	r1, #1
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	fa01 f303 	lsl.w	r3, r1, r3
 8010f84:	429a      	cmp	r2, r3
 8010f86:	bf0c      	ite	eq
 8010f88:	2301      	moveq	r3, #1
 8010f8a:	2300      	movne	r3, #0
 8010f8c:	b2da      	uxtb	r2, r3
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	2b0e      	cmp	r3, #14
 8010f96:	dc17      	bgt.n	8010fc8 <get_wall+0x148>
			*left_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010f98:	4a72      	ldr	r2, [pc, #456]	; (8011164 <get_wall+0x2e4>)
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	330c      	adds	r3, #12
 8010f9e:	005b      	lsls	r3, r3, #1
 8010fa0:	4413      	add	r3, r2
 8010fa2:	88db      	ldrh	r3, [r3, #6]
 8010fa4:	4619      	mov	r1, r3
 8010fa6:	2201      	movs	r2, #1
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	fa02 f303 	lsl.w	r3, r2, r3
 8010fae:	ea01 0203 	and.w	r2, r1, r3
 8010fb2:	2101      	movs	r1, #1
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	bf0c      	ite	eq
 8010fbe:	2301      	moveq	r3, #1
 8010fc0:	2300      	movne	r3, #0
 8010fc2:	b2da      	uxtb	r2, r3
 8010fc4:	69fb      	ldr	r3, [r7, #28]
 8010fc6:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	f340 80be 	ble.w	801114c <get_wall+0x2cc>
			*right_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	3b01      	subs	r3, #1
 8010fd4:	4a63      	ldr	r2, [pc, #396]	; (8011164 <get_wall+0x2e4>)
 8010fd6:	330c      	adds	r3, #12
 8010fd8:	005b      	lsls	r3, r3, #1
 8010fda:	4413      	add	r3, r2
 8010fdc:	88db      	ldrh	r3, [r3, #6]
 8010fde:	4619      	mov	r1, r3
 8010fe0:	2201      	movs	r2, #1
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8010fe8:	ea01 0203 	and.w	r2, r1, r3
 8010fec:	2101      	movs	r1, #1
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	bf0c      	ite	eq
 8010ff8:	2301      	moveq	r3, #1
 8010ffa:	2300      	movne	r3, #0
 8010ffc:	b2da      	uxtb	r2, r3
 8010ffe:	69bb      	ldr	r3, [r7, #24]
 8011000:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011002:	e0a3      	b.n	801114c <get_wall+0x2cc>
	case 3:
		if (y >= 1) {
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	2b00      	cmp	r3, #0
 8011008:	dd18      	ble.n	801103c <get_wall+0x1bc>
			*front_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	3b01      	subs	r3, #1
 801100e:	4a55      	ldr	r2, [pc, #340]	; (8011164 <get_wall+0x2e4>)
 8011010:	330c      	adds	r3, #12
 8011012:	005b      	lsls	r3, r3, #1
 8011014:	4413      	add	r3, r2
 8011016:	88db      	ldrh	r3, [r3, #6]
 8011018:	4619      	mov	r1, r3
 801101a:	2201      	movs	r2, #1
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	fa02 f303 	lsl.w	r3, r2, r3
 8011022:	ea01 0203 	and.w	r2, r1, r3
 8011026:	2101      	movs	r1, #1
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	fa01 f303 	lsl.w	r3, r1, r3
 801102e:	429a      	cmp	r2, r3
 8011030:	bf0c      	ite	eq
 8011032:	2301      	moveq	r3, #1
 8011034:	2300      	movne	r3, #0
 8011036:	b2da      	uxtb	r2, r3
 8011038:	683b      	ldr	r3, [r7, #0]
 801103a:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	2b0e      	cmp	r3, #14
 8011040:	dc15      	bgt.n	801106e <get_wall+0x1ee>
			*left_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8011042:	4a48      	ldr	r2, [pc, #288]	; (8011164 <get_wall+0x2e4>)
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801104a:	4619      	mov	r1, r3
 801104c:	2201      	movs	r2, #1
 801104e:	68bb      	ldr	r3, [r7, #8]
 8011050:	fa02 f303 	lsl.w	r3, r2, r3
 8011054:	ea01 0203 	and.w	r2, r1, r3
 8011058:	2101      	movs	r1, #1
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	fa01 f303 	lsl.w	r3, r1, r3
 8011060:	429a      	cmp	r2, r3
 8011062:	bf0c      	ite	eq
 8011064:	2301      	moveq	r3, #1
 8011066:	2300      	movne	r3, #0
 8011068:	b2da      	uxtb	r2, r3
 801106a:	69fb      	ldr	r3, [r7, #28]
 801106c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	2b00      	cmp	r3, #0
 8011072:	dd6d      	ble.n	8011150 <get_wall+0x2d0>
			*right_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	3b01      	subs	r3, #1
 8011078:	4a3a      	ldr	r2, [pc, #232]	; (8011164 <get_wall+0x2e4>)
 801107a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801107e:	4619      	mov	r1, r3
 8011080:	2201      	movs	r2, #1
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	fa02 f303 	lsl.w	r3, r2, r3
 8011088:	ea01 0203 	and.w	r2, r1, r3
 801108c:	2101      	movs	r1, #1
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	fa01 f303 	lsl.w	r3, r1, r3
 8011094:	429a      	cmp	r2, r3
 8011096:	bf0c      	ite	eq
 8011098:	2301      	moveq	r3, #1
 801109a:	2300      	movne	r3, #0
 801109c:	b2da      	uxtb	r2, r3
 801109e:	69bb      	ldr	r3, [r7, #24]
 80110a0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80110a2:	e055      	b.n	8011150 <get_wall+0x2d0>
	case 4:
		if (x >= 1) {
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	dd16      	ble.n	80110d8 <get_wall+0x258>
			*front_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	3b01      	subs	r3, #1
 80110ae:	4a2d      	ldr	r2, [pc, #180]	; (8011164 <get_wall+0x2e4>)
 80110b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110b4:	4619      	mov	r1, r3
 80110b6:	2201      	movs	r2, #1
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	fa02 f303 	lsl.w	r3, r2, r3
 80110be:	ea01 0203 	and.w	r2, r1, r3
 80110c2:	2101      	movs	r1, #1
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	fa01 f303 	lsl.w	r3, r1, r3
 80110ca:	429a      	cmp	r2, r3
 80110cc:	bf0c      	ite	eq
 80110ce:	2301      	moveq	r3, #1
 80110d0:	2300      	movne	r3, #0
 80110d2:	b2da      	uxtb	r2, r3
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	dd18      	ble.n	8011110 <get_wall+0x290>
			*left_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 80110de:	68bb      	ldr	r3, [r7, #8]
 80110e0:	3b01      	subs	r3, #1
 80110e2:	4a20      	ldr	r2, [pc, #128]	; (8011164 <get_wall+0x2e4>)
 80110e4:	330c      	adds	r3, #12
 80110e6:	005b      	lsls	r3, r3, #1
 80110e8:	4413      	add	r3, r2
 80110ea:	88db      	ldrh	r3, [r3, #6]
 80110ec:	4619      	mov	r1, r3
 80110ee:	2201      	movs	r2, #1
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	fa02 f303 	lsl.w	r3, r2, r3
 80110f6:	ea01 0203 	and.w	r2, r1, r3
 80110fa:	2101      	movs	r1, #1
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	fa01 f303 	lsl.w	r3, r1, r3
 8011102:	429a      	cmp	r2, r3
 8011104:	bf0c      	ite	eq
 8011106:	2301      	moveq	r3, #1
 8011108:	2300      	movne	r3, #0
 801110a:	b2da      	uxtb	r2, r3
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	2b0e      	cmp	r3, #14
 8011114:	dc1e      	bgt.n	8011154 <get_wall+0x2d4>
			*right_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8011116:	4a13      	ldr	r2, [pc, #76]	; (8011164 <get_wall+0x2e4>)
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	330c      	adds	r3, #12
 801111c:	005b      	lsls	r3, r3, #1
 801111e:	4413      	add	r3, r2
 8011120:	88db      	ldrh	r3, [r3, #6]
 8011122:	4619      	mov	r1, r3
 8011124:	2201      	movs	r2, #1
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	fa02 f303 	lsl.w	r3, r2, r3
 801112c:	ea01 0203 	and.w	r2, r1, r3
 8011130:	2101      	movs	r1, #1
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	fa01 f303 	lsl.w	r3, r1, r3
 8011138:	429a      	cmp	r2, r3
 801113a:	bf0c      	ite	eq
 801113c:	2301      	moveq	r3, #1
 801113e:	2300      	movne	r3, #0
 8011140:	b2da      	uxtb	r2, r3
 8011142:	69bb      	ldr	r3, [r7, #24]
 8011144:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011146:	e005      	b.n	8011154 <get_wall+0x2d4>
		break;
 8011148:	bf00      	nop
 801114a:	e004      	b.n	8011156 <get_wall+0x2d6>
		break;
 801114c:	bf00      	nop
 801114e:	e002      	b.n	8011156 <get_wall+0x2d6>
		break;
 8011150:	bf00      	nop
 8011152:	e000      	b.n	8011156 <get_wall+0x2d6>
		break;
 8011154:	bf00      	nop
	}

}
 8011156:	bf00      	nop
 8011158:	3714      	adds	r7, #20
 801115a:	46bd      	mov	sp, r7
 801115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011160:	4770      	bx	lr
 8011162:	bf00      	nop
 8011164:	20000c3c 	.word	0x20000c3c

08011168 <get_wall_look>:


void get_wall_look(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8011168:	b480      	push	{r7}
 801116a:	b085      	sub	sp, #20
 801116c:	af00      	add	r7, sp, #0
 801116e:	60f8      	str	r0, [r7, #12]
 8011170:	60b9      	str	r1, [r7, #8]
 8011172:	607a      	str	r2, [r7, #4]
 8011174:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	2201      	movs	r2, #1
 801117a:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 801117c:	69bb      	ldr	r3, [r7, #24]
 801117e:	2201      	movs	r2, #1
 8011180:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8011182:	69fb      	ldr	r3, [r7, #28]
 8011184:	2201      	movs	r2, #1
 8011186:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	3b01      	subs	r3, #1
 801118c:	2b03      	cmp	r3, #3
 801118e:	f200 8162 	bhi.w	8011456 <get_wall_look+0x2ee>
 8011192:	a201      	add	r2, pc, #4	; (adr r2, 8011198 <get_wall_look+0x30>)
 8011194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011198:	080111a9 	.word	0x080111a9
 801119c:	08011251 	.word	0x08011251
 80111a0:	080112f9 	.word	0x080112f9
 80111a4:	080113a1 	.word	0x080113a1
	case 1:
		if (y <= 14) {
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	2b0e      	cmp	r3, #14
 80111ac:	dc17      	bgt.n	80111de <get_wall_look+0x76>
			*front_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 80111ae:	4aad      	ldr	r2, [pc, #692]	; (8011464 <get_wall_look+0x2fc>)
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	332c      	adds	r3, #44	; 0x2c
 80111b4:	005b      	lsls	r3, r3, #1
 80111b6:	4413      	add	r3, r2
 80111b8:	885b      	ldrh	r3, [r3, #2]
 80111ba:	4619      	mov	r1, r3
 80111bc:	2201      	movs	r2, #1
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	fa02 f303 	lsl.w	r3, r2, r3
 80111c4:	ea01 0203 	and.w	r2, r1, r3
 80111c8:	2101      	movs	r1, #1
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	fa01 f303 	lsl.w	r3, r1, r3
 80111d0:	429a      	cmp	r2, r3
 80111d2:	bf0c      	ite	eq
 80111d4:	2301      	moveq	r3, #1
 80111d6:	2300      	movne	r3, #0
 80111d8:	b2da      	uxtb	r2, r3
 80111da:	683b      	ldr	r3, [r7, #0]
 80111dc:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	dd18      	ble.n	8011216 <get_wall_look+0xae>
			*left_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	3b01      	subs	r3, #1
 80111e8:	4a9e      	ldr	r2, [pc, #632]	; (8011464 <get_wall_look+0x2fc>)
 80111ea:	331c      	adds	r3, #28
 80111ec:	005b      	lsls	r3, r3, #1
 80111ee:	4413      	add	r3, r2
 80111f0:	889b      	ldrh	r3, [r3, #4]
 80111f2:	4619      	mov	r1, r3
 80111f4:	2201      	movs	r2, #1
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	fa02 f303 	lsl.w	r3, r2, r3
 80111fc:	ea01 0203 	and.w	r2, r1, r3
 8011200:	2101      	movs	r1, #1
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	fa01 f303 	lsl.w	r3, r1, r3
 8011208:	429a      	cmp	r2, r3
 801120a:	bf0c      	ite	eq
 801120c:	2301      	moveq	r3, #1
 801120e:	2300      	movne	r3, #0
 8011210:	b2da      	uxtb	r2, r3
 8011212:	69fb      	ldr	r3, [r7, #28]
 8011214:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	2b0e      	cmp	r3, #14
 801121a:	f300 8115 	bgt.w	8011448 <get_wall_look+0x2e0>
			*right_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 801121e:	4a91      	ldr	r2, [pc, #580]	; (8011464 <get_wall_look+0x2fc>)
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	331c      	adds	r3, #28
 8011224:	005b      	lsls	r3, r3, #1
 8011226:	4413      	add	r3, r2
 8011228:	889b      	ldrh	r3, [r3, #4]
 801122a:	4619      	mov	r1, r3
 801122c:	2201      	movs	r2, #1
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	fa02 f303 	lsl.w	r3, r2, r3
 8011234:	ea01 0203 	and.w	r2, r1, r3
 8011238:	2101      	movs	r1, #1
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	fa01 f303 	lsl.w	r3, r1, r3
 8011240:	429a      	cmp	r2, r3
 8011242:	bf0c      	ite	eq
 8011244:	2301      	moveq	r3, #1
 8011246:	2300      	movne	r3, #0
 8011248:	b2da      	uxtb	r2, r3
 801124a:	69bb      	ldr	r3, [r7, #24]
 801124c:	701a      	strb	r2, [r3, #0]
		}
		break;
 801124e:	e0fb      	b.n	8011448 <get_wall_look+0x2e0>
	case 2:
		if (x <= 14) {
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	2b0e      	cmp	r3, #14
 8011254:	dc17      	bgt.n	8011286 <get_wall_look+0x11e>
			*front_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 8011256:	4a83      	ldr	r2, [pc, #524]	; (8011464 <get_wall_look+0x2fc>)
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	331c      	adds	r3, #28
 801125c:	005b      	lsls	r3, r3, #1
 801125e:	4413      	add	r3, r2
 8011260:	889b      	ldrh	r3, [r3, #4]
 8011262:	4619      	mov	r1, r3
 8011264:	2201      	movs	r2, #1
 8011266:	68bb      	ldr	r3, [r7, #8]
 8011268:	fa02 f303 	lsl.w	r3, r2, r3
 801126c:	ea01 0203 	and.w	r2, r1, r3
 8011270:	2101      	movs	r1, #1
 8011272:	68bb      	ldr	r3, [r7, #8]
 8011274:	fa01 f303 	lsl.w	r3, r1, r3
 8011278:	429a      	cmp	r2, r3
 801127a:	bf0c      	ite	eq
 801127c:	2301      	moveq	r3, #1
 801127e:	2300      	movne	r3, #0
 8011280:	b2da      	uxtb	r2, r3
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	2b0e      	cmp	r3, #14
 801128a:	dc17      	bgt.n	80112bc <get_wall_look+0x154>
			*left_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 801128c:	4a75      	ldr	r2, [pc, #468]	; (8011464 <get_wall_look+0x2fc>)
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	332c      	adds	r3, #44	; 0x2c
 8011292:	005b      	lsls	r3, r3, #1
 8011294:	4413      	add	r3, r2
 8011296:	885b      	ldrh	r3, [r3, #2]
 8011298:	4619      	mov	r1, r3
 801129a:	2201      	movs	r2, #1
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	fa02 f303 	lsl.w	r3, r2, r3
 80112a2:	ea01 0203 	and.w	r2, r1, r3
 80112a6:	2101      	movs	r1, #1
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	fa01 f303 	lsl.w	r3, r1, r3
 80112ae:	429a      	cmp	r2, r3
 80112b0:	bf0c      	ite	eq
 80112b2:	2301      	moveq	r3, #1
 80112b4:	2300      	movne	r3, #0
 80112b6:	b2da      	uxtb	r2, r3
 80112b8:	69fb      	ldr	r3, [r7, #28]
 80112ba:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	f340 80c4 	ble.w	801144c <get_wall_look+0x2e4>
			*right_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	3b01      	subs	r3, #1
 80112c8:	4a66      	ldr	r2, [pc, #408]	; (8011464 <get_wall_look+0x2fc>)
 80112ca:	332c      	adds	r3, #44	; 0x2c
 80112cc:	005b      	lsls	r3, r3, #1
 80112ce:	4413      	add	r3, r2
 80112d0:	885b      	ldrh	r3, [r3, #2]
 80112d2:	4619      	mov	r1, r3
 80112d4:	2201      	movs	r2, #1
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	fa02 f303 	lsl.w	r3, r2, r3
 80112dc:	ea01 0203 	and.w	r2, r1, r3
 80112e0:	2101      	movs	r1, #1
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	fa01 f303 	lsl.w	r3, r1, r3
 80112e8:	429a      	cmp	r2, r3
 80112ea:	bf0c      	ite	eq
 80112ec:	2301      	moveq	r3, #1
 80112ee:	2300      	movne	r3, #0
 80112f0:	b2da      	uxtb	r2, r3
 80112f2:	69bb      	ldr	r3, [r7, #24]
 80112f4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80112f6:	e0a9      	b.n	801144c <get_wall_look+0x2e4>
	case 3:
		if (y >= 1) {
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	dd18      	ble.n	8011330 <get_wall_look+0x1c8>
			*front_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	3b01      	subs	r3, #1
 8011302:	4a58      	ldr	r2, [pc, #352]	; (8011464 <get_wall_look+0x2fc>)
 8011304:	332c      	adds	r3, #44	; 0x2c
 8011306:	005b      	lsls	r3, r3, #1
 8011308:	4413      	add	r3, r2
 801130a:	885b      	ldrh	r3, [r3, #2]
 801130c:	4619      	mov	r1, r3
 801130e:	2201      	movs	r2, #1
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	fa02 f303 	lsl.w	r3, r2, r3
 8011316:	ea01 0203 	and.w	r2, r1, r3
 801131a:	2101      	movs	r1, #1
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	fa01 f303 	lsl.w	r3, r1, r3
 8011322:	429a      	cmp	r2, r3
 8011324:	bf0c      	ite	eq
 8011326:	2301      	moveq	r3, #1
 8011328:	2300      	movne	r3, #0
 801132a:	b2da      	uxtb	r2, r3
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	2b0e      	cmp	r3, #14
 8011334:	dc17      	bgt.n	8011366 <get_wall_look+0x1fe>
			*left_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 8011336:	4a4b      	ldr	r2, [pc, #300]	; (8011464 <get_wall_look+0x2fc>)
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	331c      	adds	r3, #28
 801133c:	005b      	lsls	r3, r3, #1
 801133e:	4413      	add	r3, r2
 8011340:	889b      	ldrh	r3, [r3, #4]
 8011342:	4619      	mov	r1, r3
 8011344:	2201      	movs	r2, #1
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	fa02 f303 	lsl.w	r3, r2, r3
 801134c:	ea01 0203 	and.w	r2, r1, r3
 8011350:	2101      	movs	r1, #1
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	fa01 f303 	lsl.w	r3, r1, r3
 8011358:	429a      	cmp	r2, r3
 801135a:	bf0c      	ite	eq
 801135c:	2301      	moveq	r3, #1
 801135e:	2300      	movne	r3, #0
 8011360:	b2da      	uxtb	r2, r3
 8011362:	69fb      	ldr	r3, [r7, #28]
 8011364:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	2b00      	cmp	r3, #0
 801136a:	dd71      	ble.n	8011450 <get_wall_look+0x2e8>
			*right_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	3b01      	subs	r3, #1
 8011370:	4a3c      	ldr	r2, [pc, #240]	; (8011464 <get_wall_look+0x2fc>)
 8011372:	331c      	adds	r3, #28
 8011374:	005b      	lsls	r3, r3, #1
 8011376:	4413      	add	r3, r2
 8011378:	889b      	ldrh	r3, [r3, #4]
 801137a:	4619      	mov	r1, r3
 801137c:	2201      	movs	r2, #1
 801137e:	68bb      	ldr	r3, [r7, #8]
 8011380:	fa02 f303 	lsl.w	r3, r2, r3
 8011384:	ea01 0203 	and.w	r2, r1, r3
 8011388:	2101      	movs	r1, #1
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	fa01 f303 	lsl.w	r3, r1, r3
 8011390:	429a      	cmp	r2, r3
 8011392:	bf0c      	ite	eq
 8011394:	2301      	moveq	r3, #1
 8011396:	2300      	movne	r3, #0
 8011398:	b2da      	uxtb	r2, r3
 801139a:	69bb      	ldr	r3, [r7, #24]
 801139c:	701a      	strb	r2, [r3, #0]
		}
		break;
 801139e:	e057      	b.n	8011450 <get_wall_look+0x2e8>
	case 4:
		if (x >= 1) {
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	dd18      	ble.n	80113d8 <get_wall_look+0x270>
			*front_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	3b01      	subs	r3, #1
 80113aa:	4a2e      	ldr	r2, [pc, #184]	; (8011464 <get_wall_look+0x2fc>)
 80113ac:	331c      	adds	r3, #28
 80113ae:	005b      	lsls	r3, r3, #1
 80113b0:	4413      	add	r3, r2
 80113b2:	889b      	ldrh	r3, [r3, #4]
 80113b4:	4619      	mov	r1, r3
 80113b6:	2201      	movs	r2, #1
 80113b8:	68bb      	ldr	r3, [r7, #8]
 80113ba:	fa02 f303 	lsl.w	r3, r2, r3
 80113be:	ea01 0203 	and.w	r2, r1, r3
 80113c2:	2101      	movs	r1, #1
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	fa01 f303 	lsl.w	r3, r1, r3
 80113ca:	429a      	cmp	r2, r3
 80113cc:	bf0c      	ite	eq
 80113ce:	2301      	moveq	r3, #1
 80113d0:	2300      	movne	r3, #0
 80113d2:	b2da      	uxtb	r2, r3
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	dd18      	ble.n	8011410 <get_wall_look+0x2a8>
			*left_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	3b01      	subs	r3, #1
 80113e2:	4a20      	ldr	r2, [pc, #128]	; (8011464 <get_wall_look+0x2fc>)
 80113e4:	332c      	adds	r3, #44	; 0x2c
 80113e6:	005b      	lsls	r3, r3, #1
 80113e8:	4413      	add	r3, r2
 80113ea:	885b      	ldrh	r3, [r3, #2]
 80113ec:	4619      	mov	r1, r3
 80113ee:	2201      	movs	r2, #1
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	fa02 f303 	lsl.w	r3, r2, r3
 80113f6:	ea01 0203 	and.w	r2, r1, r3
 80113fa:	2101      	movs	r1, #1
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	fa01 f303 	lsl.w	r3, r1, r3
 8011402:	429a      	cmp	r2, r3
 8011404:	bf0c      	ite	eq
 8011406:	2301      	moveq	r3, #1
 8011408:	2300      	movne	r3, #0
 801140a:	b2da      	uxtb	r2, r3
 801140c:	69fb      	ldr	r3, [r7, #28]
 801140e:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011410:	68bb      	ldr	r3, [r7, #8]
 8011412:	2b0e      	cmp	r3, #14
 8011414:	dc1e      	bgt.n	8011454 <get_wall_look+0x2ec>
			*right_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 8011416:	4a13      	ldr	r2, [pc, #76]	; (8011464 <get_wall_look+0x2fc>)
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	332c      	adds	r3, #44	; 0x2c
 801141c:	005b      	lsls	r3, r3, #1
 801141e:	4413      	add	r3, r2
 8011420:	885b      	ldrh	r3, [r3, #2]
 8011422:	4619      	mov	r1, r3
 8011424:	2201      	movs	r2, #1
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	fa02 f303 	lsl.w	r3, r2, r3
 801142c:	ea01 0203 	and.w	r2, r1, r3
 8011430:	2101      	movs	r1, #1
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	fa01 f303 	lsl.w	r3, r1, r3
 8011438:	429a      	cmp	r2, r3
 801143a:	bf0c      	ite	eq
 801143c:	2301      	moveq	r3, #1
 801143e:	2300      	movne	r3, #0
 8011440:	b2da      	uxtb	r2, r3
 8011442:	69bb      	ldr	r3, [r7, #24]
 8011444:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011446:	e005      	b.n	8011454 <get_wall_look+0x2ec>
		break;
 8011448:	bf00      	nop
 801144a:	e004      	b.n	8011456 <get_wall_look+0x2ee>
		break;
 801144c:	bf00      	nop
 801144e:	e002      	b.n	8011456 <get_wall_look+0x2ee>
		break;
 8011450:	bf00      	nop
 8011452:	e000      	b.n	8011456 <get_wall_look+0x2ee>
		break;
 8011454:	bf00      	nop
	}

}
 8011456:	bf00      	nop
 8011458:	3714      	adds	r7, #20
 801145a:	46bd      	mov	sp, r7
 801145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011460:	4770      	bx	lr
 8011462:	bf00      	nop
 8011464:	20000c3c 	.word	0x20000c3c

08011468 <search_AroundWalkCount>:


void search_AroundWalkCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8011468:	b480      	push	{r7}
 801146a:	b087      	sub	sp, #28
 801146c:	af00      	add	r7, sp, #0
 801146e:	60f8      	str	r0, [r7, #12]
 8011470:	60b9      	str	r1, [r7, #8]
 8011472:	607a      	str	r2, [r7, #4]
 8011474:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT;}
 8011476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011478:	2b0e      	cmp	r3, #14
 801147a:	dd02      	ble.n	8011482 <search_AroundWalkCount+0x1a>
 801147c:	23ff      	movs	r3, #255	; 0xff
 801147e:	82fb      	strh	r3, [r7, #22]
 8011480:	e008      	b.n	8011494 <search_AroundWalkCount+0x2c>
	else {north_count = walk_count[x][y + 1];}
 8011482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011484:	3301      	adds	r3, #1
 8011486:	493e      	ldr	r1, [pc, #248]	; (8011580 <search_AroundWalkCount+0x118>)
 8011488:	6a3a      	ldr	r2, [r7, #32]
 801148a:	0112      	lsls	r2, r2, #4
 801148c:	4413      	add	r3, r2
 801148e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011492:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT;}
 8011494:	6a3b      	ldr	r3, [r7, #32]
 8011496:	2b0e      	cmp	r3, #14
 8011498:	dd02      	ble.n	80114a0 <search_AroundWalkCount+0x38>
 801149a:	23ff      	movs	r3, #255	; 0xff
 801149c:	82bb      	strh	r3, [r7, #20]
 801149e:	e008      	b.n	80114b2 <search_AroundWalkCount+0x4a>
	else {east_count = walk_count[x + 1][y];}
 80114a0:	6a3b      	ldr	r3, [r7, #32]
 80114a2:	3301      	adds	r3, #1
 80114a4:	4936      	ldr	r1, [pc, #216]	; (8011580 <search_AroundWalkCount+0x118>)
 80114a6:	011a      	lsls	r2, r3, #4
 80114a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114aa:	4413      	add	r3, r2
 80114ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80114b0:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT;}
 80114b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	dc02      	bgt.n	80114be <search_AroundWalkCount+0x56>
 80114b8:	23ff      	movs	r3, #255	; 0xff
 80114ba:	827b      	strh	r3, [r7, #18]
 80114bc:	e008      	b.n	80114d0 <search_AroundWalkCount+0x68>
	else {south_count = walk_count[x][y - 1];}
 80114be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c0:	3b01      	subs	r3, #1
 80114c2:	492f      	ldr	r1, [pc, #188]	; (8011580 <search_AroundWalkCount+0x118>)
 80114c4:	6a3a      	ldr	r2, [r7, #32]
 80114c6:	0112      	lsls	r2, r2, #4
 80114c8:	4413      	add	r3, r2
 80114ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80114ce:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT;}
 80114d0:	6a3b      	ldr	r3, [r7, #32]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	dc02      	bgt.n	80114dc <search_AroundWalkCount+0x74>
 80114d6:	23ff      	movs	r3, #255	; 0xff
 80114d8:	823b      	strh	r3, [r7, #16]
 80114da:	e008      	b.n	80114ee <search_AroundWalkCount+0x86>
	else {west_count = walk_count[x - 1][y];}
 80114dc:	6a3b      	ldr	r3, [r7, #32]
 80114de:	3b01      	subs	r3, #1
 80114e0:	4927      	ldr	r1, [pc, #156]	; (8011580 <search_AroundWalkCount+0x118>)
 80114e2:	011a      	lsls	r2, r3, #4
 80114e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e6:	4413      	add	r3, r2
 80114e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80114ec:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 80114ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f0:	3b01      	subs	r3, #1
 80114f2:	2b03      	cmp	r3, #3
 80114f4:	d83e      	bhi.n	8011574 <search_AroundWalkCount+0x10c>
 80114f6:	a201      	add	r2, pc, #4	; (adr r2, 80114fc <search_AroundWalkCount+0x94>)
 80114f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114fc:	0801150d 	.word	0x0801150d
 8011500:	08011527 	.word	0x08011527
 8011504:	08011541 	.word	0x08011541
 8011508:	0801155b 	.word	0x0801155b
	case 1:
		*front_count = north_count;
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	8afa      	ldrh	r2, [r7, #22]
 8011510:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	8aba      	ldrh	r2, [r7, #20]
 8011516:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	8a7a      	ldrh	r2, [r7, #18]
 801151c:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	8a3a      	ldrh	r2, [r7, #16]
 8011522:	801a      	strh	r2, [r3, #0]
		break;
 8011524:	e026      	b.n	8011574 <search_AroundWalkCount+0x10c>
	case 2:
		*front_count = east_count;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	8aba      	ldrh	r2, [r7, #20]
 801152a:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	8a7a      	ldrh	r2, [r7, #18]
 8011530:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	8a3a      	ldrh	r2, [r7, #16]
 8011536:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	8afa      	ldrh	r2, [r7, #22]
 801153c:	801a      	strh	r2, [r3, #0]
		break;
 801153e:	e019      	b.n	8011574 <search_AroundWalkCount+0x10c>
	case 3:
		*front_count = south_count;
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	8a7a      	ldrh	r2, [r7, #18]
 8011544:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 8011546:	68bb      	ldr	r3, [r7, #8]
 8011548:	8a3a      	ldrh	r2, [r7, #16]
 801154a:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	8afa      	ldrh	r2, [r7, #22]
 8011550:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	8aba      	ldrh	r2, [r7, #20]
 8011556:	801a      	strh	r2, [r3, #0]
		break;
 8011558:	e00c      	b.n	8011574 <search_AroundWalkCount+0x10c>
	case 4:
		*front_count = west_count;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	8a3a      	ldrh	r2, [r7, #16]
 801155e:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 8011560:	68bb      	ldr	r3, [r7, #8]
 8011562:	8afa      	ldrh	r2, [r7, #22]
 8011564:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	8aba      	ldrh	r2, [r7, #20]
 801156a:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	8a7a      	ldrh	r2, [r7, #18]
 8011570:	801a      	strh	r2, [r3, #0]
		break;
 8011572:	bf00      	nop

	}


}
 8011574:	bf00      	nop
 8011576:	371c      	adds	r7, #28
 8011578:	46bd      	mov	sp, r7
 801157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157e:	4770      	bx	lr
 8011580:	20000d30 	.word	0x20000d30

08011584 <search_AroundDijkstraCount>:





void search_AroundDijkstraCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8011584:	b480      	push	{r7}
 8011586:	b087      	sub	sp, #28
 8011588:	af00      	add	r7, sp, #0
 801158a:	60f8      	str	r0, [r7, #12]
 801158c:	60b9      	str	r1, [r7, #8]
 801158e:	607a      	str	r2, [r7, #4]
 8011590:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = 65535;}
 8011592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011594:	2b0e      	cmp	r3, #14
 8011596:	dd03      	ble.n	80115a0 <search_AroundDijkstraCount+0x1c>
 8011598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801159c:	82fb      	strh	r3, [r7, #22]
 801159e:	e00a      	b.n	80115b6 <search_AroundDijkstraCount+0x32>
	else {north_count = Dijkstra.column_count[x][y];}
 80115a0:	4944      	ldr	r1, [pc, #272]	; (80116b4 <search_AroundDijkstraCount+0x130>)
 80115a2:	6a3a      	ldr	r2, [r7, #32]
 80115a4:	4613      	mov	r3, r2
 80115a6:	011b      	lsls	r3, r3, #4
 80115a8:	1a9b      	subs	r3, r3, r2
 80115aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115ac:	4413      	add	r3, r2
 80115ae:	33f0      	adds	r3, #240	; 0xf0
 80115b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80115b4:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = 65535;}
 80115b6:	6a3b      	ldr	r3, [r7, #32]
 80115b8:	2b0e      	cmp	r3, #14
 80115ba:	dd03      	ble.n	80115c4 <search_AroundDijkstraCount+0x40>
 80115bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115c0:	82bb      	strh	r3, [r7, #20]
 80115c2:	e009      	b.n	80115d8 <search_AroundDijkstraCount+0x54>
	else {east_count = Dijkstra.row_count[y][x];}
 80115c4:	493b      	ldr	r1, [pc, #236]	; (80116b4 <search_AroundDijkstraCount+0x130>)
 80115c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115c8:	4613      	mov	r3, r2
 80115ca:	011b      	lsls	r3, r3, #4
 80115cc:	1a9b      	subs	r3, r3, r2
 80115ce:	6a3a      	ldr	r2, [r7, #32]
 80115d0:	4413      	add	r3, r2
 80115d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80115d6:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = 65535;}
 80115d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115da:	2b00      	cmp	r3, #0
 80115dc:	dc03      	bgt.n	80115e6 <search_AroundDijkstraCount+0x62>
 80115de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115e2:	827b      	strh	r3, [r7, #18]
 80115e4:	e00b      	b.n	80115fe <search_AroundDijkstraCount+0x7a>
	else {south_count = Dijkstra.column_count[x][y-1];}
 80115e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e8:	1e59      	subs	r1, r3, #1
 80115ea:	4832      	ldr	r0, [pc, #200]	; (80116b4 <search_AroundDijkstraCount+0x130>)
 80115ec:	6a3a      	ldr	r2, [r7, #32]
 80115ee:	4613      	mov	r3, r2
 80115f0:	011b      	lsls	r3, r3, #4
 80115f2:	1a9b      	subs	r3, r3, r2
 80115f4:	440b      	add	r3, r1
 80115f6:	33f0      	adds	r3, #240	; 0xf0
 80115f8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80115fc:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = 65535;}
 80115fe:	6a3b      	ldr	r3, [r7, #32]
 8011600:	2b00      	cmp	r3, #0
 8011602:	dc03      	bgt.n	801160c <search_AroundDijkstraCount+0x88>
 8011604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011608:	823b      	strh	r3, [r7, #16]
 801160a:	e00a      	b.n	8011622 <search_AroundDijkstraCount+0x9e>
	else {west_count = Dijkstra.row_count[y][x-1];}
 801160c:	6a3b      	ldr	r3, [r7, #32]
 801160e:	1e59      	subs	r1, r3, #1
 8011610:	4828      	ldr	r0, [pc, #160]	; (80116b4 <search_AroundDijkstraCount+0x130>)
 8011612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011614:	4613      	mov	r3, r2
 8011616:	011b      	lsls	r3, r3, #4
 8011618:	1a9b      	subs	r3, r3, r2
 801161a:	440b      	add	r3, r1
 801161c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011620:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 8011622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011624:	3b01      	subs	r3, #1
 8011626:	2b03      	cmp	r3, #3
 8011628:	d83e      	bhi.n	80116a8 <search_AroundDijkstraCount+0x124>
 801162a:	a201      	add	r2, pc, #4	; (adr r2, 8011630 <search_AroundDijkstraCount+0xac>)
 801162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011630:	08011641 	.word	0x08011641
 8011634:	0801165b 	.word	0x0801165b
 8011638:	08011675 	.word	0x08011675
 801163c:	0801168f 	.word	0x0801168f
	case 1:
		*front_count = north_count;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	8afa      	ldrh	r2, [r7, #22]
 8011644:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	8aba      	ldrh	r2, [r7, #20]
 801164a:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	8a7a      	ldrh	r2, [r7, #18]
 8011650:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	8a3a      	ldrh	r2, [r7, #16]
 8011656:	801a      	strh	r2, [r3, #0]
		break;
 8011658:	e026      	b.n	80116a8 <search_AroundDijkstraCount+0x124>
	case 2:
		*front_count = east_count;
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	8aba      	ldrh	r2, [r7, #20]
 801165e:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8011660:	68bb      	ldr	r3, [r7, #8]
 8011662:	8a7a      	ldrh	r2, [r7, #18]
 8011664:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	8a3a      	ldrh	r2, [r7, #16]
 801166a:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	8afa      	ldrh	r2, [r7, #22]
 8011670:	801a      	strh	r2, [r3, #0]
		break;
 8011672:	e019      	b.n	80116a8 <search_AroundDijkstraCount+0x124>
	case 3:
		*front_count = south_count;
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	8a7a      	ldrh	r2, [r7, #18]
 8011678:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	8a3a      	ldrh	r2, [r7, #16]
 801167e:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	8afa      	ldrh	r2, [r7, #22]
 8011684:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	8aba      	ldrh	r2, [r7, #20]
 801168a:	801a      	strh	r2, [r3, #0]
		break;
 801168c:	e00c      	b.n	80116a8 <search_AroundDijkstraCount+0x124>
	case 4:
		*front_count = west_count;
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	8a3a      	ldrh	r2, [r7, #16]
 8011692:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	8afa      	ldrh	r2, [r7, #22]
 8011698:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	8aba      	ldrh	r2, [r7, #20]
 801169e:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	8a7a      	ldrh	r2, [r7, #18]
 80116a4:	801a      	strh	r2, [r3, #0]
		break;
 80116a6:	bf00      	nop

	}


}
 80116a8:	bf00      	nop
 80116aa:	371c      	adds	r7, #28
 80116ac:	46bd      	mov	sp, r7
 80116ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b2:	4770      	bx	lr
 80116b4:	20000f30 	.word	0x20000f30

080116b8 <create_DijkstraMap>:




void create_DijkstraMap(void){
 80116b8:	b590      	push	{r4, r7, lr}
 80116ba:	f5ad 4d9d 	sub.w	sp, sp, #20096	; 0x4e80
 80116be:	b081      	sub	sp, #4
 80116c0:	af00      	add	r7, sp, #0
	STACK_T stack_x;
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_direction;//向き(0北　1北東　2東　3南東　4南　5南西　6西　7北西　8エラー)
	STACK_T stack_cost;//引かれるコスト
	int16_t VerticalCost=VERTICALCOST;
 80116c2:	23b4      	movs	r3, #180	; 0xb4
 80116c4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80116c8:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80116cc:	8013      	strh	r3, [r2, #0]
	int16_t DiagonalCost=DIAGONALCOST;
 80116ce:	237f      	movs	r3, #127	; 0x7f
 80116d0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80116d4:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80116d8:	8013      	strh	r3, [r2, #0]
	int16_t discount_v[V_NUM_MAX]={180,118,100,91,90};
 80116da:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80116de:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80116e2:	4a1d      	ldr	r2, [pc, #116]	; (8011758 <create_DijkstraMap+0xa0>)
 80116e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80116e6:	c303      	stmia	r3!, {r0, r1}
 80116e8:	801a      	strh	r2, [r3, #0]
	int16_t discount_d[D_NUM_MAX]={127,91,79,71,65,64};
 80116ea:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80116ee:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80116f2:	4a1a      	ldr	r2, [pc, #104]	; (801175c <create_DijkstraMap+0xa4>)
 80116f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80116f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int16_t dis_cost_in;
	//printf("%d,%d,%d,%d,%d\n",discount_v[0],discount_v[1],discount_v[2],discount_v[3],discount_v[4]);
	//printf("%d,%d,%d,%d,%d,%d\n",discount_d[0],discount_d[1],discount_d[2],discount_d[3],discount_d[4],discount_d[5]);
	initStack_walk(&stack_x);
 80116fa:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80116fe:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011702:	4618      	mov	r0, r3
 8011704:	f003 fb1a 	bl	8014d3c <initStack_walk>
	initStack_walk(&stack_y);
 8011708:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801170c:	f103 0320 	add.w	r3, r3, #32
 8011710:	3b0c      	subs	r3, #12
 8011712:	4618      	mov	r0, r3
 8011714:	f003 fb12 	bl	8014d3c <initStack_walk>
	initStack_walk(&stack_matrix);
 8011718:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801171c:	3b14      	subs	r3, #20
 801171e:	4618      	mov	r0, r3
 8011720:	f003 fb0c 	bl	8014d3c <initStack_walk>
	initStack_walk(&stack_direction);
 8011724:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011728:	3b3c      	subs	r3, #60	; 0x3c
 801172a:	4618      	mov	r0, r3
 801172c:	f003 fb06 	bl	8014d3c <initStack_walk>
	initStack_walk(&stack_cost);
 8011730:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011734:	3b64      	subs	r3, #100	; 0x64
 8011736:	4618      	mov	r0, r3
 8011738:	f003 fb00 	bl	8014d3c <initStack_walk>
	for(int i=0;i<=15;i++){
 801173c:	2300      	movs	r3, #0
 801173e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011742:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8011746:	6013      	str	r3, [r2, #0]
 8011748:	e04e      	b.n	80117e8 <create_DijkstraMap+0x130>
		for(int j=0;j<=14;j++){
 801174a:	2300      	movs	r3, #0
 801174c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011750:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8011754:	6013      	str	r3, [r2, #0]
 8011756:	e035      	b.n	80117c4 <create_DijkstraMap+0x10c>
 8011758:	080234fc 	.word	0x080234fc
 801175c:	08023508 	.word	0x08023508
			Dijkstra.column_count[i][j]=65535;
 8011760:	49c6      	ldr	r1, [pc, #792]	; (8011a7c <create_DijkstraMap+0x3c4>)
 8011762:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011766:	f103 0374 	add.w	r3, r3, #116	; 0x74
 801176a:	681a      	ldr	r2, [r3, #0]
 801176c:	4613      	mov	r3, r2
 801176e:	011b      	lsls	r3, r3, #4
 8011770:	1a9b      	subs	r3, r3, r2
 8011772:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011776:	f102 0270 	add.w	r2, r2, #112	; 0x70
 801177a:	6812      	ldr	r2, [r2, #0]
 801177c:	4413      	add	r3, r2
 801177e:	33f0      	adds	r3, #240	; 0xf0
 8011780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011784:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			Dijkstra.row_count[i][j]=65535;
 8011788:	49bc      	ldr	r1, [pc, #752]	; (8011a7c <create_DijkstraMap+0x3c4>)
 801178a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801178e:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	4613      	mov	r3, r2
 8011796:	011b      	lsls	r3, r3, #4
 8011798:	1a9b      	subs	r3, r3, r2
 801179a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801179e:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80117a2:	6812      	ldr	r2, [r2, #0]
 80117a4:	4413      	add	r3, r2
 80117a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117aa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j=0;j<=14;j++){
 80117ae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80117b2:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	3301      	adds	r3, #1
 80117ba:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80117be:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80117c2:	6013      	str	r3, [r2, #0]
 80117c4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80117c8:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	2b0e      	cmp	r3, #14
 80117d0:	ddc6      	ble.n	8011760 <create_DijkstraMap+0xa8>
	for(int i=0;i<=15;i++){
 80117d2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80117d6:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	3301      	adds	r3, #1
 80117de:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80117e2:	f102 0274 	add.w	r2, r2, #116	; 0x74
 80117e6:	6013      	str	r3, [r2, #0]
 80117e8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80117ec:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	2b0f      	cmp	r3, #15
 80117f4:	dda9      	ble.n	801174a <create_DijkstraMap+0x92>
		}
	}
	Dijkstra.column_count[GOAL_X][GOAL_Y]=0;
 80117f6:	4ba1      	ldr	r3, [pc, #644]	; (8011a7c <create_DijkstraMap+0x3c4>)
 80117f8:	2200      	movs	r2, #0
 80117fa:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
	Dijkstra.column_count[GOAL_X+1][GOAL_Y]=0;
 80117fe:	4b9f      	ldr	r3, [pc, #636]	; (8011a7c <create_DijkstraMap+0x3c4>)
 8011800:	2200      	movs	r2, #0
 8011802:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
	Dijkstra.row_count[GOAL_Y][GOAL_X]=0;
 8011806:	4b9d      	ldr	r3, [pc, #628]	; (8011a7c <create_DijkstraMap+0x3c4>)
 8011808:	2200      	movs	r2, #0
 801180a:	805a      	strh	r2, [r3, #2]
	Dijkstra.row_count[GOAL_Y+1][GOAL_X]=0;
 801180c:	4b9b      	ldr	r3, [pc, #620]	; (8011a7c <create_DijkstraMap+0x3c4>)
 801180e:	2200      	movs	r2, #0
 8011810:	841a      	strh	r2, [r3, #32]
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8011812:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011816:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801181a:	2101      	movs	r1, #1
 801181c:	4618      	mov	r0, r3
 801181e:	f003 fa9d 	bl	8014d5c <pushStack_walk>
 8011822:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011826:	f103 0320 	add.w	r3, r3, #32
 801182a:	3b0c      	subs	r3, #12
 801182c:	2100      	movs	r1, #0
 801182e:	4618      	mov	r0, r3
 8011830:	f003 fa94 	bl	8014d5c <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011834:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011838:	3b14      	subs	r3, #20
 801183a:	2100      	movs	r1, #0
 801183c:	4618      	mov	r0, r3
 801183e:	f003 fa8d 	bl	8014d5c <pushStack_walk>
 8011842:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011846:	3b3c      	subs	r3, #60	; 0x3c
 8011848:	2108      	movs	r1, #8
 801184a:	4618      	mov	r0, r3
 801184c:	f003 fa86 	bl	8014d5c <pushStack_walk>
 8011850:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011854:	3b64      	subs	r3, #100	; 0x64
 8011856:	2100      	movs	r1, #0
 8011858:	4618      	mov	r0, r3
 801185a:	f003 fa7f 	bl	8014d5c <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X+1);pushStack_walk(&stack_y,GOAL_Y);
 801185e:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011862:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011866:	2102      	movs	r1, #2
 8011868:	4618      	mov	r0, r3
 801186a:	f003 fa77 	bl	8014d5c <pushStack_walk>
 801186e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011872:	f103 0320 	add.w	r3, r3, #32
 8011876:	3b0c      	subs	r3, #12
 8011878:	2100      	movs	r1, #0
 801187a:	4618      	mov	r0, r3
 801187c:	f003 fa6e 	bl	8014d5c <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011880:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011884:	3b14      	subs	r3, #20
 8011886:	2100      	movs	r1, #0
 8011888:	4618      	mov	r0, r3
 801188a:	f003 fa67 	bl	8014d5c <pushStack_walk>
 801188e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011892:	3b3c      	subs	r3, #60	; 0x3c
 8011894:	2108      	movs	r1, #8
 8011896:	4618      	mov	r0, r3
 8011898:	f003 fa60 	bl	8014d5c <pushStack_walk>
 801189c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80118a0:	3b64      	subs	r3, #100	; 0x64
 80118a2:	2100      	movs	r1, #0
 80118a4:	4618      	mov	r0, r3
 80118a6:	f003 fa59 	bl	8014d5c <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 80118aa:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80118ae:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80118b2:	2101      	movs	r1, #1
 80118b4:	4618      	mov	r0, r3
 80118b6:	f003 fa51 	bl	8014d5c <pushStack_walk>
 80118ba:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80118be:	f103 0320 	add.w	r3, r3, #32
 80118c2:	3b0c      	subs	r3, #12
 80118c4:	2100      	movs	r1, #0
 80118c6:	4618      	mov	r0, r3
 80118c8:	f003 fa48 	bl	8014d5c <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80118cc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80118d0:	3b14      	subs	r3, #20
 80118d2:	2101      	movs	r1, #1
 80118d4:	4618      	mov	r0, r3
 80118d6:	f003 fa41 	bl	8014d5c <pushStack_walk>
 80118da:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80118de:	3b3c      	subs	r3, #60	; 0x3c
 80118e0:	2108      	movs	r1, #8
 80118e2:	4618      	mov	r0, r3
 80118e4:	f003 fa3a 	bl	8014d5c <pushStack_walk>
 80118e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80118ec:	3b64      	subs	r3, #100	; 0x64
 80118ee:	2100      	movs	r1, #0
 80118f0:	4618      	mov	r0, r3
 80118f2:	f003 fa33 	bl	8014d5c <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y+1);
 80118f6:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80118fa:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80118fe:	2101      	movs	r1, #1
 8011900:	4618      	mov	r0, r3
 8011902:	f003 fa2b 	bl	8014d5c <pushStack_walk>
 8011906:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801190a:	f103 0320 	add.w	r3, r3, #32
 801190e:	3b0c      	subs	r3, #12
 8011910:	2101      	movs	r1, #1
 8011912:	4618      	mov	r0, r3
 8011914:	f003 fa22 	bl	8014d5c <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011918:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801191c:	3b14      	subs	r3, #20
 801191e:	2101      	movs	r1, #1
 8011920:	4618      	mov	r0, r3
 8011922:	f003 fa1b 	bl	8014d5c <pushStack_walk>
 8011926:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801192a:	3b3c      	subs	r3, #60	; 0x3c
 801192c:	2108      	movs	r1, #8
 801192e:	4618      	mov	r0, r3
 8011930:	f003 fa14 	bl	8014d5c <pushStack_walk>
 8011934:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011938:	3b64      	subs	r3, #100	; 0x64
 801193a:	2100      	movs	r1, #0
 801193c:	4618      	mov	r0, r3
 801193e:	f003 fa0d 	bl	8014d5c <pushStack_walk>



	unsigned short count_number = 1;
 8011942:	2301      	movs	r3, #1
 8011944:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011948:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 801194c:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate,Row_or_Column,Direction,dis_cost;
	while (1) {

		Xcoordinate = popStack_walk(&stack_x);
 801194e:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011952:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011956:	4618      	mov	r0, r3
 8011958:	f003 fa2a 	bl	8014db0 <popStack_walk>
 801195c:	4603      	mov	r3, r0
 801195e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011962:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8011966:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8011968:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801196c:	f103 0320 	add.w	r3, r3, #32
 8011970:	3b0c      	subs	r3, #12
 8011972:	4618      	mov	r0, r3
 8011974:	f003 fa1c 	bl	8014db0 <popStack_walk>
 8011978:	4603      	mov	r3, r0
 801197a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801197e:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8011982:	8013      	strh	r3, [r2, #0]
		Row_or_Column = popStack_walk(&stack_matrix);
 8011984:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011988:	3b14      	subs	r3, #20
 801198a:	4618      	mov	r0, r3
 801198c:	f003 fa10 	bl	8014db0 <popStack_walk>
 8011990:	4603      	mov	r3, r0
 8011992:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011996:	f102 0268 	add.w	r2, r2, #104	; 0x68
 801199a:	8013      	strh	r3, [r2, #0]
		Direction = popStack_walk(&stack_direction);
 801199c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80119a0:	3b3c      	subs	r3, #60	; 0x3c
 80119a2:	4618      	mov	r0, r3
 80119a4:	f003 fa04 	bl	8014db0 <popStack_walk>
 80119a8:	4603      	mov	r3, r0
 80119aa:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80119ae:	f102 0266 	add.w	r2, r2, #102	; 0x66
 80119b2:	8013      	strh	r3, [r2, #0]
		dis_cost = popStack_walk(&stack_cost);
 80119b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80119b8:	3b64      	subs	r3, #100	; 0x64
 80119ba:	4618      	mov	r0, r3
 80119bc:	f003 f9f8 	bl	8014db0 <popStack_walk>
 80119c0:	4603      	mov	r3, r0
 80119c2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80119c6:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80119ca:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
		//printf("cost_num %d\n",dis_cost);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 80119cc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80119d0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80119d4:	881b      	ldrh	r3, [r3, #0]
 80119d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119da:	4293      	cmp	r3, r2
 80119dc:	f001 83a9 	beq.w	8013132 <create_DijkstraMap+0x1a7a>
 80119e0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80119e4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80119e8:	881b      	ldrh	r3, [r3, #0]
 80119ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119ee:	4293      	cmp	r3, r2
 80119f0:	f001 839f 	beq.w	8013132 <create_DijkstraMap+0x1a7a>
			//printf("stack_end\n");
			break;
		}
		if(Row_or_Column==COLUMN){
 80119f4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80119f8:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80119fc:	881b      	ldrh	r3, [r3, #0]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	f040 85c5 	bne.w	801258e <create_DijkstraMap+0xed6>
			if(Ycoordinate <= 13){
 8011a04:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a08:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011a0c:	881b      	ldrh	r3, [r3, #0]
 8011a0e:	2b0d      	cmp	r3, #13
 8011a10:	f200 80f2 	bhi.w	8011bf8 <create_DijkstraMap+0x540>
				if(Direction==SLANT_NORTH){
 8011a14:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a18:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011a1c:	881b      	ldrh	r3, [r3, #0]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d12e      	bne.n	8011a80 <create_DijkstraMap+0x3c8>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8011a22:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a26:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011a2a:	881b      	ldrh	r3, [r3, #0]
 8011a2c:	3301      	adds	r3, #1
 8011a2e:	b29b      	uxth	r3, r3
 8011a30:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011a34:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011a38:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8011a3a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a3e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a46:	2b04      	cmp	r3, #4
 8011a48:	dd05      	ble.n	8011a56 <create_DijkstraMap+0x39e>
 8011a4a:	2304      	movs	r3, #4
 8011a4c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011a50:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011a54:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 8011a56:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a5a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011a5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011a62:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011a66:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011a6a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011a6e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011a72:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011a76:	8013      	strh	r3, [r2, #0]
 8011a78:	e012      	b.n	8011aa0 <create_DijkstraMap+0x3e8>
 8011a7a:	bf00      	nop
 8011a7c:	20000f30 	.word	0x20000f30
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8011a80:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011a84:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011a88:	881b      	ldrh	r3, [r3, #0]
 8011a8a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011a8e:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011a92:	8013      	strh	r3, [r2, #0]
 8011a94:	2300      	movs	r3, #0
 8011a96:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011a9a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011a9e:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate+1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate+1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011aa0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011aa4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011aa8:	881b      	ldrh	r3, [r3, #0]
 8011aaa:	3301      	adds	r3, #1
 8011aac:	4a70      	ldr	r2, [pc, #448]	; (8011c70 <create_DijkstraMap+0x5b8>)
 8011aae:	330c      	adds	r3, #12
 8011ab0:	005b      	lsls	r3, r3, #1
 8011ab2:	4413      	add	r3, r2
 8011ab4:	88db      	ldrh	r3, [r3, #6]
 8011ab6:	461a      	mov	r2, r3
 8011ab8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011abc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011ac0:	881b      	ldrh	r3, [r3, #0]
 8011ac2:	fa42 f303 	asr.w	r3, r2, r3
 8011ac6:	f003 0301 	and.w	r3, r3, #1
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	f040 8094 	bne.w	8011bf8 <create_DijkstraMap+0x540>
 8011ad0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ad4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011ad8:	881a      	ldrh	r2, [r3, #0]
 8011ada:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ade:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011ae2:	881b      	ldrh	r3, [r3, #0]
 8011ae4:	1c59      	adds	r1, r3, #1
 8011ae6:	4863      	ldr	r0, [pc, #396]	; (8011c74 <create_DijkstraMap+0x5bc>)
 8011ae8:	4613      	mov	r3, r2
 8011aea:	011b      	lsls	r3, r3, #4
 8011aec:	1a9b      	subs	r3, r3, r2
 8011aee:	440b      	add	r3, r1
 8011af0:	33f0      	adds	r3, #240	; 0xf0
 8011af2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011af6:	461c      	mov	r4, r3
 8011af8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011afc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011b00:	881a      	ldrh	r2, [r3, #0]
 8011b02:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b06:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011b0a:	8819      	ldrh	r1, [r3, #0]
 8011b0c:	4859      	ldr	r0, [pc, #356]	; (8011c74 <create_DijkstraMap+0x5bc>)
 8011b0e:	4613      	mov	r3, r2
 8011b10:	011b      	lsls	r3, r3, #4
 8011b12:	1a9b      	subs	r3, r3, r2
 8011b14:	440b      	add	r3, r1
 8011b16:	33f0      	adds	r3, #240	; 0xf0
 8011b18:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011b1c:	461a      	mov	r2, r3
 8011b1e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b22:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b2a:	4413      	add	r3, r2
 8011b2c:	429c      	cmp	r4, r3
 8011b2e:	dd63      	ble.n	8011bf8 <create_DijkstraMap+0x540>
					Dijkstra.column_count[Xcoordinate][Ycoordinate+1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011b30:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b34:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011b38:	881a      	ldrh	r2, [r3, #0]
 8011b3a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b3e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011b42:	8819      	ldrh	r1, [r3, #0]
 8011b44:	484b      	ldr	r0, [pc, #300]	; (8011c74 <create_DijkstraMap+0x5bc>)
 8011b46:	4613      	mov	r3, r2
 8011b48:	011b      	lsls	r3, r3, #4
 8011b4a:	1a9b      	subs	r3, r3, r2
 8011b4c:	440b      	add	r3, r1
 8011b4e:	33f0      	adds	r3, #240	; 0xf0
 8011b50:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011b54:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b58:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011b5c:	881b      	ldrh	r3, [r3, #0]
 8011b5e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011b62:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8011b66:	8812      	ldrh	r2, [r2, #0]
 8011b68:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011b6c:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8011b70:	8809      	ldrh	r1, [r1, #0]
 8011b72:	3101      	adds	r1, #1
 8011b74:	4403      	add	r3, r0
 8011b76:	b29c      	uxth	r4, r3
 8011b78:	483e      	ldr	r0, [pc, #248]	; (8011c74 <create_DijkstraMap+0x5bc>)
 8011b7a:	4613      	mov	r3, r2
 8011b7c:	011b      	lsls	r3, r3, #4
 8011b7e:	1a9b      	subs	r3, r3, r2
 8011b80:	440b      	add	r3, r1
 8011b82:	33f0      	adds	r3, #240	; 0xf0
 8011b84:	4622      	mov	r2, r4
 8011b86:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011b8a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b8e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011b92:	881a      	ldrh	r2, [r3, #0]
 8011b94:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011b98:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011b9c:	4611      	mov	r1, r2
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f003 f8dc 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate + 1);
 8011ba4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ba8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011bac:	881b      	ldrh	r3, [r3, #0]
 8011bae:	3301      	adds	r3, #1
 8011bb0:	b29a      	uxth	r2, r3
 8011bb2:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011bb6:	f103 0320 	add.w	r3, r3, #32
 8011bba:	3b0c      	subs	r3, #12
 8011bbc:	4611      	mov	r1, r2
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f003 f8cc 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011bc4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011bc8:	3b14      	subs	r3, #20
 8011bca:	2100      	movs	r1, #0
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f003 f8c5 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH);
 8011bd2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011bd6:	3b3c      	subs	r3, #60	; 0x3c
 8011bd8:	2100      	movs	r1, #0
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f003 f8be 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011be0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011be4:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011be8:	881a      	ldrh	r2, [r3, #0]
 8011bea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011bee:	3b64      	subs	r3, #100	; 0x64
 8011bf0:	4611      	mov	r1, r2
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f003 f8b2 	bl	8014d5c <pushStack_walk>
				}
			}
			if (Ycoordinate >= 1) {
 8011bf8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011bfc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011c00:	881b      	ldrh	r3, [r3, #0]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	f000 80f4 	beq.w	8011df0 <create_DijkstraMap+0x738>
				if(Direction==SLANT_SOUTH){
 8011c08:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c0c:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011c10:	881b      	ldrh	r3, [r3, #0]
 8011c12:	2b04      	cmp	r3, #4
 8011c14:	d130      	bne.n	8011c78 <create_DijkstraMap+0x5c0>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8011c16:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c1a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011c1e:	881b      	ldrh	r3, [r3, #0]
 8011c20:	3301      	adds	r3, #1
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011c28:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011c2c:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8011c2e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c32:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c3a:	2b04      	cmp	r3, #4
 8011c3c:	dd05      	ble.n	8011c4a <create_DijkstraMap+0x592>
 8011c3e:	2304      	movs	r3, #4
 8011c40:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011c44:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011c48:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 8011c4a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c4e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011c52:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011c56:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011c5a:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011c5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011c62:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011c66:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011c6a:	8013      	strh	r3, [r2, #0]
 8011c6c:	e014      	b.n	8011c98 <create_DijkstraMap+0x5e0>
 8011c6e:	bf00      	nop
 8011c70:	20000c3c 	.word	0x20000c3c
 8011c74:	20000f30 	.word	0x20000f30
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8011c78:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011c7c:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011c80:	881b      	ldrh	r3, [r3, #0]
 8011c82:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011c86:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011c8a:	8013      	strh	r3, [r2, #0]
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011c92:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011c96:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011c98:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c9c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011ca0:	881b      	ldrh	r3, [r3, #0]
 8011ca2:	3b01      	subs	r3, #1
 8011ca4:	4a70      	ldr	r2, [pc, #448]	; (8011e68 <create_DijkstraMap+0x7b0>)
 8011ca6:	330c      	adds	r3, #12
 8011ca8:	005b      	lsls	r3, r3, #1
 8011caa:	4413      	add	r3, r2
 8011cac:	88db      	ldrh	r3, [r3, #6]
 8011cae:	461a      	mov	r2, r3
 8011cb0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011cb4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011cb8:	881b      	ldrh	r3, [r3, #0]
 8011cba:	fa42 f303 	asr.w	r3, r2, r3
 8011cbe:	f003 0301 	and.w	r3, r3, #1
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	f040 8094 	bne.w	8011df0 <create_DijkstraMap+0x738>
 8011cc8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ccc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011cd0:	881a      	ldrh	r2, [r3, #0]
 8011cd2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011cd6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011cda:	881b      	ldrh	r3, [r3, #0]
 8011cdc:	1e59      	subs	r1, r3, #1
 8011cde:	4863      	ldr	r0, [pc, #396]	; (8011e6c <create_DijkstraMap+0x7b4>)
 8011ce0:	4613      	mov	r3, r2
 8011ce2:	011b      	lsls	r3, r3, #4
 8011ce4:	1a9b      	subs	r3, r3, r2
 8011ce6:	440b      	add	r3, r1
 8011ce8:	33f0      	adds	r3, #240	; 0xf0
 8011cea:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011cee:	461c      	mov	r4, r3
 8011cf0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011cf4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011cf8:	881a      	ldrh	r2, [r3, #0]
 8011cfa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011cfe:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011d02:	8819      	ldrh	r1, [r3, #0]
 8011d04:	4859      	ldr	r0, [pc, #356]	; (8011e6c <create_DijkstraMap+0x7b4>)
 8011d06:	4613      	mov	r3, r2
 8011d08:	011b      	lsls	r3, r3, #4
 8011d0a:	1a9b      	subs	r3, r3, r2
 8011d0c:	440b      	add	r3, r1
 8011d0e:	33f0      	adds	r3, #240	; 0xf0
 8011d10:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011d14:	461a      	mov	r2, r3
 8011d16:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d1a:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d22:	4413      	add	r3, r2
 8011d24:	429c      	cmp	r4, r3
 8011d26:	dd63      	ble.n	8011df0 <create_DijkstraMap+0x738>
					Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011d28:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d2c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011d30:	881a      	ldrh	r2, [r3, #0]
 8011d32:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d36:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011d3a:	8819      	ldrh	r1, [r3, #0]
 8011d3c:	484b      	ldr	r0, [pc, #300]	; (8011e6c <create_DijkstraMap+0x7b4>)
 8011d3e:	4613      	mov	r3, r2
 8011d40:	011b      	lsls	r3, r3, #4
 8011d42:	1a9b      	subs	r3, r3, r2
 8011d44:	440b      	add	r3, r1
 8011d46:	33f0      	adds	r3, #240	; 0xf0
 8011d48:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011d4c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d50:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011d54:	881b      	ldrh	r3, [r3, #0]
 8011d56:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011d5a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8011d5e:	8812      	ldrh	r2, [r2, #0]
 8011d60:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011d64:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8011d68:	8809      	ldrh	r1, [r1, #0]
 8011d6a:	3901      	subs	r1, #1
 8011d6c:	4403      	add	r3, r0
 8011d6e:	b29c      	uxth	r4, r3
 8011d70:	483e      	ldr	r0, [pc, #248]	; (8011e6c <create_DijkstraMap+0x7b4>)
 8011d72:	4613      	mov	r3, r2
 8011d74:	011b      	lsls	r3, r3, #4
 8011d76:	1a9b      	subs	r3, r3, r2
 8011d78:	440b      	add	r3, r1
 8011d7a:	33f0      	adds	r3, #240	; 0xf0
 8011d7c:	4622      	mov	r2, r4
 8011d7e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011d82:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d86:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011d8a:	881a      	ldrh	r2, [r3, #0]
 8011d8c:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011d90:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011d94:	4611      	mov	r1, r2
 8011d96:	4618      	mov	r0, r3
 8011d98:	f002 ffe0 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate - 1);
 8011d9c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011da0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011da4:	881b      	ldrh	r3, [r3, #0]
 8011da6:	3b01      	subs	r3, #1
 8011da8:	b29a      	uxth	r2, r3
 8011daa:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011dae:	f103 0320 	add.w	r3, r3, #32
 8011db2:	3b0c      	subs	r3, #12
 8011db4:	4611      	mov	r1, r2
 8011db6:	4618      	mov	r0, r3
 8011db8:	f002 ffd0 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011dbc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011dc0:	3b14      	subs	r3, #20
 8011dc2:	2100      	movs	r1, #0
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f002 ffc9 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH);
 8011dca:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011dce:	3b3c      	subs	r3, #60	; 0x3c
 8011dd0:	2104      	movs	r1, #4
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f002 ffc2 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011dd8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ddc:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011de0:	881a      	ldrh	r2, [r3, #0]
 8011de2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011de6:	3b64      	subs	r3, #100	; 0x64
 8011de8:	4611      	mov	r1, r2
 8011dea:	4618      	mov	r0, r3
 8011dec:	f002 ffb6 	bl	8014d5c <pushStack_walk>
				}
			}
			if (Xcoordinate <= 14) {
 8011df0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011df4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011df8:	881b      	ldrh	r3, [r3, #0]
 8011dfa:	2b0e      	cmp	r3, #14
 8011dfc:	f200 81da 	bhi.w	80121b4 <create_DijkstraMap+0xafc>
				if(Direction==SLANT_SOUTH_EAST){
 8011e00:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e04:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011e08:	881b      	ldrh	r3, [r3, #0]
 8011e0a:	2b03      	cmp	r3, #3
 8011e0c:	d130      	bne.n	8011e70 <create_DijkstraMap+0x7b8>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011e0e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e12:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011e16:	881b      	ldrh	r3, [r3, #0]
 8011e18:	3301      	adds	r3, #1
 8011e1a:	b29b      	uxth	r3, r3
 8011e1c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011e20:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011e24:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011e26:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e2a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e32:	2b05      	cmp	r3, #5
 8011e34:	dd05      	ble.n	8011e42 <create_DijkstraMap+0x78a>
 8011e36:	2305      	movs	r3, #5
 8011e38:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011e3c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011e40:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011e42:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e46:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011e4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011e4e:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011e52:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011e56:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011e5a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011e5e:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011e62:	8013      	strh	r3, [r2, #0]
 8011e64:	e014      	b.n	8011e90 <create_DijkstraMap+0x7d8>
 8011e66:	bf00      	nop
 8011e68:	20000c3c 	.word	0x20000c3c
 8011e6c:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8011e70:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011e74:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011e78:	881b      	ldrh	r3, [r3, #0]
 8011e7a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011e7e:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011e82:	8013      	strh	r3, [r2, #0]
 8011e84:	2300      	movs	r3, #0
 8011e86:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011e8a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011e8e:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8011e90:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e94:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011e98:	881b      	ldrh	r3, [r3, #0]
 8011e9a:	4a68      	ldr	r2, [pc, #416]	; (801203c <create_DijkstraMap+0x984>)
 8011e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ea0:	461a      	mov	r2, r3
 8011ea2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ea6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011eaa:	881b      	ldrh	r3, [r3, #0]
 8011eac:	fa42 f303 	asr.w	r3, r2, r3
 8011eb0:	f003 0301 	and.w	r3, r3, #1
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	f040 808e 	bne.w	8011fd6 <create_DijkstraMap+0x91e>
 8011eba:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ebe:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011ec2:	881a      	ldrh	r2, [r3, #0]
 8011ec4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ec8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011ecc:	8819      	ldrh	r1, [r3, #0]
 8011ece:	485c      	ldr	r0, [pc, #368]	; (8012040 <create_DijkstraMap+0x988>)
 8011ed0:	4613      	mov	r3, r2
 8011ed2:	011b      	lsls	r3, r3, #4
 8011ed4:	1a9b      	subs	r3, r3, r2
 8011ed6:	440b      	add	r3, r1
 8011ed8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011edc:	461c      	mov	r4, r3
 8011ede:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ee2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011ee6:	881a      	ldrh	r2, [r3, #0]
 8011ee8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011eec:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011ef0:	8819      	ldrh	r1, [r3, #0]
 8011ef2:	4853      	ldr	r0, [pc, #332]	; (8012040 <create_DijkstraMap+0x988>)
 8011ef4:	4613      	mov	r3, r2
 8011ef6:	011b      	lsls	r3, r3, #4
 8011ef8:	1a9b      	subs	r3, r3, r2
 8011efa:	440b      	add	r3, r1
 8011efc:	33f0      	adds	r3, #240	; 0xf0
 8011efe:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011f02:	461a      	mov	r2, r3
 8011f04:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f08:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f10:	4413      	add	r3, r2
 8011f12:	429c      	cmp	r4, r3
 8011f14:	dd5f      	ble.n	8011fd6 <create_DijkstraMap+0x91e>
					Dijkstra.row_count[Ycoordinate][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8011f16:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f1a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011f1e:	881a      	ldrh	r2, [r3, #0]
 8011f20:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f24:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011f28:	8819      	ldrh	r1, [r3, #0]
 8011f2a:	4845      	ldr	r0, [pc, #276]	; (8012040 <create_DijkstraMap+0x988>)
 8011f2c:	4613      	mov	r3, r2
 8011f2e:	011b      	lsls	r3, r3, #4
 8011f30:	1a9b      	subs	r3, r3, r2
 8011f32:	440b      	add	r3, r1
 8011f34:	33f0      	adds	r3, #240	; 0xf0
 8011f36:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011f3a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f3e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011f42:	881b      	ldrh	r3, [r3, #0]
 8011f44:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f48:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8011f4c:	8812      	ldrh	r2, [r2, #0]
 8011f4e:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011f52:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8011f56:	8809      	ldrh	r1, [r1, #0]
 8011f58:	4403      	add	r3, r0
 8011f5a:	b29c      	uxth	r4, r3
 8011f5c:	4838      	ldr	r0, [pc, #224]	; (8012040 <create_DijkstraMap+0x988>)
 8011f5e:	4613      	mov	r3, r2
 8011f60:	011b      	lsls	r3, r3, #4
 8011f62:	1a9b      	subs	r3, r3, r2
 8011f64:	440b      	add	r3, r1
 8011f66:	4622      	mov	r2, r4
 8011f68:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011f6c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f70:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011f74:	881a      	ldrh	r2, [r3, #0]
 8011f76:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011f7a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011f7e:	4611      	mov	r1, r2
 8011f80:	4618      	mov	r0, r3
 8011f82:	f002 feeb 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8011f86:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f8a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011f8e:	881a      	ldrh	r2, [r3, #0]
 8011f90:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011f94:	f103 0320 	add.w	r3, r3, #32
 8011f98:	3b0c      	subs	r3, #12
 8011f9a:	4611      	mov	r1, r2
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f002 fedd 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8011fa2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011fa6:	3b14      	subs	r3, #20
 8011fa8:	2101      	movs	r1, #1
 8011faa:	4618      	mov	r0, r3
 8011fac:	f002 fed6 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8011fb0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011fb4:	3b3c      	subs	r3, #60	; 0x3c
 8011fb6:	2103      	movs	r1, #3
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f002 fecf 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011fbe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fc2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011fc6:	881a      	ldrh	r2, [r3, #0]
 8011fc8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011fcc:	3b64      	subs	r3, #100	; 0x64
 8011fce:	4611      	mov	r1, r2
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f002 fec3 	bl	8014d5c <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_EAST){
 8011fd6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fda:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011fde:	881b      	ldrh	r3, [r3, #0]
 8011fe0:	2b01      	cmp	r3, #1
 8011fe2:	d12f      	bne.n	8012044 <create_DijkstraMap+0x98c>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011fe4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fe8:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011fec:	881b      	ldrh	r3, [r3, #0]
 8011fee:	3301      	adds	r3, #1
 8011ff0:	b29b      	uxth	r3, r3
 8011ff2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011ff6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011ffa:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011ffc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012000:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012004:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012008:	2b05      	cmp	r3, #5
 801200a:	dd05      	ble.n	8012018 <create_DijkstraMap+0x960>
 801200c:	2305      	movs	r3, #5
 801200e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012012:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012016:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8012018:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801201c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012020:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012024:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012028:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801202c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012030:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012034:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012038:	8013      	strh	r3, [r2, #0]
 801203a:	e013      	b.n	8012064 <create_DijkstraMap+0x9ac>
 801203c:	20000c3c 	.word	0x20000c3c
 8012040:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012044:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012048:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801204c:	881b      	ldrh	r3, [r3, #0]
 801204e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012052:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012056:	8013      	strh	r3, [r2, #0]
 8012058:	2300      	movs	r3, #0
 801205a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801205e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012062:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012064:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012068:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801206c:	881b      	ldrh	r3, [r3, #0]
 801206e:	4a6f      	ldr	r2, [pc, #444]	; (801222c <create_DijkstraMap+0xb74>)
 8012070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012074:	461a      	mov	r2, r3
 8012076:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801207a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801207e:	881b      	ldrh	r3, [r3, #0]
 8012080:	3301      	adds	r3, #1
 8012082:	fa42 f303 	asr.w	r3, r2, r3
 8012086:	f003 0301 	and.w	r3, r3, #1
 801208a:	2b00      	cmp	r3, #0
 801208c:	f040 8092 	bne.w	80121b4 <create_DijkstraMap+0xafc>
 8012090:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012094:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012098:	881b      	ldrh	r3, [r3, #0]
 801209a:	1c5a      	adds	r2, r3, #1
 801209c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120a0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80120a4:	8819      	ldrh	r1, [r3, #0]
 80120a6:	4862      	ldr	r0, [pc, #392]	; (8012230 <create_DijkstraMap+0xb78>)
 80120a8:	4613      	mov	r3, r2
 80120aa:	011b      	lsls	r3, r3, #4
 80120ac:	1a9b      	subs	r3, r3, r2
 80120ae:	440b      	add	r3, r1
 80120b0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80120b4:	461c      	mov	r4, r3
 80120b6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120ba:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80120be:	881a      	ldrh	r2, [r3, #0]
 80120c0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120c4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80120c8:	8819      	ldrh	r1, [r3, #0]
 80120ca:	4859      	ldr	r0, [pc, #356]	; (8012230 <create_DijkstraMap+0xb78>)
 80120cc:	4613      	mov	r3, r2
 80120ce:	011b      	lsls	r3, r3, #4
 80120d0:	1a9b      	subs	r3, r3, r2
 80120d2:	440b      	add	r3, r1
 80120d4:	33f0      	adds	r3, #240	; 0xf0
 80120d6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80120da:	461a      	mov	r2, r3
 80120dc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120e0:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80120e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80120e8:	4413      	add	r3, r2
 80120ea:	429c      	cmp	r4, r3
 80120ec:	dd62      	ble.n	80121b4 <create_DijkstraMap+0xafc>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 80120ee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120f2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80120f6:	881a      	ldrh	r2, [r3, #0]
 80120f8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120fc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012100:	8819      	ldrh	r1, [r3, #0]
 8012102:	484b      	ldr	r0, [pc, #300]	; (8012230 <create_DijkstraMap+0xb78>)
 8012104:	4613      	mov	r3, r2
 8012106:	011b      	lsls	r3, r3, #4
 8012108:	1a9b      	subs	r3, r3, r2
 801210a:	440b      	add	r3, r1
 801210c:	33f0      	adds	r3, #240	; 0xf0
 801210e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012112:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012116:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801211a:	881b      	ldrh	r3, [r3, #0]
 801211c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012120:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012124:	8812      	ldrh	r2, [r2, #0]
 8012126:	3201      	adds	r2, #1
 8012128:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801212c:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012130:	8809      	ldrh	r1, [r1, #0]
 8012132:	4403      	add	r3, r0
 8012134:	b29c      	uxth	r4, r3
 8012136:	483e      	ldr	r0, [pc, #248]	; (8012230 <create_DijkstraMap+0xb78>)
 8012138:	4613      	mov	r3, r2
 801213a:	011b      	lsls	r3, r3, #4
 801213c:	1a9b      	subs	r3, r3, r2
 801213e:	440b      	add	r3, r1
 8012140:	4622      	mov	r2, r4
 8012142:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8012146:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801214a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801214e:	881a      	ldrh	r2, [r3, #0]
 8012150:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012154:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012158:	4611      	mov	r1, r2
 801215a:	4618      	mov	r0, r3
 801215c:	f002 fdfe 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 8012160:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012164:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012168:	881b      	ldrh	r3, [r3, #0]
 801216a:	3301      	adds	r3, #1
 801216c:	b29a      	uxth	r2, r3
 801216e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012172:	f103 0320 	add.w	r3, r3, #32
 8012176:	3b0c      	subs	r3, #12
 8012178:	4611      	mov	r1, r2
 801217a:	4618      	mov	r0, r3
 801217c:	f002 fdee 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012180:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012184:	3b14      	subs	r3, #20
 8012186:	2101      	movs	r1, #1
 8012188:	4618      	mov	r0, r3
 801218a:	f002 fde7 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 801218e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012192:	3b3c      	subs	r3, #60	; 0x3c
 8012194:	2101      	movs	r1, #1
 8012196:	4618      	mov	r0, r3
 8012198:	f002 fde0 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 801219c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121a0:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80121a4:	881a      	ldrh	r2, [r3, #0]
 80121a6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80121aa:	3b64      	subs	r3, #100	; 0x64
 80121ac:	4611      	mov	r1, r2
 80121ae:	4618      	mov	r0, r3
 80121b0:	f002 fdd4 	bl	8014d5c <pushStack_walk>
				}
			}
			if (Xcoordinate >= 1) {
 80121b4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121b8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80121bc:	881b      	ldrh	r3, [r3, #0]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	f000 81e5 	beq.w	801258e <create_DijkstraMap+0xed6>
				if(Direction==SLANT_SOUTH_WEST){
 80121c4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121c8:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80121cc:	881b      	ldrh	r3, [r3, #0]
 80121ce:	2b05      	cmp	r3, #5
 80121d0:	d130      	bne.n	8012234 <create_DijkstraMap+0xb7c>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80121d2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121d6:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80121da:	881b      	ldrh	r3, [r3, #0]
 80121dc:	3301      	adds	r3, #1
 80121de:	b29b      	uxth	r3, r3
 80121e0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80121e4:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80121e8:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80121ea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121ee:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80121f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80121f6:	2b05      	cmp	r3, #5
 80121f8:	dd05      	ble.n	8012206 <create_DijkstraMap+0xb4e>
 80121fa:	2305      	movs	r3, #5
 80121fc:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012200:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012204:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8012206:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801220a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801220e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012212:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012216:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801221a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801221e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012222:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012226:	8013      	strh	r3, [r2, #0]
 8012228:	e014      	b.n	8012254 <create_DijkstraMap+0xb9c>
 801222a:	bf00      	nop
 801222c:	20000c3c 	.word	0x20000c3c
 8012230:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012234:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012238:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801223c:	881b      	ldrh	r3, [r3, #0]
 801223e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012242:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012246:	8013      	strh	r3, [r2, #0]
 8012248:	2300      	movs	r3, #0
 801224a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801224e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012252:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012254:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012258:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801225c:	881b      	ldrh	r3, [r3, #0]
 801225e:	3b01      	subs	r3, #1
 8012260:	4a6a      	ldr	r2, [pc, #424]	; (801240c <create_DijkstraMap+0xd54>)
 8012262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012266:	461a      	mov	r2, r3
 8012268:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801226c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012270:	881b      	ldrh	r3, [r3, #0]
 8012272:	fa42 f303 	asr.w	r3, r2, r3
 8012276:	f003 0301 	and.w	r3, r3, #1
 801227a:	2b00      	cmp	r3, #0
 801227c:	f040 8092 	bne.w	80123a4 <create_DijkstraMap+0xcec>
 8012280:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012284:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012288:	881a      	ldrh	r2, [r3, #0]
 801228a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801228e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012292:	881b      	ldrh	r3, [r3, #0]
 8012294:	1e59      	subs	r1, r3, #1
 8012296:	485e      	ldr	r0, [pc, #376]	; (8012410 <create_DijkstraMap+0xd58>)
 8012298:	4613      	mov	r3, r2
 801229a:	011b      	lsls	r3, r3, #4
 801229c:	1a9b      	subs	r3, r3, r2
 801229e:	440b      	add	r3, r1
 80122a0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80122a4:	461c      	mov	r4, r3
 80122a6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122aa:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80122ae:	881a      	ldrh	r2, [r3, #0]
 80122b0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122b4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80122b8:	8819      	ldrh	r1, [r3, #0]
 80122ba:	4855      	ldr	r0, [pc, #340]	; (8012410 <create_DijkstraMap+0xd58>)
 80122bc:	4613      	mov	r3, r2
 80122be:	011b      	lsls	r3, r3, #4
 80122c0:	1a9b      	subs	r3, r3, r2
 80122c2:	440b      	add	r3, r1
 80122c4:	33f0      	adds	r3, #240	; 0xf0
 80122c6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80122ca:	461a      	mov	r2, r3
 80122cc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122d0:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80122d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80122d8:	4413      	add	r3, r2
 80122da:	429c      	cmp	r4, r3
 80122dc:	dd62      	ble.n	80123a4 <create_DijkstraMap+0xcec>
					Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 80122de:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122e2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80122e6:	881a      	ldrh	r2, [r3, #0]
 80122e8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122ec:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80122f0:	8819      	ldrh	r1, [r3, #0]
 80122f2:	4847      	ldr	r0, [pc, #284]	; (8012410 <create_DijkstraMap+0xd58>)
 80122f4:	4613      	mov	r3, r2
 80122f6:	011b      	lsls	r3, r3, #4
 80122f8:	1a9b      	subs	r3, r3, r2
 80122fa:	440b      	add	r3, r1
 80122fc:	33f0      	adds	r3, #240	; 0xf0
 80122fe:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012302:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012306:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801230a:	881b      	ldrh	r3, [r3, #0]
 801230c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012310:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012314:	8812      	ldrh	r2, [r2, #0]
 8012316:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801231a:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 801231e:	8809      	ldrh	r1, [r1, #0]
 8012320:	3901      	subs	r1, #1
 8012322:	4403      	add	r3, r0
 8012324:	b29c      	uxth	r4, r3
 8012326:	483a      	ldr	r0, [pc, #232]	; (8012410 <create_DijkstraMap+0xd58>)
 8012328:	4613      	mov	r3, r2
 801232a:	011b      	lsls	r3, r3, #4
 801232c:	1a9b      	subs	r3, r3, r2
 801232e:	440b      	add	r3, r1
 8012330:	4622      	mov	r2, r4
 8012332:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 8012336:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801233a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801233e:	881b      	ldrh	r3, [r3, #0]
 8012340:	3b01      	subs	r3, #1
 8012342:	b29a      	uxth	r2, r3
 8012344:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012348:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801234c:	4611      	mov	r1, r2
 801234e:	4618      	mov	r0, r3
 8012350:	f002 fd04 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8012354:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012358:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801235c:	881a      	ldrh	r2, [r3, #0]
 801235e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012362:	f103 0320 	add.w	r3, r3, #32
 8012366:	3b0c      	subs	r3, #12
 8012368:	4611      	mov	r1, r2
 801236a:	4618      	mov	r0, r3
 801236c:	f002 fcf6 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012370:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012374:	3b14      	subs	r3, #20
 8012376:	2101      	movs	r1, #1
 8012378:	4618      	mov	r0, r3
 801237a:	f002 fcef 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 801237e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012382:	3b3c      	subs	r3, #60	; 0x3c
 8012384:	2105      	movs	r1, #5
 8012386:	4618      	mov	r0, r3
 8012388:	f002 fce8 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 801238c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012390:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012394:	881a      	ldrh	r2, [r3, #0]
 8012396:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801239a:	3b64      	subs	r3, #100	; 0x64
 801239c:	4611      	mov	r1, r2
 801239e:	4618      	mov	r0, r3
 80123a0:	f002 fcdc 	bl	8014d5c <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_WEST){
 80123a4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123a8:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80123ac:	881b      	ldrh	r3, [r3, #0]
 80123ae:	2b07      	cmp	r3, #7
 80123b0:	d130      	bne.n	8012414 <create_DijkstraMap+0xd5c>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80123b2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123b6:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80123ba:	881b      	ldrh	r3, [r3, #0]
 80123bc:	3301      	adds	r3, #1
 80123be:	b29b      	uxth	r3, r3
 80123c0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80123c4:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80123c8:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80123ca:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123ce:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80123d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80123d6:	2b05      	cmp	r3, #5
 80123d8:	dd05      	ble.n	80123e6 <create_DijkstraMap+0xd2e>
 80123da:	2305      	movs	r3, #5
 80123dc:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80123e0:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80123e4:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 80123e6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123ea:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80123ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80123f2:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80123f6:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80123fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80123fe:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012402:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012406:	8013      	strh	r3, [r2, #0]
 8012408:	e014      	b.n	8012434 <create_DijkstraMap+0xd7c>
 801240a:	bf00      	nop
 801240c:	20000c3c 	.word	0x20000c3c
 8012410:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012414:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012418:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801241c:	881b      	ldrh	r3, [r3, #0]
 801241e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012422:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012426:	8013      	strh	r3, [r2, #0]
 8012428:	2300      	movs	r3, #0
 801242a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801242e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012432:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012434:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012438:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801243c:	881b      	ldrh	r3, [r3, #0]
 801243e:	3b01      	subs	r3, #1
 8012440:	4a74      	ldr	r2, [pc, #464]	; (8012614 <create_DijkstraMap+0xf5c>)
 8012442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012446:	461a      	mov	r2, r3
 8012448:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801244c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012450:	881b      	ldrh	r3, [r3, #0]
 8012452:	3301      	adds	r3, #1
 8012454:	fa42 f303 	asr.w	r3, r2, r3
 8012458:	f003 0301 	and.w	r3, r3, #1
 801245c:	2b00      	cmp	r3, #0
 801245e:	f040 8096 	bne.w	801258e <create_DijkstraMap+0xed6>
 8012462:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012466:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801246a:	881b      	ldrh	r3, [r3, #0]
 801246c:	1c5a      	adds	r2, r3, #1
 801246e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012472:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012476:	881b      	ldrh	r3, [r3, #0]
 8012478:	1e59      	subs	r1, r3, #1
 801247a:	4867      	ldr	r0, [pc, #412]	; (8012618 <create_DijkstraMap+0xf60>)
 801247c:	4613      	mov	r3, r2
 801247e:	011b      	lsls	r3, r3, #4
 8012480:	1a9b      	subs	r3, r3, r2
 8012482:	440b      	add	r3, r1
 8012484:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012488:	461c      	mov	r4, r3
 801248a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801248e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012492:	881a      	ldrh	r2, [r3, #0]
 8012494:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012498:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801249c:	8819      	ldrh	r1, [r3, #0]
 801249e:	485e      	ldr	r0, [pc, #376]	; (8012618 <create_DijkstraMap+0xf60>)
 80124a0:	4613      	mov	r3, r2
 80124a2:	011b      	lsls	r3, r3, #4
 80124a4:	1a9b      	subs	r3, r3, r2
 80124a6:	440b      	add	r3, r1
 80124a8:	33f0      	adds	r3, #240	; 0xf0
 80124aa:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80124ae:	461a      	mov	r2, r3
 80124b0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124b4:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80124b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124bc:	4413      	add	r3, r2
 80124be:	429c      	cmp	r4, r3
 80124c0:	dd65      	ble.n	801258e <create_DijkstraMap+0xed6>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 80124c2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124c6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80124ca:	881a      	ldrh	r2, [r3, #0]
 80124cc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124d0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80124d4:	8819      	ldrh	r1, [r3, #0]
 80124d6:	4850      	ldr	r0, [pc, #320]	; (8012618 <create_DijkstraMap+0xf60>)
 80124d8:	4613      	mov	r3, r2
 80124da:	011b      	lsls	r3, r3, #4
 80124dc:	1a9b      	subs	r3, r3, r2
 80124de:	440b      	add	r3, r1
 80124e0:	33f0      	adds	r3, #240	; 0xf0
 80124e2:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80124e6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124ea:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80124ee:	881b      	ldrh	r3, [r3, #0]
 80124f0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80124f4:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80124f8:	8812      	ldrh	r2, [r2, #0]
 80124fa:	3201      	adds	r2, #1
 80124fc:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012500:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012504:	8809      	ldrh	r1, [r1, #0]
 8012506:	3901      	subs	r1, #1
 8012508:	4403      	add	r3, r0
 801250a:	b29c      	uxth	r4, r3
 801250c:	4842      	ldr	r0, [pc, #264]	; (8012618 <create_DijkstraMap+0xf60>)
 801250e:	4613      	mov	r3, r2
 8012510:	011b      	lsls	r3, r3, #4
 8012512:	1a9b      	subs	r3, r3, r2
 8012514:	440b      	add	r3, r1
 8012516:	4622      	mov	r2, r4
 8012518:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 801251c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012520:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012524:	881b      	ldrh	r3, [r3, #0]
 8012526:	3b01      	subs	r3, #1
 8012528:	b29a      	uxth	r2, r3
 801252a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801252e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012532:	4611      	mov	r1, r2
 8012534:	4618      	mov	r0, r3
 8012536:	f002 fc11 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 801253a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801253e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012542:	881b      	ldrh	r3, [r3, #0]
 8012544:	3301      	adds	r3, #1
 8012546:	b29a      	uxth	r2, r3
 8012548:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801254c:	f103 0320 	add.w	r3, r3, #32
 8012550:	3b0c      	subs	r3, #12
 8012552:	4611      	mov	r1, r2
 8012554:	4618      	mov	r0, r3
 8012556:	f002 fc01 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 801255a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801255e:	3b14      	subs	r3, #20
 8012560:	2101      	movs	r1, #1
 8012562:	4618      	mov	r0, r3
 8012564:	f002 fbfa 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 8012568:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801256c:	3b3c      	subs	r3, #60	; 0x3c
 801256e:	2107      	movs	r1, #7
 8012570:	4618      	mov	r0, r3
 8012572:	f002 fbf3 	bl	8014d5c <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012576:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801257a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801257e:	881a      	ldrh	r2, [r3, #0]
 8012580:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012584:	3b64      	subs	r3, #100	; 0x64
 8012586:	4611      	mov	r1, r2
 8012588:	4618      	mov	r0, r3
 801258a:	f002 fbe7 	bl	8014d5c <pushStack_walk>
				}
			}

		}
		if(Row_or_Column==ROW){
 801258e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012592:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8012596:	881b      	ldrh	r3, [r3, #0]
 8012598:	2b01      	cmp	r3, #1
 801259a:	f040 85bd 	bne.w	8013118 <create_DijkstraMap+0x1a60>
					if(Xcoordinate <= 13){
 801259e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125a2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80125a6:	881b      	ldrh	r3, [r3, #0]
 80125a8:	2b0d      	cmp	r3, #13
 80125aa:	f200 80ed 	bhi.w	8012788 <create_DijkstraMap+0x10d0>
						if(Direction==SLANT_EAST){
 80125ae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125b2:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80125b6:	881b      	ldrh	r3, [r3, #0]
 80125b8:	2b02      	cmp	r3, #2
 80125ba:	d12f      	bne.n	801261c <create_DijkstraMap+0xf64>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 80125bc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125c0:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80125c4:	881b      	ldrh	r3, [r3, #0]
 80125c6:	3301      	adds	r3, #1
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80125ce:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80125d2:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 80125d4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125d8:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80125dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125e0:	2b04      	cmp	r3, #4
 80125e2:	dd05      	ble.n	80125f0 <create_DijkstraMap+0xf38>
 80125e4:	2304      	movs	r3, #4
 80125e6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80125ea:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80125ee:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 80125f0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125f4:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80125f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80125fc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012600:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012604:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012608:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801260c:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012610:	8013      	strh	r3, [r2, #0]
 8012612:	e013      	b.n	801263c <create_DijkstraMap+0xf84>
 8012614:	20000c3c 	.word	0x20000c3c
 8012618:	20000f30 	.word	0x20000f30
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 801261c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012620:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012624:	881b      	ldrh	r3, [r3, #0]
 8012626:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801262a:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 801262e:	8013      	strh	r3, [r2, #0]
 8012630:	2300      	movs	r3, #0
 8012632:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012636:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801263a:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate+1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate+1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 801263c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012640:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012644:	881b      	ldrh	r3, [r3, #0]
 8012646:	3301      	adds	r3, #1
 8012648:	4a6d      	ldr	r2, [pc, #436]	; (8012800 <create_DijkstraMap+0x1148>)
 801264a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801264e:	461a      	mov	r2, r3
 8012650:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012654:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012658:	881b      	ldrh	r3, [r3, #0]
 801265a:	fa42 f303 	asr.w	r3, r2, r3
 801265e:	f003 0301 	and.w	r3, r3, #1
 8012662:	2b00      	cmp	r3, #0
 8012664:	f040 8090 	bne.w	8012788 <create_DijkstraMap+0x10d0>
 8012668:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801266c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012670:	881a      	ldrh	r2, [r3, #0]
 8012672:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012676:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801267a:	881b      	ldrh	r3, [r3, #0]
 801267c:	1c59      	adds	r1, r3, #1
 801267e:	4861      	ldr	r0, [pc, #388]	; (8012804 <create_DijkstraMap+0x114c>)
 8012680:	4613      	mov	r3, r2
 8012682:	011b      	lsls	r3, r3, #4
 8012684:	1a9b      	subs	r3, r3, r2
 8012686:	440b      	add	r3, r1
 8012688:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801268c:	461c      	mov	r4, r3
 801268e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012692:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012696:	881a      	ldrh	r2, [r3, #0]
 8012698:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801269c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80126a0:	8819      	ldrh	r1, [r3, #0]
 80126a2:	4858      	ldr	r0, [pc, #352]	; (8012804 <create_DijkstraMap+0x114c>)
 80126a4:	4613      	mov	r3, r2
 80126a6:	011b      	lsls	r3, r3, #4
 80126a8:	1a9b      	subs	r3, r3, r2
 80126aa:	440b      	add	r3, r1
 80126ac:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80126b0:	461a      	mov	r2, r3
 80126b2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126b6:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80126ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126be:	4413      	add	r3, r2
 80126c0:	429c      	cmp	r4, r3
 80126c2:	dd61      	ble.n	8012788 <create_DijkstraMap+0x10d0>
							Dijkstra.row_count[Ycoordinate][Xcoordinate+1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 80126c4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126c8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80126cc:	881a      	ldrh	r2, [r3, #0]
 80126ce:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126d2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80126d6:	8819      	ldrh	r1, [r3, #0]
 80126d8:	484a      	ldr	r0, [pc, #296]	; (8012804 <create_DijkstraMap+0x114c>)
 80126da:	4613      	mov	r3, r2
 80126dc:	011b      	lsls	r3, r3, #4
 80126de:	1a9b      	subs	r3, r3, r2
 80126e0:	440b      	add	r3, r1
 80126e2:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80126e6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126ea:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80126ee:	881b      	ldrh	r3, [r3, #0]
 80126f0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80126f4:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80126f8:	8812      	ldrh	r2, [r2, #0]
 80126fa:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80126fe:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012702:	8809      	ldrh	r1, [r1, #0]
 8012704:	3101      	adds	r1, #1
 8012706:	4403      	add	r3, r0
 8012708:	b29c      	uxth	r4, r3
 801270a:	483e      	ldr	r0, [pc, #248]	; (8012804 <create_DijkstraMap+0x114c>)
 801270c:	4613      	mov	r3, r2
 801270e:	011b      	lsls	r3, r3, #4
 8012710:	1a9b      	subs	r3, r3, r2
 8012712:	440b      	add	r3, r1
 8012714:	4622      	mov	r2, r4
 8012716:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 801271a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801271e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012722:	881b      	ldrh	r3, [r3, #0]
 8012724:	3301      	adds	r3, #1
 8012726:	b29a      	uxth	r2, r3
 8012728:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801272c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012730:	4611      	mov	r1, r2
 8012732:	4618      	mov	r0, r3
 8012734:	f002 fb12 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012738:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801273c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012740:	881a      	ldrh	r2, [r3, #0]
 8012742:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012746:	f103 0320 	add.w	r3, r3, #32
 801274a:	3b0c      	subs	r3, #12
 801274c:	4611      	mov	r1, r2
 801274e:	4618      	mov	r0, r3
 8012750:	f002 fb04 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 8012754:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012758:	3b14      	subs	r3, #20
 801275a:	2101      	movs	r1, #1
 801275c:	4618      	mov	r0, r3
 801275e:	f002 fafd 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_EAST);
 8012762:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012766:	3b3c      	subs	r3, #60	; 0x3c
 8012768:	2102      	movs	r1, #2
 801276a:	4618      	mov	r0, r3
 801276c:	f002 faf6 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012770:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012774:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012778:	881a      	ldrh	r2, [r3, #0]
 801277a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801277e:	3b64      	subs	r3, #100	; 0x64
 8012780:	4611      	mov	r1, r2
 8012782:	4618      	mov	r0, r3
 8012784:	f002 faea 	bl	8014d5c <pushStack_walk>
						}
					}
					if (Xcoordinate >= 1) {
 8012788:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801278c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012790:	881b      	ldrh	r3, [r3, #0]
 8012792:	2b00      	cmp	r3, #0
 8012794:	f000 80ee 	beq.w	8012974 <create_DijkstraMap+0x12bc>
						if(Direction==SLANT_WEST){
 8012798:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801279c:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80127a0:	881b      	ldrh	r3, [r3, #0]
 80127a2:	2b06      	cmp	r3, #6
 80127a4:	d130      	bne.n	8012808 <create_DijkstraMap+0x1150>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 80127a6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127aa:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80127ae:	881b      	ldrh	r3, [r3, #0]
 80127b0:	3301      	adds	r3, #1
 80127b2:	b29b      	uxth	r3, r3
 80127b4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80127b8:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80127bc:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 80127be:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127c2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80127c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127ca:	2b04      	cmp	r3, #4
 80127cc:	dd05      	ble.n	80127da <create_DijkstraMap+0x1122>
 80127ce:	2304      	movs	r3, #4
 80127d0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80127d4:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80127d8:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 80127da:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127de:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80127e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80127e6:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80127ea:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80127ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80127f2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80127f6:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80127fa:	8013      	strh	r3, [r2, #0]
 80127fc:	e014      	b.n	8012828 <create_DijkstraMap+0x1170>
 80127fe:	bf00      	nop
 8012800:	20000c3c 	.word	0x20000c3c
 8012804:	20000f30 	.word	0x20000f30
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8012808:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801280c:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012810:	881b      	ldrh	r3, [r3, #0]
 8012812:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012816:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 801281a:	8013      	strh	r3, [r2, #0]
 801281c:	2300      	movs	r3, #0
 801281e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012822:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012826:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 8012828:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801282c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012830:	881b      	ldrh	r3, [r3, #0]
 8012832:	3b01      	subs	r3, #1
 8012834:	4a6d      	ldr	r2, [pc, #436]	; (80129ec <create_DijkstraMap+0x1334>)
 8012836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801283a:	461a      	mov	r2, r3
 801283c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012840:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012844:	881b      	ldrh	r3, [r3, #0]
 8012846:	fa42 f303 	asr.w	r3, r2, r3
 801284a:	f003 0301 	and.w	r3, r3, #1
 801284e:	2b00      	cmp	r3, #0
 8012850:	f040 8090 	bne.w	8012974 <create_DijkstraMap+0x12bc>
 8012854:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012858:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801285c:	881a      	ldrh	r2, [r3, #0]
 801285e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012862:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012866:	881b      	ldrh	r3, [r3, #0]
 8012868:	1e59      	subs	r1, r3, #1
 801286a:	4861      	ldr	r0, [pc, #388]	; (80129f0 <create_DijkstraMap+0x1338>)
 801286c:	4613      	mov	r3, r2
 801286e:	011b      	lsls	r3, r3, #4
 8012870:	1a9b      	subs	r3, r3, r2
 8012872:	440b      	add	r3, r1
 8012874:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012878:	461c      	mov	r4, r3
 801287a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801287e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012882:	881a      	ldrh	r2, [r3, #0]
 8012884:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012888:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801288c:	8819      	ldrh	r1, [r3, #0]
 801288e:	4858      	ldr	r0, [pc, #352]	; (80129f0 <create_DijkstraMap+0x1338>)
 8012890:	4613      	mov	r3, r2
 8012892:	011b      	lsls	r3, r3, #4
 8012894:	1a9b      	subs	r3, r3, r2
 8012896:	440b      	add	r3, r1
 8012898:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801289c:	461a      	mov	r2, r3
 801289e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128a2:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80128a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80128aa:	4413      	add	r3, r2
 80128ac:	429c      	cmp	r4, r3
 80128ae:	dd61      	ble.n	8012974 <create_DijkstraMap+0x12bc>
							Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 80128b0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128b4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80128b8:	881a      	ldrh	r2, [r3, #0]
 80128ba:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128be:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80128c2:	8819      	ldrh	r1, [r3, #0]
 80128c4:	484a      	ldr	r0, [pc, #296]	; (80129f0 <create_DijkstraMap+0x1338>)
 80128c6:	4613      	mov	r3, r2
 80128c8:	011b      	lsls	r3, r3, #4
 80128ca:	1a9b      	subs	r3, r3, r2
 80128cc:	440b      	add	r3, r1
 80128ce:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80128d2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128d6:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80128da:	881b      	ldrh	r3, [r3, #0]
 80128dc:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80128e0:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80128e4:	8812      	ldrh	r2, [r2, #0]
 80128e6:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80128ea:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 80128ee:	8809      	ldrh	r1, [r1, #0]
 80128f0:	3901      	subs	r1, #1
 80128f2:	4403      	add	r3, r0
 80128f4:	b29c      	uxth	r4, r3
 80128f6:	483e      	ldr	r0, [pc, #248]	; (80129f0 <create_DijkstraMap+0x1338>)
 80128f8:	4613      	mov	r3, r2
 80128fa:	011b      	lsls	r3, r3, #4
 80128fc:	1a9b      	subs	r3, r3, r2
 80128fe:	440b      	add	r3, r1
 8012900:	4622      	mov	r2, r4
 8012902:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate - 1);
 8012906:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801290a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801290e:	881b      	ldrh	r3, [r3, #0]
 8012910:	3b01      	subs	r3, #1
 8012912:	b29a      	uxth	r2, r3
 8012914:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012918:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801291c:	4611      	mov	r1, r2
 801291e:	4618      	mov	r0, r3
 8012920:	f002 fa1c 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012924:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012928:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801292c:	881a      	ldrh	r2, [r3, #0]
 801292e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012932:	f103 0320 	add.w	r3, r3, #32
 8012936:	3b0c      	subs	r3, #12
 8012938:	4611      	mov	r1, r2
 801293a:	4618      	mov	r0, r3
 801293c:	f002 fa0e 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 8012940:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012944:	3b14      	subs	r3, #20
 8012946:	2101      	movs	r1, #1
 8012948:	4618      	mov	r0, r3
 801294a:	f002 fa07 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_WEST);
 801294e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012952:	3b3c      	subs	r3, #60	; 0x3c
 8012954:	2106      	movs	r1, #6
 8012956:	4618      	mov	r0, r3
 8012958:	f002 fa00 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 801295c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012960:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012964:	881a      	ldrh	r2, [r3, #0]
 8012966:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801296a:	3b64      	subs	r3, #100	; 0x64
 801296c:	4611      	mov	r1, r2
 801296e:	4618      	mov	r0, r3
 8012970:	f002 f9f4 	bl	8014d5c <pushStack_walk>
						}
					}
					if (Ycoordinate <= 14) {
 8012974:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012978:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801297c:	881b      	ldrh	r3, [r3, #0]
 801297e:	2b0e      	cmp	r3, #14
 8012980:	f200 81de 	bhi.w	8012d40 <create_DijkstraMap+0x1688>
						if(Direction==SLANT_NORTH_WEST){
 8012984:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012988:	f103 0366 	add.w	r3, r3, #102	; 0x66
 801298c:	881b      	ldrh	r3, [r3, #0]
 801298e:	2b07      	cmp	r3, #7
 8012990:	d130      	bne.n	80129f4 <create_DijkstraMap+0x133c>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012992:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012996:	f103 0364 	add.w	r3, r3, #100	; 0x64
 801299a:	881b      	ldrh	r3, [r3, #0]
 801299c:	3301      	adds	r3, #1
 801299e:	b29b      	uxth	r3, r3
 80129a0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80129a4:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80129a8:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80129aa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129ae:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80129b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80129b6:	2b05      	cmp	r3, #5
 80129b8:	dd05      	ble.n	80129c6 <create_DijkstraMap+0x130e>
 80129ba:	2305      	movs	r3, #5
 80129bc:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80129c0:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80129c4:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 80129c6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129ca:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80129ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80129d2:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80129d6:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80129da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80129de:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80129e2:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80129e6:	8013      	strh	r3, [r2, #0]
 80129e8:	e014      	b.n	8012a14 <create_DijkstraMap+0x135c>
 80129ea:	bf00      	nop
 80129ec:	20000c3c 	.word	0x20000c3c
 80129f0:	20000f30 	.word	0x20000f30
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80129f4:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80129f8:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80129fc:	881b      	ldrh	r3, [r3, #0]
 80129fe:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a02:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012a06:	8013      	strh	r3, [r2, #0]
 8012a08:	2300      	movs	r3, #0
 8012a0a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a0e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012a12:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012a14:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a18:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012a1c:	881b      	ldrh	r3, [r3, #0]
 8012a1e:	4a69      	ldr	r2, [pc, #420]	; (8012bc4 <create_DijkstraMap+0x150c>)
 8012a20:	330c      	adds	r3, #12
 8012a22:	005b      	lsls	r3, r3, #1
 8012a24:	4413      	add	r3, r2
 8012a26:	88db      	ldrh	r3, [r3, #6]
 8012a28:	461a      	mov	r2, r3
 8012a2a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a2e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012a32:	881b      	ldrh	r3, [r3, #0]
 8012a34:	fa42 f303 	asr.w	r3, r2, r3
 8012a38:	f003 0301 	and.w	r3, r3, #1
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	f040 808e 	bne.w	8012b5e <create_DijkstraMap+0x14a6>
 8012a42:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a46:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012a4a:	881a      	ldrh	r2, [r3, #0]
 8012a4c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a50:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012a54:	8819      	ldrh	r1, [r3, #0]
 8012a56:	485c      	ldr	r0, [pc, #368]	; (8012bc8 <create_DijkstraMap+0x1510>)
 8012a58:	4613      	mov	r3, r2
 8012a5a:	011b      	lsls	r3, r3, #4
 8012a5c:	1a9b      	subs	r3, r3, r2
 8012a5e:	440b      	add	r3, r1
 8012a60:	33f0      	adds	r3, #240	; 0xf0
 8012a62:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012a66:	461c      	mov	r4, r3
 8012a68:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a6c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012a70:	881a      	ldrh	r2, [r3, #0]
 8012a72:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a76:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012a7a:	8819      	ldrh	r1, [r3, #0]
 8012a7c:	4852      	ldr	r0, [pc, #328]	; (8012bc8 <create_DijkstraMap+0x1510>)
 8012a7e:	4613      	mov	r3, r2
 8012a80:	011b      	lsls	r3, r3, #4
 8012a82:	1a9b      	subs	r3, r3, r2
 8012a84:	440b      	add	r3, r1
 8012a86:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012a8a:	461a      	mov	r2, r3
 8012a8c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a90:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a98:	4413      	add	r3, r2
 8012a9a:	429c      	cmp	r4, r3
 8012a9c:	dd5f      	ble.n	8012b5e <create_DijkstraMap+0x14a6>
							Dijkstra.column_count[Xcoordinate][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012a9e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012aa2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012aa6:	881a      	ldrh	r2, [r3, #0]
 8012aa8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012aac:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012ab0:	8819      	ldrh	r1, [r3, #0]
 8012ab2:	4845      	ldr	r0, [pc, #276]	; (8012bc8 <create_DijkstraMap+0x1510>)
 8012ab4:	4613      	mov	r3, r2
 8012ab6:	011b      	lsls	r3, r3, #4
 8012ab8:	1a9b      	subs	r3, r3, r2
 8012aba:	440b      	add	r3, r1
 8012abc:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012ac0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ac4:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012ac8:	881b      	ldrh	r3, [r3, #0]
 8012aca:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ace:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012ad2:	8812      	ldrh	r2, [r2, #0]
 8012ad4:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012ad8:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012adc:	8809      	ldrh	r1, [r1, #0]
 8012ade:	4403      	add	r3, r0
 8012ae0:	b29c      	uxth	r4, r3
 8012ae2:	4839      	ldr	r0, [pc, #228]	; (8012bc8 <create_DijkstraMap+0x1510>)
 8012ae4:	4613      	mov	r3, r2
 8012ae6:	011b      	lsls	r3, r3, #4
 8012ae8:	1a9b      	subs	r3, r3, r2
 8012aea:	440b      	add	r3, r1
 8012aec:	33f0      	adds	r3, #240	; 0xf0
 8012aee:	4622      	mov	r2, r4
 8012af0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8012af4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012af8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012afc:	881a      	ldrh	r2, [r3, #0]
 8012afe:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012b02:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012b06:	4611      	mov	r1, r2
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f002 f927 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012b0e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b12:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b16:	881a      	ldrh	r2, [r3, #0]
 8012b18:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012b1c:	f103 0320 	add.w	r3, r3, #32
 8012b20:	3b0c      	subs	r3, #12
 8012b22:	4611      	mov	r1, r2
 8012b24:	4618      	mov	r0, r3
 8012b26:	f002 f919 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012b2a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012b2e:	3b14      	subs	r3, #20
 8012b30:	2100      	movs	r1, #0
 8012b32:	4618      	mov	r0, r3
 8012b34:	f002 f912 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 8012b38:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012b3c:	3b3c      	subs	r3, #60	; 0x3c
 8012b3e:	2107      	movs	r1, #7
 8012b40:	4618      	mov	r0, r3
 8012b42:	f002 f90b 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012b46:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b4a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012b4e:	881a      	ldrh	r2, [r3, #0]
 8012b50:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012b54:	3b64      	subs	r3, #100	; 0x64
 8012b56:	4611      	mov	r1, r2
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f002 f8ff 	bl	8014d5c <pushStack_walk>
						}
						if(Direction==SLANT_NORTH_EAST){
 8012b5e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b62:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012b66:	881b      	ldrh	r3, [r3, #0]
 8012b68:	2b01      	cmp	r3, #1
 8012b6a:	d12f      	bne.n	8012bcc <create_DijkstraMap+0x1514>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012b6c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b70:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012b74:	881b      	ldrh	r3, [r3, #0]
 8012b76:	3301      	adds	r3, #1
 8012b78:	b29b      	uxth	r3, r3
 8012b7a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012b7e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012b82:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012b84:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b88:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012b8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012b90:	2b05      	cmp	r3, #5
 8012b92:	dd05      	ble.n	8012ba0 <create_DijkstraMap+0x14e8>
 8012b94:	2305      	movs	r3, #5
 8012b96:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012b9a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012b9e:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012ba0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ba4:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012ba8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012bac:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012bb0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012bb4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012bb8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012bbc:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012bc0:	8013      	strh	r3, [r2, #0]
 8012bc2:	e013      	b.n	8012bec <create_DijkstraMap+0x1534>
 8012bc4:	20000c3c 	.word	0x20000c3c
 8012bc8:	20000f30 	.word	0x20000f30
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012bcc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012bd0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012bd4:	881b      	ldrh	r3, [r3, #0]
 8012bd6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012bda:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012bde:	8013      	strh	r3, [r2, #0]
 8012be0:	2300      	movs	r3, #0
 8012be2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012be6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012bea:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012bec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012bf0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012bf4:	881b      	ldrh	r3, [r3, #0]
 8012bf6:	4a70      	ldr	r2, [pc, #448]	; (8012db8 <create_DijkstraMap+0x1700>)
 8012bf8:	330c      	adds	r3, #12
 8012bfa:	005b      	lsls	r3, r3, #1
 8012bfc:	4413      	add	r3, r2
 8012bfe:	88db      	ldrh	r3, [r3, #6]
 8012c00:	461a      	mov	r2, r3
 8012c02:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c06:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012c0a:	881b      	ldrh	r3, [r3, #0]
 8012c0c:	3301      	adds	r3, #1
 8012c0e:	fa42 f303 	asr.w	r3, r2, r3
 8012c12:	f003 0301 	and.w	r3, r3, #1
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	f040 8092 	bne.w	8012d40 <create_DijkstraMap+0x1688>
 8012c1c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c20:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012c24:	881b      	ldrh	r3, [r3, #0]
 8012c26:	1c5a      	adds	r2, r3, #1
 8012c28:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c2c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012c30:	8819      	ldrh	r1, [r3, #0]
 8012c32:	4862      	ldr	r0, [pc, #392]	; (8012dbc <create_DijkstraMap+0x1704>)
 8012c34:	4613      	mov	r3, r2
 8012c36:	011b      	lsls	r3, r3, #4
 8012c38:	1a9b      	subs	r3, r3, r2
 8012c3a:	440b      	add	r3, r1
 8012c3c:	33f0      	adds	r3, #240	; 0xf0
 8012c3e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012c42:	461c      	mov	r4, r3
 8012c44:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c48:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012c4c:	881a      	ldrh	r2, [r3, #0]
 8012c4e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c52:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012c56:	8819      	ldrh	r1, [r3, #0]
 8012c58:	4858      	ldr	r0, [pc, #352]	; (8012dbc <create_DijkstraMap+0x1704>)
 8012c5a:	4613      	mov	r3, r2
 8012c5c:	011b      	lsls	r3, r3, #4
 8012c5e:	1a9b      	subs	r3, r3, r2
 8012c60:	440b      	add	r3, r1
 8012c62:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012c66:	461a      	mov	r2, r3
 8012c68:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c6c:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c74:	4413      	add	r3, r2
 8012c76:	429c      	cmp	r4, r3
 8012c78:	dd62      	ble.n	8012d40 <create_DijkstraMap+0x1688>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012c7a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c7e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012c82:	881a      	ldrh	r2, [r3, #0]
 8012c84:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c88:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012c8c:	8819      	ldrh	r1, [r3, #0]
 8012c8e:	484b      	ldr	r0, [pc, #300]	; (8012dbc <create_DijkstraMap+0x1704>)
 8012c90:	4613      	mov	r3, r2
 8012c92:	011b      	lsls	r3, r3, #4
 8012c94:	1a9b      	subs	r3, r3, r2
 8012c96:	440b      	add	r3, r1
 8012c98:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012c9c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ca0:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012ca4:	881b      	ldrh	r3, [r3, #0]
 8012ca6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012caa:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012cae:	8812      	ldrh	r2, [r2, #0]
 8012cb0:	3201      	adds	r2, #1
 8012cb2:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012cb6:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012cba:	8809      	ldrh	r1, [r1, #0]
 8012cbc:	4403      	add	r3, r0
 8012cbe:	b29c      	uxth	r4, r3
 8012cc0:	483e      	ldr	r0, [pc, #248]	; (8012dbc <create_DijkstraMap+0x1704>)
 8012cc2:	4613      	mov	r3, r2
 8012cc4:	011b      	lsls	r3, r3, #4
 8012cc6:	1a9b      	subs	r3, r3, r2
 8012cc8:	440b      	add	r3, r1
 8012cca:	33f0      	adds	r3, #240	; 0xf0
 8012ccc:	4622      	mov	r2, r4
 8012cce:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 8012cd2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cd6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012cda:	881b      	ldrh	r3, [r3, #0]
 8012cdc:	3301      	adds	r3, #1
 8012cde:	b29a      	uxth	r2, r3
 8012ce0:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012ce4:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012ce8:	4611      	mov	r1, r2
 8012cea:	4618      	mov	r0, r3
 8012cec:	f002 f836 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012cf0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cf4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012cf8:	881a      	ldrh	r2, [r3, #0]
 8012cfa:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012cfe:	f103 0320 	add.w	r3, r3, #32
 8012d02:	3b0c      	subs	r3, #12
 8012d04:	4611      	mov	r1, r2
 8012d06:	4618      	mov	r0, r3
 8012d08:	f002 f828 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012d0c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012d10:	3b14      	subs	r3, #20
 8012d12:	2100      	movs	r1, #0
 8012d14:	4618      	mov	r0, r3
 8012d16:	f002 f821 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8012d1a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012d1e:	3b3c      	subs	r3, #60	; 0x3c
 8012d20:	2101      	movs	r1, #1
 8012d22:	4618      	mov	r0, r3
 8012d24:	f002 f81a 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012d28:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d2c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012d30:	881a      	ldrh	r2, [r3, #0]
 8012d32:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012d36:	3b64      	subs	r3, #100	; 0x64
 8012d38:	4611      	mov	r1, r2
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f002 f80e 	bl	8014d5c <pushStack_walk>
						}
					}
					if (Ycoordinate >= 1) {
 8012d40:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d44:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012d48:	881b      	ldrh	r3, [r3, #0]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	f000 81e4 	beq.w	8013118 <create_DijkstraMap+0x1a60>
						if(Direction==SLANT_SOUTH_WEST){
 8012d50:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d54:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012d58:	881b      	ldrh	r3, [r3, #0]
 8012d5a:	2b05      	cmp	r3, #5
 8012d5c:	d130      	bne.n	8012dc0 <create_DijkstraMap+0x1708>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012d5e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d62:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012d66:	881b      	ldrh	r3, [r3, #0]
 8012d68:	3301      	adds	r3, #1
 8012d6a:	b29b      	uxth	r3, r3
 8012d6c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012d70:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012d74:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012d76:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d7a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012d7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012d82:	2b05      	cmp	r3, #5
 8012d84:	dd05      	ble.n	8012d92 <create_DijkstraMap+0x16da>
 8012d86:	2305      	movs	r3, #5
 8012d88:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012d8c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012d90:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012d92:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d96:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012d9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012d9e:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012da2:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012da6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012daa:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012dae:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012db2:	8013      	strh	r3, [r2, #0]
 8012db4:	e014      	b.n	8012de0 <create_DijkstraMap+0x1728>
 8012db6:	bf00      	nop
 8012db8:	20000c3c 	.word	0x20000c3c
 8012dbc:	20000f30 	.word	0x20000f30
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012dc0:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012dc4:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012dc8:	881b      	ldrh	r3, [r3, #0]
 8012dca:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012dce:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012dd2:	8013      	strh	r3, [r2, #0]
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012dda:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012dde:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012de0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012de4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012de8:	881b      	ldrh	r3, [r3, #0]
 8012dea:	3b01      	subs	r3, #1
 8012dec:	4ad4      	ldr	r2, [pc, #848]	; (8013140 <create_DijkstraMap+0x1a88>)
 8012dee:	330c      	adds	r3, #12
 8012df0:	005b      	lsls	r3, r3, #1
 8012df2:	4413      	add	r3, r2
 8012df4:	88db      	ldrh	r3, [r3, #6]
 8012df6:	461a      	mov	r2, r3
 8012df8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012dfc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012e00:	881b      	ldrh	r3, [r3, #0]
 8012e02:	fa42 f303 	asr.w	r3, r2, r3
 8012e06:	f003 0301 	and.w	r3, r3, #1
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	f040 8092 	bne.w	8012f34 <create_DijkstraMap+0x187c>
 8012e10:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e14:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012e18:	881a      	ldrh	r2, [r3, #0]
 8012e1a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e1e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012e22:	881b      	ldrh	r3, [r3, #0]
 8012e24:	1e59      	subs	r1, r3, #1
 8012e26:	48c7      	ldr	r0, [pc, #796]	; (8013144 <create_DijkstraMap+0x1a8c>)
 8012e28:	4613      	mov	r3, r2
 8012e2a:	011b      	lsls	r3, r3, #4
 8012e2c:	1a9b      	subs	r3, r3, r2
 8012e2e:	440b      	add	r3, r1
 8012e30:	33f0      	adds	r3, #240	; 0xf0
 8012e32:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012e36:	461c      	mov	r4, r3
 8012e38:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e3c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012e40:	881a      	ldrh	r2, [r3, #0]
 8012e42:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e46:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012e4a:	8819      	ldrh	r1, [r3, #0]
 8012e4c:	48bd      	ldr	r0, [pc, #756]	; (8013144 <create_DijkstraMap+0x1a8c>)
 8012e4e:	4613      	mov	r3, r2
 8012e50:	011b      	lsls	r3, r3, #4
 8012e52:	1a9b      	subs	r3, r3, r2
 8012e54:	440b      	add	r3, r1
 8012e56:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012e5a:	461a      	mov	r2, r3
 8012e5c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e60:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e68:	4413      	add	r3, r2
 8012e6a:	429c      	cmp	r4, r3
 8012e6c:	dd62      	ble.n	8012f34 <create_DijkstraMap+0x187c>
							Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012e6e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e72:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012e76:	881a      	ldrh	r2, [r3, #0]
 8012e78:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e7c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012e80:	8819      	ldrh	r1, [r3, #0]
 8012e82:	48b0      	ldr	r0, [pc, #704]	; (8013144 <create_DijkstraMap+0x1a8c>)
 8012e84:	4613      	mov	r3, r2
 8012e86:	011b      	lsls	r3, r3, #4
 8012e88:	1a9b      	subs	r3, r3, r2
 8012e8a:	440b      	add	r3, r1
 8012e8c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012e90:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e94:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012e98:	881b      	ldrh	r3, [r3, #0]
 8012e9a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012e9e:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012ea2:	8812      	ldrh	r2, [r2, #0]
 8012ea4:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012ea8:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012eac:	8809      	ldrh	r1, [r1, #0]
 8012eae:	3901      	subs	r1, #1
 8012eb0:	4403      	add	r3, r0
 8012eb2:	b29c      	uxth	r4, r3
 8012eb4:	48a3      	ldr	r0, [pc, #652]	; (8013144 <create_DijkstraMap+0x1a8c>)
 8012eb6:	4613      	mov	r3, r2
 8012eb8:	011b      	lsls	r3, r3, #4
 8012eba:	1a9b      	subs	r3, r3, r2
 8012ebc:	440b      	add	r3, r1
 8012ebe:	33f0      	adds	r3, #240	; 0xf0
 8012ec0:	4622      	mov	r2, r4
 8012ec2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8012ec6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012eca:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012ece:	881a      	ldrh	r2, [r3, #0]
 8012ed0:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012ed4:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012ed8:	4611      	mov	r1, r2
 8012eda:	4618      	mov	r0, r3
 8012edc:	f001 ff3e 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate - 1);
 8012ee0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ee4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012ee8:	881b      	ldrh	r3, [r3, #0]
 8012eea:	3b01      	subs	r3, #1
 8012eec:	b29a      	uxth	r2, r3
 8012eee:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012ef2:	f103 0320 	add.w	r3, r3, #32
 8012ef6:	3b0c      	subs	r3, #12
 8012ef8:	4611      	mov	r1, r2
 8012efa:	4618      	mov	r0, r3
 8012efc:	f001 ff2e 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012f00:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012f04:	3b14      	subs	r3, #20
 8012f06:	2100      	movs	r1, #0
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f001 ff27 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8012f0e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012f12:	3b3c      	subs	r3, #60	; 0x3c
 8012f14:	2105      	movs	r1, #5
 8012f16:	4618      	mov	r0, r3
 8012f18:	f001 ff20 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012f1c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f20:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012f24:	881a      	ldrh	r2, [r3, #0]
 8012f26:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012f2a:	3b64      	subs	r3, #100	; 0x64
 8012f2c:	4611      	mov	r1, r2
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f001 ff14 	bl	8014d5c <pushStack_walk>
						}
						if(Direction==SLANT_SOUTH_EAST){
 8012f34:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f38:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012f3c:	881b      	ldrh	r3, [r3, #0]
 8012f3e:	2b03      	cmp	r3, #3
 8012f40:	d12b      	bne.n	8012f9a <create_DijkstraMap+0x18e2>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012f42:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f46:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012f4a:	881b      	ldrh	r3, [r3, #0]
 8012f4c:	3301      	adds	r3, #1
 8012f4e:	b29b      	uxth	r3, r3
 8012f50:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012f54:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012f58:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012f5a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f5e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f66:	2b05      	cmp	r3, #5
 8012f68:	dd05      	ble.n	8012f76 <create_DijkstraMap+0x18be>
 8012f6a:	2305      	movs	r3, #5
 8012f6c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012f70:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012f74:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012f76:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f7a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012f7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012f82:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012f86:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012f8a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012f8e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012f92:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012f96:	8013      	strh	r3, [r2, #0]
 8012f98:	e00f      	b.n	8012fba <create_DijkstraMap+0x1902>
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012f9a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012f9e:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012fa2:	881b      	ldrh	r3, [r3, #0]
 8012fa4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012fa8:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012fac:	8013      	strh	r3, [r2, #0]
 8012fae:	2300      	movs	r3, #0
 8012fb0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012fb4:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012fb8:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012fba:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012fbe:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012fc2:	881b      	ldrh	r3, [r3, #0]
 8012fc4:	3b01      	subs	r3, #1
 8012fc6:	4a5e      	ldr	r2, [pc, #376]	; (8013140 <create_DijkstraMap+0x1a88>)
 8012fc8:	330c      	adds	r3, #12
 8012fca:	005b      	lsls	r3, r3, #1
 8012fcc:	4413      	add	r3, r2
 8012fce:	88db      	ldrh	r3, [r3, #6]
 8012fd0:	461a      	mov	r2, r3
 8012fd2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012fd6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012fda:	881b      	ldrh	r3, [r3, #0]
 8012fdc:	3301      	adds	r3, #1
 8012fde:	fa42 f303 	asr.w	r3, r2, r3
 8012fe2:	f003 0301 	and.w	r3, r3, #1
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	f040 8096 	bne.w	8013118 <create_DijkstraMap+0x1a60>
 8012fec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ff0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012ff4:	881b      	ldrh	r3, [r3, #0]
 8012ff6:	1c5a      	adds	r2, r3, #1
 8012ff8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ffc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013000:	881b      	ldrh	r3, [r3, #0]
 8013002:	1e59      	subs	r1, r3, #1
 8013004:	484f      	ldr	r0, [pc, #316]	; (8013144 <create_DijkstraMap+0x1a8c>)
 8013006:	4613      	mov	r3, r2
 8013008:	011b      	lsls	r3, r3, #4
 801300a:	1a9b      	subs	r3, r3, r2
 801300c:	440b      	add	r3, r1
 801300e:	33f0      	adds	r3, #240	; 0xf0
 8013010:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013014:	461c      	mov	r4, r3
 8013016:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801301a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801301e:	881a      	ldrh	r2, [r3, #0]
 8013020:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013024:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013028:	8819      	ldrh	r1, [r3, #0]
 801302a:	4846      	ldr	r0, [pc, #280]	; (8013144 <create_DijkstraMap+0x1a8c>)
 801302c:	4613      	mov	r3, r2
 801302e:	011b      	lsls	r3, r3, #4
 8013030:	1a9b      	subs	r3, r3, r2
 8013032:	440b      	add	r3, r1
 8013034:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013038:	461a      	mov	r2, r3
 801303a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801303e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013046:	4413      	add	r3, r2
 8013048:	429c      	cmp	r4, r3
 801304a:	dd65      	ble.n	8013118 <create_DijkstraMap+0x1a60>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 801304c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013050:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013054:	881a      	ldrh	r2, [r3, #0]
 8013056:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801305a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801305e:	8819      	ldrh	r1, [r3, #0]
 8013060:	4838      	ldr	r0, [pc, #224]	; (8013144 <create_DijkstraMap+0x1a8c>)
 8013062:	4613      	mov	r3, r2
 8013064:	011b      	lsls	r3, r3, #4
 8013066:	1a9b      	subs	r3, r3, r2
 8013068:	440b      	add	r3, r1
 801306a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801306e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013072:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013076:	881b      	ldrh	r3, [r3, #0]
 8013078:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801307c:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8013080:	8812      	ldrh	r2, [r2, #0]
 8013082:	3201      	adds	r2, #1
 8013084:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8013088:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 801308c:	8809      	ldrh	r1, [r1, #0]
 801308e:	3901      	subs	r1, #1
 8013090:	4403      	add	r3, r0
 8013092:	b29c      	uxth	r4, r3
 8013094:	482b      	ldr	r0, [pc, #172]	; (8013144 <create_DijkstraMap+0x1a8c>)
 8013096:	4613      	mov	r3, r2
 8013098:	011b      	lsls	r3, r3, #4
 801309a:	1a9b      	subs	r3, r3, r2
 801309c:	440b      	add	r3, r1
 801309e:	33f0      	adds	r3, #240	; 0xf0
 80130a0:	4622      	mov	r2, r4
 80130a2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate+1);
 80130a6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80130aa:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80130ae:	881b      	ldrh	r3, [r3, #0]
 80130b0:	3301      	adds	r3, #1
 80130b2:	b29a      	uxth	r2, r3
 80130b4:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80130b8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80130bc:	4611      	mov	r1, r2
 80130be:	4618      	mov	r0, r3
 80130c0:	f001 fe4c 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate-1);
 80130c4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80130c8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80130cc:	881b      	ldrh	r3, [r3, #0]
 80130ce:	3b01      	subs	r3, #1
 80130d0:	b29a      	uxth	r2, r3
 80130d2:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80130d6:	f103 0320 	add.w	r3, r3, #32
 80130da:	3b0c      	subs	r3, #12
 80130dc:	4611      	mov	r1, r2
 80130de:	4618      	mov	r0, r3
 80130e0:	f001 fe3c 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 80130e4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80130e8:	3b14      	subs	r3, #20
 80130ea:	2100      	movs	r1, #0
 80130ec:	4618      	mov	r0, r3
 80130ee:	f001 fe35 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 80130f2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80130f6:	3b3c      	subs	r3, #60	; 0x3c
 80130f8:	2103      	movs	r1, #3
 80130fa:	4618      	mov	r0, r3
 80130fc:	f001 fe2e 	bl	8014d5c <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8013100:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013104:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013108:	881a      	ldrh	r2, [r3, #0]
 801310a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801310e:	3b64      	subs	r3, #100	; 0x64
 8013110:	4611      	mov	r1, r2
 8013112:	4618      	mov	r0, r3
 8013114:	f001 fe22 	bl	8014d5c <pushStack_walk>
						}
					}

				}

		count_number+=1;
 8013118:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801311c:	f103 036e 	add.w	r3, r3, #110	; 0x6e
 8013120:	881b      	ldrh	r3, [r3, #0]
 8013122:	3301      	adds	r3, #1
 8013124:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013128:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 801312c:	8013      	strh	r3, [r2, #0]
		Xcoordinate = popStack_walk(&stack_x);
 801312e:	f7fe bc0e 	b.w	801194e <create_DijkstraMap+0x296>

		}



}
 8013132:	bf00      	nop
 8013134:	f507 479d 	add.w	r7, r7, #20096	; 0x4e80
 8013138:	3704      	adds	r7, #4
 801313a:	46bd      	mov	sp, r7
 801313c:	bd90      	pop	{r4, r7, pc}
 801313e:	bf00      	nop
 8013140:	20000c3c 	.word	0x20000c3c
 8013144:	20000f30 	.word	0x20000f30

08013148 <route_Dijkstra>:





void route_Dijkstra(void){
 8013148:	b5f0      	push	{r4, r5, r6, r7, lr}
 801314a:	f5ad 4dbc 	sub.w	sp, sp, #24064	; 0x5e00
 801314e:	b089      	sub	sp, #36	; 0x24
 8013150:	af04      	add	r7, sp, #16
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_x_unknow;
	STACK_T stack_y_unknow;
	STACK_T stack_matrix_unknow;//行列
	initStack_walk(&stack_x);
 8013152:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013156:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801315a:	4618      	mov	r0, r3
 801315c:	f001 fdee 	bl	8014d3c <initStack_walk>
	initStack_walk(&stack_y);
 8013160:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013164:	f103 0310 	add.w	r3, r3, #16
 8013168:	3b1c      	subs	r3, #28
 801316a:	4618      	mov	r0, r3
 801316c:	f001 fde6 	bl	8014d3c <initStack_walk>
	initStack_walk(&stack_matrix);
 8013170:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013174:	f103 0310 	add.w	r3, r3, #16
 8013178:	3b04      	subs	r3, #4
 801317a:	4618      	mov	r0, r3
 801317c:	f001 fdde 	bl	8014d3c <initStack_walk>
	initStack_walk(&g_Goal_x);
 8013180:	48ce      	ldr	r0, [pc, #824]	; (80134bc <route_Dijkstra+0x374>)
 8013182:	f001 fddb 	bl	8014d3c <initStack_walk>
	initStack_walk(&g_Goal_y);
 8013186:	48ce      	ldr	r0, [pc, #824]	; (80134c0 <route_Dijkstra+0x378>)
 8013188:	f001 fdd8 	bl	8014d3c <initStack_walk>

	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 801318c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013190:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013194:	2100      	movs	r1, #0
 8013196:	4618      	mov	r0, r3
 8013198:	f001 fde0 	bl	8014d5c <pushStack_walk>
 801319c:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80131a0:	f103 0310 	add.w	r3, r3, #16
 80131a4:	3b1c      	subs	r3, #28
 80131a6:	2100      	movs	r1, #0
 80131a8:	4618      	mov	r0, r3
 80131aa:	f001 fdd7 	bl	8014d5c <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);
 80131ae:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80131b2:	f103 0310 	add.w	r3, r3, #16
 80131b6:	3b04      	subs	r3, #4
 80131b8:	2100      	movs	r1, #0
 80131ba:	4618      	mov	r0, r3
 80131bc:	f001 fdce 	bl	8014d5c <pushStack_walk>

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 80131c0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131c4:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80131c8:	2200      	movs	r2, #0
 80131ca:	601a      	str	r2, [r3, #0]
	int y = 0;
 80131cc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131d0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80131d4:	2200      	movs	r2, #0
 80131d6:	601a      	str	r2, [r3, #0]
	int direction = 1;
 80131d8:	2301      	movs	r3, #1
 80131da:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80131de:	f102 020c 	add.w	r2, r2, #12
 80131e2:	6013      	str	r3, [r2, #0]


	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 80131e4:	f107 0110 	add.w	r1, r7, #16
 80131e8:	3910      	subs	r1, #16
 80131ea:	f107 0310 	add.w	r3, r7, #16
 80131ee:	3b0c      	subs	r3, #12
 80131f0:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80131f4:	f102 020c 	add.w	r2, r2, #12
 80131f8:	6812      	ldr	r2, [r2, #0]
 80131fa:	4618      	mov	r0, r3
 80131fc:	f7fa fe76 	bl	800deec <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 8013200:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013204:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	2b01      	cmp	r3, #1
 801320c:	d006      	beq.n	801321c <route_Dijkstra+0xd4>
 801320e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013212:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	2b02      	cmp	r3, #2
 801321a:	d10f      	bne.n	801323c <route_Dijkstra+0xf4>
 801321c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013220:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	2b00      	cmp	r3, #0
 8013228:	f000 837b 	beq.w	8013922 <route_Dijkstra+0x7da>
 801322c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013230:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	2b01      	cmp	r3, #1
 8013238:	f000 8373 	beq.w	8013922 <route_Dijkstra+0x7da>
					break;
		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 801323c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013240:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013244:	6818      	ldr	r0, [r3, #0]
 8013246:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801324a:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801324e:	6819      	ldr	r1, [r3, #0]
 8013250:	f107 0210 	add.w	r2, r7, #16
 8013254:	3a05      	subs	r2, #5
 8013256:	f107 0310 	add.w	r3, r7, #16
 801325a:	3b07      	subs	r3, #7
 801325c:	9301      	str	r3, [sp, #4]
 801325e:	f107 0310 	add.w	r3, r7, #16
 8013262:	3b06      	subs	r3, #6
 8013264:	9300      	str	r3, [sp, #0]
 8013266:	4613      	mov	r3, r2
 8013268:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801326c:	f102 020c 	add.w	r2, r2, #12
 8013270:	6812      	ldr	r2, [r2, #0]
 8013272:	f7fd fe05 	bl	8010e80 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 8013276:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801327a:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801327e:	6819      	ldr	r1, [r3, #0]
 8013280:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013284:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013288:	681c      	ldr	r4, [r3, #0]
 801328a:	f107 0310 	add.w	r3, r7, #16
 801328e:	3b04      	subs	r3, #4
 8013290:	f107 0210 	add.w	r2, r7, #16
 8013294:	3a02      	subs	r2, #2
 8013296:	f107 0610 	add.w	r6, r7, #16
 801329a:	f107 0090 	add.w	r0, r7, #144	; 0x90
 801329e:	387e      	subs	r0, #126	; 0x7e
 80132a0:	f507 45bc 	add.w	r5, r7, #24064	; 0x5e00
 80132a4:	f105 050c 	add.w	r5, r5, #12
 80132a8:	682d      	ldr	r5, [r5, #0]
 80132aa:	9502      	str	r5, [sp, #8]
 80132ac:	9401      	str	r4, [sp, #4]
 80132ae:	9100      	str	r1, [sp, #0]
 80132b0:	4631      	mov	r1, r6
 80132b2:	f7fe f967 	bl	8011584 <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 80132b6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132ba:	f6a3 6305 	subw	r3, r3, #3589	; 0xe05
 80132be:	781b      	ldrb	r3, [r3, #0]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d006      	beq.n	80132d2 <route_Dijkstra+0x18a>
 80132c4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132c8:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 80132cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132d0:	801a      	strh	r2, [r3, #0]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 80132d2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132d6:	f6a3 6306 	subw	r3, r3, #3590	; 0xe06
 80132da:	781b      	ldrb	r3, [r3, #0]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d006      	beq.n	80132ee <route_Dijkstra+0x1a6>
 80132e0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132e4:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 80132e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132ec:	801a      	strh	r2, [r3, #0]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 80132ee:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132f2:	f6a3 6307 	subw	r3, r3, #3591	; 0xe07
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d006      	beq.n	801330a <route_Dijkstra+0x1c2>
 80132fc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013300:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013308:	801a      	strh	r2, [r3, #0]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 801330a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801330e:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013312:	881b      	ldrh	r3, [r3, #0]
 8013314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013318:	4293      	cmp	r3, r2
 801331a:	d11b      	bne.n	8013354 <route_Dijkstra+0x20c>
 801331c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013320:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013324:	881b      	ldrh	r3, [r3, #0]
 8013326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801332a:	4293      	cmp	r3, r2
 801332c:	d112      	bne.n	8013354 <route_Dijkstra+0x20c>
 801332e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013332:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013336:	881b      	ldrh	r3, [r3, #0]
 8013338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801333c:	4293      	cmp	r3, r2
 801333e:	d109      	bne.n	8013354 <route_Dijkstra+0x20c>
 8013340:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013344:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013348:	881b      	ldrh	r3, [r3, #0]
 801334a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801334e:	4293      	cmp	r3, r2
 8013350:	f000 82e6 	beq.w	8013920 <route_Dijkstra+0x7d8>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 8013354:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013358:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 801335c:	881a      	ldrh	r2, [r3, #0]
 801335e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013362:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013366:	881b      	ldrh	r3, [r3, #0]
 8013368:	429a      	cmp	r2, r3
 801336a:	f200 80d4 	bhi.w	8013516 <route_Dijkstra+0x3ce>
 801336e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013372:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013376:	881a      	ldrh	r2, [r3, #0]
 8013378:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801337c:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013380:	881b      	ldrh	r3, [r3, #0]
 8013382:	429a      	cmp	r2, r3
 8013384:	f200 80c7 	bhi.w	8013516 <route_Dijkstra+0x3ce>
 8013388:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801338c:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013390:	881a      	ldrh	r2, [r3, #0]
 8013392:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013396:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 801339a:	881b      	ldrh	r3, [r3, #0]
 801339c:	429a      	cmp	r2, r3
 801339e:	f200 80ba 	bhi.w	8013516 <route_Dijkstra+0x3ce>
			// 直進
			switch (direction) {		//
 80133a2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80133a6:	f103 030c 	add.w	r3, r3, #12
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	3b01      	subs	r3, #1
 80133ae:	2b03      	cmp	r3, #3
 80133b0:	f200 80b2 	bhi.w	8013518 <route_Dijkstra+0x3d0>
 80133b4:	a201      	add	r2, pc, #4	; (adr r2, 80133bc <route_Dijkstra+0x274>)
 80133b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133ba:	bf00      	nop
 80133bc:	080133cd 	.word	0x080133cd
 80133c0:	0801341b 	.word	0x0801341b
 80133c4:	08013469 	.word	0x08013469
 80133c8:	080134c5 	.word	0x080134c5
			case 1:
				pushStack_walk(&stack_x,x);
 80133cc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133d0:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	b29a      	uxth	r2, r3
 80133d8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80133dc:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80133e0:	4611      	mov	r1, r2
 80133e2:	4618      	mov	r0, r3
 80133e4:	f001 fcba 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80133e8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133ec:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	b29a      	uxth	r2, r3
 80133f4:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80133f8:	f103 0310 	add.w	r3, r3, #16
 80133fc:	3b1c      	subs	r3, #28
 80133fe:	4611      	mov	r1, r2
 8013400:	4618      	mov	r0, r3
 8013402:	f001 fcab 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013406:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801340a:	f103 0310 	add.w	r3, r3, #16
 801340e:	3b04      	subs	r3, #4
 8013410:	2100      	movs	r1, #0
 8013412:	4618      	mov	r0, r3
 8013414:	f001 fca2 	bl	8014d5c <pushStack_walk>
				break;
 8013418:	e07e      	b.n	8013518 <route_Dijkstra+0x3d0>
			case 2:
				pushStack_walk(&stack_x,x);
 801341a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801341e:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	b29a      	uxth	r2, r3
 8013426:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801342a:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801342e:	4611      	mov	r1, r2
 8013430:	4618      	mov	r0, r3
 8013432:	f001 fc93 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013436:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801343a:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	b29a      	uxth	r2, r3
 8013442:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013446:	f103 0310 	add.w	r3, r3, #16
 801344a:	3b1c      	subs	r3, #28
 801344c:	4611      	mov	r1, r2
 801344e:	4618      	mov	r0, r3
 8013450:	f001 fc84 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013454:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013458:	f103 0310 	add.w	r3, r3, #16
 801345c:	3b04      	subs	r3, #4
 801345e:	2101      	movs	r1, #1
 8013460:	4618      	mov	r0, r3
 8013462:	f001 fc7b 	bl	8014d5c <pushStack_walk>
				break;
 8013466:	e057      	b.n	8013518 <route_Dijkstra+0x3d0>
			case 3:
				pushStack_walk(&stack_x,x);
 8013468:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801346c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	b29a      	uxth	r2, r3
 8013474:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013478:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801347c:	4611      	mov	r1, r2
 801347e:	4618      	mov	r0, r3
 8013480:	f001 fc6c 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 8013484:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013488:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	b29b      	uxth	r3, r3
 8013490:	3b01      	subs	r3, #1
 8013492:	b29a      	uxth	r2, r3
 8013494:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013498:	f103 0310 	add.w	r3, r3, #16
 801349c:	3b1c      	subs	r3, #28
 801349e:	4611      	mov	r1, r2
 80134a0:	4618      	mov	r0, r3
 80134a2:	f001 fc5b 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80134a6:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80134aa:	f103 0310 	add.w	r3, r3, #16
 80134ae:	3b04      	subs	r3, #4
 80134b0:	2100      	movs	r1, #0
 80134b2:	4618      	mov	r0, r3
 80134b4:	f001 fc52 	bl	8014d5c <pushStack_walk>
				break;
 80134b8:	e02e      	b.n	8013518 <route_Dijkstra+0x3d0>
 80134ba:	bf00      	nop
 80134bc:	200012f0 	.word	0x200012f0
 80134c0:	20002298 	.word	0x20002298
			case 4:
				pushStack_walk(&stack_x,x-1);
 80134c4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80134c8:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	3b01      	subs	r3, #1
 80134d2:	b29a      	uxth	r2, r3
 80134d4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80134d8:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80134dc:	4611      	mov	r1, r2
 80134de:	4618      	mov	r0, r3
 80134e0:	f001 fc3c 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80134e4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80134e8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	b29a      	uxth	r2, r3
 80134f0:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80134f4:	f103 0310 	add.w	r3, r3, #16
 80134f8:	3b1c      	subs	r3, #28
 80134fa:	4611      	mov	r1, r2
 80134fc:	4618      	mov	r0, r3
 80134fe:	f001 fc2d 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013502:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013506:	f103 0310 	add.w	r3, r3, #16
 801350a:	3b04      	subs	r3, #4
 801350c:	2101      	movs	r1, #1
 801350e:	4618      	mov	r0, r3
 8013510:	f001 fc24 	bl	8014d5c <pushStack_walk>
				break;
 8013514:	e000      	b.n	8013518 <route_Dijkstra+0x3d0>
			}

		}
 8013516:	bf00      	nop

		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 8013518:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801351c:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013520:	881a      	ldrh	r2, [r3, #0]
 8013522:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013526:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 801352a:	881b      	ldrh	r3, [r3, #0]
 801352c:	429a      	cmp	r2, r3
 801352e:	f080 80da 	bcs.w	80136e6 <route_Dijkstra+0x59e>
 8013532:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013536:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 801353a:	881a      	ldrh	r2, [r3, #0]
 801353c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013540:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013544:	881b      	ldrh	r3, [r3, #0]
 8013546:	429a      	cmp	r2, r3
 8013548:	f200 80cd 	bhi.w	80136e6 <route_Dijkstra+0x59e>
 801354c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013550:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013554:	881a      	ldrh	r2, [r3, #0]
 8013556:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801355a:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 801355e:	881b      	ldrh	r3, [r3, #0]
 8013560:	429a      	cmp	r2, r3
 8013562:	f200 80c0 	bhi.w	80136e6 <route_Dijkstra+0x59e>
			// 右旋回
			switch (direction) {		//
 8013566:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801356a:	f103 030c 	add.w	r3, r3, #12
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	3b01      	subs	r3, #1
 8013572:	2b03      	cmp	r3, #3
 8013574:	f200 80ac 	bhi.w	80136d0 <route_Dijkstra+0x588>
 8013578:	a201      	add	r2, pc, #4	; (adr r2, 8013580 <route_Dijkstra+0x438>)
 801357a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801357e:	bf00      	nop
 8013580:	08013591 	.word	0x08013591
 8013584:	080135df 	.word	0x080135df
 8013588:	08013631 	.word	0x08013631
 801358c:	08013683 	.word	0x08013683
			case 1:
				pushStack_walk(&stack_x,x);
 8013590:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013594:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	b29a      	uxth	r2, r3
 801359c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80135a0:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80135a4:	4611      	mov	r1, r2
 80135a6:	4618      	mov	r0, r3
 80135a8:	f001 fbd8 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80135ac:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80135b0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	b29a      	uxth	r2, r3
 80135b8:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80135bc:	f103 0310 	add.w	r3, r3, #16
 80135c0:	3b1c      	subs	r3, #28
 80135c2:	4611      	mov	r1, r2
 80135c4:	4618      	mov	r0, r3
 80135c6:	f001 fbc9 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80135ca:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80135ce:	f103 0310 	add.w	r3, r3, #16
 80135d2:	3b04      	subs	r3, #4
 80135d4:	2101      	movs	r1, #1
 80135d6:	4618      	mov	r0, r3
 80135d8:	f001 fbc0 	bl	8014d5c <pushStack_walk>
				break;
 80135dc:	e078      	b.n	80136d0 <route_Dijkstra+0x588>
			case 2:
				pushStack_walk(&stack_x,x);
 80135de:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80135e2:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	b29a      	uxth	r2, r3
 80135ea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80135ee:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80135f2:	4611      	mov	r1, r2
 80135f4:	4618      	mov	r0, r3
 80135f6:	f001 fbb1 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 80135fa:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80135fe:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	b29b      	uxth	r3, r3
 8013606:	3b01      	subs	r3, #1
 8013608:	b29a      	uxth	r2, r3
 801360a:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 801360e:	f103 0310 	add.w	r3, r3, #16
 8013612:	3b1c      	subs	r3, #28
 8013614:	4611      	mov	r1, r2
 8013616:	4618      	mov	r0, r3
 8013618:	f001 fba0 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 801361c:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013620:	f103 0310 	add.w	r3, r3, #16
 8013624:	3b04      	subs	r3, #4
 8013626:	2100      	movs	r1, #0
 8013628:	4618      	mov	r0, r3
 801362a:	f001 fb97 	bl	8014d5c <pushStack_walk>
				break;
 801362e:	e04f      	b.n	80136d0 <route_Dijkstra+0x588>
			case 3:
				pushStack_walk(&stack_x,x-1);
 8013630:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013634:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	b29b      	uxth	r3, r3
 801363c:	3b01      	subs	r3, #1
 801363e:	b29a      	uxth	r2, r3
 8013640:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013644:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013648:	4611      	mov	r1, r2
 801364a:	4618      	mov	r0, r3
 801364c:	f001 fb86 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013650:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013654:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	b29a      	uxth	r2, r3
 801365c:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013660:	f103 0310 	add.w	r3, r3, #16
 8013664:	3b1c      	subs	r3, #28
 8013666:	4611      	mov	r1, r2
 8013668:	4618      	mov	r0, r3
 801366a:	f001 fb77 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 801366e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013672:	f103 0310 	add.w	r3, r3, #16
 8013676:	3b04      	subs	r3, #4
 8013678:	2101      	movs	r1, #1
 801367a:	4618      	mov	r0, r3
 801367c:	f001 fb6e 	bl	8014d5c <pushStack_walk>
				break;
 8013680:	e026      	b.n	80136d0 <route_Dijkstra+0x588>
			case 4:
				pushStack_walk(&stack_x,x);
 8013682:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013686:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	b29a      	uxth	r2, r3
 801368e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013692:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013696:	4611      	mov	r1, r2
 8013698:	4618      	mov	r0, r3
 801369a:	f001 fb5f 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801369e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80136a2:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	b29a      	uxth	r2, r3
 80136aa:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80136ae:	f103 0310 	add.w	r3, r3, #16
 80136b2:	3b1c      	subs	r3, #28
 80136b4:	4611      	mov	r1, r2
 80136b6:	4618      	mov	r0, r3
 80136b8:	f001 fb50 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80136bc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80136c0:	f103 0310 	add.w	r3, r3, #16
 80136c4:	3b04      	subs	r3, #4
 80136c6:	2100      	movs	r1, #0
 80136c8:	4618      	mov	r0, r3
 80136ca:	f001 fb47 	bl	8014d5c <pushStack_walk>
				break;
 80136ce:	bf00      	nop
			}
			direction++;
 80136d0:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80136d4:	f103 030c 	add.w	r3, r3, #12
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	3301      	adds	r3, #1
 80136dc:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80136e0:	f102 020c 	add.w	r2, r2, #12
 80136e4:	6013      	str	r3, [r2, #0]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 80136e6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80136ea:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80136ee:	881a      	ldrh	r2, [r3, #0]
 80136f0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80136f4:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 80136f8:	881b      	ldrh	r3, [r3, #0]
 80136fa:	429a      	cmp	r2, r3
 80136fc:	f080 80d9 	bcs.w	80138b2 <route_Dijkstra+0x76a>
 8013700:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013704:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013708:	881a      	ldrh	r2, [r3, #0]
 801370a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801370e:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013712:	881b      	ldrh	r3, [r3, #0]
 8013714:	429a      	cmp	r2, r3
 8013716:	f080 80cc 	bcs.w	80138b2 <route_Dijkstra+0x76a>
 801371a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801371e:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013722:	881a      	ldrh	r2, [r3, #0]
 8013724:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013728:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 801372c:	881b      	ldrh	r3, [r3, #0]
 801372e:	429a      	cmp	r2, r3
 8013730:	f200 80bf 	bhi.w	80138b2 <route_Dijkstra+0x76a>
			// 左旋回
			switch (direction) {		//
 8013734:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013738:	f103 030c 	add.w	r3, r3, #12
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	3b01      	subs	r3, #1
 8013740:	2b03      	cmp	r3, #3
 8013742:	f200 80ab 	bhi.w	801389c <route_Dijkstra+0x754>
 8013746:	a201      	add	r2, pc, #4	; (adr r2, 801374c <route_Dijkstra+0x604>)
 8013748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801374c:	0801375d 	.word	0x0801375d
 8013750:	080137af 	.word	0x080137af
 8013754:	080137fd 	.word	0x080137fd
 8013758:	0801384b 	.word	0x0801384b
			case 1:
				pushStack_walk(&stack_x,x-1);
 801375c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013760:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	b29b      	uxth	r3, r3
 8013768:	3b01      	subs	r3, #1
 801376a:	b29a      	uxth	r2, r3
 801376c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013770:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013774:	4611      	mov	r1, r2
 8013776:	4618      	mov	r0, r3
 8013778:	f001 faf0 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801377c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013780:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	b29a      	uxth	r2, r3
 8013788:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 801378c:	f103 0310 	add.w	r3, r3, #16
 8013790:	3b1c      	subs	r3, #28
 8013792:	4611      	mov	r1, r2
 8013794:	4618      	mov	r0, r3
 8013796:	f001 fae1 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 801379a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801379e:	f103 0310 	add.w	r3, r3, #16
 80137a2:	3b04      	subs	r3, #4
 80137a4:	2101      	movs	r1, #1
 80137a6:	4618      	mov	r0, r3
 80137a8:	f001 fad8 	bl	8014d5c <pushStack_walk>
				break;
 80137ac:	e076      	b.n	801389c <route_Dijkstra+0x754>
			case 2:
				pushStack_walk(&stack_x,x);
 80137ae:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80137b2:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	b29a      	uxth	r2, r3
 80137ba:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80137be:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80137c2:	4611      	mov	r1, r2
 80137c4:	4618      	mov	r0, r3
 80137c6:	f001 fac9 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80137ca:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80137ce:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	b29a      	uxth	r2, r3
 80137d6:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80137da:	f103 0310 	add.w	r3, r3, #16
 80137de:	3b1c      	subs	r3, #28
 80137e0:	4611      	mov	r1, r2
 80137e2:	4618      	mov	r0, r3
 80137e4:	f001 faba 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80137e8:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80137ec:	f103 0310 	add.w	r3, r3, #16
 80137f0:	3b04      	subs	r3, #4
 80137f2:	2100      	movs	r1, #0
 80137f4:	4618      	mov	r0, r3
 80137f6:	f001 fab1 	bl	8014d5c <pushStack_walk>
				break;
 80137fa:	e04f      	b.n	801389c <route_Dijkstra+0x754>
			case 3:
				pushStack_walk(&stack_x,x);
 80137fc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013800:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	b29a      	uxth	r2, r3
 8013808:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801380c:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013810:	4611      	mov	r1, r2
 8013812:	4618      	mov	r0, r3
 8013814:	f001 faa2 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013818:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801381c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	b29a      	uxth	r2, r3
 8013824:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013828:	f103 0310 	add.w	r3, r3, #16
 801382c:	3b1c      	subs	r3, #28
 801382e:	4611      	mov	r1, r2
 8013830:	4618      	mov	r0, r3
 8013832:	f001 fa93 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013836:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801383a:	f103 0310 	add.w	r3, r3, #16
 801383e:	3b04      	subs	r3, #4
 8013840:	2101      	movs	r1, #1
 8013842:	4618      	mov	r0, r3
 8013844:	f001 fa8a 	bl	8014d5c <pushStack_walk>
				break;
 8013848:	e028      	b.n	801389c <route_Dijkstra+0x754>
			case 4:
				pushStack_walk(&stack_x,x);
 801384a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801384e:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	b29a      	uxth	r2, r3
 8013856:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801385a:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801385e:	4611      	mov	r1, r2
 8013860:	4618      	mov	r0, r3
 8013862:	f001 fa7b 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 8013866:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801386a:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	b29b      	uxth	r3, r3
 8013872:	3b01      	subs	r3, #1
 8013874:	b29a      	uxth	r2, r3
 8013876:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 801387a:	f103 0310 	add.w	r3, r3, #16
 801387e:	3b1c      	subs	r3, #28
 8013880:	4611      	mov	r1, r2
 8013882:	4618      	mov	r0, r3
 8013884:	f001 fa6a 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013888:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801388c:	f103 0310 	add.w	r3, r3, #16
 8013890:	3b04      	subs	r3, #4
 8013892:	2100      	movs	r1, #0
 8013894:	4618      	mov	r0, r3
 8013896:	f001 fa61 	bl	8014d5c <pushStack_walk>
				break;
 801389a:	bf00      	nop
			}
			direction--;
 801389c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80138a0:	f103 030c 	add.w	r3, r3, #12
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	3b01      	subs	r3, #1
 80138a8:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80138ac:	f102 020c 	add.w	r2, r2, #12
 80138b0:	6013      	str	r3, [r2, #0]
		}

		if (direction == 5) {
 80138b2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80138b6:	f103 030c 	add.w	r3, r3, #12
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	2b05      	cmp	r3, #5
 80138be:	d105      	bne.n	80138cc <route_Dijkstra+0x784>
			direction = 1;
 80138c0:	2301      	movs	r3, #1
 80138c2:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80138c6:	f102 020c 	add.w	r2, r2, #12
 80138ca:	6013      	str	r3, [r2, #0]
		}
		if (direction == 6) {
 80138cc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80138d0:	f103 030c 	add.w	r3, r3, #12
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	2b06      	cmp	r3, #6
 80138d8:	d105      	bne.n	80138e6 <route_Dijkstra+0x79e>
			direction = 2;
 80138da:	2302      	movs	r3, #2
 80138dc:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80138e0:	f102 020c 	add.w	r2, r2, #12
 80138e4:	6013      	str	r3, [r2, #0]
		}
		if (direction == 0) {
 80138e6:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80138ea:	f103 030c 	add.w	r3, r3, #12
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d105      	bne.n	8013900 <route_Dijkstra+0x7b8>
			direction = 4;
 80138f4:	2304      	movs	r3, #4
 80138f6:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80138fa:	f102 020c 	add.w	r2, r2, #12
 80138fe:	6013      	str	r3, [r2, #0]
		}
		if (direction == -1) {
 8013900:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013904:	f103 030c 	add.w	r3, r3, #12
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801390e:	f47f ac69 	bne.w	80131e4 <route_Dijkstra+0x9c>
			direction = 3;
 8013912:	2303      	movs	r3, #3
 8013914:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013918:	f102 020c 	add.w	r2, r2, #12
 801391c:	6013      	str	r3, [r2, #0]
		update_coordinate(&x,&y,direction);
 801391e:	e461      	b.n	80131e4 <route_Dijkstra+0x9c>
			break;
 8013920:	bf00      	nop
	}

	unsigned short Xcoordinate,Ycoordinate,Row_or_Column;
	while (1) {

			Xcoordinate = popStack_walk(&stack_x);
 8013922:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013926:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801392a:	4618      	mov	r0, r3
 801392c:	f001 fa40 	bl	8014db0 <popStack_walk>
 8013930:	4603      	mov	r3, r0
 8013932:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013936:	f102 020a 	add.w	r2, r2, #10
 801393a:	8013      	strh	r3, [r2, #0]
			Ycoordinate = popStack_walk(&stack_y);
 801393c:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013940:	f103 0310 	add.w	r3, r3, #16
 8013944:	3b1c      	subs	r3, #28
 8013946:	4618      	mov	r0, r3
 8013948:	f001 fa32 	bl	8014db0 <popStack_walk>
 801394c:	4603      	mov	r3, r0
 801394e:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013952:	f102 0208 	add.w	r2, r2, #8
 8013956:	8013      	strh	r3, [r2, #0]
			Row_or_Column = popStack_walk(&stack_matrix);
 8013958:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801395c:	f103 0310 	add.w	r3, r3, #16
 8013960:	3b04      	subs	r3, #4
 8013962:	4618      	mov	r0, r3
 8013964:	f001 fa24 	bl	8014db0 <popStack_walk>
 8013968:	4603      	mov	r3, r0
 801396a:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801396e:	f102 0206 	add.w	r2, r2, #6
 8013972:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013974:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013978:	f103 030a 	add.w	r3, r3, #10
 801397c:	881b      	ldrh	r3, [r3, #0]
 801397e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013982:	4293      	cmp	r3, r2
 8013984:	f000 80d5 	beq.w	8013b32 <route_Dijkstra+0x9ea>
 8013988:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801398c:	f103 0308 	add.w	r3, r3, #8
 8013990:	881b      	ldrh	r3, [r3, #0]
 8013992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013996:	4293      	cmp	r3, r2
 8013998:	f000 80cb 	beq.w	8013b32 <route_Dijkstra+0x9ea>
				//printf("stack_end\n");
				break;
			}
			if(Row_or_Column==COLUMN && ((wall.column_look[Ycoordinate] & (1 << Xcoordinate)) == 0)){
 801399c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139a0:	f103 0306 	add.w	r3, r3, #6
 80139a4:	881b      	ldrh	r3, [r3, #0]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d15c      	bne.n	8013a64 <route_Dijkstra+0x91c>
 80139aa:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139ae:	f103 0308 	add.w	r3, r3, #8
 80139b2:	881b      	ldrh	r3, [r3, #0]
 80139b4:	4a62      	ldr	r2, [pc, #392]	; (8013b40 <route_Dijkstra+0x9f8>)
 80139b6:	332c      	adds	r3, #44	; 0x2c
 80139b8:	005b      	lsls	r3, r3, #1
 80139ba:	4413      	add	r3, r2
 80139bc:	885b      	ldrh	r3, [r3, #2]
 80139be:	461a      	mov	r2, r3
 80139c0:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139c4:	f103 030a 	add.w	r3, r3, #10
 80139c8:	881b      	ldrh	r3, [r3, #0]
 80139ca:	fa42 f303 	asr.w	r3, r2, r3
 80139ce:	f003 0301 	and.w	r3, r3, #1
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d146      	bne.n	8013a64 <route_Dijkstra+0x91c>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 80139d6:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139da:	f103 030a 	add.w	r3, r3, #10
 80139de:	881a      	ldrh	r2, [r3, #0]
 80139e0:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139e4:	f103 0308 	add.w	r3, r3, #8
 80139e8:	881b      	ldrh	r3, [r3, #0]
 80139ea:	4956      	ldr	r1, [pc, #344]	; (8013b44 <route_Dijkstra+0x9fc>)
 80139ec:	0112      	lsls	r2, r2, #4
 80139ee:	4413      	add	r3, r2
 80139f0:	2200      	movs	r2, #0
 80139f2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate][Ycoordinate + 1] = 0;
 80139f6:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139fa:	f103 030a 	add.w	r3, r3, #10
 80139fe:	881a      	ldrh	r2, [r3, #0]
 8013a00:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a04:	f103 0308 	add.w	r3, r3, #8
 8013a08:	881b      	ldrh	r3, [r3, #0]
 8013a0a:	3301      	adds	r3, #1
 8013a0c:	494d      	ldr	r1, [pc, #308]	; (8013b44 <route_Dijkstra+0x9fc>)
 8013a0e:	0112      	lsls	r2, r2, #4
 8013a10:	4413      	add	r3, r2
 8013a12:	2200      	movs	r2, #0
 8013a14:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013a18:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a1c:	f103 030a 	add.w	r3, r3, #10
 8013a20:	881b      	ldrh	r3, [r3, #0]
 8013a22:	4619      	mov	r1, r3
 8013a24:	4848      	ldr	r0, [pc, #288]	; (8013b48 <route_Dijkstra+0xa00>)
 8013a26:	f001 f999 	bl	8014d5c <pushStack_walk>
 8013a2a:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a2e:	f103 0308 	add.w	r3, r3, #8
 8013a32:	881b      	ldrh	r3, [r3, #0]
 8013a34:	4619      	mov	r1, r3
 8013a36:	4845      	ldr	r0, [pc, #276]	; (8013b4c <route_Dijkstra+0xa04>)
 8013a38:	f001 f990 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate+1);
 8013a3c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a40:	f103 030a 	add.w	r3, r3, #10
 8013a44:	881b      	ldrh	r3, [r3, #0]
 8013a46:	4619      	mov	r1, r3
 8013a48:	483f      	ldr	r0, [pc, #252]	; (8013b48 <route_Dijkstra+0xa00>)
 8013a4a:	f001 f987 	bl	8014d5c <pushStack_walk>
 8013a4e:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a52:	f103 0308 	add.w	r3, r3, #8
 8013a56:	881b      	ldrh	r3, [r3, #0]
 8013a58:	3301      	adds	r3, #1
 8013a5a:	b29b      	uxth	r3, r3
 8013a5c:	4619      	mov	r1, r3
 8013a5e:	483b      	ldr	r0, [pc, #236]	; (8013b4c <route_Dijkstra+0xa04>)
 8013a60:	f001 f97c 	bl	8014d5c <pushStack_walk>
			}
			if(Row_or_Column==ROW && ((wall.row_look[Xcoordinate] & (1 << Ycoordinate)) == 0)){
 8013a64:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a68:	f103 0306 	add.w	r3, r3, #6
 8013a6c:	881b      	ldrh	r3, [r3, #0]
 8013a6e:	2b01      	cmp	r3, #1
 8013a70:	f47f af57 	bne.w	8013922 <route_Dijkstra+0x7da>
 8013a74:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a78:	f103 030a 	add.w	r3, r3, #10
 8013a7c:	881b      	ldrh	r3, [r3, #0]
 8013a7e:	4a30      	ldr	r2, [pc, #192]	; (8013b40 <route_Dijkstra+0x9f8>)
 8013a80:	331c      	adds	r3, #28
 8013a82:	005b      	lsls	r3, r3, #1
 8013a84:	4413      	add	r3, r2
 8013a86:	889b      	ldrh	r3, [r3, #4]
 8013a88:	461a      	mov	r2, r3
 8013a8a:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a8e:	f103 0308 	add.w	r3, r3, #8
 8013a92:	881b      	ldrh	r3, [r3, #0]
 8013a94:	fa42 f303 	asr.w	r3, r2, r3
 8013a98:	f003 0301 	and.w	r3, r3, #1
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	f47f af40 	bne.w	8013922 <route_Dijkstra+0x7da>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 8013aa2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013aa6:	f103 030a 	add.w	r3, r3, #10
 8013aaa:	881a      	ldrh	r2, [r3, #0]
 8013aac:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013ab0:	f103 0308 	add.w	r3, r3, #8
 8013ab4:	881b      	ldrh	r3, [r3, #0]
 8013ab6:	4923      	ldr	r1, [pc, #140]	; (8013b44 <route_Dijkstra+0x9fc>)
 8013ab8:	0112      	lsls	r2, r2, #4
 8013aba:	4413      	add	r3, r2
 8013abc:	2200      	movs	r2, #0
 8013abe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate + 1][Ycoordinate] = 0;
 8013ac2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013ac6:	f103 030a 	add.w	r3, r3, #10
 8013aca:	881b      	ldrh	r3, [r3, #0]
 8013acc:	1c5a      	adds	r2, r3, #1
 8013ace:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013ad2:	f103 0308 	add.w	r3, r3, #8
 8013ad6:	881b      	ldrh	r3, [r3, #0]
 8013ad8:	491a      	ldr	r1, [pc, #104]	; (8013b44 <route_Dijkstra+0x9fc>)
 8013ada:	0112      	lsls	r2, r2, #4
 8013adc:	4413      	add	r3, r2
 8013ade:	2200      	movs	r2, #0
 8013ae0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013ae4:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013ae8:	f103 030a 	add.w	r3, r3, #10
 8013aec:	881b      	ldrh	r3, [r3, #0]
 8013aee:	4619      	mov	r1, r3
 8013af0:	4815      	ldr	r0, [pc, #84]	; (8013b48 <route_Dijkstra+0xa00>)
 8013af2:	f001 f933 	bl	8014d5c <pushStack_walk>
 8013af6:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013afa:	f103 0308 	add.w	r3, r3, #8
 8013afe:	881b      	ldrh	r3, [r3, #0]
 8013b00:	4619      	mov	r1, r3
 8013b02:	4812      	ldr	r0, [pc, #72]	; (8013b4c <route_Dijkstra+0xa04>)
 8013b04:	f001 f92a 	bl	8014d5c <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate+1);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013b08:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013b0c:	f103 030a 	add.w	r3, r3, #10
 8013b10:	881b      	ldrh	r3, [r3, #0]
 8013b12:	3301      	adds	r3, #1
 8013b14:	b29b      	uxth	r3, r3
 8013b16:	4619      	mov	r1, r3
 8013b18:	480b      	ldr	r0, [pc, #44]	; (8013b48 <route_Dijkstra+0xa00>)
 8013b1a:	f001 f91f 	bl	8014d5c <pushStack_walk>
 8013b1e:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013b22:	f103 0308 	add.w	r3, r3, #8
 8013b26:	881b      	ldrh	r3, [r3, #0]
 8013b28:	4619      	mov	r1, r3
 8013b2a:	4808      	ldr	r0, [pc, #32]	; (8013b4c <route_Dijkstra+0xa04>)
 8013b2c:	f001 f916 	bl	8014d5c <pushStack_walk>
			Xcoordinate = popStack_walk(&stack_x);
 8013b30:	e6f7      	b.n	8013922 <route_Dijkstra+0x7da>
			}
	}


}
 8013b32:	bf00      	nop
 8013b34:	f507 47bc 	add.w	r7, r7, #24064	; 0x5e00
 8013b38:	3714      	adds	r7, #20
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b3e:	bf00      	nop
 8013b40:	20000c3c 	.word	0x20000c3c
 8013b44:	20000d30 	.word	0x20000d30
 8013b48:	200012f0 	.word	0x200012f0
 8013b4c:	20002298 	.word	0x20002298

08013b50 <create_StepCountMap_unknown>:




void create_StepCountMap_unknown(void){
 8013b50:	b580      	push	{r7, lr}
 8013b52:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8013b56:	b082      	sub	sp, #8
 8013b58:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	unsigned short goalX,goalY;
	for(uint8_t xx = 0;xx <= 15;xx++){
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013b60:	f102 0207 	add.w	r2, r2, #7
 8013b64:	7013      	strb	r3, [r2, #0]
 8013b66:	e033      	b.n	8013bd0 <create_StepCountMap_unknown+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 8013b68:	2300      	movs	r3, #0
 8013b6a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013b6e:	f102 0206 	add.w	r2, r2, #6
 8013b72:	7013      	strb	r3, [r2, #0]
 8013b74:	e01a      	b.n	8013bac <create_StepCountMap_unknown+0x5c>
			walk_count[xx][yy] = 255;
 8013b76:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013b7a:	f103 0307 	add.w	r3, r3, #7
 8013b7e:	781a      	ldrb	r2, [r3, #0]
 8013b80:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013b84:	f103 0306 	add.w	r3, r3, #6
 8013b88:	781b      	ldrb	r3, [r3, #0]
 8013b8a:	4966      	ldr	r1, [pc, #408]	; (8013d24 <create_StepCountMap_unknown+0x1d4>)
 8013b8c:	0112      	lsls	r2, r2, #4
 8013b8e:	4413      	add	r3, r2
 8013b90:	22ff      	movs	r2, #255	; 0xff
 8013b92:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 8013b96:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013b9a:	f103 0306 	add.w	r3, r3, #6
 8013b9e:	781b      	ldrb	r3, [r3, #0]
 8013ba0:	3301      	adds	r3, #1
 8013ba2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013ba6:	f102 0206 	add.w	r2, r2, #6
 8013baa:	7013      	strb	r3, [r2, #0]
 8013bac:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013bb0:	f103 0306 	add.w	r3, r3, #6
 8013bb4:	781b      	ldrb	r3, [r3, #0]
 8013bb6:	2b0f      	cmp	r3, #15
 8013bb8:	d9dd      	bls.n	8013b76 <create_StepCountMap_unknown+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 8013bba:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013bbe:	f103 0307 	add.w	r3, r3, #7
 8013bc2:	781b      	ldrb	r3, [r3, #0]
 8013bc4:	3301      	adds	r3, #1
 8013bc6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013bca:	f102 0207 	add.w	r2, r2, #7
 8013bce:	7013      	strb	r3, [r2, #0]
 8013bd0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013bd4:	f103 0307 	add.w	r3, r3, #7
 8013bd8:	781b      	ldrb	r3, [r3, #0]
 8013bda:	2b0f      	cmp	r3, #15
 8013bdc:	d9c4      	bls.n	8013b68 <create_StepCountMap_unknown+0x18>
		}
	}

	initStack_walk(&stack_x);
 8013bde:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013be2:	4618      	mov	r0, r3
 8013be4:	f001 f8aa 	bl	8014d3c <initStack_walk>
	initStack_walk(&stack_y);
 8013be8:	f107 0308 	add.w	r3, r7, #8
 8013bec:	3b04      	subs	r3, #4
 8013bee:	4618      	mov	r0, r3
 8013bf0:	f001 f8a4 	bl	8014d3c <initStack_walk>

	while (1) {

			goalX = popStack_walk(&g_Goal_x);
 8013bf4:	484c      	ldr	r0, [pc, #304]	; (8013d28 <create_StepCountMap_unknown+0x1d8>)
 8013bf6:	f001 f8db 	bl	8014db0 <popStack_walk>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013c00:	f102 021a 	add.w	r2, r2, #26
 8013c04:	8013      	strh	r3, [r2, #0]
			goalY = popStack_walk(&g_Goal_y);
 8013c06:	4849      	ldr	r0, [pc, #292]	; (8013d2c <create_StepCountMap_unknown+0x1dc>)
 8013c08:	f001 f8d2 	bl	8014db0 <popStack_walk>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013c12:	f102 0218 	add.w	r2, r2, #24
 8013c16:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (goalX == 65535 || goalY == 65535) {
 8013c18:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c1c:	f103 031a 	add.w	r3, r3, #26
 8013c20:	881b      	ldrh	r3, [r3, #0]
 8013c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c26:	4293      	cmp	r3, r2
 8013c28:	d030      	beq.n	8013c8c <create_StepCountMap_unknown+0x13c>
 8013c2a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c2e:	f103 0318 	add.w	r3, r3, #24
 8013c32:	881b      	ldrh	r3, [r3, #0]
 8013c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c38:	4293      	cmp	r3, r2
 8013c3a:	d027      	beq.n	8013c8c <create_StepCountMap_unknown+0x13c>
				//printf("stack_end\n");
				break;
			}
			walk_count[goalX][goalY] = 0;
 8013c3c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c40:	f103 031a 	add.w	r3, r3, #26
 8013c44:	881a      	ldrh	r2, [r3, #0]
 8013c46:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c4a:	f103 0318 	add.w	r3, r3, #24
 8013c4e:	881b      	ldrh	r3, [r3, #0]
 8013c50:	4934      	ldr	r1, [pc, #208]	; (8013d24 <create_StepCountMap_unknown+0x1d4>)
 8013c52:	0112      	lsls	r2, r2, #4
 8013c54:	4413      	add	r3, r2
 8013c56:	2200      	movs	r2, #0
 8013c58:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,goalX);pushStack_walk(&stack_y,goalY);
 8013c5c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c60:	f103 031a 	add.w	r3, r3, #26
 8013c64:	881a      	ldrh	r2, [r3, #0]
 8013c66:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013c6a:	4611      	mov	r1, r2
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f001 f875 	bl	8014d5c <pushStack_walk>
 8013c72:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c76:	f103 0318 	add.w	r3, r3, #24
 8013c7a:	881a      	ldrh	r2, [r3, #0]
 8013c7c:	f107 0308 	add.w	r3, r7, #8
 8013c80:	3b04      	subs	r3, #4
 8013c82:	4611      	mov	r1, r2
 8013c84:	4618      	mov	r0, r3
 8013c86:	f001 f869 	bl	8014d5c <pushStack_walk>
			goalX = popStack_walk(&g_Goal_x);
 8013c8a:	e7b3      	b.n	8013bf4 <create_StepCountMap_unknown+0xa4>
	}
	if(stack_x.tail == stack_x.head){
 8013c8c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013c90:	f103 0308 	add.w	r3, r3, #8
 8013c94:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 8013c98:	685a      	ldr	r2, [r3, #4]
 8013c9a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013c9e:	f103 0308 	add.w	r3, r3, #8
 8013ca2:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	429a      	cmp	r2, r3
 8013caa:	d11b      	bne.n	8013ce4 <create_StepCountMap_unknown+0x194>
		walk_count[0][0] = 0;
 8013cac:	4b1d      	ldr	r3, [pc, #116]	; (8013d24 <create_StepCountMap_unknown+0x1d4>)
 8013cae:	2200      	movs	r2, #0
 8013cb0:	801a      	strh	r2, [r3, #0]
		pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8013cb2:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013cb6:	2100      	movs	r1, #0
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f001 f84f 	bl	8014d5c <pushStack_walk>
 8013cbe:	f107 0308 	add.w	r3, r7, #8
 8013cc2:	3b04      	subs	r3, #4
 8013cc4:	2100      	movs	r1, #0
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f001 f848 	bl	8014d5c <pushStack_walk>
		if (Dijkstra_maker_flag>=1){
 8013ccc:	4b18      	ldr	r3, [pc, #96]	; (8013d30 <create_StepCountMap_unknown+0x1e0>)
 8013cce:	781b      	ldrb	r3, [r3, #0]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d003      	beq.n	8013cdc <create_StepCountMap_unknown+0x18c>
			Dijkstra_maker_flag=2;
 8013cd4:	4b16      	ldr	r3, [pc, #88]	; (8013d30 <create_StepCountMap_unknown+0x1e0>)
 8013cd6:	2202      	movs	r2, #2
 8013cd8:	701a      	strb	r2, [r3, #0]
 8013cda:	e006      	b.n	8013cea <create_StepCountMap_unknown+0x19a>
		}else{
			Dijkstra_maker_flag=1;
 8013cdc:	4b14      	ldr	r3, [pc, #80]	; (8013d30 <create_StepCountMap_unknown+0x1e0>)
 8013cde:	2201      	movs	r2, #1
 8013ce0:	701a      	strb	r2, [r3, #0]
 8013ce2:	e002      	b.n	8013cea <create_StepCountMap_unknown+0x19a>
		}
	}else{
		Dijkstra_maker_flag=0;
 8013ce4:	4b12      	ldr	r3, [pc, #72]	; (8013d30 <create_StepCountMap_unknown+0x1e0>)
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	701a      	strb	r2, [r3, #0]
	}
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 8013cea:	2301      	movs	r3, #1
 8013cec:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013cf0:	f102 0204 	add.w	r2, r2, #4
 8013cf4:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013cfc:	f102 0202 	add.w	r2, r2, #2
 8013d00:	8013      	strh	r3, [r2, #0]
 8013d02:	2301      	movs	r3, #1
 8013d04:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013d08:	8013      	strh	r3, [r2, #0]
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013d10:	f102 021e 	add.w	r2, r2, #30
 8013d14:	8013      	strh	r3, [r2, #0]
 8013d16:	2301      	movs	r3, #1
 8013d18:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013d1c:	f102 021c 	add.w	r2, r2, #28
 8013d20:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8013d22:	e23b      	b.n	801419c <create_StepCountMap_unknown+0x64c>
 8013d24:	20000d30 	.word	0x20000d30
 8013d28:	200012f0 	.word	0x200012f0
 8013d2c:	20002298 	.word	0x20002298
 8013d30:	20000d2c 	.word	0x20000d2c

		Xcoordinate = popStack_walk(&stack_x);
 8013d34:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f001 f839 	bl	8014db0 <popStack_walk>
 8013d3e:	4603      	mov	r3, r0
 8013d40:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013d44:	f102 0216 	add.w	r2, r2, #22
 8013d48:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8013d4a:	f107 0308 	add.w	r3, r7, #8
 8013d4e:	3b04      	subs	r3, #4
 8013d50:	4618      	mov	r0, r3
 8013d52:	f001 f82d 	bl	8014db0 <popStack_walk>
 8013d56:	4603      	mov	r3, r0
 8013d58:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013d5c:	f102 0214 	add.w	r2, r2, #20
 8013d60:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013d62:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d66:	f103 0316 	add.w	r3, r3, #22
 8013d6a:	881b      	ldrh	r3, [r3, #0]
 8013d6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d70:	4293      	cmp	r3, r2
 8013d72:	f000 821b 	beq.w	80141ac <create_StepCountMap_unknown+0x65c>
 8013d76:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d7a:	f103 0314 	add.w	r3, r3, #20
 8013d7e:	881b      	ldrh	r3, [r3, #0]
 8013d80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d84:	4293      	cmp	r3, r2
 8013d86:	f000 8211 	beq.w	80141ac <create_StepCountMap_unknown+0x65c>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 8013d8a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d8e:	f103 0314 	add.w	r3, r3, #20
 8013d92:	881b      	ldrh	r3, [r3, #0]
 8013d94:	2b0e      	cmp	r3, #14
 8013d96:	d81a      	bhi.n	8013dce <create_StepCountMap_unknown+0x27e>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8013d98:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d9c:	f103 0314 	add.w	r3, r3, #20
 8013da0:	881b      	ldrh	r3, [r3, #0]
 8013da2:	4ac4      	ldr	r2, [pc, #784]	; (80140b4 <create_StepCountMap_unknown+0x564>)
 8013da4:	330c      	adds	r3, #12
 8013da6:	005b      	lsls	r3, r3, #1
 8013da8:	4413      	add	r3, r2
 8013daa:	88db      	ldrh	r3, [r3, #6]
 8013dac:	b21a      	sxth	r2, r3
 8013dae:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013db2:	f103 0316 	add.w	r3, r3, #22
 8013db6:	881b      	ldrh	r3, [r3, #0]
 8013db8:	2101      	movs	r1, #1
 8013dba:	fa01 f303 	lsl.w	r3, r1, r3
 8013dbe:	b21b      	sxth	r3, r3
 8013dc0:	4013      	ands	r3, r2
 8013dc2:	b21b      	sxth	r3, r3
 8013dc4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013dc8:	f102 0202 	add.w	r2, r2, #2
 8013dcc:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 8013dce:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013dd2:	f103 0314 	add.w	r3, r3, #20
 8013dd6:	881b      	ldrh	r3, [r3, #0]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d019      	beq.n	8013e10 <create_StepCountMap_unknown+0x2c0>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8013ddc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013de0:	f103 0314 	add.w	r3, r3, #20
 8013de4:	881b      	ldrh	r3, [r3, #0]
 8013de6:	3b01      	subs	r3, #1
 8013de8:	4ab2      	ldr	r2, [pc, #712]	; (80140b4 <create_StepCountMap_unknown+0x564>)
 8013dea:	330c      	adds	r3, #12
 8013dec:	005b      	lsls	r3, r3, #1
 8013dee:	4413      	add	r3, r2
 8013df0:	88db      	ldrh	r3, [r3, #6]
 8013df2:	b21a      	sxth	r2, r3
 8013df4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013df8:	f103 0316 	add.w	r3, r3, #22
 8013dfc:	881b      	ldrh	r3, [r3, #0]
 8013dfe:	2101      	movs	r1, #1
 8013e00:	fa01 f303 	lsl.w	r3, r1, r3
 8013e04:	b21b      	sxth	r3, r3
 8013e06:	4013      	ands	r3, r2
 8013e08:	b21b      	sxth	r3, r3
 8013e0a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013e0e:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8013e10:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e14:	f103 0316 	add.w	r3, r3, #22
 8013e18:	881b      	ldrh	r3, [r3, #0]
 8013e1a:	2b0e      	cmp	r3, #14
 8013e1c:	d818      	bhi.n	8013e50 <create_StepCountMap_unknown+0x300>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8013e1e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e22:	f103 0316 	add.w	r3, r3, #22
 8013e26:	881b      	ldrh	r3, [r3, #0]
 8013e28:	4aa2      	ldr	r2, [pc, #648]	; (80140b4 <create_StepCountMap_unknown+0x564>)
 8013e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e2e:	b21a      	sxth	r2, r3
 8013e30:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e34:	f103 0314 	add.w	r3, r3, #20
 8013e38:	881b      	ldrh	r3, [r3, #0]
 8013e3a:	2101      	movs	r1, #1
 8013e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8013e40:	b21b      	sxth	r3, r3
 8013e42:	4013      	ands	r3, r2
 8013e44:	b21b      	sxth	r3, r3
 8013e46:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013e4a:	f102 021e 	add.w	r2, r2, #30
 8013e4e:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 8013e50:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e54:	f103 0316 	add.w	r3, r3, #22
 8013e58:	881b      	ldrh	r3, [r3, #0]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d019      	beq.n	8013e92 <create_StepCountMap_unknown+0x342>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8013e5e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e62:	f103 0316 	add.w	r3, r3, #22
 8013e66:	881b      	ldrh	r3, [r3, #0]
 8013e68:	3b01      	subs	r3, #1
 8013e6a:	4a92      	ldr	r2, [pc, #584]	; (80140b4 <create_StepCountMap_unknown+0x564>)
 8013e6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e70:	b21a      	sxth	r2, r3
 8013e72:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e76:	f103 0314 	add.w	r3, r3, #20
 8013e7a:	881b      	ldrh	r3, [r3, #0]
 8013e7c:	2101      	movs	r1, #1
 8013e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8013e82:	b21b      	sxth	r3, r3
 8013e84:	4013      	ands	r3, r2
 8013e86:	b21b      	sxth	r3, r3
 8013e88:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013e8c:	f102 021c 	add.w	r2, r2, #28
 8013e90:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8013e92:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e96:	f103 0316 	add.w	r3, r3, #22
 8013e9a:	881a      	ldrh	r2, [r3, #0]
 8013e9c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ea0:	f103 0314 	add.w	r3, r3, #20
 8013ea4:	881b      	ldrh	r3, [r3, #0]
 8013ea6:	3301      	adds	r3, #1
 8013ea8:	4983      	ldr	r1, [pc, #524]	; (80140b8 <create_StepCountMap_unknown+0x568>)
 8013eaa:	0112      	lsls	r2, r2, #4
 8013eac:	4413      	add	r3, r2
 8013eae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013eb2:	2bff      	cmp	r3, #255	; 0xff
 8013eb4:	d148      	bne.n	8013f48 <create_StepCountMap_unknown+0x3f8>
 8013eb6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013eba:	f103 0314 	add.w	r3, r3, #20
 8013ebe:	881b      	ldrh	r3, [r3, #0]
 8013ec0:	2b0f      	cmp	r3, #15
 8013ec2:	d041      	beq.n	8013f48 <create_StepCountMap_unknown+0x3f8>
 8013ec4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013ec8:	f103 0302 	add.w	r3, r3, #2
 8013ecc:	881b      	ldrh	r3, [r3, #0]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d13a      	bne.n	8013f48 <create_StepCountMap_unknown+0x3f8>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8013ed2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ed6:	f103 0316 	add.w	r3, r3, #22
 8013eda:	881a      	ldrh	r2, [r3, #0]
 8013edc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ee0:	f103 0314 	add.w	r3, r3, #20
 8013ee4:	881b      	ldrh	r3, [r3, #0]
 8013ee6:	4974      	ldr	r1, [pc, #464]	; (80140b8 <create_StepCountMap_unknown+0x568>)
 8013ee8:	0112      	lsls	r2, r2, #4
 8013eea:	4413      	add	r3, r2
 8013eec:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8013ef0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ef4:	f103 0316 	add.w	r3, r3, #22
 8013ef8:	881a      	ldrh	r2, [r3, #0]
 8013efa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013efe:	f103 0314 	add.w	r3, r3, #20
 8013f02:	881b      	ldrh	r3, [r3, #0]
 8013f04:	3301      	adds	r3, #1
 8013f06:	3101      	adds	r1, #1
 8013f08:	b288      	uxth	r0, r1
 8013f0a:	496b      	ldr	r1, [pc, #428]	; (80140b8 <create_StepCountMap_unknown+0x568>)
 8013f0c:	0112      	lsls	r2, r2, #4
 8013f0e:	4413      	add	r3, r2
 8013f10:	4602      	mov	r2, r0
 8013f12:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013f16:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f1a:	f103 0316 	add.w	r3, r3, #22
 8013f1e:	881a      	ldrh	r2, [r3, #0]
 8013f20:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013f24:	4611      	mov	r1, r2
 8013f26:	4618      	mov	r0, r3
 8013f28:	f000 ff18 	bl	8014d5c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8013f2c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f30:	f103 0314 	add.w	r3, r3, #20
 8013f34:	881b      	ldrh	r3, [r3, #0]
 8013f36:	3301      	adds	r3, #1
 8013f38:	b29a      	uxth	r2, r3
 8013f3a:	f107 0308 	add.w	r3, r7, #8
 8013f3e:	3b04      	subs	r3, #4
 8013f40:	4611      	mov	r1, r2
 8013f42:	4618      	mov	r0, r3
 8013f44:	f000 ff0a 	bl	8014d5c <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8013f48:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f4c:	f103 0316 	add.w	r3, r3, #22
 8013f50:	881a      	ldrh	r2, [r3, #0]
 8013f52:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f56:	f103 0314 	add.w	r3, r3, #20
 8013f5a:	881b      	ldrh	r3, [r3, #0]
 8013f5c:	3b01      	subs	r3, #1
 8013f5e:	4956      	ldr	r1, [pc, #344]	; (80140b8 <create_StepCountMap_unknown+0x568>)
 8013f60:	0112      	lsls	r2, r2, #4
 8013f62:	4413      	add	r3, r2
 8013f64:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013f68:	2bff      	cmp	r3, #255	; 0xff
 8013f6a:	d146      	bne.n	8013ffa <create_StepCountMap_unknown+0x4aa>
 8013f6c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f70:	f103 0314 	add.w	r3, r3, #20
 8013f74:	881b      	ldrh	r3, [r3, #0]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d03f      	beq.n	8013ffa <create_StepCountMap_unknown+0x4aa>
 8013f7a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013f7e:	881b      	ldrh	r3, [r3, #0]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d13a      	bne.n	8013ffa <create_StepCountMap_unknown+0x4aa>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8013f84:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f88:	f103 0316 	add.w	r3, r3, #22
 8013f8c:	881a      	ldrh	r2, [r3, #0]
 8013f8e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f92:	f103 0314 	add.w	r3, r3, #20
 8013f96:	881b      	ldrh	r3, [r3, #0]
 8013f98:	4947      	ldr	r1, [pc, #284]	; (80140b8 <create_StepCountMap_unknown+0x568>)
 8013f9a:	0112      	lsls	r2, r2, #4
 8013f9c:	4413      	add	r3, r2
 8013f9e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8013fa2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fa6:	f103 0316 	add.w	r3, r3, #22
 8013faa:	881a      	ldrh	r2, [r3, #0]
 8013fac:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fb0:	f103 0314 	add.w	r3, r3, #20
 8013fb4:	881b      	ldrh	r3, [r3, #0]
 8013fb6:	3b01      	subs	r3, #1
 8013fb8:	3101      	adds	r1, #1
 8013fba:	b288      	uxth	r0, r1
 8013fbc:	493e      	ldr	r1, [pc, #248]	; (80140b8 <create_StepCountMap_unknown+0x568>)
 8013fbe:	0112      	lsls	r2, r2, #4
 8013fc0:	4413      	add	r3, r2
 8013fc2:	4602      	mov	r2, r0
 8013fc4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013fc8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fcc:	f103 0316 	add.w	r3, r3, #22
 8013fd0:	881a      	ldrh	r2, [r3, #0]
 8013fd2:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013fd6:	4611      	mov	r1, r2
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f000 febf 	bl	8014d5c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8013fde:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fe2:	f103 0314 	add.w	r3, r3, #20
 8013fe6:	881b      	ldrh	r3, [r3, #0]
 8013fe8:	3b01      	subs	r3, #1
 8013fea:	b29a      	uxth	r2, r3
 8013fec:	f107 0308 	add.w	r3, r7, #8
 8013ff0:	3b04      	subs	r3, #4
 8013ff2:	4611      	mov	r1, r2
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f000 feb1 	bl	8014d5c <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 8013ffa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ffe:	f103 0316 	add.w	r3, r3, #22
 8014002:	881b      	ldrh	r3, [r3, #0]
 8014004:	1c5a      	adds	r2, r3, #1
 8014006:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801400a:	f103 0314 	add.w	r3, r3, #20
 801400e:	881b      	ldrh	r3, [r3, #0]
 8014010:	4929      	ldr	r1, [pc, #164]	; (80140b8 <create_StepCountMap_unknown+0x568>)
 8014012:	0112      	lsls	r2, r2, #4
 8014014:	4413      	add	r3, r2
 8014016:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801401a:	2bff      	cmp	r3, #255	; 0xff
 801401c:	d14e      	bne.n	80140bc <create_StepCountMap_unknown+0x56c>
 801401e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014022:	f103 0316 	add.w	r3, r3, #22
 8014026:	881b      	ldrh	r3, [r3, #0]
 8014028:	2b0f      	cmp	r3, #15
 801402a:	d047      	beq.n	80140bc <create_StepCountMap_unknown+0x56c>
 801402c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014030:	f103 031e 	add.w	r3, r3, #30
 8014034:	881b      	ldrh	r3, [r3, #0]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d140      	bne.n	80140bc <create_StepCountMap_unknown+0x56c>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 801403a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801403e:	f103 0316 	add.w	r3, r3, #22
 8014042:	881a      	ldrh	r2, [r3, #0]
 8014044:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014048:	f103 0314 	add.w	r3, r3, #20
 801404c:	881b      	ldrh	r3, [r3, #0]
 801404e:	491a      	ldr	r1, [pc, #104]	; (80140b8 <create_StepCountMap_unknown+0x568>)
 8014050:	0112      	lsls	r2, r2, #4
 8014052:	4413      	add	r3, r2
 8014054:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014058:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801405c:	f103 0316 	add.w	r3, r3, #22
 8014060:	881b      	ldrh	r3, [r3, #0]
 8014062:	1c5a      	adds	r2, r3, #1
 8014064:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014068:	f103 0314 	add.w	r3, r3, #20
 801406c:	881b      	ldrh	r3, [r3, #0]
 801406e:	3101      	adds	r1, #1
 8014070:	b288      	uxth	r0, r1
 8014072:	4911      	ldr	r1, [pc, #68]	; (80140b8 <create_StepCountMap_unknown+0x568>)
 8014074:	0112      	lsls	r2, r2, #4
 8014076:	4413      	add	r3, r2
 8014078:	4602      	mov	r2, r0
 801407a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 801407e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014082:	f103 0316 	add.w	r3, r3, #22
 8014086:	881b      	ldrh	r3, [r3, #0]
 8014088:	3301      	adds	r3, #1
 801408a:	b29a      	uxth	r2, r3
 801408c:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014090:	4611      	mov	r1, r2
 8014092:	4618      	mov	r0, r3
 8014094:	f000 fe62 	bl	8014d5c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014098:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801409c:	f103 0314 	add.w	r3, r3, #20
 80140a0:	881a      	ldrh	r2, [r3, #0]
 80140a2:	f107 0308 	add.w	r3, r7, #8
 80140a6:	3b04      	subs	r3, #4
 80140a8:	4611      	mov	r1, r2
 80140aa:	4618      	mov	r0, r3
 80140ac:	f000 fe56 	bl	8014d5c <pushStack_walk>
 80140b0:	e004      	b.n	80140bc <create_StepCountMap_unknown+0x56c>
 80140b2:	bf00      	nop
 80140b4:	20000c3c 	.word	0x20000c3c
 80140b8:	20000d30 	.word	0x20000d30
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 80140bc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140c0:	f103 0316 	add.w	r3, r3, #22
 80140c4:	881b      	ldrh	r3, [r3, #0]
 80140c6:	1e5a      	subs	r2, r3, #1
 80140c8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140cc:	f103 0314 	add.w	r3, r3, #20
 80140d0:	881b      	ldrh	r3, [r3, #0]
 80140d2:	4939      	ldr	r1, [pc, #228]	; (80141b8 <create_StepCountMap_unknown+0x668>)
 80140d4:	0112      	lsls	r2, r2, #4
 80140d6:	4413      	add	r3, r2
 80140d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80140dc:	2bff      	cmp	r3, #255	; 0xff
 80140de:	d148      	bne.n	8014172 <create_StepCountMap_unknown+0x622>
 80140e0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140e4:	f103 0316 	add.w	r3, r3, #22
 80140e8:	881b      	ldrh	r3, [r3, #0]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d041      	beq.n	8014172 <create_StepCountMap_unknown+0x622>
 80140ee:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140f2:	f103 031c 	add.w	r3, r3, #28
 80140f6:	881b      	ldrh	r3, [r3, #0]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d13a      	bne.n	8014172 <create_StepCountMap_unknown+0x622>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80140fc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014100:	f103 0316 	add.w	r3, r3, #22
 8014104:	881a      	ldrh	r2, [r3, #0]
 8014106:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801410a:	f103 0314 	add.w	r3, r3, #20
 801410e:	881b      	ldrh	r3, [r3, #0]
 8014110:	4929      	ldr	r1, [pc, #164]	; (80141b8 <create_StepCountMap_unknown+0x668>)
 8014112:	0112      	lsls	r2, r2, #4
 8014114:	4413      	add	r3, r2
 8014116:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 801411a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801411e:	f103 0316 	add.w	r3, r3, #22
 8014122:	881b      	ldrh	r3, [r3, #0]
 8014124:	1e5a      	subs	r2, r3, #1
 8014126:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801412a:	f103 0314 	add.w	r3, r3, #20
 801412e:	881b      	ldrh	r3, [r3, #0]
 8014130:	3101      	adds	r1, #1
 8014132:	b288      	uxth	r0, r1
 8014134:	4920      	ldr	r1, [pc, #128]	; (80141b8 <create_StepCountMap_unknown+0x668>)
 8014136:	0112      	lsls	r2, r2, #4
 8014138:	4413      	add	r3, r2
 801413a:	4602      	mov	r2, r0
 801413c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014140:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014144:	f103 0316 	add.w	r3, r3, #22
 8014148:	881b      	ldrh	r3, [r3, #0]
 801414a:	3b01      	subs	r3, #1
 801414c:	b29a      	uxth	r2, r3
 801414e:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014152:	4611      	mov	r1, r2
 8014154:	4618      	mov	r0, r3
 8014156:	f000 fe01 	bl	8014d5c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 801415a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801415e:	f103 0314 	add.w	r3, r3, #20
 8014162:	881a      	ldrh	r2, [r3, #0]
 8014164:	f107 0308 	add.w	r3, r7, #8
 8014168:	3b04      	subs	r3, #4
 801416a:	4611      	mov	r1, r2
 801416c:	4618      	mov	r0, r3
 801416e:	f000 fdf5 	bl	8014d5c <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 8014172:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014176:	f103 0316 	add.w	r3, r3, #22
 801417a:	881a      	ldrh	r2, [r3, #0]
 801417c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014180:	f103 0314 	add.w	r3, r3, #20
 8014184:	881b      	ldrh	r3, [r3, #0]
 8014186:	490c      	ldr	r1, [pc, #48]	; (80141b8 <create_StepCountMap_unknown+0x668>)
 8014188:	0112      	lsls	r2, r2, #4
 801418a:	4413      	add	r3, r2
 801418c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014190:	3301      	adds	r3, #1
 8014192:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014196:	f102 0204 	add.w	r2, r2, #4
 801419a:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 801419c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80141a0:	f103 0304 	add.w	r3, r3, #4
 80141a4:	881b      	ldrh	r3, [r3, #0]
 80141a6:	2bfe      	cmp	r3, #254	; 0xfe
 80141a8:	f67f adc4 	bls.w	8013d34 <create_StepCountMap_unknown+0x1e4>

		}

}
 80141ac:	bf00      	nop
 80141ae:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 80141b2:	3708      	adds	r7, #8
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bd80      	pop	{r7, pc}
 80141b8:	20000d30 	.word	0x20000d30

080141bc <create_StepCountMap_queue>:





void create_StepCountMap_queue(void){
 80141bc:	b580      	push	{r7, lr}
 80141be:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 80141c2:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 80141c4:	2300      	movs	r3, #0
 80141c6:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80141ca:	f102 021f 	add.w	r2, r2, #31
 80141ce:	7013      	strb	r3, [r2, #0]
 80141d0:	e033      	b.n	801423a <create_StepCountMap_queue+0x7e>
		for(uint8_t yy = 0;yy <= 15;yy++){
 80141d2:	2300      	movs	r3, #0
 80141d4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80141d8:	f102 021e 	add.w	r2, r2, #30
 80141dc:	7013      	strb	r3, [r2, #0]
 80141de:	e01a      	b.n	8014216 <create_StepCountMap_queue+0x5a>
			walk_count[xx][yy] = 255;
 80141e0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80141e4:	f103 031f 	add.w	r3, r3, #31
 80141e8:	781a      	ldrb	r2, [r3, #0]
 80141ea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80141ee:	f103 031e 	add.w	r3, r3, #30
 80141f2:	781b      	ldrb	r3, [r3, #0]
 80141f4:	4945      	ldr	r1, [pc, #276]	; (801430c <create_StepCountMap_queue+0x150>)
 80141f6:	0112      	lsls	r2, r2, #4
 80141f8:	4413      	add	r3, r2
 80141fa:	22ff      	movs	r2, #255	; 0xff
 80141fc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 8014200:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014204:	f103 031e 	add.w	r3, r3, #30
 8014208:	781b      	ldrb	r3, [r3, #0]
 801420a:	3301      	adds	r3, #1
 801420c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014210:	f102 021e 	add.w	r2, r2, #30
 8014214:	7013      	strb	r3, [r2, #0]
 8014216:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801421a:	f103 031e 	add.w	r3, r3, #30
 801421e:	781b      	ldrb	r3, [r3, #0]
 8014220:	2b0f      	cmp	r3, #15
 8014222:	d9dd      	bls.n	80141e0 <create_StepCountMap_queue+0x24>
	for(uint8_t xx = 0;xx <= 15;xx++){
 8014224:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014228:	f103 031f 	add.w	r3, r3, #31
 801422c:	781b      	ldrb	r3, [r3, #0]
 801422e:	3301      	adds	r3, #1
 8014230:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014234:	f102 021f 	add.w	r2, r2, #31
 8014238:	7013      	strb	r3, [r2, #0]
 801423a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801423e:	f103 031f 	add.w	r3, r3, #31
 8014242:	781b      	ldrb	r3, [r3, #0]
 8014244:	2b0f      	cmp	r3, #15
 8014246:	d9c4      	bls.n	80141d2 <create_StepCountMap_queue+0x16>
		}
	}
	initStack_walk(&stack_x);
 8014248:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 801424c:	4618      	mov	r0, r3
 801424e:	f000 fd75 	bl	8014d3c <initStack_walk>
	initStack_walk(&stack_y);
 8014252:	463b      	mov	r3, r7
 8014254:	4618      	mov	r0, r3
 8014256:	f000 fd71 	bl	8014d3c <initStack_walk>


	walk_count[GOAL_X][GOAL_Y] = 0;
 801425a:	4b2c      	ldr	r3, [pc, #176]	; (801430c <create_StepCountMap_queue+0x150>)
 801425c:	2200      	movs	r2, #0
 801425e:	841a      	strh	r2, [r3, #32]
	walk_count[GOAL_X + 1][GOAL_Y] = 0;
 8014260:	4b2a      	ldr	r3, [pc, #168]	; (801430c <create_StepCountMap_queue+0x150>)
 8014262:	2200      	movs	r2, #0
 8014264:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	walk_count[GOAL_X][GOAL_Y + 1] = 0;
 8014268:	4b28      	ldr	r3, [pc, #160]	; (801430c <create_StepCountMap_queue+0x150>)
 801426a:	2200      	movs	r2, #0
 801426c:	845a      	strh	r2, [r3, #34]	; 0x22
	walk_count[GOAL_X + 1][GOAL_Y + 1] = 0;
 801426e:	4b27      	ldr	r3, [pc, #156]	; (801430c <create_StepCountMap_queue+0x150>)
 8014270:	2200      	movs	r2, #0
 8014272:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8014276:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 801427a:	2101      	movs	r1, #1
 801427c:	4618      	mov	r0, r3
 801427e:	f000 fd6d 	bl	8014d5c <pushStack_walk>
 8014282:	463b      	mov	r3, r7
 8014284:	2100      	movs	r1, #0
 8014286:	4618      	mov	r0, r3
 8014288:	f000 fd68 	bl	8014d5c <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y);
 801428c:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014290:	2102      	movs	r1, #2
 8014292:	4618      	mov	r0, r3
 8014294:	f000 fd62 	bl	8014d5c <pushStack_walk>
 8014298:	463b      	mov	r3, r7
 801429a:	2100      	movs	r1, #0
 801429c:	4618      	mov	r0, r3
 801429e:	f000 fd5d 	bl	8014d5c <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y + 1);
 80142a2:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80142a6:	2101      	movs	r1, #1
 80142a8:	4618      	mov	r0, r3
 80142aa:	f000 fd57 	bl	8014d5c <pushStack_walk>
 80142ae:	463b      	mov	r3, r7
 80142b0:	2101      	movs	r1, #1
 80142b2:	4618      	mov	r0, r3
 80142b4:	f000 fd52 	bl	8014d5c <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y + 1);
 80142b8:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80142bc:	2102      	movs	r1, #2
 80142be:	4618      	mov	r0, r3
 80142c0:	f000 fd4c 	bl	8014d5c <pushStack_walk>
 80142c4:	463b      	mov	r3, r7
 80142c6:	2101      	movs	r1, #1
 80142c8:	4618      	mov	r0, r3
 80142ca:	f000 fd47 	bl	8014d5c <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 80142ce:	2301      	movs	r3, #1
 80142d0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80142d4:	f102 021c 	add.w	r2, r2, #28
 80142d8:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 80142da:	2301      	movs	r3, #1
 80142dc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80142e0:	f102 021a 	add.w	r2, r2, #26
 80142e4:	8013      	strh	r3, [r2, #0]
 80142e6:	2301      	movs	r3, #1
 80142e8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80142ec:	f102 0218 	add.w	r2, r2, #24
 80142f0:	8013      	strh	r3, [r2, #0]
 80142f2:	2301      	movs	r3, #1
 80142f4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80142f8:	f102 0216 	add.w	r2, r2, #22
 80142fc:	8013      	strh	r3, [r2, #0]
 80142fe:	2301      	movs	r3, #1
 8014300:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014304:	f102 0214 	add.w	r2, r2, #20
 8014308:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 801430a:	e22f      	b.n	801476c <create_StepCountMap_queue+0x5b0>
 801430c:	20000d30 	.word	0x20000d30

		Xcoordinate = popStack_walk(&stack_x);
 8014310:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014314:	4618      	mov	r0, r3
 8014316:	f000 fd4b 	bl	8014db0 <popStack_walk>
 801431a:	4603      	mov	r3, r0
 801431c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014320:	f102 0212 	add.w	r2, r2, #18
 8014324:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8014326:	463b      	mov	r3, r7
 8014328:	4618      	mov	r0, r3
 801432a:	f000 fd41 	bl	8014db0 <popStack_walk>
 801432e:	4603      	mov	r3, r0
 8014330:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014334:	f102 0210 	add.w	r2, r2, #16
 8014338:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 801433a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801433e:	f103 0312 	add.w	r3, r3, #18
 8014342:	881b      	ldrh	r3, [r3, #0]
 8014344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014348:	4293      	cmp	r3, r2
 801434a:	f000 8217 	beq.w	801477c <create_StepCountMap_queue+0x5c0>
 801434e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014352:	f103 0310 	add.w	r3, r3, #16
 8014356:	881b      	ldrh	r3, [r3, #0]
 8014358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801435c:	4293      	cmp	r3, r2
 801435e:	f000 820d 	beq.w	801477c <create_StepCountMap_queue+0x5c0>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 8014362:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014366:	f103 0310 	add.w	r3, r3, #16
 801436a:	881b      	ldrh	r3, [r3, #0]
 801436c:	2b0e      	cmp	r3, #14
 801436e:	d81a      	bhi.n	80143a6 <create_StepCountMap_queue+0x1ea>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8014370:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014374:	f103 0310 	add.w	r3, r3, #16
 8014378:	881b      	ldrh	r3, [r3, #0]
 801437a:	4aca      	ldr	r2, [pc, #808]	; (80146a4 <create_StepCountMap_queue+0x4e8>)
 801437c:	330c      	adds	r3, #12
 801437e:	005b      	lsls	r3, r3, #1
 8014380:	4413      	add	r3, r2
 8014382:	88db      	ldrh	r3, [r3, #6]
 8014384:	b21a      	sxth	r2, r3
 8014386:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801438a:	f103 0312 	add.w	r3, r3, #18
 801438e:	881b      	ldrh	r3, [r3, #0]
 8014390:	2101      	movs	r1, #1
 8014392:	fa01 f303 	lsl.w	r3, r1, r3
 8014396:	b21b      	sxth	r3, r3
 8014398:	4013      	ands	r3, r2
 801439a:	b21b      	sxth	r3, r3
 801439c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80143a0:	f102 021a 	add.w	r2, r2, #26
 80143a4:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 80143a6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143aa:	f103 0310 	add.w	r3, r3, #16
 80143ae:	881b      	ldrh	r3, [r3, #0]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d01b      	beq.n	80143ec <create_StepCountMap_queue+0x230>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 80143b4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143b8:	f103 0310 	add.w	r3, r3, #16
 80143bc:	881b      	ldrh	r3, [r3, #0]
 80143be:	3b01      	subs	r3, #1
 80143c0:	4ab8      	ldr	r2, [pc, #736]	; (80146a4 <create_StepCountMap_queue+0x4e8>)
 80143c2:	330c      	adds	r3, #12
 80143c4:	005b      	lsls	r3, r3, #1
 80143c6:	4413      	add	r3, r2
 80143c8:	88db      	ldrh	r3, [r3, #6]
 80143ca:	b21a      	sxth	r2, r3
 80143cc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143d0:	f103 0312 	add.w	r3, r3, #18
 80143d4:	881b      	ldrh	r3, [r3, #0]
 80143d6:	2101      	movs	r1, #1
 80143d8:	fa01 f303 	lsl.w	r3, r1, r3
 80143dc:	b21b      	sxth	r3, r3
 80143de:	4013      	ands	r3, r2
 80143e0:	b21b      	sxth	r3, r3
 80143e2:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80143e6:	f102 0218 	add.w	r2, r2, #24
 80143ea:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 80143ec:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143f0:	f103 0312 	add.w	r3, r3, #18
 80143f4:	881b      	ldrh	r3, [r3, #0]
 80143f6:	2b0e      	cmp	r3, #14
 80143f8:	d818      	bhi.n	801442c <create_StepCountMap_queue+0x270>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 80143fa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143fe:	f103 0312 	add.w	r3, r3, #18
 8014402:	881b      	ldrh	r3, [r3, #0]
 8014404:	4aa7      	ldr	r2, [pc, #668]	; (80146a4 <create_StepCountMap_queue+0x4e8>)
 8014406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801440a:	b21a      	sxth	r2, r3
 801440c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014410:	f103 0310 	add.w	r3, r3, #16
 8014414:	881b      	ldrh	r3, [r3, #0]
 8014416:	2101      	movs	r1, #1
 8014418:	fa01 f303 	lsl.w	r3, r1, r3
 801441c:	b21b      	sxth	r3, r3
 801441e:	4013      	ands	r3, r2
 8014420:	b21b      	sxth	r3, r3
 8014422:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014426:	f102 0216 	add.w	r2, r2, #22
 801442a:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 801442c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014430:	f103 0312 	add.w	r3, r3, #18
 8014434:	881b      	ldrh	r3, [r3, #0]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d019      	beq.n	801446e <create_StepCountMap_queue+0x2b2>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 801443a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801443e:	f103 0312 	add.w	r3, r3, #18
 8014442:	881b      	ldrh	r3, [r3, #0]
 8014444:	3b01      	subs	r3, #1
 8014446:	4a97      	ldr	r2, [pc, #604]	; (80146a4 <create_StepCountMap_queue+0x4e8>)
 8014448:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801444c:	b21a      	sxth	r2, r3
 801444e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014452:	f103 0310 	add.w	r3, r3, #16
 8014456:	881b      	ldrh	r3, [r3, #0]
 8014458:	2101      	movs	r1, #1
 801445a:	fa01 f303 	lsl.w	r3, r1, r3
 801445e:	b21b      	sxth	r3, r3
 8014460:	4013      	ands	r3, r2
 8014462:	b21b      	sxth	r3, r3
 8014464:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014468:	f102 0214 	add.w	r2, r2, #20
 801446c:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 801446e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014472:	f103 0312 	add.w	r3, r3, #18
 8014476:	881a      	ldrh	r2, [r3, #0]
 8014478:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801447c:	f103 0310 	add.w	r3, r3, #16
 8014480:	881b      	ldrh	r3, [r3, #0]
 8014482:	3301      	adds	r3, #1
 8014484:	4988      	ldr	r1, [pc, #544]	; (80146a8 <create_StepCountMap_queue+0x4ec>)
 8014486:	0112      	lsls	r2, r2, #4
 8014488:	4413      	add	r3, r2
 801448a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801448e:	2bff      	cmp	r3, #255	; 0xff
 8014490:	d146      	bne.n	8014520 <create_StepCountMap_queue+0x364>
 8014492:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014496:	f103 0310 	add.w	r3, r3, #16
 801449a:	881b      	ldrh	r3, [r3, #0]
 801449c:	2b0f      	cmp	r3, #15
 801449e:	d03f      	beq.n	8014520 <create_StepCountMap_queue+0x364>
 80144a0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144a4:	f103 031a 	add.w	r3, r3, #26
 80144a8:	881b      	ldrh	r3, [r3, #0]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d138      	bne.n	8014520 <create_StepCountMap_queue+0x364>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80144ae:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144b2:	f103 0312 	add.w	r3, r3, #18
 80144b6:	881a      	ldrh	r2, [r3, #0]
 80144b8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144bc:	f103 0310 	add.w	r3, r3, #16
 80144c0:	881b      	ldrh	r3, [r3, #0]
 80144c2:	4979      	ldr	r1, [pc, #484]	; (80146a8 <create_StepCountMap_queue+0x4ec>)
 80144c4:	0112      	lsls	r2, r2, #4
 80144c6:	4413      	add	r3, r2
 80144c8:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80144cc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144d0:	f103 0312 	add.w	r3, r3, #18
 80144d4:	881a      	ldrh	r2, [r3, #0]
 80144d6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144da:	f103 0310 	add.w	r3, r3, #16
 80144de:	881b      	ldrh	r3, [r3, #0]
 80144e0:	3301      	adds	r3, #1
 80144e2:	3101      	adds	r1, #1
 80144e4:	b288      	uxth	r0, r1
 80144e6:	4970      	ldr	r1, [pc, #448]	; (80146a8 <create_StepCountMap_queue+0x4ec>)
 80144e8:	0112      	lsls	r2, r2, #4
 80144ea:	4413      	add	r3, r2
 80144ec:	4602      	mov	r2, r0
 80144ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 80144f2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144f6:	f103 0312 	add.w	r3, r3, #18
 80144fa:	881a      	ldrh	r2, [r3, #0]
 80144fc:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014500:	4611      	mov	r1, r2
 8014502:	4618      	mov	r0, r3
 8014504:	f000 fc2a 	bl	8014d5c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8014508:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801450c:	f103 0310 	add.w	r3, r3, #16
 8014510:	881b      	ldrh	r3, [r3, #0]
 8014512:	3301      	adds	r3, #1
 8014514:	b29a      	uxth	r2, r3
 8014516:	463b      	mov	r3, r7
 8014518:	4611      	mov	r1, r2
 801451a:	4618      	mov	r0, r3
 801451c:	f000 fc1e 	bl	8014d5c <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8014520:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014524:	f103 0312 	add.w	r3, r3, #18
 8014528:	881a      	ldrh	r2, [r3, #0]
 801452a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801452e:	f103 0310 	add.w	r3, r3, #16
 8014532:	881b      	ldrh	r3, [r3, #0]
 8014534:	3b01      	subs	r3, #1
 8014536:	495c      	ldr	r1, [pc, #368]	; (80146a8 <create_StepCountMap_queue+0x4ec>)
 8014538:	0112      	lsls	r2, r2, #4
 801453a:	4413      	add	r3, r2
 801453c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014540:	2bff      	cmp	r3, #255	; 0xff
 8014542:	d146      	bne.n	80145d2 <create_StepCountMap_queue+0x416>
 8014544:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014548:	f103 0310 	add.w	r3, r3, #16
 801454c:	881b      	ldrh	r3, [r3, #0]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d03f      	beq.n	80145d2 <create_StepCountMap_queue+0x416>
 8014552:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014556:	f103 0318 	add.w	r3, r3, #24
 801455a:	881b      	ldrh	r3, [r3, #0]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d138      	bne.n	80145d2 <create_StepCountMap_queue+0x416>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014560:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014564:	f103 0312 	add.w	r3, r3, #18
 8014568:	881a      	ldrh	r2, [r3, #0]
 801456a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801456e:	f103 0310 	add.w	r3, r3, #16
 8014572:	881b      	ldrh	r3, [r3, #0]
 8014574:	494c      	ldr	r1, [pc, #304]	; (80146a8 <create_StepCountMap_queue+0x4ec>)
 8014576:	0112      	lsls	r2, r2, #4
 8014578:	4413      	add	r3, r2
 801457a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 801457e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014582:	f103 0312 	add.w	r3, r3, #18
 8014586:	881a      	ldrh	r2, [r3, #0]
 8014588:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801458c:	f103 0310 	add.w	r3, r3, #16
 8014590:	881b      	ldrh	r3, [r3, #0]
 8014592:	3b01      	subs	r3, #1
 8014594:	3101      	adds	r1, #1
 8014596:	b288      	uxth	r0, r1
 8014598:	4943      	ldr	r1, [pc, #268]	; (80146a8 <create_StepCountMap_queue+0x4ec>)
 801459a:	0112      	lsls	r2, r2, #4
 801459c:	4413      	add	r3, r2
 801459e:	4602      	mov	r2, r0
 80145a0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 80145a4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145a8:	f103 0312 	add.w	r3, r3, #18
 80145ac:	881a      	ldrh	r2, [r3, #0]
 80145ae:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80145b2:	4611      	mov	r1, r2
 80145b4:	4618      	mov	r0, r3
 80145b6:	f000 fbd1 	bl	8014d5c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 80145ba:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145be:	f103 0310 	add.w	r3, r3, #16
 80145c2:	881b      	ldrh	r3, [r3, #0]
 80145c4:	3b01      	subs	r3, #1
 80145c6:	b29a      	uxth	r2, r3
 80145c8:	463b      	mov	r3, r7
 80145ca:	4611      	mov	r1, r2
 80145cc:	4618      	mov	r0, r3
 80145ce:	f000 fbc5 	bl	8014d5c <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 80145d2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145d6:	f103 0312 	add.w	r3, r3, #18
 80145da:	881b      	ldrh	r3, [r3, #0]
 80145dc:	1c5a      	adds	r2, r3, #1
 80145de:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145e2:	f103 0310 	add.w	r3, r3, #16
 80145e6:	881b      	ldrh	r3, [r3, #0]
 80145e8:	492f      	ldr	r1, [pc, #188]	; (80146a8 <create_StepCountMap_queue+0x4ec>)
 80145ea:	0112      	lsls	r2, r2, #4
 80145ec:	4413      	add	r3, r2
 80145ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80145f2:	2bff      	cmp	r3, #255	; 0xff
 80145f4:	d146      	bne.n	8014684 <create_StepCountMap_queue+0x4c8>
 80145f6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145fa:	f103 0312 	add.w	r3, r3, #18
 80145fe:	881b      	ldrh	r3, [r3, #0]
 8014600:	2b0f      	cmp	r3, #15
 8014602:	d03f      	beq.n	8014684 <create_StepCountMap_queue+0x4c8>
 8014604:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014608:	f103 0316 	add.w	r3, r3, #22
 801460c:	881b      	ldrh	r3, [r3, #0]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d138      	bne.n	8014684 <create_StepCountMap_queue+0x4c8>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014612:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014616:	f103 0312 	add.w	r3, r3, #18
 801461a:	881a      	ldrh	r2, [r3, #0]
 801461c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014620:	f103 0310 	add.w	r3, r3, #16
 8014624:	881b      	ldrh	r3, [r3, #0]
 8014626:	4920      	ldr	r1, [pc, #128]	; (80146a8 <create_StepCountMap_queue+0x4ec>)
 8014628:	0112      	lsls	r2, r2, #4
 801462a:	4413      	add	r3, r2
 801462c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014630:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014634:	f103 0312 	add.w	r3, r3, #18
 8014638:	881b      	ldrh	r3, [r3, #0]
 801463a:	1c5a      	adds	r2, r3, #1
 801463c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014640:	f103 0310 	add.w	r3, r3, #16
 8014644:	881b      	ldrh	r3, [r3, #0]
 8014646:	3101      	adds	r1, #1
 8014648:	b288      	uxth	r0, r1
 801464a:	4917      	ldr	r1, [pc, #92]	; (80146a8 <create_StepCountMap_queue+0x4ec>)
 801464c:	0112      	lsls	r2, r2, #4
 801464e:	4413      	add	r3, r2
 8014650:	4602      	mov	r2, r0
 8014652:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8014656:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801465a:	f103 0312 	add.w	r3, r3, #18
 801465e:	881b      	ldrh	r3, [r3, #0]
 8014660:	3301      	adds	r3, #1
 8014662:	b29a      	uxth	r2, r3
 8014664:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014668:	4611      	mov	r1, r2
 801466a:	4618      	mov	r0, r3
 801466c:	f000 fb76 	bl	8014d5c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014670:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014674:	f103 0310 	add.w	r3, r3, #16
 8014678:	881a      	ldrh	r2, [r3, #0]
 801467a:	463b      	mov	r3, r7
 801467c:	4611      	mov	r1, r2
 801467e:	4618      	mov	r0, r3
 8014680:	f000 fb6c 	bl	8014d5c <pushStack_walk>
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8014684:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014688:	f103 0312 	add.w	r3, r3, #18
 801468c:	881b      	ldrh	r3, [r3, #0]
 801468e:	1e5a      	subs	r2, r3, #1
 8014690:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014694:	f103 0310 	add.w	r3, r3, #16
 8014698:	881b      	ldrh	r3, [r3, #0]
 801469a:	4903      	ldr	r1, [pc, #12]	; (80146a8 <create_StepCountMap_queue+0x4ec>)
 801469c:	0112      	lsls	r2, r2, #4
 801469e:	4413      	add	r3, r2
 80146a0:	e004      	b.n	80146ac <create_StepCountMap_queue+0x4f0>
 80146a2:	bf00      	nop
 80146a4:	20000c3c 	.word	0x20000c3c
 80146a8:	20000d30 	.word	0x20000d30
 80146ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80146b0:	2bff      	cmp	r3, #255	; 0xff
 80146b2:	d146      	bne.n	8014742 <create_StepCountMap_queue+0x586>
 80146b4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146b8:	f103 0312 	add.w	r3, r3, #18
 80146bc:	881b      	ldrh	r3, [r3, #0]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d03f      	beq.n	8014742 <create_StepCountMap_queue+0x586>
 80146c2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146c6:	f103 0314 	add.w	r3, r3, #20
 80146ca:	881b      	ldrh	r3, [r3, #0]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d138      	bne.n	8014742 <create_StepCountMap_queue+0x586>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80146d0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146d4:	f103 0312 	add.w	r3, r3, #18
 80146d8:	881a      	ldrh	r2, [r3, #0]
 80146da:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146de:	f103 0310 	add.w	r3, r3, #16
 80146e2:	881b      	ldrh	r3, [r3, #0]
 80146e4:	4928      	ldr	r1, [pc, #160]	; (8014788 <create_StepCountMap_queue+0x5cc>)
 80146e6:	0112      	lsls	r2, r2, #4
 80146e8:	4413      	add	r3, r2
 80146ea:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80146ee:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146f2:	f103 0312 	add.w	r3, r3, #18
 80146f6:	881b      	ldrh	r3, [r3, #0]
 80146f8:	1e5a      	subs	r2, r3, #1
 80146fa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146fe:	f103 0310 	add.w	r3, r3, #16
 8014702:	881b      	ldrh	r3, [r3, #0]
 8014704:	3101      	adds	r1, #1
 8014706:	b288      	uxth	r0, r1
 8014708:	491f      	ldr	r1, [pc, #124]	; (8014788 <create_StepCountMap_queue+0x5cc>)
 801470a:	0112      	lsls	r2, r2, #4
 801470c:	4413      	add	r3, r2
 801470e:	4602      	mov	r2, r0
 8014710:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014714:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014718:	f103 0312 	add.w	r3, r3, #18
 801471c:	881b      	ldrh	r3, [r3, #0]
 801471e:	3b01      	subs	r3, #1
 8014720:	b29a      	uxth	r2, r3
 8014722:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014726:	4611      	mov	r1, r2
 8014728:	4618      	mov	r0, r3
 801472a:	f000 fb17 	bl	8014d5c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 801472e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014732:	f103 0310 	add.w	r3, r3, #16
 8014736:	881a      	ldrh	r2, [r3, #0]
 8014738:	463b      	mov	r3, r7
 801473a:	4611      	mov	r1, r2
 801473c:	4618      	mov	r0, r3
 801473e:	f000 fb0d 	bl	8014d5c <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 8014742:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014746:	f103 0312 	add.w	r3, r3, #18
 801474a:	881a      	ldrh	r2, [r3, #0]
 801474c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014750:	f103 0310 	add.w	r3, r3, #16
 8014754:	881b      	ldrh	r3, [r3, #0]
 8014756:	490c      	ldr	r1, [pc, #48]	; (8014788 <create_StepCountMap_queue+0x5cc>)
 8014758:	0112      	lsls	r2, r2, #4
 801475a:	4413      	add	r3, r2
 801475c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014760:	3301      	adds	r3, #1
 8014762:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014766:	f102 021c 	add.w	r2, r2, #28
 801476a:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 801476c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014770:	f103 031c 	add.w	r3, r3, #28
 8014774:	881b      	ldrh	r3, [r3, #0]
 8014776:	2bfe      	cmp	r3, #254	; 0xfe
 8014778:	f67f adca 	bls.w	8014310 <create_StepCountMap_queue+0x154>

		}

}
 801477c:	bf00      	nop
 801477e:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8014782:	46bd      	mov	sp, r7
 8014784:	bd80      	pop	{r7, pc}
 8014786:	bf00      	nop
 8014788:	20000d30 	.word	0x20000d30

0801478c <create_StepCountMapBack_queue>:



void create_StepCountMapBack_queue(void){
 801478c:	b580      	push	{r7, lr}
 801478e:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8014792:	b082      	sub	sp, #8
 8014794:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 8014796:	2300      	movs	r3, #0
 8014798:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801479c:	f102 0207 	add.w	r2, r2, #7
 80147a0:	7013      	strb	r3, [r2, #0]
 80147a2:	e033      	b.n	801480c <create_StepCountMapBack_queue+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 80147a4:	2300      	movs	r3, #0
 80147a6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80147aa:	f102 0206 	add.w	r2, r2, #6
 80147ae:	7013      	strb	r3, [r2, #0]
 80147b0:	e01a      	b.n	80147e8 <create_StepCountMapBack_queue+0x5c>
			walk_count[xx][yy] = 255;
 80147b2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80147b6:	f103 0307 	add.w	r3, r3, #7
 80147ba:	781a      	ldrb	r2, [r3, #0]
 80147bc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80147c0:	f103 0306 	add.w	r3, r3, #6
 80147c4:	781b      	ldrb	r3, [r3, #0]
 80147c6:	4931      	ldr	r1, [pc, #196]	; (801488c <create_StepCountMapBack_queue+0x100>)
 80147c8:	0112      	lsls	r2, r2, #4
 80147ca:	4413      	add	r3, r2
 80147cc:	22ff      	movs	r2, #255	; 0xff
 80147ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 80147d2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80147d6:	f103 0306 	add.w	r3, r3, #6
 80147da:	781b      	ldrb	r3, [r3, #0]
 80147dc:	3301      	adds	r3, #1
 80147de:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80147e2:	f102 0206 	add.w	r2, r2, #6
 80147e6:	7013      	strb	r3, [r2, #0]
 80147e8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80147ec:	f103 0306 	add.w	r3, r3, #6
 80147f0:	781b      	ldrb	r3, [r3, #0]
 80147f2:	2b0f      	cmp	r3, #15
 80147f4:	d9dd      	bls.n	80147b2 <create_StepCountMapBack_queue+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 80147f6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80147fa:	f103 0307 	add.w	r3, r3, #7
 80147fe:	781b      	ldrb	r3, [r3, #0]
 8014800:	3301      	adds	r3, #1
 8014802:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014806:	f102 0207 	add.w	r2, r2, #7
 801480a:	7013      	strb	r3, [r2, #0]
 801480c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014810:	f103 0307 	add.w	r3, r3, #7
 8014814:	781b      	ldrb	r3, [r3, #0]
 8014816:	2b0f      	cmp	r3, #15
 8014818:	d9c4      	bls.n	80147a4 <create_StepCountMapBack_queue+0x18>
		}
	}
	initStack_walk(&stack_x);
 801481a:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801481e:	4618      	mov	r0, r3
 8014820:	f000 fa8c 	bl	8014d3c <initStack_walk>
	initStack_walk(&stack_y);
 8014824:	f107 0308 	add.w	r3, r7, #8
 8014828:	3b04      	subs	r3, #4
 801482a:	4618      	mov	r0, r3
 801482c:	f000 fa86 	bl	8014d3c <initStack_walk>


	walk_count[0][0] = 0;
 8014830:	4b16      	ldr	r3, [pc, #88]	; (801488c <create_StepCountMapBack_queue+0x100>)
 8014832:	2200      	movs	r2, #0
 8014834:	801a      	strh	r2, [r3, #0]
	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8014836:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801483a:	2100      	movs	r1, #0
 801483c:	4618      	mov	r0, r3
 801483e:	f000 fa8d 	bl	8014d5c <pushStack_walk>
 8014842:	f107 0308 	add.w	r3, r7, #8
 8014846:	3b04      	subs	r3, #4
 8014848:	2100      	movs	r1, #0
 801484a:	4618      	mov	r0, r3
 801484c:	f000 fa86 	bl	8014d5c <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 8014850:	2301      	movs	r3, #1
 8014852:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014856:	f102 0204 	add.w	r2, r2, #4
 801485a:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 801485c:	2301      	movs	r3, #1
 801485e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014862:	f102 0202 	add.w	r2, r2, #2
 8014866:	8013      	strh	r3, [r2, #0]
 8014868:	2301      	movs	r3, #1
 801486a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801486e:	8013      	strh	r3, [r2, #0]
 8014870:	2301      	movs	r3, #1
 8014872:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014876:	f102 021e 	add.w	r2, r2, #30
 801487a:	8013      	strh	r3, [r2, #0]
 801487c:	2301      	movs	r3, #1
 801487e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014882:	f102 021c 	add.w	r2, r2, #28
 8014886:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014888:	e248      	b.n	8014d1c <create_StepCountMapBack_queue+0x590>
 801488a:	bf00      	nop
 801488c:	20000d30 	.word	0x20000d30

		Xcoordinate = popStack_walk(&stack_x);
 8014890:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014894:	4618      	mov	r0, r3
 8014896:	f000 fa8b 	bl	8014db0 <popStack_walk>
 801489a:	4603      	mov	r3, r0
 801489c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80148a0:	f102 021a 	add.w	r2, r2, #26
 80148a4:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 80148a6:	f107 0308 	add.w	r3, r7, #8
 80148aa:	3b04      	subs	r3, #4
 80148ac:	4618      	mov	r0, r3
 80148ae:	f000 fa7f 	bl	8014db0 <popStack_walk>
 80148b2:	4603      	mov	r3, r0
 80148b4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80148b8:	f102 0218 	add.w	r2, r2, #24
 80148bc:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 80148be:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148c2:	f103 031a 	add.w	r3, r3, #26
 80148c6:	881b      	ldrh	r3, [r3, #0]
 80148c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80148cc:	4293      	cmp	r3, r2
 80148ce:	f000 822d 	beq.w	8014d2c <create_StepCountMapBack_queue+0x5a0>
 80148d2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148d6:	f103 0318 	add.w	r3, r3, #24
 80148da:	881b      	ldrh	r3, [r3, #0]
 80148dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80148e0:	4293      	cmp	r3, r2
 80148e2:	f000 8223 	beq.w	8014d2c <create_StepCountMapBack_queue+0x5a0>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 80148e6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148ea:	f103 031a 	add.w	r3, r3, #26
 80148ee:	881b      	ldrh	r3, [r3, #0]
 80148f0:	011b      	lsls	r3, r3, #4
 80148f2:	b29a      	uxth	r2, r3
 80148f4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148f8:	f103 0318 	add.w	r3, r3, #24
 80148fc:	881b      	ldrh	r3, [r3, #0]
 80148fe:	4413      	add	r3, r2
 8014900:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014904:	f102 0216 	add.w	r2, r2, #22
 8014908:	8013      	strh	r3, [r2, #0]
		if (Ycoordinate <= 14) {
 801490a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801490e:	f103 0318 	add.w	r3, r3, #24
 8014912:	881b      	ldrh	r3, [r3, #0]
 8014914:	2b0e      	cmp	r3, #14
 8014916:	d81a      	bhi.n	801494e <create_StepCountMapBack_queue+0x1c2>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8014918:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801491c:	f103 0318 	add.w	r3, r3, #24
 8014920:	881b      	ldrh	r3, [r3, #0]
 8014922:	4ac4      	ldr	r2, [pc, #784]	; (8014c34 <create_StepCountMapBack_queue+0x4a8>)
 8014924:	330c      	adds	r3, #12
 8014926:	005b      	lsls	r3, r3, #1
 8014928:	4413      	add	r3, r2
 801492a:	88db      	ldrh	r3, [r3, #6]
 801492c:	b21a      	sxth	r2, r3
 801492e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014932:	f103 031a 	add.w	r3, r3, #26
 8014936:	881b      	ldrh	r3, [r3, #0]
 8014938:	2101      	movs	r1, #1
 801493a:	fa01 f303 	lsl.w	r3, r1, r3
 801493e:	b21b      	sxth	r3, r3
 8014940:	4013      	ands	r3, r2
 8014942:	b21b      	sxth	r3, r3
 8014944:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014948:	f102 0202 	add.w	r2, r2, #2
 801494c:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 801494e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014952:	f103 0318 	add.w	r3, r3, #24
 8014956:	881b      	ldrh	r3, [r3, #0]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d019      	beq.n	8014990 <create_StepCountMapBack_queue+0x204>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 801495c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014960:	f103 0318 	add.w	r3, r3, #24
 8014964:	881b      	ldrh	r3, [r3, #0]
 8014966:	3b01      	subs	r3, #1
 8014968:	4ab2      	ldr	r2, [pc, #712]	; (8014c34 <create_StepCountMapBack_queue+0x4a8>)
 801496a:	330c      	adds	r3, #12
 801496c:	005b      	lsls	r3, r3, #1
 801496e:	4413      	add	r3, r2
 8014970:	88db      	ldrh	r3, [r3, #6]
 8014972:	b21a      	sxth	r2, r3
 8014974:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014978:	f103 031a 	add.w	r3, r3, #26
 801497c:	881b      	ldrh	r3, [r3, #0]
 801497e:	2101      	movs	r1, #1
 8014980:	fa01 f303 	lsl.w	r3, r1, r3
 8014984:	b21b      	sxth	r3, r3
 8014986:	4013      	ands	r3, r2
 8014988:	b21b      	sxth	r3, r3
 801498a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801498e:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8014990:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014994:	f103 031a 	add.w	r3, r3, #26
 8014998:	881b      	ldrh	r3, [r3, #0]
 801499a:	2b0e      	cmp	r3, #14
 801499c:	d818      	bhi.n	80149d0 <create_StepCountMapBack_queue+0x244>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 801499e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149a2:	f103 031a 	add.w	r3, r3, #26
 80149a6:	881b      	ldrh	r3, [r3, #0]
 80149a8:	4aa2      	ldr	r2, [pc, #648]	; (8014c34 <create_StepCountMapBack_queue+0x4a8>)
 80149aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80149ae:	b21a      	sxth	r2, r3
 80149b0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149b4:	f103 0318 	add.w	r3, r3, #24
 80149b8:	881b      	ldrh	r3, [r3, #0]
 80149ba:	2101      	movs	r1, #1
 80149bc:	fa01 f303 	lsl.w	r3, r1, r3
 80149c0:	b21b      	sxth	r3, r3
 80149c2:	4013      	ands	r3, r2
 80149c4:	b21b      	sxth	r3, r3
 80149c6:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80149ca:	f102 021e 	add.w	r2, r2, #30
 80149ce:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 80149d0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149d4:	f103 031a 	add.w	r3, r3, #26
 80149d8:	881b      	ldrh	r3, [r3, #0]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d019      	beq.n	8014a12 <create_StepCountMapBack_queue+0x286>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 80149de:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149e2:	f103 031a 	add.w	r3, r3, #26
 80149e6:	881b      	ldrh	r3, [r3, #0]
 80149e8:	3b01      	subs	r3, #1
 80149ea:	4a92      	ldr	r2, [pc, #584]	; (8014c34 <create_StepCountMapBack_queue+0x4a8>)
 80149ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80149f0:	b21a      	sxth	r2, r3
 80149f2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149f6:	f103 0318 	add.w	r3, r3, #24
 80149fa:	881b      	ldrh	r3, [r3, #0]
 80149fc:	2101      	movs	r1, #1
 80149fe:	fa01 f303 	lsl.w	r3, r1, r3
 8014a02:	b21b      	sxth	r3, r3
 8014a04:	4013      	ands	r3, r2
 8014a06:	b21b      	sxth	r3, r3
 8014a08:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014a0c:	f102 021c 	add.w	r2, r2, #28
 8014a10:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8014a12:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a16:	f103 031a 	add.w	r3, r3, #26
 8014a1a:	881a      	ldrh	r2, [r3, #0]
 8014a1c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a20:	f103 0318 	add.w	r3, r3, #24
 8014a24:	881b      	ldrh	r3, [r3, #0]
 8014a26:	3301      	adds	r3, #1
 8014a28:	4983      	ldr	r1, [pc, #524]	; (8014c38 <create_StepCountMapBack_queue+0x4ac>)
 8014a2a:	0112      	lsls	r2, r2, #4
 8014a2c:	4413      	add	r3, r2
 8014a2e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014a32:	2bff      	cmp	r3, #255	; 0xff
 8014a34:	d148      	bne.n	8014ac8 <create_StepCountMapBack_queue+0x33c>
 8014a36:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a3a:	f103 0318 	add.w	r3, r3, #24
 8014a3e:	881b      	ldrh	r3, [r3, #0]
 8014a40:	2b0f      	cmp	r3, #15
 8014a42:	d041      	beq.n	8014ac8 <create_StepCountMapBack_queue+0x33c>
 8014a44:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014a48:	f103 0302 	add.w	r3, r3, #2
 8014a4c:	881b      	ldrh	r3, [r3, #0]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d13a      	bne.n	8014ac8 <create_StepCountMapBack_queue+0x33c>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014a52:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a56:	f103 031a 	add.w	r3, r3, #26
 8014a5a:	881a      	ldrh	r2, [r3, #0]
 8014a5c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a60:	f103 0318 	add.w	r3, r3, #24
 8014a64:	881b      	ldrh	r3, [r3, #0]
 8014a66:	4974      	ldr	r1, [pc, #464]	; (8014c38 <create_StepCountMapBack_queue+0x4ac>)
 8014a68:	0112      	lsls	r2, r2, #4
 8014a6a:	4413      	add	r3, r2
 8014a6c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014a70:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a74:	f103 031a 	add.w	r3, r3, #26
 8014a78:	881a      	ldrh	r2, [r3, #0]
 8014a7a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a7e:	f103 0318 	add.w	r3, r3, #24
 8014a82:	881b      	ldrh	r3, [r3, #0]
 8014a84:	3301      	adds	r3, #1
 8014a86:	3101      	adds	r1, #1
 8014a88:	b288      	uxth	r0, r1
 8014a8a:	496b      	ldr	r1, [pc, #428]	; (8014c38 <create_StepCountMapBack_queue+0x4ac>)
 8014a8c:	0112      	lsls	r2, r2, #4
 8014a8e:	4413      	add	r3, r2
 8014a90:	4602      	mov	r2, r0
 8014a92:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014a96:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a9a:	f103 031a 	add.w	r3, r3, #26
 8014a9e:	881a      	ldrh	r2, [r3, #0]
 8014aa0:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014aa4:	4611      	mov	r1, r2
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f000 f958 	bl	8014d5c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8014aac:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ab0:	f103 0318 	add.w	r3, r3, #24
 8014ab4:	881b      	ldrh	r3, [r3, #0]
 8014ab6:	3301      	adds	r3, #1
 8014ab8:	b29a      	uxth	r2, r3
 8014aba:	f107 0308 	add.w	r3, r7, #8
 8014abe:	3b04      	subs	r3, #4
 8014ac0:	4611      	mov	r1, r2
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	f000 f94a 	bl	8014d5c <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8014ac8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014acc:	f103 031a 	add.w	r3, r3, #26
 8014ad0:	881a      	ldrh	r2, [r3, #0]
 8014ad2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ad6:	f103 0318 	add.w	r3, r3, #24
 8014ada:	881b      	ldrh	r3, [r3, #0]
 8014adc:	3b01      	subs	r3, #1
 8014ade:	4956      	ldr	r1, [pc, #344]	; (8014c38 <create_StepCountMapBack_queue+0x4ac>)
 8014ae0:	0112      	lsls	r2, r2, #4
 8014ae2:	4413      	add	r3, r2
 8014ae4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014ae8:	2bff      	cmp	r3, #255	; 0xff
 8014aea:	d146      	bne.n	8014b7a <create_StepCountMapBack_queue+0x3ee>
 8014aec:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014af0:	f103 0318 	add.w	r3, r3, #24
 8014af4:	881b      	ldrh	r3, [r3, #0]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d03f      	beq.n	8014b7a <create_StepCountMapBack_queue+0x3ee>
 8014afa:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014afe:	881b      	ldrh	r3, [r3, #0]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d13a      	bne.n	8014b7a <create_StepCountMapBack_queue+0x3ee>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014b04:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b08:	f103 031a 	add.w	r3, r3, #26
 8014b0c:	881a      	ldrh	r2, [r3, #0]
 8014b0e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b12:	f103 0318 	add.w	r3, r3, #24
 8014b16:	881b      	ldrh	r3, [r3, #0]
 8014b18:	4947      	ldr	r1, [pc, #284]	; (8014c38 <create_StepCountMapBack_queue+0x4ac>)
 8014b1a:	0112      	lsls	r2, r2, #4
 8014b1c:	4413      	add	r3, r2
 8014b1e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014b22:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b26:	f103 031a 	add.w	r3, r3, #26
 8014b2a:	881a      	ldrh	r2, [r3, #0]
 8014b2c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b30:	f103 0318 	add.w	r3, r3, #24
 8014b34:	881b      	ldrh	r3, [r3, #0]
 8014b36:	3b01      	subs	r3, #1
 8014b38:	3101      	adds	r1, #1
 8014b3a:	b288      	uxth	r0, r1
 8014b3c:	493e      	ldr	r1, [pc, #248]	; (8014c38 <create_StepCountMapBack_queue+0x4ac>)
 8014b3e:	0112      	lsls	r2, r2, #4
 8014b40:	4413      	add	r3, r2
 8014b42:	4602      	mov	r2, r0
 8014b44:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014b48:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b4c:	f103 031a 	add.w	r3, r3, #26
 8014b50:	881a      	ldrh	r2, [r3, #0]
 8014b52:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014b56:	4611      	mov	r1, r2
 8014b58:	4618      	mov	r0, r3
 8014b5a:	f000 f8ff 	bl	8014d5c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8014b5e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b62:	f103 0318 	add.w	r3, r3, #24
 8014b66:	881b      	ldrh	r3, [r3, #0]
 8014b68:	3b01      	subs	r3, #1
 8014b6a:	b29a      	uxth	r2, r3
 8014b6c:	f107 0308 	add.w	r3, r7, #8
 8014b70:	3b04      	subs	r3, #4
 8014b72:	4611      	mov	r1, r2
 8014b74:	4618      	mov	r0, r3
 8014b76:	f000 f8f1 	bl	8014d5c <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 8014b7a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b7e:	f103 031a 	add.w	r3, r3, #26
 8014b82:	881b      	ldrh	r3, [r3, #0]
 8014b84:	1c5a      	adds	r2, r3, #1
 8014b86:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b8a:	f103 0318 	add.w	r3, r3, #24
 8014b8e:	881b      	ldrh	r3, [r3, #0]
 8014b90:	4929      	ldr	r1, [pc, #164]	; (8014c38 <create_StepCountMapBack_queue+0x4ac>)
 8014b92:	0112      	lsls	r2, r2, #4
 8014b94:	4413      	add	r3, r2
 8014b96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014b9a:	2bff      	cmp	r3, #255	; 0xff
 8014b9c:	d14e      	bne.n	8014c3c <create_StepCountMapBack_queue+0x4b0>
 8014b9e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ba2:	f103 031a 	add.w	r3, r3, #26
 8014ba6:	881b      	ldrh	r3, [r3, #0]
 8014ba8:	2b0f      	cmp	r3, #15
 8014baa:	d047      	beq.n	8014c3c <create_StepCountMapBack_queue+0x4b0>
 8014bac:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bb0:	f103 031e 	add.w	r3, r3, #30
 8014bb4:	881b      	ldrh	r3, [r3, #0]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d140      	bne.n	8014c3c <create_StepCountMapBack_queue+0x4b0>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014bba:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bbe:	f103 031a 	add.w	r3, r3, #26
 8014bc2:	881a      	ldrh	r2, [r3, #0]
 8014bc4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bc8:	f103 0318 	add.w	r3, r3, #24
 8014bcc:	881b      	ldrh	r3, [r3, #0]
 8014bce:	491a      	ldr	r1, [pc, #104]	; (8014c38 <create_StepCountMapBack_queue+0x4ac>)
 8014bd0:	0112      	lsls	r2, r2, #4
 8014bd2:	4413      	add	r3, r2
 8014bd4:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014bd8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bdc:	f103 031a 	add.w	r3, r3, #26
 8014be0:	881b      	ldrh	r3, [r3, #0]
 8014be2:	1c5a      	adds	r2, r3, #1
 8014be4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014be8:	f103 0318 	add.w	r3, r3, #24
 8014bec:	881b      	ldrh	r3, [r3, #0]
 8014bee:	3101      	adds	r1, #1
 8014bf0:	b288      	uxth	r0, r1
 8014bf2:	4911      	ldr	r1, [pc, #68]	; (8014c38 <create_StepCountMapBack_queue+0x4ac>)
 8014bf4:	0112      	lsls	r2, r2, #4
 8014bf6:	4413      	add	r3, r2
 8014bf8:	4602      	mov	r2, r0
 8014bfa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8014bfe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c02:	f103 031a 	add.w	r3, r3, #26
 8014c06:	881b      	ldrh	r3, [r3, #0]
 8014c08:	3301      	adds	r3, #1
 8014c0a:	b29a      	uxth	r2, r3
 8014c0c:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014c10:	4611      	mov	r1, r2
 8014c12:	4618      	mov	r0, r3
 8014c14:	f000 f8a2 	bl	8014d5c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014c18:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c1c:	f103 0318 	add.w	r3, r3, #24
 8014c20:	881a      	ldrh	r2, [r3, #0]
 8014c22:	f107 0308 	add.w	r3, r7, #8
 8014c26:	3b04      	subs	r3, #4
 8014c28:	4611      	mov	r1, r2
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	f000 f896 	bl	8014d5c <pushStack_walk>
 8014c30:	e004      	b.n	8014c3c <create_StepCountMapBack_queue+0x4b0>
 8014c32:	bf00      	nop
 8014c34:	20000c3c 	.word	0x20000c3c
 8014c38:	20000d30 	.word	0x20000d30
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8014c3c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c40:	f103 031a 	add.w	r3, r3, #26
 8014c44:	881b      	ldrh	r3, [r3, #0]
 8014c46:	1e5a      	subs	r2, r3, #1
 8014c48:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c4c:	f103 0318 	add.w	r3, r3, #24
 8014c50:	881b      	ldrh	r3, [r3, #0]
 8014c52:	4939      	ldr	r1, [pc, #228]	; (8014d38 <create_StepCountMapBack_queue+0x5ac>)
 8014c54:	0112      	lsls	r2, r2, #4
 8014c56:	4413      	add	r3, r2
 8014c58:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014c5c:	2bff      	cmp	r3, #255	; 0xff
 8014c5e:	d148      	bne.n	8014cf2 <create_StepCountMapBack_queue+0x566>
 8014c60:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c64:	f103 031a 	add.w	r3, r3, #26
 8014c68:	881b      	ldrh	r3, [r3, #0]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d041      	beq.n	8014cf2 <create_StepCountMapBack_queue+0x566>
 8014c6e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c72:	f103 031c 	add.w	r3, r3, #28
 8014c76:	881b      	ldrh	r3, [r3, #0]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d13a      	bne.n	8014cf2 <create_StepCountMapBack_queue+0x566>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014c7c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c80:	f103 031a 	add.w	r3, r3, #26
 8014c84:	881a      	ldrh	r2, [r3, #0]
 8014c86:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c8a:	f103 0318 	add.w	r3, r3, #24
 8014c8e:	881b      	ldrh	r3, [r3, #0]
 8014c90:	4929      	ldr	r1, [pc, #164]	; (8014d38 <create_StepCountMapBack_queue+0x5ac>)
 8014c92:	0112      	lsls	r2, r2, #4
 8014c94:	4413      	add	r3, r2
 8014c96:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014c9a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c9e:	f103 031a 	add.w	r3, r3, #26
 8014ca2:	881b      	ldrh	r3, [r3, #0]
 8014ca4:	1e5a      	subs	r2, r3, #1
 8014ca6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014caa:	f103 0318 	add.w	r3, r3, #24
 8014cae:	881b      	ldrh	r3, [r3, #0]
 8014cb0:	3101      	adds	r1, #1
 8014cb2:	b288      	uxth	r0, r1
 8014cb4:	4920      	ldr	r1, [pc, #128]	; (8014d38 <create_StepCountMapBack_queue+0x5ac>)
 8014cb6:	0112      	lsls	r2, r2, #4
 8014cb8:	4413      	add	r3, r2
 8014cba:	4602      	mov	r2, r0
 8014cbc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014cc0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cc4:	f103 031a 	add.w	r3, r3, #26
 8014cc8:	881b      	ldrh	r3, [r3, #0]
 8014cca:	3b01      	subs	r3, #1
 8014ccc:	b29a      	uxth	r2, r3
 8014cce:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014cd2:	4611      	mov	r1, r2
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	f000 f841 	bl	8014d5c <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014cda:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cde:	f103 0318 	add.w	r3, r3, #24
 8014ce2:	881a      	ldrh	r2, [r3, #0]
 8014ce4:	f107 0308 	add.w	r3, r7, #8
 8014ce8:	3b04      	subs	r3, #4
 8014cea:	4611      	mov	r1, r2
 8014cec:	4618      	mov	r0, r3
 8014cee:	f000 f835 	bl	8014d5c <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 8014cf2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cf6:	f103 031a 	add.w	r3, r3, #26
 8014cfa:	881a      	ldrh	r2, [r3, #0]
 8014cfc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d00:	f103 0318 	add.w	r3, r3, #24
 8014d04:	881b      	ldrh	r3, [r3, #0]
 8014d06:	490c      	ldr	r1, [pc, #48]	; (8014d38 <create_StepCountMapBack_queue+0x5ac>)
 8014d08:	0112      	lsls	r2, r2, #4
 8014d0a:	4413      	add	r3, r2
 8014d0c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014d10:	3301      	adds	r3, #1
 8014d12:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014d16:	f102 0204 	add.w	r2, r2, #4
 8014d1a:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014d1c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014d20:	f103 0304 	add.w	r3, r3, #4
 8014d24:	881b      	ldrh	r3, [r3, #0]
 8014d26:	2bfe      	cmp	r3, #254	; 0xfe
 8014d28:	f67f adb2 	bls.w	8014890 <create_StepCountMapBack_queue+0x104>

		}

}
 8014d2c:	bf00      	nop
 8014d2e:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8014d32:	3708      	adds	r7, #8
 8014d34:	46bd      	mov	sp, r7
 8014d36:	bd80      	pop	{r7, pc}
 8014d38:	20000d30 	.word	0x20000d30

08014d3c <initStack_walk>:




void initStack_walk(STACK_T *stack){
 8014d3c:	b480      	push	{r7}
 8014d3e:	b083      	sub	sp, #12
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
//	for(int i=0;i<=MAX_QUEUE_NUM-1;i++){
//		stack->data[i] = 0;
//	}
    /* スタックを空に設定 */
	stack->head = 0;
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	2200      	movs	r2, #0
 8014d48:	601a      	str	r2, [r3, #0]
    stack->tail = 0;
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	605a      	str	r2, [r3, #4]
}
 8014d50:	bf00      	nop
 8014d52:	370c      	adds	r7, #12
 8014d54:	46bd      	mov	sp, r7
 8014d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5a:	4770      	bx	lr

08014d5c <pushStack_walk>:



void pushStack_walk(STACK_T *stack, unsigned short input){
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b082      	sub	sp, #8
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
 8014d64:	460b      	mov	r3, r1
 8014d66:	807b      	strh	r3, [r7, #2]

    /* データをデータの最後尾の１つ後ろに格納 */
    stack->data[stack->tail] = input;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	685a      	ldr	r2, [r3, #4]
 8014d6c:	8879      	ldrh	r1, [r7, #2]
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	3202      	adds	r2, #2
 8014d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* データの最後尾を１つ後ろに移動 */
    stack->tail = stack->tail + 1;
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	685b      	ldr	r3, [r3, #4]
 8014d7a:	1c5a      	adds	r2, r3, #1
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	605a      	str	r2, [r3, #4]

    /* 巡回シフト */
    if(stack->tail == MAX_QUEUE_NUM) stack->tail = 0;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	685b      	ldr	r3, [r3, #4]
 8014d84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014d88:	d102      	bne.n	8014d90 <pushStack_walk+0x34>
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	605a      	str	r2, [r3, #4]

    /* スタックが満杯なら何もせず関数終了 */
    if(stack->tail == stack->head ){
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	685a      	ldr	r2, [r3, #4]
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	429a      	cmp	r2, r3
 8014d9a:	d103      	bne.n	8014da4 <pushStack_walk+0x48>
    	printf("stack_full\n");
 8014d9c:	4803      	ldr	r0, [pc, #12]	; (8014dac <pushStack_walk+0x50>)
 8014d9e:	f00b ffab 	bl	8020cf8 <puts>
        return;
 8014da2:	bf00      	nop
    }
}
 8014da4:	3708      	adds	r7, #8
 8014da6:	46bd      	mov	sp, r7
 8014da8:	bd80      	pop	{r7, pc}
 8014daa:	bf00      	nop
 8014dac:	08023514 	.word	0x08023514

08014db0 <popStack_walk>:


unsigned short popStack_walk(STACK_T *stack){
 8014db0:	b480      	push	{r7}
 8014db2:	b085      	sub	sp, #20
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
    unsigned short ret = 0;
 8014db8:	2300      	movs	r3, #0
 8014dba:	81fb      	strh	r3, [r7, #14]

    /* スタックが空なら何もせずに関数終了 */
    if(stack->tail == stack->head){
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	685a      	ldr	r2, [r3, #4]
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	429a      	cmp	r2, r3
 8014dc6:	d102      	bne.n	8014dce <popStack_walk+0x1e>
    	//printf("stack_empty\n");
        return 65535;
 8014dc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014dcc:	e014      	b.n	8014df8 <popStack_walk+0x48>
    }

    /* データの最前列からデータを取得 */
    ret = stack->data[stack->head];
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	681a      	ldr	r2, [r3, #0]
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	3202      	adds	r2, #2
 8014dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dda:	81fb      	strh	r3, [r7, #14]

    /* データの最前列を１つ前にずらす */
    stack->head = stack->head + 1;
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	1c5a      	adds	r2, r3, #1
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	601a      	str	r2, [r3, #0]

    /* 巡回シフト */
    if(stack->head == MAX_QUEUE_NUM) stack->head = 0;
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014dee:	d102      	bne.n	8014df6 <popStack_walk+0x46>
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	2200      	movs	r2, #0
 8014df4:	601a      	str	r2, [r3, #0]

    /* 取得したデータを返却 */
    return ret;
 8014df6:	89fb      	ldrh	r3, [r7, #14]
}
 8014df8:	4618      	mov	r0, r3
 8014dfa:	3714      	adds	r7, #20
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e02:	4770      	bx	lr

08014e04 <maze_display>:

void maze_makerback(int direction, int front_SEN, int left_SEN, int right_SEN,
		int x, int y) {}


void maze_display(void) {
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b082      	sub	sp, #8
 8014e08:	af00      	add	r7, sp, #0

	int tt = 14;
 8014e0a:	230e      	movs	r3, #14
 8014e0c:	607b      	str	r3, [r7, #4]
	int ss = 0;
 8014e0e:	2300      	movs	r3, #0
 8014e10:	603b      	str	r3, [r7, #0]

	printf(
 8014e12:	4881      	ldr	r0, [pc, #516]	; (8015018 <maze_display+0x214>)
 8014e14:	f00b ff70 	bl	8020cf8 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8014e18:	230e      	movs	r3, #14
 8014e1a:	607b      	str	r3, [r7, #4]
 8014e1c:	e06e      	b.n	8014efc <maze_display+0xf8>

		printf("|%5d", walk_count[0][tt + 1]);
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	3301      	adds	r3, #1
 8014e22:	4a7e      	ldr	r2, [pc, #504]	; (801501c <maze_display+0x218>)
 8014e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014e28:	4619      	mov	r1, r3
 8014e2a:	487d      	ldr	r0, [pc, #500]	; (8015020 <maze_display+0x21c>)
 8014e2c:	f00b fec8 	bl	8020bc0 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014e30:	2300      	movs	r3, #0
 8014e32:	603b      	str	r3, [r7, #0]
 8014e34:	e030      	b.n	8014e98 <maze_display+0x94>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8014e36:	4a7b      	ldr	r2, [pc, #492]	; (8015024 <maze_display+0x220>)
 8014e38:	683b      	ldr	r3, [r7, #0]
 8014e3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014e3e:	4619      	mov	r1, r3
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	3301      	adds	r3, #1
 8014e44:	2201      	movs	r2, #1
 8014e46:	fa02 f303 	lsl.w	r3, r2, r3
 8014e4a:	ea01 0203 	and.w	r2, r1, r3
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	3301      	adds	r3, #1
 8014e52:	2101      	movs	r1, #1
 8014e54:	fa01 f303 	lsl.w	r3, r1, r3
 8014e58:	429a      	cmp	r2, r3
 8014e5a:	d10d      	bne.n	8014e78 <maze_display+0x74>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 8014e5c:	683b      	ldr	r3, [r7, #0]
 8014e5e:	1c5a      	adds	r2, r3, #1
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	3301      	adds	r3, #1
 8014e64:	496d      	ldr	r1, [pc, #436]	; (801501c <maze_display+0x218>)
 8014e66:	0112      	lsls	r2, r2, #4
 8014e68:	4413      	add	r3, r2
 8014e6a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014e6e:	4619      	mov	r1, r3
 8014e70:	486b      	ldr	r0, [pc, #428]	; (8015020 <maze_display+0x21c>)
 8014e72:	f00b fea5 	bl	8020bc0 <iprintf>
 8014e76:	e00c      	b.n	8014e92 <maze_display+0x8e>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 8014e78:	683b      	ldr	r3, [r7, #0]
 8014e7a:	1c5a      	adds	r2, r3, #1
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	3301      	adds	r3, #1
 8014e80:	4966      	ldr	r1, [pc, #408]	; (801501c <maze_display+0x218>)
 8014e82:	0112      	lsls	r2, r2, #4
 8014e84:	4413      	add	r3, r2
 8014e86:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014e8a:	4619      	mov	r1, r3
 8014e8c:	4866      	ldr	r0, [pc, #408]	; (8015028 <maze_display+0x224>)
 8014e8e:	f00b fe97 	bl	8020bc0 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014e92:	683b      	ldr	r3, [r7, #0]
 8014e94:	3301      	adds	r3, #1
 8014e96:	603b      	str	r3, [r7, #0]
 8014e98:	683b      	ldr	r3, [r7, #0]
 8014e9a:	2b0e      	cmp	r3, #14
 8014e9c:	ddcb      	ble.n	8014e36 <maze_display+0x32>
			}
		}
		printf("|\n");
 8014e9e:	4863      	ldr	r0, [pc, #396]	; (801502c <maze_display+0x228>)
 8014ea0:	f00b ff2a 	bl	8020cf8 <puts>
		if (tt <= -1) {
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	db2d      	blt.n	8014f06 <maze_display+0x102>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014eaa:	2300      	movs	r3, #0
 8014eac:	603b      	str	r3, [r7, #0]
 8014eae:	e01c      	b.n	8014eea <maze_display+0xe6>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 8014eb0:	4a5c      	ldr	r2, [pc, #368]	; (8015024 <maze_display+0x220>)
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	330c      	adds	r3, #12
 8014eb6:	005b      	lsls	r3, r3, #1
 8014eb8:	4413      	add	r3, r2
 8014eba:	88db      	ldrh	r3, [r3, #6]
 8014ebc:	4619      	mov	r1, r3
 8014ebe:	2201      	movs	r2, #1
 8014ec0:	683b      	ldr	r3, [r7, #0]
 8014ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8014ec6:	ea01 0203 	and.w	r2, r1, r3
 8014eca:	2101      	movs	r1, #1
 8014ecc:	683b      	ldr	r3, [r7, #0]
 8014ece:	fa01 f303 	lsl.w	r3, r1, r3
 8014ed2:	429a      	cmp	r2, r3
 8014ed4:	d103      	bne.n	8014ede <maze_display+0xda>
				printf("+-----");
 8014ed6:	4856      	ldr	r0, [pc, #344]	; (8015030 <maze_display+0x22c>)
 8014ed8:	f00b fe72 	bl	8020bc0 <iprintf>
 8014edc:	e002      	b.n	8014ee4 <maze_display+0xe0>
			}else{
				printf("+     ");
 8014ede:	4855      	ldr	r0, [pc, #340]	; (8015034 <maze_display+0x230>)
 8014ee0:	f00b fe6e 	bl	8020bc0 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	3301      	adds	r3, #1
 8014ee8:	603b      	str	r3, [r7, #0]
 8014eea:	683b      	ldr	r3, [r7, #0]
 8014eec:	2b0f      	cmp	r3, #15
 8014eee:	dddf      	ble.n	8014eb0 <maze_display+0xac>
			}
		}

		printf("+\n");
 8014ef0:	4851      	ldr	r0, [pc, #324]	; (8015038 <maze_display+0x234>)
 8014ef2:	f00b ff01 	bl	8020cf8 <puts>
	for (tt = 14;tt >= -1;tt--){
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	3b01      	subs	r3, #1
 8014efa:	607b      	str	r3, [r7, #4]
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f02:	da8c      	bge.n	8014e1e <maze_display+0x1a>
 8014f04:	e000      	b.n	8014f08 <maze_display+0x104>
			break;
 8014f06:	bf00      	nop

	}

	printf(
 8014f08:	484c      	ldr	r0, [pc, #304]	; (801503c <maze_display+0x238>)
 8014f0a:	f00b fef5 	bl	8020cf8 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 8014f0e:	4842      	ldr	r0, [pc, #264]	; (8015018 <maze_display+0x214>)
 8014f10:	f00b fef2 	bl	8020cf8 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");

	for (tt = 14;tt >= -1;tt--){
 8014f14:	230e      	movs	r3, #14
 8014f16:	607b      	str	r3, [r7, #4]
 8014f18:	e070      	b.n	8014ffc <maze_display+0x1f8>
		printf("|%5d", walk_count[0][tt + 1]);
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	3301      	adds	r3, #1
 8014f1e:	4a3f      	ldr	r2, [pc, #252]	; (801501c <maze_display+0x218>)
 8014f20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014f24:	4619      	mov	r1, r3
 8014f26:	483e      	ldr	r0, [pc, #248]	; (8015020 <maze_display+0x21c>)
 8014f28:	f00b fe4a 	bl	8020bc0 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	603b      	str	r3, [r7, #0]
 8014f30:	e032      	b.n	8014f98 <maze_display+0x194>
			if ((wall.row_look[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8014f32:	4a3c      	ldr	r2, [pc, #240]	; (8015024 <maze_display+0x220>)
 8014f34:	683b      	ldr	r3, [r7, #0]
 8014f36:	331c      	adds	r3, #28
 8014f38:	005b      	lsls	r3, r3, #1
 8014f3a:	4413      	add	r3, r2
 8014f3c:	889b      	ldrh	r3, [r3, #4]
 8014f3e:	4619      	mov	r1, r3
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	3301      	adds	r3, #1
 8014f44:	2201      	movs	r2, #1
 8014f46:	fa02 f303 	lsl.w	r3, r2, r3
 8014f4a:	ea01 0203 	and.w	r2, r1, r3
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	3301      	adds	r3, #1
 8014f52:	2101      	movs	r1, #1
 8014f54:	fa01 f303 	lsl.w	r3, r1, r3
 8014f58:	429a      	cmp	r2, r3
 8014f5a:	d10d      	bne.n	8014f78 <maze_display+0x174>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	1c5a      	adds	r2, r3, #1
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	3301      	adds	r3, #1
 8014f64:	492d      	ldr	r1, [pc, #180]	; (801501c <maze_display+0x218>)
 8014f66:	0112      	lsls	r2, r2, #4
 8014f68:	4413      	add	r3, r2
 8014f6a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014f6e:	4619      	mov	r1, r3
 8014f70:	482b      	ldr	r0, [pc, #172]	; (8015020 <maze_display+0x21c>)
 8014f72:	f00b fe25 	bl	8020bc0 <iprintf>
 8014f76:	e00c      	b.n	8014f92 <maze_display+0x18e>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 8014f78:	683b      	ldr	r3, [r7, #0]
 8014f7a:	1c5a      	adds	r2, r3, #1
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	3301      	adds	r3, #1
 8014f80:	4926      	ldr	r1, [pc, #152]	; (801501c <maze_display+0x218>)
 8014f82:	0112      	lsls	r2, r2, #4
 8014f84:	4413      	add	r3, r2
 8014f86:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014f8a:	4619      	mov	r1, r3
 8014f8c:	4826      	ldr	r0, [pc, #152]	; (8015028 <maze_display+0x224>)
 8014f8e:	f00b fe17 	bl	8020bc0 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	3301      	adds	r3, #1
 8014f96:	603b      	str	r3, [r7, #0]
 8014f98:	683b      	ldr	r3, [r7, #0]
 8014f9a:	2b0e      	cmp	r3, #14
 8014f9c:	ddc9      	ble.n	8014f32 <maze_display+0x12e>
			}
		}
		printf("|\n");
 8014f9e:	4823      	ldr	r0, [pc, #140]	; (801502c <maze_display+0x228>)
 8014fa0:	f00b feaa 	bl	8020cf8 <puts>
		if (tt <= -1) {
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	db2d      	blt.n	8015006 <maze_display+0x202>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014faa:	2300      	movs	r3, #0
 8014fac:	603b      	str	r3, [r7, #0]
 8014fae:	e01c      	b.n	8014fea <maze_display+0x1e6>
			if ((wall.column_look[tt] & (1 << ss)) == (1 << ss)){
 8014fb0:	4a1c      	ldr	r2, [pc, #112]	; (8015024 <maze_display+0x220>)
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	332c      	adds	r3, #44	; 0x2c
 8014fb6:	005b      	lsls	r3, r3, #1
 8014fb8:	4413      	add	r3, r2
 8014fba:	885b      	ldrh	r3, [r3, #2]
 8014fbc:	4619      	mov	r1, r3
 8014fbe:	2201      	movs	r2, #1
 8014fc0:	683b      	ldr	r3, [r7, #0]
 8014fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8014fc6:	ea01 0203 	and.w	r2, r1, r3
 8014fca:	2101      	movs	r1, #1
 8014fcc:	683b      	ldr	r3, [r7, #0]
 8014fce:	fa01 f303 	lsl.w	r3, r1, r3
 8014fd2:	429a      	cmp	r2, r3
 8014fd4:	d103      	bne.n	8014fde <maze_display+0x1da>
				printf("+-----");
 8014fd6:	4816      	ldr	r0, [pc, #88]	; (8015030 <maze_display+0x22c>)
 8014fd8:	f00b fdf2 	bl	8020bc0 <iprintf>
 8014fdc:	e002      	b.n	8014fe4 <maze_display+0x1e0>
			}else{
				printf("+     ");
 8014fde:	4815      	ldr	r0, [pc, #84]	; (8015034 <maze_display+0x230>)
 8014fe0:	f00b fdee 	bl	8020bc0 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014fe4:	683b      	ldr	r3, [r7, #0]
 8014fe6:	3301      	adds	r3, #1
 8014fe8:	603b      	str	r3, [r7, #0]
 8014fea:	683b      	ldr	r3, [r7, #0]
 8014fec:	2b0f      	cmp	r3, #15
 8014fee:	dddf      	ble.n	8014fb0 <maze_display+0x1ac>
			}
		}
		printf("+\n");
 8014ff0:	4811      	ldr	r0, [pc, #68]	; (8015038 <maze_display+0x234>)
 8014ff2:	f00b fe81 	bl	8020cf8 <puts>
	for (tt = 14;tt >= -1;tt--){
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	3b01      	subs	r3, #1
 8014ffa:	607b      	str	r3, [r7, #4]
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015002:	da8a      	bge.n	8014f1a <maze_display+0x116>
 8015004:	e000      	b.n	8015008 <maze_display+0x204>
			break;
 8015006:	bf00      	nop
	}

	printf(
 8015008:	480c      	ldr	r0, [pc, #48]	; (801503c <maze_display+0x238>)
 801500a:	f00b fe75 	bl	8020cf8 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

}
 801500e:	bf00      	nop
 8015010:	3708      	adds	r7, #8
 8015012:	46bd      	mov	sp, r7
 8015014:	bd80      	pop	{r7, pc}
 8015016:	bf00      	nop
 8015018:	08023520 	.word	0x08023520
 801501c:	20000d30 	.word	0x20000d30
 8015020:	08023584 	.word	0x08023584
 8015024:	20000c3c 	.word	0x20000c3c
 8015028:	0802358c 	.word	0x0802358c
 801502c:	08023594 	.word	0x08023594
 8015030:	08023598 	.word	0x08023598
 8015034:	080235a0 	.word	0x080235a0
 8015038:	080235a8 	.word	0x080235a8
 801503c:	080235ac 	.word	0x080235ac

08015040 <maze_display_Dijkstra>:





void maze_display_Dijkstra(void) {
 8015040:	b580      	push	{r7, lr}
 8015042:	b082      	sub	sp, #8
 8015044:	af00      	add	r7, sp, #0

	int tt = 14;
 8015046:	230e      	movs	r3, #14
 8015048:	607b      	str	r3, [r7, #4]
	int ss = 0;
 801504a:	2300      	movs	r3, #0
 801504c:	603b      	str	r3, [r7, #0]

	printf(
 801504e:	4865      	ldr	r0, [pc, #404]	; (80151e4 <maze_display_Dijkstra+0x1a4>)
 8015050:	f00b fe52 	bl	8020cf8 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8015054:	230e      	movs	r3, #14
 8015056:	607b      	str	r3, [r7, #4]
 8015058:	e06a      	b.n	8015130 <maze_display_Dijkstra+0xf0>

		printf("|   ");//walk_count[tt + 1]
 801505a:	4863      	ldr	r0, [pc, #396]	; (80151e8 <maze_display_Dijkstra+0x1a8>)
 801505c:	f00b fdb0 	bl	8020bc0 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015060:	2300      	movs	r3, #0
 8015062:	603b      	str	r3, [r7, #0]
 8015064:	e027      	b.n	80150b6 <maze_display_Dijkstra+0x76>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8015066:	4a61      	ldr	r2, [pc, #388]	; (80151ec <maze_display_Dijkstra+0x1ac>)
 8015068:	683b      	ldr	r3, [r7, #0]
 801506a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801506e:	4619      	mov	r1, r3
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	3301      	adds	r3, #1
 8015074:	2201      	movs	r2, #1
 8015076:	fa02 f303 	lsl.w	r3, r2, r3
 801507a:	ea01 0203 	and.w	r2, r1, r3
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	3301      	adds	r3, #1
 8015082:	2101      	movs	r1, #1
 8015084:	fa01 f303 	lsl.w	r3, r1, r3
 8015088:	429a      	cmp	r2, r3
 801508a:	d103      	bne.n	8015094 <maze_display_Dijkstra+0x54>
				printf("  |   ");
 801508c:	4858      	ldr	r0, [pc, #352]	; (80151f0 <maze_display_Dijkstra+0x1b0>)
 801508e:	f00b fd97 	bl	8020bc0 <iprintf>
 8015092:	e00d      	b.n	80150b0 <maze_display_Dijkstra+0x70>
			}else{
				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	1c5a      	adds	r2, r3, #1
 8015098:	4956      	ldr	r1, [pc, #344]	; (80151f4 <maze_display_Dijkstra+0x1b4>)
 801509a:	4613      	mov	r3, r2
 801509c:	011b      	lsls	r3, r3, #4
 801509e:	1a9b      	subs	r3, r3, r2
 80150a0:	683a      	ldr	r2, [r7, #0]
 80150a2:	4413      	add	r3, r2
 80150a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80150a8:	4619      	mov	r1, r3
 80150aa:	4853      	ldr	r0, [pc, #332]	; (80151f8 <maze_display_Dijkstra+0x1b8>)
 80150ac:	f00b fd88 	bl	8020bc0 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80150b0:	683b      	ldr	r3, [r7, #0]
 80150b2:	3301      	adds	r3, #1
 80150b4:	603b      	str	r3, [r7, #0]
 80150b6:	683b      	ldr	r3, [r7, #0]
 80150b8:	2b0e      	cmp	r3, #14
 80150ba:	ddd4      	ble.n	8015066 <maze_display_Dijkstra+0x26>
			}
		}
		printf("   |\n");
 80150bc:	484f      	ldr	r0, [pc, #316]	; (80151fc <maze_display_Dijkstra+0x1bc>)
 80150be:	f00b fe1b 	bl	8020cf8 <puts>
		if (tt <= -1) {
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	db38      	blt.n	801513a <maze_display_Dijkstra+0xfa>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 80150c8:	2300      	movs	r3, #0
 80150ca:	603b      	str	r3, [r7, #0]
 80150cc:	e027      	b.n	801511e <maze_display_Dijkstra+0xde>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 80150ce:	4a47      	ldr	r2, [pc, #284]	; (80151ec <maze_display_Dijkstra+0x1ac>)
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	330c      	adds	r3, #12
 80150d4:	005b      	lsls	r3, r3, #1
 80150d6:	4413      	add	r3, r2
 80150d8:	88db      	ldrh	r3, [r3, #6]
 80150da:	4619      	mov	r1, r3
 80150dc:	2201      	movs	r2, #1
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	fa02 f303 	lsl.w	r3, r2, r3
 80150e4:	ea01 0203 	and.w	r2, r1, r3
 80150e8:	2101      	movs	r1, #1
 80150ea:	683b      	ldr	r3, [r7, #0]
 80150ec:	fa01 f303 	lsl.w	r3, r1, r3
 80150f0:	429a      	cmp	r2, r3
 80150f2:	d103      	bne.n	80150fc <maze_display_Dijkstra+0xbc>
				printf("+-----");
 80150f4:	4842      	ldr	r0, [pc, #264]	; (8015200 <maze_display_Dijkstra+0x1c0>)
 80150f6:	f00b fd63 	bl	8020bc0 <iprintf>
 80150fa:	e00d      	b.n	8015118 <maze_display_Dijkstra+0xd8>
			}else{
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 80150fc:	493d      	ldr	r1, [pc, #244]	; (80151f4 <maze_display_Dijkstra+0x1b4>)
 80150fe:	683a      	ldr	r2, [r7, #0]
 8015100:	4613      	mov	r3, r2
 8015102:	011b      	lsls	r3, r3, #4
 8015104:	1a9b      	subs	r3, r3, r2
 8015106:	687a      	ldr	r2, [r7, #4]
 8015108:	4413      	add	r3, r2
 801510a:	33f0      	adds	r3, #240	; 0xf0
 801510c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015110:	4619      	mov	r1, r3
 8015112:	483c      	ldr	r0, [pc, #240]	; (8015204 <maze_display_Dijkstra+0x1c4>)
 8015114:	f00b fd54 	bl	8020bc0 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8015118:	683b      	ldr	r3, [r7, #0]
 801511a:	3301      	adds	r3, #1
 801511c:	603b      	str	r3, [r7, #0]
 801511e:	683b      	ldr	r3, [r7, #0]
 8015120:	2b0f      	cmp	r3, #15
 8015122:	ddd4      	ble.n	80150ce <maze_display_Dijkstra+0x8e>
			}
		}

		printf("+\n");
 8015124:	4838      	ldr	r0, [pc, #224]	; (8015208 <maze_display_Dijkstra+0x1c8>)
 8015126:	f00b fde7 	bl	8020cf8 <puts>
	for (tt = 14;tt >= -1;tt--){
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	3b01      	subs	r3, #1
 801512e:	607b      	str	r3, [r7, #4]
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015136:	da90      	bge.n	801505a <maze_display_Dijkstra+0x1a>
 8015138:	e000      	b.n	801513c <maze_display_Dijkstra+0xfc>
			break;
 801513a:	bf00      	nop

	}

	printf(
 801513c:	4833      	ldr	r0, [pc, #204]	; (801520c <maze_display_Dijkstra+0x1cc>)
 801513e:	f00b fddb 	bl	8020cf8 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 8015142:	4828      	ldr	r0, [pc, #160]	; (80151e4 <maze_display_Dijkstra+0x1a4>)
 8015144:	f00b fdd8 	bl	8020cf8 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8015148:	230e      	movs	r3, #14
 801514a:	607b      	str	r3, [r7, #4]
 801514c:	e03c      	b.n	80151c8 <maze_display_Dijkstra+0x188>

		printf("|   ");//walk_count[tt + 1]
 801514e:	4826      	ldr	r0, [pc, #152]	; (80151e8 <maze_display_Dijkstra+0x1a8>)
 8015150:	f00b fd36 	bl	8020bc0 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015154:	2300      	movs	r3, #0
 8015156:	603b      	str	r3, [r7, #0]
 8015158:	e010      	b.n	801517c <maze_display_Dijkstra+0x13c>

				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	1c5a      	adds	r2, r3, #1
 801515e:	4925      	ldr	r1, [pc, #148]	; (80151f4 <maze_display_Dijkstra+0x1b4>)
 8015160:	4613      	mov	r3, r2
 8015162:	011b      	lsls	r3, r3, #4
 8015164:	1a9b      	subs	r3, r3, r2
 8015166:	683a      	ldr	r2, [r7, #0]
 8015168:	4413      	add	r3, r2
 801516a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801516e:	4619      	mov	r1, r3
 8015170:	4821      	ldr	r0, [pc, #132]	; (80151f8 <maze_display_Dijkstra+0x1b8>)
 8015172:	f00b fd25 	bl	8020bc0 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015176:	683b      	ldr	r3, [r7, #0]
 8015178:	3301      	adds	r3, #1
 801517a:	603b      	str	r3, [r7, #0]
 801517c:	683b      	ldr	r3, [r7, #0]
 801517e:	2b0e      	cmp	r3, #14
 8015180:	ddeb      	ble.n	801515a <maze_display_Dijkstra+0x11a>

		}
		printf("   |\n");
 8015182:	481e      	ldr	r0, [pc, #120]	; (80151fc <maze_display_Dijkstra+0x1bc>)
 8015184:	f00b fdb8 	bl	8020cf8 <puts>
		if (tt <= -1) {
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	2b00      	cmp	r3, #0
 801518c:	db21      	blt.n	80151d2 <maze_display_Dijkstra+0x192>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 801518e:	2300      	movs	r3, #0
 8015190:	603b      	str	r3, [r7, #0]
 8015192:	e010      	b.n	80151b6 <maze_display_Dijkstra+0x176>
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 8015194:	4917      	ldr	r1, [pc, #92]	; (80151f4 <maze_display_Dijkstra+0x1b4>)
 8015196:	683a      	ldr	r2, [r7, #0]
 8015198:	4613      	mov	r3, r2
 801519a:	011b      	lsls	r3, r3, #4
 801519c:	1a9b      	subs	r3, r3, r2
 801519e:	687a      	ldr	r2, [r7, #4]
 80151a0:	4413      	add	r3, r2
 80151a2:	33f0      	adds	r3, #240	; 0xf0
 80151a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80151a8:	4619      	mov	r1, r3
 80151aa:	4816      	ldr	r0, [pc, #88]	; (8015204 <maze_display_Dijkstra+0x1c4>)
 80151ac:	f00b fd08 	bl	8020bc0 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 80151b0:	683b      	ldr	r3, [r7, #0]
 80151b2:	3301      	adds	r3, #1
 80151b4:	603b      	str	r3, [r7, #0]
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	2b0f      	cmp	r3, #15
 80151ba:	ddeb      	ble.n	8015194 <maze_display_Dijkstra+0x154>
		}

		printf("+\n");
 80151bc:	4812      	ldr	r0, [pc, #72]	; (8015208 <maze_display_Dijkstra+0x1c8>)
 80151be:	f00b fd9b 	bl	8020cf8 <puts>
	for (tt = 14;tt >= -1;tt--){
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	3b01      	subs	r3, #1
 80151c6:	607b      	str	r3, [r7, #4]
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151ce:	dabe      	bge.n	801514e <maze_display_Dijkstra+0x10e>
 80151d0:	e000      	b.n	80151d4 <maze_display_Dijkstra+0x194>
			break;
 80151d2:	bf00      	nop

	}

	printf(
 80151d4:	480d      	ldr	r0, [pc, #52]	; (801520c <maze_display_Dijkstra+0x1cc>)
 80151d6:	f00b fd8f 	bl	8020cf8 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");




}
 80151da:	bf00      	nop
 80151dc:	3708      	adds	r7, #8
 80151de:	46bd      	mov	sp, r7
 80151e0:	bd80      	pop	{r7, pc}
 80151e2:	bf00      	nop
 80151e4:	08023520 	.word	0x08023520
 80151e8:	08023610 	.word	0x08023610
 80151ec:	20000c3c 	.word	0x20000c3c
 80151f0:	08023618 	.word	0x08023618
 80151f4:	20000f30 	.word	0x20000f30
 80151f8:	08023620 	.word	0x08023620
 80151fc:	08023628 	.word	0x08023628
 8015200:	08023598 	.word	0x08023598
 8015204:	08023630 	.word	0x08023630
 8015208:	080235a8 	.word	0x080235a8
 801520c:	080235ac 	.word	0x080235ac

08015210 <mode_decision>:





unsigned char mode_decision(unsigned char now_mode){
 8015210:	b580      	push	{r7, lr}
 8015212:	b084      	sub	sp, #16
 8015214:	af00      	add	r7, sp, #0
 8015216:	4603      	mov	r3, r0
 8015218:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 801521a:	2300      	movs	r3, #0
 801521c:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 801521e:	2300      	movs	r3, #0
 8015220:	73bb      	strb	r3, [r7, #14]
unsigned char main_mode=0;
 8015222:	2300      	movs	r3, #0
 8015224:	737b      	strb	r3, [r7, #13]
float dis8 =10;
 8015226:	4b71      	ldr	r3, [pc, #452]	; (80153ec <mode_decision+0x1dc>)
 8015228:	60bb      	str	r3, [r7, #8]
main_modeR=now_mode & 0x0F;
 801522a:	79fb      	ldrb	r3, [r7, #7]
 801522c:	f003 030f 	and.w	r3, r3, #15
 8015230:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8015232:	79fb      	ldrb	r3, [r7, #7]
 8015234:	091b      	lsrs	r3, r3, #4
 8015236:	73bb      	strb	r3, [r7, #14]

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015238:	7bbb      	ldrb	r3, [r7, #14]
 801523a:	011b      	lsls	r3, r3, #4
 801523c:	b2da      	uxtb	r2, r3
 801523e:	7bfb      	ldrb	r3, [r7, #15]
 8015240:	4413      	add	r3, r2
 8015242:	b2db      	uxtb	r3, r3
 8015244:	4618      	mov	r0, r3
 8015246:	f7f1 fddf 	bl	8006e08 <pl_yellow_LED_count>
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 400) {
 801524a:	e07f      	b.n	801534c <mode_decision+0x13c>
				HAL_Delay(1);
 801524c:	2001      	movs	r0, #1
 801524e:	f003 fd65 	bl	8018d1c <HAL_Delay>
				if (E_distanceR >= dis8) {
 8015252:	4b67      	ldr	r3, [pc, #412]	; (80153f0 <mode_decision+0x1e0>)
 8015254:	edd3 7a00 	vldr	s15, [r3]
 8015258:	ed97 7a02 	vldr	s14, [r7, #8]
 801525c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015264:	d813      	bhi.n	801528e <mode_decision+0x7e>
					if (main_modeR == 15) {
 8015266:	7bfb      	ldrb	r3, [r7, #15]
 8015268:	2b0f      	cmp	r3, #15
 801526a:	d102      	bne.n	8015272 <mode_decision+0x62>
						main_modeR = 0;
 801526c:	2300      	movs	r3, #0
 801526e:	73fb      	strb	r3, [r7, #15]
 8015270:	e002      	b.n	8015278 <mode_decision+0x68>
					} else {
						main_modeR++;
 8015272:	7bfb      	ldrb	r3, [r7, #15]
 8015274:	3301      	adds	r3, #1
 8015276:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8015278:	f7eb fe90 	bl	8000f9c <reset_distance>

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 801527c:	7bbb      	ldrb	r3, [r7, #14]
 801527e:	011b      	lsls	r3, r3, #4
 8015280:	b2da      	uxtb	r2, r3
 8015282:	7bfb      	ldrb	r3, [r7, #15]
 8015284:	4413      	add	r3, r2
 8015286:	b2db      	uxtb	r3, r3
 8015288:	4618      	mov	r0, r3
 801528a:	f7f1 fdbd 	bl	8006e08 <pl_yellow_LED_count>
				}
				if (E_distanceR <= -dis8) {
 801528e:	edd7 7a02 	vldr	s15, [r7, #8]
 8015292:	eeb1 7a67 	vneg.f32	s14, s15
 8015296:	4b56      	ldr	r3, [pc, #344]	; (80153f0 <mode_decision+0x1e0>)
 8015298:	edd3 7a00 	vldr	s15, [r3]
 801529c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152a4:	db13      	blt.n	80152ce <mode_decision+0xbe>
					if (main_modeR == 0) {
 80152a6:	7bfb      	ldrb	r3, [r7, #15]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d102      	bne.n	80152b2 <mode_decision+0xa2>
						main_modeR = 15;
 80152ac:	230f      	movs	r3, #15
 80152ae:	73fb      	strb	r3, [r7, #15]
 80152b0:	e002      	b.n	80152b8 <mode_decision+0xa8>
					} else {
						main_modeR = main_modeR - 1;
 80152b2:	7bfb      	ldrb	r3, [r7, #15]
 80152b4:	3b01      	subs	r3, #1
 80152b6:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 80152b8:	f7eb fe70 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 80152bc:	7bbb      	ldrb	r3, [r7, #14]
 80152be:	011b      	lsls	r3, r3, #4
 80152c0:	b2da      	uxtb	r2, r3
 80152c2:	7bfb      	ldrb	r3, [r7, #15]
 80152c4:	4413      	add	r3, r2
 80152c6:	b2db      	uxtb	r3, r3
 80152c8:	4618      	mov	r0, r3
 80152ca:	f7f1 fd9d 	bl	8006e08 <pl_yellow_LED_count>
				}
				if (E_distanceL >= dis8) {
 80152ce:	4b49      	ldr	r3, [pc, #292]	; (80153f4 <mode_decision+0x1e4>)
 80152d0:	edd3 7a00 	vldr	s15, [r3]
 80152d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80152d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152e0:	d813      	bhi.n	801530a <mode_decision+0xfa>
					if (main_modeL == 15) {
 80152e2:	7bbb      	ldrb	r3, [r7, #14]
 80152e4:	2b0f      	cmp	r3, #15
 80152e6:	d102      	bne.n	80152ee <mode_decision+0xde>
						main_modeL = 0;
 80152e8:	2300      	movs	r3, #0
 80152ea:	73bb      	strb	r3, [r7, #14]
 80152ec:	e002      	b.n	80152f4 <mode_decision+0xe4>
					} else {
						main_modeL = main_modeL + 1;
 80152ee:	7bbb      	ldrb	r3, [r7, #14]
 80152f0:	3301      	adds	r3, #1
 80152f2:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 80152f4:	f7eb fe52 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 80152f8:	7bbb      	ldrb	r3, [r7, #14]
 80152fa:	011b      	lsls	r3, r3, #4
 80152fc:	b2da      	uxtb	r2, r3
 80152fe:	7bfb      	ldrb	r3, [r7, #15]
 8015300:	4413      	add	r3, r2
 8015302:	b2db      	uxtb	r3, r3
 8015304:	4618      	mov	r0, r3
 8015306:	f7f1 fd7f 	bl	8006e08 <pl_yellow_LED_count>
				}
				if (E_distanceL <= -dis8) {
 801530a:	edd7 7a02 	vldr	s15, [r7, #8]
 801530e:	eeb1 7a67 	vneg.f32	s14, s15
 8015312:	4b38      	ldr	r3, [pc, #224]	; (80153f4 <mode_decision+0x1e4>)
 8015314:	edd3 7a00 	vldr	s15, [r3]
 8015318:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801531c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015320:	da00      	bge.n	8015324 <mode_decision+0x114>
 8015322:	e013      	b.n	801534c <mode_decision+0x13c>
					if (main_modeL == 0) {
 8015324:	7bbb      	ldrb	r3, [r7, #14]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d102      	bne.n	8015330 <mode_decision+0x120>
						main_modeL = 15;
 801532a:	230f      	movs	r3, #15
 801532c:	73bb      	strb	r3, [r7, #14]
 801532e:	e002      	b.n	8015336 <mode_decision+0x126>
					} else {
						main_modeL = main_modeL - 1;
 8015330:	7bbb      	ldrb	r3, [r7, #14]
 8015332:	3b01      	subs	r3, #1
 8015334:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8015336:	f7eb fe31 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 801533a:	7bbb      	ldrb	r3, [r7, #14]
 801533c:	011b      	lsls	r3, r3, #4
 801533e:	b2da      	uxtb	r2, r3
 8015340:	7bfb      	ldrb	r3, [r7, #15]
 8015342:	4413      	add	r3, r2
 8015344:	b2db      	uxtb	r3, r3
 8015346:	4618      	mov	r0, r3
 8015348:	f7f1 fd5e 	bl	8006e08 <pl_yellow_LED_count>
			while (angle_speedx <= 400) {
 801534c:	4b2a      	ldr	r3, [pc, #168]	; (80153f8 <mode_decision+0x1e8>)
 801534e:	edd3 7a00 	vldr	s15, [r3]
 8015352:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80153fc <mode_decision+0x1ec>
 8015356:	eef4 7ac7 	vcmpe.f32	s15, s14
 801535a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801535e:	f67f af75 	bls.w	801524c <mode_decision+0x3c>
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_off();
 8015362:	f7f1 fd17 	bl	8006d94 <pl_yellow_LED_off>
			pl_r_blue_LED(ON);
 8015366:	2001      	movs	r0, #1
 8015368:	f7f1 fdfe 	bl	8006f68 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 801536c:	2001      	movs	r0, #1
 801536e:	f7f1 fe0d 	bl	8006f8c <pl_l_blue_LED>
			HAL_Delay(1000);
 8015372:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015376:	f003 fcd1 	bl	8018d1c <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 801537a:	e011      	b.n	80153a0 <mode_decision+0x190>

				if (angle_speedx >= 400) {
 801537c:	4b1e      	ldr	r3, [pc, #120]	; (80153f8 <mode_decision+0x1e8>)
 801537e:	edd3 7a00 	vldr	s15, [r3]
 8015382:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80153fc <mode_decision+0x1ec>
 8015386:	eef4 7ac7 	vcmpe.f32	s15, s14
 801538a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801538e:	db04      	blt.n	801539a <mode_decision+0x18a>
					main_modeL = 0;
 8015390:	2300      	movs	r3, #0
 8015392:	73bb      	strb	r3, [r7, #14]
					main_modeR = 0;
 8015394:	2300      	movs	r3, #0
 8015396:	73fb      	strb	r3, [r7, #15]
					break;
 8015398:	e013      	b.n	80153c2 <mode_decision+0x1b2>
				}
				HAL_Delay(1);
 801539a:	2001      	movs	r0, #1
 801539c:	f003 fcbe 	bl	8018d1c <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 80153a0:	4b17      	ldr	r3, [pc, #92]	; (8015400 <mode_decision+0x1f0>)
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80153a8:	dde8      	ble.n	801537c <mode_decision+0x16c>
 80153aa:	4b15      	ldr	r3, [pc, #84]	; (8015400 <mode_decision+0x1f0>)
 80153ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80153b0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80153b4:	dde2      	ble.n	801537c <mode_decision+0x16c>
 80153b6:	4b12      	ldr	r3, [pc, #72]	; (8015400 <mode_decision+0x1f0>)
 80153b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80153bc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80153c0:	dddc      	ble.n	801537c <mode_decision+0x16c>
			}
			pl_r_blue_LED(OFF);
 80153c2:	2000      	movs	r0, #0
 80153c4:	f7f1 fdd0 	bl	8006f68 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80153c8:	2000      	movs	r0, #0
 80153ca:	f7f1 fddf 	bl	8006f8c <pl_l_blue_LED>
			pl_yellow_LED_off();
 80153ce:	f7f1 fce1 	bl	8006d94 <pl_yellow_LED_off>

			main_mode=main_modeL << 4 | main_modeR;
 80153d2:	7bbb      	ldrb	r3, [r7, #14]
 80153d4:	011b      	lsls	r3, r3, #4
 80153d6:	b25a      	sxtb	r2, r3
 80153d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80153dc:	4313      	orrs	r3, r2
 80153de:	b25b      	sxtb	r3, r3
 80153e0:	737b      	strb	r3, [r7, #13]

return main_mode;
 80153e2:	7b7b      	ldrb	r3, [r7, #13]
}
 80153e4:	4618      	mov	r0, r3
 80153e6:	3710      	adds	r7, #16
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd80      	pop	{r7, pc}
 80153ec:	41200000 	.word	0x41200000
 80153f0:	20000224 	.word	0x20000224
 80153f4:	20000220 	.word	0x20000220
 80153f8:	20000270 	.word	0x20000270
 80153fc:	43c80000 	.word	0x43c80000
 8015400:	200002b8 	.word	0x200002b8

08015404 <mode_execution>:


void mode_execution(unsigned char now_mode){
 8015404:	b590      	push	{r4, r7, lr}
 8015406:	b0d7      	sub	sp, #348	; 0x15c
 8015408:	af52      	add	r7, sp, #328	; 0x148
 801540a:	4603      	mov	r3, r0
 801540c:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 801540e:	2300      	movs	r3, #0
 8015410:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8015412:	2300      	movs	r3, #0
 8015414:	73bb      	strb	r3, [r7, #14]

main_modeR=now_mode & 0x0F;
 8015416:	79fb      	ldrb	r3, [r7, #7]
 8015418:	f003 030f 	and.w	r3, r3, #15
 801541c:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 801541e:	79fb      	ldrb	r3, [r7, #7]
 8015420:	091b      	lsrs	r3, r3, #4
 8015422:	73bb      	strb	r3, [r7, #14]


switch (main_modeL) {
 8015424:	7bbb      	ldrb	r3, [r7, #14]
 8015426:	2b0f      	cmp	r3, #15
 8015428:	f200 809e 	bhi.w	8015568 <mode_execution+0x164>
 801542c:	a201      	add	r2, pc, #4	; (adr r2, 8015434 <mode_execution+0x30>)
 801542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015432:	bf00      	nop
 8015434:	08015475 	.word	0x08015475
 8015438:	0801547f 	.word	0x0801547f
 801543c:	08015567 	.word	0x08015567
 8015440:	08015489 	.word	0x08015489
 8015444:	08015493 	.word	0x08015493
 8015448:	0801549d 	.word	0x0801549d
 801544c:	080154cd 	.word	0x080154cd
 8015450:	080154d7 	.word	0x080154d7
 8015454:	08015507 	.word	0x08015507
 8015458:	08015537 	.word	0x08015537
 801545c:	08015567 	.word	0x08015567
 8015460:	08015567 	.word	0x08015567
 8015464:	08015567 	.word	0x08015567
 8015468:	08015567 	.word	0x08015567
 801546c:	08015567 	.word	0x08015567
 8015470:	08015567 	.word	0x08015567
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
 8015474:	7bfb      	ldrb	r3, [r7, #15]
 8015476:	4618      	mov	r0, r3
 8015478:	f000 f886 	bl	8015588 <mode_PLtest>
	break;
 801547c:	e074      	b.n	8015568 <mode_execution+0x164>
	case 0b0001://実行モード1
		mode_Running(main_modeR);
 801547e:	7bfb      	ldrb	r3, [r7, #15]
 8015480:	4618      	mov	r0, r3
 8015482:	f000 fa41 	bl	8015908 <mode_Running>
	break;
 8015486:	e06f      	b.n	8015568 <mode_execution+0x164>
	case 0b0010://実行モード2
	break;
	case 0b0011:
		mode_Tuning0(main_modeR);
 8015488:	7bfb      	ldrb	r3, [r7, #15]
 801548a:	4618      	mov	r0, r3
 801548c:	f000 fc6a 	bl	8015d64 <mode_Tuning0>
	break;
 8015490:	e06a      	b.n	8015568 <mode_execution+0x164>
	case 0b0100:
		mode_WallSensorTuning(main_modeR);
 8015492:	7bfb      	ldrb	r3, [r7, #15]
 8015494:	4618      	mov	r0, r3
 8015496:	f000 ffa7 	bl	80163e8 <mode_WallSensorTuning>
	break;
 801549a:	e065      	b.n	8015568 <mode_execution+0x164>
	case 0b0101://試験モード
		testturning(speed600_shortest_mollifier,main_modeR,1,OFF,0.51,1);
 801549c:	7bfb      	ldrb	r3, [r7, #15]
 801549e:	4c34      	ldr	r4, [pc, #208]	; (8015570 <mode_execution+0x16c>)
 80154a0:	2201      	movs	r2, #1
 80154a2:	9251      	str	r2, [sp, #324]	; 0x144
 80154a4:	2200      	movs	r2, #0
 80154a6:	9250      	str	r2, [sp, #320]	; 0x140
 80154a8:	2201      	movs	r2, #1
 80154aa:	924f      	str	r2, [sp, #316]	; 0x13c
 80154ac:	934e      	str	r3, [sp, #312]	; 0x138
 80154ae:	4668      	mov	r0, sp
 80154b0:	f104 0310 	add.w	r3, r4, #16
 80154b4:	f44f 729c 	mov.w	r2, #312	; 0x138
 80154b8:	4619      	mov	r1, r3
 80154ba:	f00a ff01 	bl	80202c0 <memcpy>
 80154be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80154c2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8015574 <mode_execution+0x170>
 80154c6:	f7f8 fb8b 	bl	800dbe0 <testturning>
	break;
 80154ca:	e04d      	b.n	8015568 <mode_execution+0x164>
	case 0b0110:
		mode_WallSensorTuning_fast(main_modeR);
 80154cc:	7bfb      	ldrb	r3, [r7, #15]
 80154ce:	4618      	mov	r0, r3
 80154d0:	f001 f9c2 	bl	8016858 <mode_WallSensorTuning_fast>
	break;
 80154d4:	e048      	b.n	8015568 <mode_execution+0x164>
	case 0b0111:
		testturning(speed1000_shortest_mollifier,main_modeR,1,ON,0.99,1);
 80154d6:	7bfb      	ldrb	r3, [r7, #15]
 80154d8:	4c27      	ldr	r4, [pc, #156]	; (8015578 <mode_execution+0x174>)
 80154da:	2201      	movs	r2, #1
 80154dc:	9251      	str	r2, [sp, #324]	; 0x144
 80154de:	2201      	movs	r2, #1
 80154e0:	9250      	str	r2, [sp, #320]	; 0x140
 80154e2:	2201      	movs	r2, #1
 80154e4:	924f      	str	r2, [sp, #316]	; 0x13c
 80154e6:	934e      	str	r3, [sp, #312]	; 0x138
 80154e8:	4668      	mov	r0, sp
 80154ea:	f104 0310 	add.w	r3, r4, #16
 80154ee:	f44f 729c 	mov.w	r2, #312	; 0x138
 80154f2:	4619      	mov	r1, r3
 80154f4:	f00a fee4 	bl	80202c0 <memcpy>
 80154f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80154fc:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 801557c <mode_execution+0x178>
 8015500:	f7f8 fb6e 	bl	800dbe0 <testturning>
	break;
 8015504:	e030      	b.n	8015568 <mode_execution+0x164>
	case 0b1000:
		testturning(speed1200_shortest_mollifier,main_modeR,1,ON,0.99,1);
 8015506:	7bfb      	ldrb	r3, [r7, #15]
 8015508:	4c1d      	ldr	r4, [pc, #116]	; (8015580 <mode_execution+0x17c>)
 801550a:	2201      	movs	r2, #1
 801550c:	9251      	str	r2, [sp, #324]	; 0x144
 801550e:	2201      	movs	r2, #1
 8015510:	9250      	str	r2, [sp, #320]	; 0x140
 8015512:	2201      	movs	r2, #1
 8015514:	924f      	str	r2, [sp, #316]	; 0x13c
 8015516:	934e      	str	r3, [sp, #312]	; 0x138
 8015518:	4668      	mov	r0, sp
 801551a:	f104 0310 	add.w	r3, r4, #16
 801551e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015522:	4619      	mov	r1, r3
 8015524:	f00a fecc 	bl	80202c0 <memcpy>
 8015528:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801552c:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801557c <mode_execution+0x178>
 8015530:	f7f8 fb56 	bl	800dbe0 <testturning>
	break;
 8015534:	e018      	b.n	8015568 <mode_execution+0x164>
	case 0b1001:
		testturning(speed1600_shortest_mollifier,main_modeR,1,ON,0.99,1);
 8015536:	7bfb      	ldrb	r3, [r7, #15]
 8015538:	4c12      	ldr	r4, [pc, #72]	; (8015584 <mode_execution+0x180>)
 801553a:	2201      	movs	r2, #1
 801553c:	9251      	str	r2, [sp, #324]	; 0x144
 801553e:	2201      	movs	r2, #1
 8015540:	9250      	str	r2, [sp, #320]	; 0x140
 8015542:	2201      	movs	r2, #1
 8015544:	924f      	str	r2, [sp, #316]	; 0x13c
 8015546:	934e      	str	r3, [sp, #312]	; 0x138
 8015548:	4668      	mov	r0, sp
 801554a:	f104 0310 	add.w	r3, r4, #16
 801554e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015552:	4619      	mov	r1, r3
 8015554:	f00a feb4 	bl	80202c0 <memcpy>
 8015558:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801555c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 801557c <mode_execution+0x178>
 8015560:	f7f8 fb3e 	bl	800dbe0 <testturning>
	break;
 8015564:	e000      	b.n	8015568 <mode_execution+0x164>
	break;
 8015566:	bf00      	nop
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}
 8015568:	bf00      	nop
 801556a:	3714      	adds	r7, #20
 801556c:	46bd      	mov	sp, r7
 801556e:	bd90      	pop	{r4, r7, pc}
 8015570:	2000f358 	.word	0x2000f358
 8015574:	3f028f5c 	.word	0x3f028f5c
 8015578:	2000f4a0 	.word	0x2000f4a0
 801557c:	3f7d70a4 	.word	0x3f7d70a4
 8015580:	2000f5e8 	.word	0x2000f5e8
 8015584:	2000f730 	.word	0x2000f730

08015588 <mode_PLtest>:



void mode_PLtest(unsigned char main_modeR) {
 8015588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801558c:	b092      	sub	sp, #72	; 0x48
 801558e:	af0a      	add	r7, sp, #40	; 0x28
 8015590:	4603      	mov	r3, r0
 8015592:	75fb      	strb	r3, [r7, #23]
	int duty_L=0, duty_R=0;
 8015594:	2300      	movs	r3, #0
 8015596:	61fb      	str	r3, [r7, #28]
 8015598:	2300      	movs	r3, #0
 801559a:	61bb      	str	r3, [r7, #24]
	switch (main_modeR) {
 801559c:	7dfb      	ldrb	r3, [r7, #23]
 801559e:	2b0f      	cmp	r3, #15
 80155a0:	f200 819f 	bhi.w	80158e2 <mode_PLtest+0x35a>
 80155a4:	a201      	add	r2, pc, #4	; (adr r2, 80155ac <mode_PLtest+0x24>)
 80155a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155aa:	bf00      	nop
 80155ac:	080158e1 	.word	0x080158e1
 80155b0:	080155ed 	.word	0x080155ed
 80155b4:	0801561f 	.word	0x0801561f
 80155b8:	0801569b 	.word	0x0801569b
 80155bc:	080156ff 	.word	0x080156ff
 80155c0:	0801577f 	.word	0x0801577f
 80155c4:	08015785 	.word	0x08015785
 80155c8:	080158e3 	.word	0x080158e3
 80155cc:	080158e3 	.word	0x080158e3
 80155d0:	0801580b 	.word	0x0801580b
 80155d4:	08015873 	.word	0x08015873
 80155d8:	080158e3 	.word	0x080158e3
 80155dc:	080158e3 	.word	0x080158e3
 80155e0:	080158e3 	.word	0x080158e3
 80155e4:	080158e3 	.word	0x080158e3
 80155e8:	080158db 	.word	0x080158db
	case 0b0000:
		//飛ばすerror
		break;
	case 0b0001:	//sensor
		while (1) {
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 80155ec:	4bbf      	ldr	r3, [pc, #764]	; (80158ec <mode_PLtest+0x364>)
 80155ee:	6819      	ldr	r1, [r3, #0]
 80155f0:	4bbe      	ldr	r3, [pc, #760]	; (80158ec <mode_PLtest+0x364>)
 80155f2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80155f4:	4bbd      	ldr	r3, [pc, #756]	; (80158ec <mode_PLtest+0x364>)
 80155f6:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 80155fa:	4bbc      	ldr	r3, [pc, #752]	; (80158ec <mode_PLtest+0x364>)
 80155fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015600:	4aba      	ldr	r2, [pc, #744]	; (80158ec <mode_PLtest+0x364>)
 8015602:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 8015606:	9201      	str	r2, [sp, #4]
 8015608:	9300      	str	r3, [sp, #0]
 801560a:	4623      	mov	r3, r4
 801560c:	4602      	mov	r2, r0
 801560e:	48b8      	ldr	r0, [pc, #736]	; (80158f0 <mode_PLtest+0x368>)
 8015610:	f00b fad6 	bl	8020bc0 <iprintf>
					g_sensor[1][0], g_sensor[2][0], g_sensor[3][0],
					g_sensor[4][0]);
			wait_ms(500);
 8015614:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015618:	f7f2 fc36 	bl	8007e88 <wait_ms>
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 801561c:	e7e6      	b.n	80155ec <mode_PLtest+0x64>
		}
		break;
	case 0b0010:	//encoder
		pl_r_blue_LED(ON);
 801561e:	2001      	movs	r0, #1
 8015620:	f7f1 fca2 	bl	8006f68 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8015624:	2001      	movs	r0, #1
 8015626:	f7f1 fcb1 	bl	8006f8c <pl_l_blue_LED>
		record_mode = 1;
 801562a:	4bb2      	ldr	r3, [pc, #712]	; (80158f4 <mode_PLtest+0x36c>)
 801562c:	2201      	movs	r2, #1
 801562e:	701a      	strb	r2, [r3, #0]
		pl_DriveMotor_duty(900, 900);
 8015630:	f44f 7161 	mov.w	r1, #900	; 0x384
 8015634:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015638:	f7f2 f9ae 	bl	8007998 <pl_DriveMotor_duty>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 801563c:	2001      	movs	r0, #1
 801563e:	f7f2 f969 	bl	8007914 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8015642:	2001      	movs	r0, #1
 8015644:	f7f2 f93e 	bl	80078c4 <pl_L_DriveMotor_mode>
		pl_DriveMotor_start();
 8015648:	f7f2 f98a 	bl	8007960 <pl_DriveMotor_start>
		wait_ms(2500);
 801564c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8015650:	f7f2 fc1a 	bl	8007e88 <wait_ms>
		pl_DriveMotor_stop();
 8015654:	f7f2 f992 	bl	800797c <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8015658:	2000      	movs	r0, #0
 801565a:	f7f1 fc85 	bl	8006f68 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 801565e:	2000      	movs	r0, #0
 8015660:	f7f1 fc94 	bl	8006f8c <pl_l_blue_LED>
		record_mode = 0;
 8015664:	4ba3      	ldr	r3, [pc, #652]	; (80158f4 <mode_PLtest+0x36c>)
 8015666:	2200      	movs	r2, #0
 8015668:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 801566a:	e002      	b.n	8015672 <mode_PLtest+0xea>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 801566c:	2001      	movs	r0, #1
 801566e:	f7f2 fc0b 	bl	8007e88 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015672:	4b9e      	ldr	r3, [pc, #632]	; (80158ec <mode_PLtest+0x364>)
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801567a:	ddf7      	ble.n	801566c <mode_PLtest+0xe4>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 801567c:	4b9b      	ldr	r3, [pc, #620]	; (80158ec <mode_PLtest+0x364>)
 801567e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015682:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015686:	ddf1      	ble.n	801566c <mode_PLtest+0xe4>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015688:	4b98      	ldr	r3, [pc, #608]	; (80158ec <mode_PLtest+0x364>)
 801568a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801568e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015692:	ddeb      	ble.n	801566c <mode_PLtest+0xe4>
		}
		record_print();
 8015694:	f001 fbd0 	bl	8016e38 <record_print>
		break;
 8015698:	e123      	b.n	80158e2 <mode_PLtest+0x35a>
	case 0b0011:	//gyro
		reset_gyro();
 801569a:	f7ec f865 	bl	8001768 <reset_gyro>
		reset_speed();
 801569e:	f7eb fcbb 	bl	8001018 <reset_speed>
		pl_r_blue_LED(ON);
 80156a2:	2001      	movs	r0, #1
 80156a4:	f7f1 fc60 	bl	8006f68 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 80156a8:	2001      	movs	r0, #1
 80156aa:	f7f1 fc6f 	bl	8006f8c <pl_l_blue_LED>
		record_mode = 2;
 80156ae:	4b91      	ldr	r3, [pc, #580]	; (80158f4 <mode_PLtest+0x36c>)
 80156b0:	2202      	movs	r2, #2
 80156b2:	701a      	strb	r2, [r3, #0]
		wait_ms(2500);
 80156b4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80156b8:	f7f2 fbe6 	bl	8007e88 <wait_ms>
		pl_r_blue_LED(OFF);
 80156bc:	2000      	movs	r0, #0
 80156be:	f7f1 fc53 	bl	8006f68 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 80156c2:	2000      	movs	r0, #0
 80156c4:	f7f1 fc62 	bl	8006f8c <pl_l_blue_LED>
		record_mode = 0;
 80156c8:	4b8a      	ldr	r3, [pc, #552]	; (80158f4 <mode_PLtest+0x36c>)
 80156ca:	2200      	movs	r2, #0
 80156cc:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 80156ce:	e002      	b.n	80156d6 <mode_PLtest+0x14e>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 80156d0:	2001      	movs	r0, #1
 80156d2:	f7f2 fbd9 	bl	8007e88 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 80156d6:	4b85      	ldr	r3, [pc, #532]	; (80158ec <mode_PLtest+0x364>)
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80156de:	ddf7      	ble.n	80156d0 <mode_PLtest+0x148>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 80156e0:	4b82      	ldr	r3, [pc, #520]	; (80158ec <mode_PLtest+0x364>)
 80156e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80156e6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80156ea:	ddf1      	ble.n	80156d0 <mode_PLtest+0x148>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 80156ec:	4b7f      	ldr	r3, [pc, #508]	; (80158ec <mode_PLtest+0x364>)
 80156ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80156f2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80156f6:	ddeb      	ble.n	80156d0 <mode_PLtest+0x148>
		}
		record_print();
 80156f8:	f001 fb9e 	bl	8016e38 <record_print>
		break;
 80156fc:	e0f1      	b.n	80158e2 <mode_PLtest+0x35a>
	case 0b0100://speaker
		while (1) {
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80156fe:	4b7e      	ldr	r3, [pc, #504]	; (80158f8 <mode_PLtest+0x370>)
 8015700:	681b      	ldr	r3, [r3, #0]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015702:	4618      	mov	r0, r3
 8015704:	f7ea ff48 	bl	8000598 <__aeabi_f2d>
 8015708:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 801570c:	4b7a      	ldr	r3, [pc, #488]	; (80158f8 <mode_PLtest+0x370>)
 801570e:	685b      	ldr	r3, [r3, #4]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015710:	4618      	mov	r0, r3
 8015712:	f7ea ff41 	bl	8000598 <__aeabi_f2d>
 8015716:	4604      	mov	r4, r0
 8015718:	460d      	mov	r5, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 801571a:	4b77      	ldr	r3, [pc, #476]	; (80158f8 <mode_PLtest+0x370>)
 801571c:	689b      	ldr	r3, [r3, #8]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 801571e:	4618      	mov	r0, r3
 8015720:	f7ea ff3a 	bl	8000598 <__aeabi_f2d>
 8015724:	4680      	mov	r8, r0
 8015726:	4689      	mov	r9, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015728:	4b73      	ldr	r3, [pc, #460]	; (80158f8 <mode_PLtest+0x370>)
 801572a:	68db      	ldr	r3, [r3, #12]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 801572c:	4618      	mov	r0, r3
 801572e:	f7ea ff33 	bl	8000598 <__aeabi_f2d>
 8015732:	4682      	mov	sl, r0
 8015734:	468b      	mov	fp, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015736:	4b70      	ldr	r3, [pc, #448]	; (80158f8 <mode_PLtest+0x370>)
 8015738:	691b      	ldr	r3, [r3, #16]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 801573a:	4618      	mov	r0, r3
 801573c:	f7ea ff2c 	bl	8000598 <__aeabi_f2d>
 8015740:	e9c7 0100 	strd	r0, r1, [r7]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015744:	4b6c      	ldr	r3, [pc, #432]	; (80158f8 <mode_PLtest+0x370>)
 8015746:	695b      	ldr	r3, [r3, #20]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015748:	4618      	mov	r0, r3
 801574a:	f7ea ff25 	bl	8000598 <__aeabi_f2d>
 801574e:	4602      	mov	r2, r0
 8015750:	460b      	mov	r3, r1
 8015752:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015756:	ed97 7b00 	vldr	d7, [r7]
 801575a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801575e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8015762:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8015766:	e9cd 4500 	strd	r4, r5, [sp]
 801576a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801576e:	4863      	ldr	r0, [pc, #396]	; (80158fc <mode_PLtest+0x374>)
 8015770:	f00b fa26 	bl	8020bc0 <iprintf>
			wait_ms(500);
 8015774:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015778:	f7f2 fb86 	bl	8007e88 <wait_ms>
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 801577c:	e7bf      	b.n	80156fe <mode_PLtest+0x176>
		}
	break;
	case 0b0101:
		test_flash();
 801577e:	f7f1 fd43 	bl	8007208 <test_flash>
		break;
 8015782:	e0ae      	b.n	80158e2 <mode_PLtest+0x35a>
	case 0b0110:
		record_mode=6;
 8015784:	4b5b      	ldr	r3, [pc, #364]	; (80158f4 <mode_PLtest+0x36c>)
 8015786:	2206      	movs	r2, #6
 8015788:	701a      	strb	r2, [r3, #0]
		pl_r_blue_LED(ON);
 801578a:	2001      	movs	r0, #1
 801578c:	f7f1 fbec 	bl	8006f68 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8015790:	2001      	movs	r0, #1
 8015792:	f7f1 fbfb 	bl	8006f8c <pl_l_blue_LED>
		get_duty(1.0, -1.0,&duty_L,&duty_R);
 8015796:	f107 0218 	add.w	r2, r7, #24
 801579a:	f107 031c 	add.w	r3, r7, #28
 801579e:	4611      	mov	r1, r2
 80157a0:	4618      	mov	r0, r3
 80157a2:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80157a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80157aa:	f7ec fb43 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80157ae:	69fb      	ldr	r3, [r7, #28]
 80157b0:	69ba      	ldr	r2, [r7, #24]
 80157b2:	4611      	mov	r1, r2
 80157b4:	4618      	mov	r0, r3
 80157b6:	f7f2 f8ef 	bl	8007998 <pl_DriveMotor_duty>
		pl_DriveMotor_start();
 80157ba:	f7f2 f8d1 	bl	8007960 <pl_DriveMotor_start>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80157be:	e00a      	b.n	80157d6 <mode_PLtest+0x24e>
			wait_ms(1);
 80157c0:	2001      	movs	r0, #1
 80157c2:	f7f2 fb61 	bl	8007e88 <wait_ms>
			if(record_rupe_flag==1){
 80157c6:	4b4e      	ldr	r3, [pc, #312]	; (8015900 <mode_PLtest+0x378>)
 80157c8:	781b      	ldrb	r3, [r3, #0]
 80157ca:	2b01      	cmp	r3, #1
 80157cc:	d103      	bne.n	80157d6 <mode_PLtest+0x24e>
				record_mode=0;
 80157ce:	4b49      	ldr	r3, [pc, #292]	; (80158f4 <mode_PLtest+0x36c>)
 80157d0:	2200      	movs	r2, #0
 80157d2:	701a      	strb	r2, [r3, #0]
				break;
 80157d4:	e010      	b.n	80157f8 <mode_PLtest+0x270>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80157d6:	4b45      	ldr	r3, [pc, #276]	; (80158ec <mode_PLtest+0x364>)
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80157de:	ddef      	ble.n	80157c0 <mode_PLtest+0x238>
 80157e0:	4b42      	ldr	r3, [pc, #264]	; (80158ec <mode_PLtest+0x364>)
 80157e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80157e6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80157ea:	dde9      	ble.n	80157c0 <mode_PLtest+0x238>
 80157ec:	4b3f      	ldr	r3, [pc, #252]	; (80158ec <mode_PLtest+0x364>)
 80157ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80157f2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80157f6:	dde3      	ble.n	80157c0 <mode_PLtest+0x238>
			}
		}
		pl_DriveMotor_stop();
 80157f8:	f7f2 f8c0 	bl	800797c <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 80157fc:	2000      	movs	r0, #0
 80157fe:	f7f1 fbb3 	bl	8006f68 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8015802:	2000      	movs	r0, #0
 8015804:	f7f1 fbc2 	bl	8006f8c <pl_l_blue_LED>

		break;
 8015808:	e06b      	b.n	80158e2 <mode_PLtest+0x35a>
	case 0b1001://fun
			pl_FunMotor_duty(0.5);
 801580a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801580e:	f7f2 f8ed 	bl	80079ec <pl_FunMotor_duty>
			pl_FunMotor_start();
 8015812:	f7f2 f8d7 	bl	80079c4 <pl_FunMotor_start>
			HAL_Delay(2000);
 8015816:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801581a:	f003 fa7f 	bl	8018d1c <HAL_Delay>
			reset_gyro();
 801581e:	f7eb ffa3 	bl	8001768 <reset_gyro>
			reset_speed();
 8015822:	f7eb fbf9 	bl	8001018 <reset_speed>
			clear_Ierror();
 8015826:	f7ee fec3 	bl	80045b0 <clear_Ierror>
			pl_r_blue_LED(ON);
 801582a:	2001      	movs	r0, #1
 801582c:	f7f1 fb9c 	bl	8006f68 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015830:	2001      	movs	r0, #1
 8015832:	f7f1 fbab 	bl	8006f8c <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015836:	e002      	b.n	801583e <mode_PLtest+0x2b6>
				HAL_Delay(1);
 8015838:	2001      	movs	r0, #1
 801583a:	f003 fa6f 	bl	8018d1c <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801583e:	4b2b      	ldr	r3, [pc, #172]	; (80158ec <mode_PLtest+0x364>)
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015846:	ddf7      	ble.n	8015838 <mode_PLtest+0x2b0>
 8015848:	4b28      	ldr	r3, [pc, #160]	; (80158ec <mode_PLtest+0x364>)
 801584a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801584e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015852:	ddf1      	ble.n	8015838 <mode_PLtest+0x2b0>
 8015854:	4b25      	ldr	r3, [pc, #148]	; (80158ec <mode_PLtest+0x364>)
 8015856:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801585a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801585e:	ddeb      	ble.n	8015838 <mode_PLtest+0x2b0>
			}
			pl_r_blue_LED(OFF);
 8015860:	2000      	movs	r0, #0
 8015862:	f7f1 fb81 	bl	8006f68 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015866:	2000      	movs	r0, #0
 8015868:	f7f1 fb90 	bl	8006f8c <pl_l_blue_LED>
			pl_FunMotor_stop();
 801586c:	f7f2 f8b4 	bl	80079d8 <pl_FunMotor_stop>
		break;
 8015870:	e037      	b.n	80158e2 <mode_PLtest+0x35a>
	case 0b1010://fun
			pl_FunMotor_duty(0.99);
 8015872:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8015904 <mode_PLtest+0x37c>
 8015876:	f7f2 f8b9 	bl	80079ec <pl_FunMotor_duty>
			pl_FunMotor_start();
 801587a:	f7f2 f8a3 	bl	80079c4 <pl_FunMotor_start>
			HAL_Delay(2000);
 801587e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8015882:	f003 fa4b 	bl	8018d1c <HAL_Delay>
			reset_gyro();
 8015886:	f7eb ff6f 	bl	8001768 <reset_gyro>
			reset_speed();
 801588a:	f7eb fbc5 	bl	8001018 <reset_speed>
			clear_Ierror();
 801588e:	f7ee fe8f 	bl	80045b0 <clear_Ierror>
			pl_r_blue_LED(ON);
 8015892:	2001      	movs	r0, #1
 8015894:	f7f1 fb68 	bl	8006f68 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015898:	2001      	movs	r0, #1
 801589a:	f7f1 fb77 	bl	8006f8c <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801589e:	e002      	b.n	80158a6 <mode_PLtest+0x31e>
				HAL_Delay(1);
 80158a0:	2001      	movs	r0, #1
 80158a2:	f003 fa3b 	bl	8018d1c <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80158a6:	4b11      	ldr	r3, [pc, #68]	; (80158ec <mode_PLtest+0x364>)
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80158ae:	ddf7      	ble.n	80158a0 <mode_PLtest+0x318>
 80158b0:	4b0e      	ldr	r3, [pc, #56]	; (80158ec <mode_PLtest+0x364>)
 80158b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80158b6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80158ba:	ddf1      	ble.n	80158a0 <mode_PLtest+0x318>
 80158bc:	4b0b      	ldr	r3, [pc, #44]	; (80158ec <mode_PLtest+0x364>)
 80158be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80158c2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80158c6:	ddeb      	ble.n	80158a0 <mode_PLtest+0x318>
			}
			pl_r_blue_LED(OFF);
 80158c8:	2000      	movs	r0, #0
 80158ca:	f7f1 fb4d 	bl	8006f68 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80158ce:	2000      	movs	r0, #0
 80158d0:	f7f1 fb5c 	bl	8006f8c <pl_l_blue_LED>
			pl_FunMotor_stop();
 80158d4:	f7f2 f880 	bl	80079d8 <pl_FunMotor_stop>
		break;
 80158d8:	e003      	b.n	80158e2 <mode_PLtest+0x35a>
	case 0b1111:	//record_out
		record_print();
 80158da:	f001 faad 	bl	8016e38 <record_print>
		break;
 80158de:	e000      	b.n	80158e2 <mode_PLtest+0x35a>
		break;
 80158e0:	bf00      	nop
//			record_print();
//		break;
	}
//

}
 80158e2:	bf00      	nop
 80158e4:	3720      	adds	r7, #32
 80158e6:	46bd      	mov	sp, r7
 80158e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80158ec:	200002b8 	.word	0x200002b8
 80158f0:	08023638 	.word	0x08023638
 80158f4:	2000edc0 	.word	0x2000edc0
 80158f8:	200006e4 	.word	0x200006e4
 80158fc:	08023664 	.word	0x08023664
 8015900:	2000edcc 	.word	0x2000edcc
 8015904:	3f7d70a4 	.word	0x3f7d70a4

08015908 <mode_Running>:


void mode_Running(unsigned char main_modeR){
 8015908:	b5b0      	push	{r4, r5, r7, lr}
 801590a:	b0da      	sub	sp, #360	; 0x168
 801590c:	af54      	add	r7, sp, #336	; 0x150
 801590e:	4603      	mov	r3, r0
 8015910:	71fb      	strb	r3, [r7, #7]
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015912:	2003      	movs	r0, #3
 8015914:	f7f1 ffd6 	bl	80078c4 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015918:	2003      	movs	r0, #3
 801591a:	f7f1 fffb 	bl	8007914 <pl_R_DriveMotor_mode>
	reset_gyro();
 801591e:	f7eb ff23 	bl	8001768 <reset_gyro>
	reset_speed();
 8015922:	f7eb fb79 	bl	8001018 <reset_speed>
	reset_distance();
 8015926:	f7eb fb39 	bl	8000f9c <reset_distance>
	clear_Ierror();
 801592a:	f7ee fe41 	bl	80045b0 <clear_Ierror>
	switch (main_modeR) {
 801592e:	79fb      	ldrb	r3, [r7, #7]
 8015930:	2b0f      	cmp	r3, #15
 8015932:	f200 81e3 	bhi.w	8015cfc <mode_Running+0x3f4>
 8015936:	a201      	add	r2, pc, #4	; (adr r2, 801593c <mode_Running+0x34>)
 8015938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801593c:	0801597d 	.word	0x0801597d
 8015940:	08015a2d 	.word	0x08015a2d
 8015944:	08015a65 	.word	0x08015a65
 8015948:	08015a6b 	.word	0x08015a6b
 801594c:	08015aa3 	.word	0x08015aa3
 8015950:	08015ad5 	.word	0x08015ad5
 8015954:	08015b07 	.word	0x08015b07
 8015958:	08015b39 	.word	0x08015b39
 801595c:	08015b6b 	.word	0x08015b6b
 8015960:	08015b9d 	.word	0x08015b9d
 8015964:	08015bcf 	.word	0x08015bcf
 8015968:	08015c01 	.word	0x08015c01
 801596c:	08015c33 	.word	0x08015c33
 8015970:	08015c65 	.word	0x08015c65
 8015974:	08015c97 	.word	0x08015c97
 8015978:	08015cc9 	.word	0x08015cc9
		case 0b0000://迷路表示
			//maze_maker2(1, 0, 0, 0, 7, 7);
			//record_out();
			//wall.row[8]=(1<<8);
			create_StepCountMap_queue();
 801597c:	f7fe fc1e 	bl	80141bc <create_StepCountMap_queue>
			maze_display();
 8015980:	f7ff fa40 	bl	8014e04 <maze_display>

			create_DijkstraMap();
 8015984:	f7fb fe98 	bl	80116b8 <create_DijkstraMap>
			maze_display_Dijkstra();
 8015988:	f7ff fb5a 	bl	8015040 <maze_display_Dijkstra>

			route_Dijkstra();
 801598c:	f7fd fbdc 	bl	8013148 <route_Dijkstra>
			create_StepCountMap_unknown();
 8015990:	f7fe f8de 	bl	8013b50 <create_StepCountMap_unknown>
			maze_display();
 8015994:	f7ff fa36 	bl	8014e04 <maze_display>

			tic_timer();
 8015998:	f7f2 fa48 	bl	8007e2c <tic_timer>
			for(int j=0;j<5000;j++){
 801599c:	2300      	movs	r3, #0
 801599e:	617b      	str	r3, [r7, #20]
 80159a0:	e004      	b.n	80159ac <mode_Running+0xa4>
			create_StepCountMap_queue();
 80159a2:	f7fe fc0b 	bl	80141bc <create_StepCountMap_queue>
			for(int j=0;j<5000;j++){
 80159a6:	697b      	ldr	r3, [r7, #20]
 80159a8:	3301      	adds	r3, #1
 80159aa:	617b      	str	r3, [r7, #20]
 80159ac:	697b      	ldr	r3, [r7, #20]
 80159ae:	f241 3287 	movw	r2, #4999	; 0x1387
 80159b2:	4293      	cmp	r3, r2
 80159b4:	ddf5      	ble.n	80159a2 <mode_Running+0x9a>
			}
			float tim2 = toc_timer();
 80159b6:	f7f2 fa4b 	bl	8007e50 <toc_timer>
 80159ba:	ed87 0a03 	vstr	s0, [r7, #12]
			maze_display();
 80159be:	f7ff fa21 	bl	8014e04 <maze_display>
			printf("tim2=%f\n", tim2);
 80159c2:	68f8      	ldr	r0, [r7, #12]
 80159c4:	f7ea fde8 	bl	8000598 <__aeabi_f2d>
 80159c8:	4602      	mov	r2, r0
 80159ca:	460b      	mov	r3, r1
 80159cc:	48cd      	ldr	r0, [pc, #820]	; (8015d04 <mode_Running+0x3fc>)
 80159ce:	f00b f8f7 	bl	8020bc0 <iprintf>
			tic_timer();
 80159d2:	f7f2 fa2b 	bl	8007e2c <tic_timer>
			create_DijkstraMap();
 80159d6:	f7fb fe6f 	bl	80116b8 <create_DijkstraMap>
			for(int j=0;j<5000;j++){
 80159da:	2300      	movs	r3, #0
 80159dc:	613b      	str	r3, [r7, #16]
 80159de:	e006      	b.n	80159ee <mode_Running+0xe6>
			//create_StepCountMap();
			//maze_clear();
			//create_DijkstraMap();
			route_Dijkstra();
 80159e0:	f7fd fbb2 	bl	8013148 <route_Dijkstra>
			create_StepCountMap_unknown();
 80159e4:	f7fe f8b4 	bl	8013b50 <create_StepCountMap_unknown>
			for(int j=0;j<5000;j++){
 80159e8:	693b      	ldr	r3, [r7, #16]
 80159ea:	3301      	adds	r3, #1
 80159ec:	613b      	str	r3, [r7, #16]
 80159ee:	693b      	ldr	r3, [r7, #16]
 80159f0:	f241 3287 	movw	r2, #4999	; 0x1387
 80159f4:	4293      	cmp	r3, r2
 80159f6:	ddf3      	ble.n	80159e0 <mode_Running+0xd8>

			}
			float tim1 = toc_timer();
 80159f8:	f7f2 fa2a 	bl	8007e50 <toc_timer>
 80159fc:	ed87 0a02 	vstr	s0, [r7, #8]
			maze_display();
 8015a00:	f7ff fa00 	bl	8014e04 <maze_display>
			maze_display_Dijkstra();
 8015a04:	f7ff fb1c 	bl	8015040 <maze_display_Dijkstra>
			printf("tim1=%f,tim2=%f\n", tim1, tim2);
 8015a08:	68b8      	ldr	r0, [r7, #8]
 8015a0a:	f7ea fdc5 	bl	8000598 <__aeabi_f2d>
 8015a0e:	4604      	mov	r4, r0
 8015a10:	460d      	mov	r5, r1
 8015a12:	68f8      	ldr	r0, [r7, #12]
 8015a14:	f7ea fdc0 	bl	8000598 <__aeabi_f2d>
 8015a18:	4602      	mov	r2, r0
 8015a1a:	460b      	mov	r3, r1
 8015a1c:	e9cd 2300 	strd	r2, r3, [sp]
 8015a20:	4622      	mov	r2, r4
 8015a22:	462b      	mov	r3, r5
 8015a24:	48b8      	ldr	r0, [pc, #736]	; (8015d08 <mode_Running+0x400>)
 8015a26:	f00b f8cb 	bl	8020bc0 <iprintf>
		break;
 8015a2a:	e167      	b.n	8015cfc <mode_Running+0x3f4>
		case 0b0001://足立法(遅い)
			tic_timer();
 8015a2c:	f7f2 f9fe 	bl	8007e2c <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,0);
 8015a30:	4cb6      	ldr	r4, [pc, #728]	; (8015d0c <mode_Running+0x404>)
 8015a32:	2300      	movs	r3, #0
 8015a34:	934f      	str	r3, [sp, #316]	; 0x13c
 8015a36:	2301      	movs	r3, #1
 8015a38:	934e      	str	r3, [sp, #312]	; 0x138
 8015a3a:	4668      	mov	r0, sp
 8015a3c:	f104 0310 	add.w	r3, r4, #16
 8015a40:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015a44:	4619      	mov	r1, r3
 8015a46:	f00a fc3b 	bl	80202c0 <memcpy>
 8015a4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015a4e:	eddf 1ab0 	vldr	s3, [pc, #704]	; 8015d10 <mode_Running+0x408>
 8015a52:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 8015d14 <mode_Running+0x40c>
 8015a56:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8015d18 <mode_Running+0x410>
 8015a5a:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8015d1c <mode_Running+0x414>
 8015a5e:	f7f8 fa79 	bl	800df54 <AdatiWayReturn>
			//adati_wayreturn(400, 400, 3000, 13000);
		break;
 8015a62:	e14b      	b.n	8015cfc <mode_Running+0x3f4>
		case 0b0010://Flashから
			record_out();
 8015a64:	f7f1 fcee 	bl	8007444 <record_out>
		break;
 8015a68:	e148      	b.n	8015cfc <mode_Running+0x3f4>
		case 0b0011://ゴミ
			tic_timer();
 8015a6a:	f7f2 f9df 	bl	8007e2c <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,1);
 8015a6e:	4ca7      	ldr	r4, [pc, #668]	; (8015d0c <mode_Running+0x404>)
 8015a70:	2301      	movs	r3, #1
 8015a72:	934f      	str	r3, [sp, #316]	; 0x13c
 8015a74:	2301      	movs	r3, #1
 8015a76:	934e      	str	r3, [sp, #312]	; 0x138
 8015a78:	4668      	mov	r0, sp
 8015a7a:	f104 0310 	add.w	r3, r4, #16
 8015a7e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015a82:	4619      	mov	r1, r3
 8015a84:	f00a fc1c 	bl	80202c0 <memcpy>
 8015a88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015a8c:	eddf 1aa0 	vldr	s3, [pc, #640]	; 8015d10 <mode_Running+0x408>
 8015a90:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 8015d14 <mode_Running+0x40c>
 8015a94:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8015d18 <mode_Running+0x410>
 8015a98:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8015d1c <mode_Running+0x414>
 8015a9c:	f7f8 fa5a 	bl	800df54 <AdatiWayReturn>
		break;
 8015aa0:	e12c      	b.n	8015cfc <mode_Running+0x3f4>
		case 0b0100://ゴミ
			record_out();
 8015aa2:	f7f1 fccf 	bl	8007444 <record_out>
			run_shortest(1000,3000,0,TURN_OFF,FUN_OFF,SLANT_OFF,speed300_shortest,0.3,0);
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	9352      	str	r3, [sp, #328]	; 0x148
 8015aaa:	4a9d      	ldr	r2, [pc, #628]	; (8015d20 <mode_Running+0x418>)
 8015aac:	466b      	mov	r3, sp
 8015aae:	4611      	mov	r1, r2
 8015ab0:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f00a fc03 	bl	80202c0 <memcpy>
 8015aba:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 8015d24 <mode_Running+0x41c>
 8015abe:	2300      	movs	r3, #0
 8015ac0:	2200      	movs	r2, #0
 8015ac2:	2100      	movs	r1, #0
 8015ac4:	2000      	movs	r0, #0
 8015ac6:	eddf 0a92 	vldr	s1, [pc, #584]	; 8015d10 <mode_Running+0x408>
 8015aca:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8015d28 <mode_Running+0x420>
 8015ace:	f7f9 fb2f 	bl	800f130 <run_shortest>
		break;
 8015ad2:	e113      	b.n	8015cfc <mode_Running+0x3f4>
		case 0b0101://
			record_out();
 8015ad4:	f7f1 fcb6 	bl	8007444 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_OFF,speed600_shortest_mollifier,0.3,1);
 8015ad8:	2301      	movs	r3, #1
 8015ada:	9352      	str	r3, [sp, #328]	; 0x148
 8015adc:	4a93      	ldr	r2, [pc, #588]	; (8015d2c <mode_Running+0x424>)
 8015ade:	466b      	mov	r3, sp
 8015ae0:	4611      	mov	r1, r2
 8015ae2:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	f00a fbea 	bl	80202c0 <memcpy>
 8015aec:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 8015d24 <mode_Running+0x41c>
 8015af0:	2300      	movs	r3, #0
 8015af2:	2200      	movs	r2, #0
 8015af4:	2101      	movs	r1, #1
 8015af6:	2000      	movs	r0, #0
 8015af8:	eddf 0a85 	vldr	s1, [pc, #532]	; 8015d10 <mode_Running+0x408>
 8015afc:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8015d28 <mode_Running+0x420>
 8015b00:	f7f9 fb16 	bl	800f130 <run_shortest>
		break;
 8015b04:	e0fa      	b.n	8015cfc <mode_Running+0x3f4>
		case 0b0110://吸引なしで斜め走行
			record_out();
 8015b06:	f7f1 fc9d 	bl	8007444 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_ON,speed600_shortest_mollifier,0.3,1);
 8015b0a:	2301      	movs	r3, #1
 8015b0c:	9352      	str	r3, [sp, #328]	; 0x148
 8015b0e:	4a87      	ldr	r2, [pc, #540]	; (8015d2c <mode_Running+0x424>)
 8015b10:	466b      	mov	r3, sp
 8015b12:	4611      	mov	r1, r2
 8015b14:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015b18:	4618      	mov	r0, r3
 8015b1a:	f00a fbd1 	bl	80202c0 <memcpy>
 8015b1e:	ed9f 1a81 	vldr	s2, [pc, #516]	; 8015d24 <mode_Running+0x41c>
 8015b22:	2301      	movs	r3, #1
 8015b24:	2200      	movs	r2, #0
 8015b26:	2101      	movs	r1, #1
 8015b28:	2000      	movs	r0, #0
 8015b2a:	eddf 0a79 	vldr	s1, [pc, #484]	; 8015d10 <mode_Running+0x408>
 8015b2e:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8015d28 <mode_Running+0x420>
 8015b32:	f7f9 fafd 	bl	800f130 <run_shortest>
		break;
 8015b36:	e0e1      	b.n	8015cfc <mode_Running+0x3f4>
		case 0b0111://吸引ありで斜め走行
			record_out();
 8015b38:	f7f1 fc84 	bl	8007444 <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	9352      	str	r3, [sp, #328]	; 0x148
 8015b40:	4a7b      	ldr	r2, [pc, #492]	; (8015d30 <mode_Running+0x428>)
 8015b42:	466b      	mov	r3, sp
 8015b44:	4611      	mov	r1, r2
 8015b46:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f00a fbb8 	bl	80202c0 <memcpy>
 8015b50:	ed9f 1a78 	vldr	s2, [pc, #480]	; 8015d34 <mode_Running+0x42c>
 8015b54:	2301      	movs	r3, #1
 8015b56:	2201      	movs	r2, #1
 8015b58:	2101      	movs	r1, #1
 8015b5a:	2000      	movs	r0, #0
 8015b5c:	eddf 0a76 	vldr	s1, [pc, #472]	; 8015d38 <mode_Running+0x430>
 8015b60:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8015d10 <mode_Running+0x408>
 8015b64:	f7f9 fae4 	bl	800f130 <run_shortest>
		break;
 8015b68:	e0c8      	b.n	8015cfc <mode_Running+0x3f4>
		case 0b1000://
			record_out();
 8015b6a:	f7f1 fc6b 	bl	8007444 <record_out>
			run_shortest(3200,13000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 8015b6e:	2301      	movs	r3, #1
 8015b70:	9352      	str	r3, [sp, #328]	; 0x148
 8015b72:	4a6f      	ldr	r2, [pc, #444]	; (8015d30 <mode_Running+0x428>)
 8015b74:	466b      	mov	r3, sp
 8015b76:	4611      	mov	r1, r2
 8015b78:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	f00a fb9f 	bl	80202c0 <memcpy>
 8015b82:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 8015d34 <mode_Running+0x42c>
 8015b86:	2301      	movs	r3, #1
 8015b88:	2201      	movs	r2, #1
 8015b8a:	2101      	movs	r1, #1
 8015b8c:	2000      	movs	r0, #0
 8015b8e:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8015d3c <mode_Running+0x434>
 8015b92:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8015d40 <mode_Running+0x438>
 8015b96:	f7f9 facb 	bl	800f130 <run_shortest>
		break;
 8015b9a:	e0af      	b.n	8015cfc <mode_Running+0x3f4>
		case 0b1001:
			record_out();
 8015b9c:	f7f1 fc52 	bl	8007444 <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 8015ba0:	2301      	movs	r3, #1
 8015ba2:	9352      	str	r3, [sp, #328]	; 0x148
 8015ba4:	4a67      	ldr	r2, [pc, #412]	; (8015d44 <mode_Running+0x43c>)
 8015ba6:	466b      	mov	r3, sp
 8015ba8:	4611      	mov	r1, r2
 8015baa:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015bae:	4618      	mov	r0, r3
 8015bb0:	f00a fb86 	bl	80202c0 <memcpy>
 8015bb4:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 8015d34 <mode_Running+0x42c>
 8015bb8:	2301      	movs	r3, #1
 8015bba:	2201      	movs	r2, #1
 8015bbc:	2101      	movs	r1, #1
 8015bbe:	2000      	movs	r0, #0
 8015bc0:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8015d38 <mode_Running+0x430>
 8015bc4:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8015d10 <mode_Running+0x408>
 8015bc8:	f7f9 fab2 	bl	800f130 <run_shortest>
		break;
 8015bcc:	e096      	b.n	8015cfc <mode_Running+0x3f4>
		case 0b1010:
			record_out();
 8015bce:	f7f1 fc39 	bl	8007444 <record_out>
			run_shortest(3200,13000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 8015bd2:	2301      	movs	r3, #1
 8015bd4:	9352      	str	r3, [sp, #328]	; 0x148
 8015bd6:	4a5b      	ldr	r2, [pc, #364]	; (8015d44 <mode_Running+0x43c>)
 8015bd8:	466b      	mov	r3, sp
 8015bda:	4611      	mov	r1, r2
 8015bdc:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015be0:	4618      	mov	r0, r3
 8015be2:	f00a fb6d 	bl	80202c0 <memcpy>
 8015be6:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8015d34 <mode_Running+0x42c>
 8015bea:	2301      	movs	r3, #1
 8015bec:	2201      	movs	r2, #1
 8015bee:	2101      	movs	r1, #1
 8015bf0:	2000      	movs	r0, #0
 8015bf2:	eddf 0a52 	vldr	s1, [pc, #328]	; 8015d3c <mode_Running+0x434>
 8015bf6:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8015d40 <mode_Running+0x438>
 8015bfa:	f7f9 fa99 	bl	800f130 <run_shortest>
		break;
 8015bfe:	e07d      	b.n	8015cfc <mode_Running+0x3f4>
		case 0b1011:
			record_out();
 8015c00:	f7f1 fc20 	bl	8007444 <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 8015c04:	2301      	movs	r3, #1
 8015c06:	9352      	str	r3, [sp, #328]	; 0x148
 8015c08:	4a49      	ldr	r2, [pc, #292]	; (8015d30 <mode_Running+0x428>)
 8015c0a:	466b      	mov	r3, sp
 8015c0c:	4611      	mov	r1, r2
 8015c0e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015c12:	4618      	mov	r0, r3
 8015c14:	f00a fb54 	bl	80202c0 <memcpy>
 8015c18:	ed9f 1a46 	vldr	s2, [pc, #280]	; 8015d34 <mode_Running+0x42c>
 8015c1c:	2301      	movs	r3, #1
 8015c1e:	2201      	movs	r2, #1
 8015c20:	2101      	movs	r1, #1
 8015c22:	2000      	movs	r0, #0
 8015c24:	eddf 0a48 	vldr	s1, [pc, #288]	; 8015d48 <mode_Running+0x440>
 8015c28:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8015d4c <mode_Running+0x444>
 8015c2c:	f7f9 fa80 	bl	800f130 <run_shortest>
		break;
 8015c30:	e064      	b.n	8015cfc <mode_Running+0x3f4>
		case 0b1100:
			record_out();
 8015c32:	f7f1 fc07 	bl	8007444 <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 8015c36:	2301      	movs	r3, #1
 8015c38:	9352      	str	r3, [sp, #328]	; 0x148
 8015c3a:	4a42      	ldr	r2, [pc, #264]	; (8015d44 <mode_Running+0x43c>)
 8015c3c:	466b      	mov	r3, sp
 8015c3e:	4611      	mov	r1, r2
 8015c40:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015c44:	4618      	mov	r0, r3
 8015c46:	f00a fb3b 	bl	80202c0 <memcpy>
 8015c4a:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 8015d34 <mode_Running+0x42c>
 8015c4e:	2301      	movs	r3, #1
 8015c50:	2201      	movs	r2, #1
 8015c52:	2101      	movs	r1, #1
 8015c54:	2000      	movs	r0, #0
 8015c56:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8015d48 <mode_Running+0x440>
 8015c5a:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8015d4c <mode_Running+0x444>
 8015c5e:	f7f9 fa67 	bl	800f130 <run_shortest>
		break;
 8015c62:	e04b      	b.n	8015cfc <mode_Running+0x3f4>
		case 0b1101:
			record_out();
 8015c64:	f7f1 fbee 	bl	8007444 <record_out>
			run_shortest(3100,11000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest_mollifier,0.99,1);
 8015c68:	2301      	movs	r3, #1
 8015c6a:	9352      	str	r3, [sp, #328]	; 0x148
 8015c6c:	4a38      	ldr	r2, [pc, #224]	; (8015d50 <mode_Running+0x448>)
 8015c6e:	466b      	mov	r3, sp
 8015c70:	4611      	mov	r1, r2
 8015c72:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015c76:	4618      	mov	r0, r3
 8015c78:	f00a fb22 	bl	80202c0 <memcpy>
 8015c7c:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8015d34 <mode_Running+0x42c>
 8015c80:	2301      	movs	r3, #1
 8015c82:	2201      	movs	r2, #1
 8015c84:	2101      	movs	r1, #1
 8015c86:	2000      	movs	r0, #0
 8015c88:	eddf 0a32 	vldr	s1, [pc, #200]	; 8015d54 <mode_Running+0x44c>
 8015c8c:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8015d58 <mode_Running+0x450>
 8015c90:	f7f9 fa4e 	bl	800f130 <run_shortest>
		break;
 8015c94:	e032      	b.n	8015cfc <mode_Running+0x3f4>
		case 0b1110:
			record_out();
 8015c96:	f7f1 fbd5 	bl	8007444 <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest_mollifier,0.99,1);
 8015c9a:	2301      	movs	r3, #1
 8015c9c:	9352      	str	r3, [sp, #328]	; 0x148
 8015c9e:	4a2c      	ldr	r2, [pc, #176]	; (8015d50 <mode_Running+0x448>)
 8015ca0:	466b      	mov	r3, sp
 8015ca2:	4611      	mov	r1, r2
 8015ca4:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f00a fb09 	bl	80202c0 <memcpy>
 8015cae:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8015d34 <mode_Running+0x42c>
 8015cb2:	2301      	movs	r3, #1
 8015cb4:	2201      	movs	r2, #1
 8015cb6:	2101      	movs	r1, #1
 8015cb8:	2000      	movs	r0, #0
 8015cba:	eddf 0a23 	vldr	s1, [pc, #140]	; 8015d48 <mode_Running+0x440>
 8015cbe:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8015d4c <mode_Running+0x444>
 8015cc2:	f7f9 fa35 	bl	800f130 <run_shortest>
		break;
 8015cc6:	e019      	b.n	8015cfc <mode_Running+0x3f4>
		case 0b1111:
			AdatiWayReturn(250,400,2000,3000,speed250_exploration,1,0);
 8015cc8:	4c24      	ldr	r4, [pc, #144]	; (8015d5c <mode_Running+0x454>)
 8015cca:	2300      	movs	r3, #0
 8015ccc:	934f      	str	r3, [sp, #316]	; 0x13c
 8015cce:	2301      	movs	r3, #1
 8015cd0:	934e      	str	r3, [sp, #312]	; 0x138
 8015cd2:	4668      	mov	r0, sp
 8015cd4:	f104 0310 	add.w	r3, r4, #16
 8015cd8:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015cdc:	4619      	mov	r1, r3
 8015cde:	f00a faef 	bl	80202c0 <memcpy>
 8015ce2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015ce6:	eddf 1a0a 	vldr	s3, [pc, #40]	; 8015d10 <mode_Running+0x408>
 8015cea:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8015d14 <mode_Running+0x40c>
 8015cee:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8015d18 <mode_Running+0x410>
 8015cf2:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8015d60 <mode_Running+0x458>
 8015cf6:	f7f8 f92d 	bl	800df54 <AdatiWayReturn>
		break;
 8015cfa:	bf00      	nop
	}


}
 8015cfc:	bf00      	nop
 8015cfe:	3718      	adds	r7, #24
 8015d00:	46bd      	mov	sp, r7
 8015d02:	bdb0      	pop	{r4, r5, r7, pc}
 8015d04:	080236b0 	.word	0x080236b0
 8015d08:	080236bc 	.word	0x080236bc
 8015d0c:	2000ef80 	.word	0x2000ef80
 8015d10:	453b8000 	.word	0x453b8000
 8015d14:	44fa0000 	.word	0x44fa0000
 8015d18:	43c80000 	.word	0x43c80000
 8015d1c:	43960000 	.word	0x43960000
 8015d20:	2000f210 	.word	0x2000f210
 8015d24:	3e99999a 	.word	0x3e99999a
 8015d28:	447a0000 	.word	0x447a0000
 8015d2c:	2000f358 	.word	0x2000f358
 8015d30:	2000f4a0 	.word	0x2000f4a0
 8015d34:	3f7d70a4 	.word	0x3f7d70a4
 8015d38:	461c4000 	.word	0x461c4000
 8015d3c:	464b2000 	.word	0x464b2000
 8015d40:	45480000 	.word	0x45480000
 8015d44:	2000f5e8 	.word	0x2000f5e8
 8015d48:	4684d000 	.word	0x4684d000
 8015d4c:	457a0000 	.word	0x457a0000
 8015d50:	2000f730 	.word	0x2000f730
 8015d54:	462be000 	.word	0x462be000
 8015d58:	4541c000 	.word	0x4541c000
 8015d5c:	2000f0c8 	.word	0x2000f0c8
 8015d60:	437a0000 	.word	0x437a0000

08015d64 <mode_Tuning0>:





void mode_Tuning0(unsigned char main_modeR){
 8015d64:	b590      	push	{r4, r7, lr}
 8015d66:	b0db      	sub	sp, #364	; 0x16c
 8015d68:	af52      	add	r7, sp, #328	; 0x148
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	int duty_L=0, duty_R=0;
 8015d6e:	2300      	movs	r3, #0
 8015d70:	613b      	str	r3, [r7, #16]
 8015d72:	2300      	movs	r3, #0
 8015d74:	60fb      	str	r3, [r7, #12]
	mode.WallControlMode=0;
 8015d76:	2300      	movs	r3, #0
 8015d78:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 8015d7e:	2300      	movs	r3, #0
 8015d80:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 8015d82:	2300      	movs	r3, #0
 8015d84:	75bb      	strb	r3, [r7, #22]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015d86:	2003      	movs	r0, #3
 8015d88:	f7f1 fd9c 	bl	80078c4 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015d8c:	2003      	movs	r0, #3
 8015d8e:	f7f1 fdc1 	bl	8007914 <pl_R_DriveMotor_mode>
	reset_gyro();
 8015d92:	f7eb fce9 	bl	8001768 <reset_gyro>
	reset_speed();
 8015d96:	f7eb f93f 	bl	8001018 <reset_speed>
	reset_distance();
 8015d9a:	f7eb f8ff 	bl	8000f9c <reset_distance>
	clear_Ierror();
 8015d9e:	f7ee fc07 	bl	80045b0 <clear_Ierror>

	switch (main_modeR) {
 8015da2:	79fb      	ldrb	r3, [r7, #7]
 8015da4:	2b0f      	cmp	r3, #15
 8015da6:	f200 82c9 	bhi.w	801633c <mode_Tuning0+0x5d8>
 8015daa:	a201      	add	r2, pc, #4	; (adr r2, 8015db0 <mode_Tuning0+0x4c>)
 8015dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015db0:	08015df1 	.word	0x08015df1
 8015db4:	08015e7b 	.word	0x08015e7b
 8015db8:	08015ea1 	.word	0x08015ea1
 8015dbc:	08015ec7 	.word	0x08015ec7
 8015dc0:	08015ef7 	.word	0x08015ef7
 8015dc4:	08015f27 	.word	0x08015f27
 8015dc8:	08015f4d 	.word	0x08015f4d
 8015dcc:	08015f73 	.word	0x08015f73
 8015dd0:	08015f99 	.word	0x08015f99
 8015dd4:	08015fbd 	.word	0x08015fbd
 8015dd8:	0801603f 	.word	0x0801603f
 8015ddc:	080160c5 	.word	0x080160c5
 8015de0:	080160eb 	.word	0x080160eb
 8015de4:	08016185 	.word	0x08016185
 8015de8:	0801629d 	.word	0x0801629d
 8015dec:	080162ed 	.word	0x080162ed
		case 0://タイヤ径　エンコーダ+PID
			record_mode=3;
 8015df0:	4bca      	ldr	r3, [pc, #808]	; (801611c <mode_Tuning0+0x3b8>)
 8015df2:	2203      	movs	r2, #3
 8015df4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015df6:	2300      	movs	r3, #0
 8015df8:	753b      	strb	r3, [r7, #20]
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			straight_table2(540, 0, 0, 1600, 13000,mode);
 8015dfa:	6978      	ldr	r0, [r7, #20]
 8015dfc:	ed9f 2ac8 	vldr	s4, [pc, #800]	; 8016120 <mode_Tuning0+0x3bc>
 8015e00:	eddf 1ac8 	vldr	s3, [pc, #800]	; 8016124 <mode_Tuning0+0x3c0>
 8015e04:	ed9f 1ac8 	vldr	s2, [pc, #800]	; 8016128 <mode_Tuning0+0x3c4>
 8015e08:	eddf 0ac7 	vldr	s1, [pc, #796]	; 8016128 <mode_Tuning0+0x3c4>
 8015e0c:	ed9f 0ac7 	vldr	s0, [pc, #796]	; 801612c <mode_Tuning0+0x3c8>
 8015e10:	f7ed f8e4 	bl	8002fdc <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8015e14:	ed9f 2ac6 	vldr	s4, [pc, #792]	; 8016130 <mode_Tuning0+0x3cc>
 8015e18:	eddf 1ac6 	vldr	s3, [pc, #792]	; 8016134 <mode_Tuning0+0x3d0>
 8015e1c:	ed9f 1ac2 	vldr	s2, [pc, #776]	; 8016128 <mode_Tuning0+0x3c4>
 8015e20:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8016128 <mode_Tuning0+0x3c4>
 8015e24:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 8016138 <mode_Tuning0+0x3d4>
 8015e28:	f7ed fde6 	bl	80039f8 <turning_table2>
			straight_table2(540, 0, 0, 2000, 15000,mode);
 8015e2c:	6978      	ldr	r0, [r7, #20]
 8015e2e:	ed9f 2ac3 	vldr	s4, [pc, #780]	; 801613c <mode_Tuning0+0x3d8>
 8015e32:	eddf 1ac3 	vldr	s3, [pc, #780]	; 8016140 <mode_Tuning0+0x3dc>
 8015e36:	ed9f 1abc 	vldr	s2, [pc, #752]	; 8016128 <mode_Tuning0+0x3c4>
 8015e3a:	eddf 0abb 	vldr	s1, [pc, #748]	; 8016128 <mode_Tuning0+0x3c4>
 8015e3e:	ed9f 0abb 	vldr	s0, [pc, #748]	; 801612c <mode_Tuning0+0x3c8>
 8015e42:	f7ed f8cb 	bl	8002fdc <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8015e46:	ed9f 2aba 	vldr	s4, [pc, #744]	; 8016130 <mode_Tuning0+0x3cc>
 8015e4a:	eddf 1aba 	vldr	s3, [pc, #744]	; 8016134 <mode_Tuning0+0x3d0>
 8015e4e:	ed9f 1ab6 	vldr	s2, [pc, #728]	; 8016128 <mode_Tuning0+0x3c4>
 8015e52:	eddf 0ab5 	vldr	s1, [pc, #724]	; 8016128 <mode_Tuning0+0x3c4>
 8015e56:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8016138 <mode_Tuning0+0x3d4>
 8015e5a:	f7ed fdcd 	bl	80039f8 <turning_table2>
			straight_table2(540, 0, 0, 2400, 20000,mode);
 8015e5e:	6978      	ldr	r0, [r7, #20]
 8015e60:	ed9f 2ab8 	vldr	s4, [pc, #736]	; 8016144 <mode_Tuning0+0x3e0>
 8015e64:	eddf 1ab8 	vldr	s3, [pc, #736]	; 8016148 <mode_Tuning0+0x3e4>
 8015e68:	ed9f 1aaf 	vldr	s2, [pc, #700]	; 8016128 <mode_Tuning0+0x3c4>
 8015e6c:	eddf 0aae 	vldr	s1, [pc, #696]	; 8016128 <mode_Tuning0+0x3c4>
 8015e70:	ed9f 0aae 	vldr	s0, [pc, #696]	; 801612c <mode_Tuning0+0x3c8>
 8015e74:	f7ed f8b2 	bl	8002fdc <straight_table2>
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			//straight_table2(450, 0, 0, 1000, 13000,mode);
			//control_test_motor2(0,0,10);
		break;
 8015e78:	e260      	b.n	801633c <mode_Tuning0+0x5d8>
		case 1://トレッド幅??ジャイロ
			record_mode = 5;
 8015e7a:	4ba8      	ldr	r3, [pc, #672]	; (801611c <mode_Tuning0+0x3b8>)
 8015e7c:	2205      	movs	r2, #5
 8015e7e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015e80:	2300      	movs	r3, #0
 8015e82:	753b      	strb	r3, [r7, #20]
//			straight_table2(400, 0, 0, 400, 3000,mode);
			straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 8015e84:	6978      	ldr	r0, [r7, #20]
 8015e86:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 801614c <mode_Tuning0+0x3e8>
 8015e8a:	eddf 1ab1 	vldr	s3, [pc, #708]	; 8016150 <mode_Tuning0+0x3ec>
 8015e8e:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 8016128 <mode_Tuning0+0x3c4>
 8015e92:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8016128 <mode_Tuning0+0x3c4>
 8015e96:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8016154 <mode_Tuning0+0x3f0>
 8015e9a:	f7ed f89f 	bl	8002fdc <straight_table2>
			//turning_table2(360*10, 0, 0, 800, 8000);
			//control_test_motor2(1,0,5);
		break;
 8015e9e:	e24d      	b.n	801633c <mode_Tuning0+0x5d8>
		case 2://壁制御
			record_mode=6;
 8015ea0:	4b9e      	ldr	r3, [pc, #632]	; (801611c <mode_Tuning0+0x3b8>)
 8015ea2:	2206      	movs	r2, #6
 8015ea4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015ea6:	2301      	movs	r3, #1
 8015ea8:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 300, 6000,mode);
 8015eaa:	6978      	ldr	r0, [r7, #20]
 8015eac:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 8016158 <mode_Tuning0+0x3f4>
 8015eb0:	eddf 1aaa 	vldr	s3, [pc, #680]	; 801615c <mode_Tuning0+0x3f8>
 8015eb4:	ed9f 1a9c 	vldr	s2, [pc, #624]	; 8016128 <mode_Tuning0+0x3c4>
 8015eb8:	eddf 0a9b 	vldr	s1, [pc, #620]	; 8016128 <mode_Tuning0+0x3c4>
 8015ebc:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 8016160 <mode_Tuning0+0x3fc>
 8015ec0:	f7ed f88c 	bl	8002fdc <straight_table2>
			//control_test_motor2(0,1,6);
		break;
 8015ec4:	e23a      	b.n	801633c <mode_Tuning0+0x5d8>
		case 3://右スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,-90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);

			testturning(speed300_exploration,0,0,0,0,0);
 8015ec6:	4ca7      	ldr	r4, [pc, #668]	; (8016164 <mode_Tuning0+0x400>)
 8015ec8:	2300      	movs	r3, #0
 8015eca:	9351      	str	r3, [sp, #324]	; 0x144
 8015ecc:	2300      	movs	r3, #0
 8015ece:	9350      	str	r3, [sp, #320]	; 0x140
 8015ed0:	2300      	movs	r3, #0
 8015ed2:	934f      	str	r3, [sp, #316]	; 0x13c
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	934e      	str	r3, [sp, #312]	; 0x138
 8015ed8:	4668      	mov	r0, sp
 8015eda:	f104 0310 	add.w	r3, r4, #16
 8015ede:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015ee2:	4619      	mov	r1, r3
 8015ee4:	f00a f9ec 	bl	80202c0 <memcpy>
 8015ee8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015eec:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8016128 <mode_Tuning0+0x3c4>
 8015ef0:	f7f7 fe76 	bl	800dbe0 <testturning>
		break;
 8015ef4:	e222      	b.n	801633c <mode_Tuning0+0x5d8>
		case 4://左スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
			testturning(speed300_exploration,1,0,0,0,0);
 8015ef6:	4c9b      	ldr	r4, [pc, #620]	; (8016164 <mode_Tuning0+0x400>)
 8015ef8:	2300      	movs	r3, #0
 8015efa:	9351      	str	r3, [sp, #324]	; 0x144
 8015efc:	2300      	movs	r3, #0
 8015efe:	9350      	str	r3, [sp, #320]	; 0x140
 8015f00:	2300      	movs	r3, #0
 8015f02:	934f      	str	r3, [sp, #316]	; 0x13c
 8015f04:	2301      	movs	r3, #1
 8015f06:	934e      	str	r3, [sp, #312]	; 0x138
 8015f08:	4668      	mov	r0, sp
 8015f0a:	f104 0310 	add.w	r3, r4, #16
 8015f0e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015f12:	4619      	mov	r1, r3
 8015f14:	f00a f9d4 	bl	80202c0 <memcpy>
 8015f18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015f1c:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8016128 <mode_Tuning0+0x3c4>
 8015f20:	f7f7 fe5e 	bl	800dbe0 <testturning>
		break;
 8015f24:	e20a      	b.n	801633c <mode_Tuning0+0x5d8>
		case 5://直進(制御なし)
			record_mode=7;
 8015f26:	4b7d      	ldr	r3, [pc, #500]	; (801611c <mode_Tuning0+0x3b8>)
 8015f28:	2207      	movs	r2, #7
 8015f2a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	753b      	strb	r3, [r7, #20]
			straight_table2(180, 0, 0, 300, 6000,mode);
 8015f30:	6978      	ldr	r0, [r7, #20]
 8015f32:	ed9f 2a89 	vldr	s4, [pc, #548]	; 8016158 <mode_Tuning0+0x3f4>
 8015f36:	eddf 1a89 	vldr	s3, [pc, #548]	; 801615c <mode_Tuning0+0x3f8>
 8015f3a:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 8016128 <mode_Tuning0+0x3c4>
 8015f3e:	eddf 0a7a 	vldr	s1, [pc, #488]	; 8016128 <mode_Tuning0+0x3c4>
 8015f42:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8016138 <mode_Tuning0+0x3d4>
 8015f46:	f7ed f849 	bl	8002fdc <straight_table2>
		break;
 8015f4a:	e1f7      	b.n	801633c <mode_Tuning0+0x5d8>
		case 6://斜め直進(制御あり)
			record_mode=7;//or3
 8015f4c:	4b73      	ldr	r3, [pc, #460]	; (801611c <mode_Tuning0+0x3b8>)
 8015f4e:	2207      	movs	r2, #7
 8015f50:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015f52:	2300      	movs	r3, #0
 8015f54:	753b      	strb	r3, [r7, #20]
			straight_table2(180*3*sqrt(2), 0, 0, 500, 6000,mode);
 8015f56:	6978      	ldr	r0, [r7, #20]
 8015f58:	ed9f 2a7f 	vldr	s4, [pc, #508]	; 8016158 <mode_Tuning0+0x3f4>
 8015f5c:	eddf 1a82 	vldr	s3, [pc, #520]	; 8016168 <mode_Tuning0+0x404>
 8015f60:	ed9f 1a71 	vldr	s2, [pc, #452]	; 8016128 <mode_Tuning0+0x3c4>
 8015f64:	eddf 0a70 	vldr	s1, [pc, #448]	; 8016128 <mode_Tuning0+0x3c4>
 8015f68:	ed9f 0a80 	vldr	s0, [pc, #512]	; 801616c <mode_Tuning0+0x408>
 8015f6c:	f7ed f836 	bl	8002fdc <straight_table2>
		break;
 8015f70:	e1e4      	b.n	801633c <mode_Tuning0+0x5d8>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=7;
 8015f72:	4b6a      	ldr	r3, [pc, #424]	; (801611c <mode_Tuning0+0x3b8>)
 8015f74:	2207      	movs	r2, #7
 8015f76:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015f78:	2303      	movs	r3, #3
 8015f7a:	753b      	strb	r3, [r7, #20]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 6000,mode);
 8015f7c:	6978      	ldr	r0, [r7, #20]
 8015f7e:	ed9f 2a76 	vldr	s4, [pc, #472]	; 8016158 <mode_Tuning0+0x3f4>
 8015f82:	eddf 1a6f 	vldr	s3, [pc, #444]	; 8016140 <mode_Tuning0+0x3dc>
 8015f86:	ed9f 1a68 	vldr	s2, [pc, #416]	; 8016128 <mode_Tuning0+0x3c4>
 8015f8a:	eddf 0a67 	vldr	s1, [pc, #412]	; 8016128 <mode_Tuning0+0x3c4>
 8015f8e:	ed9f 0a77 	vldr	s0, [pc, #476]	; 801616c <mode_Tuning0+0x408>
 8015f92:	f7ed f823 	bl	8002fdc <straight_table2>
		break;
 8015f96:	e1d1      	b.n	801633c <mode_Tuning0+0x5d8>
		case 8://宴会芸
			record_mode=2;
 8015f98:	4b60      	ldr	r3, [pc, #384]	; (801611c <mode_Tuning0+0x3b8>)
 8015f9a:	2202      	movs	r2, #2
 8015f9c:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8015f9e:	2001      	movs	r0, #1
 8015fa0:	f7f0 ffe2 	bl	8006f68 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015fa4:	2001      	movs	r0, #1
 8015fa6:	f7f0 fff1 	bl	8006f8c <pl_l_blue_LED>
			no_angle();
 8015faa:	f7ed ff39 	bl	8003e20 <no_angle>
			pl_r_blue_LED(OFF);
 8015fae:	2000      	movs	r0, #0
 8015fb0:	f7f0 ffda 	bl	8006f68 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015fb4:	2000      	movs	r0, #0
 8015fb6:	f7f0 ffe9 	bl	8006f8c <pl_l_blue_LED>
		break;
 8015fba:	e1bf      	b.n	801633c <mode_Tuning0+0x5d8>
		case 9://システム同定enc
			record_mode=6;
 8015fbc:	4b57      	ldr	r3, [pc, #348]	; (801611c <mode_Tuning0+0x3b8>)
 8015fbe:	2206      	movs	r2, #6
 8015fc0:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8015fc2:	2001      	movs	r0, #1
 8015fc4:	f7f0 ffd0 	bl	8006f68 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015fc8:	2001      	movs	r0, #1
 8015fca:	f7f0 ffdf 	bl	8006f8c <pl_l_blue_LED>
//			straight_table_ff(90, 0, 300, 300, 500);
//			straight_table_ff(90, 300, 600, 600, 1500);
//			straight_table_ff(90, 600, 300, 600, 1500);
//			straight_table_ff(90, 300, 0, 300, 500);

			get_duty(1, 1,&duty_L,&duty_R);
 8015fce:	f107 020c 	add.w	r2, r7, #12
 8015fd2:	f107 0310 	add.w	r3, r7, #16
 8015fd6:	4611      	mov	r1, r2
 8015fd8:	4618      	mov	r0, r3
 8015fda:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8015fde:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015fe2:	f7eb ff27 	bl	8001e34 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 8015fe6:	693b      	ldr	r3, [r7, #16]
 8015fe8:	68fa      	ldr	r2, [r7, #12]
 8015fea:	4611      	mov	r1, r2
 8015fec:	4618      	mov	r0, r3
 8015fee:	f7f1 fcd3 	bl	8007998 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 8015ff2:	f7f1 fcb5 	bl	8007960 <pl_DriveMotor_start>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015ff6:	e006      	b.n	8016006 <mode_Tuning0+0x2a2>
				wait_ms(1);
 8015ff8:	2001      	movs	r0, #1
 8015ffa:	f7f1 ff45 	bl	8007e88 <wait_ms>
				if(record_rupe_flag==1){
 8015ffe:	4b5c      	ldr	r3, [pc, #368]	; (8016170 <mode_Tuning0+0x40c>)
 8016000:	781b      	ldrb	r3, [r3, #0]
 8016002:	2b01      	cmp	r3, #1
 8016004:	d011      	beq.n	801602a <mode_Tuning0+0x2c6>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016006:	4b5b      	ldr	r3, [pc, #364]	; (8016174 <mode_Tuning0+0x410>)
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801600e:	ddf3      	ble.n	8015ff8 <mode_Tuning0+0x294>
 8016010:	4b58      	ldr	r3, [pc, #352]	; (8016174 <mode_Tuning0+0x410>)
 8016012:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016016:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801601a:	dded      	ble.n	8015ff8 <mode_Tuning0+0x294>
 801601c:	4b55      	ldr	r3, [pc, #340]	; (8016174 <mode_Tuning0+0x410>)
 801601e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016022:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016026:	dde7      	ble.n	8015ff8 <mode_Tuning0+0x294>
 8016028:	e000      	b.n	801602c <mode_Tuning0+0x2c8>
					break;
 801602a:	bf00      	nop
				}
			}
			pl_DriveMotor_stop();
 801602c:	f7f1 fca6 	bl	800797c <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 8016030:	2000      	movs	r0, #0
 8016032:	f7f0 ff99 	bl	8006f68 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8016036:	2000      	movs	r0, #0
 8016038:	f7f0 ffa8 	bl	8006f8c <pl_l_blue_LED>
		break;
 801603c:	e17e      	b.n	801633c <mode_Tuning0+0x5d8>
		case 10://システム同定gyro
			record_mode=6;
 801603e:	4b37      	ldr	r3, [pc, #220]	; (801611c <mode_Tuning0+0x3b8>)
 8016040:	2206      	movs	r2, #6
 8016042:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8016044:	2001      	movs	r0, #1
 8016046:	f7f0 ff8f 	bl	8006f68 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 801604a:	2001      	movs	r0, #1
 801604c:	f7f0 ff9e 	bl	8006f8c <pl_l_blue_LED>
//			turning_table_ff(90, 0, 300, 300, 500);
//			turning_table_ff(90, 300, 600, 600, 1500);
//			turning_table_ff(90, 600, 300, 600, 1500);
//			turning_table_ff(90, 300, 0, 300, 500);
			get_duty(-1.0, 1.0,&duty_L,&duty_R);
 8016050:	f107 020c 	add.w	r2, r7, #12
 8016054:	f107 0310 	add.w	r3, r7, #16
 8016058:	4611      	mov	r1, r2
 801605a:	4618      	mov	r0, r3
 801605c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8016060:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016064:	f7eb fee6 	bl	8001e34 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 8016068:	693b      	ldr	r3, [r7, #16]
 801606a:	68fa      	ldr	r2, [r7, #12]
 801606c:	4611      	mov	r1, r2
 801606e:	4618      	mov	r0, r3
 8016070:	f7f1 fc92 	bl	8007998 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 8016074:	f7f1 fc74 	bl	8007960 <pl_DriveMotor_start>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016078:	e00a      	b.n	8016090 <mode_Tuning0+0x32c>
				wait_ms(1);
 801607a:	2001      	movs	r0, #1
 801607c:	f7f1 ff04 	bl	8007e88 <wait_ms>
				if(record_rupe_flag==1){
 8016080:	4b3b      	ldr	r3, [pc, #236]	; (8016170 <mode_Tuning0+0x40c>)
 8016082:	781b      	ldrb	r3, [r3, #0]
 8016084:	2b01      	cmp	r3, #1
 8016086:	d103      	bne.n	8016090 <mode_Tuning0+0x32c>
					record_mode=0;
 8016088:	4b24      	ldr	r3, [pc, #144]	; (801611c <mode_Tuning0+0x3b8>)
 801608a:	2200      	movs	r2, #0
 801608c:	701a      	strb	r2, [r3, #0]
					break;
 801608e:	e010      	b.n	80160b2 <mode_Tuning0+0x34e>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016090:	4b38      	ldr	r3, [pc, #224]	; (8016174 <mode_Tuning0+0x410>)
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016098:	ddef      	ble.n	801607a <mode_Tuning0+0x316>
 801609a:	4b36      	ldr	r3, [pc, #216]	; (8016174 <mode_Tuning0+0x410>)
 801609c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80160a0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80160a4:	dde9      	ble.n	801607a <mode_Tuning0+0x316>
 80160a6:	4b33      	ldr	r3, [pc, #204]	; (8016174 <mode_Tuning0+0x410>)
 80160a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80160ac:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80160b0:	dde3      	ble.n	801607a <mode_Tuning0+0x316>
				}
			}
			pl_DriveMotor_stop();
 80160b2:	f7f1 fc63 	bl	800797c <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 80160b6:	2000      	movs	r0, #0
 80160b8:	f7f0 ff56 	bl	8006f68 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80160bc:	2000      	movs	r0, #0
 80160be:	f7f0 ff65 	bl	8006f8c <pl_l_blue_LED>
		break;
 80160c2:	e13b      	b.n	801633c <mode_Tuning0+0x5d8>
		case 11:
		record_mode=1;
 80160c4:	4b15      	ldr	r3, [pc, #84]	; (801611c <mode_Tuning0+0x3b8>)
 80160c6:	2201      	movs	r2, #1
 80160c8:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=0;
 80160ca:	2300      	movs	r3, #0
 80160cc:	753b      	strb	r3, [r7, #20]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT, 0, 0, 300, 6000,mode);
 80160ce:	6978      	ldr	r0, [r7, #20]
 80160d0:	ed9f 2a21 	vldr	s4, [pc, #132]	; 8016158 <mode_Tuning0+0x3f4>
 80160d4:	eddf 1a21 	vldr	s3, [pc, #132]	; 801615c <mode_Tuning0+0x3f8>
 80160d8:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8016128 <mode_Tuning0+0x3c4>
 80160dc:	eddf 0a12 	vldr	s1, [pc, #72]	; 8016128 <mode_Tuning0+0x3c4>
 80160e0:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8016178 <mode_Tuning0+0x414>
 80160e4:	f7ec ff7a 	bl	8002fdc <straight_table2>
		break;
 80160e8:	e128      	b.n	801633c <mode_Tuning0+0x5d8>
		case 12:
		record_mode=2;
 80160ea:	4b0c      	ldr	r3, [pc, #48]	; (801611c <mode_Tuning0+0x3b8>)
 80160ec:	2202      	movs	r2, #2
 80160ee:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<40;i++){
 80160f0:	2300      	movs	r3, #0
 80160f2:	61fb      	str	r3, [r7, #28]
 80160f4:	e00e      	b.n	8016114 <mode_Tuning0+0x3b0>
		turning_table2(90, 0, 0, 400, 3000);
 80160f6:	ed9f 2a21 	vldr	s4, [pc, #132]	; 801617c <mode_Tuning0+0x418>
 80160fa:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8016134 <mode_Tuning0+0x3d0>
 80160fe:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8016128 <mode_Tuning0+0x3c4>
 8016102:	eddf 0a09 	vldr	s1, [pc, #36]	; 8016128 <mode_Tuning0+0x3c4>
 8016106:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8016180 <mode_Tuning0+0x41c>
 801610a:	f7ed fc75 	bl	80039f8 <turning_table2>
		for(int i=0;i<40;i++){
 801610e:	69fb      	ldr	r3, [r7, #28]
 8016110:	3301      	adds	r3, #1
 8016112:	61fb      	str	r3, [r7, #28]
 8016114:	69fb      	ldr	r3, [r7, #28]
 8016116:	2b27      	cmp	r3, #39	; 0x27
 8016118:	dded      	ble.n	80160f6 <mode_Tuning0+0x392>
		}
		break;
 801611a:	e10f      	b.n	801633c <mode_Tuning0+0x5d8>
 801611c:	2000edc0 	.word	0x2000edc0
 8016120:	464b2000 	.word	0x464b2000
 8016124:	44c80000 	.word	0x44c80000
 8016128:	00000000 	.word	0x00000000
 801612c:	44070000 	.word	0x44070000
 8016130:	457a0000 	.word	0x457a0000
 8016134:	43c80000 	.word	0x43c80000
 8016138:	43340000 	.word	0x43340000
 801613c:	466a6000 	.word	0x466a6000
 8016140:	44fa0000 	.word	0x44fa0000
 8016144:	469c4000 	.word	0x469c4000
 8016148:	45160000 	.word	0x45160000
 801614c:	447a0000 	.word	0x447a0000
 8016150:	c3160000 	.word	0xc3160000
 8016154:	c1a40000 	.word	0xc1a40000
 8016158:	45bb8000 	.word	0x45bb8000
 801615c:	43960000 	.word	0x43960000
 8016160:	44340000 	.word	0x44340000
 8016164:	2000ef80 	.word	0x2000ef80
 8016168:	43fa0000 	.word	0x43fa0000
 801616c:	443eeb39 	.word	0x443eeb39
 8016170:	2000edcc 	.word	0x2000edcc
 8016174:	200002b8 	.word	0x200002b8
 8016178:	420a0000 	.word	0x420a0000
 801617c:	453b8000 	.word	0x453b8000
 8016180:	42b40000 	.word	0x42b40000
		case 13:
			record_mode=2;
 8016184:	4b8a      	ldr	r3, [pc, #552]	; (80163b0 <mode_Tuning0+0x64c>)
 8016186:	2202      	movs	r2, #2
 8016188:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 801618a:	2301      	movs	r3, #1
 801618c:	753b      	strb	r3, [r7, #20]
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 801618e:	4b89      	ldr	r3, [pc, #548]	; (80163b4 <mode_Tuning0+0x650>)
 8016190:	edd3 6a02 	vldr	s13, [r3, #8]
 8016194:	4b87      	ldr	r3, [pc, #540]	; (80163b4 <mode_Tuning0+0x650>)
 8016196:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 801619a:	4b86      	ldr	r3, [pc, #536]	; (80163b4 <mode_Tuning0+0x650>)
 801619c:	ed93 7a02 	vldr	s14, [r3, #8]
 80161a0:	4b84      	ldr	r3, [pc, #528]	; (80163b4 <mode_Tuning0+0x650>)
 80161a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80161a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80161aa:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80161ae:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 80161b2:	eddf 5a81 	vldr	s11, [pc, #516]	; 80163b8 <mode_Tuning0+0x654>
 80161b6:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80161ba:	6978      	ldr	r0, [r7, #20]
 80161bc:	eeb0 2a47 	vmov.f32	s4, s14
 80161c0:	eef0 1a46 	vmov.f32	s3, s12
 80161c4:	eeb0 1a66 	vmov.f32	s2, s13
 80161c8:	eddf 0a7c 	vldr	s1, [pc, #496]	; 80163bc <mode_Tuning0+0x658>
 80161cc:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 80163c0 <mode_Tuning0+0x65c>
 80161d0:	f7ec ff04 	bl	8002fdc <straight_table2>
			for(int i=0;i<40;i++){
 80161d4:	2300      	movs	r3, #0
 80161d6:	61bb      	str	r3, [r7, #24]
 80161d8:	e037      	b.n	801624a <mode_Tuning0+0x4e6>
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 80161da:	4b76      	ldr	r3, [pc, #472]	; (80163b4 <mode_Tuning0+0x650>)
 80161dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80161e0:	4b74      	ldr	r3, [pc, #464]	; (80163b4 <mode_Tuning0+0x650>)
 80161e2:	ed93 6a02 	vldr	s12, [r3, #8]
 80161e6:	4b73      	ldr	r3, [pc, #460]	; (80163b4 <mode_Tuning0+0x650>)
 80161e8:	edd3 5a02 	vldr	s11, [r3, #8]
									speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 80161ec:	4b71      	ldr	r3, [pc, #452]	; (80163b4 <mode_Tuning0+0x650>)
 80161ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80161f2:	4b70      	ldr	r3, [pc, #448]	; (80163b4 <mode_Tuning0+0x650>)
 80161f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80161f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80161fc:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8016200:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8016204:	ed9f 5a6c 	vldr	s10, [pc, #432]	; 80163b8 <mode_Tuning0+0x654>
 8016208:	ee87 7a85 	vdiv.f32	s14, s15, s10
 801620c:	6978      	ldr	r0, [r7, #20]
 801620e:	eeb0 2a47 	vmov.f32	s4, s14
 8016212:	eef0 1a65 	vmov.f32	s3, s11
 8016216:	eeb0 1a46 	vmov.f32	s2, s12
 801621a:	eef0 0a66 	vmov.f32	s1, s13
 801621e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8016222:	f7ec fedb 	bl	8002fdc <straight_table2>
			slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,300);
 8016226:	4b63      	ldr	r3, [pc, #396]	; (80163b4 <mode_Tuning0+0x650>)
 8016228:	2200      	movs	r2, #0
 801622a:	9203      	str	r2, [sp, #12]
 801622c:	2200      	movs	r2, #0
 801622e:	9202      	str	r2, [sp, #8]
 8016230:	2200      	movs	r2, #0
 8016232:	9201      	str	r2, [sp, #4]
 8016234:	699a      	ldr	r2, [r3, #24]
 8016236:	9200      	str	r2, [sp, #0]
 8016238:	3308      	adds	r3, #8
 801623a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801623c:	ed9f 0a61 	vldr	s0, [pc, #388]	; 80163c4 <mode_Tuning0+0x660>
 8016240:	f7f3 fe8a 	bl	8009f58 <slalomR>
			for(int i=0;i<40;i++){
 8016244:	69bb      	ldr	r3, [r7, #24]
 8016246:	3301      	adds	r3, #1
 8016248:	61bb      	str	r3, [r7, #24]
 801624a:	69bb      	ldr	r3, [r7, #24]
 801624c:	2b27      	cmp	r3, #39	; 0x27
 801624e:	ddc4      	ble.n	80161da <mode_Tuning0+0x476>
			}
			mode.WallControlMode=0;
 8016250:	2300      	movs	r3, #0
 8016252:	753b      	strb	r3, [r7, #20]
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 8016254:	4b57      	ldr	r3, [pc, #348]	; (80163b4 <mode_Tuning0+0x650>)
 8016256:	edd3 6a02 	vldr	s13, [r3, #8]
 801625a:	4b56      	ldr	r3, [pc, #344]	; (80163b4 <mode_Tuning0+0x650>)
 801625c:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8016260:	4b54      	ldr	r3, [pc, #336]	; (80163b4 <mode_Tuning0+0x650>)
 8016262:	ed93 7a02 	vldr	s14, [r3, #8]
 8016266:	4b53      	ldr	r3, [pc, #332]	; (80163b4 <mode_Tuning0+0x650>)
 8016268:	edd3 7a02 	vldr	s15, [r3, #8]
 801626c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016270:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8016274:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 8016278:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80163b8 <mode_Tuning0+0x654>
 801627c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8016280:	6978      	ldr	r0, [r7, #20]
 8016282:	eeb0 2a47 	vmov.f32	s4, s14
 8016286:	eef0 1a46 	vmov.f32	s3, s12
 801628a:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 80163bc <mode_Tuning0+0x658>
 801628e:	eef0 0a66 	vmov.f32	s1, s13
 8016292:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80163b8 <mode_Tuning0+0x654>
 8016296:	f7ec fea1 	bl	8002fdc <straight_table2>
			//pl_r_blue_LED(ON);
			//pl_l_blue_LED(ON);
			//no_frontwall_straight();
			//pl_r_blue_LED(OFF);
			//pl_l_blue_LED(OFF);
		break;
 801629a:	e04f      	b.n	801633c <mode_Tuning0+0x5d8>
		case 14://宴会芸＋吸引
//			record_mode=2;
//			for(int i=0;i<40;i++){
//			turning_table2(90, 0, 0, 930, 11000);
//			}
			highspeed_mode = 1;
 801629c:	4b4a      	ldr	r3, [pc, #296]	; (80163c8 <mode_Tuning0+0x664>)
 801629e:	2201      	movs	r2, #1
 80162a0:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 80162a2:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80163cc <mode_Tuning0+0x668>
 80162a6:	f7f1 fba1 	bl	80079ec <pl_FunMotor_duty>
			pl_FunMotor_start();
 80162aa:	f7f1 fb8b 	bl	80079c4 <pl_FunMotor_start>
			HAL_Delay(600);
 80162ae:	f44f 7016 	mov.w	r0, #600	; 0x258
 80162b2:	f002 fd33 	bl	8018d1c <HAL_Delay>
			reset_gyro();
 80162b6:	f7eb fa57 	bl	8001768 <reset_gyro>
			reset_speed();
 80162ba:	f7ea fead 	bl	8001018 <reset_speed>
			reset_distance();
 80162be:	f7ea fe6d 	bl	8000f9c <reset_distance>
			clear_Ierror();
 80162c2:	f7ee f975 	bl	80045b0 <clear_Ierror>
			record_mode=3;
 80162c6:	4b3a      	ldr	r3, [pc, #232]	; (80163b0 <mode_Tuning0+0x64c>)
 80162c8:	2203      	movs	r2, #3
 80162ca:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=1;
 80162cc:	2301      	movs	r3, #1
 80162ce:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 4000, 17000,mode);
 80162d0:	6978      	ldr	r0, [r7, #20]
 80162d2:	ed9f 2a3f 	vldr	s4, [pc, #252]	; 80163d0 <mode_Tuning0+0x66c>
 80162d6:	eddf 1a3f 	vldr	s3, [pc, #252]	; 80163d4 <mode_Tuning0+0x670>
 80162da:	ed9f 1a38 	vldr	s2, [pc, #224]	; 80163bc <mode_Tuning0+0x658>
 80162de:	eddf 0a37 	vldr	s1, [pc, #220]	; 80163bc <mode_Tuning0+0x658>
 80162e2:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80163d8 <mode_Tuning0+0x674>
 80162e6:	f7ec fe79 	bl	8002fdc <straight_table2>
		break;
 80162ea:	e027      	b.n	801633c <mode_Tuning0+0x5d8>
		case 15:
			highspeed_mode = 1;
 80162ec:	4b36      	ldr	r3, [pc, #216]	; (80163c8 <mode_Tuning0+0x664>)
 80162ee:	2201      	movs	r2, #1
 80162f0:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 80162f2:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80163cc <mode_Tuning0+0x668>
 80162f6:	f7f1 fb79 	bl	80079ec <pl_FunMotor_duty>
			pl_FunMotor_start();
 80162fa:	f7f1 fb63 	bl	80079c4 <pl_FunMotor_start>
			HAL_Delay(600);
 80162fe:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016302:	f002 fd0b 	bl	8018d1c <HAL_Delay>
			reset_gyro();
 8016306:	f7eb fa2f 	bl	8001768 <reset_gyro>
			reset_speed();
 801630a:	f7ea fe85 	bl	8001018 <reset_speed>
			reset_distance();
 801630e:	f7ea fe45 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8016312:	f7ee f94d 	bl	80045b0 <clear_Ierror>
			record_mode=3;
 8016316:	4b26      	ldr	r3, [pc, #152]	; (80163b0 <mode_Tuning0+0x64c>)
 8016318:	2203      	movs	r2, #3
 801631a:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=3;
 801631c:	2303      	movs	r3, #3
 801631e:	753b      	strb	r3, [r7, #20]
			straight_table2(90*7.5*sqrt(2), 0, 0, 4000, 20000,mode);
 8016320:	6978      	ldr	r0, [r7, #20]
 8016322:	ed9f 2a2e 	vldr	s4, [pc, #184]	; 80163dc <mode_Tuning0+0x678>
 8016326:	eddf 1a2b 	vldr	s3, [pc, #172]	; 80163d4 <mode_Tuning0+0x670>
 801632a:	ed9f 1a24 	vldr	s2, [pc, #144]	; 80163bc <mode_Tuning0+0x658>
 801632e:	eddf 0a23 	vldr	s1, [pc, #140]	; 80163bc <mode_Tuning0+0x658>
 8016332:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80163e0 <mode_Tuning0+0x67c>
 8016336:	f7ec fe51 	bl	8002fdc <straight_table2>
//			record_mode=1;
//			mode.WallControlMode=0;
//			straight_table2(BACK_TO_CENTER_SLANT, 0, 0, 300, 6000,mode);
		break;
 801633a:	bf00      	nop
	}
	record_mode=0;
 801633c:	4b1c      	ldr	r3, [pc, #112]	; (80163b0 <mode_Tuning0+0x64c>)
 801633e:	2200      	movs	r2, #0
 8016340:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016342:	2003      	movs	r0, #3
 8016344:	f7f1 fae6 	bl	8007914 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016348:	2003      	movs	r0, #3
 801634a:	f7f1 fabb 	bl	80078c4 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 801634e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016352:	f7f1 fddd 	bl	8007f10 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8016356:	f7f1 fb3f 	bl	80079d8 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 801635a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801635e:	f7f1 fdd7 	bl	8007f10 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8016362:	2000      	movs	r0, #0
 8016364:	f7f1 faa4 	bl	80078b0 <pl_DriveMotor_standby>
	record_mode=0;
 8016368:	4b11      	ldr	r3, [pc, #68]	; (80163b0 <mode_Tuning0+0x64c>)
 801636a:	2200      	movs	r2, #0
 801636c:	701a      	strb	r2, [r3, #0]
	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801636e:	e002      	b.n	8016376 <mode_Tuning0+0x612>
		HAL_Delay(1);
 8016370:	2001      	movs	r0, #1
 8016372:	f002 fcd3 	bl	8018d1c <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016376:	4b1b      	ldr	r3, [pc, #108]	; (80163e4 <mode_Tuning0+0x680>)
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801637e:	ddf7      	ble.n	8016370 <mode_Tuning0+0x60c>
 8016380:	4b18      	ldr	r3, [pc, #96]	; (80163e4 <mode_Tuning0+0x680>)
 8016382:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016386:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801638a:	ddf1      	ble.n	8016370 <mode_Tuning0+0x60c>
 801638c:	4b15      	ldr	r3, [pc, #84]	; (80163e4 <mode_Tuning0+0x680>)
 801638e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016392:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016396:	ddeb      	ble.n	8016370 <mode_Tuning0+0x60c>
	}
	pl_r_blue_LED(ON);
 8016398:	2001      	movs	r0, #1
 801639a:	f7f0 fde5 	bl	8006f68 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 801639e:	2001      	movs	r0, #1
 80163a0:	f7f0 fdf4 	bl	8006f8c <pl_l_blue_LED>
	record_print();
 80163a4:	f000 fd48 	bl	8016e38 <record_print>



}
 80163a8:	bf00      	nop
 80163aa:	3724      	adds	r7, #36	; 0x24
 80163ac:	46bd      	mov	sp, r7
 80163ae:	bd90      	pop	{r4, r7, pc}
 80163b0:	2000edc0 	.word	0x2000edc0
 80163b4:	2000ef80 	.word	0x2000ef80
 80163b8:	42340000 	.word	0x42340000
 80163bc:	00000000 	.word	0x00000000
 80163c0:	431b8000 	.word	0x431b8000
 80163c4:	43960000 	.word	0x43960000
 80163c8:	20000808 	.word	0x20000808
 80163cc:	3f7d70a4 	.word	0x3f7d70a4
 80163d0:	4684d000 	.word	0x4684d000
 80163d4:	457a0000 	.word	0x457a0000
 80163d8:	44340000 	.word	0x44340000
 80163dc:	469c4000 	.word	0x469c4000
 80163e0:	446ea607 	.word	0x446ea607
 80163e4:	200002b8 	.word	0x200002b8

080163e8 <mode_WallSensorTuning>:


void mode_WallSensorTuning(unsigned char main_modeR){
 80163e8:	b580      	push	{r7, lr}
 80163ea:	b084      	sub	sp, #16
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	4603      	mov	r3, r0
 80163f0:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 80163f2:	2300      	movs	r3, #0
 80163f4:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 80163f6:	2300      	movs	r3, #0
 80163f8:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 80163fa:	2300      	movs	r3, #0
 80163fc:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 80163fe:	2300      	movs	r3, #0
 8016400:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 8016402:	2001      	movs	r0, #1
 8016404:	f7f1 fa54 	bl	80078b0 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016408:	2003      	movs	r0, #3
 801640a:	f7f1 fa5b 	bl	80078c4 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 801640e:	2003      	movs	r0, #3
 8016410:	f7f1 fa80 	bl	8007914 <pl_R_DriveMotor_mode>
	reset_gyro();
 8016414:	f7eb f9a8 	bl	8001768 <reset_gyro>
	reset_speed();
 8016418:	f7ea fdfe 	bl	8001018 <reset_speed>
	clear_Ierror();
 801641c:	f7ee f8c8 	bl	80045b0 <clear_Ierror>

	switch (main_modeR) {
 8016420:	79fb      	ldrb	r3, [r7, #7]
 8016422:	2b0f      	cmp	r3, #15
 8016424:	f200 81b0 	bhi.w	8016788 <mode_WallSensorTuning+0x3a0>
 8016428:	a201      	add	r2, pc, #4	; (adr r2, 8016430 <mode_WallSensorTuning+0x48>)
 801642a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801642e:	bf00      	nop
 8016430:	08016471 	.word	0x08016471
 8016434:	08016497 	.word	0x08016497
 8016438:	080164af 	.word	0x080164af
 801643c:	08016525 	.word	0x08016525
 8016440:	0801659b 	.word	0x0801659b
 8016444:	08016611 	.word	0x08016611
 8016448:	08016681 	.word	0x08016681
 801644c:	080166a7 	.word	0x080166a7
 8016450:	080166cd 	.word	0x080166cd
 8016454:	080166f3 	.word	0x080166f3
 8016458:	08016789 	.word	0x08016789
 801645c:	08016789 	.word	0x08016789
 8016460:	08016789 	.word	0x08016789
 8016464:	08016789 	.word	0x08016789
 8016468:	08016789 	.word	0x08016789
 801646c:	08016719 	.word	0x08016719
		case 0://横壁追従制御
			record_mode=16;
 8016470:	4bd2      	ldr	r3, [pc, #840]	; (80167bc <mode_WallSensorTuning+0x3d4>)
 8016472:	2210      	movs	r2, #16
 8016474:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016476:	2301      	movs	r3, #1
 8016478:	723b      	strb	r3, [r7, #8]
			straight_table2(180*8, 0, 0, 500, 5000,mode);
 801647a:	68b8      	ldr	r0, [r7, #8]
 801647c:	ed9f 2ad0 	vldr	s4, [pc, #832]	; 80167c0 <mode_WallSensorTuning+0x3d8>
 8016480:	eddf 1ad0 	vldr	s3, [pc, #832]	; 80167c4 <mode_WallSensorTuning+0x3dc>
 8016484:	ed9f 1ad0 	vldr	s2, [pc, #832]	; 80167c8 <mode_WallSensorTuning+0x3e0>
 8016488:	eddf 0acf 	vldr	s1, [pc, #828]	; 80167c8 <mode_WallSensorTuning+0x3e0>
 801648c:	ed9f 0acf 	vldr	s0, [pc, #828]	; 80167cc <mode_WallSensorTuning+0x3e4>
 8016490:	f7ec fda4 	bl	8002fdc <straight_table2>
		break;
 8016494:	e178      	b.n	8016788 <mode_WallSensorTuning+0x3a0>
		case 1://前壁制御
			for(int ii=0;ii<=20;ii++){
 8016496:	2300      	movs	r3, #0
 8016498:	60fb      	str	r3, [r7, #12]
 801649a:	e004      	b.n	80164a6 <mode_WallSensorTuning+0xbe>
			no_frontwall_straight();
 801649c:	f7ed fda8 	bl	8003ff0 <no_frontwall_straight>
			for(int ii=0;ii<=20;ii++){
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	3301      	adds	r3, #1
 80164a4:	60fb      	str	r3, [r7, #12]
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	2b14      	cmp	r3, #20
 80164aa:	ddf7      	ble.n	801649c <mode_WallSensorTuning+0xb4>
			}
		break;
 80164ac:	e16c      	b.n	8016788 <mode_WallSensorTuning+0x3a0>
		case 2://壁切れ90度
			record_mode = 7;
 80164ae:	4bc3      	ldr	r3, [pc, #780]	; (80167bc <mode_WallSensorTuning+0x3d4>)
 80164b0:	2207      	movs	r2, #7
 80164b2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80164b4:	2300      	movs	r3, #0
 80164b6:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80164b8:	2300      	movs	r3, #0
 80164ba:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 80164bc:	2300      	movs	r3, #0
 80164be:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 80164c0:	2300      	movs	r3, #0
 80164c2:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 135, 0, 300, 300,3000,mode);
 80164c4:	68b8      	ldr	r0, [r7, #8]
 80164c6:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 80167d0 <mode_WallSensorTuning+0x3e8>
 80164ca:	eddf 1ac2 	vldr	s3, [pc, #776]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 80164ce:	ed9f 1ac1 	vldr	s2, [pc, #772]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 80164d2:	eddf 0abd 	vldr	s1, [pc, #756]	; 80167c8 <mode_WallSensorTuning+0x3e0>
 80164d6:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 80167d8 <mode_WallSensorTuning+0x3f0>
 80164da:	f7ec fd7f 	bl	8002fdc <straight_table2>
			mode.WallCutMode=1;
 80164de:	2301      	movs	r3, #1
 80164e0:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 80164e2:	2300      	movs	r3, #0
 80164e4:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 80164e6:	68b8      	ldr	r0, [r7, #8]
 80164e8:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 80167d0 <mode_WallSensorTuning+0x3e8>
 80164ec:	eddf 1ab9 	vldr	s3, [pc, #740]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 80164f0:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 80164f4:	eddf 0ab7 	vldr	s1, [pc, #732]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 80164f8:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 80167dc <mode_WallSensorTuning+0x3f4>
 80164fc:	f7ec fd6e 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016500:	2300      	movs	r3, #0
 8016502:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016504:	2300      	movs	r3, #0
 8016506:	72fb      	strb	r3, [r7, #11]
			straight_table2(45 + 22.5, 300, 0, 300,3000,mode);
 8016508:	68b8      	ldr	r0, [r7, #8]
 801650a:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 80167d0 <mode_WallSensorTuning+0x3e8>
 801650e:	eddf 1ab1 	vldr	s3, [pc, #708]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 8016512:	ed9f 1aad 	vldr	s2, [pc, #692]	; 80167c8 <mode_WallSensorTuning+0x3e0>
 8016516:	eddf 0aaf 	vldr	s1, [pc, #700]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 801651a:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 80167e0 <mode_WallSensorTuning+0x3f8>
 801651e:	f7ec fd5d 	bl	8002fdc <straight_table2>
		break;
 8016522:	e131      	b.n	8016788 <mode_WallSensorTuning+0x3a0>
		case 3://壁切れ45度//90°大回り
			record_mode = 8;
 8016524:	4ba5      	ldr	r3, [pc, #660]	; (80167bc <mode_WallSensorTuning+0x3d4>)
 8016526:	2208      	movs	r2, #8
 8016528:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 801652a:	2300      	movs	r3, #0
 801652c:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 801652e:	2300      	movs	r3, #0
 8016530:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016532:	2300      	movs	r3, #0
 8016534:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016536:	2300      	movs	r3, #0
 8016538:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 300, 300,3000,mode);
 801653a:	68b8      	ldr	r0, [r7, #8]
 801653c:	ed9f 2aa4 	vldr	s4, [pc, #656]	; 80167d0 <mode_WallSensorTuning+0x3e8>
 8016540:	eddf 1aa4 	vldr	s3, [pc, #656]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 8016544:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 8016548:	eddf 0a9f 	vldr	s1, [pc, #636]	; 80167c8 <mode_WallSensorTuning+0x3e0>
 801654c:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 80167e4 <mode_WallSensorTuning+0x3fc>
 8016550:	f7ec fd44 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 8016554:	2302      	movs	r3, #2
 8016556:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016558:	2300      	movs	r3, #0
 801655a:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 801655c:	68b8      	ldr	r0, [r7, #8]
 801655e:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 80167d0 <mode_WallSensorTuning+0x3e8>
 8016562:	eddf 1a9c 	vldr	s3, [pc, #624]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 8016566:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 801656a:	eddf 0a9a 	vldr	s1, [pc, #616]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 801656e:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 80167dc <mode_WallSensorTuning+0x3f4>
 8016572:	f7ec fd33 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016576:	2300      	movs	r3, #0
 8016578:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 801657a:	2300      	movs	r3, #0
 801657c:	72fb      	strb	r3, [r7, #11]
			straight_table2(45+22.5, 300, 0, 300,3000,mode);
 801657e:	68b8      	ldr	r0, [r7, #8]
 8016580:	ed9f 2a93 	vldr	s4, [pc, #588]	; 80167d0 <mode_WallSensorTuning+0x3e8>
 8016584:	eddf 1a93 	vldr	s3, [pc, #588]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 8016588:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 80167c8 <mode_WallSensorTuning+0x3e0>
 801658c:	eddf 0a91 	vldr	s1, [pc, #580]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 8016590:	ed9f 0a93 	vldr	s0, [pc, #588]	; 80167e0 <mode_WallSensorTuning+0x3f8>
 8016594:	f7ec fd22 	bl	8002fdc <straight_table2>
		break;
 8016598:	e0f6      	b.n	8016788 <mode_WallSensorTuning+0x3a0>
		case 4://壁切れ45度斜め(考え中)
			record_mode = 8;
 801659a:	4b88      	ldr	r3, [pc, #544]	; (80167bc <mode_WallSensorTuning+0x3d4>)
 801659c:	2208      	movs	r2, #8
 801659e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 80165a0:	2300      	movs	r3, #0
 80165a2:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80165a4:	2300      	movs	r3, #0
 80165a6:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 80165a8:	2300      	movs	r3, #0
 80165aa:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 80165ac:	2300      	movs	r3, #0
 80165ae:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT + 90*sqrt(2), 0, 300, 300,3000,mode);
 80165b0:	68b8      	ldr	r0, [r7, #8]
 80165b2:	ed9f 2a87 	vldr	s4, [pc, #540]	; 80167d0 <mode_WallSensorTuning+0x3e8>
 80165b6:	eddf 1a87 	vldr	s3, [pc, #540]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 80165ba:	ed9f 1a86 	vldr	s2, [pc, #536]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 80165be:	eddf 0a82 	vldr	s1, [pc, #520]	; 80167c8 <mode_WallSensorTuning+0x3e0>
 80165c2:	ed9f 0a89 	vldr	s0, [pc, #548]	; 80167e8 <mode_WallSensorTuning+0x400>
 80165c6:	f7ec fd09 	bl	8002fdc <straight_table2>
			mode.WallCutMode=3;
 80165ca:	2303      	movs	r3, #3
 80165cc:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 80165ce:	2300      	movs	r3, #0
 80165d0:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 80165d2:	68b8      	ldr	r0, [r7, #8]
 80165d4:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 80167d0 <mode_WallSensorTuning+0x3e8>
 80165d8:	eddf 1a7e 	vldr	s3, [pc, #504]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 80165dc:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 80165e0:	eddf 0a7c 	vldr	s1, [pc, #496]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 80165e4:	ed9f 0a81 	vldr	s0, [pc, #516]	; 80167ec <mode_WallSensorTuning+0x404>
 80165e8:	f7ec fcf8 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 80165ec:	2300      	movs	r3, #0
 80165ee:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80165f0:	2300      	movs	r3, #0
 80165f2:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 80165f4:	68b8      	ldr	r0, [r7, #8]
 80165f6:	ed9f 2a76 	vldr	s4, [pc, #472]	; 80167d0 <mode_WallSensorTuning+0x3e8>
 80165fa:	eddf 1a76 	vldr	s3, [pc, #472]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 80165fe:	ed9f 1a72 	vldr	s2, [pc, #456]	; 80167c8 <mode_WallSensorTuning+0x3e0>
 8016602:	eddf 0a74 	vldr	s1, [pc, #464]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 8016606:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 80167f0 <mode_WallSensorTuning+0x408>
 801660a:	f7ec fce7 	bl	8002fdc <straight_table2>
		break;
 801660e:	e0bb      	b.n	8016788 <mode_WallSensorTuning+0x3a0>
		case 5://壁切れ45度斜め(考え中)
			mode.WallControlMode=0;//3でもいいかも
 8016610:	2300      	movs	r3, #0
 8016612:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016614:	2300      	movs	r3, #0
 8016616:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016618:	2300      	movs	r3, #0
 801661a:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 801661c:	2300      	movs	r3, #0
 801661e:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT+90*sqrt(2), 0, 300, 300,3000,mode);
 8016620:	68b8      	ldr	r0, [r7, #8]
 8016622:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 80167d0 <mode_WallSensorTuning+0x3e8>
 8016626:	eddf 1a6b 	vldr	s3, [pc, #428]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 801662a:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 801662e:	eddf 0a66 	vldr	s1, [pc, #408]	; 80167c8 <mode_WallSensorTuning+0x3e0>
 8016632:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80167e8 <mode_WallSensorTuning+0x400>
 8016636:	f7ec fcd1 	bl	8002fdc <straight_table2>
			mode.WallCutMode=4;
 801663a:	2304      	movs	r3, #4
 801663c:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 801663e:	2300      	movs	r3, #0
 8016640:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 8016642:	68b8      	ldr	r0, [r7, #8]
 8016644:	ed9f 2a62 	vldr	s4, [pc, #392]	; 80167d0 <mode_WallSensorTuning+0x3e8>
 8016648:	eddf 1a62 	vldr	s3, [pc, #392]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 801664c:	ed9f 1a61 	vldr	s2, [pc, #388]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 8016650:	eddf 0a60 	vldr	s1, [pc, #384]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 8016654:	ed9f 0a65 	vldr	s0, [pc, #404]	; 80167ec <mode_WallSensorTuning+0x404>
 8016658:	f7ec fcc0 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 801665c:	2300      	movs	r3, #0
 801665e:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016660:	2300      	movs	r3, #0
 8016662:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 8016664:	68b8      	ldr	r0, [r7, #8]
 8016666:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 80167d0 <mode_WallSensorTuning+0x3e8>
 801666a:	eddf 1a5a 	vldr	s3, [pc, #360]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 801666e:	ed9f 1a56 	vldr	s2, [pc, #344]	; 80167c8 <mode_WallSensorTuning+0x3e0>
 8016672:	eddf 0a58 	vldr	s1, [pc, #352]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 8016676:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80167f0 <mode_WallSensorTuning+0x408>
 801667a:	f7ec fcaf 	bl	8002fdc <straight_table2>
		break;
 801667e:	e083      	b.n	8016788 <mode_WallSensorTuning+0x3a0>
		case 6://斜め直進(90)
			record_mode=9;
 8016680:	4b4e      	ldr	r3, [pc, #312]	; (80167bc <mode_WallSensorTuning+0x3d4>)
 8016682:	2209      	movs	r2, #9
 8016684:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016686:	2300      	movs	r3, #0
 8016688:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 801668a:	68b8      	ldr	r0, [r7, #8]
 801668c:	ed9f 2a50 	vldr	s4, [pc, #320]	; 80167d0 <mode_WallSensorTuning+0x3e8>
 8016690:	eddf 1a50 	vldr	s3, [pc, #320]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 8016694:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 80167c8 <mode_WallSensorTuning+0x3e0>
 8016698:	eddf 0a4b 	vldr	s1, [pc, #300]	; 80167c8 <mode_WallSensorTuning+0x3e0>
 801669c:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80167f4 <mode_WallSensorTuning+0x40c>
 80166a0:	f7ec fc9c 	bl	8002fdc <straight_table2>
		break;
 80166a4:	e070      	b.n	8016788 <mode_WallSensorTuning+0x3a0>
		case 7://斜め直進(45)
			record_mode=10;
 80166a6:	4b45      	ldr	r3, [pc, #276]	; (80167bc <mode_WallSensorTuning+0x3d4>)
 80166a8:	220a      	movs	r2, #10
 80166aa:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80166ac:	2300      	movs	r3, #0
 80166ae:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 80166b0:	68b8      	ldr	r0, [r7, #8]
 80166b2:	ed9f 2a47 	vldr	s4, [pc, #284]	; 80167d0 <mode_WallSensorTuning+0x3e8>
 80166b6:	eddf 1a47 	vldr	s3, [pc, #284]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 80166ba:	ed9f 1a43 	vldr	s2, [pc, #268]	; 80167c8 <mode_WallSensorTuning+0x3e0>
 80166be:	eddf 0a42 	vldr	s1, [pc, #264]	; 80167c8 <mode_WallSensorTuning+0x3e0>
 80166c2:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80167f4 <mode_WallSensorTuning+0x40c>
 80166c6:	f7ec fc89 	bl	8002fdc <straight_table2>

		break;
 80166ca:	e05d      	b.n	8016788 <mode_WallSensorTuning+0x3a0>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 80166cc:	4b3b      	ldr	r3, [pc, #236]	; (80167bc <mode_WallSensorTuning+0x3d4>)
 80166ce:	2207      	movs	r2, #7
 80166d0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80166d2:	2303      	movs	r3, #3
 80166d4:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 80166d6:	68b8      	ldr	r0, [r7, #8]
 80166d8:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 80167d0 <mode_WallSensorTuning+0x3e8>
 80166dc:	eddf 1a3d 	vldr	s3, [pc, #244]	; 80167d4 <mode_WallSensorTuning+0x3ec>
 80166e0:	ed9f 1a39 	vldr	s2, [pc, #228]	; 80167c8 <mode_WallSensorTuning+0x3e0>
 80166e4:	eddf 0a38 	vldr	s1, [pc, #224]	; 80167c8 <mode_WallSensorTuning+0x3e0>
 80166e8:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80167f4 <mode_WallSensorTuning+0x40c>
 80166ec:	f7ec fc76 	bl	8002fdc <straight_table2>
		break;
 80166f0:	e04a      	b.n	8016788 <mode_WallSensorTuning+0x3a0>
		case 9:
			record_mode=8;
 80166f2:	4b32      	ldr	r3, [pc, #200]	; (80167bc <mode_WallSensorTuning+0x3d4>)
 80166f4:	2208      	movs	r2, #8
 80166f6:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80166f8:	2303      	movs	r3, #3
 80166fa:	723b      	strb	r3, [r7, #8]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 700, 10000,mode);
 80166fc:	68b8      	ldr	r0, [r7, #8]
 80166fe:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 80167f8 <mode_WallSensorTuning+0x410>
 8016702:	eddf 1a3e 	vldr	s3, [pc, #248]	; 80167fc <mode_WallSensorTuning+0x414>
 8016706:	ed9f 1a30 	vldr	s2, [pc, #192]	; 80167c8 <mode_WallSensorTuning+0x3e0>
 801670a:	eddf 0a2f 	vldr	s1, [pc, #188]	; 80167c8 <mode_WallSensorTuning+0x3e0>
 801670e:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8016800 <mode_WallSensorTuning+0x418>
 8016712:	f7ec fc63 	bl	8002fdc <straight_table2>
		break;
 8016716:	e037      	b.n	8016788 <mode_WallSensorTuning+0x3a0>
		case 10:
		break;
		case 11:
		break;
		case 15:
			mode.WallControlMode=5;
 8016718:	2305      	movs	r3, #5
 801671a:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 801671c:	2300      	movs	r3, #0
 801671e:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016720:	2300      	movs	r3, #0
 8016722:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016724:	2300      	movs	r3, #0
 8016726:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 180, 0, 500, 500,1500,mode);
 8016728:	68b8      	ldr	r0, [r7, #8]
 801672a:	ed9f 2a36 	vldr	s4, [pc, #216]	; 8016804 <mode_WallSensorTuning+0x41c>
 801672e:	eddf 1a25 	vldr	s3, [pc, #148]	; 80167c4 <mode_WallSensorTuning+0x3dc>
 8016732:	ed9f 1a24 	vldr	s2, [pc, #144]	; 80167c4 <mode_WallSensorTuning+0x3dc>
 8016736:	eddf 0a24 	vldr	s1, [pc, #144]	; 80167c8 <mode_WallSensorTuning+0x3e0>
 801673a:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8016808 <mode_WallSensorTuning+0x420>
 801673e:	f7ec fc4d 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 8016742:	2302      	movs	r3, #2
 8016744:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016746:	2300      	movs	r3, #0
 8016748:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 801674a:	68b8      	ldr	r0, [r7, #8]
 801674c:	ed9f 2a2d 	vldr	s4, [pc, #180]	; 8016804 <mode_WallSensorTuning+0x41c>
 8016750:	eddf 1a1c 	vldr	s3, [pc, #112]	; 80167c4 <mode_WallSensorTuning+0x3dc>
 8016754:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 80167c4 <mode_WallSensorTuning+0x3dc>
 8016758:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80167c4 <mode_WallSensorTuning+0x3dc>
 801675c:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 801680c <mode_WallSensorTuning+0x424>
 8016760:	f7ec fc3c 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016764:	2300      	movs	r3, #0
 8016766:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016768:	2300      	movs	r3, #0
 801676a:	72fb      	strb	r3, [r7, #11]
			straight_table2(90+45, 500, 0, 500,1500,mode);
 801676c:	68b8      	ldr	r0, [r7, #8]
 801676e:	ed9f 2a25 	vldr	s4, [pc, #148]	; 8016804 <mode_WallSensorTuning+0x41c>
 8016772:	eddf 1a14 	vldr	s3, [pc, #80]	; 80167c4 <mode_WallSensorTuning+0x3dc>
 8016776:	ed9f 1a14 	vldr	s2, [pc, #80]	; 80167c8 <mode_WallSensorTuning+0x3e0>
 801677a:	eddf 0a12 	vldr	s1, [pc, #72]	; 80167c4 <mode_WallSensorTuning+0x3dc>
 801677e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8016810 <mode_WallSensorTuning+0x428>
 8016782:	f7ec fc2b 	bl	8002fdc <straight_table2>
		break;
 8016786:	bf00      	nop
	}
	record_mode=0;
 8016788:	4b0c      	ldr	r3, [pc, #48]	; (80167bc <mode_WallSensorTuning+0x3d4>)
 801678a:	2200      	movs	r2, #0
 801678c:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 801678e:	2003      	movs	r0, #3
 8016790:	f7f1 f8c0 	bl	8007914 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016794:	2003      	movs	r0, #3
 8016796:	f7f1 f895 	bl	80078c4 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 801679a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801679e:	f7f1 fbb7 	bl	8007f10 <wait_ms_NoReset>
	pl_FunMotor_stop();
 80167a2:	f7f1 f919 	bl	80079d8 <pl_FunMotor_stop>
	record_mode=0;
 80167a6:	4b05      	ldr	r3, [pc, #20]	; (80167bc <mode_WallSensorTuning+0x3d4>)
 80167a8:	2200      	movs	r2, #0
 80167aa:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 80167ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80167b0:	f7f1 fbae 	bl	8007f10 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 80167b4:	2000      	movs	r0, #0
 80167b6:	f7f1 f87b 	bl	80078b0 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80167ba:	e02e      	b.n	801681a <mode_WallSensorTuning+0x432>
 80167bc:	2000edc0 	.word	0x2000edc0
 80167c0:	459c4000 	.word	0x459c4000
 80167c4:	43fa0000 	.word	0x43fa0000
 80167c8:	00000000 	.word	0x00000000
 80167cc:	44b40000 	.word	0x44b40000
 80167d0:	453b8000 	.word	0x453b8000
 80167d4:	43960000 	.word	0x43960000
 80167d8:	431b8000 	.word	0x431b8000
 80167dc:	41b40000 	.word	0x41b40000
 80167e0:	42870000 	.word	0x42870000
 80167e4:	42cd0000 	.word	0x42cd0000
 80167e8:	4329c77b 	.word	0x4329c77b
 80167ec:	41fe8ef6 	.word	0x41fe8ef6
 80167f0:	42beeb39 	.word	0x42beeb39
 80167f4:	43beeb39 	.word	0x43beeb39
 80167f8:	461c4000 	.word	0x461c4000
 80167fc:	442f0000 	.word	0x442f0000
 8016800:	4484977b 	.word	0x4484977b
 8016804:	44bb8000 	.word	0x44bb8000
 8016808:	43488000 	.word	0x43488000
 801680c:	42340000 	.word	0x42340000
 8016810:	43070000 	.word	0x43070000
		HAL_Delay(1);
 8016814:	2001      	movs	r0, #1
 8016816:	f002 fa81 	bl	8018d1c <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801681a:	4b0e      	ldr	r3, [pc, #56]	; (8016854 <mode_WallSensorTuning+0x46c>)
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016822:	ddf7      	ble.n	8016814 <mode_WallSensorTuning+0x42c>
 8016824:	4b0b      	ldr	r3, [pc, #44]	; (8016854 <mode_WallSensorTuning+0x46c>)
 8016826:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801682a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801682e:	ddf1      	ble.n	8016814 <mode_WallSensorTuning+0x42c>
 8016830:	4b08      	ldr	r3, [pc, #32]	; (8016854 <mode_WallSensorTuning+0x46c>)
 8016832:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016836:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801683a:	ddeb      	ble.n	8016814 <mode_WallSensorTuning+0x42c>
	}
	pl_r_blue_LED(ON);
 801683c:	2001      	movs	r0, #1
 801683e:	f7f0 fb93 	bl	8006f68 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8016842:	2001      	movs	r0, #1
 8016844:	f7f0 fba2 	bl	8006f8c <pl_l_blue_LED>
	record_print();
 8016848:	f000 faf6 	bl	8016e38 <record_print>



}
 801684c:	bf00      	nop
 801684e:	3710      	adds	r7, #16
 8016850:	46bd      	mov	sp, r7
 8016852:	bd80      	pop	{r7, pc}
 8016854:	200002b8 	.word	0x200002b8

08016858 <mode_WallSensorTuning_fast>:





void mode_WallSensorTuning_fast(unsigned char main_modeR){
 8016858:	b580      	push	{r7, lr}
 801685a:	b084      	sub	sp, #16
 801685c:	af00      	add	r7, sp, #0
 801685e:	4603      	mov	r3, r0
 8016860:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 8016862:	2300      	movs	r3, #0
 8016864:	733b      	strb	r3, [r7, #12]
	mode.WallControlStatus=0;
 8016866:	2300      	movs	r3, #0
 8016868:	737b      	strb	r3, [r7, #13]
	mode.WallCutMode=0;
 801686a:	2300      	movs	r3, #0
 801686c:	73fb      	strb	r3, [r7, #15]
	mode.calMazeMode=0;
 801686e:	2300      	movs	r3, #0
 8016870:	73bb      	strb	r3, [r7, #14]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 8016872:	2001      	movs	r0, #1
 8016874:	f7f1 f81c 	bl	80078b0 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016878:	2003      	movs	r0, #3
 801687a:	f7f1 f823 	bl	80078c4 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 801687e:	2003      	movs	r0, #3
 8016880:	f7f1 f848 	bl	8007914 <pl_R_DriveMotor_mode>
	pl_FunMotor_duty(0.99);
 8016884:	ed9f 0ae3 	vldr	s0, [pc, #908]	; 8016c14 <mode_WallSensorTuning_fast+0x3bc>
 8016888:	f7f1 f8b0 	bl	80079ec <pl_FunMotor_duty>
	pl_FunMotor_start();
 801688c:	f7f1 f89a 	bl	80079c4 <pl_FunMotor_start>
	HAL_Delay(600);
 8016890:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016894:	f002 fa42 	bl	8018d1c <HAL_Delay>
	reset_gyro();
 8016898:	f7ea ff66 	bl	8001768 <reset_gyro>
	reset_speed();
 801689c:	f7ea fbbc 	bl	8001018 <reset_speed>
	clear_Ierror();
 80168a0:	f7ed fe86 	bl	80045b0 <clear_Ierror>
	angle=0;
 80168a4:	4bdc      	ldr	r3, [pc, #880]	; (8016c18 <mode_WallSensorTuning_fast+0x3c0>)
 80168a6:	f04f 0200 	mov.w	r2, #0
 80168aa:	601a      	str	r2, [r3, #0]

	switch (main_modeR) {
 80168ac:	79fb      	ldrb	r3, [r7, #7]
 80168ae:	2b0f      	cmp	r3, #15
 80168b0:	f200 821b 	bhi.w	8016cea <mode_WallSensorTuning_fast+0x492>
 80168b4:	a201      	add	r2, pc, #4	; (adr r2, 80168bc <mode_WallSensorTuning_fast+0x64>)
 80168b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168ba:	bf00      	nop
 80168bc:	080168fd 	.word	0x080168fd
 80168c0:	0801692f 	.word	0x0801692f
 80168c4:	080169a5 	.word	0x080169a5
 80168c8:	08016a1b 	.word	0x08016a1b
 80168cc:	08016a91 	.word	0x08016a91
 80168d0:	08016b07 	.word	0x08016b07
 80168d4:	08016b7d 	.word	0x08016b7d
 80168d8:	08016ba3 	.word	0x08016ba3
 80168dc:	08016bc9 	.word	0x08016bc9
 80168e0:	08016bef 	.word	0x08016bef
 80168e4:	08016c79 	.word	0x08016c79
 80168e8:	08016c9f 	.word	0x08016c9f
 80168ec:	08016cc5 	.word	0x08016cc5
 80168f0:	08016ceb 	.word	0x08016ceb
 80168f4:	08016ceb 	.word	0x08016ceb
 80168f8:	08016ceb 	.word	0x08016ceb
		case 0://横壁追従制御
			record_mode=15;
 80168fc:	4bc7      	ldr	r3, [pc, #796]	; (8016c1c <mode_WallSensorTuning_fast+0x3c4>)
 80168fe:	220f      	movs	r2, #15
 8016900:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016902:	2301      	movs	r3, #1
 8016904:	733b      	strb	r3, [r7, #12]
			highspeed_mode=1;
 8016906:	4bc6      	ldr	r3, [pc, #792]	; (8016c20 <mode_WallSensorTuning_fast+0x3c8>)
 8016908:	2201      	movs	r2, #1
 801690a:	701a      	strb	r2, [r3, #0]
			straight_table2(BACK_TO_CENTER+180*10, 0, 0, 5000, 24000,mode);
 801690c:	68f8      	ldr	r0, [r7, #12]
 801690e:	ed9f 2ac5 	vldr	s4, [pc, #788]	; 8016c24 <mode_WallSensorTuning_fast+0x3cc>
 8016912:	eddf 1ac5 	vldr	s3, [pc, #788]	; 8016c28 <mode_WallSensorTuning_fast+0x3d0>
 8016916:	ed9f 1ac5 	vldr	s2, [pc, #788]	; 8016c2c <mode_WallSensorTuning_fast+0x3d4>
 801691a:	eddf 0ac4 	vldr	s1, [pc, #784]	; 8016c2c <mode_WallSensorTuning_fast+0x3d4>
 801691e:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 8016c30 <mode_WallSensorTuning_fast+0x3d8>
 8016922:	f7ec fb5b 	bl	8002fdc <straight_table2>
			highspeed_mode=0;
 8016926:	4bbe      	ldr	r3, [pc, #760]	; (8016c20 <mode_WallSensorTuning_fast+0x3c8>)
 8016928:	2200      	movs	r2, #0
 801692a:	701a      	strb	r2, [r3, #0]
		break;
 801692c:	e1dd      	b.n	8016cea <mode_WallSensorTuning_fast+0x492>
		case 1://なし
			record_mode=8;
 801692e:	4bbb      	ldr	r3, [pc, #748]	; (8016c1c <mode_WallSensorTuning_fast+0x3c4>)
 8016930:	2208      	movs	r2, #8
 8016932:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016934:	2301      	movs	r3, #1
 8016936:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016938:	2300      	movs	r3, #0
 801693a:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 801693c:	2300      	movs	r3, #0
 801693e:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016940:	2300      	movs	r3, #0
 8016942:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1000, 1000,10000,mode);
 8016944:	68f8      	ldr	r0, [r7, #12]
 8016946:	ed9f 2abb 	vldr	s4, [pc, #748]	; 8016c34 <mode_WallSensorTuning_fast+0x3dc>
 801694a:	eddf 1abb 	vldr	s3, [pc, #748]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 801694e:	ed9f 1aba 	vldr	s2, [pc, #744]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 8016952:	eddf 0ab6 	vldr	s1, [pc, #728]	; 8016c2c <mode_WallSensorTuning_fast+0x3d4>
 8016956:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8016c3c <mode_WallSensorTuning_fast+0x3e4>
 801695a:	f7ec fb3f 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 801695e:	2302      	movs	r3, #2
 8016960:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016962:	2300      	movs	r3, #0
 8016964:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1000, 1000, 1000,10000,mode);
 8016966:	68f8      	ldr	r0, [r7, #12]
 8016968:	ed9f 2ab2 	vldr	s4, [pc, #712]	; 8016c34 <mode_WallSensorTuning_fast+0x3dc>
 801696c:	eddf 1ab2 	vldr	s3, [pc, #712]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 8016970:	ed9f 1ab1 	vldr	s2, [pc, #708]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 8016974:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 8016978:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8016c40 <mode_WallSensorTuning_fast+0x3e8>
 801697c:	f7ec fb2e 	bl	8002fdc <straight_table2>
			mode.WallControlMode=1;
 8016980:	2301      	movs	r3, #1
 8016982:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8016984:	2300      	movs	r3, #0
 8016986:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1000, 0, 1000,10000,mode);
 8016988:	68f8      	ldr	r0, [r7, #12]
 801698a:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 8016c34 <mode_WallSensorTuning_fast+0x3dc>
 801698e:	eddf 1aaa 	vldr	s3, [pc, #680]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 8016992:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 8016c2c <mode_WallSensorTuning_fast+0x3d4>
 8016996:	eddf 0aa8 	vldr	s1, [pc, #672]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 801699a:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 8016c44 <mode_WallSensorTuning_fast+0x3ec>
 801699e:	f7ec fb1d 	bl	8002fdc <straight_table2>
		break;
 80169a2:	e1a2      	b.n	8016cea <mode_WallSensorTuning_fast+0x492>
		case 2://なし
			record_mode=8;
 80169a4:	4b9d      	ldr	r3, [pc, #628]	; (8016c1c <mode_WallSensorTuning_fast+0x3c4>)
 80169a6:	2208      	movs	r2, #8
 80169a8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80169aa:	2301      	movs	r3, #1
 80169ac:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 80169ae:	2300      	movs	r3, #0
 80169b0:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 80169b2:	2300      	movs	r3, #0
 80169b4:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 80169b6:	2300      	movs	r3, #0
 80169b8:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1200, 1200,10000,mode);
 80169ba:	68f8      	ldr	r0, [r7, #12]
 80169bc:	ed9f 2a9d 	vldr	s4, [pc, #628]	; 8016c34 <mode_WallSensorTuning_fast+0x3dc>
 80169c0:	eddf 1aa1 	vldr	s3, [pc, #644]	; 8016c48 <mode_WallSensorTuning_fast+0x3f0>
 80169c4:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 8016c48 <mode_WallSensorTuning_fast+0x3f0>
 80169c8:	eddf 0a98 	vldr	s1, [pc, #608]	; 8016c2c <mode_WallSensorTuning_fast+0x3d4>
 80169cc:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8016c3c <mode_WallSensorTuning_fast+0x3e4>
 80169d0:	f7ec fb04 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 80169d4:	2302      	movs	r3, #2
 80169d6:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 80169d8:	2300      	movs	r3, #0
 80169da:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1200, 1200, 1200,10000,mode);
 80169dc:	68f8      	ldr	r0, [r7, #12]
 80169de:	ed9f 2a95 	vldr	s4, [pc, #596]	; 8016c34 <mode_WallSensorTuning_fast+0x3dc>
 80169e2:	eddf 1a99 	vldr	s3, [pc, #612]	; 8016c48 <mode_WallSensorTuning_fast+0x3f0>
 80169e6:	ed9f 1a98 	vldr	s2, [pc, #608]	; 8016c48 <mode_WallSensorTuning_fast+0x3f0>
 80169ea:	eddf 0a97 	vldr	s1, [pc, #604]	; 8016c48 <mode_WallSensorTuning_fast+0x3f0>
 80169ee:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8016c40 <mode_WallSensorTuning_fast+0x3e8>
 80169f2:	f7ec faf3 	bl	8002fdc <straight_table2>
			mode.WallControlMode=1;
 80169f6:	2301      	movs	r3, #1
 80169f8:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80169fa:	2300      	movs	r3, #0
 80169fc:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1200, 0, 1200,10000,mode);
 80169fe:	68f8      	ldr	r0, [r7, #12]
 8016a00:	ed9f 2a8c 	vldr	s4, [pc, #560]	; 8016c34 <mode_WallSensorTuning_fast+0x3dc>
 8016a04:	eddf 1a90 	vldr	s3, [pc, #576]	; 8016c48 <mode_WallSensorTuning_fast+0x3f0>
 8016a08:	ed9f 1a88 	vldr	s2, [pc, #544]	; 8016c2c <mode_WallSensorTuning_fast+0x3d4>
 8016a0c:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8016c48 <mode_WallSensorTuning_fast+0x3f0>
 8016a10:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8016c44 <mode_WallSensorTuning_fast+0x3ec>
 8016a14:	f7ec fae2 	bl	8002fdc <straight_table2>
		break;
 8016a18:	e167      	b.n	8016cea <mode_WallSensorTuning_fast+0x492>
		case 3://壁切れ45度//90°大回り
			record_mode=8;
 8016a1a:	4b80      	ldr	r3, [pc, #512]	; (8016c1c <mode_WallSensorTuning_fast+0x3c4>)
 8016a1c:	2208      	movs	r2, #8
 8016a1e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016a20:	2301      	movs	r3, #1
 8016a22:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016a24:	2300      	movs	r3, #0
 8016a26:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8016a28:	2300      	movs	r3, #0
 8016a2a:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1500, 1500,13000,mode);
 8016a30:	68f8      	ldr	r0, [r7, #12]
 8016a32:	ed9f 2a86 	vldr	s4, [pc, #536]	; 8016c4c <mode_WallSensorTuning_fast+0x3f4>
 8016a36:	eddf 1a86 	vldr	s3, [pc, #536]	; 8016c50 <mode_WallSensorTuning_fast+0x3f8>
 8016a3a:	ed9f 1a85 	vldr	s2, [pc, #532]	; 8016c50 <mode_WallSensorTuning_fast+0x3f8>
 8016a3e:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8016c2c <mode_WallSensorTuning_fast+0x3d4>
 8016a42:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8016c3c <mode_WallSensorTuning_fast+0x3e4>
 8016a46:	f7ec fac9 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 8016a4a:	2302      	movs	r3, #2
 8016a4c:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1500, 1500, 1500,13000,mode);
 8016a52:	68f8      	ldr	r0, [r7, #12]
 8016a54:	ed9f 2a7d 	vldr	s4, [pc, #500]	; 8016c4c <mode_WallSensorTuning_fast+0x3f4>
 8016a58:	eddf 1a7d 	vldr	s3, [pc, #500]	; 8016c50 <mode_WallSensorTuning_fast+0x3f8>
 8016a5c:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 8016c50 <mode_WallSensorTuning_fast+0x3f8>
 8016a60:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8016c50 <mode_WallSensorTuning_fast+0x3f8>
 8016a64:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8016c40 <mode_WallSensorTuning_fast+0x3e8>
 8016a68:	f7ec fab8 	bl	8002fdc <straight_table2>
			mode.WallControlMode=1;
 8016a6c:	2301      	movs	r3, #1
 8016a6e:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8016a70:	2300      	movs	r3, #0
 8016a72:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1500, 0, 1500,13000,mode);
 8016a74:	68f8      	ldr	r0, [r7, #12]
 8016a76:	ed9f 2a75 	vldr	s4, [pc, #468]	; 8016c4c <mode_WallSensorTuning_fast+0x3f4>
 8016a7a:	eddf 1a75 	vldr	s3, [pc, #468]	; 8016c50 <mode_WallSensorTuning_fast+0x3f8>
 8016a7e:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8016c2c <mode_WallSensorTuning_fast+0x3d4>
 8016a82:	eddf 0a73 	vldr	s1, [pc, #460]	; 8016c50 <mode_WallSensorTuning_fast+0x3f8>
 8016a86:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8016c44 <mode_WallSensorTuning_fast+0x3ec>
 8016a8a:	f7ec faa7 	bl	8002fdc <straight_table2>
		break;
 8016a8e:	e12c      	b.n	8016cea <mode_WallSensorTuning_fast+0x492>
		case 4://壁切れ45度斜め(考え中)右
			record_mode=8;
 8016a90:	4b62      	ldr	r3, [pc, #392]	; (8016c1c <mode_WallSensorTuning_fast+0x3c4>)
 8016a92:	2208      	movs	r2, #8
 8016a94:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8016a96:	2300      	movs	r3, #0
 8016a98:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 90*sqrt(2), 0, 1000, 1000,10000,mode);
 8016aa6:	68f8      	ldr	r0, [r7, #12]
 8016aa8:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8016c34 <mode_WallSensorTuning_fast+0x3dc>
 8016aac:	eddf 1a62 	vldr	s3, [pc, #392]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 8016ab0:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 8016ab4:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8016c2c <mode_WallSensorTuning_fast+0x3d4>
 8016ab8:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8016c54 <mode_WallSensorTuning_fast+0x3fc>
 8016abc:	f7ec fa8e 	bl	8002fdc <straight_table2>
			mode.WallCutMode=3;
 8016ac0:	2303      	movs	r3, #3
 8016ac2:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016ac4:	2300      	movs	r3, #0
 8016ac6:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 8016ac8:	68f8      	ldr	r0, [r7, #12]
 8016aca:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 8016c34 <mode_WallSensorTuning_fast+0x3dc>
 8016ace:	eddf 1a5a 	vldr	s3, [pc, #360]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 8016ad2:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 8016ad6:	eddf 0a58 	vldr	s1, [pc, #352]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 8016ada:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8016c58 <mode_WallSensorTuning_fast+0x400>
 8016ade:	f7ec fa7d 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 8016aea:	68f8      	ldr	r0, [r7, #12]
 8016aec:	ed9f 2a51 	vldr	s4, [pc, #324]	; 8016c34 <mode_WallSensorTuning_fast+0x3dc>
 8016af0:	eddf 1a51 	vldr	s3, [pc, #324]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 8016af4:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8016c2c <mode_WallSensorTuning_fast+0x3d4>
 8016af8:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 8016afc:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8016c5c <mode_WallSensorTuning_fast+0x404>
 8016b00:	f7ec fa6c 	bl	8002fdc <straight_table2>
		break;
 8016b04:	e0f1      	b.n	8016cea <mode_WallSensorTuning_fast+0x492>
		case 5://壁切れ45度斜め(考え中)左
			record_mode=8;
 8016b06:	4b45      	ldr	r3, [pc, #276]	; (8016c1c <mode_WallSensorTuning_fast+0x3c4>)
 8016b08:	2208      	movs	r2, #8
 8016b0a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016b10:	2300      	movs	r3, #0
 8016b12:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8016b14:	2300      	movs	r3, #0
 8016b16:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016b18:	2300      	movs	r3, #0
 8016b1a:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT+90*sqrt(2), 0, 1000, 1000,10000,mode);
 8016b1c:	68f8      	ldr	r0, [r7, #12]
 8016b1e:	ed9f 2a45 	vldr	s4, [pc, #276]	; 8016c34 <mode_WallSensorTuning_fast+0x3dc>
 8016b22:	eddf 1a45 	vldr	s3, [pc, #276]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 8016b26:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 8016b2a:	eddf 0a40 	vldr	s1, [pc, #256]	; 8016c2c <mode_WallSensorTuning_fast+0x3d4>
 8016b2e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8016c54 <mode_WallSensorTuning_fast+0x3fc>
 8016b32:	f7ec fa53 	bl	8002fdc <straight_table2>
			mode.WallCutMode=4;
 8016b36:	2304      	movs	r3, #4
 8016b38:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 8016b3e:	68f8      	ldr	r0, [r7, #12]
 8016b40:	ed9f 2a3c 	vldr	s4, [pc, #240]	; 8016c34 <mode_WallSensorTuning_fast+0x3dc>
 8016b44:	eddf 1a3c 	vldr	s3, [pc, #240]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 8016b48:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 8016b4c:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 8016b50:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8016c58 <mode_WallSensorTuning_fast+0x400>
 8016b54:	f7ec fa42 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016b58:	2300      	movs	r3, #0
 8016b5a:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 8016b60:	68f8      	ldr	r0, [r7, #12]
 8016b62:	ed9f 2a34 	vldr	s4, [pc, #208]	; 8016c34 <mode_WallSensorTuning_fast+0x3dc>
 8016b66:	eddf 1a34 	vldr	s3, [pc, #208]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 8016b6a:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8016c2c <mode_WallSensorTuning_fast+0x3d4>
 8016b6e:	eddf 0a32 	vldr	s1, [pc, #200]	; 8016c38 <mode_WallSensorTuning_fast+0x3e0>
 8016b72:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8016c5c <mode_WallSensorTuning_fast+0x404>
 8016b76:	f7ec fa31 	bl	8002fdc <straight_table2>
		break;
 8016b7a:	e0b6      	b.n	8016cea <mode_WallSensorTuning_fast+0x492>
		case 6://斜め直進(制御なし計測用)
			record_mode=7;
 8016b7c:	4b27      	ldr	r3, [pc, #156]	; (8016c1c <mode_WallSensorTuning_fast+0x3c4>)
 8016b7e:	2207      	movs	r2, #7
 8016b80:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016b82:	2300      	movs	r3, #0
 8016b84:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 8016b86:	68f8      	ldr	r0, [r7, #12]
 8016b88:	ed9f 2a35 	vldr	s4, [pc, #212]	; 8016c60 <mode_WallSensorTuning_fast+0x408>
 8016b8c:	eddf 1a35 	vldr	s3, [pc, #212]	; 8016c64 <mode_WallSensorTuning_fast+0x40c>
 8016b90:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8016c2c <mode_WallSensorTuning_fast+0x3d4>
 8016b94:	eddf 0a25 	vldr	s1, [pc, #148]	; 8016c2c <mode_WallSensorTuning_fast+0x3d4>
 8016b98:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8016c68 <mode_WallSensorTuning_fast+0x410>
 8016b9c:	f7ec fa1e 	bl	8002fdc <straight_table2>
		break;
 8016ba0:	e0a3      	b.n	8016cea <mode_WallSensorTuning_fast+0x492>
		case 7://斜め直進(制御なし計測用)
			record_mode=9;
 8016ba2:	4b1e      	ldr	r3, [pc, #120]	; (8016c1c <mode_WallSensorTuning_fast+0x3c4>)
 8016ba4:	2209      	movs	r2, #9
 8016ba6:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016ba8:	2300      	movs	r3, #0
 8016baa:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 8016bac:	68f8      	ldr	r0, [r7, #12]
 8016bae:	ed9f 2a2c 	vldr	s4, [pc, #176]	; 8016c60 <mode_WallSensorTuning_fast+0x408>
 8016bb2:	eddf 1a2c 	vldr	s3, [pc, #176]	; 8016c64 <mode_WallSensorTuning_fast+0x40c>
 8016bb6:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8016c2c <mode_WallSensorTuning_fast+0x3d4>
 8016bba:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8016c2c <mode_WallSensorTuning_fast+0x3d4>
 8016bbe:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8016c68 <mode_WallSensorTuning_fast+0x410>
 8016bc2:	f7ec fa0b 	bl	8002fdc <straight_table2>

		break;
 8016bc6:	e090      	b.n	8016cea <mode_WallSensorTuning_fast+0x492>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8016bc8:	4b14      	ldr	r3, [pc, #80]	; (8016c1c <mode_WallSensorTuning_fast+0x3c4>)
 8016bca:	2207      	movs	r2, #7
 8016bcc:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016bce:	2303      	movs	r3, #3
 8016bd0:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8016bd2:	68f8      	ldr	r0, [r7, #12]
 8016bd4:	ed9f 2a22 	vldr	s4, [pc, #136]	; 8016c60 <mode_WallSensorTuning_fast+0x408>
 8016bd8:	eddf 1a24 	vldr	s3, [pc, #144]	; 8016c6c <mode_WallSensorTuning_fast+0x414>
 8016bdc:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8016c2c <mode_WallSensorTuning_fast+0x3d4>
 8016be0:	eddf 0a12 	vldr	s1, [pc, #72]	; 8016c2c <mode_WallSensorTuning_fast+0x3d4>
 8016be4:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8016c70 <mode_WallSensorTuning_fast+0x418>
 8016be8:	f7ec f9f8 	bl	8002fdc <straight_table2>
		break;
 8016bec:	e07d      	b.n	8016cea <mode_WallSensorTuning_fast+0x492>
		case 9:
			record_mode=8;
 8016bee:	4b0b      	ldr	r3, [pc, #44]	; (8016c1c <mode_WallSensorTuning_fast+0x3c4>)
 8016bf0:	2208      	movs	r2, #8
 8016bf2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016bf4:	2303      	movs	r3, #3
 8016bf6:	733b      	strb	r3, [r7, #12]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 3500, 20000,mode);
 8016bf8:	68f8      	ldr	r0, [r7, #12]
 8016bfa:	ed9f 2a19 	vldr	s4, [pc, #100]	; 8016c60 <mode_WallSensorTuning_fast+0x408>
 8016bfe:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8016c6c <mode_WallSensorTuning_fast+0x414>
 8016c02:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8016c2c <mode_WallSensorTuning_fast+0x3d4>
 8016c06:	eddf 0a09 	vldr	s1, [pc, #36]	; 8016c2c <mode_WallSensorTuning_fast+0x3d4>
 8016c0a:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8016c74 <mode_WallSensorTuning_fast+0x41c>
 8016c0e:	f7ec f9e5 	bl	8002fdc <straight_table2>
		break;
 8016c12:	e06a      	b.n	8016cea <mode_WallSensorTuning_fast+0x492>
 8016c14:	3f7d70a4 	.word	0x3f7d70a4
 8016c18:	20000264 	.word	0x20000264
 8016c1c:	2000edc0 	.word	0x2000edc0
 8016c20:	20000808 	.word	0x20000808
 8016c24:	46bb8000 	.word	0x46bb8000
 8016c28:	459c4000 	.word	0x459c4000
 8016c2c:	00000000 	.word	0x00000000
 8016c30:	44e39000 	.word	0x44e39000
 8016c34:	461c4000 	.word	0x461c4000
 8016c38:	447a0000 	.word	0x447a0000
 8016c3c:	42cd0000 	.word	0x42cd0000
 8016c40:	41b40000 	.word	0x41b40000
 8016c44:	42e10000 	.word	0x42e10000
 8016c48:	44960000 	.word	0x44960000
 8016c4c:	464b2000 	.word	0x464b2000
 8016c50:	44bb8000 	.word	0x44bb8000
 8016c54:	4321c77b 	.word	0x4321c77b
 8016c58:	41fe8ef6 	.word	0x41fe8ef6
 8016c5c:	42beeb39 	.word	0x42beeb39
 8016c60:	469c4000 	.word	0x469c4000
 8016c64:	44fa0000 	.word	0x44fa0000
 8016c68:	445ebd17 	.word	0x445ebd17
 8016c6c:	455ac000 	.word	0x455ac000
 8016c70:	443eeb39 	.word	0x443eeb39
 8016c74:	4484977b 	.word	0x4484977b
		case 10:
			record_mode=10;
 8016c78:	4b39      	ldr	r3, [pc, #228]	; (8016d60 <mode_WallSensorTuning_fast+0x508>)
 8016c7a:	220a      	movs	r2, #10
 8016c7c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016c7e:	2303      	movs	r3, #3
 8016c80:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8016c82:	68f8      	ldr	r0, [r7, #12]
 8016c84:	ed9f 2a37 	vldr	s4, [pc, #220]	; 8016d64 <mode_WallSensorTuning_fast+0x50c>
 8016c88:	eddf 1a37 	vldr	s3, [pc, #220]	; 8016d68 <mode_WallSensorTuning_fast+0x510>
 8016c8c:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8016d6c <mode_WallSensorTuning_fast+0x514>
 8016c90:	eddf 0a36 	vldr	s1, [pc, #216]	; 8016d6c <mode_WallSensorTuning_fast+0x514>
 8016c94:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8016d70 <mode_WallSensorTuning_fast+0x518>
 8016c98:	f7ec f9a0 	bl	8002fdc <straight_table2>
		break;
 8016c9c:	e025      	b.n	8016cea <mode_WallSensorTuning_fast+0x492>
		case 11:
			record_mode=11;
 8016c9e:	4b30      	ldr	r3, [pc, #192]	; (8016d60 <mode_WallSensorTuning_fast+0x508>)
 8016ca0:	220b      	movs	r2, #11
 8016ca2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016ca4:	2303      	movs	r3, #3
 8016ca6:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 8016ca8:	68f8      	ldr	r0, [r7, #12]
 8016caa:	ed9f 2a32 	vldr	s4, [pc, #200]	; 8016d74 <mode_WallSensorTuning_fast+0x51c>
 8016cae:	eddf 1a32 	vldr	s3, [pc, #200]	; 8016d78 <mode_WallSensorTuning_fast+0x520>
 8016cb2:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8016d6c <mode_WallSensorTuning_fast+0x514>
 8016cb6:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8016d6c <mode_WallSensorTuning_fast+0x514>
 8016cba:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8016d70 <mode_WallSensorTuning_fast+0x518>
 8016cbe:	f7ec f98d 	bl	8002fdc <straight_table2>
		break;
 8016cc2:	e012      	b.n	8016cea <mode_WallSensorTuning_fast+0x492>
		case 12:
			record_mode=12;
 8016cc4:	4b26      	ldr	r3, [pc, #152]	; (8016d60 <mode_WallSensorTuning_fast+0x508>)
 8016cc6:	220c      	movs	r2, #12
 8016cc8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016cca:	2303      	movs	r3, #3
 8016ccc:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 8016cce:	68f8      	ldr	r0, [r7, #12]
 8016cd0:	ed9f 2a28 	vldr	s4, [pc, #160]	; 8016d74 <mode_WallSensorTuning_fast+0x51c>
 8016cd4:	eddf 1a28 	vldr	s3, [pc, #160]	; 8016d78 <mode_WallSensorTuning_fast+0x520>
 8016cd8:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8016d6c <mode_WallSensorTuning_fast+0x514>
 8016cdc:	eddf 0a23 	vldr	s1, [pc, #140]	; 8016d6c <mode_WallSensorTuning_fast+0x514>
 8016ce0:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8016d70 <mode_WallSensorTuning_fast+0x518>
 8016ce4:	f7ec f97a 	bl	8002fdc <straight_table2>
		break;
 8016ce8:	bf00      	nop
		case 15:
		break;
	}
	record_mode=0;
 8016cea:	4b1d      	ldr	r3, [pc, #116]	; (8016d60 <mode_WallSensorTuning_fast+0x508>)
 8016cec:	2200      	movs	r2, #0
 8016cee:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016cf0:	2003      	movs	r0, #3
 8016cf2:	f7f0 fe0f 	bl	8007914 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016cf6:	2003      	movs	r0, #3
 8016cf8:	f7f0 fde4 	bl	80078c4 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8016cfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016d00:	f7f1 f906 	bl	8007f10 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8016d04:	f7f0 fe68 	bl	80079d8 <pl_FunMotor_stop>
	record_mode=0;
 8016d08:	4b15      	ldr	r3, [pc, #84]	; (8016d60 <mode_WallSensorTuning_fast+0x508>)
 8016d0a:	2200      	movs	r2, #0
 8016d0c:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8016d0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016d12:	f7f1 f8fd 	bl	8007f10 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8016d16:	2000      	movs	r0, #0
 8016d18:	f7f0 fdca 	bl	80078b0 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016d1c:	e002      	b.n	8016d24 <mode_WallSensorTuning_fast+0x4cc>
		HAL_Delay(1);
 8016d1e:	2001      	movs	r0, #1
 8016d20:	f001 fffc 	bl	8018d1c <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016d24:	4b15      	ldr	r3, [pc, #84]	; (8016d7c <mode_WallSensorTuning_fast+0x524>)
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016d2c:	ddf7      	ble.n	8016d1e <mode_WallSensorTuning_fast+0x4c6>
 8016d2e:	4b13      	ldr	r3, [pc, #76]	; (8016d7c <mode_WallSensorTuning_fast+0x524>)
 8016d30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016d34:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016d38:	ddf1      	ble.n	8016d1e <mode_WallSensorTuning_fast+0x4c6>
 8016d3a:	4b10      	ldr	r3, [pc, #64]	; (8016d7c <mode_WallSensorTuning_fast+0x524>)
 8016d3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016d40:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016d44:	ddeb      	ble.n	8016d1e <mode_WallSensorTuning_fast+0x4c6>
	}
	pl_r_blue_LED(ON);
 8016d46:	2001      	movs	r0, #1
 8016d48:	f7f0 f90e 	bl	8006f68 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8016d4c:	2001      	movs	r0, #1
 8016d4e:	f7f0 f91d 	bl	8006f8c <pl_l_blue_LED>
	record_print();
 8016d52:	f000 f871 	bl	8016e38 <record_print>



}
 8016d56:	bf00      	nop
 8016d58:	3710      	adds	r7, #16
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	bd80      	pop	{r7, pc}
 8016d5e:	bf00      	nop
 8016d60:	2000edc0 	.word	0x2000edc0
 8016d64:	469c4000 	.word	0x469c4000
 8016d68:	455ac000 	.word	0x455ac000
 8016d6c:	00000000 	.word	0x00000000
 8016d70:	443eeb39 	.word	0x443eeb39
 8016d74:	466a6000 	.word	0x466a6000
 8016d78:	453b8000 	.word	0x453b8000
 8016d7c:	200002b8 	.word	0x200002b8

08016d80 <record_reset>:
char record_rupe_flag;

//int SEN_record[5][15];
//int SEN_recordD[5][15];

void record_reset(void) {
 8016d80:	b480      	push	{r7}
 8016d82:	af00      	add	r7, sp, #0
	record_mode = 0;
 8016d84:	4b06      	ldr	r3, [pc, #24]	; (8016da0 <record_reset+0x20>)
 8016d86:	2200      	movs	r2, #0
 8016d88:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 8016d8a:	4b06      	ldr	r3, [pc, #24]	; (8016da4 <record_reset+0x24>)
 8016d8c:	2200      	movs	r2, #0
 8016d8e:	601a      	str	r2, [r3, #0]
	record_rupe_flag = 0;
 8016d90:	4b05      	ldr	r3, [pc, #20]	; (8016da8 <record_reset+0x28>)
 8016d92:	2200      	movs	r2, #0
 8016d94:	701a      	strb	r2, [r3, #0]
}
 8016d96:	bf00      	nop
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d9e:	4770      	bx	lr
 8016da0:	2000edc0 	.word	0x2000edc0
 8016da4:	2000edc4 	.word	0x2000edc4
 8016da8:	2000edcc 	.word	0x2000edcc

08016dac <record_data>:

void record_data(float *input_record_data, int numlen) {
 8016dac:	b490      	push	{r4, r7}
 8016dae:	b084      	sub	sp, #16
 8016db0:	af00      	add	r7, sp, #0
 8016db2:	6078      	str	r0, [r7, #4]
 8016db4:	6039      	str	r1, [r7, #0]

	for (int record_count = 0; record_count < numlen; record_count++) {
 8016db6:	2300      	movs	r3, #0
 8016db8:	60fb      	str	r3, [r7, #12]
 8016dba:	e013      	b.n	8016de4 <record_data+0x38>
		record_value[record_count][record_time] =
				input_record_data[record_count];
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	009b      	lsls	r3, r3, #2
 8016dc0:	687a      	ldr	r2, [r7, #4]
 8016dc2:	441a      	add	r2, r3
		record_value[record_count][record_time] =
 8016dc4:	4b18      	ldr	r3, [pc, #96]	; (8016e28 <record_data+0x7c>)
 8016dc6:	681b      	ldr	r3, [r3, #0]
				input_record_data[record_count];
 8016dc8:	6812      	ldr	r2, [r2, #0]
		record_value[record_count][record_time] =
 8016dca:	4818      	ldr	r0, [pc, #96]	; (8016e2c <record_data+0x80>)
 8016dcc:	68f9      	ldr	r1, [r7, #12]
 8016dce:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8016dd2:	fb04 f101 	mul.w	r1, r4, r1
 8016dd6:	440b      	add	r3, r1
 8016dd8:	009b      	lsls	r3, r3, #2
 8016dda:	4403      	add	r3, r0
 8016ddc:	601a      	str	r2, [r3, #0]
	for (int record_count = 0; record_count < numlen; record_count++) {
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	3301      	adds	r3, #1
 8016de2:	60fb      	str	r3, [r7, #12]
 8016de4:	68fa      	ldr	r2, [r7, #12]
 8016de6:	683b      	ldr	r3, [r7, #0]
 8016de8:	429a      	cmp	r2, r3
 8016dea:	dbe7      	blt.n	8016dbc <record_data+0x10>
	}
	if (record_rupe_flag == 1) {
 8016dec:	4b10      	ldr	r3, [pc, #64]	; (8016e30 <record_data+0x84>)
 8016dee:	781b      	ldrb	r3, [r3, #0]
 8016df0:	2b01      	cmp	r3, #1
 8016df2:	d103      	bne.n	8016dfc <record_data+0x50>
		record_end_point = record_time;
 8016df4:	4b0c      	ldr	r3, [pc, #48]	; (8016e28 <record_data+0x7c>)
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	4a0e      	ldr	r2, [pc, #56]	; (8016e34 <record_data+0x88>)
 8016dfa:	6013      	str	r3, [r2, #0]
	}
	record_time++;
 8016dfc:	4b0a      	ldr	r3, [pc, #40]	; (8016e28 <record_data+0x7c>)
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	3301      	adds	r3, #1
 8016e02:	4a09      	ldr	r2, [pc, #36]	; (8016e28 <record_data+0x7c>)
 8016e04:	6013      	str	r3, [r2, #0]
	if (record_time >= max_record_time) {
 8016e06:	4b08      	ldr	r3, [pc, #32]	; (8016e28 <record_data+0x7c>)
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016e0e:	4293      	cmp	r3, r2
 8016e10:	dd05      	ble.n	8016e1e <record_data+0x72>
		record_time = 0;
 8016e12:	4b05      	ldr	r3, [pc, #20]	; (8016e28 <record_data+0x7c>)
 8016e14:	2200      	movs	r2, #0
 8016e16:	601a      	str	r2, [r3, #0]
		record_rupe_flag = 1;
 8016e18:	4b05      	ldr	r3, [pc, #20]	; (8016e30 <record_data+0x84>)
 8016e1a:	2201      	movs	r2, #1
 8016e1c:	701a      	strb	r2, [r3, #0]
	}

}
 8016e1e:	bf00      	nop
 8016e20:	3710      	adds	r7, #16
 8016e22:	46bd      	mov	sp, r7
 8016e24:	bc90      	pop	{r4, r7}
 8016e26:	4770      	bx	lr
 8016e28:	2000edc4 	.word	0x2000edc4
 8016e2c:	20003240 	.word	0x20003240
 8016e30:	2000edcc 	.word	0x2000edcc
 8016e34:	2000edc8 	.word	0x2000edc8

08016e38 <record_print>:

void record_print(void) {
 8016e38:	b580      	push	{r7, lr}
 8016e3a:	b084      	sub	sp, #16
 8016e3c:	af00      	add	r7, sp, #0
	int a, time_index;
	if (record_rupe_flag == 0) {
 8016e3e:	4b3a      	ldr	r3, [pc, #232]	; (8016f28 <record_print+0xf0>)
 8016e40:	781b      	ldrb	r3, [r3, #0]
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d12e      	bne.n	8016ea4 <record_print+0x6c>
		for (a = 0; a <= record_time - 1; a++) {
 8016e46:	2300      	movs	r3, #0
 8016e48:	60fb      	str	r3, [r7, #12]
 8016e4a:	e025      	b.n	8016e98 <record_print+0x60>

			printf("%d", a);
 8016e4c:	68f9      	ldr	r1, [r7, #12]
 8016e4e:	4837      	ldr	r0, [pc, #220]	; (8016f2c <record_print+0xf4>)
 8016e50:	f009 feb6 	bl	8020bc0 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8016e54:	2300      	movs	r3, #0
 8016e56:	607b      	str	r3, [r7, #4]
 8016e58:	e015      	b.n	8016e86 <record_print+0x4e>
					record_count++) {
				printf(",%f", record_value[record_count][a]);
 8016e5a:	4935      	ldr	r1, [pc, #212]	; (8016f30 <record_print+0xf8>)
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8016e62:	fb03 f202 	mul.w	r2, r3, r2
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	4413      	add	r3, r2
 8016e6a:	009b      	lsls	r3, r3, #2
 8016e6c:	440b      	add	r3, r1
 8016e6e:	681b      	ldr	r3, [r3, #0]
 8016e70:	4618      	mov	r0, r3
 8016e72:	f7e9 fb91 	bl	8000598 <__aeabi_f2d>
 8016e76:	4602      	mov	r2, r0
 8016e78:	460b      	mov	r3, r1
 8016e7a:	482e      	ldr	r0, [pc, #184]	; (8016f34 <record_print+0xfc>)
 8016e7c:	f009 fea0 	bl	8020bc0 <iprintf>
					record_count++) {
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	3301      	adds	r3, #1
 8016e84:	607b      	str	r3, [r7, #4]
			for (int record_count = 0; record_count < max_record_num;
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	2b03      	cmp	r3, #3
 8016e8a:	dde6      	ble.n	8016e5a <record_print+0x22>
			}
			printf("\n");
 8016e8c:	200a      	movs	r0, #10
 8016e8e:	f009 feaf 	bl	8020bf0 <putchar>
		for (a = 0; a <= record_time - 1; a++) {
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	3301      	adds	r3, #1
 8016e96:	60fb      	str	r3, [r7, #12]
 8016e98:	4b27      	ldr	r3, [pc, #156]	; (8016f38 <record_print+0x100>)
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	68fa      	ldr	r2, [r7, #12]
 8016e9e:	429a      	cmp	r2, r3
 8016ea0:	dbd4      	blt.n	8016e4c <record_print+0x14>
			}
			printf("\n");
		}
	}

}
 8016ea2:	e03c      	b.n	8016f1e <record_print+0xe6>
		for (a = 0; a <= max_record_time - 1; a++) {
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	60fb      	str	r3, [r7, #12]
 8016ea8:	e034      	b.n	8016f14 <record_print+0xdc>
			time_index = record_end_point + 1 + a;
 8016eaa:	4b24      	ldr	r3, [pc, #144]	; (8016f3c <record_print+0x104>)
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	3301      	adds	r3, #1
 8016eb0:	68fa      	ldr	r2, [r7, #12]
 8016eb2:	4413      	add	r3, r2
 8016eb4:	60bb      	str	r3, [r7, #8]
			if (time_index >= max_record_time) {
 8016eb6:	68bb      	ldr	r3, [r7, #8]
 8016eb8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016ebc:	4293      	cmp	r3, r2
 8016ebe:	dd03      	ble.n	8016ec8 <record_print+0x90>
				time_index -= max_record_time;
 8016ec0:	68bb      	ldr	r3, [r7, #8]
 8016ec2:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8016ec6:	60bb      	str	r3, [r7, #8]
			printf("%d", a);
 8016ec8:	68f9      	ldr	r1, [r7, #12]
 8016eca:	4818      	ldr	r0, [pc, #96]	; (8016f2c <record_print+0xf4>)
 8016ecc:	f009 fe78 	bl	8020bc0 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8016ed0:	2300      	movs	r3, #0
 8016ed2:	603b      	str	r3, [r7, #0]
 8016ed4:	e015      	b.n	8016f02 <record_print+0xca>
				printf(",%f", record_value[record_count][time_index]);
 8016ed6:	4916      	ldr	r1, [pc, #88]	; (8016f30 <record_print+0xf8>)
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8016ede:	fb03 f202 	mul.w	r2, r3, r2
 8016ee2:	68bb      	ldr	r3, [r7, #8]
 8016ee4:	4413      	add	r3, r2
 8016ee6:	009b      	lsls	r3, r3, #2
 8016ee8:	440b      	add	r3, r1
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	4618      	mov	r0, r3
 8016eee:	f7e9 fb53 	bl	8000598 <__aeabi_f2d>
 8016ef2:	4602      	mov	r2, r0
 8016ef4:	460b      	mov	r3, r1
 8016ef6:	480f      	ldr	r0, [pc, #60]	; (8016f34 <record_print+0xfc>)
 8016ef8:	f009 fe62 	bl	8020bc0 <iprintf>
					record_count++) {
 8016efc:	683b      	ldr	r3, [r7, #0]
 8016efe:	3301      	adds	r3, #1
 8016f00:	603b      	str	r3, [r7, #0]
			for (int record_count = 0; record_count < max_record_num;
 8016f02:	683b      	ldr	r3, [r7, #0]
 8016f04:	2b03      	cmp	r3, #3
 8016f06:	dde6      	ble.n	8016ed6 <record_print+0x9e>
			printf("\n");
 8016f08:	200a      	movs	r0, #10
 8016f0a:	f009 fe71 	bl	8020bf0 <putchar>
		for (a = 0; a <= max_record_time - 1; a++) {
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	3301      	adds	r3, #1
 8016f12:	60fb      	str	r3, [r7, #12]
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016f1a:	4293      	cmp	r3, r2
 8016f1c:	ddc5      	ble.n	8016eaa <record_print+0x72>
}
 8016f1e:	bf00      	nop
 8016f20:	3710      	adds	r7, #16
 8016f22:	46bd      	mov	sp, r7
 8016f24:	bd80      	pop	{r7, pc}
 8016f26:	bf00      	nop
 8016f28:	2000edcc 	.word	0x2000edcc
 8016f2c:	080236d0 	.word	0x080236d0
 8016f30:	20003240 	.word	0x20003240
 8016f34:	080236d4 	.word	0x080236d4
 8016f38:	2000edc4 	.word	0x2000edc4
 8016f3c:	2000edc8 	.word	0x2000edc8

08016f40 <interrupt_record>:

void interrupt_record(void) {
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b084      	sub	sp, #16
 8016f44:	af00      	add	r7, sp, #0

	float r_data[4];

	if (record_mode == 1) {
 8016f46:	4baf      	ldr	r3, [pc, #700]	; (8017204 <interrupt_record+0x2c4>)
 8016f48:	781b      	ldrb	r3, [r3, #0]
 8016f4a:	2b01      	cmp	r3, #1
 8016f4c:	d110      	bne.n	8016f70 <interrupt_record+0x30>
			r_data[0] = E_speedR;
 8016f4e:	4bae      	ldr	r3, [pc, #696]	; (8017208 <interrupt_record+0x2c8>)
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	603b      	str	r3, [r7, #0]
			r_data[1] = E_speedL;
 8016f54:	4bad      	ldr	r3, [pc, #692]	; (801720c <interrupt_record+0x2cc>)
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceR;
 8016f5a:	4bad      	ldr	r3, [pc, #692]	; (8017210 <interrupt_record+0x2d0>)
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	60bb      	str	r3, [r7, #8]
			r_data[3] = E_distanceL;
 8016f60:	4bac      	ldr	r3, [pc, #688]	; (8017214 <interrupt_record+0x2d4>)
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016f66:	463b      	mov	r3, r7
 8016f68:	2104      	movs	r1, #4
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	f7ff ff1e 	bl	8016dac <record_data>
		}
	if (record_mode == 2) {
 8016f70:	4ba4      	ldr	r3, [pc, #656]	; (8017204 <interrupt_record+0x2c4>)
 8016f72:	781b      	ldrb	r3, [r3, #0]
 8016f74:	2b02      	cmp	r3, #2
 8016f76:	d11b      	bne.n	8016fb0 <interrupt_record+0x70>
		r_data[0] = turning.velocity;
 8016f78:	4ba7      	ldr	r3, [pc, #668]	; (8017218 <interrupt_record+0x2d8>)
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 8016f7e:	4ba7      	ldr	r3, [pc, #668]	; (801721c <interrupt_record+0x2dc>)
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	607b      	str	r3, [r7, #4]
		r_data[2] = straight.velocity;
 8016f84:	4ba6      	ldr	r3, [pc, #664]	; (8017220 <interrupt_record+0x2e0>)
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	60bb      	str	r3, [r7, #8]
		r_data[3] = (fusion_speedR + fusion_speedL) / 2;
 8016f8a:	4ba6      	ldr	r3, [pc, #664]	; (8017224 <interrupt_record+0x2e4>)
 8016f8c:	ed93 7a00 	vldr	s14, [r3]
 8016f90:	4ba5      	ldr	r3, [pc, #660]	; (8017228 <interrupt_record+0x2e8>)
 8016f92:	edd3 7a00 	vldr	s15, [r3]
 8016f96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016f9a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016f9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016fa2:	edc7 7a03 	vstr	s15, [r7, #12]
				record_data(r_data, 4);
 8016fa6:	463b      	mov	r3, r7
 8016fa8:	2104      	movs	r1, #4
 8016faa:	4618      	mov	r0, r3
 8016fac:	f7ff fefe 	bl	8016dac <record_data>
		}
	if (record_mode == 3) {
 8016fb0:	4b94      	ldr	r3, [pc, #592]	; (8017204 <interrupt_record+0x2c4>)
 8016fb2:	781b      	ldrb	r3, [r3, #0]
 8016fb4:	2b03      	cmp	r3, #3
 8016fb6:	d126      	bne.n	8017006 <interrupt_record+0xc6>
			r_data[0] = straight.velocity;
 8016fb8:	4b99      	ldr	r3, [pc, #612]	; (8017220 <interrupt_record+0x2e0>)
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	603b      	str	r3, [r7, #0]
			r_data[1] = straight.displacement;
 8016fbe:	4b98      	ldr	r3, [pc, #608]	; (8017220 <interrupt_record+0x2e0>)
 8016fc0:	689b      	ldr	r3, [r3, #8]
 8016fc2:	607b      	str	r3, [r7, #4]
			r_data[2] = (fusion_speedR + fusion_speedL) / 2;
 8016fc4:	4b97      	ldr	r3, [pc, #604]	; (8017224 <interrupt_record+0x2e4>)
 8016fc6:	ed93 7a00 	vldr	s14, [r3]
 8016fca:	4b97      	ldr	r3, [pc, #604]	; (8017228 <interrupt_record+0x2e8>)
 8016fcc:	edd3 7a00 	vldr	s15, [r3]
 8016fd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016fd4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016fd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016fdc:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 8016fe0:	4b92      	ldr	r3, [pc, #584]	; (801722c <interrupt_record+0x2ec>)
 8016fe2:	ed93 7a00 	vldr	s14, [r3]
 8016fe6:	4b92      	ldr	r3, [pc, #584]	; (8017230 <interrupt_record+0x2f0>)
 8016fe8:	edd3 7a00 	vldr	s15, [r3]
 8016fec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016ff0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016ff4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016ff8:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016ffc:	463b      	mov	r3, r7
 8016ffe:	2104      	movs	r1, #4
 8017000:	4618      	mov	r0, r3
 8017002:	f7ff fed3 	bl	8016dac <record_data>
		}
	if (record_mode == 4) { //距離の比較
 8017006:	4b7f      	ldr	r3, [pc, #508]	; (8017204 <interrupt_record+0x2c4>)
 8017008:	781b      	ldrb	r3, [r3, #0]
 801700a:	2b04      	cmp	r3, #4
 801700c:	d126      	bne.n	801705c <interrupt_record+0x11c>
			r_data[0] = straight.displacement;
 801700e:	4b84      	ldr	r3, [pc, #528]	; (8017220 <interrupt_record+0x2e0>)
 8017010:	689b      	ldr	r3, [r3, #8]
 8017012:	603b      	str	r3, [r7, #0]
			r_data[1] = (E_distanceR + E_distanceL) / 2;
 8017014:	4b7e      	ldr	r3, [pc, #504]	; (8017210 <interrupt_record+0x2d0>)
 8017016:	ed93 7a00 	vldr	s14, [r3]
 801701a:	4b7e      	ldr	r3, [pc, #504]	; (8017214 <interrupt_record+0x2d4>)
 801701c:	edd3 7a00 	vldr	s15, [r3]
 8017020:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017024:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017028:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801702c:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = gf_distance;
 8017030:	4b80      	ldr	r3, [pc, #512]	; (8017234 <interrupt_record+0x2f4>)
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	60bb      	str	r3, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 8017036:	4b7d      	ldr	r3, [pc, #500]	; (801722c <interrupt_record+0x2ec>)
 8017038:	ed93 7a00 	vldr	s14, [r3]
 801703c:	4b7c      	ldr	r3, [pc, #496]	; (8017230 <interrupt_record+0x2f0>)
 801703e:	edd3 7a00 	vldr	s15, [r3]
 8017042:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017046:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801704a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801704e:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8017052:	463b      	mov	r3, r7
 8017054:	2104      	movs	r1, #4
 8017056:	4618      	mov	r0, r3
 8017058:	f7ff fea8 	bl	8016dac <record_data>
		}
	if (record_mode == 5) { //距離の比較
 801705c:	4b69      	ldr	r3, [pc, #420]	; (8017204 <interrupt_record+0x2c4>)
 801705e:	781b      	ldrb	r3, [r3, #0]
 8017060:	2b05      	cmp	r3, #5
 8017062:	d110      	bne.n	8017086 <interrupt_record+0x146>
			r_data[0] = straight.displacement;
 8017064:	4b6e      	ldr	r3, [pc, #440]	; (8017220 <interrupt_record+0x2e0>)
 8017066:	689b      	ldr	r3, [r3, #8]
 8017068:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 801706a:	4b69      	ldr	r3, [pc, #420]	; (8017210 <interrupt_record+0x2d0>)
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 8017070:	4b68      	ldr	r3, [pc, #416]	; (8017214 <interrupt_record+0x2d4>)
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 8017076:	4b6f      	ldr	r3, [pc, #444]	; (8017234 <interrupt_record+0x2f4>)
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 801707c:	463b      	mov	r3, r7
 801707e:	2104      	movs	r1, #4
 8017080:	4618      	mov	r0, r3
 8017082:	f7ff fe93 	bl	8016dac <record_data>
		}
	if (record_mode == 5) { //距離の比較
 8017086:	4b5f      	ldr	r3, [pc, #380]	; (8017204 <interrupt_record+0x2c4>)
 8017088:	781b      	ldrb	r3, [r3, #0]
 801708a:	2b05      	cmp	r3, #5
 801708c:	d110      	bne.n	80170b0 <interrupt_record+0x170>
			r_data[0] = g_V_L;
 801708e:	4b6a      	ldr	r3, [pc, #424]	; (8017238 <interrupt_record+0x2f8>)
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 8017094:	4b5e      	ldr	r3, [pc, #376]	; (8017210 <interrupt_record+0x2d0>)
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 801709a:	4b5e      	ldr	r3, [pc, #376]	; (8017214 <interrupt_record+0x2d4>)
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 80170a0:	4b64      	ldr	r3, [pc, #400]	; (8017234 <interrupt_record+0x2f4>)
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80170a6:	463b      	mov	r3, r7
 80170a8:	2104      	movs	r1, #4
 80170aa:	4618      	mov	r0, r3
 80170ac:	f7ff fe7e 	bl	8016dac <record_data>
		}
	if (record_mode == 6) { //距離の比較
 80170b0:	4b54      	ldr	r3, [pc, #336]	; (8017204 <interrupt_record+0x2c4>)
 80170b2:	781b      	ldrb	r3, [r3, #0]
 80170b4:	2b06      	cmp	r3, #6
 80170b6:	d110      	bne.n	80170da <interrupt_record+0x19a>
				r_data[0] = straight.velocity;
 80170b8:	4b59      	ldr	r3, [pc, #356]	; (8017220 <interrupt_record+0x2e0>)
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	603b      	str	r3, [r7, #0]
				r_data[1] = E_lpf_speedL;
 80170be:	4b5f      	ldr	r3, [pc, #380]	; (801723c <interrupt_record+0x2fc>)
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	607b      	str	r3, [r7, #4]
				r_data[2] = E_lpf_speedR;
 80170c4:	4b5e      	ldr	r3, [pc, #376]	; (8017240 <interrupt_record+0x300>)
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_speed;
 80170ca:	4b5e      	ldr	r3, [pc, #376]	; (8017244 <interrupt_record+0x304>)
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 80170d0:	463b      	mov	r3, r7
 80170d2:	2104      	movs	r1, #4
 80170d4:	4618      	mov	r0, r3
 80170d6:	f7ff fe69 	bl	8016dac <record_data>
			}
	if (record_mode == 7) {
 80170da:	4b4a      	ldr	r3, [pc, #296]	; (8017204 <interrupt_record+0x2c4>)
 80170dc:	781b      	ldrb	r3, [r3, #0]
 80170de:	2b07      	cmp	r3, #7
 80170e0:	d125      	bne.n	801712e <interrupt_record+0x1ee>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 80170e2:	4b59      	ldr	r3, [pc, #356]	; (8017248 <interrupt_record+0x308>)
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	ee07 3a90 	vmov	s15, r3
 80170ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80170ee:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff[SENSOR_LEFT];
 80170f2:	4b56      	ldr	r3, [pc, #344]	; (801724c <interrupt_record+0x30c>)
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	ee07 3a90 	vmov	s15, r3
 80170fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80170fe:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_RIGHT][0];
 8017102:	4b51      	ldr	r3, [pc, #324]	; (8017248 <interrupt_record+0x308>)
 8017104:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8017108:	ee07 3a90 	vmov	s15, r3
 801710c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017110:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff[SENSOR_RIGHT];
 8017114:	4b4d      	ldr	r3, [pc, #308]	; (801724c <interrupt_record+0x30c>)
 8017116:	691b      	ldr	r3, [r3, #16]
 8017118:	ee07 3a90 	vmov	s15, r3
 801711c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017120:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8017124:	463b      	mov	r3, r7
 8017126:	2104      	movs	r1, #4
 8017128:	4618      	mov	r0, r3
 801712a:	f7ff fe3f 	bl	8016dac <record_data>
		}
	if (record_mode == 8) {
 801712e:	4b35      	ldr	r3, [pc, #212]	; (8017204 <interrupt_record+0x2c4>)
 8017130:	781b      	ldrb	r3, [r3, #0]
 8017132:	2b08      	cmp	r3, #8
 8017134:	d125      	bne.n	8017182 <interrupt_record+0x242>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8017136:	4b44      	ldr	r3, [pc, #272]	; (8017248 <interrupt_record+0x308>)
 8017138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801713a:	ee07 3a90 	vmov	s15, r3
 801713e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017142:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_LEFT];
 8017146:	4b42      	ldr	r3, [pc, #264]	; (8017250 <interrupt_record+0x310>)
 8017148:	685b      	ldr	r3, [r3, #4]
 801714a:	ee07 3a90 	vmov	s15, r3
 801714e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017152:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8017156:	4b3c      	ldr	r3, [pc, #240]	; (8017248 <interrupt_record+0x308>)
 8017158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801715c:	ee07 3a90 	vmov	s15, r3
 8017160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017164:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT];
 8017168:	4b39      	ldr	r3, [pc, #228]	; (8017250 <interrupt_record+0x310>)
 801716a:	68db      	ldr	r3, [r3, #12]
 801716c:	ee07 3a90 	vmov	s15, r3
 8017170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017174:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8017178:	463b      	mov	r3, r7
 801717a:	2104      	movs	r1, #4
 801717c:	4618      	mov	r0, r3
 801717e:	f7ff fe15 	bl	8016dac <record_data>
		}
	if (record_mode == 9) { //90
 8017182:	4b20      	ldr	r3, [pc, #128]	; (8017204 <interrupt_record+0x2c4>)
 8017184:	781b      	ldrb	r3, [r3, #0]
 8017186:	2b09      	cmp	r3, #9
 8017188:	d11b      	bne.n	80171c2 <interrupt_record+0x282>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 801718a:	4b2f      	ldr	r3, [pc, #188]	; (8017248 <interrupt_record+0x308>)
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	ee07 3a90 	vmov	s15, r3
 8017192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017196:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_RIGHT][0];
 801719a:	4b2b      	ldr	r3, [pc, #172]	; (8017248 <interrupt_record+0x308>)
 801719c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80171a0:	ee07 3a90 	vmov	s15, r3
 80171a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171a8:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 80171ac:	4b29      	ldr	r3, [pc, #164]	; (8017254 <interrupt_record+0x314>)
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 80171b2:	4b29      	ldr	r3, [pc, #164]	; (8017258 <interrupt_record+0x318>)
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80171b8:	463b      	mov	r3, r7
 80171ba:	2104      	movs	r1, #4
 80171bc:	4618      	mov	r0, r3
 80171be:	f7ff fdf5 	bl	8016dac <record_data>
		}
	if (record_mode == 10) { //90
 80171c2:	4b10      	ldr	r3, [pc, #64]	; (8017204 <interrupt_record+0x2c4>)
 80171c4:	781b      	ldrb	r3, [r3, #0]
 80171c6:	2b0a      	cmp	r3, #10
 80171c8:	d148      	bne.n	801725c <interrupt_record+0x31c>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 80171ca:	4b1f      	ldr	r3, [pc, #124]	; (8017248 <interrupt_record+0x308>)
 80171cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171ce:	ee07 3a90 	vmov	s15, r3
 80171d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171d6:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 80171da:	4b1b      	ldr	r3, [pc, #108]	; (8017248 <interrupt_record+0x308>)
 80171dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80171e0:	ee07 3a90 	vmov	s15, r3
 80171e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171e8:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 80171ec:	4b19      	ldr	r3, [pc, #100]	; (8017254 <interrupt_record+0x314>)
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 80171f2:	4b19      	ldr	r3, [pc, #100]	; (8017258 <interrupt_record+0x318>)
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80171f8:	463b      	mov	r3, r7
 80171fa:	2104      	movs	r1, #4
 80171fc:	4618      	mov	r0, r3
 80171fe:	f7ff fdd5 	bl	8016dac <record_data>
 8017202:	e02b      	b.n	801725c <interrupt_record+0x31c>
 8017204:	2000edc0 	.word	0x2000edc0
 8017208:	2000022c 	.word	0x2000022c
 801720c:	20000228 	.word	0x20000228
 8017210:	20000224 	.word	0x20000224
 8017214:	20000220 	.word	0x20000220
 8017218:	200004e4 	.word	0x200004e4
 801721c:	20000268 	.word	0x20000268
 8017220:	200004d8 	.word	0x200004d8
 8017224:	2000025c 	.word	0x2000025c
 8017228:	20000258 	.word	0x20000258
 801722c:	20000254 	.word	0x20000254
 8017230:	20000250 	.word	0x20000250
 8017234:	2000027c 	.word	0x2000027c
 8017238:	2000052c 	.word	0x2000052c
 801723c:	20000238 	.word	0x20000238
 8017240:	2000023c 	.word	0x2000023c
 8017244:	20000278 	.word	0x20000278
 8017248:	200002b8 	.word	0x200002b8
 801724c:	20000448 	.word	0x20000448
 8017250:	2000045c 	.word	0x2000045c
 8017254:	200005e0 	.word	0x200005e0
 8017258:	200005dc 	.word	0x200005dc
		r_data[3] = g_V_L;
		record_data(r_data, 4);
	}
*/

}
 801725c:	bf00      	nop
 801725e:	3710      	adds	r7, #16
 8017260:	46bd      	mov	sp, r7
 8017262:	bd80      	pop	{r7, pc}

08017264 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8017264:	b580      	push	{r7, lr}
 8017266:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8017268:	4b1b      	ldr	r3, [pc, #108]	; (80172d8 <MX_SPI1_Init+0x74>)
 801726a:	4a1c      	ldr	r2, [pc, #112]	; (80172dc <MX_SPI1_Init+0x78>)
 801726c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801726e:	4b1a      	ldr	r3, [pc, #104]	; (80172d8 <MX_SPI1_Init+0x74>)
 8017270:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017274:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8017276:	4b18      	ldr	r3, [pc, #96]	; (80172d8 <MX_SPI1_Init+0x74>)
 8017278:	2200      	movs	r2, #0
 801727a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801727c:	4b16      	ldr	r3, [pc, #88]	; (80172d8 <MX_SPI1_Init+0x74>)
 801727e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8017282:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017284:	4b14      	ldr	r3, [pc, #80]	; (80172d8 <MX_SPI1_Init+0x74>)
 8017286:	2200      	movs	r2, #0
 8017288:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801728a:	4b13      	ldr	r3, [pc, #76]	; (80172d8 <MX_SPI1_Init+0x74>)
 801728c:	2200      	movs	r2, #0
 801728e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8017290:	4b11      	ldr	r3, [pc, #68]	; (80172d8 <MX_SPI1_Init+0x74>)
 8017292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017296:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8017298:	4b0f      	ldr	r3, [pc, #60]	; (80172d8 <MX_SPI1_Init+0x74>)
 801729a:	2210      	movs	r2, #16
 801729c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801729e:	4b0e      	ldr	r3, [pc, #56]	; (80172d8 <MX_SPI1_Init+0x74>)
 80172a0:	2200      	movs	r2, #0
 80172a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80172a4:	4b0c      	ldr	r3, [pc, #48]	; (80172d8 <MX_SPI1_Init+0x74>)
 80172a6:	2200      	movs	r2, #0
 80172a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80172aa:	4b0b      	ldr	r3, [pc, #44]	; (80172d8 <MX_SPI1_Init+0x74>)
 80172ac:	2200      	movs	r2, #0
 80172ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80172b0:	4b09      	ldr	r3, [pc, #36]	; (80172d8 <MX_SPI1_Init+0x74>)
 80172b2:	2207      	movs	r2, #7
 80172b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80172b6:	4b08      	ldr	r3, [pc, #32]	; (80172d8 <MX_SPI1_Init+0x74>)
 80172b8:	2200      	movs	r2, #0
 80172ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80172bc:	4b06      	ldr	r3, [pc, #24]	; (80172d8 <MX_SPI1_Init+0x74>)
 80172be:	2208      	movs	r2, #8
 80172c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80172c2:	4805      	ldr	r0, [pc, #20]	; (80172d8 <MX_SPI1_Init+0x74>)
 80172c4:	f005 ff1e 	bl	801d104 <HAL_SPI_Init>
 80172c8:	4603      	mov	r3, r0
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d001      	beq.n	80172d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80172ce:	f7f2 fd74 	bl	8009dba <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80172d2:	bf00      	nop
 80172d4:	bd80      	pop	{r7, pc}
 80172d6:	bf00      	nop
 80172d8:	2000edd0 	.word	0x2000edd0
 80172dc:	40013000 	.word	0x40013000

080172e0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80172e4:	4b1b      	ldr	r3, [pc, #108]	; (8017354 <MX_SPI3_Init+0x74>)
 80172e6:	4a1c      	ldr	r2, [pc, #112]	; (8017358 <MX_SPI3_Init+0x78>)
 80172e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80172ea:	4b1a      	ldr	r3, [pc, #104]	; (8017354 <MX_SPI3_Init+0x74>)
 80172ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80172f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80172f2:	4b18      	ldr	r3, [pc, #96]	; (8017354 <MX_SPI3_Init+0x74>)
 80172f4:	2200      	movs	r2, #0
 80172f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80172f8:	4b16      	ldr	r3, [pc, #88]	; (8017354 <MX_SPI3_Init+0x74>)
 80172fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80172fe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017300:	4b14      	ldr	r3, [pc, #80]	; (8017354 <MX_SPI3_Init+0x74>)
 8017302:	2200      	movs	r2, #0
 8017304:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8017306:	4b13      	ldr	r3, [pc, #76]	; (8017354 <MX_SPI3_Init+0x74>)
 8017308:	2201      	movs	r2, #1
 801730a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 801730c:	4b11      	ldr	r3, [pc, #68]	; (8017354 <MX_SPI3_Init+0x74>)
 801730e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017312:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8017314:	4b0f      	ldr	r3, [pc, #60]	; (8017354 <MX_SPI3_Init+0x74>)
 8017316:	2208      	movs	r2, #8
 8017318:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801731a:	4b0e      	ldr	r3, [pc, #56]	; (8017354 <MX_SPI3_Init+0x74>)
 801731c:	2200      	movs	r2, #0
 801731e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8017320:	4b0c      	ldr	r3, [pc, #48]	; (8017354 <MX_SPI3_Init+0x74>)
 8017322:	2200      	movs	r2, #0
 8017324:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017326:	4b0b      	ldr	r3, [pc, #44]	; (8017354 <MX_SPI3_Init+0x74>)
 8017328:	2200      	movs	r2, #0
 801732a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 801732c:	4b09      	ldr	r3, [pc, #36]	; (8017354 <MX_SPI3_Init+0x74>)
 801732e:	2207      	movs	r2, #7
 8017330:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8017332:	4b08      	ldr	r3, [pc, #32]	; (8017354 <MX_SPI3_Init+0x74>)
 8017334:	2200      	movs	r2, #0
 8017336:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8017338:	4b06      	ldr	r3, [pc, #24]	; (8017354 <MX_SPI3_Init+0x74>)
 801733a:	2200      	movs	r2, #0
 801733c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 801733e:	4805      	ldr	r0, [pc, #20]	; (8017354 <MX_SPI3_Init+0x74>)
 8017340:	f005 fee0 	bl	801d104 <HAL_SPI_Init>
 8017344:	4603      	mov	r3, r0
 8017346:	2b00      	cmp	r3, #0
 8017348:	d001      	beq.n	801734e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 801734a:	f7f2 fd36 	bl	8009dba <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 801734e:	bf00      	nop
 8017350:	bd80      	pop	{r7, pc}
 8017352:	bf00      	nop
 8017354:	2000ee34 	.word	0x2000ee34
 8017358:	40003c00 	.word	0x40003c00

0801735c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b08c      	sub	sp, #48	; 0x30
 8017360:	af00      	add	r7, sp, #0
 8017362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017364:	f107 031c 	add.w	r3, r7, #28
 8017368:	2200      	movs	r2, #0
 801736a:	601a      	str	r2, [r3, #0]
 801736c:	605a      	str	r2, [r3, #4]
 801736e:	609a      	str	r2, [r3, #8]
 8017370:	60da      	str	r2, [r3, #12]
 8017372:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	4a3d      	ldr	r2, [pc, #244]	; (8017470 <HAL_SPI_MspInit+0x114>)
 801737a:	4293      	cmp	r3, r2
 801737c:	d129      	bne.n	80173d2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 801737e:	4b3d      	ldr	r3, [pc, #244]	; (8017474 <HAL_SPI_MspInit+0x118>)
 8017380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017382:	4a3c      	ldr	r2, [pc, #240]	; (8017474 <HAL_SPI_MspInit+0x118>)
 8017384:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017388:	6613      	str	r3, [r2, #96]	; 0x60
 801738a:	4b3a      	ldr	r3, [pc, #232]	; (8017474 <HAL_SPI_MspInit+0x118>)
 801738c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801738e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017392:	61bb      	str	r3, [r7, #24]
 8017394:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017396:	4b37      	ldr	r3, [pc, #220]	; (8017474 <HAL_SPI_MspInit+0x118>)
 8017398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801739a:	4a36      	ldr	r2, [pc, #216]	; (8017474 <HAL_SPI_MspInit+0x118>)
 801739c:	f043 0301 	orr.w	r3, r3, #1
 80173a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80173a2:	4b34      	ldr	r3, [pc, #208]	; (8017474 <HAL_SPI_MspInit+0x118>)
 80173a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80173a6:	f003 0301 	and.w	r3, r3, #1
 80173aa:	617b      	str	r3, [r7, #20]
 80173ac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80173ae:	23e0      	movs	r3, #224	; 0xe0
 80173b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80173b2:	2302      	movs	r3, #2
 80173b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80173b6:	2300      	movs	r3, #0
 80173b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80173ba:	2300      	movs	r3, #0
 80173bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80173be:	2305      	movs	r3, #5
 80173c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80173c2:	f107 031c 	add.w	r3, r7, #28
 80173c6:	4619      	mov	r1, r3
 80173c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80173cc:	f004 fce0 	bl	801bd90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80173d0:	e049      	b.n	8017466 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	4a28      	ldr	r2, [pc, #160]	; (8017478 <HAL_SPI_MspInit+0x11c>)
 80173d8:	4293      	cmp	r3, r2
 80173da:	d144      	bne.n	8017466 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80173dc:	4b25      	ldr	r3, [pc, #148]	; (8017474 <HAL_SPI_MspInit+0x118>)
 80173de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80173e0:	4a24      	ldr	r2, [pc, #144]	; (8017474 <HAL_SPI_MspInit+0x118>)
 80173e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80173e6:	6593      	str	r3, [r2, #88]	; 0x58
 80173e8:	4b22      	ldr	r3, [pc, #136]	; (8017474 <HAL_SPI_MspInit+0x118>)
 80173ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80173ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80173f0:	613b      	str	r3, [r7, #16]
 80173f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80173f4:	4b1f      	ldr	r3, [pc, #124]	; (8017474 <HAL_SPI_MspInit+0x118>)
 80173f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80173f8:	4a1e      	ldr	r2, [pc, #120]	; (8017474 <HAL_SPI_MspInit+0x118>)
 80173fa:	f043 0304 	orr.w	r3, r3, #4
 80173fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017400:	4b1c      	ldr	r3, [pc, #112]	; (8017474 <HAL_SPI_MspInit+0x118>)
 8017402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017404:	f003 0304 	and.w	r3, r3, #4
 8017408:	60fb      	str	r3, [r7, #12]
 801740a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801740c:	4b19      	ldr	r3, [pc, #100]	; (8017474 <HAL_SPI_MspInit+0x118>)
 801740e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017410:	4a18      	ldr	r2, [pc, #96]	; (8017474 <HAL_SPI_MspInit+0x118>)
 8017412:	f043 0302 	orr.w	r3, r3, #2
 8017416:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017418:	4b16      	ldr	r3, [pc, #88]	; (8017474 <HAL_SPI_MspInit+0x118>)
 801741a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801741c:	f003 0302 	and.w	r3, r3, #2
 8017420:	60bb      	str	r3, [r7, #8]
 8017422:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8017424:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8017428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801742a:	2302      	movs	r3, #2
 801742c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801742e:	2300      	movs	r3, #0
 8017430:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017432:	2300      	movs	r3, #0
 8017434:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8017436:	2306      	movs	r3, #6
 8017438:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801743a:	f107 031c 	add.w	r3, r7, #28
 801743e:	4619      	mov	r1, r3
 8017440:	480e      	ldr	r0, [pc, #56]	; (801747c <HAL_SPI_MspInit+0x120>)
 8017442:	f004 fca5 	bl	801bd90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8017446:	2320      	movs	r3, #32
 8017448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801744a:	2302      	movs	r3, #2
 801744c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801744e:	2300      	movs	r3, #0
 8017450:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017452:	2300      	movs	r3, #0
 8017454:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8017456:	2306      	movs	r3, #6
 8017458:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801745a:	f107 031c 	add.w	r3, r7, #28
 801745e:	4619      	mov	r1, r3
 8017460:	4807      	ldr	r0, [pc, #28]	; (8017480 <HAL_SPI_MspInit+0x124>)
 8017462:	f004 fc95 	bl	801bd90 <HAL_GPIO_Init>
}
 8017466:	bf00      	nop
 8017468:	3730      	adds	r7, #48	; 0x30
 801746a:	46bd      	mov	sp, r7
 801746c:	bd80      	pop	{r7, pc}
 801746e:	bf00      	nop
 8017470:	40013000 	.word	0x40013000
 8017474:	40021000 	.word	0x40021000
 8017478:	40003c00 	.word	0x40003c00
 801747c:	48000800 	.word	0x48000800
 8017480:	48000400 	.word	0x48000400

08017484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017484:	b580      	push	{r7, lr}
 8017486:	b082      	sub	sp, #8
 8017488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801748a:	4b0f      	ldr	r3, [pc, #60]	; (80174c8 <HAL_MspInit+0x44>)
 801748c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801748e:	4a0e      	ldr	r2, [pc, #56]	; (80174c8 <HAL_MspInit+0x44>)
 8017490:	f043 0301 	orr.w	r3, r3, #1
 8017494:	6613      	str	r3, [r2, #96]	; 0x60
 8017496:	4b0c      	ldr	r3, [pc, #48]	; (80174c8 <HAL_MspInit+0x44>)
 8017498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801749a:	f003 0301 	and.w	r3, r3, #1
 801749e:	607b      	str	r3, [r7, #4]
 80174a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80174a2:	4b09      	ldr	r3, [pc, #36]	; (80174c8 <HAL_MspInit+0x44>)
 80174a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80174a6:	4a08      	ldr	r2, [pc, #32]	; (80174c8 <HAL_MspInit+0x44>)
 80174a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80174ac:	6593      	str	r3, [r2, #88]	; 0x58
 80174ae:	4b06      	ldr	r3, [pc, #24]	; (80174c8 <HAL_MspInit+0x44>)
 80174b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80174b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80174b6:	603b      	str	r3, [r7, #0]
 80174b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80174ba:	f004 fea7 	bl	801c20c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80174be:	bf00      	nop
 80174c0:	3708      	adds	r7, #8
 80174c2:	46bd      	mov	sp, r7
 80174c4:	bd80      	pop	{r7, pc}
 80174c6:	bf00      	nop
 80174c8:	40021000 	.word	0x40021000

080174cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80174cc:	b480      	push	{r7}
 80174ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80174d0:	e7fe      	b.n	80174d0 <NMI_Handler+0x4>

080174d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80174d2:	b480      	push	{r7}
 80174d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80174d6:	e7fe      	b.n	80174d6 <HardFault_Handler+0x4>

080174d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80174d8:	b480      	push	{r7}
 80174da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80174dc:	e7fe      	b.n	80174dc <MemManage_Handler+0x4>

080174de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80174de:	b480      	push	{r7}
 80174e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80174e2:	e7fe      	b.n	80174e2 <BusFault_Handler+0x4>

080174e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80174e4:	b480      	push	{r7}
 80174e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80174e8:	e7fe      	b.n	80174e8 <UsageFault_Handler+0x4>

080174ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80174ea:	b480      	push	{r7}
 80174ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80174ee:	bf00      	nop
 80174f0:	46bd      	mov	sp, r7
 80174f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f6:	4770      	bx	lr

080174f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80174f8:	b480      	push	{r7}
 80174fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80174fc:	bf00      	nop
 80174fe:	46bd      	mov	sp, r7
 8017500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017504:	4770      	bx	lr

08017506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8017506:	b480      	push	{r7}
 8017508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801750a:	bf00      	nop
 801750c:	46bd      	mov	sp, r7
 801750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017512:	4770      	bx	lr

08017514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8017514:	b580      	push	{r7, lr}
 8017516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8017518:	f001 fbe2 	bl	8018ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801751c:	bf00      	nop
 801751e:	bd80      	pop	{r7, pc}

08017520 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8017520:	b580      	push	{r7, lr}
 8017522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8017524:	4802      	ldr	r0, [pc, #8]	; (8017530 <DMA1_Channel1_IRQHandler+0x10>)
 8017526:	f004 f87b 	bl	801b620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 801752a:	bf00      	nop
 801752c:	bd80      	pop	{r7, pc}
 801752e:	bf00      	nop
 8017530:	200007a0 	.word	0x200007a0

08017534 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8017534:	b580      	push	{r7, lr}
 8017536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8017538:	4802      	ldr	r0, [pc, #8]	; (8017544 <ADC1_2_IRQHandler+0x10>)
 801753a:	f002 fb81 	bl	8019c40 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
//  pl_callback_getSensor();
  /* USER CODE END ADC1_2_IRQn 1 */
}
 801753e:	bf00      	nop
 8017540:	bd80      	pop	{r7, pc}
 8017542:	bf00      	nop
 8017544:	20000734 	.word	0x20000734

08017548 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8017548:	b580      	push	{r7, lr}
 801754a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 801754c:	480d      	ldr	r0, [pc, #52]	; (8017584 <TIM6_DAC_IRQHandler+0x3c>)
 801754e:	f006 ffb9 	bl	801e4c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_timer();
 8017552:	f7f0 fc41 	bl	8007dd8 <interrupt_timer>
  interupt_calSensor();
 8017556:	f7ea fb8d 	bl	8001c74 <interupt_calSensor>
  ICM20602_DataUpdate();
 801755a:	f7f0 f95f 	bl	800781c <ICM20602_DataUpdate>
  interrupt_calGyro();
 801755e:	f7ea f997 	bl	8001890 <interrupt_calGyro>
  AS5047_DataUpdate();
 8017562:	f7ef fe17 	bl	8007194 <AS5047_DataUpdate>
  interupt_calEncoder();
 8017566:	f7e9 fd8b 	bl	8001080 <interupt_calEncoder>
  interupt_calFusion();
 801756a:	f7e9 ff99 	bl	80014a0 <interupt_calFusion>
  interrupt_WallCut();
 801756e:	f7ee fd7f 	bl	8006070 <interrupt_WallCut>
  interupt_DriveMotor();
 8017572:	f7ea fcf1 	bl	8001f58 <interupt_DriveMotor>

  interrupt_FailSafe();
 8017576:	f7f2 f977 	bl	8009868 <interrupt_FailSafe>
  interrupt_record();
 801757a:	f7ff fce1 	bl	8016f40 <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801757e:	bf00      	nop
 8017580:	bd80      	pop	{r7, pc}
 8017582:	bf00      	nop
 8017584:	2000ee9c 	.word	0x2000ee9c

08017588 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8017588:	b480      	push	{r7}
 801758a:	af00      	add	r7, sp, #0
	return 1;
 801758c:	2301      	movs	r3, #1
}
 801758e:	4618      	mov	r0, r3
 8017590:	46bd      	mov	sp, r7
 8017592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017596:	4770      	bx	lr

08017598 <_kill>:

int _kill(int pid, int sig)
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b082      	sub	sp, #8
 801759c:	af00      	add	r7, sp, #0
 801759e:	6078      	str	r0, [r7, #4]
 80175a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80175a2:	f008 fe63 	bl	802026c <__errno>
 80175a6:	4603      	mov	r3, r0
 80175a8:	2216      	movs	r2, #22
 80175aa:	601a      	str	r2, [r3, #0]
	return -1;
 80175ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80175b0:	4618      	mov	r0, r3
 80175b2:	3708      	adds	r7, #8
 80175b4:	46bd      	mov	sp, r7
 80175b6:	bd80      	pop	{r7, pc}

080175b8 <_exit>:

void _exit (int status)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b082      	sub	sp, #8
 80175bc:	af00      	add	r7, sp, #0
 80175be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80175c0:	f04f 31ff 	mov.w	r1, #4294967295
 80175c4:	6878      	ldr	r0, [r7, #4]
 80175c6:	f7ff ffe7 	bl	8017598 <_kill>
	while (1) {}		/* Make sure we hang here */
 80175ca:	e7fe      	b.n	80175ca <_exit+0x12>

080175cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80175cc:	b580      	push	{r7, lr}
 80175ce:	b086      	sub	sp, #24
 80175d0:	af00      	add	r7, sp, #0
 80175d2:	60f8      	str	r0, [r7, #12]
 80175d4:	60b9      	str	r1, [r7, #8]
 80175d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80175d8:	2300      	movs	r3, #0
 80175da:	617b      	str	r3, [r7, #20]
 80175dc:	e00a      	b.n	80175f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80175de:	f3af 8000 	nop.w
 80175e2:	4601      	mov	r1, r0
 80175e4:	68bb      	ldr	r3, [r7, #8]
 80175e6:	1c5a      	adds	r2, r3, #1
 80175e8:	60ba      	str	r2, [r7, #8]
 80175ea:	b2ca      	uxtb	r2, r1
 80175ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80175ee:	697b      	ldr	r3, [r7, #20]
 80175f0:	3301      	adds	r3, #1
 80175f2:	617b      	str	r3, [r7, #20]
 80175f4:	697a      	ldr	r2, [r7, #20]
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	429a      	cmp	r2, r3
 80175fa:	dbf0      	blt.n	80175de <_read+0x12>
	}

return len;
 80175fc:	687b      	ldr	r3, [r7, #4]
}
 80175fe:	4618      	mov	r0, r3
 8017600:	3718      	adds	r7, #24
 8017602:	46bd      	mov	sp, r7
 8017604:	bd80      	pop	{r7, pc}
	...

08017608 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8017608:	b580      	push	{r7, lr}
 801760a:	b086      	sub	sp, #24
 801760c:	af00      	add	r7, sp, #0
 801760e:	60f8      	str	r0, [r7, #12]
 8017610:	60b9      	str	r1, [r7, #8]
 8017612:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017614:	2300      	movs	r3, #0
 8017616:	617b      	str	r3, [r7, #20]
 8017618:	e00a      	b.n	8017630 <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 801761a:	68b9      	ldr	r1, [r7, #8]
 801761c:	1c4b      	adds	r3, r1, #1
 801761e:	60bb      	str	r3, [r7, #8]
 8017620:	2301      	movs	r3, #1
 8017622:	2201      	movs	r2, #1
 8017624:	4807      	ldr	r0, [pc, #28]	; (8017644 <_write+0x3c>)
 8017626:	f007 ffd7 	bl	801f5d8 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801762a:	697b      	ldr	r3, [r7, #20]
 801762c:	3301      	adds	r3, #1
 801762e:	617b      	str	r3, [r7, #20]
 8017630:	697a      	ldr	r2, [r7, #20]
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	429a      	cmp	r2, r3
 8017636:	dbf0      	blt.n	801761a <_write+0x12>
	}
	return len;
 8017638:	687b      	ldr	r3, [r7, #4]
}
 801763a:	4618      	mov	r0, r3
 801763c:	3718      	adds	r7, #24
 801763e:	46bd      	mov	sp, r7
 8017640:	bd80      	pop	{r7, pc}
 8017642:	bf00      	nop
 8017644:	2000f878 	.word	0x2000f878

08017648 <_close>:

int _close(int file)
{
 8017648:	b480      	push	{r7}
 801764a:	b083      	sub	sp, #12
 801764c:	af00      	add	r7, sp, #0
 801764e:	6078      	str	r0, [r7, #4]
	return -1;
 8017650:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017654:	4618      	mov	r0, r3
 8017656:	370c      	adds	r7, #12
 8017658:	46bd      	mov	sp, r7
 801765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801765e:	4770      	bx	lr

08017660 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8017660:	b480      	push	{r7}
 8017662:	b083      	sub	sp, #12
 8017664:	af00      	add	r7, sp, #0
 8017666:	6078      	str	r0, [r7, #4]
 8017668:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801766a:	683b      	ldr	r3, [r7, #0]
 801766c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017670:	605a      	str	r2, [r3, #4]
	return 0;
 8017672:	2300      	movs	r3, #0
}
 8017674:	4618      	mov	r0, r3
 8017676:	370c      	adds	r7, #12
 8017678:	46bd      	mov	sp, r7
 801767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767e:	4770      	bx	lr

08017680 <_isatty>:

int _isatty(int file)
{
 8017680:	b480      	push	{r7}
 8017682:	b083      	sub	sp, #12
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
	return 1;
 8017688:	2301      	movs	r3, #1
}
 801768a:	4618      	mov	r0, r3
 801768c:	370c      	adds	r7, #12
 801768e:	46bd      	mov	sp, r7
 8017690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017694:	4770      	bx	lr

08017696 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8017696:	b480      	push	{r7}
 8017698:	b085      	sub	sp, #20
 801769a:	af00      	add	r7, sp, #0
 801769c:	60f8      	str	r0, [r7, #12]
 801769e:	60b9      	str	r1, [r7, #8]
 80176a0:	607a      	str	r2, [r7, #4]
	return 0;
 80176a2:	2300      	movs	r3, #0
}
 80176a4:	4618      	mov	r0, r3
 80176a6:	3714      	adds	r7, #20
 80176a8:	46bd      	mov	sp, r7
 80176aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ae:	4770      	bx	lr

080176b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b086      	sub	sp, #24
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80176b8:	4a14      	ldr	r2, [pc, #80]	; (801770c <_sbrk+0x5c>)
 80176ba:	4b15      	ldr	r3, [pc, #84]	; (8017710 <_sbrk+0x60>)
 80176bc:	1ad3      	subs	r3, r2, r3
 80176be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80176c0:	697b      	ldr	r3, [r7, #20]
 80176c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80176c4:	4b13      	ldr	r3, [pc, #76]	; (8017714 <_sbrk+0x64>)
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d102      	bne.n	80176d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80176cc:	4b11      	ldr	r3, [pc, #68]	; (8017714 <_sbrk+0x64>)
 80176ce:	4a12      	ldr	r2, [pc, #72]	; (8017718 <_sbrk+0x68>)
 80176d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80176d2:	4b10      	ldr	r3, [pc, #64]	; (8017714 <_sbrk+0x64>)
 80176d4:	681a      	ldr	r2, [r3, #0]
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	4413      	add	r3, r2
 80176da:	693a      	ldr	r2, [r7, #16]
 80176dc:	429a      	cmp	r2, r3
 80176de:	d207      	bcs.n	80176f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80176e0:	f008 fdc4 	bl	802026c <__errno>
 80176e4:	4603      	mov	r3, r0
 80176e6:	220c      	movs	r2, #12
 80176e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80176ea:	f04f 33ff 	mov.w	r3, #4294967295
 80176ee:	e009      	b.n	8017704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80176f0:	4b08      	ldr	r3, [pc, #32]	; (8017714 <_sbrk+0x64>)
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80176f6:	4b07      	ldr	r3, [pc, #28]	; (8017714 <_sbrk+0x64>)
 80176f8:	681a      	ldr	r2, [r3, #0]
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	4413      	add	r3, r2
 80176fe:	4a05      	ldr	r2, [pc, #20]	; (8017714 <_sbrk+0x64>)
 8017700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8017702:	68fb      	ldr	r3, [r7, #12]
}
 8017704:	4618      	mov	r0, r3
 8017706:	3718      	adds	r7, #24
 8017708:	46bd      	mov	sp, r7
 801770a:	bd80      	pop	{r7, pc}
 801770c:	2001c000 	.word	0x2001c000
 8017710:	00000400 	.word	0x00000400
 8017714:	2000ee98 	.word	0x2000ee98
 8017718:	2000f920 	.word	0x2000f920

0801771c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 801771c:	b480      	push	{r7}
 801771e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8017720:	4b06      	ldr	r3, [pc, #24]	; (801773c <SystemInit+0x20>)
 8017722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017726:	4a05      	ldr	r2, [pc, #20]	; (801773c <SystemInit+0x20>)
 8017728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801772c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8017730:	bf00      	nop
 8017732:	46bd      	mov	sp, r7
 8017734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017738:	4770      	bx	lr
 801773a:	bf00      	nop
 801773c:	e000ed00 	.word	0xe000ed00

08017740 <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8017740:	b580      	push	{r7, lr}
 8017742:	b084      	sub	sp, #16
 8017744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017746:	1d3b      	adds	r3, r7, #4
 8017748:	2200      	movs	r2, #0
 801774a:	601a      	str	r2, [r3, #0]
 801774c:	605a      	str	r2, [r3, #4]
 801774e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8017750:	4b14      	ldr	r3, [pc, #80]	; (80177a4 <MX_TIM6_Init+0x64>)
 8017752:	4a15      	ldr	r2, [pc, #84]	; (80177a8 <MX_TIM6_Init+0x68>)
 8017754:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 85-1;
 8017756:	4b13      	ldr	r3, [pc, #76]	; (80177a4 <MX_TIM6_Init+0x64>)
 8017758:	2254      	movs	r2, #84	; 0x54
 801775a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801775c:	4b11      	ldr	r3, [pc, #68]	; (80177a4 <MX_TIM6_Init+0x64>)
 801775e:	2200      	movs	r2, #0
 8017760:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8017762:	4b10      	ldr	r3, [pc, #64]	; (80177a4 <MX_TIM6_Init+0x64>)
 8017764:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017768:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801776a:	4b0e      	ldr	r3, [pc, #56]	; (80177a4 <MX_TIM6_Init+0x64>)
 801776c:	2200      	movs	r2, #0
 801776e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8017770:	480c      	ldr	r0, [pc, #48]	; (80177a4 <MX_TIM6_Init+0x64>)
 8017772:	f006 fbdf 	bl	801df34 <HAL_TIM_Base_Init>
 8017776:	4603      	mov	r3, r0
 8017778:	2b00      	cmp	r3, #0
 801777a:	d001      	beq.n	8017780 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 801777c:	f7f2 fb1d 	bl	8009dba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017780:	2300      	movs	r3, #0
 8017782:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017784:	2300      	movs	r3, #0
 8017786:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8017788:	1d3b      	adds	r3, r7, #4
 801778a:	4619      	mov	r1, r3
 801778c:	4805      	ldr	r0, [pc, #20]	; (80177a4 <MX_TIM6_Init+0x64>)
 801778e:	f007 fd4d 	bl	801f22c <HAL_TIMEx_MasterConfigSynchronization>
 8017792:	4603      	mov	r3, r0
 8017794:	2b00      	cmp	r3, #0
 8017796:	d001      	beq.n	801779c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8017798:	f7f2 fb0f 	bl	8009dba <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 801779c:	bf00      	nop
 801779e:	3710      	adds	r7, #16
 80177a0:	46bd      	mov	sp, r7
 80177a2:	bd80      	pop	{r7, pc}
 80177a4:	2000ee9c 	.word	0x2000ee9c
 80177a8:	40001000 	.word	0x40001000

080177ac <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80177ac:	b580      	push	{r7, lr}
 80177ae:	b098      	sub	sp, #96	; 0x60
 80177b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80177b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80177b6:	2200      	movs	r2, #0
 80177b8:	601a      	str	r2, [r3, #0]
 80177ba:	605a      	str	r2, [r3, #4]
 80177bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80177be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80177c2:	2200      	movs	r2, #0
 80177c4:	601a      	str	r2, [r3, #0]
 80177c6:	605a      	str	r2, [r3, #4]
 80177c8:	609a      	str	r2, [r3, #8]
 80177ca:	60da      	str	r2, [r3, #12]
 80177cc:	611a      	str	r2, [r3, #16]
 80177ce:	615a      	str	r2, [r3, #20]
 80177d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80177d2:	1d3b      	adds	r3, r7, #4
 80177d4:	2234      	movs	r2, #52	; 0x34
 80177d6:	2100      	movs	r1, #0
 80177d8:	4618      	mov	r0, r3
 80177da:	f008 fd7f 	bl	80202dc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80177de:	4b41      	ldr	r3, [pc, #260]	; (80178e4 <MX_TIM8_Init+0x138>)
 80177e0:	4a41      	ldr	r2, [pc, #260]	; (80178e8 <MX_TIM8_Init+0x13c>)
 80177e2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 80177e4:	4b3f      	ldr	r3, [pc, #252]	; (80178e4 <MX_TIM8_Init+0x138>)
 80177e6:	2201      	movs	r2, #1
 80177e8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80177ea:	4b3e      	ldr	r3, [pc, #248]	; (80178e4 <MX_TIM8_Init+0x138>)
 80177ec:	2200      	movs	r2, #0
 80177ee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 80177f0:	4b3c      	ldr	r3, [pc, #240]	; (80178e4 <MX_TIM8_Init+0x138>)
 80177f2:	f240 628f 	movw	r2, #1679	; 0x68f
 80177f6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80177f8:	4b3a      	ldr	r3, [pc, #232]	; (80178e4 <MX_TIM8_Init+0x138>)
 80177fa:	2200      	movs	r2, #0
 80177fc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80177fe:	4b39      	ldr	r3, [pc, #228]	; (80178e4 <MX_TIM8_Init+0x138>)
 8017800:	2200      	movs	r2, #0
 8017802:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017804:	4b37      	ldr	r3, [pc, #220]	; (80178e4 <MX_TIM8_Init+0x138>)
 8017806:	2200      	movs	r2, #0
 8017808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 801780a:	4836      	ldr	r0, [pc, #216]	; (80178e4 <MX_TIM8_Init+0x138>)
 801780c:	f006 fc5a 	bl	801e0c4 <HAL_TIM_PWM_Init>
 8017810:	4603      	mov	r3, r0
 8017812:	2b00      	cmp	r3, #0
 8017814:	d001      	beq.n	801781a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8017816:	f7f2 fad0 	bl	8009dba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801781a:	2300      	movs	r3, #0
 801781c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801781e:	2300      	movs	r3, #0
 8017820:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017822:	2300      	movs	r3, #0
 8017824:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8017826:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801782a:	4619      	mov	r1, r3
 801782c:	482d      	ldr	r0, [pc, #180]	; (80178e4 <MX_TIM8_Init+0x138>)
 801782e:	f007 fcfd 	bl	801f22c <HAL_TIMEx_MasterConfigSynchronization>
 8017832:	4603      	mov	r3, r0
 8017834:	2b00      	cmp	r3, #0
 8017836:	d001      	beq.n	801783c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8017838:	f7f2 fabf 	bl	8009dba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801783c:	2360      	movs	r3, #96	; 0x60
 801783e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 419;
 8017840:	f240 13a3 	movw	r3, #419	; 0x1a3
 8017844:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8017846:	2300      	movs	r3, #0
 8017848:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801784a:	2300      	movs	r3, #0
 801784c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801784e:	2300      	movs	r3, #0
 8017850:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8017852:	2300      	movs	r3, #0
 8017854:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8017856:	2300      	movs	r3, #0
 8017858:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801785a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801785e:	2200      	movs	r2, #0
 8017860:	4619      	mov	r1, r3
 8017862:	4820      	ldr	r0, [pc, #128]	; (80178e4 <MX_TIM8_Init+0x138>)
 8017864:	f006 ffae 	bl	801e7c4 <HAL_TIM_PWM_ConfigChannel>
 8017868:	4603      	mov	r3, r0
 801786a:	2b00      	cmp	r3, #0
 801786c:	d001      	beq.n	8017872 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 801786e:	f7f2 faa4 	bl	8009dba <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8017872:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017876:	2208      	movs	r2, #8
 8017878:	4619      	mov	r1, r3
 801787a:	481a      	ldr	r0, [pc, #104]	; (80178e4 <MX_TIM8_Init+0x138>)
 801787c:	f006 ffa2 	bl	801e7c4 <HAL_TIM_PWM_ConfigChannel>
 8017880:	4603      	mov	r3, r0
 8017882:	2b00      	cmp	r3, #0
 8017884:	d001      	beq.n	801788a <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 8017886:	f7f2 fa98 	bl	8009dba <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801788a:	2300      	movs	r3, #0
 801788c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801788e:	2300      	movs	r3, #0
 8017890:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8017892:	2300      	movs	r3, #0
 8017894:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8017896:	2300      	movs	r3, #0
 8017898:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801789a:	2300      	movs	r3, #0
 801789c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801789e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80178a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80178a4:	2300      	movs	r3, #0
 80178a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80178a8:	2300      	movs	r3, #0
 80178aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80178ac:	2300      	movs	r3, #0
 80178ae:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80178b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80178b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80178b6:	2300      	movs	r3, #0
 80178b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80178ba:	2300      	movs	r3, #0
 80178bc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80178be:	2300      	movs	r3, #0
 80178c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80178c2:	1d3b      	adds	r3, r7, #4
 80178c4:	4619      	mov	r1, r3
 80178c6:	4807      	ldr	r0, [pc, #28]	; (80178e4 <MX_TIM8_Init+0x138>)
 80178c8:	f007 fd3e 	bl	801f348 <HAL_TIMEx_ConfigBreakDeadTime>
 80178cc:	4603      	mov	r3, r0
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d001      	beq.n	80178d6 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80178d2:	f7f2 fa72 	bl	8009dba <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80178d6:	4803      	ldr	r0, [pc, #12]	; (80178e4 <MX_TIM8_Init+0x138>)
 80178d8:	f000 f8da 	bl	8017a90 <HAL_TIM_MspPostInit>

}
 80178dc:	bf00      	nop
 80178de:	3760      	adds	r7, #96	; 0x60
 80178e0:	46bd      	mov	sp, r7
 80178e2:	bd80      	pop	{r7, pc}
 80178e4:	2000eee8 	.word	0x2000eee8
 80178e8:	40013400 	.word	0x40013400

080178ec <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80178ec:	b580      	push	{r7, lr}
 80178ee:	b094      	sub	sp, #80	; 0x50
 80178f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80178f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80178f6:	2200      	movs	r2, #0
 80178f8:	601a      	str	r2, [r3, #0]
 80178fa:	605a      	str	r2, [r3, #4]
 80178fc:	609a      	str	r2, [r3, #8]
 80178fe:	60da      	str	r2, [r3, #12]
 8017900:	611a      	str	r2, [r3, #16]
 8017902:	615a      	str	r2, [r3, #20]
 8017904:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8017906:	463b      	mov	r3, r7
 8017908:	2234      	movs	r2, #52	; 0x34
 801790a:	2100      	movs	r1, #0
 801790c:	4618      	mov	r0, r3
 801790e:	f008 fce5 	bl	80202dc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8017912:	4b30      	ldr	r3, [pc, #192]	; (80179d4 <MX_TIM16_Init+0xe8>)
 8017914:	4a30      	ldr	r2, [pc, #192]	; (80179d8 <MX_TIM16_Init+0xec>)
 8017916:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 8017918:	4b2e      	ldr	r3, [pc, #184]	; (80179d4 <MX_TIM16_Init+0xe8>)
 801791a:	2201      	movs	r2, #1
 801791c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 801791e:	4b2d      	ldr	r3, [pc, #180]	; (80179d4 <MX_TIM16_Init+0xe8>)
 8017920:	2200      	movs	r2, #0
 8017922:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8017924:	4b2b      	ldr	r3, [pc, #172]	; (80179d4 <MX_TIM16_Init+0xe8>)
 8017926:	2264      	movs	r2, #100	; 0x64
 8017928:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801792a:	4b2a      	ldr	r3, [pc, #168]	; (80179d4 <MX_TIM16_Init+0xe8>)
 801792c:	2200      	movs	r2, #0
 801792e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8017930:	4b28      	ldr	r3, [pc, #160]	; (80179d4 <MX_TIM16_Init+0xe8>)
 8017932:	2200      	movs	r2, #0
 8017934:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017936:	4b27      	ldr	r3, [pc, #156]	; (80179d4 <MX_TIM16_Init+0xe8>)
 8017938:	2200      	movs	r2, #0
 801793a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 801793c:	4825      	ldr	r0, [pc, #148]	; (80179d4 <MX_TIM16_Init+0xe8>)
 801793e:	f006 faf9 	bl	801df34 <HAL_TIM_Base_Init>
 8017942:	4603      	mov	r3, r0
 8017944:	2b00      	cmp	r3, #0
 8017946:	d001      	beq.n	801794c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8017948:	f7f2 fa37 	bl	8009dba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 801794c:	4821      	ldr	r0, [pc, #132]	; (80179d4 <MX_TIM16_Init+0xe8>)
 801794e:	f006 fbb9 	bl	801e0c4 <HAL_TIM_PWM_Init>
 8017952:	4603      	mov	r3, r0
 8017954:	2b00      	cmp	r3, #0
 8017956:	d001      	beq.n	801795c <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8017958:	f7f2 fa2f 	bl	8009dba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801795c:	2360      	movs	r3, #96	; 0x60
 801795e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 30;
 8017960:	231e      	movs	r3, #30
 8017962:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8017964:	2300      	movs	r3, #0
 8017966:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8017968:	2300      	movs	r3, #0
 801796a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801796c:	2300      	movs	r3, #0
 801796e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8017970:	2300      	movs	r3, #0
 8017972:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8017974:	2300      	movs	r3, #0
 8017976:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8017978:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801797c:	2200      	movs	r2, #0
 801797e:	4619      	mov	r1, r3
 8017980:	4814      	ldr	r0, [pc, #80]	; (80179d4 <MX_TIM16_Init+0xe8>)
 8017982:	f006 ff1f 	bl	801e7c4 <HAL_TIM_PWM_ConfigChannel>
 8017986:	4603      	mov	r3, r0
 8017988:	2b00      	cmp	r3, #0
 801798a:	d001      	beq.n	8017990 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 801798c:	f7f2 fa15 	bl	8009dba <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8017990:	2300      	movs	r3, #0
 8017992:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8017994:	2300      	movs	r3, #0
 8017996:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8017998:	2300      	movs	r3, #0
 801799a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 801799c:	2300      	movs	r3, #0
 801799e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80179a0:	2300      	movs	r3, #0
 80179a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80179a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80179a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80179aa:	2300      	movs	r3, #0
 80179ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80179ae:	2300      	movs	r3, #0
 80179b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80179b2:	463b      	mov	r3, r7
 80179b4:	4619      	mov	r1, r3
 80179b6:	4807      	ldr	r0, [pc, #28]	; (80179d4 <MX_TIM16_Init+0xe8>)
 80179b8:	f007 fcc6 	bl	801f348 <HAL_TIMEx_ConfigBreakDeadTime>
 80179bc:	4603      	mov	r3, r0
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d001      	beq.n	80179c6 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 80179c2:	f7f2 f9fa 	bl	8009dba <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80179c6:	4803      	ldr	r0, [pc, #12]	; (80179d4 <MX_TIM16_Init+0xe8>)
 80179c8:	f000 f862 	bl	8017a90 <HAL_TIM_MspPostInit>

}
 80179cc:	bf00      	nop
 80179ce:	3750      	adds	r7, #80	; 0x50
 80179d0:	46bd      	mov	sp, r7
 80179d2:	bd80      	pop	{r7, pc}
 80179d4:	2000ef34 	.word	0x2000ef34
 80179d8:	40014400 	.word	0x40014400

080179dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80179dc:	b580      	push	{r7, lr}
 80179de:	b084      	sub	sp, #16
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	4a16      	ldr	r2, [pc, #88]	; (8017a44 <HAL_TIM_Base_MspInit+0x68>)
 80179ea:	4293      	cmp	r3, r2
 80179ec:	d114      	bne.n	8017a18 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80179ee:	4b16      	ldr	r3, [pc, #88]	; (8017a48 <HAL_TIM_Base_MspInit+0x6c>)
 80179f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80179f2:	4a15      	ldr	r2, [pc, #84]	; (8017a48 <HAL_TIM_Base_MspInit+0x6c>)
 80179f4:	f043 0310 	orr.w	r3, r3, #16
 80179f8:	6593      	str	r3, [r2, #88]	; 0x58
 80179fa:	4b13      	ldr	r3, [pc, #76]	; (8017a48 <HAL_TIM_Base_MspInit+0x6c>)
 80179fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80179fe:	f003 0310 	and.w	r3, r3, #16
 8017a02:	60fb      	str	r3, [r7, #12]
 8017a04:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8017a06:	2200      	movs	r2, #0
 8017a08:	2103      	movs	r1, #3
 8017a0a:	2036      	movs	r0, #54	; 0x36
 8017a0c:	f003 fc57 	bl	801b2be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8017a10:	2036      	movs	r0, #54	; 0x36
 8017a12:	f003 fc6e 	bl	801b2f2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8017a16:	e010      	b.n	8017a3a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	4a0b      	ldr	r2, [pc, #44]	; (8017a4c <HAL_TIM_Base_MspInit+0x70>)
 8017a1e:	4293      	cmp	r3, r2
 8017a20:	d10b      	bne.n	8017a3a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8017a22:	4b09      	ldr	r3, [pc, #36]	; (8017a48 <HAL_TIM_Base_MspInit+0x6c>)
 8017a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017a26:	4a08      	ldr	r2, [pc, #32]	; (8017a48 <HAL_TIM_Base_MspInit+0x6c>)
 8017a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017a2c:	6613      	str	r3, [r2, #96]	; 0x60
 8017a2e:	4b06      	ldr	r3, [pc, #24]	; (8017a48 <HAL_TIM_Base_MspInit+0x6c>)
 8017a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017a36:	60bb      	str	r3, [r7, #8]
 8017a38:	68bb      	ldr	r3, [r7, #8]
}
 8017a3a:	bf00      	nop
 8017a3c:	3710      	adds	r7, #16
 8017a3e:	46bd      	mov	sp, r7
 8017a40:	bd80      	pop	{r7, pc}
 8017a42:	bf00      	nop
 8017a44:	40001000 	.word	0x40001000
 8017a48:	40021000 	.word	0x40021000
 8017a4c:	40014400 	.word	0x40014400

08017a50 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8017a50:	b480      	push	{r7}
 8017a52:	b085      	sub	sp, #20
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	4a0a      	ldr	r2, [pc, #40]	; (8017a88 <HAL_TIM_PWM_MspInit+0x38>)
 8017a5e:	4293      	cmp	r3, r2
 8017a60:	d10b      	bne.n	8017a7a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8017a62:	4b0a      	ldr	r3, [pc, #40]	; (8017a8c <HAL_TIM_PWM_MspInit+0x3c>)
 8017a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017a66:	4a09      	ldr	r2, [pc, #36]	; (8017a8c <HAL_TIM_PWM_MspInit+0x3c>)
 8017a68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017a6c:	6613      	str	r3, [r2, #96]	; 0x60
 8017a6e:	4b07      	ldr	r3, [pc, #28]	; (8017a8c <HAL_TIM_PWM_MspInit+0x3c>)
 8017a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017a72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017a76:	60fb      	str	r3, [r7, #12]
 8017a78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8017a7a:	bf00      	nop
 8017a7c:	3714      	adds	r7, #20
 8017a7e:	46bd      	mov	sp, r7
 8017a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a84:	4770      	bx	lr
 8017a86:	bf00      	nop
 8017a88:	40013400 	.word	0x40013400
 8017a8c:	40021000 	.word	0x40021000

08017a90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b08a      	sub	sp, #40	; 0x28
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017a98:	f107 0314 	add.w	r3, r7, #20
 8017a9c:	2200      	movs	r2, #0
 8017a9e:	601a      	str	r2, [r3, #0]
 8017aa0:	605a      	str	r2, [r3, #4]
 8017aa2:	609a      	str	r2, [r3, #8]
 8017aa4:	60da      	str	r2, [r3, #12]
 8017aa6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	4a2b      	ldr	r2, [pc, #172]	; (8017b5c <HAL_TIM_MspPostInit+0xcc>)
 8017aae:	4293      	cmp	r3, r2
 8017ab0:	d12d      	bne.n	8017b0e <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017ab2:	4b2b      	ldr	r3, [pc, #172]	; (8017b60 <HAL_TIM_MspPostInit+0xd0>)
 8017ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017ab6:	4a2a      	ldr	r2, [pc, #168]	; (8017b60 <HAL_TIM_MspPostInit+0xd0>)
 8017ab8:	f043 0302 	orr.w	r3, r3, #2
 8017abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017abe:	4b28      	ldr	r3, [pc, #160]	; (8017b60 <HAL_TIM_MspPostInit+0xd0>)
 8017ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017ac2:	f003 0302 	and.w	r3, r3, #2
 8017ac6:	613b      	str	r3, [r7, #16]
 8017ac8:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 8017aca:	2340      	movs	r3, #64	; 0x40
 8017acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017ace:	2302      	movs	r3, #2
 8017ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8017ada:	2305      	movs	r3, #5
 8017adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8017ade:	f107 0314 	add.w	r3, r7, #20
 8017ae2:	4619      	mov	r1, r3
 8017ae4:	481f      	ldr	r0, [pc, #124]	; (8017b64 <HAL_TIM_MspPostInit+0xd4>)
 8017ae6:	f004 f953 	bl	801bd90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 8017aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017af0:	2302      	movs	r3, #2
 8017af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017af4:	2300      	movs	r3, #0
 8017af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017af8:	2300      	movs	r3, #0
 8017afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8017afc:	230a      	movs	r3, #10
 8017afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8017b00:	f107 0314 	add.w	r3, r7, #20
 8017b04:	4619      	mov	r1, r3
 8017b06:	4817      	ldr	r0, [pc, #92]	; (8017b64 <HAL_TIM_MspPostInit+0xd4>)
 8017b08:	f004 f942 	bl	801bd90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8017b0c:	e022      	b.n	8017b54 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	4a15      	ldr	r2, [pc, #84]	; (8017b68 <HAL_TIM_MspPostInit+0xd8>)
 8017b14:	4293      	cmp	r3, r2
 8017b16:	d11d      	bne.n	8017b54 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017b18:	4b11      	ldr	r3, [pc, #68]	; (8017b60 <HAL_TIM_MspPostInit+0xd0>)
 8017b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b1c:	4a10      	ldr	r2, [pc, #64]	; (8017b60 <HAL_TIM_MspPostInit+0xd0>)
 8017b1e:	f043 0301 	orr.w	r3, r3, #1
 8017b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017b24:	4b0e      	ldr	r3, [pc, #56]	; (8017b60 <HAL_TIM_MspPostInit+0xd0>)
 8017b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b28:	f003 0301 	and.w	r3, r3, #1
 8017b2c:	60fb      	str	r3, [r7, #12]
 8017b2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 8017b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b36:	2302      	movs	r3, #2
 8017b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b3e:	2300      	movs	r3, #0
 8017b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8017b42:	2301      	movs	r3, #1
 8017b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8017b46:	f107 0314 	add.w	r3, r7, #20
 8017b4a:	4619      	mov	r1, r3
 8017b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017b50:	f004 f91e 	bl	801bd90 <HAL_GPIO_Init>
}
 8017b54:	bf00      	nop
 8017b56:	3728      	adds	r7, #40	; 0x28
 8017b58:	46bd      	mov	sp, r7
 8017b5a:	bd80      	pop	{r7, pc}
 8017b5c:	40013400 	.word	0x40013400
 8017b60:	40021000 	.word	0x40021000
 8017b64:	48000400 	.word	0x48000400
 8017b68:	40014400 	.word	0x40014400

08017b6c <get_center_velocity>:
parameter_speed speed1000_shortest_mollifier;

parameter_speed speed1200_shortest_mollifier;
parameter_speed speed1600_shortest_mollifier;

float get_center_velocity(parameter_speed Howspeed, int pass_number) {
 8017b6c:	b084      	sub	sp, #16
 8017b6e:	b480      	push	{r7}
 8017b70:	b083      	sub	sp, #12
 8017b72:	af00      	add	r7, sp, #0
 8017b74:	f107 0c10 	add.w	ip, r7, #16
 8017b78:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float End_velocity;
	if (pass_number == -2) {
 8017b7c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017b80:	f113 0f02 	cmn.w	r3, #2
 8017b84:	d102      	bne.n	8017b8c <get_center_velocity+0x20>
		End_velocity = Howspeed.slalom_R.g_speed;
 8017b86:	69bb      	ldr	r3, [r7, #24]
 8017b88:	607b      	str	r3, [r7, #4]
 8017b8a:	e083      	b.n	8017c94 <get_center_velocity+0x128>
	} else if (pass_number == -3) {
 8017b8c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017b90:	f113 0f03 	cmn.w	r3, #3
 8017b94:	d102      	bne.n	8017b9c <get_center_velocity+0x30>
		End_velocity = Howspeed.slalom_L.g_speed;
 8017b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b98:	607b      	str	r3, [r7, #4]
 8017b9a:	e07b      	b.n	8017c94 <get_center_velocity+0x128>
	} else if (pass_number == -4) {
 8017b9c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017ba0:	f113 0f04 	cmn.w	r3, #4
 8017ba4:	d102      	bne.n	8017bac <get_center_velocity+0x40>
		End_velocity = Howspeed.turn90_R.g_speed;
 8017ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ba8:	607b      	str	r3, [r7, #4]
 8017baa:	e073      	b.n	8017c94 <get_center_velocity+0x128>
	} else if (pass_number == -5) {
 8017bac:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017bb0:	f113 0f05 	cmn.w	r3, #5
 8017bb4:	d102      	bne.n	8017bbc <get_center_velocity+0x50>
		End_velocity = Howspeed.turn90_L.g_speed;
 8017bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017bb8:	607b      	str	r3, [r7, #4]
 8017bba:	e06b      	b.n	8017c94 <get_center_velocity+0x128>
	} else if (pass_number == -6) {
 8017bbc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017bc0:	f113 0f06 	cmn.w	r3, #6
 8017bc4:	d102      	bne.n	8017bcc <get_center_velocity+0x60>
		End_velocity = Howspeed.turn180_R.g_speed;
 8017bc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017bc8:	607b      	str	r3, [r7, #4]
 8017bca:	e063      	b.n	8017c94 <get_center_velocity+0x128>
	} else if (pass_number == -7) {
 8017bcc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017bd0:	f113 0f07 	cmn.w	r3, #7
 8017bd4:	d102      	bne.n	8017bdc <get_center_velocity+0x70>
		End_velocity = Howspeed.turn180_L.g_speed;
 8017bd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017bd8:	607b      	str	r3, [r7, #4]
 8017bda:	e05b      	b.n	8017c94 <get_center_velocity+0x128>
	} else if (pass_number == -8) {
 8017bdc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017be0:	f113 0f08 	cmn.w	r3, #8
 8017be4:	d103      	bne.n	8017bee <get_center_velocity+0x82>
		End_velocity = Howspeed.turn45in_R.g_speed;
 8017be6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017bea:	607b      	str	r3, [r7, #4]
 8017bec:	e052      	b.n	8017c94 <get_center_velocity+0x128>
	} else if (pass_number == -9) {
 8017bee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017bf2:	f113 0f09 	cmn.w	r3, #9
 8017bf6:	d103      	bne.n	8017c00 <get_center_velocity+0x94>
		End_velocity = Howspeed.turn45in_L.g_speed;
 8017bf8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017bfc:	607b      	str	r3, [r7, #4]
 8017bfe:	e049      	b.n	8017c94 <get_center_velocity+0x128>
	} else if (pass_number == -10) {
 8017c00:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c04:	f113 0f0a 	cmn.w	r3, #10
 8017c08:	d103      	bne.n	8017c12 <get_center_velocity+0xa6>
		End_velocity = Howspeed.turn135in_R.g_speed;
 8017c0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017c0e:	607b      	str	r3, [r7, #4]
 8017c10:	e040      	b.n	8017c94 <get_center_velocity+0x128>
	} else if (pass_number == -11) {
 8017c12:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c16:	f113 0f0b 	cmn.w	r3, #11
 8017c1a:	d103      	bne.n	8017c24 <get_center_velocity+0xb8>
		End_velocity = Howspeed.turn135in_L.g_speed;
 8017c1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017c20:	607b      	str	r3, [r7, #4]
 8017c22:	e037      	b.n	8017c94 <get_center_velocity+0x128>
	} else if (pass_number == -12) {
 8017c24:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c28:	f113 0f0c 	cmn.w	r3, #12
 8017c2c:	d103      	bne.n	8017c36 <get_center_velocity+0xca>
		End_velocity = Howspeed.turn45out_R.g_speed;
 8017c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017c32:	607b      	str	r3, [r7, #4]
 8017c34:	e02e      	b.n	8017c94 <get_center_velocity+0x128>
	} else if (pass_number == -13) {
 8017c36:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c3a:	f113 0f0d 	cmn.w	r3, #13
 8017c3e:	d103      	bne.n	8017c48 <get_center_velocity+0xdc>
		End_velocity = Howspeed.turn45out_L.g_speed;
 8017c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017c44:	607b      	str	r3, [r7, #4]
 8017c46:	e025      	b.n	8017c94 <get_center_velocity+0x128>
	} else if (pass_number == -14) {
 8017c48:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c4c:	f113 0f0e 	cmn.w	r3, #14
 8017c50:	d103      	bne.n	8017c5a <get_center_velocity+0xee>
		End_velocity = Howspeed.turn135out_R.g_speed;
 8017c52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8017c56:	607b      	str	r3, [r7, #4]
 8017c58:	e01c      	b.n	8017c94 <get_center_velocity+0x128>
	} else if (pass_number == -15) {
 8017c5a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c5e:	f113 0f0f 	cmn.w	r3, #15
 8017c62:	d103      	bne.n	8017c6c <get_center_velocity+0x100>
		End_velocity = Howspeed.turn135out_L.g_speed;
 8017c64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017c68:	607b      	str	r3, [r7, #4]
 8017c6a:	e013      	b.n	8017c94 <get_center_velocity+0x128>
	} else if (pass_number == -16) {
 8017c6c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c70:	f113 0f10 	cmn.w	r3, #16
 8017c74:	d103      	bne.n	8017c7e <get_center_velocity+0x112>
		End_velocity = Howspeed.V90_R.g_speed;
 8017c76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8017c7a:	607b      	str	r3, [r7, #4]
 8017c7c:	e00a      	b.n	8017c94 <get_center_velocity+0x128>
	} else if (pass_number == -17) {
 8017c7e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c82:	f113 0f11 	cmn.w	r3, #17
 8017c86:	d103      	bne.n	8017c90 <get_center_velocity+0x124>
		End_velocity = Howspeed.V90_L.g_speed;
 8017c88:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017c8c:	607b      	str	r3, [r7, #4]
 8017c8e:	e001      	b.n	8017c94 <get_center_velocity+0x128>
	} else {
		End_velocity = Howspeed.TurnCentervelocity;
 8017c90:	697b      	ldr	r3, [r7, #20]
 8017c92:	607b      	str	r3, [r7, #4]
	}

	return End_velocity;
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	ee07 3a90 	vmov	s15, r3
}
 8017c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8017c9e:	370c      	adds	r7, #12
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca6:	b004      	add	sp, #16
 8017ca8:	4770      	bx	lr
	...

08017cac <input_parameter>:

void input_parameter(void) {
 8017cac:	b480      	push	{r7}
 8017cae:	af00      	add	r7, sp, #0

	speed300_exploration.SlalomCentervelocity = 300;
 8017cb0:	4b8f      	ldr	r3, [pc, #572]	; (8017ef0 <input_parameter+0x244>)
 8017cb2:	4a90      	ldr	r2, [pc, #576]	; (8017ef4 <input_parameter+0x248>)
 8017cb4:	601a      	str	r2, [r3, #0]
	speed300_exploration.TurnCentervelocity = 300;
 8017cb6:	4b8e      	ldr	r3, [pc, #568]	; (8017ef0 <input_parameter+0x244>)
 8017cb8:	4a8e      	ldr	r2, [pc, #568]	; (8017ef4 <input_parameter+0x248>)
 8017cba:	605a      	str	r2, [r3, #4]

	speed300_exploration.slalom_R.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8017cbc:	4b8c      	ldr	r3, [pc, #560]	; (8017ef0 <input_parameter+0x244>)
 8017cbe:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_R.g_speed =
 8017cc0:	4a8b      	ldr	r2, [pc, #556]	; (8017ef0 <input_parameter+0x244>)
 8017cc2:	6093      	str	r3, [r2, #8]
	speed300_exploration.slalom_R.t_speed = 980; //550
 8017cc4:	4b8a      	ldr	r3, [pc, #552]	; (8017ef0 <input_parameter+0x244>)
 8017cc6:	4a8c      	ldr	r2, [pc, #560]	; (8017ef8 <input_parameter+0x24c>)
 8017cc8:	615a      	str	r2, [r3, #20]
	speed300_exploration.slalom_R.t_acc = 13000; //10000
 8017cca:	4b89      	ldr	r3, [pc, #548]	; (8017ef0 <input_parameter+0x244>)
 8017ccc:	4a8b      	ldr	r2, [pc, #556]	; (8017efc <input_parameter+0x250>)
 8017cce:	619a      	str	r2, [r3, #24]
	speed300_exploration.slalom_R.f_ofset = 3; //55;
 8017cd0:	4b87      	ldr	r3, [pc, #540]	; (8017ef0 <input_parameter+0x244>)
 8017cd2:	4a8b      	ldr	r2, [pc, #556]	; (8017f00 <input_parameter+0x254>)
 8017cd4:	60da      	str	r2, [r3, #12]
	speed300_exploration.slalom_R.e_ofset = 20;
 8017cd6:	4b86      	ldr	r3, [pc, #536]	; (8017ef0 <input_parameter+0x244>)
 8017cd8:	4a8a      	ldr	r2, [pc, #552]	; (8017f04 <input_parameter+0x258>)
 8017cda:	611a      	str	r2, [r3, #16]

	speed300_exploration.slalom_L.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8017cdc:	4b84      	ldr	r3, [pc, #528]	; (8017ef0 <input_parameter+0x244>)
 8017cde:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_L.g_speed =
 8017ce0:	4a83      	ldr	r2, [pc, #524]	; (8017ef0 <input_parameter+0x244>)
 8017ce2:	61d3      	str	r3, [r2, #28]
	speed300_exploration.slalom_L.t_speed = 980;
 8017ce4:	4b82      	ldr	r3, [pc, #520]	; (8017ef0 <input_parameter+0x244>)
 8017ce6:	4a84      	ldr	r2, [pc, #528]	; (8017ef8 <input_parameter+0x24c>)
 8017ce8:	629a      	str	r2, [r3, #40]	; 0x28
	speed300_exploration.slalom_L.t_acc = 13000;
 8017cea:	4b81      	ldr	r3, [pc, #516]	; (8017ef0 <input_parameter+0x244>)
 8017cec:	4a83      	ldr	r2, [pc, #524]	; (8017efc <input_parameter+0x250>)
 8017cee:	62da      	str	r2, [r3, #44]	; 0x2c
	speed300_exploration.slalom_L.f_ofset = 2; //50;
 8017cf0:	4b7f      	ldr	r3, [pc, #508]	; (8017ef0 <input_parameter+0x244>)
 8017cf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017cf6:	621a      	str	r2, [r3, #32]
	speed300_exploration.slalom_L.e_ofset = 19;
 8017cf8:	4b7d      	ldr	r3, [pc, #500]	; (8017ef0 <input_parameter+0x244>)
 8017cfa:	4a83      	ldr	r2, [pc, #524]	; (8017f08 <input_parameter+0x25c>)
 8017cfc:	625a      	str	r2, [r3, #36]	; 0x24



	speed250_exploration.SlalomCentervelocity = 250;
 8017cfe:	4b83      	ldr	r3, [pc, #524]	; (8017f0c <input_parameter+0x260>)
 8017d00:	4a83      	ldr	r2, [pc, #524]	; (8017f10 <input_parameter+0x264>)
 8017d02:	601a      	str	r2, [r3, #0]
	speed250_exploration.TurnCentervelocity = 250;
 8017d04:	4b81      	ldr	r3, [pc, #516]	; (8017f0c <input_parameter+0x260>)
 8017d06:	4a82      	ldr	r2, [pc, #520]	; (8017f10 <input_parameter+0x264>)
 8017d08:	605a      	str	r2, [r3, #4]

	speed250_exploration.slalom_R.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8017d0a:	4b80      	ldr	r3, [pc, #512]	; (8017f0c <input_parameter+0x260>)
 8017d0c:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_R.g_speed =
 8017d0e:	4a7f      	ldr	r2, [pc, #508]	; (8017f0c <input_parameter+0x260>)
 8017d10:	6093      	str	r3, [r2, #8]
	speed250_exploration.slalom_R.t_speed = 830; //550
 8017d12:	4b7e      	ldr	r3, [pc, #504]	; (8017f0c <input_parameter+0x260>)
 8017d14:	4a7f      	ldr	r2, [pc, #508]	; (8017f14 <input_parameter+0x268>)
 8017d16:	615a      	str	r2, [r3, #20]
	speed250_exploration.slalom_R.t_acc = 9000; //10000
 8017d18:	4b7c      	ldr	r3, [pc, #496]	; (8017f0c <input_parameter+0x260>)
 8017d1a:	4a7f      	ldr	r2, [pc, #508]	; (8017f18 <input_parameter+0x26c>)
 8017d1c:	619a      	str	r2, [r3, #24]
	speed250_exploration.slalom_R.f_ofset = 0.5; //55;
 8017d1e:	4b7b      	ldr	r3, [pc, #492]	; (8017f0c <input_parameter+0x260>)
 8017d20:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017d24:	60da      	str	r2, [r3, #12]
	speed250_exploration.slalom_R.e_ofset = 20;
 8017d26:	4b79      	ldr	r3, [pc, #484]	; (8017f0c <input_parameter+0x260>)
 8017d28:	4a76      	ldr	r2, [pc, #472]	; (8017f04 <input_parameter+0x258>)
 8017d2a:	611a      	str	r2, [r3, #16]

	speed250_exploration.slalom_L.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8017d2c:	4b77      	ldr	r3, [pc, #476]	; (8017f0c <input_parameter+0x260>)
 8017d2e:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_L.g_speed =
 8017d30:	4a76      	ldr	r2, [pc, #472]	; (8017f0c <input_parameter+0x260>)
 8017d32:	61d3      	str	r3, [r2, #28]
	speed250_exploration.slalom_L.t_speed = 730;
 8017d34:	4b75      	ldr	r3, [pc, #468]	; (8017f0c <input_parameter+0x260>)
 8017d36:	4a79      	ldr	r2, [pc, #484]	; (8017f1c <input_parameter+0x270>)
 8017d38:	629a      	str	r2, [r3, #40]	; 0x28
	speed250_exploration.slalom_L.t_acc = 9000;
 8017d3a:	4b74      	ldr	r3, [pc, #464]	; (8017f0c <input_parameter+0x260>)
 8017d3c:	4a76      	ldr	r2, [pc, #472]	; (8017f18 <input_parameter+0x26c>)
 8017d3e:	62da      	str	r2, [r3, #44]	; 0x2c
	speed250_exploration.slalom_L.f_ofset = 0.5; //50;
 8017d40:	4b72      	ldr	r3, [pc, #456]	; (8017f0c <input_parameter+0x260>)
 8017d42:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017d46:	621a      	str	r2, [r3, #32]
	speed250_exploration.slalom_L.e_ofset = 19;
 8017d48:	4b70      	ldr	r3, [pc, #448]	; (8017f0c <input_parameter+0x260>)
 8017d4a:	4a6f      	ldr	r2, [pc, #444]	; (8017f08 <input_parameter+0x25c>)
 8017d4c:	625a      	str	r2, [r3, #36]	; 0x24


	speed300_shortest.SlalomCentervelocity =
			speed300_exploration.SlalomCentervelocity;
 8017d4e:	4b68      	ldr	r3, [pc, #416]	; (8017ef0 <input_parameter+0x244>)
 8017d50:	681b      	ldr	r3, [r3, #0]
	speed300_shortest.SlalomCentervelocity =
 8017d52:	4a73      	ldr	r2, [pc, #460]	; (8017f20 <input_parameter+0x274>)
 8017d54:	6013      	str	r3, [r2, #0]
	speed300_shortest.TurnCentervelocity =
			speed300_exploration.TurnCentervelocity + 200;
 8017d56:	4b66      	ldr	r3, [pc, #408]	; (8017ef0 <input_parameter+0x244>)
 8017d58:	edd3 7a01 	vldr	s15, [r3, #4]
 8017d5c:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8017f24 <input_parameter+0x278>
 8017d60:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.TurnCentervelocity =
 8017d64:	4b6e      	ldr	r3, [pc, #440]	; (8017f20 <input_parameter+0x274>)
 8017d66:	edc3 7a01 	vstr	s15, [r3, #4]

	speed300_shortest.slalom_R.g_speed = speed300_exploration.slalom_R.g_speed;
 8017d6a:	4b61      	ldr	r3, [pc, #388]	; (8017ef0 <input_parameter+0x244>)
 8017d6c:	689b      	ldr	r3, [r3, #8]
 8017d6e:	4a6c      	ldr	r2, [pc, #432]	; (8017f20 <input_parameter+0x274>)
 8017d70:	6093      	str	r3, [r2, #8]
	speed300_shortest.slalom_R.t_speed = speed300_exploration.slalom_R.t_speed;
 8017d72:	4b5f      	ldr	r3, [pc, #380]	; (8017ef0 <input_parameter+0x244>)
 8017d74:	695b      	ldr	r3, [r3, #20]
 8017d76:	4a6a      	ldr	r2, [pc, #424]	; (8017f20 <input_parameter+0x274>)
 8017d78:	6153      	str	r3, [r2, #20]
	speed300_shortest.slalom_R.t_acc = speed300_exploration.slalom_R.t_acc;
 8017d7a:	4b5d      	ldr	r3, [pc, #372]	; (8017ef0 <input_parameter+0x244>)
 8017d7c:	699b      	ldr	r3, [r3, #24]
 8017d7e:	4a68      	ldr	r2, [pc, #416]	; (8017f20 <input_parameter+0x274>)
 8017d80:	6193      	str	r3, [r2, #24]
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8017d82:	4b5b      	ldr	r3, [pc, #364]	; (8017ef0 <input_parameter+0x244>)
 8017d84:	edd3 7a03 	vldr	s15, [r3, #12]
			+ MAZE_OFFSET; //55;
 8017d88:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8017d8c:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8017d90:	4b63      	ldr	r3, [pc, #396]	; (8017f20 <input_parameter+0x274>)
 8017d92:	edc3 7a03 	vstr	s15, [r3, #12]
	speed300_shortest.slalom_R.e_ofset = speed300_exploration.slalom_R.e_ofset;
 8017d96:	4b56      	ldr	r3, [pc, #344]	; (8017ef0 <input_parameter+0x244>)
 8017d98:	691b      	ldr	r3, [r3, #16]
 8017d9a:	4a61      	ldr	r2, [pc, #388]	; (8017f20 <input_parameter+0x274>)
 8017d9c:	6113      	str	r3, [r2, #16]

	speed300_shortest.slalom_L.g_speed = speed300_exploration.slalom_L.g_speed;
 8017d9e:	4b54      	ldr	r3, [pc, #336]	; (8017ef0 <input_parameter+0x244>)
 8017da0:	69db      	ldr	r3, [r3, #28]
 8017da2:	4a5f      	ldr	r2, [pc, #380]	; (8017f20 <input_parameter+0x274>)
 8017da4:	61d3      	str	r3, [r2, #28]
	speed300_shortest.slalom_L.t_speed = speed300_exploration.slalom_L.t_speed;
 8017da6:	4b52      	ldr	r3, [pc, #328]	; (8017ef0 <input_parameter+0x244>)
 8017da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017daa:	4a5d      	ldr	r2, [pc, #372]	; (8017f20 <input_parameter+0x274>)
 8017dac:	6293      	str	r3, [r2, #40]	; 0x28
	speed300_shortest.slalom_L.t_acc = speed300_exploration.slalom_L.t_acc;
 8017dae:	4b50      	ldr	r3, [pc, #320]	; (8017ef0 <input_parameter+0x244>)
 8017db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017db2:	4a5b      	ldr	r2, [pc, #364]	; (8017f20 <input_parameter+0x274>)
 8017db4:	62d3      	str	r3, [r2, #44]	; 0x2c
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8017db6:	4b4e      	ldr	r3, [pc, #312]	; (8017ef0 <input_parameter+0x244>)
 8017db8:	edd3 7a08 	vldr	s15, [r3, #32]
			+ MAZE_OFFSET; //50;
 8017dbc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8017dc0:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8017dc4:	4b56      	ldr	r3, [pc, #344]	; (8017f20 <input_parameter+0x274>)
 8017dc6:	edc3 7a08 	vstr	s15, [r3, #32]
	speed300_shortest.slalom_L.e_ofset = speed300_exploration.slalom_L.e_ofset;
 8017dca:	4b49      	ldr	r3, [pc, #292]	; (8017ef0 <input_parameter+0x244>)
 8017dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dce:	4a54      	ldr	r2, [pc, #336]	; (8017f20 <input_parameter+0x274>)
 8017dd0:	6253      	str	r3, [r2, #36]	; 0x24

	speed300_shortest.turn90_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017dd2:	4b53      	ldr	r3, [pc, #332]	; (8017f20 <input_parameter+0x274>)
 8017dd4:	685b      	ldr	r3, [r3, #4]
 8017dd6:	4a52      	ldr	r2, [pc, #328]	; (8017f20 <input_parameter+0x274>)
 8017dd8:	6313      	str	r3, [r2, #48]	; 0x30
	speed300_shortest.turn90_R.t_speed = 600;
 8017dda:	4b51      	ldr	r3, [pc, #324]	; (8017f20 <input_parameter+0x274>)
 8017ddc:	4a52      	ldr	r2, [pc, #328]	; (8017f28 <input_parameter+0x27c>)
 8017dde:	63da      	str	r2, [r3, #60]	; 0x3c
	speed300_shortest.turn90_R.t_acc = 10000;
 8017de0:	4b4f      	ldr	r3, [pc, #316]	; (8017f20 <input_parameter+0x274>)
 8017de2:	4a52      	ldr	r2, [pc, #328]	; (8017f2c <input_parameter+0x280>)
 8017de4:	641a      	str	r2, [r3, #64]	; 0x40
	speed300_shortest.turn90_R.f_ofset = 76;
 8017de6:	4b4e      	ldr	r3, [pc, #312]	; (8017f20 <input_parameter+0x274>)
 8017de8:	4a51      	ldr	r2, [pc, #324]	; (8017f30 <input_parameter+0x284>)
 8017dea:	635a      	str	r2, [r3, #52]	; 0x34
	speed300_shortest.turn90_R.e_ofset = 107;
 8017dec:	4b4c      	ldr	r3, [pc, #304]	; (8017f20 <input_parameter+0x274>)
 8017dee:	4a51      	ldr	r2, [pc, #324]	; (8017f34 <input_parameter+0x288>)
 8017df0:	639a      	str	r2, [r3, #56]	; 0x38

	speed300_shortest.turn90_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017df2:	4b4b      	ldr	r3, [pc, #300]	; (8017f20 <input_parameter+0x274>)
 8017df4:	685b      	ldr	r3, [r3, #4]
 8017df6:	4a4a      	ldr	r2, [pc, #296]	; (8017f20 <input_parameter+0x274>)
 8017df8:	6453      	str	r3, [r2, #68]	; 0x44
	speed300_shortest.turn90_L.t_speed = 600;
 8017dfa:	4b49      	ldr	r3, [pc, #292]	; (8017f20 <input_parameter+0x274>)
 8017dfc:	4a4a      	ldr	r2, [pc, #296]	; (8017f28 <input_parameter+0x27c>)
 8017dfe:	651a      	str	r2, [r3, #80]	; 0x50
	speed300_shortest.turn90_L.t_acc = 10000;
 8017e00:	4b47      	ldr	r3, [pc, #284]	; (8017f20 <input_parameter+0x274>)
 8017e02:	4a4a      	ldr	r2, [pc, #296]	; (8017f2c <input_parameter+0x280>)
 8017e04:	655a      	str	r2, [r3, #84]	; 0x54
	speed300_shortest.turn90_L.f_ofset = 77;
 8017e06:	4b46      	ldr	r3, [pc, #280]	; (8017f20 <input_parameter+0x274>)
 8017e08:	4a4b      	ldr	r2, [pc, #300]	; (8017f38 <input_parameter+0x28c>)
 8017e0a:	649a      	str	r2, [r3, #72]	; 0x48
	speed300_shortest.turn90_L.e_ofset = 103;
 8017e0c:	4b44      	ldr	r3, [pc, #272]	; (8017f20 <input_parameter+0x274>)
 8017e0e:	4a4b      	ldr	r2, [pc, #300]	; (8017f3c <input_parameter+0x290>)
 8017e10:	64da      	str	r2, [r3, #76]	; 0x4c

	speed300_shortest.turn180_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017e12:	4b43      	ldr	r3, [pc, #268]	; (8017f20 <input_parameter+0x274>)
 8017e14:	685b      	ldr	r3, [r3, #4]
 8017e16:	4a42      	ldr	r2, [pc, #264]	; (8017f20 <input_parameter+0x274>)
 8017e18:	6593      	str	r3, [r2, #88]	; 0x58
	speed300_shortest.turn180_R.t_speed = 430;
 8017e1a:	4b41      	ldr	r3, [pc, #260]	; (8017f20 <input_parameter+0x274>)
 8017e1c:	4a48      	ldr	r2, [pc, #288]	; (8017f40 <input_parameter+0x294>)
 8017e1e:	665a      	str	r2, [r3, #100]	; 0x64
	speed300_shortest.turn180_R.t_acc = 8000;
 8017e20:	4b3f      	ldr	r3, [pc, #252]	; (8017f20 <input_parameter+0x274>)
 8017e22:	4a48      	ldr	r2, [pc, #288]	; (8017f44 <input_parameter+0x298>)
 8017e24:	669a      	str	r2, [r3, #104]	; 0x68
	speed300_shortest.turn180_R.f_ofset = 65;
 8017e26:	4b3e      	ldr	r3, [pc, #248]	; (8017f20 <input_parameter+0x274>)
 8017e28:	4a47      	ldr	r2, [pc, #284]	; (8017f48 <input_parameter+0x29c>)
 8017e2a:	65da      	str	r2, [r3, #92]	; 0x5c
	speed300_shortest.turn180_R.e_ofset = 80;
 8017e2c:	4b3c      	ldr	r3, [pc, #240]	; (8017f20 <input_parameter+0x274>)
 8017e2e:	4a47      	ldr	r2, [pc, #284]	; (8017f4c <input_parameter+0x2a0>)
 8017e30:	661a      	str	r2, [r3, #96]	; 0x60

	speed300_shortest.turn180_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017e32:	4b3b      	ldr	r3, [pc, #236]	; (8017f20 <input_parameter+0x274>)
 8017e34:	685b      	ldr	r3, [r3, #4]
 8017e36:	4a3a      	ldr	r2, [pc, #232]	; (8017f20 <input_parameter+0x274>)
 8017e38:	66d3      	str	r3, [r2, #108]	; 0x6c
	speed300_shortest.turn180_L.t_speed = 450;
 8017e3a:	4b39      	ldr	r3, [pc, #228]	; (8017f20 <input_parameter+0x274>)
 8017e3c:	4a44      	ldr	r2, [pc, #272]	; (8017f50 <input_parameter+0x2a4>)
 8017e3e:	679a      	str	r2, [r3, #120]	; 0x78
	speed300_shortest.turn180_L.t_acc = 8000;
 8017e40:	4b37      	ldr	r3, [pc, #220]	; (8017f20 <input_parameter+0x274>)
 8017e42:	4a40      	ldr	r2, [pc, #256]	; (8017f44 <input_parameter+0x298>)
 8017e44:	67da      	str	r2, [r3, #124]	; 0x7c
	speed300_shortest.turn180_L.f_ofset = 60;
 8017e46:	4b36      	ldr	r3, [pc, #216]	; (8017f20 <input_parameter+0x274>)
 8017e48:	4a42      	ldr	r2, [pc, #264]	; (8017f54 <input_parameter+0x2a8>)
 8017e4a:	671a      	str	r2, [r3, #112]	; 0x70
	speed300_shortest.turn180_L.e_ofset = 71;
 8017e4c:	4b34      	ldr	r3, [pc, #208]	; (8017f20 <input_parameter+0x274>)
 8017e4e:	4a42      	ldr	r2, [pc, #264]	; (8017f58 <input_parameter+0x2ac>)
 8017e50:	675a      	str	r2, [r3, #116]	; 0x74

	speed300_shortest.turn45in_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017e52:	4b33      	ldr	r3, [pc, #204]	; (8017f20 <input_parameter+0x274>)
 8017e54:	685b      	ldr	r3, [r3, #4]
 8017e56:	4a32      	ldr	r2, [pc, #200]	; (8017f20 <input_parameter+0x274>)
 8017e58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	speed300_shortest.turn45in_R.t_speed = 600;
 8017e5c:	4b30      	ldr	r3, [pc, #192]	; (8017f20 <input_parameter+0x274>)
 8017e5e:	4a32      	ldr	r2, [pc, #200]	; (8017f28 <input_parameter+0x27c>)
 8017e60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed300_shortest.turn45in_R.t_acc = 10000;
 8017e64:	4b2e      	ldr	r3, [pc, #184]	; (8017f20 <input_parameter+0x274>)
 8017e66:	4a31      	ldr	r2, [pc, #196]	; (8017f2c <input_parameter+0x280>)
 8017e68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed300_shortest.turn45in_R.f_ofset = 27;
 8017e6c:	4b2c      	ldr	r3, [pc, #176]	; (8017f20 <input_parameter+0x274>)
 8017e6e:	4a3b      	ldr	r2, [pc, #236]	; (8017f5c <input_parameter+0x2b0>)
 8017e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed300_shortest.turn45in_R.e_ofset = 89;
 8017e74:	4b2a      	ldr	r3, [pc, #168]	; (8017f20 <input_parameter+0x274>)
 8017e76:	4a3a      	ldr	r2, [pc, #232]	; (8017f60 <input_parameter+0x2b4>)
 8017e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed300_shortest.turn45in_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017e7c:	4b28      	ldr	r3, [pc, #160]	; (8017f20 <input_parameter+0x274>)
 8017e7e:	685b      	ldr	r3, [r3, #4]
 8017e80:	4a27      	ldr	r2, [pc, #156]	; (8017f20 <input_parameter+0x274>)
 8017e82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	speed300_shortest.turn45in_L.t_speed = 600;
 8017e86:	4b26      	ldr	r3, [pc, #152]	; (8017f20 <input_parameter+0x274>)
 8017e88:	4a27      	ldr	r2, [pc, #156]	; (8017f28 <input_parameter+0x27c>)
 8017e8a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed300_shortest.turn45in_L.t_acc = 10000;
 8017e8e:	4b24      	ldr	r3, [pc, #144]	; (8017f20 <input_parameter+0x274>)
 8017e90:	4a26      	ldr	r2, [pc, #152]	; (8017f2c <input_parameter+0x280>)
 8017e92:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed300_shortest.turn45in_L.f_ofset = 33;
 8017e96:	4b22      	ldr	r3, [pc, #136]	; (8017f20 <input_parameter+0x274>)
 8017e98:	4a32      	ldr	r2, [pc, #200]	; (8017f64 <input_parameter+0x2b8>)
 8017e9a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed300_shortest.turn45in_L.e_ofset = 90;
 8017e9e:	4b20      	ldr	r3, [pc, #128]	; (8017f20 <input_parameter+0x274>)
 8017ea0:	4a31      	ldr	r2, [pc, #196]	; (8017f68 <input_parameter+0x2bc>)
 8017ea2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed300_shortest.turn135in_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017ea6:	4b1e      	ldr	r3, [pc, #120]	; (8017f20 <input_parameter+0x274>)
 8017ea8:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_R.g_speed =
 8017eaa:	4a1d      	ldr	r2, [pc, #116]	; (8017f20 <input_parameter+0x274>)
 8017eac:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	speed300_shortest.turn135in_R.t_speed = 610;
 8017eb0:	4b1b      	ldr	r3, [pc, #108]	; (8017f20 <input_parameter+0x274>)
 8017eb2:	4a2e      	ldr	r2, [pc, #184]	; (8017f6c <input_parameter+0x2c0>)
 8017eb4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed300_shortest.turn135in_R.t_acc = 8000;
 8017eb8:	4b19      	ldr	r3, [pc, #100]	; (8017f20 <input_parameter+0x274>)
 8017eba:	4a22      	ldr	r2, [pc, #136]	; (8017f44 <input_parameter+0x298>)
 8017ebc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed300_shortest.turn135in_R.f_ofset = 67;
 8017ec0:	4b17      	ldr	r3, [pc, #92]	; (8017f20 <input_parameter+0x274>)
 8017ec2:	4a2b      	ldr	r2, [pc, #172]	; (8017f70 <input_parameter+0x2c4>)
 8017ec4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed300_shortest.turn135in_R.e_ofset = 73;
 8017ec8:	4b15      	ldr	r3, [pc, #84]	; (8017f20 <input_parameter+0x274>)
 8017eca:	4a2a      	ldr	r2, [pc, #168]	; (8017f74 <input_parameter+0x2c8>)
 8017ecc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed300_shortest.turn135in_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017ed0:	4b13      	ldr	r3, [pc, #76]	; (8017f20 <input_parameter+0x274>)
 8017ed2:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_L.g_speed =
 8017ed4:	4a12      	ldr	r2, [pc, #72]	; (8017f20 <input_parameter+0x274>)
 8017ed6:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	speed300_shortest.turn135in_L.t_speed = 610;
 8017eda:	4b11      	ldr	r3, [pc, #68]	; (8017f20 <input_parameter+0x274>)
 8017edc:	4a23      	ldr	r2, [pc, #140]	; (8017f6c <input_parameter+0x2c0>)
 8017ede:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed300_shortest.turn135in_L.t_acc = 8000;
 8017ee2:	4b0f      	ldr	r3, [pc, #60]	; (8017f20 <input_parameter+0x274>)
 8017ee4:	4a17      	ldr	r2, [pc, #92]	; (8017f44 <input_parameter+0x298>)
 8017ee6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed300_shortest.turn135in_L.f_ofset = 67;
 8017eea:	4b0d      	ldr	r3, [pc, #52]	; (8017f20 <input_parameter+0x274>)
 8017eec:	e044      	b.n	8017f78 <input_parameter+0x2cc>
 8017eee:	bf00      	nop
 8017ef0:	2000ef80 	.word	0x2000ef80
 8017ef4:	43960000 	.word	0x43960000
 8017ef8:	44750000 	.word	0x44750000
 8017efc:	464b2000 	.word	0x464b2000
 8017f00:	40400000 	.word	0x40400000
 8017f04:	41a00000 	.word	0x41a00000
 8017f08:	41980000 	.word	0x41980000
 8017f0c:	2000f0c8 	.word	0x2000f0c8
 8017f10:	437a0000 	.word	0x437a0000
 8017f14:	444f8000 	.word	0x444f8000
 8017f18:	460ca000 	.word	0x460ca000
 8017f1c:	44368000 	.word	0x44368000
 8017f20:	2000f210 	.word	0x2000f210
 8017f24:	43480000 	.word	0x43480000
 8017f28:	44160000 	.word	0x44160000
 8017f2c:	461c4000 	.word	0x461c4000
 8017f30:	42980000 	.word	0x42980000
 8017f34:	42d60000 	.word	0x42d60000
 8017f38:	429a0000 	.word	0x429a0000
 8017f3c:	42ce0000 	.word	0x42ce0000
 8017f40:	43d70000 	.word	0x43d70000
 8017f44:	45fa0000 	.word	0x45fa0000
 8017f48:	42820000 	.word	0x42820000
 8017f4c:	42a00000 	.word	0x42a00000
 8017f50:	43e10000 	.word	0x43e10000
 8017f54:	42700000 	.word	0x42700000
 8017f58:	428e0000 	.word	0x428e0000
 8017f5c:	41d80000 	.word	0x41d80000
 8017f60:	42b20000 	.word	0x42b20000
 8017f64:	42040000 	.word	0x42040000
 8017f68:	42b40000 	.word	0x42b40000
 8017f6c:	44188000 	.word	0x44188000
 8017f70:	42860000 	.word	0x42860000
 8017f74:	42920000 	.word	0x42920000
 8017f78:	4a99      	ldr	r2, [pc, #612]	; (80181e0 <input_parameter+0x534>)
 8017f7a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed300_shortest.turn135in_L.e_ofset = 73;
 8017f7e:	4b99      	ldr	r3, [pc, #612]	; (80181e4 <input_parameter+0x538>)
 8017f80:	4a99      	ldr	r2, [pc, #612]	; (80181e8 <input_parameter+0x53c>)
 8017f82:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed300_shortest.turn45out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017f86:	4b97      	ldr	r3, [pc, #604]	; (80181e4 <input_parameter+0x538>)
 8017f88:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_R.g_speed =
 8017f8a:	4a96      	ldr	r2, [pc, #600]	; (80181e4 <input_parameter+0x538>)
 8017f8c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	speed300_shortest.turn45out_R.t_speed = 600;
 8017f90:	4b94      	ldr	r3, [pc, #592]	; (80181e4 <input_parameter+0x538>)
 8017f92:	4a96      	ldr	r2, [pc, #600]	; (80181ec <input_parameter+0x540>)
 8017f94:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed300_shortest.turn45out_R.t_acc = 10000;
 8017f98:	4b92      	ldr	r3, [pc, #584]	; (80181e4 <input_parameter+0x538>)
 8017f9a:	4a95      	ldr	r2, [pc, #596]	; (80181f0 <input_parameter+0x544>)
 8017f9c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed300_shortest.turn45out_R.f_ofset = 57;
 8017fa0:	4b90      	ldr	r3, [pc, #576]	; (80181e4 <input_parameter+0x538>)
 8017fa2:	4a94      	ldr	r2, [pc, #592]	; (80181f4 <input_parameter+0x548>)
 8017fa4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed300_shortest.turn45out_R.e_ofset = 57;
 8017fa8:	4b8e      	ldr	r3, [pc, #568]	; (80181e4 <input_parameter+0x538>)
 8017faa:	4a92      	ldr	r2, [pc, #584]	; (80181f4 <input_parameter+0x548>)
 8017fac:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed300_shortest.turn45out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017fb0:	4b8c      	ldr	r3, [pc, #560]	; (80181e4 <input_parameter+0x538>)
 8017fb2:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_L.g_speed =
 8017fb4:	4a8b      	ldr	r2, [pc, #556]	; (80181e4 <input_parameter+0x538>)
 8017fb6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	speed300_shortest.turn45out_L.t_speed = 600;
 8017fba:	4b8a      	ldr	r3, [pc, #552]	; (80181e4 <input_parameter+0x538>)
 8017fbc:	4a8b      	ldr	r2, [pc, #556]	; (80181ec <input_parameter+0x540>)
 8017fbe:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed300_shortest.turn45out_L.t_acc = 10000;
 8017fc2:	4b88      	ldr	r3, [pc, #544]	; (80181e4 <input_parameter+0x538>)
 8017fc4:	4a8a      	ldr	r2, [pc, #552]	; (80181f0 <input_parameter+0x544>)
 8017fc6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed300_shortest.turn45out_L.f_ofset = 64;
 8017fca:	4b86      	ldr	r3, [pc, #536]	; (80181e4 <input_parameter+0x538>)
 8017fcc:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 8017fd0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed300_shortest.turn45out_L.e_ofset = 52;
 8017fd4:	4b83      	ldr	r3, [pc, #524]	; (80181e4 <input_parameter+0x538>)
 8017fd6:	4a88      	ldr	r2, [pc, #544]	; (80181f8 <input_parameter+0x54c>)
 8017fd8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed300_shortest.turn135out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017fdc:	4b81      	ldr	r3, [pc, #516]	; (80181e4 <input_parameter+0x538>)
 8017fde:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_R.g_speed =
 8017fe0:	4a80      	ldr	r2, [pc, #512]	; (80181e4 <input_parameter+0x538>)
 8017fe2:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	speed300_shortest.turn135out_R.t_speed = 660;
 8017fe6:	4b7f      	ldr	r3, [pc, #508]	; (80181e4 <input_parameter+0x538>)
 8017fe8:	4a84      	ldr	r2, [pc, #528]	; (80181fc <input_parameter+0x550>)
 8017fea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed300_shortest.turn135out_R.t_acc = 8000;
 8017fee:	4b7d      	ldr	r3, [pc, #500]	; (80181e4 <input_parameter+0x538>)
 8017ff0:	4a83      	ldr	r2, [pc, #524]	; (8018200 <input_parameter+0x554>)
 8017ff2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed300_shortest.turn135out_R.f_ofset = 55;
 8017ff6:	4b7b      	ldr	r3, [pc, #492]	; (80181e4 <input_parameter+0x538>)
 8017ff8:	4a82      	ldr	r2, [pc, #520]	; (8018204 <input_parameter+0x558>)
 8017ffa:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed300_shortest.turn135out_R.e_ofset = 100;
 8017ffe:	4b79      	ldr	r3, [pc, #484]	; (80181e4 <input_parameter+0x538>)
 8018000:	4a81      	ldr	r2, [pc, #516]	; (8018208 <input_parameter+0x55c>)
 8018002:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed300_shortest.turn135out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8018006:	4b77      	ldr	r3, [pc, #476]	; (80181e4 <input_parameter+0x538>)
 8018008:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_L.g_speed =
 801800a:	4a76      	ldr	r2, [pc, #472]	; (80181e4 <input_parameter+0x538>)
 801800c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	speed300_shortest.turn135out_L.t_speed = 660;
 8018010:	4b74      	ldr	r3, [pc, #464]	; (80181e4 <input_parameter+0x538>)
 8018012:	4a7a      	ldr	r2, [pc, #488]	; (80181fc <input_parameter+0x550>)
 8018014:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed300_shortest.turn135out_L.t_acc = 8000;
 8018018:	4b72      	ldr	r3, [pc, #456]	; (80181e4 <input_parameter+0x538>)
 801801a:	4a79      	ldr	r2, [pc, #484]	; (8018200 <input_parameter+0x554>)
 801801c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed300_shortest.turn135out_L.f_ofset = 55;
 8018020:	4b70      	ldr	r3, [pc, #448]	; (80181e4 <input_parameter+0x538>)
 8018022:	4a78      	ldr	r2, [pc, #480]	; (8018204 <input_parameter+0x558>)
 8018024:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed300_shortest.turn135out_L.e_ofset = 103;
 8018028:	4b6e      	ldr	r3, [pc, #440]	; (80181e4 <input_parameter+0x538>)
 801802a:	4a78      	ldr	r2, [pc, #480]	; (801820c <input_parameter+0x560>)
 801802c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed300_shortest.V90_R.g_speed = speed300_shortest.TurnCentervelocity;
 8018030:	4b6c      	ldr	r3, [pc, #432]	; (80181e4 <input_parameter+0x538>)
 8018032:	685b      	ldr	r3, [r3, #4]
 8018034:	4a6b      	ldr	r2, [pc, #428]	; (80181e4 <input_parameter+0x538>)
 8018036:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	speed300_shortest.V90_R.t_speed = 700;
 801803a:	4b6a      	ldr	r3, [pc, #424]	; (80181e4 <input_parameter+0x538>)
 801803c:	4a74      	ldr	r2, [pc, #464]	; (8018210 <input_parameter+0x564>)
 801803e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed300_shortest.V90_R.t_acc = 11000;
 8018042:	4b68      	ldr	r3, [pc, #416]	; (80181e4 <input_parameter+0x538>)
 8018044:	4a73      	ldr	r2, [pc, #460]	; (8018214 <input_parameter+0x568>)
 8018046:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed300_shortest.V90_R.f_ofset = 35;
 801804a:	4b66      	ldr	r3, [pc, #408]	; (80181e4 <input_parameter+0x538>)
 801804c:	4a72      	ldr	r2, [pc, #456]	; (8018218 <input_parameter+0x56c>)
 801804e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed300_shortest.V90_R.e_ofset = 56;
 8018052:	4b64      	ldr	r3, [pc, #400]	; (80181e4 <input_parameter+0x538>)
 8018054:	4a71      	ldr	r2, [pc, #452]	; (801821c <input_parameter+0x570>)
 8018056:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed300_shortest.V90_L.g_speed = speed300_shortest.TurnCentervelocity;
 801805a:	4b62      	ldr	r3, [pc, #392]	; (80181e4 <input_parameter+0x538>)
 801805c:	685b      	ldr	r3, [r3, #4]
 801805e:	4a61      	ldr	r2, [pc, #388]	; (80181e4 <input_parameter+0x538>)
 8018060:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	speed300_shortest.V90_L.t_speed = 700;
 8018064:	4b5f      	ldr	r3, [pc, #380]	; (80181e4 <input_parameter+0x538>)
 8018066:	4a6a      	ldr	r2, [pc, #424]	; (8018210 <input_parameter+0x564>)
 8018068:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed300_shortest.V90_L.t_acc = 11000;
 801806c:	4b5d      	ldr	r3, [pc, #372]	; (80181e4 <input_parameter+0x538>)
 801806e:	4a69      	ldr	r2, [pc, #420]	; (8018214 <input_parameter+0x568>)
 8018070:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed300_shortest.V90_L.f_ofset = 32;
 8018074:	4b5b      	ldr	r3, [pc, #364]	; (80181e4 <input_parameter+0x538>)
 8018076:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 801807a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed300_shortest.V90_L.e_ofset = 60;
 801807e:	4b59      	ldr	r3, [pc, #356]	; (80181e4 <input_parameter+0x538>)
 8018080:	4a67      	ldr	r2, [pc, #412]	; (8018220 <input_parameter+0x574>)
 8018082:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



//********************************600********************************************
	speed600_shortest_mollifier.SlalomCentervelocity = 600;
 8018086:	4b67      	ldr	r3, [pc, #412]	; (8018224 <input_parameter+0x578>)
 8018088:	4a58      	ldr	r2, [pc, #352]	; (80181ec <input_parameter+0x540>)
 801808a:	601a      	str	r2, [r3, #0]
	speed600_shortest_mollifier.TurnCentervelocity = 600;
 801808c:	4b65      	ldr	r3, [pc, #404]	; (8018224 <input_parameter+0x578>)
 801808e:	4a57      	ldr	r2, [pc, #348]	; (80181ec <input_parameter+0x540>)
 8018090:	605a      	str	r2, [r3, #4]

	speed600_shortest_mollifier.slalom_R.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 8018092:	4b64      	ldr	r3, [pc, #400]	; (8018224 <input_parameter+0x578>)
 8018094:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_R.g_speed =
 8018096:	4a63      	ldr	r2, [pc, #396]	; (8018224 <input_parameter+0x578>)
 8018098:	6093      	str	r3, [r2, #8]
	speed600_shortest_mollifier.slalom_R.t_speed = 1100;
 801809a:	4b62      	ldr	r3, [pc, #392]	; (8018224 <input_parameter+0x578>)
 801809c:	4a62      	ldr	r2, [pc, #392]	; (8018228 <input_parameter+0x57c>)
 801809e:	615a      	str	r2, [r3, #20]
	speed600_shortest_mollifier.slalom_R.t_acc = 60000;
 80180a0:	4b60      	ldr	r3, [pc, #384]	; (8018224 <input_parameter+0x578>)
 80180a2:	4a62      	ldr	r2, [pc, #392]	; (801822c <input_parameter+0x580>)
 80180a4:	619a      	str	r2, [r3, #24]
	speed600_shortest_mollifier.slalom_R.f_ofset = 5;
 80180a6:	4b5f      	ldr	r3, [pc, #380]	; (8018224 <input_parameter+0x578>)
 80180a8:	4a61      	ldr	r2, [pc, #388]	; (8018230 <input_parameter+0x584>)
 80180aa:	60da      	str	r2, [r3, #12]
	speed600_shortest_mollifier.slalom_R.e_ofset = 28;
 80180ac:	4b5d      	ldr	r3, [pc, #372]	; (8018224 <input_parameter+0x578>)
 80180ae:	4a61      	ldr	r2, [pc, #388]	; (8018234 <input_parameter+0x588>)
 80180b0:	611a      	str	r2, [r3, #16]

	speed600_shortest_mollifier.slalom_L.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 80180b2:	4b5c      	ldr	r3, [pc, #368]	; (8018224 <input_parameter+0x578>)
 80180b4:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_L.g_speed =
 80180b6:	4a5b      	ldr	r2, [pc, #364]	; (8018224 <input_parameter+0x578>)
 80180b8:	61d3      	str	r3, [r2, #28]
	speed600_shortest_mollifier.slalom_L.t_speed = 1100;
 80180ba:	4b5a      	ldr	r3, [pc, #360]	; (8018224 <input_parameter+0x578>)
 80180bc:	4a5a      	ldr	r2, [pc, #360]	; (8018228 <input_parameter+0x57c>)
 80180be:	629a      	str	r2, [r3, #40]	; 0x28
	speed600_shortest_mollifier.slalom_L.t_acc = 60000;
 80180c0:	4b58      	ldr	r3, [pc, #352]	; (8018224 <input_parameter+0x578>)
 80180c2:	4a5a      	ldr	r2, [pc, #360]	; (801822c <input_parameter+0x580>)
 80180c4:	62da      	str	r2, [r3, #44]	; 0x2c
	speed600_shortest_mollifier.slalom_L.f_ofset = 5;
 80180c6:	4b57      	ldr	r3, [pc, #348]	; (8018224 <input_parameter+0x578>)
 80180c8:	4a59      	ldr	r2, [pc, #356]	; (8018230 <input_parameter+0x584>)
 80180ca:	621a      	str	r2, [r3, #32]
	speed600_shortest_mollifier.slalom_L.e_ofset = 32;
 80180cc:	4b55      	ldr	r3, [pc, #340]	; (8018224 <input_parameter+0x578>)
 80180ce:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80180d2:	625a      	str	r2, [r3, #36]	; 0x24

	speed600_shortest_mollifier.turn90_R.g_speed = 600;
 80180d4:	4b53      	ldr	r3, [pc, #332]	; (8018224 <input_parameter+0x578>)
 80180d6:	4a45      	ldr	r2, [pc, #276]	; (80181ec <input_parameter+0x540>)
 80180d8:	631a      	str	r2, [r3, #48]	; 0x30
	speed600_shortest_mollifier.turn90_R.t_speed = 950;
 80180da:	4b52      	ldr	r3, [pc, #328]	; (8018224 <input_parameter+0x578>)
 80180dc:	4a56      	ldr	r2, [pc, #344]	; (8018238 <input_parameter+0x58c>)
 80180de:	63da      	str	r2, [r3, #60]	; 0x3c
	speed600_shortest_mollifier.turn90_R.t_acc = 15000;
 80180e0:	4b50      	ldr	r3, [pc, #320]	; (8018224 <input_parameter+0x578>)
 80180e2:	4a56      	ldr	r2, [pc, #344]	; (801823c <input_parameter+0x590>)
 80180e4:	641a      	str	r2, [r3, #64]	; 0x40
	speed600_shortest_mollifier.turn90_R.f_ofset = 31;
 80180e6:	4b4f      	ldr	r3, [pc, #316]	; (8018224 <input_parameter+0x578>)
 80180e8:	4a55      	ldr	r2, [pc, #340]	; (8018240 <input_parameter+0x594>)
 80180ea:	635a      	str	r2, [r3, #52]	; 0x34
	speed600_shortest_mollifier.turn90_R.e_ofset = 31;
 80180ec:	4b4d      	ldr	r3, [pc, #308]	; (8018224 <input_parameter+0x578>)
 80180ee:	4a54      	ldr	r2, [pc, #336]	; (8018240 <input_parameter+0x594>)
 80180f0:	639a      	str	r2, [r3, #56]	; 0x38

	speed600_shortest_mollifier.turn90_L.g_speed = 600;
 80180f2:	4b4c      	ldr	r3, [pc, #304]	; (8018224 <input_parameter+0x578>)
 80180f4:	4a3d      	ldr	r2, [pc, #244]	; (80181ec <input_parameter+0x540>)
 80180f6:	645a      	str	r2, [r3, #68]	; 0x44
	speed600_shortest_mollifier.turn90_L.t_speed = 950;
 80180f8:	4b4a      	ldr	r3, [pc, #296]	; (8018224 <input_parameter+0x578>)
 80180fa:	4a4f      	ldr	r2, [pc, #316]	; (8018238 <input_parameter+0x58c>)
 80180fc:	651a      	str	r2, [r3, #80]	; 0x50
	speed600_shortest_mollifier.turn90_L.t_acc = 15000;
 80180fe:	4b49      	ldr	r3, [pc, #292]	; (8018224 <input_parameter+0x578>)
 8018100:	4a4e      	ldr	r2, [pc, #312]	; (801823c <input_parameter+0x590>)
 8018102:	655a      	str	r2, [r3, #84]	; 0x54
	speed600_shortest_mollifier.turn90_L.f_ofset = 31;
 8018104:	4b47      	ldr	r3, [pc, #284]	; (8018224 <input_parameter+0x578>)
 8018106:	4a4e      	ldr	r2, [pc, #312]	; (8018240 <input_parameter+0x594>)
 8018108:	649a      	str	r2, [r3, #72]	; 0x48
	speed600_shortest_mollifier.turn90_L.e_ofset = 35;
 801810a:	4b46      	ldr	r3, [pc, #280]	; (8018224 <input_parameter+0x578>)
 801810c:	4a42      	ldr	r2, [pc, #264]	; (8018218 <input_parameter+0x56c>)
 801810e:	64da      	str	r2, [r3, #76]	; 0x4c

	speed600_shortest_mollifier.turn180_R.g_speed =600;
 8018110:	4b44      	ldr	r3, [pc, #272]	; (8018224 <input_parameter+0x578>)
 8018112:	4a36      	ldr	r2, [pc, #216]	; (80181ec <input_parameter+0x540>)
 8018114:	659a      	str	r2, [r3, #88]	; 0x58
	speed600_shortest_mollifier.turn180_R.t_speed = 840;
 8018116:	4b43      	ldr	r3, [pc, #268]	; (8018224 <input_parameter+0x578>)
 8018118:	4a4a      	ldr	r2, [pc, #296]	; (8018244 <input_parameter+0x598>)
 801811a:	665a      	str	r2, [r3, #100]	; 0x64
	speed600_shortest_mollifier.turn180_R.t_acc = 14000;
 801811c:	4b41      	ldr	r3, [pc, #260]	; (8018224 <input_parameter+0x578>)
 801811e:	4a4a      	ldr	r2, [pc, #296]	; (8018248 <input_parameter+0x59c>)
 8018120:	669a      	str	r2, [r3, #104]	; 0x68
	speed600_shortest_mollifier.turn180_R.f_ofset = 7;
 8018122:	4b40      	ldr	r3, [pc, #256]	; (8018224 <input_parameter+0x578>)
 8018124:	4a49      	ldr	r2, [pc, #292]	; (801824c <input_parameter+0x5a0>)
 8018126:	65da      	str	r2, [r3, #92]	; 0x5c
	speed600_shortest_mollifier.turn180_R.e_ofset = 20;
 8018128:	4b3e      	ldr	r3, [pc, #248]	; (8018224 <input_parameter+0x578>)
 801812a:	4a49      	ldr	r2, [pc, #292]	; (8018250 <input_parameter+0x5a4>)
 801812c:	661a      	str	r2, [r3, #96]	; 0x60

	speed600_shortest_mollifier.turn180_L.g_speed = 600;
 801812e:	4b3d      	ldr	r3, [pc, #244]	; (8018224 <input_parameter+0x578>)
 8018130:	4a2e      	ldr	r2, [pc, #184]	; (80181ec <input_parameter+0x540>)
 8018132:	66da      	str	r2, [r3, #108]	; 0x6c
	speed600_shortest_mollifier.turn180_L.t_speed = 820;
 8018134:	4b3b      	ldr	r3, [pc, #236]	; (8018224 <input_parameter+0x578>)
 8018136:	4a47      	ldr	r2, [pc, #284]	; (8018254 <input_parameter+0x5a8>)
 8018138:	679a      	str	r2, [r3, #120]	; 0x78
	speed600_shortest_mollifier.turn180_L.t_acc = 14000;
 801813a:	4b3a      	ldr	r3, [pc, #232]	; (8018224 <input_parameter+0x578>)
 801813c:	4a42      	ldr	r2, [pc, #264]	; (8018248 <input_parameter+0x59c>)
 801813e:	67da      	str	r2, [r3, #124]	; 0x7c
	speed600_shortest_mollifier.turn180_L.f_ofset = 7;
 8018140:	4b38      	ldr	r3, [pc, #224]	; (8018224 <input_parameter+0x578>)
 8018142:	4a42      	ldr	r2, [pc, #264]	; (801824c <input_parameter+0x5a0>)
 8018144:	671a      	str	r2, [r3, #112]	; 0x70
	speed600_shortest_mollifier.turn180_L.e_ofset = 18;
 8018146:	4b37      	ldr	r3, [pc, #220]	; (8018224 <input_parameter+0x578>)
 8018148:	4a43      	ldr	r2, [pc, #268]	; (8018258 <input_parameter+0x5ac>)
 801814a:	675a      	str	r2, [r3, #116]	; 0x74

	speed600_shortest_mollifier.turn45in_R.g_speed = 600;
 801814c:	4b35      	ldr	r3, [pc, #212]	; (8018224 <input_parameter+0x578>)
 801814e:	4a27      	ldr	r2, [pc, #156]	; (80181ec <input_parameter+0x540>)
 8018150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	speed600_shortest_mollifier.turn45in_R.t_speed = 830;
 8018154:	4b33      	ldr	r3, [pc, #204]	; (8018224 <input_parameter+0x578>)
 8018156:	4a41      	ldr	r2, [pc, #260]	; (801825c <input_parameter+0x5b0>)
 8018158:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed600_shortest_mollifier.turn45in_R.t_acc = 12000;
 801815c:	4b31      	ldr	r3, [pc, #196]	; (8018224 <input_parameter+0x578>)
 801815e:	4a40      	ldr	r2, [pc, #256]	; (8018260 <input_parameter+0x5b4>)
 8018160:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed600_shortest_mollifier.turn45in_R.f_ofset = 13;
 8018164:	4b2f      	ldr	r3, [pc, #188]	; (8018224 <input_parameter+0x578>)
 8018166:	4a3f      	ldr	r2, [pc, #252]	; (8018264 <input_parameter+0x5b8>)
 8018168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed600_shortest_mollifier.turn45in_R.e_ofset = 38;
 801816c:	4b2d      	ldr	r3, [pc, #180]	; (8018224 <input_parameter+0x578>)
 801816e:	4a3e      	ldr	r2, [pc, #248]	; (8018268 <input_parameter+0x5bc>)
 8018170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed600_shortest_mollifier.turn45in_L.g_speed = 600;
 8018174:	4b2b      	ldr	r3, [pc, #172]	; (8018224 <input_parameter+0x578>)
 8018176:	4a1d      	ldr	r2, [pc, #116]	; (80181ec <input_parameter+0x540>)
 8018178:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	speed600_shortest_mollifier.turn45in_L.t_speed = 898;
 801817c:	4b29      	ldr	r3, [pc, #164]	; (8018224 <input_parameter+0x578>)
 801817e:	4a3b      	ldr	r2, [pc, #236]	; (801826c <input_parameter+0x5c0>)
 8018180:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed600_shortest_mollifier.turn45in_L.t_acc = 12000;
 8018184:	4b27      	ldr	r3, [pc, #156]	; (8018224 <input_parameter+0x578>)
 8018186:	4a36      	ldr	r2, [pc, #216]	; (8018260 <input_parameter+0x5b4>)
 8018188:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed600_shortest_mollifier.turn45in_L.f_ofset = 12;
 801818c:	4b25      	ldr	r3, [pc, #148]	; (8018224 <input_parameter+0x578>)
 801818e:	4a38      	ldr	r2, [pc, #224]	; (8018270 <input_parameter+0x5c4>)
 8018190:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed600_shortest_mollifier.turn45in_L.e_ofset = 36;
 8018194:	4b23      	ldr	r3, [pc, #140]	; (8018224 <input_parameter+0x578>)
 8018196:	4a37      	ldr	r2, [pc, #220]	; (8018274 <input_parameter+0x5c8>)
 8018198:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed600_shortest_mollifier.turn135in_R.g_speed = 600;
 801819c:	4b21      	ldr	r3, [pc, #132]	; (8018224 <input_parameter+0x578>)
 801819e:	4a13      	ldr	r2, [pc, #76]	; (80181ec <input_parameter+0x540>)
 80181a0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	speed600_shortest_mollifier.turn135in_R.t_speed = 940;
 80181a4:	4b1f      	ldr	r3, [pc, #124]	; (8018224 <input_parameter+0x578>)
 80181a6:	4a34      	ldr	r2, [pc, #208]	; (8018278 <input_parameter+0x5cc>)
 80181a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed600_shortest_mollifier.turn135in_R.t_acc = 14000;
 80181ac:	4b1d      	ldr	r3, [pc, #116]	; (8018224 <input_parameter+0x578>)
 80181ae:	4a26      	ldr	r2, [pc, #152]	; (8018248 <input_parameter+0x59c>)
 80181b0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed600_shortest_mollifier.turn135in_R.f_ofset = 9.5;
 80181b4:	4b1b      	ldr	r3, [pc, #108]	; (8018224 <input_parameter+0x578>)
 80181b6:	4a31      	ldr	r2, [pc, #196]	; (801827c <input_parameter+0x5d0>)
 80181b8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed600_shortest_mollifier.turn135in_R.e_ofset = 36;
 80181bc:	4b19      	ldr	r3, [pc, #100]	; (8018224 <input_parameter+0x578>)
 80181be:	4a2d      	ldr	r2, [pc, #180]	; (8018274 <input_parameter+0x5c8>)
 80181c0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed600_shortest_mollifier.turn135in_L.g_speed = 600;
 80181c4:	4b17      	ldr	r3, [pc, #92]	; (8018224 <input_parameter+0x578>)
 80181c6:	4a09      	ldr	r2, [pc, #36]	; (80181ec <input_parameter+0x540>)
 80181c8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	speed600_shortest_mollifier.turn135in_L.t_speed = 900;
 80181cc:	4b15      	ldr	r3, [pc, #84]	; (8018224 <input_parameter+0x578>)
 80181ce:	4a2c      	ldr	r2, [pc, #176]	; (8018280 <input_parameter+0x5d4>)
 80181d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed600_shortest_mollifier.turn135in_L.t_acc = 14000;
 80181d4:	4b13      	ldr	r3, [pc, #76]	; (8018224 <input_parameter+0x578>)
 80181d6:	4a1c      	ldr	r2, [pc, #112]	; (8018248 <input_parameter+0x59c>)
 80181d8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80181dc:	e052      	b.n	8018284 <input_parameter+0x5d8>
 80181de:	bf00      	nop
 80181e0:	42860000 	.word	0x42860000
 80181e4:	2000f210 	.word	0x2000f210
 80181e8:	42920000 	.word	0x42920000
 80181ec:	44160000 	.word	0x44160000
 80181f0:	461c4000 	.word	0x461c4000
 80181f4:	42640000 	.word	0x42640000
 80181f8:	42500000 	.word	0x42500000
 80181fc:	44250000 	.word	0x44250000
 8018200:	45fa0000 	.word	0x45fa0000
 8018204:	425c0000 	.word	0x425c0000
 8018208:	42c80000 	.word	0x42c80000
 801820c:	42ce0000 	.word	0x42ce0000
 8018210:	442f0000 	.word	0x442f0000
 8018214:	462be000 	.word	0x462be000
 8018218:	420c0000 	.word	0x420c0000
 801821c:	42600000 	.word	0x42600000
 8018220:	42700000 	.word	0x42700000
 8018224:	2000f358 	.word	0x2000f358
 8018228:	44898000 	.word	0x44898000
 801822c:	476a6000 	.word	0x476a6000
 8018230:	40a00000 	.word	0x40a00000
 8018234:	41e00000 	.word	0x41e00000
 8018238:	446d8000 	.word	0x446d8000
 801823c:	466a6000 	.word	0x466a6000
 8018240:	41f80000 	.word	0x41f80000
 8018244:	44520000 	.word	0x44520000
 8018248:	465ac000 	.word	0x465ac000
 801824c:	40e00000 	.word	0x40e00000
 8018250:	41a00000 	.word	0x41a00000
 8018254:	444d0000 	.word	0x444d0000
 8018258:	41900000 	.word	0x41900000
 801825c:	444f8000 	.word	0x444f8000
 8018260:	463b8000 	.word	0x463b8000
 8018264:	41500000 	.word	0x41500000
 8018268:	42180000 	.word	0x42180000
 801826c:	44608000 	.word	0x44608000
 8018270:	41400000 	.word	0x41400000
 8018274:	42100000 	.word	0x42100000
 8018278:	446b0000 	.word	0x446b0000
 801827c:	41180000 	.word	0x41180000
 8018280:	44610000 	.word	0x44610000
	speed600_shortest_mollifier.turn135in_L.f_ofset = 8;
 8018284:	4b9d      	ldr	r3, [pc, #628]	; (80184fc <input_parameter+0x850>)
 8018286:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801828a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed600_shortest_mollifier.turn135in_L.e_ofset = 34;
 801828e:	4b9b      	ldr	r3, [pc, #620]	; (80184fc <input_parameter+0x850>)
 8018290:	4a9b      	ldr	r2, [pc, #620]	; (8018500 <input_parameter+0x854>)
 8018292:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed600_shortest_mollifier.turn45out_R.g_speed = 600;
 8018296:	4b99      	ldr	r3, [pc, #612]	; (80184fc <input_parameter+0x850>)
 8018298:	4a9a      	ldr	r2, [pc, #616]	; (8018504 <input_parameter+0x858>)
 801829a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	speed600_shortest_mollifier.turn45out_R.t_speed = 720;
 801829e:	4b97      	ldr	r3, [pc, #604]	; (80184fc <input_parameter+0x850>)
 80182a0:	4a99      	ldr	r2, [pc, #612]	; (8018508 <input_parameter+0x85c>)
 80182a2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed600_shortest_mollifier.turn45out_R.t_acc = 12000;
 80182a6:	4b95      	ldr	r3, [pc, #596]	; (80184fc <input_parameter+0x850>)
 80182a8:	4a98      	ldr	r2, [pc, #608]	; (801850c <input_parameter+0x860>)
 80182aa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed600_shortest_mollifier.turn45out_R.f_ofset = 43;
 80182ae:	4b93      	ldr	r3, [pc, #588]	; (80184fc <input_parameter+0x850>)
 80182b0:	4a97      	ldr	r2, [pc, #604]	; (8018510 <input_parameter+0x864>)
 80182b2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed600_shortest_mollifier.turn45out_R.e_ofset = 22;
 80182b6:	4b91      	ldr	r3, [pc, #580]	; (80184fc <input_parameter+0x850>)
 80182b8:	4a96      	ldr	r2, [pc, #600]	; (8018514 <input_parameter+0x868>)
 80182ba:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed600_shortest_mollifier.turn45out_L.g_speed = 600;
 80182be:	4b8f      	ldr	r3, [pc, #572]	; (80184fc <input_parameter+0x850>)
 80182c0:	4a90      	ldr	r2, [pc, #576]	; (8018504 <input_parameter+0x858>)
 80182c2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	speed600_shortest_mollifier.turn45out_L.t_speed = 750;
 80182c6:	4b8d      	ldr	r3, [pc, #564]	; (80184fc <input_parameter+0x850>)
 80182c8:	4a93      	ldr	r2, [pc, #588]	; (8018518 <input_parameter+0x86c>)
 80182ca:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed600_shortest_mollifier.turn45out_L.t_acc = 12000;
 80182ce:	4b8b      	ldr	r3, [pc, #556]	; (80184fc <input_parameter+0x850>)
 80182d0:	4a8e      	ldr	r2, [pc, #568]	; (801850c <input_parameter+0x860>)
 80182d2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed600_shortest_mollifier.turn45out_L.f_ofset = 40;
 80182d6:	4b89      	ldr	r3, [pc, #548]	; (80184fc <input_parameter+0x850>)
 80182d8:	4a90      	ldr	r2, [pc, #576]	; (801851c <input_parameter+0x870>)
 80182da:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed600_shortest_mollifier.turn45out_L.e_ofset = 24;
 80182de:	4b87      	ldr	r3, [pc, #540]	; (80184fc <input_parameter+0x850>)
 80182e0:	4a8f      	ldr	r2, [pc, #572]	; (8018520 <input_parameter+0x874>)
 80182e2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed600_shortest_mollifier.turn135out_R.g_speed = 600;
 80182e6:	4b85      	ldr	r3, [pc, #532]	; (80184fc <input_parameter+0x850>)
 80182e8:	4a86      	ldr	r2, [pc, #536]	; (8018504 <input_parameter+0x858>)
 80182ea:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	speed600_shortest_mollifier.turn135out_R.t_speed = 920;
 80182ee:	4b83      	ldr	r3, [pc, #524]	; (80184fc <input_parameter+0x850>)
 80182f0:	4a8c      	ldr	r2, [pc, #560]	; (8018524 <input_parameter+0x878>)
 80182f2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed600_shortest_mollifier.turn135out_R.t_acc = 15000;
 80182f6:	4b81      	ldr	r3, [pc, #516]	; (80184fc <input_parameter+0x850>)
 80182f8:	4a8b      	ldr	r2, [pc, #556]	; (8018528 <input_parameter+0x87c>)
 80182fa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed600_shortest_mollifier.turn135out_R.f_ofset = 5;
 80182fe:	4b7f      	ldr	r3, [pc, #508]	; (80184fc <input_parameter+0x850>)
 8018300:	4a8a      	ldr	r2, [pc, #552]	; (801852c <input_parameter+0x880>)
 8018302:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed600_shortest_mollifier.turn135out_R.e_ofset = 22;
 8018306:	4b7d      	ldr	r3, [pc, #500]	; (80184fc <input_parameter+0x850>)
 8018308:	4a82      	ldr	r2, [pc, #520]	; (8018514 <input_parameter+0x868>)
 801830a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed600_shortest_mollifier.turn135out_L.g_speed = 600;
 801830e:	4b7b      	ldr	r3, [pc, #492]	; (80184fc <input_parameter+0x850>)
 8018310:	4a7c      	ldr	r2, [pc, #496]	; (8018504 <input_parameter+0x858>)
 8018312:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	speed600_shortest_mollifier.turn135out_L.t_speed = 890;
 8018316:	4b79      	ldr	r3, [pc, #484]	; (80184fc <input_parameter+0x850>)
 8018318:	4a85      	ldr	r2, [pc, #532]	; (8018530 <input_parameter+0x884>)
 801831a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed600_shortest_mollifier.turn135out_L.t_acc = 14000;
 801831e:	4b77      	ldr	r3, [pc, #476]	; (80184fc <input_parameter+0x850>)
 8018320:	4a84      	ldr	r2, [pc, #528]	; (8018534 <input_parameter+0x888>)
 8018322:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed600_shortest_mollifier.turn135out_L.f_ofset = 8;
 8018326:	4b75      	ldr	r3, [pc, #468]	; (80184fc <input_parameter+0x850>)
 8018328:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801832c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed600_shortest_mollifier.turn135out_L.e_ofset = 36;
 8018330:	4b72      	ldr	r3, [pc, #456]	; (80184fc <input_parameter+0x850>)
 8018332:	4a81      	ldr	r2, [pc, #516]	; (8018538 <input_parameter+0x88c>)
 8018334:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed600_shortest_mollifier.V90_R.g_speed = 600;
 8018338:	4b70      	ldr	r3, [pc, #448]	; (80184fc <input_parameter+0x850>)
 801833a:	4a72      	ldr	r2, [pc, #456]	; (8018504 <input_parameter+0x858>)
 801833c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	speed600_shortest_mollifier.V90_R.t_speed = 940;
 8018340:	4b6e      	ldr	r3, [pc, #440]	; (80184fc <input_parameter+0x850>)
 8018342:	4a7e      	ldr	r2, [pc, #504]	; (801853c <input_parameter+0x890>)
 8018344:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed600_shortest_mollifier.V90_R.t_acc = 15000;
 8018348:	4b6c      	ldr	r3, [pc, #432]	; (80184fc <input_parameter+0x850>)
 801834a:	4a77      	ldr	r2, [pc, #476]	; (8018528 <input_parameter+0x87c>)
 801834c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed600_shortest_mollifier.V90_R.f_ofset = 17;
 8018350:	4b6a      	ldr	r3, [pc, #424]	; (80184fc <input_parameter+0x850>)
 8018352:	4a7b      	ldr	r2, [pc, #492]	; (8018540 <input_parameter+0x894>)
 8018354:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed600_shortest_mollifier.V90_R.e_ofset = 20;
 8018358:	4b68      	ldr	r3, [pc, #416]	; (80184fc <input_parameter+0x850>)
 801835a:	4a7a      	ldr	r2, [pc, #488]	; (8018544 <input_parameter+0x898>)
 801835c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed600_shortest_mollifier.V90_L.g_speed = 600;
 8018360:	4b66      	ldr	r3, [pc, #408]	; (80184fc <input_parameter+0x850>)
 8018362:	4a68      	ldr	r2, [pc, #416]	; (8018504 <input_parameter+0x858>)
 8018364:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	speed600_shortest_mollifier.V90_L.t_speed = 960;
 8018368:	4b64      	ldr	r3, [pc, #400]	; (80184fc <input_parameter+0x850>)
 801836a:	4a77      	ldr	r2, [pc, #476]	; (8018548 <input_parameter+0x89c>)
 801836c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed600_shortest_mollifier.V90_L.t_acc = 16000;
 8018370:	4b62      	ldr	r3, [pc, #392]	; (80184fc <input_parameter+0x850>)
 8018372:	4a76      	ldr	r2, [pc, #472]	; (801854c <input_parameter+0x8a0>)
 8018374:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed600_shortest_mollifier.V90_L.f_ofset = 10;
 8018378:	4b60      	ldr	r3, [pc, #384]	; (80184fc <input_parameter+0x850>)
 801837a:	4a75      	ldr	r2, [pc, #468]	; (8018550 <input_parameter+0x8a4>)
 801837c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed600_shortest_mollifier.V90_L.e_ofset = 20;
 8018380:	4b5e      	ldr	r3, [pc, #376]	; (80184fc <input_parameter+0x850>)
 8018382:	4a70      	ldr	r2, [pc, #448]	; (8018544 <input_parameter+0x898>)
 8018384:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c




	//********************************1000********************************************
		speed1000_shortest_mollifier.SlalomCentervelocity = 1000;
 8018388:	4b72      	ldr	r3, [pc, #456]	; (8018554 <input_parameter+0x8a8>)
 801838a:	4a73      	ldr	r2, [pc, #460]	; (8018558 <input_parameter+0x8ac>)
 801838c:	601a      	str	r2, [r3, #0]
		speed1000_shortest_mollifier.TurnCentervelocity = 1000;
 801838e:	4b71      	ldr	r3, [pc, #452]	; (8018554 <input_parameter+0x8a8>)
 8018390:	4a71      	ldr	r2, [pc, #452]	; (8018558 <input_parameter+0x8ac>)
 8018392:	605a      	str	r2, [r3, #4]

		speed1000_shortest_mollifier.slalom_R.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 8018394:	4b6f      	ldr	r3, [pc, #444]	; (8018554 <input_parameter+0x8a8>)
 8018396:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_R.g_speed =
 8018398:	4a6e      	ldr	r2, [pc, #440]	; (8018554 <input_parameter+0x8a8>)
 801839a:	6093      	str	r3, [r2, #8]
		speed1000_shortest_mollifier.slalom_R.t_speed = 1100;
 801839c:	4b6d      	ldr	r3, [pc, #436]	; (8018554 <input_parameter+0x8a8>)
 801839e:	4a6f      	ldr	r2, [pc, #444]	; (801855c <input_parameter+0x8b0>)
 80183a0:	615a      	str	r2, [r3, #20]
		speed1000_shortest_mollifier.slalom_R.f_ofset = 5;
 80183a2:	4b6c      	ldr	r3, [pc, #432]	; (8018554 <input_parameter+0x8a8>)
 80183a4:	4a61      	ldr	r2, [pc, #388]	; (801852c <input_parameter+0x880>)
 80183a6:	60da      	str	r2, [r3, #12]
		speed1000_shortest_mollifier.slalom_R.e_ofset = 28;
 80183a8:	4b6a      	ldr	r3, [pc, #424]	; (8018554 <input_parameter+0x8a8>)
 80183aa:	4a6d      	ldr	r2, [pc, #436]	; (8018560 <input_parameter+0x8b4>)
 80183ac:	611a      	str	r2, [r3, #16]

		speed1000_shortest_mollifier.slalom_L.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 80183ae:	4b69      	ldr	r3, [pc, #420]	; (8018554 <input_parameter+0x8a8>)
 80183b0:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_L.g_speed =
 80183b2:	4a68      	ldr	r2, [pc, #416]	; (8018554 <input_parameter+0x8a8>)
 80183b4:	61d3      	str	r3, [r2, #28]
		speed1000_shortest_mollifier.slalom_L.t_speed = 1100;
 80183b6:	4b67      	ldr	r3, [pc, #412]	; (8018554 <input_parameter+0x8a8>)
 80183b8:	4a68      	ldr	r2, [pc, #416]	; (801855c <input_parameter+0x8b0>)
 80183ba:	629a      	str	r2, [r3, #40]	; 0x28
		speed1000_shortest_mollifier.slalom_L.f_ofset = 5;
 80183bc:	4b65      	ldr	r3, [pc, #404]	; (8018554 <input_parameter+0x8a8>)
 80183be:	4a5b      	ldr	r2, [pc, #364]	; (801852c <input_parameter+0x880>)
 80183c0:	621a      	str	r2, [r3, #32]
		speed1000_shortest_mollifier.slalom_L.e_ofset = 32;
 80183c2:	4b64      	ldr	r3, [pc, #400]	; (8018554 <input_parameter+0x8a8>)
 80183c4:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80183c8:	625a      	str	r2, [r3, #36]	; 0x24

		speed1000_shortest_mollifier.turn90_R.g_speed = 1000;
 80183ca:	4b62      	ldr	r3, [pc, #392]	; (8018554 <input_parameter+0x8a8>)
 80183cc:	4a62      	ldr	r2, [pc, #392]	; (8018558 <input_parameter+0x8ac>)
 80183ce:	631a      	str	r2, [r3, #48]	; 0x30
		speed1000_shortest_mollifier.turn90_R.t_speed = 1450;
 80183d0:	4b60      	ldr	r3, [pc, #384]	; (8018554 <input_parameter+0x8a8>)
 80183d2:	4a64      	ldr	r2, [pc, #400]	; (8018564 <input_parameter+0x8b8>)
 80183d4:	63da      	str	r2, [r3, #60]	; 0x3c
		speed1000_shortest_mollifier.turn90_R.f_ofset = 29;
 80183d6:	4b5f      	ldr	r3, [pc, #380]	; (8018554 <input_parameter+0x8a8>)
 80183d8:	4a63      	ldr	r2, [pc, #396]	; (8018568 <input_parameter+0x8bc>)
 80183da:	635a      	str	r2, [r3, #52]	; 0x34
		speed1000_shortest_mollifier.turn90_R.e_ofset = 31;
 80183dc:	4b5d      	ldr	r3, [pc, #372]	; (8018554 <input_parameter+0x8a8>)
 80183de:	4a63      	ldr	r2, [pc, #396]	; (801856c <input_parameter+0x8c0>)
 80183e0:	639a      	str	r2, [r3, #56]	; 0x38

		speed1000_shortest_mollifier.turn90_L.g_speed = 1000;
 80183e2:	4b5c      	ldr	r3, [pc, #368]	; (8018554 <input_parameter+0x8a8>)
 80183e4:	4a5c      	ldr	r2, [pc, #368]	; (8018558 <input_parameter+0x8ac>)
 80183e6:	645a      	str	r2, [r3, #68]	; 0x44
		speed1000_shortest_mollifier.turn90_L.t_speed = 1450;
 80183e8:	4b5a      	ldr	r3, [pc, #360]	; (8018554 <input_parameter+0x8a8>)
 80183ea:	4a5e      	ldr	r2, [pc, #376]	; (8018564 <input_parameter+0x8b8>)
 80183ec:	651a      	str	r2, [r3, #80]	; 0x50
		speed1000_shortest_mollifier.turn90_L.f_ofset = 29;
 80183ee:	4b59      	ldr	r3, [pc, #356]	; (8018554 <input_parameter+0x8a8>)
 80183f0:	4a5d      	ldr	r2, [pc, #372]	; (8018568 <input_parameter+0x8bc>)
 80183f2:	649a      	str	r2, [r3, #72]	; 0x48
		speed1000_shortest_mollifier.turn90_L.e_ofset = 35;
 80183f4:	4b57      	ldr	r3, [pc, #348]	; (8018554 <input_parameter+0x8a8>)
 80183f6:	4a5e      	ldr	r2, [pc, #376]	; (8018570 <input_parameter+0x8c4>)
 80183f8:	64da      	str	r2, [r3, #76]	; 0x4c

		speed1000_shortest_mollifier.turn180_R.g_speed =1000;
 80183fa:	4b56      	ldr	r3, [pc, #344]	; (8018554 <input_parameter+0x8a8>)
 80183fc:	4a56      	ldr	r2, [pc, #344]	; (8018558 <input_parameter+0x8ac>)
 80183fe:	659a      	str	r2, [r3, #88]	; 0x58
		speed1000_shortest_mollifier.turn180_R.t_speed = 1400;
 8018400:	4b54      	ldr	r3, [pc, #336]	; (8018554 <input_parameter+0x8a8>)
 8018402:	4a5c      	ldr	r2, [pc, #368]	; (8018574 <input_parameter+0x8c8>)
 8018404:	665a      	str	r2, [r3, #100]	; 0x64
		speed1000_shortest_mollifier.turn180_R.f_ofset = 17;
 8018406:	4b53      	ldr	r3, [pc, #332]	; (8018554 <input_parameter+0x8a8>)
 8018408:	4a4d      	ldr	r2, [pc, #308]	; (8018540 <input_parameter+0x894>)
 801840a:	65da      	str	r2, [r3, #92]	; 0x5c
		speed1000_shortest_mollifier.turn180_R.e_ofset = 20;
 801840c:	4b51      	ldr	r3, [pc, #324]	; (8018554 <input_parameter+0x8a8>)
 801840e:	4a4d      	ldr	r2, [pc, #308]	; (8018544 <input_parameter+0x898>)
 8018410:	661a      	str	r2, [r3, #96]	; 0x60

		speed1000_shortest_mollifier.turn180_L.g_speed = 1000;
 8018412:	4b50      	ldr	r3, [pc, #320]	; (8018554 <input_parameter+0x8a8>)
 8018414:	4a50      	ldr	r2, [pc, #320]	; (8018558 <input_parameter+0x8ac>)
 8018416:	66da      	str	r2, [r3, #108]	; 0x6c
		speed1000_shortest_mollifier.turn180_L.t_speed = 1400;
 8018418:	4b4e      	ldr	r3, [pc, #312]	; (8018554 <input_parameter+0x8a8>)
 801841a:	4a56      	ldr	r2, [pc, #344]	; (8018574 <input_parameter+0x8c8>)
 801841c:	679a      	str	r2, [r3, #120]	; 0x78
		speed1000_shortest_mollifier.turn180_L.f_ofset = 17;
 801841e:	4b4d      	ldr	r3, [pc, #308]	; (8018554 <input_parameter+0x8a8>)
 8018420:	4a47      	ldr	r2, [pc, #284]	; (8018540 <input_parameter+0x894>)
 8018422:	671a      	str	r2, [r3, #112]	; 0x70
		speed1000_shortest_mollifier.turn180_L.e_ofset = 18;
 8018424:	4b4b      	ldr	r3, [pc, #300]	; (8018554 <input_parameter+0x8a8>)
 8018426:	4a54      	ldr	r2, [pc, #336]	; (8018578 <input_parameter+0x8cc>)
 8018428:	675a      	str	r2, [r3, #116]	; 0x74

		speed1000_shortest_mollifier.turn45in_R.g_speed = 1000;
 801842a:	4b4a      	ldr	r3, [pc, #296]	; (8018554 <input_parameter+0x8a8>)
 801842c:	4a4a      	ldr	r2, [pc, #296]	; (8018558 <input_parameter+0x8ac>)
 801842e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		speed1000_shortest_mollifier.turn45in_R.t_speed = 1300;
 8018432:	4b48      	ldr	r3, [pc, #288]	; (8018554 <input_parameter+0x8a8>)
 8018434:	4a51      	ldr	r2, [pc, #324]	; (801857c <input_parameter+0x8d0>)
 8018436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		speed1000_shortest_mollifier.turn45in_R.f_ofset = 17;
 801843a:	4b46      	ldr	r3, [pc, #280]	; (8018554 <input_parameter+0x8a8>)
 801843c:	4a40      	ldr	r2, [pc, #256]	; (8018540 <input_parameter+0x894>)
 801843e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		speed1000_shortest_mollifier.turn45in_R.e_ofset = 38;
 8018442:	4b44      	ldr	r3, [pc, #272]	; (8018554 <input_parameter+0x8a8>)
 8018444:	4a4e      	ldr	r2, [pc, #312]	; (8018580 <input_parameter+0x8d4>)
 8018446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

		speed1000_shortest_mollifier.turn45in_L.g_speed = 1000;
 801844a:	4b42      	ldr	r3, [pc, #264]	; (8018554 <input_parameter+0x8a8>)
 801844c:	4a42      	ldr	r2, [pc, #264]	; (8018558 <input_parameter+0x8ac>)
 801844e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		speed1000_shortest_mollifier.turn45in_L.t_speed = 1300;
 8018452:	4b40      	ldr	r3, [pc, #256]	; (8018554 <input_parameter+0x8a8>)
 8018454:	4a49      	ldr	r2, [pc, #292]	; (801857c <input_parameter+0x8d0>)
 8018456:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		speed1000_shortest_mollifier.turn45in_L.f_ofset = 17;
 801845a:	4b3e      	ldr	r3, [pc, #248]	; (8018554 <input_parameter+0x8a8>)
 801845c:	4a38      	ldr	r2, [pc, #224]	; (8018540 <input_parameter+0x894>)
 801845e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		speed1000_shortest_mollifier.turn45in_L.e_ofset = 36;
 8018462:	4b3c      	ldr	r3, [pc, #240]	; (8018554 <input_parameter+0x8a8>)
 8018464:	4a34      	ldr	r2, [pc, #208]	; (8018538 <input_parameter+0x88c>)
 8018466:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		speed1000_shortest_mollifier.turn135in_R.g_speed = 1000;
 801846a:	4b3a      	ldr	r3, [pc, #232]	; (8018554 <input_parameter+0x8a8>)
 801846c:	4a3a      	ldr	r2, [pc, #232]	; (8018558 <input_parameter+0x8ac>)
 801846e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		speed1000_shortest_mollifier.turn135in_R.t_speed = 1590;
 8018472:	4b38      	ldr	r3, [pc, #224]	; (8018554 <input_parameter+0x8a8>)
 8018474:	4a43      	ldr	r2, [pc, #268]	; (8018584 <input_parameter+0x8d8>)
 8018476:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		speed1000_shortest_mollifier.turn135in_R.f_ofset = 17;
 801847a:	4b36      	ldr	r3, [pc, #216]	; (8018554 <input_parameter+0x8a8>)
 801847c:	4a30      	ldr	r2, [pc, #192]	; (8018540 <input_parameter+0x894>)
 801847e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		speed1000_shortest_mollifier.turn135in_R.e_ofset = 15;
 8018482:	4b34      	ldr	r3, [pc, #208]	; (8018554 <input_parameter+0x8a8>)
 8018484:	4a40      	ldr	r2, [pc, #256]	; (8018588 <input_parameter+0x8dc>)
 8018486:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		speed1000_shortest_mollifier.turn135in_L.g_speed = 1000;
 801848a:	4b32      	ldr	r3, [pc, #200]	; (8018554 <input_parameter+0x8a8>)
 801848c:	4a32      	ldr	r2, [pc, #200]	; (8018558 <input_parameter+0x8ac>)
 801848e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		speed1000_shortest_mollifier.turn135in_L.t_speed = 1560;
 8018492:	4b30      	ldr	r3, [pc, #192]	; (8018554 <input_parameter+0x8a8>)
 8018494:	4a3d      	ldr	r2, [pc, #244]	; (801858c <input_parameter+0x8e0>)
 8018496:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		speed1000_shortest_mollifier.turn135in_L.f_ofset = 14;
 801849a:	4b2e      	ldr	r3, [pc, #184]	; (8018554 <input_parameter+0x8a8>)
 801849c:	4a3c      	ldr	r2, [pc, #240]	; (8018590 <input_parameter+0x8e4>)
 801849e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		speed1000_shortest_mollifier.turn135in_L.e_ofset = 12;
 80184a2:	4b2c      	ldr	r3, [pc, #176]	; (8018554 <input_parameter+0x8a8>)
 80184a4:	4a3b      	ldr	r2, [pc, #236]	; (8018594 <input_parameter+0x8e8>)
 80184a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

		speed1000_shortest_mollifier.turn45out_R.g_speed = 1000;
 80184aa:	4b2a      	ldr	r3, [pc, #168]	; (8018554 <input_parameter+0x8a8>)
 80184ac:	4a2a      	ldr	r2, [pc, #168]	; (8018558 <input_parameter+0x8ac>)
 80184ae:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		speed1000_shortest_mollifier.turn45out_R.t_speed = 1300;
 80184b2:	4b28      	ldr	r3, [pc, #160]	; (8018554 <input_parameter+0x8a8>)
 80184b4:	4a31      	ldr	r2, [pc, #196]	; (801857c <input_parameter+0x8d0>)
 80184b6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		speed1000_shortest_mollifier.turn45out_R.f_ofset = 38;
 80184ba:	4b26      	ldr	r3, [pc, #152]	; (8018554 <input_parameter+0x8a8>)
 80184bc:	4a30      	ldr	r2, [pc, #192]	; (8018580 <input_parameter+0x8d4>)
 80184be:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		speed1000_shortest_mollifier.turn45out_R.e_ofset = 22;
 80184c2:	4b24      	ldr	r3, [pc, #144]	; (8018554 <input_parameter+0x8a8>)
 80184c4:	4a13      	ldr	r2, [pc, #76]	; (8018514 <input_parameter+0x868>)
 80184c6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

		speed1000_shortest_mollifier.turn45out_L.g_speed = 1000;
 80184ca:	4b22      	ldr	r3, [pc, #136]	; (8018554 <input_parameter+0x8a8>)
 80184cc:	4a22      	ldr	r2, [pc, #136]	; (8018558 <input_parameter+0x8ac>)
 80184ce:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		speed1000_shortest_mollifier.turn45out_L.t_speed = 1300;
 80184d2:	4b20      	ldr	r3, [pc, #128]	; (8018554 <input_parameter+0x8a8>)
 80184d4:	4a29      	ldr	r2, [pc, #164]	; (801857c <input_parameter+0x8d0>)
 80184d6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		speed1000_shortest_mollifier.turn45out_L.f_ofset = 30;
 80184da:	4b1e      	ldr	r3, [pc, #120]	; (8018554 <input_parameter+0x8a8>)
 80184dc:	4a2e      	ldr	r2, [pc, #184]	; (8018598 <input_parameter+0x8ec>)
 80184de:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		speed1000_shortest_mollifier.turn45out_L.e_ofset = 24;
 80184e2:	4b1c      	ldr	r3, [pc, #112]	; (8018554 <input_parameter+0x8a8>)
 80184e4:	4a0e      	ldr	r2, [pc, #56]	; (8018520 <input_parameter+0x874>)
 80184e6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

		speed1000_shortest_mollifier.turn135out_R.g_speed = 1000;
 80184ea:	4b1a      	ldr	r3, [pc, #104]	; (8018554 <input_parameter+0x8a8>)
 80184ec:	4a1a      	ldr	r2, [pc, #104]	; (8018558 <input_parameter+0x8ac>)
 80184ee:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
		speed1000_shortest_mollifier.turn135out_R.t_speed = 1660;
 80184f2:	4b18      	ldr	r3, [pc, #96]	; (8018554 <input_parameter+0x8a8>)
 80184f4:	4a29      	ldr	r2, [pc, #164]	; (801859c <input_parameter+0x8f0>)
 80184f6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80184fa:	e051      	b.n	80185a0 <input_parameter+0x8f4>
 80184fc:	2000f358 	.word	0x2000f358
 8018500:	42080000 	.word	0x42080000
 8018504:	44160000 	.word	0x44160000
 8018508:	44340000 	.word	0x44340000
 801850c:	463b8000 	.word	0x463b8000
 8018510:	422c0000 	.word	0x422c0000
 8018514:	41b00000 	.word	0x41b00000
 8018518:	443b8000 	.word	0x443b8000
 801851c:	42200000 	.word	0x42200000
 8018520:	41c00000 	.word	0x41c00000
 8018524:	44660000 	.word	0x44660000
 8018528:	466a6000 	.word	0x466a6000
 801852c:	40a00000 	.word	0x40a00000
 8018530:	445e8000 	.word	0x445e8000
 8018534:	465ac000 	.word	0x465ac000
 8018538:	42100000 	.word	0x42100000
 801853c:	446b0000 	.word	0x446b0000
 8018540:	41880000 	.word	0x41880000
 8018544:	41a00000 	.word	0x41a00000
 8018548:	44700000 	.word	0x44700000
 801854c:	467a0000 	.word	0x467a0000
 8018550:	41200000 	.word	0x41200000
 8018554:	2000f4a0 	.word	0x2000f4a0
 8018558:	447a0000 	.word	0x447a0000
 801855c:	44898000 	.word	0x44898000
 8018560:	41e00000 	.word	0x41e00000
 8018564:	44b54000 	.word	0x44b54000
 8018568:	41e80000 	.word	0x41e80000
 801856c:	41f80000 	.word	0x41f80000
 8018570:	420c0000 	.word	0x420c0000
 8018574:	44af0000 	.word	0x44af0000
 8018578:	41900000 	.word	0x41900000
 801857c:	44a28000 	.word	0x44a28000
 8018580:	42180000 	.word	0x42180000
 8018584:	44c6c000 	.word	0x44c6c000
 8018588:	41700000 	.word	0x41700000
 801858c:	44c30000 	.word	0x44c30000
 8018590:	41600000 	.word	0x41600000
 8018594:	41400000 	.word	0x41400000
 8018598:	41f00000 	.word	0x41f00000
 801859c:	44cf8000 	.word	0x44cf8000
		speed1000_shortest_mollifier.turn135out_R.f_ofset = 12;
 80185a0:	4b9d      	ldr	r3, [pc, #628]	; (8018818 <input_parameter+0xb6c>)
 80185a2:	4a9e      	ldr	r2, [pc, #632]	; (801881c <input_parameter+0xb70>)
 80185a4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		speed1000_shortest_mollifier.turn135out_R.e_ofset = 22;
 80185a8:	4b9b      	ldr	r3, [pc, #620]	; (8018818 <input_parameter+0xb6c>)
 80185aa:	4a9d      	ldr	r2, [pc, #628]	; (8018820 <input_parameter+0xb74>)
 80185ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		speed1000_shortest_mollifier.turn135out_L.g_speed = 1000;
 80185b0:	4b99      	ldr	r3, [pc, #612]	; (8018818 <input_parameter+0xb6c>)
 80185b2:	4a9c      	ldr	r2, [pc, #624]	; (8018824 <input_parameter+0xb78>)
 80185b4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		speed1000_shortest_mollifier.turn135out_L.t_speed = 1660;
 80185b8:	4b97      	ldr	r3, [pc, #604]	; (8018818 <input_parameter+0xb6c>)
 80185ba:	4a9b      	ldr	r2, [pc, #620]	; (8018828 <input_parameter+0xb7c>)
 80185bc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		speed1000_shortest_mollifier.turn135out_L.f_ofset = 10;
 80185c0:	4b95      	ldr	r3, [pc, #596]	; (8018818 <input_parameter+0xb6c>)
 80185c2:	4a9a      	ldr	r2, [pc, #616]	; (801882c <input_parameter+0xb80>)
 80185c4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		speed1000_shortest_mollifier.turn135out_L.e_ofset = 30;
 80185c8:	4b93      	ldr	r3, [pc, #588]	; (8018818 <input_parameter+0xb6c>)
 80185ca:	4a99      	ldr	r2, [pc, #612]	; (8018830 <input_parameter+0xb84>)
 80185cc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		speed1000_shortest_mollifier.V90_R.g_speed = 1000;
 80185d0:	4b91      	ldr	r3, [pc, #580]	; (8018818 <input_parameter+0xb6c>)
 80185d2:	4a94      	ldr	r2, [pc, #592]	; (8018824 <input_parameter+0xb78>)
 80185d4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		speed1000_shortest_mollifier.V90_R.t_speed = 1750;
 80185d8:	4b8f      	ldr	r3, [pc, #572]	; (8018818 <input_parameter+0xb6c>)
 80185da:	4a96      	ldr	r2, [pc, #600]	; (8018834 <input_parameter+0xb88>)
 80185dc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		speed1000_shortest_mollifier.V90_R.f_ofset = 14;
 80185e0:	4b8d      	ldr	r3, [pc, #564]	; (8018818 <input_parameter+0xb6c>)
 80185e2:	4a95      	ldr	r2, [pc, #596]	; (8018838 <input_parameter+0xb8c>)
 80185e4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		speed1000_shortest_mollifier.V90_R.e_ofset = 15;
 80185e8:	4b8b      	ldr	r3, [pc, #556]	; (8018818 <input_parameter+0xb6c>)
 80185ea:	4a94      	ldr	r2, [pc, #592]	; (801883c <input_parameter+0xb90>)
 80185ec:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

		speed1000_shortest_mollifier.V90_L.g_speed = 1000;
 80185f0:	4b89      	ldr	r3, [pc, #548]	; (8018818 <input_parameter+0xb6c>)
 80185f2:	4a8c      	ldr	r2, [pc, #560]	; (8018824 <input_parameter+0xb78>)
 80185f4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		speed1000_shortest_mollifier.V90_L.t_speed = 1750;
 80185f8:	4b87      	ldr	r3, [pc, #540]	; (8018818 <input_parameter+0xb6c>)
 80185fa:	4a8e      	ldr	r2, [pc, #568]	; (8018834 <input_parameter+0xb88>)
 80185fc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		speed1000_shortest_mollifier.V90_L.f_ofset = 11;
 8018600:	4b85      	ldr	r3, [pc, #532]	; (8018818 <input_parameter+0xb6c>)
 8018602:	4a8f      	ldr	r2, [pc, #572]	; (8018840 <input_parameter+0xb94>)
 8018604:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		speed1000_shortest_mollifier.V90_L.e_ofset = 18;
 8018608:	4b83      	ldr	r3, [pc, #524]	; (8018818 <input_parameter+0xb6c>)
 801860a:	4a8e      	ldr	r2, [pc, #568]	; (8018844 <input_parameter+0xb98>)
 801860c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


		//********************************1200********************************************
			speed1200_shortest_mollifier.SlalomCentervelocity = 1200;
 8018610:	4b8d      	ldr	r3, [pc, #564]	; (8018848 <input_parameter+0xb9c>)
 8018612:	4a8e      	ldr	r2, [pc, #568]	; (801884c <input_parameter+0xba0>)
 8018614:	601a      	str	r2, [r3, #0]
			speed1200_shortest_mollifier.TurnCentervelocity = 1200;
 8018616:	4b8c      	ldr	r3, [pc, #560]	; (8018848 <input_parameter+0xb9c>)
 8018618:	4a8c      	ldr	r2, [pc, #560]	; (801884c <input_parameter+0xba0>)
 801861a:	605a      	str	r2, [r3, #4]

			speed1200_shortest_mollifier.slalom_R.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 801861c:	4b8a      	ldr	r3, [pc, #552]	; (8018848 <input_parameter+0xb9c>)
 801861e:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_R.g_speed =
 8018620:	4a89      	ldr	r2, [pc, #548]	; (8018848 <input_parameter+0xb9c>)
 8018622:	6093      	str	r3, [r2, #8]
			speed1200_shortest_mollifier.slalom_R.t_speed = 1100;
 8018624:	4b88      	ldr	r3, [pc, #544]	; (8018848 <input_parameter+0xb9c>)
 8018626:	4a8a      	ldr	r2, [pc, #552]	; (8018850 <input_parameter+0xba4>)
 8018628:	615a      	str	r2, [r3, #20]
			speed1200_shortest_mollifier.slalom_R.f_ofset = 5;
 801862a:	4b87      	ldr	r3, [pc, #540]	; (8018848 <input_parameter+0xb9c>)
 801862c:	4a89      	ldr	r2, [pc, #548]	; (8018854 <input_parameter+0xba8>)
 801862e:	60da      	str	r2, [r3, #12]
			speed1200_shortest_mollifier.slalom_R.e_ofset = 28;
 8018630:	4b85      	ldr	r3, [pc, #532]	; (8018848 <input_parameter+0xb9c>)
 8018632:	4a89      	ldr	r2, [pc, #548]	; (8018858 <input_parameter+0xbac>)
 8018634:	611a      	str	r2, [r3, #16]

			speed1200_shortest_mollifier.slalom_L.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 8018636:	4b84      	ldr	r3, [pc, #528]	; (8018848 <input_parameter+0xb9c>)
 8018638:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_L.g_speed =
 801863a:	4a83      	ldr	r2, [pc, #524]	; (8018848 <input_parameter+0xb9c>)
 801863c:	61d3      	str	r3, [r2, #28]
			speed1200_shortest_mollifier.slalom_L.t_speed = 1100;
 801863e:	4b82      	ldr	r3, [pc, #520]	; (8018848 <input_parameter+0xb9c>)
 8018640:	4a83      	ldr	r2, [pc, #524]	; (8018850 <input_parameter+0xba4>)
 8018642:	629a      	str	r2, [r3, #40]	; 0x28
			speed1200_shortest_mollifier.slalom_L.f_ofset = 5;
 8018644:	4b80      	ldr	r3, [pc, #512]	; (8018848 <input_parameter+0xb9c>)
 8018646:	4a83      	ldr	r2, [pc, #524]	; (8018854 <input_parameter+0xba8>)
 8018648:	621a      	str	r2, [r3, #32]
			speed1200_shortest_mollifier.slalom_L.e_ofset = 32;
 801864a:	4b7f      	ldr	r3, [pc, #508]	; (8018848 <input_parameter+0xb9c>)
 801864c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8018650:	625a      	str	r2, [r3, #36]	; 0x24

			speed1200_shortest_mollifier.turn90_R.g_speed = 1200;
 8018652:	4b7d      	ldr	r3, [pc, #500]	; (8018848 <input_parameter+0xb9c>)
 8018654:	4a7d      	ldr	r2, [pc, #500]	; (801884c <input_parameter+0xba0>)
 8018656:	631a      	str	r2, [r3, #48]	; 0x30
			speed1200_shortest_mollifier.turn90_R.t_speed = 1510;
 8018658:	4b7b      	ldr	r3, [pc, #492]	; (8018848 <input_parameter+0xb9c>)
 801865a:	4a80      	ldr	r2, [pc, #512]	; (801885c <input_parameter+0xbb0>)
 801865c:	63da      	str	r2, [r3, #60]	; 0x3c
			speed1200_shortest_mollifier.turn90_R.f_ofset = 24;
 801865e:	4b7a      	ldr	r3, [pc, #488]	; (8018848 <input_parameter+0xb9c>)
 8018660:	4a7f      	ldr	r2, [pc, #508]	; (8018860 <input_parameter+0xbb4>)
 8018662:	635a      	str	r2, [r3, #52]	; 0x34
			speed1200_shortest_mollifier.turn90_R.e_ofset = 20;
 8018664:	4b78      	ldr	r3, [pc, #480]	; (8018848 <input_parameter+0xb9c>)
 8018666:	4a7f      	ldr	r2, [pc, #508]	; (8018864 <input_parameter+0xbb8>)
 8018668:	639a      	str	r2, [r3, #56]	; 0x38

			speed1200_shortest_mollifier.turn90_L.g_speed = 1200;
 801866a:	4b77      	ldr	r3, [pc, #476]	; (8018848 <input_parameter+0xb9c>)
 801866c:	4a77      	ldr	r2, [pc, #476]	; (801884c <input_parameter+0xba0>)
 801866e:	645a      	str	r2, [r3, #68]	; 0x44
			speed1200_shortest_mollifier.turn90_L.t_speed = 1510;
 8018670:	4b75      	ldr	r3, [pc, #468]	; (8018848 <input_parameter+0xb9c>)
 8018672:	4a7a      	ldr	r2, [pc, #488]	; (801885c <input_parameter+0xbb0>)
 8018674:	651a      	str	r2, [r3, #80]	; 0x50
			speed1200_shortest_mollifier.turn90_L.f_ofset = 19;
 8018676:	4b74      	ldr	r3, [pc, #464]	; (8018848 <input_parameter+0xb9c>)
 8018678:	4a7b      	ldr	r2, [pc, #492]	; (8018868 <input_parameter+0xbbc>)
 801867a:	649a      	str	r2, [r3, #72]	; 0x48
			speed1200_shortest_mollifier.turn90_L.e_ofset = 25;
 801867c:	4b72      	ldr	r3, [pc, #456]	; (8018848 <input_parameter+0xb9c>)
 801867e:	4a7b      	ldr	r2, [pc, #492]	; (801886c <input_parameter+0xbc0>)
 8018680:	64da      	str	r2, [r3, #76]	; 0x4c

			speed1200_shortest_mollifier.turn180_R.g_speed =1200;
 8018682:	4b71      	ldr	r3, [pc, #452]	; (8018848 <input_parameter+0xb9c>)
 8018684:	4a71      	ldr	r2, [pc, #452]	; (801884c <input_parameter+0xba0>)
 8018686:	659a      	str	r2, [r3, #88]	; 0x58
			speed1200_shortest_mollifier.turn180_R.t_speed = 1650;
 8018688:	4b6f      	ldr	r3, [pc, #444]	; (8018848 <input_parameter+0xb9c>)
 801868a:	4a79      	ldr	r2, [pc, #484]	; (8018870 <input_parameter+0xbc4>)
 801868c:	665a      	str	r2, [r3, #100]	; 0x64
			speed1200_shortest_mollifier.turn180_R.f_ofset = 20;
 801868e:	4b6e      	ldr	r3, [pc, #440]	; (8018848 <input_parameter+0xb9c>)
 8018690:	4a74      	ldr	r2, [pc, #464]	; (8018864 <input_parameter+0xbb8>)
 8018692:	65da      	str	r2, [r3, #92]	; 0x5c
			speed1200_shortest_mollifier.turn180_R.e_ofset = 20;
 8018694:	4b6c      	ldr	r3, [pc, #432]	; (8018848 <input_parameter+0xb9c>)
 8018696:	4a73      	ldr	r2, [pc, #460]	; (8018864 <input_parameter+0xbb8>)
 8018698:	661a      	str	r2, [r3, #96]	; 0x60

			speed1200_shortest_mollifier.turn180_L.g_speed = 1200;
 801869a:	4b6b      	ldr	r3, [pc, #428]	; (8018848 <input_parameter+0xb9c>)
 801869c:	4a6b      	ldr	r2, [pc, #428]	; (801884c <input_parameter+0xba0>)
 801869e:	66da      	str	r2, [r3, #108]	; 0x6c
			speed1200_shortest_mollifier.turn180_L.t_speed = 1650;
 80186a0:	4b69      	ldr	r3, [pc, #420]	; (8018848 <input_parameter+0xb9c>)
 80186a2:	4a73      	ldr	r2, [pc, #460]	; (8018870 <input_parameter+0xbc4>)
 80186a4:	679a      	str	r2, [r3, #120]	; 0x78
			speed1200_shortest_mollifier.turn180_L.f_ofset = 18;
 80186a6:	4b68      	ldr	r3, [pc, #416]	; (8018848 <input_parameter+0xb9c>)
 80186a8:	4a66      	ldr	r2, [pc, #408]	; (8018844 <input_parameter+0xb98>)
 80186aa:	671a      	str	r2, [r3, #112]	; 0x70
			speed1200_shortest_mollifier.turn180_L.e_ofset = 8;
 80186ac:	4b66      	ldr	r3, [pc, #408]	; (8018848 <input_parameter+0xb9c>)
 80186ae:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80186b2:	675a      	str	r2, [r3, #116]	; 0x74

			speed1200_shortest_mollifier.turn45in_R.g_speed = 1200;
 80186b4:	4b64      	ldr	r3, [pc, #400]	; (8018848 <input_parameter+0xb9c>)
 80186b6:	4a65      	ldr	r2, [pc, #404]	; (801884c <input_parameter+0xba0>)
 80186b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			speed1200_shortest_mollifier.turn45in_R.t_speed = 1550;
 80186bc:	4b62      	ldr	r3, [pc, #392]	; (8018848 <input_parameter+0xb9c>)
 80186be:	4a6d      	ldr	r2, [pc, #436]	; (8018874 <input_parameter+0xbc8>)
 80186c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			speed1200_shortest_mollifier.turn45in_R.f_ofset = 18;
 80186c4:	4b60      	ldr	r3, [pc, #384]	; (8018848 <input_parameter+0xb9c>)
 80186c6:	4a5f      	ldr	r2, [pc, #380]	; (8018844 <input_parameter+0xb98>)
 80186c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			speed1200_shortest_mollifier.turn45in_R.e_ofset = 33;
 80186cc:	4b5e      	ldr	r3, [pc, #376]	; (8018848 <input_parameter+0xb9c>)
 80186ce:	4a6a      	ldr	r2, [pc, #424]	; (8018878 <input_parameter+0xbcc>)
 80186d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

			speed1200_shortest_mollifier.turn45in_L.g_speed = 1200;
 80186d4:	4b5c      	ldr	r3, [pc, #368]	; (8018848 <input_parameter+0xb9c>)
 80186d6:	4a5d      	ldr	r2, [pc, #372]	; (801884c <input_parameter+0xba0>)
 80186d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			speed1200_shortest_mollifier.turn45in_L.t_speed = 1550;
 80186dc:	4b5a      	ldr	r3, [pc, #360]	; (8018848 <input_parameter+0xb9c>)
 80186de:	4a65      	ldr	r2, [pc, #404]	; (8018874 <input_parameter+0xbc8>)
 80186e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			speed1200_shortest_mollifier.turn45in_L.f_ofset = 18;
 80186e4:	4b58      	ldr	r3, [pc, #352]	; (8018848 <input_parameter+0xb9c>)
 80186e6:	4a57      	ldr	r2, [pc, #348]	; (8018844 <input_parameter+0xb98>)
 80186e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			speed1200_shortest_mollifier.turn45in_L.e_ofset = 32;
 80186ec:	4b56      	ldr	r3, [pc, #344]	; (8018848 <input_parameter+0xb9c>)
 80186ee:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80186f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

			speed1200_shortest_mollifier.turn135in_R.g_speed = 1200;
 80186f6:	4b54      	ldr	r3, [pc, #336]	; (8018848 <input_parameter+0xb9c>)
 80186f8:	4a54      	ldr	r2, [pc, #336]	; (801884c <input_parameter+0xba0>)
 80186fa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			speed1200_shortest_mollifier.turn135in_R.t_speed = 1850;
 80186fe:	4b52      	ldr	r3, [pc, #328]	; (8018848 <input_parameter+0xb9c>)
 8018700:	4a5e      	ldr	r2, [pc, #376]	; (801887c <input_parameter+0xbd0>)
 8018702:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			speed1200_shortest_mollifier.turn135in_R.f_ofset = 18;
 8018706:	4b50      	ldr	r3, [pc, #320]	; (8018848 <input_parameter+0xb9c>)
 8018708:	4a4e      	ldr	r2, [pc, #312]	; (8018844 <input_parameter+0xb98>)
 801870a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			speed1200_shortest_mollifier.turn135in_R.e_ofset = 22;
 801870e:	4b4e      	ldr	r3, [pc, #312]	; (8018848 <input_parameter+0xb9c>)
 8018710:	4a43      	ldr	r2, [pc, #268]	; (8018820 <input_parameter+0xb74>)
 8018712:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

			speed1200_shortest_mollifier.turn135in_L.g_speed = 1200;
 8018716:	4b4c      	ldr	r3, [pc, #304]	; (8018848 <input_parameter+0xb9c>)
 8018718:	4a4c      	ldr	r2, [pc, #304]	; (801884c <input_parameter+0xba0>)
 801871a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			speed1200_shortest_mollifier.turn135in_L.t_speed = 1850;
 801871e:	4b4a      	ldr	r3, [pc, #296]	; (8018848 <input_parameter+0xb9c>)
 8018720:	4a56      	ldr	r2, [pc, #344]	; (801887c <input_parameter+0xbd0>)
 8018722:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
			speed1200_shortest_mollifier.turn135in_L.f_ofset = 18;
 8018726:	4b48      	ldr	r3, [pc, #288]	; (8018848 <input_parameter+0xb9c>)
 8018728:	4a46      	ldr	r2, [pc, #280]	; (8018844 <input_parameter+0xb98>)
 801872a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			speed1200_shortest_mollifier.turn135in_L.e_ofset = 20;
 801872e:	4b46      	ldr	r3, [pc, #280]	; (8018848 <input_parameter+0xb9c>)
 8018730:	4a4c      	ldr	r2, [pc, #304]	; (8018864 <input_parameter+0xbb8>)
 8018732:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

			speed1200_shortest_mollifier.turn45out_R.g_speed = 1200;
 8018736:	4b44      	ldr	r3, [pc, #272]	; (8018848 <input_parameter+0xb9c>)
 8018738:	4a44      	ldr	r2, [pc, #272]	; (801884c <input_parameter+0xba0>)
 801873a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
			speed1200_shortest_mollifier.turn45out_R.t_speed = 1400;
 801873e:	4b42      	ldr	r3, [pc, #264]	; (8018848 <input_parameter+0xb9c>)
 8018740:	4a4f      	ldr	r2, [pc, #316]	; (8018880 <input_parameter+0xbd4>)
 8018742:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			speed1200_shortest_mollifier.turn45out_R.f_ofset = 28;
 8018746:	4b40      	ldr	r3, [pc, #256]	; (8018848 <input_parameter+0xb9c>)
 8018748:	4a43      	ldr	r2, [pc, #268]	; (8018858 <input_parameter+0xbac>)
 801874a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			speed1200_shortest_mollifier.turn45out_R.e_ofset = 16;
 801874e:	4b3e      	ldr	r3, [pc, #248]	; (8018848 <input_parameter+0xb9c>)
 8018750:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8018754:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

			speed1200_shortest_mollifier.turn45out_L.g_speed = 1200;
 8018758:	4b3b      	ldr	r3, [pc, #236]	; (8018848 <input_parameter+0xb9c>)
 801875a:	4a3c      	ldr	r2, [pc, #240]	; (801884c <input_parameter+0xba0>)
 801875c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			speed1200_shortest_mollifier.turn45out_L.t_speed = 1400;
 8018760:	4b39      	ldr	r3, [pc, #228]	; (8018848 <input_parameter+0xb9c>)
 8018762:	4a47      	ldr	r2, [pc, #284]	; (8018880 <input_parameter+0xbd4>)
 8018764:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
			speed1200_shortest_mollifier.turn45out_L.f_ofset = 24;
 8018768:	4b37      	ldr	r3, [pc, #220]	; (8018848 <input_parameter+0xb9c>)
 801876a:	4a3d      	ldr	r2, [pc, #244]	; (8018860 <input_parameter+0xbb4>)
 801876c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
			speed1200_shortest_mollifier.turn45out_L.e_ofset = 16;
 8018770:	4b35      	ldr	r3, [pc, #212]	; (8018848 <input_parameter+0xb9c>)
 8018772:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8018776:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

			speed1200_shortest_mollifier.turn135out_R.g_speed = 1200;
 801877a:	4b33      	ldr	r3, [pc, #204]	; (8018848 <input_parameter+0xb9c>)
 801877c:	4a33      	ldr	r2, [pc, #204]	; (801884c <input_parameter+0xba0>)
 801877e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
			speed1200_shortest_mollifier.turn135out_R.t_speed = 1850;
 8018782:	4b31      	ldr	r3, [pc, #196]	; (8018848 <input_parameter+0xb9c>)
 8018784:	4a3d      	ldr	r2, [pc, #244]	; (801887c <input_parameter+0xbd0>)
 8018786:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			speed1200_shortest_mollifier.turn135out_R.f_ofset = 12;
 801878a:	4b2f      	ldr	r3, [pc, #188]	; (8018848 <input_parameter+0xb9c>)
 801878c:	4a23      	ldr	r2, [pc, #140]	; (801881c <input_parameter+0xb70>)
 801878e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			speed1200_shortest_mollifier.turn135out_R.e_ofset = 30;
 8018792:	4b2d      	ldr	r3, [pc, #180]	; (8018848 <input_parameter+0xb9c>)
 8018794:	4a26      	ldr	r2, [pc, #152]	; (8018830 <input_parameter+0xb84>)
 8018796:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

			speed1200_shortest_mollifier.turn135out_L.g_speed = 1200;
 801879a:	4b2b      	ldr	r3, [pc, #172]	; (8018848 <input_parameter+0xb9c>)
 801879c:	4a2b      	ldr	r2, [pc, #172]	; (801884c <input_parameter+0xba0>)
 801879e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			speed1200_shortest_mollifier.turn135out_L.t_speed = 1850;
 80187a2:	4b29      	ldr	r3, [pc, #164]	; (8018848 <input_parameter+0xb9c>)
 80187a4:	4a35      	ldr	r2, [pc, #212]	; (801887c <input_parameter+0xbd0>)
 80187a6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			speed1200_shortest_mollifier.turn135out_L.f_ofset = 10;
 80187aa:	4b27      	ldr	r3, [pc, #156]	; (8018848 <input_parameter+0xb9c>)
 80187ac:	4a1f      	ldr	r2, [pc, #124]	; (801882c <input_parameter+0xb80>)
 80187ae:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			speed1200_shortest_mollifier.turn135out_L.e_ofset = 30;
 80187b2:	4b25      	ldr	r3, [pc, #148]	; (8018848 <input_parameter+0xb9c>)
 80187b4:	4a1e      	ldr	r2, [pc, #120]	; (8018830 <input_parameter+0xb84>)
 80187b6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

			speed1200_shortest_mollifier.V90_R.g_speed = 1200;
 80187ba:	4b23      	ldr	r3, [pc, #140]	; (8018848 <input_parameter+0xb9c>)
 80187bc:	4a23      	ldr	r2, [pc, #140]	; (801884c <input_parameter+0xba0>)
 80187be:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			speed1200_shortest_mollifier.V90_R.t_speed = 1950;
 80187c2:	4b21      	ldr	r3, [pc, #132]	; (8018848 <input_parameter+0xb9c>)
 80187c4:	4a2f      	ldr	r2, [pc, #188]	; (8018884 <input_parameter+0xbd8>)
 80187c6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			speed1200_shortest_mollifier.V90_R.f_ofset = 10;
 80187ca:	4b1f      	ldr	r3, [pc, #124]	; (8018848 <input_parameter+0xb9c>)
 80187cc:	4a17      	ldr	r2, [pc, #92]	; (801882c <input_parameter+0xb80>)
 80187ce:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			speed1200_shortest_mollifier.V90_R.e_ofset = 20;
 80187d2:	4b1d      	ldr	r3, [pc, #116]	; (8018848 <input_parameter+0xb9c>)
 80187d4:	4a23      	ldr	r2, [pc, #140]	; (8018864 <input_parameter+0xbb8>)
 80187d6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

			speed1200_shortest_mollifier.V90_L.g_speed = 1200;
 80187da:	4b1b      	ldr	r3, [pc, #108]	; (8018848 <input_parameter+0xb9c>)
 80187dc:	4a1b      	ldr	r2, [pc, #108]	; (801884c <input_parameter+0xba0>)
 80187de:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
			speed1200_shortest_mollifier.V90_L.t_speed = 1950;
 80187e2:	4b19      	ldr	r3, [pc, #100]	; (8018848 <input_parameter+0xb9c>)
 80187e4:	4a27      	ldr	r2, [pc, #156]	; (8018884 <input_parameter+0xbd8>)
 80187e6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			speed1200_shortest_mollifier.V90_L.f_ofset = 8;
 80187ea:	4b17      	ldr	r3, [pc, #92]	; (8018848 <input_parameter+0xb9c>)
 80187ec:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80187f0:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
			speed1200_shortest_mollifier.V90_L.e_ofset = 20;
 80187f4:	4b14      	ldr	r3, [pc, #80]	; (8018848 <input_parameter+0xb9c>)
 80187f6:	4a1b      	ldr	r2, [pc, #108]	; (8018864 <input_parameter+0xbb8>)
 80187f8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

//********************************1600********************************************
				speed1600_shortest_mollifier.SlalomCentervelocity = 1500;
 80187fc:	4b22      	ldr	r3, [pc, #136]	; (8018888 <input_parameter+0xbdc>)
 80187fe:	4a23      	ldr	r2, [pc, #140]	; (801888c <input_parameter+0xbe0>)
 8018800:	601a      	str	r2, [r3, #0]
				speed1600_shortest_mollifier.TurnCentervelocity = 1500;
 8018802:	4b21      	ldr	r3, [pc, #132]	; (8018888 <input_parameter+0xbdc>)
 8018804:	4a21      	ldr	r2, [pc, #132]	; (801888c <input_parameter+0xbe0>)
 8018806:	605a      	str	r2, [r3, #4]

				speed1600_shortest_mollifier.turn90_R.g_speed = 1500;
 8018808:	4b1f      	ldr	r3, [pc, #124]	; (8018888 <input_parameter+0xbdc>)
 801880a:	4a20      	ldr	r2, [pc, #128]	; (801888c <input_parameter+0xbe0>)
 801880c:	631a      	str	r2, [r3, #48]	; 0x30
				speed1600_shortest_mollifier.turn90_R.t_speed = 1810;
 801880e:	4b1e      	ldr	r3, [pc, #120]	; (8018888 <input_parameter+0xbdc>)
 8018810:	4a1f      	ldr	r2, [pc, #124]	; (8018890 <input_parameter+0xbe4>)
 8018812:	63da      	str	r2, [r3, #60]	; 0x3c
 8018814:	e03e      	b.n	8018894 <input_parameter+0xbe8>
 8018816:	bf00      	nop
 8018818:	2000f4a0 	.word	0x2000f4a0
 801881c:	41400000 	.word	0x41400000
 8018820:	41b00000 	.word	0x41b00000
 8018824:	447a0000 	.word	0x447a0000
 8018828:	44cf8000 	.word	0x44cf8000
 801882c:	41200000 	.word	0x41200000
 8018830:	41f00000 	.word	0x41f00000
 8018834:	44dac000 	.word	0x44dac000
 8018838:	41600000 	.word	0x41600000
 801883c:	41700000 	.word	0x41700000
 8018840:	41300000 	.word	0x41300000
 8018844:	41900000 	.word	0x41900000
 8018848:	2000f5e8 	.word	0x2000f5e8
 801884c:	44960000 	.word	0x44960000
 8018850:	44898000 	.word	0x44898000
 8018854:	40a00000 	.word	0x40a00000
 8018858:	41e00000 	.word	0x41e00000
 801885c:	44bcc000 	.word	0x44bcc000
 8018860:	41c00000 	.word	0x41c00000
 8018864:	41a00000 	.word	0x41a00000
 8018868:	41980000 	.word	0x41980000
 801886c:	41c80000 	.word	0x41c80000
 8018870:	44ce4000 	.word	0x44ce4000
 8018874:	44c1c000 	.word	0x44c1c000
 8018878:	42040000 	.word	0x42040000
 801887c:	44e74000 	.word	0x44e74000
 8018880:	44af0000 	.word	0x44af0000
 8018884:	44f3c000 	.word	0x44f3c000
 8018888:	2000f730 	.word	0x2000f730
 801888c:	44bb8000 	.word	0x44bb8000
 8018890:	44e24000 	.word	0x44e24000
				speed1600_shortest_mollifier.turn90_R.f_ofset = 23;
 8018894:	4b67      	ldr	r3, [pc, #412]	; (8018a34 <input_parameter+0xd88>)
 8018896:	4a68      	ldr	r2, [pc, #416]	; (8018a38 <input_parameter+0xd8c>)
 8018898:	635a      	str	r2, [r3, #52]	; 0x34
				speed1600_shortest_mollifier.turn90_R.e_ofset = 31;
 801889a:	4b66      	ldr	r3, [pc, #408]	; (8018a34 <input_parameter+0xd88>)
 801889c:	4a67      	ldr	r2, [pc, #412]	; (8018a3c <input_parameter+0xd90>)
 801889e:	639a      	str	r2, [r3, #56]	; 0x38

				speed1600_shortest_mollifier.turn90_L.g_speed = 1500;
 80188a0:	4b64      	ldr	r3, [pc, #400]	; (8018a34 <input_parameter+0xd88>)
 80188a2:	4a67      	ldr	r2, [pc, #412]	; (8018a40 <input_parameter+0xd94>)
 80188a4:	645a      	str	r2, [r3, #68]	; 0x44
				speed1600_shortest_mollifier.turn90_L.t_speed = 1830;
 80188a6:	4b63      	ldr	r3, [pc, #396]	; (8018a34 <input_parameter+0xd88>)
 80188a8:	4a66      	ldr	r2, [pc, #408]	; (8018a44 <input_parameter+0xd98>)
 80188aa:	651a      	str	r2, [r3, #80]	; 0x50
				speed1600_shortest_mollifier.turn90_L.f_ofset = 18;
 80188ac:	4b61      	ldr	r3, [pc, #388]	; (8018a34 <input_parameter+0xd88>)
 80188ae:	4a66      	ldr	r2, [pc, #408]	; (8018a48 <input_parameter+0xd9c>)
 80188b0:	649a      	str	r2, [r3, #72]	; 0x48
				speed1600_shortest_mollifier.turn90_L.e_ofset = 35;
 80188b2:	4b60      	ldr	r3, [pc, #384]	; (8018a34 <input_parameter+0xd88>)
 80188b4:	4a65      	ldr	r2, [pc, #404]	; (8018a4c <input_parameter+0xda0>)
 80188b6:	64da      	str	r2, [r3, #76]	; 0x4c

				speed1600_shortest_mollifier.turn180_R.g_speed =1500;
 80188b8:	4b5e      	ldr	r3, [pc, #376]	; (8018a34 <input_parameter+0xd88>)
 80188ba:	4a61      	ldr	r2, [pc, #388]	; (8018a40 <input_parameter+0xd94>)
 80188bc:	659a      	str	r2, [r3, #88]	; 0x58
				speed1600_shortest_mollifier.turn180_R.t_speed = 2100;
 80188be:	4b5d      	ldr	r3, [pc, #372]	; (8018a34 <input_parameter+0xd88>)
 80188c0:	4a63      	ldr	r2, [pc, #396]	; (8018a50 <input_parameter+0xda4>)
 80188c2:	665a      	str	r2, [r3, #100]	; 0x64
				speed1600_shortest_mollifier.turn180_R.f_ofset = 18;
 80188c4:	4b5b      	ldr	r3, [pc, #364]	; (8018a34 <input_parameter+0xd88>)
 80188c6:	4a60      	ldr	r2, [pc, #384]	; (8018a48 <input_parameter+0xd9c>)
 80188c8:	65da      	str	r2, [r3, #92]	; 0x5c
				speed1600_shortest_mollifier.turn180_R.e_ofset = 20;
 80188ca:	4b5a      	ldr	r3, [pc, #360]	; (8018a34 <input_parameter+0xd88>)
 80188cc:	4a61      	ldr	r2, [pc, #388]	; (8018a54 <input_parameter+0xda8>)
 80188ce:	661a      	str	r2, [r3, #96]	; 0x60

				speed1600_shortest_mollifier.turn180_L.g_speed = 1500;
 80188d0:	4b58      	ldr	r3, [pc, #352]	; (8018a34 <input_parameter+0xd88>)
 80188d2:	4a5b      	ldr	r2, [pc, #364]	; (8018a40 <input_parameter+0xd94>)
 80188d4:	66da      	str	r2, [r3, #108]	; 0x6c
				speed1600_shortest_mollifier.turn180_L.t_speed = 2100;
 80188d6:	4b57      	ldr	r3, [pc, #348]	; (8018a34 <input_parameter+0xd88>)
 80188d8:	4a5d      	ldr	r2, [pc, #372]	; (8018a50 <input_parameter+0xda4>)
 80188da:	679a      	str	r2, [r3, #120]	; 0x78
				speed1600_shortest_mollifier.turn180_L.f_ofset = 18;
 80188dc:	4b55      	ldr	r3, [pc, #340]	; (8018a34 <input_parameter+0xd88>)
 80188de:	4a5a      	ldr	r2, [pc, #360]	; (8018a48 <input_parameter+0xd9c>)
 80188e0:	671a      	str	r2, [r3, #112]	; 0x70
				speed1600_shortest_mollifier.turn180_L.e_ofset = 18;
 80188e2:	4b54      	ldr	r3, [pc, #336]	; (8018a34 <input_parameter+0xd88>)
 80188e4:	4a58      	ldr	r2, [pc, #352]	; (8018a48 <input_parameter+0xd9c>)
 80188e6:	675a      	str	r2, [r3, #116]	; 0x74

				speed1600_shortest_mollifier.turn45in_R.g_speed = 1500;
 80188e8:	4b52      	ldr	r3, [pc, #328]	; (8018a34 <input_parameter+0xd88>)
 80188ea:	4a55      	ldr	r2, [pc, #340]	; (8018a40 <input_parameter+0xd94>)
 80188ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				speed1600_shortest_mollifier.turn45in_R.t_speed = 1850;
 80188f0:	4b50      	ldr	r3, [pc, #320]	; (8018a34 <input_parameter+0xd88>)
 80188f2:	4a59      	ldr	r2, [pc, #356]	; (8018a58 <input_parameter+0xdac>)
 80188f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				speed1600_shortest_mollifier.turn45in_R.f_ofset = 19;
 80188f8:	4b4e      	ldr	r3, [pc, #312]	; (8018a34 <input_parameter+0xd88>)
 80188fa:	4a58      	ldr	r2, [pc, #352]	; (8018a5c <input_parameter+0xdb0>)
 80188fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				speed1600_shortest_mollifier.turn45in_R.e_ofset = 38;
 8018900:	4b4c      	ldr	r3, [pc, #304]	; (8018a34 <input_parameter+0xd88>)
 8018902:	4a57      	ldr	r2, [pc, #348]	; (8018a60 <input_parameter+0xdb4>)
 8018904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

				speed1600_shortest_mollifier.turn45in_L.g_speed = 1500;
 8018908:	4b4a      	ldr	r3, [pc, #296]	; (8018a34 <input_parameter+0xd88>)
 801890a:	4a4d      	ldr	r2, [pc, #308]	; (8018a40 <input_parameter+0xd94>)
 801890c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
				speed1600_shortest_mollifier.turn45in_L.t_speed = 1850;
 8018910:	4b48      	ldr	r3, [pc, #288]	; (8018a34 <input_parameter+0xd88>)
 8018912:	4a51      	ldr	r2, [pc, #324]	; (8018a58 <input_parameter+0xdac>)
 8018914:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				speed1600_shortest_mollifier.turn45in_L.f_ofset = 20;
 8018918:	4b46      	ldr	r3, [pc, #280]	; (8018a34 <input_parameter+0xd88>)
 801891a:	4a4e      	ldr	r2, [pc, #312]	; (8018a54 <input_parameter+0xda8>)
 801891c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				speed1600_shortest_mollifier.turn45in_L.e_ofset = 36;
 8018920:	4b44      	ldr	r3, [pc, #272]	; (8018a34 <input_parameter+0xd88>)
 8018922:	4a50      	ldr	r2, [pc, #320]	; (8018a64 <input_parameter+0xdb8>)
 8018924:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

				speed1600_shortest_mollifier.turn135in_R.g_speed = 1500;
 8018928:	4b42      	ldr	r3, [pc, #264]	; (8018a34 <input_parameter+0xd88>)
 801892a:	4a45      	ldr	r2, [pc, #276]	; (8018a40 <input_parameter+0xd94>)
 801892c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
				speed1600_shortest_mollifier.turn135in_R.t_speed = 2100;
 8018930:	4b40      	ldr	r3, [pc, #256]	; (8018a34 <input_parameter+0xd88>)
 8018932:	4a47      	ldr	r2, [pc, #284]	; (8018a50 <input_parameter+0xda4>)
 8018934:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				speed1600_shortest_mollifier.turn135in_R.f_ofset = 20;
 8018938:	4b3e      	ldr	r3, [pc, #248]	; (8018a34 <input_parameter+0xd88>)
 801893a:	4a46      	ldr	r2, [pc, #280]	; (8018a54 <input_parameter+0xda8>)
 801893c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				speed1600_shortest_mollifier.turn135in_R.e_ofset = 36;
 8018940:	4b3c      	ldr	r3, [pc, #240]	; (8018a34 <input_parameter+0xd88>)
 8018942:	4a48      	ldr	r2, [pc, #288]	; (8018a64 <input_parameter+0xdb8>)
 8018944:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				speed1600_shortest_mollifier.turn135in_L.g_speed = 1500;
 8018948:	4b3a      	ldr	r3, [pc, #232]	; (8018a34 <input_parameter+0xd88>)
 801894a:	4a3d      	ldr	r2, [pc, #244]	; (8018a40 <input_parameter+0xd94>)
 801894c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
				speed1600_shortest_mollifier.turn135in_L.t_speed = 2100;
 8018950:	4b38      	ldr	r3, [pc, #224]	; (8018a34 <input_parameter+0xd88>)
 8018952:	4a3f      	ldr	r2, [pc, #252]	; (8018a50 <input_parameter+0xda4>)
 8018954:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
				speed1600_shortest_mollifier.turn135in_L.f_ofset = 20;
 8018958:	4b36      	ldr	r3, [pc, #216]	; (8018a34 <input_parameter+0xd88>)
 801895a:	4a3e      	ldr	r2, [pc, #248]	; (8018a54 <input_parameter+0xda8>)
 801895c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
				speed1600_shortest_mollifier.turn135in_L.e_ofset = 34;
 8018960:	4b34      	ldr	r3, [pc, #208]	; (8018a34 <input_parameter+0xd88>)
 8018962:	4a41      	ldr	r2, [pc, #260]	; (8018a68 <input_parameter+0xdbc>)
 8018964:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				speed1600_shortest_mollifier.turn45out_R.g_speed = 1500;
 8018968:	4b32      	ldr	r3, [pc, #200]	; (8018a34 <input_parameter+0xd88>)
 801896a:	4a35      	ldr	r2, [pc, #212]	; (8018a40 <input_parameter+0xd94>)
 801896c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
				speed1600_shortest_mollifier.turn45out_R.t_speed = 1800;
 8018970:	4b30      	ldr	r3, [pc, #192]	; (8018a34 <input_parameter+0xd88>)
 8018972:	4a3e      	ldr	r2, [pc, #248]	; (8018a6c <input_parameter+0xdc0>)
 8018974:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
				speed1600_shortest_mollifier.turn45out_R.f_ofset = 21;
 8018978:	4b2e      	ldr	r3, [pc, #184]	; (8018a34 <input_parameter+0xd88>)
 801897a:	4a3d      	ldr	r2, [pc, #244]	; (8018a70 <input_parameter+0xdc4>)
 801897c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
				speed1600_shortest_mollifier.turn45out_R.e_ofset = 22;
 8018980:	4b2c      	ldr	r3, [pc, #176]	; (8018a34 <input_parameter+0xd88>)
 8018982:	4a3c      	ldr	r2, [pc, #240]	; (8018a74 <input_parameter+0xdc8>)
 8018984:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

				speed1600_shortest_mollifier.turn45out_L.g_speed = 1500;
 8018988:	4b2a      	ldr	r3, [pc, #168]	; (8018a34 <input_parameter+0xd88>)
 801898a:	4a2d      	ldr	r2, [pc, #180]	; (8018a40 <input_parameter+0xd94>)
 801898c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				speed1600_shortest_mollifier.turn45out_L.t_speed = 1800;
 8018990:	4b28      	ldr	r3, [pc, #160]	; (8018a34 <input_parameter+0xd88>)
 8018992:	4a36      	ldr	r2, [pc, #216]	; (8018a6c <input_parameter+0xdc0>)
 8018994:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
				speed1600_shortest_mollifier.turn45out_L.f_ofset = 18;
 8018998:	4b26      	ldr	r3, [pc, #152]	; (8018a34 <input_parameter+0xd88>)
 801899a:	4a2b      	ldr	r2, [pc, #172]	; (8018a48 <input_parameter+0xd9c>)
 801899c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
				speed1600_shortest_mollifier.turn45out_L.e_ofset = 24;
 80189a0:	4b24      	ldr	r3, [pc, #144]	; (8018a34 <input_parameter+0xd88>)
 80189a2:	4a35      	ldr	r2, [pc, #212]	; (8018a78 <input_parameter+0xdcc>)
 80189a4:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

				speed1600_shortest_mollifier.turn135out_R.g_speed = 1500;
 80189a8:	4b22      	ldr	r3, [pc, #136]	; (8018a34 <input_parameter+0xd88>)
 80189aa:	4a25      	ldr	r2, [pc, #148]	; (8018a40 <input_parameter+0xd94>)
 80189ac:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
				speed1600_shortest_mollifier.turn135out_R.t_speed = 2200;
 80189b0:	4b20      	ldr	r3, [pc, #128]	; (8018a34 <input_parameter+0xd88>)
 80189b2:	4a32      	ldr	r2, [pc, #200]	; (8018a7c <input_parameter+0xdd0>)
 80189b4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
				speed1600_shortest_mollifier.turn135out_R.f_ofset = 7;
 80189b8:	4b1e      	ldr	r3, [pc, #120]	; (8018a34 <input_parameter+0xd88>)
 80189ba:	4a31      	ldr	r2, [pc, #196]	; (8018a80 <input_parameter+0xdd4>)
 80189bc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
				speed1600_shortest_mollifier.turn135out_R.e_ofset = 22;
 80189c0:	4b1c      	ldr	r3, [pc, #112]	; (8018a34 <input_parameter+0xd88>)
 80189c2:	4a2c      	ldr	r2, [pc, #176]	; (8018a74 <input_parameter+0xdc8>)
 80189c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

				speed1600_shortest_mollifier.turn135out_L.g_speed = 1500;
 80189c8:	4b1a      	ldr	r3, [pc, #104]	; (8018a34 <input_parameter+0xd88>)
 80189ca:	4a1d      	ldr	r2, [pc, #116]	; (8018a40 <input_parameter+0xd94>)
 80189cc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
				speed1600_shortest_mollifier.turn135out_L.t_speed = 2200;
 80189d0:	4b18      	ldr	r3, [pc, #96]	; (8018a34 <input_parameter+0xd88>)
 80189d2:	4a2a      	ldr	r2, [pc, #168]	; (8018a7c <input_parameter+0xdd0>)
 80189d4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				speed1600_shortest_mollifier.turn135out_L.f_ofset = 7;
 80189d8:	4b16      	ldr	r3, [pc, #88]	; (8018a34 <input_parameter+0xd88>)
 80189da:	4a29      	ldr	r2, [pc, #164]	; (8018a80 <input_parameter+0xdd4>)
 80189dc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
				speed1600_shortest_mollifier.turn135out_L.e_ofset = 30;
 80189e0:	4b14      	ldr	r3, [pc, #80]	; (8018a34 <input_parameter+0xd88>)
 80189e2:	4a28      	ldr	r2, [pc, #160]	; (8018a84 <input_parameter+0xdd8>)
 80189e4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

				speed1600_shortest_mollifier.V90_R.g_speed = 1500;
 80189e8:	4b12      	ldr	r3, [pc, #72]	; (8018a34 <input_parameter+0xd88>)
 80189ea:	4a15      	ldr	r2, [pc, #84]	; (8018a40 <input_parameter+0xd94>)
 80189ec:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				speed1600_shortest_mollifier.V90_R.t_speed = 2150;
 80189f0:	4b10      	ldr	r3, [pc, #64]	; (8018a34 <input_parameter+0xd88>)
 80189f2:	4a25      	ldr	r2, [pc, #148]	; (8018a88 <input_parameter+0xddc>)
 80189f4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
				speed1600_shortest_mollifier.V90_R.f_ofset = 3;
 80189f8:	4b0e      	ldr	r3, [pc, #56]	; (8018a34 <input_parameter+0xd88>)
 80189fa:	4a24      	ldr	r2, [pc, #144]	; (8018a8c <input_parameter+0xde0>)
 80189fc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
				speed1600_shortest_mollifier.V90_R.e_ofset = 20;
 8018a00:	4b0c      	ldr	r3, [pc, #48]	; (8018a34 <input_parameter+0xd88>)
 8018a02:	4a14      	ldr	r2, [pc, #80]	; (8018a54 <input_parameter+0xda8>)
 8018a04:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

				speed1600_shortest_mollifier.V90_L.g_speed = 1500;
 8018a08:	4b0a      	ldr	r3, [pc, #40]	; (8018a34 <input_parameter+0xd88>)
 8018a0a:	4a0d      	ldr	r2, [pc, #52]	; (8018a40 <input_parameter+0xd94>)
 8018a0c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
				speed1600_shortest_mollifier.V90_L.t_speed = 2150;
 8018a10:	4b08      	ldr	r3, [pc, #32]	; (8018a34 <input_parameter+0xd88>)
 8018a12:	4a1d      	ldr	r2, [pc, #116]	; (8018a88 <input_parameter+0xddc>)
 8018a14:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				speed1600_shortest_mollifier.V90_L.f_ofset = 3;
 8018a18:	4b06      	ldr	r3, [pc, #24]	; (8018a34 <input_parameter+0xd88>)
 8018a1a:	4a1c      	ldr	r2, [pc, #112]	; (8018a8c <input_parameter+0xde0>)
 8018a1c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
				speed1600_shortest_mollifier.V90_L.e_ofset = 20;
 8018a20:	4b04      	ldr	r3, [pc, #16]	; (8018a34 <input_parameter+0xd88>)
 8018a22:	4a0c      	ldr	r2, [pc, #48]	; (8018a54 <input_parameter+0xda8>)
 8018a24:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


}
 8018a28:	bf00      	nop
 8018a2a:	46bd      	mov	sp, r7
 8018a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a30:	4770      	bx	lr
 8018a32:	bf00      	nop
 8018a34:	2000f730 	.word	0x2000f730
 8018a38:	41b80000 	.word	0x41b80000
 8018a3c:	41f80000 	.word	0x41f80000
 8018a40:	44bb8000 	.word	0x44bb8000
 8018a44:	44e4c000 	.word	0x44e4c000
 8018a48:	41900000 	.word	0x41900000
 8018a4c:	420c0000 	.word	0x420c0000
 8018a50:	45034000 	.word	0x45034000
 8018a54:	41a00000 	.word	0x41a00000
 8018a58:	44e74000 	.word	0x44e74000
 8018a5c:	41980000 	.word	0x41980000
 8018a60:	42180000 	.word	0x42180000
 8018a64:	42100000 	.word	0x42100000
 8018a68:	42080000 	.word	0x42080000
 8018a6c:	44e10000 	.word	0x44e10000
 8018a70:	41a80000 	.word	0x41a80000
 8018a74:	41b00000 	.word	0x41b00000
 8018a78:	41c00000 	.word	0x41c00000
 8018a7c:	45098000 	.word	0x45098000
 8018a80:	40e00000 	.word	0x40e00000
 8018a84:	41f00000 	.word	0x41f00000
 8018a88:	45066000 	.word	0x45066000
 8018a8c:	40400000 	.word	0x40400000

08018a90 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8018a90:	b580      	push	{r7, lr}
 8018a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8018a94:	4b22      	ldr	r3, [pc, #136]	; (8018b20 <MX_USART1_UART_Init+0x90>)
 8018a96:	4a23      	ldr	r2, [pc, #140]	; (8018b24 <MX_USART1_UART_Init+0x94>)
 8018a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8018a9a:	4b21      	ldr	r3, [pc, #132]	; (8018b20 <MX_USART1_UART_Init+0x90>)
 8018a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8018aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8018aa2:	4b1f      	ldr	r3, [pc, #124]	; (8018b20 <MX_USART1_UART_Init+0x90>)
 8018aa4:	2200      	movs	r2, #0
 8018aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8018aa8:	4b1d      	ldr	r3, [pc, #116]	; (8018b20 <MX_USART1_UART_Init+0x90>)
 8018aaa:	2200      	movs	r2, #0
 8018aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8018aae:	4b1c      	ldr	r3, [pc, #112]	; (8018b20 <MX_USART1_UART_Init+0x90>)
 8018ab0:	2200      	movs	r2, #0
 8018ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8018ab4:	4b1a      	ldr	r3, [pc, #104]	; (8018b20 <MX_USART1_UART_Init+0x90>)
 8018ab6:	220c      	movs	r2, #12
 8018ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8018aba:	4b19      	ldr	r3, [pc, #100]	; (8018b20 <MX_USART1_UART_Init+0x90>)
 8018abc:	2200      	movs	r2, #0
 8018abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8018ac0:	4b17      	ldr	r3, [pc, #92]	; (8018b20 <MX_USART1_UART_Init+0x90>)
 8018ac2:	2200      	movs	r2, #0
 8018ac4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8018ac6:	4b16      	ldr	r3, [pc, #88]	; (8018b20 <MX_USART1_UART_Init+0x90>)
 8018ac8:	2200      	movs	r2, #0
 8018aca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8018acc:	4b14      	ldr	r3, [pc, #80]	; (8018b20 <MX_USART1_UART_Init+0x90>)
 8018ace:	2200      	movs	r2, #0
 8018ad0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8018ad2:	4b13      	ldr	r3, [pc, #76]	; (8018b20 <MX_USART1_UART_Init+0x90>)
 8018ad4:	2200      	movs	r2, #0
 8018ad6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8018ad8:	4811      	ldr	r0, [pc, #68]	; (8018b20 <MX_USART1_UART_Init+0x90>)
 8018ada:	f006 fd2d 	bl	801f538 <HAL_UART_Init>
 8018ade:	4603      	mov	r3, r0
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	d001      	beq.n	8018ae8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8018ae4:	f7f1 f969 	bl	8009dba <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8018ae8:	2100      	movs	r1, #0
 8018aea:	480d      	ldr	r0, [pc, #52]	; (8018b20 <MX_USART1_UART_Init+0x90>)
 8018aec:	f007 faf4 	bl	80200d8 <HAL_UARTEx_SetTxFifoThreshold>
 8018af0:	4603      	mov	r3, r0
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d001      	beq.n	8018afa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8018af6:	f7f1 f960 	bl	8009dba <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8018afa:	2100      	movs	r1, #0
 8018afc:	4808      	ldr	r0, [pc, #32]	; (8018b20 <MX_USART1_UART_Init+0x90>)
 8018afe:	f007 fb29 	bl	8020154 <HAL_UARTEx_SetRxFifoThreshold>
 8018b02:	4603      	mov	r3, r0
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d001      	beq.n	8018b0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8018b08:	f7f1 f957 	bl	8009dba <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8018b0c:	4804      	ldr	r0, [pc, #16]	; (8018b20 <MX_USART1_UART_Init+0x90>)
 8018b0e:	f007 faaa 	bl	8020066 <HAL_UARTEx_DisableFifoMode>
 8018b12:	4603      	mov	r3, r0
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d001      	beq.n	8018b1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8018b18:	f7f1 f94f 	bl	8009dba <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8018b1c:	bf00      	nop
 8018b1e:	bd80      	pop	{r7, pc}
 8018b20:	2000f878 	.word	0x2000f878
 8018b24:	40013800 	.word	0x40013800

08018b28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8018b28:	b580      	push	{r7, lr}
 8018b2a:	b09e      	sub	sp, #120	; 0x78
 8018b2c:	af00      	add	r7, sp, #0
 8018b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018b30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018b34:	2200      	movs	r2, #0
 8018b36:	601a      	str	r2, [r3, #0]
 8018b38:	605a      	str	r2, [r3, #4]
 8018b3a:	609a      	str	r2, [r3, #8]
 8018b3c:	60da      	str	r2, [r3, #12]
 8018b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8018b40:	f107 0314 	add.w	r3, r7, #20
 8018b44:	2250      	movs	r2, #80	; 0x50
 8018b46:	2100      	movs	r1, #0
 8018b48:	4618      	mov	r0, r3
 8018b4a:	f007 fbc7 	bl	80202dc <memset>
  if(uartHandle->Instance==USART1)
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	4a1f      	ldr	r2, [pc, #124]	; (8018bd0 <HAL_UART_MspInit+0xa8>)
 8018b54:	4293      	cmp	r3, r2
 8018b56:	d137      	bne.n	8018bc8 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8018b58:	2301      	movs	r3, #1
 8018b5a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8018b5c:	2300      	movs	r3, #0
 8018b5e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8018b60:	f107 0314 	add.w	r3, r7, #20
 8018b64:	4618      	mov	r0, r3
 8018b66:	f004 f891 	bl	801cc8c <HAL_RCCEx_PeriphCLKConfig>
 8018b6a:	4603      	mov	r3, r0
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d001      	beq.n	8018b74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8018b70:	f7f1 f923 	bl	8009dba <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8018b74:	4b17      	ldr	r3, [pc, #92]	; (8018bd4 <HAL_UART_MspInit+0xac>)
 8018b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018b78:	4a16      	ldr	r2, [pc, #88]	; (8018bd4 <HAL_UART_MspInit+0xac>)
 8018b7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018b7e:	6613      	str	r3, [r2, #96]	; 0x60
 8018b80:	4b14      	ldr	r3, [pc, #80]	; (8018bd4 <HAL_UART_MspInit+0xac>)
 8018b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018b88:	613b      	str	r3, [r7, #16]
 8018b8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018b8c:	4b11      	ldr	r3, [pc, #68]	; (8018bd4 <HAL_UART_MspInit+0xac>)
 8018b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018b90:	4a10      	ldr	r2, [pc, #64]	; (8018bd4 <HAL_UART_MspInit+0xac>)
 8018b92:	f043 0301 	orr.w	r3, r3, #1
 8018b96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018b98:	4b0e      	ldr	r3, [pc, #56]	; (8018bd4 <HAL_UART_MspInit+0xac>)
 8018b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018b9c:	f003 0301 	and.w	r3, r3, #1
 8018ba0:	60fb      	str	r3, [r7, #12]
 8018ba2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8018ba4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8018ba8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018baa:	2302      	movs	r3, #2
 8018bac:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018bae:	2300      	movs	r3, #0
 8018bb0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018bb2:	2300      	movs	r3, #0
 8018bb4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8018bb6:	2307      	movs	r3, #7
 8018bb8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018bba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018bbe:	4619      	mov	r1, r3
 8018bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018bc4:	f003 f8e4 	bl	801bd90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8018bc8:	bf00      	nop
 8018bca:	3778      	adds	r7, #120	; 0x78
 8018bcc:	46bd      	mov	sp, r7
 8018bce:	bd80      	pop	{r7, pc}
 8018bd0:	40013800 	.word	0x40013800
 8018bd4:	40021000 	.word	0x40021000

08018bd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8018bd8:	480d      	ldr	r0, [pc, #52]	; (8018c10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8018bda:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8018bdc:	480d      	ldr	r0, [pc, #52]	; (8018c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8018bde:	490e      	ldr	r1, [pc, #56]	; (8018c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8018be0:	4a0e      	ldr	r2, [pc, #56]	; (8018c1c <LoopForever+0xe>)
  movs r3, #0
 8018be2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8018be4:	e002      	b.n	8018bec <LoopCopyDataInit>

08018be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8018be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8018be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8018bea:	3304      	adds	r3, #4

08018bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8018bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8018bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8018bf0:	d3f9      	bcc.n	8018be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8018bf2:	4a0b      	ldr	r2, [pc, #44]	; (8018c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8018bf4:	4c0b      	ldr	r4, [pc, #44]	; (8018c24 <LoopForever+0x16>)
  movs r3, #0
 8018bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8018bf8:	e001      	b.n	8018bfe <LoopFillZerobss>

08018bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8018bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8018bfc:	3204      	adds	r2, #4

08018bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8018bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8018c00:	d3fb      	bcc.n	8018bfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8018c02:	f7fe fd8b 	bl	801771c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8018c06:	f007 fb37 	bl	8020278 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8018c0a:	f7f0 ffdd 	bl	8009bc8 <main>

08018c0e <LoopForever>:

LoopForever:
    b LoopForever
 8018c0e:	e7fe      	b.n	8018c0e <LoopForever>
  ldr   r0, =_estack
 8018c10:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8018c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8018c18:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8018c1c:	08023b38 	.word	0x08023b38
  ldr r2, =_sbss
 8018c20:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8018c24:	2000f91c 	.word	0x2000f91c

08018c28 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8018c28:	e7fe      	b.n	8018c28 <ADC3_IRQHandler>
	...

08018c2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b082      	sub	sp, #8
 8018c30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8018c32:	2300      	movs	r3, #0
 8018c34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8018c36:	4b0c      	ldr	r3, [pc, #48]	; (8018c68 <HAL_Init+0x3c>)
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	4a0b      	ldr	r2, [pc, #44]	; (8018c68 <HAL_Init+0x3c>)
 8018c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018c40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8018c42:	2003      	movs	r0, #3
 8018c44:	f002 fb30 	bl	801b2a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8018c48:	2000      	movs	r0, #0
 8018c4a:	f000 f80f 	bl	8018c6c <HAL_InitTick>
 8018c4e:	4603      	mov	r3, r0
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d002      	beq.n	8018c5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8018c54:	2301      	movs	r3, #1
 8018c56:	71fb      	strb	r3, [r7, #7]
 8018c58:	e001      	b.n	8018c5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8018c5a:	f7fe fc13 	bl	8017484 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8018c5e:	79fb      	ldrb	r3, [r7, #7]

}
 8018c60:	4618      	mov	r0, r3
 8018c62:	3708      	adds	r7, #8
 8018c64:	46bd      	mov	sp, r7
 8018c66:	bd80      	pop	{r7, pc}
 8018c68:	40022000 	.word	0x40022000

08018c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8018c6c:	b580      	push	{r7, lr}
 8018c6e:	b084      	sub	sp, #16
 8018c70:	af00      	add	r7, sp, #0
 8018c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8018c74:	2300      	movs	r3, #0
 8018c76:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8018c78:	4b16      	ldr	r3, [pc, #88]	; (8018cd4 <HAL_InitTick+0x68>)
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d022      	beq.n	8018cc6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8018c80:	4b15      	ldr	r3, [pc, #84]	; (8018cd8 <HAL_InitTick+0x6c>)
 8018c82:	681a      	ldr	r2, [r3, #0]
 8018c84:	4b13      	ldr	r3, [pc, #76]	; (8018cd4 <HAL_InitTick+0x68>)
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018c8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8018c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8018c94:	4618      	mov	r0, r3
 8018c96:	f002 fb3a 	bl	801b30e <HAL_SYSTICK_Config>
 8018c9a:	4603      	mov	r3, r0
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d10f      	bne.n	8018cc0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	2b0f      	cmp	r3, #15
 8018ca4:	d809      	bhi.n	8018cba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8018ca6:	2200      	movs	r2, #0
 8018ca8:	6879      	ldr	r1, [r7, #4]
 8018caa:	f04f 30ff 	mov.w	r0, #4294967295
 8018cae:	f002 fb06 	bl	801b2be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8018cb2:	4a0a      	ldr	r2, [pc, #40]	; (8018cdc <HAL_InitTick+0x70>)
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	6013      	str	r3, [r2, #0]
 8018cb8:	e007      	b.n	8018cca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8018cba:	2301      	movs	r3, #1
 8018cbc:	73fb      	strb	r3, [r7, #15]
 8018cbe:	e004      	b.n	8018cca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8018cc0:	2301      	movs	r3, #1
 8018cc2:	73fb      	strb	r3, [r7, #15]
 8018cc4:	e001      	b.n	8018cca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8018cc6:	2301      	movs	r3, #1
 8018cc8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8018cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8018ccc:	4618      	mov	r0, r3
 8018cce:	3710      	adds	r7, #16
 8018cd0:	46bd      	mov	sp, r7
 8018cd2:	bd80      	pop	{r7, pc}
 8018cd4:	20000008 	.word	0x20000008
 8018cd8:	20000000 	.word	0x20000000
 8018cdc:	20000004 	.word	0x20000004

08018ce0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8018ce0:	b480      	push	{r7}
 8018ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8018ce4:	4b05      	ldr	r3, [pc, #20]	; (8018cfc <HAL_IncTick+0x1c>)
 8018ce6:	681a      	ldr	r2, [r3, #0]
 8018ce8:	4b05      	ldr	r3, [pc, #20]	; (8018d00 <HAL_IncTick+0x20>)
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	4413      	add	r3, r2
 8018cee:	4a03      	ldr	r2, [pc, #12]	; (8018cfc <HAL_IncTick+0x1c>)
 8018cf0:	6013      	str	r3, [r2, #0]
}
 8018cf2:	bf00      	nop
 8018cf4:	46bd      	mov	sp, r7
 8018cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cfa:	4770      	bx	lr
 8018cfc:	2000f908 	.word	0x2000f908
 8018d00:	20000008 	.word	0x20000008

08018d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8018d04:	b480      	push	{r7}
 8018d06:	af00      	add	r7, sp, #0
  return uwTick;
 8018d08:	4b03      	ldr	r3, [pc, #12]	; (8018d18 <HAL_GetTick+0x14>)
 8018d0a:	681b      	ldr	r3, [r3, #0]
}
 8018d0c:	4618      	mov	r0, r3
 8018d0e:	46bd      	mov	sp, r7
 8018d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d14:	4770      	bx	lr
 8018d16:	bf00      	nop
 8018d18:	2000f908 	.word	0x2000f908

08018d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8018d1c:	b580      	push	{r7, lr}
 8018d1e:	b084      	sub	sp, #16
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8018d24:	f7ff ffee 	bl	8018d04 <HAL_GetTick>
 8018d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d34:	d004      	beq.n	8018d40 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8018d36:	4b09      	ldr	r3, [pc, #36]	; (8018d5c <HAL_Delay+0x40>)
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	68fa      	ldr	r2, [r7, #12]
 8018d3c:	4413      	add	r3, r2
 8018d3e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8018d40:	bf00      	nop
 8018d42:	f7ff ffdf 	bl	8018d04 <HAL_GetTick>
 8018d46:	4602      	mov	r2, r0
 8018d48:	68bb      	ldr	r3, [r7, #8]
 8018d4a:	1ad3      	subs	r3, r2, r3
 8018d4c:	68fa      	ldr	r2, [r7, #12]
 8018d4e:	429a      	cmp	r2, r3
 8018d50:	d8f7      	bhi.n	8018d42 <HAL_Delay+0x26>
  {
  }
}
 8018d52:	bf00      	nop
 8018d54:	bf00      	nop
 8018d56:	3710      	adds	r7, #16
 8018d58:	46bd      	mov	sp, r7
 8018d5a:	bd80      	pop	{r7, pc}
 8018d5c:	20000008 	.word	0x20000008

08018d60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8018d60:	b480      	push	{r7}
 8018d62:	b083      	sub	sp, #12
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	6078      	str	r0, [r7, #4]
 8018d68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	689b      	ldr	r3, [r3, #8]
 8018d6e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8018d72:	683b      	ldr	r3, [r7, #0]
 8018d74:	431a      	orrs	r2, r3
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	609a      	str	r2, [r3, #8]
}
 8018d7a:	bf00      	nop
 8018d7c:	370c      	adds	r7, #12
 8018d7e:	46bd      	mov	sp, r7
 8018d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d84:	4770      	bx	lr

08018d86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8018d86:	b480      	push	{r7}
 8018d88:	b083      	sub	sp, #12
 8018d8a:	af00      	add	r7, sp, #0
 8018d8c:	6078      	str	r0, [r7, #4]
 8018d8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	689b      	ldr	r3, [r3, #8]
 8018d94:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8018d98:	683b      	ldr	r3, [r7, #0]
 8018d9a:	431a      	orrs	r2, r3
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	609a      	str	r2, [r3, #8]
}
 8018da0:	bf00      	nop
 8018da2:	370c      	adds	r7, #12
 8018da4:	46bd      	mov	sp, r7
 8018da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018daa:	4770      	bx	lr

08018dac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8018dac:	b480      	push	{r7}
 8018dae:	b083      	sub	sp, #12
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	689b      	ldr	r3, [r3, #8]
 8018db8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	370c      	adds	r7, #12
 8018dc0:	46bd      	mov	sp, r7
 8018dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dc6:	4770      	bx	lr

08018dc8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8018dc8:	b480      	push	{r7}
 8018dca:	b087      	sub	sp, #28
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	60f8      	str	r0, [r7, #12]
 8018dd0:	60b9      	str	r1, [r7, #8]
 8018dd2:	607a      	str	r2, [r7, #4]
 8018dd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	3360      	adds	r3, #96	; 0x60
 8018dda:	461a      	mov	r2, r3
 8018ddc:	68bb      	ldr	r3, [r7, #8]
 8018dde:	009b      	lsls	r3, r3, #2
 8018de0:	4413      	add	r3, r2
 8018de2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018de4:	697b      	ldr	r3, [r7, #20]
 8018de6:	681a      	ldr	r2, [r3, #0]
 8018de8:	4b08      	ldr	r3, [pc, #32]	; (8018e0c <LL_ADC_SetOffset+0x44>)
 8018dea:	4013      	ands	r3, r2
 8018dec:	687a      	ldr	r2, [r7, #4]
 8018dee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8018df2:	683a      	ldr	r2, [r7, #0]
 8018df4:	430a      	orrs	r2, r1
 8018df6:	4313      	orrs	r3, r2
 8018df8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018dfc:	697b      	ldr	r3, [r7, #20]
 8018dfe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8018e00:	bf00      	nop
 8018e02:	371c      	adds	r7, #28
 8018e04:	46bd      	mov	sp, r7
 8018e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e0a:	4770      	bx	lr
 8018e0c:	03fff000 	.word	0x03fff000

08018e10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8018e10:	b480      	push	{r7}
 8018e12:	b085      	sub	sp, #20
 8018e14:	af00      	add	r7, sp, #0
 8018e16:	6078      	str	r0, [r7, #4]
 8018e18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	3360      	adds	r3, #96	; 0x60
 8018e1e:	461a      	mov	r2, r3
 8018e20:	683b      	ldr	r3, [r7, #0]
 8018e22:	009b      	lsls	r3, r3, #2
 8018e24:	4413      	add	r3, r2
 8018e26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8018e28:	68fb      	ldr	r3, [r7, #12]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8018e30:	4618      	mov	r0, r3
 8018e32:	3714      	adds	r7, #20
 8018e34:	46bd      	mov	sp, r7
 8018e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e3a:	4770      	bx	lr

08018e3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8018e3c:	b480      	push	{r7}
 8018e3e:	b087      	sub	sp, #28
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	60f8      	str	r0, [r7, #12]
 8018e44:	60b9      	str	r1, [r7, #8]
 8018e46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	3360      	adds	r3, #96	; 0x60
 8018e4c:	461a      	mov	r2, r3
 8018e4e:	68bb      	ldr	r3, [r7, #8]
 8018e50:	009b      	lsls	r3, r3, #2
 8018e52:	4413      	add	r3, r2
 8018e54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018e56:	697b      	ldr	r3, [r7, #20]
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	431a      	orrs	r2, r3
 8018e62:	697b      	ldr	r3, [r7, #20]
 8018e64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8018e66:	bf00      	nop
 8018e68:	371c      	adds	r7, #28
 8018e6a:	46bd      	mov	sp, r7
 8018e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e70:	4770      	bx	lr

08018e72 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8018e72:	b480      	push	{r7}
 8018e74:	b087      	sub	sp, #28
 8018e76:	af00      	add	r7, sp, #0
 8018e78:	60f8      	str	r0, [r7, #12]
 8018e7a:	60b9      	str	r1, [r7, #8]
 8018e7c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018e7e:	68fb      	ldr	r3, [r7, #12]
 8018e80:	3360      	adds	r3, #96	; 0x60
 8018e82:	461a      	mov	r2, r3
 8018e84:	68bb      	ldr	r3, [r7, #8]
 8018e86:	009b      	lsls	r3, r3, #2
 8018e88:	4413      	add	r3, r2
 8018e8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018e8c:	697b      	ldr	r3, [r7, #20]
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	431a      	orrs	r2, r3
 8018e98:	697b      	ldr	r3, [r7, #20]
 8018e9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8018e9c:	bf00      	nop
 8018e9e:	371c      	adds	r7, #28
 8018ea0:	46bd      	mov	sp, r7
 8018ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ea6:	4770      	bx	lr

08018ea8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8018ea8:	b480      	push	{r7}
 8018eaa:	b087      	sub	sp, #28
 8018eac:	af00      	add	r7, sp, #0
 8018eae:	60f8      	str	r0, [r7, #12]
 8018eb0:	60b9      	str	r1, [r7, #8]
 8018eb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	3360      	adds	r3, #96	; 0x60
 8018eb8:	461a      	mov	r2, r3
 8018eba:	68bb      	ldr	r3, [r7, #8]
 8018ebc:	009b      	lsls	r3, r3, #2
 8018ebe:	4413      	add	r3, r2
 8018ec0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018ec2:	697b      	ldr	r3, [r7, #20]
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	431a      	orrs	r2, r3
 8018ece:	697b      	ldr	r3, [r7, #20]
 8018ed0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8018ed2:	bf00      	nop
 8018ed4:	371c      	adds	r7, #28
 8018ed6:	46bd      	mov	sp, r7
 8018ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018edc:	4770      	bx	lr

08018ede <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8018ede:	b480      	push	{r7}
 8018ee0:	b083      	sub	sp, #12
 8018ee2:	af00      	add	r7, sp, #0
 8018ee4:	6078      	str	r0, [r7, #4]
 8018ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	695b      	ldr	r3, [r3, #20]
 8018eec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018ef0:	683b      	ldr	r3, [r7, #0]
 8018ef2:	431a      	orrs	r2, r3
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	615a      	str	r2, [r3, #20]
}
 8018ef8:	bf00      	nop
 8018efa:	370c      	adds	r7, #12
 8018efc:	46bd      	mov	sp, r7
 8018efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f02:	4770      	bx	lr

08018f04 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8018f04:	b480      	push	{r7}
 8018f06:	b083      	sub	sp, #12
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	68db      	ldr	r3, [r3, #12]
 8018f10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d101      	bne.n	8018f1c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8018f18:	2301      	movs	r3, #1
 8018f1a:	e000      	b.n	8018f1e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8018f1c:	2300      	movs	r3, #0
}
 8018f1e:	4618      	mov	r0, r3
 8018f20:	370c      	adds	r7, #12
 8018f22:	46bd      	mov	sp, r7
 8018f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f28:	4770      	bx	lr

08018f2a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8018f2a:	b480      	push	{r7}
 8018f2c:	b087      	sub	sp, #28
 8018f2e:	af00      	add	r7, sp, #0
 8018f30:	60f8      	str	r0, [r7, #12]
 8018f32:	60b9      	str	r1, [r7, #8]
 8018f34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8018f36:	68fb      	ldr	r3, [r7, #12]
 8018f38:	3330      	adds	r3, #48	; 0x30
 8018f3a:	461a      	mov	r2, r3
 8018f3c:	68bb      	ldr	r3, [r7, #8]
 8018f3e:	0a1b      	lsrs	r3, r3, #8
 8018f40:	009b      	lsls	r3, r3, #2
 8018f42:	f003 030c 	and.w	r3, r3, #12
 8018f46:	4413      	add	r3, r2
 8018f48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018f4a:	697b      	ldr	r3, [r7, #20]
 8018f4c:	681a      	ldr	r2, [r3, #0]
 8018f4e:	68bb      	ldr	r3, [r7, #8]
 8018f50:	f003 031f 	and.w	r3, r3, #31
 8018f54:	211f      	movs	r1, #31
 8018f56:	fa01 f303 	lsl.w	r3, r1, r3
 8018f5a:	43db      	mvns	r3, r3
 8018f5c:	401a      	ands	r2, r3
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	0e9b      	lsrs	r3, r3, #26
 8018f62:	f003 011f 	and.w	r1, r3, #31
 8018f66:	68bb      	ldr	r3, [r7, #8]
 8018f68:	f003 031f 	and.w	r3, r3, #31
 8018f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8018f70:	431a      	orrs	r2, r3
 8018f72:	697b      	ldr	r3, [r7, #20]
 8018f74:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8018f76:	bf00      	nop
 8018f78:	371c      	adds	r7, #28
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f80:	4770      	bx	lr

08018f82 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8018f82:	b480      	push	{r7}
 8018f84:	b083      	sub	sp, #12
 8018f86:	af00      	add	r7, sp, #0
 8018f88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018f8e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d101      	bne.n	8018f9a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8018f96:	2301      	movs	r3, #1
 8018f98:	e000      	b.n	8018f9c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8018f9a:	2300      	movs	r3, #0
}
 8018f9c:	4618      	mov	r0, r3
 8018f9e:	370c      	adds	r7, #12
 8018fa0:	46bd      	mov	sp, r7
 8018fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fa6:	4770      	bx	lr

08018fa8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8018fa8:	b480      	push	{r7}
 8018faa:	b087      	sub	sp, #28
 8018fac:	af00      	add	r7, sp, #0
 8018fae:	60f8      	str	r0, [r7, #12]
 8018fb0:	60b9      	str	r1, [r7, #8]
 8018fb2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	3314      	adds	r3, #20
 8018fb8:	461a      	mov	r2, r3
 8018fba:	68bb      	ldr	r3, [r7, #8]
 8018fbc:	0e5b      	lsrs	r3, r3, #25
 8018fbe:	009b      	lsls	r3, r3, #2
 8018fc0:	f003 0304 	and.w	r3, r3, #4
 8018fc4:	4413      	add	r3, r2
 8018fc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018fc8:	697b      	ldr	r3, [r7, #20]
 8018fca:	681a      	ldr	r2, [r3, #0]
 8018fcc:	68bb      	ldr	r3, [r7, #8]
 8018fce:	0d1b      	lsrs	r3, r3, #20
 8018fd0:	f003 031f 	and.w	r3, r3, #31
 8018fd4:	2107      	movs	r1, #7
 8018fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8018fda:	43db      	mvns	r3, r3
 8018fdc:	401a      	ands	r2, r3
 8018fde:	68bb      	ldr	r3, [r7, #8]
 8018fe0:	0d1b      	lsrs	r3, r3, #20
 8018fe2:	f003 031f 	and.w	r3, r3, #31
 8018fe6:	6879      	ldr	r1, [r7, #4]
 8018fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8018fec:	431a      	orrs	r2, r3
 8018fee:	697b      	ldr	r3, [r7, #20]
 8018ff0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8018ff2:	bf00      	nop
 8018ff4:	371c      	adds	r7, #28
 8018ff6:	46bd      	mov	sp, r7
 8018ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ffc:	4770      	bx	lr
	...

08019000 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8019000:	b480      	push	{r7}
 8019002:	b085      	sub	sp, #20
 8019004:	af00      	add	r7, sp, #0
 8019006:	60f8      	str	r0, [r7, #12]
 8019008:	60b9      	str	r1, [r7, #8]
 801900a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	4a0f      	ldr	r2, [pc, #60]	; (801904c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8019010:	4293      	cmp	r3, r2
 8019012:	d10a      	bne.n	801902a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8019014:	68fb      	ldr	r3, [r7, #12]
 8019016:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801901a:	68bb      	ldr	r3, [r7, #8]
 801901c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019020:	431a      	orrs	r2, r3
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8019028:	e00a      	b.n	8019040 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8019030:	68bb      	ldr	r3, [r7, #8]
 8019032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019036:	43db      	mvns	r3, r3
 8019038:	401a      	ands	r2, r3
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8019040:	bf00      	nop
 8019042:	3714      	adds	r7, #20
 8019044:	46bd      	mov	sp, r7
 8019046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801904a:	4770      	bx	lr
 801904c:	407f0000 	.word	0x407f0000

08019050 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8019050:	b480      	push	{r7}
 8019052:	b083      	sub	sp, #12
 8019054:	af00      	add	r7, sp, #0
 8019056:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	689b      	ldr	r3, [r3, #8]
 801905c:	f003 031f 	and.w	r3, r3, #31
}
 8019060:	4618      	mov	r0, r3
 8019062:	370c      	adds	r7, #12
 8019064:	46bd      	mov	sp, r7
 8019066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801906a:	4770      	bx	lr

0801906c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 801906c:	b480      	push	{r7}
 801906e:	b083      	sub	sp, #12
 8019070:	af00      	add	r7, sp, #0
 8019072:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	689b      	ldr	r3, [r3, #8]
 8019078:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 801907c:	4618      	mov	r0, r3
 801907e:	370c      	adds	r7, #12
 8019080:	46bd      	mov	sp, r7
 8019082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019086:	4770      	bx	lr

08019088 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8019088:	b480      	push	{r7}
 801908a:	b083      	sub	sp, #12
 801908c:	af00      	add	r7, sp, #0
 801908e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	689b      	ldr	r3, [r3, #8]
 8019094:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8019098:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801909c:	687a      	ldr	r2, [r7, #4]
 801909e:	6093      	str	r3, [r2, #8]
}
 80190a0:	bf00      	nop
 80190a2:	370c      	adds	r7, #12
 80190a4:	46bd      	mov	sp, r7
 80190a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190aa:	4770      	bx	lr

080190ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80190ac:	b480      	push	{r7}
 80190ae:	b083      	sub	sp, #12
 80190b0:	af00      	add	r7, sp, #0
 80190b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	689b      	ldr	r3, [r3, #8]
 80190b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80190bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80190c0:	d101      	bne.n	80190c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80190c2:	2301      	movs	r3, #1
 80190c4:	e000      	b.n	80190c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80190c6:	2300      	movs	r3, #0
}
 80190c8:	4618      	mov	r0, r3
 80190ca:	370c      	adds	r7, #12
 80190cc:	46bd      	mov	sp, r7
 80190ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190d2:	4770      	bx	lr

080190d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80190d4:	b480      	push	{r7}
 80190d6:	b083      	sub	sp, #12
 80190d8:	af00      	add	r7, sp, #0
 80190da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	689b      	ldr	r3, [r3, #8]
 80190e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80190e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80190e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80190f0:	bf00      	nop
 80190f2:	370c      	adds	r7, #12
 80190f4:	46bd      	mov	sp, r7
 80190f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190fa:	4770      	bx	lr

080190fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80190fc:	b480      	push	{r7}
 80190fe:	b083      	sub	sp, #12
 8019100:	af00      	add	r7, sp, #0
 8019102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	689b      	ldr	r3, [r3, #8]
 8019108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801910c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8019110:	d101      	bne.n	8019116 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8019112:	2301      	movs	r3, #1
 8019114:	e000      	b.n	8019118 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8019116:	2300      	movs	r3, #0
}
 8019118:	4618      	mov	r0, r3
 801911a:	370c      	adds	r7, #12
 801911c:	46bd      	mov	sp, r7
 801911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019122:	4770      	bx	lr

08019124 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8019124:	b480      	push	{r7}
 8019126:	b083      	sub	sp, #12
 8019128:	af00      	add	r7, sp, #0
 801912a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	689b      	ldr	r3, [r3, #8]
 8019130:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019134:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019138:	f043 0201 	orr.w	r2, r3, #1
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8019140:	bf00      	nop
 8019142:	370c      	adds	r7, #12
 8019144:	46bd      	mov	sp, r7
 8019146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801914a:	4770      	bx	lr

0801914c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 801914c:	b480      	push	{r7}
 801914e:	b083      	sub	sp, #12
 8019150:	af00      	add	r7, sp, #0
 8019152:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	689b      	ldr	r3, [r3, #8]
 8019158:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801915c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019160:	f043 0202 	orr.w	r2, r3, #2
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8019168:	bf00      	nop
 801916a:	370c      	adds	r7, #12
 801916c:	46bd      	mov	sp, r7
 801916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019172:	4770      	bx	lr

08019174 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8019174:	b480      	push	{r7}
 8019176:	b083      	sub	sp, #12
 8019178:	af00      	add	r7, sp, #0
 801917a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	689b      	ldr	r3, [r3, #8]
 8019180:	f003 0301 	and.w	r3, r3, #1
 8019184:	2b01      	cmp	r3, #1
 8019186:	d101      	bne.n	801918c <LL_ADC_IsEnabled+0x18>
 8019188:	2301      	movs	r3, #1
 801918a:	e000      	b.n	801918e <LL_ADC_IsEnabled+0x1a>
 801918c:	2300      	movs	r3, #0
}
 801918e:	4618      	mov	r0, r3
 8019190:	370c      	adds	r7, #12
 8019192:	46bd      	mov	sp, r7
 8019194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019198:	4770      	bx	lr

0801919a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 801919a:	b480      	push	{r7}
 801919c:	b083      	sub	sp, #12
 801919e:	af00      	add	r7, sp, #0
 80191a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	689b      	ldr	r3, [r3, #8]
 80191a6:	f003 0302 	and.w	r3, r3, #2
 80191aa:	2b02      	cmp	r3, #2
 80191ac:	d101      	bne.n	80191b2 <LL_ADC_IsDisableOngoing+0x18>
 80191ae:	2301      	movs	r3, #1
 80191b0:	e000      	b.n	80191b4 <LL_ADC_IsDisableOngoing+0x1a>
 80191b2:	2300      	movs	r3, #0
}
 80191b4:	4618      	mov	r0, r3
 80191b6:	370c      	adds	r7, #12
 80191b8:	46bd      	mov	sp, r7
 80191ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191be:	4770      	bx	lr

080191c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80191c0:	b480      	push	{r7}
 80191c2:	b083      	sub	sp, #12
 80191c4:	af00      	add	r7, sp, #0
 80191c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	689b      	ldr	r3, [r3, #8]
 80191cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80191d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80191d4:	f043 0204 	orr.w	r2, r3, #4
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80191dc:	bf00      	nop
 80191de:	370c      	adds	r7, #12
 80191e0:	46bd      	mov	sp, r7
 80191e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191e6:	4770      	bx	lr

080191e8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80191e8:	b480      	push	{r7}
 80191ea:	b083      	sub	sp, #12
 80191ec:	af00      	add	r7, sp, #0
 80191ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	689b      	ldr	r3, [r3, #8]
 80191f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80191f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80191fc:	f043 0210 	orr.w	r2, r3, #16
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8019204:	bf00      	nop
 8019206:	370c      	adds	r7, #12
 8019208:	46bd      	mov	sp, r7
 801920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801920e:	4770      	bx	lr

08019210 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8019210:	b480      	push	{r7}
 8019212:	b083      	sub	sp, #12
 8019214:	af00      	add	r7, sp, #0
 8019216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	689b      	ldr	r3, [r3, #8]
 801921c:	f003 0304 	and.w	r3, r3, #4
 8019220:	2b04      	cmp	r3, #4
 8019222:	d101      	bne.n	8019228 <LL_ADC_REG_IsConversionOngoing+0x18>
 8019224:	2301      	movs	r3, #1
 8019226:	e000      	b.n	801922a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8019228:	2300      	movs	r3, #0
}
 801922a:	4618      	mov	r0, r3
 801922c:	370c      	adds	r7, #12
 801922e:	46bd      	mov	sp, r7
 8019230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019234:	4770      	bx	lr

08019236 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8019236:	b480      	push	{r7}
 8019238:	b083      	sub	sp, #12
 801923a:	af00      	add	r7, sp, #0
 801923c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	689b      	ldr	r3, [r3, #8]
 8019242:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019246:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801924a:	f043 0220 	orr.w	r2, r3, #32
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8019252:	bf00      	nop
 8019254:	370c      	adds	r7, #12
 8019256:	46bd      	mov	sp, r7
 8019258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801925c:	4770      	bx	lr

0801925e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 801925e:	b480      	push	{r7}
 8019260:	b083      	sub	sp, #12
 8019262:	af00      	add	r7, sp, #0
 8019264:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	689b      	ldr	r3, [r3, #8]
 801926a:	f003 0308 	and.w	r3, r3, #8
 801926e:	2b08      	cmp	r3, #8
 8019270:	d101      	bne.n	8019276 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8019272:	2301      	movs	r3, #1
 8019274:	e000      	b.n	8019278 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8019276:	2300      	movs	r3, #0
}
 8019278:	4618      	mov	r0, r3
 801927a:	370c      	adds	r7, #12
 801927c:	46bd      	mov	sp, r7
 801927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019282:	4770      	bx	lr

08019284 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8019284:	b590      	push	{r4, r7, lr}
 8019286:	b089      	sub	sp, #36	; 0x24
 8019288:	af00      	add	r7, sp, #0
 801928a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801928c:	2300      	movs	r3, #0
 801928e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8019290:	2300      	movs	r3, #0
 8019292:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	2b00      	cmp	r3, #0
 8019298:	d101      	bne.n	801929e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 801929a:	2301      	movs	r3, #1
 801929c:	e1a1      	b.n	80195e2 <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	695b      	ldr	r3, [r3, #20]
 80192a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d109      	bne.n	80192c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80192ac:	6878      	ldr	r0, [r7, #4]
 80192ae:	f7ee ff37 	bl	8008120 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	2200      	movs	r2, #0
 80192b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	2200      	movs	r2, #0
 80192bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	4618      	mov	r0, r3
 80192c6:	f7ff fef1 	bl	80190ac <LL_ADC_IsDeepPowerDownEnabled>
 80192ca:	4603      	mov	r3, r0
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d004      	beq.n	80192da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	4618      	mov	r0, r3
 80192d6:	f7ff fed7 	bl	8019088 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	4618      	mov	r0, r3
 80192e0:	f7ff ff0c 	bl	80190fc <LL_ADC_IsInternalRegulatorEnabled>
 80192e4:	4603      	mov	r3, r0
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	d115      	bne.n	8019316 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	4618      	mov	r0, r3
 80192f0:	f7ff fef0 	bl	80190d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80192f4:	4b9a      	ldr	r3, [pc, #616]	; (8019560 <HAL_ADC_Init+0x2dc>)
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	099b      	lsrs	r3, r3, #6
 80192fa:	4a9a      	ldr	r2, [pc, #616]	; (8019564 <HAL_ADC_Init+0x2e0>)
 80192fc:	fba2 2303 	umull	r2, r3, r2, r3
 8019300:	099b      	lsrs	r3, r3, #6
 8019302:	3301      	adds	r3, #1
 8019304:	005b      	lsls	r3, r3, #1
 8019306:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8019308:	e002      	b.n	8019310 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 801930a:	68bb      	ldr	r3, [r7, #8]
 801930c:	3b01      	subs	r3, #1
 801930e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8019310:	68bb      	ldr	r3, [r7, #8]
 8019312:	2b00      	cmp	r3, #0
 8019314:	d1f9      	bne.n	801930a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	4618      	mov	r0, r3
 801931c:	f7ff feee 	bl	80190fc <LL_ADC_IsInternalRegulatorEnabled>
 8019320:	4603      	mov	r3, r0
 8019322:	2b00      	cmp	r3, #0
 8019324:	d10d      	bne.n	8019342 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801932a:	f043 0210 	orr.w	r2, r3, #16
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019336:	f043 0201 	orr.w	r2, r3, #1
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 801933e:	2301      	movs	r3, #1
 8019340:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	4618      	mov	r0, r3
 8019348:	f7ff ff62 	bl	8019210 <LL_ADC_REG_IsConversionOngoing>
 801934c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019352:	f003 0310 	and.w	r3, r3, #16
 8019356:	2b00      	cmp	r3, #0
 8019358:	f040 813a 	bne.w	80195d0 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 801935c:	697b      	ldr	r3, [r7, #20]
 801935e:	2b00      	cmp	r3, #0
 8019360:	f040 8136 	bne.w	80195d0 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019368:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 801936c:	f043 0202 	orr.w	r2, r3, #2
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	4618      	mov	r0, r3
 801937a:	f7ff fefb 	bl	8019174 <LL_ADC_IsEnabled>
 801937e:	4603      	mov	r3, r0
 8019380:	2b00      	cmp	r3, #0
 8019382:	d137      	bne.n	80193f4 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801938c:	d004      	beq.n	8019398 <HAL_ADC_Init+0x114>
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	4a75      	ldr	r2, [pc, #468]	; (8019568 <HAL_ADC_Init+0x2e4>)
 8019394:	4293      	cmp	r3, r2
 8019396:	d10f      	bne.n	80193b8 <HAL_ADC_Init+0x134>
 8019398:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801939c:	f7ff feea 	bl	8019174 <LL_ADC_IsEnabled>
 80193a0:	4604      	mov	r4, r0
 80193a2:	4871      	ldr	r0, [pc, #452]	; (8019568 <HAL_ADC_Init+0x2e4>)
 80193a4:	f7ff fee6 	bl	8019174 <LL_ADC_IsEnabled>
 80193a8:	4603      	mov	r3, r0
 80193aa:	4323      	orrs	r3, r4
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	bf0c      	ite	eq
 80193b0:	2301      	moveq	r3, #1
 80193b2:	2300      	movne	r3, #0
 80193b4:	b2db      	uxtb	r3, r3
 80193b6:	e008      	b.n	80193ca <HAL_ADC_Init+0x146>
 80193b8:	486c      	ldr	r0, [pc, #432]	; (801956c <HAL_ADC_Init+0x2e8>)
 80193ba:	f7ff fedb 	bl	8019174 <LL_ADC_IsEnabled>
 80193be:	4603      	mov	r3, r0
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	bf0c      	ite	eq
 80193c4:	2301      	moveq	r3, #1
 80193c6:	2300      	movne	r3, #0
 80193c8:	b2db      	uxtb	r3, r3
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d012      	beq.n	80193f4 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80193d6:	d004      	beq.n	80193e2 <HAL_ADC_Init+0x15e>
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	4a62      	ldr	r2, [pc, #392]	; (8019568 <HAL_ADC_Init+0x2e4>)
 80193de:	4293      	cmp	r3, r2
 80193e0:	d101      	bne.n	80193e6 <HAL_ADC_Init+0x162>
 80193e2:	4a63      	ldr	r2, [pc, #396]	; (8019570 <HAL_ADC_Init+0x2ec>)
 80193e4:	e000      	b.n	80193e8 <HAL_ADC_Init+0x164>
 80193e6:	4a63      	ldr	r2, [pc, #396]	; (8019574 <HAL_ADC_Init+0x2f0>)
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	685b      	ldr	r3, [r3, #4]
 80193ec:	4619      	mov	r1, r3
 80193ee:	4610      	mov	r0, r2
 80193f0:	f7ff fcb6 	bl	8018d60 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	7f5b      	ldrb	r3, [r3, #29]
 80193f8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80193fe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8019404:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 801940a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019412:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8019414:	4313      	orrs	r3, r2
 8019416:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801941e:	2b01      	cmp	r3, #1
 8019420:	d106      	bne.n	8019430 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019426:	3b01      	subs	r3, #1
 8019428:	045b      	lsls	r3, r3, #17
 801942a:	69ba      	ldr	r2, [r7, #24]
 801942c:	4313      	orrs	r3, r2
 801942e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019434:	2b00      	cmp	r3, #0
 8019436:	d009      	beq.n	801944c <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801943c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019444:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8019446:	69ba      	ldr	r2, [r7, #24]
 8019448:	4313      	orrs	r3, r2
 801944a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	68da      	ldr	r2, [r3, #12]
 8019452:	4b49      	ldr	r3, [pc, #292]	; (8019578 <HAL_ADC_Init+0x2f4>)
 8019454:	4013      	ands	r3, r2
 8019456:	687a      	ldr	r2, [r7, #4]
 8019458:	6812      	ldr	r2, [r2, #0]
 801945a:	69b9      	ldr	r1, [r7, #24]
 801945c:	430b      	orrs	r3, r1
 801945e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	691b      	ldr	r3, [r3, #16]
 8019466:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	681b      	ldr	r3, [r3, #0]
 8019472:	430a      	orrs	r2, r1
 8019474:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	4618      	mov	r0, r3
 801947c:	f7ff fec8 	bl	8019210 <LL_ADC_REG_IsConversionOngoing>
 8019480:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	681b      	ldr	r3, [r3, #0]
 8019486:	4618      	mov	r0, r3
 8019488:	f7ff fee9 	bl	801925e <LL_ADC_INJ_IsConversionOngoing>
 801948c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801948e:	693b      	ldr	r3, [r7, #16]
 8019490:	2b00      	cmp	r3, #0
 8019492:	d17b      	bne.n	801958c <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	2b00      	cmp	r3, #0
 8019498:	d178      	bne.n	801958c <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 801949e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80194a6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80194a8:	4313      	orrs	r3, r2
 80194aa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	68db      	ldr	r3, [r3, #12]
 80194b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80194b6:	f023 0302 	bic.w	r3, r3, #2
 80194ba:	687a      	ldr	r2, [r7, #4]
 80194bc:	6812      	ldr	r2, [r2, #0]
 80194be:	69b9      	ldr	r1, [r7, #24]
 80194c0:	430b      	orrs	r3, r1
 80194c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	691b      	ldr	r3, [r3, #16]
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d017      	beq.n	80194fc <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	691a      	ldr	r2, [r3, #16]
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80194da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80194e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80194e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80194ec:	687a      	ldr	r2, [r7, #4]
 80194ee:	6911      	ldr	r1, [r2, #16]
 80194f0:	687a      	ldr	r2, [r7, #4]
 80194f2:	6812      	ldr	r2, [r2, #0]
 80194f4:	430b      	orrs	r3, r1
 80194f6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80194fa:	e013      	b.n	8019524 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	691a      	ldr	r2, [r3, #16]
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801950a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019514:	687a      	ldr	r2, [r7, #4]
 8019516:	6812      	ldr	r2, [r2, #0]
 8019518:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 801951c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019520:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801952a:	2b01      	cmp	r3, #1
 801952c:	d126      	bne.n	801957c <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	691b      	ldr	r3, [r3, #16]
 8019534:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8019538:	f023 0304 	bic.w	r3, r3, #4
 801953c:	687a      	ldr	r2, [r7, #4]
 801953e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8019540:	687a      	ldr	r2, [r7, #4]
 8019542:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8019544:	4311      	orrs	r1, r2
 8019546:	687a      	ldr	r2, [r7, #4]
 8019548:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801954a:	4311      	orrs	r1, r2
 801954c:	687a      	ldr	r2, [r7, #4]
 801954e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8019550:	430a      	orrs	r2, r1
 8019552:	431a      	orrs	r2, r3
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	f042 0201 	orr.w	r2, r2, #1
 801955c:	611a      	str	r2, [r3, #16]
 801955e:	e015      	b.n	801958c <HAL_ADC_Init+0x308>
 8019560:	20000000 	.word	0x20000000
 8019564:	053e2d63 	.word	0x053e2d63
 8019568:	50000100 	.word	0x50000100
 801956c:	50000400 	.word	0x50000400
 8019570:	50000300 	.word	0x50000300
 8019574:	50000700 	.word	0x50000700
 8019578:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	691a      	ldr	r2, [r3, #16]
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	681b      	ldr	r3, [r3, #0]
 8019586:	f022 0201 	bic.w	r2, r2, #1
 801958a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	695b      	ldr	r3, [r3, #20]
 8019590:	2b01      	cmp	r3, #1
 8019592:	d10c      	bne.n	80195ae <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	681b      	ldr	r3, [r3, #0]
 8019598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801959a:	f023 010f 	bic.w	r1, r3, #15
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	6a1b      	ldr	r3, [r3, #32]
 80195a2:	1e5a      	subs	r2, r3, #1
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	430a      	orrs	r2, r1
 80195aa:	631a      	str	r2, [r3, #48]	; 0x30
 80195ac:	e007      	b.n	80195be <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	f022 020f 	bic.w	r2, r2, #15
 80195bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80195c2:	f023 0303 	bic.w	r3, r3, #3
 80195c6:	f043 0201 	orr.w	r2, r3, #1
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80195ce:	e007      	b.n	80195e0 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80195d4:	f043 0210 	orr.w	r2, r3, #16
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80195dc:	2301      	movs	r3, #1
 80195de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80195e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80195e2:	4618      	mov	r0, r3
 80195e4:	3724      	adds	r7, #36	; 0x24
 80195e6:	46bd      	mov	sp, r7
 80195e8:	bd90      	pop	{r4, r7, pc}
 80195ea:	bf00      	nop

080195ec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80195ec:	b580      	push	{r7, lr}
 80195ee:	b086      	sub	sp, #24
 80195f0:	af00      	add	r7, sp, #0
 80195f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80195fc:	d004      	beq.n	8019608 <HAL_ADC_Start+0x1c>
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	4a5c      	ldr	r2, [pc, #368]	; (8019774 <HAL_ADC_Start+0x188>)
 8019604:	4293      	cmp	r3, r2
 8019606:	d101      	bne.n	801960c <HAL_ADC_Start+0x20>
 8019608:	4b5b      	ldr	r3, [pc, #364]	; (8019778 <HAL_ADC_Start+0x18c>)
 801960a:	e000      	b.n	801960e <HAL_ADC_Start+0x22>
 801960c:	4b5b      	ldr	r3, [pc, #364]	; (801977c <HAL_ADC_Start+0x190>)
 801960e:	4618      	mov	r0, r3
 8019610:	f7ff fd1e 	bl	8019050 <LL_ADC_GetMultimode>
 8019614:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	4618      	mov	r0, r3
 801961c:	f7ff fdf8 	bl	8019210 <LL_ADC_REG_IsConversionOngoing>
 8019620:	4603      	mov	r3, r0
 8019622:	2b00      	cmp	r3, #0
 8019624:	f040 809f 	bne.w	8019766 <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801962e:	2b01      	cmp	r3, #1
 8019630:	d101      	bne.n	8019636 <HAL_ADC_Start+0x4a>
 8019632:	2302      	movs	r3, #2
 8019634:	e09a      	b.n	801976c <HAL_ADC_Start+0x180>
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	2201      	movs	r2, #1
 801963a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 801963e:	6878      	ldr	r0, [r7, #4]
 8019640:	f001 fa3e 	bl	801aac0 <ADC_Enable>
 8019644:	4603      	mov	r3, r0
 8019646:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8019648:	7dfb      	ldrb	r3, [r7, #23]
 801964a:	2b00      	cmp	r3, #0
 801964c:	f040 8086 	bne.w	801975c <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019654:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8019658:	f023 0301 	bic.w	r3, r3, #1
 801965c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	681b      	ldr	r3, [r3, #0]
 8019668:	4a42      	ldr	r2, [pc, #264]	; (8019774 <HAL_ADC_Start+0x188>)
 801966a:	4293      	cmp	r3, r2
 801966c:	d002      	beq.n	8019674 <HAL_ADC_Start+0x88>
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	e001      	b.n	8019678 <HAL_ADC_Start+0x8c>
 8019674:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019678:	687a      	ldr	r2, [r7, #4]
 801967a:	6812      	ldr	r2, [r2, #0]
 801967c:	4293      	cmp	r3, r2
 801967e:	d002      	beq.n	8019686 <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019680:	693b      	ldr	r3, [r7, #16]
 8019682:	2b00      	cmp	r3, #0
 8019684:	d105      	bne.n	8019692 <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801968a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801969a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801969e:	d106      	bne.n	80196ae <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80196a4:	f023 0206 	bic.w	r2, r3, #6
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	661a      	str	r2, [r3, #96]	; 0x60
 80196ac:	e002      	b.n	80196b4 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	2200      	movs	r2, #0
 80196b2:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	681b      	ldr	r3, [r3, #0]
 80196b8:	221c      	movs	r2, #28
 80196ba:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	2200      	movs	r2, #0
 80196c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	4a2a      	ldr	r2, [pc, #168]	; (8019774 <HAL_ADC_Start+0x188>)
 80196ca:	4293      	cmp	r3, r2
 80196cc:	d002      	beq.n	80196d4 <HAL_ADC_Start+0xe8>
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	681b      	ldr	r3, [r3, #0]
 80196d2:	e001      	b.n	80196d8 <HAL_ADC_Start+0xec>
 80196d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80196d8:	687a      	ldr	r2, [r7, #4]
 80196da:	6812      	ldr	r2, [r2, #0]
 80196dc:	4293      	cmp	r3, r2
 80196de:	d008      	beq.n	80196f2 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80196e0:	693b      	ldr	r3, [r7, #16]
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	d005      	beq.n	80196f2 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80196e6:	693b      	ldr	r3, [r7, #16]
 80196e8:	2b05      	cmp	r3, #5
 80196ea:	d002      	beq.n	80196f2 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80196ec:	693b      	ldr	r3, [r7, #16]
 80196ee:	2b09      	cmp	r3, #9
 80196f0:	d114      	bne.n	801971c <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	68db      	ldr	r3, [r3, #12]
 80196f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d007      	beq.n	8019710 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019704:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8019708:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	4618      	mov	r0, r3
 8019716:	f7ff fd53 	bl	80191c0 <LL_ADC_REG_StartConversion>
 801971a:	e026      	b.n	801976a <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019720:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	4a11      	ldr	r2, [pc, #68]	; (8019774 <HAL_ADC_Start+0x188>)
 801972e:	4293      	cmp	r3, r2
 8019730:	d002      	beq.n	8019738 <HAL_ADC_Start+0x14c>
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	e001      	b.n	801973c <HAL_ADC_Start+0x150>
 8019738:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801973c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	68db      	ldr	r3, [r3, #12]
 8019742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019746:	2b00      	cmp	r3, #0
 8019748:	d00f      	beq.n	801976a <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801974e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8019752:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	65da      	str	r2, [r3, #92]	; 0x5c
 801975a:	e006      	b.n	801976a <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	2200      	movs	r2, #0
 8019760:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8019764:	e001      	b.n	801976a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8019766:	2302      	movs	r3, #2
 8019768:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 801976a:	7dfb      	ldrb	r3, [r7, #23]
}
 801976c:	4618      	mov	r0, r3
 801976e:	3718      	adds	r7, #24
 8019770:	46bd      	mov	sp, r7
 8019772:	bd80      	pop	{r7, pc}
 8019774:	50000100 	.word	0x50000100
 8019778:	50000300 	.word	0x50000300
 801977c:	50000700 	.word	0x50000700

08019780 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b084      	sub	sp, #16
 8019784:	af00      	add	r7, sp, #0
 8019786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801978e:	2b01      	cmp	r3, #1
 8019790:	d101      	bne.n	8019796 <HAL_ADC_Stop+0x16>
 8019792:	2302      	movs	r3, #2
 8019794:	e023      	b.n	80197de <HAL_ADC_Stop+0x5e>
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	2201      	movs	r2, #1
 801979a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 801979e:	2103      	movs	r1, #3
 80197a0:	6878      	ldr	r0, [r7, #4]
 80197a2:	f001 f8d1 	bl	801a948 <ADC_ConversionStop>
 80197a6:	4603      	mov	r3, r0
 80197a8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80197aa:	7bfb      	ldrb	r3, [r7, #15]
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d111      	bne.n	80197d4 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80197b0:	6878      	ldr	r0, [r7, #4]
 80197b2:	f001 f9e7 	bl	801ab84 <ADC_Disable>
 80197b6:	4603      	mov	r3, r0
 80197b8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80197ba:	7bfb      	ldrb	r3, [r7, #15]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d109      	bne.n	80197d4 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80197c8:	f023 0301 	bic.w	r3, r3, #1
 80197cc:	f043 0201 	orr.w	r2, r3, #1
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	2200      	movs	r2, #0
 80197d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80197dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80197de:	4618      	mov	r0, r3
 80197e0:	3710      	adds	r7, #16
 80197e2:	46bd      	mov	sp, r7
 80197e4:	bd80      	pop	{r7, pc}
	...

080197e8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80197e8:	b580      	push	{r7, lr}
 80197ea:	b088      	sub	sp, #32
 80197ec:	af00      	add	r7, sp, #0
 80197ee:	6078      	str	r0, [r7, #4]
 80197f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80197fa:	d004      	beq.n	8019806 <HAL_ADC_PollForConversion+0x1e>
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	4a70      	ldr	r2, [pc, #448]	; (80199c4 <HAL_ADC_PollForConversion+0x1dc>)
 8019802:	4293      	cmp	r3, r2
 8019804:	d101      	bne.n	801980a <HAL_ADC_PollForConversion+0x22>
 8019806:	4b70      	ldr	r3, [pc, #448]	; (80199c8 <HAL_ADC_PollForConversion+0x1e0>)
 8019808:	e000      	b.n	801980c <HAL_ADC_PollForConversion+0x24>
 801980a:	4b70      	ldr	r3, [pc, #448]	; (80199cc <HAL_ADC_PollForConversion+0x1e4>)
 801980c:	4618      	mov	r0, r3
 801980e:	f7ff fc1f 	bl	8019050 <LL_ADC_GetMultimode>
 8019812:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	699b      	ldr	r3, [r3, #24]
 8019818:	2b08      	cmp	r3, #8
 801981a:	d102      	bne.n	8019822 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 801981c:	2308      	movs	r3, #8
 801981e:	61fb      	str	r3, [r7, #28]
 8019820:	e037      	b.n	8019892 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019822:	697b      	ldr	r3, [r7, #20]
 8019824:	2b00      	cmp	r3, #0
 8019826:	d005      	beq.n	8019834 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019828:	697b      	ldr	r3, [r7, #20]
 801982a:	2b05      	cmp	r3, #5
 801982c:	d002      	beq.n	8019834 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801982e:	697b      	ldr	r3, [r7, #20]
 8019830:	2b09      	cmp	r3, #9
 8019832:	d111      	bne.n	8019858 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	68db      	ldr	r3, [r3, #12]
 801983a:	f003 0301 	and.w	r3, r3, #1
 801983e:	2b00      	cmp	r3, #0
 8019840:	d007      	beq.n	8019852 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019846:	f043 0220 	orr.w	r2, r3, #32
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 801984e:	2301      	movs	r3, #1
 8019850:	e0b3      	b.n	80199ba <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8019852:	2304      	movs	r3, #4
 8019854:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8019856:	e01c      	b.n	8019892 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019860:	d004      	beq.n	801986c <HAL_ADC_PollForConversion+0x84>
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	681b      	ldr	r3, [r3, #0]
 8019866:	4a57      	ldr	r2, [pc, #348]	; (80199c4 <HAL_ADC_PollForConversion+0x1dc>)
 8019868:	4293      	cmp	r3, r2
 801986a:	d101      	bne.n	8019870 <HAL_ADC_PollForConversion+0x88>
 801986c:	4b56      	ldr	r3, [pc, #344]	; (80199c8 <HAL_ADC_PollForConversion+0x1e0>)
 801986e:	e000      	b.n	8019872 <HAL_ADC_PollForConversion+0x8a>
 8019870:	4b56      	ldr	r3, [pc, #344]	; (80199cc <HAL_ADC_PollForConversion+0x1e4>)
 8019872:	4618      	mov	r0, r3
 8019874:	f7ff fbfa 	bl	801906c <LL_ADC_GetMultiDMATransfer>
 8019878:	4603      	mov	r3, r0
 801987a:	2b00      	cmp	r3, #0
 801987c:	d007      	beq.n	801988e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019882:	f043 0220 	orr.w	r2, r3, #32
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 801988a:	2301      	movs	r3, #1
 801988c:	e095      	b.n	80199ba <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801988e:	2304      	movs	r3, #4
 8019890:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8019892:	f7ff fa37 	bl	8018d04 <HAL_GetTick>
 8019896:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8019898:	e021      	b.n	80198de <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 801989a:	683b      	ldr	r3, [r7, #0]
 801989c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198a0:	d01d      	beq.n	80198de <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80198a2:	f7ff fa2f 	bl	8018d04 <HAL_GetTick>
 80198a6:	4602      	mov	r2, r0
 80198a8:	693b      	ldr	r3, [r7, #16]
 80198aa:	1ad3      	subs	r3, r2, r3
 80198ac:	683a      	ldr	r2, [r7, #0]
 80198ae:	429a      	cmp	r2, r3
 80198b0:	d302      	bcc.n	80198b8 <HAL_ADC_PollForConversion+0xd0>
 80198b2:	683b      	ldr	r3, [r7, #0]
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	d112      	bne.n	80198de <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	681a      	ldr	r2, [r3, #0]
 80198be:	69fb      	ldr	r3, [r7, #28]
 80198c0:	4013      	ands	r3, r2
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	d10b      	bne.n	80198de <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80198ca:	f043 0204 	orr.w	r2, r3, #4
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	2200      	movs	r2, #0
 80198d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80198da:	2303      	movs	r3, #3
 80198dc:	e06d      	b.n	80199ba <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	681a      	ldr	r2, [r3, #0]
 80198e4:	69fb      	ldr	r3, [r7, #28]
 80198e6:	4013      	ands	r3, r2
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d0d6      	beq.n	801989a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80198f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	4618      	mov	r0, r3
 80198fe:	f7ff fb01 	bl	8018f04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8019902:	4603      	mov	r3, r0
 8019904:	2b00      	cmp	r3, #0
 8019906:	d01c      	beq.n	8019942 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	7f5b      	ldrb	r3, [r3, #29]
 801990c:	2b00      	cmp	r3, #0
 801990e:	d118      	bne.n	8019942 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	681b      	ldr	r3, [r3, #0]
 8019914:	681b      	ldr	r3, [r3, #0]
 8019916:	f003 0308 	and.w	r3, r3, #8
 801991a:	2b08      	cmp	r3, #8
 801991c:	d111      	bne.n	8019942 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019922:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801992e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019932:	2b00      	cmp	r3, #0
 8019934:	d105      	bne.n	8019942 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801993a:	f043 0201 	orr.w	r2, r3, #1
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	4a1f      	ldr	r2, [pc, #124]	; (80199c4 <HAL_ADC_PollForConversion+0x1dc>)
 8019948:	4293      	cmp	r3, r2
 801994a:	d002      	beq.n	8019952 <HAL_ADC_PollForConversion+0x16a>
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	e001      	b.n	8019956 <HAL_ADC_PollForConversion+0x16e>
 8019952:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019956:	687a      	ldr	r2, [r7, #4]
 8019958:	6812      	ldr	r2, [r2, #0]
 801995a:	4293      	cmp	r3, r2
 801995c:	d008      	beq.n	8019970 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801995e:	697b      	ldr	r3, [r7, #20]
 8019960:	2b00      	cmp	r3, #0
 8019962:	d005      	beq.n	8019970 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019964:	697b      	ldr	r3, [r7, #20]
 8019966:	2b05      	cmp	r3, #5
 8019968:	d002      	beq.n	8019970 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801996a:	697b      	ldr	r3, [r7, #20]
 801996c:	2b09      	cmp	r3, #9
 801996e:	d104      	bne.n	801997a <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	681b      	ldr	r3, [r3, #0]
 8019974:	68db      	ldr	r3, [r3, #12]
 8019976:	61bb      	str	r3, [r7, #24]
 8019978:	e00d      	b.n	8019996 <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	4a11      	ldr	r2, [pc, #68]	; (80199c4 <HAL_ADC_PollForConversion+0x1dc>)
 8019980:	4293      	cmp	r3, r2
 8019982:	d002      	beq.n	801998a <HAL_ADC_PollForConversion+0x1a2>
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	e001      	b.n	801998e <HAL_ADC_PollForConversion+0x1a6>
 801998a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801998e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8019990:	68fb      	ldr	r3, [r7, #12]
 8019992:	68db      	ldr	r3, [r3, #12]
 8019994:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8019996:	69fb      	ldr	r3, [r7, #28]
 8019998:	2b08      	cmp	r3, #8
 801999a:	d104      	bne.n	80199a6 <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	2208      	movs	r2, #8
 80199a2:	601a      	str	r2, [r3, #0]
 80199a4:	e008      	b.n	80199b8 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80199a6:	69bb      	ldr	r3, [r7, #24]
 80199a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d103      	bne.n	80199b8 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	220c      	movs	r2, #12
 80199b6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80199b8:	2300      	movs	r3, #0
}
 80199ba:	4618      	mov	r0, r3
 80199bc:	3720      	adds	r7, #32
 80199be:	46bd      	mov	sp, r7
 80199c0:	bd80      	pop	{r7, pc}
 80199c2:	bf00      	nop
 80199c4:	50000100 	.word	0x50000100
 80199c8:	50000300 	.word	0x50000300
 80199cc:	50000700 	.word	0x50000700

080199d0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80199d0:	b580      	push	{r7, lr}
 80199d2:	b086      	sub	sp, #24
 80199d4:	af00      	add	r7, sp, #0
 80199d6:	60f8      	str	r0, [r7, #12]
 80199d8:	60b9      	str	r1, [r7, #8]
 80199da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80199dc:	68fb      	ldr	r3, [r7, #12]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80199e4:	d004      	beq.n	80199f0 <HAL_ADC_Start_DMA+0x20>
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	4a57      	ldr	r2, [pc, #348]	; (8019b48 <HAL_ADC_Start_DMA+0x178>)
 80199ec:	4293      	cmp	r3, r2
 80199ee:	d101      	bne.n	80199f4 <HAL_ADC_Start_DMA+0x24>
 80199f0:	4b56      	ldr	r3, [pc, #344]	; (8019b4c <HAL_ADC_Start_DMA+0x17c>)
 80199f2:	e000      	b.n	80199f6 <HAL_ADC_Start_DMA+0x26>
 80199f4:	4b56      	ldr	r3, [pc, #344]	; (8019b50 <HAL_ADC_Start_DMA+0x180>)
 80199f6:	4618      	mov	r0, r3
 80199f8:	f7ff fb2a 	bl	8019050 <LL_ADC_GetMultimode>
 80199fc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	681b      	ldr	r3, [r3, #0]
 8019a02:	4618      	mov	r0, r3
 8019a04:	f7ff fc04 	bl	8019210 <LL_ADC_REG_IsConversionOngoing>
 8019a08:	4603      	mov	r3, r0
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	f040 8094 	bne.w	8019b38 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019a16:	2b01      	cmp	r3, #1
 8019a18:	d101      	bne.n	8019a1e <HAL_ADC_Start_DMA+0x4e>
 8019a1a:	2302      	movs	r3, #2
 8019a1c:	e08f      	b.n	8019b3e <HAL_ADC_Start_DMA+0x16e>
 8019a1e:	68fb      	ldr	r3, [r7, #12]
 8019a20:	2201      	movs	r2, #1
 8019a22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8019a26:	68fb      	ldr	r3, [r7, #12]
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	4a4a      	ldr	r2, [pc, #296]	; (8019b54 <HAL_ADC_Start_DMA+0x184>)
 8019a2c:	4293      	cmp	r3, r2
 8019a2e:	d008      	beq.n	8019a42 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019a30:	693b      	ldr	r3, [r7, #16]
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	d005      	beq.n	8019a42 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019a36:	693b      	ldr	r3, [r7, #16]
 8019a38:	2b05      	cmp	r3, #5
 8019a3a:	d002      	beq.n	8019a42 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8019a3c:	693b      	ldr	r3, [r7, #16]
 8019a3e:	2b09      	cmp	r3, #9
 8019a40:	d173      	bne.n	8019b2a <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8019a42:	68f8      	ldr	r0, [r7, #12]
 8019a44:	f001 f83c 	bl	801aac0 <ADC_Enable>
 8019a48:	4603      	mov	r3, r0
 8019a4a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8019a4c:	7dfb      	ldrb	r3, [r7, #23]
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d166      	bne.n	8019b20 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8019a5a:	f023 0301 	bic.w	r3, r3, #1
 8019a5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019a62:	68fb      	ldr	r3, [r7, #12]
 8019a64:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	4a37      	ldr	r2, [pc, #220]	; (8019b48 <HAL_ADC_Start_DMA+0x178>)
 8019a6c:	4293      	cmp	r3, r2
 8019a6e:	d002      	beq.n	8019a76 <HAL_ADC_Start_DMA+0xa6>
 8019a70:	68fb      	ldr	r3, [r7, #12]
 8019a72:	681b      	ldr	r3, [r3, #0]
 8019a74:	e001      	b.n	8019a7a <HAL_ADC_Start_DMA+0xaa>
 8019a76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019a7a:	68fa      	ldr	r2, [r7, #12]
 8019a7c:	6812      	ldr	r2, [r2, #0]
 8019a7e:	4293      	cmp	r3, r2
 8019a80:	d002      	beq.n	8019a88 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019a82:	693b      	ldr	r3, [r7, #16]
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d105      	bne.n	8019a94 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8019a88:	68fb      	ldr	r3, [r7, #12]
 8019a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a8c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8019a94:	68fb      	ldr	r3, [r7, #12]
 8019a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d006      	beq.n	8019aae <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019aa4:	f023 0206 	bic.w	r2, r3, #6
 8019aa8:	68fb      	ldr	r3, [r7, #12]
 8019aaa:	661a      	str	r2, [r3, #96]	; 0x60
 8019aac:	e002      	b.n	8019ab4 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	2200      	movs	r2, #0
 8019ab2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8019ab4:	68fb      	ldr	r3, [r7, #12]
 8019ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019ab8:	4a27      	ldr	r2, [pc, #156]	; (8019b58 <HAL_ADC_Start_DMA+0x188>)
 8019aba:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8019abc:	68fb      	ldr	r3, [r7, #12]
 8019abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019ac0:	4a26      	ldr	r2, [pc, #152]	; (8019b5c <HAL_ADC_Start_DMA+0x18c>)
 8019ac2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019ac8:	4a25      	ldr	r2, [pc, #148]	; (8019b60 <HAL_ADC_Start_DMA+0x190>)
 8019aca:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8019acc:	68fb      	ldr	r3, [r7, #12]
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	221c      	movs	r2, #28
 8019ad2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8019ad4:	68fb      	ldr	r3, [r7, #12]
 8019ad6:	2200      	movs	r2, #0
 8019ad8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	685a      	ldr	r2, [r3, #4]
 8019ae2:	68fb      	ldr	r3, [r7, #12]
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	f042 0210 	orr.w	r2, r2, #16
 8019aea:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8019aec:	68fb      	ldr	r3, [r7, #12]
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	68da      	ldr	r2, [r3, #12]
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	f042 0201 	orr.w	r2, r2, #1
 8019afa:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	3340      	adds	r3, #64	; 0x40
 8019b06:	4619      	mov	r1, r3
 8019b08:	68ba      	ldr	r2, [r7, #8]
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	f001 fcb4 	bl	801b478 <HAL_DMA_Start_IT>
 8019b10:	4603      	mov	r3, r0
 8019b12:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8019b14:	68fb      	ldr	r3, [r7, #12]
 8019b16:	681b      	ldr	r3, [r3, #0]
 8019b18:	4618      	mov	r0, r3
 8019b1a:	f7ff fb51 	bl	80191c0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8019b1e:	e00d      	b.n	8019b3c <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	2200      	movs	r2, #0
 8019b24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8019b28:	e008      	b.n	8019b3c <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8019b2a:	2301      	movs	r3, #1
 8019b2c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	2200      	movs	r2, #0
 8019b32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8019b36:	e001      	b.n	8019b3c <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8019b38:	2302      	movs	r3, #2
 8019b3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8019b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8019b3e:	4618      	mov	r0, r3
 8019b40:	3718      	adds	r7, #24
 8019b42:	46bd      	mov	sp, r7
 8019b44:	bd80      	pop	{r7, pc}
 8019b46:	bf00      	nop
 8019b48:	50000100 	.word	0x50000100
 8019b4c:	50000300 	.word	0x50000300
 8019b50:	50000700 	.word	0x50000700
 8019b54:	50000400 	.word	0x50000400
 8019b58:	0801ac43 	.word	0x0801ac43
 8019b5c:	0801ad1b 	.word	0x0801ad1b
 8019b60:	0801ad37 	.word	0x0801ad37

08019b64 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8019b64:	b580      	push	{r7, lr}
 8019b66:	b084      	sub	sp, #16
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019b72:	2b01      	cmp	r3, #1
 8019b74:	d101      	bne.n	8019b7a <HAL_ADC_Stop_DMA+0x16>
 8019b76:	2302      	movs	r3, #2
 8019b78:	e051      	b.n	8019c1e <HAL_ADC_Stop_DMA+0xba>
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	2201      	movs	r2, #1
 8019b7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8019b82:	2103      	movs	r1, #3
 8019b84:	6878      	ldr	r0, [r7, #4]
 8019b86:	f000 fedf 	bl	801a948 <ADC_ConversionStop>
 8019b8a:	4603      	mov	r3, r0
 8019b8c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8019b8e:	7bfb      	ldrb	r3, [r7, #15]
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d13f      	bne.n	8019c14 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	681b      	ldr	r3, [r3, #0]
 8019b98:	68da      	ldr	r2, [r3, #12]
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	f022 0201 	bic.w	r2, r2, #1
 8019ba2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019ba8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8019bac:	b2db      	uxtb	r3, r3
 8019bae:	2b02      	cmp	r3, #2
 8019bb0:	d10f      	bne.n	8019bd2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019bb6:	4618      	mov	r0, r3
 8019bb8:	f001 fcd9 	bl	801b56e <HAL_DMA_Abort>
 8019bbc:	4603      	mov	r3, r0
 8019bbe:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8019bc0:	7bfb      	ldrb	r3, [r7, #15]
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d005      	beq.n	8019bd2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019bca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	681b      	ldr	r3, [r3, #0]
 8019bd6:	685a      	ldr	r2, [r3, #4]
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	f022 0210 	bic.w	r2, r2, #16
 8019be0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8019be2:	7bfb      	ldrb	r3, [r7, #15]
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d105      	bne.n	8019bf4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8019be8:	6878      	ldr	r0, [r7, #4]
 8019bea:	f000 ffcb 	bl	801ab84 <ADC_Disable>
 8019bee:	4603      	mov	r3, r0
 8019bf0:	73fb      	strb	r3, [r7, #15]
 8019bf2:	e002      	b.n	8019bfa <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8019bf4:	6878      	ldr	r0, [r7, #4]
 8019bf6:	f000 ffc5 	bl	801ab84 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8019bfa:	7bfb      	ldrb	r3, [r7, #15]
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d109      	bne.n	8019c14 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8019c08:	f023 0301 	bic.w	r3, r3, #1
 8019c0c:	f043 0201 	orr.w	r2, r3, #1
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	2200      	movs	r2, #0
 8019c18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8019c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c1e:	4618      	mov	r0, r3
 8019c20:	3710      	adds	r7, #16
 8019c22:	46bd      	mov	sp, r7
 8019c24:	bd80      	pop	{r7, pc}

08019c26 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8019c26:	b480      	push	{r7}
 8019c28:	b083      	sub	sp, #12
 8019c2a:	af00      	add	r7, sp, #0
 8019c2c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8019c34:	4618      	mov	r0, r3
 8019c36:	370c      	adds	r7, #12
 8019c38:	46bd      	mov	sp, r7
 8019c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c3e:	4770      	bx	lr

08019c40 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8019c40:	b580      	push	{r7, lr}
 8019c42:	b08a      	sub	sp, #40	; 0x28
 8019c44:	af00      	add	r7, sp, #0
 8019c46:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8019c48:	2300      	movs	r3, #0
 8019c4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	681b      	ldr	r3, [r3, #0]
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	685b      	ldr	r3, [r3, #4]
 8019c5a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019c64:	d004      	beq.n	8019c70 <HAL_ADC_IRQHandler+0x30>
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	4a87      	ldr	r2, [pc, #540]	; (8019e88 <HAL_ADC_IRQHandler+0x248>)
 8019c6c:	4293      	cmp	r3, r2
 8019c6e:	d101      	bne.n	8019c74 <HAL_ADC_IRQHandler+0x34>
 8019c70:	4b86      	ldr	r3, [pc, #536]	; (8019e8c <HAL_ADC_IRQHandler+0x24c>)
 8019c72:	e000      	b.n	8019c76 <HAL_ADC_IRQHandler+0x36>
 8019c74:	4b86      	ldr	r3, [pc, #536]	; (8019e90 <HAL_ADC_IRQHandler+0x250>)
 8019c76:	4618      	mov	r0, r3
 8019c78:	f7ff f9ea 	bl	8019050 <LL_ADC_GetMultimode>
 8019c7c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8019c7e:	69fb      	ldr	r3, [r7, #28]
 8019c80:	f003 0302 	and.w	r3, r3, #2
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d017      	beq.n	8019cb8 <HAL_ADC_IRQHandler+0x78>
 8019c88:	69bb      	ldr	r3, [r7, #24]
 8019c8a:	f003 0302 	and.w	r3, r3, #2
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d012      	beq.n	8019cb8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c96:	f003 0310 	and.w	r3, r3, #16
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d105      	bne.n	8019caa <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019ca2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8019caa:	6878      	ldr	r0, [r7, #4]
 8019cac:	f001 f93a 	bl	801af24 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	2202      	movs	r2, #2
 8019cb6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8019cb8:	69fb      	ldr	r3, [r7, #28]
 8019cba:	f003 0304 	and.w	r3, r3, #4
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d004      	beq.n	8019ccc <HAL_ADC_IRQHandler+0x8c>
 8019cc2:	69bb      	ldr	r3, [r7, #24]
 8019cc4:	f003 0304 	and.w	r3, r3, #4
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d10a      	bne.n	8019ce2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8019ccc:	69fb      	ldr	r3, [r7, #28]
 8019cce:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	f000 8085 	beq.w	8019de2 <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8019cd8:	69bb      	ldr	r3, [r7, #24]
 8019cda:	f003 0308 	and.w	r3, r3, #8
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d07f      	beq.n	8019de2 <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019ce6:	f003 0310 	and.w	r3, r3, #16
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d105      	bne.n	8019cfa <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019cf2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	4618      	mov	r0, r3
 8019d00:	f7ff f900 	bl	8018f04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8019d04:	4603      	mov	r3, r0
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d064      	beq.n	8019dd4 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	681b      	ldr	r3, [r3, #0]
 8019d0e:	4a5e      	ldr	r2, [pc, #376]	; (8019e88 <HAL_ADC_IRQHandler+0x248>)
 8019d10:	4293      	cmp	r3, r2
 8019d12:	d002      	beq.n	8019d1a <HAL_ADC_IRQHandler+0xda>
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	e001      	b.n	8019d1e <HAL_ADC_IRQHandler+0xde>
 8019d1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019d1e:	687a      	ldr	r2, [r7, #4]
 8019d20:	6812      	ldr	r2, [r2, #0]
 8019d22:	4293      	cmp	r3, r2
 8019d24:	d008      	beq.n	8019d38 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019d26:	697b      	ldr	r3, [r7, #20]
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d005      	beq.n	8019d38 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019d2c:	697b      	ldr	r3, [r7, #20]
 8019d2e:	2b05      	cmp	r3, #5
 8019d30:	d002      	beq.n	8019d38 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8019d32:	697b      	ldr	r3, [r7, #20]
 8019d34:	2b09      	cmp	r3, #9
 8019d36:	d104      	bne.n	8019d42 <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	68db      	ldr	r3, [r3, #12]
 8019d3e:	623b      	str	r3, [r7, #32]
 8019d40:	e00d      	b.n	8019d5e <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	4a50      	ldr	r2, [pc, #320]	; (8019e88 <HAL_ADC_IRQHandler+0x248>)
 8019d48:	4293      	cmp	r3, r2
 8019d4a:	d002      	beq.n	8019d52 <HAL_ADC_IRQHandler+0x112>
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	e001      	b.n	8019d56 <HAL_ADC_IRQHandler+0x116>
 8019d52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019d56:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8019d58:	693b      	ldr	r3, [r7, #16]
 8019d5a:	68db      	ldr	r3, [r3, #12]
 8019d5c:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8019d5e:	6a3b      	ldr	r3, [r7, #32]
 8019d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d135      	bne.n	8019dd4 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	f003 0308 	and.w	r3, r3, #8
 8019d72:	2b08      	cmp	r3, #8
 8019d74:	d12e      	bne.n	8019dd4 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	4618      	mov	r0, r3
 8019d7c:	f7ff fa48 	bl	8019210 <LL_ADC_REG_IsConversionOngoing>
 8019d80:	4603      	mov	r3, r0
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d11a      	bne.n	8019dbc <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	685a      	ldr	r2, [r3, #4]
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	f022 020c 	bic.w	r2, r2, #12
 8019d94:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019d9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019da6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d112      	bne.n	8019dd4 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019db2:	f043 0201 	orr.w	r2, r3, #1
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	65da      	str	r2, [r3, #92]	; 0x5c
 8019dba:	e00b      	b.n	8019dd4 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019dc0:	f043 0210 	orr.w	r2, r3, #16
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019dcc:	f043 0201 	orr.w	r2, r3, #1
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8019dd4:	6878      	ldr	r0, [r7, #4]
 8019dd6:	f7ee fa4b 	bl	8008270 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	220c      	movs	r2, #12
 8019de0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8019de2:	69fb      	ldr	r3, [r7, #28]
 8019de4:	f003 0320 	and.w	r3, r3, #32
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	d004      	beq.n	8019df6 <HAL_ADC_IRQHandler+0x1b6>
 8019dec:	69bb      	ldr	r3, [r7, #24]
 8019dee:	f003 0320 	and.w	r3, r3, #32
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d10b      	bne.n	8019e0e <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8019df6:	69fb      	ldr	r3, [r7, #28]
 8019df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	f000 80a1 	beq.w	8019f44 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8019e02:	69bb      	ldr	r3, [r7, #24]
 8019e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	f000 809b 	beq.w	8019f44 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019e12:	f003 0310 	and.w	r3, r3, #16
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d105      	bne.n	8019e26 <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019e1e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	4618      	mov	r0, r3
 8019e2c:	f7ff f8a9 	bl	8018f82 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8019e30:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	4618      	mov	r0, r3
 8019e38:	f7ff f864 	bl	8018f04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8019e3c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	4a11      	ldr	r2, [pc, #68]	; (8019e88 <HAL_ADC_IRQHandler+0x248>)
 8019e44:	4293      	cmp	r3, r2
 8019e46:	d002      	beq.n	8019e4e <HAL_ADC_IRQHandler+0x20e>
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	681b      	ldr	r3, [r3, #0]
 8019e4c:	e001      	b.n	8019e52 <HAL_ADC_IRQHandler+0x212>
 8019e4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019e52:	687a      	ldr	r2, [r7, #4]
 8019e54:	6812      	ldr	r2, [r2, #0]
 8019e56:	4293      	cmp	r3, r2
 8019e58:	d008      	beq.n	8019e6c <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019e5a:	697b      	ldr	r3, [r7, #20]
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	d005      	beq.n	8019e6c <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8019e60:	697b      	ldr	r3, [r7, #20]
 8019e62:	2b06      	cmp	r3, #6
 8019e64:	d002      	beq.n	8019e6c <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8019e66:	697b      	ldr	r3, [r7, #20]
 8019e68:	2b07      	cmp	r3, #7
 8019e6a:	d104      	bne.n	8019e76 <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	68db      	ldr	r3, [r3, #12]
 8019e72:	623b      	str	r3, [r7, #32]
 8019e74:	e014      	b.n	8019ea0 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	4a03      	ldr	r2, [pc, #12]	; (8019e88 <HAL_ADC_IRQHandler+0x248>)
 8019e7c:	4293      	cmp	r3, r2
 8019e7e:	d009      	beq.n	8019e94 <HAL_ADC_IRQHandler+0x254>
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	e008      	b.n	8019e98 <HAL_ADC_IRQHandler+0x258>
 8019e86:	bf00      	nop
 8019e88:	50000100 	.word	0x50000100
 8019e8c:	50000300 	.word	0x50000300
 8019e90:	50000700 	.word	0x50000700
 8019e94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019e98:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8019e9a:	693b      	ldr	r3, [r7, #16]
 8019e9c:	68db      	ldr	r3, [r3, #12]
 8019e9e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8019ea0:	68fb      	ldr	r3, [r7, #12]
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d047      	beq.n	8019f36 <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8019ea6:	6a3b      	ldr	r3, [r7, #32]
 8019ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d007      	beq.n	8019ec0 <HAL_ADC_IRQHandler+0x280>
 8019eb0:	68bb      	ldr	r3, [r7, #8]
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d03f      	beq.n	8019f36 <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8019eb6:	6a3b      	ldr	r3, [r7, #32]
 8019eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d13a      	bne.n	8019f36 <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019eca:	2b40      	cmp	r3, #64	; 0x40
 8019ecc:	d133      	bne.n	8019f36 <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8019ece:	6a3b      	ldr	r3, [r7, #32]
 8019ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d12e      	bne.n	8019f36 <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	4618      	mov	r0, r3
 8019ede:	f7ff f9be 	bl	801925e <LL_ADC_INJ_IsConversionOngoing>
 8019ee2:	4603      	mov	r3, r0
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d11a      	bne.n	8019f1e <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	681b      	ldr	r3, [r3, #0]
 8019eec:	685a      	ldr	r2, [r3, #4]
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	681b      	ldr	r3, [r3, #0]
 8019ef2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019ef6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019efc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d112      	bne.n	8019f36 <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f14:	f043 0201 	orr.w	r2, r3, #1
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8019f1c:	e00b      	b.n	8019f36 <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f22:	f043 0210 	orr.w	r2, r3, #16
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019f2e:	f043 0201 	orr.w	r2, r3, #1
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8019f36:	6878      	ldr	r0, [r7, #4]
 8019f38:	f000 ffcc 	bl	801aed4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	2260      	movs	r2, #96	; 0x60
 8019f42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8019f44:	69fb      	ldr	r3, [r7, #28]
 8019f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d011      	beq.n	8019f72 <HAL_ADC_IRQHandler+0x332>
 8019f4e:	69bb      	ldr	r3, [r7, #24]
 8019f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d00c      	beq.n	8019f72 <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8019f64:	6878      	ldr	r0, [r7, #4]
 8019f66:	f000 f8af 	bl	801a0c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	2280      	movs	r2, #128	; 0x80
 8019f70:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8019f72:	69fb      	ldr	r3, [r7, #28]
 8019f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d012      	beq.n	8019fa2 <HAL_ADC_IRQHandler+0x362>
 8019f7c:	69bb      	ldr	r3, [r7, #24]
 8019f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d00d      	beq.n	8019fa2 <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8019f92:	6878      	ldr	r0, [r7, #4]
 8019f94:	f000 ffb2 	bl	801aefc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019fa0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8019fa2:	69fb      	ldr	r3, [r7, #28]
 8019fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d012      	beq.n	8019fd2 <HAL_ADC_IRQHandler+0x392>
 8019fac:	69bb      	ldr	r3, [r7, #24]
 8019fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	d00d      	beq.n	8019fd2 <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019fba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8019fc2:	6878      	ldr	r0, [r7, #4]
 8019fc4:	f000 ffa4 	bl	801af10 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019fd0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8019fd2:	69fb      	ldr	r3, [r7, #28]
 8019fd4:	f003 0310 	and.w	r3, r3, #16
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d043      	beq.n	801a064 <HAL_ADC_IRQHandler+0x424>
 8019fdc:	69bb      	ldr	r3, [r7, #24]
 8019fde:	f003 0310 	and.w	r3, r3, #16
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d03e      	beq.n	801a064 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d102      	bne.n	8019ff4 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 8019fee:	2301      	movs	r3, #1
 8019ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8019ff2:	e021      	b.n	801a038 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8019ff4:	697b      	ldr	r3, [r7, #20]
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	d015      	beq.n	801a026 <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a002:	d004      	beq.n	801a00e <HAL_ADC_IRQHandler+0x3ce>
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	4a27      	ldr	r2, [pc, #156]	; (801a0a8 <HAL_ADC_IRQHandler+0x468>)
 801a00a:	4293      	cmp	r3, r2
 801a00c:	d101      	bne.n	801a012 <HAL_ADC_IRQHandler+0x3d2>
 801a00e:	4b27      	ldr	r3, [pc, #156]	; (801a0ac <HAL_ADC_IRQHandler+0x46c>)
 801a010:	e000      	b.n	801a014 <HAL_ADC_IRQHandler+0x3d4>
 801a012:	4b27      	ldr	r3, [pc, #156]	; (801a0b0 <HAL_ADC_IRQHandler+0x470>)
 801a014:	4618      	mov	r0, r3
 801a016:	f7ff f829 	bl	801906c <LL_ADC_GetMultiDMATransfer>
 801a01a:	4603      	mov	r3, r0
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d00b      	beq.n	801a038 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 801a020:	2301      	movs	r3, #1
 801a022:	627b      	str	r3, [r7, #36]	; 0x24
 801a024:	e008      	b.n	801a038 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	68db      	ldr	r3, [r3, #12]
 801a02c:	f003 0301 	and.w	r3, r3, #1
 801a030:	2b00      	cmp	r3, #0
 801a032:	d001      	beq.n	801a038 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 801a034:	2301      	movs	r3, #1
 801a036:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 801a038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a03a:	2b01      	cmp	r3, #1
 801a03c:	d10e      	bne.n	801a05c <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a042:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a04e:	f043 0202 	orr.w	r2, r3, #2
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 801a056:	6878      	ldr	r0, [r7, #4]
 801a058:	f000 f840 	bl	801a0dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	681b      	ldr	r3, [r3, #0]
 801a060:	2210      	movs	r2, #16
 801a062:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 801a064:	69fb      	ldr	r3, [r7, #28]
 801a066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d018      	beq.n	801a0a0 <HAL_ADC_IRQHandler+0x460>
 801a06e:	69bb      	ldr	r3, [r7, #24]
 801a070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a074:	2b00      	cmp	r3, #0
 801a076:	d013      	beq.n	801a0a0 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a07c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a088:	f043 0208 	orr.w	r2, r3, #8
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a098:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 801a09a:	6878      	ldr	r0, [r7, #4]
 801a09c:	f000 ff24 	bl	801aee8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 801a0a0:	bf00      	nop
 801a0a2:	3728      	adds	r7, #40	; 0x28
 801a0a4:	46bd      	mov	sp, r7
 801a0a6:	bd80      	pop	{r7, pc}
 801a0a8:	50000100 	.word	0x50000100
 801a0ac:	50000300 	.word	0x50000300
 801a0b0:	50000700 	.word	0x50000700

0801a0b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 801a0b4:	b480      	push	{r7}
 801a0b6:	b083      	sub	sp, #12
 801a0b8:	af00      	add	r7, sp, #0
 801a0ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 801a0bc:	bf00      	nop
 801a0be:	370c      	adds	r7, #12
 801a0c0:	46bd      	mov	sp, r7
 801a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0c6:	4770      	bx	lr

0801a0c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 801a0c8:	b480      	push	{r7}
 801a0ca:	b083      	sub	sp, #12
 801a0cc:	af00      	add	r7, sp, #0
 801a0ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 801a0d0:	bf00      	nop
 801a0d2:	370c      	adds	r7, #12
 801a0d4:	46bd      	mov	sp, r7
 801a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0da:	4770      	bx	lr

0801a0dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801a0dc:	b480      	push	{r7}
 801a0de:	b083      	sub	sp, #12
 801a0e0:	af00      	add	r7, sp, #0
 801a0e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 801a0e4:	bf00      	nop
 801a0e6:	370c      	adds	r7, #12
 801a0e8:	46bd      	mov	sp, r7
 801a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ee:	4770      	bx	lr

0801a0f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 801a0f0:	b580      	push	{r7, lr}
 801a0f2:	b0b6      	sub	sp, #216	; 0xd8
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	6078      	str	r0, [r7, #4]
 801a0f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801a0fa:	2300      	movs	r3, #0
 801a0fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 801a100:	2300      	movs	r3, #0
 801a102:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801a10a:	2b01      	cmp	r3, #1
 801a10c:	d102      	bne.n	801a114 <HAL_ADC_ConfigChannel+0x24>
 801a10e:	2302      	movs	r3, #2
 801a110:	f000 bc04 	b.w	801a91c <HAL_ADC_ConfigChannel+0x82c>
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	2201      	movs	r2, #1
 801a118:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	4618      	mov	r0, r3
 801a122:	f7ff f875 	bl	8019210 <LL_ADC_REG_IsConversionOngoing>
 801a126:	4603      	mov	r3, r0
 801a128:	2b00      	cmp	r3, #0
 801a12a:	f040 83e8 	bne.w	801a8fe <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	6818      	ldr	r0, [r3, #0]
 801a132:	683b      	ldr	r3, [r7, #0]
 801a134:	6859      	ldr	r1, [r3, #4]
 801a136:	683b      	ldr	r3, [r7, #0]
 801a138:	681b      	ldr	r3, [r3, #0]
 801a13a:	461a      	mov	r2, r3
 801a13c:	f7fe fef5 	bl	8018f2a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	681b      	ldr	r3, [r3, #0]
 801a144:	4618      	mov	r0, r3
 801a146:	f7ff f863 	bl	8019210 <LL_ADC_REG_IsConversionOngoing>
 801a14a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	4618      	mov	r0, r3
 801a154:	f7ff f883 	bl	801925e <LL_ADC_INJ_IsConversionOngoing>
 801a158:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801a15c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801a160:	2b00      	cmp	r3, #0
 801a162:	f040 81d9 	bne.w	801a518 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801a166:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	f040 81d4 	bne.w	801a518 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 801a170:	683b      	ldr	r3, [r7, #0]
 801a172:	689b      	ldr	r3, [r3, #8]
 801a174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a178:	d10f      	bne.n	801a19a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	6818      	ldr	r0, [r3, #0]
 801a17e:	683b      	ldr	r3, [r7, #0]
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	2200      	movs	r2, #0
 801a184:	4619      	mov	r1, r3
 801a186:	f7fe ff0f 	bl	8018fa8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	681b      	ldr	r3, [r3, #0]
 801a18e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801a192:	4618      	mov	r0, r3
 801a194:	f7fe fea3 	bl	8018ede <LL_ADC_SetSamplingTimeCommonConfig>
 801a198:	e00e      	b.n	801a1b8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	6818      	ldr	r0, [r3, #0]
 801a19e:	683b      	ldr	r3, [r7, #0]
 801a1a0:	6819      	ldr	r1, [r3, #0]
 801a1a2:	683b      	ldr	r3, [r7, #0]
 801a1a4:	689b      	ldr	r3, [r3, #8]
 801a1a6:	461a      	mov	r2, r3
 801a1a8:	f7fe fefe 	bl	8018fa8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	2100      	movs	r1, #0
 801a1b2:	4618      	mov	r0, r3
 801a1b4:	f7fe fe93 	bl	8018ede <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 801a1b8:	683b      	ldr	r3, [r7, #0]
 801a1ba:	695a      	ldr	r2, [r3, #20]
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	681b      	ldr	r3, [r3, #0]
 801a1c0:	68db      	ldr	r3, [r3, #12]
 801a1c2:	08db      	lsrs	r3, r3, #3
 801a1c4:	f003 0303 	and.w	r3, r3, #3
 801a1c8:	005b      	lsls	r3, r3, #1
 801a1ca:	fa02 f303 	lsl.w	r3, r2, r3
 801a1ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 801a1d2:	683b      	ldr	r3, [r7, #0]
 801a1d4:	691b      	ldr	r3, [r3, #16]
 801a1d6:	2b04      	cmp	r3, #4
 801a1d8:	d022      	beq.n	801a220 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	6818      	ldr	r0, [r3, #0]
 801a1de:	683b      	ldr	r3, [r7, #0]
 801a1e0:	6919      	ldr	r1, [r3, #16]
 801a1e2:	683b      	ldr	r3, [r7, #0]
 801a1e4:	681a      	ldr	r2, [r3, #0]
 801a1e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801a1ea:	f7fe fded 	bl	8018dc8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	6818      	ldr	r0, [r3, #0]
 801a1f2:	683b      	ldr	r3, [r7, #0]
 801a1f4:	6919      	ldr	r1, [r3, #16]
 801a1f6:	683b      	ldr	r3, [r7, #0]
 801a1f8:	699b      	ldr	r3, [r3, #24]
 801a1fa:	461a      	mov	r2, r3
 801a1fc:	f7fe fe39 	bl	8018e72 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	6818      	ldr	r0, [r3, #0]
 801a204:	683b      	ldr	r3, [r7, #0]
 801a206:	6919      	ldr	r1, [r3, #16]
 801a208:	683b      	ldr	r3, [r7, #0]
 801a20a:	7f1b      	ldrb	r3, [r3, #28]
 801a20c:	2b01      	cmp	r3, #1
 801a20e:	d102      	bne.n	801a216 <HAL_ADC_ConfigChannel+0x126>
 801a210:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801a214:	e000      	b.n	801a218 <HAL_ADC_ConfigChannel+0x128>
 801a216:	2300      	movs	r3, #0
 801a218:	461a      	mov	r2, r3
 801a21a:	f7fe fe45 	bl	8018ea8 <LL_ADC_SetOffsetSaturation>
 801a21e:	e17b      	b.n	801a518 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	2100      	movs	r1, #0
 801a226:	4618      	mov	r0, r3
 801a228:	f7fe fdf2 	bl	8018e10 <LL_ADC_GetOffsetChannel>
 801a22c:	4603      	mov	r3, r0
 801a22e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a232:	2b00      	cmp	r3, #0
 801a234:	d10a      	bne.n	801a24c <HAL_ADC_ConfigChannel+0x15c>
 801a236:	687b      	ldr	r3, [r7, #4]
 801a238:	681b      	ldr	r3, [r3, #0]
 801a23a:	2100      	movs	r1, #0
 801a23c:	4618      	mov	r0, r3
 801a23e:	f7fe fde7 	bl	8018e10 <LL_ADC_GetOffsetChannel>
 801a242:	4603      	mov	r3, r0
 801a244:	0e9b      	lsrs	r3, r3, #26
 801a246:	f003 021f 	and.w	r2, r3, #31
 801a24a:	e01e      	b.n	801a28a <HAL_ADC_ConfigChannel+0x19a>
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	2100      	movs	r1, #0
 801a252:	4618      	mov	r0, r3
 801a254:	f7fe fddc 	bl	8018e10 <LL_ADC_GetOffsetChannel>
 801a258:	4603      	mov	r3, r0
 801a25a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a25e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801a262:	fa93 f3a3 	rbit	r3, r3
 801a266:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 801a26a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801a26e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 801a272:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801a276:	2b00      	cmp	r3, #0
 801a278:	d101      	bne.n	801a27e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 801a27a:	2320      	movs	r3, #32
 801a27c:	e004      	b.n	801a288 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 801a27e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801a282:	fab3 f383 	clz	r3, r3
 801a286:	b2db      	uxtb	r3, r3
 801a288:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a28a:	683b      	ldr	r3, [r7, #0]
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a292:	2b00      	cmp	r3, #0
 801a294:	d105      	bne.n	801a2a2 <HAL_ADC_ConfigChannel+0x1b2>
 801a296:	683b      	ldr	r3, [r7, #0]
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	0e9b      	lsrs	r3, r3, #26
 801a29c:	f003 031f 	and.w	r3, r3, #31
 801a2a0:	e018      	b.n	801a2d4 <HAL_ADC_ConfigChannel+0x1e4>
 801a2a2:	683b      	ldr	r3, [r7, #0]
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a2aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a2ae:	fa93 f3a3 	rbit	r3, r3
 801a2b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 801a2b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a2ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 801a2be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d101      	bne.n	801a2ca <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 801a2c6:	2320      	movs	r3, #32
 801a2c8:	e004      	b.n	801a2d4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 801a2ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a2ce:	fab3 f383 	clz	r3, r3
 801a2d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801a2d4:	429a      	cmp	r2, r3
 801a2d6:	d106      	bne.n	801a2e6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	2200      	movs	r2, #0
 801a2de:	2100      	movs	r1, #0
 801a2e0:	4618      	mov	r0, r3
 801a2e2:	f7fe fdab 	bl	8018e3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	2101      	movs	r1, #1
 801a2ec:	4618      	mov	r0, r3
 801a2ee:	f7fe fd8f 	bl	8018e10 <LL_ADC_GetOffsetChannel>
 801a2f2:	4603      	mov	r3, r0
 801a2f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d10a      	bne.n	801a312 <HAL_ADC_ConfigChannel+0x222>
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	2101      	movs	r1, #1
 801a302:	4618      	mov	r0, r3
 801a304:	f7fe fd84 	bl	8018e10 <LL_ADC_GetOffsetChannel>
 801a308:	4603      	mov	r3, r0
 801a30a:	0e9b      	lsrs	r3, r3, #26
 801a30c:	f003 021f 	and.w	r2, r3, #31
 801a310:	e01e      	b.n	801a350 <HAL_ADC_ConfigChannel+0x260>
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	2101      	movs	r1, #1
 801a318:	4618      	mov	r0, r3
 801a31a:	f7fe fd79 	bl	8018e10 <LL_ADC_GetOffsetChannel>
 801a31e:	4603      	mov	r3, r0
 801a320:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a324:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801a328:	fa93 f3a3 	rbit	r3, r3
 801a32c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 801a330:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801a334:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 801a338:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d101      	bne.n	801a344 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 801a340:	2320      	movs	r3, #32
 801a342:	e004      	b.n	801a34e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 801a344:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801a348:	fab3 f383 	clz	r3, r3
 801a34c:	b2db      	uxtb	r3, r3
 801a34e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a350:	683b      	ldr	r3, [r7, #0]
 801a352:	681b      	ldr	r3, [r3, #0]
 801a354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a358:	2b00      	cmp	r3, #0
 801a35a:	d105      	bne.n	801a368 <HAL_ADC_ConfigChannel+0x278>
 801a35c:	683b      	ldr	r3, [r7, #0]
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	0e9b      	lsrs	r3, r3, #26
 801a362:	f003 031f 	and.w	r3, r3, #31
 801a366:	e018      	b.n	801a39a <HAL_ADC_ConfigChannel+0x2aa>
 801a368:	683b      	ldr	r3, [r7, #0]
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a370:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a374:	fa93 f3a3 	rbit	r3, r3
 801a378:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 801a37c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a380:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 801a384:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d101      	bne.n	801a390 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 801a38c:	2320      	movs	r3, #32
 801a38e:	e004      	b.n	801a39a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 801a390:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a394:	fab3 f383 	clz	r3, r3
 801a398:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801a39a:	429a      	cmp	r2, r3
 801a39c:	d106      	bne.n	801a3ac <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	2200      	movs	r2, #0
 801a3a4:	2101      	movs	r1, #1
 801a3a6:	4618      	mov	r0, r3
 801a3a8:	f7fe fd48 	bl	8018e3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	2102      	movs	r1, #2
 801a3b2:	4618      	mov	r0, r3
 801a3b4:	f7fe fd2c 	bl	8018e10 <LL_ADC_GetOffsetChannel>
 801a3b8:	4603      	mov	r3, r0
 801a3ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a3be:	2b00      	cmp	r3, #0
 801a3c0:	d10a      	bne.n	801a3d8 <HAL_ADC_ConfigChannel+0x2e8>
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	2102      	movs	r1, #2
 801a3c8:	4618      	mov	r0, r3
 801a3ca:	f7fe fd21 	bl	8018e10 <LL_ADC_GetOffsetChannel>
 801a3ce:	4603      	mov	r3, r0
 801a3d0:	0e9b      	lsrs	r3, r3, #26
 801a3d2:	f003 021f 	and.w	r2, r3, #31
 801a3d6:	e01e      	b.n	801a416 <HAL_ADC_ConfigChannel+0x326>
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	681b      	ldr	r3, [r3, #0]
 801a3dc:	2102      	movs	r1, #2
 801a3de:	4618      	mov	r0, r3
 801a3e0:	f7fe fd16 	bl	8018e10 <LL_ADC_GetOffsetChannel>
 801a3e4:	4603      	mov	r3, r0
 801a3e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a3ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a3ee:	fa93 f3a3 	rbit	r3, r3
 801a3f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 801a3f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a3fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 801a3fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a402:	2b00      	cmp	r3, #0
 801a404:	d101      	bne.n	801a40a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 801a406:	2320      	movs	r3, #32
 801a408:	e004      	b.n	801a414 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 801a40a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a40e:	fab3 f383 	clz	r3, r3
 801a412:	b2db      	uxtb	r3, r3
 801a414:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a416:	683b      	ldr	r3, [r7, #0]
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d105      	bne.n	801a42e <HAL_ADC_ConfigChannel+0x33e>
 801a422:	683b      	ldr	r3, [r7, #0]
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	0e9b      	lsrs	r3, r3, #26
 801a428:	f003 031f 	and.w	r3, r3, #31
 801a42c:	e016      	b.n	801a45c <HAL_ADC_ConfigChannel+0x36c>
 801a42e:	683b      	ldr	r3, [r7, #0]
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a436:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a43a:	fa93 f3a3 	rbit	r3, r3
 801a43e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 801a440:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a442:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 801a446:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d101      	bne.n	801a452 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 801a44e:	2320      	movs	r3, #32
 801a450:	e004      	b.n	801a45c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 801a452:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a456:	fab3 f383 	clz	r3, r3
 801a45a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801a45c:	429a      	cmp	r2, r3
 801a45e:	d106      	bne.n	801a46e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	2200      	movs	r2, #0
 801a466:	2102      	movs	r1, #2
 801a468:	4618      	mov	r0, r3
 801a46a:	f7fe fce7 	bl	8018e3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	2103      	movs	r1, #3
 801a474:	4618      	mov	r0, r3
 801a476:	f7fe fccb 	bl	8018e10 <LL_ADC_GetOffsetChannel>
 801a47a:	4603      	mov	r3, r0
 801a47c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a480:	2b00      	cmp	r3, #0
 801a482:	d10a      	bne.n	801a49a <HAL_ADC_ConfigChannel+0x3aa>
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	681b      	ldr	r3, [r3, #0]
 801a488:	2103      	movs	r1, #3
 801a48a:	4618      	mov	r0, r3
 801a48c:	f7fe fcc0 	bl	8018e10 <LL_ADC_GetOffsetChannel>
 801a490:	4603      	mov	r3, r0
 801a492:	0e9b      	lsrs	r3, r3, #26
 801a494:	f003 021f 	and.w	r2, r3, #31
 801a498:	e017      	b.n	801a4ca <HAL_ADC_ConfigChannel+0x3da>
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	2103      	movs	r1, #3
 801a4a0:	4618      	mov	r0, r3
 801a4a2:	f7fe fcb5 	bl	8018e10 <LL_ADC_GetOffsetChannel>
 801a4a6:	4603      	mov	r3, r0
 801a4a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a4aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a4ac:	fa93 f3a3 	rbit	r3, r3
 801a4b0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 801a4b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a4b4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 801a4b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d101      	bne.n	801a4c0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 801a4bc:	2320      	movs	r3, #32
 801a4be:	e003      	b.n	801a4c8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 801a4c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a4c2:	fab3 f383 	clz	r3, r3
 801a4c6:	b2db      	uxtb	r3, r3
 801a4c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a4ca:	683b      	ldr	r3, [r7, #0]
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d105      	bne.n	801a4e2 <HAL_ADC_ConfigChannel+0x3f2>
 801a4d6:	683b      	ldr	r3, [r7, #0]
 801a4d8:	681b      	ldr	r3, [r3, #0]
 801a4da:	0e9b      	lsrs	r3, r3, #26
 801a4dc:	f003 031f 	and.w	r3, r3, #31
 801a4e0:	e011      	b.n	801a506 <HAL_ADC_ConfigChannel+0x416>
 801a4e2:	683b      	ldr	r3, [r7, #0]
 801a4e4:	681b      	ldr	r3, [r3, #0]
 801a4e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a4e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a4ea:	fa93 f3a3 	rbit	r3, r3
 801a4ee:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 801a4f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a4f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 801a4f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d101      	bne.n	801a4fe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 801a4fa:	2320      	movs	r3, #32
 801a4fc:	e003      	b.n	801a506 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 801a4fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a500:	fab3 f383 	clz	r3, r3
 801a504:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801a506:	429a      	cmp	r2, r3
 801a508:	d106      	bne.n	801a518 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	2200      	movs	r2, #0
 801a510:	2103      	movs	r1, #3
 801a512:	4618      	mov	r0, r3
 801a514:	f7fe fc92 	bl	8018e3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	4618      	mov	r0, r3
 801a51e:	f7fe fe29 	bl	8019174 <LL_ADC_IsEnabled>
 801a522:	4603      	mov	r3, r0
 801a524:	2b00      	cmp	r3, #0
 801a526:	f040 813d 	bne.w	801a7a4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	6818      	ldr	r0, [r3, #0]
 801a52e:	683b      	ldr	r3, [r7, #0]
 801a530:	6819      	ldr	r1, [r3, #0]
 801a532:	683b      	ldr	r3, [r7, #0]
 801a534:	68db      	ldr	r3, [r3, #12]
 801a536:	461a      	mov	r2, r3
 801a538:	f7fe fd62 	bl	8019000 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801a53c:	683b      	ldr	r3, [r7, #0]
 801a53e:	68db      	ldr	r3, [r3, #12]
 801a540:	4aa2      	ldr	r2, [pc, #648]	; (801a7cc <HAL_ADC_ConfigChannel+0x6dc>)
 801a542:	4293      	cmp	r3, r2
 801a544:	f040 812e 	bne.w	801a7a4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a54c:	683b      	ldr	r3, [r7, #0]
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a554:	2b00      	cmp	r3, #0
 801a556:	d10b      	bne.n	801a570 <HAL_ADC_ConfigChannel+0x480>
 801a558:	683b      	ldr	r3, [r7, #0]
 801a55a:	681b      	ldr	r3, [r3, #0]
 801a55c:	0e9b      	lsrs	r3, r3, #26
 801a55e:	3301      	adds	r3, #1
 801a560:	f003 031f 	and.w	r3, r3, #31
 801a564:	2b09      	cmp	r3, #9
 801a566:	bf94      	ite	ls
 801a568:	2301      	movls	r3, #1
 801a56a:	2300      	movhi	r3, #0
 801a56c:	b2db      	uxtb	r3, r3
 801a56e:	e019      	b.n	801a5a4 <HAL_ADC_ConfigChannel+0x4b4>
 801a570:	683b      	ldr	r3, [r7, #0]
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a578:	fa93 f3a3 	rbit	r3, r3
 801a57c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 801a57e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a580:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 801a582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a584:	2b00      	cmp	r3, #0
 801a586:	d101      	bne.n	801a58c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 801a588:	2320      	movs	r3, #32
 801a58a:	e003      	b.n	801a594 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 801a58c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a58e:	fab3 f383 	clz	r3, r3
 801a592:	b2db      	uxtb	r3, r3
 801a594:	3301      	adds	r3, #1
 801a596:	f003 031f 	and.w	r3, r3, #31
 801a59a:	2b09      	cmp	r3, #9
 801a59c:	bf94      	ite	ls
 801a59e:	2301      	movls	r3, #1
 801a5a0:	2300      	movhi	r3, #0
 801a5a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d079      	beq.n	801a69c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a5a8:	683b      	ldr	r3, [r7, #0]
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d107      	bne.n	801a5c4 <HAL_ADC_ConfigChannel+0x4d4>
 801a5b4:	683b      	ldr	r3, [r7, #0]
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	0e9b      	lsrs	r3, r3, #26
 801a5ba:	3301      	adds	r3, #1
 801a5bc:	069b      	lsls	r3, r3, #26
 801a5be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a5c2:	e015      	b.n	801a5f0 <HAL_ADC_ConfigChannel+0x500>
 801a5c4:	683b      	ldr	r3, [r7, #0]
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a5ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5cc:	fa93 f3a3 	rbit	r3, r3
 801a5d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 801a5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a5d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 801a5d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d101      	bne.n	801a5e0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 801a5dc:	2320      	movs	r3, #32
 801a5de:	e003      	b.n	801a5e8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 801a5e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a5e2:	fab3 f383 	clz	r3, r3
 801a5e6:	b2db      	uxtb	r3, r3
 801a5e8:	3301      	adds	r3, #1
 801a5ea:	069b      	lsls	r3, r3, #26
 801a5ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a5f0:	683b      	ldr	r3, [r7, #0]
 801a5f2:	681b      	ldr	r3, [r3, #0]
 801a5f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	d109      	bne.n	801a610 <HAL_ADC_ConfigChannel+0x520>
 801a5fc:	683b      	ldr	r3, [r7, #0]
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	0e9b      	lsrs	r3, r3, #26
 801a602:	3301      	adds	r3, #1
 801a604:	f003 031f 	and.w	r3, r3, #31
 801a608:	2101      	movs	r1, #1
 801a60a:	fa01 f303 	lsl.w	r3, r1, r3
 801a60e:	e017      	b.n	801a640 <HAL_ADC_ConfigChannel+0x550>
 801a610:	683b      	ldr	r3, [r7, #0]
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a618:	fa93 f3a3 	rbit	r3, r3
 801a61c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 801a61e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a620:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 801a622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a624:	2b00      	cmp	r3, #0
 801a626:	d101      	bne.n	801a62c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 801a628:	2320      	movs	r3, #32
 801a62a:	e003      	b.n	801a634 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 801a62c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a62e:	fab3 f383 	clz	r3, r3
 801a632:	b2db      	uxtb	r3, r3
 801a634:	3301      	adds	r3, #1
 801a636:	f003 031f 	and.w	r3, r3, #31
 801a63a:	2101      	movs	r1, #1
 801a63c:	fa01 f303 	lsl.w	r3, r1, r3
 801a640:	ea42 0103 	orr.w	r1, r2, r3
 801a644:	683b      	ldr	r3, [r7, #0]
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d10a      	bne.n	801a666 <HAL_ADC_ConfigChannel+0x576>
 801a650:	683b      	ldr	r3, [r7, #0]
 801a652:	681b      	ldr	r3, [r3, #0]
 801a654:	0e9b      	lsrs	r3, r3, #26
 801a656:	3301      	adds	r3, #1
 801a658:	f003 021f 	and.w	r2, r3, #31
 801a65c:	4613      	mov	r3, r2
 801a65e:	005b      	lsls	r3, r3, #1
 801a660:	4413      	add	r3, r2
 801a662:	051b      	lsls	r3, r3, #20
 801a664:	e018      	b.n	801a698 <HAL_ADC_ConfigChannel+0x5a8>
 801a666:	683b      	ldr	r3, [r7, #0]
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a66e:	fa93 f3a3 	rbit	r3, r3
 801a672:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 801a674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a676:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 801a678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d101      	bne.n	801a682 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 801a67e:	2320      	movs	r3, #32
 801a680:	e003      	b.n	801a68a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 801a682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a684:	fab3 f383 	clz	r3, r3
 801a688:	b2db      	uxtb	r3, r3
 801a68a:	3301      	adds	r3, #1
 801a68c:	f003 021f 	and.w	r2, r3, #31
 801a690:	4613      	mov	r3, r2
 801a692:	005b      	lsls	r3, r3, #1
 801a694:	4413      	add	r3, r2
 801a696:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a698:	430b      	orrs	r3, r1
 801a69a:	e07e      	b.n	801a79a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a69c:	683b      	ldr	r3, [r7, #0]
 801a69e:	681b      	ldr	r3, [r3, #0]
 801a6a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	d107      	bne.n	801a6b8 <HAL_ADC_ConfigChannel+0x5c8>
 801a6a8:	683b      	ldr	r3, [r7, #0]
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	0e9b      	lsrs	r3, r3, #26
 801a6ae:	3301      	adds	r3, #1
 801a6b0:	069b      	lsls	r3, r3, #26
 801a6b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a6b6:	e015      	b.n	801a6e4 <HAL_ADC_ConfigChannel+0x5f4>
 801a6b8:	683b      	ldr	r3, [r7, #0]
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6c0:	fa93 f3a3 	rbit	r3, r3
 801a6c4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801a6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6c8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 801a6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d101      	bne.n	801a6d4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 801a6d0:	2320      	movs	r3, #32
 801a6d2:	e003      	b.n	801a6dc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 801a6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6d6:	fab3 f383 	clz	r3, r3
 801a6da:	b2db      	uxtb	r3, r3
 801a6dc:	3301      	adds	r3, #1
 801a6de:	069b      	lsls	r3, r3, #26
 801a6e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a6e4:	683b      	ldr	r3, [r7, #0]
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d109      	bne.n	801a704 <HAL_ADC_ConfigChannel+0x614>
 801a6f0:	683b      	ldr	r3, [r7, #0]
 801a6f2:	681b      	ldr	r3, [r3, #0]
 801a6f4:	0e9b      	lsrs	r3, r3, #26
 801a6f6:	3301      	adds	r3, #1
 801a6f8:	f003 031f 	and.w	r3, r3, #31
 801a6fc:	2101      	movs	r1, #1
 801a6fe:	fa01 f303 	lsl.w	r3, r1, r3
 801a702:	e017      	b.n	801a734 <HAL_ADC_ConfigChannel+0x644>
 801a704:	683b      	ldr	r3, [r7, #0]
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a70a:	6a3b      	ldr	r3, [r7, #32]
 801a70c:	fa93 f3a3 	rbit	r3, r3
 801a710:	61fb      	str	r3, [r7, #28]
  return result;
 801a712:	69fb      	ldr	r3, [r7, #28]
 801a714:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801a716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d101      	bne.n	801a720 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 801a71c:	2320      	movs	r3, #32
 801a71e:	e003      	b.n	801a728 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 801a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a722:	fab3 f383 	clz	r3, r3
 801a726:	b2db      	uxtb	r3, r3
 801a728:	3301      	adds	r3, #1
 801a72a:	f003 031f 	and.w	r3, r3, #31
 801a72e:	2101      	movs	r1, #1
 801a730:	fa01 f303 	lsl.w	r3, r1, r3
 801a734:	ea42 0103 	orr.w	r1, r2, r3
 801a738:	683b      	ldr	r3, [r7, #0]
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a740:	2b00      	cmp	r3, #0
 801a742:	d10d      	bne.n	801a760 <HAL_ADC_ConfigChannel+0x670>
 801a744:	683b      	ldr	r3, [r7, #0]
 801a746:	681b      	ldr	r3, [r3, #0]
 801a748:	0e9b      	lsrs	r3, r3, #26
 801a74a:	3301      	adds	r3, #1
 801a74c:	f003 021f 	and.w	r2, r3, #31
 801a750:	4613      	mov	r3, r2
 801a752:	005b      	lsls	r3, r3, #1
 801a754:	4413      	add	r3, r2
 801a756:	3b1e      	subs	r3, #30
 801a758:	051b      	lsls	r3, r3, #20
 801a75a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801a75e:	e01b      	b.n	801a798 <HAL_ADC_ConfigChannel+0x6a8>
 801a760:	683b      	ldr	r3, [r7, #0]
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a766:	697b      	ldr	r3, [r7, #20]
 801a768:	fa93 f3a3 	rbit	r3, r3
 801a76c:	613b      	str	r3, [r7, #16]
  return result;
 801a76e:	693b      	ldr	r3, [r7, #16]
 801a770:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801a772:	69bb      	ldr	r3, [r7, #24]
 801a774:	2b00      	cmp	r3, #0
 801a776:	d101      	bne.n	801a77c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 801a778:	2320      	movs	r3, #32
 801a77a:	e003      	b.n	801a784 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 801a77c:	69bb      	ldr	r3, [r7, #24]
 801a77e:	fab3 f383 	clz	r3, r3
 801a782:	b2db      	uxtb	r3, r3
 801a784:	3301      	adds	r3, #1
 801a786:	f003 021f 	and.w	r2, r3, #31
 801a78a:	4613      	mov	r3, r2
 801a78c:	005b      	lsls	r3, r3, #1
 801a78e:	4413      	add	r3, r2
 801a790:	3b1e      	subs	r3, #30
 801a792:	051b      	lsls	r3, r3, #20
 801a794:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a798:	430b      	orrs	r3, r1
 801a79a:	683a      	ldr	r2, [r7, #0]
 801a79c:	6892      	ldr	r2, [r2, #8]
 801a79e:	4619      	mov	r1, r3
 801a7a0:	f7fe fc02 	bl	8018fa8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801a7a4:	683b      	ldr	r3, [r7, #0]
 801a7a6:	681a      	ldr	r2, [r3, #0]
 801a7a8:	4b09      	ldr	r3, [pc, #36]	; (801a7d0 <HAL_ADC_ConfigChannel+0x6e0>)
 801a7aa:	4013      	ands	r3, r2
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	f000 80af 	beq.w	801a910 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a7ba:	d004      	beq.n	801a7c6 <HAL_ADC_ConfigChannel+0x6d6>
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	4a04      	ldr	r2, [pc, #16]	; (801a7d4 <HAL_ADC_ConfigChannel+0x6e4>)
 801a7c2:	4293      	cmp	r3, r2
 801a7c4:	d10a      	bne.n	801a7dc <HAL_ADC_ConfigChannel+0x6ec>
 801a7c6:	4b04      	ldr	r3, [pc, #16]	; (801a7d8 <HAL_ADC_ConfigChannel+0x6e8>)
 801a7c8:	e009      	b.n	801a7de <HAL_ADC_ConfigChannel+0x6ee>
 801a7ca:	bf00      	nop
 801a7cc:	407f0000 	.word	0x407f0000
 801a7d0:	80080000 	.word	0x80080000
 801a7d4:	50000100 	.word	0x50000100
 801a7d8:	50000300 	.word	0x50000300
 801a7dc:	4b51      	ldr	r3, [pc, #324]	; (801a924 <HAL_ADC_ConfigChannel+0x834>)
 801a7de:	4618      	mov	r0, r3
 801a7e0:	f7fe fae4 	bl	8018dac <LL_ADC_GetCommonPathInternalCh>
 801a7e4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 801a7e8:	683b      	ldr	r3, [r7, #0]
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	4a4e      	ldr	r2, [pc, #312]	; (801a928 <HAL_ADC_ConfigChannel+0x838>)
 801a7ee:	4293      	cmp	r3, r2
 801a7f0:	d004      	beq.n	801a7fc <HAL_ADC_ConfigChannel+0x70c>
 801a7f2:	683b      	ldr	r3, [r7, #0]
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	4a4d      	ldr	r2, [pc, #308]	; (801a92c <HAL_ADC_ConfigChannel+0x83c>)
 801a7f8:	4293      	cmp	r3, r2
 801a7fa:	d134      	bne.n	801a866 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 801a7fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a800:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801a804:	2b00      	cmp	r3, #0
 801a806:	d12e      	bne.n	801a866 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a810:	d17e      	bne.n	801a910 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a81a:	d004      	beq.n	801a826 <HAL_ADC_ConfigChannel+0x736>
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	4a43      	ldr	r2, [pc, #268]	; (801a930 <HAL_ADC_ConfigChannel+0x840>)
 801a822:	4293      	cmp	r3, r2
 801a824:	d101      	bne.n	801a82a <HAL_ADC_ConfigChannel+0x73a>
 801a826:	4a43      	ldr	r2, [pc, #268]	; (801a934 <HAL_ADC_ConfigChannel+0x844>)
 801a828:	e000      	b.n	801a82c <HAL_ADC_ConfigChannel+0x73c>
 801a82a:	4a3e      	ldr	r2, [pc, #248]	; (801a924 <HAL_ADC_ConfigChannel+0x834>)
 801a82c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a830:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801a834:	4619      	mov	r1, r3
 801a836:	4610      	mov	r0, r2
 801a838:	f7fe faa5 	bl	8018d86 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801a83c:	4b3e      	ldr	r3, [pc, #248]	; (801a938 <HAL_ADC_ConfigChannel+0x848>)
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	099b      	lsrs	r3, r3, #6
 801a842:	4a3e      	ldr	r2, [pc, #248]	; (801a93c <HAL_ADC_ConfigChannel+0x84c>)
 801a844:	fba2 2303 	umull	r2, r3, r2, r3
 801a848:	099b      	lsrs	r3, r3, #6
 801a84a:	1c5a      	adds	r2, r3, #1
 801a84c:	4613      	mov	r3, r2
 801a84e:	005b      	lsls	r3, r3, #1
 801a850:	4413      	add	r3, r2
 801a852:	009b      	lsls	r3, r3, #2
 801a854:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801a856:	e002      	b.n	801a85e <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 801a858:	68fb      	ldr	r3, [r7, #12]
 801a85a:	3b01      	subs	r3, #1
 801a85c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801a85e:	68fb      	ldr	r3, [r7, #12]
 801a860:	2b00      	cmp	r3, #0
 801a862:	d1f9      	bne.n	801a858 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801a864:	e054      	b.n	801a910 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801a866:	683b      	ldr	r3, [r7, #0]
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	4a35      	ldr	r2, [pc, #212]	; (801a940 <HAL_ADC_ConfigChannel+0x850>)
 801a86c:	4293      	cmp	r3, r2
 801a86e:	d120      	bne.n	801a8b2 <HAL_ADC_ConfigChannel+0x7c2>
 801a870:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801a878:	2b00      	cmp	r3, #0
 801a87a:	d11a      	bne.n	801a8b2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a884:	d144      	bne.n	801a910 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	681b      	ldr	r3, [r3, #0]
 801a88a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a88e:	d004      	beq.n	801a89a <HAL_ADC_ConfigChannel+0x7aa>
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	681b      	ldr	r3, [r3, #0]
 801a894:	4a26      	ldr	r2, [pc, #152]	; (801a930 <HAL_ADC_ConfigChannel+0x840>)
 801a896:	4293      	cmp	r3, r2
 801a898:	d101      	bne.n	801a89e <HAL_ADC_ConfigChannel+0x7ae>
 801a89a:	4a26      	ldr	r2, [pc, #152]	; (801a934 <HAL_ADC_ConfigChannel+0x844>)
 801a89c:	e000      	b.n	801a8a0 <HAL_ADC_ConfigChannel+0x7b0>
 801a89e:	4a21      	ldr	r2, [pc, #132]	; (801a924 <HAL_ADC_ConfigChannel+0x834>)
 801a8a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a8a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801a8a8:	4619      	mov	r1, r3
 801a8aa:	4610      	mov	r0, r2
 801a8ac:	f7fe fa6b 	bl	8018d86 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801a8b0:	e02e      	b.n	801a910 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 801a8b2:	683b      	ldr	r3, [r7, #0]
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	4a23      	ldr	r2, [pc, #140]	; (801a944 <HAL_ADC_ConfigChannel+0x854>)
 801a8b8:	4293      	cmp	r3, r2
 801a8ba:	d129      	bne.n	801a910 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801a8bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a8c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d123      	bne.n	801a910 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	4a18      	ldr	r2, [pc, #96]	; (801a930 <HAL_ADC_ConfigChannel+0x840>)
 801a8ce:	4293      	cmp	r3, r2
 801a8d0:	d01e      	beq.n	801a910 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a8da:	d004      	beq.n	801a8e6 <HAL_ADC_ConfigChannel+0x7f6>
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	681b      	ldr	r3, [r3, #0]
 801a8e0:	4a13      	ldr	r2, [pc, #76]	; (801a930 <HAL_ADC_ConfigChannel+0x840>)
 801a8e2:	4293      	cmp	r3, r2
 801a8e4:	d101      	bne.n	801a8ea <HAL_ADC_ConfigChannel+0x7fa>
 801a8e6:	4a13      	ldr	r2, [pc, #76]	; (801a934 <HAL_ADC_ConfigChannel+0x844>)
 801a8e8:	e000      	b.n	801a8ec <HAL_ADC_ConfigChannel+0x7fc>
 801a8ea:	4a0e      	ldr	r2, [pc, #56]	; (801a924 <HAL_ADC_ConfigChannel+0x834>)
 801a8ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a8f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801a8f4:	4619      	mov	r1, r3
 801a8f6:	4610      	mov	r0, r2
 801a8f8:	f7fe fa45 	bl	8018d86 <LL_ADC_SetCommonPathInternalCh>
 801a8fc:	e008      	b.n	801a910 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a902:	f043 0220 	orr.w	r2, r3, #32
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801a90a:	2301      	movs	r3, #1
 801a90c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	2200      	movs	r2, #0
 801a914:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801a918:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 801a91c:	4618      	mov	r0, r3
 801a91e:	37d8      	adds	r7, #216	; 0xd8
 801a920:	46bd      	mov	sp, r7
 801a922:	bd80      	pop	{r7, pc}
 801a924:	50000700 	.word	0x50000700
 801a928:	c3210000 	.word	0xc3210000
 801a92c:	90c00010 	.word	0x90c00010
 801a930:	50000100 	.word	0x50000100
 801a934:	50000300 	.word	0x50000300
 801a938:	20000000 	.word	0x20000000
 801a93c:	053e2d63 	.word	0x053e2d63
 801a940:	c7520000 	.word	0xc7520000
 801a944:	cb840000 	.word	0xcb840000

0801a948 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 801a948:	b580      	push	{r7, lr}
 801a94a:	b088      	sub	sp, #32
 801a94c:	af00      	add	r7, sp, #0
 801a94e:	6078      	str	r0, [r7, #4]
 801a950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 801a952:	2300      	movs	r3, #0
 801a954:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 801a956:	683b      	ldr	r3, [r7, #0]
 801a958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	681b      	ldr	r3, [r3, #0]
 801a95e:	4618      	mov	r0, r3
 801a960:	f7fe fc56 	bl	8019210 <LL_ADC_REG_IsConversionOngoing>
 801a964:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	681b      	ldr	r3, [r3, #0]
 801a96a:	4618      	mov	r0, r3
 801a96c:	f7fe fc77 	bl	801925e <LL_ADC_INJ_IsConversionOngoing>
 801a970:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 801a972:	693b      	ldr	r3, [r7, #16]
 801a974:	2b00      	cmp	r3, #0
 801a976:	d103      	bne.n	801a980 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 801a978:	68fb      	ldr	r3, [r7, #12]
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	f000 8098 	beq.w	801aab0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	68db      	ldr	r3, [r3, #12]
 801a986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	d02a      	beq.n	801a9e4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	7f5b      	ldrb	r3, [r3, #29]
 801a992:	2b01      	cmp	r3, #1
 801a994:	d126      	bne.n	801a9e4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	7f1b      	ldrb	r3, [r3, #28]
 801a99a:	2b01      	cmp	r3, #1
 801a99c:	d122      	bne.n	801a9e4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 801a99e:	2301      	movs	r3, #1
 801a9a0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801a9a2:	e014      	b.n	801a9ce <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 801a9a4:	69fb      	ldr	r3, [r7, #28]
 801a9a6:	4a45      	ldr	r2, [pc, #276]	; (801aabc <ADC_ConversionStop+0x174>)
 801a9a8:	4293      	cmp	r3, r2
 801a9aa:	d90d      	bls.n	801a9c8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a9b0:	f043 0210 	orr.w	r2, r3, #16
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a9bc:	f043 0201 	orr.w	r2, r3, #1
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801a9c4:	2301      	movs	r3, #1
 801a9c6:	e074      	b.n	801aab2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 801a9c8:	69fb      	ldr	r3, [r7, #28]
 801a9ca:	3301      	adds	r3, #1
 801a9cc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	681b      	ldr	r3, [r3, #0]
 801a9d2:	681b      	ldr	r3, [r3, #0]
 801a9d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a9d8:	2b40      	cmp	r3, #64	; 0x40
 801a9da:	d1e3      	bne.n	801a9a4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	681b      	ldr	r3, [r3, #0]
 801a9e0:	2240      	movs	r2, #64	; 0x40
 801a9e2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 801a9e4:	69bb      	ldr	r3, [r7, #24]
 801a9e6:	2b02      	cmp	r3, #2
 801a9e8:	d014      	beq.n	801aa14 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	4618      	mov	r0, r3
 801a9f0:	f7fe fc0e 	bl	8019210 <LL_ADC_REG_IsConversionOngoing>
 801a9f4:	4603      	mov	r3, r0
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d00c      	beq.n	801aa14 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	4618      	mov	r0, r3
 801aa00:	f7fe fbcb 	bl	801919a <LL_ADC_IsDisableOngoing>
 801aa04:	4603      	mov	r3, r0
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d104      	bne.n	801aa14 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	4618      	mov	r0, r3
 801aa10:	f7fe fbea 	bl	80191e8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 801aa14:	69bb      	ldr	r3, [r7, #24]
 801aa16:	2b01      	cmp	r3, #1
 801aa18:	d014      	beq.n	801aa44 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	681b      	ldr	r3, [r3, #0]
 801aa1e:	4618      	mov	r0, r3
 801aa20:	f7fe fc1d 	bl	801925e <LL_ADC_INJ_IsConversionOngoing>
 801aa24:	4603      	mov	r3, r0
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	d00c      	beq.n	801aa44 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	4618      	mov	r0, r3
 801aa30:	f7fe fbb3 	bl	801919a <LL_ADC_IsDisableOngoing>
 801aa34:	4603      	mov	r3, r0
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d104      	bne.n	801aa44 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	4618      	mov	r0, r3
 801aa40:	f7fe fbf9 	bl	8019236 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 801aa44:	69bb      	ldr	r3, [r7, #24]
 801aa46:	2b02      	cmp	r3, #2
 801aa48:	d005      	beq.n	801aa56 <ADC_ConversionStop+0x10e>
 801aa4a:	69bb      	ldr	r3, [r7, #24]
 801aa4c:	2b03      	cmp	r3, #3
 801aa4e:	d105      	bne.n	801aa5c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 801aa50:	230c      	movs	r3, #12
 801aa52:	617b      	str	r3, [r7, #20]
        break;
 801aa54:	e005      	b.n	801aa62 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 801aa56:	2308      	movs	r3, #8
 801aa58:	617b      	str	r3, [r7, #20]
        break;
 801aa5a:	e002      	b.n	801aa62 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 801aa5c:	2304      	movs	r3, #4
 801aa5e:	617b      	str	r3, [r7, #20]
        break;
 801aa60:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 801aa62:	f7fe f94f 	bl	8018d04 <HAL_GetTick>
 801aa66:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801aa68:	e01b      	b.n	801aaa2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 801aa6a:	f7fe f94b 	bl	8018d04 <HAL_GetTick>
 801aa6e:	4602      	mov	r2, r0
 801aa70:	68bb      	ldr	r3, [r7, #8]
 801aa72:	1ad3      	subs	r3, r2, r3
 801aa74:	2b05      	cmp	r3, #5
 801aa76:	d914      	bls.n	801aaa2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	689a      	ldr	r2, [r3, #8]
 801aa7e:	697b      	ldr	r3, [r7, #20]
 801aa80:	4013      	ands	r3, r2
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d00d      	beq.n	801aaa2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa8a:	f043 0210 	orr.w	r2, r3, #16
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aa96:	f043 0201 	orr.w	r2, r3, #1
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801aa9e:	2301      	movs	r3, #1
 801aaa0:	e007      	b.n	801aab2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	689a      	ldr	r2, [r3, #8]
 801aaa8:	697b      	ldr	r3, [r7, #20]
 801aaaa:	4013      	ands	r3, r2
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d1dc      	bne.n	801aa6a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 801aab0:	2300      	movs	r3, #0
}
 801aab2:	4618      	mov	r0, r3
 801aab4:	3720      	adds	r7, #32
 801aab6:	46bd      	mov	sp, r7
 801aab8:	bd80      	pop	{r7, pc}
 801aaba:	bf00      	nop
 801aabc:	a33fffff 	.word	0xa33fffff

0801aac0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 801aac0:	b580      	push	{r7, lr}
 801aac2:	b084      	sub	sp, #16
 801aac4:	af00      	add	r7, sp, #0
 801aac6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	4618      	mov	r0, r3
 801aace:	f7fe fb51 	bl	8019174 <LL_ADC_IsEnabled>
 801aad2:	4603      	mov	r3, r0
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d14d      	bne.n	801ab74 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	681b      	ldr	r3, [r3, #0]
 801aadc:	689a      	ldr	r2, [r3, #8]
 801aade:	4b28      	ldr	r3, [pc, #160]	; (801ab80 <ADC_Enable+0xc0>)
 801aae0:	4013      	ands	r3, r2
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	d00d      	beq.n	801ab02 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aaea:	f043 0210 	orr.w	r2, r3, #16
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aaf6:	f043 0201 	orr.w	r2, r3, #1
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 801aafe:	2301      	movs	r3, #1
 801ab00:	e039      	b.n	801ab76 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	681b      	ldr	r3, [r3, #0]
 801ab06:	4618      	mov	r0, r3
 801ab08:	f7fe fb0c 	bl	8019124 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 801ab0c:	f7fe f8fa 	bl	8018d04 <HAL_GetTick>
 801ab10:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801ab12:	e028      	b.n	801ab66 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	4618      	mov	r0, r3
 801ab1a:	f7fe fb2b 	bl	8019174 <LL_ADC_IsEnabled>
 801ab1e:	4603      	mov	r3, r0
 801ab20:	2b00      	cmp	r3, #0
 801ab22:	d104      	bne.n	801ab2e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	4618      	mov	r0, r3
 801ab2a:	f7fe fafb 	bl	8019124 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801ab2e:	f7fe f8e9 	bl	8018d04 <HAL_GetTick>
 801ab32:	4602      	mov	r2, r0
 801ab34:	68fb      	ldr	r3, [r7, #12]
 801ab36:	1ad3      	subs	r3, r2, r3
 801ab38:	2b02      	cmp	r3, #2
 801ab3a:	d914      	bls.n	801ab66 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	681b      	ldr	r3, [r3, #0]
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	f003 0301 	and.w	r3, r3, #1
 801ab46:	2b01      	cmp	r3, #1
 801ab48:	d00d      	beq.n	801ab66 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ab4e:	f043 0210 	orr.w	r2, r3, #16
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ab5a:	f043 0201 	orr.w	r2, r3, #1
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801ab62:	2301      	movs	r3, #1
 801ab64:	e007      	b.n	801ab76 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	681b      	ldr	r3, [r3, #0]
 801ab6a:	681b      	ldr	r3, [r3, #0]
 801ab6c:	f003 0301 	and.w	r3, r3, #1
 801ab70:	2b01      	cmp	r3, #1
 801ab72:	d1cf      	bne.n	801ab14 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801ab74:	2300      	movs	r3, #0
}
 801ab76:	4618      	mov	r0, r3
 801ab78:	3710      	adds	r7, #16
 801ab7a:	46bd      	mov	sp, r7
 801ab7c:	bd80      	pop	{r7, pc}
 801ab7e:	bf00      	nop
 801ab80:	8000003f 	.word	0x8000003f

0801ab84 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 801ab84:	b580      	push	{r7, lr}
 801ab86:	b084      	sub	sp, #16
 801ab88:	af00      	add	r7, sp, #0
 801ab8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	4618      	mov	r0, r3
 801ab92:	f7fe fb02 	bl	801919a <LL_ADC_IsDisableOngoing>
 801ab96:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	4618      	mov	r0, r3
 801ab9e:	f7fe fae9 	bl	8019174 <LL_ADC_IsEnabled>
 801aba2:	4603      	mov	r3, r0
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d047      	beq.n	801ac38 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 801aba8:	68fb      	ldr	r3, [r7, #12]
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d144      	bne.n	801ac38 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	681b      	ldr	r3, [r3, #0]
 801abb2:	689b      	ldr	r3, [r3, #8]
 801abb4:	f003 030d 	and.w	r3, r3, #13
 801abb8:	2b01      	cmp	r3, #1
 801abba:	d10c      	bne.n	801abd6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	4618      	mov	r0, r3
 801abc2:	f7fe fac3 	bl	801914c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	2203      	movs	r2, #3
 801abcc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 801abce:	f7fe f899 	bl	8018d04 <HAL_GetTick>
 801abd2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801abd4:	e029      	b.n	801ac2a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801abda:	f043 0210 	orr.w	r2, r3, #16
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801abe6:	f043 0201 	orr.w	r2, r3, #1
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 801abee:	2301      	movs	r3, #1
 801abf0:	e023      	b.n	801ac3a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801abf2:	f7fe f887 	bl	8018d04 <HAL_GetTick>
 801abf6:	4602      	mov	r2, r0
 801abf8:	68bb      	ldr	r3, [r7, #8]
 801abfa:	1ad3      	subs	r3, r2, r3
 801abfc:	2b02      	cmp	r3, #2
 801abfe:	d914      	bls.n	801ac2a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	689b      	ldr	r3, [r3, #8]
 801ac06:	f003 0301 	and.w	r3, r3, #1
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d00d      	beq.n	801ac2a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ac12:	f043 0210 	orr.w	r2, r3, #16
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ac1e:	f043 0201 	orr.w	r2, r3, #1
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801ac26:	2301      	movs	r3, #1
 801ac28:	e007      	b.n	801ac3a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	689b      	ldr	r3, [r3, #8]
 801ac30:	f003 0301 	and.w	r3, r3, #1
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	d1dc      	bne.n	801abf2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801ac38:	2300      	movs	r3, #0
}
 801ac3a:	4618      	mov	r0, r3
 801ac3c:	3710      	adds	r7, #16
 801ac3e:	46bd      	mov	sp, r7
 801ac40:	bd80      	pop	{r7, pc}

0801ac42 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 801ac42:	b580      	push	{r7, lr}
 801ac44:	b084      	sub	sp, #16
 801ac46:	af00      	add	r7, sp, #0
 801ac48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ac4e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 801ac50:	68fb      	ldr	r3, [r7, #12]
 801ac52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ac54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d14b      	bne.n	801acf4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801ac5c:	68fb      	ldr	r3, [r7, #12]
 801ac5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ac60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 801ac68:	68fb      	ldr	r3, [r7, #12]
 801ac6a:	681b      	ldr	r3, [r3, #0]
 801ac6c:	681b      	ldr	r3, [r3, #0]
 801ac6e:	f003 0308 	and.w	r3, r3, #8
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d021      	beq.n	801acba <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801ac76:	68fb      	ldr	r3, [r7, #12]
 801ac78:	681b      	ldr	r3, [r3, #0]
 801ac7a:	4618      	mov	r0, r3
 801ac7c:	f7fe f942 	bl	8018f04 <LL_ADC_REG_IsTriggerSourceSWStart>
 801ac80:	4603      	mov	r3, r0
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d032      	beq.n	801acec <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 801ac86:	68fb      	ldr	r3, [r7, #12]
 801ac88:	681b      	ldr	r3, [r3, #0]
 801ac8a:	68db      	ldr	r3, [r3, #12]
 801ac8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d12b      	bne.n	801acec <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801ac94:	68fb      	ldr	r3, [r7, #12]
 801ac96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ac98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801aca0:	68fb      	ldr	r3, [r7, #12]
 801aca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d11f      	bne.n	801acec <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801acac:	68fb      	ldr	r3, [r7, #12]
 801acae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801acb0:	f043 0201 	orr.w	r2, r3, #1
 801acb4:	68fb      	ldr	r3, [r7, #12]
 801acb6:	65da      	str	r2, [r3, #92]	; 0x5c
 801acb8:	e018      	b.n	801acec <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 801acba:	68fb      	ldr	r3, [r7, #12]
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	68db      	ldr	r3, [r3, #12]
 801acc0:	f003 0302 	and.w	r3, r3, #2
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d111      	bne.n	801acec <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801acc8:	68fb      	ldr	r3, [r7, #12]
 801acca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801accc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801acd0:	68fb      	ldr	r3, [r7, #12]
 801acd2:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801acd4:	68fb      	ldr	r3, [r7, #12]
 801acd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801acd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d105      	bne.n	801acec <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801ace0:	68fb      	ldr	r3, [r7, #12]
 801ace2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ace4:	f043 0201 	orr.w	r2, r3, #1
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801acec:	68f8      	ldr	r0, [r7, #12]
 801acee:	f7ed fabf 	bl	8008270 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801acf2:	e00e      	b.n	801ad12 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801acf4:	68fb      	ldr	r3, [r7, #12]
 801acf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801acf8:	f003 0310 	and.w	r3, r3, #16
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d003      	beq.n	801ad08 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 801ad00:	68f8      	ldr	r0, [r7, #12]
 801ad02:	f7ff f9eb 	bl	801a0dc <HAL_ADC_ErrorCallback>
}
 801ad06:	e004      	b.n	801ad12 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ad0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ad0e:	6878      	ldr	r0, [r7, #4]
 801ad10:	4798      	blx	r3
}
 801ad12:	bf00      	nop
 801ad14:	3710      	adds	r7, #16
 801ad16:	46bd      	mov	sp, r7
 801ad18:	bd80      	pop	{r7, pc}

0801ad1a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 801ad1a:	b580      	push	{r7, lr}
 801ad1c:	b084      	sub	sp, #16
 801ad1e:	af00      	add	r7, sp, #0
 801ad20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad26:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801ad28:	68f8      	ldr	r0, [r7, #12]
 801ad2a:	f7ff f9c3 	bl	801a0b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801ad2e:	bf00      	nop
 801ad30:	3710      	adds	r7, #16
 801ad32:	46bd      	mov	sp, r7
 801ad34:	bd80      	pop	{r7, pc}

0801ad36 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 801ad36:	b580      	push	{r7, lr}
 801ad38:	b084      	sub	sp, #16
 801ad3a:	af00      	add	r7, sp, #0
 801ad3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad42:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801ad44:	68fb      	ldr	r3, [r7, #12]
 801ad46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801ad4c:	68fb      	ldr	r3, [r7, #12]
 801ad4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 801ad50:	68fb      	ldr	r3, [r7, #12]
 801ad52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ad54:	f043 0204 	orr.w	r2, r3, #4
 801ad58:	68fb      	ldr	r3, [r7, #12]
 801ad5a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801ad5c:	68f8      	ldr	r0, [r7, #12]
 801ad5e:	f7ff f9bd 	bl	801a0dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801ad62:	bf00      	nop
 801ad64:	3710      	adds	r7, #16
 801ad66:	46bd      	mov	sp, r7
 801ad68:	bd80      	pop	{r7, pc}

0801ad6a <LL_ADC_IsEnabled>:
{
 801ad6a:	b480      	push	{r7}
 801ad6c:	b083      	sub	sp, #12
 801ad6e:	af00      	add	r7, sp, #0
 801ad70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	689b      	ldr	r3, [r3, #8]
 801ad76:	f003 0301 	and.w	r3, r3, #1
 801ad7a:	2b01      	cmp	r3, #1
 801ad7c:	d101      	bne.n	801ad82 <LL_ADC_IsEnabled+0x18>
 801ad7e:	2301      	movs	r3, #1
 801ad80:	e000      	b.n	801ad84 <LL_ADC_IsEnabled+0x1a>
 801ad82:	2300      	movs	r3, #0
}
 801ad84:	4618      	mov	r0, r3
 801ad86:	370c      	adds	r7, #12
 801ad88:	46bd      	mov	sp, r7
 801ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad8e:	4770      	bx	lr

0801ad90 <LL_ADC_StartCalibration>:
{
 801ad90:	b480      	push	{r7}
 801ad92:	b083      	sub	sp, #12
 801ad94:	af00      	add	r7, sp, #0
 801ad96:	6078      	str	r0, [r7, #4]
 801ad98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	689b      	ldr	r3, [r3, #8]
 801ad9e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801ada2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801ada6:	683a      	ldr	r2, [r7, #0]
 801ada8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801adac:	4313      	orrs	r3, r2
 801adae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	609a      	str	r2, [r3, #8]
}
 801adb6:	bf00      	nop
 801adb8:	370c      	adds	r7, #12
 801adba:	46bd      	mov	sp, r7
 801adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adc0:	4770      	bx	lr

0801adc2 <LL_ADC_IsCalibrationOnGoing>:
{
 801adc2:	b480      	push	{r7}
 801adc4:	b083      	sub	sp, #12
 801adc6:	af00      	add	r7, sp, #0
 801adc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	689b      	ldr	r3, [r3, #8]
 801adce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801add2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801add6:	d101      	bne.n	801addc <LL_ADC_IsCalibrationOnGoing+0x1a>
 801add8:	2301      	movs	r3, #1
 801adda:	e000      	b.n	801adde <LL_ADC_IsCalibrationOnGoing+0x1c>
 801addc:	2300      	movs	r3, #0
}
 801adde:	4618      	mov	r0, r3
 801ade0:	370c      	adds	r7, #12
 801ade2:	46bd      	mov	sp, r7
 801ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ade8:	4770      	bx	lr

0801adea <LL_ADC_REG_IsConversionOngoing>:
{
 801adea:	b480      	push	{r7}
 801adec:	b083      	sub	sp, #12
 801adee:	af00      	add	r7, sp, #0
 801adf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	689b      	ldr	r3, [r3, #8]
 801adf6:	f003 0304 	and.w	r3, r3, #4
 801adfa:	2b04      	cmp	r3, #4
 801adfc:	d101      	bne.n	801ae02 <LL_ADC_REG_IsConversionOngoing+0x18>
 801adfe:	2301      	movs	r3, #1
 801ae00:	e000      	b.n	801ae04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 801ae02:	2300      	movs	r3, #0
}
 801ae04:	4618      	mov	r0, r3
 801ae06:	370c      	adds	r7, #12
 801ae08:	46bd      	mov	sp, r7
 801ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae0e:	4770      	bx	lr

0801ae10 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 801ae10:	b580      	push	{r7, lr}
 801ae12:	b084      	sub	sp, #16
 801ae14:	af00      	add	r7, sp, #0
 801ae16:	6078      	str	r0, [r7, #4]
 801ae18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 801ae1a:	2300      	movs	r3, #0
 801ae1c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801ae24:	2b01      	cmp	r3, #1
 801ae26:	d101      	bne.n	801ae2c <HAL_ADCEx_Calibration_Start+0x1c>
 801ae28:	2302      	movs	r3, #2
 801ae2a:	e04d      	b.n	801aec8 <HAL_ADCEx_Calibration_Start+0xb8>
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	2201      	movs	r2, #1
 801ae30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 801ae34:	6878      	ldr	r0, [r7, #4]
 801ae36:	f7ff fea5 	bl	801ab84 <ADC_Disable>
 801ae3a:	4603      	mov	r3, r0
 801ae3c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 801ae3e:	7bfb      	ldrb	r3, [r7, #15]
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d136      	bne.n	801aeb2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ae48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801ae4c:	f023 0302 	bic.w	r3, r3, #2
 801ae50:	f043 0202 	orr.w	r2, r3, #2
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	6839      	ldr	r1, [r7, #0]
 801ae5e:	4618      	mov	r0, r3
 801ae60:	f7ff ff96 	bl	801ad90 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801ae64:	e014      	b.n	801ae90 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 801ae66:	68bb      	ldr	r3, [r7, #8]
 801ae68:	3301      	adds	r3, #1
 801ae6a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 801ae6c:	68bb      	ldr	r3, [r7, #8]
 801ae6e:	4a18      	ldr	r2, [pc, #96]	; (801aed0 <HAL_ADCEx_Calibration_Start+0xc0>)
 801ae70:	4293      	cmp	r3, r2
 801ae72:	d90d      	bls.n	801ae90 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ae78:	f023 0312 	bic.w	r3, r3, #18
 801ae7c:	f043 0210 	orr.w	r2, r3, #16
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	2200      	movs	r2, #0
 801ae88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 801ae8c:	2301      	movs	r3, #1
 801ae8e:	e01b      	b.n	801aec8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	681b      	ldr	r3, [r3, #0]
 801ae94:	4618      	mov	r0, r3
 801ae96:	f7ff ff94 	bl	801adc2 <LL_ADC_IsCalibrationOnGoing>
 801ae9a:	4603      	mov	r3, r0
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d1e2      	bne.n	801ae66 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aea4:	f023 0303 	bic.w	r3, r3, #3
 801aea8:	f043 0201 	orr.w	r2, r3, #1
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	65da      	str	r2, [r3, #92]	; 0x5c
 801aeb0:	e005      	b.n	801aebe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aeb6:	f043 0210 	orr.w	r2, r3, #16
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	2200      	movs	r2, #0
 801aec2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801aec6:	7bfb      	ldrb	r3, [r7, #15]
}
 801aec8:	4618      	mov	r0, r3
 801aeca:	3710      	adds	r7, #16
 801aecc:	46bd      	mov	sp, r7
 801aece:	bd80      	pop	{r7, pc}
 801aed0:	0004de01 	.word	0x0004de01

0801aed4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 801aed4:	b480      	push	{r7}
 801aed6:	b083      	sub	sp, #12
 801aed8:	af00      	add	r7, sp, #0
 801aeda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 801aedc:	bf00      	nop
 801aede:	370c      	adds	r7, #12
 801aee0:	46bd      	mov	sp, r7
 801aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aee6:	4770      	bx	lr

0801aee8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 801aee8:	b480      	push	{r7}
 801aeea:	b083      	sub	sp, #12
 801aeec:	af00      	add	r7, sp, #0
 801aeee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 801aef0:	bf00      	nop
 801aef2:	370c      	adds	r7, #12
 801aef4:	46bd      	mov	sp, r7
 801aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aefa:	4770      	bx	lr

0801aefc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 801aefc:	b480      	push	{r7}
 801aefe:	b083      	sub	sp, #12
 801af00:	af00      	add	r7, sp, #0
 801af02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 801af04:	bf00      	nop
 801af06:	370c      	adds	r7, #12
 801af08:	46bd      	mov	sp, r7
 801af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af0e:	4770      	bx	lr

0801af10 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 801af10:	b480      	push	{r7}
 801af12:	b083      	sub	sp, #12
 801af14:	af00      	add	r7, sp, #0
 801af16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 801af18:	bf00      	nop
 801af1a:	370c      	adds	r7, #12
 801af1c:	46bd      	mov	sp, r7
 801af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af22:	4770      	bx	lr

0801af24 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 801af24:	b480      	push	{r7}
 801af26:	b083      	sub	sp, #12
 801af28:	af00      	add	r7, sp, #0
 801af2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 801af2c:	bf00      	nop
 801af2e:	370c      	adds	r7, #12
 801af30:	46bd      	mov	sp, r7
 801af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af36:	4770      	bx	lr

0801af38 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 801af38:	b590      	push	{r4, r7, lr}
 801af3a:	b0a1      	sub	sp, #132	; 0x84
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	6078      	str	r0, [r7, #4]
 801af40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801af42:	2300      	movs	r3, #0
 801af44:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801af4e:	2b01      	cmp	r3, #1
 801af50:	d101      	bne.n	801af56 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 801af52:	2302      	movs	r3, #2
 801af54:	e0cb      	b.n	801b0ee <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	2201      	movs	r2, #1
 801af5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 801af5e:	2300      	movs	r3, #0
 801af60:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 801af62:	2300      	movs	r3, #0
 801af64:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801af6e:	d102      	bne.n	801af76 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 801af70:	4b61      	ldr	r3, [pc, #388]	; (801b0f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801af72:	60bb      	str	r3, [r7, #8]
 801af74:	e001      	b.n	801af7a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 801af76:	2300      	movs	r3, #0
 801af78:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 801af7a:	68bb      	ldr	r3, [r7, #8]
 801af7c:	2b00      	cmp	r3, #0
 801af7e:	d10b      	bne.n	801af98 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801af84:	f043 0220 	orr.w	r2, r3, #32
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	2200      	movs	r2, #0
 801af90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 801af94:	2301      	movs	r3, #1
 801af96:	e0aa      	b.n	801b0ee <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 801af98:	68bb      	ldr	r3, [r7, #8]
 801af9a:	4618      	mov	r0, r3
 801af9c:	f7ff ff25 	bl	801adea <LL_ADC_REG_IsConversionOngoing>
 801afa0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	4618      	mov	r0, r3
 801afa8:	f7ff ff1f 	bl	801adea <LL_ADC_REG_IsConversionOngoing>
 801afac:	4603      	mov	r3, r0
 801afae:	2b00      	cmp	r3, #0
 801afb0:	f040 808c 	bne.w	801b0cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 801afb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	f040 8088 	bne.w	801b0cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801afc4:	d004      	beq.n	801afd0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	681b      	ldr	r3, [r3, #0]
 801afca:	4a4b      	ldr	r2, [pc, #300]	; (801b0f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801afcc:	4293      	cmp	r3, r2
 801afce:	d101      	bne.n	801afd4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 801afd0:	4b4a      	ldr	r3, [pc, #296]	; (801b0fc <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 801afd2:	e000      	b.n	801afd6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 801afd4:	4b4a      	ldr	r3, [pc, #296]	; (801b100 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 801afd6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801afd8:	683b      	ldr	r3, [r7, #0]
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	2b00      	cmp	r3, #0
 801afde:	d041      	beq.n	801b064 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 801afe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801afe2:	689b      	ldr	r3, [r3, #8]
 801afe4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801afe8:	683b      	ldr	r3, [r7, #0]
 801afea:	6859      	ldr	r1, [r3, #4]
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801aff2:	035b      	lsls	r3, r3, #13
 801aff4:	430b      	orrs	r3, r1
 801aff6:	431a      	orrs	r2, r3
 801aff8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801affa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b004:	d004      	beq.n	801b010 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	4a3b      	ldr	r2, [pc, #236]	; (801b0f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b00c:	4293      	cmp	r3, r2
 801b00e:	d10f      	bne.n	801b030 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 801b010:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801b014:	f7ff fea9 	bl	801ad6a <LL_ADC_IsEnabled>
 801b018:	4604      	mov	r4, r0
 801b01a:	4837      	ldr	r0, [pc, #220]	; (801b0f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b01c:	f7ff fea5 	bl	801ad6a <LL_ADC_IsEnabled>
 801b020:	4603      	mov	r3, r0
 801b022:	4323      	orrs	r3, r4
 801b024:	2b00      	cmp	r3, #0
 801b026:	bf0c      	ite	eq
 801b028:	2301      	moveq	r3, #1
 801b02a:	2300      	movne	r3, #0
 801b02c:	b2db      	uxtb	r3, r3
 801b02e:	e008      	b.n	801b042 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 801b030:	4834      	ldr	r0, [pc, #208]	; (801b104 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801b032:	f7ff fe9a 	bl	801ad6a <LL_ADC_IsEnabled>
 801b036:	4603      	mov	r3, r0
 801b038:	2b00      	cmp	r3, #0
 801b03a:	bf0c      	ite	eq
 801b03c:	2301      	moveq	r3, #1
 801b03e:	2300      	movne	r3, #0
 801b040:	b2db      	uxtb	r3, r3
 801b042:	2b00      	cmp	r3, #0
 801b044:	d04c      	beq.n	801b0e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 801b046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b048:	689b      	ldr	r3, [r3, #8]
 801b04a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801b04e:	f023 030f 	bic.w	r3, r3, #15
 801b052:	683a      	ldr	r2, [r7, #0]
 801b054:	6811      	ldr	r1, [r2, #0]
 801b056:	683a      	ldr	r2, [r7, #0]
 801b058:	6892      	ldr	r2, [r2, #8]
 801b05a:	430a      	orrs	r2, r1
 801b05c:	431a      	orrs	r2, r3
 801b05e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b060:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801b062:	e03d      	b.n	801b0e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 801b064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b066:	689b      	ldr	r3, [r3, #8]
 801b068:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b06c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b06e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	681b      	ldr	r3, [r3, #0]
 801b074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b078:	d004      	beq.n	801b084 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	681b      	ldr	r3, [r3, #0]
 801b07e:	4a1e      	ldr	r2, [pc, #120]	; (801b0f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b080:	4293      	cmp	r3, r2
 801b082:	d10f      	bne.n	801b0a4 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 801b084:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801b088:	f7ff fe6f 	bl	801ad6a <LL_ADC_IsEnabled>
 801b08c:	4604      	mov	r4, r0
 801b08e:	481a      	ldr	r0, [pc, #104]	; (801b0f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b090:	f7ff fe6b 	bl	801ad6a <LL_ADC_IsEnabled>
 801b094:	4603      	mov	r3, r0
 801b096:	4323      	orrs	r3, r4
 801b098:	2b00      	cmp	r3, #0
 801b09a:	bf0c      	ite	eq
 801b09c:	2301      	moveq	r3, #1
 801b09e:	2300      	movne	r3, #0
 801b0a0:	b2db      	uxtb	r3, r3
 801b0a2:	e008      	b.n	801b0b6 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 801b0a4:	4817      	ldr	r0, [pc, #92]	; (801b104 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801b0a6:	f7ff fe60 	bl	801ad6a <LL_ADC_IsEnabled>
 801b0aa:	4603      	mov	r3, r0
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	bf0c      	ite	eq
 801b0b0:	2301      	moveq	r3, #1
 801b0b2:	2300      	movne	r3, #0
 801b0b4:	b2db      	uxtb	r3, r3
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d012      	beq.n	801b0e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 801b0ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b0bc:	689b      	ldr	r3, [r3, #8]
 801b0be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801b0c2:	f023 030f 	bic.w	r3, r3, #15
 801b0c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801b0c8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801b0ca:	e009      	b.n	801b0e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b0d0:	f043 0220 	orr.w	r2, r3, #32
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801b0d8:	2301      	movs	r3, #1
 801b0da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801b0de:	e000      	b.n	801b0e2 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801b0e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	2200      	movs	r2, #0
 801b0e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801b0ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801b0ee:	4618      	mov	r0, r3
 801b0f0:	3784      	adds	r7, #132	; 0x84
 801b0f2:	46bd      	mov	sp, r7
 801b0f4:	bd90      	pop	{r4, r7, pc}
 801b0f6:	bf00      	nop
 801b0f8:	50000100 	.word	0x50000100
 801b0fc:	50000300 	.word	0x50000300
 801b100:	50000700 	.word	0x50000700
 801b104:	50000400 	.word	0x50000400

0801b108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b108:	b480      	push	{r7}
 801b10a:	b085      	sub	sp, #20
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	f003 0307 	and.w	r3, r3, #7
 801b116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801b118:	4b0c      	ldr	r3, [pc, #48]	; (801b14c <__NVIC_SetPriorityGrouping+0x44>)
 801b11a:	68db      	ldr	r3, [r3, #12]
 801b11c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801b11e:	68ba      	ldr	r2, [r7, #8]
 801b120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801b124:	4013      	ands	r3, r2
 801b126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801b128:	68fb      	ldr	r3, [r7, #12]
 801b12a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801b12c:	68bb      	ldr	r3, [r7, #8]
 801b12e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801b130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801b134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801b13a:	4a04      	ldr	r2, [pc, #16]	; (801b14c <__NVIC_SetPriorityGrouping+0x44>)
 801b13c:	68bb      	ldr	r3, [r7, #8]
 801b13e:	60d3      	str	r3, [r2, #12]
}
 801b140:	bf00      	nop
 801b142:	3714      	adds	r7, #20
 801b144:	46bd      	mov	sp, r7
 801b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b14a:	4770      	bx	lr
 801b14c:	e000ed00 	.word	0xe000ed00

0801b150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801b150:	b480      	push	{r7}
 801b152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801b154:	4b04      	ldr	r3, [pc, #16]	; (801b168 <__NVIC_GetPriorityGrouping+0x18>)
 801b156:	68db      	ldr	r3, [r3, #12]
 801b158:	0a1b      	lsrs	r3, r3, #8
 801b15a:	f003 0307 	and.w	r3, r3, #7
}
 801b15e:	4618      	mov	r0, r3
 801b160:	46bd      	mov	sp, r7
 801b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b166:	4770      	bx	lr
 801b168:	e000ed00 	.word	0xe000ed00

0801b16c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b16c:	b480      	push	{r7}
 801b16e:	b083      	sub	sp, #12
 801b170:	af00      	add	r7, sp, #0
 801b172:	4603      	mov	r3, r0
 801b174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	db0b      	blt.n	801b196 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b17e:	79fb      	ldrb	r3, [r7, #7]
 801b180:	f003 021f 	and.w	r2, r3, #31
 801b184:	4907      	ldr	r1, [pc, #28]	; (801b1a4 <__NVIC_EnableIRQ+0x38>)
 801b186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b18a:	095b      	lsrs	r3, r3, #5
 801b18c:	2001      	movs	r0, #1
 801b18e:	fa00 f202 	lsl.w	r2, r0, r2
 801b192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801b196:	bf00      	nop
 801b198:	370c      	adds	r7, #12
 801b19a:	46bd      	mov	sp, r7
 801b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1a0:	4770      	bx	lr
 801b1a2:	bf00      	nop
 801b1a4:	e000e100 	.word	0xe000e100

0801b1a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801b1a8:	b480      	push	{r7}
 801b1aa:	b083      	sub	sp, #12
 801b1ac:	af00      	add	r7, sp, #0
 801b1ae:	4603      	mov	r3, r0
 801b1b0:	6039      	str	r1, [r7, #0]
 801b1b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b1b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	db0a      	blt.n	801b1d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b1bc:	683b      	ldr	r3, [r7, #0]
 801b1be:	b2da      	uxtb	r2, r3
 801b1c0:	490c      	ldr	r1, [pc, #48]	; (801b1f4 <__NVIC_SetPriority+0x4c>)
 801b1c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b1c6:	0112      	lsls	r2, r2, #4
 801b1c8:	b2d2      	uxtb	r2, r2
 801b1ca:	440b      	add	r3, r1
 801b1cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801b1d0:	e00a      	b.n	801b1e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b1d2:	683b      	ldr	r3, [r7, #0]
 801b1d4:	b2da      	uxtb	r2, r3
 801b1d6:	4908      	ldr	r1, [pc, #32]	; (801b1f8 <__NVIC_SetPriority+0x50>)
 801b1d8:	79fb      	ldrb	r3, [r7, #7]
 801b1da:	f003 030f 	and.w	r3, r3, #15
 801b1de:	3b04      	subs	r3, #4
 801b1e0:	0112      	lsls	r2, r2, #4
 801b1e2:	b2d2      	uxtb	r2, r2
 801b1e4:	440b      	add	r3, r1
 801b1e6:	761a      	strb	r2, [r3, #24]
}
 801b1e8:	bf00      	nop
 801b1ea:	370c      	adds	r7, #12
 801b1ec:	46bd      	mov	sp, r7
 801b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1f2:	4770      	bx	lr
 801b1f4:	e000e100 	.word	0xe000e100
 801b1f8:	e000ed00 	.word	0xe000ed00

0801b1fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b1fc:	b480      	push	{r7}
 801b1fe:	b089      	sub	sp, #36	; 0x24
 801b200:	af00      	add	r7, sp, #0
 801b202:	60f8      	str	r0, [r7, #12]
 801b204:	60b9      	str	r1, [r7, #8]
 801b206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801b208:	68fb      	ldr	r3, [r7, #12]
 801b20a:	f003 0307 	and.w	r3, r3, #7
 801b20e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801b210:	69fb      	ldr	r3, [r7, #28]
 801b212:	f1c3 0307 	rsb	r3, r3, #7
 801b216:	2b04      	cmp	r3, #4
 801b218:	bf28      	it	cs
 801b21a:	2304      	movcs	r3, #4
 801b21c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801b21e:	69fb      	ldr	r3, [r7, #28]
 801b220:	3304      	adds	r3, #4
 801b222:	2b06      	cmp	r3, #6
 801b224:	d902      	bls.n	801b22c <NVIC_EncodePriority+0x30>
 801b226:	69fb      	ldr	r3, [r7, #28]
 801b228:	3b03      	subs	r3, #3
 801b22a:	e000      	b.n	801b22e <NVIC_EncodePriority+0x32>
 801b22c:	2300      	movs	r3, #0
 801b22e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b230:	f04f 32ff 	mov.w	r2, #4294967295
 801b234:	69bb      	ldr	r3, [r7, #24]
 801b236:	fa02 f303 	lsl.w	r3, r2, r3
 801b23a:	43da      	mvns	r2, r3
 801b23c:	68bb      	ldr	r3, [r7, #8]
 801b23e:	401a      	ands	r2, r3
 801b240:	697b      	ldr	r3, [r7, #20]
 801b242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801b244:	f04f 31ff 	mov.w	r1, #4294967295
 801b248:	697b      	ldr	r3, [r7, #20]
 801b24a:	fa01 f303 	lsl.w	r3, r1, r3
 801b24e:	43d9      	mvns	r1, r3
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b254:	4313      	orrs	r3, r2
         );
}
 801b256:	4618      	mov	r0, r3
 801b258:	3724      	adds	r7, #36	; 0x24
 801b25a:	46bd      	mov	sp, r7
 801b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b260:	4770      	bx	lr
	...

0801b264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801b264:	b580      	push	{r7, lr}
 801b266:	b082      	sub	sp, #8
 801b268:	af00      	add	r7, sp, #0
 801b26a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	3b01      	subs	r3, #1
 801b270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801b274:	d301      	bcc.n	801b27a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801b276:	2301      	movs	r3, #1
 801b278:	e00f      	b.n	801b29a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801b27a:	4a0a      	ldr	r2, [pc, #40]	; (801b2a4 <SysTick_Config+0x40>)
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	3b01      	subs	r3, #1
 801b280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801b282:	210f      	movs	r1, #15
 801b284:	f04f 30ff 	mov.w	r0, #4294967295
 801b288:	f7ff ff8e 	bl	801b1a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801b28c:	4b05      	ldr	r3, [pc, #20]	; (801b2a4 <SysTick_Config+0x40>)
 801b28e:	2200      	movs	r2, #0
 801b290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801b292:	4b04      	ldr	r3, [pc, #16]	; (801b2a4 <SysTick_Config+0x40>)
 801b294:	2207      	movs	r2, #7
 801b296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801b298:	2300      	movs	r3, #0
}
 801b29a:	4618      	mov	r0, r3
 801b29c:	3708      	adds	r7, #8
 801b29e:	46bd      	mov	sp, r7
 801b2a0:	bd80      	pop	{r7, pc}
 801b2a2:	bf00      	nop
 801b2a4:	e000e010 	.word	0xe000e010

0801b2a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b2a8:	b580      	push	{r7, lr}
 801b2aa:	b082      	sub	sp, #8
 801b2ac:	af00      	add	r7, sp, #0
 801b2ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801b2b0:	6878      	ldr	r0, [r7, #4]
 801b2b2:	f7ff ff29 	bl	801b108 <__NVIC_SetPriorityGrouping>
}
 801b2b6:	bf00      	nop
 801b2b8:	3708      	adds	r7, #8
 801b2ba:	46bd      	mov	sp, r7
 801b2bc:	bd80      	pop	{r7, pc}

0801b2be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b2be:	b580      	push	{r7, lr}
 801b2c0:	b086      	sub	sp, #24
 801b2c2:	af00      	add	r7, sp, #0
 801b2c4:	4603      	mov	r3, r0
 801b2c6:	60b9      	str	r1, [r7, #8]
 801b2c8:	607a      	str	r2, [r7, #4]
 801b2ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801b2cc:	f7ff ff40 	bl	801b150 <__NVIC_GetPriorityGrouping>
 801b2d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801b2d2:	687a      	ldr	r2, [r7, #4]
 801b2d4:	68b9      	ldr	r1, [r7, #8]
 801b2d6:	6978      	ldr	r0, [r7, #20]
 801b2d8:	f7ff ff90 	bl	801b1fc <NVIC_EncodePriority>
 801b2dc:	4602      	mov	r2, r0
 801b2de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b2e2:	4611      	mov	r1, r2
 801b2e4:	4618      	mov	r0, r3
 801b2e6:	f7ff ff5f 	bl	801b1a8 <__NVIC_SetPriority>
}
 801b2ea:	bf00      	nop
 801b2ec:	3718      	adds	r7, #24
 801b2ee:	46bd      	mov	sp, r7
 801b2f0:	bd80      	pop	{r7, pc}

0801b2f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b2f2:	b580      	push	{r7, lr}
 801b2f4:	b082      	sub	sp, #8
 801b2f6:	af00      	add	r7, sp, #0
 801b2f8:	4603      	mov	r3, r0
 801b2fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801b2fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b300:	4618      	mov	r0, r3
 801b302:	f7ff ff33 	bl	801b16c <__NVIC_EnableIRQ>
}
 801b306:	bf00      	nop
 801b308:	3708      	adds	r7, #8
 801b30a:	46bd      	mov	sp, r7
 801b30c:	bd80      	pop	{r7, pc}

0801b30e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801b30e:	b580      	push	{r7, lr}
 801b310:	b082      	sub	sp, #8
 801b312:	af00      	add	r7, sp, #0
 801b314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801b316:	6878      	ldr	r0, [r7, #4]
 801b318:	f7ff ffa4 	bl	801b264 <SysTick_Config>
 801b31c:	4603      	mov	r3, r0
}
 801b31e:	4618      	mov	r0, r3
 801b320:	3708      	adds	r7, #8
 801b322:	46bd      	mov	sp, r7
 801b324:	bd80      	pop	{r7, pc}
	...

0801b328 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801b328:	b580      	push	{r7, lr}
 801b32a:	b084      	sub	sp, #16
 801b32c:	af00      	add	r7, sp, #0
 801b32e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	2b00      	cmp	r3, #0
 801b334:	d101      	bne.n	801b33a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801b336:	2301      	movs	r3, #1
 801b338:	e08d      	b.n	801b456 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	681b      	ldr	r3, [r3, #0]
 801b33e:	461a      	mov	r2, r3
 801b340:	4b47      	ldr	r3, [pc, #284]	; (801b460 <HAL_DMA_Init+0x138>)
 801b342:	429a      	cmp	r2, r3
 801b344:	d80f      	bhi.n	801b366 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	681b      	ldr	r3, [r3, #0]
 801b34a:	461a      	mov	r2, r3
 801b34c:	4b45      	ldr	r3, [pc, #276]	; (801b464 <HAL_DMA_Init+0x13c>)
 801b34e:	4413      	add	r3, r2
 801b350:	4a45      	ldr	r2, [pc, #276]	; (801b468 <HAL_DMA_Init+0x140>)
 801b352:	fba2 2303 	umull	r2, r3, r2, r3
 801b356:	091b      	lsrs	r3, r3, #4
 801b358:	009a      	lsls	r2, r3, #2
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	4a42      	ldr	r2, [pc, #264]	; (801b46c <HAL_DMA_Init+0x144>)
 801b362:	641a      	str	r2, [r3, #64]	; 0x40
 801b364:	e00e      	b.n	801b384 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	681b      	ldr	r3, [r3, #0]
 801b36a:	461a      	mov	r2, r3
 801b36c:	4b40      	ldr	r3, [pc, #256]	; (801b470 <HAL_DMA_Init+0x148>)
 801b36e:	4413      	add	r3, r2
 801b370:	4a3d      	ldr	r2, [pc, #244]	; (801b468 <HAL_DMA_Init+0x140>)
 801b372:	fba2 2303 	umull	r2, r3, r2, r3
 801b376:	091b      	lsrs	r3, r3, #4
 801b378:	009a      	lsls	r2, r3, #2
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	4a3c      	ldr	r2, [pc, #240]	; (801b474 <HAL_DMA_Init+0x14c>)
 801b382:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	2202      	movs	r2, #2
 801b388:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	681b      	ldr	r3, [r3, #0]
 801b392:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801b394:	68fb      	ldr	r3, [r7, #12]
 801b396:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801b39a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b39e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801b3a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	691b      	ldr	r3, [r3, #16]
 801b3ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b3b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	699b      	ldr	r3, [r3, #24]
 801b3ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b3c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	6a1b      	ldr	r3, [r3, #32]
 801b3c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801b3c8:	68fa      	ldr	r2, [r7, #12]
 801b3ca:	4313      	orrs	r3, r2
 801b3cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	681b      	ldr	r3, [r3, #0]
 801b3d2:	68fa      	ldr	r2, [r7, #12]
 801b3d4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801b3d6:	6878      	ldr	r0, [r7, #4]
 801b3d8:	f000 fa10 	bl	801b7fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	689b      	ldr	r3, [r3, #8]
 801b3e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b3e4:	d102      	bne.n	801b3ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	2200      	movs	r2, #0
 801b3ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	685a      	ldr	r2, [r3, #4]
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b3f4:	b2d2      	uxtb	r2, r2
 801b3f6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b3fc:	687a      	ldr	r2, [r7, #4]
 801b3fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b400:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	685b      	ldr	r3, [r3, #4]
 801b406:	2b00      	cmp	r3, #0
 801b408:	d010      	beq.n	801b42c <HAL_DMA_Init+0x104>
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	685b      	ldr	r3, [r3, #4]
 801b40e:	2b04      	cmp	r3, #4
 801b410:	d80c      	bhi.n	801b42c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801b412:	6878      	ldr	r0, [r7, #4]
 801b414:	f000 fa30 	bl	801b878 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b41c:	2200      	movs	r2, #0
 801b41e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b424:	687a      	ldr	r2, [r7, #4]
 801b426:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b428:	605a      	str	r2, [r3, #4]
 801b42a:	e008      	b.n	801b43e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	2200      	movs	r2, #0
 801b430:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	2200      	movs	r2, #0
 801b436:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	2200      	movs	r2, #0
 801b43c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	2200      	movs	r2, #0
 801b442:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	2201      	movs	r2, #1
 801b448:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	2200      	movs	r2, #0
 801b450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801b454:	2300      	movs	r3, #0
}
 801b456:	4618      	mov	r0, r3
 801b458:	3710      	adds	r7, #16
 801b45a:	46bd      	mov	sp, r7
 801b45c:	bd80      	pop	{r7, pc}
 801b45e:	bf00      	nop
 801b460:	40020407 	.word	0x40020407
 801b464:	bffdfff8 	.word	0xbffdfff8
 801b468:	cccccccd 	.word	0xcccccccd
 801b46c:	40020000 	.word	0x40020000
 801b470:	bffdfbf8 	.word	0xbffdfbf8
 801b474:	40020400 	.word	0x40020400

0801b478 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 801b478:	b580      	push	{r7, lr}
 801b47a:	b086      	sub	sp, #24
 801b47c:	af00      	add	r7, sp, #0
 801b47e:	60f8      	str	r0, [r7, #12]
 801b480:	60b9      	str	r1, [r7, #8]
 801b482:	607a      	str	r2, [r7, #4]
 801b484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801b486:	2300      	movs	r3, #0
 801b488:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801b48a:	68fb      	ldr	r3, [r7, #12]
 801b48c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b490:	2b01      	cmp	r3, #1
 801b492:	d101      	bne.n	801b498 <HAL_DMA_Start_IT+0x20>
 801b494:	2302      	movs	r3, #2
 801b496:	e066      	b.n	801b566 <HAL_DMA_Start_IT+0xee>
 801b498:	68fb      	ldr	r3, [r7, #12]
 801b49a:	2201      	movs	r2, #1
 801b49c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 801b4a0:	68fb      	ldr	r3, [r7, #12]
 801b4a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b4a6:	b2db      	uxtb	r3, r3
 801b4a8:	2b01      	cmp	r3, #1
 801b4aa:	d155      	bne.n	801b558 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801b4ac:	68fb      	ldr	r3, [r7, #12]
 801b4ae:	2202      	movs	r2, #2
 801b4b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b4b4:	68fb      	ldr	r3, [r7, #12]
 801b4b6:	2200      	movs	r2, #0
 801b4b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801b4ba:	68fb      	ldr	r3, [r7, #12]
 801b4bc:	681b      	ldr	r3, [r3, #0]
 801b4be:	681a      	ldr	r2, [r3, #0]
 801b4c0:	68fb      	ldr	r3, [r7, #12]
 801b4c2:	681b      	ldr	r3, [r3, #0]
 801b4c4:	f022 0201 	bic.w	r2, r2, #1
 801b4c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801b4ca:	683b      	ldr	r3, [r7, #0]
 801b4cc:	687a      	ldr	r2, [r7, #4]
 801b4ce:	68b9      	ldr	r1, [r7, #8]
 801b4d0:	68f8      	ldr	r0, [r7, #12]
 801b4d2:	f000 f954 	bl	801b77e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 801b4d6:	68fb      	ldr	r3, [r7, #12]
 801b4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	d008      	beq.n	801b4f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b4de:	68fb      	ldr	r3, [r7, #12]
 801b4e0:	681b      	ldr	r3, [r3, #0]
 801b4e2:	681a      	ldr	r2, [r3, #0]
 801b4e4:	68fb      	ldr	r3, [r7, #12]
 801b4e6:	681b      	ldr	r3, [r3, #0]
 801b4e8:	f042 020e 	orr.w	r2, r2, #14
 801b4ec:	601a      	str	r2, [r3, #0]
 801b4ee:	e00f      	b.n	801b510 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801b4f0:	68fb      	ldr	r3, [r7, #12]
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	681a      	ldr	r2, [r3, #0]
 801b4f6:	68fb      	ldr	r3, [r7, #12]
 801b4f8:	681b      	ldr	r3, [r3, #0]
 801b4fa:	f022 0204 	bic.w	r2, r2, #4
 801b4fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801b500:	68fb      	ldr	r3, [r7, #12]
 801b502:	681b      	ldr	r3, [r3, #0]
 801b504:	681a      	ldr	r2, [r3, #0]
 801b506:	68fb      	ldr	r3, [r7, #12]
 801b508:	681b      	ldr	r3, [r3, #0]
 801b50a:	f042 020a 	orr.w	r2, r2, #10
 801b50e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	d007      	beq.n	801b52e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801b51e:	68fb      	ldr	r3, [r7, #12]
 801b520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b522:	681a      	ldr	r2, [r3, #0]
 801b524:	68fb      	ldr	r3, [r7, #12]
 801b526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b52c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 801b52e:	68fb      	ldr	r3, [r7, #12]
 801b530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b532:	2b00      	cmp	r3, #0
 801b534:	d007      	beq.n	801b546 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801b536:	68fb      	ldr	r3, [r7, #12]
 801b538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b53a:	681a      	ldr	r2, [r3, #0]
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b544:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801b546:	68fb      	ldr	r3, [r7, #12]
 801b548:	681b      	ldr	r3, [r3, #0]
 801b54a:	681a      	ldr	r2, [r3, #0]
 801b54c:	68fb      	ldr	r3, [r7, #12]
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	f042 0201 	orr.w	r2, r2, #1
 801b554:	601a      	str	r2, [r3, #0]
 801b556:	e005      	b.n	801b564 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b558:	68fb      	ldr	r3, [r7, #12]
 801b55a:	2200      	movs	r2, #0
 801b55c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801b560:	2302      	movs	r3, #2
 801b562:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801b564:	7dfb      	ldrb	r3, [r7, #23]
}
 801b566:	4618      	mov	r0, r3
 801b568:	3718      	adds	r7, #24
 801b56a:	46bd      	mov	sp, r7
 801b56c:	bd80      	pop	{r7, pc}

0801b56e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801b56e:	b480      	push	{r7}
 801b570:	b085      	sub	sp, #20
 801b572:	af00      	add	r7, sp, #0
 801b574:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b576:	2300      	movs	r3, #0
 801b578:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b580:	b2db      	uxtb	r3, r3
 801b582:	2b02      	cmp	r3, #2
 801b584:	d005      	beq.n	801b592 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	2204      	movs	r2, #4
 801b58a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 801b58c:	2301      	movs	r3, #1
 801b58e:	73fb      	strb	r3, [r7, #15]
 801b590:	e037      	b.n	801b602 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b592:	687b      	ldr	r3, [r7, #4]
 801b594:	681b      	ldr	r3, [r3, #0]
 801b596:	681a      	ldr	r2, [r3, #0]
 801b598:	687b      	ldr	r3, [r7, #4]
 801b59a:	681b      	ldr	r3, [r3, #0]
 801b59c:	f022 020e 	bic.w	r2, r2, #14
 801b5a0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801b5a2:	687b      	ldr	r3, [r7, #4]
 801b5a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b5a6:	681a      	ldr	r2, [r3, #0]
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b5ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801b5b0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	681b      	ldr	r3, [r3, #0]
 801b5b6:	681a      	ldr	r2, [r3, #0]
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	681b      	ldr	r3, [r3, #0]
 801b5bc:	f022 0201 	bic.w	r2, r2, #1
 801b5c0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b5c6:	f003 021f 	and.w	r2, r3, #31
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b5ce:	2101      	movs	r1, #1
 801b5d0:	fa01 f202 	lsl.w	r2, r1, r2
 801b5d4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b5da:	687a      	ldr	r2, [r7, #4]
 801b5dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b5de:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d00c      	beq.n	801b602 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b5ec:	681a      	ldr	r2, [r3, #0]
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b5f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801b5f6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b5fc:	687a      	ldr	r2, [r7, #4]
 801b5fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b600:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	2201      	movs	r2, #1
 801b606:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 801b60a:	687b      	ldr	r3, [r7, #4]
 801b60c:	2200      	movs	r2, #0
 801b60e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 801b612:	7bfb      	ldrb	r3, [r7, #15]
}
 801b614:	4618      	mov	r0, r3
 801b616:	3714      	adds	r7, #20
 801b618:	46bd      	mov	sp, r7
 801b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b61e:	4770      	bx	lr

0801b620 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801b620:	b580      	push	{r7, lr}
 801b622:	b084      	sub	sp, #16
 801b624:	af00      	add	r7, sp, #0
 801b626:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b62c:	681b      	ldr	r3, [r3, #0]
 801b62e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	681b      	ldr	r3, [r3, #0]
 801b634:	681b      	ldr	r3, [r3, #0]
 801b636:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 801b638:	687b      	ldr	r3, [r7, #4]
 801b63a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b63c:	f003 031f 	and.w	r3, r3, #31
 801b640:	2204      	movs	r2, #4
 801b642:	409a      	lsls	r2, r3
 801b644:	68fb      	ldr	r3, [r7, #12]
 801b646:	4013      	ands	r3, r2
 801b648:	2b00      	cmp	r3, #0
 801b64a:	d026      	beq.n	801b69a <HAL_DMA_IRQHandler+0x7a>
 801b64c:	68bb      	ldr	r3, [r7, #8]
 801b64e:	f003 0304 	and.w	r3, r3, #4
 801b652:	2b00      	cmp	r3, #0
 801b654:	d021      	beq.n	801b69a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	681b      	ldr	r3, [r3, #0]
 801b65a:	681b      	ldr	r3, [r3, #0]
 801b65c:	f003 0320 	and.w	r3, r3, #32
 801b660:	2b00      	cmp	r3, #0
 801b662:	d107      	bne.n	801b674 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	681b      	ldr	r3, [r3, #0]
 801b668:	681a      	ldr	r2, [r3, #0]
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	681b      	ldr	r3, [r3, #0]
 801b66e:	f022 0204 	bic.w	r2, r2, #4
 801b672:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b678:	f003 021f 	and.w	r2, r3, #31
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b680:	2104      	movs	r1, #4
 801b682:	fa01 f202 	lsl.w	r2, r1, r2
 801b686:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	d071      	beq.n	801b774 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b694:	6878      	ldr	r0, [r7, #4]
 801b696:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801b698:	e06c      	b.n	801b774 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b69e:	f003 031f 	and.w	r3, r3, #31
 801b6a2:	2202      	movs	r2, #2
 801b6a4:	409a      	lsls	r2, r3
 801b6a6:	68fb      	ldr	r3, [r7, #12]
 801b6a8:	4013      	ands	r3, r2
 801b6aa:	2b00      	cmp	r3, #0
 801b6ac:	d02e      	beq.n	801b70c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 801b6ae:	68bb      	ldr	r3, [r7, #8]
 801b6b0:	f003 0302 	and.w	r3, r3, #2
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d029      	beq.n	801b70c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	681b      	ldr	r3, [r3, #0]
 801b6bc:	681b      	ldr	r3, [r3, #0]
 801b6be:	f003 0320 	and.w	r3, r3, #32
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	d10b      	bne.n	801b6de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	681b      	ldr	r3, [r3, #0]
 801b6ca:	681a      	ldr	r2, [r3, #0]
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	681b      	ldr	r3, [r3, #0]
 801b6d0:	f022 020a 	bic.w	r2, r2, #10
 801b6d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	2201      	movs	r2, #1
 801b6da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b6e2:	f003 021f 	and.w	r2, r3, #31
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b6ea:	2102      	movs	r1, #2
 801b6ec:	fa01 f202 	lsl.w	r2, r1, r2
 801b6f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	2200      	movs	r2, #0
 801b6f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	d038      	beq.n	801b774 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b706:	6878      	ldr	r0, [r7, #4]
 801b708:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801b70a:	e033      	b.n	801b774 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b710:	f003 031f 	and.w	r3, r3, #31
 801b714:	2208      	movs	r2, #8
 801b716:	409a      	lsls	r2, r3
 801b718:	68fb      	ldr	r3, [r7, #12]
 801b71a:	4013      	ands	r3, r2
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d02a      	beq.n	801b776 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 801b720:	68bb      	ldr	r3, [r7, #8]
 801b722:	f003 0308 	and.w	r3, r3, #8
 801b726:	2b00      	cmp	r3, #0
 801b728:	d025      	beq.n	801b776 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	681a      	ldr	r2, [r3, #0]
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	681b      	ldr	r3, [r3, #0]
 801b734:	f022 020e 	bic.w	r2, r2, #14
 801b738:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b73e:	f003 021f 	and.w	r2, r3, #31
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b746:	2101      	movs	r1, #1
 801b748:	fa01 f202 	lsl.w	r2, r1, r2
 801b74c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	2201      	movs	r2, #1
 801b752:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	2201      	movs	r2, #1
 801b758:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b75c:	687b      	ldr	r3, [r7, #4]
 801b75e:	2200      	movs	r2, #0
 801b760:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d004      	beq.n	801b776 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b770:	6878      	ldr	r0, [r7, #4]
 801b772:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801b774:	bf00      	nop
 801b776:	bf00      	nop
}
 801b778:	3710      	adds	r7, #16
 801b77a:	46bd      	mov	sp, r7
 801b77c:	bd80      	pop	{r7, pc}

0801b77e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801b77e:	b480      	push	{r7}
 801b780:	b085      	sub	sp, #20
 801b782:	af00      	add	r7, sp, #0
 801b784:	60f8      	str	r0, [r7, #12]
 801b786:	60b9      	str	r1, [r7, #8]
 801b788:	607a      	str	r2, [r7, #4]
 801b78a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b78c:	68fb      	ldr	r3, [r7, #12]
 801b78e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b790:	68fa      	ldr	r2, [r7, #12]
 801b792:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b794:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801b796:	68fb      	ldr	r3, [r7, #12]
 801b798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b79a:	2b00      	cmp	r3, #0
 801b79c:	d004      	beq.n	801b7a8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b79e:	68fb      	ldr	r3, [r7, #12]
 801b7a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b7a2:	68fa      	ldr	r2, [r7, #12]
 801b7a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b7a6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b7a8:	68fb      	ldr	r3, [r7, #12]
 801b7aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b7ac:	f003 021f 	and.w	r2, r3, #31
 801b7b0:	68fb      	ldr	r3, [r7, #12]
 801b7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7b4:	2101      	movs	r1, #1
 801b7b6:	fa01 f202 	lsl.w	r2, r1, r2
 801b7ba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	683a      	ldr	r2, [r7, #0]
 801b7c2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801b7c4:	68fb      	ldr	r3, [r7, #12]
 801b7c6:	689b      	ldr	r3, [r3, #8]
 801b7c8:	2b10      	cmp	r3, #16
 801b7ca:	d108      	bne.n	801b7de <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801b7cc:	68fb      	ldr	r3, [r7, #12]
 801b7ce:	681b      	ldr	r3, [r3, #0]
 801b7d0:	687a      	ldr	r2, [r7, #4]
 801b7d2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801b7d4:	68fb      	ldr	r3, [r7, #12]
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	68ba      	ldr	r2, [r7, #8]
 801b7da:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801b7dc:	e007      	b.n	801b7ee <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 801b7de:	68fb      	ldr	r3, [r7, #12]
 801b7e0:	681b      	ldr	r3, [r3, #0]
 801b7e2:	68ba      	ldr	r2, [r7, #8]
 801b7e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801b7e6:	68fb      	ldr	r3, [r7, #12]
 801b7e8:	681b      	ldr	r3, [r3, #0]
 801b7ea:	687a      	ldr	r2, [r7, #4]
 801b7ec:	60da      	str	r2, [r3, #12]
}
 801b7ee:	bf00      	nop
 801b7f0:	3714      	adds	r7, #20
 801b7f2:	46bd      	mov	sp, r7
 801b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7f8:	4770      	bx	lr
	...

0801b7fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b7fc:	b480      	push	{r7}
 801b7fe:	b087      	sub	sp, #28
 801b800:	af00      	add	r7, sp, #0
 801b802:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	681b      	ldr	r3, [r3, #0]
 801b808:	461a      	mov	r2, r3
 801b80a:	4b16      	ldr	r3, [pc, #88]	; (801b864 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 801b80c:	429a      	cmp	r2, r3
 801b80e:	d802      	bhi.n	801b816 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 801b810:	4b15      	ldr	r3, [pc, #84]	; (801b868 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801b812:	617b      	str	r3, [r7, #20]
 801b814:	e001      	b.n	801b81a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 801b816:	4b15      	ldr	r3, [pc, #84]	; (801b86c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 801b818:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 801b81a:	697b      	ldr	r3, [r7, #20]
 801b81c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	681b      	ldr	r3, [r3, #0]
 801b822:	b2db      	uxtb	r3, r3
 801b824:	3b08      	subs	r3, #8
 801b826:	4a12      	ldr	r2, [pc, #72]	; (801b870 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 801b828:	fba2 2303 	umull	r2, r3, r2, r3
 801b82c:	091b      	lsrs	r3, r3, #4
 801b82e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b834:	089b      	lsrs	r3, r3, #2
 801b836:	009a      	lsls	r2, r3, #2
 801b838:	693b      	ldr	r3, [r7, #16]
 801b83a:	4413      	add	r3, r2
 801b83c:	461a      	mov	r2, r3
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	4a0b      	ldr	r2, [pc, #44]	; (801b874 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 801b846:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801b848:	68fb      	ldr	r3, [r7, #12]
 801b84a:	f003 031f 	and.w	r3, r3, #31
 801b84e:	2201      	movs	r2, #1
 801b850:	409a      	lsls	r2, r3
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	651a      	str	r2, [r3, #80]	; 0x50
}
 801b856:	bf00      	nop
 801b858:	371c      	adds	r7, #28
 801b85a:	46bd      	mov	sp, r7
 801b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b860:	4770      	bx	lr
 801b862:	bf00      	nop
 801b864:	40020407 	.word	0x40020407
 801b868:	40020800 	.word	0x40020800
 801b86c:	40020820 	.word	0x40020820
 801b870:	cccccccd 	.word	0xcccccccd
 801b874:	40020880 	.word	0x40020880

0801b878 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b878:	b480      	push	{r7}
 801b87a:	b085      	sub	sp, #20
 801b87c:	af00      	add	r7, sp, #0
 801b87e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	685b      	ldr	r3, [r3, #4]
 801b884:	b2db      	uxtb	r3, r3
 801b886:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801b888:	68fa      	ldr	r2, [r7, #12]
 801b88a:	4b0b      	ldr	r3, [pc, #44]	; (801b8b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 801b88c:	4413      	add	r3, r2
 801b88e:	009b      	lsls	r3, r3, #2
 801b890:	461a      	mov	r2, r3
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	4a08      	ldr	r2, [pc, #32]	; (801b8bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801b89a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 801b89c:	68fb      	ldr	r3, [r7, #12]
 801b89e:	3b01      	subs	r3, #1
 801b8a0:	f003 031f 	and.w	r3, r3, #31
 801b8a4:	2201      	movs	r2, #1
 801b8a6:	409a      	lsls	r2, r3
 801b8a8:	687b      	ldr	r3, [r7, #4]
 801b8aa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801b8ac:	bf00      	nop
 801b8ae:	3714      	adds	r7, #20
 801b8b0:	46bd      	mov	sp, r7
 801b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8b6:	4770      	bx	lr
 801b8b8:	1000823f 	.word	0x1000823f
 801b8bc:	40020940 	.word	0x40020940

0801b8c0 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801b8c0:	b580      	push	{r7, lr}
 801b8c2:	b086      	sub	sp, #24
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	60f8      	str	r0, [r7, #12]
 801b8c8:	60b9      	str	r1, [r7, #8]
 801b8ca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 801b8ce:	2300      	movs	r3, #0
 801b8d0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801b8d2:	4b24      	ldr	r3, [pc, #144]	; (801b964 <HAL_FLASH_Program+0xa4>)
 801b8d4:	781b      	ldrb	r3, [r3, #0]
 801b8d6:	2b01      	cmp	r3, #1
 801b8d8:	d101      	bne.n	801b8de <HAL_FLASH_Program+0x1e>
 801b8da:	2302      	movs	r3, #2
 801b8dc:	e03e      	b.n	801b95c <HAL_FLASH_Program+0x9c>
 801b8de:	4b21      	ldr	r3, [pc, #132]	; (801b964 <HAL_FLASH_Program+0xa4>)
 801b8e0:	2201      	movs	r2, #1
 801b8e2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b8e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b8e8:	f000 f87c 	bl	801b9e4 <FLASH_WaitForLastOperation>
 801b8ec:	4603      	mov	r3, r0
 801b8ee:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 801b8f0:	7dfb      	ldrb	r3, [r7, #23]
 801b8f2:	2b00      	cmp	r3, #0
 801b8f4:	d12e      	bne.n	801b954 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801b8f6:	4b1b      	ldr	r3, [pc, #108]	; (801b964 <HAL_FLASH_Program+0xa4>)
 801b8f8:	2200      	movs	r2, #0
 801b8fa:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 801b8fc:	68fb      	ldr	r3, [r7, #12]
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	d107      	bne.n	801b912 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801b902:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b906:	68b8      	ldr	r0, [r7, #8]
 801b908:	f000 f8c0 	bl	801ba8c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 801b90c:	2301      	movs	r3, #1
 801b90e:	613b      	str	r3, [r7, #16]
 801b910:	e010      	b.n	801b934 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801b912:	68fb      	ldr	r3, [r7, #12]
 801b914:	2b01      	cmp	r3, #1
 801b916:	d002      	beq.n	801b91e <HAL_FLASH_Program+0x5e>
 801b918:	68fb      	ldr	r3, [r7, #12]
 801b91a:	2b02      	cmp	r3, #2
 801b91c:	d10a      	bne.n	801b934 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801b91e:	683b      	ldr	r3, [r7, #0]
 801b920:	4619      	mov	r1, r3
 801b922:	68b8      	ldr	r0, [r7, #8]
 801b924:	f000 f8d8 	bl	801bad8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 801b928:	68fb      	ldr	r3, [r7, #12]
 801b92a:	2b02      	cmp	r3, #2
 801b92c:	d102      	bne.n	801b934 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 801b92e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801b932:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b934:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b938:	f000 f854 	bl	801b9e4 <FLASH_WaitForLastOperation>
 801b93c:	4603      	mov	r3, r0
 801b93e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801b940:	693b      	ldr	r3, [r7, #16]
 801b942:	2b00      	cmp	r3, #0
 801b944:	d006      	beq.n	801b954 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 801b946:	4b08      	ldr	r3, [pc, #32]	; (801b968 <HAL_FLASH_Program+0xa8>)
 801b948:	695a      	ldr	r2, [r3, #20]
 801b94a:	693b      	ldr	r3, [r7, #16]
 801b94c:	43db      	mvns	r3, r3
 801b94e:	4906      	ldr	r1, [pc, #24]	; (801b968 <HAL_FLASH_Program+0xa8>)
 801b950:	4013      	ands	r3, r2
 801b952:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801b954:	4b03      	ldr	r3, [pc, #12]	; (801b964 <HAL_FLASH_Program+0xa4>)
 801b956:	2200      	movs	r2, #0
 801b958:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 801b95a:	7dfb      	ldrb	r3, [r7, #23]
}
 801b95c:	4618      	mov	r0, r3
 801b95e:	3718      	adds	r7, #24
 801b960:	46bd      	mov	sp, r7
 801b962:	bd80      	pop	{r7, pc}
 801b964:	2000000c 	.word	0x2000000c
 801b968:	40022000 	.word	0x40022000

0801b96c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801b96c:	b480      	push	{r7}
 801b96e:	b083      	sub	sp, #12
 801b970:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801b972:	2300      	movs	r3, #0
 801b974:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b976:	4b0b      	ldr	r3, [pc, #44]	; (801b9a4 <HAL_FLASH_Unlock+0x38>)
 801b978:	695b      	ldr	r3, [r3, #20]
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	da0b      	bge.n	801b996 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801b97e:	4b09      	ldr	r3, [pc, #36]	; (801b9a4 <HAL_FLASH_Unlock+0x38>)
 801b980:	4a09      	ldr	r2, [pc, #36]	; (801b9a8 <HAL_FLASH_Unlock+0x3c>)
 801b982:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801b984:	4b07      	ldr	r3, [pc, #28]	; (801b9a4 <HAL_FLASH_Unlock+0x38>)
 801b986:	4a09      	ldr	r2, [pc, #36]	; (801b9ac <HAL_FLASH_Unlock+0x40>)
 801b988:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b98a:	4b06      	ldr	r3, [pc, #24]	; (801b9a4 <HAL_FLASH_Unlock+0x38>)
 801b98c:	695b      	ldr	r3, [r3, #20]
 801b98e:	2b00      	cmp	r3, #0
 801b990:	da01      	bge.n	801b996 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801b992:	2301      	movs	r3, #1
 801b994:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801b996:	79fb      	ldrb	r3, [r7, #7]
}
 801b998:	4618      	mov	r0, r3
 801b99a:	370c      	adds	r7, #12
 801b99c:	46bd      	mov	sp, r7
 801b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9a2:	4770      	bx	lr
 801b9a4:	40022000 	.word	0x40022000
 801b9a8:	45670123 	.word	0x45670123
 801b9ac:	cdef89ab 	.word	0xcdef89ab

0801b9b0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801b9b0:	b480      	push	{r7}
 801b9b2:	b083      	sub	sp, #12
 801b9b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 801b9b6:	2301      	movs	r3, #1
 801b9b8:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801b9ba:	4b09      	ldr	r3, [pc, #36]	; (801b9e0 <HAL_FLASH_Lock+0x30>)
 801b9bc:	695b      	ldr	r3, [r3, #20]
 801b9be:	4a08      	ldr	r2, [pc, #32]	; (801b9e0 <HAL_FLASH_Lock+0x30>)
 801b9c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801b9c4:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b9c6:	4b06      	ldr	r3, [pc, #24]	; (801b9e0 <HAL_FLASH_Lock+0x30>)
 801b9c8:	695b      	ldr	r3, [r3, #20]
 801b9ca:	2b00      	cmp	r3, #0
 801b9cc:	da01      	bge.n	801b9d2 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 801b9ce:	2300      	movs	r3, #0
 801b9d0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801b9d2:	79fb      	ldrb	r3, [r7, #7]
}
 801b9d4:	4618      	mov	r0, r3
 801b9d6:	370c      	adds	r7, #12
 801b9d8:	46bd      	mov	sp, r7
 801b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9de:	4770      	bx	lr
 801b9e0:	40022000 	.word	0x40022000

0801b9e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801b9e4:	b580      	push	{r7, lr}
 801b9e6:	b084      	sub	sp, #16
 801b9e8:	af00      	add	r7, sp, #0
 801b9ea:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 801b9ec:	f7fd f98a 	bl	8018d04 <HAL_GetTick>
 801b9f0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801b9f2:	e009      	b.n	801ba08 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 801b9f4:	f7fd f986 	bl	8018d04 <HAL_GetTick>
 801b9f8:	4602      	mov	r2, r0
 801b9fa:	68fb      	ldr	r3, [r7, #12]
 801b9fc:	1ad3      	subs	r3, r2, r3
 801b9fe:	687a      	ldr	r2, [r7, #4]
 801ba00:	429a      	cmp	r2, r3
 801ba02:	d201      	bcs.n	801ba08 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 801ba04:	2303      	movs	r3, #3
 801ba06:	e038      	b.n	801ba7a <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801ba08:	4b1e      	ldr	r3, [pc, #120]	; (801ba84 <FLASH_WaitForLastOperation+0xa0>)
 801ba0a:	691b      	ldr	r3, [r3, #16]
 801ba0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ba10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ba14:	d0ee      	beq.n	801b9f4 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 801ba16:	4b1b      	ldr	r3, [pc, #108]	; (801ba84 <FLASH_WaitForLastOperation+0xa0>)
 801ba18:	691a      	ldr	r2, [r3, #16]
 801ba1a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 801ba1e:	4013      	ands	r3, r2
 801ba20:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 801ba22:	68bb      	ldr	r3, [r7, #8]
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	d01e      	beq.n	801ba66 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 801ba28:	4b17      	ldr	r3, [pc, #92]	; (801ba88 <FLASH_WaitForLastOperation+0xa4>)
 801ba2a:	685a      	ldr	r2, [r3, #4]
 801ba2c:	68bb      	ldr	r3, [r7, #8]
 801ba2e:	4313      	orrs	r3, r2
 801ba30:	4a15      	ldr	r2, [pc, #84]	; (801ba88 <FLASH_WaitForLastOperation+0xa4>)
 801ba32:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 801ba34:	68bb      	ldr	r3, [r7, #8]
 801ba36:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d007      	beq.n	801ba4e <FLASH_WaitForLastOperation+0x6a>
 801ba3e:	4b11      	ldr	r3, [pc, #68]	; (801ba84 <FLASH_WaitForLastOperation+0xa0>)
 801ba40:	699a      	ldr	r2, [r3, #24]
 801ba42:	68bb      	ldr	r3, [r7, #8]
 801ba44:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801ba48:	490e      	ldr	r1, [pc, #56]	; (801ba84 <FLASH_WaitForLastOperation+0xa0>)
 801ba4a:	4313      	orrs	r3, r2
 801ba4c:	618b      	str	r3, [r1, #24]
 801ba4e:	68bb      	ldr	r3, [r7, #8]
 801ba50:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d004      	beq.n	801ba62 <FLASH_WaitForLastOperation+0x7e>
 801ba58:	4a0a      	ldr	r2, [pc, #40]	; (801ba84 <FLASH_WaitForLastOperation+0xa0>)
 801ba5a:	68bb      	ldr	r3, [r7, #8]
 801ba5c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801ba60:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 801ba62:	2301      	movs	r3, #1
 801ba64:	e009      	b.n	801ba7a <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801ba66:	4b07      	ldr	r3, [pc, #28]	; (801ba84 <FLASH_WaitForLastOperation+0xa0>)
 801ba68:	691b      	ldr	r3, [r3, #16]
 801ba6a:	f003 0301 	and.w	r3, r3, #1
 801ba6e:	2b01      	cmp	r3, #1
 801ba70:	d102      	bne.n	801ba78 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801ba72:	4b04      	ldr	r3, [pc, #16]	; (801ba84 <FLASH_WaitForLastOperation+0xa0>)
 801ba74:	2201      	movs	r2, #1
 801ba76:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 801ba78:	2300      	movs	r3, #0
}
 801ba7a:	4618      	mov	r0, r3
 801ba7c:	3710      	adds	r7, #16
 801ba7e:	46bd      	mov	sp, r7
 801ba80:	bd80      	pop	{r7, pc}
 801ba82:	bf00      	nop
 801ba84:	40022000 	.word	0x40022000
 801ba88:	2000000c 	.word	0x2000000c

0801ba8c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801ba8c:	b480      	push	{r7}
 801ba8e:	b085      	sub	sp, #20
 801ba90:	af00      	add	r7, sp, #0
 801ba92:	60f8      	str	r0, [r7, #12]
 801ba94:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 801ba98:	4b0e      	ldr	r3, [pc, #56]	; (801bad4 <FLASH_Program_DoubleWord+0x48>)
 801ba9a:	695b      	ldr	r3, [r3, #20]
 801ba9c:	4a0d      	ldr	r2, [pc, #52]	; (801bad4 <FLASH_Program_DoubleWord+0x48>)
 801ba9e:	f043 0301 	orr.w	r3, r3, #1
 801baa2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 801baa4:	68fb      	ldr	r3, [r7, #12]
 801baa6:	683a      	ldr	r2, [r7, #0]
 801baa8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801baaa:	f3bf 8f6f 	isb	sy
}
 801baae:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 801bab0:	e9d7 0100 	ldrd	r0, r1, [r7]
 801bab4:	f04f 0200 	mov.w	r2, #0
 801bab8:	f04f 0300 	mov.w	r3, #0
 801babc:	000a      	movs	r2, r1
 801babe:	2300      	movs	r3, #0
 801bac0:	68f9      	ldr	r1, [r7, #12]
 801bac2:	3104      	adds	r1, #4
 801bac4:	4613      	mov	r3, r2
 801bac6:	600b      	str	r3, [r1, #0]
}
 801bac8:	bf00      	nop
 801baca:	3714      	adds	r7, #20
 801bacc:	46bd      	mov	sp, r7
 801bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bad2:	4770      	bx	lr
 801bad4:	40022000 	.word	0x40022000

0801bad8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 801bad8:	b480      	push	{r7}
 801bada:	b089      	sub	sp, #36	; 0x24
 801badc:	af00      	add	r7, sp, #0
 801bade:	6078      	str	r0, [r7, #4]
 801bae0:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 801bae2:	2340      	movs	r3, #64	; 0x40
 801bae4:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 801baea:	683b      	ldr	r3, [r7, #0]
 801baec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801baee:	4b14      	ldr	r3, [pc, #80]	; (801bb40 <FLASH_Program_Fast+0x68>)
 801baf0:	695b      	ldr	r3, [r3, #20]
 801baf2:	4a13      	ldr	r2, [pc, #76]	; (801bb40 <FLASH_Program_Fast+0x68>)
 801baf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801baf8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bafa:	f3ef 8310 	mrs	r3, PRIMASK
 801bafe:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb00:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 801bb02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb04:	b672      	cpsid	i
}
 801bb06:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 801bb08:	697b      	ldr	r3, [r7, #20]
 801bb0a:	681a      	ldr	r2, [r3, #0]
 801bb0c:	69bb      	ldr	r3, [r7, #24]
 801bb0e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 801bb10:	69bb      	ldr	r3, [r7, #24]
 801bb12:	3304      	adds	r3, #4
 801bb14:	61bb      	str	r3, [r7, #24]
    src_addr++;
 801bb16:	697b      	ldr	r3, [r7, #20]
 801bb18:	3304      	adds	r3, #4
 801bb1a:	617b      	str	r3, [r7, #20]
    row_index--;
 801bb1c:	7ffb      	ldrb	r3, [r7, #31]
 801bb1e:	3b01      	subs	r3, #1
 801bb20:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 801bb22:	7ffb      	ldrb	r3, [r7, #31]
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	d1ef      	bne.n	801bb08 <FLASH_Program_Fast+0x30>
 801bb28:	693b      	ldr	r3, [r7, #16]
 801bb2a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb2c:	68bb      	ldr	r3, [r7, #8]
 801bb2e:	f383 8810 	msr	PRIMASK, r3
}
 801bb32:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801bb34:	bf00      	nop
 801bb36:	3724      	adds	r7, #36	; 0x24
 801bb38:	46bd      	mov	sp, r7
 801bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb3e:	4770      	bx	lr
 801bb40:	40022000 	.word	0x40022000

0801bb44 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801bb44:	b580      	push	{r7, lr}
 801bb46:	b084      	sub	sp, #16
 801bb48:	af00      	add	r7, sp, #0
 801bb4a:	6078      	str	r0, [r7, #4]
 801bb4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801bb4e:	4b48      	ldr	r3, [pc, #288]	; (801bc70 <HAL_FLASHEx_Erase+0x12c>)
 801bb50:	781b      	ldrb	r3, [r3, #0]
 801bb52:	2b01      	cmp	r3, #1
 801bb54:	d101      	bne.n	801bb5a <HAL_FLASHEx_Erase+0x16>
 801bb56:	2302      	movs	r3, #2
 801bb58:	e085      	b.n	801bc66 <HAL_FLASHEx_Erase+0x122>
 801bb5a:	4b45      	ldr	r3, [pc, #276]	; (801bc70 <HAL_FLASHEx_Erase+0x12c>)
 801bb5c:	2201      	movs	r2, #1
 801bb5e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801bb60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801bb64:	f7ff ff3e 	bl	801b9e4 <FLASH_WaitForLastOperation>
 801bb68:	4603      	mov	r3, r0
 801bb6a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801bb6c:	7bfb      	ldrb	r3, [r7, #15]
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	d175      	bne.n	801bc5e <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801bb72:	4b3f      	ldr	r3, [pc, #252]	; (801bc70 <HAL_FLASHEx_Erase+0x12c>)
 801bb74:	2200      	movs	r2, #0
 801bb76:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 801bb78:	4b3e      	ldr	r3, [pc, #248]	; (801bc74 <HAL_FLASHEx_Erase+0x130>)
 801bb7a:	681b      	ldr	r3, [r3, #0]
 801bb7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d013      	beq.n	801bbac <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801bb84:	4b3b      	ldr	r3, [pc, #236]	; (801bc74 <HAL_FLASHEx_Erase+0x130>)
 801bb86:	681b      	ldr	r3, [r3, #0]
 801bb88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d009      	beq.n	801bba4 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 801bb90:	4b38      	ldr	r3, [pc, #224]	; (801bc74 <HAL_FLASHEx_Erase+0x130>)
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	4a37      	ldr	r2, [pc, #220]	; (801bc74 <HAL_FLASHEx_Erase+0x130>)
 801bb96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801bb9a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 801bb9c:	4b34      	ldr	r3, [pc, #208]	; (801bc70 <HAL_FLASHEx_Erase+0x12c>)
 801bb9e:	2203      	movs	r2, #3
 801bba0:	771a      	strb	r2, [r3, #28]
 801bba2:	e016      	b.n	801bbd2 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 801bba4:	4b32      	ldr	r3, [pc, #200]	; (801bc70 <HAL_FLASHEx_Erase+0x12c>)
 801bba6:	2201      	movs	r2, #1
 801bba8:	771a      	strb	r2, [r3, #28]
 801bbaa:	e012      	b.n	801bbd2 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801bbac:	4b31      	ldr	r3, [pc, #196]	; (801bc74 <HAL_FLASHEx_Erase+0x130>)
 801bbae:	681b      	ldr	r3, [r3, #0]
 801bbb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	d009      	beq.n	801bbcc <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801bbb8:	4b2e      	ldr	r3, [pc, #184]	; (801bc74 <HAL_FLASHEx_Erase+0x130>)
 801bbba:	681b      	ldr	r3, [r3, #0]
 801bbbc:	4a2d      	ldr	r2, [pc, #180]	; (801bc74 <HAL_FLASHEx_Erase+0x130>)
 801bbbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801bbc2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801bbc4:	4b2a      	ldr	r3, [pc, #168]	; (801bc70 <HAL_FLASHEx_Erase+0x12c>)
 801bbc6:	2202      	movs	r2, #2
 801bbc8:	771a      	strb	r2, [r3, #28]
 801bbca:	e002      	b.n	801bbd2 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801bbcc:	4b28      	ldr	r3, [pc, #160]	; (801bc70 <HAL_FLASHEx_Erase+0x12c>)
 801bbce:	2200      	movs	r2, #0
 801bbd0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	681b      	ldr	r3, [r3, #0]
 801bbd6:	2b01      	cmp	r3, #1
 801bbd8:	d111      	bne.n	801bbfe <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	685b      	ldr	r3, [r3, #4]
 801bbde:	4618      	mov	r0, r3
 801bbe0:	f000 f84a 	bl	801bc78 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801bbe4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801bbe8:	f7ff fefc 	bl	801b9e4 <FLASH_WaitForLastOperation>
 801bbec:	4603      	mov	r3, r0
 801bbee:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 801bbf0:	4b20      	ldr	r3, [pc, #128]	; (801bc74 <HAL_FLASHEx_Erase+0x130>)
 801bbf2:	695b      	ldr	r3, [r3, #20]
 801bbf4:	4a1f      	ldr	r2, [pc, #124]	; (801bc74 <HAL_FLASHEx_Erase+0x130>)
 801bbf6:	f023 0304 	bic.w	r3, r3, #4
 801bbfa:	6153      	str	r3, [r2, #20]
 801bbfc:	e02d      	b.n	801bc5a <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801bbfe:	683b      	ldr	r3, [r7, #0]
 801bc00:	f04f 32ff 	mov.w	r2, #4294967295
 801bc04:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	689b      	ldr	r3, [r3, #8]
 801bc0a:	60bb      	str	r3, [r7, #8]
 801bc0c:	e01d      	b.n	801bc4a <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	685b      	ldr	r3, [r3, #4]
 801bc12:	4619      	mov	r1, r3
 801bc14:	68b8      	ldr	r0, [r7, #8]
 801bc16:	f000 f84d 	bl	801bcb4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801bc1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801bc1e:	f7ff fee1 	bl	801b9e4 <FLASH_WaitForLastOperation>
 801bc22:	4603      	mov	r3, r0
 801bc24:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 801bc26:	4b13      	ldr	r3, [pc, #76]	; (801bc74 <HAL_FLASHEx_Erase+0x130>)
 801bc28:	695b      	ldr	r3, [r3, #20]
 801bc2a:	4a12      	ldr	r2, [pc, #72]	; (801bc74 <HAL_FLASHEx_Erase+0x130>)
 801bc2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801bc30:	f023 0302 	bic.w	r3, r3, #2
 801bc34:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 801bc36:	7bfb      	ldrb	r3, [r7, #15]
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d003      	beq.n	801bc44 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 801bc3c:	683b      	ldr	r3, [r7, #0]
 801bc3e:	68ba      	ldr	r2, [r7, #8]
 801bc40:	601a      	str	r2, [r3, #0]
          break;
 801bc42:	e00a      	b.n	801bc5a <HAL_FLASHEx_Erase+0x116>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801bc44:	68bb      	ldr	r3, [r7, #8]
 801bc46:	3301      	adds	r3, #1
 801bc48:	60bb      	str	r3, [r7, #8]
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	689a      	ldr	r2, [r3, #8]
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	68db      	ldr	r3, [r3, #12]
 801bc52:	4413      	add	r3, r2
 801bc54:	68ba      	ldr	r2, [r7, #8]
 801bc56:	429a      	cmp	r2, r3
 801bc58:	d3d9      	bcc.n	801bc0e <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801bc5a:	f000 f84f 	bl	801bcfc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801bc5e:	4b04      	ldr	r3, [pc, #16]	; (801bc70 <HAL_FLASHEx_Erase+0x12c>)
 801bc60:	2200      	movs	r2, #0
 801bc62:	701a      	strb	r2, [r3, #0]

  return status;
 801bc64:	7bfb      	ldrb	r3, [r7, #15]
}
 801bc66:	4618      	mov	r0, r3
 801bc68:	3710      	adds	r7, #16
 801bc6a:	46bd      	mov	sp, r7
 801bc6c:	bd80      	pop	{r7, pc}
 801bc6e:	bf00      	nop
 801bc70:	2000000c 	.word	0x2000000c
 801bc74:	40022000 	.word	0x40022000

0801bc78 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 801bc78:	b480      	push	{r7}
 801bc7a:	b083      	sub	sp, #12
 801bc7c:	af00      	add	r7, sp, #0
 801bc7e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	f003 0301 	and.w	r3, r3, #1
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d005      	beq.n	801bc96 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 801bc8a:	4b09      	ldr	r3, [pc, #36]	; (801bcb0 <FLASH_MassErase+0x38>)
 801bc8c:	695b      	ldr	r3, [r3, #20]
 801bc8e:	4a08      	ldr	r2, [pc, #32]	; (801bcb0 <FLASH_MassErase+0x38>)
 801bc90:	f043 0304 	orr.w	r3, r3, #4
 801bc94:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801bc96:	4b06      	ldr	r3, [pc, #24]	; (801bcb0 <FLASH_MassErase+0x38>)
 801bc98:	695b      	ldr	r3, [r3, #20]
 801bc9a:	4a05      	ldr	r2, [pc, #20]	; (801bcb0 <FLASH_MassErase+0x38>)
 801bc9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bca0:	6153      	str	r3, [r2, #20]
}
 801bca2:	bf00      	nop
 801bca4:	370c      	adds	r7, #12
 801bca6:	46bd      	mov	sp, r7
 801bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcac:	4770      	bx	lr
 801bcae:	bf00      	nop
 801bcb0:	40022000 	.word	0x40022000

0801bcb4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 801bcb4:	b480      	push	{r7}
 801bcb6:	b083      	sub	sp, #12
 801bcb8:	af00      	add	r7, sp, #0
 801bcba:	6078      	str	r0, [r7, #4]
 801bcbc:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 801bcbe:	4b0e      	ldr	r3, [pc, #56]	; (801bcf8 <FLASH_PageErase+0x44>)
 801bcc0:	695b      	ldr	r3, [r3, #20]
 801bcc2:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	00db      	lsls	r3, r3, #3
 801bcca:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801bcce:	490a      	ldr	r1, [pc, #40]	; (801bcf8 <FLASH_PageErase+0x44>)
 801bcd0:	4313      	orrs	r3, r2
 801bcd2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 801bcd4:	4b08      	ldr	r3, [pc, #32]	; (801bcf8 <FLASH_PageErase+0x44>)
 801bcd6:	695b      	ldr	r3, [r3, #20]
 801bcd8:	4a07      	ldr	r2, [pc, #28]	; (801bcf8 <FLASH_PageErase+0x44>)
 801bcda:	f043 0302 	orr.w	r3, r3, #2
 801bcde:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801bce0:	4b05      	ldr	r3, [pc, #20]	; (801bcf8 <FLASH_PageErase+0x44>)
 801bce2:	695b      	ldr	r3, [r3, #20]
 801bce4:	4a04      	ldr	r2, [pc, #16]	; (801bcf8 <FLASH_PageErase+0x44>)
 801bce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bcea:	6153      	str	r3, [r2, #20]
}
 801bcec:	bf00      	nop
 801bcee:	370c      	adds	r7, #12
 801bcf0:	46bd      	mov	sp, r7
 801bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcf6:	4770      	bx	lr
 801bcf8:	40022000 	.word	0x40022000

0801bcfc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801bcfc:	b480      	push	{r7}
 801bcfe:	b083      	sub	sp, #12
 801bd00:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 801bd02:	4b21      	ldr	r3, [pc, #132]	; (801bd88 <FLASH_FlushCaches+0x8c>)
 801bd04:	7f1b      	ldrb	r3, [r3, #28]
 801bd06:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 801bd08:	79fb      	ldrb	r3, [r7, #7]
 801bd0a:	2b01      	cmp	r3, #1
 801bd0c:	d002      	beq.n	801bd14 <FLASH_FlushCaches+0x18>
 801bd0e:	79fb      	ldrb	r3, [r7, #7]
 801bd10:	2b03      	cmp	r3, #3
 801bd12:	d117      	bne.n	801bd44 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801bd14:	4b1d      	ldr	r3, [pc, #116]	; (801bd8c <FLASH_FlushCaches+0x90>)
 801bd16:	681b      	ldr	r3, [r3, #0]
 801bd18:	4a1c      	ldr	r2, [pc, #112]	; (801bd8c <FLASH_FlushCaches+0x90>)
 801bd1a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801bd1e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801bd20:	4b1a      	ldr	r3, [pc, #104]	; (801bd8c <FLASH_FlushCaches+0x90>)
 801bd22:	681b      	ldr	r3, [r3, #0]
 801bd24:	4a19      	ldr	r2, [pc, #100]	; (801bd8c <FLASH_FlushCaches+0x90>)
 801bd26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801bd2a:	6013      	str	r3, [r2, #0]
 801bd2c:	4b17      	ldr	r3, [pc, #92]	; (801bd8c <FLASH_FlushCaches+0x90>)
 801bd2e:	681b      	ldr	r3, [r3, #0]
 801bd30:	4a16      	ldr	r2, [pc, #88]	; (801bd8c <FLASH_FlushCaches+0x90>)
 801bd32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801bd36:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801bd38:	4b14      	ldr	r3, [pc, #80]	; (801bd8c <FLASH_FlushCaches+0x90>)
 801bd3a:	681b      	ldr	r3, [r3, #0]
 801bd3c:	4a13      	ldr	r2, [pc, #76]	; (801bd8c <FLASH_FlushCaches+0x90>)
 801bd3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801bd42:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 801bd44:	79fb      	ldrb	r3, [r7, #7]
 801bd46:	2b02      	cmp	r3, #2
 801bd48:	d002      	beq.n	801bd50 <FLASH_FlushCaches+0x54>
 801bd4a:	79fb      	ldrb	r3, [r7, #7]
 801bd4c:	2b03      	cmp	r3, #3
 801bd4e:	d111      	bne.n	801bd74 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801bd50:	4b0e      	ldr	r3, [pc, #56]	; (801bd8c <FLASH_FlushCaches+0x90>)
 801bd52:	681b      	ldr	r3, [r3, #0]
 801bd54:	4a0d      	ldr	r2, [pc, #52]	; (801bd8c <FLASH_FlushCaches+0x90>)
 801bd56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801bd5a:	6013      	str	r3, [r2, #0]
 801bd5c:	4b0b      	ldr	r3, [pc, #44]	; (801bd8c <FLASH_FlushCaches+0x90>)
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	4a0a      	ldr	r2, [pc, #40]	; (801bd8c <FLASH_FlushCaches+0x90>)
 801bd62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bd66:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801bd68:	4b08      	ldr	r3, [pc, #32]	; (801bd8c <FLASH_FlushCaches+0x90>)
 801bd6a:	681b      	ldr	r3, [r3, #0]
 801bd6c:	4a07      	ldr	r2, [pc, #28]	; (801bd8c <FLASH_FlushCaches+0x90>)
 801bd6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801bd72:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801bd74:	4b04      	ldr	r3, [pc, #16]	; (801bd88 <FLASH_FlushCaches+0x8c>)
 801bd76:	2200      	movs	r2, #0
 801bd78:	771a      	strb	r2, [r3, #28]
}
 801bd7a:	bf00      	nop
 801bd7c:	370c      	adds	r7, #12
 801bd7e:	46bd      	mov	sp, r7
 801bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd84:	4770      	bx	lr
 801bd86:	bf00      	nop
 801bd88:	2000000c 	.word	0x2000000c
 801bd8c:	40022000 	.word	0x40022000

0801bd90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801bd90:	b480      	push	{r7}
 801bd92:	b087      	sub	sp, #28
 801bd94:	af00      	add	r7, sp, #0
 801bd96:	6078      	str	r0, [r7, #4]
 801bd98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801bd9a:	2300      	movs	r3, #0
 801bd9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 801bd9e:	e15a      	b.n	801c056 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801bda0:	683b      	ldr	r3, [r7, #0]
 801bda2:	681a      	ldr	r2, [r3, #0]
 801bda4:	2101      	movs	r1, #1
 801bda6:	697b      	ldr	r3, [r7, #20]
 801bda8:	fa01 f303 	lsl.w	r3, r1, r3
 801bdac:	4013      	ands	r3, r2
 801bdae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801bdb0:	68fb      	ldr	r3, [r7, #12]
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	f000 814c 	beq.w	801c050 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801bdb8:	683b      	ldr	r3, [r7, #0]
 801bdba:	685b      	ldr	r3, [r3, #4]
 801bdbc:	f003 0303 	and.w	r3, r3, #3
 801bdc0:	2b01      	cmp	r3, #1
 801bdc2:	d005      	beq.n	801bdd0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801bdc4:	683b      	ldr	r3, [r7, #0]
 801bdc6:	685b      	ldr	r3, [r3, #4]
 801bdc8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801bdcc:	2b02      	cmp	r3, #2
 801bdce:	d130      	bne.n	801be32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	689b      	ldr	r3, [r3, #8]
 801bdd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801bdd6:	697b      	ldr	r3, [r7, #20]
 801bdd8:	005b      	lsls	r3, r3, #1
 801bdda:	2203      	movs	r2, #3
 801bddc:	fa02 f303 	lsl.w	r3, r2, r3
 801bde0:	43db      	mvns	r3, r3
 801bde2:	693a      	ldr	r2, [r7, #16]
 801bde4:	4013      	ands	r3, r2
 801bde6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801bde8:	683b      	ldr	r3, [r7, #0]
 801bdea:	68da      	ldr	r2, [r3, #12]
 801bdec:	697b      	ldr	r3, [r7, #20]
 801bdee:	005b      	lsls	r3, r3, #1
 801bdf0:	fa02 f303 	lsl.w	r3, r2, r3
 801bdf4:	693a      	ldr	r2, [r7, #16]
 801bdf6:	4313      	orrs	r3, r2
 801bdf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	693a      	ldr	r2, [r7, #16]
 801bdfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	685b      	ldr	r3, [r3, #4]
 801be04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801be06:	2201      	movs	r2, #1
 801be08:	697b      	ldr	r3, [r7, #20]
 801be0a:	fa02 f303 	lsl.w	r3, r2, r3
 801be0e:	43db      	mvns	r3, r3
 801be10:	693a      	ldr	r2, [r7, #16]
 801be12:	4013      	ands	r3, r2
 801be14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801be16:	683b      	ldr	r3, [r7, #0]
 801be18:	685b      	ldr	r3, [r3, #4]
 801be1a:	091b      	lsrs	r3, r3, #4
 801be1c:	f003 0201 	and.w	r2, r3, #1
 801be20:	697b      	ldr	r3, [r7, #20]
 801be22:	fa02 f303 	lsl.w	r3, r2, r3
 801be26:	693a      	ldr	r2, [r7, #16]
 801be28:	4313      	orrs	r3, r2
 801be2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	693a      	ldr	r2, [r7, #16]
 801be30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801be32:	683b      	ldr	r3, [r7, #0]
 801be34:	685b      	ldr	r3, [r3, #4]
 801be36:	f003 0303 	and.w	r3, r3, #3
 801be3a:	2b03      	cmp	r3, #3
 801be3c:	d017      	beq.n	801be6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	68db      	ldr	r3, [r3, #12]
 801be42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801be44:	697b      	ldr	r3, [r7, #20]
 801be46:	005b      	lsls	r3, r3, #1
 801be48:	2203      	movs	r2, #3
 801be4a:	fa02 f303 	lsl.w	r3, r2, r3
 801be4e:	43db      	mvns	r3, r3
 801be50:	693a      	ldr	r2, [r7, #16]
 801be52:	4013      	ands	r3, r2
 801be54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801be56:	683b      	ldr	r3, [r7, #0]
 801be58:	689a      	ldr	r2, [r3, #8]
 801be5a:	697b      	ldr	r3, [r7, #20]
 801be5c:	005b      	lsls	r3, r3, #1
 801be5e:	fa02 f303 	lsl.w	r3, r2, r3
 801be62:	693a      	ldr	r2, [r7, #16]
 801be64:	4313      	orrs	r3, r2
 801be66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	693a      	ldr	r2, [r7, #16]
 801be6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801be6e:	683b      	ldr	r3, [r7, #0]
 801be70:	685b      	ldr	r3, [r3, #4]
 801be72:	f003 0303 	and.w	r3, r3, #3
 801be76:	2b02      	cmp	r3, #2
 801be78:	d123      	bne.n	801bec2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801be7a:	697b      	ldr	r3, [r7, #20]
 801be7c:	08da      	lsrs	r2, r3, #3
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	3208      	adds	r2, #8
 801be82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801be86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801be88:	697b      	ldr	r3, [r7, #20]
 801be8a:	f003 0307 	and.w	r3, r3, #7
 801be8e:	009b      	lsls	r3, r3, #2
 801be90:	220f      	movs	r2, #15
 801be92:	fa02 f303 	lsl.w	r3, r2, r3
 801be96:	43db      	mvns	r3, r3
 801be98:	693a      	ldr	r2, [r7, #16]
 801be9a:	4013      	ands	r3, r2
 801be9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801be9e:	683b      	ldr	r3, [r7, #0]
 801bea0:	691a      	ldr	r2, [r3, #16]
 801bea2:	697b      	ldr	r3, [r7, #20]
 801bea4:	f003 0307 	and.w	r3, r3, #7
 801bea8:	009b      	lsls	r3, r3, #2
 801beaa:	fa02 f303 	lsl.w	r3, r2, r3
 801beae:	693a      	ldr	r2, [r7, #16]
 801beb0:	4313      	orrs	r3, r2
 801beb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801beb4:	697b      	ldr	r3, [r7, #20]
 801beb6:	08da      	lsrs	r2, r3, #3
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	3208      	adds	r2, #8
 801bebc:	6939      	ldr	r1, [r7, #16]
 801bebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	681b      	ldr	r3, [r3, #0]
 801bec6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801bec8:	697b      	ldr	r3, [r7, #20]
 801beca:	005b      	lsls	r3, r3, #1
 801becc:	2203      	movs	r2, #3
 801bece:	fa02 f303 	lsl.w	r3, r2, r3
 801bed2:	43db      	mvns	r3, r3
 801bed4:	693a      	ldr	r2, [r7, #16]
 801bed6:	4013      	ands	r3, r2
 801bed8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801beda:	683b      	ldr	r3, [r7, #0]
 801bedc:	685b      	ldr	r3, [r3, #4]
 801bede:	f003 0203 	and.w	r2, r3, #3
 801bee2:	697b      	ldr	r3, [r7, #20]
 801bee4:	005b      	lsls	r3, r3, #1
 801bee6:	fa02 f303 	lsl.w	r3, r2, r3
 801beea:	693a      	ldr	r2, [r7, #16]
 801beec:	4313      	orrs	r3, r2
 801beee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	693a      	ldr	r2, [r7, #16]
 801bef4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801bef6:	683b      	ldr	r3, [r7, #0]
 801bef8:	685b      	ldr	r3, [r3, #4]
 801befa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801befe:	2b00      	cmp	r3, #0
 801bf00:	f000 80a6 	beq.w	801c050 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801bf04:	4b5b      	ldr	r3, [pc, #364]	; (801c074 <HAL_GPIO_Init+0x2e4>)
 801bf06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bf08:	4a5a      	ldr	r2, [pc, #360]	; (801c074 <HAL_GPIO_Init+0x2e4>)
 801bf0a:	f043 0301 	orr.w	r3, r3, #1
 801bf0e:	6613      	str	r3, [r2, #96]	; 0x60
 801bf10:	4b58      	ldr	r3, [pc, #352]	; (801c074 <HAL_GPIO_Init+0x2e4>)
 801bf12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bf14:	f003 0301 	and.w	r3, r3, #1
 801bf18:	60bb      	str	r3, [r7, #8]
 801bf1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 801bf1c:	4a56      	ldr	r2, [pc, #344]	; (801c078 <HAL_GPIO_Init+0x2e8>)
 801bf1e:	697b      	ldr	r3, [r7, #20]
 801bf20:	089b      	lsrs	r3, r3, #2
 801bf22:	3302      	adds	r3, #2
 801bf24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bf28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801bf2a:	697b      	ldr	r3, [r7, #20]
 801bf2c:	f003 0303 	and.w	r3, r3, #3
 801bf30:	009b      	lsls	r3, r3, #2
 801bf32:	220f      	movs	r2, #15
 801bf34:	fa02 f303 	lsl.w	r3, r2, r3
 801bf38:	43db      	mvns	r3, r3
 801bf3a:	693a      	ldr	r2, [r7, #16]
 801bf3c:	4013      	ands	r3, r2
 801bf3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801bf46:	d01f      	beq.n	801bf88 <HAL_GPIO_Init+0x1f8>
 801bf48:	687b      	ldr	r3, [r7, #4]
 801bf4a:	4a4c      	ldr	r2, [pc, #304]	; (801c07c <HAL_GPIO_Init+0x2ec>)
 801bf4c:	4293      	cmp	r3, r2
 801bf4e:	d019      	beq.n	801bf84 <HAL_GPIO_Init+0x1f4>
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	4a4b      	ldr	r2, [pc, #300]	; (801c080 <HAL_GPIO_Init+0x2f0>)
 801bf54:	4293      	cmp	r3, r2
 801bf56:	d013      	beq.n	801bf80 <HAL_GPIO_Init+0x1f0>
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	4a4a      	ldr	r2, [pc, #296]	; (801c084 <HAL_GPIO_Init+0x2f4>)
 801bf5c:	4293      	cmp	r3, r2
 801bf5e:	d00d      	beq.n	801bf7c <HAL_GPIO_Init+0x1ec>
 801bf60:	687b      	ldr	r3, [r7, #4]
 801bf62:	4a49      	ldr	r2, [pc, #292]	; (801c088 <HAL_GPIO_Init+0x2f8>)
 801bf64:	4293      	cmp	r3, r2
 801bf66:	d007      	beq.n	801bf78 <HAL_GPIO_Init+0x1e8>
 801bf68:	687b      	ldr	r3, [r7, #4]
 801bf6a:	4a48      	ldr	r2, [pc, #288]	; (801c08c <HAL_GPIO_Init+0x2fc>)
 801bf6c:	4293      	cmp	r3, r2
 801bf6e:	d101      	bne.n	801bf74 <HAL_GPIO_Init+0x1e4>
 801bf70:	2305      	movs	r3, #5
 801bf72:	e00a      	b.n	801bf8a <HAL_GPIO_Init+0x1fa>
 801bf74:	2306      	movs	r3, #6
 801bf76:	e008      	b.n	801bf8a <HAL_GPIO_Init+0x1fa>
 801bf78:	2304      	movs	r3, #4
 801bf7a:	e006      	b.n	801bf8a <HAL_GPIO_Init+0x1fa>
 801bf7c:	2303      	movs	r3, #3
 801bf7e:	e004      	b.n	801bf8a <HAL_GPIO_Init+0x1fa>
 801bf80:	2302      	movs	r3, #2
 801bf82:	e002      	b.n	801bf8a <HAL_GPIO_Init+0x1fa>
 801bf84:	2301      	movs	r3, #1
 801bf86:	e000      	b.n	801bf8a <HAL_GPIO_Init+0x1fa>
 801bf88:	2300      	movs	r3, #0
 801bf8a:	697a      	ldr	r2, [r7, #20]
 801bf8c:	f002 0203 	and.w	r2, r2, #3
 801bf90:	0092      	lsls	r2, r2, #2
 801bf92:	4093      	lsls	r3, r2
 801bf94:	693a      	ldr	r2, [r7, #16]
 801bf96:	4313      	orrs	r3, r2
 801bf98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801bf9a:	4937      	ldr	r1, [pc, #220]	; (801c078 <HAL_GPIO_Init+0x2e8>)
 801bf9c:	697b      	ldr	r3, [r7, #20]
 801bf9e:	089b      	lsrs	r3, r3, #2
 801bfa0:	3302      	adds	r3, #2
 801bfa2:	693a      	ldr	r2, [r7, #16]
 801bfa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801bfa8:	4b39      	ldr	r3, [pc, #228]	; (801c090 <HAL_GPIO_Init+0x300>)
 801bfaa:	689b      	ldr	r3, [r3, #8]
 801bfac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801bfae:	68fb      	ldr	r3, [r7, #12]
 801bfb0:	43db      	mvns	r3, r3
 801bfb2:	693a      	ldr	r2, [r7, #16]
 801bfb4:	4013      	ands	r3, r2
 801bfb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801bfb8:	683b      	ldr	r3, [r7, #0]
 801bfba:	685b      	ldr	r3, [r3, #4]
 801bfbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	d003      	beq.n	801bfcc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 801bfc4:	693a      	ldr	r2, [r7, #16]
 801bfc6:	68fb      	ldr	r3, [r7, #12]
 801bfc8:	4313      	orrs	r3, r2
 801bfca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801bfcc:	4a30      	ldr	r2, [pc, #192]	; (801c090 <HAL_GPIO_Init+0x300>)
 801bfce:	693b      	ldr	r3, [r7, #16]
 801bfd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801bfd2:	4b2f      	ldr	r3, [pc, #188]	; (801c090 <HAL_GPIO_Init+0x300>)
 801bfd4:	68db      	ldr	r3, [r3, #12]
 801bfd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801bfd8:	68fb      	ldr	r3, [r7, #12]
 801bfda:	43db      	mvns	r3, r3
 801bfdc:	693a      	ldr	r2, [r7, #16]
 801bfde:	4013      	ands	r3, r2
 801bfe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801bfe2:	683b      	ldr	r3, [r7, #0]
 801bfe4:	685b      	ldr	r3, [r3, #4]
 801bfe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	d003      	beq.n	801bff6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 801bfee:	693a      	ldr	r2, [r7, #16]
 801bff0:	68fb      	ldr	r3, [r7, #12]
 801bff2:	4313      	orrs	r3, r2
 801bff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801bff6:	4a26      	ldr	r2, [pc, #152]	; (801c090 <HAL_GPIO_Init+0x300>)
 801bff8:	693b      	ldr	r3, [r7, #16]
 801bffa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 801bffc:	4b24      	ldr	r3, [pc, #144]	; (801c090 <HAL_GPIO_Init+0x300>)
 801bffe:	685b      	ldr	r3, [r3, #4]
 801c000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c002:	68fb      	ldr	r3, [r7, #12]
 801c004:	43db      	mvns	r3, r3
 801c006:	693a      	ldr	r2, [r7, #16]
 801c008:	4013      	ands	r3, r2
 801c00a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801c00c:	683b      	ldr	r3, [r7, #0]
 801c00e:	685b      	ldr	r3, [r3, #4]
 801c010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c014:	2b00      	cmp	r3, #0
 801c016:	d003      	beq.n	801c020 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 801c018:	693a      	ldr	r2, [r7, #16]
 801c01a:	68fb      	ldr	r3, [r7, #12]
 801c01c:	4313      	orrs	r3, r2
 801c01e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801c020:	4a1b      	ldr	r2, [pc, #108]	; (801c090 <HAL_GPIO_Init+0x300>)
 801c022:	693b      	ldr	r3, [r7, #16]
 801c024:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801c026:	4b1a      	ldr	r3, [pc, #104]	; (801c090 <HAL_GPIO_Init+0x300>)
 801c028:	681b      	ldr	r3, [r3, #0]
 801c02a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c02c:	68fb      	ldr	r3, [r7, #12]
 801c02e:	43db      	mvns	r3, r3
 801c030:	693a      	ldr	r2, [r7, #16]
 801c032:	4013      	ands	r3, r2
 801c034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801c036:	683b      	ldr	r3, [r7, #0]
 801c038:	685b      	ldr	r3, [r3, #4]
 801c03a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d003      	beq.n	801c04a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 801c042:	693a      	ldr	r2, [r7, #16]
 801c044:	68fb      	ldr	r3, [r7, #12]
 801c046:	4313      	orrs	r3, r2
 801c048:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801c04a:	4a11      	ldr	r2, [pc, #68]	; (801c090 <HAL_GPIO_Init+0x300>)
 801c04c:	693b      	ldr	r3, [r7, #16]
 801c04e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801c050:	697b      	ldr	r3, [r7, #20]
 801c052:	3301      	adds	r3, #1
 801c054:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 801c056:	683b      	ldr	r3, [r7, #0]
 801c058:	681a      	ldr	r2, [r3, #0]
 801c05a:	697b      	ldr	r3, [r7, #20]
 801c05c:	fa22 f303 	lsr.w	r3, r2, r3
 801c060:	2b00      	cmp	r3, #0
 801c062:	f47f ae9d 	bne.w	801bda0 <HAL_GPIO_Init+0x10>
  }
}
 801c066:	bf00      	nop
 801c068:	bf00      	nop
 801c06a:	371c      	adds	r7, #28
 801c06c:	46bd      	mov	sp, r7
 801c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c072:	4770      	bx	lr
 801c074:	40021000 	.word	0x40021000
 801c078:	40010000 	.word	0x40010000
 801c07c:	48000400 	.word	0x48000400
 801c080:	48000800 	.word	0x48000800
 801c084:	48000c00 	.word	0x48000c00
 801c088:	48001000 	.word	0x48001000
 801c08c:	48001400 	.word	0x48001400
 801c090:	40010400 	.word	0x40010400

0801c094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801c094:	b480      	push	{r7}
 801c096:	b083      	sub	sp, #12
 801c098:	af00      	add	r7, sp, #0
 801c09a:	6078      	str	r0, [r7, #4]
 801c09c:	460b      	mov	r3, r1
 801c09e:	807b      	strh	r3, [r7, #2]
 801c0a0:	4613      	mov	r3, r2
 801c0a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801c0a4:	787b      	ldrb	r3, [r7, #1]
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	d003      	beq.n	801c0b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801c0aa:	887a      	ldrh	r2, [r7, #2]
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801c0b0:	e002      	b.n	801c0b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801c0b2:	887a      	ldrh	r2, [r7, #2]
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 801c0b8:	bf00      	nop
 801c0ba:	370c      	adds	r7, #12
 801c0bc:	46bd      	mov	sp, r7
 801c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0c2:	4770      	bx	lr

0801c0c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801c0c4:	b480      	push	{r7}
 801c0c6:	b085      	sub	sp, #20
 801c0c8:	af00      	add	r7, sp, #0
 801c0ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	d141      	bne.n	801c156 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801c0d2:	4b4b      	ldr	r3, [pc, #300]	; (801c200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c0d4:	681b      	ldr	r3, [r3, #0]
 801c0d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801c0da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c0de:	d131      	bne.n	801c144 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801c0e0:	4b47      	ldr	r3, [pc, #284]	; (801c200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c0e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c0e6:	4a46      	ldr	r2, [pc, #280]	; (801c200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c0e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c0ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801c0f0:	4b43      	ldr	r3, [pc, #268]	; (801c200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c0f2:	681b      	ldr	r3, [r3, #0]
 801c0f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801c0f8:	4a41      	ldr	r2, [pc, #260]	; (801c200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c0fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801c0fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801c100:	4b40      	ldr	r3, [pc, #256]	; (801c204 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801c102:	681b      	ldr	r3, [r3, #0]
 801c104:	2232      	movs	r2, #50	; 0x32
 801c106:	fb02 f303 	mul.w	r3, r2, r3
 801c10a:	4a3f      	ldr	r2, [pc, #252]	; (801c208 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801c10c:	fba2 2303 	umull	r2, r3, r2, r3
 801c110:	0c9b      	lsrs	r3, r3, #18
 801c112:	3301      	adds	r3, #1
 801c114:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801c116:	e002      	b.n	801c11e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 801c118:	68fb      	ldr	r3, [r7, #12]
 801c11a:	3b01      	subs	r3, #1
 801c11c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801c11e:	4b38      	ldr	r3, [pc, #224]	; (801c200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c120:	695b      	ldr	r3, [r3, #20]
 801c122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c12a:	d102      	bne.n	801c132 <HAL_PWREx_ControlVoltageScaling+0x6e>
 801c12c:	68fb      	ldr	r3, [r7, #12]
 801c12e:	2b00      	cmp	r3, #0
 801c130:	d1f2      	bne.n	801c118 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801c132:	4b33      	ldr	r3, [pc, #204]	; (801c200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c134:	695b      	ldr	r3, [r3, #20]
 801c136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c13a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c13e:	d158      	bne.n	801c1f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801c140:	2303      	movs	r3, #3
 801c142:	e057      	b.n	801c1f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801c144:	4b2e      	ldr	r3, [pc, #184]	; (801c200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c14a:	4a2d      	ldr	r2, [pc, #180]	; (801c200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c14c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c150:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801c154:	e04d      	b.n	801c1f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c15c:	d141      	bne.n	801c1e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801c15e:	4b28      	ldr	r3, [pc, #160]	; (801c200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c160:	681b      	ldr	r3, [r3, #0]
 801c162:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801c166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c16a:	d131      	bne.n	801c1d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801c16c:	4b24      	ldr	r3, [pc, #144]	; (801c200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c16e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c172:	4a23      	ldr	r2, [pc, #140]	; (801c200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c178:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801c17c:	4b20      	ldr	r3, [pc, #128]	; (801c200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c17e:	681b      	ldr	r3, [r3, #0]
 801c180:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801c184:	4a1e      	ldr	r2, [pc, #120]	; (801c200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801c18a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801c18c:	4b1d      	ldr	r3, [pc, #116]	; (801c204 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801c18e:	681b      	ldr	r3, [r3, #0]
 801c190:	2232      	movs	r2, #50	; 0x32
 801c192:	fb02 f303 	mul.w	r3, r2, r3
 801c196:	4a1c      	ldr	r2, [pc, #112]	; (801c208 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801c198:	fba2 2303 	umull	r2, r3, r2, r3
 801c19c:	0c9b      	lsrs	r3, r3, #18
 801c19e:	3301      	adds	r3, #1
 801c1a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801c1a2:	e002      	b.n	801c1aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 801c1a4:	68fb      	ldr	r3, [r7, #12]
 801c1a6:	3b01      	subs	r3, #1
 801c1a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801c1aa:	4b15      	ldr	r3, [pc, #84]	; (801c200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c1ac:	695b      	ldr	r3, [r3, #20]
 801c1ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c1b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c1b6:	d102      	bne.n	801c1be <HAL_PWREx_ControlVoltageScaling+0xfa>
 801c1b8:	68fb      	ldr	r3, [r7, #12]
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	d1f2      	bne.n	801c1a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801c1be:	4b10      	ldr	r3, [pc, #64]	; (801c200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c1c0:	695b      	ldr	r3, [r3, #20]
 801c1c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c1c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c1ca:	d112      	bne.n	801c1f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801c1cc:	2303      	movs	r3, #3
 801c1ce:	e011      	b.n	801c1f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801c1d0:	4b0b      	ldr	r3, [pc, #44]	; (801c200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c1d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c1d6:	4a0a      	ldr	r2, [pc, #40]	; (801c200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c1d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c1dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801c1e0:	e007      	b.n	801c1f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801c1e2:	4b07      	ldr	r3, [pc, #28]	; (801c200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c1e4:	681b      	ldr	r3, [r3, #0]
 801c1e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801c1ea:	4a05      	ldr	r2, [pc, #20]	; (801c200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c1ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801c1f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 801c1f2:	2300      	movs	r3, #0
}
 801c1f4:	4618      	mov	r0, r3
 801c1f6:	3714      	adds	r7, #20
 801c1f8:	46bd      	mov	sp, r7
 801c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1fe:	4770      	bx	lr
 801c200:	40007000 	.word	0x40007000
 801c204:	20000000 	.word	0x20000000
 801c208:	431bde83 	.word	0x431bde83

0801c20c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 801c20c:	b480      	push	{r7}
 801c20e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 801c210:	4b05      	ldr	r3, [pc, #20]	; (801c228 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801c212:	689b      	ldr	r3, [r3, #8]
 801c214:	4a04      	ldr	r2, [pc, #16]	; (801c228 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801c216:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801c21a:	6093      	str	r3, [r2, #8]
}
 801c21c:	bf00      	nop
 801c21e:	46bd      	mov	sp, r7
 801c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c224:	4770      	bx	lr
 801c226:	bf00      	nop
 801c228:	40007000 	.word	0x40007000

0801c22c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801c22c:	b580      	push	{r7, lr}
 801c22e:	b088      	sub	sp, #32
 801c230:	af00      	add	r7, sp, #0
 801c232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801c234:	687b      	ldr	r3, [r7, #4]
 801c236:	2b00      	cmp	r3, #0
 801c238:	d101      	bne.n	801c23e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801c23a:	2301      	movs	r3, #1
 801c23c:	e306      	b.n	801c84c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	681b      	ldr	r3, [r3, #0]
 801c242:	f003 0301 	and.w	r3, r3, #1
 801c246:	2b00      	cmp	r3, #0
 801c248:	d075      	beq.n	801c336 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c24a:	4b97      	ldr	r3, [pc, #604]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c24c:	689b      	ldr	r3, [r3, #8]
 801c24e:	f003 030c 	and.w	r3, r3, #12
 801c252:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801c254:	4b94      	ldr	r3, [pc, #592]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c256:	68db      	ldr	r3, [r3, #12]
 801c258:	f003 0303 	and.w	r3, r3, #3
 801c25c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 801c25e:	69bb      	ldr	r3, [r7, #24]
 801c260:	2b0c      	cmp	r3, #12
 801c262:	d102      	bne.n	801c26a <HAL_RCC_OscConfig+0x3e>
 801c264:	697b      	ldr	r3, [r7, #20]
 801c266:	2b03      	cmp	r3, #3
 801c268:	d002      	beq.n	801c270 <HAL_RCC_OscConfig+0x44>
 801c26a:	69bb      	ldr	r3, [r7, #24]
 801c26c:	2b08      	cmp	r3, #8
 801c26e:	d10b      	bne.n	801c288 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c270:	4b8d      	ldr	r3, [pc, #564]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c272:	681b      	ldr	r3, [r3, #0]
 801c274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c278:	2b00      	cmp	r3, #0
 801c27a:	d05b      	beq.n	801c334 <HAL_RCC_OscConfig+0x108>
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	685b      	ldr	r3, [r3, #4]
 801c280:	2b00      	cmp	r3, #0
 801c282:	d157      	bne.n	801c334 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801c284:	2301      	movs	r3, #1
 801c286:	e2e1      	b.n	801c84c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c288:	687b      	ldr	r3, [r7, #4]
 801c28a:	685b      	ldr	r3, [r3, #4]
 801c28c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c290:	d106      	bne.n	801c2a0 <HAL_RCC_OscConfig+0x74>
 801c292:	4b85      	ldr	r3, [pc, #532]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c294:	681b      	ldr	r3, [r3, #0]
 801c296:	4a84      	ldr	r2, [pc, #528]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c29c:	6013      	str	r3, [r2, #0]
 801c29e:	e01d      	b.n	801c2dc <HAL_RCC_OscConfig+0xb0>
 801c2a0:	687b      	ldr	r3, [r7, #4]
 801c2a2:	685b      	ldr	r3, [r3, #4]
 801c2a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c2a8:	d10c      	bne.n	801c2c4 <HAL_RCC_OscConfig+0x98>
 801c2aa:	4b7f      	ldr	r3, [pc, #508]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c2ac:	681b      	ldr	r3, [r3, #0]
 801c2ae:	4a7e      	ldr	r2, [pc, #504]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c2b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801c2b4:	6013      	str	r3, [r2, #0]
 801c2b6:	4b7c      	ldr	r3, [pc, #496]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c2b8:	681b      	ldr	r3, [r3, #0]
 801c2ba:	4a7b      	ldr	r2, [pc, #492]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c2bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c2c0:	6013      	str	r3, [r2, #0]
 801c2c2:	e00b      	b.n	801c2dc <HAL_RCC_OscConfig+0xb0>
 801c2c4:	4b78      	ldr	r3, [pc, #480]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c2c6:	681b      	ldr	r3, [r3, #0]
 801c2c8:	4a77      	ldr	r2, [pc, #476]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c2ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c2ce:	6013      	str	r3, [r2, #0]
 801c2d0:	4b75      	ldr	r3, [pc, #468]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	4a74      	ldr	r2, [pc, #464]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c2d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801c2da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	685b      	ldr	r3, [r3, #4]
 801c2e0:	2b00      	cmp	r3, #0
 801c2e2:	d013      	beq.n	801c30c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c2e4:	f7fc fd0e 	bl	8018d04 <HAL_GetTick>
 801c2e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c2ea:	e008      	b.n	801c2fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c2ec:	f7fc fd0a 	bl	8018d04 <HAL_GetTick>
 801c2f0:	4602      	mov	r2, r0
 801c2f2:	693b      	ldr	r3, [r7, #16]
 801c2f4:	1ad3      	subs	r3, r2, r3
 801c2f6:	2b64      	cmp	r3, #100	; 0x64
 801c2f8:	d901      	bls.n	801c2fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801c2fa:	2303      	movs	r3, #3
 801c2fc:	e2a6      	b.n	801c84c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c2fe:	4b6a      	ldr	r3, [pc, #424]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c300:	681b      	ldr	r3, [r3, #0]
 801c302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c306:	2b00      	cmp	r3, #0
 801c308:	d0f0      	beq.n	801c2ec <HAL_RCC_OscConfig+0xc0>
 801c30a:	e014      	b.n	801c336 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c30c:	f7fc fcfa 	bl	8018d04 <HAL_GetTick>
 801c310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801c312:	e008      	b.n	801c326 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c314:	f7fc fcf6 	bl	8018d04 <HAL_GetTick>
 801c318:	4602      	mov	r2, r0
 801c31a:	693b      	ldr	r3, [r7, #16]
 801c31c:	1ad3      	subs	r3, r2, r3
 801c31e:	2b64      	cmp	r3, #100	; 0x64
 801c320:	d901      	bls.n	801c326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801c322:	2303      	movs	r3, #3
 801c324:	e292      	b.n	801c84c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801c326:	4b60      	ldr	r3, [pc, #384]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c328:	681b      	ldr	r3, [r3, #0]
 801c32a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c32e:	2b00      	cmp	r3, #0
 801c330:	d1f0      	bne.n	801c314 <HAL_RCC_OscConfig+0xe8>
 801c332:	e000      	b.n	801c336 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	681b      	ldr	r3, [r3, #0]
 801c33a:	f003 0302 	and.w	r3, r3, #2
 801c33e:	2b00      	cmp	r3, #0
 801c340:	d075      	beq.n	801c42e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c342:	4b59      	ldr	r3, [pc, #356]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c344:	689b      	ldr	r3, [r3, #8]
 801c346:	f003 030c 	and.w	r3, r3, #12
 801c34a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801c34c:	4b56      	ldr	r3, [pc, #344]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c34e:	68db      	ldr	r3, [r3, #12]
 801c350:	f003 0303 	and.w	r3, r3, #3
 801c354:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 801c356:	69bb      	ldr	r3, [r7, #24]
 801c358:	2b0c      	cmp	r3, #12
 801c35a:	d102      	bne.n	801c362 <HAL_RCC_OscConfig+0x136>
 801c35c:	697b      	ldr	r3, [r7, #20]
 801c35e:	2b02      	cmp	r3, #2
 801c360:	d002      	beq.n	801c368 <HAL_RCC_OscConfig+0x13c>
 801c362:	69bb      	ldr	r3, [r7, #24]
 801c364:	2b04      	cmp	r3, #4
 801c366:	d11f      	bne.n	801c3a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c368:	4b4f      	ldr	r3, [pc, #316]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c36a:	681b      	ldr	r3, [r3, #0]
 801c36c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c370:	2b00      	cmp	r3, #0
 801c372:	d005      	beq.n	801c380 <HAL_RCC_OscConfig+0x154>
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	68db      	ldr	r3, [r3, #12]
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d101      	bne.n	801c380 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 801c37c:	2301      	movs	r3, #1
 801c37e:	e265      	b.n	801c84c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c380:	4b49      	ldr	r3, [pc, #292]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c382:	685b      	ldr	r3, [r3, #4]
 801c384:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	691b      	ldr	r3, [r3, #16]
 801c38c:	061b      	lsls	r3, r3, #24
 801c38e:	4946      	ldr	r1, [pc, #280]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c390:	4313      	orrs	r3, r2
 801c392:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801c394:	4b45      	ldr	r3, [pc, #276]	; (801c4ac <HAL_RCC_OscConfig+0x280>)
 801c396:	681b      	ldr	r3, [r3, #0]
 801c398:	4618      	mov	r0, r3
 801c39a:	f7fc fc67 	bl	8018c6c <HAL_InitTick>
 801c39e:	4603      	mov	r3, r0
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	d043      	beq.n	801c42c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 801c3a4:	2301      	movs	r3, #1
 801c3a6:	e251      	b.n	801c84c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	68db      	ldr	r3, [r3, #12]
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	d023      	beq.n	801c3f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801c3b0:	4b3d      	ldr	r3, [pc, #244]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c3b2:	681b      	ldr	r3, [r3, #0]
 801c3b4:	4a3c      	ldr	r2, [pc, #240]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c3b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c3ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c3bc:	f7fc fca2 	bl	8018d04 <HAL_GetTick>
 801c3c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c3c2:	e008      	b.n	801c3d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c3c4:	f7fc fc9e 	bl	8018d04 <HAL_GetTick>
 801c3c8:	4602      	mov	r2, r0
 801c3ca:	693b      	ldr	r3, [r7, #16]
 801c3cc:	1ad3      	subs	r3, r2, r3
 801c3ce:	2b02      	cmp	r3, #2
 801c3d0:	d901      	bls.n	801c3d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801c3d2:	2303      	movs	r3, #3
 801c3d4:	e23a      	b.n	801c84c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c3d6:	4b34      	ldr	r3, [pc, #208]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d0f0      	beq.n	801c3c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c3e2:	4b31      	ldr	r3, [pc, #196]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c3e4:	685b      	ldr	r3, [r3, #4]
 801c3e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	691b      	ldr	r3, [r3, #16]
 801c3ee:	061b      	lsls	r3, r3, #24
 801c3f0:	492d      	ldr	r1, [pc, #180]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c3f2:	4313      	orrs	r3, r2
 801c3f4:	604b      	str	r3, [r1, #4]
 801c3f6:	e01a      	b.n	801c42e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c3f8:	4b2b      	ldr	r3, [pc, #172]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	4a2a      	ldr	r2, [pc, #168]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c3fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c404:	f7fc fc7e 	bl	8018d04 <HAL_GetTick>
 801c408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c40a:	e008      	b.n	801c41e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c40c:	f7fc fc7a 	bl	8018d04 <HAL_GetTick>
 801c410:	4602      	mov	r2, r0
 801c412:	693b      	ldr	r3, [r7, #16]
 801c414:	1ad3      	subs	r3, r2, r3
 801c416:	2b02      	cmp	r3, #2
 801c418:	d901      	bls.n	801c41e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 801c41a:	2303      	movs	r3, #3
 801c41c:	e216      	b.n	801c84c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c41e:	4b22      	ldr	r3, [pc, #136]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c426:	2b00      	cmp	r3, #0
 801c428:	d1f0      	bne.n	801c40c <HAL_RCC_OscConfig+0x1e0>
 801c42a:	e000      	b.n	801c42e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c42c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	681b      	ldr	r3, [r3, #0]
 801c432:	f003 0308 	and.w	r3, r3, #8
 801c436:	2b00      	cmp	r3, #0
 801c438:	d041      	beq.n	801c4be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	695b      	ldr	r3, [r3, #20]
 801c43e:	2b00      	cmp	r3, #0
 801c440:	d01c      	beq.n	801c47c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c442:	4b19      	ldr	r3, [pc, #100]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c448:	4a17      	ldr	r2, [pc, #92]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c44a:	f043 0301 	orr.w	r3, r3, #1
 801c44e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c452:	f7fc fc57 	bl	8018d04 <HAL_GetTick>
 801c456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c458:	e008      	b.n	801c46c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c45a:	f7fc fc53 	bl	8018d04 <HAL_GetTick>
 801c45e:	4602      	mov	r2, r0
 801c460:	693b      	ldr	r3, [r7, #16]
 801c462:	1ad3      	subs	r3, r2, r3
 801c464:	2b02      	cmp	r3, #2
 801c466:	d901      	bls.n	801c46c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801c468:	2303      	movs	r3, #3
 801c46a:	e1ef      	b.n	801c84c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c46c:	4b0e      	ldr	r3, [pc, #56]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c46e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c472:	f003 0302 	and.w	r3, r3, #2
 801c476:	2b00      	cmp	r3, #0
 801c478:	d0ef      	beq.n	801c45a <HAL_RCC_OscConfig+0x22e>
 801c47a:	e020      	b.n	801c4be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c47c:	4b0a      	ldr	r3, [pc, #40]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c47e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c482:	4a09      	ldr	r2, [pc, #36]	; (801c4a8 <HAL_RCC_OscConfig+0x27c>)
 801c484:	f023 0301 	bic.w	r3, r3, #1
 801c488:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c48c:	f7fc fc3a 	bl	8018d04 <HAL_GetTick>
 801c490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c492:	e00d      	b.n	801c4b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c494:	f7fc fc36 	bl	8018d04 <HAL_GetTick>
 801c498:	4602      	mov	r2, r0
 801c49a:	693b      	ldr	r3, [r7, #16]
 801c49c:	1ad3      	subs	r3, r2, r3
 801c49e:	2b02      	cmp	r3, #2
 801c4a0:	d906      	bls.n	801c4b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801c4a2:	2303      	movs	r3, #3
 801c4a4:	e1d2      	b.n	801c84c <HAL_RCC_OscConfig+0x620>
 801c4a6:	bf00      	nop
 801c4a8:	40021000 	.word	0x40021000
 801c4ac:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c4b0:	4b8c      	ldr	r3, [pc, #560]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c4b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c4b6:	f003 0302 	and.w	r3, r3, #2
 801c4ba:	2b00      	cmp	r3, #0
 801c4bc:	d1ea      	bne.n	801c494 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	681b      	ldr	r3, [r3, #0]
 801c4c2:	f003 0304 	and.w	r3, r3, #4
 801c4c6:	2b00      	cmp	r3, #0
 801c4c8:	f000 80a6 	beq.w	801c618 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 801c4cc:	2300      	movs	r3, #0
 801c4ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801c4d0:	4b84      	ldr	r3, [pc, #528]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c4d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c4d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	d101      	bne.n	801c4e0 <HAL_RCC_OscConfig+0x2b4>
 801c4dc:	2301      	movs	r3, #1
 801c4de:	e000      	b.n	801c4e2 <HAL_RCC_OscConfig+0x2b6>
 801c4e0:	2300      	movs	r3, #0
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	d00d      	beq.n	801c502 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801c4e6:	4b7f      	ldr	r3, [pc, #508]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c4e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c4ea:	4a7e      	ldr	r2, [pc, #504]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c4ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c4f0:	6593      	str	r3, [r2, #88]	; 0x58
 801c4f2:	4b7c      	ldr	r3, [pc, #496]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c4f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c4f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c4fa:	60fb      	str	r3, [r7, #12]
 801c4fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 801c4fe:	2301      	movs	r3, #1
 801c500:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c502:	4b79      	ldr	r3, [pc, #484]	; (801c6e8 <HAL_RCC_OscConfig+0x4bc>)
 801c504:	681b      	ldr	r3, [r3, #0]
 801c506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	d118      	bne.n	801c540 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c50e:	4b76      	ldr	r3, [pc, #472]	; (801c6e8 <HAL_RCC_OscConfig+0x4bc>)
 801c510:	681b      	ldr	r3, [r3, #0]
 801c512:	4a75      	ldr	r2, [pc, #468]	; (801c6e8 <HAL_RCC_OscConfig+0x4bc>)
 801c514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801c51a:	f7fc fbf3 	bl	8018d04 <HAL_GetTick>
 801c51e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c520:	e008      	b.n	801c534 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c522:	f7fc fbef 	bl	8018d04 <HAL_GetTick>
 801c526:	4602      	mov	r2, r0
 801c528:	693b      	ldr	r3, [r7, #16]
 801c52a:	1ad3      	subs	r3, r2, r3
 801c52c:	2b02      	cmp	r3, #2
 801c52e:	d901      	bls.n	801c534 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 801c530:	2303      	movs	r3, #3
 801c532:	e18b      	b.n	801c84c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c534:	4b6c      	ldr	r3, [pc, #432]	; (801c6e8 <HAL_RCC_OscConfig+0x4bc>)
 801c536:	681b      	ldr	r3, [r3, #0]
 801c538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d0f0      	beq.n	801c522 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	689b      	ldr	r3, [r3, #8]
 801c544:	2b01      	cmp	r3, #1
 801c546:	d108      	bne.n	801c55a <HAL_RCC_OscConfig+0x32e>
 801c548:	4b66      	ldr	r3, [pc, #408]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c54a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c54e:	4a65      	ldr	r2, [pc, #404]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c550:	f043 0301 	orr.w	r3, r3, #1
 801c554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c558:	e024      	b.n	801c5a4 <HAL_RCC_OscConfig+0x378>
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	689b      	ldr	r3, [r3, #8]
 801c55e:	2b05      	cmp	r3, #5
 801c560:	d110      	bne.n	801c584 <HAL_RCC_OscConfig+0x358>
 801c562:	4b60      	ldr	r3, [pc, #384]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c568:	4a5e      	ldr	r2, [pc, #376]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c56a:	f043 0304 	orr.w	r3, r3, #4
 801c56e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c572:	4b5c      	ldr	r3, [pc, #368]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c578:	4a5a      	ldr	r2, [pc, #360]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c57a:	f043 0301 	orr.w	r3, r3, #1
 801c57e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c582:	e00f      	b.n	801c5a4 <HAL_RCC_OscConfig+0x378>
 801c584:	4b57      	ldr	r3, [pc, #348]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c58a:	4a56      	ldr	r2, [pc, #344]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c58c:	f023 0301 	bic.w	r3, r3, #1
 801c590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c594:	4b53      	ldr	r3, [pc, #332]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c59a:	4a52      	ldr	r2, [pc, #328]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c59c:	f023 0304 	bic.w	r3, r3, #4
 801c5a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	689b      	ldr	r3, [r3, #8]
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d016      	beq.n	801c5da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c5ac:	f7fc fbaa 	bl	8018d04 <HAL_GetTick>
 801c5b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c5b2:	e00a      	b.n	801c5ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c5b4:	f7fc fba6 	bl	8018d04 <HAL_GetTick>
 801c5b8:	4602      	mov	r2, r0
 801c5ba:	693b      	ldr	r3, [r7, #16]
 801c5bc:	1ad3      	subs	r3, r2, r3
 801c5be:	f241 3288 	movw	r2, #5000	; 0x1388
 801c5c2:	4293      	cmp	r3, r2
 801c5c4:	d901      	bls.n	801c5ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 801c5c6:	2303      	movs	r3, #3
 801c5c8:	e140      	b.n	801c84c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c5ca:	4b46      	ldr	r3, [pc, #280]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c5cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c5d0:	f003 0302 	and.w	r3, r3, #2
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	d0ed      	beq.n	801c5b4 <HAL_RCC_OscConfig+0x388>
 801c5d8:	e015      	b.n	801c606 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c5da:	f7fc fb93 	bl	8018d04 <HAL_GetTick>
 801c5de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c5e0:	e00a      	b.n	801c5f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c5e2:	f7fc fb8f 	bl	8018d04 <HAL_GetTick>
 801c5e6:	4602      	mov	r2, r0
 801c5e8:	693b      	ldr	r3, [r7, #16]
 801c5ea:	1ad3      	subs	r3, r2, r3
 801c5ec:	f241 3288 	movw	r2, #5000	; 0x1388
 801c5f0:	4293      	cmp	r3, r2
 801c5f2:	d901      	bls.n	801c5f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 801c5f4:	2303      	movs	r3, #3
 801c5f6:	e129      	b.n	801c84c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c5f8:	4b3a      	ldr	r3, [pc, #232]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c5fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c5fe:	f003 0302 	and.w	r3, r3, #2
 801c602:	2b00      	cmp	r3, #0
 801c604:	d1ed      	bne.n	801c5e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801c606:	7ffb      	ldrb	r3, [r7, #31]
 801c608:	2b01      	cmp	r3, #1
 801c60a:	d105      	bne.n	801c618 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c60c:	4b35      	ldr	r3, [pc, #212]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c60e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c610:	4a34      	ldr	r2, [pc, #208]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c616:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801c618:	687b      	ldr	r3, [r7, #4]
 801c61a:	681b      	ldr	r3, [r3, #0]
 801c61c:	f003 0320 	and.w	r3, r3, #32
 801c620:	2b00      	cmp	r3, #0
 801c622:	d03c      	beq.n	801c69e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	699b      	ldr	r3, [r3, #24]
 801c628:	2b00      	cmp	r3, #0
 801c62a:	d01c      	beq.n	801c666 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801c62c:	4b2d      	ldr	r3, [pc, #180]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c62e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c632:	4a2c      	ldr	r2, [pc, #176]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c634:	f043 0301 	orr.w	r3, r3, #1
 801c638:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c63c:	f7fc fb62 	bl	8018d04 <HAL_GetTick>
 801c640:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801c642:	e008      	b.n	801c656 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c644:	f7fc fb5e 	bl	8018d04 <HAL_GetTick>
 801c648:	4602      	mov	r2, r0
 801c64a:	693b      	ldr	r3, [r7, #16]
 801c64c:	1ad3      	subs	r3, r2, r3
 801c64e:	2b02      	cmp	r3, #2
 801c650:	d901      	bls.n	801c656 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 801c652:	2303      	movs	r3, #3
 801c654:	e0fa      	b.n	801c84c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801c656:	4b23      	ldr	r3, [pc, #140]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c658:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c65c:	f003 0302 	and.w	r3, r3, #2
 801c660:	2b00      	cmp	r3, #0
 801c662:	d0ef      	beq.n	801c644 <HAL_RCC_OscConfig+0x418>
 801c664:	e01b      	b.n	801c69e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801c666:	4b1f      	ldr	r3, [pc, #124]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c668:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c66c:	4a1d      	ldr	r2, [pc, #116]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c66e:	f023 0301 	bic.w	r3, r3, #1
 801c672:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c676:	f7fc fb45 	bl	8018d04 <HAL_GetTick>
 801c67a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801c67c:	e008      	b.n	801c690 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c67e:	f7fc fb41 	bl	8018d04 <HAL_GetTick>
 801c682:	4602      	mov	r2, r0
 801c684:	693b      	ldr	r3, [r7, #16]
 801c686:	1ad3      	subs	r3, r2, r3
 801c688:	2b02      	cmp	r3, #2
 801c68a:	d901      	bls.n	801c690 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 801c68c:	2303      	movs	r3, #3
 801c68e:	e0dd      	b.n	801c84c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801c690:	4b14      	ldr	r3, [pc, #80]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c692:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c696:	f003 0302 	and.w	r3, r3, #2
 801c69a:	2b00      	cmp	r3, #0
 801c69c:	d1ef      	bne.n	801c67e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801c69e:	687b      	ldr	r3, [r7, #4]
 801c6a0:	69db      	ldr	r3, [r3, #28]
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	f000 80d1 	beq.w	801c84a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801c6a8:	4b0e      	ldr	r3, [pc, #56]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c6aa:	689b      	ldr	r3, [r3, #8]
 801c6ac:	f003 030c 	and.w	r3, r3, #12
 801c6b0:	2b0c      	cmp	r3, #12
 801c6b2:	f000 808b 	beq.w	801c7cc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	69db      	ldr	r3, [r3, #28]
 801c6ba:	2b02      	cmp	r3, #2
 801c6bc:	d15e      	bne.n	801c77c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c6be:	4b09      	ldr	r3, [pc, #36]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c6c0:	681b      	ldr	r3, [r3, #0]
 801c6c2:	4a08      	ldr	r2, [pc, #32]	; (801c6e4 <HAL_RCC_OscConfig+0x4b8>)
 801c6c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c6c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c6ca:	f7fc fb1b 	bl	8018d04 <HAL_GetTick>
 801c6ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c6d0:	e00c      	b.n	801c6ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c6d2:	f7fc fb17 	bl	8018d04 <HAL_GetTick>
 801c6d6:	4602      	mov	r2, r0
 801c6d8:	693b      	ldr	r3, [r7, #16]
 801c6da:	1ad3      	subs	r3, r2, r3
 801c6dc:	2b02      	cmp	r3, #2
 801c6de:	d905      	bls.n	801c6ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 801c6e0:	2303      	movs	r3, #3
 801c6e2:	e0b3      	b.n	801c84c <HAL_RCC_OscConfig+0x620>
 801c6e4:	40021000 	.word	0x40021000
 801c6e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c6ec:	4b59      	ldr	r3, [pc, #356]	; (801c854 <HAL_RCC_OscConfig+0x628>)
 801c6ee:	681b      	ldr	r3, [r3, #0]
 801c6f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c6f4:	2b00      	cmp	r3, #0
 801c6f6:	d1ec      	bne.n	801c6d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c6f8:	4b56      	ldr	r3, [pc, #344]	; (801c854 <HAL_RCC_OscConfig+0x628>)
 801c6fa:	68da      	ldr	r2, [r3, #12]
 801c6fc:	4b56      	ldr	r3, [pc, #344]	; (801c858 <HAL_RCC_OscConfig+0x62c>)
 801c6fe:	4013      	ands	r3, r2
 801c700:	687a      	ldr	r2, [r7, #4]
 801c702:	6a11      	ldr	r1, [r2, #32]
 801c704:	687a      	ldr	r2, [r7, #4]
 801c706:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801c708:	3a01      	subs	r2, #1
 801c70a:	0112      	lsls	r2, r2, #4
 801c70c:	4311      	orrs	r1, r2
 801c70e:	687a      	ldr	r2, [r7, #4]
 801c710:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801c712:	0212      	lsls	r2, r2, #8
 801c714:	4311      	orrs	r1, r2
 801c716:	687a      	ldr	r2, [r7, #4]
 801c718:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801c71a:	0852      	lsrs	r2, r2, #1
 801c71c:	3a01      	subs	r2, #1
 801c71e:	0552      	lsls	r2, r2, #21
 801c720:	4311      	orrs	r1, r2
 801c722:	687a      	ldr	r2, [r7, #4]
 801c724:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801c726:	0852      	lsrs	r2, r2, #1
 801c728:	3a01      	subs	r2, #1
 801c72a:	0652      	lsls	r2, r2, #25
 801c72c:	4311      	orrs	r1, r2
 801c72e:	687a      	ldr	r2, [r7, #4]
 801c730:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801c732:	06d2      	lsls	r2, r2, #27
 801c734:	430a      	orrs	r2, r1
 801c736:	4947      	ldr	r1, [pc, #284]	; (801c854 <HAL_RCC_OscConfig+0x628>)
 801c738:	4313      	orrs	r3, r2
 801c73a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c73c:	4b45      	ldr	r3, [pc, #276]	; (801c854 <HAL_RCC_OscConfig+0x628>)
 801c73e:	681b      	ldr	r3, [r3, #0]
 801c740:	4a44      	ldr	r2, [pc, #272]	; (801c854 <HAL_RCC_OscConfig+0x628>)
 801c742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c746:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801c748:	4b42      	ldr	r3, [pc, #264]	; (801c854 <HAL_RCC_OscConfig+0x628>)
 801c74a:	68db      	ldr	r3, [r3, #12]
 801c74c:	4a41      	ldr	r2, [pc, #260]	; (801c854 <HAL_RCC_OscConfig+0x628>)
 801c74e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c752:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c754:	f7fc fad6 	bl	8018d04 <HAL_GetTick>
 801c758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c75a:	e008      	b.n	801c76e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c75c:	f7fc fad2 	bl	8018d04 <HAL_GetTick>
 801c760:	4602      	mov	r2, r0
 801c762:	693b      	ldr	r3, [r7, #16]
 801c764:	1ad3      	subs	r3, r2, r3
 801c766:	2b02      	cmp	r3, #2
 801c768:	d901      	bls.n	801c76e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 801c76a:	2303      	movs	r3, #3
 801c76c:	e06e      	b.n	801c84c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c76e:	4b39      	ldr	r3, [pc, #228]	; (801c854 <HAL_RCC_OscConfig+0x628>)
 801c770:	681b      	ldr	r3, [r3, #0]
 801c772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c776:	2b00      	cmp	r3, #0
 801c778:	d0f0      	beq.n	801c75c <HAL_RCC_OscConfig+0x530>
 801c77a:	e066      	b.n	801c84a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c77c:	4b35      	ldr	r3, [pc, #212]	; (801c854 <HAL_RCC_OscConfig+0x628>)
 801c77e:	681b      	ldr	r3, [r3, #0]
 801c780:	4a34      	ldr	r2, [pc, #208]	; (801c854 <HAL_RCC_OscConfig+0x628>)
 801c782:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c786:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 801c788:	4b32      	ldr	r3, [pc, #200]	; (801c854 <HAL_RCC_OscConfig+0x628>)
 801c78a:	68db      	ldr	r3, [r3, #12]
 801c78c:	4a31      	ldr	r2, [pc, #196]	; (801c854 <HAL_RCC_OscConfig+0x628>)
 801c78e:	f023 0303 	bic.w	r3, r3, #3
 801c792:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 801c794:	4b2f      	ldr	r3, [pc, #188]	; (801c854 <HAL_RCC_OscConfig+0x628>)
 801c796:	68db      	ldr	r3, [r3, #12]
 801c798:	4a2e      	ldr	r2, [pc, #184]	; (801c854 <HAL_RCC_OscConfig+0x628>)
 801c79a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 801c79e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c7a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c7a4:	f7fc faae 	bl	8018d04 <HAL_GetTick>
 801c7a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c7aa:	e008      	b.n	801c7be <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c7ac:	f7fc faaa 	bl	8018d04 <HAL_GetTick>
 801c7b0:	4602      	mov	r2, r0
 801c7b2:	693b      	ldr	r3, [r7, #16]
 801c7b4:	1ad3      	subs	r3, r2, r3
 801c7b6:	2b02      	cmp	r3, #2
 801c7b8:	d901      	bls.n	801c7be <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 801c7ba:	2303      	movs	r3, #3
 801c7bc:	e046      	b.n	801c84c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c7be:	4b25      	ldr	r3, [pc, #148]	; (801c854 <HAL_RCC_OscConfig+0x628>)
 801c7c0:	681b      	ldr	r3, [r3, #0]
 801c7c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	d1f0      	bne.n	801c7ac <HAL_RCC_OscConfig+0x580>
 801c7ca:	e03e      	b.n	801c84a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	69db      	ldr	r3, [r3, #28]
 801c7d0:	2b01      	cmp	r3, #1
 801c7d2:	d101      	bne.n	801c7d8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 801c7d4:	2301      	movs	r3, #1
 801c7d6:	e039      	b.n	801c84c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 801c7d8:	4b1e      	ldr	r3, [pc, #120]	; (801c854 <HAL_RCC_OscConfig+0x628>)
 801c7da:	68db      	ldr	r3, [r3, #12]
 801c7dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c7de:	697b      	ldr	r3, [r7, #20]
 801c7e0:	f003 0203 	and.w	r2, r3, #3
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	6a1b      	ldr	r3, [r3, #32]
 801c7e8:	429a      	cmp	r2, r3
 801c7ea:	d12c      	bne.n	801c846 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c7ec:	697b      	ldr	r3, [r7, #20]
 801c7ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801c7f2:	687b      	ldr	r3, [r7, #4]
 801c7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7f6:	3b01      	subs	r3, #1
 801c7f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c7fa:	429a      	cmp	r2, r3
 801c7fc:	d123      	bne.n	801c846 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801c7fe:	697b      	ldr	r3, [r7, #20]
 801c800:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c808:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c80a:	429a      	cmp	r2, r3
 801c80c:	d11b      	bne.n	801c846 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801c80e:	697b      	ldr	r3, [r7, #20]
 801c810:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c818:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801c81a:	429a      	cmp	r2, r3
 801c81c:	d113      	bne.n	801c846 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c81e:	697b      	ldr	r3, [r7, #20]
 801c820:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801c824:	687b      	ldr	r3, [r7, #4]
 801c826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c828:	085b      	lsrs	r3, r3, #1
 801c82a:	3b01      	subs	r3, #1
 801c82c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801c82e:	429a      	cmp	r2, r3
 801c830:	d109      	bne.n	801c846 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801c832:	697b      	ldr	r3, [r7, #20]
 801c834:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c83c:	085b      	lsrs	r3, r3, #1
 801c83e:	3b01      	subs	r3, #1
 801c840:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c842:	429a      	cmp	r2, r3
 801c844:	d001      	beq.n	801c84a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 801c846:	2301      	movs	r3, #1
 801c848:	e000      	b.n	801c84c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 801c84a:	2300      	movs	r3, #0
}
 801c84c:	4618      	mov	r0, r3
 801c84e:	3720      	adds	r7, #32
 801c850:	46bd      	mov	sp, r7
 801c852:	bd80      	pop	{r7, pc}
 801c854:	40021000 	.word	0x40021000
 801c858:	019f800c 	.word	0x019f800c

0801c85c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801c85c:	b580      	push	{r7, lr}
 801c85e:	b086      	sub	sp, #24
 801c860:	af00      	add	r7, sp, #0
 801c862:	6078      	str	r0, [r7, #4]
 801c864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801c866:	2300      	movs	r3, #0
 801c868:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d101      	bne.n	801c874 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801c870:	2301      	movs	r3, #1
 801c872:	e11e      	b.n	801cab2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801c874:	4b91      	ldr	r3, [pc, #580]	; (801cabc <HAL_RCC_ClockConfig+0x260>)
 801c876:	681b      	ldr	r3, [r3, #0]
 801c878:	f003 030f 	and.w	r3, r3, #15
 801c87c:	683a      	ldr	r2, [r7, #0]
 801c87e:	429a      	cmp	r2, r3
 801c880:	d910      	bls.n	801c8a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c882:	4b8e      	ldr	r3, [pc, #568]	; (801cabc <HAL_RCC_ClockConfig+0x260>)
 801c884:	681b      	ldr	r3, [r3, #0]
 801c886:	f023 020f 	bic.w	r2, r3, #15
 801c88a:	498c      	ldr	r1, [pc, #560]	; (801cabc <HAL_RCC_ClockConfig+0x260>)
 801c88c:	683b      	ldr	r3, [r7, #0]
 801c88e:	4313      	orrs	r3, r2
 801c890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c892:	4b8a      	ldr	r3, [pc, #552]	; (801cabc <HAL_RCC_ClockConfig+0x260>)
 801c894:	681b      	ldr	r3, [r3, #0]
 801c896:	f003 030f 	and.w	r3, r3, #15
 801c89a:	683a      	ldr	r2, [r7, #0]
 801c89c:	429a      	cmp	r2, r3
 801c89e:	d001      	beq.n	801c8a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801c8a0:	2301      	movs	r3, #1
 801c8a2:	e106      	b.n	801cab2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	681b      	ldr	r3, [r3, #0]
 801c8a8:	f003 0301 	and.w	r3, r3, #1
 801c8ac:	2b00      	cmp	r3, #0
 801c8ae:	d073      	beq.n	801c998 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801c8b0:	687b      	ldr	r3, [r7, #4]
 801c8b2:	685b      	ldr	r3, [r3, #4]
 801c8b4:	2b03      	cmp	r3, #3
 801c8b6:	d129      	bne.n	801c90c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c8b8:	4b81      	ldr	r3, [pc, #516]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801c8ba:	681b      	ldr	r3, [r3, #0]
 801c8bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	d101      	bne.n	801c8c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 801c8c4:	2301      	movs	r3, #1
 801c8c6:	e0f4      	b.n	801cab2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 801c8c8:	f000 f99c 	bl	801cc04 <RCC_GetSysClockFreqFromPLLSource>
 801c8cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 801c8ce:	693b      	ldr	r3, [r7, #16]
 801c8d0:	4a7c      	ldr	r2, [pc, #496]	; (801cac4 <HAL_RCC_ClockConfig+0x268>)
 801c8d2:	4293      	cmp	r3, r2
 801c8d4:	d93f      	bls.n	801c956 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801c8d6:	4b7a      	ldr	r3, [pc, #488]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801c8d8:	689b      	ldr	r3, [r3, #8]
 801c8da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d009      	beq.n	801c8f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801c8e2:	687b      	ldr	r3, [r7, #4]
 801c8e4:	681b      	ldr	r3, [r3, #0]
 801c8e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d033      	beq.n	801c956 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801c8f2:	2b00      	cmp	r3, #0
 801c8f4:	d12f      	bne.n	801c956 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801c8f6:	4b72      	ldr	r3, [pc, #456]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801c8f8:	689b      	ldr	r3, [r3, #8]
 801c8fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801c8fe:	4a70      	ldr	r2, [pc, #448]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801c900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c904:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801c906:	2380      	movs	r3, #128	; 0x80
 801c908:	617b      	str	r3, [r7, #20]
 801c90a:	e024      	b.n	801c956 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c90c:	687b      	ldr	r3, [r7, #4]
 801c90e:	685b      	ldr	r3, [r3, #4]
 801c910:	2b02      	cmp	r3, #2
 801c912:	d107      	bne.n	801c924 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c914:	4b6a      	ldr	r3, [pc, #424]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801c916:	681b      	ldr	r3, [r3, #0]
 801c918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c91c:	2b00      	cmp	r3, #0
 801c91e:	d109      	bne.n	801c934 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801c920:	2301      	movs	r3, #1
 801c922:	e0c6      	b.n	801cab2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c924:	4b66      	ldr	r3, [pc, #408]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801c926:	681b      	ldr	r3, [r3, #0]
 801c928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d101      	bne.n	801c934 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801c930:	2301      	movs	r3, #1
 801c932:	e0be      	b.n	801cab2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 801c934:	f000 f8ce 	bl	801cad4 <HAL_RCC_GetSysClockFreq>
 801c938:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 801c93a:	693b      	ldr	r3, [r7, #16]
 801c93c:	4a61      	ldr	r2, [pc, #388]	; (801cac4 <HAL_RCC_ClockConfig+0x268>)
 801c93e:	4293      	cmp	r3, r2
 801c940:	d909      	bls.n	801c956 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801c942:	4b5f      	ldr	r3, [pc, #380]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801c944:	689b      	ldr	r3, [r3, #8]
 801c946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801c94a:	4a5d      	ldr	r2, [pc, #372]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801c94c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c950:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 801c952:	2380      	movs	r3, #128	; 0x80
 801c954:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801c956:	4b5a      	ldr	r3, [pc, #360]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801c958:	689b      	ldr	r3, [r3, #8]
 801c95a:	f023 0203 	bic.w	r2, r3, #3
 801c95e:	687b      	ldr	r3, [r7, #4]
 801c960:	685b      	ldr	r3, [r3, #4]
 801c962:	4957      	ldr	r1, [pc, #348]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801c964:	4313      	orrs	r3, r2
 801c966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c968:	f7fc f9cc 	bl	8018d04 <HAL_GetTick>
 801c96c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c96e:	e00a      	b.n	801c986 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c970:	f7fc f9c8 	bl	8018d04 <HAL_GetTick>
 801c974:	4602      	mov	r2, r0
 801c976:	68fb      	ldr	r3, [r7, #12]
 801c978:	1ad3      	subs	r3, r2, r3
 801c97a:	f241 3288 	movw	r2, #5000	; 0x1388
 801c97e:	4293      	cmp	r3, r2
 801c980:	d901      	bls.n	801c986 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 801c982:	2303      	movs	r3, #3
 801c984:	e095      	b.n	801cab2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c986:	4b4e      	ldr	r3, [pc, #312]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801c988:	689b      	ldr	r3, [r3, #8]
 801c98a:	f003 020c 	and.w	r2, r3, #12
 801c98e:	687b      	ldr	r3, [r7, #4]
 801c990:	685b      	ldr	r3, [r3, #4]
 801c992:	009b      	lsls	r3, r3, #2
 801c994:	429a      	cmp	r2, r3
 801c996:	d1eb      	bne.n	801c970 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c998:	687b      	ldr	r3, [r7, #4]
 801c99a:	681b      	ldr	r3, [r3, #0]
 801c99c:	f003 0302 	and.w	r3, r3, #2
 801c9a0:	2b00      	cmp	r3, #0
 801c9a2:	d023      	beq.n	801c9ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	f003 0304 	and.w	r3, r3, #4
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	d005      	beq.n	801c9bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801c9b0:	4b43      	ldr	r3, [pc, #268]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801c9b2:	689b      	ldr	r3, [r3, #8]
 801c9b4:	4a42      	ldr	r2, [pc, #264]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801c9b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801c9ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	681b      	ldr	r3, [r3, #0]
 801c9c0:	f003 0308 	and.w	r3, r3, #8
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	d007      	beq.n	801c9d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 801c9c8:	4b3d      	ldr	r3, [pc, #244]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801c9ca:	689b      	ldr	r3, [r3, #8]
 801c9cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c9d0:	4a3b      	ldr	r2, [pc, #236]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801c9d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801c9d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c9d8:	4b39      	ldr	r3, [pc, #228]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801c9da:	689b      	ldr	r3, [r3, #8]
 801c9dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	689b      	ldr	r3, [r3, #8]
 801c9e4:	4936      	ldr	r1, [pc, #216]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801c9e6:	4313      	orrs	r3, r2
 801c9e8:	608b      	str	r3, [r1, #8]
 801c9ea:	e008      	b.n	801c9fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 801c9ec:	697b      	ldr	r3, [r7, #20]
 801c9ee:	2b80      	cmp	r3, #128	; 0x80
 801c9f0:	d105      	bne.n	801c9fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801c9f2:	4b33      	ldr	r3, [pc, #204]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801c9f4:	689b      	ldr	r3, [r3, #8]
 801c9f6:	4a32      	ldr	r2, [pc, #200]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801c9f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801c9fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801c9fe:	4b2f      	ldr	r3, [pc, #188]	; (801cabc <HAL_RCC_ClockConfig+0x260>)
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	f003 030f 	and.w	r3, r3, #15
 801ca06:	683a      	ldr	r2, [r7, #0]
 801ca08:	429a      	cmp	r2, r3
 801ca0a:	d21d      	bcs.n	801ca48 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ca0c:	4b2b      	ldr	r3, [pc, #172]	; (801cabc <HAL_RCC_ClockConfig+0x260>)
 801ca0e:	681b      	ldr	r3, [r3, #0]
 801ca10:	f023 020f 	bic.w	r2, r3, #15
 801ca14:	4929      	ldr	r1, [pc, #164]	; (801cabc <HAL_RCC_ClockConfig+0x260>)
 801ca16:	683b      	ldr	r3, [r7, #0]
 801ca18:	4313      	orrs	r3, r2
 801ca1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801ca1c:	f7fc f972 	bl	8018d04 <HAL_GetTick>
 801ca20:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ca22:	e00a      	b.n	801ca3a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ca24:	f7fc f96e 	bl	8018d04 <HAL_GetTick>
 801ca28:	4602      	mov	r2, r0
 801ca2a:	68fb      	ldr	r3, [r7, #12]
 801ca2c:	1ad3      	subs	r3, r2, r3
 801ca2e:	f241 3288 	movw	r2, #5000	; 0x1388
 801ca32:	4293      	cmp	r3, r2
 801ca34:	d901      	bls.n	801ca3a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 801ca36:	2303      	movs	r3, #3
 801ca38:	e03b      	b.n	801cab2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ca3a:	4b20      	ldr	r3, [pc, #128]	; (801cabc <HAL_RCC_ClockConfig+0x260>)
 801ca3c:	681b      	ldr	r3, [r3, #0]
 801ca3e:	f003 030f 	and.w	r3, r3, #15
 801ca42:	683a      	ldr	r2, [r7, #0]
 801ca44:	429a      	cmp	r2, r3
 801ca46:	d1ed      	bne.n	801ca24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801ca48:	687b      	ldr	r3, [r7, #4]
 801ca4a:	681b      	ldr	r3, [r3, #0]
 801ca4c:	f003 0304 	and.w	r3, r3, #4
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	d008      	beq.n	801ca66 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801ca54:	4b1a      	ldr	r3, [pc, #104]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801ca56:	689b      	ldr	r3, [r3, #8]
 801ca58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801ca5c:	687b      	ldr	r3, [r7, #4]
 801ca5e:	68db      	ldr	r3, [r3, #12]
 801ca60:	4917      	ldr	r1, [pc, #92]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801ca62:	4313      	orrs	r3, r2
 801ca64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801ca66:	687b      	ldr	r3, [r7, #4]
 801ca68:	681b      	ldr	r3, [r3, #0]
 801ca6a:	f003 0308 	and.w	r3, r3, #8
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d009      	beq.n	801ca86 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801ca72:	4b13      	ldr	r3, [pc, #76]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801ca74:	689b      	ldr	r3, [r3, #8]
 801ca76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	691b      	ldr	r3, [r3, #16]
 801ca7e:	00db      	lsls	r3, r3, #3
 801ca80:	490f      	ldr	r1, [pc, #60]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801ca82:	4313      	orrs	r3, r2
 801ca84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801ca86:	f000 f825 	bl	801cad4 <HAL_RCC_GetSysClockFreq>
 801ca8a:	4602      	mov	r2, r0
 801ca8c:	4b0c      	ldr	r3, [pc, #48]	; (801cac0 <HAL_RCC_ClockConfig+0x264>)
 801ca8e:	689b      	ldr	r3, [r3, #8]
 801ca90:	091b      	lsrs	r3, r3, #4
 801ca92:	f003 030f 	and.w	r3, r3, #15
 801ca96:	490c      	ldr	r1, [pc, #48]	; (801cac8 <HAL_RCC_ClockConfig+0x26c>)
 801ca98:	5ccb      	ldrb	r3, [r1, r3]
 801ca9a:	f003 031f 	and.w	r3, r3, #31
 801ca9e:	fa22 f303 	lsr.w	r3, r2, r3
 801caa2:	4a0a      	ldr	r2, [pc, #40]	; (801cacc <HAL_RCC_ClockConfig+0x270>)
 801caa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 801caa6:	4b0a      	ldr	r3, [pc, #40]	; (801cad0 <HAL_RCC_ClockConfig+0x274>)
 801caa8:	681b      	ldr	r3, [r3, #0]
 801caaa:	4618      	mov	r0, r3
 801caac:	f7fc f8de 	bl	8018c6c <HAL_InitTick>
 801cab0:	4603      	mov	r3, r0
}
 801cab2:	4618      	mov	r0, r3
 801cab4:	3718      	adds	r7, #24
 801cab6:	46bd      	mov	sp, r7
 801cab8:	bd80      	pop	{r7, pc}
 801caba:	bf00      	nop
 801cabc:	40022000 	.word	0x40022000
 801cac0:	40021000 	.word	0x40021000
 801cac4:	04c4b400 	.word	0x04c4b400
 801cac8:	080236d8 	.word	0x080236d8
 801cacc:	20000000 	.word	0x20000000
 801cad0:	20000004 	.word	0x20000004

0801cad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801cad4:	b480      	push	{r7}
 801cad6:	b087      	sub	sp, #28
 801cad8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 801cada:	4b2c      	ldr	r3, [pc, #176]	; (801cb8c <HAL_RCC_GetSysClockFreq+0xb8>)
 801cadc:	689b      	ldr	r3, [r3, #8]
 801cade:	f003 030c 	and.w	r3, r3, #12
 801cae2:	2b04      	cmp	r3, #4
 801cae4:	d102      	bne.n	801caec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801cae6:	4b2a      	ldr	r3, [pc, #168]	; (801cb90 <HAL_RCC_GetSysClockFreq+0xbc>)
 801cae8:	613b      	str	r3, [r7, #16]
 801caea:	e047      	b.n	801cb7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 801caec:	4b27      	ldr	r3, [pc, #156]	; (801cb8c <HAL_RCC_GetSysClockFreq+0xb8>)
 801caee:	689b      	ldr	r3, [r3, #8]
 801caf0:	f003 030c 	and.w	r3, r3, #12
 801caf4:	2b08      	cmp	r3, #8
 801caf6:	d102      	bne.n	801cafe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801caf8:	4b25      	ldr	r3, [pc, #148]	; (801cb90 <HAL_RCC_GetSysClockFreq+0xbc>)
 801cafa:	613b      	str	r3, [r7, #16]
 801cafc:	e03e      	b.n	801cb7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 801cafe:	4b23      	ldr	r3, [pc, #140]	; (801cb8c <HAL_RCC_GetSysClockFreq+0xb8>)
 801cb00:	689b      	ldr	r3, [r3, #8]
 801cb02:	f003 030c 	and.w	r3, r3, #12
 801cb06:	2b0c      	cmp	r3, #12
 801cb08:	d136      	bne.n	801cb78 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801cb0a:	4b20      	ldr	r3, [pc, #128]	; (801cb8c <HAL_RCC_GetSysClockFreq+0xb8>)
 801cb0c:	68db      	ldr	r3, [r3, #12]
 801cb0e:	f003 0303 	and.w	r3, r3, #3
 801cb12:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801cb14:	4b1d      	ldr	r3, [pc, #116]	; (801cb8c <HAL_RCC_GetSysClockFreq+0xb8>)
 801cb16:	68db      	ldr	r3, [r3, #12]
 801cb18:	091b      	lsrs	r3, r3, #4
 801cb1a:	f003 030f 	and.w	r3, r3, #15
 801cb1e:	3301      	adds	r3, #1
 801cb20:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801cb22:	68fb      	ldr	r3, [r7, #12]
 801cb24:	2b03      	cmp	r3, #3
 801cb26:	d10c      	bne.n	801cb42 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801cb28:	4a19      	ldr	r2, [pc, #100]	; (801cb90 <HAL_RCC_GetSysClockFreq+0xbc>)
 801cb2a:	68bb      	ldr	r3, [r7, #8]
 801cb2c:	fbb2 f3f3 	udiv	r3, r2, r3
 801cb30:	4a16      	ldr	r2, [pc, #88]	; (801cb8c <HAL_RCC_GetSysClockFreq+0xb8>)
 801cb32:	68d2      	ldr	r2, [r2, #12]
 801cb34:	0a12      	lsrs	r2, r2, #8
 801cb36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801cb3a:	fb02 f303 	mul.w	r3, r2, r3
 801cb3e:	617b      	str	r3, [r7, #20]
      break;
 801cb40:	e00c      	b.n	801cb5c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801cb42:	4a13      	ldr	r2, [pc, #76]	; (801cb90 <HAL_RCC_GetSysClockFreq+0xbc>)
 801cb44:	68bb      	ldr	r3, [r7, #8]
 801cb46:	fbb2 f3f3 	udiv	r3, r2, r3
 801cb4a:	4a10      	ldr	r2, [pc, #64]	; (801cb8c <HAL_RCC_GetSysClockFreq+0xb8>)
 801cb4c:	68d2      	ldr	r2, [r2, #12]
 801cb4e:	0a12      	lsrs	r2, r2, #8
 801cb50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801cb54:	fb02 f303 	mul.w	r3, r2, r3
 801cb58:	617b      	str	r3, [r7, #20]
      break;
 801cb5a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801cb5c:	4b0b      	ldr	r3, [pc, #44]	; (801cb8c <HAL_RCC_GetSysClockFreq+0xb8>)
 801cb5e:	68db      	ldr	r3, [r3, #12]
 801cb60:	0e5b      	lsrs	r3, r3, #25
 801cb62:	f003 0303 	and.w	r3, r3, #3
 801cb66:	3301      	adds	r3, #1
 801cb68:	005b      	lsls	r3, r3, #1
 801cb6a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 801cb6c:	697a      	ldr	r2, [r7, #20]
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	fbb2 f3f3 	udiv	r3, r2, r3
 801cb74:	613b      	str	r3, [r7, #16]
 801cb76:	e001      	b.n	801cb7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 801cb78:	2300      	movs	r3, #0
 801cb7a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 801cb7c:	693b      	ldr	r3, [r7, #16]
}
 801cb7e:	4618      	mov	r0, r3
 801cb80:	371c      	adds	r7, #28
 801cb82:	46bd      	mov	sp, r7
 801cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb88:	4770      	bx	lr
 801cb8a:	bf00      	nop
 801cb8c:	40021000 	.word	0x40021000
 801cb90:	00f42400 	.word	0x00f42400

0801cb94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801cb94:	b480      	push	{r7}
 801cb96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801cb98:	4b03      	ldr	r3, [pc, #12]	; (801cba8 <HAL_RCC_GetHCLKFreq+0x14>)
 801cb9a:	681b      	ldr	r3, [r3, #0]
}
 801cb9c:	4618      	mov	r0, r3
 801cb9e:	46bd      	mov	sp, r7
 801cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cba4:	4770      	bx	lr
 801cba6:	bf00      	nop
 801cba8:	20000000 	.word	0x20000000

0801cbac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801cbac:	b580      	push	{r7, lr}
 801cbae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801cbb0:	f7ff fff0 	bl	801cb94 <HAL_RCC_GetHCLKFreq>
 801cbb4:	4602      	mov	r2, r0
 801cbb6:	4b06      	ldr	r3, [pc, #24]	; (801cbd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 801cbb8:	689b      	ldr	r3, [r3, #8]
 801cbba:	0a1b      	lsrs	r3, r3, #8
 801cbbc:	f003 0307 	and.w	r3, r3, #7
 801cbc0:	4904      	ldr	r1, [pc, #16]	; (801cbd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 801cbc2:	5ccb      	ldrb	r3, [r1, r3]
 801cbc4:	f003 031f 	and.w	r3, r3, #31
 801cbc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 801cbcc:	4618      	mov	r0, r3
 801cbce:	bd80      	pop	{r7, pc}
 801cbd0:	40021000 	.word	0x40021000
 801cbd4:	080236e8 	.word	0x080236e8

0801cbd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801cbd8:	b580      	push	{r7, lr}
 801cbda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801cbdc:	f7ff ffda 	bl	801cb94 <HAL_RCC_GetHCLKFreq>
 801cbe0:	4602      	mov	r2, r0
 801cbe2:	4b06      	ldr	r3, [pc, #24]	; (801cbfc <HAL_RCC_GetPCLK2Freq+0x24>)
 801cbe4:	689b      	ldr	r3, [r3, #8]
 801cbe6:	0adb      	lsrs	r3, r3, #11
 801cbe8:	f003 0307 	and.w	r3, r3, #7
 801cbec:	4904      	ldr	r1, [pc, #16]	; (801cc00 <HAL_RCC_GetPCLK2Freq+0x28>)
 801cbee:	5ccb      	ldrb	r3, [r1, r3]
 801cbf0:	f003 031f 	and.w	r3, r3, #31
 801cbf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 801cbf8:	4618      	mov	r0, r3
 801cbfa:	bd80      	pop	{r7, pc}
 801cbfc:	40021000 	.word	0x40021000
 801cc00:	080236e8 	.word	0x080236e8

0801cc04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 801cc04:	b480      	push	{r7}
 801cc06:	b087      	sub	sp, #28
 801cc08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801cc0a:	4b1e      	ldr	r3, [pc, #120]	; (801cc84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801cc0c:	68db      	ldr	r3, [r3, #12]
 801cc0e:	f003 0303 	and.w	r3, r3, #3
 801cc12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801cc14:	4b1b      	ldr	r3, [pc, #108]	; (801cc84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801cc16:	68db      	ldr	r3, [r3, #12]
 801cc18:	091b      	lsrs	r3, r3, #4
 801cc1a:	f003 030f 	and.w	r3, r3, #15
 801cc1e:	3301      	adds	r3, #1
 801cc20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 801cc22:	693b      	ldr	r3, [r7, #16]
 801cc24:	2b03      	cmp	r3, #3
 801cc26:	d10c      	bne.n	801cc42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801cc28:	4a17      	ldr	r2, [pc, #92]	; (801cc88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801cc2a:	68fb      	ldr	r3, [r7, #12]
 801cc2c:	fbb2 f3f3 	udiv	r3, r2, r3
 801cc30:	4a14      	ldr	r2, [pc, #80]	; (801cc84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801cc32:	68d2      	ldr	r2, [r2, #12]
 801cc34:	0a12      	lsrs	r2, r2, #8
 801cc36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801cc3a:	fb02 f303 	mul.w	r3, r2, r3
 801cc3e:	617b      	str	r3, [r7, #20]
    break;
 801cc40:	e00c      	b.n	801cc5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801cc42:	4a11      	ldr	r2, [pc, #68]	; (801cc88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801cc44:	68fb      	ldr	r3, [r7, #12]
 801cc46:	fbb2 f3f3 	udiv	r3, r2, r3
 801cc4a:	4a0e      	ldr	r2, [pc, #56]	; (801cc84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801cc4c:	68d2      	ldr	r2, [r2, #12]
 801cc4e:	0a12      	lsrs	r2, r2, #8
 801cc50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801cc54:	fb02 f303 	mul.w	r3, r2, r3
 801cc58:	617b      	str	r3, [r7, #20]
    break;
 801cc5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801cc5c:	4b09      	ldr	r3, [pc, #36]	; (801cc84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801cc5e:	68db      	ldr	r3, [r3, #12]
 801cc60:	0e5b      	lsrs	r3, r3, #25
 801cc62:	f003 0303 	and.w	r3, r3, #3
 801cc66:	3301      	adds	r3, #1
 801cc68:	005b      	lsls	r3, r3, #1
 801cc6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 801cc6c:	697a      	ldr	r2, [r7, #20]
 801cc6e:	68bb      	ldr	r3, [r7, #8]
 801cc70:	fbb2 f3f3 	udiv	r3, r2, r3
 801cc74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 801cc76:	687b      	ldr	r3, [r7, #4]
}
 801cc78:	4618      	mov	r0, r3
 801cc7a:	371c      	adds	r7, #28
 801cc7c:	46bd      	mov	sp, r7
 801cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc82:	4770      	bx	lr
 801cc84:	40021000 	.word	0x40021000
 801cc88:	00f42400 	.word	0x00f42400

0801cc8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801cc8c:	b580      	push	{r7, lr}
 801cc8e:	b086      	sub	sp, #24
 801cc90:	af00      	add	r7, sp, #0
 801cc92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801cc94:	2300      	movs	r3, #0
 801cc96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801cc98:	2300      	movs	r3, #0
 801cc9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	681b      	ldr	r3, [r3, #0]
 801cca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	f000 8098 	beq.w	801cdda <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801ccaa:	2300      	movs	r3, #0
 801ccac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801ccae:	4b43      	ldr	r3, [pc, #268]	; (801cdbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ccb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ccb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d10d      	bne.n	801ccd6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801ccba:	4b40      	ldr	r3, [pc, #256]	; (801cdbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ccbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ccbe:	4a3f      	ldr	r2, [pc, #252]	; (801cdbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ccc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ccc4:	6593      	str	r3, [r2, #88]	; 0x58
 801ccc6:	4b3d      	ldr	r3, [pc, #244]	; (801cdbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ccc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ccca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ccce:	60bb      	str	r3, [r7, #8]
 801ccd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801ccd2:	2301      	movs	r3, #1
 801ccd4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801ccd6:	4b3a      	ldr	r3, [pc, #232]	; (801cdc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801ccd8:	681b      	ldr	r3, [r3, #0]
 801ccda:	4a39      	ldr	r2, [pc, #228]	; (801cdc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801ccdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801cce0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801cce2:	f7fc f80f 	bl	8018d04 <HAL_GetTick>
 801cce6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801cce8:	e009      	b.n	801ccfe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801ccea:	f7fc f80b 	bl	8018d04 <HAL_GetTick>
 801ccee:	4602      	mov	r2, r0
 801ccf0:	68fb      	ldr	r3, [r7, #12]
 801ccf2:	1ad3      	subs	r3, r2, r3
 801ccf4:	2b02      	cmp	r3, #2
 801ccf6:	d902      	bls.n	801ccfe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 801ccf8:	2303      	movs	r3, #3
 801ccfa:	74fb      	strb	r3, [r7, #19]
        break;
 801ccfc:	e005      	b.n	801cd0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801ccfe:	4b30      	ldr	r3, [pc, #192]	; (801cdc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801cd00:	681b      	ldr	r3, [r3, #0]
 801cd02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cd06:	2b00      	cmp	r3, #0
 801cd08:	d0ef      	beq.n	801ccea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 801cd0a:	7cfb      	ldrb	r3, [r7, #19]
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d159      	bne.n	801cdc4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801cd10:	4b2a      	ldr	r3, [pc, #168]	; (801cdbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cd12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cd16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801cd1a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801cd1c:	697b      	ldr	r3, [r7, #20]
 801cd1e:	2b00      	cmp	r3, #0
 801cd20:	d01e      	beq.n	801cd60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cd26:	697a      	ldr	r2, [r7, #20]
 801cd28:	429a      	cmp	r2, r3
 801cd2a:	d019      	beq.n	801cd60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801cd2c:	4b23      	ldr	r3, [pc, #140]	; (801cdbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cd2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cd32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801cd36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801cd38:	4b20      	ldr	r3, [pc, #128]	; (801cdbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cd3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cd3e:	4a1f      	ldr	r2, [pc, #124]	; (801cdbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cd40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cd44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801cd48:	4b1c      	ldr	r3, [pc, #112]	; (801cdbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cd4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cd4e:	4a1b      	ldr	r2, [pc, #108]	; (801cdbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cd50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801cd54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801cd58:	4a18      	ldr	r2, [pc, #96]	; (801cdbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cd5a:	697b      	ldr	r3, [r7, #20]
 801cd5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801cd60:	697b      	ldr	r3, [r7, #20]
 801cd62:	f003 0301 	and.w	r3, r3, #1
 801cd66:	2b00      	cmp	r3, #0
 801cd68:	d016      	beq.n	801cd98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cd6a:	f7fb ffcb 	bl	8018d04 <HAL_GetTick>
 801cd6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801cd70:	e00b      	b.n	801cd8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cd72:	f7fb ffc7 	bl	8018d04 <HAL_GetTick>
 801cd76:	4602      	mov	r2, r0
 801cd78:	68fb      	ldr	r3, [r7, #12]
 801cd7a:	1ad3      	subs	r3, r2, r3
 801cd7c:	f241 3288 	movw	r2, #5000	; 0x1388
 801cd80:	4293      	cmp	r3, r2
 801cd82:	d902      	bls.n	801cd8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 801cd84:	2303      	movs	r3, #3
 801cd86:	74fb      	strb	r3, [r7, #19]
            break;
 801cd88:	e006      	b.n	801cd98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801cd8a:	4b0c      	ldr	r3, [pc, #48]	; (801cdbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cd8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cd90:	f003 0302 	and.w	r3, r3, #2
 801cd94:	2b00      	cmp	r3, #0
 801cd96:	d0ec      	beq.n	801cd72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 801cd98:	7cfb      	ldrb	r3, [r7, #19]
 801cd9a:	2b00      	cmp	r3, #0
 801cd9c:	d10b      	bne.n	801cdb6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801cd9e:	4b07      	ldr	r3, [pc, #28]	; (801cdbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cda0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cda4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cdac:	4903      	ldr	r1, [pc, #12]	; (801cdbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cdae:	4313      	orrs	r3, r2
 801cdb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801cdb4:	e008      	b.n	801cdc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801cdb6:	7cfb      	ldrb	r3, [r7, #19]
 801cdb8:	74bb      	strb	r3, [r7, #18]
 801cdba:	e005      	b.n	801cdc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 801cdbc:	40021000 	.word	0x40021000
 801cdc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cdc4:	7cfb      	ldrb	r3, [r7, #19]
 801cdc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801cdc8:	7c7b      	ldrb	r3, [r7, #17]
 801cdca:	2b01      	cmp	r3, #1
 801cdcc:	d105      	bne.n	801cdda <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801cdce:	4ba7      	ldr	r3, [pc, #668]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cdd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cdd2:	4aa6      	ldr	r2, [pc, #664]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cdd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801cdd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	681b      	ldr	r3, [r3, #0]
 801cdde:	f003 0301 	and.w	r3, r3, #1
 801cde2:	2b00      	cmp	r3, #0
 801cde4:	d00a      	beq.n	801cdfc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801cde6:	4ba1      	ldr	r3, [pc, #644]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cde8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cdec:	f023 0203 	bic.w	r2, r3, #3
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	685b      	ldr	r3, [r3, #4]
 801cdf4:	499d      	ldr	r1, [pc, #628]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cdf6:	4313      	orrs	r3, r2
 801cdf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	681b      	ldr	r3, [r3, #0]
 801ce00:	f003 0302 	and.w	r3, r3, #2
 801ce04:	2b00      	cmp	r3, #0
 801ce06:	d00a      	beq.n	801ce1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801ce08:	4b98      	ldr	r3, [pc, #608]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ce0e:	f023 020c 	bic.w	r2, r3, #12
 801ce12:	687b      	ldr	r3, [r7, #4]
 801ce14:	689b      	ldr	r3, [r3, #8]
 801ce16:	4995      	ldr	r1, [pc, #596]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce18:	4313      	orrs	r3, r2
 801ce1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801ce1e:	687b      	ldr	r3, [r7, #4]
 801ce20:	681b      	ldr	r3, [r3, #0]
 801ce22:	f003 0304 	and.w	r3, r3, #4
 801ce26:	2b00      	cmp	r3, #0
 801ce28:	d00a      	beq.n	801ce40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801ce2a:	4b90      	ldr	r3, [pc, #576]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ce30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	68db      	ldr	r3, [r3, #12]
 801ce38:	498c      	ldr	r1, [pc, #560]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce3a:	4313      	orrs	r3, r2
 801ce3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	681b      	ldr	r3, [r3, #0]
 801ce44:	f003 0308 	and.w	r3, r3, #8
 801ce48:	2b00      	cmp	r3, #0
 801ce4a:	d00a      	beq.n	801ce62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801ce4c:	4b87      	ldr	r3, [pc, #540]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ce52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	691b      	ldr	r3, [r3, #16]
 801ce5a:	4984      	ldr	r1, [pc, #528]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce5c:	4313      	orrs	r3, r2
 801ce5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	681b      	ldr	r3, [r3, #0]
 801ce66:	f003 0310 	and.w	r3, r3, #16
 801ce6a:	2b00      	cmp	r3, #0
 801ce6c:	d00a      	beq.n	801ce84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801ce6e:	4b7f      	ldr	r3, [pc, #508]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ce74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	695b      	ldr	r3, [r3, #20]
 801ce7c:	497b      	ldr	r1, [pc, #492]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce7e:	4313      	orrs	r3, r2
 801ce80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	681b      	ldr	r3, [r3, #0]
 801ce88:	f003 0320 	and.w	r3, r3, #32
 801ce8c:	2b00      	cmp	r3, #0
 801ce8e:	d00a      	beq.n	801cea6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801ce90:	4b76      	ldr	r3, [pc, #472]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ce96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801ce9a:	687b      	ldr	r3, [r7, #4]
 801ce9c:	699b      	ldr	r3, [r3, #24]
 801ce9e:	4973      	ldr	r1, [pc, #460]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cea0:	4313      	orrs	r3, r2
 801cea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	681b      	ldr	r3, [r3, #0]
 801ceaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	d00a      	beq.n	801cec8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801ceb2:	4b6e      	ldr	r3, [pc, #440]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ceb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ceb8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	69db      	ldr	r3, [r3, #28]
 801cec0:	496a      	ldr	r1, [pc, #424]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cec2:	4313      	orrs	r3, r2
 801cec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	681b      	ldr	r3, [r3, #0]
 801cecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ced0:	2b00      	cmp	r3, #0
 801ced2:	d00a      	beq.n	801ceea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801ced4:	4b65      	ldr	r3, [pc, #404]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ced6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ceda:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801cede:	687b      	ldr	r3, [r7, #4]
 801cee0:	6a1b      	ldr	r3, [r3, #32]
 801cee2:	4962      	ldr	r1, [pc, #392]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cee4:	4313      	orrs	r3, r2
 801cee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	681b      	ldr	r3, [r3, #0]
 801ceee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cef2:	2b00      	cmp	r3, #0
 801cef4:	d00a      	beq.n	801cf0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801cef6:	4b5d      	ldr	r3, [pc, #372]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cefc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf04:	4959      	ldr	r1, [pc, #356]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf06:	4313      	orrs	r3, r2
 801cf08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	681b      	ldr	r3, [r3, #0]
 801cf10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	d00a      	beq.n	801cf2e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801cf18:	4b54      	ldr	r3, [pc, #336]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf1e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf26:	4951      	ldr	r1, [pc, #324]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf28:	4313      	orrs	r3, r2
 801cf2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801cf2e:	687b      	ldr	r3, [r7, #4]
 801cf30:	681b      	ldr	r3, [r3, #0]
 801cf32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	d015      	beq.n	801cf66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801cf3a:	4b4c      	ldr	r3, [pc, #304]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf48:	4948      	ldr	r1, [pc, #288]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf4a:	4313      	orrs	r3, r2
 801cf4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 801cf50:	687b      	ldr	r3, [r7, #4]
 801cf52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801cf58:	d105      	bne.n	801cf66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cf5a:	4b44      	ldr	r3, [pc, #272]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf5c:	68db      	ldr	r3, [r3, #12]
 801cf5e:	4a43      	ldr	r2, [pc, #268]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cf64:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	681b      	ldr	r3, [r3, #0]
 801cf6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801cf6e:	2b00      	cmp	r3, #0
 801cf70:	d015      	beq.n	801cf9e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801cf72:	4b3e      	ldr	r3, [pc, #248]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801cf7c:	687b      	ldr	r3, [r7, #4]
 801cf7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cf80:	493a      	ldr	r1, [pc, #232]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf82:	4313      	orrs	r3, r2
 801cf84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cf8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801cf90:	d105      	bne.n	801cf9e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cf92:	4b36      	ldr	r3, [pc, #216]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf94:	68db      	ldr	r3, [r3, #12]
 801cf96:	4a35      	ldr	r2, [pc, #212]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cf9c:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801cf9e:	687b      	ldr	r3, [r7, #4]
 801cfa0:	681b      	ldr	r3, [r3, #0]
 801cfa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801cfa6:	2b00      	cmp	r3, #0
 801cfa8:	d015      	beq.n	801cfd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801cfaa:	4b30      	ldr	r3, [pc, #192]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cfac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cfb0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801cfb4:	687b      	ldr	r3, [r7, #4]
 801cfb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cfb8:	492c      	ldr	r1, [pc, #176]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cfba:	4313      	orrs	r3, r2
 801cfbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 801cfc0:	687b      	ldr	r3, [r7, #4]
 801cfc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cfc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801cfc8:	d105      	bne.n	801cfd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cfca:	4b28      	ldr	r3, [pc, #160]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cfcc:	68db      	ldr	r3, [r3, #12]
 801cfce:	4a27      	ldr	r2, [pc, #156]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cfd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cfd4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801cfd6:	687b      	ldr	r3, [r7, #4]
 801cfd8:	681b      	ldr	r3, [r3, #0]
 801cfda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	d015      	beq.n	801d00e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801cfe2:	4b22      	ldr	r3, [pc, #136]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cfe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cfe8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801cfec:	687b      	ldr	r3, [r7, #4]
 801cfee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cff0:	491e      	ldr	r1, [pc, #120]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cff2:	4313      	orrs	r3, r2
 801cff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d000:	d105      	bne.n	801d00e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d002:	4b1a      	ldr	r3, [pc, #104]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d004:	68db      	ldr	r3, [r3, #12]
 801d006:	4a19      	ldr	r2, [pc, #100]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d008:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d00c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801d00e:	687b      	ldr	r3, [r7, #4]
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d016:	2b00      	cmp	r3, #0
 801d018:	d015      	beq.n	801d046 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801d01a:	4b14      	ldr	r3, [pc, #80]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d01c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d020:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d028:	4910      	ldr	r1, [pc, #64]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d02a:	4313      	orrs	r3, r2
 801d02c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d034:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d038:	d105      	bne.n	801d046 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d03a:	4b0c      	ldr	r3, [pc, #48]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d03c:	68db      	ldr	r3, [r3, #12]
 801d03e:	4a0b      	ldr	r2, [pc, #44]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d040:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d044:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	681b      	ldr	r3, [r3, #0]
 801d04a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801d04e:	2b00      	cmp	r3, #0
 801d050:	d018      	beq.n	801d084 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 801d052:	4b06      	ldr	r3, [pc, #24]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d058:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d060:	4902      	ldr	r1, [pc, #8]	; (801d06c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d062:	4313      	orrs	r3, r2
 801d064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	e001      	b.n	801d070 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801d06c:	40021000 	.word	0x40021000
 801d070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d076:	d105      	bne.n	801d084 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801d078:	4b21      	ldr	r3, [pc, #132]	; (801d100 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d07a:	68db      	ldr	r3, [r3, #12]
 801d07c:	4a20      	ldr	r2, [pc, #128]	; (801d100 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d07e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d082:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 801d084:	687b      	ldr	r3, [r7, #4]
 801d086:	681b      	ldr	r3, [r3, #0]
 801d088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	d015      	beq.n	801d0bc <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 801d090:	4b1b      	ldr	r3, [pc, #108]	; (801d100 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d096:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d09e:	4918      	ldr	r1, [pc, #96]	; (801d100 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d0a0:	4313      	orrs	r3, r2
 801d0a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d0aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d0ae:	d105      	bne.n	801d0bc <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801d0b0:	4b13      	ldr	r3, [pc, #76]	; (801d100 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d0b2:	68db      	ldr	r3, [r3, #12]
 801d0b4:	4a12      	ldr	r2, [pc, #72]	; (801d100 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d0b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d0ba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	681b      	ldr	r3, [r3, #0]
 801d0c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801d0c4:	2b00      	cmp	r3, #0
 801d0c6:	d015      	beq.n	801d0f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801d0c8:	4b0d      	ldr	r3, [pc, #52]	; (801d100 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d0ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d0ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801d0d2:	687b      	ldr	r3, [r7, #4]
 801d0d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d0d6:	490a      	ldr	r1, [pc, #40]	; (801d100 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d0d8:	4313      	orrs	r3, r2
 801d0da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 801d0de:	687b      	ldr	r3, [r7, #4]
 801d0e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d0e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d0e6:	d105      	bne.n	801d0f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d0e8:	4b05      	ldr	r3, [pc, #20]	; (801d100 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d0ea:	68db      	ldr	r3, [r3, #12]
 801d0ec:	4a04      	ldr	r2, [pc, #16]	; (801d100 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d0ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d0f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 801d0f4:	7cbb      	ldrb	r3, [r7, #18]
}
 801d0f6:	4618      	mov	r0, r3
 801d0f8:	3718      	adds	r7, #24
 801d0fa:	46bd      	mov	sp, r7
 801d0fc:	bd80      	pop	{r7, pc}
 801d0fe:	bf00      	nop
 801d100:	40021000 	.word	0x40021000

0801d104 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801d104:	b580      	push	{r7, lr}
 801d106:	b084      	sub	sp, #16
 801d108:	af00      	add	r7, sp, #0
 801d10a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	2b00      	cmp	r3, #0
 801d110:	d101      	bne.n	801d116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801d112:	2301      	movs	r3, #1
 801d114:	e09d      	b.n	801d252 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	d108      	bne.n	801d130 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801d11e:	687b      	ldr	r3, [r7, #4]
 801d120:	685b      	ldr	r3, [r3, #4]
 801d122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d126:	d009      	beq.n	801d13c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801d128:	687b      	ldr	r3, [r7, #4]
 801d12a:	2200      	movs	r2, #0
 801d12c:	61da      	str	r2, [r3, #28]
 801d12e:	e005      	b.n	801d13c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801d130:	687b      	ldr	r3, [r7, #4]
 801d132:	2200      	movs	r2, #0
 801d134:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801d136:	687b      	ldr	r3, [r7, #4]
 801d138:	2200      	movs	r2, #0
 801d13a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801d13c:	687b      	ldr	r3, [r7, #4]
 801d13e:	2200      	movs	r2, #0
 801d140:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d148:	b2db      	uxtb	r3, r3
 801d14a:	2b00      	cmp	r3, #0
 801d14c:	d106      	bne.n	801d15c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801d14e:	687b      	ldr	r3, [r7, #4]
 801d150:	2200      	movs	r2, #0
 801d152:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801d156:	6878      	ldr	r0, [r7, #4]
 801d158:	f7fa f900 	bl	801735c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801d15c:	687b      	ldr	r3, [r7, #4]
 801d15e:	2202      	movs	r2, #2
 801d160:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	681b      	ldr	r3, [r3, #0]
 801d168:	681a      	ldr	r2, [r3, #0]
 801d16a:	687b      	ldr	r3, [r7, #4]
 801d16c:	681b      	ldr	r3, [r3, #0]
 801d16e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d172:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d174:	687b      	ldr	r3, [r7, #4]
 801d176:	68db      	ldr	r3, [r3, #12]
 801d178:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d17c:	d902      	bls.n	801d184 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801d17e:	2300      	movs	r3, #0
 801d180:	60fb      	str	r3, [r7, #12]
 801d182:	e002      	b.n	801d18a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801d184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d188:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	68db      	ldr	r3, [r3, #12]
 801d18e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801d192:	d007      	beq.n	801d1a4 <HAL_SPI_Init+0xa0>
 801d194:	687b      	ldr	r3, [r7, #4]
 801d196:	68db      	ldr	r3, [r3, #12]
 801d198:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d19c:	d002      	beq.n	801d1a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	2200      	movs	r2, #0
 801d1a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	685b      	ldr	r3, [r3, #4]
 801d1a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801d1ac:	687b      	ldr	r3, [r7, #4]
 801d1ae:	689b      	ldr	r3, [r3, #8]
 801d1b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801d1b4:	431a      	orrs	r2, r3
 801d1b6:	687b      	ldr	r3, [r7, #4]
 801d1b8:	691b      	ldr	r3, [r3, #16]
 801d1ba:	f003 0302 	and.w	r3, r3, #2
 801d1be:	431a      	orrs	r2, r3
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	695b      	ldr	r3, [r3, #20]
 801d1c4:	f003 0301 	and.w	r3, r3, #1
 801d1c8:	431a      	orrs	r2, r3
 801d1ca:	687b      	ldr	r3, [r7, #4]
 801d1cc:	699b      	ldr	r3, [r3, #24]
 801d1ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d1d2:	431a      	orrs	r2, r3
 801d1d4:	687b      	ldr	r3, [r7, #4]
 801d1d6:	69db      	ldr	r3, [r3, #28]
 801d1d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801d1dc:	431a      	orrs	r2, r3
 801d1de:	687b      	ldr	r3, [r7, #4]
 801d1e0:	6a1b      	ldr	r3, [r3, #32]
 801d1e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d1e6:	ea42 0103 	orr.w	r1, r2, r3
 801d1ea:	687b      	ldr	r3, [r7, #4]
 801d1ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d1ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801d1f2:	687b      	ldr	r3, [r7, #4]
 801d1f4:	681b      	ldr	r3, [r3, #0]
 801d1f6:	430a      	orrs	r2, r1
 801d1f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801d1fa:	687b      	ldr	r3, [r7, #4]
 801d1fc:	699b      	ldr	r3, [r3, #24]
 801d1fe:	0c1b      	lsrs	r3, r3, #16
 801d200:	f003 0204 	and.w	r2, r3, #4
 801d204:	687b      	ldr	r3, [r7, #4]
 801d206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d208:	f003 0310 	and.w	r3, r3, #16
 801d20c:	431a      	orrs	r2, r3
 801d20e:	687b      	ldr	r3, [r7, #4]
 801d210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d212:	f003 0308 	and.w	r3, r3, #8
 801d216:	431a      	orrs	r2, r3
 801d218:	687b      	ldr	r3, [r7, #4]
 801d21a:	68db      	ldr	r3, [r3, #12]
 801d21c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801d220:	ea42 0103 	orr.w	r1, r2, r3
 801d224:	68fb      	ldr	r3, [r7, #12]
 801d226:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801d22a:	687b      	ldr	r3, [r7, #4]
 801d22c:	681b      	ldr	r3, [r3, #0]
 801d22e:	430a      	orrs	r2, r1
 801d230:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801d232:	687b      	ldr	r3, [r7, #4]
 801d234:	681b      	ldr	r3, [r3, #0]
 801d236:	69da      	ldr	r2, [r3, #28]
 801d238:	687b      	ldr	r3, [r7, #4]
 801d23a:	681b      	ldr	r3, [r3, #0]
 801d23c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801d240:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	2200      	movs	r2, #0
 801d246:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	2201      	movs	r2, #1
 801d24c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801d250:	2300      	movs	r3, #0
}
 801d252:	4618      	mov	r0, r3
 801d254:	3710      	adds	r7, #16
 801d256:	46bd      	mov	sp, r7
 801d258:	bd80      	pop	{r7, pc}

0801d25a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d25a:	b580      	push	{r7, lr}
 801d25c:	b088      	sub	sp, #32
 801d25e:	af00      	add	r7, sp, #0
 801d260:	60f8      	str	r0, [r7, #12]
 801d262:	60b9      	str	r1, [r7, #8]
 801d264:	603b      	str	r3, [r7, #0]
 801d266:	4613      	mov	r3, r2
 801d268:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801d26a:	2300      	movs	r3, #0
 801d26c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d26e:	68fb      	ldr	r3, [r7, #12]
 801d270:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d274:	2b01      	cmp	r3, #1
 801d276:	d101      	bne.n	801d27c <HAL_SPI_Transmit+0x22>
 801d278:	2302      	movs	r3, #2
 801d27a:	e158      	b.n	801d52e <HAL_SPI_Transmit+0x2d4>
 801d27c:	68fb      	ldr	r3, [r7, #12]
 801d27e:	2201      	movs	r2, #1
 801d280:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d284:	f7fb fd3e 	bl	8018d04 <HAL_GetTick>
 801d288:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801d28a:	88fb      	ldrh	r3, [r7, #6]
 801d28c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801d28e:	68fb      	ldr	r3, [r7, #12]
 801d290:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d294:	b2db      	uxtb	r3, r3
 801d296:	2b01      	cmp	r3, #1
 801d298:	d002      	beq.n	801d2a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801d29a:	2302      	movs	r3, #2
 801d29c:	77fb      	strb	r3, [r7, #31]
    goto error;
 801d29e:	e13d      	b.n	801d51c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801d2a0:	68bb      	ldr	r3, [r7, #8]
 801d2a2:	2b00      	cmp	r3, #0
 801d2a4:	d002      	beq.n	801d2ac <HAL_SPI_Transmit+0x52>
 801d2a6:	88fb      	ldrh	r3, [r7, #6]
 801d2a8:	2b00      	cmp	r3, #0
 801d2aa:	d102      	bne.n	801d2b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801d2ac:	2301      	movs	r3, #1
 801d2ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 801d2b0:	e134      	b.n	801d51c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801d2b2:	68fb      	ldr	r3, [r7, #12]
 801d2b4:	2203      	movs	r2, #3
 801d2b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d2ba:	68fb      	ldr	r3, [r7, #12]
 801d2bc:	2200      	movs	r2, #0
 801d2be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801d2c0:	68fb      	ldr	r3, [r7, #12]
 801d2c2:	68ba      	ldr	r2, [r7, #8]
 801d2c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801d2c6:	68fb      	ldr	r3, [r7, #12]
 801d2c8:	88fa      	ldrh	r2, [r7, #6]
 801d2ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801d2cc:	68fb      	ldr	r3, [r7, #12]
 801d2ce:	88fa      	ldrh	r2, [r7, #6]
 801d2d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801d2d2:	68fb      	ldr	r3, [r7, #12]
 801d2d4:	2200      	movs	r2, #0
 801d2d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801d2d8:	68fb      	ldr	r3, [r7, #12]
 801d2da:	2200      	movs	r2, #0
 801d2dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801d2e0:	68fb      	ldr	r3, [r7, #12]
 801d2e2:	2200      	movs	r2, #0
 801d2e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801d2e8:	68fb      	ldr	r3, [r7, #12]
 801d2ea:	2200      	movs	r2, #0
 801d2ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801d2ee:	68fb      	ldr	r3, [r7, #12]
 801d2f0:	2200      	movs	r2, #0
 801d2f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d2f4:	68fb      	ldr	r3, [r7, #12]
 801d2f6:	689b      	ldr	r3, [r3, #8]
 801d2f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d2fc:	d10f      	bne.n	801d31e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801d2fe:	68fb      	ldr	r3, [r7, #12]
 801d300:	681b      	ldr	r3, [r3, #0]
 801d302:	681a      	ldr	r2, [r3, #0]
 801d304:	68fb      	ldr	r3, [r7, #12]
 801d306:	681b      	ldr	r3, [r3, #0]
 801d308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d30c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801d30e:	68fb      	ldr	r3, [r7, #12]
 801d310:	681b      	ldr	r3, [r3, #0]
 801d312:	681a      	ldr	r2, [r3, #0]
 801d314:	68fb      	ldr	r3, [r7, #12]
 801d316:	681b      	ldr	r3, [r3, #0]
 801d318:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d31c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d31e:	68fb      	ldr	r3, [r7, #12]
 801d320:	681b      	ldr	r3, [r3, #0]
 801d322:	681b      	ldr	r3, [r3, #0]
 801d324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d328:	2b40      	cmp	r3, #64	; 0x40
 801d32a:	d007      	beq.n	801d33c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d32c:	68fb      	ldr	r3, [r7, #12]
 801d32e:	681b      	ldr	r3, [r3, #0]
 801d330:	681a      	ldr	r2, [r3, #0]
 801d332:	68fb      	ldr	r3, [r7, #12]
 801d334:	681b      	ldr	r3, [r3, #0]
 801d336:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d33a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d33c:	68fb      	ldr	r3, [r7, #12]
 801d33e:	68db      	ldr	r3, [r3, #12]
 801d340:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d344:	d94b      	bls.n	801d3de <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d346:	68fb      	ldr	r3, [r7, #12]
 801d348:	685b      	ldr	r3, [r3, #4]
 801d34a:	2b00      	cmp	r3, #0
 801d34c:	d002      	beq.n	801d354 <HAL_SPI_Transmit+0xfa>
 801d34e:	8afb      	ldrh	r3, [r7, #22]
 801d350:	2b01      	cmp	r3, #1
 801d352:	d13e      	bne.n	801d3d2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d354:	68fb      	ldr	r3, [r7, #12]
 801d356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d358:	881a      	ldrh	r2, [r3, #0]
 801d35a:	68fb      	ldr	r3, [r7, #12]
 801d35c:	681b      	ldr	r3, [r3, #0]
 801d35e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801d360:	68fb      	ldr	r3, [r7, #12]
 801d362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d364:	1c9a      	adds	r2, r3, #2
 801d366:	68fb      	ldr	r3, [r7, #12]
 801d368:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801d36a:	68fb      	ldr	r3, [r7, #12]
 801d36c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d36e:	b29b      	uxth	r3, r3
 801d370:	3b01      	subs	r3, #1
 801d372:	b29a      	uxth	r2, r3
 801d374:	68fb      	ldr	r3, [r7, #12]
 801d376:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801d378:	e02b      	b.n	801d3d2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801d37a:	68fb      	ldr	r3, [r7, #12]
 801d37c:	681b      	ldr	r3, [r3, #0]
 801d37e:	689b      	ldr	r3, [r3, #8]
 801d380:	f003 0302 	and.w	r3, r3, #2
 801d384:	2b02      	cmp	r3, #2
 801d386:	d112      	bne.n	801d3ae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d388:	68fb      	ldr	r3, [r7, #12]
 801d38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d38c:	881a      	ldrh	r2, [r3, #0]
 801d38e:	68fb      	ldr	r3, [r7, #12]
 801d390:	681b      	ldr	r3, [r3, #0]
 801d392:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d394:	68fb      	ldr	r3, [r7, #12]
 801d396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d398:	1c9a      	adds	r2, r3, #2
 801d39a:	68fb      	ldr	r3, [r7, #12]
 801d39c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d39e:	68fb      	ldr	r3, [r7, #12]
 801d3a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d3a2:	b29b      	uxth	r3, r3
 801d3a4:	3b01      	subs	r3, #1
 801d3a6:	b29a      	uxth	r2, r3
 801d3a8:	68fb      	ldr	r3, [r7, #12]
 801d3aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d3ac:	e011      	b.n	801d3d2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d3ae:	f7fb fca9 	bl	8018d04 <HAL_GetTick>
 801d3b2:	4602      	mov	r2, r0
 801d3b4:	69bb      	ldr	r3, [r7, #24]
 801d3b6:	1ad3      	subs	r3, r2, r3
 801d3b8:	683a      	ldr	r2, [r7, #0]
 801d3ba:	429a      	cmp	r2, r3
 801d3bc:	d803      	bhi.n	801d3c6 <HAL_SPI_Transmit+0x16c>
 801d3be:	683b      	ldr	r3, [r7, #0]
 801d3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d3c4:	d102      	bne.n	801d3cc <HAL_SPI_Transmit+0x172>
 801d3c6:	683b      	ldr	r3, [r7, #0]
 801d3c8:	2b00      	cmp	r3, #0
 801d3ca:	d102      	bne.n	801d3d2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801d3cc:	2303      	movs	r3, #3
 801d3ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 801d3d0:	e0a4      	b.n	801d51c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801d3d2:	68fb      	ldr	r3, [r7, #12]
 801d3d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d3d6:	b29b      	uxth	r3, r3
 801d3d8:	2b00      	cmp	r3, #0
 801d3da:	d1ce      	bne.n	801d37a <HAL_SPI_Transmit+0x120>
 801d3dc:	e07c      	b.n	801d4d8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d3de:	68fb      	ldr	r3, [r7, #12]
 801d3e0:	685b      	ldr	r3, [r3, #4]
 801d3e2:	2b00      	cmp	r3, #0
 801d3e4:	d002      	beq.n	801d3ec <HAL_SPI_Transmit+0x192>
 801d3e6:	8afb      	ldrh	r3, [r7, #22]
 801d3e8:	2b01      	cmp	r3, #1
 801d3ea:	d170      	bne.n	801d4ce <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801d3ec:	68fb      	ldr	r3, [r7, #12]
 801d3ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d3f0:	b29b      	uxth	r3, r3
 801d3f2:	2b01      	cmp	r3, #1
 801d3f4:	d912      	bls.n	801d41c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d3f6:	68fb      	ldr	r3, [r7, #12]
 801d3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d3fa:	881a      	ldrh	r2, [r3, #0]
 801d3fc:	68fb      	ldr	r3, [r7, #12]
 801d3fe:	681b      	ldr	r3, [r3, #0]
 801d400:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d402:	68fb      	ldr	r3, [r7, #12]
 801d404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d406:	1c9a      	adds	r2, r3, #2
 801d408:	68fb      	ldr	r3, [r7, #12]
 801d40a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801d40c:	68fb      	ldr	r3, [r7, #12]
 801d40e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d410:	b29b      	uxth	r3, r3
 801d412:	3b02      	subs	r3, #2
 801d414:	b29a      	uxth	r2, r3
 801d416:	68fb      	ldr	r3, [r7, #12]
 801d418:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d41a:	e058      	b.n	801d4ce <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801d41c:	68fb      	ldr	r3, [r7, #12]
 801d41e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d420:	68fb      	ldr	r3, [r7, #12]
 801d422:	681b      	ldr	r3, [r3, #0]
 801d424:	330c      	adds	r3, #12
 801d426:	7812      	ldrb	r2, [r2, #0]
 801d428:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801d42a:	68fb      	ldr	r3, [r7, #12]
 801d42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d42e:	1c5a      	adds	r2, r3, #1
 801d430:	68fb      	ldr	r3, [r7, #12]
 801d432:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d434:	68fb      	ldr	r3, [r7, #12]
 801d436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d438:	b29b      	uxth	r3, r3
 801d43a:	3b01      	subs	r3, #1
 801d43c:	b29a      	uxth	r2, r3
 801d43e:	68fb      	ldr	r3, [r7, #12]
 801d440:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801d442:	e044      	b.n	801d4ce <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801d444:	68fb      	ldr	r3, [r7, #12]
 801d446:	681b      	ldr	r3, [r3, #0]
 801d448:	689b      	ldr	r3, [r3, #8]
 801d44a:	f003 0302 	and.w	r3, r3, #2
 801d44e:	2b02      	cmp	r3, #2
 801d450:	d12b      	bne.n	801d4aa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801d452:	68fb      	ldr	r3, [r7, #12]
 801d454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d456:	b29b      	uxth	r3, r3
 801d458:	2b01      	cmp	r3, #1
 801d45a:	d912      	bls.n	801d482 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d45c:	68fb      	ldr	r3, [r7, #12]
 801d45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d460:	881a      	ldrh	r2, [r3, #0]
 801d462:	68fb      	ldr	r3, [r7, #12]
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801d468:	68fb      	ldr	r3, [r7, #12]
 801d46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d46c:	1c9a      	adds	r2, r3, #2
 801d46e:	68fb      	ldr	r3, [r7, #12]
 801d470:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801d472:	68fb      	ldr	r3, [r7, #12]
 801d474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d476:	b29b      	uxth	r3, r3
 801d478:	3b02      	subs	r3, #2
 801d47a:	b29a      	uxth	r2, r3
 801d47c:	68fb      	ldr	r3, [r7, #12]
 801d47e:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d480:	e025      	b.n	801d4ce <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801d482:	68fb      	ldr	r3, [r7, #12]
 801d484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d486:	68fb      	ldr	r3, [r7, #12]
 801d488:	681b      	ldr	r3, [r3, #0]
 801d48a:	330c      	adds	r3, #12
 801d48c:	7812      	ldrb	r2, [r2, #0]
 801d48e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801d490:	68fb      	ldr	r3, [r7, #12]
 801d492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d494:	1c5a      	adds	r2, r3, #1
 801d496:	68fb      	ldr	r3, [r7, #12]
 801d498:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801d49a:	68fb      	ldr	r3, [r7, #12]
 801d49c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d49e:	b29b      	uxth	r3, r3
 801d4a0:	3b01      	subs	r3, #1
 801d4a2:	b29a      	uxth	r2, r3
 801d4a4:	68fb      	ldr	r3, [r7, #12]
 801d4a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d4a8:	e011      	b.n	801d4ce <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d4aa:	f7fb fc2b 	bl	8018d04 <HAL_GetTick>
 801d4ae:	4602      	mov	r2, r0
 801d4b0:	69bb      	ldr	r3, [r7, #24]
 801d4b2:	1ad3      	subs	r3, r2, r3
 801d4b4:	683a      	ldr	r2, [r7, #0]
 801d4b6:	429a      	cmp	r2, r3
 801d4b8:	d803      	bhi.n	801d4c2 <HAL_SPI_Transmit+0x268>
 801d4ba:	683b      	ldr	r3, [r7, #0]
 801d4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d4c0:	d102      	bne.n	801d4c8 <HAL_SPI_Transmit+0x26e>
 801d4c2:	683b      	ldr	r3, [r7, #0]
 801d4c4:	2b00      	cmp	r3, #0
 801d4c6:	d102      	bne.n	801d4ce <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801d4c8:	2303      	movs	r3, #3
 801d4ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 801d4cc:	e026      	b.n	801d51c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801d4ce:	68fb      	ldr	r3, [r7, #12]
 801d4d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d4d2:	b29b      	uxth	r3, r3
 801d4d4:	2b00      	cmp	r3, #0
 801d4d6:	d1b5      	bne.n	801d444 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d4d8:	69ba      	ldr	r2, [r7, #24]
 801d4da:	6839      	ldr	r1, [r7, #0]
 801d4dc:	68f8      	ldr	r0, [r7, #12]
 801d4de:	f000 fce3 	bl	801dea8 <SPI_EndRxTxTransaction>
 801d4e2:	4603      	mov	r3, r0
 801d4e4:	2b00      	cmp	r3, #0
 801d4e6:	d002      	beq.n	801d4ee <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d4e8:	68fb      	ldr	r3, [r7, #12]
 801d4ea:	2220      	movs	r2, #32
 801d4ec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801d4ee:	68fb      	ldr	r3, [r7, #12]
 801d4f0:	689b      	ldr	r3, [r3, #8]
 801d4f2:	2b00      	cmp	r3, #0
 801d4f4:	d10a      	bne.n	801d50c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801d4f6:	2300      	movs	r3, #0
 801d4f8:	613b      	str	r3, [r7, #16]
 801d4fa:	68fb      	ldr	r3, [r7, #12]
 801d4fc:	681b      	ldr	r3, [r3, #0]
 801d4fe:	68db      	ldr	r3, [r3, #12]
 801d500:	613b      	str	r3, [r7, #16]
 801d502:	68fb      	ldr	r3, [r7, #12]
 801d504:	681b      	ldr	r3, [r3, #0]
 801d506:	689b      	ldr	r3, [r3, #8]
 801d508:	613b      	str	r3, [r7, #16]
 801d50a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801d50c:	68fb      	ldr	r3, [r7, #12]
 801d50e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d510:	2b00      	cmp	r3, #0
 801d512:	d002      	beq.n	801d51a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801d514:	2301      	movs	r3, #1
 801d516:	77fb      	strb	r3, [r7, #31]
 801d518:	e000      	b.n	801d51c <HAL_SPI_Transmit+0x2c2>
  }

error:
 801d51a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d51c:	68fb      	ldr	r3, [r7, #12]
 801d51e:	2201      	movs	r2, #1
 801d520:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801d524:	68fb      	ldr	r3, [r7, #12]
 801d526:	2200      	movs	r2, #0
 801d528:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d52c:	7ffb      	ldrb	r3, [r7, #31]
}
 801d52e:	4618      	mov	r0, r3
 801d530:	3720      	adds	r7, #32
 801d532:	46bd      	mov	sp, r7
 801d534:	bd80      	pop	{r7, pc}

0801d536 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d536:	b580      	push	{r7, lr}
 801d538:	b088      	sub	sp, #32
 801d53a:	af02      	add	r7, sp, #8
 801d53c:	60f8      	str	r0, [r7, #12]
 801d53e:	60b9      	str	r1, [r7, #8]
 801d540:	603b      	str	r3, [r7, #0]
 801d542:	4613      	mov	r3, r2
 801d544:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801d546:	2300      	movs	r3, #0
 801d548:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801d54a:	68fb      	ldr	r3, [r7, #12]
 801d54c:	685b      	ldr	r3, [r3, #4]
 801d54e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d552:	d112      	bne.n	801d57a <HAL_SPI_Receive+0x44>
 801d554:	68fb      	ldr	r3, [r7, #12]
 801d556:	689b      	ldr	r3, [r3, #8]
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d10e      	bne.n	801d57a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801d55c:	68fb      	ldr	r3, [r7, #12]
 801d55e:	2204      	movs	r2, #4
 801d560:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801d564:	88fa      	ldrh	r2, [r7, #6]
 801d566:	683b      	ldr	r3, [r7, #0]
 801d568:	9300      	str	r3, [sp, #0]
 801d56a:	4613      	mov	r3, r2
 801d56c:	68ba      	ldr	r2, [r7, #8]
 801d56e:	68b9      	ldr	r1, [r7, #8]
 801d570:	68f8      	ldr	r0, [r7, #12]
 801d572:	f000 f910 	bl	801d796 <HAL_SPI_TransmitReceive>
 801d576:	4603      	mov	r3, r0
 801d578:	e109      	b.n	801d78e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d57a:	68fb      	ldr	r3, [r7, #12]
 801d57c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d580:	2b01      	cmp	r3, #1
 801d582:	d101      	bne.n	801d588 <HAL_SPI_Receive+0x52>
 801d584:	2302      	movs	r3, #2
 801d586:	e102      	b.n	801d78e <HAL_SPI_Receive+0x258>
 801d588:	68fb      	ldr	r3, [r7, #12]
 801d58a:	2201      	movs	r2, #1
 801d58c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d590:	f7fb fbb8 	bl	8018d04 <HAL_GetTick>
 801d594:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801d596:	68fb      	ldr	r3, [r7, #12]
 801d598:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d59c:	b2db      	uxtb	r3, r3
 801d59e:	2b01      	cmp	r3, #1
 801d5a0:	d002      	beq.n	801d5a8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801d5a2:	2302      	movs	r3, #2
 801d5a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 801d5a6:	e0e9      	b.n	801d77c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801d5a8:	68bb      	ldr	r3, [r7, #8]
 801d5aa:	2b00      	cmp	r3, #0
 801d5ac:	d002      	beq.n	801d5b4 <HAL_SPI_Receive+0x7e>
 801d5ae:	88fb      	ldrh	r3, [r7, #6]
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	d102      	bne.n	801d5ba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801d5b4:	2301      	movs	r3, #1
 801d5b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 801d5b8:	e0e0      	b.n	801d77c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801d5ba:	68fb      	ldr	r3, [r7, #12]
 801d5bc:	2204      	movs	r2, #4
 801d5be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d5c2:	68fb      	ldr	r3, [r7, #12]
 801d5c4:	2200      	movs	r2, #0
 801d5c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801d5c8:	68fb      	ldr	r3, [r7, #12]
 801d5ca:	68ba      	ldr	r2, [r7, #8]
 801d5cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801d5ce:	68fb      	ldr	r3, [r7, #12]
 801d5d0:	88fa      	ldrh	r2, [r7, #6]
 801d5d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801d5d6:	68fb      	ldr	r3, [r7, #12]
 801d5d8:	88fa      	ldrh	r2, [r7, #6]
 801d5da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801d5de:	68fb      	ldr	r3, [r7, #12]
 801d5e0:	2200      	movs	r2, #0
 801d5e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801d5e4:	68fb      	ldr	r3, [r7, #12]
 801d5e6:	2200      	movs	r2, #0
 801d5e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801d5ea:	68fb      	ldr	r3, [r7, #12]
 801d5ec:	2200      	movs	r2, #0
 801d5ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801d5f0:	68fb      	ldr	r3, [r7, #12]
 801d5f2:	2200      	movs	r2, #0
 801d5f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801d5f6:	68fb      	ldr	r3, [r7, #12]
 801d5f8:	2200      	movs	r2, #0
 801d5fa:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d5fc:	68fb      	ldr	r3, [r7, #12]
 801d5fe:	68db      	ldr	r3, [r3, #12]
 801d600:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d604:	d908      	bls.n	801d618 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d606:	68fb      	ldr	r3, [r7, #12]
 801d608:	681b      	ldr	r3, [r3, #0]
 801d60a:	685a      	ldr	r2, [r3, #4]
 801d60c:	68fb      	ldr	r3, [r7, #12]
 801d60e:	681b      	ldr	r3, [r3, #0]
 801d610:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d614:	605a      	str	r2, [r3, #4]
 801d616:	e007      	b.n	801d628 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d618:	68fb      	ldr	r3, [r7, #12]
 801d61a:	681b      	ldr	r3, [r3, #0]
 801d61c:	685a      	ldr	r2, [r3, #4]
 801d61e:	68fb      	ldr	r3, [r7, #12]
 801d620:	681b      	ldr	r3, [r3, #0]
 801d622:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d626:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d628:	68fb      	ldr	r3, [r7, #12]
 801d62a:	689b      	ldr	r3, [r3, #8]
 801d62c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d630:	d10f      	bne.n	801d652 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801d632:	68fb      	ldr	r3, [r7, #12]
 801d634:	681b      	ldr	r3, [r3, #0]
 801d636:	681a      	ldr	r2, [r3, #0]
 801d638:	68fb      	ldr	r3, [r7, #12]
 801d63a:	681b      	ldr	r3, [r3, #0]
 801d63c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d640:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801d642:	68fb      	ldr	r3, [r7, #12]
 801d644:	681b      	ldr	r3, [r3, #0]
 801d646:	681a      	ldr	r2, [r3, #0]
 801d648:	68fb      	ldr	r3, [r7, #12]
 801d64a:	681b      	ldr	r3, [r3, #0]
 801d64c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801d650:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d652:	68fb      	ldr	r3, [r7, #12]
 801d654:	681b      	ldr	r3, [r3, #0]
 801d656:	681b      	ldr	r3, [r3, #0]
 801d658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d65c:	2b40      	cmp	r3, #64	; 0x40
 801d65e:	d007      	beq.n	801d670 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d660:	68fb      	ldr	r3, [r7, #12]
 801d662:	681b      	ldr	r3, [r3, #0]
 801d664:	681a      	ldr	r2, [r3, #0]
 801d666:	68fb      	ldr	r3, [r7, #12]
 801d668:	681b      	ldr	r3, [r3, #0]
 801d66a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d66e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801d670:	68fb      	ldr	r3, [r7, #12]
 801d672:	68db      	ldr	r3, [r3, #12]
 801d674:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d678:	d867      	bhi.n	801d74a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801d67a:	e030      	b.n	801d6de <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801d67c:	68fb      	ldr	r3, [r7, #12]
 801d67e:	681b      	ldr	r3, [r3, #0]
 801d680:	689b      	ldr	r3, [r3, #8]
 801d682:	f003 0301 	and.w	r3, r3, #1
 801d686:	2b01      	cmp	r3, #1
 801d688:	d117      	bne.n	801d6ba <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801d68a:	68fb      	ldr	r3, [r7, #12]
 801d68c:	681b      	ldr	r3, [r3, #0]
 801d68e:	f103 020c 	add.w	r2, r3, #12
 801d692:	68fb      	ldr	r3, [r7, #12]
 801d694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d696:	7812      	ldrb	r2, [r2, #0]
 801d698:	b2d2      	uxtb	r2, r2
 801d69a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801d69c:	68fb      	ldr	r3, [r7, #12]
 801d69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d6a0:	1c5a      	adds	r2, r3, #1
 801d6a2:	68fb      	ldr	r3, [r7, #12]
 801d6a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d6a6:	68fb      	ldr	r3, [r7, #12]
 801d6a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d6ac:	b29b      	uxth	r3, r3
 801d6ae:	3b01      	subs	r3, #1
 801d6b0:	b29a      	uxth	r2, r3
 801d6b2:	68fb      	ldr	r3, [r7, #12]
 801d6b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801d6b8:	e011      	b.n	801d6de <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d6ba:	f7fb fb23 	bl	8018d04 <HAL_GetTick>
 801d6be:	4602      	mov	r2, r0
 801d6c0:	693b      	ldr	r3, [r7, #16]
 801d6c2:	1ad3      	subs	r3, r2, r3
 801d6c4:	683a      	ldr	r2, [r7, #0]
 801d6c6:	429a      	cmp	r2, r3
 801d6c8:	d803      	bhi.n	801d6d2 <HAL_SPI_Receive+0x19c>
 801d6ca:	683b      	ldr	r3, [r7, #0]
 801d6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d6d0:	d102      	bne.n	801d6d8 <HAL_SPI_Receive+0x1a2>
 801d6d2:	683b      	ldr	r3, [r7, #0]
 801d6d4:	2b00      	cmp	r3, #0
 801d6d6:	d102      	bne.n	801d6de <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801d6d8:	2303      	movs	r3, #3
 801d6da:	75fb      	strb	r3, [r7, #23]
          goto error;
 801d6dc:	e04e      	b.n	801d77c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801d6de:	68fb      	ldr	r3, [r7, #12]
 801d6e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d6e4:	b29b      	uxth	r3, r3
 801d6e6:	2b00      	cmp	r3, #0
 801d6e8:	d1c8      	bne.n	801d67c <HAL_SPI_Receive+0x146>
 801d6ea:	e034      	b.n	801d756 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801d6ec:	68fb      	ldr	r3, [r7, #12]
 801d6ee:	681b      	ldr	r3, [r3, #0]
 801d6f0:	689b      	ldr	r3, [r3, #8]
 801d6f2:	f003 0301 	and.w	r3, r3, #1
 801d6f6:	2b01      	cmp	r3, #1
 801d6f8:	d115      	bne.n	801d726 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d6fa:	68fb      	ldr	r3, [r7, #12]
 801d6fc:	681b      	ldr	r3, [r3, #0]
 801d6fe:	68da      	ldr	r2, [r3, #12]
 801d700:	68fb      	ldr	r3, [r7, #12]
 801d702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d704:	b292      	uxth	r2, r2
 801d706:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801d708:	68fb      	ldr	r3, [r7, #12]
 801d70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d70c:	1c9a      	adds	r2, r3, #2
 801d70e:	68fb      	ldr	r3, [r7, #12]
 801d710:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d712:	68fb      	ldr	r3, [r7, #12]
 801d714:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d718:	b29b      	uxth	r3, r3
 801d71a:	3b01      	subs	r3, #1
 801d71c:	b29a      	uxth	r2, r3
 801d71e:	68fb      	ldr	r3, [r7, #12]
 801d720:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801d724:	e011      	b.n	801d74a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d726:	f7fb faed 	bl	8018d04 <HAL_GetTick>
 801d72a:	4602      	mov	r2, r0
 801d72c:	693b      	ldr	r3, [r7, #16]
 801d72e:	1ad3      	subs	r3, r2, r3
 801d730:	683a      	ldr	r2, [r7, #0]
 801d732:	429a      	cmp	r2, r3
 801d734:	d803      	bhi.n	801d73e <HAL_SPI_Receive+0x208>
 801d736:	683b      	ldr	r3, [r7, #0]
 801d738:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d73c:	d102      	bne.n	801d744 <HAL_SPI_Receive+0x20e>
 801d73e:	683b      	ldr	r3, [r7, #0]
 801d740:	2b00      	cmp	r3, #0
 801d742:	d102      	bne.n	801d74a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801d744:	2303      	movs	r3, #3
 801d746:	75fb      	strb	r3, [r7, #23]
          goto error;
 801d748:	e018      	b.n	801d77c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d750:	b29b      	uxth	r3, r3
 801d752:	2b00      	cmp	r3, #0
 801d754:	d1ca      	bne.n	801d6ec <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d756:	693a      	ldr	r2, [r7, #16]
 801d758:	6839      	ldr	r1, [r7, #0]
 801d75a:	68f8      	ldr	r0, [r7, #12]
 801d75c:	f000 fb4c 	bl	801ddf8 <SPI_EndRxTransaction>
 801d760:	4603      	mov	r3, r0
 801d762:	2b00      	cmp	r3, #0
 801d764:	d002      	beq.n	801d76c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d766:	68fb      	ldr	r3, [r7, #12]
 801d768:	2220      	movs	r2, #32
 801d76a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801d76c:	68fb      	ldr	r3, [r7, #12]
 801d76e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d770:	2b00      	cmp	r3, #0
 801d772:	d002      	beq.n	801d77a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801d774:	2301      	movs	r3, #1
 801d776:	75fb      	strb	r3, [r7, #23]
 801d778:	e000      	b.n	801d77c <HAL_SPI_Receive+0x246>
  }

error :
 801d77a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d77c:	68fb      	ldr	r3, [r7, #12]
 801d77e:	2201      	movs	r2, #1
 801d780:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801d784:	68fb      	ldr	r3, [r7, #12]
 801d786:	2200      	movs	r2, #0
 801d788:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d78c:	7dfb      	ldrb	r3, [r7, #23]
}
 801d78e:	4618      	mov	r0, r3
 801d790:	3718      	adds	r7, #24
 801d792:	46bd      	mov	sp, r7
 801d794:	bd80      	pop	{r7, pc}

0801d796 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801d796:	b580      	push	{r7, lr}
 801d798:	b08a      	sub	sp, #40	; 0x28
 801d79a:	af00      	add	r7, sp, #0
 801d79c:	60f8      	str	r0, [r7, #12]
 801d79e:	60b9      	str	r1, [r7, #8]
 801d7a0:	607a      	str	r2, [r7, #4]
 801d7a2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801d7a4:	2301      	movs	r3, #1
 801d7a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801d7a8:	2300      	movs	r3, #0
 801d7aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d7ae:	68fb      	ldr	r3, [r7, #12]
 801d7b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d7b4:	2b01      	cmp	r3, #1
 801d7b6:	d101      	bne.n	801d7bc <HAL_SPI_TransmitReceive+0x26>
 801d7b8:	2302      	movs	r3, #2
 801d7ba:	e1fb      	b.n	801dbb4 <HAL_SPI_TransmitReceive+0x41e>
 801d7bc:	68fb      	ldr	r3, [r7, #12]
 801d7be:	2201      	movs	r2, #1
 801d7c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d7c4:	f7fb fa9e 	bl	8018d04 <HAL_GetTick>
 801d7c8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801d7ca:	68fb      	ldr	r3, [r7, #12]
 801d7cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d7d0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801d7d2:	68fb      	ldr	r3, [r7, #12]
 801d7d4:	685b      	ldr	r3, [r3, #4]
 801d7d6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801d7d8:	887b      	ldrh	r3, [r7, #2]
 801d7da:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801d7dc:	887b      	ldrh	r3, [r7, #2]
 801d7de:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801d7e0:	7efb      	ldrb	r3, [r7, #27]
 801d7e2:	2b01      	cmp	r3, #1
 801d7e4:	d00e      	beq.n	801d804 <HAL_SPI_TransmitReceive+0x6e>
 801d7e6:	697b      	ldr	r3, [r7, #20]
 801d7e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d7ec:	d106      	bne.n	801d7fc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801d7ee:	68fb      	ldr	r3, [r7, #12]
 801d7f0:	689b      	ldr	r3, [r3, #8]
 801d7f2:	2b00      	cmp	r3, #0
 801d7f4:	d102      	bne.n	801d7fc <HAL_SPI_TransmitReceive+0x66>
 801d7f6:	7efb      	ldrb	r3, [r7, #27]
 801d7f8:	2b04      	cmp	r3, #4
 801d7fa:	d003      	beq.n	801d804 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801d7fc:	2302      	movs	r3, #2
 801d7fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801d802:	e1cd      	b.n	801dba0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801d804:	68bb      	ldr	r3, [r7, #8]
 801d806:	2b00      	cmp	r3, #0
 801d808:	d005      	beq.n	801d816 <HAL_SPI_TransmitReceive+0x80>
 801d80a:	687b      	ldr	r3, [r7, #4]
 801d80c:	2b00      	cmp	r3, #0
 801d80e:	d002      	beq.n	801d816 <HAL_SPI_TransmitReceive+0x80>
 801d810:	887b      	ldrh	r3, [r7, #2]
 801d812:	2b00      	cmp	r3, #0
 801d814:	d103      	bne.n	801d81e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801d816:	2301      	movs	r3, #1
 801d818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801d81c:	e1c0      	b.n	801dba0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801d81e:	68fb      	ldr	r3, [r7, #12]
 801d820:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d824:	b2db      	uxtb	r3, r3
 801d826:	2b04      	cmp	r3, #4
 801d828:	d003      	beq.n	801d832 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801d82a:	68fb      	ldr	r3, [r7, #12]
 801d82c:	2205      	movs	r2, #5
 801d82e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d832:	68fb      	ldr	r3, [r7, #12]
 801d834:	2200      	movs	r2, #0
 801d836:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801d838:	68fb      	ldr	r3, [r7, #12]
 801d83a:	687a      	ldr	r2, [r7, #4]
 801d83c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801d83e:	68fb      	ldr	r3, [r7, #12]
 801d840:	887a      	ldrh	r2, [r7, #2]
 801d842:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801d846:	68fb      	ldr	r3, [r7, #12]
 801d848:	887a      	ldrh	r2, [r7, #2]
 801d84a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801d84e:	68fb      	ldr	r3, [r7, #12]
 801d850:	68ba      	ldr	r2, [r7, #8]
 801d852:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801d854:	68fb      	ldr	r3, [r7, #12]
 801d856:	887a      	ldrh	r2, [r7, #2]
 801d858:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801d85a:	68fb      	ldr	r3, [r7, #12]
 801d85c:	887a      	ldrh	r2, [r7, #2]
 801d85e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801d860:	68fb      	ldr	r3, [r7, #12]
 801d862:	2200      	movs	r2, #0
 801d864:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801d866:	68fb      	ldr	r3, [r7, #12]
 801d868:	2200      	movs	r2, #0
 801d86a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801d86c:	68fb      	ldr	r3, [r7, #12]
 801d86e:	68db      	ldr	r3, [r3, #12]
 801d870:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d874:	d802      	bhi.n	801d87c <HAL_SPI_TransmitReceive+0xe6>
 801d876:	8a3b      	ldrh	r3, [r7, #16]
 801d878:	2b01      	cmp	r3, #1
 801d87a:	d908      	bls.n	801d88e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d87c:	68fb      	ldr	r3, [r7, #12]
 801d87e:	681b      	ldr	r3, [r3, #0]
 801d880:	685a      	ldr	r2, [r3, #4]
 801d882:	68fb      	ldr	r3, [r7, #12]
 801d884:	681b      	ldr	r3, [r3, #0]
 801d886:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d88a:	605a      	str	r2, [r3, #4]
 801d88c:	e007      	b.n	801d89e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d88e:	68fb      	ldr	r3, [r7, #12]
 801d890:	681b      	ldr	r3, [r3, #0]
 801d892:	685a      	ldr	r2, [r3, #4]
 801d894:	68fb      	ldr	r3, [r7, #12]
 801d896:	681b      	ldr	r3, [r3, #0]
 801d898:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d89c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d89e:	68fb      	ldr	r3, [r7, #12]
 801d8a0:	681b      	ldr	r3, [r3, #0]
 801d8a2:	681b      	ldr	r3, [r3, #0]
 801d8a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d8a8:	2b40      	cmp	r3, #64	; 0x40
 801d8aa:	d007      	beq.n	801d8bc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d8ac:	68fb      	ldr	r3, [r7, #12]
 801d8ae:	681b      	ldr	r3, [r3, #0]
 801d8b0:	681a      	ldr	r2, [r3, #0]
 801d8b2:	68fb      	ldr	r3, [r7, #12]
 801d8b4:	681b      	ldr	r3, [r3, #0]
 801d8b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d8ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d8bc:	68fb      	ldr	r3, [r7, #12]
 801d8be:	68db      	ldr	r3, [r3, #12]
 801d8c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d8c4:	d97c      	bls.n	801d9c0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d8c6:	68fb      	ldr	r3, [r7, #12]
 801d8c8:	685b      	ldr	r3, [r3, #4]
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	d002      	beq.n	801d8d4 <HAL_SPI_TransmitReceive+0x13e>
 801d8ce:	8a7b      	ldrh	r3, [r7, #18]
 801d8d0:	2b01      	cmp	r3, #1
 801d8d2:	d169      	bne.n	801d9a8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d8d4:	68fb      	ldr	r3, [r7, #12]
 801d8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d8d8:	881a      	ldrh	r2, [r3, #0]
 801d8da:	68fb      	ldr	r3, [r7, #12]
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801d8e0:	68fb      	ldr	r3, [r7, #12]
 801d8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d8e4:	1c9a      	adds	r2, r3, #2
 801d8e6:	68fb      	ldr	r3, [r7, #12]
 801d8e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801d8ea:	68fb      	ldr	r3, [r7, #12]
 801d8ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d8ee:	b29b      	uxth	r3, r3
 801d8f0:	3b01      	subs	r3, #1
 801d8f2:	b29a      	uxth	r2, r3
 801d8f4:	68fb      	ldr	r3, [r7, #12]
 801d8f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d8f8:	e056      	b.n	801d9a8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801d8fa:	68fb      	ldr	r3, [r7, #12]
 801d8fc:	681b      	ldr	r3, [r3, #0]
 801d8fe:	689b      	ldr	r3, [r3, #8]
 801d900:	f003 0302 	and.w	r3, r3, #2
 801d904:	2b02      	cmp	r3, #2
 801d906:	d11b      	bne.n	801d940 <HAL_SPI_TransmitReceive+0x1aa>
 801d908:	68fb      	ldr	r3, [r7, #12]
 801d90a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d90c:	b29b      	uxth	r3, r3
 801d90e:	2b00      	cmp	r3, #0
 801d910:	d016      	beq.n	801d940 <HAL_SPI_TransmitReceive+0x1aa>
 801d912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d914:	2b01      	cmp	r3, #1
 801d916:	d113      	bne.n	801d940 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d918:	68fb      	ldr	r3, [r7, #12]
 801d91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d91c:	881a      	ldrh	r2, [r3, #0]
 801d91e:	68fb      	ldr	r3, [r7, #12]
 801d920:	681b      	ldr	r3, [r3, #0]
 801d922:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d924:	68fb      	ldr	r3, [r7, #12]
 801d926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d928:	1c9a      	adds	r2, r3, #2
 801d92a:	68fb      	ldr	r3, [r7, #12]
 801d92c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d92e:	68fb      	ldr	r3, [r7, #12]
 801d930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d932:	b29b      	uxth	r3, r3
 801d934:	3b01      	subs	r3, #1
 801d936:	b29a      	uxth	r2, r3
 801d938:	68fb      	ldr	r3, [r7, #12]
 801d93a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801d93c:	2300      	movs	r3, #0
 801d93e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801d940:	68fb      	ldr	r3, [r7, #12]
 801d942:	681b      	ldr	r3, [r3, #0]
 801d944:	689b      	ldr	r3, [r3, #8]
 801d946:	f003 0301 	and.w	r3, r3, #1
 801d94a:	2b01      	cmp	r3, #1
 801d94c:	d11c      	bne.n	801d988 <HAL_SPI_TransmitReceive+0x1f2>
 801d94e:	68fb      	ldr	r3, [r7, #12]
 801d950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d954:	b29b      	uxth	r3, r3
 801d956:	2b00      	cmp	r3, #0
 801d958:	d016      	beq.n	801d988 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d95a:	68fb      	ldr	r3, [r7, #12]
 801d95c:	681b      	ldr	r3, [r3, #0]
 801d95e:	68da      	ldr	r2, [r3, #12]
 801d960:	68fb      	ldr	r3, [r7, #12]
 801d962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d964:	b292      	uxth	r2, r2
 801d966:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801d968:	68fb      	ldr	r3, [r7, #12]
 801d96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d96c:	1c9a      	adds	r2, r3, #2
 801d96e:	68fb      	ldr	r3, [r7, #12]
 801d970:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d972:	68fb      	ldr	r3, [r7, #12]
 801d974:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d978:	b29b      	uxth	r3, r3
 801d97a:	3b01      	subs	r3, #1
 801d97c:	b29a      	uxth	r2, r3
 801d97e:	68fb      	ldr	r3, [r7, #12]
 801d980:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801d984:	2301      	movs	r3, #1
 801d986:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801d988:	f7fb f9bc 	bl	8018d04 <HAL_GetTick>
 801d98c:	4602      	mov	r2, r0
 801d98e:	69fb      	ldr	r3, [r7, #28]
 801d990:	1ad3      	subs	r3, r2, r3
 801d992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d994:	429a      	cmp	r2, r3
 801d996:	d807      	bhi.n	801d9a8 <HAL_SPI_TransmitReceive+0x212>
 801d998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d99a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d99e:	d003      	beq.n	801d9a8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801d9a0:	2303      	movs	r3, #3
 801d9a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801d9a6:	e0fb      	b.n	801dba0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d9a8:	68fb      	ldr	r3, [r7, #12]
 801d9aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d9ac:	b29b      	uxth	r3, r3
 801d9ae:	2b00      	cmp	r3, #0
 801d9b0:	d1a3      	bne.n	801d8fa <HAL_SPI_TransmitReceive+0x164>
 801d9b2:	68fb      	ldr	r3, [r7, #12]
 801d9b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d9b8:	b29b      	uxth	r3, r3
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	d19d      	bne.n	801d8fa <HAL_SPI_TransmitReceive+0x164>
 801d9be:	e0df      	b.n	801db80 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d9c0:	68fb      	ldr	r3, [r7, #12]
 801d9c2:	685b      	ldr	r3, [r3, #4]
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	d003      	beq.n	801d9d0 <HAL_SPI_TransmitReceive+0x23a>
 801d9c8:	8a7b      	ldrh	r3, [r7, #18]
 801d9ca:	2b01      	cmp	r3, #1
 801d9cc:	f040 80cb 	bne.w	801db66 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801d9d0:	68fb      	ldr	r3, [r7, #12]
 801d9d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d9d4:	b29b      	uxth	r3, r3
 801d9d6:	2b01      	cmp	r3, #1
 801d9d8:	d912      	bls.n	801da00 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d9da:	68fb      	ldr	r3, [r7, #12]
 801d9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d9de:	881a      	ldrh	r2, [r3, #0]
 801d9e0:	68fb      	ldr	r3, [r7, #12]
 801d9e2:	681b      	ldr	r3, [r3, #0]
 801d9e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d9e6:	68fb      	ldr	r3, [r7, #12]
 801d9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d9ea:	1c9a      	adds	r2, r3, #2
 801d9ec:	68fb      	ldr	r3, [r7, #12]
 801d9ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801d9f0:	68fb      	ldr	r3, [r7, #12]
 801d9f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d9f4:	b29b      	uxth	r3, r3
 801d9f6:	3b02      	subs	r3, #2
 801d9f8:	b29a      	uxth	r2, r3
 801d9fa:	68fb      	ldr	r3, [r7, #12]
 801d9fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d9fe:	e0b2      	b.n	801db66 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801da00:	68fb      	ldr	r3, [r7, #12]
 801da02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801da04:	68fb      	ldr	r3, [r7, #12]
 801da06:	681b      	ldr	r3, [r3, #0]
 801da08:	330c      	adds	r3, #12
 801da0a:	7812      	ldrb	r2, [r2, #0]
 801da0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801da0e:	68fb      	ldr	r3, [r7, #12]
 801da10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da12:	1c5a      	adds	r2, r3, #1
 801da14:	68fb      	ldr	r3, [r7, #12]
 801da16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801da18:	68fb      	ldr	r3, [r7, #12]
 801da1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801da1c:	b29b      	uxth	r3, r3
 801da1e:	3b01      	subs	r3, #1
 801da20:	b29a      	uxth	r2, r3
 801da22:	68fb      	ldr	r3, [r7, #12]
 801da24:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801da26:	e09e      	b.n	801db66 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801da28:	68fb      	ldr	r3, [r7, #12]
 801da2a:	681b      	ldr	r3, [r3, #0]
 801da2c:	689b      	ldr	r3, [r3, #8]
 801da2e:	f003 0302 	and.w	r3, r3, #2
 801da32:	2b02      	cmp	r3, #2
 801da34:	d134      	bne.n	801daa0 <HAL_SPI_TransmitReceive+0x30a>
 801da36:	68fb      	ldr	r3, [r7, #12]
 801da38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801da3a:	b29b      	uxth	r3, r3
 801da3c:	2b00      	cmp	r3, #0
 801da3e:	d02f      	beq.n	801daa0 <HAL_SPI_TransmitReceive+0x30a>
 801da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da42:	2b01      	cmp	r3, #1
 801da44:	d12c      	bne.n	801daa0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801da46:	68fb      	ldr	r3, [r7, #12]
 801da48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801da4a:	b29b      	uxth	r3, r3
 801da4c:	2b01      	cmp	r3, #1
 801da4e:	d912      	bls.n	801da76 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801da50:	68fb      	ldr	r3, [r7, #12]
 801da52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da54:	881a      	ldrh	r2, [r3, #0]
 801da56:	68fb      	ldr	r3, [r7, #12]
 801da58:	681b      	ldr	r3, [r3, #0]
 801da5a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801da5c:	68fb      	ldr	r3, [r7, #12]
 801da5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da60:	1c9a      	adds	r2, r3, #2
 801da62:	68fb      	ldr	r3, [r7, #12]
 801da64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801da66:	68fb      	ldr	r3, [r7, #12]
 801da68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801da6a:	b29b      	uxth	r3, r3
 801da6c:	3b02      	subs	r3, #2
 801da6e:	b29a      	uxth	r2, r3
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	87da      	strh	r2, [r3, #62]	; 0x3e
 801da74:	e012      	b.n	801da9c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801da76:	68fb      	ldr	r3, [r7, #12]
 801da78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801da7a:	68fb      	ldr	r3, [r7, #12]
 801da7c:	681b      	ldr	r3, [r3, #0]
 801da7e:	330c      	adds	r3, #12
 801da80:	7812      	ldrb	r2, [r2, #0]
 801da82:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801da84:	68fb      	ldr	r3, [r7, #12]
 801da86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da88:	1c5a      	adds	r2, r3, #1
 801da8a:	68fb      	ldr	r3, [r7, #12]
 801da8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801da8e:	68fb      	ldr	r3, [r7, #12]
 801da90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801da92:	b29b      	uxth	r3, r3
 801da94:	3b01      	subs	r3, #1
 801da96:	b29a      	uxth	r2, r3
 801da98:	68fb      	ldr	r3, [r7, #12]
 801da9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801da9c:	2300      	movs	r3, #0
 801da9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801daa0:	68fb      	ldr	r3, [r7, #12]
 801daa2:	681b      	ldr	r3, [r3, #0]
 801daa4:	689b      	ldr	r3, [r3, #8]
 801daa6:	f003 0301 	and.w	r3, r3, #1
 801daaa:	2b01      	cmp	r3, #1
 801daac:	d148      	bne.n	801db40 <HAL_SPI_TransmitReceive+0x3aa>
 801daae:	68fb      	ldr	r3, [r7, #12]
 801dab0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801dab4:	b29b      	uxth	r3, r3
 801dab6:	2b00      	cmp	r3, #0
 801dab8:	d042      	beq.n	801db40 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801daba:	68fb      	ldr	r3, [r7, #12]
 801dabc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801dac0:	b29b      	uxth	r3, r3
 801dac2:	2b01      	cmp	r3, #1
 801dac4:	d923      	bls.n	801db0e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801dac6:	68fb      	ldr	r3, [r7, #12]
 801dac8:	681b      	ldr	r3, [r3, #0]
 801daca:	68da      	ldr	r2, [r3, #12]
 801dacc:	68fb      	ldr	r3, [r7, #12]
 801dace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dad0:	b292      	uxth	r2, r2
 801dad2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801dad4:	68fb      	ldr	r3, [r7, #12]
 801dad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dad8:	1c9a      	adds	r2, r3, #2
 801dada:	68fb      	ldr	r3, [r7, #12]
 801dadc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801dade:	68fb      	ldr	r3, [r7, #12]
 801dae0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801dae4:	b29b      	uxth	r3, r3
 801dae6:	3b02      	subs	r3, #2
 801dae8:	b29a      	uxth	r2, r3
 801daea:	68fb      	ldr	r3, [r7, #12]
 801daec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801daf0:	68fb      	ldr	r3, [r7, #12]
 801daf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801daf6:	b29b      	uxth	r3, r3
 801daf8:	2b01      	cmp	r3, #1
 801dafa:	d81f      	bhi.n	801db3c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801dafc:	68fb      	ldr	r3, [r7, #12]
 801dafe:	681b      	ldr	r3, [r3, #0]
 801db00:	685a      	ldr	r2, [r3, #4]
 801db02:	68fb      	ldr	r3, [r7, #12]
 801db04:	681b      	ldr	r3, [r3, #0]
 801db06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801db0a:	605a      	str	r2, [r3, #4]
 801db0c:	e016      	b.n	801db3c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801db0e:	68fb      	ldr	r3, [r7, #12]
 801db10:	681b      	ldr	r3, [r3, #0]
 801db12:	f103 020c 	add.w	r2, r3, #12
 801db16:	68fb      	ldr	r3, [r7, #12]
 801db18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db1a:	7812      	ldrb	r2, [r2, #0]
 801db1c:	b2d2      	uxtb	r2, r2
 801db1e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801db20:	68fb      	ldr	r3, [r7, #12]
 801db22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db24:	1c5a      	adds	r2, r3, #1
 801db26:	68fb      	ldr	r3, [r7, #12]
 801db28:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801db2a:	68fb      	ldr	r3, [r7, #12]
 801db2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801db30:	b29b      	uxth	r3, r3
 801db32:	3b01      	subs	r3, #1
 801db34:	b29a      	uxth	r2, r3
 801db36:	68fb      	ldr	r3, [r7, #12]
 801db38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801db3c:	2301      	movs	r3, #1
 801db3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801db40:	f7fb f8e0 	bl	8018d04 <HAL_GetTick>
 801db44:	4602      	mov	r2, r0
 801db46:	69fb      	ldr	r3, [r7, #28]
 801db48:	1ad3      	subs	r3, r2, r3
 801db4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801db4c:	429a      	cmp	r2, r3
 801db4e:	d803      	bhi.n	801db58 <HAL_SPI_TransmitReceive+0x3c2>
 801db50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db52:	f1b3 3fff 	cmp.w	r3, #4294967295
 801db56:	d102      	bne.n	801db5e <HAL_SPI_TransmitReceive+0x3c8>
 801db58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	d103      	bne.n	801db66 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801db5e:	2303      	movs	r3, #3
 801db60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801db64:	e01c      	b.n	801dba0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801db66:	68fb      	ldr	r3, [r7, #12]
 801db68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801db6a:	b29b      	uxth	r3, r3
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	f47f af5b 	bne.w	801da28 <HAL_SPI_TransmitReceive+0x292>
 801db72:	68fb      	ldr	r3, [r7, #12]
 801db74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801db78:	b29b      	uxth	r3, r3
 801db7a:	2b00      	cmp	r3, #0
 801db7c:	f47f af54 	bne.w	801da28 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801db80:	69fa      	ldr	r2, [r7, #28]
 801db82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801db84:	68f8      	ldr	r0, [r7, #12]
 801db86:	f000 f98f 	bl	801dea8 <SPI_EndRxTxTransaction>
 801db8a:	4603      	mov	r3, r0
 801db8c:	2b00      	cmp	r3, #0
 801db8e:	d006      	beq.n	801db9e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801db90:	2301      	movs	r3, #1
 801db92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801db96:	68fb      	ldr	r3, [r7, #12]
 801db98:	2220      	movs	r2, #32
 801db9a:	661a      	str	r2, [r3, #96]	; 0x60
 801db9c:	e000      	b.n	801dba0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801db9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801dba0:	68fb      	ldr	r3, [r7, #12]
 801dba2:	2201      	movs	r2, #1
 801dba4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801dba8:	68fb      	ldr	r3, [r7, #12]
 801dbaa:	2200      	movs	r2, #0
 801dbac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801dbb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801dbb4:	4618      	mov	r0, r3
 801dbb6:	3728      	adds	r7, #40	; 0x28
 801dbb8:	46bd      	mov	sp, r7
 801dbba:	bd80      	pop	{r7, pc}

0801dbbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801dbbc:	b580      	push	{r7, lr}
 801dbbe:	b088      	sub	sp, #32
 801dbc0:	af00      	add	r7, sp, #0
 801dbc2:	60f8      	str	r0, [r7, #12]
 801dbc4:	60b9      	str	r1, [r7, #8]
 801dbc6:	603b      	str	r3, [r7, #0]
 801dbc8:	4613      	mov	r3, r2
 801dbca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801dbcc:	f7fb f89a 	bl	8018d04 <HAL_GetTick>
 801dbd0:	4602      	mov	r2, r0
 801dbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbd4:	1a9b      	subs	r3, r3, r2
 801dbd6:	683a      	ldr	r2, [r7, #0]
 801dbd8:	4413      	add	r3, r2
 801dbda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801dbdc:	f7fb f892 	bl	8018d04 <HAL_GetTick>
 801dbe0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801dbe2:	4b39      	ldr	r3, [pc, #228]	; (801dcc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801dbe4:	681b      	ldr	r3, [r3, #0]
 801dbe6:	015b      	lsls	r3, r3, #5
 801dbe8:	0d1b      	lsrs	r3, r3, #20
 801dbea:	69fa      	ldr	r2, [r7, #28]
 801dbec:	fb02 f303 	mul.w	r3, r2, r3
 801dbf0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801dbf2:	e054      	b.n	801dc9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801dbf4:	683b      	ldr	r3, [r7, #0]
 801dbf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dbfa:	d050      	beq.n	801dc9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801dbfc:	f7fb f882 	bl	8018d04 <HAL_GetTick>
 801dc00:	4602      	mov	r2, r0
 801dc02:	69bb      	ldr	r3, [r7, #24]
 801dc04:	1ad3      	subs	r3, r2, r3
 801dc06:	69fa      	ldr	r2, [r7, #28]
 801dc08:	429a      	cmp	r2, r3
 801dc0a:	d902      	bls.n	801dc12 <SPI_WaitFlagStateUntilTimeout+0x56>
 801dc0c:	69fb      	ldr	r3, [r7, #28]
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	d13d      	bne.n	801dc8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801dc12:	68fb      	ldr	r3, [r7, #12]
 801dc14:	681b      	ldr	r3, [r3, #0]
 801dc16:	685a      	ldr	r2, [r3, #4]
 801dc18:	68fb      	ldr	r3, [r7, #12]
 801dc1a:	681b      	ldr	r3, [r3, #0]
 801dc1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801dc20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801dc22:	68fb      	ldr	r3, [r7, #12]
 801dc24:	685b      	ldr	r3, [r3, #4]
 801dc26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801dc2a:	d111      	bne.n	801dc50 <SPI_WaitFlagStateUntilTimeout+0x94>
 801dc2c:	68fb      	ldr	r3, [r7, #12]
 801dc2e:	689b      	ldr	r3, [r3, #8]
 801dc30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dc34:	d004      	beq.n	801dc40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801dc36:	68fb      	ldr	r3, [r7, #12]
 801dc38:	689b      	ldr	r3, [r3, #8]
 801dc3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dc3e:	d107      	bne.n	801dc50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801dc40:	68fb      	ldr	r3, [r7, #12]
 801dc42:	681b      	ldr	r3, [r3, #0]
 801dc44:	681a      	ldr	r2, [r3, #0]
 801dc46:	68fb      	ldr	r3, [r7, #12]
 801dc48:	681b      	ldr	r3, [r3, #0]
 801dc4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801dc4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801dc50:	68fb      	ldr	r3, [r7, #12]
 801dc52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801dc58:	d10f      	bne.n	801dc7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801dc5a:	68fb      	ldr	r3, [r7, #12]
 801dc5c:	681b      	ldr	r3, [r3, #0]
 801dc5e:	681a      	ldr	r2, [r3, #0]
 801dc60:	68fb      	ldr	r3, [r7, #12]
 801dc62:	681b      	ldr	r3, [r3, #0]
 801dc64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801dc68:	601a      	str	r2, [r3, #0]
 801dc6a:	68fb      	ldr	r3, [r7, #12]
 801dc6c:	681b      	ldr	r3, [r3, #0]
 801dc6e:	681a      	ldr	r2, [r3, #0]
 801dc70:	68fb      	ldr	r3, [r7, #12]
 801dc72:	681b      	ldr	r3, [r3, #0]
 801dc74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801dc78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801dc7a:	68fb      	ldr	r3, [r7, #12]
 801dc7c:	2201      	movs	r2, #1
 801dc7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801dc82:	68fb      	ldr	r3, [r7, #12]
 801dc84:	2200      	movs	r2, #0
 801dc86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801dc8a:	2303      	movs	r3, #3
 801dc8c:	e017      	b.n	801dcbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801dc8e:	697b      	ldr	r3, [r7, #20]
 801dc90:	2b00      	cmp	r3, #0
 801dc92:	d101      	bne.n	801dc98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801dc94:	2300      	movs	r3, #0
 801dc96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801dc98:	697b      	ldr	r3, [r7, #20]
 801dc9a:	3b01      	subs	r3, #1
 801dc9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801dc9e:	68fb      	ldr	r3, [r7, #12]
 801dca0:	681b      	ldr	r3, [r3, #0]
 801dca2:	689a      	ldr	r2, [r3, #8]
 801dca4:	68bb      	ldr	r3, [r7, #8]
 801dca6:	4013      	ands	r3, r2
 801dca8:	68ba      	ldr	r2, [r7, #8]
 801dcaa:	429a      	cmp	r2, r3
 801dcac:	bf0c      	ite	eq
 801dcae:	2301      	moveq	r3, #1
 801dcb0:	2300      	movne	r3, #0
 801dcb2:	b2db      	uxtb	r3, r3
 801dcb4:	461a      	mov	r2, r3
 801dcb6:	79fb      	ldrb	r3, [r7, #7]
 801dcb8:	429a      	cmp	r2, r3
 801dcba:	d19b      	bne.n	801dbf4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801dcbc:	2300      	movs	r3, #0
}
 801dcbe:	4618      	mov	r0, r3
 801dcc0:	3720      	adds	r7, #32
 801dcc2:	46bd      	mov	sp, r7
 801dcc4:	bd80      	pop	{r7, pc}
 801dcc6:	bf00      	nop
 801dcc8:	20000000 	.word	0x20000000

0801dccc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801dccc:	b580      	push	{r7, lr}
 801dcce:	b08a      	sub	sp, #40	; 0x28
 801dcd0:	af00      	add	r7, sp, #0
 801dcd2:	60f8      	str	r0, [r7, #12]
 801dcd4:	60b9      	str	r1, [r7, #8]
 801dcd6:	607a      	str	r2, [r7, #4]
 801dcd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801dcda:	2300      	movs	r3, #0
 801dcdc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801dcde:	f7fb f811 	bl	8018d04 <HAL_GetTick>
 801dce2:	4602      	mov	r2, r0
 801dce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dce6:	1a9b      	subs	r3, r3, r2
 801dce8:	683a      	ldr	r2, [r7, #0]
 801dcea:	4413      	add	r3, r2
 801dcec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801dcee:	f7fb f809 	bl	8018d04 <HAL_GetTick>
 801dcf2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801dcf4:	68fb      	ldr	r3, [r7, #12]
 801dcf6:	681b      	ldr	r3, [r3, #0]
 801dcf8:	330c      	adds	r3, #12
 801dcfa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801dcfc:	4b3d      	ldr	r3, [pc, #244]	; (801ddf4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801dcfe:	681a      	ldr	r2, [r3, #0]
 801dd00:	4613      	mov	r3, r2
 801dd02:	009b      	lsls	r3, r3, #2
 801dd04:	4413      	add	r3, r2
 801dd06:	00da      	lsls	r2, r3, #3
 801dd08:	1ad3      	subs	r3, r2, r3
 801dd0a:	0d1b      	lsrs	r3, r3, #20
 801dd0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dd0e:	fb02 f303 	mul.w	r3, r2, r3
 801dd12:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801dd14:	e060      	b.n	801ddd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801dd16:	68bb      	ldr	r3, [r7, #8]
 801dd18:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801dd1c:	d107      	bne.n	801dd2e <SPI_WaitFifoStateUntilTimeout+0x62>
 801dd1e:	687b      	ldr	r3, [r7, #4]
 801dd20:	2b00      	cmp	r3, #0
 801dd22:	d104      	bne.n	801dd2e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801dd24:	69fb      	ldr	r3, [r7, #28]
 801dd26:	781b      	ldrb	r3, [r3, #0]
 801dd28:	b2db      	uxtb	r3, r3
 801dd2a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801dd2c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801dd2e:	683b      	ldr	r3, [r7, #0]
 801dd30:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dd34:	d050      	beq.n	801ddd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801dd36:	f7fa ffe5 	bl	8018d04 <HAL_GetTick>
 801dd3a:	4602      	mov	r2, r0
 801dd3c:	6a3b      	ldr	r3, [r7, #32]
 801dd3e:	1ad3      	subs	r3, r2, r3
 801dd40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dd42:	429a      	cmp	r2, r3
 801dd44:	d902      	bls.n	801dd4c <SPI_WaitFifoStateUntilTimeout+0x80>
 801dd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd48:	2b00      	cmp	r3, #0
 801dd4a:	d13d      	bne.n	801ddc8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801dd4c:	68fb      	ldr	r3, [r7, #12]
 801dd4e:	681b      	ldr	r3, [r3, #0]
 801dd50:	685a      	ldr	r2, [r3, #4]
 801dd52:	68fb      	ldr	r3, [r7, #12]
 801dd54:	681b      	ldr	r3, [r3, #0]
 801dd56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801dd5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801dd5c:	68fb      	ldr	r3, [r7, #12]
 801dd5e:	685b      	ldr	r3, [r3, #4]
 801dd60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801dd64:	d111      	bne.n	801dd8a <SPI_WaitFifoStateUntilTimeout+0xbe>
 801dd66:	68fb      	ldr	r3, [r7, #12]
 801dd68:	689b      	ldr	r3, [r3, #8]
 801dd6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dd6e:	d004      	beq.n	801dd7a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801dd70:	68fb      	ldr	r3, [r7, #12]
 801dd72:	689b      	ldr	r3, [r3, #8]
 801dd74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dd78:	d107      	bne.n	801dd8a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801dd7a:	68fb      	ldr	r3, [r7, #12]
 801dd7c:	681b      	ldr	r3, [r3, #0]
 801dd7e:	681a      	ldr	r2, [r3, #0]
 801dd80:	68fb      	ldr	r3, [r7, #12]
 801dd82:	681b      	ldr	r3, [r3, #0]
 801dd84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801dd88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801dd8a:	68fb      	ldr	r3, [r7, #12]
 801dd8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801dd92:	d10f      	bne.n	801ddb4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801dd94:	68fb      	ldr	r3, [r7, #12]
 801dd96:	681b      	ldr	r3, [r3, #0]
 801dd98:	681a      	ldr	r2, [r3, #0]
 801dd9a:	68fb      	ldr	r3, [r7, #12]
 801dd9c:	681b      	ldr	r3, [r3, #0]
 801dd9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801dda2:	601a      	str	r2, [r3, #0]
 801dda4:	68fb      	ldr	r3, [r7, #12]
 801dda6:	681b      	ldr	r3, [r3, #0]
 801dda8:	681a      	ldr	r2, [r3, #0]
 801ddaa:	68fb      	ldr	r3, [r7, #12]
 801ddac:	681b      	ldr	r3, [r3, #0]
 801ddae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801ddb2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801ddb4:	68fb      	ldr	r3, [r7, #12]
 801ddb6:	2201      	movs	r2, #1
 801ddb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801ddbc:	68fb      	ldr	r3, [r7, #12]
 801ddbe:	2200      	movs	r2, #0
 801ddc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801ddc4:	2303      	movs	r3, #3
 801ddc6:	e010      	b.n	801ddea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801ddc8:	69bb      	ldr	r3, [r7, #24]
 801ddca:	2b00      	cmp	r3, #0
 801ddcc:	d101      	bne.n	801ddd2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801ddce:	2300      	movs	r3, #0
 801ddd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801ddd2:	69bb      	ldr	r3, [r7, #24]
 801ddd4:	3b01      	subs	r3, #1
 801ddd6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801ddd8:	68fb      	ldr	r3, [r7, #12]
 801ddda:	681b      	ldr	r3, [r3, #0]
 801dddc:	689a      	ldr	r2, [r3, #8]
 801ddde:	68bb      	ldr	r3, [r7, #8]
 801dde0:	4013      	ands	r3, r2
 801dde2:	687a      	ldr	r2, [r7, #4]
 801dde4:	429a      	cmp	r2, r3
 801dde6:	d196      	bne.n	801dd16 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801dde8:	2300      	movs	r3, #0
}
 801ddea:	4618      	mov	r0, r3
 801ddec:	3728      	adds	r7, #40	; 0x28
 801ddee:	46bd      	mov	sp, r7
 801ddf0:	bd80      	pop	{r7, pc}
 801ddf2:	bf00      	nop
 801ddf4:	20000000 	.word	0x20000000

0801ddf8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801ddf8:	b580      	push	{r7, lr}
 801ddfa:	b086      	sub	sp, #24
 801ddfc:	af02      	add	r7, sp, #8
 801ddfe:	60f8      	str	r0, [r7, #12]
 801de00:	60b9      	str	r1, [r7, #8]
 801de02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801de04:	68fb      	ldr	r3, [r7, #12]
 801de06:	685b      	ldr	r3, [r3, #4]
 801de08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801de0c:	d111      	bne.n	801de32 <SPI_EndRxTransaction+0x3a>
 801de0e:	68fb      	ldr	r3, [r7, #12]
 801de10:	689b      	ldr	r3, [r3, #8]
 801de12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801de16:	d004      	beq.n	801de22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801de18:	68fb      	ldr	r3, [r7, #12]
 801de1a:	689b      	ldr	r3, [r3, #8]
 801de1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801de20:	d107      	bne.n	801de32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801de22:	68fb      	ldr	r3, [r7, #12]
 801de24:	681b      	ldr	r3, [r3, #0]
 801de26:	681a      	ldr	r2, [r3, #0]
 801de28:	68fb      	ldr	r3, [r7, #12]
 801de2a:	681b      	ldr	r3, [r3, #0]
 801de2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801de30:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801de32:	687b      	ldr	r3, [r7, #4]
 801de34:	9300      	str	r3, [sp, #0]
 801de36:	68bb      	ldr	r3, [r7, #8]
 801de38:	2200      	movs	r2, #0
 801de3a:	2180      	movs	r1, #128	; 0x80
 801de3c:	68f8      	ldr	r0, [r7, #12]
 801de3e:	f7ff febd 	bl	801dbbc <SPI_WaitFlagStateUntilTimeout>
 801de42:	4603      	mov	r3, r0
 801de44:	2b00      	cmp	r3, #0
 801de46:	d007      	beq.n	801de58 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801de48:	68fb      	ldr	r3, [r7, #12]
 801de4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801de4c:	f043 0220 	orr.w	r2, r3, #32
 801de50:	68fb      	ldr	r3, [r7, #12]
 801de52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801de54:	2303      	movs	r3, #3
 801de56:	e023      	b.n	801dea0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801de58:	68fb      	ldr	r3, [r7, #12]
 801de5a:	685b      	ldr	r3, [r3, #4]
 801de5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801de60:	d11d      	bne.n	801de9e <SPI_EndRxTransaction+0xa6>
 801de62:	68fb      	ldr	r3, [r7, #12]
 801de64:	689b      	ldr	r3, [r3, #8]
 801de66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801de6a:	d004      	beq.n	801de76 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801de6c:	68fb      	ldr	r3, [r7, #12]
 801de6e:	689b      	ldr	r3, [r3, #8]
 801de70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801de74:	d113      	bne.n	801de9e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801de76:	687b      	ldr	r3, [r7, #4]
 801de78:	9300      	str	r3, [sp, #0]
 801de7a:	68bb      	ldr	r3, [r7, #8]
 801de7c:	2200      	movs	r2, #0
 801de7e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801de82:	68f8      	ldr	r0, [r7, #12]
 801de84:	f7ff ff22 	bl	801dccc <SPI_WaitFifoStateUntilTimeout>
 801de88:	4603      	mov	r3, r0
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	d007      	beq.n	801de9e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801de8e:	68fb      	ldr	r3, [r7, #12]
 801de90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801de92:	f043 0220 	orr.w	r2, r3, #32
 801de96:	68fb      	ldr	r3, [r7, #12]
 801de98:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801de9a:	2303      	movs	r3, #3
 801de9c:	e000      	b.n	801dea0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801de9e:	2300      	movs	r3, #0
}
 801dea0:	4618      	mov	r0, r3
 801dea2:	3710      	adds	r7, #16
 801dea4:	46bd      	mov	sp, r7
 801dea6:	bd80      	pop	{r7, pc}

0801dea8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801dea8:	b580      	push	{r7, lr}
 801deaa:	b086      	sub	sp, #24
 801deac:	af02      	add	r7, sp, #8
 801deae:	60f8      	str	r0, [r7, #12]
 801deb0:	60b9      	str	r1, [r7, #8]
 801deb2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801deb4:	687b      	ldr	r3, [r7, #4]
 801deb6:	9300      	str	r3, [sp, #0]
 801deb8:	68bb      	ldr	r3, [r7, #8]
 801deba:	2200      	movs	r2, #0
 801debc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801dec0:	68f8      	ldr	r0, [r7, #12]
 801dec2:	f7ff ff03 	bl	801dccc <SPI_WaitFifoStateUntilTimeout>
 801dec6:	4603      	mov	r3, r0
 801dec8:	2b00      	cmp	r3, #0
 801deca:	d007      	beq.n	801dedc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801decc:	68fb      	ldr	r3, [r7, #12]
 801dece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ded0:	f043 0220 	orr.w	r2, r3, #32
 801ded4:	68fb      	ldr	r3, [r7, #12]
 801ded6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801ded8:	2303      	movs	r3, #3
 801deda:	e027      	b.n	801df2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	9300      	str	r3, [sp, #0]
 801dee0:	68bb      	ldr	r3, [r7, #8]
 801dee2:	2200      	movs	r2, #0
 801dee4:	2180      	movs	r1, #128	; 0x80
 801dee6:	68f8      	ldr	r0, [r7, #12]
 801dee8:	f7ff fe68 	bl	801dbbc <SPI_WaitFlagStateUntilTimeout>
 801deec:	4603      	mov	r3, r0
 801deee:	2b00      	cmp	r3, #0
 801def0:	d007      	beq.n	801df02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801def2:	68fb      	ldr	r3, [r7, #12]
 801def4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801def6:	f043 0220 	orr.w	r2, r3, #32
 801defa:	68fb      	ldr	r3, [r7, #12]
 801defc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801defe:	2303      	movs	r3, #3
 801df00:	e014      	b.n	801df2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801df02:	687b      	ldr	r3, [r7, #4]
 801df04:	9300      	str	r3, [sp, #0]
 801df06:	68bb      	ldr	r3, [r7, #8]
 801df08:	2200      	movs	r2, #0
 801df0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801df0e:	68f8      	ldr	r0, [r7, #12]
 801df10:	f7ff fedc 	bl	801dccc <SPI_WaitFifoStateUntilTimeout>
 801df14:	4603      	mov	r3, r0
 801df16:	2b00      	cmp	r3, #0
 801df18:	d007      	beq.n	801df2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801df1a:	68fb      	ldr	r3, [r7, #12]
 801df1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801df1e:	f043 0220 	orr.w	r2, r3, #32
 801df22:	68fb      	ldr	r3, [r7, #12]
 801df24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801df26:	2303      	movs	r3, #3
 801df28:	e000      	b.n	801df2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801df2a:	2300      	movs	r3, #0
}
 801df2c:	4618      	mov	r0, r3
 801df2e:	3710      	adds	r7, #16
 801df30:	46bd      	mov	sp, r7
 801df32:	bd80      	pop	{r7, pc}

0801df34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801df34:	b580      	push	{r7, lr}
 801df36:	b082      	sub	sp, #8
 801df38:	af00      	add	r7, sp, #0
 801df3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801df3c:	687b      	ldr	r3, [r7, #4]
 801df3e:	2b00      	cmp	r3, #0
 801df40:	d101      	bne.n	801df46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801df42:	2301      	movs	r3, #1
 801df44:	e049      	b.n	801dfda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801df46:	687b      	ldr	r3, [r7, #4]
 801df48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801df4c:	b2db      	uxtb	r3, r3
 801df4e:	2b00      	cmp	r3, #0
 801df50:	d106      	bne.n	801df60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801df52:	687b      	ldr	r3, [r7, #4]
 801df54:	2200      	movs	r2, #0
 801df56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801df5a:	6878      	ldr	r0, [r7, #4]
 801df5c:	f7f9 fd3e 	bl	80179dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801df60:	687b      	ldr	r3, [r7, #4]
 801df62:	2202      	movs	r2, #2
 801df64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801df68:	687b      	ldr	r3, [r7, #4]
 801df6a:	681a      	ldr	r2, [r3, #0]
 801df6c:	687b      	ldr	r3, [r7, #4]
 801df6e:	3304      	adds	r3, #4
 801df70:	4619      	mov	r1, r3
 801df72:	4610      	mov	r0, r2
 801df74:	f000 fd6c 	bl	801ea50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801df78:	687b      	ldr	r3, [r7, #4]
 801df7a:	2201      	movs	r2, #1
 801df7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801df80:	687b      	ldr	r3, [r7, #4]
 801df82:	2201      	movs	r2, #1
 801df84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801df88:	687b      	ldr	r3, [r7, #4]
 801df8a:	2201      	movs	r2, #1
 801df8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801df90:	687b      	ldr	r3, [r7, #4]
 801df92:	2201      	movs	r2, #1
 801df94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801df98:	687b      	ldr	r3, [r7, #4]
 801df9a:	2201      	movs	r2, #1
 801df9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801dfa0:	687b      	ldr	r3, [r7, #4]
 801dfa2:	2201      	movs	r2, #1
 801dfa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801dfa8:	687b      	ldr	r3, [r7, #4]
 801dfaa:	2201      	movs	r2, #1
 801dfac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801dfb0:	687b      	ldr	r3, [r7, #4]
 801dfb2:	2201      	movs	r2, #1
 801dfb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801dfb8:	687b      	ldr	r3, [r7, #4]
 801dfba:	2201      	movs	r2, #1
 801dfbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801dfc0:	687b      	ldr	r3, [r7, #4]
 801dfc2:	2201      	movs	r2, #1
 801dfc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	2201      	movs	r2, #1
 801dfcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801dfd0:	687b      	ldr	r3, [r7, #4]
 801dfd2:	2201      	movs	r2, #1
 801dfd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801dfd8:	2300      	movs	r3, #0
}
 801dfda:	4618      	mov	r0, r3
 801dfdc:	3708      	adds	r7, #8
 801dfde:	46bd      	mov	sp, r7
 801dfe0:	bd80      	pop	{r7, pc}
	...

0801dfe4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801dfe4:	b480      	push	{r7}
 801dfe6:	b085      	sub	sp, #20
 801dfe8:	af00      	add	r7, sp, #0
 801dfea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dff2:	b2db      	uxtb	r3, r3
 801dff4:	2b01      	cmp	r3, #1
 801dff6:	d001      	beq.n	801dffc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801dff8:	2301      	movs	r3, #1
 801dffa:	e04f      	b.n	801e09c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	2202      	movs	r2, #2
 801e000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801e004:	687b      	ldr	r3, [r7, #4]
 801e006:	681b      	ldr	r3, [r3, #0]
 801e008:	68da      	ldr	r2, [r3, #12]
 801e00a:	687b      	ldr	r3, [r7, #4]
 801e00c:	681b      	ldr	r3, [r3, #0]
 801e00e:	f042 0201 	orr.w	r2, r2, #1
 801e012:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e014:	687b      	ldr	r3, [r7, #4]
 801e016:	681b      	ldr	r3, [r3, #0]
 801e018:	4a23      	ldr	r2, [pc, #140]	; (801e0a8 <HAL_TIM_Base_Start_IT+0xc4>)
 801e01a:	4293      	cmp	r3, r2
 801e01c:	d01d      	beq.n	801e05a <HAL_TIM_Base_Start_IT+0x76>
 801e01e:	687b      	ldr	r3, [r7, #4]
 801e020:	681b      	ldr	r3, [r3, #0]
 801e022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e026:	d018      	beq.n	801e05a <HAL_TIM_Base_Start_IT+0x76>
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	681b      	ldr	r3, [r3, #0]
 801e02c:	4a1f      	ldr	r2, [pc, #124]	; (801e0ac <HAL_TIM_Base_Start_IT+0xc8>)
 801e02e:	4293      	cmp	r3, r2
 801e030:	d013      	beq.n	801e05a <HAL_TIM_Base_Start_IT+0x76>
 801e032:	687b      	ldr	r3, [r7, #4]
 801e034:	681b      	ldr	r3, [r3, #0]
 801e036:	4a1e      	ldr	r2, [pc, #120]	; (801e0b0 <HAL_TIM_Base_Start_IT+0xcc>)
 801e038:	4293      	cmp	r3, r2
 801e03a:	d00e      	beq.n	801e05a <HAL_TIM_Base_Start_IT+0x76>
 801e03c:	687b      	ldr	r3, [r7, #4]
 801e03e:	681b      	ldr	r3, [r3, #0]
 801e040:	4a1c      	ldr	r2, [pc, #112]	; (801e0b4 <HAL_TIM_Base_Start_IT+0xd0>)
 801e042:	4293      	cmp	r3, r2
 801e044:	d009      	beq.n	801e05a <HAL_TIM_Base_Start_IT+0x76>
 801e046:	687b      	ldr	r3, [r7, #4]
 801e048:	681b      	ldr	r3, [r3, #0]
 801e04a:	4a1b      	ldr	r2, [pc, #108]	; (801e0b8 <HAL_TIM_Base_Start_IT+0xd4>)
 801e04c:	4293      	cmp	r3, r2
 801e04e:	d004      	beq.n	801e05a <HAL_TIM_Base_Start_IT+0x76>
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	681b      	ldr	r3, [r3, #0]
 801e054:	4a19      	ldr	r2, [pc, #100]	; (801e0bc <HAL_TIM_Base_Start_IT+0xd8>)
 801e056:	4293      	cmp	r3, r2
 801e058:	d115      	bne.n	801e086 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e05a:	687b      	ldr	r3, [r7, #4]
 801e05c:	681b      	ldr	r3, [r3, #0]
 801e05e:	689a      	ldr	r2, [r3, #8]
 801e060:	4b17      	ldr	r3, [pc, #92]	; (801e0c0 <HAL_TIM_Base_Start_IT+0xdc>)
 801e062:	4013      	ands	r3, r2
 801e064:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e066:	68fb      	ldr	r3, [r7, #12]
 801e068:	2b06      	cmp	r3, #6
 801e06a:	d015      	beq.n	801e098 <HAL_TIM_Base_Start_IT+0xb4>
 801e06c:	68fb      	ldr	r3, [r7, #12]
 801e06e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e072:	d011      	beq.n	801e098 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801e074:	687b      	ldr	r3, [r7, #4]
 801e076:	681b      	ldr	r3, [r3, #0]
 801e078:	681a      	ldr	r2, [r3, #0]
 801e07a:	687b      	ldr	r3, [r7, #4]
 801e07c:	681b      	ldr	r3, [r3, #0]
 801e07e:	f042 0201 	orr.w	r2, r2, #1
 801e082:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e084:	e008      	b.n	801e098 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e086:	687b      	ldr	r3, [r7, #4]
 801e088:	681b      	ldr	r3, [r3, #0]
 801e08a:	681a      	ldr	r2, [r3, #0]
 801e08c:	687b      	ldr	r3, [r7, #4]
 801e08e:	681b      	ldr	r3, [r3, #0]
 801e090:	f042 0201 	orr.w	r2, r2, #1
 801e094:	601a      	str	r2, [r3, #0]
 801e096:	e000      	b.n	801e09a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e098:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e09a:	2300      	movs	r3, #0
}
 801e09c:	4618      	mov	r0, r3
 801e09e:	3714      	adds	r7, #20
 801e0a0:	46bd      	mov	sp, r7
 801e0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0a6:	4770      	bx	lr
 801e0a8:	40012c00 	.word	0x40012c00
 801e0ac:	40000400 	.word	0x40000400
 801e0b0:	40000800 	.word	0x40000800
 801e0b4:	40013400 	.word	0x40013400
 801e0b8:	40014000 	.word	0x40014000
 801e0bc:	40015000 	.word	0x40015000
 801e0c0:	00010007 	.word	0x00010007

0801e0c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801e0c4:	b580      	push	{r7, lr}
 801e0c6:	b082      	sub	sp, #8
 801e0c8:	af00      	add	r7, sp, #0
 801e0ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	2b00      	cmp	r3, #0
 801e0d0:	d101      	bne.n	801e0d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801e0d2:	2301      	movs	r3, #1
 801e0d4:	e049      	b.n	801e16a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e0d6:	687b      	ldr	r3, [r7, #4]
 801e0d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e0dc:	b2db      	uxtb	r3, r3
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	d106      	bne.n	801e0f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801e0e2:	687b      	ldr	r3, [r7, #4]
 801e0e4:	2200      	movs	r2, #0
 801e0e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801e0ea:	6878      	ldr	r0, [r7, #4]
 801e0ec:	f7f9 fcb0 	bl	8017a50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e0f0:	687b      	ldr	r3, [r7, #4]
 801e0f2:	2202      	movs	r2, #2
 801e0f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	681a      	ldr	r2, [r3, #0]
 801e0fc:	687b      	ldr	r3, [r7, #4]
 801e0fe:	3304      	adds	r3, #4
 801e100:	4619      	mov	r1, r3
 801e102:	4610      	mov	r0, r2
 801e104:	f000 fca4 	bl	801ea50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801e108:	687b      	ldr	r3, [r7, #4]
 801e10a:	2201      	movs	r2, #1
 801e10c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e110:	687b      	ldr	r3, [r7, #4]
 801e112:	2201      	movs	r2, #1
 801e114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e118:	687b      	ldr	r3, [r7, #4]
 801e11a:	2201      	movs	r2, #1
 801e11c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	2201      	movs	r2, #1
 801e124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	2201      	movs	r2, #1
 801e12c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	2201      	movs	r2, #1
 801e134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e138:	687b      	ldr	r3, [r7, #4]
 801e13a:	2201      	movs	r2, #1
 801e13c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e140:	687b      	ldr	r3, [r7, #4]
 801e142:	2201      	movs	r2, #1
 801e144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e148:	687b      	ldr	r3, [r7, #4]
 801e14a:	2201      	movs	r2, #1
 801e14c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e150:	687b      	ldr	r3, [r7, #4]
 801e152:	2201      	movs	r2, #1
 801e154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801e158:	687b      	ldr	r3, [r7, #4]
 801e15a:	2201      	movs	r2, #1
 801e15c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e160:	687b      	ldr	r3, [r7, #4]
 801e162:	2201      	movs	r2, #1
 801e164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801e168:	2300      	movs	r3, #0
}
 801e16a:	4618      	mov	r0, r3
 801e16c:	3708      	adds	r7, #8
 801e16e:	46bd      	mov	sp, r7
 801e170:	bd80      	pop	{r7, pc}
	...

0801e174 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801e174:	b580      	push	{r7, lr}
 801e176:	b084      	sub	sp, #16
 801e178:	af00      	add	r7, sp, #0
 801e17a:	6078      	str	r0, [r7, #4]
 801e17c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801e17e:	683b      	ldr	r3, [r7, #0]
 801e180:	2b00      	cmp	r3, #0
 801e182:	d109      	bne.n	801e198 <HAL_TIM_PWM_Start+0x24>
 801e184:	687b      	ldr	r3, [r7, #4]
 801e186:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e18a:	b2db      	uxtb	r3, r3
 801e18c:	2b01      	cmp	r3, #1
 801e18e:	bf14      	ite	ne
 801e190:	2301      	movne	r3, #1
 801e192:	2300      	moveq	r3, #0
 801e194:	b2db      	uxtb	r3, r3
 801e196:	e03c      	b.n	801e212 <HAL_TIM_PWM_Start+0x9e>
 801e198:	683b      	ldr	r3, [r7, #0]
 801e19a:	2b04      	cmp	r3, #4
 801e19c:	d109      	bne.n	801e1b2 <HAL_TIM_PWM_Start+0x3e>
 801e19e:	687b      	ldr	r3, [r7, #4]
 801e1a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801e1a4:	b2db      	uxtb	r3, r3
 801e1a6:	2b01      	cmp	r3, #1
 801e1a8:	bf14      	ite	ne
 801e1aa:	2301      	movne	r3, #1
 801e1ac:	2300      	moveq	r3, #0
 801e1ae:	b2db      	uxtb	r3, r3
 801e1b0:	e02f      	b.n	801e212 <HAL_TIM_PWM_Start+0x9e>
 801e1b2:	683b      	ldr	r3, [r7, #0]
 801e1b4:	2b08      	cmp	r3, #8
 801e1b6:	d109      	bne.n	801e1cc <HAL_TIM_PWM_Start+0x58>
 801e1b8:	687b      	ldr	r3, [r7, #4]
 801e1ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801e1be:	b2db      	uxtb	r3, r3
 801e1c0:	2b01      	cmp	r3, #1
 801e1c2:	bf14      	ite	ne
 801e1c4:	2301      	movne	r3, #1
 801e1c6:	2300      	moveq	r3, #0
 801e1c8:	b2db      	uxtb	r3, r3
 801e1ca:	e022      	b.n	801e212 <HAL_TIM_PWM_Start+0x9e>
 801e1cc:	683b      	ldr	r3, [r7, #0]
 801e1ce:	2b0c      	cmp	r3, #12
 801e1d0:	d109      	bne.n	801e1e6 <HAL_TIM_PWM_Start+0x72>
 801e1d2:	687b      	ldr	r3, [r7, #4]
 801e1d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801e1d8:	b2db      	uxtb	r3, r3
 801e1da:	2b01      	cmp	r3, #1
 801e1dc:	bf14      	ite	ne
 801e1de:	2301      	movne	r3, #1
 801e1e0:	2300      	moveq	r3, #0
 801e1e2:	b2db      	uxtb	r3, r3
 801e1e4:	e015      	b.n	801e212 <HAL_TIM_PWM_Start+0x9e>
 801e1e6:	683b      	ldr	r3, [r7, #0]
 801e1e8:	2b10      	cmp	r3, #16
 801e1ea:	d109      	bne.n	801e200 <HAL_TIM_PWM_Start+0x8c>
 801e1ec:	687b      	ldr	r3, [r7, #4]
 801e1ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e1f2:	b2db      	uxtb	r3, r3
 801e1f4:	2b01      	cmp	r3, #1
 801e1f6:	bf14      	ite	ne
 801e1f8:	2301      	movne	r3, #1
 801e1fa:	2300      	moveq	r3, #0
 801e1fc:	b2db      	uxtb	r3, r3
 801e1fe:	e008      	b.n	801e212 <HAL_TIM_PWM_Start+0x9e>
 801e200:	687b      	ldr	r3, [r7, #4]
 801e202:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801e206:	b2db      	uxtb	r3, r3
 801e208:	2b01      	cmp	r3, #1
 801e20a:	bf14      	ite	ne
 801e20c:	2301      	movne	r3, #1
 801e20e:	2300      	moveq	r3, #0
 801e210:	b2db      	uxtb	r3, r3
 801e212:	2b00      	cmp	r3, #0
 801e214:	d001      	beq.n	801e21a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801e216:	2301      	movs	r3, #1
 801e218:	e0a1      	b.n	801e35e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801e21a:	683b      	ldr	r3, [r7, #0]
 801e21c:	2b00      	cmp	r3, #0
 801e21e:	d104      	bne.n	801e22a <HAL_TIM_PWM_Start+0xb6>
 801e220:	687b      	ldr	r3, [r7, #4]
 801e222:	2202      	movs	r2, #2
 801e224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e228:	e023      	b.n	801e272 <HAL_TIM_PWM_Start+0xfe>
 801e22a:	683b      	ldr	r3, [r7, #0]
 801e22c:	2b04      	cmp	r3, #4
 801e22e:	d104      	bne.n	801e23a <HAL_TIM_PWM_Start+0xc6>
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	2202      	movs	r2, #2
 801e234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e238:	e01b      	b.n	801e272 <HAL_TIM_PWM_Start+0xfe>
 801e23a:	683b      	ldr	r3, [r7, #0]
 801e23c:	2b08      	cmp	r3, #8
 801e23e:	d104      	bne.n	801e24a <HAL_TIM_PWM_Start+0xd6>
 801e240:	687b      	ldr	r3, [r7, #4]
 801e242:	2202      	movs	r2, #2
 801e244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e248:	e013      	b.n	801e272 <HAL_TIM_PWM_Start+0xfe>
 801e24a:	683b      	ldr	r3, [r7, #0]
 801e24c:	2b0c      	cmp	r3, #12
 801e24e:	d104      	bne.n	801e25a <HAL_TIM_PWM_Start+0xe6>
 801e250:	687b      	ldr	r3, [r7, #4]
 801e252:	2202      	movs	r2, #2
 801e254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e258:	e00b      	b.n	801e272 <HAL_TIM_PWM_Start+0xfe>
 801e25a:	683b      	ldr	r3, [r7, #0]
 801e25c:	2b10      	cmp	r3, #16
 801e25e:	d104      	bne.n	801e26a <HAL_TIM_PWM_Start+0xf6>
 801e260:	687b      	ldr	r3, [r7, #4]
 801e262:	2202      	movs	r2, #2
 801e264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e268:	e003      	b.n	801e272 <HAL_TIM_PWM_Start+0xfe>
 801e26a:	687b      	ldr	r3, [r7, #4]
 801e26c:	2202      	movs	r2, #2
 801e26e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801e272:	687b      	ldr	r3, [r7, #4]
 801e274:	681b      	ldr	r3, [r3, #0]
 801e276:	2201      	movs	r2, #1
 801e278:	6839      	ldr	r1, [r7, #0]
 801e27a:	4618      	mov	r0, r3
 801e27c:	f000 ffb0 	bl	801f1e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801e280:	687b      	ldr	r3, [r7, #4]
 801e282:	681b      	ldr	r3, [r3, #0]
 801e284:	4a38      	ldr	r2, [pc, #224]	; (801e368 <HAL_TIM_PWM_Start+0x1f4>)
 801e286:	4293      	cmp	r3, r2
 801e288:	d018      	beq.n	801e2bc <HAL_TIM_PWM_Start+0x148>
 801e28a:	687b      	ldr	r3, [r7, #4]
 801e28c:	681b      	ldr	r3, [r3, #0]
 801e28e:	4a37      	ldr	r2, [pc, #220]	; (801e36c <HAL_TIM_PWM_Start+0x1f8>)
 801e290:	4293      	cmp	r3, r2
 801e292:	d013      	beq.n	801e2bc <HAL_TIM_PWM_Start+0x148>
 801e294:	687b      	ldr	r3, [r7, #4]
 801e296:	681b      	ldr	r3, [r3, #0]
 801e298:	4a35      	ldr	r2, [pc, #212]	; (801e370 <HAL_TIM_PWM_Start+0x1fc>)
 801e29a:	4293      	cmp	r3, r2
 801e29c:	d00e      	beq.n	801e2bc <HAL_TIM_PWM_Start+0x148>
 801e29e:	687b      	ldr	r3, [r7, #4]
 801e2a0:	681b      	ldr	r3, [r3, #0]
 801e2a2:	4a34      	ldr	r2, [pc, #208]	; (801e374 <HAL_TIM_PWM_Start+0x200>)
 801e2a4:	4293      	cmp	r3, r2
 801e2a6:	d009      	beq.n	801e2bc <HAL_TIM_PWM_Start+0x148>
 801e2a8:	687b      	ldr	r3, [r7, #4]
 801e2aa:	681b      	ldr	r3, [r3, #0]
 801e2ac:	4a32      	ldr	r2, [pc, #200]	; (801e378 <HAL_TIM_PWM_Start+0x204>)
 801e2ae:	4293      	cmp	r3, r2
 801e2b0:	d004      	beq.n	801e2bc <HAL_TIM_PWM_Start+0x148>
 801e2b2:	687b      	ldr	r3, [r7, #4]
 801e2b4:	681b      	ldr	r3, [r3, #0]
 801e2b6:	4a31      	ldr	r2, [pc, #196]	; (801e37c <HAL_TIM_PWM_Start+0x208>)
 801e2b8:	4293      	cmp	r3, r2
 801e2ba:	d101      	bne.n	801e2c0 <HAL_TIM_PWM_Start+0x14c>
 801e2bc:	2301      	movs	r3, #1
 801e2be:	e000      	b.n	801e2c2 <HAL_TIM_PWM_Start+0x14e>
 801e2c0:	2300      	movs	r3, #0
 801e2c2:	2b00      	cmp	r3, #0
 801e2c4:	d007      	beq.n	801e2d6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801e2c6:	687b      	ldr	r3, [r7, #4]
 801e2c8:	681b      	ldr	r3, [r3, #0]
 801e2ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e2cc:	687b      	ldr	r3, [r7, #4]
 801e2ce:	681b      	ldr	r3, [r3, #0]
 801e2d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801e2d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e2d6:	687b      	ldr	r3, [r7, #4]
 801e2d8:	681b      	ldr	r3, [r3, #0]
 801e2da:	4a23      	ldr	r2, [pc, #140]	; (801e368 <HAL_TIM_PWM_Start+0x1f4>)
 801e2dc:	4293      	cmp	r3, r2
 801e2de:	d01d      	beq.n	801e31c <HAL_TIM_PWM_Start+0x1a8>
 801e2e0:	687b      	ldr	r3, [r7, #4]
 801e2e2:	681b      	ldr	r3, [r3, #0]
 801e2e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e2e8:	d018      	beq.n	801e31c <HAL_TIM_PWM_Start+0x1a8>
 801e2ea:	687b      	ldr	r3, [r7, #4]
 801e2ec:	681b      	ldr	r3, [r3, #0]
 801e2ee:	4a24      	ldr	r2, [pc, #144]	; (801e380 <HAL_TIM_PWM_Start+0x20c>)
 801e2f0:	4293      	cmp	r3, r2
 801e2f2:	d013      	beq.n	801e31c <HAL_TIM_PWM_Start+0x1a8>
 801e2f4:	687b      	ldr	r3, [r7, #4]
 801e2f6:	681b      	ldr	r3, [r3, #0]
 801e2f8:	4a22      	ldr	r2, [pc, #136]	; (801e384 <HAL_TIM_PWM_Start+0x210>)
 801e2fa:	4293      	cmp	r3, r2
 801e2fc:	d00e      	beq.n	801e31c <HAL_TIM_PWM_Start+0x1a8>
 801e2fe:	687b      	ldr	r3, [r7, #4]
 801e300:	681b      	ldr	r3, [r3, #0]
 801e302:	4a1a      	ldr	r2, [pc, #104]	; (801e36c <HAL_TIM_PWM_Start+0x1f8>)
 801e304:	4293      	cmp	r3, r2
 801e306:	d009      	beq.n	801e31c <HAL_TIM_PWM_Start+0x1a8>
 801e308:	687b      	ldr	r3, [r7, #4]
 801e30a:	681b      	ldr	r3, [r3, #0]
 801e30c:	4a18      	ldr	r2, [pc, #96]	; (801e370 <HAL_TIM_PWM_Start+0x1fc>)
 801e30e:	4293      	cmp	r3, r2
 801e310:	d004      	beq.n	801e31c <HAL_TIM_PWM_Start+0x1a8>
 801e312:	687b      	ldr	r3, [r7, #4]
 801e314:	681b      	ldr	r3, [r3, #0]
 801e316:	4a19      	ldr	r2, [pc, #100]	; (801e37c <HAL_TIM_PWM_Start+0x208>)
 801e318:	4293      	cmp	r3, r2
 801e31a:	d115      	bne.n	801e348 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e31c:	687b      	ldr	r3, [r7, #4]
 801e31e:	681b      	ldr	r3, [r3, #0]
 801e320:	689a      	ldr	r2, [r3, #8]
 801e322:	4b19      	ldr	r3, [pc, #100]	; (801e388 <HAL_TIM_PWM_Start+0x214>)
 801e324:	4013      	ands	r3, r2
 801e326:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e328:	68fb      	ldr	r3, [r7, #12]
 801e32a:	2b06      	cmp	r3, #6
 801e32c:	d015      	beq.n	801e35a <HAL_TIM_PWM_Start+0x1e6>
 801e32e:	68fb      	ldr	r3, [r7, #12]
 801e330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e334:	d011      	beq.n	801e35a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 801e336:	687b      	ldr	r3, [r7, #4]
 801e338:	681b      	ldr	r3, [r3, #0]
 801e33a:	681a      	ldr	r2, [r3, #0]
 801e33c:	687b      	ldr	r3, [r7, #4]
 801e33e:	681b      	ldr	r3, [r3, #0]
 801e340:	f042 0201 	orr.w	r2, r2, #1
 801e344:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e346:	e008      	b.n	801e35a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e348:	687b      	ldr	r3, [r7, #4]
 801e34a:	681b      	ldr	r3, [r3, #0]
 801e34c:	681a      	ldr	r2, [r3, #0]
 801e34e:	687b      	ldr	r3, [r7, #4]
 801e350:	681b      	ldr	r3, [r3, #0]
 801e352:	f042 0201 	orr.w	r2, r2, #1
 801e356:	601a      	str	r2, [r3, #0]
 801e358:	e000      	b.n	801e35c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e35a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e35c:	2300      	movs	r3, #0
}
 801e35e:	4618      	mov	r0, r3
 801e360:	3710      	adds	r7, #16
 801e362:	46bd      	mov	sp, r7
 801e364:	bd80      	pop	{r7, pc}
 801e366:	bf00      	nop
 801e368:	40012c00 	.word	0x40012c00
 801e36c:	40013400 	.word	0x40013400
 801e370:	40014000 	.word	0x40014000
 801e374:	40014400 	.word	0x40014400
 801e378:	40014800 	.word	0x40014800
 801e37c:	40015000 	.word	0x40015000
 801e380:	40000400 	.word	0x40000400
 801e384:	40000800 	.word	0x40000800
 801e388:	00010007 	.word	0x00010007

0801e38c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801e38c:	b580      	push	{r7, lr}
 801e38e:	b082      	sub	sp, #8
 801e390:	af00      	add	r7, sp, #0
 801e392:	6078      	str	r0, [r7, #4]
 801e394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801e396:	687b      	ldr	r3, [r7, #4]
 801e398:	681b      	ldr	r3, [r3, #0]
 801e39a:	2200      	movs	r2, #0
 801e39c:	6839      	ldr	r1, [r7, #0]
 801e39e:	4618      	mov	r0, r3
 801e3a0:	f000 ff1e 	bl	801f1e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	681b      	ldr	r3, [r3, #0]
 801e3a8:	4a40      	ldr	r2, [pc, #256]	; (801e4ac <HAL_TIM_PWM_Stop+0x120>)
 801e3aa:	4293      	cmp	r3, r2
 801e3ac:	d018      	beq.n	801e3e0 <HAL_TIM_PWM_Stop+0x54>
 801e3ae:	687b      	ldr	r3, [r7, #4]
 801e3b0:	681b      	ldr	r3, [r3, #0]
 801e3b2:	4a3f      	ldr	r2, [pc, #252]	; (801e4b0 <HAL_TIM_PWM_Stop+0x124>)
 801e3b4:	4293      	cmp	r3, r2
 801e3b6:	d013      	beq.n	801e3e0 <HAL_TIM_PWM_Stop+0x54>
 801e3b8:	687b      	ldr	r3, [r7, #4]
 801e3ba:	681b      	ldr	r3, [r3, #0]
 801e3bc:	4a3d      	ldr	r2, [pc, #244]	; (801e4b4 <HAL_TIM_PWM_Stop+0x128>)
 801e3be:	4293      	cmp	r3, r2
 801e3c0:	d00e      	beq.n	801e3e0 <HAL_TIM_PWM_Stop+0x54>
 801e3c2:	687b      	ldr	r3, [r7, #4]
 801e3c4:	681b      	ldr	r3, [r3, #0]
 801e3c6:	4a3c      	ldr	r2, [pc, #240]	; (801e4b8 <HAL_TIM_PWM_Stop+0x12c>)
 801e3c8:	4293      	cmp	r3, r2
 801e3ca:	d009      	beq.n	801e3e0 <HAL_TIM_PWM_Stop+0x54>
 801e3cc:	687b      	ldr	r3, [r7, #4]
 801e3ce:	681b      	ldr	r3, [r3, #0]
 801e3d0:	4a3a      	ldr	r2, [pc, #232]	; (801e4bc <HAL_TIM_PWM_Stop+0x130>)
 801e3d2:	4293      	cmp	r3, r2
 801e3d4:	d004      	beq.n	801e3e0 <HAL_TIM_PWM_Stop+0x54>
 801e3d6:	687b      	ldr	r3, [r7, #4]
 801e3d8:	681b      	ldr	r3, [r3, #0]
 801e3da:	4a39      	ldr	r2, [pc, #228]	; (801e4c0 <HAL_TIM_PWM_Stop+0x134>)
 801e3dc:	4293      	cmp	r3, r2
 801e3de:	d101      	bne.n	801e3e4 <HAL_TIM_PWM_Stop+0x58>
 801e3e0:	2301      	movs	r3, #1
 801e3e2:	e000      	b.n	801e3e6 <HAL_TIM_PWM_Stop+0x5a>
 801e3e4:	2300      	movs	r3, #0
 801e3e6:	2b00      	cmp	r3, #0
 801e3e8:	d017      	beq.n	801e41a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801e3ea:	687b      	ldr	r3, [r7, #4]
 801e3ec:	681b      	ldr	r3, [r3, #0]
 801e3ee:	6a1a      	ldr	r2, [r3, #32]
 801e3f0:	f241 1311 	movw	r3, #4369	; 0x1111
 801e3f4:	4013      	ands	r3, r2
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	d10f      	bne.n	801e41a <HAL_TIM_PWM_Stop+0x8e>
 801e3fa:	687b      	ldr	r3, [r7, #4]
 801e3fc:	681b      	ldr	r3, [r3, #0]
 801e3fe:	6a1a      	ldr	r2, [r3, #32]
 801e400:	f244 4344 	movw	r3, #17476	; 0x4444
 801e404:	4013      	ands	r3, r2
 801e406:	2b00      	cmp	r3, #0
 801e408:	d107      	bne.n	801e41a <HAL_TIM_PWM_Stop+0x8e>
 801e40a:	687b      	ldr	r3, [r7, #4]
 801e40c:	681b      	ldr	r3, [r3, #0]
 801e40e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e410:	687b      	ldr	r3, [r7, #4]
 801e412:	681b      	ldr	r3, [r3, #0]
 801e414:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801e418:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	681b      	ldr	r3, [r3, #0]
 801e41e:	6a1a      	ldr	r2, [r3, #32]
 801e420:	f241 1311 	movw	r3, #4369	; 0x1111
 801e424:	4013      	ands	r3, r2
 801e426:	2b00      	cmp	r3, #0
 801e428:	d10f      	bne.n	801e44a <HAL_TIM_PWM_Stop+0xbe>
 801e42a:	687b      	ldr	r3, [r7, #4]
 801e42c:	681b      	ldr	r3, [r3, #0]
 801e42e:	6a1a      	ldr	r2, [r3, #32]
 801e430:	f244 4344 	movw	r3, #17476	; 0x4444
 801e434:	4013      	ands	r3, r2
 801e436:	2b00      	cmp	r3, #0
 801e438:	d107      	bne.n	801e44a <HAL_TIM_PWM_Stop+0xbe>
 801e43a:	687b      	ldr	r3, [r7, #4]
 801e43c:	681b      	ldr	r3, [r3, #0]
 801e43e:	681a      	ldr	r2, [r3, #0]
 801e440:	687b      	ldr	r3, [r7, #4]
 801e442:	681b      	ldr	r3, [r3, #0]
 801e444:	f022 0201 	bic.w	r2, r2, #1
 801e448:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801e44a:	683b      	ldr	r3, [r7, #0]
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	d104      	bne.n	801e45a <HAL_TIM_PWM_Stop+0xce>
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	2201      	movs	r2, #1
 801e454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e458:	e023      	b.n	801e4a2 <HAL_TIM_PWM_Stop+0x116>
 801e45a:	683b      	ldr	r3, [r7, #0]
 801e45c:	2b04      	cmp	r3, #4
 801e45e:	d104      	bne.n	801e46a <HAL_TIM_PWM_Stop+0xde>
 801e460:	687b      	ldr	r3, [r7, #4]
 801e462:	2201      	movs	r2, #1
 801e464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e468:	e01b      	b.n	801e4a2 <HAL_TIM_PWM_Stop+0x116>
 801e46a:	683b      	ldr	r3, [r7, #0]
 801e46c:	2b08      	cmp	r3, #8
 801e46e:	d104      	bne.n	801e47a <HAL_TIM_PWM_Stop+0xee>
 801e470:	687b      	ldr	r3, [r7, #4]
 801e472:	2201      	movs	r2, #1
 801e474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e478:	e013      	b.n	801e4a2 <HAL_TIM_PWM_Stop+0x116>
 801e47a:	683b      	ldr	r3, [r7, #0]
 801e47c:	2b0c      	cmp	r3, #12
 801e47e:	d104      	bne.n	801e48a <HAL_TIM_PWM_Stop+0xfe>
 801e480:	687b      	ldr	r3, [r7, #4]
 801e482:	2201      	movs	r2, #1
 801e484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e488:	e00b      	b.n	801e4a2 <HAL_TIM_PWM_Stop+0x116>
 801e48a:	683b      	ldr	r3, [r7, #0]
 801e48c:	2b10      	cmp	r3, #16
 801e48e:	d104      	bne.n	801e49a <HAL_TIM_PWM_Stop+0x10e>
 801e490:	687b      	ldr	r3, [r7, #4]
 801e492:	2201      	movs	r2, #1
 801e494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e498:	e003      	b.n	801e4a2 <HAL_TIM_PWM_Stop+0x116>
 801e49a:	687b      	ldr	r3, [r7, #4]
 801e49c:	2201      	movs	r2, #1
 801e49e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 801e4a2:	2300      	movs	r3, #0
}
 801e4a4:	4618      	mov	r0, r3
 801e4a6:	3708      	adds	r7, #8
 801e4a8:	46bd      	mov	sp, r7
 801e4aa:	bd80      	pop	{r7, pc}
 801e4ac:	40012c00 	.word	0x40012c00
 801e4b0:	40013400 	.word	0x40013400
 801e4b4:	40014000 	.word	0x40014000
 801e4b8:	40014400 	.word	0x40014400
 801e4bc:	40014800 	.word	0x40014800
 801e4c0:	40015000 	.word	0x40015000

0801e4c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801e4c4:	b580      	push	{r7, lr}
 801e4c6:	b082      	sub	sp, #8
 801e4c8:	af00      	add	r7, sp, #0
 801e4ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801e4cc:	687b      	ldr	r3, [r7, #4]
 801e4ce:	681b      	ldr	r3, [r3, #0]
 801e4d0:	691b      	ldr	r3, [r3, #16]
 801e4d2:	f003 0302 	and.w	r3, r3, #2
 801e4d6:	2b02      	cmp	r3, #2
 801e4d8:	d122      	bne.n	801e520 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801e4da:	687b      	ldr	r3, [r7, #4]
 801e4dc:	681b      	ldr	r3, [r3, #0]
 801e4de:	68db      	ldr	r3, [r3, #12]
 801e4e0:	f003 0302 	and.w	r3, r3, #2
 801e4e4:	2b02      	cmp	r3, #2
 801e4e6:	d11b      	bne.n	801e520 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801e4e8:	687b      	ldr	r3, [r7, #4]
 801e4ea:	681b      	ldr	r3, [r3, #0]
 801e4ec:	f06f 0202 	mvn.w	r2, #2
 801e4f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801e4f2:	687b      	ldr	r3, [r7, #4]
 801e4f4:	2201      	movs	r2, #1
 801e4f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801e4f8:	687b      	ldr	r3, [r7, #4]
 801e4fa:	681b      	ldr	r3, [r3, #0]
 801e4fc:	699b      	ldr	r3, [r3, #24]
 801e4fe:	f003 0303 	and.w	r3, r3, #3
 801e502:	2b00      	cmp	r3, #0
 801e504:	d003      	beq.n	801e50e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801e506:	6878      	ldr	r0, [r7, #4]
 801e508:	f000 fa84 	bl	801ea14 <HAL_TIM_IC_CaptureCallback>
 801e50c:	e005      	b.n	801e51a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801e50e:	6878      	ldr	r0, [r7, #4]
 801e510:	f000 fa76 	bl	801ea00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e514:	6878      	ldr	r0, [r7, #4]
 801e516:	f000 fa87 	bl	801ea28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	2200      	movs	r2, #0
 801e51e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801e520:	687b      	ldr	r3, [r7, #4]
 801e522:	681b      	ldr	r3, [r3, #0]
 801e524:	691b      	ldr	r3, [r3, #16]
 801e526:	f003 0304 	and.w	r3, r3, #4
 801e52a:	2b04      	cmp	r3, #4
 801e52c:	d122      	bne.n	801e574 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801e52e:	687b      	ldr	r3, [r7, #4]
 801e530:	681b      	ldr	r3, [r3, #0]
 801e532:	68db      	ldr	r3, [r3, #12]
 801e534:	f003 0304 	and.w	r3, r3, #4
 801e538:	2b04      	cmp	r3, #4
 801e53a:	d11b      	bne.n	801e574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801e53c:	687b      	ldr	r3, [r7, #4]
 801e53e:	681b      	ldr	r3, [r3, #0]
 801e540:	f06f 0204 	mvn.w	r2, #4
 801e544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801e546:	687b      	ldr	r3, [r7, #4]
 801e548:	2202      	movs	r2, #2
 801e54a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801e54c:	687b      	ldr	r3, [r7, #4]
 801e54e:	681b      	ldr	r3, [r3, #0]
 801e550:	699b      	ldr	r3, [r3, #24]
 801e552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e556:	2b00      	cmp	r3, #0
 801e558:	d003      	beq.n	801e562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e55a:	6878      	ldr	r0, [r7, #4]
 801e55c:	f000 fa5a 	bl	801ea14 <HAL_TIM_IC_CaptureCallback>
 801e560:	e005      	b.n	801e56e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e562:	6878      	ldr	r0, [r7, #4]
 801e564:	f000 fa4c 	bl	801ea00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e568:	6878      	ldr	r0, [r7, #4]
 801e56a:	f000 fa5d 	bl	801ea28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e56e:	687b      	ldr	r3, [r7, #4]
 801e570:	2200      	movs	r2, #0
 801e572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801e574:	687b      	ldr	r3, [r7, #4]
 801e576:	681b      	ldr	r3, [r3, #0]
 801e578:	691b      	ldr	r3, [r3, #16]
 801e57a:	f003 0308 	and.w	r3, r3, #8
 801e57e:	2b08      	cmp	r3, #8
 801e580:	d122      	bne.n	801e5c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801e582:	687b      	ldr	r3, [r7, #4]
 801e584:	681b      	ldr	r3, [r3, #0]
 801e586:	68db      	ldr	r3, [r3, #12]
 801e588:	f003 0308 	and.w	r3, r3, #8
 801e58c:	2b08      	cmp	r3, #8
 801e58e:	d11b      	bne.n	801e5c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801e590:	687b      	ldr	r3, [r7, #4]
 801e592:	681b      	ldr	r3, [r3, #0]
 801e594:	f06f 0208 	mvn.w	r2, #8
 801e598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801e59a:	687b      	ldr	r3, [r7, #4]
 801e59c:	2204      	movs	r2, #4
 801e59e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801e5a0:	687b      	ldr	r3, [r7, #4]
 801e5a2:	681b      	ldr	r3, [r3, #0]
 801e5a4:	69db      	ldr	r3, [r3, #28]
 801e5a6:	f003 0303 	and.w	r3, r3, #3
 801e5aa:	2b00      	cmp	r3, #0
 801e5ac:	d003      	beq.n	801e5b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e5ae:	6878      	ldr	r0, [r7, #4]
 801e5b0:	f000 fa30 	bl	801ea14 <HAL_TIM_IC_CaptureCallback>
 801e5b4:	e005      	b.n	801e5c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e5b6:	6878      	ldr	r0, [r7, #4]
 801e5b8:	f000 fa22 	bl	801ea00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e5bc:	6878      	ldr	r0, [r7, #4]
 801e5be:	f000 fa33 	bl	801ea28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e5c2:	687b      	ldr	r3, [r7, #4]
 801e5c4:	2200      	movs	r2, #0
 801e5c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801e5c8:	687b      	ldr	r3, [r7, #4]
 801e5ca:	681b      	ldr	r3, [r3, #0]
 801e5cc:	691b      	ldr	r3, [r3, #16]
 801e5ce:	f003 0310 	and.w	r3, r3, #16
 801e5d2:	2b10      	cmp	r3, #16
 801e5d4:	d122      	bne.n	801e61c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801e5d6:	687b      	ldr	r3, [r7, #4]
 801e5d8:	681b      	ldr	r3, [r3, #0]
 801e5da:	68db      	ldr	r3, [r3, #12]
 801e5dc:	f003 0310 	and.w	r3, r3, #16
 801e5e0:	2b10      	cmp	r3, #16
 801e5e2:	d11b      	bne.n	801e61c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801e5e4:	687b      	ldr	r3, [r7, #4]
 801e5e6:	681b      	ldr	r3, [r3, #0]
 801e5e8:	f06f 0210 	mvn.w	r2, #16
 801e5ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801e5ee:	687b      	ldr	r3, [r7, #4]
 801e5f0:	2208      	movs	r2, #8
 801e5f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801e5f4:	687b      	ldr	r3, [r7, #4]
 801e5f6:	681b      	ldr	r3, [r3, #0]
 801e5f8:	69db      	ldr	r3, [r3, #28]
 801e5fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e5fe:	2b00      	cmp	r3, #0
 801e600:	d003      	beq.n	801e60a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e602:	6878      	ldr	r0, [r7, #4]
 801e604:	f000 fa06 	bl	801ea14 <HAL_TIM_IC_CaptureCallback>
 801e608:	e005      	b.n	801e616 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e60a:	6878      	ldr	r0, [r7, #4]
 801e60c:	f000 f9f8 	bl	801ea00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e610:	6878      	ldr	r0, [r7, #4]
 801e612:	f000 fa09 	bl	801ea28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e616:	687b      	ldr	r3, [r7, #4]
 801e618:	2200      	movs	r2, #0
 801e61a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801e61c:	687b      	ldr	r3, [r7, #4]
 801e61e:	681b      	ldr	r3, [r3, #0]
 801e620:	691b      	ldr	r3, [r3, #16]
 801e622:	f003 0301 	and.w	r3, r3, #1
 801e626:	2b01      	cmp	r3, #1
 801e628:	d10e      	bne.n	801e648 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801e62a:	687b      	ldr	r3, [r7, #4]
 801e62c:	681b      	ldr	r3, [r3, #0]
 801e62e:	68db      	ldr	r3, [r3, #12]
 801e630:	f003 0301 	and.w	r3, r3, #1
 801e634:	2b01      	cmp	r3, #1
 801e636:	d107      	bne.n	801e648 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801e638:	687b      	ldr	r3, [r7, #4]
 801e63a:	681b      	ldr	r3, [r3, #0]
 801e63c:	f06f 0201 	mvn.w	r2, #1
 801e640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801e642:	6878      	ldr	r0, [r7, #4]
 801e644:	f000 f9d2 	bl	801e9ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	691b      	ldr	r3, [r3, #16]
 801e64e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e652:	2b80      	cmp	r3, #128	; 0x80
 801e654:	d10e      	bne.n	801e674 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e656:	687b      	ldr	r3, [r7, #4]
 801e658:	681b      	ldr	r3, [r3, #0]
 801e65a:	68db      	ldr	r3, [r3, #12]
 801e65c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e660:	2b80      	cmp	r3, #128	; 0x80
 801e662:	d107      	bne.n	801e674 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	681b      	ldr	r3, [r3, #0]
 801e668:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801e66c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801e66e:	6878      	ldr	r0, [r7, #4]
 801e670:	f000 ff26 	bl	801f4c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801e674:	687b      	ldr	r3, [r7, #4]
 801e676:	681b      	ldr	r3, [r3, #0]
 801e678:	691b      	ldr	r3, [r3, #16]
 801e67a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e67e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e682:	d10e      	bne.n	801e6a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e684:	687b      	ldr	r3, [r7, #4]
 801e686:	681b      	ldr	r3, [r3, #0]
 801e688:	68db      	ldr	r3, [r3, #12]
 801e68a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e68e:	2b80      	cmp	r3, #128	; 0x80
 801e690:	d107      	bne.n	801e6a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801e692:	687b      	ldr	r3, [r7, #4]
 801e694:	681b      	ldr	r3, [r3, #0]
 801e696:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801e69a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801e69c:	6878      	ldr	r0, [r7, #4]
 801e69e:	f000 ff19 	bl	801f4d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801e6a2:	687b      	ldr	r3, [r7, #4]
 801e6a4:	681b      	ldr	r3, [r3, #0]
 801e6a6:	691b      	ldr	r3, [r3, #16]
 801e6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e6ac:	2b40      	cmp	r3, #64	; 0x40
 801e6ae:	d10e      	bne.n	801e6ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801e6b0:	687b      	ldr	r3, [r7, #4]
 801e6b2:	681b      	ldr	r3, [r3, #0]
 801e6b4:	68db      	ldr	r3, [r3, #12]
 801e6b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e6ba:	2b40      	cmp	r3, #64	; 0x40
 801e6bc:	d107      	bne.n	801e6ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801e6be:	687b      	ldr	r3, [r7, #4]
 801e6c0:	681b      	ldr	r3, [r3, #0]
 801e6c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801e6c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801e6c8:	6878      	ldr	r0, [r7, #4]
 801e6ca:	f000 f9b7 	bl	801ea3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801e6ce:	687b      	ldr	r3, [r7, #4]
 801e6d0:	681b      	ldr	r3, [r3, #0]
 801e6d2:	691b      	ldr	r3, [r3, #16]
 801e6d4:	f003 0320 	and.w	r3, r3, #32
 801e6d8:	2b20      	cmp	r3, #32
 801e6da:	d10e      	bne.n	801e6fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801e6dc:	687b      	ldr	r3, [r7, #4]
 801e6de:	681b      	ldr	r3, [r3, #0]
 801e6e0:	68db      	ldr	r3, [r3, #12]
 801e6e2:	f003 0320 	and.w	r3, r3, #32
 801e6e6:	2b20      	cmp	r3, #32
 801e6e8:	d107      	bne.n	801e6fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801e6ea:	687b      	ldr	r3, [r7, #4]
 801e6ec:	681b      	ldr	r3, [r3, #0]
 801e6ee:	f06f 0220 	mvn.w	r2, #32
 801e6f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801e6f4:	6878      	ldr	r0, [r7, #4]
 801e6f6:	f000 fed9 	bl	801f4ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 801e6fa:	687b      	ldr	r3, [r7, #4]
 801e6fc:	681b      	ldr	r3, [r3, #0]
 801e6fe:	691b      	ldr	r3, [r3, #16]
 801e700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e704:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e708:	d10f      	bne.n	801e72a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 801e70a:	687b      	ldr	r3, [r7, #4]
 801e70c:	681b      	ldr	r3, [r3, #0]
 801e70e:	68db      	ldr	r3, [r3, #12]
 801e710:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e714:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e718:	d107      	bne.n	801e72a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 801e71a:	687b      	ldr	r3, [r7, #4]
 801e71c:	681b      	ldr	r3, [r3, #0]
 801e71e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 801e722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 801e724:	6878      	ldr	r0, [r7, #4]
 801e726:	f000 fedf 	bl	801f4e8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 801e72a:	687b      	ldr	r3, [r7, #4]
 801e72c:	681b      	ldr	r3, [r3, #0]
 801e72e:	691b      	ldr	r3, [r3, #16]
 801e730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e734:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801e738:	d10f      	bne.n	801e75a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 801e73a:	687b      	ldr	r3, [r7, #4]
 801e73c:	681b      	ldr	r3, [r3, #0]
 801e73e:	68db      	ldr	r3, [r3, #12]
 801e740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e744:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801e748:	d107      	bne.n	801e75a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 801e74a:	687b      	ldr	r3, [r7, #4]
 801e74c:	681b      	ldr	r3, [r3, #0]
 801e74e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 801e752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 801e754:	6878      	ldr	r0, [r7, #4]
 801e756:	f000 fed1 	bl	801f4fc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 801e75a:	687b      	ldr	r3, [r7, #4]
 801e75c:	681b      	ldr	r3, [r3, #0]
 801e75e:	691b      	ldr	r3, [r3, #16]
 801e760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801e764:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801e768:	d10f      	bne.n	801e78a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 801e76a:	687b      	ldr	r3, [r7, #4]
 801e76c:	681b      	ldr	r3, [r3, #0]
 801e76e:	68db      	ldr	r3, [r3, #12]
 801e770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801e774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801e778:	d107      	bne.n	801e78a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 801e77a:	687b      	ldr	r3, [r7, #4]
 801e77c:	681b      	ldr	r3, [r3, #0]
 801e77e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 801e782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 801e784:	6878      	ldr	r0, [r7, #4]
 801e786:	f000 fec3 	bl	801f510 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	681b      	ldr	r3, [r3, #0]
 801e78e:	691b      	ldr	r3, [r3, #16]
 801e790:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801e794:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801e798:	d10f      	bne.n	801e7ba <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 801e79a:	687b      	ldr	r3, [r7, #4]
 801e79c:	681b      	ldr	r3, [r3, #0]
 801e79e:	68db      	ldr	r3, [r3, #12]
 801e7a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801e7a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801e7a8:	d107      	bne.n	801e7ba <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 801e7aa:	687b      	ldr	r3, [r7, #4]
 801e7ac:	681b      	ldr	r3, [r3, #0]
 801e7ae:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 801e7b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 801e7b4:	6878      	ldr	r0, [r7, #4]
 801e7b6:	f000 feb5 	bl	801f524 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801e7ba:	bf00      	nop
 801e7bc:	3708      	adds	r7, #8
 801e7be:	46bd      	mov	sp, r7
 801e7c0:	bd80      	pop	{r7, pc}
	...

0801e7c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801e7c4:	b580      	push	{r7, lr}
 801e7c6:	b086      	sub	sp, #24
 801e7c8:	af00      	add	r7, sp, #0
 801e7ca:	60f8      	str	r0, [r7, #12]
 801e7cc:	60b9      	str	r1, [r7, #8]
 801e7ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801e7d0:	2300      	movs	r3, #0
 801e7d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801e7d4:	68fb      	ldr	r3, [r7, #12]
 801e7d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e7da:	2b01      	cmp	r3, #1
 801e7dc:	d101      	bne.n	801e7e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801e7de:	2302      	movs	r3, #2
 801e7e0:	e0ff      	b.n	801e9e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 801e7e2:	68fb      	ldr	r3, [r7, #12]
 801e7e4:	2201      	movs	r2, #1
 801e7e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801e7ea:	687b      	ldr	r3, [r7, #4]
 801e7ec:	2b14      	cmp	r3, #20
 801e7ee:	f200 80f0 	bhi.w	801e9d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 801e7f2:	a201      	add	r2, pc, #4	; (adr r2, 801e7f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801e7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e7f8:	0801e84d 	.word	0x0801e84d
 801e7fc:	0801e9d3 	.word	0x0801e9d3
 801e800:	0801e9d3 	.word	0x0801e9d3
 801e804:	0801e9d3 	.word	0x0801e9d3
 801e808:	0801e88d 	.word	0x0801e88d
 801e80c:	0801e9d3 	.word	0x0801e9d3
 801e810:	0801e9d3 	.word	0x0801e9d3
 801e814:	0801e9d3 	.word	0x0801e9d3
 801e818:	0801e8cf 	.word	0x0801e8cf
 801e81c:	0801e9d3 	.word	0x0801e9d3
 801e820:	0801e9d3 	.word	0x0801e9d3
 801e824:	0801e9d3 	.word	0x0801e9d3
 801e828:	0801e90f 	.word	0x0801e90f
 801e82c:	0801e9d3 	.word	0x0801e9d3
 801e830:	0801e9d3 	.word	0x0801e9d3
 801e834:	0801e9d3 	.word	0x0801e9d3
 801e838:	0801e951 	.word	0x0801e951
 801e83c:	0801e9d3 	.word	0x0801e9d3
 801e840:	0801e9d3 	.word	0x0801e9d3
 801e844:	0801e9d3 	.word	0x0801e9d3
 801e848:	0801e991 	.word	0x0801e991
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801e84c:	68fb      	ldr	r3, [r7, #12]
 801e84e:	681b      	ldr	r3, [r3, #0]
 801e850:	68b9      	ldr	r1, [r7, #8]
 801e852:	4618      	mov	r0, r3
 801e854:	f000 f99a 	bl	801eb8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801e858:	68fb      	ldr	r3, [r7, #12]
 801e85a:	681b      	ldr	r3, [r3, #0]
 801e85c:	699a      	ldr	r2, [r3, #24]
 801e85e:	68fb      	ldr	r3, [r7, #12]
 801e860:	681b      	ldr	r3, [r3, #0]
 801e862:	f042 0208 	orr.w	r2, r2, #8
 801e866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801e868:	68fb      	ldr	r3, [r7, #12]
 801e86a:	681b      	ldr	r3, [r3, #0]
 801e86c:	699a      	ldr	r2, [r3, #24]
 801e86e:	68fb      	ldr	r3, [r7, #12]
 801e870:	681b      	ldr	r3, [r3, #0]
 801e872:	f022 0204 	bic.w	r2, r2, #4
 801e876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801e878:	68fb      	ldr	r3, [r7, #12]
 801e87a:	681b      	ldr	r3, [r3, #0]
 801e87c:	6999      	ldr	r1, [r3, #24]
 801e87e:	68bb      	ldr	r3, [r7, #8]
 801e880:	691a      	ldr	r2, [r3, #16]
 801e882:	68fb      	ldr	r3, [r7, #12]
 801e884:	681b      	ldr	r3, [r3, #0]
 801e886:	430a      	orrs	r2, r1
 801e888:	619a      	str	r2, [r3, #24]
      break;
 801e88a:	e0a5      	b.n	801e9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801e88c:	68fb      	ldr	r3, [r7, #12]
 801e88e:	681b      	ldr	r3, [r3, #0]
 801e890:	68b9      	ldr	r1, [r7, #8]
 801e892:	4618      	mov	r0, r3
 801e894:	f000 fa14 	bl	801ecc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801e898:	68fb      	ldr	r3, [r7, #12]
 801e89a:	681b      	ldr	r3, [r3, #0]
 801e89c:	699a      	ldr	r2, [r3, #24]
 801e89e:	68fb      	ldr	r3, [r7, #12]
 801e8a0:	681b      	ldr	r3, [r3, #0]
 801e8a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e8a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801e8a8:	68fb      	ldr	r3, [r7, #12]
 801e8aa:	681b      	ldr	r3, [r3, #0]
 801e8ac:	699a      	ldr	r2, [r3, #24]
 801e8ae:	68fb      	ldr	r3, [r7, #12]
 801e8b0:	681b      	ldr	r3, [r3, #0]
 801e8b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e8b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801e8b8:	68fb      	ldr	r3, [r7, #12]
 801e8ba:	681b      	ldr	r3, [r3, #0]
 801e8bc:	6999      	ldr	r1, [r3, #24]
 801e8be:	68bb      	ldr	r3, [r7, #8]
 801e8c0:	691b      	ldr	r3, [r3, #16]
 801e8c2:	021a      	lsls	r2, r3, #8
 801e8c4:	68fb      	ldr	r3, [r7, #12]
 801e8c6:	681b      	ldr	r3, [r3, #0]
 801e8c8:	430a      	orrs	r2, r1
 801e8ca:	619a      	str	r2, [r3, #24]
      break;
 801e8cc:	e084      	b.n	801e9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801e8ce:	68fb      	ldr	r3, [r7, #12]
 801e8d0:	681b      	ldr	r3, [r3, #0]
 801e8d2:	68b9      	ldr	r1, [r7, #8]
 801e8d4:	4618      	mov	r0, r3
 801e8d6:	f000 fa87 	bl	801ede8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801e8da:	68fb      	ldr	r3, [r7, #12]
 801e8dc:	681b      	ldr	r3, [r3, #0]
 801e8de:	69da      	ldr	r2, [r3, #28]
 801e8e0:	68fb      	ldr	r3, [r7, #12]
 801e8e2:	681b      	ldr	r3, [r3, #0]
 801e8e4:	f042 0208 	orr.w	r2, r2, #8
 801e8e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801e8ea:	68fb      	ldr	r3, [r7, #12]
 801e8ec:	681b      	ldr	r3, [r3, #0]
 801e8ee:	69da      	ldr	r2, [r3, #28]
 801e8f0:	68fb      	ldr	r3, [r7, #12]
 801e8f2:	681b      	ldr	r3, [r3, #0]
 801e8f4:	f022 0204 	bic.w	r2, r2, #4
 801e8f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801e8fa:	68fb      	ldr	r3, [r7, #12]
 801e8fc:	681b      	ldr	r3, [r3, #0]
 801e8fe:	69d9      	ldr	r1, [r3, #28]
 801e900:	68bb      	ldr	r3, [r7, #8]
 801e902:	691a      	ldr	r2, [r3, #16]
 801e904:	68fb      	ldr	r3, [r7, #12]
 801e906:	681b      	ldr	r3, [r3, #0]
 801e908:	430a      	orrs	r2, r1
 801e90a:	61da      	str	r2, [r3, #28]
      break;
 801e90c:	e064      	b.n	801e9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801e90e:	68fb      	ldr	r3, [r7, #12]
 801e910:	681b      	ldr	r3, [r3, #0]
 801e912:	68b9      	ldr	r1, [r7, #8]
 801e914:	4618      	mov	r0, r3
 801e916:	f000 faf9 	bl	801ef0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801e91a:	68fb      	ldr	r3, [r7, #12]
 801e91c:	681b      	ldr	r3, [r3, #0]
 801e91e:	69da      	ldr	r2, [r3, #28]
 801e920:	68fb      	ldr	r3, [r7, #12]
 801e922:	681b      	ldr	r3, [r3, #0]
 801e924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801e92a:	68fb      	ldr	r3, [r7, #12]
 801e92c:	681b      	ldr	r3, [r3, #0]
 801e92e:	69da      	ldr	r2, [r3, #28]
 801e930:	68fb      	ldr	r3, [r7, #12]
 801e932:	681b      	ldr	r3, [r3, #0]
 801e934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801e93a:	68fb      	ldr	r3, [r7, #12]
 801e93c:	681b      	ldr	r3, [r3, #0]
 801e93e:	69d9      	ldr	r1, [r3, #28]
 801e940:	68bb      	ldr	r3, [r7, #8]
 801e942:	691b      	ldr	r3, [r3, #16]
 801e944:	021a      	lsls	r2, r3, #8
 801e946:	68fb      	ldr	r3, [r7, #12]
 801e948:	681b      	ldr	r3, [r3, #0]
 801e94a:	430a      	orrs	r2, r1
 801e94c:	61da      	str	r2, [r3, #28]
      break;
 801e94e:	e043      	b.n	801e9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801e950:	68fb      	ldr	r3, [r7, #12]
 801e952:	681b      	ldr	r3, [r3, #0]
 801e954:	68b9      	ldr	r1, [r7, #8]
 801e956:	4618      	mov	r0, r3
 801e958:	f000 fb6c 	bl	801f034 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801e95c:	68fb      	ldr	r3, [r7, #12]
 801e95e:	681b      	ldr	r3, [r3, #0]
 801e960:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e962:	68fb      	ldr	r3, [r7, #12]
 801e964:	681b      	ldr	r3, [r3, #0]
 801e966:	f042 0208 	orr.w	r2, r2, #8
 801e96a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801e96c:	68fb      	ldr	r3, [r7, #12]
 801e96e:	681b      	ldr	r3, [r3, #0]
 801e970:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e972:	68fb      	ldr	r3, [r7, #12]
 801e974:	681b      	ldr	r3, [r3, #0]
 801e976:	f022 0204 	bic.w	r2, r2, #4
 801e97a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801e97c:	68fb      	ldr	r3, [r7, #12]
 801e97e:	681b      	ldr	r3, [r3, #0]
 801e980:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801e982:	68bb      	ldr	r3, [r7, #8]
 801e984:	691a      	ldr	r2, [r3, #16]
 801e986:	68fb      	ldr	r3, [r7, #12]
 801e988:	681b      	ldr	r3, [r3, #0]
 801e98a:	430a      	orrs	r2, r1
 801e98c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801e98e:	e023      	b.n	801e9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801e990:	68fb      	ldr	r3, [r7, #12]
 801e992:	681b      	ldr	r3, [r3, #0]
 801e994:	68b9      	ldr	r1, [r7, #8]
 801e996:	4618      	mov	r0, r3
 801e998:	f000 fbb6 	bl	801f108 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801e99c:	68fb      	ldr	r3, [r7, #12]
 801e99e:	681b      	ldr	r3, [r3, #0]
 801e9a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e9a2:	68fb      	ldr	r3, [r7, #12]
 801e9a4:	681b      	ldr	r3, [r3, #0]
 801e9a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e9aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801e9ac:	68fb      	ldr	r3, [r7, #12]
 801e9ae:	681b      	ldr	r3, [r3, #0]
 801e9b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e9b2:	68fb      	ldr	r3, [r7, #12]
 801e9b4:	681b      	ldr	r3, [r3, #0]
 801e9b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e9ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801e9bc:	68fb      	ldr	r3, [r7, #12]
 801e9be:	681b      	ldr	r3, [r3, #0]
 801e9c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801e9c2:	68bb      	ldr	r3, [r7, #8]
 801e9c4:	691b      	ldr	r3, [r3, #16]
 801e9c6:	021a      	lsls	r2, r3, #8
 801e9c8:	68fb      	ldr	r3, [r7, #12]
 801e9ca:	681b      	ldr	r3, [r3, #0]
 801e9cc:	430a      	orrs	r2, r1
 801e9ce:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801e9d0:	e002      	b.n	801e9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801e9d2:	2301      	movs	r3, #1
 801e9d4:	75fb      	strb	r3, [r7, #23]
      break;
 801e9d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801e9d8:	68fb      	ldr	r3, [r7, #12]
 801e9da:	2200      	movs	r2, #0
 801e9dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801e9e0:	7dfb      	ldrb	r3, [r7, #23]
}
 801e9e2:	4618      	mov	r0, r3
 801e9e4:	3718      	adds	r7, #24
 801e9e6:	46bd      	mov	sp, r7
 801e9e8:	bd80      	pop	{r7, pc}
 801e9ea:	bf00      	nop

0801e9ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801e9ec:	b480      	push	{r7}
 801e9ee:	b083      	sub	sp, #12
 801e9f0:	af00      	add	r7, sp, #0
 801e9f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801e9f4:	bf00      	nop
 801e9f6:	370c      	adds	r7, #12
 801e9f8:	46bd      	mov	sp, r7
 801e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9fe:	4770      	bx	lr

0801ea00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801ea00:	b480      	push	{r7}
 801ea02:	b083      	sub	sp, #12
 801ea04:	af00      	add	r7, sp, #0
 801ea06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801ea08:	bf00      	nop
 801ea0a:	370c      	adds	r7, #12
 801ea0c:	46bd      	mov	sp, r7
 801ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea12:	4770      	bx	lr

0801ea14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801ea14:	b480      	push	{r7}
 801ea16:	b083      	sub	sp, #12
 801ea18:	af00      	add	r7, sp, #0
 801ea1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801ea1c:	bf00      	nop
 801ea1e:	370c      	adds	r7, #12
 801ea20:	46bd      	mov	sp, r7
 801ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea26:	4770      	bx	lr

0801ea28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801ea28:	b480      	push	{r7}
 801ea2a:	b083      	sub	sp, #12
 801ea2c:	af00      	add	r7, sp, #0
 801ea2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801ea30:	bf00      	nop
 801ea32:	370c      	adds	r7, #12
 801ea34:	46bd      	mov	sp, r7
 801ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea3a:	4770      	bx	lr

0801ea3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801ea3c:	b480      	push	{r7}
 801ea3e:	b083      	sub	sp, #12
 801ea40:	af00      	add	r7, sp, #0
 801ea42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801ea44:	bf00      	nop
 801ea46:	370c      	adds	r7, #12
 801ea48:	46bd      	mov	sp, r7
 801ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea4e:	4770      	bx	lr

0801ea50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801ea50:	b480      	push	{r7}
 801ea52:	b085      	sub	sp, #20
 801ea54:	af00      	add	r7, sp, #0
 801ea56:	6078      	str	r0, [r7, #4]
 801ea58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801ea5a:	687b      	ldr	r3, [r7, #4]
 801ea5c:	681b      	ldr	r3, [r3, #0]
 801ea5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801ea60:	687b      	ldr	r3, [r7, #4]
 801ea62:	4a42      	ldr	r2, [pc, #264]	; (801eb6c <TIM_Base_SetConfig+0x11c>)
 801ea64:	4293      	cmp	r3, r2
 801ea66:	d013      	beq.n	801ea90 <TIM_Base_SetConfig+0x40>
 801ea68:	687b      	ldr	r3, [r7, #4]
 801ea6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ea6e:	d00f      	beq.n	801ea90 <TIM_Base_SetConfig+0x40>
 801ea70:	687b      	ldr	r3, [r7, #4]
 801ea72:	4a3f      	ldr	r2, [pc, #252]	; (801eb70 <TIM_Base_SetConfig+0x120>)
 801ea74:	4293      	cmp	r3, r2
 801ea76:	d00b      	beq.n	801ea90 <TIM_Base_SetConfig+0x40>
 801ea78:	687b      	ldr	r3, [r7, #4]
 801ea7a:	4a3e      	ldr	r2, [pc, #248]	; (801eb74 <TIM_Base_SetConfig+0x124>)
 801ea7c:	4293      	cmp	r3, r2
 801ea7e:	d007      	beq.n	801ea90 <TIM_Base_SetConfig+0x40>
 801ea80:	687b      	ldr	r3, [r7, #4]
 801ea82:	4a3d      	ldr	r2, [pc, #244]	; (801eb78 <TIM_Base_SetConfig+0x128>)
 801ea84:	4293      	cmp	r3, r2
 801ea86:	d003      	beq.n	801ea90 <TIM_Base_SetConfig+0x40>
 801ea88:	687b      	ldr	r3, [r7, #4]
 801ea8a:	4a3c      	ldr	r2, [pc, #240]	; (801eb7c <TIM_Base_SetConfig+0x12c>)
 801ea8c:	4293      	cmp	r3, r2
 801ea8e:	d108      	bne.n	801eaa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801ea90:	68fb      	ldr	r3, [r7, #12]
 801ea92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ea96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801ea98:	683b      	ldr	r3, [r7, #0]
 801ea9a:	685b      	ldr	r3, [r3, #4]
 801ea9c:	68fa      	ldr	r2, [r7, #12]
 801ea9e:	4313      	orrs	r3, r2
 801eaa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801eaa2:	687b      	ldr	r3, [r7, #4]
 801eaa4:	4a31      	ldr	r2, [pc, #196]	; (801eb6c <TIM_Base_SetConfig+0x11c>)
 801eaa6:	4293      	cmp	r3, r2
 801eaa8:	d01f      	beq.n	801eaea <TIM_Base_SetConfig+0x9a>
 801eaaa:	687b      	ldr	r3, [r7, #4]
 801eaac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801eab0:	d01b      	beq.n	801eaea <TIM_Base_SetConfig+0x9a>
 801eab2:	687b      	ldr	r3, [r7, #4]
 801eab4:	4a2e      	ldr	r2, [pc, #184]	; (801eb70 <TIM_Base_SetConfig+0x120>)
 801eab6:	4293      	cmp	r3, r2
 801eab8:	d017      	beq.n	801eaea <TIM_Base_SetConfig+0x9a>
 801eaba:	687b      	ldr	r3, [r7, #4]
 801eabc:	4a2d      	ldr	r2, [pc, #180]	; (801eb74 <TIM_Base_SetConfig+0x124>)
 801eabe:	4293      	cmp	r3, r2
 801eac0:	d013      	beq.n	801eaea <TIM_Base_SetConfig+0x9a>
 801eac2:	687b      	ldr	r3, [r7, #4]
 801eac4:	4a2c      	ldr	r2, [pc, #176]	; (801eb78 <TIM_Base_SetConfig+0x128>)
 801eac6:	4293      	cmp	r3, r2
 801eac8:	d00f      	beq.n	801eaea <TIM_Base_SetConfig+0x9a>
 801eaca:	687b      	ldr	r3, [r7, #4]
 801eacc:	4a2c      	ldr	r2, [pc, #176]	; (801eb80 <TIM_Base_SetConfig+0x130>)
 801eace:	4293      	cmp	r3, r2
 801ead0:	d00b      	beq.n	801eaea <TIM_Base_SetConfig+0x9a>
 801ead2:	687b      	ldr	r3, [r7, #4]
 801ead4:	4a2b      	ldr	r2, [pc, #172]	; (801eb84 <TIM_Base_SetConfig+0x134>)
 801ead6:	4293      	cmp	r3, r2
 801ead8:	d007      	beq.n	801eaea <TIM_Base_SetConfig+0x9a>
 801eada:	687b      	ldr	r3, [r7, #4]
 801eadc:	4a2a      	ldr	r2, [pc, #168]	; (801eb88 <TIM_Base_SetConfig+0x138>)
 801eade:	4293      	cmp	r3, r2
 801eae0:	d003      	beq.n	801eaea <TIM_Base_SetConfig+0x9a>
 801eae2:	687b      	ldr	r3, [r7, #4]
 801eae4:	4a25      	ldr	r2, [pc, #148]	; (801eb7c <TIM_Base_SetConfig+0x12c>)
 801eae6:	4293      	cmp	r3, r2
 801eae8:	d108      	bne.n	801eafc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801eaea:	68fb      	ldr	r3, [r7, #12]
 801eaec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801eaf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801eaf2:	683b      	ldr	r3, [r7, #0]
 801eaf4:	68db      	ldr	r3, [r3, #12]
 801eaf6:	68fa      	ldr	r2, [r7, #12]
 801eaf8:	4313      	orrs	r3, r2
 801eafa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801eafc:	68fb      	ldr	r3, [r7, #12]
 801eafe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801eb02:	683b      	ldr	r3, [r7, #0]
 801eb04:	695b      	ldr	r3, [r3, #20]
 801eb06:	4313      	orrs	r3, r2
 801eb08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801eb0a:	687b      	ldr	r3, [r7, #4]
 801eb0c:	68fa      	ldr	r2, [r7, #12]
 801eb0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801eb10:	683b      	ldr	r3, [r7, #0]
 801eb12:	689a      	ldr	r2, [r3, #8]
 801eb14:	687b      	ldr	r3, [r7, #4]
 801eb16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801eb18:	683b      	ldr	r3, [r7, #0]
 801eb1a:	681a      	ldr	r2, [r3, #0]
 801eb1c:	687b      	ldr	r3, [r7, #4]
 801eb1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801eb20:	687b      	ldr	r3, [r7, #4]
 801eb22:	4a12      	ldr	r2, [pc, #72]	; (801eb6c <TIM_Base_SetConfig+0x11c>)
 801eb24:	4293      	cmp	r3, r2
 801eb26:	d013      	beq.n	801eb50 <TIM_Base_SetConfig+0x100>
 801eb28:	687b      	ldr	r3, [r7, #4]
 801eb2a:	4a13      	ldr	r2, [pc, #76]	; (801eb78 <TIM_Base_SetConfig+0x128>)
 801eb2c:	4293      	cmp	r3, r2
 801eb2e:	d00f      	beq.n	801eb50 <TIM_Base_SetConfig+0x100>
 801eb30:	687b      	ldr	r3, [r7, #4]
 801eb32:	4a13      	ldr	r2, [pc, #76]	; (801eb80 <TIM_Base_SetConfig+0x130>)
 801eb34:	4293      	cmp	r3, r2
 801eb36:	d00b      	beq.n	801eb50 <TIM_Base_SetConfig+0x100>
 801eb38:	687b      	ldr	r3, [r7, #4]
 801eb3a:	4a12      	ldr	r2, [pc, #72]	; (801eb84 <TIM_Base_SetConfig+0x134>)
 801eb3c:	4293      	cmp	r3, r2
 801eb3e:	d007      	beq.n	801eb50 <TIM_Base_SetConfig+0x100>
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	4a11      	ldr	r2, [pc, #68]	; (801eb88 <TIM_Base_SetConfig+0x138>)
 801eb44:	4293      	cmp	r3, r2
 801eb46:	d003      	beq.n	801eb50 <TIM_Base_SetConfig+0x100>
 801eb48:	687b      	ldr	r3, [r7, #4]
 801eb4a:	4a0c      	ldr	r2, [pc, #48]	; (801eb7c <TIM_Base_SetConfig+0x12c>)
 801eb4c:	4293      	cmp	r3, r2
 801eb4e:	d103      	bne.n	801eb58 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801eb50:	683b      	ldr	r3, [r7, #0]
 801eb52:	691a      	ldr	r2, [r3, #16]
 801eb54:	687b      	ldr	r3, [r7, #4]
 801eb56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801eb58:	687b      	ldr	r3, [r7, #4]
 801eb5a:	2201      	movs	r2, #1
 801eb5c:	615a      	str	r2, [r3, #20]
}
 801eb5e:	bf00      	nop
 801eb60:	3714      	adds	r7, #20
 801eb62:	46bd      	mov	sp, r7
 801eb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb68:	4770      	bx	lr
 801eb6a:	bf00      	nop
 801eb6c:	40012c00 	.word	0x40012c00
 801eb70:	40000400 	.word	0x40000400
 801eb74:	40000800 	.word	0x40000800
 801eb78:	40013400 	.word	0x40013400
 801eb7c:	40015000 	.word	0x40015000
 801eb80:	40014000 	.word	0x40014000
 801eb84:	40014400 	.word	0x40014400
 801eb88:	40014800 	.word	0x40014800

0801eb8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801eb8c:	b480      	push	{r7}
 801eb8e:	b087      	sub	sp, #28
 801eb90:	af00      	add	r7, sp, #0
 801eb92:	6078      	str	r0, [r7, #4]
 801eb94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801eb96:	687b      	ldr	r3, [r7, #4]
 801eb98:	6a1b      	ldr	r3, [r3, #32]
 801eb9a:	f023 0201 	bic.w	r2, r3, #1
 801eb9e:	687b      	ldr	r3, [r7, #4]
 801eba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801eba2:	687b      	ldr	r3, [r7, #4]
 801eba4:	6a1b      	ldr	r3, [r3, #32]
 801eba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801eba8:	687b      	ldr	r3, [r7, #4]
 801ebaa:	685b      	ldr	r3, [r3, #4]
 801ebac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ebae:	687b      	ldr	r3, [r7, #4]
 801ebb0:	699b      	ldr	r3, [r3, #24]
 801ebb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801ebb4:	68fb      	ldr	r3, [r7, #12]
 801ebb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ebba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ebbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801ebc0:	68fb      	ldr	r3, [r7, #12]
 801ebc2:	f023 0303 	bic.w	r3, r3, #3
 801ebc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ebc8:	683b      	ldr	r3, [r7, #0]
 801ebca:	681b      	ldr	r3, [r3, #0]
 801ebcc:	68fa      	ldr	r2, [r7, #12]
 801ebce:	4313      	orrs	r3, r2
 801ebd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801ebd2:	697b      	ldr	r3, [r7, #20]
 801ebd4:	f023 0302 	bic.w	r3, r3, #2
 801ebd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801ebda:	683b      	ldr	r3, [r7, #0]
 801ebdc:	689b      	ldr	r3, [r3, #8]
 801ebde:	697a      	ldr	r2, [r7, #20]
 801ebe0:	4313      	orrs	r3, r2
 801ebe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801ebe4:	687b      	ldr	r3, [r7, #4]
 801ebe6:	4a30      	ldr	r2, [pc, #192]	; (801eca8 <TIM_OC1_SetConfig+0x11c>)
 801ebe8:	4293      	cmp	r3, r2
 801ebea:	d013      	beq.n	801ec14 <TIM_OC1_SetConfig+0x88>
 801ebec:	687b      	ldr	r3, [r7, #4]
 801ebee:	4a2f      	ldr	r2, [pc, #188]	; (801ecac <TIM_OC1_SetConfig+0x120>)
 801ebf0:	4293      	cmp	r3, r2
 801ebf2:	d00f      	beq.n	801ec14 <TIM_OC1_SetConfig+0x88>
 801ebf4:	687b      	ldr	r3, [r7, #4]
 801ebf6:	4a2e      	ldr	r2, [pc, #184]	; (801ecb0 <TIM_OC1_SetConfig+0x124>)
 801ebf8:	4293      	cmp	r3, r2
 801ebfa:	d00b      	beq.n	801ec14 <TIM_OC1_SetConfig+0x88>
 801ebfc:	687b      	ldr	r3, [r7, #4]
 801ebfe:	4a2d      	ldr	r2, [pc, #180]	; (801ecb4 <TIM_OC1_SetConfig+0x128>)
 801ec00:	4293      	cmp	r3, r2
 801ec02:	d007      	beq.n	801ec14 <TIM_OC1_SetConfig+0x88>
 801ec04:	687b      	ldr	r3, [r7, #4]
 801ec06:	4a2c      	ldr	r2, [pc, #176]	; (801ecb8 <TIM_OC1_SetConfig+0x12c>)
 801ec08:	4293      	cmp	r3, r2
 801ec0a:	d003      	beq.n	801ec14 <TIM_OC1_SetConfig+0x88>
 801ec0c:	687b      	ldr	r3, [r7, #4]
 801ec0e:	4a2b      	ldr	r2, [pc, #172]	; (801ecbc <TIM_OC1_SetConfig+0x130>)
 801ec10:	4293      	cmp	r3, r2
 801ec12:	d10c      	bne.n	801ec2e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801ec14:	697b      	ldr	r3, [r7, #20]
 801ec16:	f023 0308 	bic.w	r3, r3, #8
 801ec1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801ec1c:	683b      	ldr	r3, [r7, #0]
 801ec1e:	68db      	ldr	r3, [r3, #12]
 801ec20:	697a      	ldr	r2, [r7, #20]
 801ec22:	4313      	orrs	r3, r2
 801ec24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801ec26:	697b      	ldr	r3, [r7, #20]
 801ec28:	f023 0304 	bic.w	r3, r3, #4
 801ec2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ec2e:	687b      	ldr	r3, [r7, #4]
 801ec30:	4a1d      	ldr	r2, [pc, #116]	; (801eca8 <TIM_OC1_SetConfig+0x11c>)
 801ec32:	4293      	cmp	r3, r2
 801ec34:	d013      	beq.n	801ec5e <TIM_OC1_SetConfig+0xd2>
 801ec36:	687b      	ldr	r3, [r7, #4]
 801ec38:	4a1c      	ldr	r2, [pc, #112]	; (801ecac <TIM_OC1_SetConfig+0x120>)
 801ec3a:	4293      	cmp	r3, r2
 801ec3c:	d00f      	beq.n	801ec5e <TIM_OC1_SetConfig+0xd2>
 801ec3e:	687b      	ldr	r3, [r7, #4]
 801ec40:	4a1b      	ldr	r2, [pc, #108]	; (801ecb0 <TIM_OC1_SetConfig+0x124>)
 801ec42:	4293      	cmp	r3, r2
 801ec44:	d00b      	beq.n	801ec5e <TIM_OC1_SetConfig+0xd2>
 801ec46:	687b      	ldr	r3, [r7, #4]
 801ec48:	4a1a      	ldr	r2, [pc, #104]	; (801ecb4 <TIM_OC1_SetConfig+0x128>)
 801ec4a:	4293      	cmp	r3, r2
 801ec4c:	d007      	beq.n	801ec5e <TIM_OC1_SetConfig+0xd2>
 801ec4e:	687b      	ldr	r3, [r7, #4]
 801ec50:	4a19      	ldr	r2, [pc, #100]	; (801ecb8 <TIM_OC1_SetConfig+0x12c>)
 801ec52:	4293      	cmp	r3, r2
 801ec54:	d003      	beq.n	801ec5e <TIM_OC1_SetConfig+0xd2>
 801ec56:	687b      	ldr	r3, [r7, #4]
 801ec58:	4a18      	ldr	r2, [pc, #96]	; (801ecbc <TIM_OC1_SetConfig+0x130>)
 801ec5a:	4293      	cmp	r3, r2
 801ec5c:	d111      	bne.n	801ec82 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801ec5e:	693b      	ldr	r3, [r7, #16]
 801ec60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ec64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801ec66:	693b      	ldr	r3, [r7, #16]
 801ec68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ec6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801ec6e:	683b      	ldr	r3, [r7, #0]
 801ec70:	695b      	ldr	r3, [r3, #20]
 801ec72:	693a      	ldr	r2, [r7, #16]
 801ec74:	4313      	orrs	r3, r2
 801ec76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801ec78:	683b      	ldr	r3, [r7, #0]
 801ec7a:	699b      	ldr	r3, [r3, #24]
 801ec7c:	693a      	ldr	r2, [r7, #16]
 801ec7e:	4313      	orrs	r3, r2
 801ec80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ec82:	687b      	ldr	r3, [r7, #4]
 801ec84:	693a      	ldr	r2, [r7, #16]
 801ec86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801ec88:	687b      	ldr	r3, [r7, #4]
 801ec8a:	68fa      	ldr	r2, [r7, #12]
 801ec8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801ec8e:	683b      	ldr	r3, [r7, #0]
 801ec90:	685a      	ldr	r2, [r3, #4]
 801ec92:	687b      	ldr	r3, [r7, #4]
 801ec94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	697a      	ldr	r2, [r7, #20]
 801ec9a:	621a      	str	r2, [r3, #32]
}
 801ec9c:	bf00      	nop
 801ec9e:	371c      	adds	r7, #28
 801eca0:	46bd      	mov	sp, r7
 801eca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eca6:	4770      	bx	lr
 801eca8:	40012c00 	.word	0x40012c00
 801ecac:	40013400 	.word	0x40013400
 801ecb0:	40014000 	.word	0x40014000
 801ecb4:	40014400 	.word	0x40014400
 801ecb8:	40014800 	.word	0x40014800
 801ecbc:	40015000 	.word	0x40015000

0801ecc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ecc0:	b480      	push	{r7}
 801ecc2:	b087      	sub	sp, #28
 801ecc4:	af00      	add	r7, sp, #0
 801ecc6:	6078      	str	r0, [r7, #4]
 801ecc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801ecca:	687b      	ldr	r3, [r7, #4]
 801eccc:	6a1b      	ldr	r3, [r3, #32]
 801ecce:	f023 0210 	bic.w	r2, r3, #16
 801ecd2:	687b      	ldr	r3, [r7, #4]
 801ecd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ecd6:	687b      	ldr	r3, [r7, #4]
 801ecd8:	6a1b      	ldr	r3, [r3, #32]
 801ecda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ecdc:	687b      	ldr	r3, [r7, #4]
 801ecde:	685b      	ldr	r3, [r3, #4]
 801ece0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ece2:	687b      	ldr	r3, [r7, #4]
 801ece4:	699b      	ldr	r3, [r3, #24]
 801ece6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801ece8:	68fb      	ldr	r3, [r7, #12]
 801ecea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801ecee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ecf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801ecf4:	68fb      	ldr	r3, [r7, #12]
 801ecf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ecfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ecfc:	683b      	ldr	r3, [r7, #0]
 801ecfe:	681b      	ldr	r3, [r3, #0]
 801ed00:	021b      	lsls	r3, r3, #8
 801ed02:	68fa      	ldr	r2, [r7, #12]
 801ed04:	4313      	orrs	r3, r2
 801ed06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801ed08:	697b      	ldr	r3, [r7, #20]
 801ed0a:	f023 0320 	bic.w	r3, r3, #32
 801ed0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801ed10:	683b      	ldr	r3, [r7, #0]
 801ed12:	689b      	ldr	r3, [r3, #8]
 801ed14:	011b      	lsls	r3, r3, #4
 801ed16:	697a      	ldr	r2, [r7, #20]
 801ed18:	4313      	orrs	r3, r2
 801ed1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801ed1c:	687b      	ldr	r3, [r7, #4]
 801ed1e:	4a2c      	ldr	r2, [pc, #176]	; (801edd0 <TIM_OC2_SetConfig+0x110>)
 801ed20:	4293      	cmp	r3, r2
 801ed22:	d007      	beq.n	801ed34 <TIM_OC2_SetConfig+0x74>
 801ed24:	687b      	ldr	r3, [r7, #4]
 801ed26:	4a2b      	ldr	r2, [pc, #172]	; (801edd4 <TIM_OC2_SetConfig+0x114>)
 801ed28:	4293      	cmp	r3, r2
 801ed2a:	d003      	beq.n	801ed34 <TIM_OC2_SetConfig+0x74>
 801ed2c:	687b      	ldr	r3, [r7, #4]
 801ed2e:	4a2a      	ldr	r2, [pc, #168]	; (801edd8 <TIM_OC2_SetConfig+0x118>)
 801ed30:	4293      	cmp	r3, r2
 801ed32:	d10d      	bne.n	801ed50 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801ed34:	697b      	ldr	r3, [r7, #20]
 801ed36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ed3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801ed3c:	683b      	ldr	r3, [r7, #0]
 801ed3e:	68db      	ldr	r3, [r3, #12]
 801ed40:	011b      	lsls	r3, r3, #4
 801ed42:	697a      	ldr	r2, [r7, #20]
 801ed44:	4313      	orrs	r3, r2
 801ed46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801ed48:	697b      	ldr	r3, [r7, #20]
 801ed4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801ed4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ed50:	687b      	ldr	r3, [r7, #4]
 801ed52:	4a1f      	ldr	r2, [pc, #124]	; (801edd0 <TIM_OC2_SetConfig+0x110>)
 801ed54:	4293      	cmp	r3, r2
 801ed56:	d013      	beq.n	801ed80 <TIM_OC2_SetConfig+0xc0>
 801ed58:	687b      	ldr	r3, [r7, #4]
 801ed5a:	4a1e      	ldr	r2, [pc, #120]	; (801edd4 <TIM_OC2_SetConfig+0x114>)
 801ed5c:	4293      	cmp	r3, r2
 801ed5e:	d00f      	beq.n	801ed80 <TIM_OC2_SetConfig+0xc0>
 801ed60:	687b      	ldr	r3, [r7, #4]
 801ed62:	4a1e      	ldr	r2, [pc, #120]	; (801eddc <TIM_OC2_SetConfig+0x11c>)
 801ed64:	4293      	cmp	r3, r2
 801ed66:	d00b      	beq.n	801ed80 <TIM_OC2_SetConfig+0xc0>
 801ed68:	687b      	ldr	r3, [r7, #4]
 801ed6a:	4a1d      	ldr	r2, [pc, #116]	; (801ede0 <TIM_OC2_SetConfig+0x120>)
 801ed6c:	4293      	cmp	r3, r2
 801ed6e:	d007      	beq.n	801ed80 <TIM_OC2_SetConfig+0xc0>
 801ed70:	687b      	ldr	r3, [r7, #4]
 801ed72:	4a1c      	ldr	r2, [pc, #112]	; (801ede4 <TIM_OC2_SetConfig+0x124>)
 801ed74:	4293      	cmp	r3, r2
 801ed76:	d003      	beq.n	801ed80 <TIM_OC2_SetConfig+0xc0>
 801ed78:	687b      	ldr	r3, [r7, #4]
 801ed7a:	4a17      	ldr	r2, [pc, #92]	; (801edd8 <TIM_OC2_SetConfig+0x118>)
 801ed7c:	4293      	cmp	r3, r2
 801ed7e:	d113      	bne.n	801eda8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801ed80:	693b      	ldr	r3, [r7, #16]
 801ed82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ed86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801ed88:	693b      	ldr	r3, [r7, #16]
 801ed8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ed8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801ed90:	683b      	ldr	r3, [r7, #0]
 801ed92:	695b      	ldr	r3, [r3, #20]
 801ed94:	009b      	lsls	r3, r3, #2
 801ed96:	693a      	ldr	r2, [r7, #16]
 801ed98:	4313      	orrs	r3, r2
 801ed9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801ed9c:	683b      	ldr	r3, [r7, #0]
 801ed9e:	699b      	ldr	r3, [r3, #24]
 801eda0:	009b      	lsls	r3, r3, #2
 801eda2:	693a      	ldr	r2, [r7, #16]
 801eda4:	4313      	orrs	r3, r2
 801eda6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801eda8:	687b      	ldr	r3, [r7, #4]
 801edaa:	693a      	ldr	r2, [r7, #16]
 801edac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801edae:	687b      	ldr	r3, [r7, #4]
 801edb0:	68fa      	ldr	r2, [r7, #12]
 801edb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801edb4:	683b      	ldr	r3, [r7, #0]
 801edb6:	685a      	ldr	r2, [r3, #4]
 801edb8:	687b      	ldr	r3, [r7, #4]
 801edba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801edbc:	687b      	ldr	r3, [r7, #4]
 801edbe:	697a      	ldr	r2, [r7, #20]
 801edc0:	621a      	str	r2, [r3, #32]
}
 801edc2:	bf00      	nop
 801edc4:	371c      	adds	r7, #28
 801edc6:	46bd      	mov	sp, r7
 801edc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edcc:	4770      	bx	lr
 801edce:	bf00      	nop
 801edd0:	40012c00 	.word	0x40012c00
 801edd4:	40013400 	.word	0x40013400
 801edd8:	40015000 	.word	0x40015000
 801eddc:	40014000 	.word	0x40014000
 801ede0:	40014400 	.word	0x40014400
 801ede4:	40014800 	.word	0x40014800

0801ede8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ede8:	b480      	push	{r7}
 801edea:	b087      	sub	sp, #28
 801edec:	af00      	add	r7, sp, #0
 801edee:	6078      	str	r0, [r7, #4]
 801edf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801edf2:	687b      	ldr	r3, [r7, #4]
 801edf4:	6a1b      	ldr	r3, [r3, #32]
 801edf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801edfa:	687b      	ldr	r3, [r7, #4]
 801edfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801edfe:	687b      	ldr	r3, [r7, #4]
 801ee00:	6a1b      	ldr	r3, [r3, #32]
 801ee02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ee04:	687b      	ldr	r3, [r7, #4]
 801ee06:	685b      	ldr	r3, [r3, #4]
 801ee08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ee0a:	687b      	ldr	r3, [r7, #4]
 801ee0c:	69db      	ldr	r3, [r3, #28]
 801ee0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801ee10:	68fb      	ldr	r3, [r7, #12]
 801ee12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ee16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ee1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801ee1c:	68fb      	ldr	r3, [r7, #12]
 801ee1e:	f023 0303 	bic.w	r3, r3, #3
 801ee22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ee24:	683b      	ldr	r3, [r7, #0]
 801ee26:	681b      	ldr	r3, [r3, #0]
 801ee28:	68fa      	ldr	r2, [r7, #12]
 801ee2a:	4313      	orrs	r3, r2
 801ee2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801ee2e:	697b      	ldr	r3, [r7, #20]
 801ee30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ee34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801ee36:	683b      	ldr	r3, [r7, #0]
 801ee38:	689b      	ldr	r3, [r3, #8]
 801ee3a:	021b      	lsls	r3, r3, #8
 801ee3c:	697a      	ldr	r2, [r7, #20]
 801ee3e:	4313      	orrs	r3, r2
 801ee40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801ee42:	687b      	ldr	r3, [r7, #4]
 801ee44:	4a2b      	ldr	r2, [pc, #172]	; (801eef4 <TIM_OC3_SetConfig+0x10c>)
 801ee46:	4293      	cmp	r3, r2
 801ee48:	d007      	beq.n	801ee5a <TIM_OC3_SetConfig+0x72>
 801ee4a:	687b      	ldr	r3, [r7, #4]
 801ee4c:	4a2a      	ldr	r2, [pc, #168]	; (801eef8 <TIM_OC3_SetConfig+0x110>)
 801ee4e:	4293      	cmp	r3, r2
 801ee50:	d003      	beq.n	801ee5a <TIM_OC3_SetConfig+0x72>
 801ee52:	687b      	ldr	r3, [r7, #4]
 801ee54:	4a29      	ldr	r2, [pc, #164]	; (801eefc <TIM_OC3_SetConfig+0x114>)
 801ee56:	4293      	cmp	r3, r2
 801ee58:	d10d      	bne.n	801ee76 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801ee5a:	697b      	ldr	r3, [r7, #20]
 801ee5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ee60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801ee62:	683b      	ldr	r3, [r7, #0]
 801ee64:	68db      	ldr	r3, [r3, #12]
 801ee66:	021b      	lsls	r3, r3, #8
 801ee68:	697a      	ldr	r2, [r7, #20]
 801ee6a:	4313      	orrs	r3, r2
 801ee6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801ee6e:	697b      	ldr	r3, [r7, #20]
 801ee70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ee74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ee76:	687b      	ldr	r3, [r7, #4]
 801ee78:	4a1e      	ldr	r2, [pc, #120]	; (801eef4 <TIM_OC3_SetConfig+0x10c>)
 801ee7a:	4293      	cmp	r3, r2
 801ee7c:	d013      	beq.n	801eea6 <TIM_OC3_SetConfig+0xbe>
 801ee7e:	687b      	ldr	r3, [r7, #4]
 801ee80:	4a1d      	ldr	r2, [pc, #116]	; (801eef8 <TIM_OC3_SetConfig+0x110>)
 801ee82:	4293      	cmp	r3, r2
 801ee84:	d00f      	beq.n	801eea6 <TIM_OC3_SetConfig+0xbe>
 801ee86:	687b      	ldr	r3, [r7, #4]
 801ee88:	4a1d      	ldr	r2, [pc, #116]	; (801ef00 <TIM_OC3_SetConfig+0x118>)
 801ee8a:	4293      	cmp	r3, r2
 801ee8c:	d00b      	beq.n	801eea6 <TIM_OC3_SetConfig+0xbe>
 801ee8e:	687b      	ldr	r3, [r7, #4]
 801ee90:	4a1c      	ldr	r2, [pc, #112]	; (801ef04 <TIM_OC3_SetConfig+0x11c>)
 801ee92:	4293      	cmp	r3, r2
 801ee94:	d007      	beq.n	801eea6 <TIM_OC3_SetConfig+0xbe>
 801ee96:	687b      	ldr	r3, [r7, #4]
 801ee98:	4a1b      	ldr	r2, [pc, #108]	; (801ef08 <TIM_OC3_SetConfig+0x120>)
 801ee9a:	4293      	cmp	r3, r2
 801ee9c:	d003      	beq.n	801eea6 <TIM_OC3_SetConfig+0xbe>
 801ee9e:	687b      	ldr	r3, [r7, #4]
 801eea0:	4a16      	ldr	r2, [pc, #88]	; (801eefc <TIM_OC3_SetConfig+0x114>)
 801eea2:	4293      	cmp	r3, r2
 801eea4:	d113      	bne.n	801eece <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801eea6:	693b      	ldr	r3, [r7, #16]
 801eea8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801eeac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801eeae:	693b      	ldr	r3, [r7, #16]
 801eeb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801eeb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801eeb6:	683b      	ldr	r3, [r7, #0]
 801eeb8:	695b      	ldr	r3, [r3, #20]
 801eeba:	011b      	lsls	r3, r3, #4
 801eebc:	693a      	ldr	r2, [r7, #16]
 801eebe:	4313      	orrs	r3, r2
 801eec0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801eec2:	683b      	ldr	r3, [r7, #0]
 801eec4:	699b      	ldr	r3, [r3, #24]
 801eec6:	011b      	lsls	r3, r3, #4
 801eec8:	693a      	ldr	r2, [r7, #16]
 801eeca:	4313      	orrs	r3, r2
 801eecc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801eece:	687b      	ldr	r3, [r7, #4]
 801eed0:	693a      	ldr	r2, [r7, #16]
 801eed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801eed4:	687b      	ldr	r3, [r7, #4]
 801eed6:	68fa      	ldr	r2, [r7, #12]
 801eed8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801eeda:	683b      	ldr	r3, [r7, #0]
 801eedc:	685a      	ldr	r2, [r3, #4]
 801eede:	687b      	ldr	r3, [r7, #4]
 801eee0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801eee2:	687b      	ldr	r3, [r7, #4]
 801eee4:	697a      	ldr	r2, [r7, #20]
 801eee6:	621a      	str	r2, [r3, #32]
}
 801eee8:	bf00      	nop
 801eeea:	371c      	adds	r7, #28
 801eeec:	46bd      	mov	sp, r7
 801eeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eef2:	4770      	bx	lr
 801eef4:	40012c00 	.word	0x40012c00
 801eef8:	40013400 	.word	0x40013400
 801eefc:	40015000 	.word	0x40015000
 801ef00:	40014000 	.word	0x40014000
 801ef04:	40014400 	.word	0x40014400
 801ef08:	40014800 	.word	0x40014800

0801ef0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ef0c:	b480      	push	{r7}
 801ef0e:	b087      	sub	sp, #28
 801ef10:	af00      	add	r7, sp, #0
 801ef12:	6078      	str	r0, [r7, #4]
 801ef14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801ef16:	687b      	ldr	r3, [r7, #4]
 801ef18:	6a1b      	ldr	r3, [r3, #32]
 801ef1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801ef1e:	687b      	ldr	r3, [r7, #4]
 801ef20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ef22:	687b      	ldr	r3, [r7, #4]
 801ef24:	6a1b      	ldr	r3, [r3, #32]
 801ef26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ef28:	687b      	ldr	r3, [r7, #4]
 801ef2a:	685b      	ldr	r3, [r3, #4]
 801ef2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ef2e:	687b      	ldr	r3, [r7, #4]
 801ef30:	69db      	ldr	r3, [r3, #28]
 801ef32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801ef34:	68fb      	ldr	r3, [r7, #12]
 801ef36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801ef3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ef3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801ef40:	68fb      	ldr	r3, [r7, #12]
 801ef42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ef46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ef48:	683b      	ldr	r3, [r7, #0]
 801ef4a:	681b      	ldr	r3, [r3, #0]
 801ef4c:	021b      	lsls	r3, r3, #8
 801ef4e:	68fa      	ldr	r2, [r7, #12]
 801ef50:	4313      	orrs	r3, r2
 801ef52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801ef54:	697b      	ldr	r3, [r7, #20]
 801ef56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ef5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801ef5c:	683b      	ldr	r3, [r7, #0]
 801ef5e:	689b      	ldr	r3, [r3, #8]
 801ef60:	031b      	lsls	r3, r3, #12
 801ef62:	697a      	ldr	r2, [r7, #20]
 801ef64:	4313      	orrs	r3, r2
 801ef66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 801ef68:	687b      	ldr	r3, [r7, #4]
 801ef6a:	4a2c      	ldr	r2, [pc, #176]	; (801f01c <TIM_OC4_SetConfig+0x110>)
 801ef6c:	4293      	cmp	r3, r2
 801ef6e:	d007      	beq.n	801ef80 <TIM_OC4_SetConfig+0x74>
 801ef70:	687b      	ldr	r3, [r7, #4]
 801ef72:	4a2b      	ldr	r2, [pc, #172]	; (801f020 <TIM_OC4_SetConfig+0x114>)
 801ef74:	4293      	cmp	r3, r2
 801ef76:	d003      	beq.n	801ef80 <TIM_OC4_SetConfig+0x74>
 801ef78:	687b      	ldr	r3, [r7, #4]
 801ef7a:	4a2a      	ldr	r2, [pc, #168]	; (801f024 <TIM_OC4_SetConfig+0x118>)
 801ef7c:	4293      	cmp	r3, r2
 801ef7e:	d10d      	bne.n	801ef9c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 801ef80:	697b      	ldr	r3, [r7, #20]
 801ef82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801ef86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 801ef88:	683b      	ldr	r3, [r7, #0]
 801ef8a:	68db      	ldr	r3, [r3, #12]
 801ef8c:	031b      	lsls	r3, r3, #12
 801ef8e:	697a      	ldr	r2, [r7, #20]
 801ef90:	4313      	orrs	r3, r2
 801ef92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 801ef94:	697b      	ldr	r3, [r7, #20]
 801ef96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801ef9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ef9c:	687b      	ldr	r3, [r7, #4]
 801ef9e:	4a1f      	ldr	r2, [pc, #124]	; (801f01c <TIM_OC4_SetConfig+0x110>)
 801efa0:	4293      	cmp	r3, r2
 801efa2:	d013      	beq.n	801efcc <TIM_OC4_SetConfig+0xc0>
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	4a1e      	ldr	r2, [pc, #120]	; (801f020 <TIM_OC4_SetConfig+0x114>)
 801efa8:	4293      	cmp	r3, r2
 801efaa:	d00f      	beq.n	801efcc <TIM_OC4_SetConfig+0xc0>
 801efac:	687b      	ldr	r3, [r7, #4]
 801efae:	4a1e      	ldr	r2, [pc, #120]	; (801f028 <TIM_OC4_SetConfig+0x11c>)
 801efb0:	4293      	cmp	r3, r2
 801efb2:	d00b      	beq.n	801efcc <TIM_OC4_SetConfig+0xc0>
 801efb4:	687b      	ldr	r3, [r7, #4]
 801efb6:	4a1d      	ldr	r2, [pc, #116]	; (801f02c <TIM_OC4_SetConfig+0x120>)
 801efb8:	4293      	cmp	r3, r2
 801efba:	d007      	beq.n	801efcc <TIM_OC4_SetConfig+0xc0>
 801efbc:	687b      	ldr	r3, [r7, #4]
 801efbe:	4a1c      	ldr	r2, [pc, #112]	; (801f030 <TIM_OC4_SetConfig+0x124>)
 801efc0:	4293      	cmp	r3, r2
 801efc2:	d003      	beq.n	801efcc <TIM_OC4_SetConfig+0xc0>
 801efc4:	687b      	ldr	r3, [r7, #4]
 801efc6:	4a17      	ldr	r2, [pc, #92]	; (801f024 <TIM_OC4_SetConfig+0x118>)
 801efc8:	4293      	cmp	r3, r2
 801efca:	d113      	bne.n	801eff4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801efcc:	693b      	ldr	r3, [r7, #16]
 801efce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801efd2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 801efd4:	693b      	ldr	r3, [r7, #16]
 801efd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801efda:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801efdc:	683b      	ldr	r3, [r7, #0]
 801efde:	695b      	ldr	r3, [r3, #20]
 801efe0:	019b      	lsls	r3, r3, #6
 801efe2:	693a      	ldr	r2, [r7, #16]
 801efe4:	4313      	orrs	r3, r2
 801efe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 801efe8:	683b      	ldr	r3, [r7, #0]
 801efea:	699b      	ldr	r3, [r3, #24]
 801efec:	019b      	lsls	r3, r3, #6
 801efee:	693a      	ldr	r2, [r7, #16]
 801eff0:	4313      	orrs	r3, r2
 801eff2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	693a      	ldr	r2, [r7, #16]
 801eff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801effa:	687b      	ldr	r3, [r7, #4]
 801effc:	68fa      	ldr	r2, [r7, #12]
 801effe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801f000:	683b      	ldr	r3, [r7, #0]
 801f002:	685a      	ldr	r2, [r3, #4]
 801f004:	687b      	ldr	r3, [r7, #4]
 801f006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f008:	687b      	ldr	r3, [r7, #4]
 801f00a:	697a      	ldr	r2, [r7, #20]
 801f00c:	621a      	str	r2, [r3, #32]
}
 801f00e:	bf00      	nop
 801f010:	371c      	adds	r7, #28
 801f012:	46bd      	mov	sp, r7
 801f014:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f018:	4770      	bx	lr
 801f01a:	bf00      	nop
 801f01c:	40012c00 	.word	0x40012c00
 801f020:	40013400 	.word	0x40013400
 801f024:	40015000 	.word	0x40015000
 801f028:	40014000 	.word	0x40014000
 801f02c:	40014400 	.word	0x40014400
 801f030:	40014800 	.word	0x40014800

0801f034 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801f034:	b480      	push	{r7}
 801f036:	b087      	sub	sp, #28
 801f038:	af00      	add	r7, sp, #0
 801f03a:	6078      	str	r0, [r7, #4]
 801f03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801f03e:	687b      	ldr	r3, [r7, #4]
 801f040:	6a1b      	ldr	r3, [r3, #32]
 801f042:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801f046:	687b      	ldr	r3, [r7, #4]
 801f048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f04a:	687b      	ldr	r3, [r7, #4]
 801f04c:	6a1b      	ldr	r3, [r3, #32]
 801f04e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f050:	687b      	ldr	r3, [r7, #4]
 801f052:	685b      	ldr	r3, [r3, #4]
 801f054:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801f056:	687b      	ldr	r3, [r7, #4]
 801f058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f05a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801f05c:	68fb      	ldr	r3, [r7, #12]
 801f05e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801f068:	683b      	ldr	r3, [r7, #0]
 801f06a:	681b      	ldr	r3, [r3, #0]
 801f06c:	68fa      	ldr	r2, [r7, #12]
 801f06e:	4313      	orrs	r3, r2
 801f070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801f072:	693b      	ldr	r3, [r7, #16]
 801f074:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801f078:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801f07a:	683b      	ldr	r3, [r7, #0]
 801f07c:	689b      	ldr	r3, [r3, #8]
 801f07e:	041b      	lsls	r3, r3, #16
 801f080:	693a      	ldr	r2, [r7, #16]
 801f082:	4313      	orrs	r3, r2
 801f084:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f086:	687b      	ldr	r3, [r7, #4]
 801f088:	4a19      	ldr	r2, [pc, #100]	; (801f0f0 <TIM_OC5_SetConfig+0xbc>)
 801f08a:	4293      	cmp	r3, r2
 801f08c:	d013      	beq.n	801f0b6 <TIM_OC5_SetConfig+0x82>
 801f08e:	687b      	ldr	r3, [r7, #4]
 801f090:	4a18      	ldr	r2, [pc, #96]	; (801f0f4 <TIM_OC5_SetConfig+0xc0>)
 801f092:	4293      	cmp	r3, r2
 801f094:	d00f      	beq.n	801f0b6 <TIM_OC5_SetConfig+0x82>
 801f096:	687b      	ldr	r3, [r7, #4]
 801f098:	4a17      	ldr	r2, [pc, #92]	; (801f0f8 <TIM_OC5_SetConfig+0xc4>)
 801f09a:	4293      	cmp	r3, r2
 801f09c:	d00b      	beq.n	801f0b6 <TIM_OC5_SetConfig+0x82>
 801f09e:	687b      	ldr	r3, [r7, #4]
 801f0a0:	4a16      	ldr	r2, [pc, #88]	; (801f0fc <TIM_OC5_SetConfig+0xc8>)
 801f0a2:	4293      	cmp	r3, r2
 801f0a4:	d007      	beq.n	801f0b6 <TIM_OC5_SetConfig+0x82>
 801f0a6:	687b      	ldr	r3, [r7, #4]
 801f0a8:	4a15      	ldr	r2, [pc, #84]	; (801f100 <TIM_OC5_SetConfig+0xcc>)
 801f0aa:	4293      	cmp	r3, r2
 801f0ac:	d003      	beq.n	801f0b6 <TIM_OC5_SetConfig+0x82>
 801f0ae:	687b      	ldr	r3, [r7, #4]
 801f0b0:	4a14      	ldr	r2, [pc, #80]	; (801f104 <TIM_OC5_SetConfig+0xd0>)
 801f0b2:	4293      	cmp	r3, r2
 801f0b4:	d109      	bne.n	801f0ca <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801f0b6:	697b      	ldr	r3, [r7, #20]
 801f0b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f0bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801f0be:	683b      	ldr	r3, [r7, #0]
 801f0c0:	695b      	ldr	r3, [r3, #20]
 801f0c2:	021b      	lsls	r3, r3, #8
 801f0c4:	697a      	ldr	r2, [r7, #20]
 801f0c6:	4313      	orrs	r3, r2
 801f0c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f0ca:	687b      	ldr	r3, [r7, #4]
 801f0cc:	697a      	ldr	r2, [r7, #20]
 801f0ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801f0d0:	687b      	ldr	r3, [r7, #4]
 801f0d2:	68fa      	ldr	r2, [r7, #12]
 801f0d4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801f0d6:	683b      	ldr	r3, [r7, #0]
 801f0d8:	685a      	ldr	r2, [r3, #4]
 801f0da:	687b      	ldr	r3, [r7, #4]
 801f0dc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f0de:	687b      	ldr	r3, [r7, #4]
 801f0e0:	693a      	ldr	r2, [r7, #16]
 801f0e2:	621a      	str	r2, [r3, #32]
}
 801f0e4:	bf00      	nop
 801f0e6:	371c      	adds	r7, #28
 801f0e8:	46bd      	mov	sp, r7
 801f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0ee:	4770      	bx	lr
 801f0f0:	40012c00 	.word	0x40012c00
 801f0f4:	40013400 	.word	0x40013400
 801f0f8:	40014000 	.word	0x40014000
 801f0fc:	40014400 	.word	0x40014400
 801f100:	40014800 	.word	0x40014800
 801f104:	40015000 	.word	0x40015000

0801f108 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801f108:	b480      	push	{r7}
 801f10a:	b087      	sub	sp, #28
 801f10c:	af00      	add	r7, sp, #0
 801f10e:	6078      	str	r0, [r7, #4]
 801f110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801f112:	687b      	ldr	r3, [r7, #4]
 801f114:	6a1b      	ldr	r3, [r3, #32]
 801f116:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801f11a:	687b      	ldr	r3, [r7, #4]
 801f11c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	6a1b      	ldr	r3, [r3, #32]
 801f122:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f124:	687b      	ldr	r3, [r7, #4]
 801f126:	685b      	ldr	r3, [r3, #4]
 801f128:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801f12a:	687b      	ldr	r3, [r7, #4]
 801f12c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f12e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801f130:	68fb      	ldr	r3, [r7, #12]
 801f132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801f136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801f13a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801f13c:	683b      	ldr	r3, [r7, #0]
 801f13e:	681b      	ldr	r3, [r3, #0]
 801f140:	021b      	lsls	r3, r3, #8
 801f142:	68fa      	ldr	r2, [r7, #12]
 801f144:	4313      	orrs	r3, r2
 801f146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801f148:	693b      	ldr	r3, [r7, #16]
 801f14a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801f14e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801f150:	683b      	ldr	r3, [r7, #0]
 801f152:	689b      	ldr	r3, [r3, #8]
 801f154:	051b      	lsls	r3, r3, #20
 801f156:	693a      	ldr	r2, [r7, #16]
 801f158:	4313      	orrs	r3, r2
 801f15a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f15c:	687b      	ldr	r3, [r7, #4]
 801f15e:	4a1a      	ldr	r2, [pc, #104]	; (801f1c8 <TIM_OC6_SetConfig+0xc0>)
 801f160:	4293      	cmp	r3, r2
 801f162:	d013      	beq.n	801f18c <TIM_OC6_SetConfig+0x84>
 801f164:	687b      	ldr	r3, [r7, #4]
 801f166:	4a19      	ldr	r2, [pc, #100]	; (801f1cc <TIM_OC6_SetConfig+0xc4>)
 801f168:	4293      	cmp	r3, r2
 801f16a:	d00f      	beq.n	801f18c <TIM_OC6_SetConfig+0x84>
 801f16c:	687b      	ldr	r3, [r7, #4]
 801f16e:	4a18      	ldr	r2, [pc, #96]	; (801f1d0 <TIM_OC6_SetConfig+0xc8>)
 801f170:	4293      	cmp	r3, r2
 801f172:	d00b      	beq.n	801f18c <TIM_OC6_SetConfig+0x84>
 801f174:	687b      	ldr	r3, [r7, #4]
 801f176:	4a17      	ldr	r2, [pc, #92]	; (801f1d4 <TIM_OC6_SetConfig+0xcc>)
 801f178:	4293      	cmp	r3, r2
 801f17a:	d007      	beq.n	801f18c <TIM_OC6_SetConfig+0x84>
 801f17c:	687b      	ldr	r3, [r7, #4]
 801f17e:	4a16      	ldr	r2, [pc, #88]	; (801f1d8 <TIM_OC6_SetConfig+0xd0>)
 801f180:	4293      	cmp	r3, r2
 801f182:	d003      	beq.n	801f18c <TIM_OC6_SetConfig+0x84>
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	4a15      	ldr	r2, [pc, #84]	; (801f1dc <TIM_OC6_SetConfig+0xd4>)
 801f188:	4293      	cmp	r3, r2
 801f18a:	d109      	bne.n	801f1a0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801f18c:	697b      	ldr	r3, [r7, #20]
 801f18e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801f192:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801f194:	683b      	ldr	r3, [r7, #0]
 801f196:	695b      	ldr	r3, [r3, #20]
 801f198:	029b      	lsls	r3, r3, #10
 801f19a:	697a      	ldr	r2, [r7, #20]
 801f19c:	4313      	orrs	r3, r2
 801f19e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f1a0:	687b      	ldr	r3, [r7, #4]
 801f1a2:	697a      	ldr	r2, [r7, #20]
 801f1a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801f1a6:	687b      	ldr	r3, [r7, #4]
 801f1a8:	68fa      	ldr	r2, [r7, #12]
 801f1aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801f1ac:	683b      	ldr	r3, [r7, #0]
 801f1ae:	685a      	ldr	r2, [r3, #4]
 801f1b0:	687b      	ldr	r3, [r7, #4]
 801f1b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	693a      	ldr	r2, [r7, #16]
 801f1b8:	621a      	str	r2, [r3, #32]
}
 801f1ba:	bf00      	nop
 801f1bc:	371c      	adds	r7, #28
 801f1be:	46bd      	mov	sp, r7
 801f1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1c4:	4770      	bx	lr
 801f1c6:	bf00      	nop
 801f1c8:	40012c00 	.word	0x40012c00
 801f1cc:	40013400 	.word	0x40013400
 801f1d0:	40014000 	.word	0x40014000
 801f1d4:	40014400 	.word	0x40014400
 801f1d8:	40014800 	.word	0x40014800
 801f1dc:	40015000 	.word	0x40015000

0801f1e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801f1e0:	b480      	push	{r7}
 801f1e2:	b087      	sub	sp, #28
 801f1e4:	af00      	add	r7, sp, #0
 801f1e6:	60f8      	str	r0, [r7, #12]
 801f1e8:	60b9      	str	r1, [r7, #8]
 801f1ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801f1ec:	68bb      	ldr	r3, [r7, #8]
 801f1ee:	f003 031f 	and.w	r3, r3, #31
 801f1f2:	2201      	movs	r2, #1
 801f1f4:	fa02 f303 	lsl.w	r3, r2, r3
 801f1f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801f1fa:	68fb      	ldr	r3, [r7, #12]
 801f1fc:	6a1a      	ldr	r2, [r3, #32]
 801f1fe:	697b      	ldr	r3, [r7, #20]
 801f200:	43db      	mvns	r3, r3
 801f202:	401a      	ands	r2, r3
 801f204:	68fb      	ldr	r3, [r7, #12]
 801f206:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801f208:	68fb      	ldr	r3, [r7, #12]
 801f20a:	6a1a      	ldr	r2, [r3, #32]
 801f20c:	68bb      	ldr	r3, [r7, #8]
 801f20e:	f003 031f 	and.w	r3, r3, #31
 801f212:	6879      	ldr	r1, [r7, #4]
 801f214:	fa01 f303 	lsl.w	r3, r1, r3
 801f218:	431a      	orrs	r2, r3
 801f21a:	68fb      	ldr	r3, [r7, #12]
 801f21c:	621a      	str	r2, [r3, #32]
}
 801f21e:	bf00      	nop
 801f220:	371c      	adds	r7, #28
 801f222:	46bd      	mov	sp, r7
 801f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f228:	4770      	bx	lr
	...

0801f22c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801f22c:	b480      	push	{r7}
 801f22e:	b085      	sub	sp, #20
 801f230:	af00      	add	r7, sp, #0
 801f232:	6078      	str	r0, [r7, #4]
 801f234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801f236:	687b      	ldr	r3, [r7, #4]
 801f238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f23c:	2b01      	cmp	r3, #1
 801f23e:	d101      	bne.n	801f244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801f240:	2302      	movs	r3, #2
 801f242:	e06f      	b.n	801f324 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 801f244:	687b      	ldr	r3, [r7, #4]
 801f246:	2201      	movs	r2, #1
 801f248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f24c:	687b      	ldr	r3, [r7, #4]
 801f24e:	2202      	movs	r2, #2
 801f250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801f254:	687b      	ldr	r3, [r7, #4]
 801f256:	681b      	ldr	r3, [r3, #0]
 801f258:	685b      	ldr	r3, [r3, #4]
 801f25a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801f25c:	687b      	ldr	r3, [r7, #4]
 801f25e:	681b      	ldr	r3, [r3, #0]
 801f260:	689b      	ldr	r3, [r3, #8]
 801f262:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801f264:	687b      	ldr	r3, [r7, #4]
 801f266:	681b      	ldr	r3, [r3, #0]
 801f268:	4a31      	ldr	r2, [pc, #196]	; (801f330 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801f26a:	4293      	cmp	r3, r2
 801f26c:	d009      	beq.n	801f282 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801f26e:	687b      	ldr	r3, [r7, #4]
 801f270:	681b      	ldr	r3, [r3, #0]
 801f272:	4a30      	ldr	r2, [pc, #192]	; (801f334 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801f274:	4293      	cmp	r3, r2
 801f276:	d004      	beq.n	801f282 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801f278:	687b      	ldr	r3, [r7, #4]
 801f27a:	681b      	ldr	r3, [r3, #0]
 801f27c:	4a2e      	ldr	r2, [pc, #184]	; (801f338 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801f27e:	4293      	cmp	r3, r2
 801f280:	d108      	bne.n	801f294 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801f282:	68fb      	ldr	r3, [r7, #12]
 801f284:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801f288:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801f28a:	683b      	ldr	r3, [r7, #0]
 801f28c:	685b      	ldr	r3, [r3, #4]
 801f28e:	68fa      	ldr	r2, [r7, #12]
 801f290:	4313      	orrs	r3, r2
 801f292:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801f294:	68fb      	ldr	r3, [r7, #12]
 801f296:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 801f29a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f29e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801f2a0:	683b      	ldr	r3, [r7, #0]
 801f2a2:	681b      	ldr	r3, [r3, #0]
 801f2a4:	68fa      	ldr	r2, [r7, #12]
 801f2a6:	4313      	orrs	r3, r2
 801f2a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801f2aa:	687b      	ldr	r3, [r7, #4]
 801f2ac:	681b      	ldr	r3, [r3, #0]
 801f2ae:	68fa      	ldr	r2, [r7, #12]
 801f2b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f2b2:	687b      	ldr	r3, [r7, #4]
 801f2b4:	681b      	ldr	r3, [r3, #0]
 801f2b6:	4a1e      	ldr	r2, [pc, #120]	; (801f330 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801f2b8:	4293      	cmp	r3, r2
 801f2ba:	d01d      	beq.n	801f2f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f2bc:	687b      	ldr	r3, [r7, #4]
 801f2be:	681b      	ldr	r3, [r3, #0]
 801f2c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f2c4:	d018      	beq.n	801f2f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f2c6:	687b      	ldr	r3, [r7, #4]
 801f2c8:	681b      	ldr	r3, [r3, #0]
 801f2ca:	4a1c      	ldr	r2, [pc, #112]	; (801f33c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801f2cc:	4293      	cmp	r3, r2
 801f2ce:	d013      	beq.n	801f2f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f2d0:	687b      	ldr	r3, [r7, #4]
 801f2d2:	681b      	ldr	r3, [r3, #0]
 801f2d4:	4a1a      	ldr	r2, [pc, #104]	; (801f340 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801f2d6:	4293      	cmp	r3, r2
 801f2d8:	d00e      	beq.n	801f2f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f2da:	687b      	ldr	r3, [r7, #4]
 801f2dc:	681b      	ldr	r3, [r3, #0]
 801f2de:	4a15      	ldr	r2, [pc, #84]	; (801f334 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801f2e0:	4293      	cmp	r3, r2
 801f2e2:	d009      	beq.n	801f2f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f2e4:	687b      	ldr	r3, [r7, #4]
 801f2e6:	681b      	ldr	r3, [r3, #0]
 801f2e8:	4a16      	ldr	r2, [pc, #88]	; (801f344 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801f2ea:	4293      	cmp	r3, r2
 801f2ec:	d004      	beq.n	801f2f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f2ee:	687b      	ldr	r3, [r7, #4]
 801f2f0:	681b      	ldr	r3, [r3, #0]
 801f2f2:	4a11      	ldr	r2, [pc, #68]	; (801f338 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801f2f4:	4293      	cmp	r3, r2
 801f2f6:	d10c      	bne.n	801f312 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801f2f8:	68bb      	ldr	r3, [r7, #8]
 801f2fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801f2fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801f300:	683b      	ldr	r3, [r7, #0]
 801f302:	689b      	ldr	r3, [r3, #8]
 801f304:	68ba      	ldr	r2, [r7, #8]
 801f306:	4313      	orrs	r3, r2
 801f308:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801f30a:	687b      	ldr	r3, [r7, #4]
 801f30c:	681b      	ldr	r3, [r3, #0]
 801f30e:	68ba      	ldr	r2, [r7, #8]
 801f310:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801f312:	687b      	ldr	r3, [r7, #4]
 801f314:	2201      	movs	r2, #1
 801f316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801f31a:	687b      	ldr	r3, [r7, #4]
 801f31c:	2200      	movs	r2, #0
 801f31e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801f322:	2300      	movs	r3, #0
}
 801f324:	4618      	mov	r0, r3
 801f326:	3714      	adds	r7, #20
 801f328:	46bd      	mov	sp, r7
 801f32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f32e:	4770      	bx	lr
 801f330:	40012c00 	.word	0x40012c00
 801f334:	40013400 	.word	0x40013400
 801f338:	40015000 	.word	0x40015000
 801f33c:	40000400 	.word	0x40000400
 801f340:	40000800 	.word	0x40000800
 801f344:	40014000 	.word	0x40014000

0801f348 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801f348:	b480      	push	{r7}
 801f34a:	b085      	sub	sp, #20
 801f34c:	af00      	add	r7, sp, #0
 801f34e:	6078      	str	r0, [r7, #4]
 801f350:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801f352:	2300      	movs	r3, #0
 801f354:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801f356:	687b      	ldr	r3, [r7, #4]
 801f358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f35c:	2b01      	cmp	r3, #1
 801f35e:	d101      	bne.n	801f364 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801f360:	2302      	movs	r3, #2
 801f362:	e096      	b.n	801f492 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 801f364:	687b      	ldr	r3, [r7, #4]
 801f366:	2201      	movs	r2, #1
 801f368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801f36c:	68fb      	ldr	r3, [r7, #12]
 801f36e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801f372:	683b      	ldr	r3, [r7, #0]
 801f374:	68db      	ldr	r3, [r3, #12]
 801f376:	4313      	orrs	r3, r2
 801f378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801f37a:	68fb      	ldr	r3, [r7, #12]
 801f37c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801f380:	683b      	ldr	r3, [r7, #0]
 801f382:	689b      	ldr	r3, [r3, #8]
 801f384:	4313      	orrs	r3, r2
 801f386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801f388:	68fb      	ldr	r3, [r7, #12]
 801f38a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801f38e:	683b      	ldr	r3, [r7, #0]
 801f390:	685b      	ldr	r3, [r3, #4]
 801f392:	4313      	orrs	r3, r2
 801f394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801f396:	68fb      	ldr	r3, [r7, #12]
 801f398:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801f39c:	683b      	ldr	r3, [r7, #0]
 801f39e:	681b      	ldr	r3, [r3, #0]
 801f3a0:	4313      	orrs	r3, r2
 801f3a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801f3a4:	68fb      	ldr	r3, [r7, #12]
 801f3a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801f3aa:	683b      	ldr	r3, [r7, #0]
 801f3ac:	691b      	ldr	r3, [r3, #16]
 801f3ae:	4313      	orrs	r3, r2
 801f3b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801f3b2:	68fb      	ldr	r3, [r7, #12]
 801f3b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801f3b8:	683b      	ldr	r3, [r7, #0]
 801f3ba:	695b      	ldr	r3, [r3, #20]
 801f3bc:	4313      	orrs	r3, r2
 801f3be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801f3c0:	68fb      	ldr	r3, [r7, #12]
 801f3c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801f3c6:	683b      	ldr	r3, [r7, #0]
 801f3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f3ca:	4313      	orrs	r3, r2
 801f3cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801f3ce:	68fb      	ldr	r3, [r7, #12]
 801f3d0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801f3d4:	683b      	ldr	r3, [r7, #0]
 801f3d6:	699b      	ldr	r3, [r3, #24]
 801f3d8:	041b      	lsls	r3, r3, #16
 801f3da:	4313      	orrs	r3, r2
 801f3dc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801f3de:	687b      	ldr	r3, [r7, #4]
 801f3e0:	681b      	ldr	r3, [r3, #0]
 801f3e2:	4a2f      	ldr	r2, [pc, #188]	; (801f4a0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801f3e4:	4293      	cmp	r3, r2
 801f3e6:	d009      	beq.n	801f3fc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801f3e8:	687b      	ldr	r3, [r7, #4]
 801f3ea:	681b      	ldr	r3, [r3, #0]
 801f3ec:	4a2d      	ldr	r2, [pc, #180]	; (801f4a4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801f3ee:	4293      	cmp	r3, r2
 801f3f0:	d004      	beq.n	801f3fc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801f3f2:	687b      	ldr	r3, [r7, #4]
 801f3f4:	681b      	ldr	r3, [r3, #0]
 801f3f6:	4a2c      	ldr	r2, [pc, #176]	; (801f4a8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801f3f8:	4293      	cmp	r3, r2
 801f3fa:	d106      	bne.n	801f40a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801f3fc:	68fb      	ldr	r3, [r7, #12]
 801f3fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801f402:	683b      	ldr	r3, [r7, #0]
 801f404:	69db      	ldr	r3, [r3, #28]
 801f406:	4313      	orrs	r3, r2
 801f408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801f40a:	687b      	ldr	r3, [r7, #4]
 801f40c:	681b      	ldr	r3, [r3, #0]
 801f40e:	4a24      	ldr	r2, [pc, #144]	; (801f4a0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801f410:	4293      	cmp	r3, r2
 801f412:	d009      	beq.n	801f428 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801f414:	687b      	ldr	r3, [r7, #4]
 801f416:	681b      	ldr	r3, [r3, #0]
 801f418:	4a22      	ldr	r2, [pc, #136]	; (801f4a4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801f41a:	4293      	cmp	r3, r2
 801f41c:	d004      	beq.n	801f428 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801f41e:	687b      	ldr	r3, [r7, #4]
 801f420:	681b      	ldr	r3, [r3, #0]
 801f422:	4a21      	ldr	r2, [pc, #132]	; (801f4a8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801f424:	4293      	cmp	r3, r2
 801f426:	d12b      	bne.n	801f480 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801f428:	68fb      	ldr	r3, [r7, #12]
 801f42a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801f42e:	683b      	ldr	r3, [r7, #0]
 801f430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f432:	051b      	lsls	r3, r3, #20
 801f434:	4313      	orrs	r3, r2
 801f436:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801f438:	68fb      	ldr	r3, [r7, #12]
 801f43a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801f43e:	683b      	ldr	r3, [r7, #0]
 801f440:	6a1b      	ldr	r3, [r3, #32]
 801f442:	4313      	orrs	r3, r2
 801f444:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801f446:	68fb      	ldr	r3, [r7, #12]
 801f448:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801f44c:	683b      	ldr	r3, [r7, #0]
 801f44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f450:	4313      	orrs	r3, r2
 801f452:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801f454:	687b      	ldr	r3, [r7, #4]
 801f456:	681b      	ldr	r3, [r3, #0]
 801f458:	4a11      	ldr	r2, [pc, #68]	; (801f4a0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801f45a:	4293      	cmp	r3, r2
 801f45c:	d009      	beq.n	801f472 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801f45e:	687b      	ldr	r3, [r7, #4]
 801f460:	681b      	ldr	r3, [r3, #0]
 801f462:	4a10      	ldr	r2, [pc, #64]	; (801f4a4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801f464:	4293      	cmp	r3, r2
 801f466:	d004      	beq.n	801f472 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801f468:	687b      	ldr	r3, [r7, #4]
 801f46a:	681b      	ldr	r3, [r3, #0]
 801f46c:	4a0e      	ldr	r2, [pc, #56]	; (801f4a8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801f46e:	4293      	cmp	r3, r2
 801f470:	d106      	bne.n	801f480 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801f472:	68fb      	ldr	r3, [r7, #12]
 801f474:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801f478:	683b      	ldr	r3, [r7, #0]
 801f47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f47c:	4313      	orrs	r3, r2
 801f47e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801f480:	687b      	ldr	r3, [r7, #4]
 801f482:	681b      	ldr	r3, [r3, #0]
 801f484:	68fa      	ldr	r2, [r7, #12]
 801f486:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801f488:	687b      	ldr	r3, [r7, #4]
 801f48a:	2200      	movs	r2, #0
 801f48c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801f490:	2300      	movs	r3, #0
}
 801f492:	4618      	mov	r0, r3
 801f494:	3714      	adds	r7, #20
 801f496:	46bd      	mov	sp, r7
 801f498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f49c:	4770      	bx	lr
 801f49e:	bf00      	nop
 801f4a0:	40012c00 	.word	0x40012c00
 801f4a4:	40013400 	.word	0x40013400
 801f4a8:	40015000 	.word	0x40015000

0801f4ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801f4ac:	b480      	push	{r7}
 801f4ae:	b083      	sub	sp, #12
 801f4b0:	af00      	add	r7, sp, #0
 801f4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801f4b4:	bf00      	nop
 801f4b6:	370c      	adds	r7, #12
 801f4b8:	46bd      	mov	sp, r7
 801f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4be:	4770      	bx	lr

0801f4c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801f4c0:	b480      	push	{r7}
 801f4c2:	b083      	sub	sp, #12
 801f4c4:	af00      	add	r7, sp, #0
 801f4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801f4c8:	bf00      	nop
 801f4ca:	370c      	adds	r7, #12
 801f4cc:	46bd      	mov	sp, r7
 801f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4d2:	4770      	bx	lr

0801f4d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801f4d4:	b480      	push	{r7}
 801f4d6:	b083      	sub	sp, #12
 801f4d8:	af00      	add	r7, sp, #0
 801f4da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801f4dc:	bf00      	nop
 801f4de:	370c      	adds	r7, #12
 801f4e0:	46bd      	mov	sp, r7
 801f4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4e6:	4770      	bx	lr

0801f4e8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 801f4e8:	b480      	push	{r7}
 801f4ea:	b083      	sub	sp, #12
 801f4ec:	af00      	add	r7, sp, #0
 801f4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 801f4f0:	bf00      	nop
 801f4f2:	370c      	adds	r7, #12
 801f4f4:	46bd      	mov	sp, r7
 801f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4fa:	4770      	bx	lr

0801f4fc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 801f4fc:	b480      	push	{r7}
 801f4fe:	b083      	sub	sp, #12
 801f500:	af00      	add	r7, sp, #0
 801f502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 801f504:	bf00      	nop
 801f506:	370c      	adds	r7, #12
 801f508:	46bd      	mov	sp, r7
 801f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f50e:	4770      	bx	lr

0801f510 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 801f510:	b480      	push	{r7}
 801f512:	b083      	sub	sp, #12
 801f514:	af00      	add	r7, sp, #0
 801f516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 801f518:	bf00      	nop
 801f51a:	370c      	adds	r7, #12
 801f51c:	46bd      	mov	sp, r7
 801f51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f522:	4770      	bx	lr

0801f524 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 801f524:	b480      	push	{r7}
 801f526:	b083      	sub	sp, #12
 801f528:	af00      	add	r7, sp, #0
 801f52a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 801f52c:	bf00      	nop
 801f52e:	370c      	adds	r7, #12
 801f530:	46bd      	mov	sp, r7
 801f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f536:	4770      	bx	lr

0801f538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801f538:	b580      	push	{r7, lr}
 801f53a:	b082      	sub	sp, #8
 801f53c:	af00      	add	r7, sp, #0
 801f53e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801f540:	687b      	ldr	r3, [r7, #4]
 801f542:	2b00      	cmp	r3, #0
 801f544:	d101      	bne.n	801f54a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801f546:	2301      	movs	r3, #1
 801f548:	e042      	b.n	801f5d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801f54a:	687b      	ldr	r3, [r7, #4]
 801f54c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f550:	2b00      	cmp	r3, #0
 801f552:	d106      	bne.n	801f562 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801f554:	687b      	ldr	r3, [r7, #4]
 801f556:	2200      	movs	r2, #0
 801f558:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801f55c:	6878      	ldr	r0, [r7, #4]
 801f55e:	f7f9 fae3 	bl	8018b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801f562:	687b      	ldr	r3, [r7, #4]
 801f564:	2224      	movs	r2, #36	; 0x24
 801f566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801f56a:	687b      	ldr	r3, [r7, #4]
 801f56c:	681b      	ldr	r3, [r3, #0]
 801f56e:	681a      	ldr	r2, [r3, #0]
 801f570:	687b      	ldr	r3, [r7, #4]
 801f572:	681b      	ldr	r3, [r3, #0]
 801f574:	f022 0201 	bic.w	r2, r2, #1
 801f578:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801f57a:	6878      	ldr	r0, [r7, #4]
 801f57c:	f000 f8c2 	bl	801f704 <UART_SetConfig>
 801f580:	4603      	mov	r3, r0
 801f582:	2b01      	cmp	r3, #1
 801f584:	d101      	bne.n	801f58a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801f586:	2301      	movs	r3, #1
 801f588:	e022      	b.n	801f5d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801f58a:	687b      	ldr	r3, [r7, #4]
 801f58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f58e:	2b00      	cmp	r3, #0
 801f590:	d002      	beq.n	801f598 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801f592:	6878      	ldr	r0, [r7, #4]
 801f594:	f000 fbb2 	bl	801fcfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801f598:	687b      	ldr	r3, [r7, #4]
 801f59a:	681b      	ldr	r3, [r3, #0]
 801f59c:	685a      	ldr	r2, [r3, #4]
 801f59e:	687b      	ldr	r3, [r7, #4]
 801f5a0:	681b      	ldr	r3, [r3, #0]
 801f5a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801f5a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801f5a8:	687b      	ldr	r3, [r7, #4]
 801f5aa:	681b      	ldr	r3, [r3, #0]
 801f5ac:	689a      	ldr	r2, [r3, #8]
 801f5ae:	687b      	ldr	r3, [r7, #4]
 801f5b0:	681b      	ldr	r3, [r3, #0]
 801f5b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801f5b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801f5b8:	687b      	ldr	r3, [r7, #4]
 801f5ba:	681b      	ldr	r3, [r3, #0]
 801f5bc:	681a      	ldr	r2, [r3, #0]
 801f5be:	687b      	ldr	r3, [r7, #4]
 801f5c0:	681b      	ldr	r3, [r3, #0]
 801f5c2:	f042 0201 	orr.w	r2, r2, #1
 801f5c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801f5c8:	6878      	ldr	r0, [r7, #4]
 801f5ca:	f000 fc39 	bl	801fe40 <UART_CheckIdleState>
 801f5ce:	4603      	mov	r3, r0
}
 801f5d0:	4618      	mov	r0, r3
 801f5d2:	3708      	adds	r7, #8
 801f5d4:	46bd      	mov	sp, r7
 801f5d6:	bd80      	pop	{r7, pc}

0801f5d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801f5d8:	b580      	push	{r7, lr}
 801f5da:	b08a      	sub	sp, #40	; 0x28
 801f5dc:	af02      	add	r7, sp, #8
 801f5de:	60f8      	str	r0, [r7, #12]
 801f5e0:	60b9      	str	r1, [r7, #8]
 801f5e2:	603b      	str	r3, [r7, #0]
 801f5e4:	4613      	mov	r3, r2
 801f5e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801f5e8:	68fb      	ldr	r3, [r7, #12]
 801f5ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f5ee:	2b20      	cmp	r3, #32
 801f5f0:	f040 8083 	bne.w	801f6fa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 801f5f4:	68bb      	ldr	r3, [r7, #8]
 801f5f6:	2b00      	cmp	r3, #0
 801f5f8:	d002      	beq.n	801f600 <HAL_UART_Transmit+0x28>
 801f5fa:	88fb      	ldrh	r3, [r7, #6]
 801f5fc:	2b00      	cmp	r3, #0
 801f5fe:	d101      	bne.n	801f604 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801f600:	2301      	movs	r3, #1
 801f602:	e07b      	b.n	801f6fc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 801f604:	68fb      	ldr	r3, [r7, #12]
 801f606:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801f60a:	2b01      	cmp	r3, #1
 801f60c:	d101      	bne.n	801f612 <HAL_UART_Transmit+0x3a>
 801f60e:	2302      	movs	r3, #2
 801f610:	e074      	b.n	801f6fc <HAL_UART_Transmit+0x124>
 801f612:	68fb      	ldr	r3, [r7, #12]
 801f614:	2201      	movs	r2, #1
 801f616:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f61a:	68fb      	ldr	r3, [r7, #12]
 801f61c:	2200      	movs	r2, #0
 801f61e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801f622:	68fb      	ldr	r3, [r7, #12]
 801f624:	2221      	movs	r2, #33	; 0x21
 801f626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801f62a:	f7f9 fb6b 	bl	8018d04 <HAL_GetTick>
 801f62e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801f630:	68fb      	ldr	r3, [r7, #12]
 801f632:	88fa      	ldrh	r2, [r7, #6]
 801f634:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801f638:	68fb      	ldr	r3, [r7, #12]
 801f63a:	88fa      	ldrh	r2, [r7, #6]
 801f63c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f640:	68fb      	ldr	r3, [r7, #12]
 801f642:	689b      	ldr	r3, [r3, #8]
 801f644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f648:	d108      	bne.n	801f65c <HAL_UART_Transmit+0x84>
 801f64a:	68fb      	ldr	r3, [r7, #12]
 801f64c:	691b      	ldr	r3, [r3, #16]
 801f64e:	2b00      	cmp	r3, #0
 801f650:	d104      	bne.n	801f65c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801f652:	2300      	movs	r3, #0
 801f654:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801f656:	68bb      	ldr	r3, [r7, #8]
 801f658:	61bb      	str	r3, [r7, #24]
 801f65a:	e003      	b.n	801f664 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 801f65c:	68bb      	ldr	r3, [r7, #8]
 801f65e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801f660:	2300      	movs	r3, #0
 801f662:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801f664:	68fb      	ldr	r3, [r7, #12]
 801f666:	2200      	movs	r2, #0
 801f668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 801f66c:	e02c      	b.n	801f6c8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801f66e:	683b      	ldr	r3, [r7, #0]
 801f670:	9300      	str	r3, [sp, #0]
 801f672:	697b      	ldr	r3, [r7, #20]
 801f674:	2200      	movs	r2, #0
 801f676:	2180      	movs	r1, #128	; 0x80
 801f678:	68f8      	ldr	r0, [r7, #12]
 801f67a:	f000 fc2c 	bl	801fed6 <UART_WaitOnFlagUntilTimeout>
 801f67e:	4603      	mov	r3, r0
 801f680:	2b00      	cmp	r3, #0
 801f682:	d001      	beq.n	801f688 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 801f684:	2303      	movs	r3, #3
 801f686:	e039      	b.n	801f6fc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 801f688:	69fb      	ldr	r3, [r7, #28]
 801f68a:	2b00      	cmp	r3, #0
 801f68c:	d10b      	bne.n	801f6a6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801f68e:	69bb      	ldr	r3, [r7, #24]
 801f690:	881b      	ldrh	r3, [r3, #0]
 801f692:	461a      	mov	r2, r3
 801f694:	68fb      	ldr	r3, [r7, #12]
 801f696:	681b      	ldr	r3, [r3, #0]
 801f698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801f69c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801f69e:	69bb      	ldr	r3, [r7, #24]
 801f6a0:	3302      	adds	r3, #2
 801f6a2:	61bb      	str	r3, [r7, #24]
 801f6a4:	e007      	b.n	801f6b6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801f6a6:	69fb      	ldr	r3, [r7, #28]
 801f6a8:	781a      	ldrb	r2, [r3, #0]
 801f6aa:	68fb      	ldr	r3, [r7, #12]
 801f6ac:	681b      	ldr	r3, [r3, #0]
 801f6ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801f6b0:	69fb      	ldr	r3, [r7, #28]
 801f6b2:	3301      	adds	r3, #1
 801f6b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801f6b6:	68fb      	ldr	r3, [r7, #12]
 801f6b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801f6bc:	b29b      	uxth	r3, r3
 801f6be:	3b01      	subs	r3, #1
 801f6c0:	b29a      	uxth	r2, r3
 801f6c2:	68fb      	ldr	r3, [r7, #12]
 801f6c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801f6c8:	68fb      	ldr	r3, [r7, #12]
 801f6ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801f6ce:	b29b      	uxth	r3, r3
 801f6d0:	2b00      	cmp	r3, #0
 801f6d2:	d1cc      	bne.n	801f66e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801f6d4:	683b      	ldr	r3, [r7, #0]
 801f6d6:	9300      	str	r3, [sp, #0]
 801f6d8:	697b      	ldr	r3, [r7, #20]
 801f6da:	2200      	movs	r2, #0
 801f6dc:	2140      	movs	r1, #64	; 0x40
 801f6de:	68f8      	ldr	r0, [r7, #12]
 801f6e0:	f000 fbf9 	bl	801fed6 <UART_WaitOnFlagUntilTimeout>
 801f6e4:	4603      	mov	r3, r0
 801f6e6:	2b00      	cmp	r3, #0
 801f6e8:	d001      	beq.n	801f6ee <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 801f6ea:	2303      	movs	r3, #3
 801f6ec:	e006      	b.n	801f6fc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801f6ee:	68fb      	ldr	r3, [r7, #12]
 801f6f0:	2220      	movs	r2, #32
 801f6f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801f6f6:	2300      	movs	r3, #0
 801f6f8:	e000      	b.n	801f6fc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 801f6fa:	2302      	movs	r3, #2
  }
}
 801f6fc:	4618      	mov	r0, r3
 801f6fe:	3720      	adds	r7, #32
 801f700:	46bd      	mov	sp, r7
 801f702:	bd80      	pop	{r7, pc}

0801f704 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801f704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f708:	b08c      	sub	sp, #48	; 0x30
 801f70a:	af00      	add	r7, sp, #0
 801f70c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801f70e:	2300      	movs	r3, #0
 801f710:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801f714:	697b      	ldr	r3, [r7, #20]
 801f716:	689a      	ldr	r2, [r3, #8]
 801f718:	697b      	ldr	r3, [r7, #20]
 801f71a:	691b      	ldr	r3, [r3, #16]
 801f71c:	431a      	orrs	r2, r3
 801f71e:	697b      	ldr	r3, [r7, #20]
 801f720:	695b      	ldr	r3, [r3, #20]
 801f722:	431a      	orrs	r2, r3
 801f724:	697b      	ldr	r3, [r7, #20]
 801f726:	69db      	ldr	r3, [r3, #28]
 801f728:	4313      	orrs	r3, r2
 801f72a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801f72c:	697b      	ldr	r3, [r7, #20]
 801f72e:	681b      	ldr	r3, [r3, #0]
 801f730:	681a      	ldr	r2, [r3, #0]
 801f732:	4baa      	ldr	r3, [pc, #680]	; (801f9dc <UART_SetConfig+0x2d8>)
 801f734:	4013      	ands	r3, r2
 801f736:	697a      	ldr	r2, [r7, #20]
 801f738:	6812      	ldr	r2, [r2, #0]
 801f73a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f73c:	430b      	orrs	r3, r1
 801f73e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801f740:	697b      	ldr	r3, [r7, #20]
 801f742:	681b      	ldr	r3, [r3, #0]
 801f744:	685b      	ldr	r3, [r3, #4]
 801f746:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801f74a:	697b      	ldr	r3, [r7, #20]
 801f74c:	68da      	ldr	r2, [r3, #12]
 801f74e:	697b      	ldr	r3, [r7, #20]
 801f750:	681b      	ldr	r3, [r3, #0]
 801f752:	430a      	orrs	r2, r1
 801f754:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801f756:	697b      	ldr	r3, [r7, #20]
 801f758:	699b      	ldr	r3, [r3, #24]
 801f75a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801f75c:	697b      	ldr	r3, [r7, #20]
 801f75e:	681b      	ldr	r3, [r3, #0]
 801f760:	4a9f      	ldr	r2, [pc, #636]	; (801f9e0 <UART_SetConfig+0x2dc>)
 801f762:	4293      	cmp	r3, r2
 801f764:	d004      	beq.n	801f770 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801f766:	697b      	ldr	r3, [r7, #20]
 801f768:	6a1b      	ldr	r3, [r3, #32]
 801f76a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f76c:	4313      	orrs	r3, r2
 801f76e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801f770:	697b      	ldr	r3, [r7, #20]
 801f772:	681b      	ldr	r3, [r3, #0]
 801f774:	689b      	ldr	r3, [r3, #8]
 801f776:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801f77a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801f77e:	697a      	ldr	r2, [r7, #20]
 801f780:	6812      	ldr	r2, [r2, #0]
 801f782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f784:	430b      	orrs	r3, r1
 801f786:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801f788:	697b      	ldr	r3, [r7, #20]
 801f78a:	681b      	ldr	r3, [r3, #0]
 801f78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f78e:	f023 010f 	bic.w	r1, r3, #15
 801f792:	697b      	ldr	r3, [r7, #20]
 801f794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f796:	697b      	ldr	r3, [r7, #20]
 801f798:	681b      	ldr	r3, [r3, #0]
 801f79a:	430a      	orrs	r2, r1
 801f79c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801f79e:	697b      	ldr	r3, [r7, #20]
 801f7a0:	681b      	ldr	r3, [r3, #0]
 801f7a2:	4a90      	ldr	r2, [pc, #576]	; (801f9e4 <UART_SetConfig+0x2e0>)
 801f7a4:	4293      	cmp	r3, r2
 801f7a6:	d125      	bne.n	801f7f4 <UART_SetConfig+0xf0>
 801f7a8:	4b8f      	ldr	r3, [pc, #572]	; (801f9e8 <UART_SetConfig+0x2e4>)
 801f7aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f7ae:	f003 0303 	and.w	r3, r3, #3
 801f7b2:	2b03      	cmp	r3, #3
 801f7b4:	d81a      	bhi.n	801f7ec <UART_SetConfig+0xe8>
 801f7b6:	a201      	add	r2, pc, #4	; (adr r2, 801f7bc <UART_SetConfig+0xb8>)
 801f7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f7bc:	0801f7cd 	.word	0x0801f7cd
 801f7c0:	0801f7dd 	.word	0x0801f7dd
 801f7c4:	0801f7d5 	.word	0x0801f7d5
 801f7c8:	0801f7e5 	.word	0x0801f7e5
 801f7cc:	2301      	movs	r3, #1
 801f7ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f7d2:	e116      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f7d4:	2302      	movs	r3, #2
 801f7d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f7da:	e112      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f7dc:	2304      	movs	r3, #4
 801f7de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f7e2:	e10e      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f7e4:	2308      	movs	r3, #8
 801f7e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f7ea:	e10a      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f7ec:	2310      	movs	r3, #16
 801f7ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f7f2:	e106      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f7f4:	697b      	ldr	r3, [r7, #20]
 801f7f6:	681b      	ldr	r3, [r3, #0]
 801f7f8:	4a7c      	ldr	r2, [pc, #496]	; (801f9ec <UART_SetConfig+0x2e8>)
 801f7fa:	4293      	cmp	r3, r2
 801f7fc:	d138      	bne.n	801f870 <UART_SetConfig+0x16c>
 801f7fe:	4b7a      	ldr	r3, [pc, #488]	; (801f9e8 <UART_SetConfig+0x2e4>)
 801f800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f804:	f003 030c 	and.w	r3, r3, #12
 801f808:	2b0c      	cmp	r3, #12
 801f80a:	d82d      	bhi.n	801f868 <UART_SetConfig+0x164>
 801f80c:	a201      	add	r2, pc, #4	; (adr r2, 801f814 <UART_SetConfig+0x110>)
 801f80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f812:	bf00      	nop
 801f814:	0801f849 	.word	0x0801f849
 801f818:	0801f869 	.word	0x0801f869
 801f81c:	0801f869 	.word	0x0801f869
 801f820:	0801f869 	.word	0x0801f869
 801f824:	0801f859 	.word	0x0801f859
 801f828:	0801f869 	.word	0x0801f869
 801f82c:	0801f869 	.word	0x0801f869
 801f830:	0801f869 	.word	0x0801f869
 801f834:	0801f851 	.word	0x0801f851
 801f838:	0801f869 	.word	0x0801f869
 801f83c:	0801f869 	.word	0x0801f869
 801f840:	0801f869 	.word	0x0801f869
 801f844:	0801f861 	.word	0x0801f861
 801f848:	2300      	movs	r3, #0
 801f84a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f84e:	e0d8      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f850:	2302      	movs	r3, #2
 801f852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f856:	e0d4      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f858:	2304      	movs	r3, #4
 801f85a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f85e:	e0d0      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f860:	2308      	movs	r3, #8
 801f862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f866:	e0cc      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f868:	2310      	movs	r3, #16
 801f86a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f86e:	e0c8      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f870:	697b      	ldr	r3, [r7, #20]
 801f872:	681b      	ldr	r3, [r3, #0]
 801f874:	4a5e      	ldr	r2, [pc, #376]	; (801f9f0 <UART_SetConfig+0x2ec>)
 801f876:	4293      	cmp	r3, r2
 801f878:	d125      	bne.n	801f8c6 <UART_SetConfig+0x1c2>
 801f87a:	4b5b      	ldr	r3, [pc, #364]	; (801f9e8 <UART_SetConfig+0x2e4>)
 801f87c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f880:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801f884:	2b30      	cmp	r3, #48	; 0x30
 801f886:	d016      	beq.n	801f8b6 <UART_SetConfig+0x1b2>
 801f888:	2b30      	cmp	r3, #48	; 0x30
 801f88a:	d818      	bhi.n	801f8be <UART_SetConfig+0x1ba>
 801f88c:	2b20      	cmp	r3, #32
 801f88e:	d00a      	beq.n	801f8a6 <UART_SetConfig+0x1a2>
 801f890:	2b20      	cmp	r3, #32
 801f892:	d814      	bhi.n	801f8be <UART_SetConfig+0x1ba>
 801f894:	2b00      	cmp	r3, #0
 801f896:	d002      	beq.n	801f89e <UART_SetConfig+0x19a>
 801f898:	2b10      	cmp	r3, #16
 801f89a:	d008      	beq.n	801f8ae <UART_SetConfig+0x1aa>
 801f89c:	e00f      	b.n	801f8be <UART_SetConfig+0x1ba>
 801f89e:	2300      	movs	r3, #0
 801f8a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f8a4:	e0ad      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f8a6:	2302      	movs	r3, #2
 801f8a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f8ac:	e0a9      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f8ae:	2304      	movs	r3, #4
 801f8b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f8b4:	e0a5      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f8b6:	2308      	movs	r3, #8
 801f8b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f8bc:	e0a1      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f8be:	2310      	movs	r3, #16
 801f8c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f8c4:	e09d      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f8c6:	697b      	ldr	r3, [r7, #20]
 801f8c8:	681b      	ldr	r3, [r3, #0]
 801f8ca:	4a4a      	ldr	r2, [pc, #296]	; (801f9f4 <UART_SetConfig+0x2f0>)
 801f8cc:	4293      	cmp	r3, r2
 801f8ce:	d125      	bne.n	801f91c <UART_SetConfig+0x218>
 801f8d0:	4b45      	ldr	r3, [pc, #276]	; (801f9e8 <UART_SetConfig+0x2e4>)
 801f8d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f8d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801f8da:	2bc0      	cmp	r3, #192	; 0xc0
 801f8dc:	d016      	beq.n	801f90c <UART_SetConfig+0x208>
 801f8de:	2bc0      	cmp	r3, #192	; 0xc0
 801f8e0:	d818      	bhi.n	801f914 <UART_SetConfig+0x210>
 801f8e2:	2b80      	cmp	r3, #128	; 0x80
 801f8e4:	d00a      	beq.n	801f8fc <UART_SetConfig+0x1f8>
 801f8e6:	2b80      	cmp	r3, #128	; 0x80
 801f8e8:	d814      	bhi.n	801f914 <UART_SetConfig+0x210>
 801f8ea:	2b00      	cmp	r3, #0
 801f8ec:	d002      	beq.n	801f8f4 <UART_SetConfig+0x1f0>
 801f8ee:	2b40      	cmp	r3, #64	; 0x40
 801f8f0:	d008      	beq.n	801f904 <UART_SetConfig+0x200>
 801f8f2:	e00f      	b.n	801f914 <UART_SetConfig+0x210>
 801f8f4:	2300      	movs	r3, #0
 801f8f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f8fa:	e082      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f8fc:	2302      	movs	r3, #2
 801f8fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f902:	e07e      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f904:	2304      	movs	r3, #4
 801f906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f90a:	e07a      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f90c:	2308      	movs	r3, #8
 801f90e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f912:	e076      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f914:	2310      	movs	r3, #16
 801f916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f91a:	e072      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f91c:	697b      	ldr	r3, [r7, #20]
 801f91e:	681b      	ldr	r3, [r3, #0]
 801f920:	4a35      	ldr	r2, [pc, #212]	; (801f9f8 <UART_SetConfig+0x2f4>)
 801f922:	4293      	cmp	r3, r2
 801f924:	d12a      	bne.n	801f97c <UART_SetConfig+0x278>
 801f926:	4b30      	ldr	r3, [pc, #192]	; (801f9e8 <UART_SetConfig+0x2e4>)
 801f928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f92c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f930:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f934:	d01a      	beq.n	801f96c <UART_SetConfig+0x268>
 801f936:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f93a:	d81b      	bhi.n	801f974 <UART_SetConfig+0x270>
 801f93c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f940:	d00c      	beq.n	801f95c <UART_SetConfig+0x258>
 801f942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f946:	d815      	bhi.n	801f974 <UART_SetConfig+0x270>
 801f948:	2b00      	cmp	r3, #0
 801f94a:	d003      	beq.n	801f954 <UART_SetConfig+0x250>
 801f94c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f950:	d008      	beq.n	801f964 <UART_SetConfig+0x260>
 801f952:	e00f      	b.n	801f974 <UART_SetConfig+0x270>
 801f954:	2300      	movs	r3, #0
 801f956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f95a:	e052      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f95c:	2302      	movs	r3, #2
 801f95e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f962:	e04e      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f964:	2304      	movs	r3, #4
 801f966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f96a:	e04a      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f96c:	2308      	movs	r3, #8
 801f96e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f972:	e046      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f974:	2310      	movs	r3, #16
 801f976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f97a:	e042      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f97c:	697b      	ldr	r3, [r7, #20]
 801f97e:	681b      	ldr	r3, [r3, #0]
 801f980:	4a17      	ldr	r2, [pc, #92]	; (801f9e0 <UART_SetConfig+0x2dc>)
 801f982:	4293      	cmp	r3, r2
 801f984:	d13a      	bne.n	801f9fc <UART_SetConfig+0x2f8>
 801f986:	4b18      	ldr	r3, [pc, #96]	; (801f9e8 <UART_SetConfig+0x2e4>)
 801f988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f98c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801f990:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801f994:	d01a      	beq.n	801f9cc <UART_SetConfig+0x2c8>
 801f996:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801f99a:	d81b      	bhi.n	801f9d4 <UART_SetConfig+0x2d0>
 801f99c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f9a0:	d00c      	beq.n	801f9bc <UART_SetConfig+0x2b8>
 801f9a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f9a6:	d815      	bhi.n	801f9d4 <UART_SetConfig+0x2d0>
 801f9a8:	2b00      	cmp	r3, #0
 801f9aa:	d003      	beq.n	801f9b4 <UART_SetConfig+0x2b0>
 801f9ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f9b0:	d008      	beq.n	801f9c4 <UART_SetConfig+0x2c0>
 801f9b2:	e00f      	b.n	801f9d4 <UART_SetConfig+0x2d0>
 801f9b4:	2300      	movs	r3, #0
 801f9b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f9ba:	e022      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f9bc:	2302      	movs	r3, #2
 801f9be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f9c2:	e01e      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f9c4:	2304      	movs	r3, #4
 801f9c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f9ca:	e01a      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f9cc:	2308      	movs	r3, #8
 801f9ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f9d2:	e016      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f9d4:	2310      	movs	r3, #16
 801f9d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f9da:	e012      	b.n	801fa02 <UART_SetConfig+0x2fe>
 801f9dc:	cfff69f3 	.word	0xcfff69f3
 801f9e0:	40008000 	.word	0x40008000
 801f9e4:	40013800 	.word	0x40013800
 801f9e8:	40021000 	.word	0x40021000
 801f9ec:	40004400 	.word	0x40004400
 801f9f0:	40004800 	.word	0x40004800
 801f9f4:	40004c00 	.word	0x40004c00
 801f9f8:	40005000 	.word	0x40005000
 801f9fc:	2310      	movs	r3, #16
 801f9fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801fa02:	697b      	ldr	r3, [r7, #20]
 801fa04:	681b      	ldr	r3, [r3, #0]
 801fa06:	4aae      	ldr	r2, [pc, #696]	; (801fcc0 <UART_SetConfig+0x5bc>)
 801fa08:	4293      	cmp	r3, r2
 801fa0a:	f040 8097 	bne.w	801fb3c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801fa0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fa12:	2b08      	cmp	r3, #8
 801fa14:	d823      	bhi.n	801fa5e <UART_SetConfig+0x35a>
 801fa16:	a201      	add	r2, pc, #4	; (adr r2, 801fa1c <UART_SetConfig+0x318>)
 801fa18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fa1c:	0801fa41 	.word	0x0801fa41
 801fa20:	0801fa5f 	.word	0x0801fa5f
 801fa24:	0801fa49 	.word	0x0801fa49
 801fa28:	0801fa5f 	.word	0x0801fa5f
 801fa2c:	0801fa4f 	.word	0x0801fa4f
 801fa30:	0801fa5f 	.word	0x0801fa5f
 801fa34:	0801fa5f 	.word	0x0801fa5f
 801fa38:	0801fa5f 	.word	0x0801fa5f
 801fa3c:	0801fa57 	.word	0x0801fa57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801fa40:	f7fd f8b4 	bl	801cbac <HAL_RCC_GetPCLK1Freq>
 801fa44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fa46:	e010      	b.n	801fa6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801fa48:	4b9e      	ldr	r3, [pc, #632]	; (801fcc4 <UART_SetConfig+0x5c0>)
 801fa4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fa4c:	e00d      	b.n	801fa6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801fa4e:	f7fd f841 	bl	801cad4 <HAL_RCC_GetSysClockFreq>
 801fa52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fa54:	e009      	b.n	801fa6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801fa56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801fa5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fa5c:	e005      	b.n	801fa6a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 801fa5e:	2300      	movs	r3, #0
 801fa60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801fa62:	2301      	movs	r3, #1
 801fa64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801fa68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801fa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa6c:	2b00      	cmp	r3, #0
 801fa6e:	f000 8130 	beq.w	801fcd2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801fa72:	697b      	ldr	r3, [r7, #20]
 801fa74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa76:	4a94      	ldr	r2, [pc, #592]	; (801fcc8 <UART_SetConfig+0x5c4>)
 801fa78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fa7c:	461a      	mov	r2, r3
 801fa7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa80:	fbb3 f3f2 	udiv	r3, r3, r2
 801fa84:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801fa86:	697b      	ldr	r3, [r7, #20]
 801fa88:	685a      	ldr	r2, [r3, #4]
 801fa8a:	4613      	mov	r3, r2
 801fa8c:	005b      	lsls	r3, r3, #1
 801fa8e:	4413      	add	r3, r2
 801fa90:	69ba      	ldr	r2, [r7, #24]
 801fa92:	429a      	cmp	r2, r3
 801fa94:	d305      	bcc.n	801faa2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801fa96:	697b      	ldr	r3, [r7, #20]
 801fa98:	685b      	ldr	r3, [r3, #4]
 801fa9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801fa9c:	69ba      	ldr	r2, [r7, #24]
 801fa9e:	429a      	cmp	r2, r3
 801faa0:	d903      	bls.n	801faaa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 801faa2:	2301      	movs	r3, #1
 801faa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801faa8:	e113      	b.n	801fcd2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801faaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801faac:	2200      	movs	r2, #0
 801faae:	60bb      	str	r3, [r7, #8]
 801fab0:	60fa      	str	r2, [r7, #12]
 801fab2:	697b      	ldr	r3, [r7, #20]
 801fab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fab6:	4a84      	ldr	r2, [pc, #528]	; (801fcc8 <UART_SetConfig+0x5c4>)
 801fab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fabc:	b29b      	uxth	r3, r3
 801fabe:	2200      	movs	r2, #0
 801fac0:	603b      	str	r3, [r7, #0]
 801fac2:	607a      	str	r2, [r7, #4]
 801fac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fac8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801facc:	f7e1 f8e4 	bl	8000c98 <__aeabi_uldivmod>
 801fad0:	4602      	mov	r2, r0
 801fad2:	460b      	mov	r3, r1
 801fad4:	4610      	mov	r0, r2
 801fad6:	4619      	mov	r1, r3
 801fad8:	f04f 0200 	mov.w	r2, #0
 801fadc:	f04f 0300 	mov.w	r3, #0
 801fae0:	020b      	lsls	r3, r1, #8
 801fae2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801fae6:	0202      	lsls	r2, r0, #8
 801fae8:	6979      	ldr	r1, [r7, #20]
 801faea:	6849      	ldr	r1, [r1, #4]
 801faec:	0849      	lsrs	r1, r1, #1
 801faee:	2000      	movs	r0, #0
 801faf0:	460c      	mov	r4, r1
 801faf2:	4605      	mov	r5, r0
 801faf4:	eb12 0804 	adds.w	r8, r2, r4
 801faf8:	eb43 0905 	adc.w	r9, r3, r5
 801fafc:	697b      	ldr	r3, [r7, #20]
 801fafe:	685b      	ldr	r3, [r3, #4]
 801fb00:	2200      	movs	r2, #0
 801fb02:	469a      	mov	sl, r3
 801fb04:	4693      	mov	fp, r2
 801fb06:	4652      	mov	r2, sl
 801fb08:	465b      	mov	r3, fp
 801fb0a:	4640      	mov	r0, r8
 801fb0c:	4649      	mov	r1, r9
 801fb0e:	f7e1 f8c3 	bl	8000c98 <__aeabi_uldivmod>
 801fb12:	4602      	mov	r2, r0
 801fb14:	460b      	mov	r3, r1
 801fb16:	4613      	mov	r3, r2
 801fb18:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801fb1a:	6a3b      	ldr	r3, [r7, #32]
 801fb1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801fb20:	d308      	bcc.n	801fb34 <UART_SetConfig+0x430>
 801fb22:	6a3b      	ldr	r3, [r7, #32]
 801fb24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801fb28:	d204      	bcs.n	801fb34 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 801fb2a:	697b      	ldr	r3, [r7, #20]
 801fb2c:	681b      	ldr	r3, [r3, #0]
 801fb2e:	6a3a      	ldr	r2, [r7, #32]
 801fb30:	60da      	str	r2, [r3, #12]
 801fb32:	e0ce      	b.n	801fcd2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 801fb34:	2301      	movs	r3, #1
 801fb36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801fb3a:	e0ca      	b.n	801fcd2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801fb3c:	697b      	ldr	r3, [r7, #20]
 801fb3e:	69db      	ldr	r3, [r3, #28]
 801fb40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801fb44:	d166      	bne.n	801fc14 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 801fb46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fb4a:	2b08      	cmp	r3, #8
 801fb4c:	d827      	bhi.n	801fb9e <UART_SetConfig+0x49a>
 801fb4e:	a201      	add	r2, pc, #4	; (adr r2, 801fb54 <UART_SetConfig+0x450>)
 801fb50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fb54:	0801fb79 	.word	0x0801fb79
 801fb58:	0801fb81 	.word	0x0801fb81
 801fb5c:	0801fb89 	.word	0x0801fb89
 801fb60:	0801fb9f 	.word	0x0801fb9f
 801fb64:	0801fb8f 	.word	0x0801fb8f
 801fb68:	0801fb9f 	.word	0x0801fb9f
 801fb6c:	0801fb9f 	.word	0x0801fb9f
 801fb70:	0801fb9f 	.word	0x0801fb9f
 801fb74:	0801fb97 	.word	0x0801fb97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801fb78:	f7fd f818 	bl	801cbac <HAL_RCC_GetPCLK1Freq>
 801fb7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fb7e:	e014      	b.n	801fbaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801fb80:	f7fd f82a 	bl	801cbd8 <HAL_RCC_GetPCLK2Freq>
 801fb84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fb86:	e010      	b.n	801fbaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801fb88:	4b4e      	ldr	r3, [pc, #312]	; (801fcc4 <UART_SetConfig+0x5c0>)
 801fb8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fb8c:	e00d      	b.n	801fbaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801fb8e:	f7fc ffa1 	bl	801cad4 <HAL_RCC_GetSysClockFreq>
 801fb92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fb94:	e009      	b.n	801fbaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801fb96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801fb9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fb9c:	e005      	b.n	801fbaa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801fb9e:	2300      	movs	r3, #0
 801fba0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801fba2:	2301      	movs	r3, #1
 801fba4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801fba8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801fbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbac:	2b00      	cmp	r3, #0
 801fbae:	f000 8090 	beq.w	801fcd2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801fbb2:	697b      	ldr	r3, [r7, #20]
 801fbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fbb6:	4a44      	ldr	r2, [pc, #272]	; (801fcc8 <UART_SetConfig+0x5c4>)
 801fbb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fbbc:	461a      	mov	r2, r3
 801fbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbc0:	fbb3 f3f2 	udiv	r3, r3, r2
 801fbc4:	005a      	lsls	r2, r3, #1
 801fbc6:	697b      	ldr	r3, [r7, #20]
 801fbc8:	685b      	ldr	r3, [r3, #4]
 801fbca:	085b      	lsrs	r3, r3, #1
 801fbcc:	441a      	add	r2, r3
 801fbce:	697b      	ldr	r3, [r7, #20]
 801fbd0:	685b      	ldr	r3, [r3, #4]
 801fbd2:	fbb2 f3f3 	udiv	r3, r2, r3
 801fbd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801fbd8:	6a3b      	ldr	r3, [r7, #32]
 801fbda:	2b0f      	cmp	r3, #15
 801fbdc:	d916      	bls.n	801fc0c <UART_SetConfig+0x508>
 801fbde:	6a3b      	ldr	r3, [r7, #32]
 801fbe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fbe4:	d212      	bcs.n	801fc0c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801fbe6:	6a3b      	ldr	r3, [r7, #32]
 801fbe8:	b29b      	uxth	r3, r3
 801fbea:	f023 030f 	bic.w	r3, r3, #15
 801fbee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801fbf0:	6a3b      	ldr	r3, [r7, #32]
 801fbf2:	085b      	lsrs	r3, r3, #1
 801fbf4:	b29b      	uxth	r3, r3
 801fbf6:	f003 0307 	and.w	r3, r3, #7
 801fbfa:	b29a      	uxth	r2, r3
 801fbfc:	8bfb      	ldrh	r3, [r7, #30]
 801fbfe:	4313      	orrs	r3, r2
 801fc00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801fc02:	697b      	ldr	r3, [r7, #20]
 801fc04:	681b      	ldr	r3, [r3, #0]
 801fc06:	8bfa      	ldrh	r2, [r7, #30]
 801fc08:	60da      	str	r2, [r3, #12]
 801fc0a:	e062      	b.n	801fcd2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 801fc0c:	2301      	movs	r3, #1
 801fc0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801fc12:	e05e      	b.n	801fcd2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801fc14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fc18:	2b08      	cmp	r3, #8
 801fc1a:	d828      	bhi.n	801fc6e <UART_SetConfig+0x56a>
 801fc1c:	a201      	add	r2, pc, #4	; (adr r2, 801fc24 <UART_SetConfig+0x520>)
 801fc1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fc22:	bf00      	nop
 801fc24:	0801fc49 	.word	0x0801fc49
 801fc28:	0801fc51 	.word	0x0801fc51
 801fc2c:	0801fc59 	.word	0x0801fc59
 801fc30:	0801fc6f 	.word	0x0801fc6f
 801fc34:	0801fc5f 	.word	0x0801fc5f
 801fc38:	0801fc6f 	.word	0x0801fc6f
 801fc3c:	0801fc6f 	.word	0x0801fc6f
 801fc40:	0801fc6f 	.word	0x0801fc6f
 801fc44:	0801fc67 	.word	0x0801fc67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801fc48:	f7fc ffb0 	bl	801cbac <HAL_RCC_GetPCLK1Freq>
 801fc4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fc4e:	e014      	b.n	801fc7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801fc50:	f7fc ffc2 	bl	801cbd8 <HAL_RCC_GetPCLK2Freq>
 801fc54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fc56:	e010      	b.n	801fc7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801fc58:	4b1a      	ldr	r3, [pc, #104]	; (801fcc4 <UART_SetConfig+0x5c0>)
 801fc5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fc5c:	e00d      	b.n	801fc7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801fc5e:	f7fc ff39 	bl	801cad4 <HAL_RCC_GetSysClockFreq>
 801fc62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fc64:	e009      	b.n	801fc7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801fc66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801fc6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fc6c:	e005      	b.n	801fc7a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801fc6e:	2300      	movs	r3, #0
 801fc70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801fc72:	2301      	movs	r3, #1
 801fc74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801fc78:	bf00      	nop
    }

    if (pclk != 0U)
 801fc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc7c:	2b00      	cmp	r3, #0
 801fc7e:	d028      	beq.n	801fcd2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801fc80:	697b      	ldr	r3, [r7, #20]
 801fc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc84:	4a10      	ldr	r2, [pc, #64]	; (801fcc8 <UART_SetConfig+0x5c4>)
 801fc86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fc8a:	461a      	mov	r2, r3
 801fc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc8e:	fbb3 f2f2 	udiv	r2, r3, r2
 801fc92:	697b      	ldr	r3, [r7, #20]
 801fc94:	685b      	ldr	r3, [r3, #4]
 801fc96:	085b      	lsrs	r3, r3, #1
 801fc98:	441a      	add	r2, r3
 801fc9a:	697b      	ldr	r3, [r7, #20]
 801fc9c:	685b      	ldr	r3, [r3, #4]
 801fc9e:	fbb2 f3f3 	udiv	r3, r2, r3
 801fca2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801fca4:	6a3b      	ldr	r3, [r7, #32]
 801fca6:	2b0f      	cmp	r3, #15
 801fca8:	d910      	bls.n	801fccc <UART_SetConfig+0x5c8>
 801fcaa:	6a3b      	ldr	r3, [r7, #32]
 801fcac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fcb0:	d20c      	bcs.n	801fccc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801fcb2:	6a3b      	ldr	r3, [r7, #32]
 801fcb4:	b29a      	uxth	r2, r3
 801fcb6:	697b      	ldr	r3, [r7, #20]
 801fcb8:	681b      	ldr	r3, [r3, #0]
 801fcba:	60da      	str	r2, [r3, #12]
 801fcbc:	e009      	b.n	801fcd2 <UART_SetConfig+0x5ce>
 801fcbe:	bf00      	nop
 801fcc0:	40008000 	.word	0x40008000
 801fcc4:	00f42400 	.word	0x00f42400
 801fcc8:	080236f0 	.word	0x080236f0
      }
      else
      {
        ret = HAL_ERROR;
 801fccc:	2301      	movs	r3, #1
 801fcce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801fcd2:	697b      	ldr	r3, [r7, #20]
 801fcd4:	2201      	movs	r2, #1
 801fcd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801fcda:	697b      	ldr	r3, [r7, #20]
 801fcdc:	2201      	movs	r2, #1
 801fcde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801fce2:	697b      	ldr	r3, [r7, #20]
 801fce4:	2200      	movs	r2, #0
 801fce6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801fce8:	697b      	ldr	r3, [r7, #20]
 801fcea:	2200      	movs	r2, #0
 801fcec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801fcee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801fcf2:	4618      	mov	r0, r3
 801fcf4:	3730      	adds	r7, #48	; 0x30
 801fcf6:	46bd      	mov	sp, r7
 801fcf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801fcfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801fcfc:	b480      	push	{r7}
 801fcfe:	b083      	sub	sp, #12
 801fd00:	af00      	add	r7, sp, #0
 801fd02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801fd04:	687b      	ldr	r3, [r7, #4]
 801fd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fd08:	f003 0301 	and.w	r3, r3, #1
 801fd0c:	2b00      	cmp	r3, #0
 801fd0e:	d00a      	beq.n	801fd26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801fd10:	687b      	ldr	r3, [r7, #4]
 801fd12:	681b      	ldr	r3, [r3, #0]
 801fd14:	685b      	ldr	r3, [r3, #4]
 801fd16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801fd1a:	687b      	ldr	r3, [r7, #4]
 801fd1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fd1e:	687b      	ldr	r3, [r7, #4]
 801fd20:	681b      	ldr	r3, [r3, #0]
 801fd22:	430a      	orrs	r2, r1
 801fd24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801fd26:	687b      	ldr	r3, [r7, #4]
 801fd28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fd2a:	f003 0302 	and.w	r3, r3, #2
 801fd2e:	2b00      	cmp	r3, #0
 801fd30:	d00a      	beq.n	801fd48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801fd32:	687b      	ldr	r3, [r7, #4]
 801fd34:	681b      	ldr	r3, [r3, #0]
 801fd36:	685b      	ldr	r3, [r3, #4]
 801fd38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801fd3c:	687b      	ldr	r3, [r7, #4]
 801fd3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801fd40:	687b      	ldr	r3, [r7, #4]
 801fd42:	681b      	ldr	r3, [r3, #0]
 801fd44:	430a      	orrs	r2, r1
 801fd46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801fd48:	687b      	ldr	r3, [r7, #4]
 801fd4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fd4c:	f003 0304 	and.w	r3, r3, #4
 801fd50:	2b00      	cmp	r3, #0
 801fd52:	d00a      	beq.n	801fd6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801fd54:	687b      	ldr	r3, [r7, #4]
 801fd56:	681b      	ldr	r3, [r3, #0]
 801fd58:	685b      	ldr	r3, [r3, #4]
 801fd5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801fd5e:	687b      	ldr	r3, [r7, #4]
 801fd60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801fd62:	687b      	ldr	r3, [r7, #4]
 801fd64:	681b      	ldr	r3, [r3, #0]
 801fd66:	430a      	orrs	r2, r1
 801fd68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801fd6a:	687b      	ldr	r3, [r7, #4]
 801fd6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fd6e:	f003 0308 	and.w	r3, r3, #8
 801fd72:	2b00      	cmp	r3, #0
 801fd74:	d00a      	beq.n	801fd8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801fd76:	687b      	ldr	r3, [r7, #4]
 801fd78:	681b      	ldr	r3, [r3, #0]
 801fd7a:	685b      	ldr	r3, [r3, #4]
 801fd7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801fd80:	687b      	ldr	r3, [r7, #4]
 801fd82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801fd84:	687b      	ldr	r3, [r7, #4]
 801fd86:	681b      	ldr	r3, [r3, #0]
 801fd88:	430a      	orrs	r2, r1
 801fd8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801fd8c:	687b      	ldr	r3, [r7, #4]
 801fd8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fd90:	f003 0310 	and.w	r3, r3, #16
 801fd94:	2b00      	cmp	r3, #0
 801fd96:	d00a      	beq.n	801fdae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801fd98:	687b      	ldr	r3, [r7, #4]
 801fd9a:	681b      	ldr	r3, [r3, #0]
 801fd9c:	689b      	ldr	r3, [r3, #8]
 801fd9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801fda2:	687b      	ldr	r3, [r7, #4]
 801fda4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801fda6:	687b      	ldr	r3, [r7, #4]
 801fda8:	681b      	ldr	r3, [r3, #0]
 801fdaa:	430a      	orrs	r2, r1
 801fdac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801fdae:	687b      	ldr	r3, [r7, #4]
 801fdb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fdb2:	f003 0320 	and.w	r3, r3, #32
 801fdb6:	2b00      	cmp	r3, #0
 801fdb8:	d00a      	beq.n	801fdd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801fdba:	687b      	ldr	r3, [r7, #4]
 801fdbc:	681b      	ldr	r3, [r3, #0]
 801fdbe:	689b      	ldr	r3, [r3, #8]
 801fdc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801fdc4:	687b      	ldr	r3, [r7, #4]
 801fdc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801fdc8:	687b      	ldr	r3, [r7, #4]
 801fdca:	681b      	ldr	r3, [r3, #0]
 801fdcc:	430a      	orrs	r2, r1
 801fdce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801fdd0:	687b      	ldr	r3, [r7, #4]
 801fdd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fdd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fdd8:	2b00      	cmp	r3, #0
 801fdda:	d01a      	beq.n	801fe12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801fddc:	687b      	ldr	r3, [r7, #4]
 801fdde:	681b      	ldr	r3, [r3, #0]
 801fde0:	685b      	ldr	r3, [r3, #4]
 801fde2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801fde6:	687b      	ldr	r3, [r7, #4]
 801fde8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801fdea:	687b      	ldr	r3, [r7, #4]
 801fdec:	681b      	ldr	r3, [r3, #0]
 801fdee:	430a      	orrs	r2, r1
 801fdf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801fdf2:	687b      	ldr	r3, [r7, #4]
 801fdf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fdf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801fdfa:	d10a      	bne.n	801fe12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801fdfc:	687b      	ldr	r3, [r7, #4]
 801fdfe:	681b      	ldr	r3, [r3, #0]
 801fe00:	685b      	ldr	r3, [r3, #4]
 801fe02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801fe06:	687b      	ldr	r3, [r7, #4]
 801fe08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801fe0a:	687b      	ldr	r3, [r7, #4]
 801fe0c:	681b      	ldr	r3, [r3, #0]
 801fe0e:	430a      	orrs	r2, r1
 801fe10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801fe12:	687b      	ldr	r3, [r7, #4]
 801fe14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fe1a:	2b00      	cmp	r3, #0
 801fe1c:	d00a      	beq.n	801fe34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801fe1e:	687b      	ldr	r3, [r7, #4]
 801fe20:	681b      	ldr	r3, [r3, #0]
 801fe22:	685b      	ldr	r3, [r3, #4]
 801fe24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801fe28:	687b      	ldr	r3, [r7, #4]
 801fe2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fe2c:	687b      	ldr	r3, [r7, #4]
 801fe2e:	681b      	ldr	r3, [r3, #0]
 801fe30:	430a      	orrs	r2, r1
 801fe32:	605a      	str	r2, [r3, #4]
  }
}
 801fe34:	bf00      	nop
 801fe36:	370c      	adds	r7, #12
 801fe38:	46bd      	mov	sp, r7
 801fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe3e:	4770      	bx	lr

0801fe40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801fe40:	b580      	push	{r7, lr}
 801fe42:	b086      	sub	sp, #24
 801fe44:	af02      	add	r7, sp, #8
 801fe46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	2200      	movs	r2, #0
 801fe4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801fe50:	f7f8 ff58 	bl	8018d04 <HAL_GetTick>
 801fe54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801fe56:	687b      	ldr	r3, [r7, #4]
 801fe58:	681b      	ldr	r3, [r3, #0]
 801fe5a:	681b      	ldr	r3, [r3, #0]
 801fe5c:	f003 0308 	and.w	r3, r3, #8
 801fe60:	2b08      	cmp	r3, #8
 801fe62:	d10e      	bne.n	801fe82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801fe64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801fe68:	9300      	str	r3, [sp, #0]
 801fe6a:	68fb      	ldr	r3, [r7, #12]
 801fe6c:	2200      	movs	r2, #0
 801fe6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801fe72:	6878      	ldr	r0, [r7, #4]
 801fe74:	f000 f82f 	bl	801fed6 <UART_WaitOnFlagUntilTimeout>
 801fe78:	4603      	mov	r3, r0
 801fe7a:	2b00      	cmp	r3, #0
 801fe7c:	d001      	beq.n	801fe82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801fe7e:	2303      	movs	r3, #3
 801fe80:	e025      	b.n	801fece <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801fe82:	687b      	ldr	r3, [r7, #4]
 801fe84:	681b      	ldr	r3, [r3, #0]
 801fe86:	681b      	ldr	r3, [r3, #0]
 801fe88:	f003 0304 	and.w	r3, r3, #4
 801fe8c:	2b04      	cmp	r3, #4
 801fe8e:	d10e      	bne.n	801feae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801fe90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801fe94:	9300      	str	r3, [sp, #0]
 801fe96:	68fb      	ldr	r3, [r7, #12]
 801fe98:	2200      	movs	r2, #0
 801fe9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801fe9e:	6878      	ldr	r0, [r7, #4]
 801fea0:	f000 f819 	bl	801fed6 <UART_WaitOnFlagUntilTimeout>
 801fea4:	4603      	mov	r3, r0
 801fea6:	2b00      	cmp	r3, #0
 801fea8:	d001      	beq.n	801feae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801feaa:	2303      	movs	r3, #3
 801feac:	e00f      	b.n	801fece <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801feae:	687b      	ldr	r3, [r7, #4]
 801feb0:	2220      	movs	r2, #32
 801feb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801feb6:	687b      	ldr	r3, [r7, #4]
 801feb8:	2220      	movs	r2, #32
 801feba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801febe:	687b      	ldr	r3, [r7, #4]
 801fec0:	2200      	movs	r2, #0
 801fec2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801fec4:	687b      	ldr	r3, [r7, #4]
 801fec6:	2200      	movs	r2, #0
 801fec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801fecc:	2300      	movs	r3, #0
}
 801fece:	4618      	mov	r0, r3
 801fed0:	3710      	adds	r7, #16
 801fed2:	46bd      	mov	sp, r7
 801fed4:	bd80      	pop	{r7, pc}

0801fed6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801fed6:	b580      	push	{r7, lr}
 801fed8:	b09c      	sub	sp, #112	; 0x70
 801feda:	af00      	add	r7, sp, #0
 801fedc:	60f8      	str	r0, [r7, #12]
 801fede:	60b9      	str	r1, [r7, #8]
 801fee0:	603b      	str	r3, [r7, #0]
 801fee2:	4613      	mov	r3, r2
 801fee4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801fee6:	e0a9      	b.n	802003c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801fee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801feea:	f1b3 3fff 	cmp.w	r3, #4294967295
 801feee:	f000 80a5 	beq.w	802003c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801fef2:	f7f8 ff07 	bl	8018d04 <HAL_GetTick>
 801fef6:	4602      	mov	r2, r0
 801fef8:	683b      	ldr	r3, [r7, #0]
 801fefa:	1ad3      	subs	r3, r2, r3
 801fefc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801fefe:	429a      	cmp	r2, r3
 801ff00:	d302      	bcc.n	801ff08 <UART_WaitOnFlagUntilTimeout+0x32>
 801ff02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ff04:	2b00      	cmp	r3, #0
 801ff06:	d140      	bne.n	801ff8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801ff08:	68fb      	ldr	r3, [r7, #12]
 801ff0a:	681b      	ldr	r3, [r3, #0]
 801ff0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ff0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ff10:	e853 3f00 	ldrex	r3, [r3]
 801ff14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801ff16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ff18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801ff1c:	667b      	str	r3, [r7, #100]	; 0x64
 801ff1e:	68fb      	ldr	r3, [r7, #12]
 801ff20:	681b      	ldr	r3, [r3, #0]
 801ff22:	461a      	mov	r2, r3
 801ff24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ff26:	65fb      	str	r3, [r7, #92]	; 0x5c
 801ff28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ff2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801ff2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ff2e:	e841 2300 	strex	r3, r2, [r1]
 801ff32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801ff34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ff36:	2b00      	cmp	r3, #0
 801ff38:	d1e6      	bne.n	801ff08 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ff3a:	68fb      	ldr	r3, [r7, #12]
 801ff3c:	681b      	ldr	r3, [r3, #0]
 801ff3e:	3308      	adds	r3, #8
 801ff40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ff42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ff44:	e853 3f00 	ldrex	r3, [r3]
 801ff48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801ff4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ff4c:	f023 0301 	bic.w	r3, r3, #1
 801ff50:	663b      	str	r3, [r7, #96]	; 0x60
 801ff52:	68fb      	ldr	r3, [r7, #12]
 801ff54:	681b      	ldr	r3, [r3, #0]
 801ff56:	3308      	adds	r3, #8
 801ff58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801ff5a:	64ba      	str	r2, [r7, #72]	; 0x48
 801ff5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ff5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801ff60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ff62:	e841 2300 	strex	r3, r2, [r1]
 801ff66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801ff68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ff6a:	2b00      	cmp	r3, #0
 801ff6c:	d1e5      	bne.n	801ff3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801ff6e:	68fb      	ldr	r3, [r7, #12]
 801ff70:	2220      	movs	r2, #32
 801ff72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801ff76:	68fb      	ldr	r3, [r7, #12]
 801ff78:	2220      	movs	r2, #32
 801ff7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801ff7e:	68fb      	ldr	r3, [r7, #12]
 801ff80:	2200      	movs	r2, #0
 801ff82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801ff86:	2303      	movs	r3, #3
 801ff88:	e069      	b.n	802005e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801ff8a:	68fb      	ldr	r3, [r7, #12]
 801ff8c:	681b      	ldr	r3, [r3, #0]
 801ff8e:	681b      	ldr	r3, [r3, #0]
 801ff90:	f003 0304 	and.w	r3, r3, #4
 801ff94:	2b00      	cmp	r3, #0
 801ff96:	d051      	beq.n	802003c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801ff98:	68fb      	ldr	r3, [r7, #12]
 801ff9a:	681b      	ldr	r3, [r3, #0]
 801ff9c:	69db      	ldr	r3, [r3, #28]
 801ff9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ffa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ffa6:	d149      	bne.n	802003c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801ffa8:	68fb      	ldr	r3, [r7, #12]
 801ffaa:	681b      	ldr	r3, [r3, #0]
 801ffac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ffb0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801ffb2:	68fb      	ldr	r3, [r7, #12]
 801ffb4:	681b      	ldr	r3, [r3, #0]
 801ffb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ffb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ffba:	e853 3f00 	ldrex	r3, [r3]
 801ffbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801ffc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ffc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801ffc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 801ffc8:	68fb      	ldr	r3, [r7, #12]
 801ffca:	681b      	ldr	r3, [r3, #0]
 801ffcc:	461a      	mov	r2, r3
 801ffce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ffd0:	637b      	str	r3, [r7, #52]	; 0x34
 801ffd2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ffd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ffd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ffd8:	e841 2300 	strex	r3, r2, [r1]
 801ffdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801ffde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ffe0:	2b00      	cmp	r3, #0
 801ffe2:	d1e6      	bne.n	801ffb2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ffe4:	68fb      	ldr	r3, [r7, #12]
 801ffe6:	681b      	ldr	r3, [r3, #0]
 801ffe8:	3308      	adds	r3, #8
 801ffea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ffec:	697b      	ldr	r3, [r7, #20]
 801ffee:	e853 3f00 	ldrex	r3, [r3]
 801fff2:	613b      	str	r3, [r7, #16]
   return(result);
 801fff4:	693b      	ldr	r3, [r7, #16]
 801fff6:	f023 0301 	bic.w	r3, r3, #1
 801fffa:	66bb      	str	r3, [r7, #104]	; 0x68
 801fffc:	68fb      	ldr	r3, [r7, #12]
 801fffe:	681b      	ldr	r3, [r3, #0]
 8020000:	3308      	adds	r3, #8
 8020002:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8020004:	623a      	str	r2, [r7, #32]
 8020006:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020008:	69f9      	ldr	r1, [r7, #28]
 802000a:	6a3a      	ldr	r2, [r7, #32]
 802000c:	e841 2300 	strex	r3, r2, [r1]
 8020010:	61bb      	str	r3, [r7, #24]
   return(result);
 8020012:	69bb      	ldr	r3, [r7, #24]
 8020014:	2b00      	cmp	r3, #0
 8020016:	d1e5      	bne.n	801ffe4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8020018:	68fb      	ldr	r3, [r7, #12]
 802001a:	2220      	movs	r2, #32
 802001c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8020020:	68fb      	ldr	r3, [r7, #12]
 8020022:	2220      	movs	r2, #32
 8020024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8020028:	68fb      	ldr	r3, [r7, #12]
 802002a:	2220      	movs	r2, #32
 802002c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8020030:	68fb      	ldr	r3, [r7, #12]
 8020032:	2200      	movs	r2, #0
 8020034:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8020038:	2303      	movs	r3, #3
 802003a:	e010      	b.n	802005e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802003c:	68fb      	ldr	r3, [r7, #12]
 802003e:	681b      	ldr	r3, [r3, #0]
 8020040:	69da      	ldr	r2, [r3, #28]
 8020042:	68bb      	ldr	r3, [r7, #8]
 8020044:	4013      	ands	r3, r2
 8020046:	68ba      	ldr	r2, [r7, #8]
 8020048:	429a      	cmp	r2, r3
 802004a:	bf0c      	ite	eq
 802004c:	2301      	moveq	r3, #1
 802004e:	2300      	movne	r3, #0
 8020050:	b2db      	uxtb	r3, r3
 8020052:	461a      	mov	r2, r3
 8020054:	79fb      	ldrb	r3, [r7, #7]
 8020056:	429a      	cmp	r2, r3
 8020058:	f43f af46 	beq.w	801fee8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802005c:	2300      	movs	r3, #0
}
 802005e:	4618      	mov	r0, r3
 8020060:	3770      	adds	r7, #112	; 0x70
 8020062:	46bd      	mov	sp, r7
 8020064:	bd80      	pop	{r7, pc}

08020066 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8020066:	b480      	push	{r7}
 8020068:	b085      	sub	sp, #20
 802006a:	af00      	add	r7, sp, #0
 802006c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 802006e:	687b      	ldr	r3, [r7, #4]
 8020070:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8020074:	2b01      	cmp	r3, #1
 8020076:	d101      	bne.n	802007c <HAL_UARTEx_DisableFifoMode+0x16>
 8020078:	2302      	movs	r3, #2
 802007a:	e027      	b.n	80200cc <HAL_UARTEx_DisableFifoMode+0x66>
 802007c:	687b      	ldr	r3, [r7, #4]
 802007e:	2201      	movs	r2, #1
 8020080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8020084:	687b      	ldr	r3, [r7, #4]
 8020086:	2224      	movs	r2, #36	; 0x24
 8020088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802008c:	687b      	ldr	r3, [r7, #4]
 802008e:	681b      	ldr	r3, [r3, #0]
 8020090:	681b      	ldr	r3, [r3, #0]
 8020092:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020094:	687b      	ldr	r3, [r7, #4]
 8020096:	681b      	ldr	r3, [r3, #0]
 8020098:	681a      	ldr	r2, [r3, #0]
 802009a:	687b      	ldr	r3, [r7, #4]
 802009c:	681b      	ldr	r3, [r3, #0]
 802009e:	f022 0201 	bic.w	r2, r2, #1
 80200a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80200a4:	68fb      	ldr	r3, [r7, #12]
 80200a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80200aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80200ac:	687b      	ldr	r3, [r7, #4]
 80200ae:	2200      	movs	r2, #0
 80200b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80200b2:	687b      	ldr	r3, [r7, #4]
 80200b4:	681b      	ldr	r3, [r3, #0]
 80200b6:	68fa      	ldr	r2, [r7, #12]
 80200b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80200ba:	687b      	ldr	r3, [r7, #4]
 80200bc:	2220      	movs	r2, #32
 80200be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80200c2:	687b      	ldr	r3, [r7, #4]
 80200c4:	2200      	movs	r2, #0
 80200c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80200ca:	2300      	movs	r3, #0
}
 80200cc:	4618      	mov	r0, r3
 80200ce:	3714      	adds	r7, #20
 80200d0:	46bd      	mov	sp, r7
 80200d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200d6:	4770      	bx	lr

080200d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80200d8:	b580      	push	{r7, lr}
 80200da:	b084      	sub	sp, #16
 80200dc:	af00      	add	r7, sp, #0
 80200de:	6078      	str	r0, [r7, #4]
 80200e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80200e2:	687b      	ldr	r3, [r7, #4]
 80200e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80200e8:	2b01      	cmp	r3, #1
 80200ea:	d101      	bne.n	80200f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80200ec:	2302      	movs	r3, #2
 80200ee:	e02d      	b.n	802014c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80200f0:	687b      	ldr	r3, [r7, #4]
 80200f2:	2201      	movs	r2, #1
 80200f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80200f8:	687b      	ldr	r3, [r7, #4]
 80200fa:	2224      	movs	r2, #36	; 0x24
 80200fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8020100:	687b      	ldr	r3, [r7, #4]
 8020102:	681b      	ldr	r3, [r3, #0]
 8020104:	681b      	ldr	r3, [r3, #0]
 8020106:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020108:	687b      	ldr	r3, [r7, #4]
 802010a:	681b      	ldr	r3, [r3, #0]
 802010c:	681a      	ldr	r2, [r3, #0]
 802010e:	687b      	ldr	r3, [r7, #4]
 8020110:	681b      	ldr	r3, [r3, #0]
 8020112:	f022 0201 	bic.w	r2, r2, #1
 8020116:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8020118:	687b      	ldr	r3, [r7, #4]
 802011a:	681b      	ldr	r3, [r3, #0]
 802011c:	689b      	ldr	r3, [r3, #8]
 802011e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8020122:	687b      	ldr	r3, [r7, #4]
 8020124:	681b      	ldr	r3, [r3, #0]
 8020126:	683a      	ldr	r2, [r7, #0]
 8020128:	430a      	orrs	r2, r1
 802012a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802012c:	6878      	ldr	r0, [r7, #4]
 802012e:	f000 f84f 	bl	80201d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020132:	687b      	ldr	r3, [r7, #4]
 8020134:	681b      	ldr	r3, [r3, #0]
 8020136:	68fa      	ldr	r2, [r7, #12]
 8020138:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802013a:	687b      	ldr	r3, [r7, #4]
 802013c:	2220      	movs	r2, #32
 802013e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020142:	687b      	ldr	r3, [r7, #4]
 8020144:	2200      	movs	r2, #0
 8020146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802014a:	2300      	movs	r3, #0
}
 802014c:	4618      	mov	r0, r3
 802014e:	3710      	adds	r7, #16
 8020150:	46bd      	mov	sp, r7
 8020152:	bd80      	pop	{r7, pc}

08020154 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8020154:	b580      	push	{r7, lr}
 8020156:	b084      	sub	sp, #16
 8020158:	af00      	add	r7, sp, #0
 802015a:	6078      	str	r0, [r7, #4]
 802015c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802015e:	687b      	ldr	r3, [r7, #4]
 8020160:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8020164:	2b01      	cmp	r3, #1
 8020166:	d101      	bne.n	802016c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8020168:	2302      	movs	r3, #2
 802016a:	e02d      	b.n	80201c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 802016c:	687b      	ldr	r3, [r7, #4]
 802016e:	2201      	movs	r2, #1
 8020170:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8020174:	687b      	ldr	r3, [r7, #4]
 8020176:	2224      	movs	r2, #36	; 0x24
 8020178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802017c:	687b      	ldr	r3, [r7, #4]
 802017e:	681b      	ldr	r3, [r3, #0]
 8020180:	681b      	ldr	r3, [r3, #0]
 8020182:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020184:	687b      	ldr	r3, [r7, #4]
 8020186:	681b      	ldr	r3, [r3, #0]
 8020188:	681a      	ldr	r2, [r3, #0]
 802018a:	687b      	ldr	r3, [r7, #4]
 802018c:	681b      	ldr	r3, [r3, #0]
 802018e:	f022 0201 	bic.w	r2, r2, #1
 8020192:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8020194:	687b      	ldr	r3, [r7, #4]
 8020196:	681b      	ldr	r3, [r3, #0]
 8020198:	689b      	ldr	r3, [r3, #8]
 802019a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 802019e:	687b      	ldr	r3, [r7, #4]
 80201a0:	681b      	ldr	r3, [r3, #0]
 80201a2:	683a      	ldr	r2, [r7, #0]
 80201a4:	430a      	orrs	r2, r1
 80201a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80201a8:	6878      	ldr	r0, [r7, #4]
 80201aa:	f000 f811 	bl	80201d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80201ae:	687b      	ldr	r3, [r7, #4]
 80201b0:	681b      	ldr	r3, [r3, #0]
 80201b2:	68fa      	ldr	r2, [r7, #12]
 80201b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80201b6:	687b      	ldr	r3, [r7, #4]
 80201b8:	2220      	movs	r2, #32
 80201ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80201be:	687b      	ldr	r3, [r7, #4]
 80201c0:	2200      	movs	r2, #0
 80201c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80201c6:	2300      	movs	r3, #0
}
 80201c8:	4618      	mov	r0, r3
 80201ca:	3710      	adds	r7, #16
 80201cc:	46bd      	mov	sp, r7
 80201ce:	bd80      	pop	{r7, pc}

080201d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80201d0:	b480      	push	{r7}
 80201d2:	b085      	sub	sp, #20
 80201d4:	af00      	add	r7, sp, #0
 80201d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80201d8:	687b      	ldr	r3, [r7, #4]
 80201da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80201dc:	2b00      	cmp	r3, #0
 80201de:	d108      	bne.n	80201f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80201e0:	687b      	ldr	r3, [r7, #4]
 80201e2:	2201      	movs	r2, #1
 80201e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80201e8:	687b      	ldr	r3, [r7, #4]
 80201ea:	2201      	movs	r2, #1
 80201ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80201f0:	e031      	b.n	8020256 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80201f2:	2308      	movs	r3, #8
 80201f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80201f6:	2308      	movs	r3, #8
 80201f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80201fa:	687b      	ldr	r3, [r7, #4]
 80201fc:	681b      	ldr	r3, [r3, #0]
 80201fe:	689b      	ldr	r3, [r3, #8]
 8020200:	0e5b      	lsrs	r3, r3, #25
 8020202:	b2db      	uxtb	r3, r3
 8020204:	f003 0307 	and.w	r3, r3, #7
 8020208:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 802020a:	687b      	ldr	r3, [r7, #4]
 802020c:	681b      	ldr	r3, [r3, #0]
 802020e:	689b      	ldr	r3, [r3, #8]
 8020210:	0f5b      	lsrs	r3, r3, #29
 8020212:	b2db      	uxtb	r3, r3
 8020214:	f003 0307 	and.w	r3, r3, #7
 8020218:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802021a:	7bbb      	ldrb	r3, [r7, #14]
 802021c:	7b3a      	ldrb	r2, [r7, #12]
 802021e:	4911      	ldr	r1, [pc, #68]	; (8020264 <UARTEx_SetNbDataToProcess+0x94>)
 8020220:	5c8a      	ldrb	r2, [r1, r2]
 8020222:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8020226:	7b3a      	ldrb	r2, [r7, #12]
 8020228:	490f      	ldr	r1, [pc, #60]	; (8020268 <UARTEx_SetNbDataToProcess+0x98>)
 802022a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802022c:	fb93 f3f2 	sdiv	r3, r3, r2
 8020230:	b29a      	uxth	r2, r3
 8020232:	687b      	ldr	r3, [r7, #4]
 8020234:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8020238:	7bfb      	ldrb	r3, [r7, #15]
 802023a:	7b7a      	ldrb	r2, [r7, #13]
 802023c:	4909      	ldr	r1, [pc, #36]	; (8020264 <UARTEx_SetNbDataToProcess+0x94>)
 802023e:	5c8a      	ldrb	r2, [r1, r2]
 8020240:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8020244:	7b7a      	ldrb	r2, [r7, #13]
 8020246:	4908      	ldr	r1, [pc, #32]	; (8020268 <UARTEx_SetNbDataToProcess+0x98>)
 8020248:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802024a:	fb93 f3f2 	sdiv	r3, r3, r2
 802024e:	b29a      	uxth	r2, r3
 8020250:	687b      	ldr	r3, [r7, #4]
 8020252:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8020256:	bf00      	nop
 8020258:	3714      	adds	r7, #20
 802025a:	46bd      	mov	sp, r7
 802025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020260:	4770      	bx	lr
 8020262:	bf00      	nop
 8020264:	08023708 	.word	0x08023708
 8020268:	08023710 	.word	0x08023710

0802026c <__errno>:
 802026c:	4b01      	ldr	r3, [pc, #4]	; (8020274 <__errno+0x8>)
 802026e:	6818      	ldr	r0, [r3, #0]
 8020270:	4770      	bx	lr
 8020272:	bf00      	nop
 8020274:	2000002c 	.word	0x2000002c

08020278 <__libc_init_array>:
 8020278:	b570      	push	{r4, r5, r6, lr}
 802027a:	4d0d      	ldr	r5, [pc, #52]	; (80202b0 <__libc_init_array+0x38>)
 802027c:	4c0d      	ldr	r4, [pc, #52]	; (80202b4 <__libc_init_array+0x3c>)
 802027e:	1b64      	subs	r4, r4, r5
 8020280:	10a4      	asrs	r4, r4, #2
 8020282:	2600      	movs	r6, #0
 8020284:	42a6      	cmp	r6, r4
 8020286:	d109      	bne.n	802029c <__libc_init_array+0x24>
 8020288:	4d0b      	ldr	r5, [pc, #44]	; (80202b8 <__libc_init_array+0x40>)
 802028a:	4c0c      	ldr	r4, [pc, #48]	; (80202bc <__libc_init_array+0x44>)
 802028c:	f003 f8aa 	bl	80233e4 <_init>
 8020290:	1b64      	subs	r4, r4, r5
 8020292:	10a4      	asrs	r4, r4, #2
 8020294:	2600      	movs	r6, #0
 8020296:	42a6      	cmp	r6, r4
 8020298:	d105      	bne.n	80202a6 <__libc_init_array+0x2e>
 802029a:	bd70      	pop	{r4, r5, r6, pc}
 802029c:	f855 3b04 	ldr.w	r3, [r5], #4
 80202a0:	4798      	blx	r3
 80202a2:	3601      	adds	r6, #1
 80202a4:	e7ee      	b.n	8020284 <__libc_init_array+0xc>
 80202a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80202aa:	4798      	blx	r3
 80202ac:	3601      	adds	r6, #1
 80202ae:	e7f2      	b.n	8020296 <__libc_init_array+0x1e>
 80202b0:	08023b30 	.word	0x08023b30
 80202b4:	08023b30 	.word	0x08023b30
 80202b8:	08023b30 	.word	0x08023b30
 80202bc:	08023b34 	.word	0x08023b34

080202c0 <memcpy>:
 80202c0:	440a      	add	r2, r1
 80202c2:	4291      	cmp	r1, r2
 80202c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80202c8:	d100      	bne.n	80202cc <memcpy+0xc>
 80202ca:	4770      	bx	lr
 80202cc:	b510      	push	{r4, lr}
 80202ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80202d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80202d6:	4291      	cmp	r1, r2
 80202d8:	d1f9      	bne.n	80202ce <memcpy+0xe>
 80202da:	bd10      	pop	{r4, pc}

080202dc <memset>:
 80202dc:	4402      	add	r2, r0
 80202de:	4603      	mov	r3, r0
 80202e0:	4293      	cmp	r3, r2
 80202e2:	d100      	bne.n	80202e6 <memset+0xa>
 80202e4:	4770      	bx	lr
 80202e6:	f803 1b01 	strb.w	r1, [r3], #1
 80202ea:	e7f9      	b.n	80202e0 <memset+0x4>

080202ec <__cvt>:
 80202ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80202f0:	ec55 4b10 	vmov	r4, r5, d0
 80202f4:	2d00      	cmp	r5, #0
 80202f6:	460e      	mov	r6, r1
 80202f8:	4619      	mov	r1, r3
 80202fa:	462b      	mov	r3, r5
 80202fc:	bfbb      	ittet	lt
 80202fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8020302:	461d      	movlt	r5, r3
 8020304:	2300      	movge	r3, #0
 8020306:	232d      	movlt	r3, #45	; 0x2d
 8020308:	700b      	strb	r3, [r1, #0]
 802030a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802030c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8020310:	4691      	mov	r9, r2
 8020312:	f023 0820 	bic.w	r8, r3, #32
 8020316:	bfbc      	itt	lt
 8020318:	4622      	movlt	r2, r4
 802031a:	4614      	movlt	r4, r2
 802031c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8020320:	d005      	beq.n	802032e <__cvt+0x42>
 8020322:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8020326:	d100      	bne.n	802032a <__cvt+0x3e>
 8020328:	3601      	adds	r6, #1
 802032a:	2102      	movs	r1, #2
 802032c:	e000      	b.n	8020330 <__cvt+0x44>
 802032e:	2103      	movs	r1, #3
 8020330:	ab03      	add	r3, sp, #12
 8020332:	9301      	str	r3, [sp, #4]
 8020334:	ab02      	add	r3, sp, #8
 8020336:	9300      	str	r3, [sp, #0]
 8020338:	ec45 4b10 	vmov	d0, r4, r5
 802033c:	4653      	mov	r3, sl
 802033e:	4632      	mov	r2, r6
 8020340:	f000 fe2e 	bl	8020fa0 <_dtoa_r>
 8020344:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8020348:	4607      	mov	r7, r0
 802034a:	d102      	bne.n	8020352 <__cvt+0x66>
 802034c:	f019 0f01 	tst.w	r9, #1
 8020350:	d022      	beq.n	8020398 <__cvt+0xac>
 8020352:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8020356:	eb07 0906 	add.w	r9, r7, r6
 802035a:	d110      	bne.n	802037e <__cvt+0x92>
 802035c:	783b      	ldrb	r3, [r7, #0]
 802035e:	2b30      	cmp	r3, #48	; 0x30
 8020360:	d10a      	bne.n	8020378 <__cvt+0x8c>
 8020362:	2200      	movs	r2, #0
 8020364:	2300      	movs	r3, #0
 8020366:	4620      	mov	r0, r4
 8020368:	4629      	mov	r1, r5
 802036a:	f7e0 fbd5 	bl	8000b18 <__aeabi_dcmpeq>
 802036e:	b918      	cbnz	r0, 8020378 <__cvt+0x8c>
 8020370:	f1c6 0601 	rsb	r6, r6, #1
 8020374:	f8ca 6000 	str.w	r6, [sl]
 8020378:	f8da 3000 	ldr.w	r3, [sl]
 802037c:	4499      	add	r9, r3
 802037e:	2200      	movs	r2, #0
 8020380:	2300      	movs	r3, #0
 8020382:	4620      	mov	r0, r4
 8020384:	4629      	mov	r1, r5
 8020386:	f7e0 fbc7 	bl	8000b18 <__aeabi_dcmpeq>
 802038a:	b108      	cbz	r0, 8020390 <__cvt+0xa4>
 802038c:	f8cd 900c 	str.w	r9, [sp, #12]
 8020390:	2230      	movs	r2, #48	; 0x30
 8020392:	9b03      	ldr	r3, [sp, #12]
 8020394:	454b      	cmp	r3, r9
 8020396:	d307      	bcc.n	80203a8 <__cvt+0xbc>
 8020398:	9b03      	ldr	r3, [sp, #12]
 802039a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802039c:	1bdb      	subs	r3, r3, r7
 802039e:	4638      	mov	r0, r7
 80203a0:	6013      	str	r3, [r2, #0]
 80203a2:	b004      	add	sp, #16
 80203a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80203a8:	1c59      	adds	r1, r3, #1
 80203aa:	9103      	str	r1, [sp, #12]
 80203ac:	701a      	strb	r2, [r3, #0]
 80203ae:	e7f0      	b.n	8020392 <__cvt+0xa6>

080203b0 <__exponent>:
 80203b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80203b2:	4603      	mov	r3, r0
 80203b4:	2900      	cmp	r1, #0
 80203b6:	bfb8      	it	lt
 80203b8:	4249      	neglt	r1, r1
 80203ba:	f803 2b02 	strb.w	r2, [r3], #2
 80203be:	bfb4      	ite	lt
 80203c0:	222d      	movlt	r2, #45	; 0x2d
 80203c2:	222b      	movge	r2, #43	; 0x2b
 80203c4:	2909      	cmp	r1, #9
 80203c6:	7042      	strb	r2, [r0, #1]
 80203c8:	dd2a      	ble.n	8020420 <__exponent+0x70>
 80203ca:	f10d 0407 	add.w	r4, sp, #7
 80203ce:	46a4      	mov	ip, r4
 80203d0:	270a      	movs	r7, #10
 80203d2:	46a6      	mov	lr, r4
 80203d4:	460a      	mov	r2, r1
 80203d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80203da:	fb07 1516 	mls	r5, r7, r6, r1
 80203de:	3530      	adds	r5, #48	; 0x30
 80203e0:	2a63      	cmp	r2, #99	; 0x63
 80203e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80203e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80203ea:	4631      	mov	r1, r6
 80203ec:	dcf1      	bgt.n	80203d2 <__exponent+0x22>
 80203ee:	3130      	adds	r1, #48	; 0x30
 80203f0:	f1ae 0502 	sub.w	r5, lr, #2
 80203f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80203f8:	1c44      	adds	r4, r0, #1
 80203fa:	4629      	mov	r1, r5
 80203fc:	4561      	cmp	r1, ip
 80203fe:	d30a      	bcc.n	8020416 <__exponent+0x66>
 8020400:	f10d 0209 	add.w	r2, sp, #9
 8020404:	eba2 020e 	sub.w	r2, r2, lr
 8020408:	4565      	cmp	r5, ip
 802040a:	bf88      	it	hi
 802040c:	2200      	movhi	r2, #0
 802040e:	4413      	add	r3, r2
 8020410:	1a18      	subs	r0, r3, r0
 8020412:	b003      	add	sp, #12
 8020414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020416:	f811 2b01 	ldrb.w	r2, [r1], #1
 802041a:	f804 2f01 	strb.w	r2, [r4, #1]!
 802041e:	e7ed      	b.n	80203fc <__exponent+0x4c>
 8020420:	2330      	movs	r3, #48	; 0x30
 8020422:	3130      	adds	r1, #48	; 0x30
 8020424:	7083      	strb	r3, [r0, #2]
 8020426:	70c1      	strb	r1, [r0, #3]
 8020428:	1d03      	adds	r3, r0, #4
 802042a:	e7f1      	b.n	8020410 <__exponent+0x60>

0802042c <_printf_float>:
 802042c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020430:	ed2d 8b02 	vpush	{d8}
 8020434:	b08d      	sub	sp, #52	; 0x34
 8020436:	460c      	mov	r4, r1
 8020438:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802043c:	4616      	mov	r6, r2
 802043e:	461f      	mov	r7, r3
 8020440:	4605      	mov	r5, r0
 8020442:	f001 fd53 	bl	8021eec <_localeconv_r>
 8020446:	f8d0 a000 	ldr.w	sl, [r0]
 802044a:	4650      	mov	r0, sl
 802044c:	f7df fee8 	bl	8000220 <strlen>
 8020450:	2300      	movs	r3, #0
 8020452:	930a      	str	r3, [sp, #40]	; 0x28
 8020454:	6823      	ldr	r3, [r4, #0]
 8020456:	9305      	str	r3, [sp, #20]
 8020458:	f8d8 3000 	ldr.w	r3, [r8]
 802045c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8020460:	3307      	adds	r3, #7
 8020462:	f023 0307 	bic.w	r3, r3, #7
 8020466:	f103 0208 	add.w	r2, r3, #8
 802046a:	f8c8 2000 	str.w	r2, [r8]
 802046e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020472:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8020476:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 802047a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802047e:	9307      	str	r3, [sp, #28]
 8020480:	f8cd 8018 	str.w	r8, [sp, #24]
 8020484:	ee08 0a10 	vmov	s16, r0
 8020488:	4b9f      	ldr	r3, [pc, #636]	; (8020708 <_printf_float+0x2dc>)
 802048a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802048e:	f04f 32ff 	mov.w	r2, #4294967295
 8020492:	f7e0 fb73 	bl	8000b7c <__aeabi_dcmpun>
 8020496:	bb88      	cbnz	r0, 80204fc <_printf_float+0xd0>
 8020498:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802049c:	4b9a      	ldr	r3, [pc, #616]	; (8020708 <_printf_float+0x2dc>)
 802049e:	f04f 32ff 	mov.w	r2, #4294967295
 80204a2:	f7e0 fb4d 	bl	8000b40 <__aeabi_dcmple>
 80204a6:	bb48      	cbnz	r0, 80204fc <_printf_float+0xd0>
 80204a8:	2200      	movs	r2, #0
 80204aa:	2300      	movs	r3, #0
 80204ac:	4640      	mov	r0, r8
 80204ae:	4649      	mov	r1, r9
 80204b0:	f7e0 fb3c 	bl	8000b2c <__aeabi_dcmplt>
 80204b4:	b110      	cbz	r0, 80204bc <_printf_float+0x90>
 80204b6:	232d      	movs	r3, #45	; 0x2d
 80204b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80204bc:	4b93      	ldr	r3, [pc, #588]	; (802070c <_printf_float+0x2e0>)
 80204be:	4894      	ldr	r0, [pc, #592]	; (8020710 <_printf_float+0x2e4>)
 80204c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80204c4:	bf94      	ite	ls
 80204c6:	4698      	movls	r8, r3
 80204c8:	4680      	movhi	r8, r0
 80204ca:	2303      	movs	r3, #3
 80204cc:	6123      	str	r3, [r4, #16]
 80204ce:	9b05      	ldr	r3, [sp, #20]
 80204d0:	f023 0204 	bic.w	r2, r3, #4
 80204d4:	6022      	str	r2, [r4, #0]
 80204d6:	f04f 0900 	mov.w	r9, #0
 80204da:	9700      	str	r7, [sp, #0]
 80204dc:	4633      	mov	r3, r6
 80204de:	aa0b      	add	r2, sp, #44	; 0x2c
 80204e0:	4621      	mov	r1, r4
 80204e2:	4628      	mov	r0, r5
 80204e4:	f000 f9d8 	bl	8020898 <_printf_common>
 80204e8:	3001      	adds	r0, #1
 80204ea:	f040 8090 	bne.w	802060e <_printf_float+0x1e2>
 80204ee:	f04f 30ff 	mov.w	r0, #4294967295
 80204f2:	b00d      	add	sp, #52	; 0x34
 80204f4:	ecbd 8b02 	vpop	{d8}
 80204f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204fc:	4642      	mov	r2, r8
 80204fe:	464b      	mov	r3, r9
 8020500:	4640      	mov	r0, r8
 8020502:	4649      	mov	r1, r9
 8020504:	f7e0 fb3a 	bl	8000b7c <__aeabi_dcmpun>
 8020508:	b140      	cbz	r0, 802051c <_printf_float+0xf0>
 802050a:	464b      	mov	r3, r9
 802050c:	2b00      	cmp	r3, #0
 802050e:	bfbc      	itt	lt
 8020510:	232d      	movlt	r3, #45	; 0x2d
 8020512:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8020516:	487f      	ldr	r0, [pc, #508]	; (8020714 <_printf_float+0x2e8>)
 8020518:	4b7f      	ldr	r3, [pc, #508]	; (8020718 <_printf_float+0x2ec>)
 802051a:	e7d1      	b.n	80204c0 <_printf_float+0x94>
 802051c:	6863      	ldr	r3, [r4, #4]
 802051e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8020522:	9206      	str	r2, [sp, #24]
 8020524:	1c5a      	adds	r2, r3, #1
 8020526:	d13f      	bne.n	80205a8 <_printf_float+0x17c>
 8020528:	2306      	movs	r3, #6
 802052a:	6063      	str	r3, [r4, #4]
 802052c:	9b05      	ldr	r3, [sp, #20]
 802052e:	6861      	ldr	r1, [r4, #4]
 8020530:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8020534:	2300      	movs	r3, #0
 8020536:	9303      	str	r3, [sp, #12]
 8020538:	ab0a      	add	r3, sp, #40	; 0x28
 802053a:	e9cd b301 	strd	fp, r3, [sp, #4]
 802053e:	ab09      	add	r3, sp, #36	; 0x24
 8020540:	ec49 8b10 	vmov	d0, r8, r9
 8020544:	9300      	str	r3, [sp, #0]
 8020546:	6022      	str	r2, [r4, #0]
 8020548:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802054c:	4628      	mov	r0, r5
 802054e:	f7ff fecd 	bl	80202ec <__cvt>
 8020552:	9b06      	ldr	r3, [sp, #24]
 8020554:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020556:	2b47      	cmp	r3, #71	; 0x47
 8020558:	4680      	mov	r8, r0
 802055a:	d108      	bne.n	802056e <_printf_float+0x142>
 802055c:	1cc8      	adds	r0, r1, #3
 802055e:	db02      	blt.n	8020566 <_printf_float+0x13a>
 8020560:	6863      	ldr	r3, [r4, #4]
 8020562:	4299      	cmp	r1, r3
 8020564:	dd41      	ble.n	80205ea <_printf_float+0x1be>
 8020566:	f1ab 0b02 	sub.w	fp, fp, #2
 802056a:	fa5f fb8b 	uxtb.w	fp, fp
 802056e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8020572:	d820      	bhi.n	80205b6 <_printf_float+0x18a>
 8020574:	3901      	subs	r1, #1
 8020576:	465a      	mov	r2, fp
 8020578:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802057c:	9109      	str	r1, [sp, #36]	; 0x24
 802057e:	f7ff ff17 	bl	80203b0 <__exponent>
 8020582:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020584:	1813      	adds	r3, r2, r0
 8020586:	2a01      	cmp	r2, #1
 8020588:	4681      	mov	r9, r0
 802058a:	6123      	str	r3, [r4, #16]
 802058c:	dc02      	bgt.n	8020594 <_printf_float+0x168>
 802058e:	6822      	ldr	r2, [r4, #0]
 8020590:	07d2      	lsls	r2, r2, #31
 8020592:	d501      	bpl.n	8020598 <_printf_float+0x16c>
 8020594:	3301      	adds	r3, #1
 8020596:	6123      	str	r3, [r4, #16]
 8020598:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 802059c:	2b00      	cmp	r3, #0
 802059e:	d09c      	beq.n	80204da <_printf_float+0xae>
 80205a0:	232d      	movs	r3, #45	; 0x2d
 80205a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80205a6:	e798      	b.n	80204da <_printf_float+0xae>
 80205a8:	9a06      	ldr	r2, [sp, #24]
 80205aa:	2a47      	cmp	r2, #71	; 0x47
 80205ac:	d1be      	bne.n	802052c <_printf_float+0x100>
 80205ae:	2b00      	cmp	r3, #0
 80205b0:	d1bc      	bne.n	802052c <_printf_float+0x100>
 80205b2:	2301      	movs	r3, #1
 80205b4:	e7b9      	b.n	802052a <_printf_float+0xfe>
 80205b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80205ba:	d118      	bne.n	80205ee <_printf_float+0x1c2>
 80205bc:	2900      	cmp	r1, #0
 80205be:	6863      	ldr	r3, [r4, #4]
 80205c0:	dd0b      	ble.n	80205da <_printf_float+0x1ae>
 80205c2:	6121      	str	r1, [r4, #16]
 80205c4:	b913      	cbnz	r3, 80205cc <_printf_float+0x1a0>
 80205c6:	6822      	ldr	r2, [r4, #0]
 80205c8:	07d0      	lsls	r0, r2, #31
 80205ca:	d502      	bpl.n	80205d2 <_printf_float+0x1a6>
 80205cc:	3301      	adds	r3, #1
 80205ce:	440b      	add	r3, r1
 80205d0:	6123      	str	r3, [r4, #16]
 80205d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80205d4:	f04f 0900 	mov.w	r9, #0
 80205d8:	e7de      	b.n	8020598 <_printf_float+0x16c>
 80205da:	b913      	cbnz	r3, 80205e2 <_printf_float+0x1b6>
 80205dc:	6822      	ldr	r2, [r4, #0]
 80205de:	07d2      	lsls	r2, r2, #31
 80205e0:	d501      	bpl.n	80205e6 <_printf_float+0x1ba>
 80205e2:	3302      	adds	r3, #2
 80205e4:	e7f4      	b.n	80205d0 <_printf_float+0x1a4>
 80205e6:	2301      	movs	r3, #1
 80205e8:	e7f2      	b.n	80205d0 <_printf_float+0x1a4>
 80205ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80205ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80205f0:	4299      	cmp	r1, r3
 80205f2:	db05      	blt.n	8020600 <_printf_float+0x1d4>
 80205f4:	6823      	ldr	r3, [r4, #0]
 80205f6:	6121      	str	r1, [r4, #16]
 80205f8:	07d8      	lsls	r0, r3, #31
 80205fa:	d5ea      	bpl.n	80205d2 <_printf_float+0x1a6>
 80205fc:	1c4b      	adds	r3, r1, #1
 80205fe:	e7e7      	b.n	80205d0 <_printf_float+0x1a4>
 8020600:	2900      	cmp	r1, #0
 8020602:	bfd4      	ite	le
 8020604:	f1c1 0202 	rsble	r2, r1, #2
 8020608:	2201      	movgt	r2, #1
 802060a:	4413      	add	r3, r2
 802060c:	e7e0      	b.n	80205d0 <_printf_float+0x1a4>
 802060e:	6823      	ldr	r3, [r4, #0]
 8020610:	055a      	lsls	r2, r3, #21
 8020612:	d407      	bmi.n	8020624 <_printf_float+0x1f8>
 8020614:	6923      	ldr	r3, [r4, #16]
 8020616:	4642      	mov	r2, r8
 8020618:	4631      	mov	r1, r6
 802061a:	4628      	mov	r0, r5
 802061c:	47b8      	blx	r7
 802061e:	3001      	adds	r0, #1
 8020620:	d12c      	bne.n	802067c <_printf_float+0x250>
 8020622:	e764      	b.n	80204ee <_printf_float+0xc2>
 8020624:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8020628:	f240 80e0 	bls.w	80207ec <_printf_float+0x3c0>
 802062c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8020630:	2200      	movs	r2, #0
 8020632:	2300      	movs	r3, #0
 8020634:	f7e0 fa70 	bl	8000b18 <__aeabi_dcmpeq>
 8020638:	2800      	cmp	r0, #0
 802063a:	d034      	beq.n	80206a6 <_printf_float+0x27a>
 802063c:	4a37      	ldr	r2, [pc, #220]	; (802071c <_printf_float+0x2f0>)
 802063e:	2301      	movs	r3, #1
 8020640:	4631      	mov	r1, r6
 8020642:	4628      	mov	r0, r5
 8020644:	47b8      	blx	r7
 8020646:	3001      	adds	r0, #1
 8020648:	f43f af51 	beq.w	80204ee <_printf_float+0xc2>
 802064c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8020650:	429a      	cmp	r2, r3
 8020652:	db02      	blt.n	802065a <_printf_float+0x22e>
 8020654:	6823      	ldr	r3, [r4, #0]
 8020656:	07d8      	lsls	r0, r3, #31
 8020658:	d510      	bpl.n	802067c <_printf_float+0x250>
 802065a:	ee18 3a10 	vmov	r3, s16
 802065e:	4652      	mov	r2, sl
 8020660:	4631      	mov	r1, r6
 8020662:	4628      	mov	r0, r5
 8020664:	47b8      	blx	r7
 8020666:	3001      	adds	r0, #1
 8020668:	f43f af41 	beq.w	80204ee <_printf_float+0xc2>
 802066c:	f04f 0800 	mov.w	r8, #0
 8020670:	f104 091a 	add.w	r9, r4, #26
 8020674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020676:	3b01      	subs	r3, #1
 8020678:	4543      	cmp	r3, r8
 802067a:	dc09      	bgt.n	8020690 <_printf_float+0x264>
 802067c:	6823      	ldr	r3, [r4, #0]
 802067e:	079b      	lsls	r3, r3, #30
 8020680:	f100 8105 	bmi.w	802088e <_printf_float+0x462>
 8020684:	68e0      	ldr	r0, [r4, #12]
 8020686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020688:	4298      	cmp	r0, r3
 802068a:	bfb8      	it	lt
 802068c:	4618      	movlt	r0, r3
 802068e:	e730      	b.n	80204f2 <_printf_float+0xc6>
 8020690:	2301      	movs	r3, #1
 8020692:	464a      	mov	r2, r9
 8020694:	4631      	mov	r1, r6
 8020696:	4628      	mov	r0, r5
 8020698:	47b8      	blx	r7
 802069a:	3001      	adds	r0, #1
 802069c:	f43f af27 	beq.w	80204ee <_printf_float+0xc2>
 80206a0:	f108 0801 	add.w	r8, r8, #1
 80206a4:	e7e6      	b.n	8020674 <_printf_float+0x248>
 80206a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80206a8:	2b00      	cmp	r3, #0
 80206aa:	dc39      	bgt.n	8020720 <_printf_float+0x2f4>
 80206ac:	4a1b      	ldr	r2, [pc, #108]	; (802071c <_printf_float+0x2f0>)
 80206ae:	2301      	movs	r3, #1
 80206b0:	4631      	mov	r1, r6
 80206b2:	4628      	mov	r0, r5
 80206b4:	47b8      	blx	r7
 80206b6:	3001      	adds	r0, #1
 80206b8:	f43f af19 	beq.w	80204ee <_printf_float+0xc2>
 80206bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80206c0:	4313      	orrs	r3, r2
 80206c2:	d102      	bne.n	80206ca <_printf_float+0x29e>
 80206c4:	6823      	ldr	r3, [r4, #0]
 80206c6:	07d9      	lsls	r1, r3, #31
 80206c8:	d5d8      	bpl.n	802067c <_printf_float+0x250>
 80206ca:	ee18 3a10 	vmov	r3, s16
 80206ce:	4652      	mov	r2, sl
 80206d0:	4631      	mov	r1, r6
 80206d2:	4628      	mov	r0, r5
 80206d4:	47b8      	blx	r7
 80206d6:	3001      	adds	r0, #1
 80206d8:	f43f af09 	beq.w	80204ee <_printf_float+0xc2>
 80206dc:	f04f 0900 	mov.w	r9, #0
 80206e0:	f104 0a1a 	add.w	sl, r4, #26
 80206e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80206e6:	425b      	negs	r3, r3
 80206e8:	454b      	cmp	r3, r9
 80206ea:	dc01      	bgt.n	80206f0 <_printf_float+0x2c4>
 80206ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80206ee:	e792      	b.n	8020616 <_printf_float+0x1ea>
 80206f0:	2301      	movs	r3, #1
 80206f2:	4652      	mov	r2, sl
 80206f4:	4631      	mov	r1, r6
 80206f6:	4628      	mov	r0, r5
 80206f8:	47b8      	blx	r7
 80206fa:	3001      	adds	r0, #1
 80206fc:	f43f aef7 	beq.w	80204ee <_printf_float+0xc2>
 8020700:	f109 0901 	add.w	r9, r9, #1
 8020704:	e7ee      	b.n	80206e4 <_printf_float+0x2b8>
 8020706:	bf00      	nop
 8020708:	7fefffff 	.word	0x7fefffff
 802070c:	0802371c 	.word	0x0802371c
 8020710:	08023720 	.word	0x08023720
 8020714:	08023728 	.word	0x08023728
 8020718:	08023724 	.word	0x08023724
 802071c:	0802372c 	.word	0x0802372c
 8020720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020722:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020724:	429a      	cmp	r2, r3
 8020726:	bfa8      	it	ge
 8020728:	461a      	movge	r2, r3
 802072a:	2a00      	cmp	r2, #0
 802072c:	4691      	mov	r9, r2
 802072e:	dc37      	bgt.n	80207a0 <_printf_float+0x374>
 8020730:	f04f 0b00 	mov.w	fp, #0
 8020734:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8020738:	f104 021a 	add.w	r2, r4, #26
 802073c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802073e:	9305      	str	r3, [sp, #20]
 8020740:	eba3 0309 	sub.w	r3, r3, r9
 8020744:	455b      	cmp	r3, fp
 8020746:	dc33      	bgt.n	80207b0 <_printf_float+0x384>
 8020748:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802074c:	429a      	cmp	r2, r3
 802074e:	db3b      	blt.n	80207c8 <_printf_float+0x39c>
 8020750:	6823      	ldr	r3, [r4, #0]
 8020752:	07da      	lsls	r2, r3, #31
 8020754:	d438      	bmi.n	80207c8 <_printf_float+0x39c>
 8020756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020758:	9a05      	ldr	r2, [sp, #20]
 802075a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802075c:	1a9a      	subs	r2, r3, r2
 802075e:	eba3 0901 	sub.w	r9, r3, r1
 8020762:	4591      	cmp	r9, r2
 8020764:	bfa8      	it	ge
 8020766:	4691      	movge	r9, r2
 8020768:	f1b9 0f00 	cmp.w	r9, #0
 802076c:	dc35      	bgt.n	80207da <_printf_float+0x3ae>
 802076e:	f04f 0800 	mov.w	r8, #0
 8020772:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8020776:	f104 0a1a 	add.w	sl, r4, #26
 802077a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802077e:	1a9b      	subs	r3, r3, r2
 8020780:	eba3 0309 	sub.w	r3, r3, r9
 8020784:	4543      	cmp	r3, r8
 8020786:	f77f af79 	ble.w	802067c <_printf_float+0x250>
 802078a:	2301      	movs	r3, #1
 802078c:	4652      	mov	r2, sl
 802078e:	4631      	mov	r1, r6
 8020790:	4628      	mov	r0, r5
 8020792:	47b8      	blx	r7
 8020794:	3001      	adds	r0, #1
 8020796:	f43f aeaa 	beq.w	80204ee <_printf_float+0xc2>
 802079a:	f108 0801 	add.w	r8, r8, #1
 802079e:	e7ec      	b.n	802077a <_printf_float+0x34e>
 80207a0:	4613      	mov	r3, r2
 80207a2:	4631      	mov	r1, r6
 80207a4:	4642      	mov	r2, r8
 80207a6:	4628      	mov	r0, r5
 80207a8:	47b8      	blx	r7
 80207aa:	3001      	adds	r0, #1
 80207ac:	d1c0      	bne.n	8020730 <_printf_float+0x304>
 80207ae:	e69e      	b.n	80204ee <_printf_float+0xc2>
 80207b0:	2301      	movs	r3, #1
 80207b2:	4631      	mov	r1, r6
 80207b4:	4628      	mov	r0, r5
 80207b6:	9205      	str	r2, [sp, #20]
 80207b8:	47b8      	blx	r7
 80207ba:	3001      	adds	r0, #1
 80207bc:	f43f ae97 	beq.w	80204ee <_printf_float+0xc2>
 80207c0:	9a05      	ldr	r2, [sp, #20]
 80207c2:	f10b 0b01 	add.w	fp, fp, #1
 80207c6:	e7b9      	b.n	802073c <_printf_float+0x310>
 80207c8:	ee18 3a10 	vmov	r3, s16
 80207cc:	4652      	mov	r2, sl
 80207ce:	4631      	mov	r1, r6
 80207d0:	4628      	mov	r0, r5
 80207d2:	47b8      	blx	r7
 80207d4:	3001      	adds	r0, #1
 80207d6:	d1be      	bne.n	8020756 <_printf_float+0x32a>
 80207d8:	e689      	b.n	80204ee <_printf_float+0xc2>
 80207da:	9a05      	ldr	r2, [sp, #20]
 80207dc:	464b      	mov	r3, r9
 80207de:	4442      	add	r2, r8
 80207e0:	4631      	mov	r1, r6
 80207e2:	4628      	mov	r0, r5
 80207e4:	47b8      	blx	r7
 80207e6:	3001      	adds	r0, #1
 80207e8:	d1c1      	bne.n	802076e <_printf_float+0x342>
 80207ea:	e680      	b.n	80204ee <_printf_float+0xc2>
 80207ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80207ee:	2a01      	cmp	r2, #1
 80207f0:	dc01      	bgt.n	80207f6 <_printf_float+0x3ca>
 80207f2:	07db      	lsls	r3, r3, #31
 80207f4:	d538      	bpl.n	8020868 <_printf_float+0x43c>
 80207f6:	2301      	movs	r3, #1
 80207f8:	4642      	mov	r2, r8
 80207fa:	4631      	mov	r1, r6
 80207fc:	4628      	mov	r0, r5
 80207fe:	47b8      	blx	r7
 8020800:	3001      	adds	r0, #1
 8020802:	f43f ae74 	beq.w	80204ee <_printf_float+0xc2>
 8020806:	ee18 3a10 	vmov	r3, s16
 802080a:	4652      	mov	r2, sl
 802080c:	4631      	mov	r1, r6
 802080e:	4628      	mov	r0, r5
 8020810:	47b8      	blx	r7
 8020812:	3001      	adds	r0, #1
 8020814:	f43f ae6b 	beq.w	80204ee <_printf_float+0xc2>
 8020818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802081c:	2200      	movs	r2, #0
 802081e:	2300      	movs	r3, #0
 8020820:	f7e0 f97a 	bl	8000b18 <__aeabi_dcmpeq>
 8020824:	b9d8      	cbnz	r0, 802085e <_printf_float+0x432>
 8020826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020828:	f108 0201 	add.w	r2, r8, #1
 802082c:	3b01      	subs	r3, #1
 802082e:	4631      	mov	r1, r6
 8020830:	4628      	mov	r0, r5
 8020832:	47b8      	blx	r7
 8020834:	3001      	adds	r0, #1
 8020836:	d10e      	bne.n	8020856 <_printf_float+0x42a>
 8020838:	e659      	b.n	80204ee <_printf_float+0xc2>
 802083a:	2301      	movs	r3, #1
 802083c:	4652      	mov	r2, sl
 802083e:	4631      	mov	r1, r6
 8020840:	4628      	mov	r0, r5
 8020842:	47b8      	blx	r7
 8020844:	3001      	adds	r0, #1
 8020846:	f43f ae52 	beq.w	80204ee <_printf_float+0xc2>
 802084a:	f108 0801 	add.w	r8, r8, #1
 802084e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020850:	3b01      	subs	r3, #1
 8020852:	4543      	cmp	r3, r8
 8020854:	dcf1      	bgt.n	802083a <_printf_float+0x40e>
 8020856:	464b      	mov	r3, r9
 8020858:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802085c:	e6dc      	b.n	8020618 <_printf_float+0x1ec>
 802085e:	f04f 0800 	mov.w	r8, #0
 8020862:	f104 0a1a 	add.w	sl, r4, #26
 8020866:	e7f2      	b.n	802084e <_printf_float+0x422>
 8020868:	2301      	movs	r3, #1
 802086a:	4642      	mov	r2, r8
 802086c:	e7df      	b.n	802082e <_printf_float+0x402>
 802086e:	2301      	movs	r3, #1
 8020870:	464a      	mov	r2, r9
 8020872:	4631      	mov	r1, r6
 8020874:	4628      	mov	r0, r5
 8020876:	47b8      	blx	r7
 8020878:	3001      	adds	r0, #1
 802087a:	f43f ae38 	beq.w	80204ee <_printf_float+0xc2>
 802087e:	f108 0801 	add.w	r8, r8, #1
 8020882:	68e3      	ldr	r3, [r4, #12]
 8020884:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020886:	1a5b      	subs	r3, r3, r1
 8020888:	4543      	cmp	r3, r8
 802088a:	dcf0      	bgt.n	802086e <_printf_float+0x442>
 802088c:	e6fa      	b.n	8020684 <_printf_float+0x258>
 802088e:	f04f 0800 	mov.w	r8, #0
 8020892:	f104 0919 	add.w	r9, r4, #25
 8020896:	e7f4      	b.n	8020882 <_printf_float+0x456>

08020898 <_printf_common>:
 8020898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802089c:	4616      	mov	r6, r2
 802089e:	4699      	mov	r9, r3
 80208a0:	688a      	ldr	r2, [r1, #8]
 80208a2:	690b      	ldr	r3, [r1, #16]
 80208a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80208a8:	4293      	cmp	r3, r2
 80208aa:	bfb8      	it	lt
 80208ac:	4613      	movlt	r3, r2
 80208ae:	6033      	str	r3, [r6, #0]
 80208b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80208b4:	4607      	mov	r7, r0
 80208b6:	460c      	mov	r4, r1
 80208b8:	b10a      	cbz	r2, 80208be <_printf_common+0x26>
 80208ba:	3301      	adds	r3, #1
 80208bc:	6033      	str	r3, [r6, #0]
 80208be:	6823      	ldr	r3, [r4, #0]
 80208c0:	0699      	lsls	r1, r3, #26
 80208c2:	bf42      	ittt	mi
 80208c4:	6833      	ldrmi	r3, [r6, #0]
 80208c6:	3302      	addmi	r3, #2
 80208c8:	6033      	strmi	r3, [r6, #0]
 80208ca:	6825      	ldr	r5, [r4, #0]
 80208cc:	f015 0506 	ands.w	r5, r5, #6
 80208d0:	d106      	bne.n	80208e0 <_printf_common+0x48>
 80208d2:	f104 0a19 	add.w	sl, r4, #25
 80208d6:	68e3      	ldr	r3, [r4, #12]
 80208d8:	6832      	ldr	r2, [r6, #0]
 80208da:	1a9b      	subs	r3, r3, r2
 80208dc:	42ab      	cmp	r3, r5
 80208de:	dc26      	bgt.n	802092e <_printf_common+0x96>
 80208e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80208e4:	1e13      	subs	r3, r2, #0
 80208e6:	6822      	ldr	r2, [r4, #0]
 80208e8:	bf18      	it	ne
 80208ea:	2301      	movne	r3, #1
 80208ec:	0692      	lsls	r2, r2, #26
 80208ee:	d42b      	bmi.n	8020948 <_printf_common+0xb0>
 80208f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80208f4:	4649      	mov	r1, r9
 80208f6:	4638      	mov	r0, r7
 80208f8:	47c0      	blx	r8
 80208fa:	3001      	adds	r0, #1
 80208fc:	d01e      	beq.n	802093c <_printf_common+0xa4>
 80208fe:	6823      	ldr	r3, [r4, #0]
 8020900:	68e5      	ldr	r5, [r4, #12]
 8020902:	6832      	ldr	r2, [r6, #0]
 8020904:	f003 0306 	and.w	r3, r3, #6
 8020908:	2b04      	cmp	r3, #4
 802090a:	bf08      	it	eq
 802090c:	1aad      	subeq	r5, r5, r2
 802090e:	68a3      	ldr	r3, [r4, #8]
 8020910:	6922      	ldr	r2, [r4, #16]
 8020912:	bf0c      	ite	eq
 8020914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020918:	2500      	movne	r5, #0
 802091a:	4293      	cmp	r3, r2
 802091c:	bfc4      	itt	gt
 802091e:	1a9b      	subgt	r3, r3, r2
 8020920:	18ed      	addgt	r5, r5, r3
 8020922:	2600      	movs	r6, #0
 8020924:	341a      	adds	r4, #26
 8020926:	42b5      	cmp	r5, r6
 8020928:	d11a      	bne.n	8020960 <_printf_common+0xc8>
 802092a:	2000      	movs	r0, #0
 802092c:	e008      	b.n	8020940 <_printf_common+0xa8>
 802092e:	2301      	movs	r3, #1
 8020930:	4652      	mov	r2, sl
 8020932:	4649      	mov	r1, r9
 8020934:	4638      	mov	r0, r7
 8020936:	47c0      	blx	r8
 8020938:	3001      	adds	r0, #1
 802093a:	d103      	bne.n	8020944 <_printf_common+0xac>
 802093c:	f04f 30ff 	mov.w	r0, #4294967295
 8020940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020944:	3501      	adds	r5, #1
 8020946:	e7c6      	b.n	80208d6 <_printf_common+0x3e>
 8020948:	18e1      	adds	r1, r4, r3
 802094a:	1c5a      	adds	r2, r3, #1
 802094c:	2030      	movs	r0, #48	; 0x30
 802094e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020952:	4422      	add	r2, r4
 8020954:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020958:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802095c:	3302      	adds	r3, #2
 802095e:	e7c7      	b.n	80208f0 <_printf_common+0x58>
 8020960:	2301      	movs	r3, #1
 8020962:	4622      	mov	r2, r4
 8020964:	4649      	mov	r1, r9
 8020966:	4638      	mov	r0, r7
 8020968:	47c0      	blx	r8
 802096a:	3001      	adds	r0, #1
 802096c:	d0e6      	beq.n	802093c <_printf_common+0xa4>
 802096e:	3601      	adds	r6, #1
 8020970:	e7d9      	b.n	8020926 <_printf_common+0x8e>
	...

08020974 <_printf_i>:
 8020974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020978:	7e0f      	ldrb	r7, [r1, #24]
 802097a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802097c:	2f78      	cmp	r7, #120	; 0x78
 802097e:	4691      	mov	r9, r2
 8020980:	4680      	mov	r8, r0
 8020982:	460c      	mov	r4, r1
 8020984:	469a      	mov	sl, r3
 8020986:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802098a:	d807      	bhi.n	802099c <_printf_i+0x28>
 802098c:	2f62      	cmp	r7, #98	; 0x62
 802098e:	d80a      	bhi.n	80209a6 <_printf_i+0x32>
 8020990:	2f00      	cmp	r7, #0
 8020992:	f000 80d8 	beq.w	8020b46 <_printf_i+0x1d2>
 8020996:	2f58      	cmp	r7, #88	; 0x58
 8020998:	f000 80a3 	beq.w	8020ae2 <_printf_i+0x16e>
 802099c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80209a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80209a4:	e03a      	b.n	8020a1c <_printf_i+0xa8>
 80209a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80209aa:	2b15      	cmp	r3, #21
 80209ac:	d8f6      	bhi.n	802099c <_printf_i+0x28>
 80209ae:	a101      	add	r1, pc, #4	; (adr r1, 80209b4 <_printf_i+0x40>)
 80209b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80209b4:	08020a0d 	.word	0x08020a0d
 80209b8:	08020a21 	.word	0x08020a21
 80209bc:	0802099d 	.word	0x0802099d
 80209c0:	0802099d 	.word	0x0802099d
 80209c4:	0802099d 	.word	0x0802099d
 80209c8:	0802099d 	.word	0x0802099d
 80209cc:	08020a21 	.word	0x08020a21
 80209d0:	0802099d 	.word	0x0802099d
 80209d4:	0802099d 	.word	0x0802099d
 80209d8:	0802099d 	.word	0x0802099d
 80209dc:	0802099d 	.word	0x0802099d
 80209e0:	08020b2d 	.word	0x08020b2d
 80209e4:	08020a51 	.word	0x08020a51
 80209e8:	08020b0f 	.word	0x08020b0f
 80209ec:	0802099d 	.word	0x0802099d
 80209f0:	0802099d 	.word	0x0802099d
 80209f4:	08020b4f 	.word	0x08020b4f
 80209f8:	0802099d 	.word	0x0802099d
 80209fc:	08020a51 	.word	0x08020a51
 8020a00:	0802099d 	.word	0x0802099d
 8020a04:	0802099d 	.word	0x0802099d
 8020a08:	08020b17 	.word	0x08020b17
 8020a0c:	682b      	ldr	r3, [r5, #0]
 8020a0e:	1d1a      	adds	r2, r3, #4
 8020a10:	681b      	ldr	r3, [r3, #0]
 8020a12:	602a      	str	r2, [r5, #0]
 8020a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020a1c:	2301      	movs	r3, #1
 8020a1e:	e0a3      	b.n	8020b68 <_printf_i+0x1f4>
 8020a20:	6820      	ldr	r0, [r4, #0]
 8020a22:	6829      	ldr	r1, [r5, #0]
 8020a24:	0606      	lsls	r6, r0, #24
 8020a26:	f101 0304 	add.w	r3, r1, #4
 8020a2a:	d50a      	bpl.n	8020a42 <_printf_i+0xce>
 8020a2c:	680e      	ldr	r6, [r1, #0]
 8020a2e:	602b      	str	r3, [r5, #0]
 8020a30:	2e00      	cmp	r6, #0
 8020a32:	da03      	bge.n	8020a3c <_printf_i+0xc8>
 8020a34:	232d      	movs	r3, #45	; 0x2d
 8020a36:	4276      	negs	r6, r6
 8020a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020a3c:	485e      	ldr	r0, [pc, #376]	; (8020bb8 <_printf_i+0x244>)
 8020a3e:	230a      	movs	r3, #10
 8020a40:	e019      	b.n	8020a76 <_printf_i+0x102>
 8020a42:	680e      	ldr	r6, [r1, #0]
 8020a44:	602b      	str	r3, [r5, #0]
 8020a46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020a4a:	bf18      	it	ne
 8020a4c:	b236      	sxthne	r6, r6
 8020a4e:	e7ef      	b.n	8020a30 <_printf_i+0xbc>
 8020a50:	682b      	ldr	r3, [r5, #0]
 8020a52:	6820      	ldr	r0, [r4, #0]
 8020a54:	1d19      	adds	r1, r3, #4
 8020a56:	6029      	str	r1, [r5, #0]
 8020a58:	0601      	lsls	r1, r0, #24
 8020a5a:	d501      	bpl.n	8020a60 <_printf_i+0xec>
 8020a5c:	681e      	ldr	r6, [r3, #0]
 8020a5e:	e002      	b.n	8020a66 <_printf_i+0xf2>
 8020a60:	0646      	lsls	r6, r0, #25
 8020a62:	d5fb      	bpl.n	8020a5c <_printf_i+0xe8>
 8020a64:	881e      	ldrh	r6, [r3, #0]
 8020a66:	4854      	ldr	r0, [pc, #336]	; (8020bb8 <_printf_i+0x244>)
 8020a68:	2f6f      	cmp	r7, #111	; 0x6f
 8020a6a:	bf0c      	ite	eq
 8020a6c:	2308      	moveq	r3, #8
 8020a6e:	230a      	movne	r3, #10
 8020a70:	2100      	movs	r1, #0
 8020a72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020a76:	6865      	ldr	r5, [r4, #4]
 8020a78:	60a5      	str	r5, [r4, #8]
 8020a7a:	2d00      	cmp	r5, #0
 8020a7c:	bfa2      	ittt	ge
 8020a7e:	6821      	ldrge	r1, [r4, #0]
 8020a80:	f021 0104 	bicge.w	r1, r1, #4
 8020a84:	6021      	strge	r1, [r4, #0]
 8020a86:	b90e      	cbnz	r6, 8020a8c <_printf_i+0x118>
 8020a88:	2d00      	cmp	r5, #0
 8020a8a:	d04d      	beq.n	8020b28 <_printf_i+0x1b4>
 8020a8c:	4615      	mov	r5, r2
 8020a8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8020a92:	fb03 6711 	mls	r7, r3, r1, r6
 8020a96:	5dc7      	ldrb	r7, [r0, r7]
 8020a98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8020a9c:	4637      	mov	r7, r6
 8020a9e:	42bb      	cmp	r3, r7
 8020aa0:	460e      	mov	r6, r1
 8020aa2:	d9f4      	bls.n	8020a8e <_printf_i+0x11a>
 8020aa4:	2b08      	cmp	r3, #8
 8020aa6:	d10b      	bne.n	8020ac0 <_printf_i+0x14c>
 8020aa8:	6823      	ldr	r3, [r4, #0]
 8020aaa:	07de      	lsls	r6, r3, #31
 8020aac:	d508      	bpl.n	8020ac0 <_printf_i+0x14c>
 8020aae:	6923      	ldr	r3, [r4, #16]
 8020ab0:	6861      	ldr	r1, [r4, #4]
 8020ab2:	4299      	cmp	r1, r3
 8020ab4:	bfde      	ittt	le
 8020ab6:	2330      	movle	r3, #48	; 0x30
 8020ab8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020abc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8020ac0:	1b52      	subs	r2, r2, r5
 8020ac2:	6122      	str	r2, [r4, #16]
 8020ac4:	f8cd a000 	str.w	sl, [sp]
 8020ac8:	464b      	mov	r3, r9
 8020aca:	aa03      	add	r2, sp, #12
 8020acc:	4621      	mov	r1, r4
 8020ace:	4640      	mov	r0, r8
 8020ad0:	f7ff fee2 	bl	8020898 <_printf_common>
 8020ad4:	3001      	adds	r0, #1
 8020ad6:	d14c      	bne.n	8020b72 <_printf_i+0x1fe>
 8020ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8020adc:	b004      	add	sp, #16
 8020ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ae2:	4835      	ldr	r0, [pc, #212]	; (8020bb8 <_printf_i+0x244>)
 8020ae4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8020ae8:	6829      	ldr	r1, [r5, #0]
 8020aea:	6823      	ldr	r3, [r4, #0]
 8020aec:	f851 6b04 	ldr.w	r6, [r1], #4
 8020af0:	6029      	str	r1, [r5, #0]
 8020af2:	061d      	lsls	r5, r3, #24
 8020af4:	d514      	bpl.n	8020b20 <_printf_i+0x1ac>
 8020af6:	07df      	lsls	r7, r3, #31
 8020af8:	bf44      	itt	mi
 8020afa:	f043 0320 	orrmi.w	r3, r3, #32
 8020afe:	6023      	strmi	r3, [r4, #0]
 8020b00:	b91e      	cbnz	r6, 8020b0a <_printf_i+0x196>
 8020b02:	6823      	ldr	r3, [r4, #0]
 8020b04:	f023 0320 	bic.w	r3, r3, #32
 8020b08:	6023      	str	r3, [r4, #0]
 8020b0a:	2310      	movs	r3, #16
 8020b0c:	e7b0      	b.n	8020a70 <_printf_i+0xfc>
 8020b0e:	6823      	ldr	r3, [r4, #0]
 8020b10:	f043 0320 	orr.w	r3, r3, #32
 8020b14:	6023      	str	r3, [r4, #0]
 8020b16:	2378      	movs	r3, #120	; 0x78
 8020b18:	4828      	ldr	r0, [pc, #160]	; (8020bbc <_printf_i+0x248>)
 8020b1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020b1e:	e7e3      	b.n	8020ae8 <_printf_i+0x174>
 8020b20:	0659      	lsls	r1, r3, #25
 8020b22:	bf48      	it	mi
 8020b24:	b2b6      	uxthmi	r6, r6
 8020b26:	e7e6      	b.n	8020af6 <_printf_i+0x182>
 8020b28:	4615      	mov	r5, r2
 8020b2a:	e7bb      	b.n	8020aa4 <_printf_i+0x130>
 8020b2c:	682b      	ldr	r3, [r5, #0]
 8020b2e:	6826      	ldr	r6, [r4, #0]
 8020b30:	6961      	ldr	r1, [r4, #20]
 8020b32:	1d18      	adds	r0, r3, #4
 8020b34:	6028      	str	r0, [r5, #0]
 8020b36:	0635      	lsls	r5, r6, #24
 8020b38:	681b      	ldr	r3, [r3, #0]
 8020b3a:	d501      	bpl.n	8020b40 <_printf_i+0x1cc>
 8020b3c:	6019      	str	r1, [r3, #0]
 8020b3e:	e002      	b.n	8020b46 <_printf_i+0x1d2>
 8020b40:	0670      	lsls	r0, r6, #25
 8020b42:	d5fb      	bpl.n	8020b3c <_printf_i+0x1c8>
 8020b44:	8019      	strh	r1, [r3, #0]
 8020b46:	2300      	movs	r3, #0
 8020b48:	6123      	str	r3, [r4, #16]
 8020b4a:	4615      	mov	r5, r2
 8020b4c:	e7ba      	b.n	8020ac4 <_printf_i+0x150>
 8020b4e:	682b      	ldr	r3, [r5, #0]
 8020b50:	1d1a      	adds	r2, r3, #4
 8020b52:	602a      	str	r2, [r5, #0]
 8020b54:	681d      	ldr	r5, [r3, #0]
 8020b56:	6862      	ldr	r2, [r4, #4]
 8020b58:	2100      	movs	r1, #0
 8020b5a:	4628      	mov	r0, r5
 8020b5c:	f7df fb68 	bl	8000230 <memchr>
 8020b60:	b108      	cbz	r0, 8020b66 <_printf_i+0x1f2>
 8020b62:	1b40      	subs	r0, r0, r5
 8020b64:	6060      	str	r0, [r4, #4]
 8020b66:	6863      	ldr	r3, [r4, #4]
 8020b68:	6123      	str	r3, [r4, #16]
 8020b6a:	2300      	movs	r3, #0
 8020b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020b70:	e7a8      	b.n	8020ac4 <_printf_i+0x150>
 8020b72:	6923      	ldr	r3, [r4, #16]
 8020b74:	462a      	mov	r2, r5
 8020b76:	4649      	mov	r1, r9
 8020b78:	4640      	mov	r0, r8
 8020b7a:	47d0      	blx	sl
 8020b7c:	3001      	adds	r0, #1
 8020b7e:	d0ab      	beq.n	8020ad8 <_printf_i+0x164>
 8020b80:	6823      	ldr	r3, [r4, #0]
 8020b82:	079b      	lsls	r3, r3, #30
 8020b84:	d413      	bmi.n	8020bae <_printf_i+0x23a>
 8020b86:	68e0      	ldr	r0, [r4, #12]
 8020b88:	9b03      	ldr	r3, [sp, #12]
 8020b8a:	4298      	cmp	r0, r3
 8020b8c:	bfb8      	it	lt
 8020b8e:	4618      	movlt	r0, r3
 8020b90:	e7a4      	b.n	8020adc <_printf_i+0x168>
 8020b92:	2301      	movs	r3, #1
 8020b94:	4632      	mov	r2, r6
 8020b96:	4649      	mov	r1, r9
 8020b98:	4640      	mov	r0, r8
 8020b9a:	47d0      	blx	sl
 8020b9c:	3001      	adds	r0, #1
 8020b9e:	d09b      	beq.n	8020ad8 <_printf_i+0x164>
 8020ba0:	3501      	adds	r5, #1
 8020ba2:	68e3      	ldr	r3, [r4, #12]
 8020ba4:	9903      	ldr	r1, [sp, #12]
 8020ba6:	1a5b      	subs	r3, r3, r1
 8020ba8:	42ab      	cmp	r3, r5
 8020baa:	dcf2      	bgt.n	8020b92 <_printf_i+0x21e>
 8020bac:	e7eb      	b.n	8020b86 <_printf_i+0x212>
 8020bae:	2500      	movs	r5, #0
 8020bb0:	f104 0619 	add.w	r6, r4, #25
 8020bb4:	e7f5      	b.n	8020ba2 <_printf_i+0x22e>
 8020bb6:	bf00      	nop
 8020bb8:	0802372e 	.word	0x0802372e
 8020bbc:	0802373f 	.word	0x0802373f

08020bc0 <iprintf>:
 8020bc0:	b40f      	push	{r0, r1, r2, r3}
 8020bc2:	4b0a      	ldr	r3, [pc, #40]	; (8020bec <iprintf+0x2c>)
 8020bc4:	b513      	push	{r0, r1, r4, lr}
 8020bc6:	681c      	ldr	r4, [r3, #0]
 8020bc8:	b124      	cbz	r4, 8020bd4 <iprintf+0x14>
 8020bca:	69a3      	ldr	r3, [r4, #24]
 8020bcc:	b913      	cbnz	r3, 8020bd4 <iprintf+0x14>
 8020bce:	4620      	mov	r0, r4
 8020bd0:	f001 f8ee 	bl	8021db0 <__sinit>
 8020bd4:	ab05      	add	r3, sp, #20
 8020bd6:	9a04      	ldr	r2, [sp, #16]
 8020bd8:	68a1      	ldr	r1, [r4, #8]
 8020bda:	9301      	str	r3, [sp, #4]
 8020bdc:	4620      	mov	r0, r4
 8020bde:	f001 fe9d 	bl	802291c <_vfiprintf_r>
 8020be2:	b002      	add	sp, #8
 8020be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020be8:	b004      	add	sp, #16
 8020bea:	4770      	bx	lr
 8020bec:	2000002c 	.word	0x2000002c

08020bf0 <putchar>:
 8020bf0:	4b09      	ldr	r3, [pc, #36]	; (8020c18 <putchar+0x28>)
 8020bf2:	b513      	push	{r0, r1, r4, lr}
 8020bf4:	681c      	ldr	r4, [r3, #0]
 8020bf6:	4601      	mov	r1, r0
 8020bf8:	b134      	cbz	r4, 8020c08 <putchar+0x18>
 8020bfa:	69a3      	ldr	r3, [r4, #24]
 8020bfc:	b923      	cbnz	r3, 8020c08 <putchar+0x18>
 8020bfe:	9001      	str	r0, [sp, #4]
 8020c00:	4620      	mov	r0, r4
 8020c02:	f001 f8d5 	bl	8021db0 <__sinit>
 8020c06:	9901      	ldr	r1, [sp, #4]
 8020c08:	68a2      	ldr	r2, [r4, #8]
 8020c0a:	4620      	mov	r0, r4
 8020c0c:	b002      	add	sp, #8
 8020c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020c12:	f001 bfb3 	b.w	8022b7c <_putc_r>
 8020c16:	bf00      	nop
 8020c18:	2000002c 	.word	0x2000002c

08020c1c <_puts_r>:
 8020c1c:	b570      	push	{r4, r5, r6, lr}
 8020c1e:	460e      	mov	r6, r1
 8020c20:	4605      	mov	r5, r0
 8020c22:	b118      	cbz	r0, 8020c2c <_puts_r+0x10>
 8020c24:	6983      	ldr	r3, [r0, #24]
 8020c26:	b90b      	cbnz	r3, 8020c2c <_puts_r+0x10>
 8020c28:	f001 f8c2 	bl	8021db0 <__sinit>
 8020c2c:	69ab      	ldr	r3, [r5, #24]
 8020c2e:	68ac      	ldr	r4, [r5, #8]
 8020c30:	b913      	cbnz	r3, 8020c38 <_puts_r+0x1c>
 8020c32:	4628      	mov	r0, r5
 8020c34:	f001 f8bc 	bl	8021db0 <__sinit>
 8020c38:	4b2c      	ldr	r3, [pc, #176]	; (8020cec <_puts_r+0xd0>)
 8020c3a:	429c      	cmp	r4, r3
 8020c3c:	d120      	bne.n	8020c80 <_puts_r+0x64>
 8020c3e:	686c      	ldr	r4, [r5, #4]
 8020c40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020c42:	07db      	lsls	r3, r3, #31
 8020c44:	d405      	bmi.n	8020c52 <_puts_r+0x36>
 8020c46:	89a3      	ldrh	r3, [r4, #12]
 8020c48:	0598      	lsls	r0, r3, #22
 8020c4a:	d402      	bmi.n	8020c52 <_puts_r+0x36>
 8020c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020c4e:	f001 f952 	bl	8021ef6 <__retarget_lock_acquire_recursive>
 8020c52:	89a3      	ldrh	r3, [r4, #12]
 8020c54:	0719      	lsls	r1, r3, #28
 8020c56:	d51d      	bpl.n	8020c94 <_puts_r+0x78>
 8020c58:	6923      	ldr	r3, [r4, #16]
 8020c5a:	b1db      	cbz	r3, 8020c94 <_puts_r+0x78>
 8020c5c:	3e01      	subs	r6, #1
 8020c5e:	68a3      	ldr	r3, [r4, #8]
 8020c60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020c64:	3b01      	subs	r3, #1
 8020c66:	60a3      	str	r3, [r4, #8]
 8020c68:	bb39      	cbnz	r1, 8020cba <_puts_r+0x9e>
 8020c6a:	2b00      	cmp	r3, #0
 8020c6c:	da38      	bge.n	8020ce0 <_puts_r+0xc4>
 8020c6e:	4622      	mov	r2, r4
 8020c70:	210a      	movs	r1, #10
 8020c72:	4628      	mov	r0, r5
 8020c74:	f000 f848 	bl	8020d08 <__swbuf_r>
 8020c78:	3001      	adds	r0, #1
 8020c7a:	d011      	beq.n	8020ca0 <_puts_r+0x84>
 8020c7c:	250a      	movs	r5, #10
 8020c7e:	e011      	b.n	8020ca4 <_puts_r+0x88>
 8020c80:	4b1b      	ldr	r3, [pc, #108]	; (8020cf0 <_puts_r+0xd4>)
 8020c82:	429c      	cmp	r4, r3
 8020c84:	d101      	bne.n	8020c8a <_puts_r+0x6e>
 8020c86:	68ac      	ldr	r4, [r5, #8]
 8020c88:	e7da      	b.n	8020c40 <_puts_r+0x24>
 8020c8a:	4b1a      	ldr	r3, [pc, #104]	; (8020cf4 <_puts_r+0xd8>)
 8020c8c:	429c      	cmp	r4, r3
 8020c8e:	bf08      	it	eq
 8020c90:	68ec      	ldreq	r4, [r5, #12]
 8020c92:	e7d5      	b.n	8020c40 <_puts_r+0x24>
 8020c94:	4621      	mov	r1, r4
 8020c96:	4628      	mov	r0, r5
 8020c98:	f000 f888 	bl	8020dac <__swsetup_r>
 8020c9c:	2800      	cmp	r0, #0
 8020c9e:	d0dd      	beq.n	8020c5c <_puts_r+0x40>
 8020ca0:	f04f 35ff 	mov.w	r5, #4294967295
 8020ca4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020ca6:	07da      	lsls	r2, r3, #31
 8020ca8:	d405      	bmi.n	8020cb6 <_puts_r+0x9a>
 8020caa:	89a3      	ldrh	r3, [r4, #12]
 8020cac:	059b      	lsls	r3, r3, #22
 8020cae:	d402      	bmi.n	8020cb6 <_puts_r+0x9a>
 8020cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020cb2:	f001 f921 	bl	8021ef8 <__retarget_lock_release_recursive>
 8020cb6:	4628      	mov	r0, r5
 8020cb8:	bd70      	pop	{r4, r5, r6, pc}
 8020cba:	2b00      	cmp	r3, #0
 8020cbc:	da04      	bge.n	8020cc8 <_puts_r+0xac>
 8020cbe:	69a2      	ldr	r2, [r4, #24]
 8020cc0:	429a      	cmp	r2, r3
 8020cc2:	dc06      	bgt.n	8020cd2 <_puts_r+0xb6>
 8020cc4:	290a      	cmp	r1, #10
 8020cc6:	d004      	beq.n	8020cd2 <_puts_r+0xb6>
 8020cc8:	6823      	ldr	r3, [r4, #0]
 8020cca:	1c5a      	adds	r2, r3, #1
 8020ccc:	6022      	str	r2, [r4, #0]
 8020cce:	7019      	strb	r1, [r3, #0]
 8020cd0:	e7c5      	b.n	8020c5e <_puts_r+0x42>
 8020cd2:	4622      	mov	r2, r4
 8020cd4:	4628      	mov	r0, r5
 8020cd6:	f000 f817 	bl	8020d08 <__swbuf_r>
 8020cda:	3001      	adds	r0, #1
 8020cdc:	d1bf      	bne.n	8020c5e <_puts_r+0x42>
 8020cde:	e7df      	b.n	8020ca0 <_puts_r+0x84>
 8020ce0:	6823      	ldr	r3, [r4, #0]
 8020ce2:	250a      	movs	r5, #10
 8020ce4:	1c5a      	adds	r2, r3, #1
 8020ce6:	6022      	str	r2, [r4, #0]
 8020ce8:	701d      	strb	r5, [r3, #0]
 8020cea:	e7db      	b.n	8020ca4 <_puts_r+0x88>
 8020cec:	08023800 	.word	0x08023800
 8020cf0:	08023820 	.word	0x08023820
 8020cf4:	080237e0 	.word	0x080237e0

08020cf8 <puts>:
 8020cf8:	4b02      	ldr	r3, [pc, #8]	; (8020d04 <puts+0xc>)
 8020cfa:	4601      	mov	r1, r0
 8020cfc:	6818      	ldr	r0, [r3, #0]
 8020cfe:	f7ff bf8d 	b.w	8020c1c <_puts_r>
 8020d02:	bf00      	nop
 8020d04:	2000002c 	.word	0x2000002c

08020d08 <__swbuf_r>:
 8020d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d0a:	460e      	mov	r6, r1
 8020d0c:	4614      	mov	r4, r2
 8020d0e:	4605      	mov	r5, r0
 8020d10:	b118      	cbz	r0, 8020d1a <__swbuf_r+0x12>
 8020d12:	6983      	ldr	r3, [r0, #24]
 8020d14:	b90b      	cbnz	r3, 8020d1a <__swbuf_r+0x12>
 8020d16:	f001 f84b 	bl	8021db0 <__sinit>
 8020d1a:	4b21      	ldr	r3, [pc, #132]	; (8020da0 <__swbuf_r+0x98>)
 8020d1c:	429c      	cmp	r4, r3
 8020d1e:	d12b      	bne.n	8020d78 <__swbuf_r+0x70>
 8020d20:	686c      	ldr	r4, [r5, #4]
 8020d22:	69a3      	ldr	r3, [r4, #24]
 8020d24:	60a3      	str	r3, [r4, #8]
 8020d26:	89a3      	ldrh	r3, [r4, #12]
 8020d28:	071a      	lsls	r2, r3, #28
 8020d2a:	d52f      	bpl.n	8020d8c <__swbuf_r+0x84>
 8020d2c:	6923      	ldr	r3, [r4, #16]
 8020d2e:	b36b      	cbz	r3, 8020d8c <__swbuf_r+0x84>
 8020d30:	6923      	ldr	r3, [r4, #16]
 8020d32:	6820      	ldr	r0, [r4, #0]
 8020d34:	1ac0      	subs	r0, r0, r3
 8020d36:	6963      	ldr	r3, [r4, #20]
 8020d38:	b2f6      	uxtb	r6, r6
 8020d3a:	4283      	cmp	r3, r0
 8020d3c:	4637      	mov	r7, r6
 8020d3e:	dc04      	bgt.n	8020d4a <__swbuf_r+0x42>
 8020d40:	4621      	mov	r1, r4
 8020d42:	4628      	mov	r0, r5
 8020d44:	f000 ffa0 	bl	8021c88 <_fflush_r>
 8020d48:	bb30      	cbnz	r0, 8020d98 <__swbuf_r+0x90>
 8020d4a:	68a3      	ldr	r3, [r4, #8]
 8020d4c:	3b01      	subs	r3, #1
 8020d4e:	60a3      	str	r3, [r4, #8]
 8020d50:	6823      	ldr	r3, [r4, #0]
 8020d52:	1c5a      	adds	r2, r3, #1
 8020d54:	6022      	str	r2, [r4, #0]
 8020d56:	701e      	strb	r6, [r3, #0]
 8020d58:	6963      	ldr	r3, [r4, #20]
 8020d5a:	3001      	adds	r0, #1
 8020d5c:	4283      	cmp	r3, r0
 8020d5e:	d004      	beq.n	8020d6a <__swbuf_r+0x62>
 8020d60:	89a3      	ldrh	r3, [r4, #12]
 8020d62:	07db      	lsls	r3, r3, #31
 8020d64:	d506      	bpl.n	8020d74 <__swbuf_r+0x6c>
 8020d66:	2e0a      	cmp	r6, #10
 8020d68:	d104      	bne.n	8020d74 <__swbuf_r+0x6c>
 8020d6a:	4621      	mov	r1, r4
 8020d6c:	4628      	mov	r0, r5
 8020d6e:	f000 ff8b 	bl	8021c88 <_fflush_r>
 8020d72:	b988      	cbnz	r0, 8020d98 <__swbuf_r+0x90>
 8020d74:	4638      	mov	r0, r7
 8020d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020d78:	4b0a      	ldr	r3, [pc, #40]	; (8020da4 <__swbuf_r+0x9c>)
 8020d7a:	429c      	cmp	r4, r3
 8020d7c:	d101      	bne.n	8020d82 <__swbuf_r+0x7a>
 8020d7e:	68ac      	ldr	r4, [r5, #8]
 8020d80:	e7cf      	b.n	8020d22 <__swbuf_r+0x1a>
 8020d82:	4b09      	ldr	r3, [pc, #36]	; (8020da8 <__swbuf_r+0xa0>)
 8020d84:	429c      	cmp	r4, r3
 8020d86:	bf08      	it	eq
 8020d88:	68ec      	ldreq	r4, [r5, #12]
 8020d8a:	e7ca      	b.n	8020d22 <__swbuf_r+0x1a>
 8020d8c:	4621      	mov	r1, r4
 8020d8e:	4628      	mov	r0, r5
 8020d90:	f000 f80c 	bl	8020dac <__swsetup_r>
 8020d94:	2800      	cmp	r0, #0
 8020d96:	d0cb      	beq.n	8020d30 <__swbuf_r+0x28>
 8020d98:	f04f 37ff 	mov.w	r7, #4294967295
 8020d9c:	e7ea      	b.n	8020d74 <__swbuf_r+0x6c>
 8020d9e:	bf00      	nop
 8020da0:	08023800 	.word	0x08023800
 8020da4:	08023820 	.word	0x08023820
 8020da8:	080237e0 	.word	0x080237e0

08020dac <__swsetup_r>:
 8020dac:	4b32      	ldr	r3, [pc, #200]	; (8020e78 <__swsetup_r+0xcc>)
 8020dae:	b570      	push	{r4, r5, r6, lr}
 8020db0:	681d      	ldr	r5, [r3, #0]
 8020db2:	4606      	mov	r6, r0
 8020db4:	460c      	mov	r4, r1
 8020db6:	b125      	cbz	r5, 8020dc2 <__swsetup_r+0x16>
 8020db8:	69ab      	ldr	r3, [r5, #24]
 8020dba:	b913      	cbnz	r3, 8020dc2 <__swsetup_r+0x16>
 8020dbc:	4628      	mov	r0, r5
 8020dbe:	f000 fff7 	bl	8021db0 <__sinit>
 8020dc2:	4b2e      	ldr	r3, [pc, #184]	; (8020e7c <__swsetup_r+0xd0>)
 8020dc4:	429c      	cmp	r4, r3
 8020dc6:	d10f      	bne.n	8020de8 <__swsetup_r+0x3c>
 8020dc8:	686c      	ldr	r4, [r5, #4]
 8020dca:	89a3      	ldrh	r3, [r4, #12]
 8020dcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020dd0:	0719      	lsls	r1, r3, #28
 8020dd2:	d42c      	bmi.n	8020e2e <__swsetup_r+0x82>
 8020dd4:	06dd      	lsls	r5, r3, #27
 8020dd6:	d411      	bmi.n	8020dfc <__swsetup_r+0x50>
 8020dd8:	2309      	movs	r3, #9
 8020dda:	6033      	str	r3, [r6, #0]
 8020ddc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020de0:	81a3      	strh	r3, [r4, #12]
 8020de2:	f04f 30ff 	mov.w	r0, #4294967295
 8020de6:	e03e      	b.n	8020e66 <__swsetup_r+0xba>
 8020de8:	4b25      	ldr	r3, [pc, #148]	; (8020e80 <__swsetup_r+0xd4>)
 8020dea:	429c      	cmp	r4, r3
 8020dec:	d101      	bne.n	8020df2 <__swsetup_r+0x46>
 8020dee:	68ac      	ldr	r4, [r5, #8]
 8020df0:	e7eb      	b.n	8020dca <__swsetup_r+0x1e>
 8020df2:	4b24      	ldr	r3, [pc, #144]	; (8020e84 <__swsetup_r+0xd8>)
 8020df4:	429c      	cmp	r4, r3
 8020df6:	bf08      	it	eq
 8020df8:	68ec      	ldreq	r4, [r5, #12]
 8020dfa:	e7e6      	b.n	8020dca <__swsetup_r+0x1e>
 8020dfc:	0758      	lsls	r0, r3, #29
 8020dfe:	d512      	bpl.n	8020e26 <__swsetup_r+0x7a>
 8020e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020e02:	b141      	cbz	r1, 8020e16 <__swsetup_r+0x6a>
 8020e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020e08:	4299      	cmp	r1, r3
 8020e0a:	d002      	beq.n	8020e12 <__swsetup_r+0x66>
 8020e0c:	4630      	mov	r0, r6
 8020e0e:	f001 fc7b 	bl	8022708 <_free_r>
 8020e12:	2300      	movs	r3, #0
 8020e14:	6363      	str	r3, [r4, #52]	; 0x34
 8020e16:	89a3      	ldrh	r3, [r4, #12]
 8020e18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020e1c:	81a3      	strh	r3, [r4, #12]
 8020e1e:	2300      	movs	r3, #0
 8020e20:	6063      	str	r3, [r4, #4]
 8020e22:	6923      	ldr	r3, [r4, #16]
 8020e24:	6023      	str	r3, [r4, #0]
 8020e26:	89a3      	ldrh	r3, [r4, #12]
 8020e28:	f043 0308 	orr.w	r3, r3, #8
 8020e2c:	81a3      	strh	r3, [r4, #12]
 8020e2e:	6923      	ldr	r3, [r4, #16]
 8020e30:	b94b      	cbnz	r3, 8020e46 <__swsetup_r+0x9a>
 8020e32:	89a3      	ldrh	r3, [r4, #12]
 8020e34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020e3c:	d003      	beq.n	8020e46 <__swsetup_r+0x9a>
 8020e3e:	4621      	mov	r1, r4
 8020e40:	4630      	mov	r0, r6
 8020e42:	f001 f87f 	bl	8021f44 <__smakebuf_r>
 8020e46:	89a0      	ldrh	r0, [r4, #12]
 8020e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020e4c:	f010 0301 	ands.w	r3, r0, #1
 8020e50:	d00a      	beq.n	8020e68 <__swsetup_r+0xbc>
 8020e52:	2300      	movs	r3, #0
 8020e54:	60a3      	str	r3, [r4, #8]
 8020e56:	6963      	ldr	r3, [r4, #20]
 8020e58:	425b      	negs	r3, r3
 8020e5a:	61a3      	str	r3, [r4, #24]
 8020e5c:	6923      	ldr	r3, [r4, #16]
 8020e5e:	b943      	cbnz	r3, 8020e72 <__swsetup_r+0xc6>
 8020e60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020e64:	d1ba      	bne.n	8020ddc <__swsetup_r+0x30>
 8020e66:	bd70      	pop	{r4, r5, r6, pc}
 8020e68:	0781      	lsls	r1, r0, #30
 8020e6a:	bf58      	it	pl
 8020e6c:	6963      	ldrpl	r3, [r4, #20]
 8020e6e:	60a3      	str	r3, [r4, #8]
 8020e70:	e7f4      	b.n	8020e5c <__swsetup_r+0xb0>
 8020e72:	2000      	movs	r0, #0
 8020e74:	e7f7      	b.n	8020e66 <__swsetup_r+0xba>
 8020e76:	bf00      	nop
 8020e78:	2000002c 	.word	0x2000002c
 8020e7c:	08023800 	.word	0x08023800
 8020e80:	08023820 	.word	0x08023820
 8020e84:	080237e0 	.word	0x080237e0

08020e88 <quorem>:
 8020e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e8c:	6903      	ldr	r3, [r0, #16]
 8020e8e:	690c      	ldr	r4, [r1, #16]
 8020e90:	42a3      	cmp	r3, r4
 8020e92:	4607      	mov	r7, r0
 8020e94:	f2c0 8081 	blt.w	8020f9a <quorem+0x112>
 8020e98:	3c01      	subs	r4, #1
 8020e9a:	f101 0814 	add.w	r8, r1, #20
 8020e9e:	f100 0514 	add.w	r5, r0, #20
 8020ea2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020ea6:	9301      	str	r3, [sp, #4]
 8020ea8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020eac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020eb0:	3301      	adds	r3, #1
 8020eb2:	429a      	cmp	r2, r3
 8020eb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020eb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020ebc:	fbb2 f6f3 	udiv	r6, r2, r3
 8020ec0:	d331      	bcc.n	8020f26 <quorem+0x9e>
 8020ec2:	f04f 0e00 	mov.w	lr, #0
 8020ec6:	4640      	mov	r0, r8
 8020ec8:	46ac      	mov	ip, r5
 8020eca:	46f2      	mov	sl, lr
 8020ecc:	f850 2b04 	ldr.w	r2, [r0], #4
 8020ed0:	b293      	uxth	r3, r2
 8020ed2:	fb06 e303 	mla	r3, r6, r3, lr
 8020ed6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8020eda:	b29b      	uxth	r3, r3
 8020edc:	ebaa 0303 	sub.w	r3, sl, r3
 8020ee0:	f8dc a000 	ldr.w	sl, [ip]
 8020ee4:	0c12      	lsrs	r2, r2, #16
 8020ee6:	fa13 f38a 	uxtah	r3, r3, sl
 8020eea:	fb06 e202 	mla	r2, r6, r2, lr
 8020eee:	9300      	str	r3, [sp, #0]
 8020ef0:	9b00      	ldr	r3, [sp, #0]
 8020ef2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020ef6:	b292      	uxth	r2, r2
 8020ef8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8020efc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020f00:	f8bd 3000 	ldrh.w	r3, [sp]
 8020f04:	4581      	cmp	r9, r0
 8020f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020f0a:	f84c 3b04 	str.w	r3, [ip], #4
 8020f0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8020f12:	d2db      	bcs.n	8020ecc <quorem+0x44>
 8020f14:	f855 300b 	ldr.w	r3, [r5, fp]
 8020f18:	b92b      	cbnz	r3, 8020f26 <quorem+0x9e>
 8020f1a:	9b01      	ldr	r3, [sp, #4]
 8020f1c:	3b04      	subs	r3, #4
 8020f1e:	429d      	cmp	r5, r3
 8020f20:	461a      	mov	r2, r3
 8020f22:	d32e      	bcc.n	8020f82 <quorem+0xfa>
 8020f24:	613c      	str	r4, [r7, #16]
 8020f26:	4638      	mov	r0, r7
 8020f28:	f001 fad6 	bl	80224d8 <__mcmp>
 8020f2c:	2800      	cmp	r0, #0
 8020f2e:	db24      	blt.n	8020f7a <quorem+0xf2>
 8020f30:	3601      	adds	r6, #1
 8020f32:	4628      	mov	r0, r5
 8020f34:	f04f 0c00 	mov.w	ip, #0
 8020f38:	f858 2b04 	ldr.w	r2, [r8], #4
 8020f3c:	f8d0 e000 	ldr.w	lr, [r0]
 8020f40:	b293      	uxth	r3, r2
 8020f42:	ebac 0303 	sub.w	r3, ip, r3
 8020f46:	0c12      	lsrs	r2, r2, #16
 8020f48:	fa13 f38e 	uxtah	r3, r3, lr
 8020f4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020f50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020f54:	b29b      	uxth	r3, r3
 8020f56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020f5a:	45c1      	cmp	r9, r8
 8020f5c:	f840 3b04 	str.w	r3, [r0], #4
 8020f60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8020f64:	d2e8      	bcs.n	8020f38 <quorem+0xb0>
 8020f66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020f6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020f6e:	b922      	cbnz	r2, 8020f7a <quorem+0xf2>
 8020f70:	3b04      	subs	r3, #4
 8020f72:	429d      	cmp	r5, r3
 8020f74:	461a      	mov	r2, r3
 8020f76:	d30a      	bcc.n	8020f8e <quorem+0x106>
 8020f78:	613c      	str	r4, [r7, #16]
 8020f7a:	4630      	mov	r0, r6
 8020f7c:	b003      	add	sp, #12
 8020f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f82:	6812      	ldr	r2, [r2, #0]
 8020f84:	3b04      	subs	r3, #4
 8020f86:	2a00      	cmp	r2, #0
 8020f88:	d1cc      	bne.n	8020f24 <quorem+0x9c>
 8020f8a:	3c01      	subs	r4, #1
 8020f8c:	e7c7      	b.n	8020f1e <quorem+0x96>
 8020f8e:	6812      	ldr	r2, [r2, #0]
 8020f90:	3b04      	subs	r3, #4
 8020f92:	2a00      	cmp	r2, #0
 8020f94:	d1f0      	bne.n	8020f78 <quorem+0xf0>
 8020f96:	3c01      	subs	r4, #1
 8020f98:	e7eb      	b.n	8020f72 <quorem+0xea>
 8020f9a:	2000      	movs	r0, #0
 8020f9c:	e7ee      	b.n	8020f7c <quorem+0xf4>
	...

08020fa0 <_dtoa_r>:
 8020fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fa4:	ed2d 8b04 	vpush	{d8-d9}
 8020fa8:	ec57 6b10 	vmov	r6, r7, d0
 8020fac:	b093      	sub	sp, #76	; 0x4c
 8020fae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8020fb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8020fb4:	9106      	str	r1, [sp, #24]
 8020fb6:	ee10 aa10 	vmov	sl, s0
 8020fba:	4604      	mov	r4, r0
 8020fbc:	9209      	str	r2, [sp, #36]	; 0x24
 8020fbe:	930c      	str	r3, [sp, #48]	; 0x30
 8020fc0:	46bb      	mov	fp, r7
 8020fc2:	b975      	cbnz	r5, 8020fe2 <_dtoa_r+0x42>
 8020fc4:	2010      	movs	r0, #16
 8020fc6:	f000 fffd 	bl	8021fc4 <malloc>
 8020fca:	4602      	mov	r2, r0
 8020fcc:	6260      	str	r0, [r4, #36]	; 0x24
 8020fce:	b920      	cbnz	r0, 8020fda <_dtoa_r+0x3a>
 8020fd0:	4ba7      	ldr	r3, [pc, #668]	; (8021270 <_dtoa_r+0x2d0>)
 8020fd2:	21ea      	movs	r1, #234	; 0xea
 8020fd4:	48a7      	ldr	r0, [pc, #668]	; (8021274 <_dtoa_r+0x2d4>)
 8020fd6:	f001 fe7f 	bl	8022cd8 <__assert_func>
 8020fda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8020fde:	6005      	str	r5, [r0, #0]
 8020fe0:	60c5      	str	r5, [r0, #12]
 8020fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020fe4:	6819      	ldr	r1, [r3, #0]
 8020fe6:	b151      	cbz	r1, 8020ffe <_dtoa_r+0x5e>
 8020fe8:	685a      	ldr	r2, [r3, #4]
 8020fea:	604a      	str	r2, [r1, #4]
 8020fec:	2301      	movs	r3, #1
 8020fee:	4093      	lsls	r3, r2
 8020ff0:	608b      	str	r3, [r1, #8]
 8020ff2:	4620      	mov	r0, r4
 8020ff4:	f001 f82e 	bl	8022054 <_Bfree>
 8020ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020ffa:	2200      	movs	r2, #0
 8020ffc:	601a      	str	r2, [r3, #0]
 8020ffe:	1e3b      	subs	r3, r7, #0
 8021000:	bfaa      	itet	ge
 8021002:	2300      	movge	r3, #0
 8021004:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8021008:	f8c8 3000 	strge.w	r3, [r8]
 802100c:	4b9a      	ldr	r3, [pc, #616]	; (8021278 <_dtoa_r+0x2d8>)
 802100e:	bfbc      	itt	lt
 8021010:	2201      	movlt	r2, #1
 8021012:	f8c8 2000 	strlt.w	r2, [r8]
 8021016:	ea33 030b 	bics.w	r3, r3, fp
 802101a:	d11b      	bne.n	8021054 <_dtoa_r+0xb4>
 802101c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802101e:	f242 730f 	movw	r3, #9999	; 0x270f
 8021022:	6013      	str	r3, [r2, #0]
 8021024:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8021028:	4333      	orrs	r3, r6
 802102a:	f000 8592 	beq.w	8021b52 <_dtoa_r+0xbb2>
 802102e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021030:	b963      	cbnz	r3, 802104c <_dtoa_r+0xac>
 8021032:	4b92      	ldr	r3, [pc, #584]	; (802127c <_dtoa_r+0x2dc>)
 8021034:	e022      	b.n	802107c <_dtoa_r+0xdc>
 8021036:	4b92      	ldr	r3, [pc, #584]	; (8021280 <_dtoa_r+0x2e0>)
 8021038:	9301      	str	r3, [sp, #4]
 802103a:	3308      	adds	r3, #8
 802103c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802103e:	6013      	str	r3, [r2, #0]
 8021040:	9801      	ldr	r0, [sp, #4]
 8021042:	b013      	add	sp, #76	; 0x4c
 8021044:	ecbd 8b04 	vpop	{d8-d9}
 8021048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802104c:	4b8b      	ldr	r3, [pc, #556]	; (802127c <_dtoa_r+0x2dc>)
 802104e:	9301      	str	r3, [sp, #4]
 8021050:	3303      	adds	r3, #3
 8021052:	e7f3      	b.n	802103c <_dtoa_r+0x9c>
 8021054:	2200      	movs	r2, #0
 8021056:	2300      	movs	r3, #0
 8021058:	4650      	mov	r0, sl
 802105a:	4659      	mov	r1, fp
 802105c:	f7df fd5c 	bl	8000b18 <__aeabi_dcmpeq>
 8021060:	ec4b ab19 	vmov	d9, sl, fp
 8021064:	4680      	mov	r8, r0
 8021066:	b158      	cbz	r0, 8021080 <_dtoa_r+0xe0>
 8021068:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802106a:	2301      	movs	r3, #1
 802106c:	6013      	str	r3, [r2, #0]
 802106e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021070:	2b00      	cmp	r3, #0
 8021072:	f000 856b 	beq.w	8021b4c <_dtoa_r+0xbac>
 8021076:	4883      	ldr	r0, [pc, #524]	; (8021284 <_dtoa_r+0x2e4>)
 8021078:	6018      	str	r0, [r3, #0]
 802107a:	1e43      	subs	r3, r0, #1
 802107c:	9301      	str	r3, [sp, #4]
 802107e:	e7df      	b.n	8021040 <_dtoa_r+0xa0>
 8021080:	ec4b ab10 	vmov	d0, sl, fp
 8021084:	aa10      	add	r2, sp, #64	; 0x40
 8021086:	a911      	add	r1, sp, #68	; 0x44
 8021088:	4620      	mov	r0, r4
 802108a:	f001 facb 	bl	8022624 <__d2b>
 802108e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8021092:	ee08 0a10 	vmov	s16, r0
 8021096:	2d00      	cmp	r5, #0
 8021098:	f000 8084 	beq.w	80211a4 <_dtoa_r+0x204>
 802109c:	ee19 3a90 	vmov	r3, s19
 80210a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80210a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80210a8:	4656      	mov	r6, sl
 80210aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80210ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80210b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80210b6:	4b74      	ldr	r3, [pc, #464]	; (8021288 <_dtoa_r+0x2e8>)
 80210b8:	2200      	movs	r2, #0
 80210ba:	4630      	mov	r0, r6
 80210bc:	4639      	mov	r1, r7
 80210be:	f7df f90b 	bl	80002d8 <__aeabi_dsub>
 80210c2:	a365      	add	r3, pc, #404	; (adr r3, 8021258 <_dtoa_r+0x2b8>)
 80210c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210c8:	f7df fabe 	bl	8000648 <__aeabi_dmul>
 80210cc:	a364      	add	r3, pc, #400	; (adr r3, 8021260 <_dtoa_r+0x2c0>)
 80210ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210d2:	f7df f903 	bl	80002dc <__adddf3>
 80210d6:	4606      	mov	r6, r0
 80210d8:	4628      	mov	r0, r5
 80210da:	460f      	mov	r7, r1
 80210dc:	f7df fa4a 	bl	8000574 <__aeabi_i2d>
 80210e0:	a361      	add	r3, pc, #388	; (adr r3, 8021268 <_dtoa_r+0x2c8>)
 80210e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210e6:	f7df faaf 	bl	8000648 <__aeabi_dmul>
 80210ea:	4602      	mov	r2, r0
 80210ec:	460b      	mov	r3, r1
 80210ee:	4630      	mov	r0, r6
 80210f0:	4639      	mov	r1, r7
 80210f2:	f7df f8f3 	bl	80002dc <__adddf3>
 80210f6:	4606      	mov	r6, r0
 80210f8:	460f      	mov	r7, r1
 80210fa:	f7df fd55 	bl	8000ba8 <__aeabi_d2iz>
 80210fe:	2200      	movs	r2, #0
 8021100:	9000      	str	r0, [sp, #0]
 8021102:	2300      	movs	r3, #0
 8021104:	4630      	mov	r0, r6
 8021106:	4639      	mov	r1, r7
 8021108:	f7df fd10 	bl	8000b2c <__aeabi_dcmplt>
 802110c:	b150      	cbz	r0, 8021124 <_dtoa_r+0x184>
 802110e:	9800      	ldr	r0, [sp, #0]
 8021110:	f7df fa30 	bl	8000574 <__aeabi_i2d>
 8021114:	4632      	mov	r2, r6
 8021116:	463b      	mov	r3, r7
 8021118:	f7df fcfe 	bl	8000b18 <__aeabi_dcmpeq>
 802111c:	b910      	cbnz	r0, 8021124 <_dtoa_r+0x184>
 802111e:	9b00      	ldr	r3, [sp, #0]
 8021120:	3b01      	subs	r3, #1
 8021122:	9300      	str	r3, [sp, #0]
 8021124:	9b00      	ldr	r3, [sp, #0]
 8021126:	2b16      	cmp	r3, #22
 8021128:	d85a      	bhi.n	80211e0 <_dtoa_r+0x240>
 802112a:	9a00      	ldr	r2, [sp, #0]
 802112c:	4b57      	ldr	r3, [pc, #348]	; (802128c <_dtoa_r+0x2ec>)
 802112e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021136:	ec51 0b19 	vmov	r0, r1, d9
 802113a:	f7df fcf7 	bl	8000b2c <__aeabi_dcmplt>
 802113e:	2800      	cmp	r0, #0
 8021140:	d050      	beq.n	80211e4 <_dtoa_r+0x244>
 8021142:	9b00      	ldr	r3, [sp, #0]
 8021144:	3b01      	subs	r3, #1
 8021146:	9300      	str	r3, [sp, #0]
 8021148:	2300      	movs	r3, #0
 802114a:	930b      	str	r3, [sp, #44]	; 0x2c
 802114c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802114e:	1b5d      	subs	r5, r3, r5
 8021150:	1e6b      	subs	r3, r5, #1
 8021152:	9305      	str	r3, [sp, #20]
 8021154:	bf45      	ittet	mi
 8021156:	f1c5 0301 	rsbmi	r3, r5, #1
 802115a:	9304      	strmi	r3, [sp, #16]
 802115c:	2300      	movpl	r3, #0
 802115e:	2300      	movmi	r3, #0
 8021160:	bf4c      	ite	mi
 8021162:	9305      	strmi	r3, [sp, #20]
 8021164:	9304      	strpl	r3, [sp, #16]
 8021166:	9b00      	ldr	r3, [sp, #0]
 8021168:	2b00      	cmp	r3, #0
 802116a:	db3d      	blt.n	80211e8 <_dtoa_r+0x248>
 802116c:	9b05      	ldr	r3, [sp, #20]
 802116e:	9a00      	ldr	r2, [sp, #0]
 8021170:	920a      	str	r2, [sp, #40]	; 0x28
 8021172:	4413      	add	r3, r2
 8021174:	9305      	str	r3, [sp, #20]
 8021176:	2300      	movs	r3, #0
 8021178:	9307      	str	r3, [sp, #28]
 802117a:	9b06      	ldr	r3, [sp, #24]
 802117c:	2b09      	cmp	r3, #9
 802117e:	f200 8089 	bhi.w	8021294 <_dtoa_r+0x2f4>
 8021182:	2b05      	cmp	r3, #5
 8021184:	bfc4      	itt	gt
 8021186:	3b04      	subgt	r3, #4
 8021188:	9306      	strgt	r3, [sp, #24]
 802118a:	9b06      	ldr	r3, [sp, #24]
 802118c:	f1a3 0302 	sub.w	r3, r3, #2
 8021190:	bfcc      	ite	gt
 8021192:	2500      	movgt	r5, #0
 8021194:	2501      	movle	r5, #1
 8021196:	2b03      	cmp	r3, #3
 8021198:	f200 8087 	bhi.w	80212aa <_dtoa_r+0x30a>
 802119c:	e8df f003 	tbb	[pc, r3]
 80211a0:	59383a2d 	.word	0x59383a2d
 80211a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80211a8:	441d      	add	r5, r3
 80211aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80211ae:	2b20      	cmp	r3, #32
 80211b0:	bfc1      	itttt	gt
 80211b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80211b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80211ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80211be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80211c2:	bfda      	itte	le
 80211c4:	f1c3 0320 	rsble	r3, r3, #32
 80211c8:	fa06 f003 	lslle.w	r0, r6, r3
 80211cc:	4318      	orrgt	r0, r3
 80211ce:	f7df f9c1 	bl	8000554 <__aeabi_ui2d>
 80211d2:	2301      	movs	r3, #1
 80211d4:	4606      	mov	r6, r0
 80211d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80211da:	3d01      	subs	r5, #1
 80211dc:	930e      	str	r3, [sp, #56]	; 0x38
 80211de:	e76a      	b.n	80210b6 <_dtoa_r+0x116>
 80211e0:	2301      	movs	r3, #1
 80211e2:	e7b2      	b.n	802114a <_dtoa_r+0x1aa>
 80211e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80211e6:	e7b1      	b.n	802114c <_dtoa_r+0x1ac>
 80211e8:	9b04      	ldr	r3, [sp, #16]
 80211ea:	9a00      	ldr	r2, [sp, #0]
 80211ec:	1a9b      	subs	r3, r3, r2
 80211ee:	9304      	str	r3, [sp, #16]
 80211f0:	4253      	negs	r3, r2
 80211f2:	9307      	str	r3, [sp, #28]
 80211f4:	2300      	movs	r3, #0
 80211f6:	930a      	str	r3, [sp, #40]	; 0x28
 80211f8:	e7bf      	b.n	802117a <_dtoa_r+0x1da>
 80211fa:	2300      	movs	r3, #0
 80211fc:	9308      	str	r3, [sp, #32]
 80211fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021200:	2b00      	cmp	r3, #0
 8021202:	dc55      	bgt.n	80212b0 <_dtoa_r+0x310>
 8021204:	2301      	movs	r3, #1
 8021206:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802120a:	461a      	mov	r2, r3
 802120c:	9209      	str	r2, [sp, #36]	; 0x24
 802120e:	e00c      	b.n	802122a <_dtoa_r+0x28a>
 8021210:	2301      	movs	r3, #1
 8021212:	e7f3      	b.n	80211fc <_dtoa_r+0x25c>
 8021214:	2300      	movs	r3, #0
 8021216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021218:	9308      	str	r3, [sp, #32]
 802121a:	9b00      	ldr	r3, [sp, #0]
 802121c:	4413      	add	r3, r2
 802121e:	9302      	str	r3, [sp, #8]
 8021220:	3301      	adds	r3, #1
 8021222:	2b01      	cmp	r3, #1
 8021224:	9303      	str	r3, [sp, #12]
 8021226:	bfb8      	it	lt
 8021228:	2301      	movlt	r3, #1
 802122a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802122c:	2200      	movs	r2, #0
 802122e:	6042      	str	r2, [r0, #4]
 8021230:	2204      	movs	r2, #4
 8021232:	f102 0614 	add.w	r6, r2, #20
 8021236:	429e      	cmp	r6, r3
 8021238:	6841      	ldr	r1, [r0, #4]
 802123a:	d93d      	bls.n	80212b8 <_dtoa_r+0x318>
 802123c:	4620      	mov	r0, r4
 802123e:	f000 fec9 	bl	8021fd4 <_Balloc>
 8021242:	9001      	str	r0, [sp, #4]
 8021244:	2800      	cmp	r0, #0
 8021246:	d13b      	bne.n	80212c0 <_dtoa_r+0x320>
 8021248:	4b11      	ldr	r3, [pc, #68]	; (8021290 <_dtoa_r+0x2f0>)
 802124a:	4602      	mov	r2, r0
 802124c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8021250:	e6c0      	b.n	8020fd4 <_dtoa_r+0x34>
 8021252:	2301      	movs	r3, #1
 8021254:	e7df      	b.n	8021216 <_dtoa_r+0x276>
 8021256:	bf00      	nop
 8021258:	636f4361 	.word	0x636f4361
 802125c:	3fd287a7 	.word	0x3fd287a7
 8021260:	8b60c8b3 	.word	0x8b60c8b3
 8021264:	3fc68a28 	.word	0x3fc68a28
 8021268:	509f79fb 	.word	0x509f79fb
 802126c:	3fd34413 	.word	0x3fd34413
 8021270:	0802375d 	.word	0x0802375d
 8021274:	08023774 	.word	0x08023774
 8021278:	7ff00000 	.word	0x7ff00000
 802127c:	08023759 	.word	0x08023759
 8021280:	08023750 	.word	0x08023750
 8021284:	0802372d 	.word	0x0802372d
 8021288:	3ff80000 	.word	0x3ff80000
 802128c:	080238c8 	.word	0x080238c8
 8021290:	080237cf 	.word	0x080237cf
 8021294:	2501      	movs	r5, #1
 8021296:	2300      	movs	r3, #0
 8021298:	9306      	str	r3, [sp, #24]
 802129a:	9508      	str	r5, [sp, #32]
 802129c:	f04f 33ff 	mov.w	r3, #4294967295
 80212a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80212a4:	2200      	movs	r2, #0
 80212a6:	2312      	movs	r3, #18
 80212a8:	e7b0      	b.n	802120c <_dtoa_r+0x26c>
 80212aa:	2301      	movs	r3, #1
 80212ac:	9308      	str	r3, [sp, #32]
 80212ae:	e7f5      	b.n	802129c <_dtoa_r+0x2fc>
 80212b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80212b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80212b6:	e7b8      	b.n	802122a <_dtoa_r+0x28a>
 80212b8:	3101      	adds	r1, #1
 80212ba:	6041      	str	r1, [r0, #4]
 80212bc:	0052      	lsls	r2, r2, #1
 80212be:	e7b8      	b.n	8021232 <_dtoa_r+0x292>
 80212c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80212c2:	9a01      	ldr	r2, [sp, #4]
 80212c4:	601a      	str	r2, [r3, #0]
 80212c6:	9b03      	ldr	r3, [sp, #12]
 80212c8:	2b0e      	cmp	r3, #14
 80212ca:	f200 809d 	bhi.w	8021408 <_dtoa_r+0x468>
 80212ce:	2d00      	cmp	r5, #0
 80212d0:	f000 809a 	beq.w	8021408 <_dtoa_r+0x468>
 80212d4:	9b00      	ldr	r3, [sp, #0]
 80212d6:	2b00      	cmp	r3, #0
 80212d8:	dd32      	ble.n	8021340 <_dtoa_r+0x3a0>
 80212da:	4ab7      	ldr	r2, [pc, #732]	; (80215b8 <_dtoa_r+0x618>)
 80212dc:	f003 030f 	and.w	r3, r3, #15
 80212e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80212e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80212e8:	9b00      	ldr	r3, [sp, #0]
 80212ea:	05d8      	lsls	r0, r3, #23
 80212ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80212f0:	d516      	bpl.n	8021320 <_dtoa_r+0x380>
 80212f2:	4bb2      	ldr	r3, [pc, #712]	; (80215bc <_dtoa_r+0x61c>)
 80212f4:	ec51 0b19 	vmov	r0, r1, d9
 80212f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80212fc:	f7df face 	bl	800089c <__aeabi_ddiv>
 8021300:	f007 070f 	and.w	r7, r7, #15
 8021304:	4682      	mov	sl, r0
 8021306:	468b      	mov	fp, r1
 8021308:	2503      	movs	r5, #3
 802130a:	4eac      	ldr	r6, [pc, #688]	; (80215bc <_dtoa_r+0x61c>)
 802130c:	b957      	cbnz	r7, 8021324 <_dtoa_r+0x384>
 802130e:	4642      	mov	r2, r8
 8021310:	464b      	mov	r3, r9
 8021312:	4650      	mov	r0, sl
 8021314:	4659      	mov	r1, fp
 8021316:	f7df fac1 	bl	800089c <__aeabi_ddiv>
 802131a:	4682      	mov	sl, r0
 802131c:	468b      	mov	fp, r1
 802131e:	e028      	b.n	8021372 <_dtoa_r+0x3d2>
 8021320:	2502      	movs	r5, #2
 8021322:	e7f2      	b.n	802130a <_dtoa_r+0x36a>
 8021324:	07f9      	lsls	r1, r7, #31
 8021326:	d508      	bpl.n	802133a <_dtoa_r+0x39a>
 8021328:	4640      	mov	r0, r8
 802132a:	4649      	mov	r1, r9
 802132c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8021330:	f7df f98a 	bl	8000648 <__aeabi_dmul>
 8021334:	3501      	adds	r5, #1
 8021336:	4680      	mov	r8, r0
 8021338:	4689      	mov	r9, r1
 802133a:	107f      	asrs	r7, r7, #1
 802133c:	3608      	adds	r6, #8
 802133e:	e7e5      	b.n	802130c <_dtoa_r+0x36c>
 8021340:	f000 809b 	beq.w	802147a <_dtoa_r+0x4da>
 8021344:	9b00      	ldr	r3, [sp, #0]
 8021346:	4f9d      	ldr	r7, [pc, #628]	; (80215bc <_dtoa_r+0x61c>)
 8021348:	425e      	negs	r6, r3
 802134a:	4b9b      	ldr	r3, [pc, #620]	; (80215b8 <_dtoa_r+0x618>)
 802134c:	f006 020f 	and.w	r2, r6, #15
 8021350:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021358:	ec51 0b19 	vmov	r0, r1, d9
 802135c:	f7df f974 	bl	8000648 <__aeabi_dmul>
 8021360:	1136      	asrs	r6, r6, #4
 8021362:	4682      	mov	sl, r0
 8021364:	468b      	mov	fp, r1
 8021366:	2300      	movs	r3, #0
 8021368:	2502      	movs	r5, #2
 802136a:	2e00      	cmp	r6, #0
 802136c:	d17a      	bne.n	8021464 <_dtoa_r+0x4c4>
 802136e:	2b00      	cmp	r3, #0
 8021370:	d1d3      	bne.n	802131a <_dtoa_r+0x37a>
 8021372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021374:	2b00      	cmp	r3, #0
 8021376:	f000 8082 	beq.w	802147e <_dtoa_r+0x4de>
 802137a:	4b91      	ldr	r3, [pc, #580]	; (80215c0 <_dtoa_r+0x620>)
 802137c:	2200      	movs	r2, #0
 802137e:	4650      	mov	r0, sl
 8021380:	4659      	mov	r1, fp
 8021382:	f7df fbd3 	bl	8000b2c <__aeabi_dcmplt>
 8021386:	2800      	cmp	r0, #0
 8021388:	d079      	beq.n	802147e <_dtoa_r+0x4de>
 802138a:	9b03      	ldr	r3, [sp, #12]
 802138c:	2b00      	cmp	r3, #0
 802138e:	d076      	beq.n	802147e <_dtoa_r+0x4de>
 8021390:	9b02      	ldr	r3, [sp, #8]
 8021392:	2b00      	cmp	r3, #0
 8021394:	dd36      	ble.n	8021404 <_dtoa_r+0x464>
 8021396:	9b00      	ldr	r3, [sp, #0]
 8021398:	4650      	mov	r0, sl
 802139a:	4659      	mov	r1, fp
 802139c:	1e5f      	subs	r7, r3, #1
 802139e:	2200      	movs	r2, #0
 80213a0:	4b88      	ldr	r3, [pc, #544]	; (80215c4 <_dtoa_r+0x624>)
 80213a2:	f7df f951 	bl	8000648 <__aeabi_dmul>
 80213a6:	9e02      	ldr	r6, [sp, #8]
 80213a8:	4682      	mov	sl, r0
 80213aa:	468b      	mov	fp, r1
 80213ac:	3501      	adds	r5, #1
 80213ae:	4628      	mov	r0, r5
 80213b0:	f7df f8e0 	bl	8000574 <__aeabi_i2d>
 80213b4:	4652      	mov	r2, sl
 80213b6:	465b      	mov	r3, fp
 80213b8:	f7df f946 	bl	8000648 <__aeabi_dmul>
 80213bc:	4b82      	ldr	r3, [pc, #520]	; (80215c8 <_dtoa_r+0x628>)
 80213be:	2200      	movs	r2, #0
 80213c0:	f7de ff8c 	bl	80002dc <__adddf3>
 80213c4:	46d0      	mov	r8, sl
 80213c6:	46d9      	mov	r9, fp
 80213c8:	4682      	mov	sl, r0
 80213ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80213ce:	2e00      	cmp	r6, #0
 80213d0:	d158      	bne.n	8021484 <_dtoa_r+0x4e4>
 80213d2:	4b7e      	ldr	r3, [pc, #504]	; (80215cc <_dtoa_r+0x62c>)
 80213d4:	2200      	movs	r2, #0
 80213d6:	4640      	mov	r0, r8
 80213d8:	4649      	mov	r1, r9
 80213da:	f7de ff7d 	bl	80002d8 <__aeabi_dsub>
 80213de:	4652      	mov	r2, sl
 80213e0:	465b      	mov	r3, fp
 80213e2:	4680      	mov	r8, r0
 80213e4:	4689      	mov	r9, r1
 80213e6:	f7df fbbf 	bl	8000b68 <__aeabi_dcmpgt>
 80213ea:	2800      	cmp	r0, #0
 80213ec:	f040 8295 	bne.w	802191a <_dtoa_r+0x97a>
 80213f0:	4652      	mov	r2, sl
 80213f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80213f6:	4640      	mov	r0, r8
 80213f8:	4649      	mov	r1, r9
 80213fa:	f7df fb97 	bl	8000b2c <__aeabi_dcmplt>
 80213fe:	2800      	cmp	r0, #0
 8021400:	f040 8289 	bne.w	8021916 <_dtoa_r+0x976>
 8021404:	ec5b ab19 	vmov	sl, fp, d9
 8021408:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802140a:	2b00      	cmp	r3, #0
 802140c:	f2c0 8148 	blt.w	80216a0 <_dtoa_r+0x700>
 8021410:	9a00      	ldr	r2, [sp, #0]
 8021412:	2a0e      	cmp	r2, #14
 8021414:	f300 8144 	bgt.w	80216a0 <_dtoa_r+0x700>
 8021418:	4b67      	ldr	r3, [pc, #412]	; (80215b8 <_dtoa_r+0x618>)
 802141a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802141e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021424:	2b00      	cmp	r3, #0
 8021426:	f280 80d5 	bge.w	80215d4 <_dtoa_r+0x634>
 802142a:	9b03      	ldr	r3, [sp, #12]
 802142c:	2b00      	cmp	r3, #0
 802142e:	f300 80d1 	bgt.w	80215d4 <_dtoa_r+0x634>
 8021432:	f040 826f 	bne.w	8021914 <_dtoa_r+0x974>
 8021436:	4b65      	ldr	r3, [pc, #404]	; (80215cc <_dtoa_r+0x62c>)
 8021438:	2200      	movs	r2, #0
 802143a:	4640      	mov	r0, r8
 802143c:	4649      	mov	r1, r9
 802143e:	f7df f903 	bl	8000648 <__aeabi_dmul>
 8021442:	4652      	mov	r2, sl
 8021444:	465b      	mov	r3, fp
 8021446:	f7df fb85 	bl	8000b54 <__aeabi_dcmpge>
 802144a:	9e03      	ldr	r6, [sp, #12]
 802144c:	4637      	mov	r7, r6
 802144e:	2800      	cmp	r0, #0
 8021450:	f040 8245 	bne.w	80218de <_dtoa_r+0x93e>
 8021454:	9d01      	ldr	r5, [sp, #4]
 8021456:	2331      	movs	r3, #49	; 0x31
 8021458:	f805 3b01 	strb.w	r3, [r5], #1
 802145c:	9b00      	ldr	r3, [sp, #0]
 802145e:	3301      	adds	r3, #1
 8021460:	9300      	str	r3, [sp, #0]
 8021462:	e240      	b.n	80218e6 <_dtoa_r+0x946>
 8021464:	07f2      	lsls	r2, r6, #31
 8021466:	d505      	bpl.n	8021474 <_dtoa_r+0x4d4>
 8021468:	e9d7 2300 	ldrd	r2, r3, [r7]
 802146c:	f7df f8ec 	bl	8000648 <__aeabi_dmul>
 8021470:	3501      	adds	r5, #1
 8021472:	2301      	movs	r3, #1
 8021474:	1076      	asrs	r6, r6, #1
 8021476:	3708      	adds	r7, #8
 8021478:	e777      	b.n	802136a <_dtoa_r+0x3ca>
 802147a:	2502      	movs	r5, #2
 802147c:	e779      	b.n	8021372 <_dtoa_r+0x3d2>
 802147e:	9f00      	ldr	r7, [sp, #0]
 8021480:	9e03      	ldr	r6, [sp, #12]
 8021482:	e794      	b.n	80213ae <_dtoa_r+0x40e>
 8021484:	9901      	ldr	r1, [sp, #4]
 8021486:	4b4c      	ldr	r3, [pc, #304]	; (80215b8 <_dtoa_r+0x618>)
 8021488:	4431      	add	r1, r6
 802148a:	910d      	str	r1, [sp, #52]	; 0x34
 802148c:	9908      	ldr	r1, [sp, #32]
 802148e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8021492:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8021496:	2900      	cmp	r1, #0
 8021498:	d043      	beq.n	8021522 <_dtoa_r+0x582>
 802149a:	494d      	ldr	r1, [pc, #308]	; (80215d0 <_dtoa_r+0x630>)
 802149c:	2000      	movs	r0, #0
 802149e:	f7df f9fd 	bl	800089c <__aeabi_ddiv>
 80214a2:	4652      	mov	r2, sl
 80214a4:	465b      	mov	r3, fp
 80214a6:	f7de ff17 	bl	80002d8 <__aeabi_dsub>
 80214aa:	9d01      	ldr	r5, [sp, #4]
 80214ac:	4682      	mov	sl, r0
 80214ae:	468b      	mov	fp, r1
 80214b0:	4649      	mov	r1, r9
 80214b2:	4640      	mov	r0, r8
 80214b4:	f7df fb78 	bl	8000ba8 <__aeabi_d2iz>
 80214b8:	4606      	mov	r6, r0
 80214ba:	f7df f85b 	bl	8000574 <__aeabi_i2d>
 80214be:	4602      	mov	r2, r0
 80214c0:	460b      	mov	r3, r1
 80214c2:	4640      	mov	r0, r8
 80214c4:	4649      	mov	r1, r9
 80214c6:	f7de ff07 	bl	80002d8 <__aeabi_dsub>
 80214ca:	3630      	adds	r6, #48	; 0x30
 80214cc:	f805 6b01 	strb.w	r6, [r5], #1
 80214d0:	4652      	mov	r2, sl
 80214d2:	465b      	mov	r3, fp
 80214d4:	4680      	mov	r8, r0
 80214d6:	4689      	mov	r9, r1
 80214d8:	f7df fb28 	bl	8000b2c <__aeabi_dcmplt>
 80214dc:	2800      	cmp	r0, #0
 80214de:	d163      	bne.n	80215a8 <_dtoa_r+0x608>
 80214e0:	4642      	mov	r2, r8
 80214e2:	464b      	mov	r3, r9
 80214e4:	4936      	ldr	r1, [pc, #216]	; (80215c0 <_dtoa_r+0x620>)
 80214e6:	2000      	movs	r0, #0
 80214e8:	f7de fef6 	bl	80002d8 <__aeabi_dsub>
 80214ec:	4652      	mov	r2, sl
 80214ee:	465b      	mov	r3, fp
 80214f0:	f7df fb1c 	bl	8000b2c <__aeabi_dcmplt>
 80214f4:	2800      	cmp	r0, #0
 80214f6:	f040 80b5 	bne.w	8021664 <_dtoa_r+0x6c4>
 80214fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80214fc:	429d      	cmp	r5, r3
 80214fe:	d081      	beq.n	8021404 <_dtoa_r+0x464>
 8021500:	4b30      	ldr	r3, [pc, #192]	; (80215c4 <_dtoa_r+0x624>)
 8021502:	2200      	movs	r2, #0
 8021504:	4650      	mov	r0, sl
 8021506:	4659      	mov	r1, fp
 8021508:	f7df f89e 	bl	8000648 <__aeabi_dmul>
 802150c:	4b2d      	ldr	r3, [pc, #180]	; (80215c4 <_dtoa_r+0x624>)
 802150e:	4682      	mov	sl, r0
 8021510:	468b      	mov	fp, r1
 8021512:	4640      	mov	r0, r8
 8021514:	4649      	mov	r1, r9
 8021516:	2200      	movs	r2, #0
 8021518:	f7df f896 	bl	8000648 <__aeabi_dmul>
 802151c:	4680      	mov	r8, r0
 802151e:	4689      	mov	r9, r1
 8021520:	e7c6      	b.n	80214b0 <_dtoa_r+0x510>
 8021522:	4650      	mov	r0, sl
 8021524:	4659      	mov	r1, fp
 8021526:	f7df f88f 	bl	8000648 <__aeabi_dmul>
 802152a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802152c:	9d01      	ldr	r5, [sp, #4]
 802152e:	930f      	str	r3, [sp, #60]	; 0x3c
 8021530:	4682      	mov	sl, r0
 8021532:	468b      	mov	fp, r1
 8021534:	4649      	mov	r1, r9
 8021536:	4640      	mov	r0, r8
 8021538:	f7df fb36 	bl	8000ba8 <__aeabi_d2iz>
 802153c:	4606      	mov	r6, r0
 802153e:	f7df f819 	bl	8000574 <__aeabi_i2d>
 8021542:	3630      	adds	r6, #48	; 0x30
 8021544:	4602      	mov	r2, r0
 8021546:	460b      	mov	r3, r1
 8021548:	4640      	mov	r0, r8
 802154a:	4649      	mov	r1, r9
 802154c:	f7de fec4 	bl	80002d8 <__aeabi_dsub>
 8021550:	f805 6b01 	strb.w	r6, [r5], #1
 8021554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021556:	429d      	cmp	r5, r3
 8021558:	4680      	mov	r8, r0
 802155a:	4689      	mov	r9, r1
 802155c:	f04f 0200 	mov.w	r2, #0
 8021560:	d124      	bne.n	80215ac <_dtoa_r+0x60c>
 8021562:	4b1b      	ldr	r3, [pc, #108]	; (80215d0 <_dtoa_r+0x630>)
 8021564:	4650      	mov	r0, sl
 8021566:	4659      	mov	r1, fp
 8021568:	f7de feb8 	bl	80002dc <__adddf3>
 802156c:	4602      	mov	r2, r0
 802156e:	460b      	mov	r3, r1
 8021570:	4640      	mov	r0, r8
 8021572:	4649      	mov	r1, r9
 8021574:	f7df faf8 	bl	8000b68 <__aeabi_dcmpgt>
 8021578:	2800      	cmp	r0, #0
 802157a:	d173      	bne.n	8021664 <_dtoa_r+0x6c4>
 802157c:	4652      	mov	r2, sl
 802157e:	465b      	mov	r3, fp
 8021580:	4913      	ldr	r1, [pc, #76]	; (80215d0 <_dtoa_r+0x630>)
 8021582:	2000      	movs	r0, #0
 8021584:	f7de fea8 	bl	80002d8 <__aeabi_dsub>
 8021588:	4602      	mov	r2, r0
 802158a:	460b      	mov	r3, r1
 802158c:	4640      	mov	r0, r8
 802158e:	4649      	mov	r1, r9
 8021590:	f7df facc 	bl	8000b2c <__aeabi_dcmplt>
 8021594:	2800      	cmp	r0, #0
 8021596:	f43f af35 	beq.w	8021404 <_dtoa_r+0x464>
 802159a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802159c:	1e6b      	subs	r3, r5, #1
 802159e:	930f      	str	r3, [sp, #60]	; 0x3c
 80215a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80215a4:	2b30      	cmp	r3, #48	; 0x30
 80215a6:	d0f8      	beq.n	802159a <_dtoa_r+0x5fa>
 80215a8:	9700      	str	r7, [sp, #0]
 80215aa:	e049      	b.n	8021640 <_dtoa_r+0x6a0>
 80215ac:	4b05      	ldr	r3, [pc, #20]	; (80215c4 <_dtoa_r+0x624>)
 80215ae:	f7df f84b 	bl	8000648 <__aeabi_dmul>
 80215b2:	4680      	mov	r8, r0
 80215b4:	4689      	mov	r9, r1
 80215b6:	e7bd      	b.n	8021534 <_dtoa_r+0x594>
 80215b8:	080238c8 	.word	0x080238c8
 80215bc:	080238a0 	.word	0x080238a0
 80215c0:	3ff00000 	.word	0x3ff00000
 80215c4:	40240000 	.word	0x40240000
 80215c8:	401c0000 	.word	0x401c0000
 80215cc:	40140000 	.word	0x40140000
 80215d0:	3fe00000 	.word	0x3fe00000
 80215d4:	9d01      	ldr	r5, [sp, #4]
 80215d6:	4656      	mov	r6, sl
 80215d8:	465f      	mov	r7, fp
 80215da:	4642      	mov	r2, r8
 80215dc:	464b      	mov	r3, r9
 80215de:	4630      	mov	r0, r6
 80215e0:	4639      	mov	r1, r7
 80215e2:	f7df f95b 	bl	800089c <__aeabi_ddiv>
 80215e6:	f7df fadf 	bl	8000ba8 <__aeabi_d2iz>
 80215ea:	4682      	mov	sl, r0
 80215ec:	f7de ffc2 	bl	8000574 <__aeabi_i2d>
 80215f0:	4642      	mov	r2, r8
 80215f2:	464b      	mov	r3, r9
 80215f4:	f7df f828 	bl	8000648 <__aeabi_dmul>
 80215f8:	4602      	mov	r2, r0
 80215fa:	460b      	mov	r3, r1
 80215fc:	4630      	mov	r0, r6
 80215fe:	4639      	mov	r1, r7
 8021600:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8021604:	f7de fe68 	bl	80002d8 <__aeabi_dsub>
 8021608:	f805 6b01 	strb.w	r6, [r5], #1
 802160c:	9e01      	ldr	r6, [sp, #4]
 802160e:	9f03      	ldr	r7, [sp, #12]
 8021610:	1bae      	subs	r6, r5, r6
 8021612:	42b7      	cmp	r7, r6
 8021614:	4602      	mov	r2, r0
 8021616:	460b      	mov	r3, r1
 8021618:	d135      	bne.n	8021686 <_dtoa_r+0x6e6>
 802161a:	f7de fe5f 	bl	80002dc <__adddf3>
 802161e:	4642      	mov	r2, r8
 8021620:	464b      	mov	r3, r9
 8021622:	4606      	mov	r6, r0
 8021624:	460f      	mov	r7, r1
 8021626:	f7df fa9f 	bl	8000b68 <__aeabi_dcmpgt>
 802162a:	b9d0      	cbnz	r0, 8021662 <_dtoa_r+0x6c2>
 802162c:	4642      	mov	r2, r8
 802162e:	464b      	mov	r3, r9
 8021630:	4630      	mov	r0, r6
 8021632:	4639      	mov	r1, r7
 8021634:	f7df fa70 	bl	8000b18 <__aeabi_dcmpeq>
 8021638:	b110      	cbz	r0, 8021640 <_dtoa_r+0x6a0>
 802163a:	f01a 0f01 	tst.w	sl, #1
 802163e:	d110      	bne.n	8021662 <_dtoa_r+0x6c2>
 8021640:	4620      	mov	r0, r4
 8021642:	ee18 1a10 	vmov	r1, s16
 8021646:	f000 fd05 	bl	8022054 <_Bfree>
 802164a:	2300      	movs	r3, #0
 802164c:	9800      	ldr	r0, [sp, #0]
 802164e:	702b      	strb	r3, [r5, #0]
 8021650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021652:	3001      	adds	r0, #1
 8021654:	6018      	str	r0, [r3, #0]
 8021656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021658:	2b00      	cmp	r3, #0
 802165a:	f43f acf1 	beq.w	8021040 <_dtoa_r+0xa0>
 802165e:	601d      	str	r5, [r3, #0]
 8021660:	e4ee      	b.n	8021040 <_dtoa_r+0xa0>
 8021662:	9f00      	ldr	r7, [sp, #0]
 8021664:	462b      	mov	r3, r5
 8021666:	461d      	mov	r5, r3
 8021668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802166c:	2a39      	cmp	r2, #57	; 0x39
 802166e:	d106      	bne.n	802167e <_dtoa_r+0x6de>
 8021670:	9a01      	ldr	r2, [sp, #4]
 8021672:	429a      	cmp	r2, r3
 8021674:	d1f7      	bne.n	8021666 <_dtoa_r+0x6c6>
 8021676:	9901      	ldr	r1, [sp, #4]
 8021678:	2230      	movs	r2, #48	; 0x30
 802167a:	3701      	adds	r7, #1
 802167c:	700a      	strb	r2, [r1, #0]
 802167e:	781a      	ldrb	r2, [r3, #0]
 8021680:	3201      	adds	r2, #1
 8021682:	701a      	strb	r2, [r3, #0]
 8021684:	e790      	b.n	80215a8 <_dtoa_r+0x608>
 8021686:	4ba6      	ldr	r3, [pc, #664]	; (8021920 <_dtoa_r+0x980>)
 8021688:	2200      	movs	r2, #0
 802168a:	f7de ffdd 	bl	8000648 <__aeabi_dmul>
 802168e:	2200      	movs	r2, #0
 8021690:	2300      	movs	r3, #0
 8021692:	4606      	mov	r6, r0
 8021694:	460f      	mov	r7, r1
 8021696:	f7df fa3f 	bl	8000b18 <__aeabi_dcmpeq>
 802169a:	2800      	cmp	r0, #0
 802169c:	d09d      	beq.n	80215da <_dtoa_r+0x63a>
 802169e:	e7cf      	b.n	8021640 <_dtoa_r+0x6a0>
 80216a0:	9a08      	ldr	r2, [sp, #32]
 80216a2:	2a00      	cmp	r2, #0
 80216a4:	f000 80d7 	beq.w	8021856 <_dtoa_r+0x8b6>
 80216a8:	9a06      	ldr	r2, [sp, #24]
 80216aa:	2a01      	cmp	r2, #1
 80216ac:	f300 80ba 	bgt.w	8021824 <_dtoa_r+0x884>
 80216b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80216b2:	2a00      	cmp	r2, #0
 80216b4:	f000 80b2 	beq.w	802181c <_dtoa_r+0x87c>
 80216b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80216bc:	9e07      	ldr	r6, [sp, #28]
 80216be:	9d04      	ldr	r5, [sp, #16]
 80216c0:	9a04      	ldr	r2, [sp, #16]
 80216c2:	441a      	add	r2, r3
 80216c4:	9204      	str	r2, [sp, #16]
 80216c6:	9a05      	ldr	r2, [sp, #20]
 80216c8:	2101      	movs	r1, #1
 80216ca:	441a      	add	r2, r3
 80216cc:	4620      	mov	r0, r4
 80216ce:	9205      	str	r2, [sp, #20]
 80216d0:	f000 fd78 	bl	80221c4 <__i2b>
 80216d4:	4607      	mov	r7, r0
 80216d6:	2d00      	cmp	r5, #0
 80216d8:	dd0c      	ble.n	80216f4 <_dtoa_r+0x754>
 80216da:	9b05      	ldr	r3, [sp, #20]
 80216dc:	2b00      	cmp	r3, #0
 80216de:	dd09      	ble.n	80216f4 <_dtoa_r+0x754>
 80216e0:	42ab      	cmp	r3, r5
 80216e2:	9a04      	ldr	r2, [sp, #16]
 80216e4:	bfa8      	it	ge
 80216e6:	462b      	movge	r3, r5
 80216e8:	1ad2      	subs	r2, r2, r3
 80216ea:	9204      	str	r2, [sp, #16]
 80216ec:	9a05      	ldr	r2, [sp, #20]
 80216ee:	1aed      	subs	r5, r5, r3
 80216f0:	1ad3      	subs	r3, r2, r3
 80216f2:	9305      	str	r3, [sp, #20]
 80216f4:	9b07      	ldr	r3, [sp, #28]
 80216f6:	b31b      	cbz	r3, 8021740 <_dtoa_r+0x7a0>
 80216f8:	9b08      	ldr	r3, [sp, #32]
 80216fa:	2b00      	cmp	r3, #0
 80216fc:	f000 80af 	beq.w	802185e <_dtoa_r+0x8be>
 8021700:	2e00      	cmp	r6, #0
 8021702:	dd13      	ble.n	802172c <_dtoa_r+0x78c>
 8021704:	4639      	mov	r1, r7
 8021706:	4632      	mov	r2, r6
 8021708:	4620      	mov	r0, r4
 802170a:	f000 fe1b 	bl	8022344 <__pow5mult>
 802170e:	ee18 2a10 	vmov	r2, s16
 8021712:	4601      	mov	r1, r0
 8021714:	4607      	mov	r7, r0
 8021716:	4620      	mov	r0, r4
 8021718:	f000 fd6a 	bl	80221f0 <__multiply>
 802171c:	ee18 1a10 	vmov	r1, s16
 8021720:	4680      	mov	r8, r0
 8021722:	4620      	mov	r0, r4
 8021724:	f000 fc96 	bl	8022054 <_Bfree>
 8021728:	ee08 8a10 	vmov	s16, r8
 802172c:	9b07      	ldr	r3, [sp, #28]
 802172e:	1b9a      	subs	r2, r3, r6
 8021730:	d006      	beq.n	8021740 <_dtoa_r+0x7a0>
 8021732:	ee18 1a10 	vmov	r1, s16
 8021736:	4620      	mov	r0, r4
 8021738:	f000 fe04 	bl	8022344 <__pow5mult>
 802173c:	ee08 0a10 	vmov	s16, r0
 8021740:	2101      	movs	r1, #1
 8021742:	4620      	mov	r0, r4
 8021744:	f000 fd3e 	bl	80221c4 <__i2b>
 8021748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802174a:	2b00      	cmp	r3, #0
 802174c:	4606      	mov	r6, r0
 802174e:	f340 8088 	ble.w	8021862 <_dtoa_r+0x8c2>
 8021752:	461a      	mov	r2, r3
 8021754:	4601      	mov	r1, r0
 8021756:	4620      	mov	r0, r4
 8021758:	f000 fdf4 	bl	8022344 <__pow5mult>
 802175c:	9b06      	ldr	r3, [sp, #24]
 802175e:	2b01      	cmp	r3, #1
 8021760:	4606      	mov	r6, r0
 8021762:	f340 8081 	ble.w	8021868 <_dtoa_r+0x8c8>
 8021766:	f04f 0800 	mov.w	r8, #0
 802176a:	6933      	ldr	r3, [r6, #16]
 802176c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8021770:	6918      	ldr	r0, [r3, #16]
 8021772:	f000 fcd7 	bl	8022124 <__hi0bits>
 8021776:	f1c0 0020 	rsb	r0, r0, #32
 802177a:	9b05      	ldr	r3, [sp, #20]
 802177c:	4418      	add	r0, r3
 802177e:	f010 001f 	ands.w	r0, r0, #31
 8021782:	f000 8092 	beq.w	80218aa <_dtoa_r+0x90a>
 8021786:	f1c0 0320 	rsb	r3, r0, #32
 802178a:	2b04      	cmp	r3, #4
 802178c:	f340 808a 	ble.w	80218a4 <_dtoa_r+0x904>
 8021790:	f1c0 001c 	rsb	r0, r0, #28
 8021794:	9b04      	ldr	r3, [sp, #16]
 8021796:	4403      	add	r3, r0
 8021798:	9304      	str	r3, [sp, #16]
 802179a:	9b05      	ldr	r3, [sp, #20]
 802179c:	4403      	add	r3, r0
 802179e:	4405      	add	r5, r0
 80217a0:	9305      	str	r3, [sp, #20]
 80217a2:	9b04      	ldr	r3, [sp, #16]
 80217a4:	2b00      	cmp	r3, #0
 80217a6:	dd07      	ble.n	80217b8 <_dtoa_r+0x818>
 80217a8:	ee18 1a10 	vmov	r1, s16
 80217ac:	461a      	mov	r2, r3
 80217ae:	4620      	mov	r0, r4
 80217b0:	f000 fe22 	bl	80223f8 <__lshift>
 80217b4:	ee08 0a10 	vmov	s16, r0
 80217b8:	9b05      	ldr	r3, [sp, #20]
 80217ba:	2b00      	cmp	r3, #0
 80217bc:	dd05      	ble.n	80217ca <_dtoa_r+0x82a>
 80217be:	4631      	mov	r1, r6
 80217c0:	461a      	mov	r2, r3
 80217c2:	4620      	mov	r0, r4
 80217c4:	f000 fe18 	bl	80223f8 <__lshift>
 80217c8:	4606      	mov	r6, r0
 80217ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80217cc:	2b00      	cmp	r3, #0
 80217ce:	d06e      	beq.n	80218ae <_dtoa_r+0x90e>
 80217d0:	ee18 0a10 	vmov	r0, s16
 80217d4:	4631      	mov	r1, r6
 80217d6:	f000 fe7f 	bl	80224d8 <__mcmp>
 80217da:	2800      	cmp	r0, #0
 80217dc:	da67      	bge.n	80218ae <_dtoa_r+0x90e>
 80217de:	9b00      	ldr	r3, [sp, #0]
 80217e0:	3b01      	subs	r3, #1
 80217e2:	ee18 1a10 	vmov	r1, s16
 80217e6:	9300      	str	r3, [sp, #0]
 80217e8:	220a      	movs	r2, #10
 80217ea:	2300      	movs	r3, #0
 80217ec:	4620      	mov	r0, r4
 80217ee:	f000 fc53 	bl	8022098 <__multadd>
 80217f2:	9b08      	ldr	r3, [sp, #32]
 80217f4:	ee08 0a10 	vmov	s16, r0
 80217f8:	2b00      	cmp	r3, #0
 80217fa:	f000 81b1 	beq.w	8021b60 <_dtoa_r+0xbc0>
 80217fe:	2300      	movs	r3, #0
 8021800:	4639      	mov	r1, r7
 8021802:	220a      	movs	r2, #10
 8021804:	4620      	mov	r0, r4
 8021806:	f000 fc47 	bl	8022098 <__multadd>
 802180a:	9b02      	ldr	r3, [sp, #8]
 802180c:	2b00      	cmp	r3, #0
 802180e:	4607      	mov	r7, r0
 8021810:	f300 808e 	bgt.w	8021930 <_dtoa_r+0x990>
 8021814:	9b06      	ldr	r3, [sp, #24]
 8021816:	2b02      	cmp	r3, #2
 8021818:	dc51      	bgt.n	80218be <_dtoa_r+0x91e>
 802181a:	e089      	b.n	8021930 <_dtoa_r+0x990>
 802181c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802181e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8021822:	e74b      	b.n	80216bc <_dtoa_r+0x71c>
 8021824:	9b03      	ldr	r3, [sp, #12]
 8021826:	1e5e      	subs	r6, r3, #1
 8021828:	9b07      	ldr	r3, [sp, #28]
 802182a:	42b3      	cmp	r3, r6
 802182c:	bfbf      	itttt	lt
 802182e:	9b07      	ldrlt	r3, [sp, #28]
 8021830:	9607      	strlt	r6, [sp, #28]
 8021832:	1af2      	sublt	r2, r6, r3
 8021834:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8021836:	bfb6      	itet	lt
 8021838:	189b      	addlt	r3, r3, r2
 802183a:	1b9e      	subge	r6, r3, r6
 802183c:	930a      	strlt	r3, [sp, #40]	; 0x28
 802183e:	9b03      	ldr	r3, [sp, #12]
 8021840:	bfb8      	it	lt
 8021842:	2600      	movlt	r6, #0
 8021844:	2b00      	cmp	r3, #0
 8021846:	bfb7      	itett	lt
 8021848:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 802184c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8021850:	1a9d      	sublt	r5, r3, r2
 8021852:	2300      	movlt	r3, #0
 8021854:	e734      	b.n	80216c0 <_dtoa_r+0x720>
 8021856:	9e07      	ldr	r6, [sp, #28]
 8021858:	9d04      	ldr	r5, [sp, #16]
 802185a:	9f08      	ldr	r7, [sp, #32]
 802185c:	e73b      	b.n	80216d6 <_dtoa_r+0x736>
 802185e:	9a07      	ldr	r2, [sp, #28]
 8021860:	e767      	b.n	8021732 <_dtoa_r+0x792>
 8021862:	9b06      	ldr	r3, [sp, #24]
 8021864:	2b01      	cmp	r3, #1
 8021866:	dc18      	bgt.n	802189a <_dtoa_r+0x8fa>
 8021868:	f1ba 0f00 	cmp.w	sl, #0
 802186c:	d115      	bne.n	802189a <_dtoa_r+0x8fa>
 802186e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8021872:	b993      	cbnz	r3, 802189a <_dtoa_r+0x8fa>
 8021874:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8021878:	0d1b      	lsrs	r3, r3, #20
 802187a:	051b      	lsls	r3, r3, #20
 802187c:	b183      	cbz	r3, 80218a0 <_dtoa_r+0x900>
 802187e:	9b04      	ldr	r3, [sp, #16]
 8021880:	3301      	adds	r3, #1
 8021882:	9304      	str	r3, [sp, #16]
 8021884:	9b05      	ldr	r3, [sp, #20]
 8021886:	3301      	adds	r3, #1
 8021888:	9305      	str	r3, [sp, #20]
 802188a:	f04f 0801 	mov.w	r8, #1
 802188e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021890:	2b00      	cmp	r3, #0
 8021892:	f47f af6a 	bne.w	802176a <_dtoa_r+0x7ca>
 8021896:	2001      	movs	r0, #1
 8021898:	e76f      	b.n	802177a <_dtoa_r+0x7da>
 802189a:	f04f 0800 	mov.w	r8, #0
 802189e:	e7f6      	b.n	802188e <_dtoa_r+0x8ee>
 80218a0:	4698      	mov	r8, r3
 80218a2:	e7f4      	b.n	802188e <_dtoa_r+0x8ee>
 80218a4:	f43f af7d 	beq.w	80217a2 <_dtoa_r+0x802>
 80218a8:	4618      	mov	r0, r3
 80218aa:	301c      	adds	r0, #28
 80218ac:	e772      	b.n	8021794 <_dtoa_r+0x7f4>
 80218ae:	9b03      	ldr	r3, [sp, #12]
 80218b0:	2b00      	cmp	r3, #0
 80218b2:	dc37      	bgt.n	8021924 <_dtoa_r+0x984>
 80218b4:	9b06      	ldr	r3, [sp, #24]
 80218b6:	2b02      	cmp	r3, #2
 80218b8:	dd34      	ble.n	8021924 <_dtoa_r+0x984>
 80218ba:	9b03      	ldr	r3, [sp, #12]
 80218bc:	9302      	str	r3, [sp, #8]
 80218be:	9b02      	ldr	r3, [sp, #8]
 80218c0:	b96b      	cbnz	r3, 80218de <_dtoa_r+0x93e>
 80218c2:	4631      	mov	r1, r6
 80218c4:	2205      	movs	r2, #5
 80218c6:	4620      	mov	r0, r4
 80218c8:	f000 fbe6 	bl	8022098 <__multadd>
 80218cc:	4601      	mov	r1, r0
 80218ce:	4606      	mov	r6, r0
 80218d0:	ee18 0a10 	vmov	r0, s16
 80218d4:	f000 fe00 	bl	80224d8 <__mcmp>
 80218d8:	2800      	cmp	r0, #0
 80218da:	f73f adbb 	bgt.w	8021454 <_dtoa_r+0x4b4>
 80218de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80218e0:	9d01      	ldr	r5, [sp, #4]
 80218e2:	43db      	mvns	r3, r3
 80218e4:	9300      	str	r3, [sp, #0]
 80218e6:	f04f 0800 	mov.w	r8, #0
 80218ea:	4631      	mov	r1, r6
 80218ec:	4620      	mov	r0, r4
 80218ee:	f000 fbb1 	bl	8022054 <_Bfree>
 80218f2:	2f00      	cmp	r7, #0
 80218f4:	f43f aea4 	beq.w	8021640 <_dtoa_r+0x6a0>
 80218f8:	f1b8 0f00 	cmp.w	r8, #0
 80218fc:	d005      	beq.n	802190a <_dtoa_r+0x96a>
 80218fe:	45b8      	cmp	r8, r7
 8021900:	d003      	beq.n	802190a <_dtoa_r+0x96a>
 8021902:	4641      	mov	r1, r8
 8021904:	4620      	mov	r0, r4
 8021906:	f000 fba5 	bl	8022054 <_Bfree>
 802190a:	4639      	mov	r1, r7
 802190c:	4620      	mov	r0, r4
 802190e:	f000 fba1 	bl	8022054 <_Bfree>
 8021912:	e695      	b.n	8021640 <_dtoa_r+0x6a0>
 8021914:	2600      	movs	r6, #0
 8021916:	4637      	mov	r7, r6
 8021918:	e7e1      	b.n	80218de <_dtoa_r+0x93e>
 802191a:	9700      	str	r7, [sp, #0]
 802191c:	4637      	mov	r7, r6
 802191e:	e599      	b.n	8021454 <_dtoa_r+0x4b4>
 8021920:	40240000 	.word	0x40240000
 8021924:	9b08      	ldr	r3, [sp, #32]
 8021926:	2b00      	cmp	r3, #0
 8021928:	f000 80ca 	beq.w	8021ac0 <_dtoa_r+0xb20>
 802192c:	9b03      	ldr	r3, [sp, #12]
 802192e:	9302      	str	r3, [sp, #8]
 8021930:	2d00      	cmp	r5, #0
 8021932:	dd05      	ble.n	8021940 <_dtoa_r+0x9a0>
 8021934:	4639      	mov	r1, r7
 8021936:	462a      	mov	r2, r5
 8021938:	4620      	mov	r0, r4
 802193a:	f000 fd5d 	bl	80223f8 <__lshift>
 802193e:	4607      	mov	r7, r0
 8021940:	f1b8 0f00 	cmp.w	r8, #0
 8021944:	d05b      	beq.n	80219fe <_dtoa_r+0xa5e>
 8021946:	6879      	ldr	r1, [r7, #4]
 8021948:	4620      	mov	r0, r4
 802194a:	f000 fb43 	bl	8021fd4 <_Balloc>
 802194e:	4605      	mov	r5, r0
 8021950:	b928      	cbnz	r0, 802195e <_dtoa_r+0x9be>
 8021952:	4b87      	ldr	r3, [pc, #540]	; (8021b70 <_dtoa_r+0xbd0>)
 8021954:	4602      	mov	r2, r0
 8021956:	f240 21ea 	movw	r1, #746	; 0x2ea
 802195a:	f7ff bb3b 	b.w	8020fd4 <_dtoa_r+0x34>
 802195e:	693a      	ldr	r2, [r7, #16]
 8021960:	3202      	adds	r2, #2
 8021962:	0092      	lsls	r2, r2, #2
 8021964:	f107 010c 	add.w	r1, r7, #12
 8021968:	300c      	adds	r0, #12
 802196a:	f7fe fca9 	bl	80202c0 <memcpy>
 802196e:	2201      	movs	r2, #1
 8021970:	4629      	mov	r1, r5
 8021972:	4620      	mov	r0, r4
 8021974:	f000 fd40 	bl	80223f8 <__lshift>
 8021978:	9b01      	ldr	r3, [sp, #4]
 802197a:	f103 0901 	add.w	r9, r3, #1
 802197e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8021982:	4413      	add	r3, r2
 8021984:	9305      	str	r3, [sp, #20]
 8021986:	f00a 0301 	and.w	r3, sl, #1
 802198a:	46b8      	mov	r8, r7
 802198c:	9304      	str	r3, [sp, #16]
 802198e:	4607      	mov	r7, r0
 8021990:	4631      	mov	r1, r6
 8021992:	ee18 0a10 	vmov	r0, s16
 8021996:	f7ff fa77 	bl	8020e88 <quorem>
 802199a:	4641      	mov	r1, r8
 802199c:	9002      	str	r0, [sp, #8]
 802199e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80219a2:	ee18 0a10 	vmov	r0, s16
 80219a6:	f000 fd97 	bl	80224d8 <__mcmp>
 80219aa:	463a      	mov	r2, r7
 80219ac:	9003      	str	r0, [sp, #12]
 80219ae:	4631      	mov	r1, r6
 80219b0:	4620      	mov	r0, r4
 80219b2:	f000 fdad 	bl	8022510 <__mdiff>
 80219b6:	68c2      	ldr	r2, [r0, #12]
 80219b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80219bc:	4605      	mov	r5, r0
 80219be:	bb02      	cbnz	r2, 8021a02 <_dtoa_r+0xa62>
 80219c0:	4601      	mov	r1, r0
 80219c2:	ee18 0a10 	vmov	r0, s16
 80219c6:	f000 fd87 	bl	80224d8 <__mcmp>
 80219ca:	4602      	mov	r2, r0
 80219cc:	4629      	mov	r1, r5
 80219ce:	4620      	mov	r0, r4
 80219d0:	9207      	str	r2, [sp, #28]
 80219d2:	f000 fb3f 	bl	8022054 <_Bfree>
 80219d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80219da:	ea43 0102 	orr.w	r1, r3, r2
 80219de:	9b04      	ldr	r3, [sp, #16]
 80219e0:	430b      	orrs	r3, r1
 80219e2:	464d      	mov	r5, r9
 80219e4:	d10f      	bne.n	8021a06 <_dtoa_r+0xa66>
 80219e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80219ea:	d02a      	beq.n	8021a42 <_dtoa_r+0xaa2>
 80219ec:	9b03      	ldr	r3, [sp, #12]
 80219ee:	2b00      	cmp	r3, #0
 80219f0:	dd02      	ble.n	80219f8 <_dtoa_r+0xa58>
 80219f2:	9b02      	ldr	r3, [sp, #8]
 80219f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80219f8:	f88b a000 	strb.w	sl, [fp]
 80219fc:	e775      	b.n	80218ea <_dtoa_r+0x94a>
 80219fe:	4638      	mov	r0, r7
 8021a00:	e7ba      	b.n	8021978 <_dtoa_r+0x9d8>
 8021a02:	2201      	movs	r2, #1
 8021a04:	e7e2      	b.n	80219cc <_dtoa_r+0xa2c>
 8021a06:	9b03      	ldr	r3, [sp, #12]
 8021a08:	2b00      	cmp	r3, #0
 8021a0a:	db04      	blt.n	8021a16 <_dtoa_r+0xa76>
 8021a0c:	9906      	ldr	r1, [sp, #24]
 8021a0e:	430b      	orrs	r3, r1
 8021a10:	9904      	ldr	r1, [sp, #16]
 8021a12:	430b      	orrs	r3, r1
 8021a14:	d122      	bne.n	8021a5c <_dtoa_r+0xabc>
 8021a16:	2a00      	cmp	r2, #0
 8021a18:	ddee      	ble.n	80219f8 <_dtoa_r+0xa58>
 8021a1a:	ee18 1a10 	vmov	r1, s16
 8021a1e:	2201      	movs	r2, #1
 8021a20:	4620      	mov	r0, r4
 8021a22:	f000 fce9 	bl	80223f8 <__lshift>
 8021a26:	4631      	mov	r1, r6
 8021a28:	ee08 0a10 	vmov	s16, r0
 8021a2c:	f000 fd54 	bl	80224d8 <__mcmp>
 8021a30:	2800      	cmp	r0, #0
 8021a32:	dc03      	bgt.n	8021a3c <_dtoa_r+0xa9c>
 8021a34:	d1e0      	bne.n	80219f8 <_dtoa_r+0xa58>
 8021a36:	f01a 0f01 	tst.w	sl, #1
 8021a3a:	d0dd      	beq.n	80219f8 <_dtoa_r+0xa58>
 8021a3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8021a40:	d1d7      	bne.n	80219f2 <_dtoa_r+0xa52>
 8021a42:	2339      	movs	r3, #57	; 0x39
 8021a44:	f88b 3000 	strb.w	r3, [fp]
 8021a48:	462b      	mov	r3, r5
 8021a4a:	461d      	mov	r5, r3
 8021a4c:	3b01      	subs	r3, #1
 8021a4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8021a52:	2a39      	cmp	r2, #57	; 0x39
 8021a54:	d071      	beq.n	8021b3a <_dtoa_r+0xb9a>
 8021a56:	3201      	adds	r2, #1
 8021a58:	701a      	strb	r2, [r3, #0]
 8021a5a:	e746      	b.n	80218ea <_dtoa_r+0x94a>
 8021a5c:	2a00      	cmp	r2, #0
 8021a5e:	dd07      	ble.n	8021a70 <_dtoa_r+0xad0>
 8021a60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8021a64:	d0ed      	beq.n	8021a42 <_dtoa_r+0xaa2>
 8021a66:	f10a 0301 	add.w	r3, sl, #1
 8021a6a:	f88b 3000 	strb.w	r3, [fp]
 8021a6e:	e73c      	b.n	80218ea <_dtoa_r+0x94a>
 8021a70:	9b05      	ldr	r3, [sp, #20]
 8021a72:	f809 ac01 	strb.w	sl, [r9, #-1]
 8021a76:	4599      	cmp	r9, r3
 8021a78:	d047      	beq.n	8021b0a <_dtoa_r+0xb6a>
 8021a7a:	ee18 1a10 	vmov	r1, s16
 8021a7e:	2300      	movs	r3, #0
 8021a80:	220a      	movs	r2, #10
 8021a82:	4620      	mov	r0, r4
 8021a84:	f000 fb08 	bl	8022098 <__multadd>
 8021a88:	45b8      	cmp	r8, r7
 8021a8a:	ee08 0a10 	vmov	s16, r0
 8021a8e:	f04f 0300 	mov.w	r3, #0
 8021a92:	f04f 020a 	mov.w	r2, #10
 8021a96:	4641      	mov	r1, r8
 8021a98:	4620      	mov	r0, r4
 8021a9a:	d106      	bne.n	8021aaa <_dtoa_r+0xb0a>
 8021a9c:	f000 fafc 	bl	8022098 <__multadd>
 8021aa0:	4680      	mov	r8, r0
 8021aa2:	4607      	mov	r7, r0
 8021aa4:	f109 0901 	add.w	r9, r9, #1
 8021aa8:	e772      	b.n	8021990 <_dtoa_r+0x9f0>
 8021aaa:	f000 faf5 	bl	8022098 <__multadd>
 8021aae:	4639      	mov	r1, r7
 8021ab0:	4680      	mov	r8, r0
 8021ab2:	2300      	movs	r3, #0
 8021ab4:	220a      	movs	r2, #10
 8021ab6:	4620      	mov	r0, r4
 8021ab8:	f000 faee 	bl	8022098 <__multadd>
 8021abc:	4607      	mov	r7, r0
 8021abe:	e7f1      	b.n	8021aa4 <_dtoa_r+0xb04>
 8021ac0:	9b03      	ldr	r3, [sp, #12]
 8021ac2:	9302      	str	r3, [sp, #8]
 8021ac4:	9d01      	ldr	r5, [sp, #4]
 8021ac6:	ee18 0a10 	vmov	r0, s16
 8021aca:	4631      	mov	r1, r6
 8021acc:	f7ff f9dc 	bl	8020e88 <quorem>
 8021ad0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8021ad4:	9b01      	ldr	r3, [sp, #4]
 8021ad6:	f805 ab01 	strb.w	sl, [r5], #1
 8021ada:	1aea      	subs	r2, r5, r3
 8021adc:	9b02      	ldr	r3, [sp, #8]
 8021ade:	4293      	cmp	r3, r2
 8021ae0:	dd09      	ble.n	8021af6 <_dtoa_r+0xb56>
 8021ae2:	ee18 1a10 	vmov	r1, s16
 8021ae6:	2300      	movs	r3, #0
 8021ae8:	220a      	movs	r2, #10
 8021aea:	4620      	mov	r0, r4
 8021aec:	f000 fad4 	bl	8022098 <__multadd>
 8021af0:	ee08 0a10 	vmov	s16, r0
 8021af4:	e7e7      	b.n	8021ac6 <_dtoa_r+0xb26>
 8021af6:	9b02      	ldr	r3, [sp, #8]
 8021af8:	2b00      	cmp	r3, #0
 8021afa:	bfc8      	it	gt
 8021afc:	461d      	movgt	r5, r3
 8021afe:	9b01      	ldr	r3, [sp, #4]
 8021b00:	bfd8      	it	le
 8021b02:	2501      	movle	r5, #1
 8021b04:	441d      	add	r5, r3
 8021b06:	f04f 0800 	mov.w	r8, #0
 8021b0a:	ee18 1a10 	vmov	r1, s16
 8021b0e:	2201      	movs	r2, #1
 8021b10:	4620      	mov	r0, r4
 8021b12:	f000 fc71 	bl	80223f8 <__lshift>
 8021b16:	4631      	mov	r1, r6
 8021b18:	ee08 0a10 	vmov	s16, r0
 8021b1c:	f000 fcdc 	bl	80224d8 <__mcmp>
 8021b20:	2800      	cmp	r0, #0
 8021b22:	dc91      	bgt.n	8021a48 <_dtoa_r+0xaa8>
 8021b24:	d102      	bne.n	8021b2c <_dtoa_r+0xb8c>
 8021b26:	f01a 0f01 	tst.w	sl, #1
 8021b2a:	d18d      	bne.n	8021a48 <_dtoa_r+0xaa8>
 8021b2c:	462b      	mov	r3, r5
 8021b2e:	461d      	mov	r5, r3
 8021b30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021b34:	2a30      	cmp	r2, #48	; 0x30
 8021b36:	d0fa      	beq.n	8021b2e <_dtoa_r+0xb8e>
 8021b38:	e6d7      	b.n	80218ea <_dtoa_r+0x94a>
 8021b3a:	9a01      	ldr	r2, [sp, #4]
 8021b3c:	429a      	cmp	r2, r3
 8021b3e:	d184      	bne.n	8021a4a <_dtoa_r+0xaaa>
 8021b40:	9b00      	ldr	r3, [sp, #0]
 8021b42:	3301      	adds	r3, #1
 8021b44:	9300      	str	r3, [sp, #0]
 8021b46:	2331      	movs	r3, #49	; 0x31
 8021b48:	7013      	strb	r3, [r2, #0]
 8021b4a:	e6ce      	b.n	80218ea <_dtoa_r+0x94a>
 8021b4c:	4b09      	ldr	r3, [pc, #36]	; (8021b74 <_dtoa_r+0xbd4>)
 8021b4e:	f7ff ba95 	b.w	802107c <_dtoa_r+0xdc>
 8021b52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021b54:	2b00      	cmp	r3, #0
 8021b56:	f47f aa6e 	bne.w	8021036 <_dtoa_r+0x96>
 8021b5a:	4b07      	ldr	r3, [pc, #28]	; (8021b78 <_dtoa_r+0xbd8>)
 8021b5c:	f7ff ba8e 	b.w	802107c <_dtoa_r+0xdc>
 8021b60:	9b02      	ldr	r3, [sp, #8]
 8021b62:	2b00      	cmp	r3, #0
 8021b64:	dcae      	bgt.n	8021ac4 <_dtoa_r+0xb24>
 8021b66:	9b06      	ldr	r3, [sp, #24]
 8021b68:	2b02      	cmp	r3, #2
 8021b6a:	f73f aea8 	bgt.w	80218be <_dtoa_r+0x91e>
 8021b6e:	e7a9      	b.n	8021ac4 <_dtoa_r+0xb24>
 8021b70:	080237cf 	.word	0x080237cf
 8021b74:	0802372c 	.word	0x0802372c
 8021b78:	08023750 	.word	0x08023750

08021b7c <__sflush_r>:
 8021b7c:	898a      	ldrh	r2, [r1, #12]
 8021b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021b82:	4605      	mov	r5, r0
 8021b84:	0710      	lsls	r0, r2, #28
 8021b86:	460c      	mov	r4, r1
 8021b88:	d458      	bmi.n	8021c3c <__sflush_r+0xc0>
 8021b8a:	684b      	ldr	r3, [r1, #4]
 8021b8c:	2b00      	cmp	r3, #0
 8021b8e:	dc05      	bgt.n	8021b9c <__sflush_r+0x20>
 8021b90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021b92:	2b00      	cmp	r3, #0
 8021b94:	dc02      	bgt.n	8021b9c <__sflush_r+0x20>
 8021b96:	2000      	movs	r0, #0
 8021b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021b9e:	2e00      	cmp	r6, #0
 8021ba0:	d0f9      	beq.n	8021b96 <__sflush_r+0x1a>
 8021ba2:	2300      	movs	r3, #0
 8021ba4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021ba8:	682f      	ldr	r7, [r5, #0]
 8021baa:	602b      	str	r3, [r5, #0]
 8021bac:	d032      	beq.n	8021c14 <__sflush_r+0x98>
 8021bae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021bb0:	89a3      	ldrh	r3, [r4, #12]
 8021bb2:	075a      	lsls	r2, r3, #29
 8021bb4:	d505      	bpl.n	8021bc2 <__sflush_r+0x46>
 8021bb6:	6863      	ldr	r3, [r4, #4]
 8021bb8:	1ac0      	subs	r0, r0, r3
 8021bba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021bbc:	b10b      	cbz	r3, 8021bc2 <__sflush_r+0x46>
 8021bbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021bc0:	1ac0      	subs	r0, r0, r3
 8021bc2:	2300      	movs	r3, #0
 8021bc4:	4602      	mov	r2, r0
 8021bc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021bc8:	6a21      	ldr	r1, [r4, #32]
 8021bca:	4628      	mov	r0, r5
 8021bcc:	47b0      	blx	r6
 8021bce:	1c43      	adds	r3, r0, #1
 8021bd0:	89a3      	ldrh	r3, [r4, #12]
 8021bd2:	d106      	bne.n	8021be2 <__sflush_r+0x66>
 8021bd4:	6829      	ldr	r1, [r5, #0]
 8021bd6:	291d      	cmp	r1, #29
 8021bd8:	d82c      	bhi.n	8021c34 <__sflush_r+0xb8>
 8021bda:	4a2a      	ldr	r2, [pc, #168]	; (8021c84 <__sflush_r+0x108>)
 8021bdc:	40ca      	lsrs	r2, r1
 8021bde:	07d6      	lsls	r6, r2, #31
 8021be0:	d528      	bpl.n	8021c34 <__sflush_r+0xb8>
 8021be2:	2200      	movs	r2, #0
 8021be4:	6062      	str	r2, [r4, #4]
 8021be6:	04d9      	lsls	r1, r3, #19
 8021be8:	6922      	ldr	r2, [r4, #16]
 8021bea:	6022      	str	r2, [r4, #0]
 8021bec:	d504      	bpl.n	8021bf8 <__sflush_r+0x7c>
 8021bee:	1c42      	adds	r2, r0, #1
 8021bf0:	d101      	bne.n	8021bf6 <__sflush_r+0x7a>
 8021bf2:	682b      	ldr	r3, [r5, #0]
 8021bf4:	b903      	cbnz	r3, 8021bf8 <__sflush_r+0x7c>
 8021bf6:	6560      	str	r0, [r4, #84]	; 0x54
 8021bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021bfa:	602f      	str	r7, [r5, #0]
 8021bfc:	2900      	cmp	r1, #0
 8021bfe:	d0ca      	beq.n	8021b96 <__sflush_r+0x1a>
 8021c00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021c04:	4299      	cmp	r1, r3
 8021c06:	d002      	beq.n	8021c0e <__sflush_r+0x92>
 8021c08:	4628      	mov	r0, r5
 8021c0a:	f000 fd7d 	bl	8022708 <_free_r>
 8021c0e:	2000      	movs	r0, #0
 8021c10:	6360      	str	r0, [r4, #52]	; 0x34
 8021c12:	e7c1      	b.n	8021b98 <__sflush_r+0x1c>
 8021c14:	6a21      	ldr	r1, [r4, #32]
 8021c16:	2301      	movs	r3, #1
 8021c18:	4628      	mov	r0, r5
 8021c1a:	47b0      	blx	r6
 8021c1c:	1c41      	adds	r1, r0, #1
 8021c1e:	d1c7      	bne.n	8021bb0 <__sflush_r+0x34>
 8021c20:	682b      	ldr	r3, [r5, #0]
 8021c22:	2b00      	cmp	r3, #0
 8021c24:	d0c4      	beq.n	8021bb0 <__sflush_r+0x34>
 8021c26:	2b1d      	cmp	r3, #29
 8021c28:	d001      	beq.n	8021c2e <__sflush_r+0xb2>
 8021c2a:	2b16      	cmp	r3, #22
 8021c2c:	d101      	bne.n	8021c32 <__sflush_r+0xb6>
 8021c2e:	602f      	str	r7, [r5, #0]
 8021c30:	e7b1      	b.n	8021b96 <__sflush_r+0x1a>
 8021c32:	89a3      	ldrh	r3, [r4, #12]
 8021c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021c38:	81a3      	strh	r3, [r4, #12]
 8021c3a:	e7ad      	b.n	8021b98 <__sflush_r+0x1c>
 8021c3c:	690f      	ldr	r7, [r1, #16]
 8021c3e:	2f00      	cmp	r7, #0
 8021c40:	d0a9      	beq.n	8021b96 <__sflush_r+0x1a>
 8021c42:	0793      	lsls	r3, r2, #30
 8021c44:	680e      	ldr	r6, [r1, #0]
 8021c46:	bf08      	it	eq
 8021c48:	694b      	ldreq	r3, [r1, #20]
 8021c4a:	600f      	str	r7, [r1, #0]
 8021c4c:	bf18      	it	ne
 8021c4e:	2300      	movne	r3, #0
 8021c50:	eba6 0807 	sub.w	r8, r6, r7
 8021c54:	608b      	str	r3, [r1, #8]
 8021c56:	f1b8 0f00 	cmp.w	r8, #0
 8021c5a:	dd9c      	ble.n	8021b96 <__sflush_r+0x1a>
 8021c5c:	6a21      	ldr	r1, [r4, #32]
 8021c5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021c60:	4643      	mov	r3, r8
 8021c62:	463a      	mov	r2, r7
 8021c64:	4628      	mov	r0, r5
 8021c66:	47b0      	blx	r6
 8021c68:	2800      	cmp	r0, #0
 8021c6a:	dc06      	bgt.n	8021c7a <__sflush_r+0xfe>
 8021c6c:	89a3      	ldrh	r3, [r4, #12]
 8021c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021c72:	81a3      	strh	r3, [r4, #12]
 8021c74:	f04f 30ff 	mov.w	r0, #4294967295
 8021c78:	e78e      	b.n	8021b98 <__sflush_r+0x1c>
 8021c7a:	4407      	add	r7, r0
 8021c7c:	eba8 0800 	sub.w	r8, r8, r0
 8021c80:	e7e9      	b.n	8021c56 <__sflush_r+0xda>
 8021c82:	bf00      	nop
 8021c84:	20400001 	.word	0x20400001

08021c88 <_fflush_r>:
 8021c88:	b538      	push	{r3, r4, r5, lr}
 8021c8a:	690b      	ldr	r3, [r1, #16]
 8021c8c:	4605      	mov	r5, r0
 8021c8e:	460c      	mov	r4, r1
 8021c90:	b913      	cbnz	r3, 8021c98 <_fflush_r+0x10>
 8021c92:	2500      	movs	r5, #0
 8021c94:	4628      	mov	r0, r5
 8021c96:	bd38      	pop	{r3, r4, r5, pc}
 8021c98:	b118      	cbz	r0, 8021ca2 <_fflush_r+0x1a>
 8021c9a:	6983      	ldr	r3, [r0, #24]
 8021c9c:	b90b      	cbnz	r3, 8021ca2 <_fflush_r+0x1a>
 8021c9e:	f000 f887 	bl	8021db0 <__sinit>
 8021ca2:	4b14      	ldr	r3, [pc, #80]	; (8021cf4 <_fflush_r+0x6c>)
 8021ca4:	429c      	cmp	r4, r3
 8021ca6:	d11b      	bne.n	8021ce0 <_fflush_r+0x58>
 8021ca8:	686c      	ldr	r4, [r5, #4]
 8021caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021cae:	2b00      	cmp	r3, #0
 8021cb0:	d0ef      	beq.n	8021c92 <_fflush_r+0xa>
 8021cb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021cb4:	07d0      	lsls	r0, r2, #31
 8021cb6:	d404      	bmi.n	8021cc2 <_fflush_r+0x3a>
 8021cb8:	0599      	lsls	r1, r3, #22
 8021cba:	d402      	bmi.n	8021cc2 <_fflush_r+0x3a>
 8021cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021cbe:	f000 f91a 	bl	8021ef6 <__retarget_lock_acquire_recursive>
 8021cc2:	4628      	mov	r0, r5
 8021cc4:	4621      	mov	r1, r4
 8021cc6:	f7ff ff59 	bl	8021b7c <__sflush_r>
 8021cca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021ccc:	07da      	lsls	r2, r3, #31
 8021cce:	4605      	mov	r5, r0
 8021cd0:	d4e0      	bmi.n	8021c94 <_fflush_r+0xc>
 8021cd2:	89a3      	ldrh	r3, [r4, #12]
 8021cd4:	059b      	lsls	r3, r3, #22
 8021cd6:	d4dd      	bmi.n	8021c94 <_fflush_r+0xc>
 8021cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021cda:	f000 f90d 	bl	8021ef8 <__retarget_lock_release_recursive>
 8021cde:	e7d9      	b.n	8021c94 <_fflush_r+0xc>
 8021ce0:	4b05      	ldr	r3, [pc, #20]	; (8021cf8 <_fflush_r+0x70>)
 8021ce2:	429c      	cmp	r4, r3
 8021ce4:	d101      	bne.n	8021cea <_fflush_r+0x62>
 8021ce6:	68ac      	ldr	r4, [r5, #8]
 8021ce8:	e7df      	b.n	8021caa <_fflush_r+0x22>
 8021cea:	4b04      	ldr	r3, [pc, #16]	; (8021cfc <_fflush_r+0x74>)
 8021cec:	429c      	cmp	r4, r3
 8021cee:	bf08      	it	eq
 8021cf0:	68ec      	ldreq	r4, [r5, #12]
 8021cf2:	e7da      	b.n	8021caa <_fflush_r+0x22>
 8021cf4:	08023800 	.word	0x08023800
 8021cf8:	08023820 	.word	0x08023820
 8021cfc:	080237e0 	.word	0x080237e0

08021d00 <std>:
 8021d00:	2300      	movs	r3, #0
 8021d02:	b510      	push	{r4, lr}
 8021d04:	4604      	mov	r4, r0
 8021d06:	e9c0 3300 	strd	r3, r3, [r0]
 8021d0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021d0e:	6083      	str	r3, [r0, #8]
 8021d10:	8181      	strh	r1, [r0, #12]
 8021d12:	6643      	str	r3, [r0, #100]	; 0x64
 8021d14:	81c2      	strh	r2, [r0, #14]
 8021d16:	6183      	str	r3, [r0, #24]
 8021d18:	4619      	mov	r1, r3
 8021d1a:	2208      	movs	r2, #8
 8021d1c:	305c      	adds	r0, #92	; 0x5c
 8021d1e:	f7fe fadd 	bl	80202dc <memset>
 8021d22:	4b05      	ldr	r3, [pc, #20]	; (8021d38 <std+0x38>)
 8021d24:	6263      	str	r3, [r4, #36]	; 0x24
 8021d26:	4b05      	ldr	r3, [pc, #20]	; (8021d3c <std+0x3c>)
 8021d28:	62a3      	str	r3, [r4, #40]	; 0x28
 8021d2a:	4b05      	ldr	r3, [pc, #20]	; (8021d40 <std+0x40>)
 8021d2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021d2e:	4b05      	ldr	r3, [pc, #20]	; (8021d44 <std+0x44>)
 8021d30:	6224      	str	r4, [r4, #32]
 8021d32:	6323      	str	r3, [r4, #48]	; 0x30
 8021d34:	bd10      	pop	{r4, pc}
 8021d36:	bf00      	nop
 8021d38:	08022c2d 	.word	0x08022c2d
 8021d3c:	08022c4f 	.word	0x08022c4f
 8021d40:	08022c87 	.word	0x08022c87
 8021d44:	08022cab 	.word	0x08022cab

08021d48 <_cleanup_r>:
 8021d48:	4901      	ldr	r1, [pc, #4]	; (8021d50 <_cleanup_r+0x8>)
 8021d4a:	f000 b8af 	b.w	8021eac <_fwalk_reent>
 8021d4e:	bf00      	nop
 8021d50:	08021c89 	.word	0x08021c89

08021d54 <__sfmoreglue>:
 8021d54:	b570      	push	{r4, r5, r6, lr}
 8021d56:	2268      	movs	r2, #104	; 0x68
 8021d58:	1e4d      	subs	r5, r1, #1
 8021d5a:	4355      	muls	r5, r2
 8021d5c:	460e      	mov	r6, r1
 8021d5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8021d62:	f000 fd3d 	bl	80227e0 <_malloc_r>
 8021d66:	4604      	mov	r4, r0
 8021d68:	b140      	cbz	r0, 8021d7c <__sfmoreglue+0x28>
 8021d6a:	2100      	movs	r1, #0
 8021d6c:	e9c0 1600 	strd	r1, r6, [r0]
 8021d70:	300c      	adds	r0, #12
 8021d72:	60a0      	str	r0, [r4, #8]
 8021d74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021d78:	f7fe fab0 	bl	80202dc <memset>
 8021d7c:	4620      	mov	r0, r4
 8021d7e:	bd70      	pop	{r4, r5, r6, pc}

08021d80 <__sfp_lock_acquire>:
 8021d80:	4801      	ldr	r0, [pc, #4]	; (8021d88 <__sfp_lock_acquire+0x8>)
 8021d82:	f000 b8b8 	b.w	8021ef6 <__retarget_lock_acquire_recursive>
 8021d86:	bf00      	nop
 8021d88:	2000f90d 	.word	0x2000f90d

08021d8c <__sfp_lock_release>:
 8021d8c:	4801      	ldr	r0, [pc, #4]	; (8021d94 <__sfp_lock_release+0x8>)
 8021d8e:	f000 b8b3 	b.w	8021ef8 <__retarget_lock_release_recursive>
 8021d92:	bf00      	nop
 8021d94:	2000f90d 	.word	0x2000f90d

08021d98 <__sinit_lock_acquire>:
 8021d98:	4801      	ldr	r0, [pc, #4]	; (8021da0 <__sinit_lock_acquire+0x8>)
 8021d9a:	f000 b8ac 	b.w	8021ef6 <__retarget_lock_acquire_recursive>
 8021d9e:	bf00      	nop
 8021da0:	2000f90e 	.word	0x2000f90e

08021da4 <__sinit_lock_release>:
 8021da4:	4801      	ldr	r0, [pc, #4]	; (8021dac <__sinit_lock_release+0x8>)
 8021da6:	f000 b8a7 	b.w	8021ef8 <__retarget_lock_release_recursive>
 8021daa:	bf00      	nop
 8021dac:	2000f90e 	.word	0x2000f90e

08021db0 <__sinit>:
 8021db0:	b510      	push	{r4, lr}
 8021db2:	4604      	mov	r4, r0
 8021db4:	f7ff fff0 	bl	8021d98 <__sinit_lock_acquire>
 8021db8:	69a3      	ldr	r3, [r4, #24]
 8021dba:	b11b      	cbz	r3, 8021dc4 <__sinit+0x14>
 8021dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021dc0:	f7ff bff0 	b.w	8021da4 <__sinit_lock_release>
 8021dc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021dc8:	6523      	str	r3, [r4, #80]	; 0x50
 8021dca:	4b13      	ldr	r3, [pc, #76]	; (8021e18 <__sinit+0x68>)
 8021dcc:	4a13      	ldr	r2, [pc, #76]	; (8021e1c <__sinit+0x6c>)
 8021dce:	681b      	ldr	r3, [r3, #0]
 8021dd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8021dd2:	42a3      	cmp	r3, r4
 8021dd4:	bf04      	itt	eq
 8021dd6:	2301      	moveq	r3, #1
 8021dd8:	61a3      	streq	r3, [r4, #24]
 8021dda:	4620      	mov	r0, r4
 8021ddc:	f000 f820 	bl	8021e20 <__sfp>
 8021de0:	6060      	str	r0, [r4, #4]
 8021de2:	4620      	mov	r0, r4
 8021de4:	f000 f81c 	bl	8021e20 <__sfp>
 8021de8:	60a0      	str	r0, [r4, #8]
 8021dea:	4620      	mov	r0, r4
 8021dec:	f000 f818 	bl	8021e20 <__sfp>
 8021df0:	2200      	movs	r2, #0
 8021df2:	60e0      	str	r0, [r4, #12]
 8021df4:	2104      	movs	r1, #4
 8021df6:	6860      	ldr	r0, [r4, #4]
 8021df8:	f7ff ff82 	bl	8021d00 <std>
 8021dfc:	68a0      	ldr	r0, [r4, #8]
 8021dfe:	2201      	movs	r2, #1
 8021e00:	2109      	movs	r1, #9
 8021e02:	f7ff ff7d 	bl	8021d00 <std>
 8021e06:	68e0      	ldr	r0, [r4, #12]
 8021e08:	2202      	movs	r2, #2
 8021e0a:	2112      	movs	r1, #18
 8021e0c:	f7ff ff78 	bl	8021d00 <std>
 8021e10:	2301      	movs	r3, #1
 8021e12:	61a3      	str	r3, [r4, #24]
 8021e14:	e7d2      	b.n	8021dbc <__sinit+0xc>
 8021e16:	bf00      	nop
 8021e18:	08023718 	.word	0x08023718
 8021e1c:	08021d49 	.word	0x08021d49

08021e20 <__sfp>:
 8021e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e22:	4607      	mov	r7, r0
 8021e24:	f7ff ffac 	bl	8021d80 <__sfp_lock_acquire>
 8021e28:	4b1e      	ldr	r3, [pc, #120]	; (8021ea4 <__sfp+0x84>)
 8021e2a:	681e      	ldr	r6, [r3, #0]
 8021e2c:	69b3      	ldr	r3, [r6, #24]
 8021e2e:	b913      	cbnz	r3, 8021e36 <__sfp+0x16>
 8021e30:	4630      	mov	r0, r6
 8021e32:	f7ff ffbd 	bl	8021db0 <__sinit>
 8021e36:	3648      	adds	r6, #72	; 0x48
 8021e38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021e3c:	3b01      	subs	r3, #1
 8021e3e:	d503      	bpl.n	8021e48 <__sfp+0x28>
 8021e40:	6833      	ldr	r3, [r6, #0]
 8021e42:	b30b      	cbz	r3, 8021e88 <__sfp+0x68>
 8021e44:	6836      	ldr	r6, [r6, #0]
 8021e46:	e7f7      	b.n	8021e38 <__sfp+0x18>
 8021e48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021e4c:	b9d5      	cbnz	r5, 8021e84 <__sfp+0x64>
 8021e4e:	4b16      	ldr	r3, [pc, #88]	; (8021ea8 <__sfp+0x88>)
 8021e50:	60e3      	str	r3, [r4, #12]
 8021e52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021e56:	6665      	str	r5, [r4, #100]	; 0x64
 8021e58:	f000 f84c 	bl	8021ef4 <__retarget_lock_init_recursive>
 8021e5c:	f7ff ff96 	bl	8021d8c <__sfp_lock_release>
 8021e60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021e64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021e68:	6025      	str	r5, [r4, #0]
 8021e6a:	61a5      	str	r5, [r4, #24]
 8021e6c:	2208      	movs	r2, #8
 8021e6e:	4629      	mov	r1, r5
 8021e70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021e74:	f7fe fa32 	bl	80202dc <memset>
 8021e78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021e7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021e80:	4620      	mov	r0, r4
 8021e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021e84:	3468      	adds	r4, #104	; 0x68
 8021e86:	e7d9      	b.n	8021e3c <__sfp+0x1c>
 8021e88:	2104      	movs	r1, #4
 8021e8a:	4638      	mov	r0, r7
 8021e8c:	f7ff ff62 	bl	8021d54 <__sfmoreglue>
 8021e90:	4604      	mov	r4, r0
 8021e92:	6030      	str	r0, [r6, #0]
 8021e94:	2800      	cmp	r0, #0
 8021e96:	d1d5      	bne.n	8021e44 <__sfp+0x24>
 8021e98:	f7ff ff78 	bl	8021d8c <__sfp_lock_release>
 8021e9c:	230c      	movs	r3, #12
 8021e9e:	603b      	str	r3, [r7, #0]
 8021ea0:	e7ee      	b.n	8021e80 <__sfp+0x60>
 8021ea2:	bf00      	nop
 8021ea4:	08023718 	.word	0x08023718
 8021ea8:	ffff0001 	.word	0xffff0001

08021eac <_fwalk_reent>:
 8021eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021eb0:	4606      	mov	r6, r0
 8021eb2:	4688      	mov	r8, r1
 8021eb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021eb8:	2700      	movs	r7, #0
 8021eba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021ebe:	f1b9 0901 	subs.w	r9, r9, #1
 8021ec2:	d505      	bpl.n	8021ed0 <_fwalk_reent+0x24>
 8021ec4:	6824      	ldr	r4, [r4, #0]
 8021ec6:	2c00      	cmp	r4, #0
 8021ec8:	d1f7      	bne.n	8021eba <_fwalk_reent+0xe>
 8021eca:	4638      	mov	r0, r7
 8021ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021ed0:	89ab      	ldrh	r3, [r5, #12]
 8021ed2:	2b01      	cmp	r3, #1
 8021ed4:	d907      	bls.n	8021ee6 <_fwalk_reent+0x3a>
 8021ed6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021eda:	3301      	adds	r3, #1
 8021edc:	d003      	beq.n	8021ee6 <_fwalk_reent+0x3a>
 8021ede:	4629      	mov	r1, r5
 8021ee0:	4630      	mov	r0, r6
 8021ee2:	47c0      	blx	r8
 8021ee4:	4307      	orrs	r7, r0
 8021ee6:	3568      	adds	r5, #104	; 0x68
 8021ee8:	e7e9      	b.n	8021ebe <_fwalk_reent+0x12>
	...

08021eec <_localeconv_r>:
 8021eec:	4800      	ldr	r0, [pc, #0]	; (8021ef0 <_localeconv_r+0x4>)
 8021eee:	4770      	bx	lr
 8021ef0:	20000180 	.word	0x20000180

08021ef4 <__retarget_lock_init_recursive>:
 8021ef4:	4770      	bx	lr

08021ef6 <__retarget_lock_acquire_recursive>:
 8021ef6:	4770      	bx	lr

08021ef8 <__retarget_lock_release_recursive>:
 8021ef8:	4770      	bx	lr

08021efa <__swhatbuf_r>:
 8021efa:	b570      	push	{r4, r5, r6, lr}
 8021efc:	460e      	mov	r6, r1
 8021efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021f02:	2900      	cmp	r1, #0
 8021f04:	b096      	sub	sp, #88	; 0x58
 8021f06:	4614      	mov	r4, r2
 8021f08:	461d      	mov	r5, r3
 8021f0a:	da08      	bge.n	8021f1e <__swhatbuf_r+0x24>
 8021f0c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8021f10:	2200      	movs	r2, #0
 8021f12:	602a      	str	r2, [r5, #0]
 8021f14:	061a      	lsls	r2, r3, #24
 8021f16:	d410      	bmi.n	8021f3a <__swhatbuf_r+0x40>
 8021f18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021f1c:	e00e      	b.n	8021f3c <__swhatbuf_r+0x42>
 8021f1e:	466a      	mov	r2, sp
 8021f20:	f000 ff1a 	bl	8022d58 <_fstat_r>
 8021f24:	2800      	cmp	r0, #0
 8021f26:	dbf1      	blt.n	8021f0c <__swhatbuf_r+0x12>
 8021f28:	9a01      	ldr	r2, [sp, #4]
 8021f2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021f2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021f32:	425a      	negs	r2, r3
 8021f34:	415a      	adcs	r2, r3
 8021f36:	602a      	str	r2, [r5, #0]
 8021f38:	e7ee      	b.n	8021f18 <__swhatbuf_r+0x1e>
 8021f3a:	2340      	movs	r3, #64	; 0x40
 8021f3c:	2000      	movs	r0, #0
 8021f3e:	6023      	str	r3, [r4, #0]
 8021f40:	b016      	add	sp, #88	; 0x58
 8021f42:	bd70      	pop	{r4, r5, r6, pc}

08021f44 <__smakebuf_r>:
 8021f44:	898b      	ldrh	r3, [r1, #12]
 8021f46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021f48:	079d      	lsls	r5, r3, #30
 8021f4a:	4606      	mov	r6, r0
 8021f4c:	460c      	mov	r4, r1
 8021f4e:	d507      	bpl.n	8021f60 <__smakebuf_r+0x1c>
 8021f50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021f54:	6023      	str	r3, [r4, #0]
 8021f56:	6123      	str	r3, [r4, #16]
 8021f58:	2301      	movs	r3, #1
 8021f5a:	6163      	str	r3, [r4, #20]
 8021f5c:	b002      	add	sp, #8
 8021f5e:	bd70      	pop	{r4, r5, r6, pc}
 8021f60:	ab01      	add	r3, sp, #4
 8021f62:	466a      	mov	r2, sp
 8021f64:	f7ff ffc9 	bl	8021efa <__swhatbuf_r>
 8021f68:	9900      	ldr	r1, [sp, #0]
 8021f6a:	4605      	mov	r5, r0
 8021f6c:	4630      	mov	r0, r6
 8021f6e:	f000 fc37 	bl	80227e0 <_malloc_r>
 8021f72:	b948      	cbnz	r0, 8021f88 <__smakebuf_r+0x44>
 8021f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021f78:	059a      	lsls	r2, r3, #22
 8021f7a:	d4ef      	bmi.n	8021f5c <__smakebuf_r+0x18>
 8021f7c:	f023 0303 	bic.w	r3, r3, #3
 8021f80:	f043 0302 	orr.w	r3, r3, #2
 8021f84:	81a3      	strh	r3, [r4, #12]
 8021f86:	e7e3      	b.n	8021f50 <__smakebuf_r+0xc>
 8021f88:	4b0d      	ldr	r3, [pc, #52]	; (8021fc0 <__smakebuf_r+0x7c>)
 8021f8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8021f8c:	89a3      	ldrh	r3, [r4, #12]
 8021f8e:	6020      	str	r0, [r4, #0]
 8021f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021f94:	81a3      	strh	r3, [r4, #12]
 8021f96:	9b00      	ldr	r3, [sp, #0]
 8021f98:	6163      	str	r3, [r4, #20]
 8021f9a:	9b01      	ldr	r3, [sp, #4]
 8021f9c:	6120      	str	r0, [r4, #16]
 8021f9e:	b15b      	cbz	r3, 8021fb8 <__smakebuf_r+0x74>
 8021fa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021fa4:	4630      	mov	r0, r6
 8021fa6:	f000 fee9 	bl	8022d7c <_isatty_r>
 8021faa:	b128      	cbz	r0, 8021fb8 <__smakebuf_r+0x74>
 8021fac:	89a3      	ldrh	r3, [r4, #12]
 8021fae:	f023 0303 	bic.w	r3, r3, #3
 8021fb2:	f043 0301 	orr.w	r3, r3, #1
 8021fb6:	81a3      	strh	r3, [r4, #12]
 8021fb8:	89a0      	ldrh	r0, [r4, #12]
 8021fba:	4305      	orrs	r5, r0
 8021fbc:	81a5      	strh	r5, [r4, #12]
 8021fbe:	e7cd      	b.n	8021f5c <__smakebuf_r+0x18>
 8021fc0:	08021d49 	.word	0x08021d49

08021fc4 <malloc>:
 8021fc4:	4b02      	ldr	r3, [pc, #8]	; (8021fd0 <malloc+0xc>)
 8021fc6:	4601      	mov	r1, r0
 8021fc8:	6818      	ldr	r0, [r3, #0]
 8021fca:	f000 bc09 	b.w	80227e0 <_malloc_r>
 8021fce:	bf00      	nop
 8021fd0:	2000002c 	.word	0x2000002c

08021fd4 <_Balloc>:
 8021fd4:	b570      	push	{r4, r5, r6, lr}
 8021fd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021fd8:	4604      	mov	r4, r0
 8021fda:	460d      	mov	r5, r1
 8021fdc:	b976      	cbnz	r6, 8021ffc <_Balloc+0x28>
 8021fde:	2010      	movs	r0, #16
 8021fe0:	f7ff fff0 	bl	8021fc4 <malloc>
 8021fe4:	4602      	mov	r2, r0
 8021fe6:	6260      	str	r0, [r4, #36]	; 0x24
 8021fe8:	b920      	cbnz	r0, 8021ff4 <_Balloc+0x20>
 8021fea:	4b18      	ldr	r3, [pc, #96]	; (802204c <_Balloc+0x78>)
 8021fec:	4818      	ldr	r0, [pc, #96]	; (8022050 <_Balloc+0x7c>)
 8021fee:	2166      	movs	r1, #102	; 0x66
 8021ff0:	f000 fe72 	bl	8022cd8 <__assert_func>
 8021ff4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021ff8:	6006      	str	r6, [r0, #0]
 8021ffa:	60c6      	str	r6, [r0, #12]
 8021ffc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8021ffe:	68f3      	ldr	r3, [r6, #12]
 8022000:	b183      	cbz	r3, 8022024 <_Balloc+0x50>
 8022002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022004:	68db      	ldr	r3, [r3, #12]
 8022006:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802200a:	b9b8      	cbnz	r0, 802203c <_Balloc+0x68>
 802200c:	2101      	movs	r1, #1
 802200e:	fa01 f605 	lsl.w	r6, r1, r5
 8022012:	1d72      	adds	r2, r6, #5
 8022014:	0092      	lsls	r2, r2, #2
 8022016:	4620      	mov	r0, r4
 8022018:	f000 fb60 	bl	80226dc <_calloc_r>
 802201c:	b160      	cbz	r0, 8022038 <_Balloc+0x64>
 802201e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8022022:	e00e      	b.n	8022042 <_Balloc+0x6e>
 8022024:	2221      	movs	r2, #33	; 0x21
 8022026:	2104      	movs	r1, #4
 8022028:	4620      	mov	r0, r4
 802202a:	f000 fb57 	bl	80226dc <_calloc_r>
 802202e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022030:	60f0      	str	r0, [r6, #12]
 8022032:	68db      	ldr	r3, [r3, #12]
 8022034:	2b00      	cmp	r3, #0
 8022036:	d1e4      	bne.n	8022002 <_Balloc+0x2e>
 8022038:	2000      	movs	r0, #0
 802203a:	bd70      	pop	{r4, r5, r6, pc}
 802203c:	6802      	ldr	r2, [r0, #0]
 802203e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8022042:	2300      	movs	r3, #0
 8022044:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8022048:	e7f7      	b.n	802203a <_Balloc+0x66>
 802204a:	bf00      	nop
 802204c:	0802375d 	.word	0x0802375d
 8022050:	08023840 	.word	0x08023840

08022054 <_Bfree>:
 8022054:	b570      	push	{r4, r5, r6, lr}
 8022056:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8022058:	4605      	mov	r5, r0
 802205a:	460c      	mov	r4, r1
 802205c:	b976      	cbnz	r6, 802207c <_Bfree+0x28>
 802205e:	2010      	movs	r0, #16
 8022060:	f7ff ffb0 	bl	8021fc4 <malloc>
 8022064:	4602      	mov	r2, r0
 8022066:	6268      	str	r0, [r5, #36]	; 0x24
 8022068:	b920      	cbnz	r0, 8022074 <_Bfree+0x20>
 802206a:	4b09      	ldr	r3, [pc, #36]	; (8022090 <_Bfree+0x3c>)
 802206c:	4809      	ldr	r0, [pc, #36]	; (8022094 <_Bfree+0x40>)
 802206e:	218a      	movs	r1, #138	; 0x8a
 8022070:	f000 fe32 	bl	8022cd8 <__assert_func>
 8022074:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022078:	6006      	str	r6, [r0, #0]
 802207a:	60c6      	str	r6, [r0, #12]
 802207c:	b13c      	cbz	r4, 802208e <_Bfree+0x3a>
 802207e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8022080:	6862      	ldr	r2, [r4, #4]
 8022082:	68db      	ldr	r3, [r3, #12]
 8022084:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8022088:	6021      	str	r1, [r4, #0]
 802208a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802208e:	bd70      	pop	{r4, r5, r6, pc}
 8022090:	0802375d 	.word	0x0802375d
 8022094:	08023840 	.word	0x08023840

08022098 <__multadd>:
 8022098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802209c:	690d      	ldr	r5, [r1, #16]
 802209e:	4607      	mov	r7, r0
 80220a0:	460c      	mov	r4, r1
 80220a2:	461e      	mov	r6, r3
 80220a4:	f101 0c14 	add.w	ip, r1, #20
 80220a8:	2000      	movs	r0, #0
 80220aa:	f8dc 3000 	ldr.w	r3, [ip]
 80220ae:	b299      	uxth	r1, r3
 80220b0:	fb02 6101 	mla	r1, r2, r1, r6
 80220b4:	0c1e      	lsrs	r6, r3, #16
 80220b6:	0c0b      	lsrs	r3, r1, #16
 80220b8:	fb02 3306 	mla	r3, r2, r6, r3
 80220bc:	b289      	uxth	r1, r1
 80220be:	3001      	adds	r0, #1
 80220c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80220c4:	4285      	cmp	r5, r0
 80220c6:	f84c 1b04 	str.w	r1, [ip], #4
 80220ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80220ce:	dcec      	bgt.n	80220aa <__multadd+0x12>
 80220d0:	b30e      	cbz	r6, 8022116 <__multadd+0x7e>
 80220d2:	68a3      	ldr	r3, [r4, #8]
 80220d4:	42ab      	cmp	r3, r5
 80220d6:	dc19      	bgt.n	802210c <__multadd+0x74>
 80220d8:	6861      	ldr	r1, [r4, #4]
 80220da:	4638      	mov	r0, r7
 80220dc:	3101      	adds	r1, #1
 80220de:	f7ff ff79 	bl	8021fd4 <_Balloc>
 80220e2:	4680      	mov	r8, r0
 80220e4:	b928      	cbnz	r0, 80220f2 <__multadd+0x5a>
 80220e6:	4602      	mov	r2, r0
 80220e8:	4b0c      	ldr	r3, [pc, #48]	; (802211c <__multadd+0x84>)
 80220ea:	480d      	ldr	r0, [pc, #52]	; (8022120 <__multadd+0x88>)
 80220ec:	21b5      	movs	r1, #181	; 0xb5
 80220ee:	f000 fdf3 	bl	8022cd8 <__assert_func>
 80220f2:	6922      	ldr	r2, [r4, #16]
 80220f4:	3202      	adds	r2, #2
 80220f6:	f104 010c 	add.w	r1, r4, #12
 80220fa:	0092      	lsls	r2, r2, #2
 80220fc:	300c      	adds	r0, #12
 80220fe:	f7fe f8df 	bl	80202c0 <memcpy>
 8022102:	4621      	mov	r1, r4
 8022104:	4638      	mov	r0, r7
 8022106:	f7ff ffa5 	bl	8022054 <_Bfree>
 802210a:	4644      	mov	r4, r8
 802210c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8022110:	3501      	adds	r5, #1
 8022112:	615e      	str	r6, [r3, #20]
 8022114:	6125      	str	r5, [r4, #16]
 8022116:	4620      	mov	r0, r4
 8022118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802211c:	080237cf 	.word	0x080237cf
 8022120:	08023840 	.word	0x08023840

08022124 <__hi0bits>:
 8022124:	0c03      	lsrs	r3, r0, #16
 8022126:	041b      	lsls	r3, r3, #16
 8022128:	b9d3      	cbnz	r3, 8022160 <__hi0bits+0x3c>
 802212a:	0400      	lsls	r0, r0, #16
 802212c:	2310      	movs	r3, #16
 802212e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8022132:	bf04      	itt	eq
 8022134:	0200      	lsleq	r0, r0, #8
 8022136:	3308      	addeq	r3, #8
 8022138:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802213c:	bf04      	itt	eq
 802213e:	0100      	lsleq	r0, r0, #4
 8022140:	3304      	addeq	r3, #4
 8022142:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8022146:	bf04      	itt	eq
 8022148:	0080      	lsleq	r0, r0, #2
 802214a:	3302      	addeq	r3, #2
 802214c:	2800      	cmp	r0, #0
 802214e:	db05      	blt.n	802215c <__hi0bits+0x38>
 8022150:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8022154:	f103 0301 	add.w	r3, r3, #1
 8022158:	bf08      	it	eq
 802215a:	2320      	moveq	r3, #32
 802215c:	4618      	mov	r0, r3
 802215e:	4770      	bx	lr
 8022160:	2300      	movs	r3, #0
 8022162:	e7e4      	b.n	802212e <__hi0bits+0xa>

08022164 <__lo0bits>:
 8022164:	6803      	ldr	r3, [r0, #0]
 8022166:	f013 0207 	ands.w	r2, r3, #7
 802216a:	4601      	mov	r1, r0
 802216c:	d00b      	beq.n	8022186 <__lo0bits+0x22>
 802216e:	07da      	lsls	r2, r3, #31
 8022170:	d423      	bmi.n	80221ba <__lo0bits+0x56>
 8022172:	0798      	lsls	r0, r3, #30
 8022174:	bf49      	itett	mi
 8022176:	085b      	lsrmi	r3, r3, #1
 8022178:	089b      	lsrpl	r3, r3, #2
 802217a:	2001      	movmi	r0, #1
 802217c:	600b      	strmi	r3, [r1, #0]
 802217e:	bf5c      	itt	pl
 8022180:	600b      	strpl	r3, [r1, #0]
 8022182:	2002      	movpl	r0, #2
 8022184:	4770      	bx	lr
 8022186:	b298      	uxth	r0, r3
 8022188:	b9a8      	cbnz	r0, 80221b6 <__lo0bits+0x52>
 802218a:	0c1b      	lsrs	r3, r3, #16
 802218c:	2010      	movs	r0, #16
 802218e:	b2da      	uxtb	r2, r3
 8022190:	b90a      	cbnz	r2, 8022196 <__lo0bits+0x32>
 8022192:	3008      	adds	r0, #8
 8022194:	0a1b      	lsrs	r3, r3, #8
 8022196:	071a      	lsls	r2, r3, #28
 8022198:	bf04      	itt	eq
 802219a:	091b      	lsreq	r3, r3, #4
 802219c:	3004      	addeq	r0, #4
 802219e:	079a      	lsls	r2, r3, #30
 80221a0:	bf04      	itt	eq
 80221a2:	089b      	lsreq	r3, r3, #2
 80221a4:	3002      	addeq	r0, #2
 80221a6:	07da      	lsls	r2, r3, #31
 80221a8:	d403      	bmi.n	80221b2 <__lo0bits+0x4e>
 80221aa:	085b      	lsrs	r3, r3, #1
 80221ac:	f100 0001 	add.w	r0, r0, #1
 80221b0:	d005      	beq.n	80221be <__lo0bits+0x5a>
 80221b2:	600b      	str	r3, [r1, #0]
 80221b4:	4770      	bx	lr
 80221b6:	4610      	mov	r0, r2
 80221b8:	e7e9      	b.n	802218e <__lo0bits+0x2a>
 80221ba:	2000      	movs	r0, #0
 80221bc:	4770      	bx	lr
 80221be:	2020      	movs	r0, #32
 80221c0:	4770      	bx	lr
	...

080221c4 <__i2b>:
 80221c4:	b510      	push	{r4, lr}
 80221c6:	460c      	mov	r4, r1
 80221c8:	2101      	movs	r1, #1
 80221ca:	f7ff ff03 	bl	8021fd4 <_Balloc>
 80221ce:	4602      	mov	r2, r0
 80221d0:	b928      	cbnz	r0, 80221de <__i2b+0x1a>
 80221d2:	4b05      	ldr	r3, [pc, #20]	; (80221e8 <__i2b+0x24>)
 80221d4:	4805      	ldr	r0, [pc, #20]	; (80221ec <__i2b+0x28>)
 80221d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80221da:	f000 fd7d 	bl	8022cd8 <__assert_func>
 80221de:	2301      	movs	r3, #1
 80221e0:	6144      	str	r4, [r0, #20]
 80221e2:	6103      	str	r3, [r0, #16]
 80221e4:	bd10      	pop	{r4, pc}
 80221e6:	bf00      	nop
 80221e8:	080237cf 	.word	0x080237cf
 80221ec:	08023840 	.word	0x08023840

080221f0 <__multiply>:
 80221f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221f4:	4691      	mov	r9, r2
 80221f6:	690a      	ldr	r2, [r1, #16]
 80221f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80221fc:	429a      	cmp	r2, r3
 80221fe:	bfb8      	it	lt
 8022200:	460b      	movlt	r3, r1
 8022202:	460c      	mov	r4, r1
 8022204:	bfbc      	itt	lt
 8022206:	464c      	movlt	r4, r9
 8022208:	4699      	movlt	r9, r3
 802220a:	6927      	ldr	r7, [r4, #16]
 802220c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8022210:	68a3      	ldr	r3, [r4, #8]
 8022212:	6861      	ldr	r1, [r4, #4]
 8022214:	eb07 060a 	add.w	r6, r7, sl
 8022218:	42b3      	cmp	r3, r6
 802221a:	b085      	sub	sp, #20
 802221c:	bfb8      	it	lt
 802221e:	3101      	addlt	r1, #1
 8022220:	f7ff fed8 	bl	8021fd4 <_Balloc>
 8022224:	b930      	cbnz	r0, 8022234 <__multiply+0x44>
 8022226:	4602      	mov	r2, r0
 8022228:	4b44      	ldr	r3, [pc, #272]	; (802233c <__multiply+0x14c>)
 802222a:	4845      	ldr	r0, [pc, #276]	; (8022340 <__multiply+0x150>)
 802222c:	f240 115d 	movw	r1, #349	; 0x15d
 8022230:	f000 fd52 	bl	8022cd8 <__assert_func>
 8022234:	f100 0514 	add.w	r5, r0, #20
 8022238:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802223c:	462b      	mov	r3, r5
 802223e:	2200      	movs	r2, #0
 8022240:	4543      	cmp	r3, r8
 8022242:	d321      	bcc.n	8022288 <__multiply+0x98>
 8022244:	f104 0314 	add.w	r3, r4, #20
 8022248:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802224c:	f109 0314 	add.w	r3, r9, #20
 8022250:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8022254:	9202      	str	r2, [sp, #8]
 8022256:	1b3a      	subs	r2, r7, r4
 8022258:	3a15      	subs	r2, #21
 802225a:	f022 0203 	bic.w	r2, r2, #3
 802225e:	3204      	adds	r2, #4
 8022260:	f104 0115 	add.w	r1, r4, #21
 8022264:	428f      	cmp	r7, r1
 8022266:	bf38      	it	cc
 8022268:	2204      	movcc	r2, #4
 802226a:	9201      	str	r2, [sp, #4]
 802226c:	9a02      	ldr	r2, [sp, #8]
 802226e:	9303      	str	r3, [sp, #12]
 8022270:	429a      	cmp	r2, r3
 8022272:	d80c      	bhi.n	802228e <__multiply+0x9e>
 8022274:	2e00      	cmp	r6, #0
 8022276:	dd03      	ble.n	8022280 <__multiply+0x90>
 8022278:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802227c:	2b00      	cmp	r3, #0
 802227e:	d05a      	beq.n	8022336 <__multiply+0x146>
 8022280:	6106      	str	r6, [r0, #16]
 8022282:	b005      	add	sp, #20
 8022284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022288:	f843 2b04 	str.w	r2, [r3], #4
 802228c:	e7d8      	b.n	8022240 <__multiply+0x50>
 802228e:	f8b3 a000 	ldrh.w	sl, [r3]
 8022292:	f1ba 0f00 	cmp.w	sl, #0
 8022296:	d024      	beq.n	80222e2 <__multiply+0xf2>
 8022298:	f104 0e14 	add.w	lr, r4, #20
 802229c:	46a9      	mov	r9, r5
 802229e:	f04f 0c00 	mov.w	ip, #0
 80222a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80222a6:	f8d9 1000 	ldr.w	r1, [r9]
 80222aa:	fa1f fb82 	uxth.w	fp, r2
 80222ae:	b289      	uxth	r1, r1
 80222b0:	fb0a 110b 	mla	r1, sl, fp, r1
 80222b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80222b8:	f8d9 2000 	ldr.w	r2, [r9]
 80222bc:	4461      	add	r1, ip
 80222be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80222c2:	fb0a c20b 	mla	r2, sl, fp, ip
 80222c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80222ca:	b289      	uxth	r1, r1
 80222cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80222d0:	4577      	cmp	r7, lr
 80222d2:	f849 1b04 	str.w	r1, [r9], #4
 80222d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80222da:	d8e2      	bhi.n	80222a2 <__multiply+0xb2>
 80222dc:	9a01      	ldr	r2, [sp, #4]
 80222de:	f845 c002 	str.w	ip, [r5, r2]
 80222e2:	9a03      	ldr	r2, [sp, #12]
 80222e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80222e8:	3304      	adds	r3, #4
 80222ea:	f1b9 0f00 	cmp.w	r9, #0
 80222ee:	d020      	beq.n	8022332 <__multiply+0x142>
 80222f0:	6829      	ldr	r1, [r5, #0]
 80222f2:	f104 0c14 	add.w	ip, r4, #20
 80222f6:	46ae      	mov	lr, r5
 80222f8:	f04f 0a00 	mov.w	sl, #0
 80222fc:	f8bc b000 	ldrh.w	fp, [ip]
 8022300:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8022304:	fb09 220b 	mla	r2, r9, fp, r2
 8022308:	4492      	add	sl, r2
 802230a:	b289      	uxth	r1, r1
 802230c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8022310:	f84e 1b04 	str.w	r1, [lr], #4
 8022314:	f85c 2b04 	ldr.w	r2, [ip], #4
 8022318:	f8be 1000 	ldrh.w	r1, [lr]
 802231c:	0c12      	lsrs	r2, r2, #16
 802231e:	fb09 1102 	mla	r1, r9, r2, r1
 8022322:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8022326:	4567      	cmp	r7, ip
 8022328:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802232c:	d8e6      	bhi.n	80222fc <__multiply+0x10c>
 802232e:	9a01      	ldr	r2, [sp, #4]
 8022330:	50a9      	str	r1, [r5, r2]
 8022332:	3504      	adds	r5, #4
 8022334:	e79a      	b.n	802226c <__multiply+0x7c>
 8022336:	3e01      	subs	r6, #1
 8022338:	e79c      	b.n	8022274 <__multiply+0x84>
 802233a:	bf00      	nop
 802233c:	080237cf 	.word	0x080237cf
 8022340:	08023840 	.word	0x08023840

08022344 <__pow5mult>:
 8022344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022348:	4615      	mov	r5, r2
 802234a:	f012 0203 	ands.w	r2, r2, #3
 802234e:	4606      	mov	r6, r0
 8022350:	460f      	mov	r7, r1
 8022352:	d007      	beq.n	8022364 <__pow5mult+0x20>
 8022354:	4c25      	ldr	r4, [pc, #148]	; (80223ec <__pow5mult+0xa8>)
 8022356:	3a01      	subs	r2, #1
 8022358:	2300      	movs	r3, #0
 802235a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802235e:	f7ff fe9b 	bl	8022098 <__multadd>
 8022362:	4607      	mov	r7, r0
 8022364:	10ad      	asrs	r5, r5, #2
 8022366:	d03d      	beq.n	80223e4 <__pow5mult+0xa0>
 8022368:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802236a:	b97c      	cbnz	r4, 802238c <__pow5mult+0x48>
 802236c:	2010      	movs	r0, #16
 802236e:	f7ff fe29 	bl	8021fc4 <malloc>
 8022372:	4602      	mov	r2, r0
 8022374:	6270      	str	r0, [r6, #36]	; 0x24
 8022376:	b928      	cbnz	r0, 8022384 <__pow5mult+0x40>
 8022378:	4b1d      	ldr	r3, [pc, #116]	; (80223f0 <__pow5mult+0xac>)
 802237a:	481e      	ldr	r0, [pc, #120]	; (80223f4 <__pow5mult+0xb0>)
 802237c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8022380:	f000 fcaa 	bl	8022cd8 <__assert_func>
 8022384:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8022388:	6004      	str	r4, [r0, #0]
 802238a:	60c4      	str	r4, [r0, #12]
 802238c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8022390:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022394:	b94c      	cbnz	r4, 80223aa <__pow5mult+0x66>
 8022396:	f240 2171 	movw	r1, #625	; 0x271
 802239a:	4630      	mov	r0, r6
 802239c:	f7ff ff12 	bl	80221c4 <__i2b>
 80223a0:	2300      	movs	r3, #0
 80223a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80223a6:	4604      	mov	r4, r0
 80223a8:	6003      	str	r3, [r0, #0]
 80223aa:	f04f 0900 	mov.w	r9, #0
 80223ae:	07eb      	lsls	r3, r5, #31
 80223b0:	d50a      	bpl.n	80223c8 <__pow5mult+0x84>
 80223b2:	4639      	mov	r1, r7
 80223b4:	4622      	mov	r2, r4
 80223b6:	4630      	mov	r0, r6
 80223b8:	f7ff ff1a 	bl	80221f0 <__multiply>
 80223bc:	4639      	mov	r1, r7
 80223be:	4680      	mov	r8, r0
 80223c0:	4630      	mov	r0, r6
 80223c2:	f7ff fe47 	bl	8022054 <_Bfree>
 80223c6:	4647      	mov	r7, r8
 80223c8:	106d      	asrs	r5, r5, #1
 80223ca:	d00b      	beq.n	80223e4 <__pow5mult+0xa0>
 80223cc:	6820      	ldr	r0, [r4, #0]
 80223ce:	b938      	cbnz	r0, 80223e0 <__pow5mult+0x9c>
 80223d0:	4622      	mov	r2, r4
 80223d2:	4621      	mov	r1, r4
 80223d4:	4630      	mov	r0, r6
 80223d6:	f7ff ff0b 	bl	80221f0 <__multiply>
 80223da:	6020      	str	r0, [r4, #0]
 80223dc:	f8c0 9000 	str.w	r9, [r0]
 80223e0:	4604      	mov	r4, r0
 80223e2:	e7e4      	b.n	80223ae <__pow5mult+0x6a>
 80223e4:	4638      	mov	r0, r7
 80223e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80223ea:	bf00      	nop
 80223ec:	08023990 	.word	0x08023990
 80223f0:	0802375d 	.word	0x0802375d
 80223f4:	08023840 	.word	0x08023840

080223f8 <__lshift>:
 80223f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80223fc:	460c      	mov	r4, r1
 80223fe:	6849      	ldr	r1, [r1, #4]
 8022400:	6923      	ldr	r3, [r4, #16]
 8022402:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8022406:	68a3      	ldr	r3, [r4, #8]
 8022408:	4607      	mov	r7, r0
 802240a:	4691      	mov	r9, r2
 802240c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022410:	f108 0601 	add.w	r6, r8, #1
 8022414:	42b3      	cmp	r3, r6
 8022416:	db0b      	blt.n	8022430 <__lshift+0x38>
 8022418:	4638      	mov	r0, r7
 802241a:	f7ff fddb 	bl	8021fd4 <_Balloc>
 802241e:	4605      	mov	r5, r0
 8022420:	b948      	cbnz	r0, 8022436 <__lshift+0x3e>
 8022422:	4602      	mov	r2, r0
 8022424:	4b2a      	ldr	r3, [pc, #168]	; (80224d0 <__lshift+0xd8>)
 8022426:	482b      	ldr	r0, [pc, #172]	; (80224d4 <__lshift+0xdc>)
 8022428:	f240 11d9 	movw	r1, #473	; 0x1d9
 802242c:	f000 fc54 	bl	8022cd8 <__assert_func>
 8022430:	3101      	adds	r1, #1
 8022432:	005b      	lsls	r3, r3, #1
 8022434:	e7ee      	b.n	8022414 <__lshift+0x1c>
 8022436:	2300      	movs	r3, #0
 8022438:	f100 0114 	add.w	r1, r0, #20
 802243c:	f100 0210 	add.w	r2, r0, #16
 8022440:	4618      	mov	r0, r3
 8022442:	4553      	cmp	r3, sl
 8022444:	db37      	blt.n	80224b6 <__lshift+0xbe>
 8022446:	6920      	ldr	r0, [r4, #16]
 8022448:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802244c:	f104 0314 	add.w	r3, r4, #20
 8022450:	f019 091f 	ands.w	r9, r9, #31
 8022454:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8022458:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 802245c:	d02f      	beq.n	80224be <__lshift+0xc6>
 802245e:	f1c9 0e20 	rsb	lr, r9, #32
 8022462:	468a      	mov	sl, r1
 8022464:	f04f 0c00 	mov.w	ip, #0
 8022468:	681a      	ldr	r2, [r3, #0]
 802246a:	fa02 f209 	lsl.w	r2, r2, r9
 802246e:	ea42 020c 	orr.w	r2, r2, ip
 8022472:	f84a 2b04 	str.w	r2, [sl], #4
 8022476:	f853 2b04 	ldr.w	r2, [r3], #4
 802247a:	4298      	cmp	r0, r3
 802247c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8022480:	d8f2      	bhi.n	8022468 <__lshift+0x70>
 8022482:	1b03      	subs	r3, r0, r4
 8022484:	3b15      	subs	r3, #21
 8022486:	f023 0303 	bic.w	r3, r3, #3
 802248a:	3304      	adds	r3, #4
 802248c:	f104 0215 	add.w	r2, r4, #21
 8022490:	4290      	cmp	r0, r2
 8022492:	bf38      	it	cc
 8022494:	2304      	movcc	r3, #4
 8022496:	f841 c003 	str.w	ip, [r1, r3]
 802249a:	f1bc 0f00 	cmp.w	ip, #0
 802249e:	d001      	beq.n	80224a4 <__lshift+0xac>
 80224a0:	f108 0602 	add.w	r6, r8, #2
 80224a4:	3e01      	subs	r6, #1
 80224a6:	4638      	mov	r0, r7
 80224a8:	612e      	str	r6, [r5, #16]
 80224aa:	4621      	mov	r1, r4
 80224ac:	f7ff fdd2 	bl	8022054 <_Bfree>
 80224b0:	4628      	mov	r0, r5
 80224b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80224b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80224ba:	3301      	adds	r3, #1
 80224bc:	e7c1      	b.n	8022442 <__lshift+0x4a>
 80224be:	3904      	subs	r1, #4
 80224c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80224c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80224c8:	4298      	cmp	r0, r3
 80224ca:	d8f9      	bhi.n	80224c0 <__lshift+0xc8>
 80224cc:	e7ea      	b.n	80224a4 <__lshift+0xac>
 80224ce:	bf00      	nop
 80224d0:	080237cf 	.word	0x080237cf
 80224d4:	08023840 	.word	0x08023840

080224d8 <__mcmp>:
 80224d8:	b530      	push	{r4, r5, lr}
 80224da:	6902      	ldr	r2, [r0, #16]
 80224dc:	690c      	ldr	r4, [r1, #16]
 80224de:	1b12      	subs	r2, r2, r4
 80224e0:	d10e      	bne.n	8022500 <__mcmp+0x28>
 80224e2:	f100 0314 	add.w	r3, r0, #20
 80224e6:	3114      	adds	r1, #20
 80224e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80224ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80224f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80224f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80224f8:	42a5      	cmp	r5, r4
 80224fa:	d003      	beq.n	8022504 <__mcmp+0x2c>
 80224fc:	d305      	bcc.n	802250a <__mcmp+0x32>
 80224fe:	2201      	movs	r2, #1
 8022500:	4610      	mov	r0, r2
 8022502:	bd30      	pop	{r4, r5, pc}
 8022504:	4283      	cmp	r3, r0
 8022506:	d3f3      	bcc.n	80224f0 <__mcmp+0x18>
 8022508:	e7fa      	b.n	8022500 <__mcmp+0x28>
 802250a:	f04f 32ff 	mov.w	r2, #4294967295
 802250e:	e7f7      	b.n	8022500 <__mcmp+0x28>

08022510 <__mdiff>:
 8022510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022514:	460c      	mov	r4, r1
 8022516:	4606      	mov	r6, r0
 8022518:	4611      	mov	r1, r2
 802251a:	4620      	mov	r0, r4
 802251c:	4690      	mov	r8, r2
 802251e:	f7ff ffdb 	bl	80224d8 <__mcmp>
 8022522:	1e05      	subs	r5, r0, #0
 8022524:	d110      	bne.n	8022548 <__mdiff+0x38>
 8022526:	4629      	mov	r1, r5
 8022528:	4630      	mov	r0, r6
 802252a:	f7ff fd53 	bl	8021fd4 <_Balloc>
 802252e:	b930      	cbnz	r0, 802253e <__mdiff+0x2e>
 8022530:	4b3a      	ldr	r3, [pc, #232]	; (802261c <__mdiff+0x10c>)
 8022532:	4602      	mov	r2, r0
 8022534:	f240 2132 	movw	r1, #562	; 0x232
 8022538:	4839      	ldr	r0, [pc, #228]	; (8022620 <__mdiff+0x110>)
 802253a:	f000 fbcd 	bl	8022cd8 <__assert_func>
 802253e:	2301      	movs	r3, #1
 8022540:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8022544:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022548:	bfa4      	itt	ge
 802254a:	4643      	movge	r3, r8
 802254c:	46a0      	movge	r8, r4
 802254e:	4630      	mov	r0, r6
 8022550:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022554:	bfa6      	itte	ge
 8022556:	461c      	movge	r4, r3
 8022558:	2500      	movge	r5, #0
 802255a:	2501      	movlt	r5, #1
 802255c:	f7ff fd3a 	bl	8021fd4 <_Balloc>
 8022560:	b920      	cbnz	r0, 802256c <__mdiff+0x5c>
 8022562:	4b2e      	ldr	r3, [pc, #184]	; (802261c <__mdiff+0x10c>)
 8022564:	4602      	mov	r2, r0
 8022566:	f44f 7110 	mov.w	r1, #576	; 0x240
 802256a:	e7e5      	b.n	8022538 <__mdiff+0x28>
 802256c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8022570:	6926      	ldr	r6, [r4, #16]
 8022572:	60c5      	str	r5, [r0, #12]
 8022574:	f104 0914 	add.w	r9, r4, #20
 8022578:	f108 0514 	add.w	r5, r8, #20
 802257c:	f100 0e14 	add.w	lr, r0, #20
 8022580:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8022584:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8022588:	f108 0210 	add.w	r2, r8, #16
 802258c:	46f2      	mov	sl, lr
 802258e:	2100      	movs	r1, #0
 8022590:	f859 3b04 	ldr.w	r3, [r9], #4
 8022594:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8022598:	fa1f f883 	uxth.w	r8, r3
 802259c:	fa11 f18b 	uxtah	r1, r1, fp
 80225a0:	0c1b      	lsrs	r3, r3, #16
 80225a2:	eba1 0808 	sub.w	r8, r1, r8
 80225a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80225aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80225ae:	fa1f f888 	uxth.w	r8, r8
 80225b2:	1419      	asrs	r1, r3, #16
 80225b4:	454e      	cmp	r6, r9
 80225b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80225ba:	f84a 3b04 	str.w	r3, [sl], #4
 80225be:	d8e7      	bhi.n	8022590 <__mdiff+0x80>
 80225c0:	1b33      	subs	r3, r6, r4
 80225c2:	3b15      	subs	r3, #21
 80225c4:	f023 0303 	bic.w	r3, r3, #3
 80225c8:	3304      	adds	r3, #4
 80225ca:	3415      	adds	r4, #21
 80225cc:	42a6      	cmp	r6, r4
 80225ce:	bf38      	it	cc
 80225d0:	2304      	movcc	r3, #4
 80225d2:	441d      	add	r5, r3
 80225d4:	4473      	add	r3, lr
 80225d6:	469e      	mov	lr, r3
 80225d8:	462e      	mov	r6, r5
 80225da:	4566      	cmp	r6, ip
 80225dc:	d30e      	bcc.n	80225fc <__mdiff+0xec>
 80225de:	f10c 0203 	add.w	r2, ip, #3
 80225e2:	1b52      	subs	r2, r2, r5
 80225e4:	f022 0203 	bic.w	r2, r2, #3
 80225e8:	3d03      	subs	r5, #3
 80225ea:	45ac      	cmp	ip, r5
 80225ec:	bf38      	it	cc
 80225ee:	2200      	movcc	r2, #0
 80225f0:	441a      	add	r2, r3
 80225f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80225f6:	b17b      	cbz	r3, 8022618 <__mdiff+0x108>
 80225f8:	6107      	str	r7, [r0, #16]
 80225fa:	e7a3      	b.n	8022544 <__mdiff+0x34>
 80225fc:	f856 8b04 	ldr.w	r8, [r6], #4
 8022600:	fa11 f288 	uxtah	r2, r1, r8
 8022604:	1414      	asrs	r4, r2, #16
 8022606:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802260a:	b292      	uxth	r2, r2
 802260c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8022610:	f84e 2b04 	str.w	r2, [lr], #4
 8022614:	1421      	asrs	r1, r4, #16
 8022616:	e7e0      	b.n	80225da <__mdiff+0xca>
 8022618:	3f01      	subs	r7, #1
 802261a:	e7ea      	b.n	80225f2 <__mdiff+0xe2>
 802261c:	080237cf 	.word	0x080237cf
 8022620:	08023840 	.word	0x08023840

08022624 <__d2b>:
 8022624:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022628:	4689      	mov	r9, r1
 802262a:	2101      	movs	r1, #1
 802262c:	ec57 6b10 	vmov	r6, r7, d0
 8022630:	4690      	mov	r8, r2
 8022632:	f7ff fccf 	bl	8021fd4 <_Balloc>
 8022636:	4604      	mov	r4, r0
 8022638:	b930      	cbnz	r0, 8022648 <__d2b+0x24>
 802263a:	4602      	mov	r2, r0
 802263c:	4b25      	ldr	r3, [pc, #148]	; (80226d4 <__d2b+0xb0>)
 802263e:	4826      	ldr	r0, [pc, #152]	; (80226d8 <__d2b+0xb4>)
 8022640:	f240 310a 	movw	r1, #778	; 0x30a
 8022644:	f000 fb48 	bl	8022cd8 <__assert_func>
 8022648:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802264c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8022650:	bb35      	cbnz	r5, 80226a0 <__d2b+0x7c>
 8022652:	2e00      	cmp	r6, #0
 8022654:	9301      	str	r3, [sp, #4]
 8022656:	d028      	beq.n	80226aa <__d2b+0x86>
 8022658:	4668      	mov	r0, sp
 802265a:	9600      	str	r6, [sp, #0]
 802265c:	f7ff fd82 	bl	8022164 <__lo0bits>
 8022660:	9900      	ldr	r1, [sp, #0]
 8022662:	b300      	cbz	r0, 80226a6 <__d2b+0x82>
 8022664:	9a01      	ldr	r2, [sp, #4]
 8022666:	f1c0 0320 	rsb	r3, r0, #32
 802266a:	fa02 f303 	lsl.w	r3, r2, r3
 802266e:	430b      	orrs	r3, r1
 8022670:	40c2      	lsrs	r2, r0
 8022672:	6163      	str	r3, [r4, #20]
 8022674:	9201      	str	r2, [sp, #4]
 8022676:	9b01      	ldr	r3, [sp, #4]
 8022678:	61a3      	str	r3, [r4, #24]
 802267a:	2b00      	cmp	r3, #0
 802267c:	bf14      	ite	ne
 802267e:	2202      	movne	r2, #2
 8022680:	2201      	moveq	r2, #1
 8022682:	6122      	str	r2, [r4, #16]
 8022684:	b1d5      	cbz	r5, 80226bc <__d2b+0x98>
 8022686:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802268a:	4405      	add	r5, r0
 802268c:	f8c9 5000 	str.w	r5, [r9]
 8022690:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022694:	f8c8 0000 	str.w	r0, [r8]
 8022698:	4620      	mov	r0, r4
 802269a:	b003      	add	sp, #12
 802269c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80226a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80226a4:	e7d5      	b.n	8022652 <__d2b+0x2e>
 80226a6:	6161      	str	r1, [r4, #20]
 80226a8:	e7e5      	b.n	8022676 <__d2b+0x52>
 80226aa:	a801      	add	r0, sp, #4
 80226ac:	f7ff fd5a 	bl	8022164 <__lo0bits>
 80226b0:	9b01      	ldr	r3, [sp, #4]
 80226b2:	6163      	str	r3, [r4, #20]
 80226b4:	2201      	movs	r2, #1
 80226b6:	6122      	str	r2, [r4, #16]
 80226b8:	3020      	adds	r0, #32
 80226ba:	e7e3      	b.n	8022684 <__d2b+0x60>
 80226bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80226c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80226c4:	f8c9 0000 	str.w	r0, [r9]
 80226c8:	6918      	ldr	r0, [r3, #16]
 80226ca:	f7ff fd2b 	bl	8022124 <__hi0bits>
 80226ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80226d2:	e7df      	b.n	8022694 <__d2b+0x70>
 80226d4:	080237cf 	.word	0x080237cf
 80226d8:	08023840 	.word	0x08023840

080226dc <_calloc_r>:
 80226dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80226de:	fba1 2402 	umull	r2, r4, r1, r2
 80226e2:	b94c      	cbnz	r4, 80226f8 <_calloc_r+0x1c>
 80226e4:	4611      	mov	r1, r2
 80226e6:	9201      	str	r2, [sp, #4]
 80226e8:	f000 f87a 	bl	80227e0 <_malloc_r>
 80226ec:	9a01      	ldr	r2, [sp, #4]
 80226ee:	4605      	mov	r5, r0
 80226f0:	b930      	cbnz	r0, 8022700 <_calloc_r+0x24>
 80226f2:	4628      	mov	r0, r5
 80226f4:	b003      	add	sp, #12
 80226f6:	bd30      	pop	{r4, r5, pc}
 80226f8:	220c      	movs	r2, #12
 80226fa:	6002      	str	r2, [r0, #0]
 80226fc:	2500      	movs	r5, #0
 80226fe:	e7f8      	b.n	80226f2 <_calloc_r+0x16>
 8022700:	4621      	mov	r1, r4
 8022702:	f7fd fdeb 	bl	80202dc <memset>
 8022706:	e7f4      	b.n	80226f2 <_calloc_r+0x16>

08022708 <_free_r>:
 8022708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802270a:	2900      	cmp	r1, #0
 802270c:	d044      	beq.n	8022798 <_free_r+0x90>
 802270e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022712:	9001      	str	r0, [sp, #4]
 8022714:	2b00      	cmp	r3, #0
 8022716:	f1a1 0404 	sub.w	r4, r1, #4
 802271a:	bfb8      	it	lt
 802271c:	18e4      	addlt	r4, r4, r3
 802271e:	f000 fb61 	bl	8022de4 <__malloc_lock>
 8022722:	4a1e      	ldr	r2, [pc, #120]	; (802279c <_free_r+0x94>)
 8022724:	9801      	ldr	r0, [sp, #4]
 8022726:	6813      	ldr	r3, [r2, #0]
 8022728:	b933      	cbnz	r3, 8022738 <_free_r+0x30>
 802272a:	6063      	str	r3, [r4, #4]
 802272c:	6014      	str	r4, [r2, #0]
 802272e:	b003      	add	sp, #12
 8022730:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022734:	f000 bb5c 	b.w	8022df0 <__malloc_unlock>
 8022738:	42a3      	cmp	r3, r4
 802273a:	d908      	bls.n	802274e <_free_r+0x46>
 802273c:	6825      	ldr	r5, [r4, #0]
 802273e:	1961      	adds	r1, r4, r5
 8022740:	428b      	cmp	r3, r1
 8022742:	bf01      	itttt	eq
 8022744:	6819      	ldreq	r1, [r3, #0]
 8022746:	685b      	ldreq	r3, [r3, #4]
 8022748:	1949      	addeq	r1, r1, r5
 802274a:	6021      	streq	r1, [r4, #0]
 802274c:	e7ed      	b.n	802272a <_free_r+0x22>
 802274e:	461a      	mov	r2, r3
 8022750:	685b      	ldr	r3, [r3, #4]
 8022752:	b10b      	cbz	r3, 8022758 <_free_r+0x50>
 8022754:	42a3      	cmp	r3, r4
 8022756:	d9fa      	bls.n	802274e <_free_r+0x46>
 8022758:	6811      	ldr	r1, [r2, #0]
 802275a:	1855      	adds	r5, r2, r1
 802275c:	42a5      	cmp	r5, r4
 802275e:	d10b      	bne.n	8022778 <_free_r+0x70>
 8022760:	6824      	ldr	r4, [r4, #0]
 8022762:	4421      	add	r1, r4
 8022764:	1854      	adds	r4, r2, r1
 8022766:	42a3      	cmp	r3, r4
 8022768:	6011      	str	r1, [r2, #0]
 802276a:	d1e0      	bne.n	802272e <_free_r+0x26>
 802276c:	681c      	ldr	r4, [r3, #0]
 802276e:	685b      	ldr	r3, [r3, #4]
 8022770:	6053      	str	r3, [r2, #4]
 8022772:	4421      	add	r1, r4
 8022774:	6011      	str	r1, [r2, #0]
 8022776:	e7da      	b.n	802272e <_free_r+0x26>
 8022778:	d902      	bls.n	8022780 <_free_r+0x78>
 802277a:	230c      	movs	r3, #12
 802277c:	6003      	str	r3, [r0, #0]
 802277e:	e7d6      	b.n	802272e <_free_r+0x26>
 8022780:	6825      	ldr	r5, [r4, #0]
 8022782:	1961      	adds	r1, r4, r5
 8022784:	428b      	cmp	r3, r1
 8022786:	bf04      	itt	eq
 8022788:	6819      	ldreq	r1, [r3, #0]
 802278a:	685b      	ldreq	r3, [r3, #4]
 802278c:	6063      	str	r3, [r4, #4]
 802278e:	bf04      	itt	eq
 8022790:	1949      	addeq	r1, r1, r5
 8022792:	6021      	streq	r1, [r4, #0]
 8022794:	6054      	str	r4, [r2, #4]
 8022796:	e7ca      	b.n	802272e <_free_r+0x26>
 8022798:	b003      	add	sp, #12
 802279a:	bd30      	pop	{r4, r5, pc}
 802279c:	2000f910 	.word	0x2000f910

080227a0 <sbrk_aligned>:
 80227a0:	b570      	push	{r4, r5, r6, lr}
 80227a2:	4e0e      	ldr	r6, [pc, #56]	; (80227dc <sbrk_aligned+0x3c>)
 80227a4:	460c      	mov	r4, r1
 80227a6:	6831      	ldr	r1, [r6, #0]
 80227a8:	4605      	mov	r5, r0
 80227aa:	b911      	cbnz	r1, 80227b2 <sbrk_aligned+0x12>
 80227ac:	f000 fa2e 	bl	8022c0c <_sbrk_r>
 80227b0:	6030      	str	r0, [r6, #0]
 80227b2:	4621      	mov	r1, r4
 80227b4:	4628      	mov	r0, r5
 80227b6:	f000 fa29 	bl	8022c0c <_sbrk_r>
 80227ba:	1c43      	adds	r3, r0, #1
 80227bc:	d00a      	beq.n	80227d4 <sbrk_aligned+0x34>
 80227be:	1cc4      	adds	r4, r0, #3
 80227c0:	f024 0403 	bic.w	r4, r4, #3
 80227c4:	42a0      	cmp	r0, r4
 80227c6:	d007      	beq.n	80227d8 <sbrk_aligned+0x38>
 80227c8:	1a21      	subs	r1, r4, r0
 80227ca:	4628      	mov	r0, r5
 80227cc:	f000 fa1e 	bl	8022c0c <_sbrk_r>
 80227d0:	3001      	adds	r0, #1
 80227d2:	d101      	bne.n	80227d8 <sbrk_aligned+0x38>
 80227d4:	f04f 34ff 	mov.w	r4, #4294967295
 80227d8:	4620      	mov	r0, r4
 80227da:	bd70      	pop	{r4, r5, r6, pc}
 80227dc:	2000f914 	.word	0x2000f914

080227e0 <_malloc_r>:
 80227e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80227e4:	1ccd      	adds	r5, r1, #3
 80227e6:	f025 0503 	bic.w	r5, r5, #3
 80227ea:	3508      	adds	r5, #8
 80227ec:	2d0c      	cmp	r5, #12
 80227ee:	bf38      	it	cc
 80227f0:	250c      	movcc	r5, #12
 80227f2:	2d00      	cmp	r5, #0
 80227f4:	4607      	mov	r7, r0
 80227f6:	db01      	blt.n	80227fc <_malloc_r+0x1c>
 80227f8:	42a9      	cmp	r1, r5
 80227fa:	d905      	bls.n	8022808 <_malloc_r+0x28>
 80227fc:	230c      	movs	r3, #12
 80227fe:	603b      	str	r3, [r7, #0]
 8022800:	2600      	movs	r6, #0
 8022802:	4630      	mov	r0, r6
 8022804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022808:	4e2e      	ldr	r6, [pc, #184]	; (80228c4 <_malloc_r+0xe4>)
 802280a:	f000 faeb 	bl	8022de4 <__malloc_lock>
 802280e:	6833      	ldr	r3, [r6, #0]
 8022810:	461c      	mov	r4, r3
 8022812:	bb34      	cbnz	r4, 8022862 <_malloc_r+0x82>
 8022814:	4629      	mov	r1, r5
 8022816:	4638      	mov	r0, r7
 8022818:	f7ff ffc2 	bl	80227a0 <sbrk_aligned>
 802281c:	1c43      	adds	r3, r0, #1
 802281e:	4604      	mov	r4, r0
 8022820:	d14d      	bne.n	80228be <_malloc_r+0xde>
 8022822:	6834      	ldr	r4, [r6, #0]
 8022824:	4626      	mov	r6, r4
 8022826:	2e00      	cmp	r6, #0
 8022828:	d140      	bne.n	80228ac <_malloc_r+0xcc>
 802282a:	6823      	ldr	r3, [r4, #0]
 802282c:	4631      	mov	r1, r6
 802282e:	4638      	mov	r0, r7
 8022830:	eb04 0803 	add.w	r8, r4, r3
 8022834:	f000 f9ea 	bl	8022c0c <_sbrk_r>
 8022838:	4580      	cmp	r8, r0
 802283a:	d13a      	bne.n	80228b2 <_malloc_r+0xd2>
 802283c:	6821      	ldr	r1, [r4, #0]
 802283e:	3503      	adds	r5, #3
 8022840:	1a6d      	subs	r5, r5, r1
 8022842:	f025 0503 	bic.w	r5, r5, #3
 8022846:	3508      	adds	r5, #8
 8022848:	2d0c      	cmp	r5, #12
 802284a:	bf38      	it	cc
 802284c:	250c      	movcc	r5, #12
 802284e:	4629      	mov	r1, r5
 8022850:	4638      	mov	r0, r7
 8022852:	f7ff ffa5 	bl	80227a0 <sbrk_aligned>
 8022856:	3001      	adds	r0, #1
 8022858:	d02b      	beq.n	80228b2 <_malloc_r+0xd2>
 802285a:	6823      	ldr	r3, [r4, #0]
 802285c:	442b      	add	r3, r5
 802285e:	6023      	str	r3, [r4, #0]
 8022860:	e00e      	b.n	8022880 <_malloc_r+0xa0>
 8022862:	6822      	ldr	r2, [r4, #0]
 8022864:	1b52      	subs	r2, r2, r5
 8022866:	d41e      	bmi.n	80228a6 <_malloc_r+0xc6>
 8022868:	2a0b      	cmp	r2, #11
 802286a:	d916      	bls.n	802289a <_malloc_r+0xba>
 802286c:	1961      	adds	r1, r4, r5
 802286e:	42a3      	cmp	r3, r4
 8022870:	6025      	str	r5, [r4, #0]
 8022872:	bf18      	it	ne
 8022874:	6059      	strne	r1, [r3, #4]
 8022876:	6863      	ldr	r3, [r4, #4]
 8022878:	bf08      	it	eq
 802287a:	6031      	streq	r1, [r6, #0]
 802287c:	5162      	str	r2, [r4, r5]
 802287e:	604b      	str	r3, [r1, #4]
 8022880:	4638      	mov	r0, r7
 8022882:	f104 060b 	add.w	r6, r4, #11
 8022886:	f000 fab3 	bl	8022df0 <__malloc_unlock>
 802288a:	f026 0607 	bic.w	r6, r6, #7
 802288e:	1d23      	adds	r3, r4, #4
 8022890:	1af2      	subs	r2, r6, r3
 8022892:	d0b6      	beq.n	8022802 <_malloc_r+0x22>
 8022894:	1b9b      	subs	r3, r3, r6
 8022896:	50a3      	str	r3, [r4, r2]
 8022898:	e7b3      	b.n	8022802 <_malloc_r+0x22>
 802289a:	6862      	ldr	r2, [r4, #4]
 802289c:	42a3      	cmp	r3, r4
 802289e:	bf0c      	ite	eq
 80228a0:	6032      	streq	r2, [r6, #0]
 80228a2:	605a      	strne	r2, [r3, #4]
 80228a4:	e7ec      	b.n	8022880 <_malloc_r+0xa0>
 80228a6:	4623      	mov	r3, r4
 80228a8:	6864      	ldr	r4, [r4, #4]
 80228aa:	e7b2      	b.n	8022812 <_malloc_r+0x32>
 80228ac:	4634      	mov	r4, r6
 80228ae:	6876      	ldr	r6, [r6, #4]
 80228b0:	e7b9      	b.n	8022826 <_malloc_r+0x46>
 80228b2:	230c      	movs	r3, #12
 80228b4:	603b      	str	r3, [r7, #0]
 80228b6:	4638      	mov	r0, r7
 80228b8:	f000 fa9a 	bl	8022df0 <__malloc_unlock>
 80228bc:	e7a1      	b.n	8022802 <_malloc_r+0x22>
 80228be:	6025      	str	r5, [r4, #0]
 80228c0:	e7de      	b.n	8022880 <_malloc_r+0xa0>
 80228c2:	bf00      	nop
 80228c4:	2000f910 	.word	0x2000f910

080228c8 <__sfputc_r>:
 80228c8:	6893      	ldr	r3, [r2, #8]
 80228ca:	3b01      	subs	r3, #1
 80228cc:	2b00      	cmp	r3, #0
 80228ce:	b410      	push	{r4}
 80228d0:	6093      	str	r3, [r2, #8]
 80228d2:	da08      	bge.n	80228e6 <__sfputc_r+0x1e>
 80228d4:	6994      	ldr	r4, [r2, #24]
 80228d6:	42a3      	cmp	r3, r4
 80228d8:	db01      	blt.n	80228de <__sfputc_r+0x16>
 80228da:	290a      	cmp	r1, #10
 80228dc:	d103      	bne.n	80228e6 <__sfputc_r+0x1e>
 80228de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80228e2:	f7fe ba11 	b.w	8020d08 <__swbuf_r>
 80228e6:	6813      	ldr	r3, [r2, #0]
 80228e8:	1c58      	adds	r0, r3, #1
 80228ea:	6010      	str	r0, [r2, #0]
 80228ec:	7019      	strb	r1, [r3, #0]
 80228ee:	4608      	mov	r0, r1
 80228f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80228f4:	4770      	bx	lr

080228f6 <__sfputs_r>:
 80228f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80228f8:	4606      	mov	r6, r0
 80228fa:	460f      	mov	r7, r1
 80228fc:	4614      	mov	r4, r2
 80228fe:	18d5      	adds	r5, r2, r3
 8022900:	42ac      	cmp	r4, r5
 8022902:	d101      	bne.n	8022908 <__sfputs_r+0x12>
 8022904:	2000      	movs	r0, #0
 8022906:	e007      	b.n	8022918 <__sfputs_r+0x22>
 8022908:	f814 1b01 	ldrb.w	r1, [r4], #1
 802290c:	463a      	mov	r2, r7
 802290e:	4630      	mov	r0, r6
 8022910:	f7ff ffda 	bl	80228c8 <__sfputc_r>
 8022914:	1c43      	adds	r3, r0, #1
 8022916:	d1f3      	bne.n	8022900 <__sfputs_r+0xa>
 8022918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802291c <_vfiprintf_r>:
 802291c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022920:	460d      	mov	r5, r1
 8022922:	b09d      	sub	sp, #116	; 0x74
 8022924:	4614      	mov	r4, r2
 8022926:	4698      	mov	r8, r3
 8022928:	4606      	mov	r6, r0
 802292a:	b118      	cbz	r0, 8022934 <_vfiprintf_r+0x18>
 802292c:	6983      	ldr	r3, [r0, #24]
 802292e:	b90b      	cbnz	r3, 8022934 <_vfiprintf_r+0x18>
 8022930:	f7ff fa3e 	bl	8021db0 <__sinit>
 8022934:	4b89      	ldr	r3, [pc, #548]	; (8022b5c <_vfiprintf_r+0x240>)
 8022936:	429d      	cmp	r5, r3
 8022938:	d11b      	bne.n	8022972 <_vfiprintf_r+0x56>
 802293a:	6875      	ldr	r5, [r6, #4]
 802293c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802293e:	07d9      	lsls	r1, r3, #31
 8022940:	d405      	bmi.n	802294e <_vfiprintf_r+0x32>
 8022942:	89ab      	ldrh	r3, [r5, #12]
 8022944:	059a      	lsls	r2, r3, #22
 8022946:	d402      	bmi.n	802294e <_vfiprintf_r+0x32>
 8022948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802294a:	f7ff fad4 	bl	8021ef6 <__retarget_lock_acquire_recursive>
 802294e:	89ab      	ldrh	r3, [r5, #12]
 8022950:	071b      	lsls	r3, r3, #28
 8022952:	d501      	bpl.n	8022958 <_vfiprintf_r+0x3c>
 8022954:	692b      	ldr	r3, [r5, #16]
 8022956:	b9eb      	cbnz	r3, 8022994 <_vfiprintf_r+0x78>
 8022958:	4629      	mov	r1, r5
 802295a:	4630      	mov	r0, r6
 802295c:	f7fe fa26 	bl	8020dac <__swsetup_r>
 8022960:	b1c0      	cbz	r0, 8022994 <_vfiprintf_r+0x78>
 8022962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022964:	07dc      	lsls	r4, r3, #31
 8022966:	d50e      	bpl.n	8022986 <_vfiprintf_r+0x6a>
 8022968:	f04f 30ff 	mov.w	r0, #4294967295
 802296c:	b01d      	add	sp, #116	; 0x74
 802296e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022972:	4b7b      	ldr	r3, [pc, #492]	; (8022b60 <_vfiprintf_r+0x244>)
 8022974:	429d      	cmp	r5, r3
 8022976:	d101      	bne.n	802297c <_vfiprintf_r+0x60>
 8022978:	68b5      	ldr	r5, [r6, #8]
 802297a:	e7df      	b.n	802293c <_vfiprintf_r+0x20>
 802297c:	4b79      	ldr	r3, [pc, #484]	; (8022b64 <_vfiprintf_r+0x248>)
 802297e:	429d      	cmp	r5, r3
 8022980:	bf08      	it	eq
 8022982:	68f5      	ldreq	r5, [r6, #12]
 8022984:	e7da      	b.n	802293c <_vfiprintf_r+0x20>
 8022986:	89ab      	ldrh	r3, [r5, #12]
 8022988:	0598      	lsls	r0, r3, #22
 802298a:	d4ed      	bmi.n	8022968 <_vfiprintf_r+0x4c>
 802298c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802298e:	f7ff fab3 	bl	8021ef8 <__retarget_lock_release_recursive>
 8022992:	e7e9      	b.n	8022968 <_vfiprintf_r+0x4c>
 8022994:	2300      	movs	r3, #0
 8022996:	9309      	str	r3, [sp, #36]	; 0x24
 8022998:	2320      	movs	r3, #32
 802299a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802299e:	f8cd 800c 	str.w	r8, [sp, #12]
 80229a2:	2330      	movs	r3, #48	; 0x30
 80229a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022b68 <_vfiprintf_r+0x24c>
 80229a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80229ac:	f04f 0901 	mov.w	r9, #1
 80229b0:	4623      	mov	r3, r4
 80229b2:	469a      	mov	sl, r3
 80229b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80229b8:	b10a      	cbz	r2, 80229be <_vfiprintf_r+0xa2>
 80229ba:	2a25      	cmp	r2, #37	; 0x25
 80229bc:	d1f9      	bne.n	80229b2 <_vfiprintf_r+0x96>
 80229be:	ebba 0b04 	subs.w	fp, sl, r4
 80229c2:	d00b      	beq.n	80229dc <_vfiprintf_r+0xc0>
 80229c4:	465b      	mov	r3, fp
 80229c6:	4622      	mov	r2, r4
 80229c8:	4629      	mov	r1, r5
 80229ca:	4630      	mov	r0, r6
 80229cc:	f7ff ff93 	bl	80228f6 <__sfputs_r>
 80229d0:	3001      	adds	r0, #1
 80229d2:	f000 80aa 	beq.w	8022b2a <_vfiprintf_r+0x20e>
 80229d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80229d8:	445a      	add	r2, fp
 80229da:	9209      	str	r2, [sp, #36]	; 0x24
 80229dc:	f89a 3000 	ldrb.w	r3, [sl]
 80229e0:	2b00      	cmp	r3, #0
 80229e2:	f000 80a2 	beq.w	8022b2a <_vfiprintf_r+0x20e>
 80229e6:	2300      	movs	r3, #0
 80229e8:	f04f 32ff 	mov.w	r2, #4294967295
 80229ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80229f0:	f10a 0a01 	add.w	sl, sl, #1
 80229f4:	9304      	str	r3, [sp, #16]
 80229f6:	9307      	str	r3, [sp, #28]
 80229f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80229fc:	931a      	str	r3, [sp, #104]	; 0x68
 80229fe:	4654      	mov	r4, sl
 8022a00:	2205      	movs	r2, #5
 8022a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022a06:	4858      	ldr	r0, [pc, #352]	; (8022b68 <_vfiprintf_r+0x24c>)
 8022a08:	f7dd fc12 	bl	8000230 <memchr>
 8022a0c:	9a04      	ldr	r2, [sp, #16]
 8022a0e:	b9d8      	cbnz	r0, 8022a48 <_vfiprintf_r+0x12c>
 8022a10:	06d1      	lsls	r1, r2, #27
 8022a12:	bf44      	itt	mi
 8022a14:	2320      	movmi	r3, #32
 8022a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022a1a:	0713      	lsls	r3, r2, #28
 8022a1c:	bf44      	itt	mi
 8022a1e:	232b      	movmi	r3, #43	; 0x2b
 8022a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022a24:	f89a 3000 	ldrb.w	r3, [sl]
 8022a28:	2b2a      	cmp	r3, #42	; 0x2a
 8022a2a:	d015      	beq.n	8022a58 <_vfiprintf_r+0x13c>
 8022a2c:	9a07      	ldr	r2, [sp, #28]
 8022a2e:	4654      	mov	r4, sl
 8022a30:	2000      	movs	r0, #0
 8022a32:	f04f 0c0a 	mov.w	ip, #10
 8022a36:	4621      	mov	r1, r4
 8022a38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022a3c:	3b30      	subs	r3, #48	; 0x30
 8022a3e:	2b09      	cmp	r3, #9
 8022a40:	d94e      	bls.n	8022ae0 <_vfiprintf_r+0x1c4>
 8022a42:	b1b0      	cbz	r0, 8022a72 <_vfiprintf_r+0x156>
 8022a44:	9207      	str	r2, [sp, #28]
 8022a46:	e014      	b.n	8022a72 <_vfiprintf_r+0x156>
 8022a48:	eba0 0308 	sub.w	r3, r0, r8
 8022a4c:	fa09 f303 	lsl.w	r3, r9, r3
 8022a50:	4313      	orrs	r3, r2
 8022a52:	9304      	str	r3, [sp, #16]
 8022a54:	46a2      	mov	sl, r4
 8022a56:	e7d2      	b.n	80229fe <_vfiprintf_r+0xe2>
 8022a58:	9b03      	ldr	r3, [sp, #12]
 8022a5a:	1d19      	adds	r1, r3, #4
 8022a5c:	681b      	ldr	r3, [r3, #0]
 8022a5e:	9103      	str	r1, [sp, #12]
 8022a60:	2b00      	cmp	r3, #0
 8022a62:	bfbb      	ittet	lt
 8022a64:	425b      	neglt	r3, r3
 8022a66:	f042 0202 	orrlt.w	r2, r2, #2
 8022a6a:	9307      	strge	r3, [sp, #28]
 8022a6c:	9307      	strlt	r3, [sp, #28]
 8022a6e:	bfb8      	it	lt
 8022a70:	9204      	strlt	r2, [sp, #16]
 8022a72:	7823      	ldrb	r3, [r4, #0]
 8022a74:	2b2e      	cmp	r3, #46	; 0x2e
 8022a76:	d10c      	bne.n	8022a92 <_vfiprintf_r+0x176>
 8022a78:	7863      	ldrb	r3, [r4, #1]
 8022a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8022a7c:	d135      	bne.n	8022aea <_vfiprintf_r+0x1ce>
 8022a7e:	9b03      	ldr	r3, [sp, #12]
 8022a80:	1d1a      	adds	r2, r3, #4
 8022a82:	681b      	ldr	r3, [r3, #0]
 8022a84:	9203      	str	r2, [sp, #12]
 8022a86:	2b00      	cmp	r3, #0
 8022a88:	bfb8      	it	lt
 8022a8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8022a8e:	3402      	adds	r4, #2
 8022a90:	9305      	str	r3, [sp, #20]
 8022a92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022b78 <_vfiprintf_r+0x25c>
 8022a96:	7821      	ldrb	r1, [r4, #0]
 8022a98:	2203      	movs	r2, #3
 8022a9a:	4650      	mov	r0, sl
 8022a9c:	f7dd fbc8 	bl	8000230 <memchr>
 8022aa0:	b140      	cbz	r0, 8022ab4 <_vfiprintf_r+0x198>
 8022aa2:	2340      	movs	r3, #64	; 0x40
 8022aa4:	eba0 000a 	sub.w	r0, r0, sl
 8022aa8:	fa03 f000 	lsl.w	r0, r3, r0
 8022aac:	9b04      	ldr	r3, [sp, #16]
 8022aae:	4303      	orrs	r3, r0
 8022ab0:	3401      	adds	r4, #1
 8022ab2:	9304      	str	r3, [sp, #16]
 8022ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022ab8:	482c      	ldr	r0, [pc, #176]	; (8022b6c <_vfiprintf_r+0x250>)
 8022aba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022abe:	2206      	movs	r2, #6
 8022ac0:	f7dd fbb6 	bl	8000230 <memchr>
 8022ac4:	2800      	cmp	r0, #0
 8022ac6:	d03f      	beq.n	8022b48 <_vfiprintf_r+0x22c>
 8022ac8:	4b29      	ldr	r3, [pc, #164]	; (8022b70 <_vfiprintf_r+0x254>)
 8022aca:	bb1b      	cbnz	r3, 8022b14 <_vfiprintf_r+0x1f8>
 8022acc:	9b03      	ldr	r3, [sp, #12]
 8022ace:	3307      	adds	r3, #7
 8022ad0:	f023 0307 	bic.w	r3, r3, #7
 8022ad4:	3308      	adds	r3, #8
 8022ad6:	9303      	str	r3, [sp, #12]
 8022ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ada:	443b      	add	r3, r7
 8022adc:	9309      	str	r3, [sp, #36]	; 0x24
 8022ade:	e767      	b.n	80229b0 <_vfiprintf_r+0x94>
 8022ae0:	fb0c 3202 	mla	r2, ip, r2, r3
 8022ae4:	460c      	mov	r4, r1
 8022ae6:	2001      	movs	r0, #1
 8022ae8:	e7a5      	b.n	8022a36 <_vfiprintf_r+0x11a>
 8022aea:	2300      	movs	r3, #0
 8022aec:	3401      	adds	r4, #1
 8022aee:	9305      	str	r3, [sp, #20]
 8022af0:	4619      	mov	r1, r3
 8022af2:	f04f 0c0a 	mov.w	ip, #10
 8022af6:	4620      	mov	r0, r4
 8022af8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022afc:	3a30      	subs	r2, #48	; 0x30
 8022afe:	2a09      	cmp	r2, #9
 8022b00:	d903      	bls.n	8022b0a <_vfiprintf_r+0x1ee>
 8022b02:	2b00      	cmp	r3, #0
 8022b04:	d0c5      	beq.n	8022a92 <_vfiprintf_r+0x176>
 8022b06:	9105      	str	r1, [sp, #20]
 8022b08:	e7c3      	b.n	8022a92 <_vfiprintf_r+0x176>
 8022b0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8022b0e:	4604      	mov	r4, r0
 8022b10:	2301      	movs	r3, #1
 8022b12:	e7f0      	b.n	8022af6 <_vfiprintf_r+0x1da>
 8022b14:	ab03      	add	r3, sp, #12
 8022b16:	9300      	str	r3, [sp, #0]
 8022b18:	462a      	mov	r2, r5
 8022b1a:	4b16      	ldr	r3, [pc, #88]	; (8022b74 <_vfiprintf_r+0x258>)
 8022b1c:	a904      	add	r1, sp, #16
 8022b1e:	4630      	mov	r0, r6
 8022b20:	f7fd fc84 	bl	802042c <_printf_float>
 8022b24:	4607      	mov	r7, r0
 8022b26:	1c78      	adds	r0, r7, #1
 8022b28:	d1d6      	bne.n	8022ad8 <_vfiprintf_r+0x1bc>
 8022b2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022b2c:	07d9      	lsls	r1, r3, #31
 8022b2e:	d405      	bmi.n	8022b3c <_vfiprintf_r+0x220>
 8022b30:	89ab      	ldrh	r3, [r5, #12]
 8022b32:	059a      	lsls	r2, r3, #22
 8022b34:	d402      	bmi.n	8022b3c <_vfiprintf_r+0x220>
 8022b36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022b38:	f7ff f9de 	bl	8021ef8 <__retarget_lock_release_recursive>
 8022b3c:	89ab      	ldrh	r3, [r5, #12]
 8022b3e:	065b      	lsls	r3, r3, #25
 8022b40:	f53f af12 	bmi.w	8022968 <_vfiprintf_r+0x4c>
 8022b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022b46:	e711      	b.n	802296c <_vfiprintf_r+0x50>
 8022b48:	ab03      	add	r3, sp, #12
 8022b4a:	9300      	str	r3, [sp, #0]
 8022b4c:	462a      	mov	r2, r5
 8022b4e:	4b09      	ldr	r3, [pc, #36]	; (8022b74 <_vfiprintf_r+0x258>)
 8022b50:	a904      	add	r1, sp, #16
 8022b52:	4630      	mov	r0, r6
 8022b54:	f7fd ff0e 	bl	8020974 <_printf_i>
 8022b58:	e7e4      	b.n	8022b24 <_vfiprintf_r+0x208>
 8022b5a:	bf00      	nop
 8022b5c:	08023800 	.word	0x08023800
 8022b60:	08023820 	.word	0x08023820
 8022b64:	080237e0 	.word	0x080237e0
 8022b68:	0802399c 	.word	0x0802399c
 8022b6c:	080239a6 	.word	0x080239a6
 8022b70:	0802042d 	.word	0x0802042d
 8022b74:	080228f7 	.word	0x080228f7
 8022b78:	080239a2 	.word	0x080239a2

08022b7c <_putc_r>:
 8022b7c:	b570      	push	{r4, r5, r6, lr}
 8022b7e:	460d      	mov	r5, r1
 8022b80:	4614      	mov	r4, r2
 8022b82:	4606      	mov	r6, r0
 8022b84:	b118      	cbz	r0, 8022b8e <_putc_r+0x12>
 8022b86:	6983      	ldr	r3, [r0, #24]
 8022b88:	b90b      	cbnz	r3, 8022b8e <_putc_r+0x12>
 8022b8a:	f7ff f911 	bl	8021db0 <__sinit>
 8022b8e:	4b1c      	ldr	r3, [pc, #112]	; (8022c00 <_putc_r+0x84>)
 8022b90:	429c      	cmp	r4, r3
 8022b92:	d124      	bne.n	8022bde <_putc_r+0x62>
 8022b94:	6874      	ldr	r4, [r6, #4]
 8022b96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022b98:	07d8      	lsls	r0, r3, #31
 8022b9a:	d405      	bmi.n	8022ba8 <_putc_r+0x2c>
 8022b9c:	89a3      	ldrh	r3, [r4, #12]
 8022b9e:	0599      	lsls	r1, r3, #22
 8022ba0:	d402      	bmi.n	8022ba8 <_putc_r+0x2c>
 8022ba2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022ba4:	f7ff f9a7 	bl	8021ef6 <__retarget_lock_acquire_recursive>
 8022ba8:	68a3      	ldr	r3, [r4, #8]
 8022baa:	3b01      	subs	r3, #1
 8022bac:	2b00      	cmp	r3, #0
 8022bae:	60a3      	str	r3, [r4, #8]
 8022bb0:	da05      	bge.n	8022bbe <_putc_r+0x42>
 8022bb2:	69a2      	ldr	r2, [r4, #24]
 8022bb4:	4293      	cmp	r3, r2
 8022bb6:	db1c      	blt.n	8022bf2 <_putc_r+0x76>
 8022bb8:	b2eb      	uxtb	r3, r5
 8022bba:	2b0a      	cmp	r3, #10
 8022bbc:	d019      	beq.n	8022bf2 <_putc_r+0x76>
 8022bbe:	6823      	ldr	r3, [r4, #0]
 8022bc0:	1c5a      	adds	r2, r3, #1
 8022bc2:	6022      	str	r2, [r4, #0]
 8022bc4:	701d      	strb	r5, [r3, #0]
 8022bc6:	b2ed      	uxtb	r5, r5
 8022bc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022bca:	07da      	lsls	r2, r3, #31
 8022bcc:	d405      	bmi.n	8022bda <_putc_r+0x5e>
 8022bce:	89a3      	ldrh	r3, [r4, #12]
 8022bd0:	059b      	lsls	r3, r3, #22
 8022bd2:	d402      	bmi.n	8022bda <_putc_r+0x5e>
 8022bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022bd6:	f7ff f98f 	bl	8021ef8 <__retarget_lock_release_recursive>
 8022bda:	4628      	mov	r0, r5
 8022bdc:	bd70      	pop	{r4, r5, r6, pc}
 8022bde:	4b09      	ldr	r3, [pc, #36]	; (8022c04 <_putc_r+0x88>)
 8022be0:	429c      	cmp	r4, r3
 8022be2:	d101      	bne.n	8022be8 <_putc_r+0x6c>
 8022be4:	68b4      	ldr	r4, [r6, #8]
 8022be6:	e7d6      	b.n	8022b96 <_putc_r+0x1a>
 8022be8:	4b07      	ldr	r3, [pc, #28]	; (8022c08 <_putc_r+0x8c>)
 8022bea:	429c      	cmp	r4, r3
 8022bec:	bf08      	it	eq
 8022bee:	68f4      	ldreq	r4, [r6, #12]
 8022bf0:	e7d1      	b.n	8022b96 <_putc_r+0x1a>
 8022bf2:	4629      	mov	r1, r5
 8022bf4:	4622      	mov	r2, r4
 8022bf6:	4630      	mov	r0, r6
 8022bf8:	f7fe f886 	bl	8020d08 <__swbuf_r>
 8022bfc:	4605      	mov	r5, r0
 8022bfe:	e7e3      	b.n	8022bc8 <_putc_r+0x4c>
 8022c00:	08023800 	.word	0x08023800
 8022c04:	08023820 	.word	0x08023820
 8022c08:	080237e0 	.word	0x080237e0

08022c0c <_sbrk_r>:
 8022c0c:	b538      	push	{r3, r4, r5, lr}
 8022c0e:	4d06      	ldr	r5, [pc, #24]	; (8022c28 <_sbrk_r+0x1c>)
 8022c10:	2300      	movs	r3, #0
 8022c12:	4604      	mov	r4, r0
 8022c14:	4608      	mov	r0, r1
 8022c16:	602b      	str	r3, [r5, #0]
 8022c18:	f7f4 fd4a 	bl	80176b0 <_sbrk>
 8022c1c:	1c43      	adds	r3, r0, #1
 8022c1e:	d102      	bne.n	8022c26 <_sbrk_r+0x1a>
 8022c20:	682b      	ldr	r3, [r5, #0]
 8022c22:	b103      	cbz	r3, 8022c26 <_sbrk_r+0x1a>
 8022c24:	6023      	str	r3, [r4, #0]
 8022c26:	bd38      	pop	{r3, r4, r5, pc}
 8022c28:	2000f918 	.word	0x2000f918

08022c2c <__sread>:
 8022c2c:	b510      	push	{r4, lr}
 8022c2e:	460c      	mov	r4, r1
 8022c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022c34:	f000 f8e2 	bl	8022dfc <_read_r>
 8022c38:	2800      	cmp	r0, #0
 8022c3a:	bfab      	itete	ge
 8022c3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022c3e:	89a3      	ldrhlt	r3, [r4, #12]
 8022c40:	181b      	addge	r3, r3, r0
 8022c42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022c46:	bfac      	ite	ge
 8022c48:	6563      	strge	r3, [r4, #84]	; 0x54
 8022c4a:	81a3      	strhlt	r3, [r4, #12]
 8022c4c:	bd10      	pop	{r4, pc}

08022c4e <__swrite>:
 8022c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022c52:	461f      	mov	r7, r3
 8022c54:	898b      	ldrh	r3, [r1, #12]
 8022c56:	05db      	lsls	r3, r3, #23
 8022c58:	4605      	mov	r5, r0
 8022c5a:	460c      	mov	r4, r1
 8022c5c:	4616      	mov	r6, r2
 8022c5e:	d505      	bpl.n	8022c6c <__swrite+0x1e>
 8022c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022c64:	2302      	movs	r3, #2
 8022c66:	2200      	movs	r2, #0
 8022c68:	f000 f898 	bl	8022d9c <_lseek_r>
 8022c6c:	89a3      	ldrh	r3, [r4, #12]
 8022c6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022c72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022c76:	81a3      	strh	r3, [r4, #12]
 8022c78:	4632      	mov	r2, r6
 8022c7a:	463b      	mov	r3, r7
 8022c7c:	4628      	mov	r0, r5
 8022c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022c82:	f000 b817 	b.w	8022cb4 <_write_r>

08022c86 <__sseek>:
 8022c86:	b510      	push	{r4, lr}
 8022c88:	460c      	mov	r4, r1
 8022c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022c8e:	f000 f885 	bl	8022d9c <_lseek_r>
 8022c92:	1c43      	adds	r3, r0, #1
 8022c94:	89a3      	ldrh	r3, [r4, #12]
 8022c96:	bf15      	itete	ne
 8022c98:	6560      	strne	r0, [r4, #84]	; 0x54
 8022c9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8022c9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8022ca2:	81a3      	strheq	r3, [r4, #12]
 8022ca4:	bf18      	it	ne
 8022ca6:	81a3      	strhne	r3, [r4, #12]
 8022ca8:	bd10      	pop	{r4, pc}

08022caa <__sclose>:
 8022caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022cae:	f000 b831 	b.w	8022d14 <_close_r>
	...

08022cb4 <_write_r>:
 8022cb4:	b538      	push	{r3, r4, r5, lr}
 8022cb6:	4d07      	ldr	r5, [pc, #28]	; (8022cd4 <_write_r+0x20>)
 8022cb8:	4604      	mov	r4, r0
 8022cba:	4608      	mov	r0, r1
 8022cbc:	4611      	mov	r1, r2
 8022cbe:	2200      	movs	r2, #0
 8022cc0:	602a      	str	r2, [r5, #0]
 8022cc2:	461a      	mov	r2, r3
 8022cc4:	f7f4 fca0 	bl	8017608 <_write>
 8022cc8:	1c43      	adds	r3, r0, #1
 8022cca:	d102      	bne.n	8022cd2 <_write_r+0x1e>
 8022ccc:	682b      	ldr	r3, [r5, #0]
 8022cce:	b103      	cbz	r3, 8022cd2 <_write_r+0x1e>
 8022cd0:	6023      	str	r3, [r4, #0]
 8022cd2:	bd38      	pop	{r3, r4, r5, pc}
 8022cd4:	2000f918 	.word	0x2000f918

08022cd8 <__assert_func>:
 8022cd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022cda:	4614      	mov	r4, r2
 8022cdc:	461a      	mov	r2, r3
 8022cde:	4b09      	ldr	r3, [pc, #36]	; (8022d04 <__assert_func+0x2c>)
 8022ce0:	681b      	ldr	r3, [r3, #0]
 8022ce2:	4605      	mov	r5, r0
 8022ce4:	68d8      	ldr	r0, [r3, #12]
 8022ce6:	b14c      	cbz	r4, 8022cfc <__assert_func+0x24>
 8022ce8:	4b07      	ldr	r3, [pc, #28]	; (8022d08 <__assert_func+0x30>)
 8022cea:	9100      	str	r1, [sp, #0]
 8022cec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022cf0:	4906      	ldr	r1, [pc, #24]	; (8022d0c <__assert_func+0x34>)
 8022cf2:	462b      	mov	r3, r5
 8022cf4:	f000 f81e 	bl	8022d34 <fiprintf>
 8022cf8:	f000 f89f 	bl	8022e3a <abort>
 8022cfc:	4b04      	ldr	r3, [pc, #16]	; (8022d10 <__assert_func+0x38>)
 8022cfe:	461c      	mov	r4, r3
 8022d00:	e7f3      	b.n	8022cea <__assert_func+0x12>
 8022d02:	bf00      	nop
 8022d04:	2000002c 	.word	0x2000002c
 8022d08:	080239ad 	.word	0x080239ad
 8022d0c:	080239ba 	.word	0x080239ba
 8022d10:	080239e8 	.word	0x080239e8

08022d14 <_close_r>:
 8022d14:	b538      	push	{r3, r4, r5, lr}
 8022d16:	4d06      	ldr	r5, [pc, #24]	; (8022d30 <_close_r+0x1c>)
 8022d18:	2300      	movs	r3, #0
 8022d1a:	4604      	mov	r4, r0
 8022d1c:	4608      	mov	r0, r1
 8022d1e:	602b      	str	r3, [r5, #0]
 8022d20:	f7f4 fc92 	bl	8017648 <_close>
 8022d24:	1c43      	adds	r3, r0, #1
 8022d26:	d102      	bne.n	8022d2e <_close_r+0x1a>
 8022d28:	682b      	ldr	r3, [r5, #0]
 8022d2a:	b103      	cbz	r3, 8022d2e <_close_r+0x1a>
 8022d2c:	6023      	str	r3, [r4, #0]
 8022d2e:	bd38      	pop	{r3, r4, r5, pc}
 8022d30:	2000f918 	.word	0x2000f918

08022d34 <fiprintf>:
 8022d34:	b40e      	push	{r1, r2, r3}
 8022d36:	b503      	push	{r0, r1, lr}
 8022d38:	4601      	mov	r1, r0
 8022d3a:	ab03      	add	r3, sp, #12
 8022d3c:	4805      	ldr	r0, [pc, #20]	; (8022d54 <fiprintf+0x20>)
 8022d3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022d42:	6800      	ldr	r0, [r0, #0]
 8022d44:	9301      	str	r3, [sp, #4]
 8022d46:	f7ff fde9 	bl	802291c <_vfiprintf_r>
 8022d4a:	b002      	add	sp, #8
 8022d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022d50:	b003      	add	sp, #12
 8022d52:	4770      	bx	lr
 8022d54:	2000002c 	.word	0x2000002c

08022d58 <_fstat_r>:
 8022d58:	b538      	push	{r3, r4, r5, lr}
 8022d5a:	4d07      	ldr	r5, [pc, #28]	; (8022d78 <_fstat_r+0x20>)
 8022d5c:	2300      	movs	r3, #0
 8022d5e:	4604      	mov	r4, r0
 8022d60:	4608      	mov	r0, r1
 8022d62:	4611      	mov	r1, r2
 8022d64:	602b      	str	r3, [r5, #0]
 8022d66:	f7f4 fc7b 	bl	8017660 <_fstat>
 8022d6a:	1c43      	adds	r3, r0, #1
 8022d6c:	d102      	bne.n	8022d74 <_fstat_r+0x1c>
 8022d6e:	682b      	ldr	r3, [r5, #0]
 8022d70:	b103      	cbz	r3, 8022d74 <_fstat_r+0x1c>
 8022d72:	6023      	str	r3, [r4, #0]
 8022d74:	bd38      	pop	{r3, r4, r5, pc}
 8022d76:	bf00      	nop
 8022d78:	2000f918 	.word	0x2000f918

08022d7c <_isatty_r>:
 8022d7c:	b538      	push	{r3, r4, r5, lr}
 8022d7e:	4d06      	ldr	r5, [pc, #24]	; (8022d98 <_isatty_r+0x1c>)
 8022d80:	2300      	movs	r3, #0
 8022d82:	4604      	mov	r4, r0
 8022d84:	4608      	mov	r0, r1
 8022d86:	602b      	str	r3, [r5, #0]
 8022d88:	f7f4 fc7a 	bl	8017680 <_isatty>
 8022d8c:	1c43      	adds	r3, r0, #1
 8022d8e:	d102      	bne.n	8022d96 <_isatty_r+0x1a>
 8022d90:	682b      	ldr	r3, [r5, #0]
 8022d92:	b103      	cbz	r3, 8022d96 <_isatty_r+0x1a>
 8022d94:	6023      	str	r3, [r4, #0]
 8022d96:	bd38      	pop	{r3, r4, r5, pc}
 8022d98:	2000f918 	.word	0x2000f918

08022d9c <_lseek_r>:
 8022d9c:	b538      	push	{r3, r4, r5, lr}
 8022d9e:	4d07      	ldr	r5, [pc, #28]	; (8022dbc <_lseek_r+0x20>)
 8022da0:	4604      	mov	r4, r0
 8022da2:	4608      	mov	r0, r1
 8022da4:	4611      	mov	r1, r2
 8022da6:	2200      	movs	r2, #0
 8022da8:	602a      	str	r2, [r5, #0]
 8022daa:	461a      	mov	r2, r3
 8022dac:	f7f4 fc73 	bl	8017696 <_lseek>
 8022db0:	1c43      	adds	r3, r0, #1
 8022db2:	d102      	bne.n	8022dba <_lseek_r+0x1e>
 8022db4:	682b      	ldr	r3, [r5, #0]
 8022db6:	b103      	cbz	r3, 8022dba <_lseek_r+0x1e>
 8022db8:	6023      	str	r3, [r4, #0]
 8022dba:	bd38      	pop	{r3, r4, r5, pc}
 8022dbc:	2000f918 	.word	0x2000f918

08022dc0 <__ascii_mbtowc>:
 8022dc0:	b082      	sub	sp, #8
 8022dc2:	b901      	cbnz	r1, 8022dc6 <__ascii_mbtowc+0x6>
 8022dc4:	a901      	add	r1, sp, #4
 8022dc6:	b142      	cbz	r2, 8022dda <__ascii_mbtowc+0x1a>
 8022dc8:	b14b      	cbz	r3, 8022dde <__ascii_mbtowc+0x1e>
 8022dca:	7813      	ldrb	r3, [r2, #0]
 8022dcc:	600b      	str	r3, [r1, #0]
 8022dce:	7812      	ldrb	r2, [r2, #0]
 8022dd0:	1e10      	subs	r0, r2, #0
 8022dd2:	bf18      	it	ne
 8022dd4:	2001      	movne	r0, #1
 8022dd6:	b002      	add	sp, #8
 8022dd8:	4770      	bx	lr
 8022dda:	4610      	mov	r0, r2
 8022ddc:	e7fb      	b.n	8022dd6 <__ascii_mbtowc+0x16>
 8022dde:	f06f 0001 	mvn.w	r0, #1
 8022de2:	e7f8      	b.n	8022dd6 <__ascii_mbtowc+0x16>

08022de4 <__malloc_lock>:
 8022de4:	4801      	ldr	r0, [pc, #4]	; (8022dec <__malloc_lock+0x8>)
 8022de6:	f7ff b886 	b.w	8021ef6 <__retarget_lock_acquire_recursive>
 8022dea:	bf00      	nop
 8022dec:	2000f90c 	.word	0x2000f90c

08022df0 <__malloc_unlock>:
 8022df0:	4801      	ldr	r0, [pc, #4]	; (8022df8 <__malloc_unlock+0x8>)
 8022df2:	f7ff b881 	b.w	8021ef8 <__retarget_lock_release_recursive>
 8022df6:	bf00      	nop
 8022df8:	2000f90c 	.word	0x2000f90c

08022dfc <_read_r>:
 8022dfc:	b538      	push	{r3, r4, r5, lr}
 8022dfe:	4d07      	ldr	r5, [pc, #28]	; (8022e1c <_read_r+0x20>)
 8022e00:	4604      	mov	r4, r0
 8022e02:	4608      	mov	r0, r1
 8022e04:	4611      	mov	r1, r2
 8022e06:	2200      	movs	r2, #0
 8022e08:	602a      	str	r2, [r5, #0]
 8022e0a:	461a      	mov	r2, r3
 8022e0c:	f7f4 fbde 	bl	80175cc <_read>
 8022e10:	1c43      	adds	r3, r0, #1
 8022e12:	d102      	bne.n	8022e1a <_read_r+0x1e>
 8022e14:	682b      	ldr	r3, [r5, #0]
 8022e16:	b103      	cbz	r3, 8022e1a <_read_r+0x1e>
 8022e18:	6023      	str	r3, [r4, #0]
 8022e1a:	bd38      	pop	{r3, r4, r5, pc}
 8022e1c:	2000f918 	.word	0x2000f918

08022e20 <__ascii_wctomb>:
 8022e20:	b149      	cbz	r1, 8022e36 <__ascii_wctomb+0x16>
 8022e22:	2aff      	cmp	r2, #255	; 0xff
 8022e24:	bf85      	ittet	hi
 8022e26:	238a      	movhi	r3, #138	; 0x8a
 8022e28:	6003      	strhi	r3, [r0, #0]
 8022e2a:	700a      	strbls	r2, [r1, #0]
 8022e2c:	f04f 30ff 	movhi.w	r0, #4294967295
 8022e30:	bf98      	it	ls
 8022e32:	2001      	movls	r0, #1
 8022e34:	4770      	bx	lr
 8022e36:	4608      	mov	r0, r1
 8022e38:	4770      	bx	lr

08022e3a <abort>:
 8022e3a:	b508      	push	{r3, lr}
 8022e3c:	2006      	movs	r0, #6
 8022e3e:	f000 f82b 	bl	8022e98 <raise>
 8022e42:	2001      	movs	r0, #1
 8022e44:	f7f4 fbb8 	bl	80175b8 <_exit>

08022e48 <_raise_r>:
 8022e48:	291f      	cmp	r1, #31
 8022e4a:	b538      	push	{r3, r4, r5, lr}
 8022e4c:	4604      	mov	r4, r0
 8022e4e:	460d      	mov	r5, r1
 8022e50:	d904      	bls.n	8022e5c <_raise_r+0x14>
 8022e52:	2316      	movs	r3, #22
 8022e54:	6003      	str	r3, [r0, #0]
 8022e56:	f04f 30ff 	mov.w	r0, #4294967295
 8022e5a:	bd38      	pop	{r3, r4, r5, pc}
 8022e5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8022e5e:	b112      	cbz	r2, 8022e66 <_raise_r+0x1e>
 8022e60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022e64:	b94b      	cbnz	r3, 8022e7a <_raise_r+0x32>
 8022e66:	4620      	mov	r0, r4
 8022e68:	f000 f830 	bl	8022ecc <_getpid_r>
 8022e6c:	462a      	mov	r2, r5
 8022e6e:	4601      	mov	r1, r0
 8022e70:	4620      	mov	r0, r4
 8022e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022e76:	f000 b817 	b.w	8022ea8 <_kill_r>
 8022e7a:	2b01      	cmp	r3, #1
 8022e7c:	d00a      	beq.n	8022e94 <_raise_r+0x4c>
 8022e7e:	1c59      	adds	r1, r3, #1
 8022e80:	d103      	bne.n	8022e8a <_raise_r+0x42>
 8022e82:	2316      	movs	r3, #22
 8022e84:	6003      	str	r3, [r0, #0]
 8022e86:	2001      	movs	r0, #1
 8022e88:	e7e7      	b.n	8022e5a <_raise_r+0x12>
 8022e8a:	2400      	movs	r4, #0
 8022e8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022e90:	4628      	mov	r0, r5
 8022e92:	4798      	blx	r3
 8022e94:	2000      	movs	r0, #0
 8022e96:	e7e0      	b.n	8022e5a <_raise_r+0x12>

08022e98 <raise>:
 8022e98:	4b02      	ldr	r3, [pc, #8]	; (8022ea4 <raise+0xc>)
 8022e9a:	4601      	mov	r1, r0
 8022e9c:	6818      	ldr	r0, [r3, #0]
 8022e9e:	f7ff bfd3 	b.w	8022e48 <_raise_r>
 8022ea2:	bf00      	nop
 8022ea4:	2000002c 	.word	0x2000002c

08022ea8 <_kill_r>:
 8022ea8:	b538      	push	{r3, r4, r5, lr}
 8022eaa:	4d07      	ldr	r5, [pc, #28]	; (8022ec8 <_kill_r+0x20>)
 8022eac:	2300      	movs	r3, #0
 8022eae:	4604      	mov	r4, r0
 8022eb0:	4608      	mov	r0, r1
 8022eb2:	4611      	mov	r1, r2
 8022eb4:	602b      	str	r3, [r5, #0]
 8022eb6:	f7f4 fb6f 	bl	8017598 <_kill>
 8022eba:	1c43      	adds	r3, r0, #1
 8022ebc:	d102      	bne.n	8022ec4 <_kill_r+0x1c>
 8022ebe:	682b      	ldr	r3, [r5, #0]
 8022ec0:	b103      	cbz	r3, 8022ec4 <_kill_r+0x1c>
 8022ec2:	6023      	str	r3, [r4, #0]
 8022ec4:	bd38      	pop	{r3, r4, r5, pc}
 8022ec6:	bf00      	nop
 8022ec8:	2000f918 	.word	0x2000f918

08022ecc <_getpid_r>:
 8022ecc:	f7f4 bb5c 	b.w	8017588 <_getpid>

08022ed0 <ceil>:
 8022ed0:	ec51 0b10 	vmov	r0, r1, d0
 8022ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022ed8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8022edc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8022ee0:	2e13      	cmp	r6, #19
 8022ee2:	ee10 5a10 	vmov	r5, s0
 8022ee6:	ee10 8a10 	vmov	r8, s0
 8022eea:	460c      	mov	r4, r1
 8022eec:	dc30      	bgt.n	8022f50 <ceil+0x80>
 8022eee:	2e00      	cmp	r6, #0
 8022ef0:	da12      	bge.n	8022f18 <ceil+0x48>
 8022ef2:	a335      	add	r3, pc, #212	; (adr r3, 8022fc8 <ceil+0xf8>)
 8022ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ef8:	f7dd f9f0 	bl	80002dc <__adddf3>
 8022efc:	2200      	movs	r2, #0
 8022efe:	2300      	movs	r3, #0
 8022f00:	f7dd fe32 	bl	8000b68 <__aeabi_dcmpgt>
 8022f04:	b128      	cbz	r0, 8022f12 <ceil+0x42>
 8022f06:	2c00      	cmp	r4, #0
 8022f08:	db55      	blt.n	8022fb6 <ceil+0xe6>
 8022f0a:	432c      	orrs	r4, r5
 8022f0c:	d057      	beq.n	8022fbe <ceil+0xee>
 8022f0e:	4c30      	ldr	r4, [pc, #192]	; (8022fd0 <ceil+0x100>)
 8022f10:	2500      	movs	r5, #0
 8022f12:	4621      	mov	r1, r4
 8022f14:	4628      	mov	r0, r5
 8022f16:	e025      	b.n	8022f64 <ceil+0x94>
 8022f18:	4f2e      	ldr	r7, [pc, #184]	; (8022fd4 <ceil+0x104>)
 8022f1a:	4137      	asrs	r7, r6
 8022f1c:	ea01 0307 	and.w	r3, r1, r7
 8022f20:	4303      	orrs	r3, r0
 8022f22:	d01f      	beq.n	8022f64 <ceil+0x94>
 8022f24:	a328      	add	r3, pc, #160	; (adr r3, 8022fc8 <ceil+0xf8>)
 8022f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f2a:	f7dd f9d7 	bl	80002dc <__adddf3>
 8022f2e:	2200      	movs	r2, #0
 8022f30:	2300      	movs	r3, #0
 8022f32:	f7dd fe19 	bl	8000b68 <__aeabi_dcmpgt>
 8022f36:	2800      	cmp	r0, #0
 8022f38:	d0eb      	beq.n	8022f12 <ceil+0x42>
 8022f3a:	2c00      	cmp	r4, #0
 8022f3c:	bfc2      	ittt	gt
 8022f3e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8022f42:	fa43 f606 	asrgt.w	r6, r3, r6
 8022f46:	19a4      	addgt	r4, r4, r6
 8022f48:	ea24 0407 	bic.w	r4, r4, r7
 8022f4c:	2500      	movs	r5, #0
 8022f4e:	e7e0      	b.n	8022f12 <ceil+0x42>
 8022f50:	2e33      	cmp	r6, #51	; 0x33
 8022f52:	dd0b      	ble.n	8022f6c <ceil+0x9c>
 8022f54:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8022f58:	d104      	bne.n	8022f64 <ceil+0x94>
 8022f5a:	ee10 2a10 	vmov	r2, s0
 8022f5e:	460b      	mov	r3, r1
 8022f60:	f7dd f9bc 	bl	80002dc <__adddf3>
 8022f64:	ec41 0b10 	vmov	d0, r0, r1
 8022f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022f6c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8022f70:	f04f 33ff 	mov.w	r3, #4294967295
 8022f74:	fa23 f707 	lsr.w	r7, r3, r7
 8022f78:	4207      	tst	r7, r0
 8022f7a:	d0f3      	beq.n	8022f64 <ceil+0x94>
 8022f7c:	a312      	add	r3, pc, #72	; (adr r3, 8022fc8 <ceil+0xf8>)
 8022f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f82:	f7dd f9ab 	bl	80002dc <__adddf3>
 8022f86:	2200      	movs	r2, #0
 8022f88:	2300      	movs	r3, #0
 8022f8a:	f7dd fded 	bl	8000b68 <__aeabi_dcmpgt>
 8022f8e:	2800      	cmp	r0, #0
 8022f90:	d0bf      	beq.n	8022f12 <ceil+0x42>
 8022f92:	2c00      	cmp	r4, #0
 8022f94:	dd02      	ble.n	8022f9c <ceil+0xcc>
 8022f96:	2e14      	cmp	r6, #20
 8022f98:	d103      	bne.n	8022fa2 <ceil+0xd2>
 8022f9a:	3401      	adds	r4, #1
 8022f9c:	ea25 0507 	bic.w	r5, r5, r7
 8022fa0:	e7b7      	b.n	8022f12 <ceil+0x42>
 8022fa2:	2301      	movs	r3, #1
 8022fa4:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8022fa8:	fa03 f606 	lsl.w	r6, r3, r6
 8022fac:	4435      	add	r5, r6
 8022fae:	4545      	cmp	r5, r8
 8022fb0:	bf38      	it	cc
 8022fb2:	18e4      	addcc	r4, r4, r3
 8022fb4:	e7f2      	b.n	8022f9c <ceil+0xcc>
 8022fb6:	2500      	movs	r5, #0
 8022fb8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8022fbc:	e7a9      	b.n	8022f12 <ceil+0x42>
 8022fbe:	4625      	mov	r5, r4
 8022fc0:	e7a7      	b.n	8022f12 <ceil+0x42>
 8022fc2:	bf00      	nop
 8022fc4:	f3af 8000 	nop.w
 8022fc8:	8800759c 	.word	0x8800759c
 8022fcc:	7e37e43c 	.word	0x7e37e43c
 8022fd0:	3ff00000 	.word	0x3ff00000
 8022fd4:	000fffff 	.word	0x000fffff

08022fd8 <exp>:
 8022fd8:	b538      	push	{r3, r4, r5, lr}
 8022fda:	ed2d 8b02 	vpush	{d8}
 8022fde:	ec55 4b10 	vmov	r4, r5, d0
 8022fe2:	f000 f841 	bl	8023068 <__ieee754_exp>
 8022fe6:	eeb0 8a40 	vmov.f32	s16, s0
 8022fea:	eef0 8a60 	vmov.f32	s17, s1
 8022fee:	ec45 4b10 	vmov	d0, r4, r5
 8022ff2:	f000 f9eb 	bl	80233cc <finite>
 8022ff6:	b168      	cbz	r0, 8023014 <exp+0x3c>
 8022ff8:	a317      	add	r3, pc, #92	; (adr r3, 8023058 <exp+0x80>)
 8022ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ffe:	4620      	mov	r0, r4
 8023000:	4629      	mov	r1, r5
 8023002:	f7dd fdb1 	bl	8000b68 <__aeabi_dcmpgt>
 8023006:	b160      	cbz	r0, 8023022 <exp+0x4a>
 8023008:	f7fd f930 	bl	802026c <__errno>
 802300c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8023048 <exp+0x70>
 8023010:	2322      	movs	r3, #34	; 0x22
 8023012:	6003      	str	r3, [r0, #0]
 8023014:	eeb0 0a48 	vmov.f32	s0, s16
 8023018:	eef0 0a68 	vmov.f32	s1, s17
 802301c:	ecbd 8b02 	vpop	{d8}
 8023020:	bd38      	pop	{r3, r4, r5, pc}
 8023022:	a30f      	add	r3, pc, #60	; (adr r3, 8023060 <exp+0x88>)
 8023024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023028:	4620      	mov	r0, r4
 802302a:	4629      	mov	r1, r5
 802302c:	f7dd fd7e 	bl	8000b2c <__aeabi_dcmplt>
 8023030:	2800      	cmp	r0, #0
 8023032:	d0ef      	beq.n	8023014 <exp+0x3c>
 8023034:	f7fd f91a 	bl	802026c <__errno>
 8023038:	2322      	movs	r3, #34	; 0x22
 802303a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8023050 <exp+0x78>
 802303e:	6003      	str	r3, [r0, #0]
 8023040:	e7e8      	b.n	8023014 <exp+0x3c>
 8023042:	bf00      	nop
 8023044:	f3af 8000 	nop.w
 8023048:	00000000 	.word	0x00000000
 802304c:	7ff00000 	.word	0x7ff00000
	...
 8023058:	fefa39ef 	.word	0xfefa39ef
 802305c:	40862e42 	.word	0x40862e42
 8023060:	d52d3051 	.word	0xd52d3051
 8023064:	c0874910 	.word	0xc0874910

08023068 <__ieee754_exp>:
 8023068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802306c:	ec55 4b10 	vmov	r4, r5, d0
 8023070:	49b5      	ldr	r1, [pc, #724]	; (8023348 <__ieee754_exp+0x2e0>)
 8023072:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8023076:	428b      	cmp	r3, r1
 8023078:	ed2d 8b04 	vpush	{d8-d9}
 802307c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8023080:	d93d      	bls.n	80230fe <__ieee754_exp+0x96>
 8023082:	49b2      	ldr	r1, [pc, #712]	; (802334c <__ieee754_exp+0x2e4>)
 8023084:	428b      	cmp	r3, r1
 8023086:	d918      	bls.n	80230ba <__ieee754_exp+0x52>
 8023088:	ee10 3a10 	vmov	r3, s0
 802308c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8023090:	4313      	orrs	r3, r2
 8023092:	d009      	beq.n	80230a8 <__ieee754_exp+0x40>
 8023094:	ee10 2a10 	vmov	r2, s0
 8023098:	462b      	mov	r3, r5
 802309a:	4620      	mov	r0, r4
 802309c:	4629      	mov	r1, r5
 802309e:	f7dd f91d 	bl	80002dc <__adddf3>
 80230a2:	4604      	mov	r4, r0
 80230a4:	460d      	mov	r5, r1
 80230a6:	e002      	b.n	80230ae <__ieee754_exp+0x46>
 80230a8:	b10e      	cbz	r6, 80230ae <__ieee754_exp+0x46>
 80230aa:	2400      	movs	r4, #0
 80230ac:	2500      	movs	r5, #0
 80230ae:	ecbd 8b04 	vpop	{d8-d9}
 80230b2:	ec45 4b10 	vmov	d0, r4, r5
 80230b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80230ba:	a38d      	add	r3, pc, #564	; (adr r3, 80232f0 <__ieee754_exp+0x288>)
 80230bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230c0:	ee10 0a10 	vmov	r0, s0
 80230c4:	4629      	mov	r1, r5
 80230c6:	f7dd fd4f 	bl	8000b68 <__aeabi_dcmpgt>
 80230ca:	4607      	mov	r7, r0
 80230cc:	b130      	cbz	r0, 80230dc <__ieee754_exp+0x74>
 80230ce:	ecbd 8b04 	vpop	{d8-d9}
 80230d2:	2000      	movs	r0, #0
 80230d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80230d8:	f000 b96f 	b.w	80233ba <__math_oflow>
 80230dc:	a386      	add	r3, pc, #536	; (adr r3, 80232f8 <__ieee754_exp+0x290>)
 80230de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230e2:	4620      	mov	r0, r4
 80230e4:	4629      	mov	r1, r5
 80230e6:	f7dd fd21 	bl	8000b2c <__aeabi_dcmplt>
 80230ea:	2800      	cmp	r0, #0
 80230ec:	f000 808b 	beq.w	8023206 <__ieee754_exp+0x19e>
 80230f0:	ecbd 8b04 	vpop	{d8-d9}
 80230f4:	4638      	mov	r0, r7
 80230f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80230fa:	f000 b955 	b.w	80233a8 <__math_uflow>
 80230fe:	4a94      	ldr	r2, [pc, #592]	; (8023350 <__ieee754_exp+0x2e8>)
 8023100:	4293      	cmp	r3, r2
 8023102:	f240 80ac 	bls.w	802325e <__ieee754_exp+0x1f6>
 8023106:	4a93      	ldr	r2, [pc, #588]	; (8023354 <__ieee754_exp+0x2ec>)
 8023108:	4293      	cmp	r3, r2
 802310a:	d87c      	bhi.n	8023206 <__ieee754_exp+0x19e>
 802310c:	4b92      	ldr	r3, [pc, #584]	; (8023358 <__ieee754_exp+0x2f0>)
 802310e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8023112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023116:	ee10 0a10 	vmov	r0, s0
 802311a:	4629      	mov	r1, r5
 802311c:	f7dd f8dc 	bl	80002d8 <__aeabi_dsub>
 8023120:	4b8e      	ldr	r3, [pc, #568]	; (802335c <__ieee754_exp+0x2f4>)
 8023122:	00f7      	lsls	r7, r6, #3
 8023124:	443b      	add	r3, r7
 8023126:	ed93 7b00 	vldr	d7, [r3]
 802312a:	f1c6 0a01 	rsb	sl, r6, #1
 802312e:	4680      	mov	r8, r0
 8023130:	4689      	mov	r9, r1
 8023132:	ebaa 0a06 	sub.w	sl, sl, r6
 8023136:	eeb0 8a47 	vmov.f32	s16, s14
 802313a:	eef0 8a67 	vmov.f32	s17, s15
 802313e:	ec53 2b18 	vmov	r2, r3, d8
 8023142:	4640      	mov	r0, r8
 8023144:	4649      	mov	r1, r9
 8023146:	f7dd f8c7 	bl	80002d8 <__aeabi_dsub>
 802314a:	4604      	mov	r4, r0
 802314c:	460d      	mov	r5, r1
 802314e:	4622      	mov	r2, r4
 8023150:	462b      	mov	r3, r5
 8023152:	4620      	mov	r0, r4
 8023154:	4629      	mov	r1, r5
 8023156:	f7dd fa77 	bl	8000648 <__aeabi_dmul>
 802315a:	a369      	add	r3, pc, #420	; (adr r3, 8023300 <__ieee754_exp+0x298>)
 802315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023160:	4606      	mov	r6, r0
 8023162:	460f      	mov	r7, r1
 8023164:	f7dd fa70 	bl	8000648 <__aeabi_dmul>
 8023168:	a367      	add	r3, pc, #412	; (adr r3, 8023308 <__ieee754_exp+0x2a0>)
 802316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802316e:	f7dd f8b3 	bl	80002d8 <__aeabi_dsub>
 8023172:	4632      	mov	r2, r6
 8023174:	463b      	mov	r3, r7
 8023176:	f7dd fa67 	bl	8000648 <__aeabi_dmul>
 802317a:	a365      	add	r3, pc, #404	; (adr r3, 8023310 <__ieee754_exp+0x2a8>)
 802317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023180:	f7dd f8ac 	bl	80002dc <__adddf3>
 8023184:	4632      	mov	r2, r6
 8023186:	463b      	mov	r3, r7
 8023188:	f7dd fa5e 	bl	8000648 <__aeabi_dmul>
 802318c:	a362      	add	r3, pc, #392	; (adr r3, 8023318 <__ieee754_exp+0x2b0>)
 802318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023192:	f7dd f8a1 	bl	80002d8 <__aeabi_dsub>
 8023196:	4632      	mov	r2, r6
 8023198:	463b      	mov	r3, r7
 802319a:	f7dd fa55 	bl	8000648 <__aeabi_dmul>
 802319e:	a360      	add	r3, pc, #384	; (adr r3, 8023320 <__ieee754_exp+0x2b8>)
 80231a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231a4:	f7dd f89a 	bl	80002dc <__adddf3>
 80231a8:	4632      	mov	r2, r6
 80231aa:	463b      	mov	r3, r7
 80231ac:	f7dd fa4c 	bl	8000648 <__aeabi_dmul>
 80231b0:	4602      	mov	r2, r0
 80231b2:	460b      	mov	r3, r1
 80231b4:	4620      	mov	r0, r4
 80231b6:	4629      	mov	r1, r5
 80231b8:	f7dd f88e 	bl	80002d8 <__aeabi_dsub>
 80231bc:	4602      	mov	r2, r0
 80231be:	460b      	mov	r3, r1
 80231c0:	4606      	mov	r6, r0
 80231c2:	460f      	mov	r7, r1
 80231c4:	4620      	mov	r0, r4
 80231c6:	4629      	mov	r1, r5
 80231c8:	f7dd fa3e 	bl	8000648 <__aeabi_dmul>
 80231cc:	ec41 0b19 	vmov	d9, r0, r1
 80231d0:	f1ba 0f00 	cmp.w	sl, #0
 80231d4:	d15d      	bne.n	8023292 <__ieee754_exp+0x22a>
 80231d6:	2200      	movs	r2, #0
 80231d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80231dc:	4630      	mov	r0, r6
 80231de:	4639      	mov	r1, r7
 80231e0:	f7dd f87a 	bl	80002d8 <__aeabi_dsub>
 80231e4:	4602      	mov	r2, r0
 80231e6:	460b      	mov	r3, r1
 80231e8:	ec51 0b19 	vmov	r0, r1, d9
 80231ec:	f7dd fb56 	bl	800089c <__aeabi_ddiv>
 80231f0:	4622      	mov	r2, r4
 80231f2:	462b      	mov	r3, r5
 80231f4:	f7dd f870 	bl	80002d8 <__aeabi_dsub>
 80231f8:	4602      	mov	r2, r0
 80231fa:	460b      	mov	r3, r1
 80231fc:	2000      	movs	r0, #0
 80231fe:	4958      	ldr	r1, [pc, #352]	; (8023360 <__ieee754_exp+0x2f8>)
 8023200:	f7dd f86a 	bl	80002d8 <__aeabi_dsub>
 8023204:	e74d      	b.n	80230a2 <__ieee754_exp+0x3a>
 8023206:	4857      	ldr	r0, [pc, #348]	; (8023364 <__ieee754_exp+0x2fc>)
 8023208:	a347      	add	r3, pc, #284	; (adr r3, 8023328 <__ieee754_exp+0x2c0>)
 802320a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802320e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8023212:	4629      	mov	r1, r5
 8023214:	4620      	mov	r0, r4
 8023216:	f7dd fa17 	bl	8000648 <__aeabi_dmul>
 802321a:	e9d6 2300 	ldrd	r2, r3, [r6]
 802321e:	f7dd f85d 	bl	80002dc <__adddf3>
 8023222:	f7dd fcc1 	bl	8000ba8 <__aeabi_d2iz>
 8023226:	4682      	mov	sl, r0
 8023228:	f7dd f9a4 	bl	8000574 <__aeabi_i2d>
 802322c:	a340      	add	r3, pc, #256	; (adr r3, 8023330 <__ieee754_exp+0x2c8>)
 802322e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023232:	4606      	mov	r6, r0
 8023234:	460f      	mov	r7, r1
 8023236:	f7dd fa07 	bl	8000648 <__aeabi_dmul>
 802323a:	4602      	mov	r2, r0
 802323c:	460b      	mov	r3, r1
 802323e:	4620      	mov	r0, r4
 8023240:	4629      	mov	r1, r5
 8023242:	f7dd f849 	bl	80002d8 <__aeabi_dsub>
 8023246:	a33c      	add	r3, pc, #240	; (adr r3, 8023338 <__ieee754_exp+0x2d0>)
 8023248:	e9d3 2300 	ldrd	r2, r3, [r3]
 802324c:	4680      	mov	r8, r0
 802324e:	4689      	mov	r9, r1
 8023250:	4630      	mov	r0, r6
 8023252:	4639      	mov	r1, r7
 8023254:	f7dd f9f8 	bl	8000648 <__aeabi_dmul>
 8023258:	ec41 0b18 	vmov	d8, r0, r1
 802325c:	e76f      	b.n	802313e <__ieee754_exp+0xd6>
 802325e:	4a42      	ldr	r2, [pc, #264]	; (8023368 <__ieee754_exp+0x300>)
 8023260:	4293      	cmp	r3, r2
 8023262:	d811      	bhi.n	8023288 <__ieee754_exp+0x220>
 8023264:	a336      	add	r3, pc, #216	; (adr r3, 8023340 <__ieee754_exp+0x2d8>)
 8023266:	e9d3 2300 	ldrd	r2, r3, [r3]
 802326a:	ee10 0a10 	vmov	r0, s0
 802326e:	4629      	mov	r1, r5
 8023270:	f7dd f834 	bl	80002dc <__adddf3>
 8023274:	4b3a      	ldr	r3, [pc, #232]	; (8023360 <__ieee754_exp+0x2f8>)
 8023276:	2200      	movs	r2, #0
 8023278:	f7dd fc76 	bl	8000b68 <__aeabi_dcmpgt>
 802327c:	b138      	cbz	r0, 802328e <__ieee754_exp+0x226>
 802327e:	4b38      	ldr	r3, [pc, #224]	; (8023360 <__ieee754_exp+0x2f8>)
 8023280:	2200      	movs	r2, #0
 8023282:	4620      	mov	r0, r4
 8023284:	4629      	mov	r1, r5
 8023286:	e70a      	b.n	802309e <__ieee754_exp+0x36>
 8023288:	f04f 0a00 	mov.w	sl, #0
 802328c:	e75f      	b.n	802314e <__ieee754_exp+0xe6>
 802328e:	4682      	mov	sl, r0
 8023290:	e75d      	b.n	802314e <__ieee754_exp+0xe6>
 8023292:	4632      	mov	r2, r6
 8023294:	463b      	mov	r3, r7
 8023296:	2000      	movs	r0, #0
 8023298:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 802329c:	f7dd f81c 	bl	80002d8 <__aeabi_dsub>
 80232a0:	4602      	mov	r2, r0
 80232a2:	460b      	mov	r3, r1
 80232a4:	ec51 0b19 	vmov	r0, r1, d9
 80232a8:	f7dd faf8 	bl	800089c <__aeabi_ddiv>
 80232ac:	4602      	mov	r2, r0
 80232ae:	460b      	mov	r3, r1
 80232b0:	ec51 0b18 	vmov	r0, r1, d8
 80232b4:	f7dd f810 	bl	80002d8 <__aeabi_dsub>
 80232b8:	4642      	mov	r2, r8
 80232ba:	464b      	mov	r3, r9
 80232bc:	f7dd f80c 	bl	80002d8 <__aeabi_dsub>
 80232c0:	4602      	mov	r2, r0
 80232c2:	460b      	mov	r3, r1
 80232c4:	2000      	movs	r0, #0
 80232c6:	4926      	ldr	r1, [pc, #152]	; (8023360 <__ieee754_exp+0x2f8>)
 80232c8:	f7dd f806 	bl	80002d8 <__aeabi_dsub>
 80232cc:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80232d0:	4592      	cmp	sl, r2
 80232d2:	db02      	blt.n	80232da <__ieee754_exp+0x272>
 80232d4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80232d8:	e6e3      	b.n	80230a2 <__ieee754_exp+0x3a>
 80232da:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80232de:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80232e2:	2200      	movs	r2, #0
 80232e4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80232e8:	f7dd f9ae 	bl	8000648 <__aeabi_dmul>
 80232ec:	e6d9      	b.n	80230a2 <__ieee754_exp+0x3a>
 80232ee:	bf00      	nop
 80232f0:	fefa39ef 	.word	0xfefa39ef
 80232f4:	40862e42 	.word	0x40862e42
 80232f8:	d52d3051 	.word	0xd52d3051
 80232fc:	c0874910 	.word	0xc0874910
 8023300:	72bea4d0 	.word	0x72bea4d0
 8023304:	3e663769 	.word	0x3e663769
 8023308:	c5d26bf1 	.word	0xc5d26bf1
 802330c:	3ebbbd41 	.word	0x3ebbbd41
 8023310:	af25de2c 	.word	0xaf25de2c
 8023314:	3f11566a 	.word	0x3f11566a
 8023318:	16bebd93 	.word	0x16bebd93
 802331c:	3f66c16c 	.word	0x3f66c16c
 8023320:	5555553e 	.word	0x5555553e
 8023324:	3fc55555 	.word	0x3fc55555
 8023328:	652b82fe 	.word	0x652b82fe
 802332c:	3ff71547 	.word	0x3ff71547
 8023330:	fee00000 	.word	0xfee00000
 8023334:	3fe62e42 	.word	0x3fe62e42
 8023338:	35793c76 	.word	0x35793c76
 802333c:	3dea39ef 	.word	0x3dea39ef
 8023340:	8800759c 	.word	0x8800759c
 8023344:	7e37e43c 	.word	0x7e37e43c
 8023348:	40862e41 	.word	0x40862e41
 802334c:	7fefffff 	.word	0x7fefffff
 8023350:	3fd62e42 	.word	0x3fd62e42
 8023354:	3ff0a2b1 	.word	0x3ff0a2b1
 8023358:	08023b08 	.word	0x08023b08
 802335c:	08023b18 	.word	0x08023b18
 8023360:	3ff00000 	.word	0x3ff00000
 8023364:	08023af8 	.word	0x08023af8
 8023368:	3defffff 	.word	0x3defffff

0802336c <with_errno>:
 802336c:	b570      	push	{r4, r5, r6, lr}
 802336e:	4604      	mov	r4, r0
 8023370:	460d      	mov	r5, r1
 8023372:	4616      	mov	r6, r2
 8023374:	f7fc ff7a 	bl	802026c <__errno>
 8023378:	4629      	mov	r1, r5
 802337a:	6006      	str	r6, [r0, #0]
 802337c:	4620      	mov	r0, r4
 802337e:	bd70      	pop	{r4, r5, r6, pc}

08023380 <xflow>:
 8023380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023382:	4614      	mov	r4, r2
 8023384:	461d      	mov	r5, r3
 8023386:	b108      	cbz	r0, 802338c <xflow+0xc>
 8023388:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802338c:	e9cd 2300 	strd	r2, r3, [sp]
 8023390:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023394:	4620      	mov	r0, r4
 8023396:	4629      	mov	r1, r5
 8023398:	f7dd f956 	bl	8000648 <__aeabi_dmul>
 802339c:	2222      	movs	r2, #34	; 0x22
 802339e:	b003      	add	sp, #12
 80233a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80233a4:	f7ff bfe2 	b.w	802336c <with_errno>

080233a8 <__math_uflow>:
 80233a8:	b508      	push	{r3, lr}
 80233aa:	2200      	movs	r2, #0
 80233ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80233b0:	f7ff ffe6 	bl	8023380 <xflow>
 80233b4:	ec41 0b10 	vmov	d0, r0, r1
 80233b8:	bd08      	pop	{r3, pc}

080233ba <__math_oflow>:
 80233ba:	b508      	push	{r3, lr}
 80233bc:	2200      	movs	r2, #0
 80233be:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80233c2:	f7ff ffdd 	bl	8023380 <xflow>
 80233c6:	ec41 0b10 	vmov	d0, r0, r1
 80233ca:	bd08      	pop	{r3, pc}

080233cc <finite>:
 80233cc:	b082      	sub	sp, #8
 80233ce:	ed8d 0b00 	vstr	d0, [sp]
 80233d2:	9801      	ldr	r0, [sp, #4]
 80233d4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80233d8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80233dc:	0fc0      	lsrs	r0, r0, #31
 80233de:	b002      	add	sp, #8
 80233e0:	4770      	bx	lr
	...

080233e4 <_init>:
 80233e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80233e6:	bf00      	nop
 80233e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80233ea:	bc08      	pop	{r3}
 80233ec:	469e      	mov	lr, r3
 80233ee:	4770      	bx	lr

080233f0 <_fini>:
 80233f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80233f2:	bf00      	nop
 80233f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80233f6:	bc08      	pop	{r3}
 80233f8:	469e      	mov	lr, r3
 80233fa:	4770      	bx	lr
