
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024d34  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000930  08024f18  08024f18  00034f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025848  08025848  000401fc  2**0
                  CONTENTS
  4 .ARM          00000008  08025848  08025848  00035848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025850  08025850  000401fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025850  08025850  00035850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025854  08025854  00035854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08025858  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fbe4  200001fc  08025a54  000401fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000fde0  08025a54  0004fde0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027afa  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060b2  00000000  00000000  00067d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ff8  00000000  00000000  0006ddd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d00  00000000  00000000  0006fdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028834  00000000  00000000  00071ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003224d  00000000  00000000  0009a304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb479  00000000  00000000  000cc551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b79ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b30  00000000  00000000  001b7a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08024efc 	.word	0x08024efc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	08024efc 	.word	0x08024efc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <reset_distance>:
//float angle_R_database[ANGLE_MEAN_SIZE];

//float E_speedR0,E_speedL0;
//float E_accelerationR,E_accelerationL;

void reset_distance(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	E_distanceL = 0;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <reset_distance+0x5c>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	E_distanceR = 0;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <reset_distance+0x60>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	E_lpf_distanceL = 0;
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <reset_distance+0x64>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	E_lpf_distanceR = 0;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <reset_distance+0x68>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	G_hpf_distanceL = 0;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <reset_distance+0x6c>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	G_hpf_distanceR = 0;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <reset_distance+0x70>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	fusion_distanceL=0;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <reset_distance+0x74>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <reset_distance+0x78>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <reset_distance+0x7c>)
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <reset_distance+0x80>)
 8000fe4:	601a      	str	r2, [r3, #0]
	theta_comp_gain=1;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <reset_distance+0x84>)
 8000fe8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000fec:	601a      	str	r2, [r3, #0]

}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	20000220 	.word	0x20000220
 8000ffc:	20000224 	.word	0x20000224
 8001000:	20000230 	.word	0x20000230
 8001004:	20000234 	.word	0x20000234
 8001008:	20000240 	.word	0x20000240
 800100c:	20000244 	.word	0x20000244
 8001010:	20000250 	.word	0x20000250
 8001014:	20000254 	.word	0x20000254
 8001018:	20000260 	.word	0x20000260
 800101c:	3f266666 	.word	0x3f266666
 8001020:	20000264 	.word	0x20000264

08001024 <reset_speed>:

void reset_speed(void) {
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

	G_hpf_speedL=0;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <reset_speed+0x4c>)
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
	G_hpf_speedR=0;
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <reset_speed+0x50>)
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
	E_lpf_speedL=0;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <reset_speed+0x54>)
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
	E_lpf_speedR=0;
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <reset_speed+0x58>)
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
	fusion_speedL=0;
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <reset_speed+0x5c>)
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
	fusion_speedR=0;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <reset_speed+0x60>)
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <reset_speed+0x64>)
 800105a:	4a0c      	ldr	r2, [pc, #48]	; (800108c <reset_speed+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
	theta_comp_gain=1;
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <reset_speed+0x6c>)
 8001060:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001064:	601a      	str	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	20000248 	.word	0x20000248
 8001074:	2000024c 	.word	0x2000024c
 8001078:	20000238 	.word	0x20000238
 800107c:	2000023c 	.word	0x2000023c
 8001080:	20000258 	.word	0x20000258
 8001084:	2000025c 	.word	0x2000025c
 8001088:	20000260 	.word	0x20000260
 800108c:	3f266666 	.word	0x3f266666
 8001090:	20000264 	.word	0x20000264
 8001094:	00000000 	.word	0x00000000

08001098 <interupt_calEncoder>:

void interupt_calEncoder(void) {
 8001098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
	float angle_R,angle_L;
	float angle_R_mean,angle_L_mean;
	angle_R=encoder_R-encoder_R0;
 80010a0:	4be5      	ldr	r3, [pc, #916]	; (8001438 <interupt_calEncoder+0x3a0>)
 80010a2:	ed93 7a00 	vldr	s14, [r3]
 80010a6:	4be5      	ldr	r3, [pc, #916]	; (800143c <interupt_calEncoder+0x3a4>)
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b0:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R>180){angle_R=angle_R-360;}
 80010b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b8:	ed9f 7ae1 	vldr	s14, [pc, #900]	; 8001440 <interupt_calEncoder+0x3a8>
 80010bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c4:	dd07      	ble.n	80010d6 <interupt_calEncoder+0x3e>
 80010c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ca:	ed9f 7ade 	vldr	s14, [pc, #888]	; 8001444 <interupt_calEncoder+0x3ac>
 80010ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010d2:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R<-180){angle_R=angle_R+360;}
 80010d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010da:	ed9f 7adb 	vldr	s14, [pc, #876]	; 8001448 <interupt_calEncoder+0x3b0>
 80010de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e6:	d507      	bpl.n	80010f8 <interupt_calEncoder+0x60>
 80010e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ec:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8001444 <interupt_calEncoder+0x3ac>
 80010f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010f4:	edc7 7a01 	vstr	s15, [r7, #4]
	angle_L=-(encoder_L-encoder_L0);
 80010f8:	4bd4      	ldr	r3, [pc, #848]	; (800144c <interupt_calEncoder+0x3b4>)
 80010fa:	ed93 7a00 	vldr	s14, [r3]
 80010fe:	4bd4      	ldr	r3, [pc, #848]	; (8001450 <interupt_calEncoder+0x3b8>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eef1 7a67 	vneg.f32	s15, s15
 800110c:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L>180){angle_L=angle_L-360;}
 8001110:	edd7 7a00 	vldr	s15, [r7]
 8001114:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8001440 <interupt_calEncoder+0x3a8>
 8001118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	dd07      	ble.n	8001132 <interupt_calEncoder+0x9a>
 8001122:	edd7 7a00 	vldr	s15, [r7]
 8001126:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8001444 <interupt_calEncoder+0x3ac>
 800112a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800112e:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L<-180){angle_L=angle_L+360;}
 8001132:	edd7 7a00 	vldr	s15, [r7]
 8001136:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8001448 <interupt_calEncoder+0x3b0>
 800113a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	d507      	bpl.n	8001154 <interupt_calEncoder+0xbc>
 8001144:	edd7 7a00 	vldr	s15, [r7]
 8001148:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8001444 <interupt_calEncoder+0x3ac>
 800114c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001150:	edc7 7a00 	vstr	s15, [r7]

	//E_speedR0 = E_speedR;
	//E_speedL0 = E_speedL;
	//one_countL = pl_count_encoderL();
	//one_countR = pl_count_encoderR();
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME*THETA_COMP_L0
 8001154:	6838      	ldr	r0, [r7, #0]
 8001156:	f7ff fa1f 	bl	8000598 <__aeabi_f2d>
 800115a:	a39d      	add	r3, pc, #628	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f7ff fa72 	bl	8000648 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4bb8      	ldr	r3, [pc, #736]	; (8001454 <interupt_calEncoder+0x3bc>)
 8001172:	f7ff fb93 	bl	800089c <__aeabi_ddiv>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	a396      	add	r3, pc, #600	; (adr r3, 80013d8 <interupt_calEncoder+0x340>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff fa60 	bl	8000648 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	a393      	add	r3, pc, #588	; (adr r3, 80013e0 <interupt_calEncoder+0x348>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fa57 	bl	8000648 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	a391      	add	r3, pc, #580	; (adr r3, 80013e8 <interupt_calEncoder+0x350>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fa4e 	bl	8000648 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	a38e      	add	r3, pc, #568	; (adr r3, 80013f0 <interupt_calEncoder+0x358>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	f7ff fb6f 	bl	800089c <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	4ba3      	ldr	r3, [pc, #652]	; (8001458 <interupt_calEncoder+0x3c0>)
 80011cc:	f7ff fa3c 	bl	8000648 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	a387      	add	r3, pc, #540	; (adr r3, 80013f8 <interupt_calEncoder+0x360>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff fb5d 	bl	800089c <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	4b9b      	ldr	r3, [pc, #620]	; (800145c <interupt_calEncoder+0x3c4>)
 80011f0:	f7ff fa2a 	bl	8000648 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b97      	ldr	r3, [pc, #604]	; (8001460 <interupt_calEncoder+0x3c8>)
 8001202:	f7ff fb4b 	bl	800089c <__aeabi_ddiv>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	a37c      	add	r3, pc, #496	; (adr r3, 8001400 <interupt_calEncoder+0x368>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f7ff fa18 	bl	8000648 <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	a379      	add	r3, pc, #484	; (adr r3, 8001408 <interupt_calEncoder+0x370>)
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	f7ff fb39 	bl	800089c <__aeabi_ddiv>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	4b8b      	ldr	r3, [pc, #556]	; (8001464 <interupt_calEncoder+0x3cc>)
 8001238:	f7ff fa06 	bl	8000648 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	4b85      	ldr	r3, [pc, #532]	; (8001460 <interupt_calEncoder+0x3c8>)
 800124a:	f7ff fb27 	bl	800089c <__aeabi_ddiv>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800125e:	f7ff fb1d 	bl	800089c <__aeabi_ddiv>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	4b7e      	ldr	r3, [pc, #504]	; (8001468 <interupt_calEncoder+0x3d0>)
 8001270:	f7ff f9ea 	bl	8000648 <__aeabi_dmul>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	a364      	add	r3, pc, #400	; (adr r3, 8001410 <interupt_calEncoder+0x378>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff fb0b 	bl	800089c <__aeabi_ddiv>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	a362      	add	r3, pc, #392	; (adr r3, 8001418 <interupt_calEncoder+0x380>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	f7ff f9d8 	bl	8000648 <__aeabi_dmul>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4690      	mov	r8, r2
 800129e:	4699      	mov	r9, r3
			/(THETA_COMP_L0 + theta_comp_gain*(THETA_COMP_L1*sin(encoder_L*pi/180)+THETA_COMP_L2*cos(encoder_L*pi/180)
 80012a0:	4b72      	ldr	r3, [pc, #456]	; (800146c <interupt_calEncoder+0x3d4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f977 	bl	8000598 <__aeabi_f2d>
 80012aa:	4604      	mov	r4, r0
 80012ac:	460d      	mov	r5, r1
 80012ae:	4b67      	ldr	r3, [pc, #412]	; (800144c <interupt_calEncoder+0x3b4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f970 	bl	8000598 <__aeabi_f2d>
 80012b8:	a345      	add	r3, pc, #276	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f7ff f9c3 	bl	8000648 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4b61      	ldr	r3, [pc, #388]	; (8001454 <interupt_calEncoder+0x3bc>)
 80012d0:	f7ff fae4 	bl	800089c <__aeabi_ddiv>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	ec43 2b17 	vmov	d7, r2, r3
 80012dc:	eeb0 0a47 	vmov.f32	s0, s14
 80012e0:	eef0 0a67 	vmov.f32	s1, s15
 80012e4:	f022 fbb8 	bl	8023a58 <sin>
 80012e8:	ec51 0b10 	vmov	r0, r1, d0
 80012ec:	a34c      	add	r3, pc, #304	; (adr r3, 8001420 <interupt_calEncoder+0x388>)
 80012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f2:	f7ff f9a9 	bl	8000648 <__aeabi_dmul>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4692      	mov	sl, r2
 80012fc:	469b      	mov	fp, r3
 80012fe:	4b53      	ldr	r3, [pc, #332]	; (800144c <interupt_calEncoder+0x3b4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f948 	bl	8000598 <__aeabi_f2d>
 8001308:	a331      	add	r3, pc, #196	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7ff f99b 	bl	8000648 <__aeabi_dmul>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b4d      	ldr	r3, [pc, #308]	; (8001454 <interupt_calEncoder+0x3bc>)
 8001320:	f7ff fabc 	bl	800089c <__aeabi_ddiv>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	ec43 2b17 	vmov	d7, r2, r3
 800132c:	eeb0 0a47 	vmov.f32	s0, s14
 8001330:	eef0 0a67 	vmov.f32	s1, s15
 8001334:	f022 fb3c 	bl	80239b0 <cos>
 8001338:	ec51 0b10 	vmov	r0, r1, d0
 800133c:	a33a      	add	r3, pc, #232	; (adr r3, 8001428 <interupt_calEncoder+0x390>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7ff f981 	bl	8000648 <__aeabi_dmul>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4650      	mov	r0, sl
 800134c:	4659      	mov	r1, fp
 800134e:	f7fe ffc5 	bl	80002dc <__adddf3>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4692      	mov	sl, r2
 8001358:	469b      	mov	fp, r3

	+THETA_COMP_L3*sin(2*encoder_L*pi/180)+THETA_COMP_L4*cos(2*encoder_L*pi/180)));
 800135a:	4b3c      	ldr	r3, [pc, #240]	; (800144c <interupt_calEncoder+0x3b4>)
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001364:	ee17 0a90 	vmov	r0, s15
 8001368:	f7ff f916 	bl	8000598 <__aeabi_f2d>
 800136c:	a318      	add	r3, pc, #96	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	f7ff f969 	bl	8000648 <__aeabi_dmul>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b34      	ldr	r3, [pc, #208]	; (8001454 <interupt_calEncoder+0x3bc>)
 8001384:	f7ff fa8a 	bl	800089c <__aeabi_ddiv>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	ec43 2b17 	vmov	d7, r2, r3
 8001390:	eeb0 0a47 	vmov.f32	s0, s14
 8001394:	eef0 0a67 	vmov.f32	s1, s15
 8001398:	f022 fb5e 	bl	8023a58 <sin>
 800139c:	ec51 0b10 	vmov	r0, r1, d0
 80013a0:	a323      	add	r3, pc, #140	; (adr r3, 8001430 <interupt_calEncoder+0x398>)
 80013a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a6:	f7ff f94f 	bl	8000648 <__aeabi_dmul>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4650      	mov	r0, sl
 80013b0:	4659      	mov	r1, fp
 80013b2:	f7fe ff93 	bl	80002dc <__adddf3>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4692      	mov	sl, r2
 80013bc:	469b      	mov	fp, r3
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <interupt_calEncoder+0x3b4>)
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013c8:	e052      	b.n	8001470 <interupt_calEncoder+0x3d8>
 80013ca:	bf00      	nop
 80013cc:	f3af 8000 	nop.w
 80013d0:	54411744 	.word	0x54411744
 80013d4:	400921fb 	.word	0x400921fb
 80013d8:	4e70a65b 	.word	0x4e70a65b
 80013dc:	3f882f36 	.word	0x3f882f36
 80013e0:	a858793e 	.word	0xa858793e
 80013e4:	3ff1cd35 	.word	0x3ff1cd35
 80013e8:	00000000 	.word	0x00000000
 80013ec:	4078c000 	.word	0x4078c000
 80013f0:	147ae148 	.word	0x147ae148
 80013f4:	4078fbae 	.word	0x4078fbae
 80013f8:	0a3d70a4 	.word	0x0a3d70a4
 80013fc:	4078efd7 	.word	0x4078efd7
 8001400:	00000000 	.word	0x00000000
 8001404:	4125eb2e 	.word	0x4125eb2e
 8001408:	33333333 	.word	0x33333333
 800140c:	4125f7be 	.word	0x4125f7be
 8001410:	d2f1a9fc 	.word	0xd2f1a9fc
 8001414:	3f50624d 	.word	0x3f50624d
 8001418:	d0353719 	.word	0xd0353719
 800141c:	409a862c 	.word	0x409a862c
 8001420:	aa14ef84 	.word	0xaa14ef84
 8001424:	400ca14f 	.word	0x400ca14f
 8001428:	74decf2e 	.word	0x74decf2e
 800142c:	c05a4d26 	.word	0xc05a4d26
 8001430:	19d7419b 	.word	0x19d7419b
 8001434:	c0710f5a 	.word	0xc0710f5a
 8001438:	200006e4 	.word	0x200006e4
 800143c:	20000218 	.word	0x20000218
 8001440:	43340000 	.word	0x43340000
 8001444:	43b40000 	.word	0x43b40000
 8001448:	c3340000 	.word	0xc3340000
 800144c:	200006e8 	.word	0x200006e8
 8001450:	2000021c 	.word	0x2000021c
 8001454:	40668000 	.word	0x40668000
 8001458:	40790000 	.word	0x40790000
 800145c:	40870800 	.word	0x40870800
 8001460:	40868000 	.word	0x40868000
 8001464:	40862000 	.word	0x40862000
 8001468:	408f4000 	.word	0x408f4000
 800146c:	20000264 	.word	0x20000264
 8001470:	ee17 0a90 	vmov	r0, s15
 8001474:	f7ff f890 	bl	8000598 <__aeabi_f2d>
 8001478:	a3d3      	add	r3, pc, #844	; (adr r3, 80017c8 <interupt_calEncoder+0x730>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	f7ff f8e3 	bl	8000648 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4be6      	ldr	r3, [pc, #920]	; (8001828 <interupt_calEncoder+0x790>)
 8001490:	f7ff fa04 	bl	800089c <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	ec43 2b17 	vmov	d7, r2, r3
 800149c:	eeb0 0a47 	vmov.f32	s0, s14
 80014a0:	eef0 0a67 	vmov.f32	s1, s15
 80014a4:	f022 fa84 	bl	80239b0 <cos>
 80014a8:	ec51 0b10 	vmov	r0, r1, d0
 80014ac:	a3c2      	add	r3, pc, #776	; (adr r3, 80017b8 <interupt_calEncoder+0x720>)
 80014ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b2:	f7ff f8c9 	bl	8000648 <__aeabi_dmul>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4650      	mov	r0, sl
 80014bc:	4659      	mov	r1, fp
 80014be:	f7fe ff0d 	bl	80002dc <__adddf3>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
			/(THETA_COMP_L0 + theta_comp_gain*(THETA_COMP_L1*sin(encoder_L*pi/180)+THETA_COMP_L2*cos(encoder_L*pi/180)
 80014c6:	4620      	mov	r0, r4
 80014c8:	4629      	mov	r1, r5
 80014ca:	f7ff f8bd 	bl	8000648 <__aeabi_dmul>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	a3ba      	add	r3, pc, #744	; (adr r3, 80017c0 <interupt_calEncoder+0x728>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7fe fefe 	bl	80002dc <__adddf3>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4640      	mov	r0, r8
 80014e6:	4649      	mov	r1, r9
 80014e8:	f7ff f9d8 	bl	800089c <__aeabi_ddiv>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f7ff fb80 	bl	8000bf8 <__aeabi_d2f>
 80014f8:	4603      	mov	r3, r0
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME*THETA_COMP_L0
 80014fa:	4acc      	ldr	r2, [pc, #816]	; (800182c <interupt_calEncoder+0x794>)
 80014fc:	6013      	str	r3, [r2, #0]
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME*THETA_COMP_R0
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff f84a 	bl	8000598 <__aeabi_f2d>
 8001504:	a3b0      	add	r3, pc, #704	; (adr r3, 80017c8 <interupt_calEncoder+0x730>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7ff f89d 	bl	8000648 <__aeabi_dmul>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	4bc3      	ldr	r3, [pc, #780]	; (8001828 <interupt_calEncoder+0x790>)
 800151c:	f7ff f9be 	bl	800089c <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	a3a9      	add	r3, pc, #676	; (adr r3, 80017d0 <interupt_calEncoder+0x738>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	f7ff f88b 	bl	8000648 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	a3a7      	add	r3, pc, #668	; (adr r3, 80017d8 <interupt_calEncoder+0x740>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	f7ff f882 	bl	8000648 <__aeabi_dmul>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	a3a4      	add	r3, pc, #656	; (adr r3, 80017e0 <interupt_calEncoder+0x748>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7ff f879 	bl	8000648 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	a3a2      	add	r3, pc, #648	; (adr r3, 80017e8 <interupt_calEncoder+0x750>)
 8001560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001564:	f7ff f99a 	bl	800089c <__aeabi_ddiv>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	4bae      	ldr	r3, [pc, #696]	; (8001830 <interupt_calEncoder+0x798>)
 8001576:	f7ff f867 	bl	8000648 <__aeabi_dmul>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	a39b      	add	r3, pc, #620	; (adr r3, 80017f0 <interupt_calEncoder+0x758>)
 8001584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001588:	f7ff f988 	bl	800089c <__aeabi_ddiv>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	4ba6      	ldr	r3, [pc, #664]	; (8001834 <interupt_calEncoder+0x79c>)
 800159a:	f7ff f855 	bl	8000648 <__aeabi_dmul>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4ba3      	ldr	r3, [pc, #652]	; (8001838 <interupt_calEncoder+0x7a0>)
 80015ac:	f7ff f976 	bl	800089c <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	4b9f      	ldr	r3, [pc, #636]	; (800183c <interupt_calEncoder+0x7a4>)
 80015be:	f7ff f843 	bl	8000648 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	4b9a      	ldr	r3, [pc, #616]	; (8001838 <interupt_calEncoder+0x7a0>)
 80015d0:	f7ff f964 	bl	800089c <__aeabi_ddiv>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e4:	f7ff f95a 	bl	800089c <__aeabi_ddiv>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	4b92      	ldr	r3, [pc, #584]	; (8001840 <interupt_calEncoder+0x7a8>)
 80015f6:	f7ff f827 	bl	8000648 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	a37d      	add	r3, pc, #500	; (adr r3, 80017f8 <interupt_calEncoder+0x760>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7ff f948 	bl	800089c <__aeabi_ddiv>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	a37a      	add	r3, pc, #488	; (adr r3, 8001800 <interupt_calEncoder+0x768>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7ff f815 	bl	8000648 <__aeabi_dmul>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4690      	mov	r8, r2
 8001624:	4699      	mov	r9, r3
			/ (THETA_COMP_R0 + theta_comp_gain*(THETA_COMP_R1*sin(encoder_R*pi/180)+THETA_COMP_R2*cos(encoder_R*pi/180)
 8001626:	4b87      	ldr	r3, [pc, #540]	; (8001844 <interupt_calEncoder+0x7ac>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ffb4 	bl	8000598 <__aeabi_f2d>
 8001630:	4604      	mov	r4, r0
 8001632:	460d      	mov	r5, r1
 8001634:	4b84      	ldr	r3, [pc, #528]	; (8001848 <interupt_calEncoder+0x7b0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ffad 	bl	8000598 <__aeabi_f2d>
 800163e:	a362      	add	r3, pc, #392	; (adr r3, 80017c8 <interupt_calEncoder+0x730>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7ff f800 	bl	8000648 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b74      	ldr	r3, [pc, #464]	; (8001828 <interupt_calEncoder+0x790>)
 8001656:	f7ff f921 	bl	800089c <__aeabi_ddiv>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	ec43 2b17 	vmov	d7, r2, r3
 8001662:	eeb0 0a47 	vmov.f32	s0, s14
 8001666:	eef0 0a67 	vmov.f32	s1, s15
 800166a:	f022 f9f5 	bl	8023a58 <sin>
 800166e:	ec51 0b10 	vmov	r0, r1, d0
 8001672:	a365      	add	r3, pc, #404	; (adr r3, 8001808 <interupt_calEncoder+0x770>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe ffe6 	bl	8000648 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4692      	mov	sl, r2
 8001682:	469b      	mov	fp, r3
 8001684:	4b70      	ldr	r3, [pc, #448]	; (8001848 <interupt_calEncoder+0x7b0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff85 	bl	8000598 <__aeabi_f2d>
 800168e:	a34e      	add	r3, pc, #312	; (adr r3, 80017c8 <interupt_calEncoder+0x730>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	f7fe ffd8 	bl	8000648 <__aeabi_dmul>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	4b60      	ldr	r3, [pc, #384]	; (8001828 <interupt_calEncoder+0x790>)
 80016a6:	f7ff f8f9 	bl	800089c <__aeabi_ddiv>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	ec43 2b17 	vmov	d7, r2, r3
 80016b2:	eeb0 0a47 	vmov.f32	s0, s14
 80016b6:	eef0 0a67 	vmov.f32	s1, s15
 80016ba:	f022 f979 	bl	80239b0 <cos>
 80016be:	ec51 0b10 	vmov	r0, r1, d0
 80016c2:	a353      	add	r3, pc, #332	; (adr r3, 8001810 <interupt_calEncoder+0x778>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	f7fe ffbe 	bl	8000648 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4650      	mov	r0, sl
 80016d2:	4659      	mov	r1, fp
 80016d4:	f7fe fe02 	bl	80002dc <__adddf3>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4692      	mov	sl, r2
 80016de:	469b      	mov	fp, r3
							  +THETA_COMP_R3*sin(2*encoder_R*pi/180)+THETA_COMP_R4*cos(2*encoder_R*pi/180)));
 80016e0:	4b59      	ldr	r3, [pc, #356]	; (8001848 <interupt_calEncoder+0x7b0>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ea:	ee17 0a90 	vmov	r0, s15
 80016ee:	f7fe ff53 	bl	8000598 <__aeabi_f2d>
 80016f2:	a335      	add	r3, pc, #212	; (adr r3, 80017c8 <interupt_calEncoder+0x730>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7fe ffa6 	bl	8000648 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	4b47      	ldr	r3, [pc, #284]	; (8001828 <interupt_calEncoder+0x790>)
 800170a:	f7ff f8c7 	bl	800089c <__aeabi_ddiv>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	ec43 2b17 	vmov	d7, r2, r3
 8001716:	eeb0 0a47 	vmov.f32	s0, s14
 800171a:	eef0 0a67 	vmov.f32	s1, s15
 800171e:	f022 f99b 	bl	8023a58 <sin>
 8001722:	ec51 0b10 	vmov	r0, r1, d0
 8001726:	a33c      	add	r3, pc, #240	; (adr r3, 8001818 <interupt_calEncoder+0x780>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe ff8c 	bl	8000648 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4650      	mov	r0, sl
 8001736:	4659      	mov	r1, fp
 8001738:	f7fe fdd0 	bl	80002dc <__adddf3>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4692      	mov	sl, r2
 8001742:	469b      	mov	fp, r3
 8001744:	4b40      	ldr	r3, [pc, #256]	; (8001848 <interupt_calEncoder+0x7b0>)
 8001746:	edd3 7a00 	vldr	s15, [r3]
 800174a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800174e:	ee17 0a90 	vmov	r0, s15
 8001752:	f7fe ff21 	bl	8000598 <__aeabi_f2d>
 8001756:	a31c      	add	r3, pc, #112	; (adr r3, 80017c8 <interupt_calEncoder+0x730>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7fe ff74 	bl	8000648 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <interupt_calEncoder+0x790>)
 800176e:	f7ff f895 	bl	800089c <__aeabi_ddiv>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	ec43 2b17 	vmov	d7, r2, r3
 800177a:	eeb0 0a47 	vmov.f32	s0, s14
 800177e:	eef0 0a67 	vmov.f32	s1, s15
 8001782:	f022 f915 	bl	80239b0 <cos>
 8001786:	ec51 0b10 	vmov	r0, r1, d0
 800178a:	a325      	add	r3, pc, #148	; (adr r3, 8001820 <interupt_calEncoder+0x788>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f7fe ff5a 	bl	8000648 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4650      	mov	r0, sl
 800179a:	4659      	mov	r1, fp
 800179c:	f7fe fd9e 	bl	80002dc <__adddf3>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
			/ (THETA_COMP_R0 + theta_comp_gain*(THETA_COMP_R1*sin(encoder_R*pi/180)+THETA_COMP_R2*cos(encoder_R*pi/180)
 80017a4:	4620      	mov	r0, r4
 80017a6:	4629      	mov	r1, r5
 80017a8:	f7fe ff4e 	bl	8000648 <__aeabi_dmul>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	e04a      	b.n	800184c <interupt_calEncoder+0x7b4>
 80017b6:	bf00      	nop
 80017b8:	a96b73c1 	.word	0xa96b73c1
 80017bc:	4058baae 	.word	0x4058baae
 80017c0:	d0353719 	.word	0xd0353719
 80017c4:	409a862c 	.word	0x409a862c
 80017c8:	54411744 	.word	0x54411744
 80017cc:	400921fb 	.word	0x400921fb
 80017d0:	4e70a65b 	.word	0x4e70a65b
 80017d4:	3f882f36 	.word	0x3f882f36
 80017d8:	a858793e 	.word	0xa858793e
 80017dc:	3ff1cd35 	.word	0x3ff1cd35
 80017e0:	00000000 	.word	0x00000000
 80017e4:	4078c000 	.word	0x4078c000
 80017e8:	147ae148 	.word	0x147ae148
 80017ec:	4078fbae 	.word	0x4078fbae
 80017f0:	5c28f5c3 	.word	0x5c28f5c3
 80017f4:	40792a8f 	.word	0x40792a8f
 80017f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017fc:	3f50624d 	.word	0x3f50624d
 8001800:	11d3671b 	.word	0x11d3671b
 8001804:	409c0a10 	.word	0x409c0a10
 8001808:	27aee802 	.word	0x27aee802
 800180c:	c0234be5 	.word	0xc0234be5
 8001810:	578a2a91 	.word	0x578a2a91
 8001814:	405f0f59 	.word	0x405f0f59
 8001818:	cccccccd 	.word	0xcccccccd
 800181c:	404d0ccc 	.word	0x404d0ccc
 8001820:	45e8419d 	.word	0x45e8419d
 8001824:	4075ef32 	.word	0x4075ef32
 8001828:	40668000 	.word	0x40668000
 800182c:	20000228 	.word	0x20000228
 8001830:	40790000 	.word	0x40790000
 8001834:	40870800 	.word	0x40870800
 8001838:	40868000 	.word	0x40868000
 800183c:	40862000 	.word	0x40862000
 8001840:	408f4000 	.word	0x408f4000
 8001844:	20000264 	.word	0x20000264
 8001848:	200006e4 	.word	0x200006e4
 800184c:	a33a      	add	r3, pc, #232	; (adr r3, 8001938 <interupt_calEncoder+0x8a0>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe fd43 	bl	80002dc <__adddf3>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4640      	mov	r0, r8
 800185c:	4649      	mov	r1, r9
 800185e:	f7ff f81d 	bl	800089c <__aeabi_ddiv>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	f7ff f9c5 	bl	8000bf8 <__aeabi_d2f>
 800186e:	4603      	mov	r3, r0
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME*THETA_COMP_R0
 8001870:	4a29      	ldr	r2, [pc, #164]	; (8001918 <interupt_calEncoder+0x880>)
 8001872:	6013      	str	r3, [r2, #0]
	E_distanceL += E_speedL * INTERRUPT_TIME;
 8001874:	4b29      	ldr	r3, [pc, #164]	; (800191c <interupt_calEncoder+0x884>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe8d 	bl	8000598 <__aeabi_f2d>
 800187e:	4604      	mov	r4, r0
 8001880:	460d      	mov	r5, r1
 8001882:	4b27      	ldr	r3, [pc, #156]	; (8001920 <interupt_calEncoder+0x888>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fe86 	bl	8000598 <__aeabi_f2d>
 800188c:	a320      	add	r3, pc, #128	; (adr r3, 8001910 <interupt_calEncoder+0x878>)
 800188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001892:	f7fe fed9 	bl	8000648 <__aeabi_dmul>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f7fe fd1d 	bl	80002dc <__adddf3>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7ff f9a5 	bl	8000bf8 <__aeabi_d2f>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a1a      	ldr	r2, [pc, #104]	; (800191c <interupt_calEncoder+0x884>)
 80018b2:	6013      	str	r3, [r2, #0]
	E_distanceR += E_speedR * INTERRUPT_TIME;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <interupt_calEncoder+0x88c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe6d 	bl	8000598 <__aeabi_f2d>
 80018be:	4604      	mov	r4, r0
 80018c0:	460d      	mov	r5, r1
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <interupt_calEncoder+0x880>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe66 	bl	8000598 <__aeabi_f2d>
 80018cc:	a310      	add	r3, pc, #64	; (adr r3, 8001910 <interupt_calEncoder+0x878>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	f7fe feb9 	bl	8000648 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4620      	mov	r0, r4
 80018dc:	4629      	mov	r1, r5
 80018de:	f7fe fcfd 	bl	80002dc <__adddf3>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	f7ff f985 	bl	8000bf8 <__aeabi_d2f>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4a0c      	ldr	r2, [pc, #48]	; (8001924 <interupt_calEncoder+0x88c>)
 80018f2:	6013      	str	r3, [r2, #0]

	encoder_L0=encoder_L;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <interupt_calEncoder+0x890>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0c      	ldr	r2, [pc, #48]	; (800192c <interupt_calEncoder+0x894>)
 80018fa:	6013      	str	r3, [r2, #0]
	encoder_R0=encoder_R;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <interupt_calEncoder+0x898>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0c      	ldr	r2, [pc, #48]	; (8001934 <interupt_calEncoder+0x89c>)
 8001902:	6013      	str	r3, [r2, #0]

}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800190e:	bf00      	nop
 8001910:	d2f1a9fc 	.word	0xd2f1a9fc
 8001914:	3f50624d 	.word	0x3f50624d
 8001918:	2000022c 	.word	0x2000022c
 800191c:	20000220 	.word	0x20000220
 8001920:	20000228 	.word	0x20000228
 8001924:	20000224 	.word	0x20000224
 8001928:	200006e8 	.word	0x200006e8
 800192c:	2000021c 	.word	0x2000021c
 8001930:	200006e4 	.word	0x200006e4
 8001934:	20000218 	.word	0x20000218
 8001938:	11d3671b 	.word	0x11d3671b
 800193c:	409c0a10 	.word	0x409c0a10

08001940 <interupt_calFusion>:


void interupt_calFusion(void) {
 8001940:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001944:	af00      	add	r7, sp, #0


	E_lpf_speedL = straight_alpha * E_lpf_speedL + (1 - straight_alpha) * E_speedL;
 8001946:	4ba4      	ldr	r3, [pc, #656]	; (8001bd8 <interupt_calFusion+0x298>)
 8001948:	ed93 7a00 	vldr	s14, [r3]
 800194c:	4ba3      	ldr	r3, [pc, #652]	; (8001bdc <interupt_calFusion+0x29c>)
 800194e:	edd3 7a00 	vldr	s15, [r3]
 8001952:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001956:	4ba0      	ldr	r3, [pc, #640]	; (8001bd8 <interupt_calFusion+0x298>)
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001960:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001964:	4b9e      	ldr	r3, [pc, #632]	; (8001be0 <interupt_calFusion+0x2a0>)
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800196e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001972:	4b9a      	ldr	r3, [pc, #616]	; (8001bdc <interupt_calFusion+0x29c>)
 8001974:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_speedR = straight_alpha * E_lpf_speedR + (1 - straight_alpha) * E_speedR;
 8001978:	4b97      	ldr	r3, [pc, #604]	; (8001bd8 <interupt_calFusion+0x298>)
 800197a:	ed93 7a00 	vldr	s14, [r3]
 800197e:	4b99      	ldr	r3, [pc, #612]	; (8001be4 <interupt_calFusion+0x2a4>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001988:	4b93      	ldr	r3, [pc, #588]	; (8001bd8 <interupt_calFusion+0x298>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001992:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001996:	4b94      	ldr	r3, [pc, #592]	; (8001be8 <interupt_calFusion+0x2a8>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a4:	4b8f      	ldr	r3, [pc, #572]	; (8001be4 <interupt_calFusion+0x2a4>)
 80019a6:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_distanceL += E_lpf_speedL * INTERRUPT_TIME;
 80019aa:	4b90      	ldr	r3, [pc, #576]	; (8001bec <interupt_calFusion+0x2ac>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fdf2 	bl	8000598 <__aeabi_f2d>
 80019b4:	4604      	mov	r4, r0
 80019b6:	460d      	mov	r5, r1
 80019b8:	4b88      	ldr	r3, [pc, #544]	; (8001bdc <interupt_calFusion+0x29c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fdeb 	bl	8000598 <__aeabi_f2d>
 80019c2:	a383      	add	r3, pc, #524	; (adr r3, 8001bd0 <interupt_calFusion+0x290>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	f7fe fe3e 	bl	8000648 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4620      	mov	r0, r4
 80019d2:	4629      	mov	r1, r5
 80019d4:	f7fe fc82 	bl	80002dc <__adddf3>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	f7ff f90a 	bl	8000bf8 <__aeabi_d2f>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4a81      	ldr	r2, [pc, #516]	; (8001bec <interupt_calFusion+0x2ac>)
 80019e8:	6013      	str	r3, [r2, #0]
	E_lpf_distanceR += E_lpf_speedR * INTERRUPT_TIME;
 80019ea:	4b81      	ldr	r3, [pc, #516]	; (8001bf0 <interupt_calFusion+0x2b0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fdd2 	bl	8000598 <__aeabi_f2d>
 80019f4:	4604      	mov	r4, r0
 80019f6:	460d      	mov	r5, r1
 80019f8:	4b7a      	ldr	r3, [pc, #488]	; (8001be4 <interupt_calFusion+0x2a4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fdcb 	bl	8000598 <__aeabi_f2d>
 8001a02:	a373      	add	r3, pc, #460	; (adr r3, 8001bd0 <interupt_calFusion+0x290>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fe1e 	bl	8000648 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4620      	mov	r0, r4
 8001a12:	4629      	mov	r1, r5
 8001a14:	f7fe fc62 	bl	80002dc <__adddf3>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f7ff f8ea 	bl	8000bf8 <__aeabi_d2f>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4a72      	ldr	r2, [pc, #456]	; (8001bf0 <interupt_calFusion+0x2b0>)
 8001a28:	6013      	str	r3, [r2, #0]
	//G_hpf_speedR = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
	//G_hpf_distanceL += G_hpf_speedL * INTERRUPT_TIME;
	//G_hpf_distanceR += G_hpf_speedR * INTERRUPT_TIME;


	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedL;
 8001a2a:	4b6b      	ldr	r3, [pc, #428]	; (8001bd8 <interupt_calFusion+0x298>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fdb2 	bl	8000598 <__aeabi_f2d>
 8001a34:	4604      	mov	r4, r0
 8001a36:	460d      	mov	r5, r1
 8001a38:	4b6e      	ldr	r3, [pc, #440]	; (8001bf4 <interupt_calFusion+0x2b4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fdab 	bl	8000598 <__aeabi_f2d>
 8001a42:	4680      	mov	r8, r0
 8001a44:	4689      	mov	r9, r1
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <interupt_calFusion+0x2b8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fda4 	bl	8000598 <__aeabi_f2d>
 8001a50:	a35f      	add	r3, pc, #380	; (adr r3, 8001bd0 <interupt_calFusion+0x290>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	f7fe fdf7 	bl	8000648 <__aeabi_dmul>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4640      	mov	r0, r8
 8001a60:	4649      	mov	r1, r9
 8001a62:	f7fe fc3b 	bl	80002dc <__adddf3>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	f7fe fdeb 	bl	8000648 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4614      	mov	r4, r2
 8001a78:	461d      	mov	r5, r3
 8001a7a:	4b57      	ldr	r3, [pc, #348]	; (8001bd8 <interupt_calFusion+0x298>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a88:	4b55      	ldr	r3, [pc, #340]	; (8001be0 <interupt_calFusion+0x2a0>)
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a92:	ee17 0a90 	vmov	r0, s15
 8001a96:	f7fe fd7f 	bl	8000598 <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	f7fe fc1b 	bl	80002dc <__adddf3>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f8a3 	bl	8000bf8 <__aeabi_d2f>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4a4f      	ldr	r2, [pc, #316]	; (8001bf4 <interupt_calFusion+0x2b4>)
 8001ab6:	6013      	str	r3, [r2, #0]
	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedR;
 8001ab8:	4b47      	ldr	r3, [pc, #284]	; (8001bd8 <interupt_calFusion+0x298>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fd6b 	bl	8000598 <__aeabi_f2d>
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	460d      	mov	r5, r1
 8001ac6:	4b4b      	ldr	r3, [pc, #300]	; (8001bf4 <interupt_calFusion+0x2b4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd64 	bl	8000598 <__aeabi_f2d>
 8001ad0:	4680      	mov	r8, r0
 8001ad2:	4689      	mov	r9, r1
 8001ad4:	4b48      	ldr	r3, [pc, #288]	; (8001bf8 <interupt_calFusion+0x2b8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd5d 	bl	8000598 <__aeabi_f2d>
 8001ade:	a33c      	add	r3, pc, #240	; (adr r3, 8001bd0 <interupt_calFusion+0x290>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	f7fe fdb0 	bl	8000648 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4640      	mov	r0, r8
 8001aee:	4649      	mov	r1, r9
 8001af0:	f7fe fbf4 	bl	80002dc <__adddf3>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4620      	mov	r0, r4
 8001afa:	4629      	mov	r1, r5
 8001afc:	f7fe fda4 	bl	8000648 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4614      	mov	r4, r2
 8001b06:	461d      	mov	r5, r3
 8001b08:	4b33      	ldr	r3, [pc, #204]	; (8001bd8 <interupt_calFusion+0x298>)
 8001b0a:	edd3 7a00 	vldr	s15, [r3]
 8001b0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b16:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <interupt_calFusion+0x2a8>)
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b20:	ee17 0a90 	vmov	r0, s15
 8001b24:	f7fe fd38 	bl	8000598 <__aeabi_f2d>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7fe fbd4 	bl	80002dc <__adddf3>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7ff f85c 	bl	8000bf8 <__aeabi_d2f>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a2e      	ldr	r2, [pc, #184]	; (8001bfc <interupt_calFusion+0x2bc>)
 8001b44:	6013      	str	r3, [r2, #0]
//	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel);
//	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel);
//	fusion_speedL = straight_alpha * (fusion_speedL) + (1 - straight_alpha) * E_speedL;
//	fusion_speedR = straight_alpha * (fusion_speedL) + (1 - straight_alpha) * E_speedR;
	fusion_distanceL += fusion_speedL * INTERRUPT_TIME;
 8001b46:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <interupt_calFusion+0x2c0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fd24 	bl	8000598 <__aeabi_f2d>
 8001b50:	4604      	mov	r4, r0
 8001b52:	460d      	mov	r5, r1
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <interupt_calFusion+0x2b4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fd1d 	bl	8000598 <__aeabi_f2d>
 8001b5e:	a31c      	add	r3, pc, #112	; (adr r3, 8001bd0 <interupt_calFusion+0x290>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	f7fe fd70 	bl	8000648 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fbb4 	bl	80002dc <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f83c 	bl	8000bf8 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a1f      	ldr	r2, [pc, #124]	; (8001c00 <interupt_calFusion+0x2c0>)
 8001b84:	6013      	str	r3, [r2, #0]
	fusion_distanceR += fusion_speedR * INTERRUPT_TIME;
 8001b86:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <interupt_calFusion+0x2c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fd04 	bl	8000598 <__aeabi_f2d>
 8001b90:	4604      	mov	r4, r0
 8001b92:	460d      	mov	r5, r1
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <interupt_calFusion+0x2bc>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fcfd 	bl	8000598 <__aeabi_f2d>
 8001b9e:	a30c      	add	r3, pc, #48	; (adr r3, 8001bd0 <interupt_calFusion+0x290>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	f7fe fd50 	bl	8000648 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fb94 	bl	80002dc <__adddf3>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f7ff f81c 	bl	8000bf8 <__aeabi_d2f>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4a10      	ldr	r2, [pc, #64]	; (8001c04 <interupt_calFusion+0x2c4>)
 8001bc4:	6013      	str	r3, [r2, #0]

}
 8001bc6:	bf00      	nop
 8001bc8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bcc:	f3af 8000 	nop.w
 8001bd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bd4:	3f50624d 	.word	0x3f50624d
 8001bd8:	20000260 	.word	0x20000260
 8001bdc:	20000238 	.word	0x20000238
 8001be0:	20000228 	.word	0x20000228
 8001be4:	2000023c 	.word	0x2000023c
 8001be8:	2000022c 	.word	0x2000022c
 8001bec:	20000230 	.word	0x20000230
 8001bf0:	20000234 	.word	0x20000234
 8001bf4:	20000258 	.word	0x20000258
 8001bf8:	20000284 	.word	0x20000284
 8001bfc:	2000025c 	.word	0x2000025c
 8001c00:	20000250 	.word	0x20000250
 8001c04:	20000254 	.word	0x20000254

08001c08 <reset_gyro>:
float accelY_offset;

float angle_speed_ave[10];


void reset_gyro(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
	int s = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]
	angle = 0;
 8001c12:	4b3c      	ldr	r3, [pc, #240]	; (8001d04 <reset_gyro+0xfc>)
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
	omegaZ_offset=0;
 8001c1a:	4b3b      	ldr	r3, [pc, #236]	; (8001d08 <reset_gyro+0x100>)
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]

	for (s = 1; s <= 1000; s++) {
 8001c22:	2301      	movs	r3, #1
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	e026      	b.n	8001c76 <reset_gyro+0x6e>
		//ICM20602_DataUpdate();
		omegaZ_offset += gyro.omega_z;
 8001c28:	4b38      	ldr	r3, [pc, #224]	; (8001d0c <reset_gyro+0x104>)
 8001c2a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c2e:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <reset_gyro+0x100>)
 8001c30:	edd3 7a00 	vldr	s15, [r3]
 8001c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c38:	4b33      	ldr	r3, [pc, #204]	; (8001d08 <reset_gyro+0x100>)
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
		omegaX_offset += gyro.omega_x;
 8001c3e:	4b33      	ldr	r3, [pc, #204]	; (8001d0c <reset_gyro+0x104>)
 8001c40:	ed93 7a00 	vldr	s14, [r3]
 8001c44:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <reset_gyro+0x108>)
 8001c46:	edd3 7a00 	vldr	s15, [r3]
 8001c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4e:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <reset_gyro+0x108>)
 8001c50:	edc3 7a00 	vstr	s15, [r3]
		accelY_offset += gyro.accel_y;
 8001c54:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <reset_gyro+0x104>)
 8001c56:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c5a:	4b2e      	ldr	r3, [pc, #184]	; (8001d14 <reset_gyro+0x10c>)
 8001c5c:	edd3 7a00 	vldr	s15, [r3]
 8001c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c64:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <reset_gyro+0x10c>)
 8001c66:	edc3 7a00 	vstr	s15, [r3]
		wait_ms_NoReset(1);
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f006 ffcc 	bl	8008c08 <wait_ms_NoReset>
	for (s = 1; s <= 1000; s++) {
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3301      	adds	r3, #1
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c7c:	ddd4      	ble.n	8001c28 <reset_gyro+0x20>
	}
	omegaZ_offset = omegaZ_offset / 1000;
 8001c7e:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <reset_gyro+0x100>)
 8001c80:	ed93 7a00 	vldr	s14, [r3]
 8001c84:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001d18 <reset_gyro+0x110>
 8001c88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <reset_gyro+0x100>)
 8001c8e:	edc3 7a00 	vstr	s15, [r3]
	omegaX_offset = omegaX_offset / 1000;
 8001c92:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <reset_gyro+0x108>)
 8001c94:	ed93 7a00 	vldr	s14, [r3]
 8001c98:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001d18 <reset_gyro+0x110>
 8001c9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <reset_gyro+0x108>)
 8001ca2:	edc3 7a00 	vstr	s15, [r3]
	accelY_offset = accelY_offset / 1000;
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <reset_gyro+0x10c>)
 8001ca8:	ed93 7a00 	vldr	s14, [r3]
 8001cac:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001d18 <reset_gyro+0x110>
 8001cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb4:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <reset_gyro+0x10c>)
 8001cb6:	edc3 7a00 	vstr	s15, [r3]
	//オフセットする文
	//printf("%f,%f\n",gyro.omega_z,omegaZ_offset);

	angle = 0;
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <reset_gyro+0xfc>)
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
	anglex = 0;
 8001cc2:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <reset_gyro+0x114>)
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
	gf_speed = 0;
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <reset_gyro+0x118>)
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
	gf_distance = 0;
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <reset_gyro+0x11c>)
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	e009      	b.n	8001cf4 <reset_gyro+0xec>
		angle_speed_ave[s] = 0;
 8001ce0:	4a11      	ldr	r2, [pc, #68]	; (8001d28 <reset_gyro+0x120>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b09      	cmp	r3, #9
 8001cf8:	ddf2      	ble.n	8001ce0 <reset_gyro+0xd8>
	}
}
 8001cfa:	bf00      	nop
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000268 	.word	0x20000268
 8001d08:	2000028c 	.word	0x2000028c
 8001d0c:	200006f0 	.word	0x200006f0
 8001d10:	20000288 	.word	0x20000288
 8001d14:	20000290 	.word	0x20000290
 8001d18:	447a0000 	.word	0x447a0000
 8001d1c:	20000270 	.word	0x20000270
 8001d20:	2000027c 	.word	0x2000027c
 8001d24:	20000280 	.word	0x20000280
 8001d28:	20000294 	.word	0x20000294
 8001d2c:	00000000 	.word	0x00000000

08001d30 <interrupt_calGyro>:

void interrupt_calGyro(void) {
 8001d30:	b5b0      	push	{r4, r5, r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
	int j = 9;
 8001d36:	2309      	movs	r3, #9
 8001d38:	607b      	str	r3, [r7, #4]
	//angle_speed0 = angle_speed;

	for (j = 9; j >= 1; j--) {
 8001d3a:	2309      	movs	r3, #9
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	e00d      	b.n	8001d5c <interrupt_calGyro+0x2c>
		angle_speed_ave[j] = angle_speed_ave[j - 1];
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	4ab0      	ldr	r2, [pc, #704]	; (8002008 <interrupt_calGyro+0x2d8>)
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	49ae      	ldr	r1, [pc, #696]	; (8002008 <interrupt_calGyro+0x2d8>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	601a      	str	r2, [r3, #0]
	for (j = 9; j >= 1; j--) {
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	dcee      	bgt.n	8001d40 <interrupt_calGyro+0x10>
	}
	angle_speed_ave[0] = (gyro.omega_z - omegaZ_offset)*GYRO_COEFFICIENT;//*0.9525321206299 ;//* 90 / 96*3690/3600*(3600-17)/3600;
 8001d62:	4baa      	ldr	r3, [pc, #680]	; (800200c <interrupt_calGyro+0x2dc>)
 8001d64:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d68:	4ba9      	ldr	r3, [pc, #676]	; (8002010 <interrupt_calGyro+0x2e0>)
 8001d6a:	edd3 7a00 	vldr	s15, [r3]
 8001d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d72:	ee17 0a90 	vmov	r0, s15
 8001d76:	f7fe fc0f 	bl	8000598 <__aeabi_f2d>
 8001d7a:	a391      	add	r3, pc, #580	; (adr r3, 8001fc0 <interrupt_calGyro+0x290>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	f7fe fc62 	bl	8000648 <__aeabi_dmul>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	a38e      	add	r3, pc, #568	; (adr r3, 8001fc8 <interrupt_calGyro+0x298>)
 8001d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d92:	f7fe fc59 	bl	8000648 <__aeabi_dmul>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	a38c      	add	r3, pc, #560	; (adr r3, 8001fd0 <interrupt_calGyro+0x2a0>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fd7a 	bl	800089c <__aeabi_ddiv>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7fe ff22 	bl	8000bf8 <__aeabi_d2f>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4a94      	ldr	r2, [pc, #592]	; (8002008 <interrupt_calGyro+0x2d8>)
 8001db8:	6013      	str	r3, [r2, #0]

	/*angle_speed = ((angle_speed_ave[0] + angle_speed_ave[1] + angle_speed_ave[2]
			+ angle_speed_ave[3] + angle_speed_ave[4] + angle_speed_ave[5]
			+ angle_speed_ave[6] + angle_speed_ave[7] + angle_speed_ave[8]
			+ angle_speed_ave[9]) / 10);*/
	angle_speed = angle_speed_ave[0];
 8001dba:	4b93      	ldr	r3, [pc, #588]	; (8002008 <interrupt_calGyro+0x2d8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a95      	ldr	r2, [pc, #596]	; (8002014 <interrupt_calGyro+0x2e4>)
 8001dc0:	6013      	str	r3, [r2, #0]
	//angle_speed=(gyro.omega_z-omegaZ_offset)*90/94;//deg/sec
	angle_speedx=gyro.omega_x;
 8001dc2:	4b92      	ldr	r3, [pc, #584]	; (800200c <interrupt_calGyro+0x2dc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a94      	ldr	r2, [pc, #592]	; (8002018 <interrupt_calGyro+0x2e8>)
 8001dc8:	6013      	str	r3, [r2, #0]
	angle_speedx_set=(gyro.omega_x - omegaX_offset);
 8001dca:	4b90      	ldr	r3, [pc, #576]	; (800200c <interrupt_calGyro+0x2dc>)
 8001dcc:	ed93 7a00 	vldr	s14, [r3]
 8001dd0:	4b92      	ldr	r3, [pc, #584]	; (800201c <interrupt_calGyro+0x2ec>)
 8001dd2:	edd3 7a00 	vldr	s15, [r3]
 8001dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dda:	4b91      	ldr	r3, [pc, #580]	; (8002020 <interrupt_calGyro+0x2f0>)
 8001ddc:	edc3 7a00 	vstr	s15, [r3]
	angle += INTERRUPT_TIME * angle_speed; //deg
 8001de0:	4b90      	ldr	r3, [pc, #576]	; (8002024 <interrupt_calGyro+0x2f4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fbd7 	bl	8000598 <__aeabi_f2d>
 8001dea:	4604      	mov	r4, r0
 8001dec:	460d      	mov	r5, r1
 8001dee:	4b89      	ldr	r3, [pc, #548]	; (8002014 <interrupt_calGyro+0x2e4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fbd0 	bl	8000598 <__aeabi_f2d>
 8001df8:	a377      	add	r3, pc, #476	; (adr r3, 8001fd8 <interrupt_calGyro+0x2a8>)
 8001dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfe:	f7fe fc23 	bl	8000648 <__aeabi_dmul>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4620      	mov	r0, r4
 8001e08:	4629      	mov	r1, r5
 8001e0a:	f7fe fa67 	bl	80002dc <__adddf3>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f7fe feef 	bl	8000bf8 <__aeabi_d2f>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4a81      	ldr	r2, [pc, #516]	; (8002024 <interrupt_calGyro+0x2f4>)
 8001e1e:	6013      	str	r3, [r2, #0]
	anglex += INTERRUPT_TIME * (gyro.omega_x - omegaX_offset); //deg
 8001e20:	4b81      	ldr	r3, [pc, #516]	; (8002028 <interrupt_calGyro+0x2f8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fbb7 	bl	8000598 <__aeabi_f2d>
 8001e2a:	4604      	mov	r4, r0
 8001e2c:	460d      	mov	r5, r1
 8001e2e:	4b77      	ldr	r3, [pc, #476]	; (800200c <interrupt_calGyro+0x2dc>)
 8001e30:	ed93 7a00 	vldr	s14, [r3]
 8001e34:	4b79      	ldr	r3, [pc, #484]	; (800201c <interrupt_calGyro+0x2ec>)
 8001e36:	edd3 7a00 	vldr	s15, [r3]
 8001e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e3e:	ee17 0a90 	vmov	r0, s15
 8001e42:	f7fe fba9 	bl	8000598 <__aeabi_f2d>
 8001e46:	a364      	add	r3, pc, #400	; (adr r3, 8001fd8 <interrupt_calGyro+0x2a8>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f7fe fbfc 	bl	8000648 <__aeabi_dmul>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4620      	mov	r0, r4
 8001e56:	4629      	mov	r1, r5
 8001e58:	f7fe fa40 	bl	80002dc <__adddf3>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	f7fe fec8 	bl	8000bf8 <__aeabi_d2f>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4a6f      	ldr	r2, [pc, #444]	; (8002028 <interrupt_calGyro+0x2f8>)
 8001e6c:	6013      	str	r3, [r2, #0]
	//angle_acceleration = (angle_speed - angle_speed0) * 1000; //deg/sec^2
//+0.12*0.02*angle_speed*angle_speed
	gf_accel = (gyro.accel_y - accelY_offset)*ACCEL_COEFFICIENT*1000*GRAVITATION;
 8001e6e:	4b67      	ldr	r3, [pc, #412]	; (800200c <interrupt_calGyro+0x2dc>)
 8001e70:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e74:	4b6d      	ldr	r3, [pc, #436]	; (800202c <interrupt_calGyro+0x2fc>)
 8001e76:	edd3 7a00 	vldr	s15, [r3]
 8001e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e7e:	ee17 0a90 	vmov	r0, s15
 8001e82:	f7fe fb89 	bl	8000598 <__aeabi_f2d>
 8001e86:	a356      	add	r3, pc, #344	; (adr r3, 8001fe0 <interrupt_calGyro+0x2b0>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fbdc 	bl	8000648 <__aeabi_dmul>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	a353      	add	r3, pc, #332	; (adr r3, 8001fe8 <interrupt_calGyro+0x2b8>)
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	f7fe fbd3 	bl	8000648 <__aeabi_dmul>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	a351      	add	r3, pc, #324	; (adr r3, 8001ff0 <interrupt_calGyro+0x2c0>)
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	f7fe fcf4 	bl	800089c <__aeabi_ddiv>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <interrupt_calGyro+0x300>)
 8001ec2:	f7fe fbc1 	bl	8000648 <__aeabi_dmul>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	a34a      	add	r3, pc, #296	; (adr r3, 8001ff8 <interrupt_calGyro+0x2c8>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	f7fe fce2 	bl	800089c <__aeabi_ddiv>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	4b53      	ldr	r3, [pc, #332]	; (8002034 <interrupt_calGyro+0x304>)
 8001ee6:	f7fe fbaf 	bl	8000648 <__aeabi_dmul>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	4b50      	ldr	r3, [pc, #320]	; (8002038 <interrupt_calGyro+0x308>)
 8001ef8:	f7fe fcd0 	bl	800089c <__aeabi_ddiv>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	4b4c      	ldr	r3, [pc, #304]	; (800203c <interrupt_calGyro+0x30c>)
 8001f0a:	f7fe fb9d 	bl	8000648 <__aeabi_dmul>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	a33a      	add	r3, pc, #232	; (adr r3, 8002000 <interrupt_calGyro+0x2d0>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	f7fe fb94 	bl	8000648 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f7fe fe66 	bl	8000bf8 <__aeabi_d2f>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4a44      	ldr	r2, [pc, #272]	; (8002040 <interrupt_calGyro+0x310>)
 8001f30:	6013      	str	r3, [r2, #0]
	gf_speed += gf_accel * INTERRUPT_TIME;
 8001f32:	4b44      	ldr	r3, [pc, #272]	; (8002044 <interrupt_calGyro+0x314>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fb2e 	bl	8000598 <__aeabi_f2d>
 8001f3c:	4604      	mov	r4, r0
 8001f3e:	460d      	mov	r5, r1
 8001f40:	4b3f      	ldr	r3, [pc, #252]	; (8002040 <interrupt_calGyro+0x310>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fb27 	bl	8000598 <__aeabi_f2d>
 8001f4a:	a323      	add	r3, pc, #140	; (adr r3, 8001fd8 <interrupt_calGyro+0x2a8>)
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	f7fe fb7a 	bl	8000648 <__aeabi_dmul>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4620      	mov	r0, r4
 8001f5a:	4629      	mov	r1, r5
 8001f5c:	f7fe f9be 	bl	80002dc <__adddf3>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	f7fe fe46 	bl	8000bf8 <__aeabi_d2f>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	4a35      	ldr	r2, [pc, #212]	; (8002044 <interrupt_calGyro+0x314>)
 8001f70:	6013      	str	r3, [r2, #0]
	gf_distance += gf_speed * INTERRUPT_TIME;
 8001f72:	4b35      	ldr	r3, [pc, #212]	; (8002048 <interrupt_calGyro+0x318>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fb0e 	bl	8000598 <__aeabi_f2d>
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	460d      	mov	r5, r1
 8001f80:	4b30      	ldr	r3, [pc, #192]	; (8002044 <interrupt_calGyro+0x314>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fb07 	bl	8000598 <__aeabi_f2d>
 8001f8a:	a313      	add	r3, pc, #76	; (adr r3, 8001fd8 <interrupt_calGyro+0x2a8>)
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	f7fe fb5a 	bl	8000648 <__aeabi_dmul>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4620      	mov	r0, r4
 8001f9a:	4629      	mov	r1, r5
 8001f9c:	f7fe f99e 	bl	80002dc <__adddf3>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f7fe fe26 	bl	8000bf8 <__aeabi_d2f>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4a26      	ldr	r2, [pc, #152]	; (8002048 <interrupt_calGyro+0x318>)
 8001fb0:	6013      	str	r3, [r2, #0]




}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	f3af 8000 	nop.w
 8001fc0:	70a3d70a 	.word	0x70a3d70a
 8001fc4:	3fef0a3d 	.word	0x3fef0a3d
 8001fc8:	00000000 	.word	0x00000000
 8001fcc:	40acd400 	.word	0x40acd400
 8001fd0:	00000000 	.word	0x00000000
 8001fd4:	40ac2000 	.word	0x40ac2000
 8001fd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001fdc:	3f50624d 	.word	0x3f50624d
 8001fe0:	0fcf80dc 	.word	0x0fcf80dc
 8001fe4:	3ff0a423 	.word	0x3ff0a423
 8001fe8:	00000000 	.word	0x00000000
 8001fec:	4078c000 	.word	0x4078c000
 8001ff0:	00000000 	.word	0x00000000
 8001ff4:	4077d000 	.word	0x4077d000
 8001ff8:	00000000 	.word	0x00000000
 8001ffc:	407a7000 	.word	0x407a7000
 8002000:	3a92a305 	.word	0x3a92a305
 8002004:	40239d01 	.word	0x40239d01
 8002008:	20000294 	.word	0x20000294
 800200c:	200006f0 	.word	0x200006f0
 8002010:	2000028c 	.word	0x2000028c
 8002014:	2000026c 	.word	0x2000026c
 8002018:	20000274 	.word	0x20000274
 800201c:	20000288 	.word	0x20000288
 8002020:	20000278 	.word	0x20000278
 8002024:	20000268 	.word	0x20000268
 8002028:	20000270 	.word	0x20000270
 800202c:	20000290 	.word	0x20000290
 8002030:	40790000 	.word	0x40790000
 8002034:	40862000 	.word	0x40862000
 8002038:	40868000 	.word	0x40868000
 800203c:	408f4000 	.word	0x408f4000
 8002040:	20000284 	.word	0x20000284
 8002044:	2000027c 	.word	0x2000027c
 8002048:	20000280 	.word	0x20000280
 800204c:	00000000 	.word	0x00000000

08002050 <battcheak>:
/*******************************************************************/
/*	バッテリーの確認				(battcheak)	*/
/*******************************************************************/
/*	バッテリーの残電圧のチェックし、小さい場合は機能の停止を行う．	．						*/
/*******************************************************************/
void battcheak(void){
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
int i;
	for(i = 0;i <= 20-1;i++){
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	e00f      	b.n	800207c <battcheak+0x2c>
		g_V_battery[i]=pl_getbatt();
 800205c:	f006 fb78 	bl	8008750 <pl_getbatt>
 8002060:	eef0 7a40 	vmov.f32	s15, s0
 8002064:	4a34      	ldr	r2, [pc, #208]	; (8002138 <battcheak+0xe8>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	edc3 7a00 	vstr	s15, [r3]
		wait_ms(10);
 8002070:	200a      	movs	r0, #10
 8002072:	f006 fd85 	bl	8008b80 <wait_ms>
	for(i = 0;i <= 20-1;i++){
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3301      	adds	r3, #1
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b13      	cmp	r3, #19
 8002080:	ddec      	ble.n	800205c <battcheak+0xc>
	}

	g_V_battery_mean=0;
 8002082:	4b2e      	ldr	r3, [pc, #184]	; (800213c <battcheak+0xec>)
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
	for(i = 0;i <= 20-1;i++){
 800208a:	2300      	movs	r3, #0
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	e010      	b.n	80020b2 <battcheak+0x62>
	g_V_battery_mean+=g_V_battery[i];
 8002090:	4a29      	ldr	r2, [pc, #164]	; (8002138 <battcheak+0xe8>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	ed93 7a00 	vldr	s14, [r3]
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <battcheak+0xec>)
 800209e:	edd3 7a00 	vldr	s15, [r3]
 80020a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a6:	4b25      	ldr	r3, [pc, #148]	; (800213c <battcheak+0xec>)
 80020a8:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0;i <= 20-1;i++){
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3301      	adds	r3, #1
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b13      	cmp	r3, #19
 80020b6:	ddeb      	ble.n	8002090 <battcheak+0x40>
	}
	g_V_battery_mean/=20;
 80020b8:	4b20      	ldr	r3, [pc, #128]	; (800213c <battcheak+0xec>)
 80020ba:	ed93 7a00 	vldr	s14, [r3]
 80020be:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80020c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c6:	4b1d      	ldr	r3, [pc, #116]	; (800213c <battcheak+0xec>)
 80020c8:	edc3 7a00 	vstr	s15, [r3]
	printf("BATT=%f\n",g_V_battery_mean);
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <battcheak+0xec>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fa61 	bl	8000598 <__aeabi_f2d>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4819      	ldr	r0, [pc, #100]	; (8002140 <battcheak+0xf0>)
 80020dc:	f01f fa5c 	bl	8021598 <iprintf>
	//printf("%f",g_V_battery_mean);
	if(g_V_battery_mean <= BATTLIMIT){
 80020e0:	4b16      	ldr	r3, [pc, #88]	; (800213c <battcheak+0xec>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe fa57 	bl	8000598 <__aeabi_f2d>
 80020ea:	a311      	add	r3, pc, #68	; (adr r3, 8002130 <battcheak+0xe0>)
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	f7fe fd26 	bl	8000b40 <__aeabi_dcmple>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d100      	bne.n	80020fc <battcheak+0xac>
		pl_r_blue_LED(OFF);
		pl_l_blue_LED(OFF);
		wait_ms(500);
		}
	}
}
 80020fa:	e014      	b.n	8002126 <battcheak+0xd6>
		pl_r_blue_LED(ON);
 80020fc:	2001      	movs	r0, #1
 80020fe:	f005 fdc3 	bl	8007c88 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8002102:	2001      	movs	r0, #1
 8002104:	f005 fdd2 	bl	8007cac <pl_l_blue_LED>
		wait_ms(500);
 8002108:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800210c:	f006 fd38 	bl	8008b80 <wait_ms>
		pl_r_blue_LED(OFF);
 8002110:	2000      	movs	r0, #0
 8002112:	f005 fdb9 	bl	8007c88 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8002116:	2000      	movs	r0, #0
 8002118:	f005 fdc8 	bl	8007cac <pl_l_blue_LED>
		wait_ms(500);
 800211c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002120:	f006 fd2e 	bl	8008b80 <wait_ms>
		pl_r_blue_LED(ON);
 8002124:	e7ea      	b.n	80020fc <battcheak+0xac>
}
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	f3af 8000 	nop.w
 8002130:	9999999a 	.word	0x9999999a
 8002134:	400d9999 	.word	0x400d9999
 8002138:	20000488 	.word	0x20000488
 800213c:	200004d8 	.word	0x200004d8
 8002140:	08024f18 	.word	0x08024f18

08002144 <interupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interupt_calSensor(void){
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
	int j;

	pl_interupt_getSensor();
 800214a:	f006 fc9f 	bl	8008a8c <pl_interupt_getSensor>

	for (j = 19; j >= 1; j--) {
 800214e:	2313      	movs	r3, #19
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	e037      	b.n	80021c4 <interupt_calSensor+0x80>
		//g_V_battery[j] = g_V_battery[j - 1];
		g_sensor[0][j] = g_sensor[0][j - 1];
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	4a56      	ldr	r2, [pc, #344]	; (80022b4 <interupt_calSensor+0x170>)
 800215a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800215e:	4955      	ldr	r1, [pc, #340]	; (80022b4 <interupt_calSensor+0x170>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3b01      	subs	r3, #1
 800216a:	4a52      	ldr	r2, [pc, #328]	; (80022b4 <interupt_calSensor+0x170>)
 800216c:	3314      	adds	r3, #20
 800216e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002172:	4950      	ldr	r1, [pc, #320]	; (80022b4 <interupt_calSensor+0x170>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3314      	adds	r3, #20
 8002178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	4a4c      	ldr	r2, [pc, #304]	; (80022b4 <interupt_calSensor+0x170>)
 8002182:	3328      	adds	r3, #40	; 0x28
 8002184:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002188:	494a      	ldr	r1, [pc, #296]	; (80022b4 <interupt_calSensor+0x170>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3328      	adds	r3, #40	; 0x28
 800218e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3b01      	subs	r3, #1
 8002196:	4a47      	ldr	r2, [pc, #284]	; (80022b4 <interupt_calSensor+0x170>)
 8002198:	333c      	adds	r3, #60	; 0x3c
 800219a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800219e:	4945      	ldr	r1, [pc, #276]	; (80022b4 <interupt_calSensor+0x170>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	333c      	adds	r3, #60	; 0x3c
 80021a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	4a41      	ldr	r2, [pc, #260]	; (80022b4 <interupt_calSensor+0x170>)
 80021ae:	3350      	adds	r3, #80	; 0x50
 80021b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021b4:	493f      	ldr	r1, [pc, #252]	; (80022b4 <interupt_calSensor+0x170>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3350      	adds	r3, #80	; 0x50
 80021ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	dcc4      	bgt.n	8002154 <interupt_calSensor+0x10>
	}
	//g_V_battery[0] = g_V_batt;
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 80021ca:	4b3b      	ldr	r3, [pc, #236]	; (80022b8 <interupt_calSensor+0x174>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <interupt_calSensor+0x178>)
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	4a37      	ldr	r2, [pc, #220]	; (80022b4 <interupt_calSensor+0x170>)
 80021d8:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 80021da:	4b37      	ldr	r3, [pc, #220]	; (80022b8 <interupt_calSensor+0x174>)
 80021dc:	885b      	ldrh	r3, [r3, #2]
 80021de:	461a      	mov	r2, r3
 80021e0:	4b36      	ldr	r3, [pc, #216]	; (80022bc <interupt_calSensor+0x178>)
 80021e2:	885b      	ldrh	r3, [r3, #2]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	4a33      	ldr	r2, [pc, #204]	; (80022b4 <interupt_calSensor+0x170>)
 80021e8:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 80021ea:	4b33      	ldr	r3, [pc, #204]	; (80022b8 <interupt_calSensor+0x174>)
 80021ec:	889b      	ldrh	r3, [r3, #4]
 80021ee:	461a      	mov	r2, r3
 80021f0:	4b32      	ldr	r3, [pc, #200]	; (80022bc <interupt_calSensor+0x178>)
 80021f2:	889b      	ldrh	r3, [r3, #4]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	4a2f      	ldr	r2, [pc, #188]	; (80022b4 <interupt_calSensor+0x170>)
 80021f8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 80021fc:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <interupt_calSensor+0x174>)
 80021fe:	88db      	ldrh	r3, [r3, #6]
 8002200:	461a      	mov	r2, r3
 8002202:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <interupt_calSensor+0x178>)
 8002204:	88db      	ldrh	r3, [r3, #6]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	4a2a      	ldr	r2, [pc, #168]	; (80022b4 <interupt_calSensor+0x170>)
 800220a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 800220e:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <interupt_calSensor+0x174>)
 8002210:	891b      	ldrh	r3, [r3, #8]
 8002212:	461a      	mov	r2, r3
 8002214:	4b29      	ldr	r3, [pc, #164]	; (80022bc <interupt_calSensor+0x178>)
 8002216:	891b      	ldrh	r3, [r3, #8]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	4a26      	ldr	r2, [pc, #152]	; (80022b4 <interupt_calSensor+0x170>)
 800221c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	for (j = 0; j <= 4; j++) {
 8002220:	2300      	movs	r3, #0
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	e03d      	b.n	80022a2 <interupt_calSensor+0x15e>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 8002226:	4923      	ldr	r1, [pc, #140]	; (80022b4 <interupt_calSensor+0x170>)
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	440b      	add	r3, r1
 8002234:	6819      	ldr	r1, [r3, #0]
 8002236:	481f      	ldr	r0, [pc, #124]	; (80022b4 <interupt_calSensor+0x170>)
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	4403      	add	r3, r0
 8002244:	332c      	adds	r3, #44	; 0x2c
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	1aca      	subs	r2, r1, r3
 800224a:	491d      	ldr	r1, [pc, #116]	; (80022c0 <interupt_calSensor+0x17c>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][6];
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 8002252:	4918      	ldr	r1, [pc, #96]	; (80022b4 <interupt_calSensor+0x170>)
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	440b      	add	r3, r1
 8002260:	6819      	ldr	r1, [r3, #0]
 8002262:	4814      	ldr	r0, [pc, #80]	; (80022b4 <interupt_calSensor+0x170>)
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	4403      	add	r3, r0
 8002270:	3304      	adds	r3, #4
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4419      	add	r1, r3
 8002276:	480f      	ldr	r0, [pc, #60]	; (80022b4 <interupt_calSensor+0x170>)
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	4403      	add	r3, r0
 8002284:	3308      	adds	r3, #8
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	440b      	add	r3, r1
 800228a:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <interupt_calSensor+0x180>)
 800228c:	fb82 1203 	smull	r1, r2, r2, r3
 8002290:	17db      	asrs	r3, r3, #31
 8002292:	1ad2      	subs	r2, r2, r3
 8002294:	490c      	ldr	r1, [pc, #48]	; (80022c8 <interupt_calSensor+0x184>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3301      	adds	r3, #1
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	ddbe      	ble.n	8002226 <interupt_calSensor+0xe2>
//	}
//	g_V_battery_mean/=20;



}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200002bc 	.word	0x200002bc
 80022b8:	20000718 	.word	0x20000718
 80022bc:	20000724 	.word	0x20000724
 80022c0:	2000044c 	.word	0x2000044c
 80022c4:	55555556 	.word	0x55555556
 80022c8:	20000474 	.word	0x20000474

080022cc <Control_mode_Init>:

uint8_t noGoalPillarMode;

float g_V_L,g_V_R;

void Control_mode_Init(void){
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

	modeacc = 0;
 80022d0:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <Control_mode_Init+0x28>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
	g_MotorEnd_flag=0;
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <Control_mode_Init+0x2c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
	mollifier_timer=0;
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <Control_mode_Init+0x30>)
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
	noGoalPillarMode=0;
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <Control_mode_Init+0x34>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]

}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	20000534 	.word	0x20000534
 80022f8:	20000811 	.word	0x20000811
 80022fc:	2000080c 	.word	0x2000080c
 8002300:	20000535 	.word	0x20000535

08002304 <get_duty>:


void get_duty(float V_L, float V_R,int *duty_L,int *duty_R) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	ed87 0a03 	vstr	s0, [r7, #12]
 800230e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
//トルクの方向決定
// BATT_MEANをいつか可変にしたい願望
	if (V_L >= 0) {
 8002316:	edd7 7a03 	vldr	s15, [r7, #12]
 800231a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800231e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002322:	db14      	blt.n	800234e <get_duty+0x4a>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8002324:	2001      	movs	r0, #1
 8002326:	f006 f949 	bl	80085bc <pl_L_DriveMotor_mode>
		*duty_L = (int) (V_L / g_V_battery_mean * MAXMOTOR);
 800232a:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <get_duty+0x11c>)
 800232c:	ed93 7a00 	vldr	s14, [r3]
 8002330:	edd7 6a03 	vldr	s13, [r7, #12]
 8002334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002338:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002424 <get_duty+0x120>
 800233c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002340:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002344:	ee17 2a90 	vmov	r2, s15
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e015      	b.n	800237a <get_duty+0x76>
	}
	else{
		pl_L_DriveMotor_mode(MOTOR_BACK);
 800234e:	2002      	movs	r0, #2
 8002350:	f006 f934 	bl	80085bc <pl_L_DriveMotor_mode>
	    *duty_L = (int) (-V_L / g_V_battery_mean * MAXMOTOR);
 8002354:	edd7 7a03 	vldr	s15, [r7, #12]
 8002358:	eef1 6a67 	vneg.f32	s13, s15
 800235c:	4b30      	ldr	r3, [pc, #192]	; (8002420 <get_duty+0x11c>)
 800235e:	ed93 7a00 	vldr	s14, [r3]
 8002362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002366:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002424 <get_duty+0x120>
 800236a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800236e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002372:	ee17 2a90 	vmov	r2, s15
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	601a      	str	r2, [r3, #0]
	}
	if (V_R >= 0) {
 800237a:	edd7 7a02 	vldr	s15, [r7, #8]
 800237e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002386:	db14      	blt.n	80023b2 <get_duty+0xae>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8002388:	2001      	movs	r0, #1
 800238a:	f006 f93f 	bl	800860c <pl_R_DriveMotor_mode>
		*duty_R = (int) (V_R / g_V_battery_mean * MAXMOTOR);
 800238e:	4b24      	ldr	r3, [pc, #144]	; (8002420 <get_duty+0x11c>)
 8002390:	ed93 7a00 	vldr	s14, [r3]
 8002394:	edd7 6a02 	vldr	s13, [r7, #8]
 8002398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002424 <get_duty+0x120>
 80023a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a8:	ee17 2a90 	vmov	r2, s15
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	e015      	b.n	80023de <get_duty+0xda>
	}
	else{
		pl_R_DriveMotor_mode(MOTOR_BACK);
 80023b2:	2002      	movs	r0, #2
 80023b4:	f006 f92a 	bl	800860c <pl_R_DriveMotor_mode>
	    *duty_R = (int) (-V_R / g_V_battery_mean * MAXMOTOR);
 80023b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80023bc:	eef1 6a67 	vneg.f32	s13, s15
 80023c0:	4b17      	ldr	r3, [pc, #92]	; (8002420 <get_duty+0x11c>)
 80023c2:	ed93 7a00 	vldr	s14, [r3]
 80023c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ca:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002424 <get_duty+0x120>
 80023ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d6:	ee17 2a90 	vmov	r2, s15
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	601a      	str	r2, [r3, #0]
	}
	*duty_L=*duty_L;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	601a      	str	r2, [r3, #0]
	*duty_R=*duty_R;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	601a      	str	r2, [r3, #0]
	//XX
	if (*duty_L >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f240 628c 	movw	r2, #1676	; 0x68c
 80023f6:	4293      	cmp	r3, r2
 80023f8:	dd03      	ble.n	8002402 <get_duty+0xfe>
		*duty_L = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f240 628d 	movw	r2, #1677	; 0x68d
 8002400:	601a      	str	r2, [r3, #0]
//		pl_r_blue_LED(ON);
	}
	if (*duty_R >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f240 628c 	movw	r2, #1676	; 0x68c
 800240a:	4293      	cmp	r3, r2
 800240c:	dd03      	ble.n	8002416 <get_duty+0x112>
		*duty_R = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f240 628d 	movw	r2, #1677	; 0x68d
 8002414:	601a      	str	r2, [r3, #0]
//		pl_l_blue_LED(ON);
	}

}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200004d8 	.word	0x200004d8
 8002424:	44d1e000 	.word	0x44d1e000

08002428 <interupt_DriveMotor>:



void interupt_DriveMotor(void){
 8002428:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800242c:	b08e      	sub	sp, #56	; 0x38
 800242e:	af04      	add	r7, sp, #16
	int duty_L=0, duty_R=0;
 8002430:	2300      	movs	r3, #0
 8002432:	61bb      	str	r3, [r7, #24]
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
	float V_L=0, V_R=0;
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	623b      	str	r3, [r7, #32]
	float PID_all_L,PID_all_R,PID_s,PID_t;
	float PID_w=0;
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
	float feedforward_straight=0,feedforward_turning=0;
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	607b      	str	r3, [r7, #4]



	if (modeacc == 0) {
 8002456:	4bd2      	ldr	r3, [pc, #840]	; (80027a0 <interupt_DriveMotor+0x378>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d108      	bne.n	8002470 <interupt_DriveMotor+0x48>
		g_acc_flag=4;
 800245e:	4bd1      	ldr	r3, [pc, #836]	; (80027a4 <interupt_DriveMotor+0x37c>)
 8002460:	2204      	movs	r2, #4
 8002462:	701a      	strb	r2, [r3, #0]
		g_WallControl_mode=0;
 8002464:	4bd0      	ldr	r3, [pc, #832]	; (80027a8 <interupt_DriveMotor+0x380>)
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 800246a:	4bd0      	ldr	r3, [pc, #832]	; (80027ac <interupt_DriveMotor+0x384>)
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]

	}
	if (modeacc == 1) {
 8002470:	4bcb      	ldr	r3, [pc, #812]	; (80027a0 <interupt_DriveMotor+0x378>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	f040 8293 	bne.w	80029a0 <interupt_DriveMotor+0x578>
		g_wallCut_mode=1;
 800247a:	4bcc      	ldr	r3, [pc, #816]	; (80027ac <interupt_DriveMotor+0x384>)
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002480:	4bcb      	ldr	r3, [pc, #812]	; (80027b0 <interupt_DriveMotor+0x388>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	3301      	adds	r3, #1
 8002486:	4aca      	ldr	r2, [pc, #808]	; (80027b0 <interupt_DriveMotor+0x388>)
 8002488:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 800248a:	4bca      	ldr	r3, [pc, #808]	; (80027b4 <interupt_DriveMotor+0x38c>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe f882 	bl	8000598 <__aeabi_f2d>
 8002494:	4604      	mov	r4, r0
 8002496:	460d      	mov	r5, r1
 8002498:	4bc6      	ldr	r3, [pc, #792]	; (80027b4 <interupt_DriveMotor+0x38c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe f87b 	bl	8000598 <__aeabi_f2d>
 80024a2:	a3bb      	add	r3, pc, #748	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 80024a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a8:	f7fe f8ce 	bl	8000648 <__aeabi_dmul>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4690      	mov	r8, r2
 80024b2:	4699      	mov	r9, r3
 80024b4:	4bbf      	ldr	r3, [pc, #764]	; (80027b4 <interupt_DriveMotor+0x38c>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe f86d 	bl	8000598 <__aeabi_f2d>
 80024be:	a3b4      	add	r3, pc, #720	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 80024c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c4:	f7fe f8c0 	bl	8000648 <__aeabi_dmul>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	a3af      	add	r3, pc, #700	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 80024d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d6:	f7fe f8b7 	bl	8000648 <__aeabi_dmul>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024ea:	f7fe f9d7 	bl	800089c <__aeabi_ddiv>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4640      	mov	r0, r8
 80024f4:	4649      	mov	r1, r9
 80024f6:	f7fd fef1 	bl	80002dc <__adddf3>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4620      	mov	r0, r4
 8002500:	4629      	mov	r1, r5
 8002502:	f7fd feeb 	bl	80002dc <__adddf3>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	f7fe fb73 	bl	8000bf8 <__aeabi_d2f>
 8002512:	4603      	mov	r3, r0
 8002514:	4aa7      	ldr	r2, [pc, #668]	; (80027b4 <interupt_DriveMotor+0x38c>)
 8002516:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002518:	4ba6      	ldr	r3, [pc, #664]	; (80027b4 <interupt_DriveMotor+0x38c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe f83b 	bl	8000598 <__aeabi_f2d>
 8002522:	4604      	mov	r4, r0
 8002524:	460d      	mov	r5, r1
 8002526:	4ba3      	ldr	r3, [pc, #652]	; (80027b4 <interupt_DriveMotor+0x38c>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe f834 	bl	8000598 <__aeabi_f2d>
 8002530:	a397      	add	r3, pc, #604	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 8002532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002536:	f7fe f887 	bl	8000648 <__aeabi_dmul>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4620      	mov	r0, r4
 8002540:	4629      	mov	r1, r5
 8002542:	f7fd fecb 	bl	80002dc <__adddf3>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f7fe fb53 	bl	8000bf8 <__aeabi_d2f>
 8002552:	4603      	mov	r3, r0
 8002554:	4a97      	ldr	r2, [pc, #604]	; (80027b4 <interupt_DriveMotor+0x38c>)
 8002556:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002558:	4b97      	ldr	r3, [pc, #604]	; (80027b8 <interupt_DriveMotor+0x390>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe f81b 	bl	8000598 <__aeabi_f2d>
 8002562:	4604      	mov	r4, r0
 8002564:	460d      	mov	r5, r1
 8002566:	4b94      	ldr	r3, [pc, #592]	; (80027b8 <interupt_DriveMotor+0x390>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe f814 	bl	8000598 <__aeabi_f2d>
 8002570:	a387      	add	r3, pc, #540	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 8002572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002576:	f7fe f867 	bl	8000648 <__aeabi_dmul>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4690      	mov	r8, r2
 8002580:	4699      	mov	r9, r3
 8002582:	4b8d      	ldr	r3, [pc, #564]	; (80027b8 <interupt_DriveMotor+0x390>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe f806 	bl	8000598 <__aeabi_f2d>
 800258c:	a380      	add	r3, pc, #512	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 800258e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002592:	f7fe f859 	bl	8000648 <__aeabi_dmul>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	a37c      	add	r3, pc, #496	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	f7fe f850 	bl	8000648 <__aeabi_dmul>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025b8:	f7fe f970 	bl	800089c <__aeabi_ddiv>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4640      	mov	r0, r8
 80025c2:	4649      	mov	r1, r9
 80025c4:	f7fd fe8a 	bl	80002dc <__adddf3>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4620      	mov	r0, r4
 80025ce:	4629      	mov	r1, r5
 80025d0:	f7fd fe84 	bl	80002dc <__adddf3>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f7fe fb0c 	bl	8000bf8 <__aeabi_d2f>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4a75      	ldr	r2, [pc, #468]	; (80027b8 <interupt_DriveMotor+0x390>)
 80025e4:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 80025e6:	4b74      	ldr	r3, [pc, #464]	; (80027b8 <interupt_DriveMotor+0x390>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd ffd4 	bl	8000598 <__aeabi_f2d>
 80025f0:	4604      	mov	r4, r0
 80025f2:	460d      	mov	r5, r1
 80025f4:	4b70      	ldr	r3, [pc, #448]	; (80027b8 <interupt_DriveMotor+0x390>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd ffcd 	bl	8000598 <__aeabi_f2d>
 80025fe:	a364      	add	r3, pc, #400	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fe f820 	bl	8000648 <__aeabi_dmul>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4620      	mov	r0, r4
 800260e:	4629      	mov	r1, r5
 8002610:	f7fd fe64 	bl	80002dc <__adddf3>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	f7fe faec 	bl	8000bf8 <__aeabi_d2f>
 8002620:	4603      	mov	r3, r0
 8002622:	4a65      	ldr	r2, [pc, #404]	; (80027b8 <interupt_DriveMotor+0x390>)
 8002624:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_straight,&straight);
 8002626:	4b65      	ldr	r3, [pc, #404]	; (80027bc <interupt_DriveMotor+0x394>)
 8002628:	4a62      	ldr	r2, [pc, #392]	; (80027b4 <interupt_DriveMotor+0x38c>)
 800262a:	9202      	str	r2, [sp, #8]
 800262c:	466c      	mov	r4, sp
 800262e:	f103 0210 	add.w	r2, r3, #16
 8002632:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002636:	e884 0003 	stmia.w	r4, {r0, r1}
 800263a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800263c:	f006 fc9e 	bl	8008f7c <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <interupt_DriveMotor+0x38c>)
 8002642:	edd3 7a00 	vldr	s15, [r3]
 8002646:	4b5c      	ldr	r3, [pc, #368]	; (80027b8 <interupt_DriveMotor+0x390>)
 8002648:	ed93 7a00 	vldr	s14, [r3]
 800264c:	f107 020c 	add.w	r2, r7, #12
 8002650:	f107 0310 	add.w	r3, r7, #16
 8002654:	eef0 0a47 	vmov.f32	s1, s14
 8002658:	eeb0 0a67 	vmov.f32	s0, s15
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f002 fe3a 	bl	80052d8 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002664:	4b56      	ldr	r3, [pc, #344]	; (80027c0 <interupt_DriveMotor+0x398>)
 8002666:	ed93 7a00 	vldr	s14, [r3]
 800266a:	4b56      	ldr	r3, [pc, #344]	; (80027c4 <interupt_DriveMotor+0x39c>)
 800266c:	edd3 7a00 	vldr	s15, [r3]
 8002670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002674:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002678:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800267c:	4b4d      	ldr	r3, [pc, #308]	; (80027b4 <interupt_DriveMotor+0x38c>)
 800267e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002682:	4b51      	ldr	r3, [pc, #324]	; (80027c8 <interupt_DriveMotor+0x3a0>)
 8002684:	edd3 6a00 	vldr	s13, [r3]
 8002688:	4b4b      	ldr	r3, [pc, #300]	; (80027b8 <interupt_DriveMotor+0x390>)
 800268a:	ed93 6a01 	vldr	s12, [r3, #4]
 800268e:	1d3a      	adds	r2, r7, #4
 8002690:	f107 0308 	add.w	r3, r7, #8
 8002694:	eef0 1a46 	vmov.f32	s3, s12
 8002698:	eeb0 1a66 	vmov.f32	s2, s13
 800269c:	4611      	mov	r1, r2
 800269e:	eef0 0a67 	vmov.f32	s1, s15
 80026a2:	eeb0 0a47 	vmov.f32	s0, s14
 80026a6:	4618      	mov	r0, r3
 80026a8:	f002 fb6a 	bl	8004d80 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 80026ac:	f003 f828 	bl	8005700 <calWallConrol>
 80026b0:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 80026b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80026b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80026bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80026c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80026cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80026d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 80026dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80026e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80026e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80026ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80026f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80026fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002700:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002704:	ed97 7a04 	vldr	s14, [r7, #16]
 8002708:	edd7 7a02 	vldr	s15, [r7, #8]
 800270c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002710:	ee17 0a90 	vmov	r0, s15
 8002714:	f7fd ff40 	bl	8000598 <__aeabi_f2d>
 8002718:	4604      	mov	r4, r0
 800271a:	460d      	mov	r5, r1
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <interupt_DriveMotor+0x3a4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7fd ff39 	bl	8000598 <__aeabi_f2d>
 8002726:	a31c      	add	r3, pc, #112	; (adr r3, 8002798 <interupt_DriveMotor+0x370>)
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	f7fd ff8c 	bl	8000648 <__aeabi_dmul>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4620      	mov	r0, r4
 8002736:	4629      	mov	r1, r5
 8002738:	f7fe fa16 	bl	8000b68 <__aeabi_dcmpgt>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 808c 	beq.w	800285c <interupt_DriveMotor+0x434>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002746:	f7fd ff27 	bl	8000598 <__aeabi_f2d>
 800274a:	4604      	mov	r4, r0
 800274c:	460d      	mov	r5, r1
 800274e:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <interupt_DriveMotor+0x3a4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7fd ff20 	bl	8000598 <__aeabi_f2d>
 8002758:	a30f      	add	r3, pc, #60	; (adr r3, 8002798 <interupt_DriveMotor+0x370>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	f7fd ff73 	bl	8000648 <__aeabi_dmul>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4690      	mov	r8, r2
 8002768:	4699      	mov	r9, r3
 800276a:	ed97 7a04 	vldr	s14, [r7, #16]
 800276e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002776:	ee17 0a90 	vmov	r0, s15
 800277a:	f7fd ff0d 	bl	8000598 <__aeabi_f2d>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4640      	mov	r0, r8
 8002784:	4649      	mov	r1, r9
 8002786:	f7fd fda7 	bl	80002d8 <__aeabi_dsub>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	e01f      	b.n	80027d0 <interupt_DriveMotor+0x3a8>
 8002790:	d2f1a9fc 	.word	0xd2f1a9fc
 8002794:	3f50624d 	.word	0x3f50624d
 8002798:	d916872b 	.word	0xd916872b
 800279c:	3feff7ce 	.word	0x3feff7ce
 80027a0:	20000534 	.word	0x20000534
 80027a4:	20000810 	.word	0x20000810
 80027a8:	2000059c 	.word	0x2000059c
 80027ac:	2000059e 	.word	0x2000059e
 80027b0:	20000530 	.word	0x20000530
 80027b4:	200004dc 	.word	0x200004dc
 80027b8:	200004e8 	.word	0x200004e8
 80027bc:	200004f4 	.word	0x200004f4
 80027c0:	20000238 	.word	0x20000238
 80027c4:	2000023c 	.word	0x2000023c
 80027c8:	2000026c 	.word	0x2000026c
 80027cc:	200004d8 	.word	0x200004d8
 80027d0:	4620      	mov	r0, r4
 80027d2:	4629      	mov	r1, r5
 80027d4:	f7fd fd82 	bl	80002dc <__adddf3>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	f7fe fa0a 	bl	8000bf8 <__aeabi_d2f>
 80027e4:	4603      	mov	r3, r0
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80027e8:	6a38      	ldr	r0, [r7, #32]
 80027ea:	f7fd fed5 	bl	8000598 <__aeabi_f2d>
 80027ee:	4604      	mov	r4, r0
 80027f0:	460d      	mov	r5, r1
 80027f2:	4b19      	ldr	r3, [pc, #100]	; (8002858 <interupt_DriveMotor+0x430>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fece 	bl	8000598 <__aeabi_f2d>
 80027fc:	a314      	add	r3, pc, #80	; (adr r3, 8002850 <interupt_DriveMotor+0x428>)
 80027fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002802:	f7fd ff21 	bl	8000648 <__aeabi_dmul>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4690      	mov	r8, r2
 800280c:	4699      	mov	r9, r3
 800280e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002812:	edd7 7a02 	vldr	s15, [r7, #8]
 8002816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281a:	ee17 0a90 	vmov	r0, s15
 800281e:	f7fd febb 	bl	8000598 <__aeabi_f2d>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4640      	mov	r0, r8
 8002828:	4649      	mov	r1, r9
 800282a:	f7fd fd55 	bl	80002d8 <__aeabi_dsub>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4620      	mov	r0, r4
 8002834:	4629      	mov	r1, r5
 8002836:	f7fd fd51 	bl	80002dc <__adddf3>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f7fe f9d9 	bl	8000bf8 <__aeabi_d2f>
 8002846:	4603      	mov	r3, r0
 8002848:	623b      	str	r3, [r7, #32]
 800284a:	e097      	b.n	800297c <interupt_DriveMotor+0x554>
 800284c:	f3af 8000 	nop.w
 8002850:	d916872b 	.word	0xd916872b
 8002854:	3feff7ce 	.word	0x3feff7ce
 8002858:	200004d8 	.word	0x200004d8
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800285c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002860:	edd7 7a02 	vldr	s15, [r7, #8]
 8002864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002868:	ee17 0a90 	vmov	r0, s15
 800286c:	f7fd fe94 	bl	8000598 <__aeabi_f2d>
 8002870:	4604      	mov	r4, r0
 8002872:	460d      	mov	r5, r1
 8002874:	4bd0      	ldr	r3, [pc, #832]	; (8002bb8 <interupt_DriveMotor+0x790>)
 8002876:	edd3 7a00 	vldr	s15, [r3]
 800287a:	eef1 7a67 	vneg.f32	s15, s15
 800287e:	ee17 3a90 	vmov	r3, s15
 8002882:	4618      	mov	r0, r3
 8002884:	f7fd fe88 	bl	8000598 <__aeabi_f2d>
 8002888:	a3c7      	add	r3, pc, #796	; (adr r3, 8002ba8 <interupt_DriveMotor+0x780>)
 800288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288e:	f7fd fedb 	bl	8000648 <__aeabi_dmul>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4620      	mov	r0, r4
 8002898:	4629      	mov	r1, r5
 800289a:	f7fe f947 	bl	8000b2c <__aeabi_dcmplt>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d06b      	beq.n	800297c <interupt_DriveMotor+0x554>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80028a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028a6:	f7fd fe77 	bl	8000598 <__aeabi_f2d>
 80028aa:	4604      	mov	r4, r0
 80028ac:	460d      	mov	r5, r1
 80028ae:	4bc2      	ldr	r3, [pc, #776]	; (8002bb8 <interupt_DriveMotor+0x790>)
 80028b0:	edd3 7a00 	vldr	s15, [r3]
 80028b4:	eef1 7a67 	vneg.f32	s15, s15
 80028b8:	ee17 3a90 	vmov	r3, s15
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fd fe6b 	bl	8000598 <__aeabi_f2d>
 80028c2:	a3b9      	add	r3, pc, #740	; (adr r3, 8002ba8 <interupt_DriveMotor+0x780>)
 80028c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c8:	f7fd febe 	bl	8000648 <__aeabi_dmul>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4690      	mov	r8, r2
 80028d2:	4699      	mov	r9, r3
 80028d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80028d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80028dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e0:	ee17 0a90 	vmov	r0, s15
 80028e4:	f7fd fe58 	bl	8000598 <__aeabi_f2d>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4640      	mov	r0, r8
 80028ee:	4649      	mov	r1, r9
 80028f0:	f7fd fcf2 	bl	80002d8 <__aeabi_dsub>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4620      	mov	r0, r4
 80028fa:	4629      	mov	r1, r5
 80028fc:	f7fd fcee 	bl	80002dc <__adddf3>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4610      	mov	r0, r2
 8002906:	4619      	mov	r1, r3
 8002908:	f7fe f976 	bl	8000bf8 <__aeabi_d2f>
 800290c:	4603      	mov	r3, r0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002910:	6a38      	ldr	r0, [r7, #32]
 8002912:	f7fd fe41 	bl	8000598 <__aeabi_f2d>
 8002916:	4604      	mov	r4, r0
 8002918:	460d      	mov	r5, r1
 800291a:	4ba7      	ldr	r3, [pc, #668]	; (8002bb8 <interupt_DriveMotor+0x790>)
 800291c:	edd3 7a00 	vldr	s15, [r3]
 8002920:	eef1 7a67 	vneg.f32	s15, s15
 8002924:	ee17 3a90 	vmov	r3, s15
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fe35 	bl	8000598 <__aeabi_f2d>
 800292e:	a39e      	add	r3, pc, #632	; (adr r3, 8002ba8 <interupt_DriveMotor+0x780>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fd fe88 	bl	8000648 <__aeabi_dmul>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4690      	mov	r8, r2
 800293e:	4699      	mov	r9, r3
 8002940:	ed97 7a04 	vldr	s14, [r7, #16]
 8002944:	edd7 7a02 	vldr	s15, [r7, #8]
 8002948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800294c:	ee17 0a90 	vmov	r0, s15
 8002950:	f7fd fe22 	bl	8000598 <__aeabi_f2d>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4640      	mov	r0, r8
 800295a:	4649      	mov	r1, r9
 800295c:	f7fd fcbc 	bl	80002d8 <__aeabi_dsub>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4620      	mov	r0, r4
 8002966:	4629      	mov	r1, r5
 8002968:	f7fd fcb8 	bl	80002dc <__adddf3>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f7fe f940 	bl	8000bf8 <__aeabi_d2f>
 8002978:	4603      	mov	r3, r0
 800297a:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 800297c:	f107 0214 	add.w	r2, r7, #20
 8002980:	f107 0318 	add.w	r3, r7, #24
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	edd7 0a08 	vldr	s1, [r7, #32]
 800298c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002990:	f7ff fcb8 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f005 fe78 	bl	8008690 <pl_DriveMotor_duty>
	}
	if (modeacc == 2 || modeacc == 4) {//旋回とスラローム
 80029a0:	4b86      	ldr	r3, [pc, #536]	; (8002bbc <interupt_DriveMotor+0x794>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d004      	beq.n	80029b2 <interupt_DriveMotor+0x58a>
 80029a8:	4b84      	ldr	r3, [pc, #528]	; (8002bbc <interupt_DriveMotor+0x794>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	f040 828d 	bne.w	8002ecc <interupt_DriveMotor+0xaa4>
		g_WallControl_mode=0;
 80029b2:	4b83      	ldr	r3, [pc, #524]	; (8002bc0 <interupt_DriveMotor+0x798>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 80029b8:	4b82      	ldr	r3, [pc, #520]	; (8002bc4 <interupt_DriveMotor+0x79c>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80029be:	4b82      	ldr	r3, [pc, #520]	; (8002bc8 <interupt_DriveMotor+0x7a0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	3301      	adds	r3, #1
 80029c4:	4a80      	ldr	r2, [pc, #512]	; (8002bc8 <interupt_DriveMotor+0x7a0>)
 80029c6:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80029c8:	4b80      	ldr	r3, [pc, #512]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fde3 	bl	8000598 <__aeabi_f2d>
 80029d2:	4604      	mov	r4, r0
 80029d4:	460d      	mov	r5, r1
 80029d6:	4b7d      	ldr	r3, [pc, #500]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fddc 	bl	8000598 <__aeabi_f2d>
 80029e0:	a373      	add	r3, pc, #460	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 80029e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e6:	f7fd fe2f 	bl	8000648 <__aeabi_dmul>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4690      	mov	r8, r2
 80029f0:	4699      	mov	r9, r3
 80029f2:	4b76      	ldr	r3, [pc, #472]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fd fdce 	bl	8000598 <__aeabi_f2d>
 80029fc:	a36c      	add	r3, pc, #432	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	f7fd fe21 	bl	8000648 <__aeabi_dmul>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	a368      	add	r3, pc, #416	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f7fd fe18 	bl	8000648 <__aeabi_dmul>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a28:	f7fd ff38 	bl	800089c <__aeabi_ddiv>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4640      	mov	r0, r8
 8002a32:	4649      	mov	r1, r9
 8002a34:	f7fd fc52 	bl	80002dc <__adddf3>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	4629      	mov	r1, r5
 8002a40:	f7fd fc4c 	bl	80002dc <__adddf3>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f7fe f8d4 	bl	8000bf8 <__aeabi_d2f>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4a5e      	ldr	r2, [pc, #376]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 8002a54:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002a56:	4b5d      	ldr	r3, [pc, #372]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fd fd9c 	bl	8000598 <__aeabi_f2d>
 8002a60:	4604      	mov	r4, r0
 8002a62:	460d      	mov	r5, r1
 8002a64:	4b59      	ldr	r3, [pc, #356]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fd95 	bl	8000598 <__aeabi_f2d>
 8002a6e:	a350      	add	r3, pc, #320	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f7fd fde8 	bl	8000648 <__aeabi_dmul>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	4629      	mov	r1, r5
 8002a80:	f7fd fc2c 	bl	80002dc <__adddf3>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7fe f8b4 	bl	8000bf8 <__aeabi_d2f>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4a4e      	ldr	r2, [pc, #312]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 8002a94:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002a96:	4b4e      	ldr	r3, [pc, #312]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fd7c 	bl	8000598 <__aeabi_f2d>
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	460d      	mov	r5, r1
 8002aa4:	4b4a      	ldr	r3, [pc, #296]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fd75 	bl	8000598 <__aeabi_f2d>
 8002aae:	a340      	add	r3, pc, #256	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	f7fd fdc8 	bl	8000648 <__aeabi_dmul>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4690      	mov	r8, r2
 8002abe:	4699      	mov	r9, r3
 8002ac0:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fd67 	bl	8000598 <__aeabi_f2d>
 8002aca:	a339      	add	r3, pc, #228	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 8002acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad0:	f7fd fdba 	bl	8000648 <__aeabi_dmul>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	a334      	add	r3, pc, #208	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 8002ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae2:	f7fd fdb1 	bl	8000648 <__aeabi_dmul>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002af6:	f7fd fed1 	bl	800089c <__aeabi_ddiv>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4640      	mov	r0, r8
 8002b00:	4649      	mov	r1, r9
 8002b02:	f7fd fbeb 	bl	80002dc <__adddf3>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	f7fd fbe5 	bl	80002dc <__adddf3>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f7fe f86d 	bl	8000bf8 <__aeabi_d2f>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4a2b      	ldr	r2, [pc, #172]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002b22:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002b24:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fd fd35 	bl	8000598 <__aeabi_f2d>
 8002b2e:	4604      	mov	r4, r0
 8002b30:	460d      	mov	r5, r1
 8002b32:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fd2e 	bl	8000598 <__aeabi_f2d>
 8002b3c:	a31c      	add	r3, pc, #112	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 8002b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b42:	f7fd fd81 	bl	8000648 <__aeabi_dmul>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	f7fd fbc5 	bl	80002dc <__adddf3>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe f84d 	bl	8000bf8 <__aeabi_d2f>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4a1b      	ldr	r2, [pc, #108]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002b62:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_turning,&turning);
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <interupt_DriveMotor+0x7ac>)
 8002b66:	4a1a      	ldr	r2, [pc, #104]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002b68:	9202      	str	r2, [sp, #8]
 8002b6a:	466c      	mov	r4, sp
 8002b6c:	f103 0210 	add.w	r2, r3, #16
 8002b70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b74:	e884 0003 	stmia.w	r4, {r0, r1}
 8002b78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b7a:	f006 f9ff 	bl	8008f7c <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002b7e:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 8002b80:	edd3 7a00 	vldr	s15, [r3]
 8002b84:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002b86:	ed93 7a00 	vldr	s14, [r3]
 8002b8a:	f107 020c 	add.w	r2, r7, #12
 8002b8e:	f107 0310 	add.w	r3, r7, #16
 8002b92:	eef0 0a47 	vmov.f32	s1, s14
 8002b96:	eeb0 0a67 	vmov.f32	s0, s15
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 fb9b 	bl	80052d8 <EncoderGyro_PID>
 8002ba2:	e019      	b.n	8002bd8 <interupt_DriveMotor+0x7b0>
 8002ba4:	f3af 8000 	nop.w
 8002ba8:	d916872b 	.word	0xd916872b
 8002bac:	3feff7ce 	.word	0x3feff7ce
 8002bb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002bb4:	3f50624d 	.word	0x3f50624d
 8002bb8:	200004d8 	.word	0x200004d8
 8002bbc:	20000534 	.word	0x20000534
 8002bc0:	2000059c 	.word	0x2000059c
 8002bc4:	2000059e 	.word	0x2000059e
 8002bc8:	20000530 	.word	0x20000530
 8002bcc:	200004dc 	.word	0x200004dc
 8002bd0:	200004e8 	.word	0x200004e8
 8002bd4:	2000050c 	.word	0x2000050c
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002bd8:	4b65      	ldr	r3, [pc, #404]	; (8002d70 <interupt_DriveMotor+0x948>)
 8002bda:	ed93 7a00 	vldr	s14, [r3]
 8002bde:	4b65      	ldr	r3, [pc, #404]	; (8002d74 <interupt_DriveMotor+0x94c>)
 8002be0:	edd3 7a00 	vldr	s15, [r3]
 8002be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002bec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002bf0:	4b61      	ldr	r3, [pc, #388]	; (8002d78 <interupt_DriveMotor+0x950>)
 8002bf2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bf6:	4b61      	ldr	r3, [pc, #388]	; (8002d7c <interupt_DriveMotor+0x954>)
 8002bf8:	edd3 6a00 	vldr	s13, [r3]
 8002bfc:	4b60      	ldr	r3, [pc, #384]	; (8002d80 <interupt_DriveMotor+0x958>)
 8002bfe:	ed93 6a01 	vldr	s12, [r3, #4]
 8002c02:	1d3a      	adds	r2, r7, #4
 8002c04:	f107 0308 	add.w	r3, r7, #8
 8002c08:	eef0 1a46 	vmov.f32	s3, s12
 8002c0c:	eeb0 1a66 	vmov.f32	s2, s13
 8002c10:	4611      	mov	r1, r2
 8002c12:	eef0 0a67 	vmov.f32	s1, s15
 8002c16:	eeb0 0a47 	vmov.f32	s0, s14
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f002 f8b0 	bl	8004d80 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002c20:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c24:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c34:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c3c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002c40:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c44:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c54:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5c:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002c60:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c64:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6c:	ee17 0a90 	vmov	r0, s15
 8002c70:	f7fd fc92 	bl	8000598 <__aeabi_f2d>
 8002c74:	4604      	mov	r4, r0
 8002c76:	460d      	mov	r5, r1
 8002c78:	4b42      	ldr	r3, [pc, #264]	; (8002d84 <interupt_DriveMotor+0x95c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fd fc8b 	bl	8000598 <__aeabi_f2d>
 8002c82:	a339      	add	r3, pc, #228	; (adr r3, 8002d68 <interupt_DriveMotor+0x940>)
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f7fd fcde 	bl	8000648 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4620      	mov	r0, r4
 8002c92:	4629      	mov	r1, r5
 8002c94:	f7fd ff68 	bl	8000b68 <__aeabi_dcmpgt>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d074      	beq.n	8002d88 <interupt_DriveMotor+0x960>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002c9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ca0:	f7fd fc7a 	bl	8000598 <__aeabi_f2d>
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	460d      	mov	r5, r1
 8002ca8:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <interupt_DriveMotor+0x95c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fc73 	bl	8000598 <__aeabi_f2d>
 8002cb2:	a32d      	add	r3, pc, #180	; (adr r3, 8002d68 <interupt_DriveMotor+0x940>)
 8002cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb8:	f7fd fcc6 	bl	8000648 <__aeabi_dmul>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4690      	mov	r8, r2
 8002cc2:	4699      	mov	r9, r3
 8002cc4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd0:	ee17 0a90 	vmov	r0, s15
 8002cd4:	f7fd fc60 	bl	8000598 <__aeabi_f2d>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4640      	mov	r0, r8
 8002cde:	4649      	mov	r1, r9
 8002ce0:	f7fd fafa 	bl	80002d8 <__aeabi_dsub>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4620      	mov	r0, r4
 8002cea:	4629      	mov	r1, r5
 8002cec:	f7fd faf6 	bl	80002dc <__adddf3>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	f7fd ff7e 	bl	8000bf8 <__aeabi_d2f>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002d00:	6a38      	ldr	r0, [r7, #32]
 8002d02:	f7fd fc49 	bl	8000598 <__aeabi_f2d>
 8002d06:	4604      	mov	r4, r0
 8002d08:	460d      	mov	r5, r1
 8002d0a:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <interupt_DriveMotor+0x95c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd fc42 	bl	8000598 <__aeabi_f2d>
 8002d14:	a314      	add	r3, pc, #80	; (adr r3, 8002d68 <interupt_DriveMotor+0x940>)
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	f7fd fc95 	bl	8000648 <__aeabi_dmul>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4690      	mov	r8, r2
 8002d24:	4699      	mov	r9, r3
 8002d26:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d32:	ee17 0a90 	vmov	r0, s15
 8002d36:	f7fd fc2f 	bl	8000598 <__aeabi_f2d>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4640      	mov	r0, r8
 8002d40:	4649      	mov	r1, r9
 8002d42:	f7fd fac9 	bl	80002d8 <__aeabi_dsub>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	f7fd fac5 	bl	80002dc <__adddf3>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4610      	mov	r0, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f7fd ff4d 	bl	8000bf8 <__aeabi_d2f>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	623b      	str	r3, [r7, #32]
 8002d62:	e0a1      	b.n	8002ea8 <interupt_DriveMotor+0xa80>
 8002d64:	f3af 8000 	nop.w
 8002d68:	d916872b 	.word	0xd916872b
 8002d6c:	3feff7ce 	.word	0x3feff7ce
 8002d70:	20000238 	.word	0x20000238
 8002d74:	2000023c 	.word	0x2000023c
 8002d78:	200004dc 	.word	0x200004dc
 8002d7c:	2000026c 	.word	0x2000026c
 8002d80:	200004e8 	.word	0x200004e8
 8002d84:	200004d8 	.word	0x200004d8
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002d88:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d94:	ee17 0a90 	vmov	r0, s15
 8002d98:	f7fd fbfe 	bl	8000598 <__aeabi_f2d>
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	460d      	mov	r5, r1
 8002da0:	4bd5      	ldr	r3, [pc, #852]	; (80030f8 <interupt_DriveMotor+0xcd0>)
 8002da2:	edd3 7a00 	vldr	s15, [r3]
 8002da6:	eef1 7a67 	vneg.f32	s15, s15
 8002daa:	ee17 3a90 	vmov	r3, s15
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fd fbf2 	bl	8000598 <__aeabi_f2d>
 8002db4:	a3cc      	add	r3, pc, #816	; (adr r3, 80030e8 <interupt_DriveMotor+0xcc0>)
 8002db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dba:	f7fd fc45 	bl	8000648 <__aeabi_dmul>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	f7fd feb1 	bl	8000b2c <__aeabi_dcmplt>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d06b      	beq.n	8002ea8 <interupt_DriveMotor+0xa80>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002dd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dd2:	f7fd fbe1 	bl	8000598 <__aeabi_f2d>
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	460d      	mov	r5, r1
 8002dda:	4bc7      	ldr	r3, [pc, #796]	; (80030f8 <interupt_DriveMotor+0xcd0>)
 8002ddc:	edd3 7a00 	vldr	s15, [r3]
 8002de0:	eef1 7a67 	vneg.f32	s15, s15
 8002de4:	ee17 3a90 	vmov	r3, s15
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd fbd5 	bl	8000598 <__aeabi_f2d>
 8002dee:	a3be      	add	r3, pc, #760	; (adr r3, 80030e8 <interupt_DriveMotor+0xcc0>)
 8002df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df4:	f7fd fc28 	bl	8000648 <__aeabi_dmul>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4690      	mov	r8, r2
 8002dfe:	4699      	mov	r9, r3
 8002e00:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e04:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e0c:	ee17 0a90 	vmov	r0, s15
 8002e10:	f7fd fbc2 	bl	8000598 <__aeabi_f2d>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4640      	mov	r0, r8
 8002e1a:	4649      	mov	r1, r9
 8002e1c:	f7fd fa5c 	bl	80002d8 <__aeabi_dsub>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4620      	mov	r0, r4
 8002e26:	4629      	mov	r1, r5
 8002e28:	f7fd fa58 	bl	80002dc <__adddf3>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4610      	mov	r0, r2
 8002e32:	4619      	mov	r1, r3
 8002e34:	f7fd fee0 	bl	8000bf8 <__aeabi_d2f>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002e3c:	6a38      	ldr	r0, [r7, #32]
 8002e3e:	f7fd fbab 	bl	8000598 <__aeabi_f2d>
 8002e42:	4604      	mov	r4, r0
 8002e44:	460d      	mov	r5, r1
 8002e46:	4bac      	ldr	r3, [pc, #688]	; (80030f8 <interupt_DriveMotor+0xcd0>)
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	eef1 7a67 	vneg.f32	s15, s15
 8002e50:	ee17 3a90 	vmov	r3, s15
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd fb9f 	bl	8000598 <__aeabi_f2d>
 8002e5a:	a3a3      	add	r3, pc, #652	; (adr r3, 80030e8 <interupt_DriveMotor+0xcc0>)
 8002e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e60:	f7fd fbf2 	bl	8000648 <__aeabi_dmul>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4690      	mov	r8, r2
 8002e6a:	4699      	mov	r9, r3
 8002e6c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e70:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e78:	ee17 0a90 	vmov	r0, s15
 8002e7c:	f7fd fb8c 	bl	8000598 <__aeabi_f2d>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4640      	mov	r0, r8
 8002e86:	4649      	mov	r1, r9
 8002e88:	f7fd fa26 	bl	80002d8 <__aeabi_dsub>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4620      	mov	r0, r4
 8002e92:	4629      	mov	r1, r5
 8002e94:	f7fd fa22 	bl	80002dc <__adddf3>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f7fd feaa 	bl	8000bf8 <__aeabi_d2f>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002ea8:	f107 0214 	add.w	r2, r7, #20
 8002eac:	f107 0318 	add.w	r3, r7, #24
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	edd7 0a08 	vldr	s1, [r7, #32]
 8002eb8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002ebc:	f7ff fa22 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f005 fbe2 	bl	8008690 <pl_DriveMotor_duty>
	}
	if (modeacc == 3) {//宴会芸
 8002ecc:	4b8b      	ldr	r3, [pc, #556]	; (80030fc <interupt_DriveMotor+0xcd4>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	f040 8135 	bne.w	8003140 <interupt_DriveMotor+0xd18>
		g_WallControl_mode=0;
 8002ed6:	4b8a      	ldr	r3, [pc, #552]	; (8003100 <interupt_DriveMotor+0xcd8>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002edc:	4b89      	ldr	r3, [pc, #548]	; (8003104 <interupt_DriveMotor+0xcdc>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002ee2:	4b89      	ldr	r3, [pc, #548]	; (8003108 <interupt_DriveMotor+0xce0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	4a87      	ldr	r2, [pc, #540]	; (8003108 <interupt_DriveMotor+0xce0>)
 8002eea:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002eec:	4b87      	ldr	r3, [pc, #540]	; (800310c <interupt_DriveMotor+0xce4>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fd fb51 	bl	8000598 <__aeabi_f2d>
 8002ef6:	4604      	mov	r4, r0
 8002ef8:	460d      	mov	r5, r1
 8002efa:	4b84      	ldr	r3, [pc, #528]	; (800310c <interupt_DriveMotor+0xce4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd fb4a 	bl	8000598 <__aeabi_f2d>
 8002f04:	a37a      	add	r3, pc, #488	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0a:	f7fd fb9d 	bl	8000648 <__aeabi_dmul>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4690      	mov	r8, r2
 8002f14:	4699      	mov	r9, r3
 8002f16:	4b7d      	ldr	r3, [pc, #500]	; (800310c <interupt_DriveMotor+0xce4>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fb3c 	bl	8000598 <__aeabi_f2d>
 8002f20:	a373      	add	r3, pc, #460	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8002f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f26:	f7fd fb8f 	bl	8000648 <__aeabi_dmul>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4610      	mov	r0, r2
 8002f30:	4619      	mov	r1, r3
 8002f32:	a36f      	add	r3, pc, #444	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	f7fd fb86 	bl	8000648 <__aeabi_dmul>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4610      	mov	r0, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f4c:	f7fd fca6 	bl	800089c <__aeabi_ddiv>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4640      	mov	r0, r8
 8002f56:	4649      	mov	r1, r9
 8002f58:	f7fd f9c0 	bl	80002dc <__adddf3>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4620      	mov	r0, r4
 8002f62:	4629      	mov	r1, r5
 8002f64:	f7fd f9ba 	bl	80002dc <__adddf3>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f7fd fe42 	bl	8000bf8 <__aeabi_d2f>
 8002f74:	4603      	mov	r3, r0
 8002f76:	4a65      	ldr	r2, [pc, #404]	; (800310c <interupt_DriveMotor+0xce4>)
 8002f78:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002f7a:	4b64      	ldr	r3, [pc, #400]	; (800310c <interupt_DriveMotor+0xce4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd fb0a 	bl	8000598 <__aeabi_f2d>
 8002f84:	4604      	mov	r4, r0
 8002f86:	460d      	mov	r5, r1
 8002f88:	4b60      	ldr	r3, [pc, #384]	; (800310c <interupt_DriveMotor+0xce4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fd fb03 	bl	8000598 <__aeabi_f2d>
 8002f92:	a357      	add	r3, pc, #348	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f7fd fb56 	bl	8000648 <__aeabi_dmul>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	f7fd f99a 	bl	80002dc <__adddf3>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4610      	mov	r0, r2
 8002fae:	4619      	mov	r1, r3
 8002fb0:	f7fd fe22 	bl	8000bf8 <__aeabi_d2f>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4a55      	ldr	r2, [pc, #340]	; (800310c <interupt_DriveMotor+0xce4>)
 8002fb8:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002fba:	4b55      	ldr	r3, [pc, #340]	; (8003110 <interupt_DriveMotor+0xce8>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fd faea 	bl	8000598 <__aeabi_f2d>
 8002fc4:	4604      	mov	r4, r0
 8002fc6:	460d      	mov	r5, r1
 8002fc8:	4b51      	ldr	r3, [pc, #324]	; (8003110 <interupt_DriveMotor+0xce8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fd fae3 	bl	8000598 <__aeabi_f2d>
 8002fd2:	a347      	add	r3, pc, #284	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8002fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd8:	f7fd fb36 	bl	8000648 <__aeabi_dmul>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4690      	mov	r8, r2
 8002fe2:	4699      	mov	r9, r3
 8002fe4:	4b4a      	ldr	r3, [pc, #296]	; (8003110 <interupt_DriveMotor+0xce8>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fad5 	bl	8000598 <__aeabi_f2d>
 8002fee:	a340      	add	r3, pc, #256	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8002ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff4:	f7fd fb28 	bl	8000648 <__aeabi_dmul>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	a33b      	add	r3, pc, #236	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8003002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003006:	f7fd fb1f 	bl	8000648 <__aeabi_dmul>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4610      	mov	r0, r2
 8003010:	4619      	mov	r1, r3
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800301a:	f7fd fc3f 	bl	800089c <__aeabi_ddiv>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4640      	mov	r0, r8
 8003024:	4649      	mov	r1, r9
 8003026:	f7fd f959 	bl	80002dc <__adddf3>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4620      	mov	r0, r4
 8003030:	4629      	mov	r1, r5
 8003032:	f7fd f953 	bl	80002dc <__adddf3>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4610      	mov	r0, r2
 800303c:	4619      	mov	r1, r3
 800303e:	f7fd fddb 	bl	8000bf8 <__aeabi_d2f>
 8003042:	4603      	mov	r3, r0
 8003044:	4a32      	ldr	r2, [pc, #200]	; (8003110 <interupt_DriveMotor+0xce8>)
 8003046:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8003048:	4b31      	ldr	r3, [pc, #196]	; (8003110 <interupt_DriveMotor+0xce8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd faa3 	bl	8000598 <__aeabi_f2d>
 8003052:	4604      	mov	r4, r0
 8003054:	460d      	mov	r5, r1
 8003056:	4b2e      	ldr	r3, [pc, #184]	; (8003110 <interupt_DriveMotor+0xce8>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fa9c 	bl	8000598 <__aeabi_f2d>
 8003060:	a323      	add	r3, pc, #140	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8003062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003066:	f7fd faef 	bl	8000648 <__aeabi_dmul>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4620      	mov	r0, r4
 8003070:	4629      	mov	r1, r5
 8003072:	f7fd f933 	bl	80002dc <__adddf3>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	f7fd fdbb 	bl	8000bf8 <__aeabi_d2f>
 8003082:	4603      	mov	r3, r0
 8003084:	4a22      	ldr	r2, [pc, #136]	; (8003110 <interupt_DriveMotor+0xce8>)
 8003086:	6013      	str	r3, [r2, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8003088:	4b20      	ldr	r3, [pc, #128]	; (800310c <interupt_DriveMotor+0xce4>)
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	4b20      	ldr	r3, [pc, #128]	; (8003110 <interupt_DriveMotor+0xce8>)
 8003090:	ed93 7a00 	vldr	s14, [r3]
 8003094:	f107 020c 	add.w	r2, r7, #12
 8003098:	f107 0310 	add.w	r3, r7, #16
 800309c:	eef0 0a47 	vmov.f32	s1, s14
 80030a0:	eeb0 0a67 	vmov.f32	s0, s15
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f002 f916 	bl	80052d8 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 80030ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80030b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80030b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80030bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80030c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 80030cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80030d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80030d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80030dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80030e4:	e016      	b.n	8003114 <interupt_DriveMotor+0xcec>
 80030e6:	bf00      	nop
 80030e8:	d916872b 	.word	0xd916872b
 80030ec:	3feff7ce 	.word	0x3feff7ce
 80030f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80030f4:	3f50624d 	.word	0x3f50624d
 80030f8:	200004d8 	.word	0x200004d8
 80030fc:	20000534 	.word	0x20000534
 8003100:	2000059c 	.word	0x2000059c
 8003104:	2000059e 	.word	0x2000059e
 8003108:	20000530 	.word	0x20000530
 800310c:	200004dc 	.word	0x200004dc
 8003110:	200004e8 	.word	0x200004e8
 8003114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003118:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 800311c:	f107 0214 	add.w	r2, r7, #20
 8003120:	f107 0318 	add.w	r3, r7, #24
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	edd7 0a08 	vldr	s1, [r7, #32]
 800312c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003130:	f7ff f8e8 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f005 faa8 	bl	8008690 <pl_DriveMotor_duty>
	}if (modeacc == 5) {//前壁制御
 8003140:	4bd3      	ldr	r3, [pc, #844]	; (8003490 <interupt_DriveMotor+0x1068>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b05      	cmp	r3, #5
 8003146:	d137      	bne.n	80031b8 <interupt_DriveMotor+0xd90>
		g_WallControl_mode=0;
 8003148:	4bd2      	ldr	r3, [pc, #840]	; (8003494 <interupt_DriveMotor+0x106c>)
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 800314e:	4bd2      	ldr	r3, [pc, #840]	; (8003498 <interupt_DriveMotor+0x1070>)
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]
		//calFrontWallConrol(&PID_frontwall_l,&PID_frontwall_r);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8003154:	ed97 7a04 	vldr	s14, [r7, #16]
 8003158:	edd7 7a03 	vldr	s15, [r7, #12]
 800315c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003160:	edd7 7a02 	vldr	s15, [r7, #8]
 8003164:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003168:	edd7 7a01 	vldr	s15, [r7, #4]
 800316c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003170:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8003174:	ed97 7a04 	vldr	s14, [r7, #16]
 8003178:	edd7 7a03 	vldr	s15, [r7, #12]
 800317c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003180:	edd7 7a02 	vldr	s15, [r7, #8]
 8003184:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003188:	edd7 7a01 	vldr	s15, [r7, #4]
 800318c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003190:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8003194:	f107 0214 	add.w	r2, r7, #20
 8003198:	f107 0318 	add.w	r3, r7, #24
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	edd7 0a08 	vldr	s1, [r7, #32]
 80031a4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80031a8:	f7ff f8ac 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4611      	mov	r1, r2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f005 fa6c 	bl	8008690 <pl_DriveMotor_duty>
	}if (modeacc == 6) {//ネイピア加速
 80031b8:	4bb5      	ldr	r3, [pc, #724]	; (8003490 <interupt_DriveMotor+0x1068>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b06      	cmp	r3, #6
 80031be:	f040 8105 	bne.w	80033cc <interupt_DriveMotor+0xfa4>
		g_WallControl_mode=0;
 80031c2:	4bb4      	ldr	r3, [pc, #720]	; (8003494 <interupt_DriveMotor+0x106c>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 80031c8:	4bb3      	ldr	r3, [pc, #716]	; (8003498 <interupt_DriveMotor+0x1070>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80031ce:	4bb3      	ldr	r3, [pc, #716]	; (800349c <interupt_DriveMotor+0x1074>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd f9e0 	bl	8000598 <__aeabi_f2d>
 80031d8:	4604      	mov	r4, r0
 80031da:	460d      	mov	r5, r1
 80031dc:	4baf      	ldr	r3, [pc, #700]	; (800349c <interupt_DriveMotor+0x1074>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd f9d9 	bl	8000598 <__aeabi_f2d>
 80031e6:	a3a8      	add	r3, pc, #672	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	f7fd fa2c 	bl	8000648 <__aeabi_dmul>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4690      	mov	r8, r2
 80031f6:	4699      	mov	r9, r3
 80031f8:	4ba8      	ldr	r3, [pc, #672]	; (800349c <interupt_DriveMotor+0x1074>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fd f9cb 	bl	8000598 <__aeabi_f2d>
 8003202:	a3a1      	add	r3, pc, #644	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 8003204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003208:	f7fd fa1e 	bl	8000648 <__aeabi_dmul>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	a39c      	add	r3, pc, #624	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f7fd fa15 	bl	8000648 <__aeabi_dmul>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4610      	mov	r0, r2
 8003224:	4619      	mov	r1, r3
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800322e:	f7fd fb35 	bl	800089c <__aeabi_ddiv>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4640      	mov	r0, r8
 8003238:	4649      	mov	r1, r9
 800323a:	f7fd f84f 	bl	80002dc <__adddf3>
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	4620      	mov	r0, r4
 8003244:	4629      	mov	r1, r5
 8003246:	f7fd f849 	bl	80002dc <__adddf3>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	4610      	mov	r0, r2
 8003250:	4619      	mov	r1, r3
 8003252:	f7fd fcd1 	bl	8000bf8 <__aeabi_d2f>
 8003256:	4603      	mov	r3, r0
 8003258:	4a90      	ldr	r2, [pc, #576]	; (800349c <interupt_DriveMotor+0x1074>)
 800325a:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 800325c:	4b8f      	ldr	r3, [pc, #572]	; (800349c <interupt_DriveMotor+0x1074>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7fd f999 	bl	8000598 <__aeabi_f2d>
 8003266:	4604      	mov	r4, r0
 8003268:	460d      	mov	r5, r1
 800326a:	4b8c      	ldr	r3, [pc, #560]	; (800349c <interupt_DriveMotor+0x1074>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd f992 	bl	8000598 <__aeabi_f2d>
 8003274:	a384      	add	r3, pc, #528	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 8003276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327a:	f7fd f9e5 	bl	8000648 <__aeabi_dmul>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4620      	mov	r0, r4
 8003284:	4629      	mov	r1, r5
 8003286:	f7fd f829 	bl	80002dc <__adddf3>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	f7fd fcb1 	bl	8000bf8 <__aeabi_d2f>
 8003296:	4603      	mov	r3, r0
 8003298:	4a80      	ldr	r2, [pc, #512]	; (800349c <interupt_DriveMotor+0x1074>)
 800329a:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME;// + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 800329c:	4b80      	ldr	r3, [pc, #512]	; (80034a0 <interupt_DriveMotor+0x1078>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd f979 	bl	8000598 <__aeabi_f2d>
 80032a6:	4604      	mov	r4, r0
 80032a8:	460d      	mov	r5, r1
 80032aa:	4b7d      	ldr	r3, [pc, #500]	; (80034a0 <interupt_DriveMotor+0x1078>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd f972 	bl	8000598 <__aeabi_f2d>
 80032b4:	a374      	add	r3, pc, #464	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 80032b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ba:	f7fd f9c5 	bl	8000648 <__aeabi_dmul>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4620      	mov	r0, r4
 80032c4:	4629      	mov	r1, r5
 80032c6:	f7fd f809 	bl	80002dc <__adddf3>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4610      	mov	r0, r2
 80032d0:	4619      	mov	r1, r3
 80032d2:	f7fd fc91 	bl	8000bf8 <__aeabi_d2f>
 80032d6:	4603      	mov	r3, r0
 80032d8:	4a71      	ldr	r2, [pc, #452]	; (80034a0 <interupt_DriveMotor+0x1078>)
 80032da:	6093      	str	r3, [r2, #8]
		cal_mollifier_table(Mollifier_turning,&turning);//角速度と角加速度はここで決定
 80032dc:	4b71      	ldr	r3, [pc, #452]	; (80034a4 <interupt_DriveMotor+0x107c>)
 80032de:	edd3 6a00 	vldr	s13, [r3]
 80032e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80032e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80032ea:	486d      	ldr	r0, [pc, #436]	; (80034a0 <interupt_DriveMotor+0x1078>)
 80032ec:	eeb0 0a66 	vmov.f32	s0, s13
 80032f0:	eef0 0a47 	vmov.f32	s1, s14
 80032f4:	eeb0 1a67 	vmov.f32	s2, s15
 80032f8:	f006 fcaa 	bl	8009c50 <cal_mollifier_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 80032fc:	4b67      	ldr	r3, [pc, #412]	; (800349c <interupt_DriveMotor+0x1074>)
 80032fe:	edd3 7a00 	vldr	s15, [r3]
 8003302:	4b67      	ldr	r3, [pc, #412]	; (80034a0 <interupt_DriveMotor+0x1078>)
 8003304:	ed93 7a00 	vldr	s14, [r3]
 8003308:	f107 020c 	add.w	r2, r7, #12
 800330c:	f107 0310 	add.w	r3, r7, #16
 8003310:	eef0 0a47 	vmov.f32	s1, s14
 8003314:	eeb0 0a67 	vmov.f32	s0, s15
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f001 ffdc 	bl	80052d8 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8003320:	4b61      	ldr	r3, [pc, #388]	; (80034a8 <interupt_DriveMotor+0x1080>)
 8003322:	ed93 7a00 	vldr	s14, [r3]
 8003326:	4b61      	ldr	r3, [pc, #388]	; (80034ac <interupt_DriveMotor+0x1084>)
 8003328:	edd3 7a00 	vldr	s15, [r3]
 800332c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003330:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003334:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003338:	4b58      	ldr	r3, [pc, #352]	; (800349c <interupt_DriveMotor+0x1074>)
 800333a:	edd3 7a01 	vldr	s15, [r3, #4]
 800333e:	4b5c      	ldr	r3, [pc, #368]	; (80034b0 <interupt_DriveMotor+0x1088>)
 8003340:	edd3 6a00 	vldr	s13, [r3]
 8003344:	4b56      	ldr	r3, [pc, #344]	; (80034a0 <interupt_DriveMotor+0x1078>)
 8003346:	ed93 6a01 	vldr	s12, [r3, #4]
 800334a:	1d3a      	adds	r2, r7, #4
 800334c:	f107 0308 	add.w	r3, r7, #8
 8003350:	eef0 1a46 	vmov.f32	s3, s12
 8003354:	eeb0 1a66 	vmov.f32	s2, s13
 8003358:	4611      	mov	r1, r2
 800335a:	eef0 0a67 	vmov.f32	s1, s15
 800335e:	eeb0 0a47 	vmov.f32	s0, s14
 8003362:	4618      	mov	r0, r3
 8003364:	f001 fd0c 	bl	8004d80 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8003368:	ed97 7a04 	vldr	s14, [r7, #16]
 800336c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003370:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003374:	edd7 7a02 	vldr	s15, [r7, #8]
 8003378:	ee37 7a27 	vadd.f32	s14, s14, s15
 800337c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003384:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8003388:	ed97 7a04 	vldr	s14, [r7, #16]
 800338c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003390:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003394:	edd7 7a02 	vldr	s15, [r7, #8]
 8003398:	ee37 7a27 	vadd.f32	s14, s14, s15
 800339c:	edd7 7a01 	vldr	s15, [r7, #4]
 80033a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a4:	edc7 7a08 	vstr	s15, [r7, #32]
//			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
//			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80033a8:	f107 0214 	add.w	r2, r7, #20
 80033ac:	f107 0318 	add.w	r3, r7, #24
 80033b0:	4611      	mov	r1, r2
 80033b2:	4618      	mov	r0, r3
 80033b4:	edd7 0a08 	vldr	s1, [r7, #32]
 80033b8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80033bc:	f7fe ffa2 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f005 f962 	bl	8008690 <pl_DriveMotor_duty>

	}if (modeacc == 7) {
 80033cc:	4b30      	ldr	r3, [pc, #192]	; (8003490 <interupt_DriveMotor+0x1068>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b07      	cmp	r3, #7
 80033d2:	f040 82b1 	bne.w	8003938 <interupt_DriveMotor+0x1510>
		g_wallCut_mode=1;
 80033d6:	4b30      	ldr	r3, [pc, #192]	; (8003498 <interupt_DriveMotor+0x1070>)
 80033d8:	2201      	movs	r2, #1
 80033da:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80033dc:	4b35      	ldr	r3, [pc, #212]	; (80034b4 <interupt_DriveMotor+0x108c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3301      	adds	r3, #1
 80033e2:	4a34      	ldr	r2, [pc, #208]	; (80034b4 <interupt_DriveMotor+0x108c>)
 80033e4:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80033e6:	4b2d      	ldr	r3, [pc, #180]	; (800349c <interupt_DriveMotor+0x1074>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd f8d4 	bl	8000598 <__aeabi_f2d>
 80033f0:	4604      	mov	r4, r0
 80033f2:	460d      	mov	r5, r1
 80033f4:	4b29      	ldr	r3, [pc, #164]	; (800349c <interupt_DriveMotor+0x1074>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fd f8cd 	bl	8000598 <__aeabi_f2d>
 80033fe:	a322      	add	r3, pc, #136	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 8003400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003404:	f7fd f920 	bl	8000648 <__aeabi_dmul>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4690      	mov	r8, r2
 800340e:	4699      	mov	r9, r3
 8003410:	4b22      	ldr	r3, [pc, #136]	; (800349c <interupt_DriveMotor+0x1074>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4618      	mov	r0, r3
 8003416:	f7fd f8bf 	bl	8000598 <__aeabi_f2d>
 800341a:	a31b      	add	r3, pc, #108	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 800341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003420:	f7fd f912 	bl	8000648 <__aeabi_dmul>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4610      	mov	r0, r2
 800342a:	4619      	mov	r1, r3
 800342c:	a316      	add	r3, pc, #88	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	f7fd f909 	bl	8000648 <__aeabi_dmul>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4610      	mov	r0, r2
 800343c:	4619      	mov	r1, r3
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003446:	f7fd fa29 	bl	800089c <__aeabi_ddiv>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4640      	mov	r0, r8
 8003450:	4649      	mov	r1, r9
 8003452:	f7fc ff43 	bl	80002dc <__adddf3>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4620      	mov	r0, r4
 800345c:	4629      	mov	r1, r5
 800345e:	f7fc ff3d 	bl	80002dc <__adddf3>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	f7fd fbc5 	bl	8000bf8 <__aeabi_d2f>
 800346e:	4603      	mov	r3, r0
 8003470:	4a0a      	ldr	r2, [pc, #40]	; (800349c <interupt_DriveMotor+0x1074>)
 8003472:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <interupt_DriveMotor+0x1074>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7fd f88d 	bl	8000598 <__aeabi_f2d>
 800347e:	4604      	mov	r4, r0
 8003480:	460d      	mov	r5, r1
 8003482:	e019      	b.n	80034b8 <interupt_DriveMotor+0x1090>
 8003484:	f3af 8000 	nop.w
 8003488:	d2f1a9fc 	.word	0xd2f1a9fc
 800348c:	3f50624d 	.word	0x3f50624d
 8003490:	20000534 	.word	0x20000534
 8003494:	2000059c 	.word	0x2000059c
 8003498:	2000059e 	.word	0x2000059e
 800349c:	200004dc 	.word	0x200004dc
 80034a0:	200004e8 	.word	0x200004e8
 80034a4:	20000524 	.word	0x20000524
 80034a8:	20000238 	.word	0x20000238
 80034ac:	2000023c 	.word	0x2000023c
 80034b0:	2000026c 	.word	0x2000026c
 80034b4:	20000530 	.word	0x20000530
 80034b8:	4bc5      	ldr	r3, [pc, #788]	; (80037d0 <interupt_DriveMotor+0x13a8>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fd f86b 	bl	8000598 <__aeabi_f2d>
 80034c2:	a3bf      	add	r3, pc, #764	; (adr r3, 80037c0 <interupt_DriveMotor+0x1398>)
 80034c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c8:	f7fd f8be 	bl	8000648 <__aeabi_dmul>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4620      	mov	r0, r4
 80034d2:	4629      	mov	r1, r5
 80034d4:	f7fc ff02 	bl	80002dc <__adddf3>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	f7fd fb8a 	bl	8000bf8 <__aeabi_d2f>
 80034e4:	4603      	mov	r3, r0
 80034e6:	4aba      	ldr	r2, [pc, #744]	; (80037d0 <interupt_DriveMotor+0x13a8>)
 80034e8:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80034ea:	4bba      	ldr	r3, [pc, #744]	; (80037d4 <interupt_DriveMotor+0x13ac>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd f852 	bl	8000598 <__aeabi_f2d>
 80034f4:	4604      	mov	r4, r0
 80034f6:	460d      	mov	r5, r1
 80034f8:	4bb6      	ldr	r3, [pc, #728]	; (80037d4 <interupt_DriveMotor+0x13ac>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd f84b 	bl	8000598 <__aeabi_f2d>
 8003502:	a3af      	add	r3, pc, #700	; (adr r3, 80037c0 <interupt_DriveMotor+0x1398>)
 8003504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003508:	f7fd f89e 	bl	8000648 <__aeabi_dmul>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4690      	mov	r8, r2
 8003512:	4699      	mov	r9, r3
 8003514:	4baf      	ldr	r3, [pc, #700]	; (80037d4 <interupt_DriveMotor+0x13ac>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4618      	mov	r0, r3
 800351a:	f7fd f83d 	bl	8000598 <__aeabi_f2d>
 800351e:	a3a8      	add	r3, pc, #672	; (adr r3, 80037c0 <interupt_DriveMotor+0x1398>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f7fd f890 	bl	8000648 <__aeabi_dmul>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	a3a3      	add	r3, pc, #652	; (adr r3, 80037c0 <interupt_DriveMotor+0x1398>)
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	f7fd f887 	bl	8000648 <__aeabi_dmul>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800354a:	f7fd f9a7 	bl	800089c <__aeabi_ddiv>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4640      	mov	r0, r8
 8003554:	4649      	mov	r1, r9
 8003556:	f7fc fec1 	bl	80002dc <__adddf3>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4620      	mov	r0, r4
 8003560:	4629      	mov	r1, r5
 8003562:	f7fc febb 	bl	80002dc <__adddf3>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4610      	mov	r0, r2
 800356c:	4619      	mov	r1, r3
 800356e:	f7fd fb43 	bl	8000bf8 <__aeabi_d2f>
 8003572:	4603      	mov	r3, r0
 8003574:	4a97      	ldr	r2, [pc, #604]	; (80037d4 <interupt_DriveMotor+0x13ac>)
 8003576:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8003578:	4b96      	ldr	r3, [pc, #600]	; (80037d4 <interupt_DriveMotor+0x13ac>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7fd f80b 	bl	8000598 <__aeabi_f2d>
 8003582:	4604      	mov	r4, r0
 8003584:	460d      	mov	r5, r1
 8003586:	4b93      	ldr	r3, [pc, #588]	; (80037d4 <interupt_DriveMotor+0x13ac>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4618      	mov	r0, r3
 800358c:	f7fd f804 	bl	8000598 <__aeabi_f2d>
 8003590:	a38b      	add	r3, pc, #556	; (adr r3, 80037c0 <interupt_DriveMotor+0x1398>)
 8003592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003596:	f7fd f857 	bl	8000648 <__aeabi_dmul>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4620      	mov	r0, r4
 80035a0:	4629      	mov	r1, r5
 80035a2:	f7fc fe9b 	bl	80002dc <__adddf3>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	f7fd fb23 	bl	8000bf8 <__aeabi_d2f>
 80035b2:	4603      	mov	r3, r0
 80035b4:	4a87      	ldr	r2, [pc, #540]	; (80037d4 <interupt_DriveMotor+0x13ac>)
 80035b6:	6013      	str	r3, [r2, #0]
		cal_table_dis(Trapezoid_straight,&straight);
 80035b8:	4b87      	ldr	r3, [pc, #540]	; (80037d8 <interupt_DriveMotor+0x13b0>)
 80035ba:	4a85      	ldr	r2, [pc, #532]	; (80037d0 <interupt_DriveMotor+0x13a8>)
 80035bc:	9202      	str	r2, [sp, #8]
 80035be:	466c      	mov	r4, sp
 80035c0:	f103 0210 	add.w	r2, r3, #16
 80035c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035c8:	e884 0003 	stmia.w	r4, {r0, r1}
 80035cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035ce:	f006 f82d 	bl	800962c <cal_table_dis>
		if(straight.velocity>3200){straight_alpha=0.0;}else{straight_alpha=0.0;}
 80035d2:	4b7f      	ldr	r3, [pc, #508]	; (80037d0 <interupt_DriveMotor+0x13a8>)
 80035d4:	edd3 7a00 	vldr	s15, [r3]
 80035d8:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80037dc <interupt_DriveMotor+0x13b4>
 80035dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e4:	dd04      	ble.n	80035f0 <interupt_DriveMotor+0x11c8>
 80035e6:	4b7e      	ldr	r3, [pc, #504]	; (80037e0 <interupt_DriveMotor+0x13b8>)
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e003      	b.n	80035f8 <interupt_DriveMotor+0x11d0>
 80035f0:	4b7b      	ldr	r3, [pc, #492]	; (80037e0 <interupt_DriveMotor+0x13b8>)
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 80035f8:	4b75      	ldr	r3, [pc, #468]	; (80037d0 <interupt_DriveMotor+0x13a8>)
 80035fa:	edd3 7a00 	vldr	s15, [r3]
 80035fe:	4b75      	ldr	r3, [pc, #468]	; (80037d4 <interupt_DriveMotor+0x13ac>)
 8003600:	ed93 7a00 	vldr	s14, [r3]
 8003604:	f107 020c 	add.w	r2, r7, #12
 8003608:	f107 0310 	add.w	r3, r7, #16
 800360c:	eef0 0a47 	vmov.f32	s1, s14
 8003610:	eeb0 0a67 	vmov.f32	s0, s15
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f001 fe5e 	bl	80052d8 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 800361c:	4b71      	ldr	r3, [pc, #452]	; (80037e4 <interupt_DriveMotor+0x13bc>)
 800361e:	ed93 7a00 	vldr	s14, [r3]
 8003622:	4b71      	ldr	r3, [pc, #452]	; (80037e8 <interupt_DriveMotor+0x13c0>)
 8003624:	edd3 7a00 	vldr	s15, [r3]
 8003628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800362c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003630:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003634:	4b66      	ldr	r3, [pc, #408]	; (80037d0 <interupt_DriveMotor+0x13a8>)
 8003636:	edd3 7a01 	vldr	s15, [r3, #4]
 800363a:	4b6c      	ldr	r3, [pc, #432]	; (80037ec <interupt_DriveMotor+0x13c4>)
 800363c:	edd3 6a00 	vldr	s13, [r3]
 8003640:	4b64      	ldr	r3, [pc, #400]	; (80037d4 <interupt_DriveMotor+0x13ac>)
 8003642:	ed93 6a01 	vldr	s12, [r3, #4]
 8003646:	1d3a      	adds	r2, r7, #4
 8003648:	f107 0308 	add.w	r3, r7, #8
 800364c:	eef0 1a46 	vmov.f32	s3, s12
 8003650:	eeb0 1a66 	vmov.f32	s2, s13
 8003654:	4611      	mov	r1, r2
 8003656:	eef0 0a67 	vmov.f32	s1, s15
 800365a:	eeb0 0a47 	vmov.f32	s0, s14
 800365e:	4618      	mov	r0, r3
 8003660:	f001 fb8e 	bl	8004d80 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 8003664:	f002 f84c 	bl	8005700 <calWallConrol>
 8003668:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 800366c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003670:	edd7 7a03 	vldr	s15, [r7, #12]
 8003674:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003678:	edd7 7a07 	vldr	s15, [r7, #28]
 800367c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003680:	edd7 7a02 	vldr	s15, [r7, #8]
 8003684:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003688:	edd7 7a01 	vldr	s15, [r7, #4]
 800368c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003690:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 8003694:	ed97 7a04 	vldr	s14, [r7, #16]
 8003698:	edd7 7a03 	vldr	s15, [r7, #12]
 800369c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80036a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80036ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80036b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b8:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80036bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80036c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80036c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036c8:	ee17 0a90 	vmov	r0, s15
 80036cc:	f7fc ff64 	bl	8000598 <__aeabi_f2d>
 80036d0:	4604      	mov	r4, r0
 80036d2:	460d      	mov	r5, r1
 80036d4:	4b46      	ldr	r3, [pc, #280]	; (80037f0 <interupt_DriveMotor+0x13c8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fc ff5d 	bl	8000598 <__aeabi_f2d>
 80036de:	a33a      	add	r3, pc, #232	; (adr r3, 80037c8 <interupt_DriveMotor+0x13a0>)
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	f7fc ffb0 	bl	8000648 <__aeabi_dmul>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4620      	mov	r0, r4
 80036ee:	4629      	mov	r1, r5
 80036f0:	f7fd fa3a 	bl	8000b68 <__aeabi_dcmpgt>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d07c      	beq.n	80037f4 <interupt_DriveMotor+0x13cc>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80036fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036fc:	f7fc ff4c 	bl	8000598 <__aeabi_f2d>
 8003700:	4604      	mov	r4, r0
 8003702:	460d      	mov	r5, r1
 8003704:	4b3a      	ldr	r3, [pc, #232]	; (80037f0 <interupt_DriveMotor+0x13c8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7fc ff45 	bl	8000598 <__aeabi_f2d>
 800370e:	a32e      	add	r3, pc, #184	; (adr r3, 80037c8 <interupt_DriveMotor+0x13a0>)
 8003710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003714:	f7fc ff98 	bl	8000648 <__aeabi_dmul>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4690      	mov	r8, r2
 800371e:	4699      	mov	r9, r3
 8003720:	ed97 7a04 	vldr	s14, [r7, #16]
 8003724:	edd7 7a02 	vldr	s15, [r7, #8]
 8003728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800372c:	ee17 0a90 	vmov	r0, s15
 8003730:	f7fc ff32 	bl	8000598 <__aeabi_f2d>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4640      	mov	r0, r8
 800373a:	4649      	mov	r1, r9
 800373c:	f7fc fdcc 	bl	80002d8 <__aeabi_dsub>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4620      	mov	r0, r4
 8003746:	4629      	mov	r1, r5
 8003748:	f7fc fdc8 	bl	80002dc <__adddf3>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4610      	mov	r0, r2
 8003752:	4619      	mov	r1, r3
 8003754:	f7fd fa50 	bl	8000bf8 <__aeabi_d2f>
 8003758:	4603      	mov	r3, r0
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800375c:	6a38      	ldr	r0, [r7, #32]
 800375e:	f7fc ff1b 	bl	8000598 <__aeabi_f2d>
 8003762:	4604      	mov	r4, r0
 8003764:	460d      	mov	r5, r1
 8003766:	4b22      	ldr	r3, [pc, #136]	; (80037f0 <interupt_DriveMotor+0x13c8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7fc ff14 	bl	8000598 <__aeabi_f2d>
 8003770:	a315      	add	r3, pc, #84	; (adr r3, 80037c8 <interupt_DriveMotor+0x13a0>)
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	f7fc ff67 	bl	8000648 <__aeabi_dmul>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4690      	mov	r8, r2
 8003780:	4699      	mov	r9, r3
 8003782:	ed97 7a04 	vldr	s14, [r7, #16]
 8003786:	edd7 7a02 	vldr	s15, [r7, #8]
 800378a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800378e:	ee17 0a90 	vmov	r0, s15
 8003792:	f7fc ff01 	bl	8000598 <__aeabi_f2d>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4640      	mov	r0, r8
 800379c:	4649      	mov	r1, r9
 800379e:	f7fc fd9b 	bl	80002d8 <__aeabi_dsub>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4620      	mov	r0, r4
 80037a8:	4629      	mov	r1, r5
 80037aa:	f7fc fd97 	bl	80002dc <__adddf3>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4610      	mov	r0, r2
 80037b4:	4619      	mov	r1, r3
 80037b6:	f7fd fa1f 	bl	8000bf8 <__aeabi_d2f>
 80037ba:	4603      	mov	r3, r0
 80037bc:	623b      	str	r3, [r7, #32]
 80037be:	e0a9      	b.n	8003914 <interupt_DriveMotor+0x14ec>
 80037c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80037c4:	3f50624d 	.word	0x3f50624d
 80037c8:	d916872b 	.word	0xd916872b
 80037cc:	3feff7ce 	.word	0x3feff7ce
 80037d0:	200004dc 	.word	0x200004dc
 80037d4:	200004e8 	.word	0x200004e8
 80037d8:	200004f4 	.word	0x200004f4
 80037dc:	45480000 	.word	0x45480000
 80037e0:	20000260 	.word	0x20000260
 80037e4:	20000238 	.word	0x20000238
 80037e8:	2000023c 	.word	0x2000023c
 80037ec:	2000026c 	.word	0x2000026c
 80037f0:	200004d8 	.word	0x200004d8
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80037f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80037f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80037fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003800:	ee17 0a90 	vmov	r0, s15
 8003804:	f7fc fec8 	bl	8000598 <__aeabi_f2d>
 8003808:	4604      	mov	r4, r0
 800380a:	460d      	mov	r5, r1
 800380c:	4b7a      	ldr	r3, [pc, #488]	; (80039f8 <interupt_DriveMotor+0x15d0>)
 800380e:	edd3 7a00 	vldr	s15, [r3]
 8003812:	eef1 7a67 	vneg.f32	s15, s15
 8003816:	ee17 3a90 	vmov	r3, s15
 800381a:	4618      	mov	r0, r3
 800381c:	f7fc febc 	bl	8000598 <__aeabi_f2d>
 8003820:	a373      	add	r3, pc, #460	; (adr r3, 80039f0 <interupt_DriveMotor+0x15c8>)
 8003822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003826:	f7fc ff0f 	bl	8000648 <__aeabi_dmul>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4620      	mov	r0, r4
 8003830:	4629      	mov	r1, r5
 8003832:	f7fd f97b 	bl	8000b2c <__aeabi_dcmplt>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d06b      	beq.n	8003914 <interupt_DriveMotor+0x14ec>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800383c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800383e:	f7fc feab 	bl	8000598 <__aeabi_f2d>
 8003842:	4604      	mov	r4, r0
 8003844:	460d      	mov	r5, r1
 8003846:	4b6c      	ldr	r3, [pc, #432]	; (80039f8 <interupt_DriveMotor+0x15d0>)
 8003848:	edd3 7a00 	vldr	s15, [r3]
 800384c:	eef1 7a67 	vneg.f32	s15, s15
 8003850:	ee17 3a90 	vmov	r3, s15
 8003854:	4618      	mov	r0, r3
 8003856:	f7fc fe9f 	bl	8000598 <__aeabi_f2d>
 800385a:	a365      	add	r3, pc, #404	; (adr r3, 80039f0 <interupt_DriveMotor+0x15c8>)
 800385c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003860:	f7fc fef2 	bl	8000648 <__aeabi_dmul>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4690      	mov	r8, r2
 800386a:	4699      	mov	r9, r3
 800386c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003870:	edd7 7a02 	vldr	s15, [r7, #8]
 8003874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003878:	ee17 0a90 	vmov	r0, s15
 800387c:	f7fc fe8c 	bl	8000598 <__aeabi_f2d>
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	4640      	mov	r0, r8
 8003886:	4649      	mov	r1, r9
 8003888:	f7fc fd26 	bl	80002d8 <__aeabi_dsub>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4620      	mov	r0, r4
 8003892:	4629      	mov	r1, r5
 8003894:	f7fc fd22 	bl	80002dc <__adddf3>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4610      	mov	r0, r2
 800389e:	4619      	mov	r1, r3
 80038a0:	f7fd f9aa 	bl	8000bf8 <__aeabi_d2f>
 80038a4:	4603      	mov	r3, r0
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80038a8:	6a38      	ldr	r0, [r7, #32]
 80038aa:	f7fc fe75 	bl	8000598 <__aeabi_f2d>
 80038ae:	4604      	mov	r4, r0
 80038b0:	460d      	mov	r5, r1
 80038b2:	4b51      	ldr	r3, [pc, #324]	; (80039f8 <interupt_DriveMotor+0x15d0>)
 80038b4:	edd3 7a00 	vldr	s15, [r3]
 80038b8:	eef1 7a67 	vneg.f32	s15, s15
 80038bc:	ee17 3a90 	vmov	r3, s15
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fc fe69 	bl	8000598 <__aeabi_f2d>
 80038c6:	a34a      	add	r3, pc, #296	; (adr r3, 80039f0 <interupt_DriveMotor+0x15c8>)
 80038c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038cc:	f7fc febc 	bl	8000648 <__aeabi_dmul>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4690      	mov	r8, r2
 80038d6:	4699      	mov	r9, r3
 80038d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80038dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80038e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038e4:	ee17 0a90 	vmov	r0, s15
 80038e8:	f7fc fe56 	bl	8000598 <__aeabi_f2d>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4640      	mov	r0, r8
 80038f2:	4649      	mov	r1, r9
 80038f4:	f7fc fcf0 	bl	80002d8 <__aeabi_dsub>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4620      	mov	r0, r4
 80038fe:	4629      	mov	r1, r5
 8003900:	f7fc fcec 	bl	80002dc <__adddf3>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4610      	mov	r0, r2
 800390a:	4619      	mov	r1, r3
 800390c:	f7fd f974 	bl	8000bf8 <__aeabi_d2f>
 8003910:	4603      	mov	r3, r0
 8003912:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8003914:	f107 0214 	add.w	r2, r7, #20
 8003918:	f107 0318 	add.w	r3, r7, #24
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	edd7 0a08 	vldr	s1, [r7, #32]
 8003924:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003928:	f7fe fcec 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4611      	mov	r1, r2
 8003932:	4618      	mov	r0, r3
 8003934:	f004 feac 	bl	8008690 <pl_DriveMotor_duty>
	}
	if (modeacc == 100) {
 8003938:	4b30      	ldr	r3, [pc, #192]	; (80039fc <interupt_DriveMotor+0x15d4>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b64      	cmp	r3, #100	; 0x64
 800393e:	d14b      	bne.n	80039d8 <interupt_DriveMotor+0x15b0>
		straight.velocity = 0;
 8003940:	4b2f      	ldr	r3, [pc, #188]	; (8003a00 <interupt_DriveMotor+0x15d8>)
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
		turning.velocity=0;
 8003948:	4b2e      	ldr	r3, [pc, #184]	; (8003a04 <interupt_DriveMotor+0x15dc>)
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8003950:	4b2b      	ldr	r3, [pc, #172]	; (8003a00 <interupt_DriveMotor+0x15d8>)
 8003952:	edd3 7a00 	vldr	s15, [r3]
 8003956:	4b2b      	ldr	r3, [pc, #172]	; (8003a04 <interupt_DriveMotor+0x15dc>)
 8003958:	ed93 7a00 	vldr	s14, [r3]
 800395c:	f107 020c 	add.w	r2, r7, #12
 8003960:	f107 0310 	add.w	r3, r7, #16
 8003964:	eef0 0a47 	vmov.f32	s1, s14
 8003968:	eeb0 0a67 	vmov.f32	s0, s15
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f001 fcb2 	bl	80052d8 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8003974:	ed97 7a04 	vldr	s14, [r7, #16]
 8003978:	edd7 7a03 	vldr	s15, [r7, #12]
 800397c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003980:	edd7 7a02 	vldr	s15, [r7, #8]
 8003984:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003988:	edd7 7a01 	vldr	s15, [r7, #4]
 800398c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003990:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8003994:	ed97 7a04 	vldr	s14, [r7, #16]
 8003998:	edd7 7a03 	vldr	s15, [r7, #12]
 800399c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80039a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80039ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039b0:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80039b4:	f107 0214 	add.w	r2, r7, #20
 80039b8:	f107 0318 	add.w	r3, r7, #24
 80039bc:	4611      	mov	r1, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	edd7 0a08 	vldr	s1, [r7, #32]
 80039c4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80039c8:	f7fe fc9c 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4611      	mov	r1, r2
 80039d2:	4618      	mov	r0, r3
 80039d4:	f004 fe5c 	bl	8008690 <pl_DriveMotor_duty>
	}
		g_V_L=(float)(V_L);//V_L;
 80039d8:	4a0b      	ldr	r2, [pc, #44]	; (8003a08 <interupt_DriveMotor+0x15e0>)
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	6013      	str	r3, [r2, #0]
		g_V_R=(float)(V_R);//V_R;
 80039de:	4a0b      	ldr	r2, [pc, #44]	; (8003a0c <interupt_DriveMotor+0x15e4>)
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	6013      	str	r3, [r2, #0]



}
 80039e4:	bf00      	nop
 80039e6:	3728      	adds	r7, #40	; 0x28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039ee:	bf00      	nop
 80039f0:	d916872b 	.word	0xd916872b
 80039f4:	3feff7ce 	.word	0x3feff7ce
 80039f8:	200004d8 	.word	0x200004d8
 80039fc:	20000534 	.word	0x20000534
 8003a00:	200004dc 	.word	0x200004dc
 8003a04:	200004e8 	.word	0x200004e8
 8003a08:	20000538 	.word	0x20000538
 8003a0c:	2000053c 	.word	0x2000053c

08003a10 <straight_table_max>:

float straight_table_max(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration, float input_deceleration,MOTOR_MODE motor_mode) {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08a      	sub	sp, #40	; 0x28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	ed87 0a07 	vstr	s0, [r7, #28]
 8003a1a:	edc7 0a06 	vstr	s1, [r7, #24]
 8003a1e:	ed87 1a05 	vstr	s2, [r7, #20]
 8003a22:	edc7 1a04 	vstr	s3, [r7, #16]
 8003a26:	ed87 2a03 	vstr	s4, [r7, #12]
 8003a2a:	edc7 2a02 	vstr	s5, [r7, #8]
 8003a2e:	6078      	str	r0, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003a30:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a34:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003a38:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a3c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a40:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003a44:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003a48:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003a4c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a54:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	fusion_distanceL=0;
 8003a58:	4b82      	ldr	r3, [pc, #520]	; (8003c64 <straight_table_max+0x254>)
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8003a60:	4b81      	ldr	r3, [pc, #516]	; (8003c68 <straight_table_max+0x258>)
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
	//straight_alpha=0.99;

	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003a68:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a74:	d505      	bpl.n	8003a82 <straight_table_max+0x72>
 8003a76:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a7a:	eef1 7a67 	vneg.f32	s15, s15
 8003a7e:	edc7 7a03 	vstr	s15, [r7, #12]
	if (input_deceleration < 0){input_deceleration=-input_deceleration;}//減速が負
 8003a82:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a8e:	d505      	bpl.n	8003a9c <straight_table_max+0x8c>
 8003a90:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a94:	eef1 7a67 	vneg.f32	s15, s15
 8003a98:	edc7 7a02 	vstr	s15, [r7, #8]


	Trapezoid_straight.displacement = input_displacement;
 8003a9c:	4a73      	ldr	r2, [pc, #460]	; (8003c6c <straight_table_max+0x25c>)
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 8003aa2:	4a72      	ldr	r2, [pc, #456]	; (8003c6c <straight_table_max+0x25c>)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 8003aa8:	4a70      	ldr	r2, [pc, #448]	; (8003c6c <straight_table_max+0x25c>)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8003aae:	4a6f      	ldr	r2, [pc, #444]	; (8003c6c <straight_table_max+0x25c>)
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 8003ab4:	4a6d      	ldr	r2, [pc, #436]	; (8003c6c <straight_table_max+0x25c>)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6113      	str	r3, [r2, #16]
	Trapezoid_straight.deceleration = input_deceleration;
 8003aba:	4a6c      	ldr	r2, [pc, #432]	; (8003c6c <straight_table_max+0x25c>)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	6153      	str	r3, [r2, #20]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003ac0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ac4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003acc:	db03      	blt.n	8003ad6 <straight_table_max+0xc6>
 8003ace:	4a68      	ldr	r2, [pc, #416]	; (8003c70 <straight_table_max+0x260>)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6053      	str	r3, [r2, #4]
 8003ad4:	e006      	b.n	8003ae4 <straight_table_max+0xd4>
	}else{straight.acceleration = -input_acceleration;}
 8003ad6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ada:	eef1 7a67 	vneg.f32	s15, s15
 8003ade:	4b64      	ldr	r3, [pc, #400]	; (8003c70 <straight_table_max+0x260>)
 8003ae0:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8003ae4:	4a62      	ldr	r2, [pc, #392]	; (8003c70 <straight_table_max+0x260>)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 8003aea:	4b61      	ldr	r3, [pc, #388]	; (8003c70 <straight_table_max+0x260>)
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 8003af2:	4b60      	ldr	r3, [pc, #384]	; (8003c74 <straight_table_max+0x264>)
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 8003afa:	4b5e      	ldr	r3, [pc, #376]	; (8003c74 <straight_table_max+0x264>)
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 8003b02:	4b5c      	ldr	r3, [pc, #368]	; (8003c74 <straight_table_max+0x264>)
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003b0a:	4b5b      	ldr	r3, [pc, #364]	; (8003c78 <straight_table_max+0x268>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003b10:	4b5a      	ldr	r3, [pc, #360]	; (8003c7c <straight_table_max+0x26c>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003b16:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b22:	dd0e      	ble.n	8003b42 <straight_table_max+0x132>
 8003b24:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003b28:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b34:	dd05      	ble.n	8003b42 <straight_table_max+0x132>
 8003b36:	4b51      	ldr	r3, [pc, #324]	; (8003c7c <straight_table_max+0x26c>)
 8003b38:	2205      	movs	r2, #5
 8003b3a:	701a      	strb	r2, [r3, #0]
 8003b3c:	4a4c      	ldr	r2, [pc, #304]	; (8003c70 <straight_table_max+0x260>)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003b42:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4e:	dd14      	ble.n	8003b7a <straight_table_max+0x16a>
 8003b50:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b54:	eef1 7a67 	vneg.f32	s15, s15
 8003b58:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003b5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b64:	d509      	bpl.n	8003b7a <straight_table_max+0x16a>
 8003b66:	4b45      	ldr	r3, [pc, #276]	; (8003c7c <straight_table_max+0x26c>)
 8003b68:	2206      	movs	r2, #6
 8003b6a:	701a      	strb	r2, [r3, #0]
 8003b6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b70:	eef1 7a67 	vneg.f32	s15, s15
 8003b74:	4b3e      	ldr	r3, [pc, #248]	; (8003c70 <straight_table_max+0x260>)
 8003b76:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003b7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b86:	d514      	bpl.n	8003bb2 <straight_table_max+0x1a2>
 8003b88:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b8c:	eef1 7a67 	vneg.f32	s15, s15
 8003b90:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003b94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9c:	dd09      	ble.n	8003bb2 <straight_table_max+0x1a2>
 8003b9e:	4b37      	ldr	r3, [pc, #220]	; (8003c7c <straight_table_max+0x26c>)
 8003ba0:	2205      	movs	r2, #5
 8003ba2:	701a      	strb	r2, [r3, #0]
 8003ba4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ba8:	eef1 7a67 	vneg.f32	s15, s15
 8003bac:	4b30      	ldr	r3, [pc, #192]	; (8003c70 <straight_table_max+0x260>)
 8003bae:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003bb2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bbe:	d50e      	bpl.n	8003bde <straight_table_max+0x1ce>
 8003bc0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003bc4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd0:	d505      	bpl.n	8003bde <straight_table_max+0x1ce>
 8003bd2:	4b2a      	ldr	r3, [pc, #168]	; (8003c7c <straight_table_max+0x26c>)
 8003bd4:	2206      	movs	r2, #6
 8003bd6:	701a      	strb	r2, [r3, #0]
 8003bd8:	4a25      	ldr	r2, [pc, #148]	; (8003c70 <straight_table_max+0x260>)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6053      	str	r3, [r2, #4]
	modeacc = 7;
 8003bde:	4b28      	ldr	r3, [pc, #160]	; (8003c80 <straight_table_max+0x270>)
 8003be0:	2207      	movs	r2, #7
 8003be2:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 8003be4:	793a      	ldrb	r2, [r7, #4]
 8003be6:	4b27      	ldr	r3, [pc, #156]	; (8003c84 <straight_table_max+0x274>)
 8003be8:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 8003bea:	f004 fd35 	bl	8008658 <pl_DriveMotor_start>

	while (g_acc_flag!=4){
 8003bee:	bf00      	nop
 8003bf0:	4b22      	ldr	r3, [pc, #136]	; (8003c7c <straight_table_max+0x26c>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d1fa      	bne.n	8003bf0 <straight_table_max+0x1e0>


	}
	if(input_end_velocity==0){//BREAK
 8003bfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bfe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c06:	d110      	bne.n	8003c2a <straight_table_max+0x21a>
		wait_ms_NoReset(100);
 8003c08:	2064      	movs	r0, #100	; 0x64
 8003c0a:	f004 fffd 	bl	8008c08 <wait_ms_NoReset>
		modeacc = 0;
 8003c0e:	4b1c      	ldr	r3, [pc, #112]	; (8003c80 <straight_table_max+0x270>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	701a      	strb	r2, [r3, #0]
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8003c14:	2003      	movs	r0, #3
 8003c16:	f004 fcf9 	bl	800860c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8003c1a:	2003      	movs	r0, #3
 8003c1c:	f004 fcce 	bl	80085bc <pl_L_DriveMotor_mode>
		pl_DriveMotor_stop();//これは必要か？
 8003c20:	f004 fd28 	bl	8008674 <pl_DriveMotor_stop>
		wait_ms_NoReset(100);
 8003c24:	2064      	movs	r0, #100	; 0x64
 8003c26:	f004 ffef 	bl	8008c08 <wait_ms_NoReset>
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8003c2a:	4b17      	ldr	r3, [pc, #92]	; (8003c88 <straight_table_max+0x278>)
 8003c2c:	ed93 7a00 	vldr	s14, [r3]
 8003c30:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c38:	4b13      	ldr	r3, [pc, #76]	; (8003c88 <straight_table_max+0x278>)
 8003c3a:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8003c3e:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <straight_table_max+0x27c>)
 8003c40:	ed93 7a00 	vldr	s14, [r3]
 8003c44:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <straight_table_max+0x27c>)
 8003c4e:	edc3 7a00 	vstr	s15, [r3]




	return straight.velocity;
 8003c52:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <straight_table_max+0x260>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	ee07 3a90 	vmov	s15, r3



}
 8003c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c5e:	3728      	adds	r7, #40	; 0x28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20000250 	.word	0x20000250
 8003c68:	20000254 	.word	0x20000254
 8003c6c:	200004f4 	.word	0x200004f4
 8003c70:	200004dc 	.word	0x200004dc
 8003c74:	200004e8 	.word	0x200004e8
 8003c78:	20000811 	.word	0x20000811
 8003c7c:	20000810 	.word	0x20000810
 8003c80:	20000534 	.word	0x20000534
 8003c84:	2000059c 	.word	0x2000059c
 8003c88:	20000220 	.word	0x20000220
 8003c8c:	20000224 	.word	0x20000224

08003c90 <straight_table2>:



float straight_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE motor_mode) {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	ed87 0a05 	vstr	s0, [r7, #20]
 8003c9a:	edc7 0a04 	vstr	s1, [r7, #16]
 8003c9e:	ed87 1a03 	vstr	s2, [r7, #12]
 8003ca2:	edc7 1a02 	vstr	s3, [r7, #8]
 8003ca6:	ed87 2a01 	vstr	s4, [r7, #4]
 8003caa:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003cac:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cb0:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003cb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cb8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003cc0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003cc4:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003cc8:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cd0:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003cd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce0:	d505      	bpl.n	8003cee <straight_table2+0x5e>
 8003ce2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ce6:	eef1 7a67 	vneg.f32	s15, s15
 8003cea:	edc7 7a01 	vstr	s15, [r7, #4]

	if(noGoalPillarMode==1 && motor_mode.WallCutMode==1){
 8003cee:	4bba      	ldr	r3, [pc, #744]	; (8003fd8 <straight_table2+0x348>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d10c      	bne.n	8003d10 <straight_table2+0x80>
 8003cf6:	78fb      	ldrb	r3, [r7, #3]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d109      	bne.n	8003d10 <straight_table2+0x80>
		motor_mode.WallCutMode=0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	70fb      	strb	r3, [r7, #3]
		input_displacement=input_displacement-MAZE_OFFSET;
 8003d00:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d04:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003d08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d0c:	edc7 7a05 	vstr	s15, [r7, #20]
	}


	Trapezoid_straight.displacement = input_displacement;
 8003d10:	4ab2      	ldr	r2, [pc, #712]	; (8003fdc <straight_table2+0x34c>)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 8003d16:	4ab1      	ldr	r2, [pc, #708]	; (8003fdc <straight_table2+0x34c>)
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 8003d1c:	4aaf      	ldr	r2, [pc, #700]	; (8003fdc <straight_table2+0x34c>)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8003d22:	4aae      	ldr	r2, [pc, #696]	; (8003fdc <straight_table2+0x34c>)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 8003d28:	4aac      	ldr	r2, [pc, #688]	; (8003fdc <straight_table2+0x34c>)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003d2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d3a:	db03      	blt.n	8003d44 <straight_table2+0xb4>
 8003d3c:	4aa8      	ldr	r2, [pc, #672]	; (8003fe0 <straight_table2+0x350>)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6053      	str	r3, [r2, #4]
 8003d42:	e006      	b.n	8003d52 <straight_table2+0xc2>
	}else{straight.acceleration = -input_acceleration;}
 8003d44:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d48:	eef1 7a67 	vneg.f32	s15, s15
 8003d4c:	4ba4      	ldr	r3, [pc, #656]	; (8003fe0 <straight_table2+0x350>)
 8003d4e:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8003d52:	4aa3      	ldr	r2, [pc, #652]	; (8003fe0 <straight_table2+0x350>)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 8003d58:	4ba1      	ldr	r3, [pc, #644]	; (8003fe0 <straight_table2+0x350>)
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 8003d60:	4ba0      	ldr	r3, [pc, #640]	; (8003fe4 <straight_table2+0x354>)
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 8003d68:	4b9e      	ldr	r3, [pc, #632]	; (8003fe4 <straight_table2+0x354>)
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 8003d70:	4b9c      	ldr	r3, [pc, #624]	; (8003fe4 <straight_table2+0x354>)
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003d78:	4b9b      	ldr	r3, [pc, #620]	; (8003fe8 <straight_table2+0x358>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003d7e:	4b9b      	ldr	r3, [pc, #620]	; (8003fec <straight_table2+0x35c>)
 8003d80:	2201      	movs	r2, #1
 8003d82:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003d84:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d90:	dd0e      	ble.n	8003db0 <straight_table2+0x120>
 8003d92:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d96:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da2:	dd05      	ble.n	8003db0 <straight_table2+0x120>
 8003da4:	4b91      	ldr	r3, [pc, #580]	; (8003fec <straight_table2+0x35c>)
 8003da6:	2205      	movs	r2, #5
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	4a8d      	ldr	r2, [pc, #564]	; (8003fe0 <straight_table2+0x350>)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003db0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003db4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dbc:	dd14      	ble.n	8003de8 <straight_table2+0x158>
 8003dbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8003dc2:	eef1 7a67 	vneg.f32	s15, s15
 8003dc6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003dca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd2:	d509      	bpl.n	8003de8 <straight_table2+0x158>
 8003dd4:	4b85      	ldr	r3, [pc, #532]	; (8003fec <straight_table2+0x35c>)
 8003dd6:	2206      	movs	r2, #6
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dde:	eef1 7a67 	vneg.f32	s15, s15
 8003de2:	4b7f      	ldr	r3, [pc, #508]	; (8003fe0 <straight_table2+0x350>)
 8003de4:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003de8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003dec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df4:	d514      	bpl.n	8003e20 <straight_table2+0x190>
 8003df6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003dfa:	eef1 7a67 	vneg.f32	s15, s15
 8003dfe:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0a:	dd09      	ble.n	8003e20 <straight_table2+0x190>
 8003e0c:	4b77      	ldr	r3, [pc, #476]	; (8003fec <straight_table2+0x35c>)
 8003e0e:	2205      	movs	r2, #5
 8003e10:	701a      	strb	r2, [r3, #0]
 8003e12:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e16:	eef1 7a67 	vneg.f32	s15, s15
 8003e1a:	4b71      	ldr	r3, [pc, #452]	; (8003fe0 <straight_table2+0x350>)
 8003e1c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003e20:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2c:	d50e      	bpl.n	8003e4c <straight_table2+0x1bc>
 8003e2e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e32:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3e:	d505      	bpl.n	8003e4c <straight_table2+0x1bc>
 8003e40:	4b6a      	ldr	r3, [pc, #424]	; (8003fec <straight_table2+0x35c>)
 8003e42:	2206      	movs	r2, #6
 8003e44:	701a      	strb	r2, [r3, #0]
 8003e46:	4a66      	ldr	r2, [pc, #408]	; (8003fe0 <straight_table2+0x350>)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 8003e4c:	4b68      	ldr	r3, [pc, #416]	; (8003ff0 <straight_table2+0x360>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 8003e52:	783a      	ldrb	r2, [r7, #0]
 8003e54:	4b67      	ldr	r3, [pc, #412]	; (8003ff4 <straight_table2+0x364>)
 8003e56:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 8003e58:	f004 fbfe 	bl	8008658 <pl_DriveMotor_start>
	if(motor_mode.WallCutMode==1){
 8003e5c:	78fb      	ldrb	r3, [r7, #3]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	f040 80d4 	bne.w	800400c <straight_table2+0x37c>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003e64:	4b64      	ldr	r3, [pc, #400]	; (8003ff8 <straight_table2+0x368>)
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003e6c:	4b5f      	ldr	r3, [pc, #380]	; (8003fec <straight_table2+0x35c>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003e72:	4b5b      	ldr	r3, [pc, #364]	; (8003fe0 <straight_table2+0x350>)
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003e7a:	bf00      	nop
 8003e7c:	4b5f      	ldr	r3, [pc, #380]	; (8003ffc <straight_table2+0x36c>)
 8003e7e:	edd3 7a00 	vldr	s15, [r3]
 8003e82:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8003e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e8e:	d409      	bmi.n	8003ea4 <straight_table2+0x214>
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 8003e90:	4b5a      	ldr	r3, [pc, #360]	; (8003ffc <straight_table2+0x36c>)
 8003e92:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003e96:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8004000 <straight_table2+0x370>
 8003e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea2:	dd18      	ble.n	8003ed6 <straight_table2+0x246>
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 8003ea4:	4b57      	ldr	r3, [pc, #348]	; (8004004 <straight_table2+0x374>)
 8003ea6:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 8003eaa:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb6:	d409      	bmi.n	8003ecc <straight_table2+0x23c>
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 8003eb8:	4b52      	ldr	r3, [pc, #328]	; (8004004 <straight_table2+0x374>)
 8003eba:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 8003ebe:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8004000 <straight_table2+0x370>
 8003ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eca:	dd04      	ble.n	8003ed6 <straight_table2+0x246>
			  front_wall_break_90==0){}
 8003ecc:	4b4e      	ldr	r3, [pc, #312]	; (8004008 <straight_table2+0x378>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0d2      	beq.n	8003e7c <straight_table2+0x1ec>
		straight.displacement=0;
 8003ed6:	4b42      	ldr	r3, [pc, #264]	; (8003fe0 <straight_table2+0x350>)
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003ede:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ee2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eea:	db03      	blt.n	8003ef4 <straight_table2+0x264>
 8003eec:	4a3c      	ldr	r2, [pc, #240]	; (8003fe0 <straight_table2+0x350>)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6053      	str	r3, [r2, #4]
 8003ef2:	e006      	b.n	8003f02 <straight_table2+0x272>
			}else{straight.acceleration = -input_acceleration;}
 8003ef4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ef8:	eef1 7a67 	vneg.f32	s15, s15
 8003efc:	4b38      	ldr	r3, [pc, #224]	; (8003fe0 <straight_table2+0x350>)
 8003efe:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003f02:	4b3a      	ldr	r3, [pc, #232]	; (8003fec <straight_table2+0x35c>)
 8003f04:	2201      	movs	r2, #1
 8003f06:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003f08:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f14:	dd0e      	ble.n	8003f34 <straight_table2+0x2a4>
 8003f16:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f26:	dd05      	ble.n	8003f34 <straight_table2+0x2a4>
 8003f28:	4b30      	ldr	r3, [pc, #192]	; (8003fec <straight_table2+0x35c>)
 8003f2a:	2205      	movs	r2, #5
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	4a2c      	ldr	r2, [pc, #176]	; (8003fe0 <straight_table2+0x350>)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003f34:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f40:	dd14      	ble.n	8003f6c <straight_table2+0x2dc>
 8003f42:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f46:	eef1 7a67 	vneg.f32	s15, s15
 8003f4a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f56:	d509      	bpl.n	8003f6c <straight_table2+0x2dc>
 8003f58:	4b24      	ldr	r3, [pc, #144]	; (8003fec <straight_table2+0x35c>)
 8003f5a:	2206      	movs	r2, #6
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f62:	eef1 7a67 	vneg.f32	s15, s15
 8003f66:	4b1e      	ldr	r3, [pc, #120]	; (8003fe0 <straight_table2+0x350>)
 8003f68:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003f6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f78:	d514      	bpl.n	8003fa4 <straight_table2+0x314>
 8003f7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f7e:	eef1 7a67 	vneg.f32	s15, s15
 8003f82:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f8e:	dd09      	ble.n	8003fa4 <straight_table2+0x314>
 8003f90:	4b16      	ldr	r3, [pc, #88]	; (8003fec <straight_table2+0x35c>)
 8003f92:	2205      	movs	r2, #5
 8003f94:	701a      	strb	r2, [r3, #0]
 8003f96:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f9a:	eef1 7a67 	vneg.f32	s15, s15
 8003f9e:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <straight_table2+0x350>)
 8003fa0:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003fa4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb0:	f140 825c 	bpl.w	800446c <straight_table2+0x7dc>
 8003fb4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003fb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc4:	f140 8252 	bpl.w	800446c <straight_table2+0x7dc>
 8003fc8:	4b08      	ldr	r3, [pc, #32]	; (8003fec <straight_table2+0x35c>)
 8003fca:	2206      	movs	r2, #6
 8003fcc:	701a      	strb	r2, [r3, #0]
 8003fce:	4a04      	ldr	r2, [pc, #16]	; (8003fe0 <straight_table2+0x350>)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6053      	str	r3, [r2, #4]
 8003fd4:	e24a      	b.n	800446c <straight_table2+0x7dc>
 8003fd6:	bf00      	nop
 8003fd8:	20000535 	.word	0x20000535
 8003fdc:	200004f4 	.word	0x200004f4
 8003fe0:	200004dc 	.word	0x200004dc
 8003fe4:	200004e8 	.word	0x200004e8
 8003fe8:	20000811 	.word	0x20000811
 8003fec:	20000810 	.word	0x20000810
 8003ff0:	20000534 	.word	0x20000534
 8003ff4:	2000059c 	.word	0x2000059c
 8003ff8:	20000540 	.word	0x20000540
 8003ffc:	200005d8 	.word	0x200005d8
 8004000:	425c0000 	.word	0x425c0000
 8004004:	200005dc 	.word	0x200005dc
 8004008:	200005fe 	.word	0x200005fe
	}else if(motor_mode.WallCutMode==2){
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	2b02      	cmp	r3, #2
 8004010:	f040 80c9 	bne.w	80041a6 <straight_table2+0x516>
		//左壁or右壁がstart～endの中にあれば抜ける
		g_acc_flag=0;
 8004014:	4bb8      	ldr	r3, [pc, #736]	; (80042f8 <straight_table2+0x668>)
 8004016:	2200      	movs	r2, #0
 8004018:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 800401a:	4bb8      	ldr	r3, [pc, #736]	; (80042fc <straight_table2+0x66c>)
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 8004022:	bf00      	nop
 8004024:	4bb6      	ldr	r3, [pc, #728]	; (8004300 <straight_table2+0x670>)
 8004026:	edd3 7a00 	vldr	s15, [r3]
 800402a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800402e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004032:	d913      	bls.n	800405c <straight_table2+0x3cc>
 8004034:	4bb2      	ldr	r3, [pc, #712]	; (8004300 <straight_table2+0x670>)
 8004036:	edd3 7a00 	vldr	s15, [r3]
 800403a:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 800403e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004046:	d909      	bls.n	800405c <straight_table2+0x3cc>
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 8004048:	4bad      	ldr	r3, [pc, #692]	; (8004300 <straight_table2+0x670>)
 800404a:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 800404e:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8004304 <straight_table2+0x674>
 8004052:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405a:	db20      	blt.n	800409e <straight_table2+0x40e>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 800405c:	4baa      	ldr	r3, [pc, #680]	; (8004308 <straight_table2+0x678>)
 800405e:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 8004062:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406a:	d913      	bls.n	8004094 <straight_table2+0x404>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 800406c:	4ba6      	ldr	r3, [pc, #664]	; (8004308 <straight_table2+0x678>)
 800406e:	edd3 7a00 	vldr	s15, [r3]
 8004072:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8004076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800407a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800407e:	d909      	bls.n	8004094 <straight_table2+0x404>
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 8004080:	4ba1      	ldr	r3, [pc, #644]	; (8004308 <straight_table2+0x678>)
 8004082:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8004086:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8004304 <straight_table2+0x674>
 800408a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800408e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004092:	db04      	blt.n	800409e <straight_table2+0x40e>
			  front_wall_break_45==0){}
 8004094:	4b9d      	ldr	r3, [pc, #628]	; (800430c <straight_table2+0x67c>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0c2      	beq.n	8004024 <straight_table2+0x394>
//		while((NoWallDisplacementR90<=0 ||
//				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R45) &&
//				(NoWallDisplacementL90<=0 ||
//			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L45) &&
//			  front_wall_break_90==0){}
		enc.sigma_error=0;
 800409e:	4b9c      	ldr	r3, [pc, #624]	; (8004310 <straight_table2+0x680>)
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 80040a6:	4b95      	ldr	r3, [pc, #596]	; (80042fc <straight_table2+0x66c>)
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80040ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80040b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ba:	db03      	blt.n	80040c4 <straight_table2+0x434>
 80040bc:	4a8f      	ldr	r2, [pc, #572]	; (80042fc <straight_table2+0x66c>)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6053      	str	r3, [r2, #4]
 80040c2:	e006      	b.n	80040d2 <straight_table2+0x442>
			}else{straight.acceleration = -input_acceleration;}
 80040c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80040c8:	eef1 7a67 	vneg.f32	s15, s15
 80040cc:	4b8b      	ldr	r3, [pc, #556]	; (80042fc <straight_table2+0x66c>)
 80040ce:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80040d2:	4b89      	ldr	r3, [pc, #548]	; (80042f8 <straight_table2+0x668>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80040d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80040dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e4:	dd0e      	ble.n	8004104 <straight_table2+0x474>
 80040e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80040ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80040ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f6:	dd05      	ble.n	8004104 <straight_table2+0x474>
 80040f8:	4b7f      	ldr	r3, [pc, #508]	; (80042f8 <straight_table2+0x668>)
 80040fa:	2205      	movs	r2, #5
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	4a7f      	ldr	r2, [pc, #508]	; (80042fc <straight_table2+0x66c>)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8004104:	edd7 7a05 	vldr	s15, [r7, #20]
 8004108:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800410c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004110:	dd14      	ble.n	800413c <straight_table2+0x4ac>
 8004112:	edd7 7a05 	vldr	s15, [r7, #20]
 8004116:	eef1 7a67 	vneg.f32	s15, s15
 800411a:	ed97 7a07 	vldr	s14, [r7, #28]
 800411e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004126:	d509      	bpl.n	800413c <straight_table2+0x4ac>
 8004128:	4b73      	ldr	r3, [pc, #460]	; (80042f8 <straight_table2+0x668>)
 800412a:	2206      	movs	r2, #6
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004132:	eef1 7a67 	vneg.f32	s15, s15
 8004136:	4b71      	ldr	r3, [pc, #452]	; (80042fc <straight_table2+0x66c>)
 8004138:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800413c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004140:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004148:	d514      	bpl.n	8004174 <straight_table2+0x4e4>
 800414a:	edd7 7a05 	vldr	s15, [r7, #20]
 800414e:	eef1 7a67 	vneg.f32	s15, s15
 8004152:	ed97 7a07 	vldr	s14, [r7, #28]
 8004156:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800415a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415e:	dd09      	ble.n	8004174 <straight_table2+0x4e4>
 8004160:	4b65      	ldr	r3, [pc, #404]	; (80042f8 <straight_table2+0x668>)
 8004162:	2205      	movs	r2, #5
 8004164:	701a      	strb	r2, [r3, #0]
 8004166:	edd7 7a01 	vldr	s15, [r7, #4]
 800416a:	eef1 7a67 	vneg.f32	s15, s15
 800416e:	4b63      	ldr	r3, [pc, #396]	; (80042fc <straight_table2+0x66c>)
 8004170:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8004174:	edd7 7a05 	vldr	s15, [r7, #20]
 8004178:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800417c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004180:	f140 8174 	bpl.w	800446c <straight_table2+0x7dc>
 8004184:	ed97 7a07 	vldr	s14, [r7, #28]
 8004188:	edd7 7a05 	vldr	s15, [r7, #20]
 800418c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004194:	f140 816a 	bpl.w	800446c <straight_table2+0x7dc>
 8004198:	4b57      	ldr	r3, [pc, #348]	; (80042f8 <straight_table2+0x668>)
 800419a:	2206      	movs	r2, #6
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	4a57      	ldr	r2, [pc, #348]	; (80042fc <straight_table2+0x66c>)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6053      	str	r3, [r2, #4]
 80041a4:	e162      	b.n	800446c <straight_table2+0x7dc>
	}else if(motor_mode.WallCutMode==3){
 80041a6:	78fb      	ldrb	r3, [r7, #3]
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	f040 80b9 	bne.w	8004320 <straight_table2+0x690>
		//斜めの右旋回
		//左壁or右壁がstart～endの中にあれば抜ける

		g_acc_flag=0;
 80041ae:	4b52      	ldr	r3, [pc, #328]	; (80042f8 <straight_table2+0x668>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80041b4:	4b51      	ldr	r3, [pc, #324]	; (80042fc <straight_table2+0x66c>)
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 80041bc:	bf00      	nop
 80041be:	4b55      	ldr	r3, [pc, #340]	; (8004314 <straight_table2+0x684>)
 80041c0:	edd3 7a00 	vldr	s15, [r3]
 80041c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d0:	d409      	bmi.n	80041e6 <straight_table2+0x556>
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 80041d2:	4b50      	ldr	r3, [pc, #320]	; (8004314 <straight_table2+0x684>)
 80041d4:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 80041d8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004318 <straight_table2+0x688>
 80041dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e4:	dd04      	ble.n	80041f0 <straight_table2+0x560>
				  front_wall_break_45slant==0){}
 80041e6:	4b4d      	ldr	r3, [pc, #308]	; (800431c <straight_table2+0x68c>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	b2db      	uxtb	r3, r3
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0e6      	beq.n	80041be <straight_table2+0x52e>
		enc.sigma_error=0;
 80041f0:	4b47      	ldr	r3, [pc, #284]	; (8004310 <straight_table2+0x680>)
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 80041f8:	4b40      	ldr	r3, [pc, #256]	; (80042fc <straight_table2+0x66c>)
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8004200:	edd7 7a02 	vldr	s15, [r7, #8]
 8004204:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420c:	db03      	blt.n	8004216 <straight_table2+0x586>
 800420e:	4a3b      	ldr	r2, [pc, #236]	; (80042fc <straight_table2+0x66c>)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6053      	str	r3, [r2, #4]
 8004214:	e006      	b.n	8004224 <straight_table2+0x594>
			}else{straight.acceleration = -input_acceleration;}
 8004216:	edd7 7a01 	vldr	s15, [r7, #4]
 800421a:	eef1 7a67 	vneg.f32	s15, s15
 800421e:	4b37      	ldr	r3, [pc, #220]	; (80042fc <straight_table2+0x66c>)
 8004220:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8004224:	4b34      	ldr	r3, [pc, #208]	; (80042f8 <straight_table2+0x668>)
 8004226:	2201      	movs	r2, #1
 8004228:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800422a:	edd7 7a05 	vldr	s15, [r7, #20]
 800422e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004236:	dd0e      	ble.n	8004256 <straight_table2+0x5c6>
 8004238:	ed97 7a07 	vldr	s14, [r7, #28]
 800423c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004240:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004248:	dd05      	ble.n	8004256 <straight_table2+0x5c6>
 800424a:	4b2b      	ldr	r3, [pc, #172]	; (80042f8 <straight_table2+0x668>)
 800424c:	2205      	movs	r2, #5
 800424e:	701a      	strb	r2, [r3, #0]
 8004250:	4a2a      	ldr	r2, [pc, #168]	; (80042fc <straight_table2+0x66c>)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8004256:	edd7 7a05 	vldr	s15, [r7, #20]
 800425a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800425e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004262:	dd14      	ble.n	800428e <straight_table2+0x5fe>
 8004264:	edd7 7a05 	vldr	s15, [r7, #20]
 8004268:	eef1 7a67 	vneg.f32	s15, s15
 800426c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004270:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004278:	d509      	bpl.n	800428e <straight_table2+0x5fe>
 800427a:	4b1f      	ldr	r3, [pc, #124]	; (80042f8 <straight_table2+0x668>)
 800427c:	2206      	movs	r2, #6
 800427e:	701a      	strb	r2, [r3, #0]
 8004280:	edd7 7a01 	vldr	s15, [r7, #4]
 8004284:	eef1 7a67 	vneg.f32	s15, s15
 8004288:	4b1c      	ldr	r3, [pc, #112]	; (80042fc <straight_table2+0x66c>)
 800428a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800428e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004292:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800429a:	d514      	bpl.n	80042c6 <straight_table2+0x636>
 800429c:	edd7 7a05 	vldr	s15, [r7, #20]
 80042a0:	eef1 7a67 	vneg.f32	s15, s15
 80042a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80042a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b0:	dd09      	ble.n	80042c6 <straight_table2+0x636>
 80042b2:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <straight_table2+0x668>)
 80042b4:	2205      	movs	r2, #5
 80042b6:	701a      	strb	r2, [r3, #0]
 80042b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80042bc:	eef1 7a67 	vneg.f32	s15, s15
 80042c0:	4b0e      	ldr	r3, [pc, #56]	; (80042fc <straight_table2+0x66c>)
 80042c2:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80042c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80042ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d2:	f140 80cb 	bpl.w	800446c <straight_table2+0x7dc>
 80042d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80042da:	edd7 7a05 	vldr	s15, [r7, #20]
 80042de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e6:	f140 80c1 	bpl.w	800446c <straight_table2+0x7dc>
 80042ea:	4b03      	ldr	r3, [pc, #12]	; (80042f8 <straight_table2+0x668>)
 80042ec:	2206      	movs	r2, #6
 80042ee:	701a      	strb	r2, [r3, #0]
 80042f0:	4a02      	ldr	r2, [pc, #8]	; (80042fc <straight_table2+0x66c>)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6053      	str	r3, [r2, #4]
 80042f6:	e0b9      	b.n	800446c <straight_table2+0x7dc>
 80042f8:	20000810 	.word	0x20000810
 80042fc:	200004dc 	.word	0x200004dc
 8004300:	200005e0 	.word	0x200005e0
 8004304:	42000000 	.word	0x42000000
 8004308:	200005e4 	.word	0x200005e4
 800430c:	200005ff 	.word	0x200005ff
 8004310:	20000540 	.word	0x20000540
 8004314:	200005f0 	.word	0x200005f0
 8004318:	420c0000 	.word	0x420c0000
 800431c:	20000600 	.word	0x20000600
	}else if(motor_mode.WallCutMode==4){
 8004320:	78fb      	ldrb	r3, [r7, #3]
 8004322:	2b04      	cmp	r3, #4
 8004324:	f040 80a2 	bne.w	800446c <straight_table2+0x7dc>
		//斜めの左旋回
		//左壁or右壁がstart～endの中にあれば抜ける

		g_acc_flag=0;
 8004328:	4baa      	ldr	r3, [pc, #680]	; (80045d4 <straight_table2+0x944>)
 800432a:	2200      	movs	r2, #0
 800432c:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 800432e:	4baa      	ldr	r3, [pc, #680]	; (80045d8 <straight_table2+0x948>)
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8004336:	bf00      	nop
 8004338:	4ba8      	ldr	r3, [pc, #672]	; (80045dc <straight_table2+0x94c>)
 800433a:	edd3 7a00 	vldr	s15, [r3]
 800433e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434a:	d409      	bmi.n	8004360 <straight_table2+0x6d0>
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 800434c:	4ba3      	ldr	r3, [pc, #652]	; (80045dc <straight_table2+0x94c>)
 800434e:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8004352:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 80045e0 <straight_table2+0x950>
 8004356:	eef4 7ac7 	vcmpe.f32	s15, s14
 800435a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435e:	dd04      	ble.n	800436a <straight_table2+0x6da>
				  front_wall_break_45slant==0){}
 8004360:	4ba0      	ldr	r3, [pc, #640]	; (80045e4 <straight_table2+0x954>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0e6      	beq.n	8004338 <straight_table2+0x6a8>
		enc.sigma_error=0;
 800436a:	4b9f      	ldr	r3, [pc, #636]	; (80045e8 <straight_table2+0x958>)
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 8004372:	4b99      	ldr	r3, [pc, #612]	; (80045d8 <straight_table2+0x948>)
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 800437a:	edd7 7a02 	vldr	s15, [r7, #8]
 800437e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004386:	db03      	blt.n	8004390 <straight_table2+0x700>
 8004388:	4a93      	ldr	r2, [pc, #588]	; (80045d8 <straight_table2+0x948>)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6053      	str	r3, [r2, #4]
 800438e:	e006      	b.n	800439e <straight_table2+0x70e>
			}else{straight.acceleration = -input_acceleration;}
 8004390:	edd7 7a01 	vldr	s15, [r7, #4]
 8004394:	eef1 7a67 	vneg.f32	s15, s15
 8004398:	4b8f      	ldr	r3, [pc, #572]	; (80045d8 <straight_table2+0x948>)
 800439a:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 800439e:	4b8d      	ldr	r3, [pc, #564]	; (80045d4 <straight_table2+0x944>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80043a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80043a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b0:	dd0e      	ble.n	80043d0 <straight_table2+0x740>
 80043b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80043b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80043ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c2:	dd05      	ble.n	80043d0 <straight_table2+0x740>
 80043c4:	4b83      	ldr	r3, [pc, #524]	; (80045d4 <straight_table2+0x944>)
 80043c6:	2205      	movs	r2, #5
 80043c8:	701a      	strb	r2, [r3, #0]
 80043ca:	4a83      	ldr	r2, [pc, #524]	; (80045d8 <straight_table2+0x948>)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80043d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80043d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043dc:	dd14      	ble.n	8004408 <straight_table2+0x778>
 80043de:	edd7 7a05 	vldr	s15, [r7, #20]
 80043e2:	eef1 7a67 	vneg.f32	s15, s15
 80043e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80043ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f2:	d509      	bpl.n	8004408 <straight_table2+0x778>
 80043f4:	4b77      	ldr	r3, [pc, #476]	; (80045d4 <straight_table2+0x944>)
 80043f6:	2206      	movs	r2, #6
 80043f8:	701a      	strb	r2, [r3, #0]
 80043fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80043fe:	eef1 7a67 	vneg.f32	s15, s15
 8004402:	4b75      	ldr	r3, [pc, #468]	; (80045d8 <straight_table2+0x948>)
 8004404:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8004408:	edd7 7a05 	vldr	s15, [r7, #20]
 800440c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004414:	d514      	bpl.n	8004440 <straight_table2+0x7b0>
 8004416:	edd7 7a05 	vldr	s15, [r7, #20]
 800441a:	eef1 7a67 	vneg.f32	s15, s15
 800441e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004422:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800442a:	dd09      	ble.n	8004440 <straight_table2+0x7b0>
 800442c:	4b69      	ldr	r3, [pc, #420]	; (80045d4 <straight_table2+0x944>)
 800442e:	2205      	movs	r2, #5
 8004430:	701a      	strb	r2, [r3, #0]
 8004432:	edd7 7a01 	vldr	s15, [r7, #4]
 8004436:	eef1 7a67 	vneg.f32	s15, s15
 800443a:	4b67      	ldr	r3, [pc, #412]	; (80045d8 <straight_table2+0x948>)
 800443c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8004440:	edd7 7a05 	vldr	s15, [r7, #20]
 8004444:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444c:	d50e      	bpl.n	800446c <straight_table2+0x7dc>
 800444e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004452:	edd7 7a05 	vldr	s15, [r7, #20]
 8004456:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800445a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800445e:	d505      	bpl.n	800446c <straight_table2+0x7dc>
 8004460:	4b5c      	ldr	r3, [pc, #368]	; (80045d4 <straight_table2+0x944>)
 8004462:	2206      	movs	r2, #6
 8004464:	701a      	strb	r2, [r3, #0]
 8004466:	4a5c      	ldr	r2, [pc, #368]	; (80045d8 <straight_table2+0x948>)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6053      	str	r3, [r2, #4]
	}

	if(motor_mode.calMazeMode==0){
 800446c:	78bb      	ldrb	r3, [r7, #2]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f040 80a7 	bne.w	80045c2 <straight_table2+0x932>
	while (g_acc_flag!=4){
 8004474:	e074      	b.n	8004560 <straight_table2+0x8d0>
		if(motor_mode.WallCutMode==1){
 8004476:	78fb      	ldrb	r3, [r7, #3]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d120      	bne.n	80044be <straight_table2+0x82e>
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 800447c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004480:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8004484:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004488:	4b58      	ldr	r3, [pc, #352]	; (80045ec <straight_table2+0x95c>)
 800448a:	edd3 7a00 	vldr	s15, [r3]
 800448e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004496:	d90e      	bls.n	80044b6 <straight_table2+0x826>
			   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90)){
 8004498:	edd7 7a05 	vldr	s15, [r7, #20]
 800449c:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 80044a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044a4:	4b52      	ldr	r3, [pc, #328]	; (80045f0 <straight_table2+0x960>)
 80044a6:	edd3 7a00 	vldr	s15, [r3]
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80044aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b2:	d900      	bls.n	80044b6 <straight_table2+0x826>
 80044b4:	e054      	b.n	8004560 <straight_table2+0x8d0>
				g_acc_flag=4;
 80044b6:	4b47      	ldr	r3, [pc, #284]	; (80045d4 <straight_table2+0x944>)
 80044b8:	2204      	movs	r2, #4
 80044ba:	701a      	strb	r2, [r3, #0]
				break;
 80044bc:	e055      	b.n	800456a <straight_table2+0x8da>
			}
		}else if(motor_mode.WallCutMode==2){
 80044be:	78fb      	ldrb	r3, [r7, #3]
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d121      	bne.n	8004508 <straight_table2+0x878>
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 80044c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80044c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80044cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80044d0:	4b48      	ldr	r3, [pc, #288]	; (80045f4 <straight_table2+0x964>)
 80044d2:	edd3 7a00 	vldr	s15, [r3]
 80044d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044de:	d900      	bls.n	80044e2 <straight_table2+0x852>
 80044e0:	e03e      	b.n	8004560 <straight_table2+0x8d0>
			   NoWallDisplacementR45>=input_displacement+CUTPLACE_TO_CENTER_R45 ){
 80044e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80044e6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80044ea:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80044ee:	4b42      	ldr	r3, [pc, #264]	; (80045f8 <straight_table2+0x968>)
 80044f0:	edd3 7a00 	vldr	s15, [r3]
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 80044f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044fc:	d900      	bls.n	8004500 <straight_table2+0x870>
 80044fe:	e02f      	b.n	8004560 <straight_table2+0x8d0>
				g_acc_flag=4;
 8004500:	4b34      	ldr	r3, [pc, #208]	; (80045d4 <straight_table2+0x944>)
 8004502:	2204      	movs	r2, #4
 8004504:	701a      	strb	r2, [r3, #0]
				break;
 8004506:	e030      	b.n	800456a <straight_table2+0x8da>
			}
		}else if(motor_mode.WallCutMode==3){
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	2b03      	cmp	r3, #3
 800450c:	d112      	bne.n	8004534 <straight_table2+0x8a4>
			if(NoWallDisplacementR45slant2>=input_displacement+CUTPLACE_TO_CENTER_R45_SLANT ){
 800450e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800451a:	4b38      	ldr	r3, [pc, #224]	; (80045fc <straight_table2+0x96c>)
 800451c:	edd3 7a00 	vldr	s15, [r3]
 8004520:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004528:	d900      	bls.n	800452c <straight_table2+0x89c>
 800452a:	e019      	b.n	8004560 <straight_table2+0x8d0>
				g_acc_flag=4;
 800452c:	4b29      	ldr	r3, [pc, #164]	; (80045d4 <straight_table2+0x944>)
 800452e:	2204      	movs	r2, #4
 8004530:	701a      	strb	r2, [r3, #0]
				break;
 8004532:	e01a      	b.n	800456a <straight_table2+0x8da>
			}
		}else if(motor_mode.WallCutMode==4){
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	2b04      	cmp	r3, #4
 8004538:	d112      	bne.n	8004560 <straight_table2+0x8d0>
			if(NoWallDisplacementL45slant2>=input_displacement+CUTPLACE_TO_CENTER_L45_SLANT){
 800453a:	edd7 7a05 	vldr	s15, [r7, #20]
 800453e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004542:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004546:	4b25      	ldr	r3, [pc, #148]	; (80045dc <straight_table2+0x94c>)
 8004548:	edd3 7a00 	vldr	s15, [r3]
 800454c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004554:	d900      	bls.n	8004558 <straight_table2+0x8c8>
 8004556:	e003      	b.n	8004560 <straight_table2+0x8d0>
				g_acc_flag=4;
 8004558:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <straight_table2+0x944>)
 800455a:	2204      	movs	r2, #4
 800455c:	701a      	strb	r2, [r3, #0]
				break;
 800455e:	e004      	b.n	800456a <straight_table2+0x8da>
	while (g_acc_flag!=4){
 8004560:	4b1c      	ldr	r3, [pc, #112]	; (80045d4 <straight_table2+0x944>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b04      	cmp	r3, #4
 8004568:	d185      	bne.n	8004476 <straight_table2+0x7e6>
			}
		}

	}
	if(input_end_velocity==0){//BREAK
 800456a:	edd7 7a03 	vldr	s15, [r7, #12]
 800456e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004576:	d110      	bne.n	800459a <straight_table2+0x90a>
		wait_ms_NoReset(100);
 8004578:	2064      	movs	r0, #100	; 0x64
 800457a:	f004 fb45 	bl	8008c08 <wait_ms_NoReset>
		modeacc = 0;
 800457e:	4b20      	ldr	r3, [pc, #128]	; (8004600 <straight_table2+0x970>)
 8004580:	2200      	movs	r2, #0
 8004582:	701a      	strb	r2, [r3, #0]
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8004584:	2003      	movs	r0, #3
 8004586:	f004 f841 	bl	800860c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800458a:	2003      	movs	r0, #3
 800458c:	f004 f816 	bl	80085bc <pl_L_DriveMotor_mode>
		pl_DriveMotor_stop();//これは必要か？
 8004590:	f004 f870 	bl	8008674 <pl_DriveMotor_stop>
		wait_ms_NoReset(100);
 8004594:	2064      	movs	r0, #100	; 0x64
 8004596:	f004 fb37 	bl	8008c08 <wait_ms_NoReset>
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 800459a:	4b1a      	ldr	r3, [pc, #104]	; (8004604 <straight_table2+0x974>)
 800459c:	ed93 7a00 	vldr	s14, [r3]
 80045a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80045a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045a8:	4b16      	ldr	r3, [pc, #88]	; (8004604 <straight_table2+0x974>)
 80045aa:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 80045ae:	4b16      	ldr	r3, [pc, #88]	; (8004608 <straight_table2+0x978>)
 80045b0:	ed93 7a00 	vldr	s14, [r3]
 80045b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80045b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045bc:	4b12      	ldr	r3, [pc, #72]	; (8004608 <straight_table2+0x978>)
 80045be:	edc3 7a00 	vstr	s15, [r3]


	}

	return straight.velocity;
 80045c2:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <straight_table2+0x948>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	ee07 3a90 	vmov	s15, r3



}
 80045ca:	eeb0 0a67 	vmov.f32	s0, s15
 80045ce:	3720      	adds	r7, #32
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000810 	.word	0x20000810
 80045d8:	200004dc 	.word	0x200004dc
 80045dc:	200005f4 	.word	0x200005f4
 80045e0:	420c0000 	.word	0x420c0000
 80045e4:	20000600 	.word	0x20000600
 80045e8:	20000540 	.word	0x20000540
 80045ec:	200005dc 	.word	0x200005dc
 80045f0:	200005d8 	.word	0x200005d8
 80045f4:	200005e4 	.word	0x200005e4
 80045f8:	200005e0 	.word	0x200005e0
 80045fc:	200005f0 	.word	0x200005f0
 8004600:	20000534 	.word	0x20000534
 8004604:	20000220 	.word	0x20000220
 8004608:	20000224 	.word	0x20000224

0800460c <End_straight>:

void End_straight(float input_displacement,MOTOR_MODE motor_mode,_Bool right_wall,_Bool left_wall){
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	ed87 0a03 	vstr	s0, [r7, #12]
 8004616:	60b8      	str	r0, [r7, #8]
 8004618:	460b      	mov	r3, r1
 800461a:	71fb      	strb	r3, [r7, #7]
 800461c:	4613      	mov	r3, r2
 800461e:	71bb      	strb	r3, [r7, #6]
	if(noGoalPillarMode==1){
 8004620:	4b2a      	ldr	r3, [pc, #168]	; (80046cc <End_straight+0xc0>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d132      	bne.n	800468e <End_straight+0x82>
		motor_mode.WallCutMode=0;
 8004628:	2300      	movs	r3, #0
 800462a:	72fb      	strb	r3, [r7, #11]
	}
	while (g_acc_flag!=4){
 800462c:	e02f      	b.n	800468e <End_straight+0x82>
		if(right_wall == 0 || left_wall == 0){
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	f083 0301 	eor.w	r3, r3, #1
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d105      	bne.n	8004646 <End_straight+0x3a>
 800463a:	79bb      	ldrb	r3, [r7, #6]
 800463c:	f083 0301 	eor.w	r3, r3, #1
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d023      	beq.n	800468e <End_straight+0x82>
		if(motor_mode.WallCutMode==1){
 8004646:	7afb      	ldrb	r3, [r7, #11]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d120      	bne.n	800468e <End_straight+0x82>
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 800464c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004650:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8004654:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004658:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <End_straight+0xc4>)
 800465a:	edd3 7a00 	vldr	s15, [r3]
 800465e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004666:	d90e      	bls.n	8004686 <End_straight+0x7a>
					   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90 ){
 8004668:	edd7 7a03 	vldr	s15, [r7, #12]
 800466c:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8004670:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004674:	4b17      	ldr	r3, [pc, #92]	; (80046d4 <End_straight+0xc8>)
 8004676:	edd3 7a00 	vldr	s15, [r3]
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 800467a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800467e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004682:	d900      	bls.n	8004686 <End_straight+0x7a>
 8004684:	e003      	b.n	800468e <End_straight+0x82>
						g_acc_flag=4;
 8004686:	4b14      	ldr	r3, [pc, #80]	; (80046d8 <End_straight+0xcc>)
 8004688:	2204      	movs	r2, #4
 800468a:	701a      	strb	r2, [r3, #0]
						break;
 800468c:	e004      	b.n	8004698 <End_straight+0x8c>
	while (g_acc_flag!=4){
 800468e:	4b12      	ldr	r3, [pc, #72]	; (80046d8 <End_straight+0xcc>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b04      	cmp	r3, #4
 8004696:	d1ca      	bne.n	800462e <End_straight+0x22>
//			}
//		}

	}
//	while(g_MotorEnd_flag==0){}
	E_distanceL = E_distanceL - input_displacement;
 8004698:	4b10      	ldr	r3, [pc, #64]	; (80046dc <End_straight+0xd0>)
 800469a:	ed93 7a00 	vldr	s14, [r3]
 800469e:	edd7 7a03 	vldr	s15, [r7, #12]
 80046a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046a6:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <End_straight+0xd0>)
 80046a8:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 80046ac:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <End_straight+0xd4>)
 80046ae:	ed93 7a00 	vldr	s14, [r3]
 80046b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80046b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ba:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <End_straight+0xd4>)
 80046bc:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 80046c0:	f003 ffd8 	bl	8008674 <pl_DriveMotor_stop>
}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	20000535 	.word	0x20000535
 80046d0:	200005dc 	.word	0x200005dc
 80046d4:	200005d8 	.word	0x200005d8
 80046d8:	20000810 	.word	0x20000810
 80046dc:	20000220 	.word	0x20000220
 80046e0:	20000224 	.word	0x20000224

080046e4 <turning_table2>:

float turning_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	ed87 0a05 	vstr	s0, [r7, #20]
 80046ee:	edc7 0a04 	vstr	s1, [r7, #16]
 80046f2:	ed87 1a03 	vstr	s2, [r7, #12]
 80046f6:	edc7 1a02 	vstr	s3, [r7, #8]
 80046fa:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 80046fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8004702:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8004706:	edd7 7a04 	vldr	s15, [r7, #16]
 800470a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800470e:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8004712:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004716:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 800471a:	ed97 7a01 	vldr	s14, [r7, #4]
 800471e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004722:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8004726:	edd7 7a01 	vldr	s15, [r7, #4]
 800472a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800472e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004732:	d505      	bpl.n	8004740 <turning_table2+0x5c>
 8004734:	edd7 7a01 	vldr	s15, [r7, #4]
 8004738:	eef1 7a67 	vneg.f32	s15, s15
 800473c:	edc7 7a01 	vstr	s15, [r7, #4]

	Trapezoid_turning.displacement = input_displacement;
 8004740:	4a6e      	ldr	r2, [pc, #440]	; (80048fc <turning_table2+0x218>)
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8004746:	4a6d      	ldr	r2, [pc, #436]	; (80048fc <turning_table2+0x218>)
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 800474c:	4a6b      	ldr	r2, [pc, #428]	; (80048fc <turning_table2+0x218>)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8004752:	4a6a      	ldr	r2, [pc, #424]	; (80048fc <turning_table2+0x218>)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8004758:	4a68      	ldr	r2, [pc, #416]	; (80048fc <turning_table2+0x218>)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 800475e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004762:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476a:	db03      	blt.n	8004774 <turning_table2+0x90>
 800476c:	4a64      	ldr	r2, [pc, #400]	; (8004900 <turning_table2+0x21c>)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6053      	str	r3, [r2, #4]
 8004772:	e006      	b.n	8004782 <turning_table2+0x9e>
	}else{turning.acceleration = -input_acceleration;}
 8004774:	edd7 7a01 	vldr	s15, [r7, #4]
 8004778:	eef1 7a67 	vneg.f32	s15, s15
 800477c:	4b60      	ldr	r3, [pc, #384]	; (8004900 <turning_table2+0x21c>)
 800477e:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8004782:	4a5f      	ldr	r2, [pc, #380]	; (8004900 <turning_table2+0x21c>)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8004788:	4b5d      	ldr	r3, [pc, #372]	; (8004900 <turning_table2+0x21c>)
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8004790:	4b5c      	ldr	r3, [pc, #368]	; (8004904 <turning_table2+0x220>)
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8004798:	4b5a      	ldr	r3, [pc, #360]	; (8004904 <turning_table2+0x220>)
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 80047a0:	4b58      	ldr	r3, [pc, #352]	; (8004904 <turning_table2+0x220>)
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 80047a8:	4b57      	ldr	r3, [pc, #348]	; (8004908 <turning_table2+0x224>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 80047ae:	4b57      	ldr	r3, [pc, #348]	; (800490c <turning_table2+0x228>)
 80047b0:	2201      	movs	r2, #1
 80047b2:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 80047b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80047b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c0:	dd0e      	ble.n	80047e0 <turning_table2+0xfc>
 80047c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80047c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80047ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d2:	dd05      	ble.n	80047e0 <turning_table2+0xfc>
 80047d4:	4b4d      	ldr	r3, [pc, #308]	; (800490c <turning_table2+0x228>)
 80047d6:	2205      	movs	r2, #5
 80047d8:	701a      	strb	r2, [r3, #0]
 80047da:	4a49      	ldr	r2, [pc, #292]	; (8004900 <turning_table2+0x21c>)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 80047e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80047e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ec:	dd14      	ble.n	8004818 <turning_table2+0x134>
 80047ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80047f2:	eef1 7a67 	vneg.f32	s15, s15
 80047f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80047fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004802:	d509      	bpl.n	8004818 <turning_table2+0x134>
 8004804:	4b41      	ldr	r3, [pc, #260]	; (800490c <turning_table2+0x228>)
 8004806:	2206      	movs	r2, #6
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	edd7 7a01 	vldr	s15, [r7, #4]
 800480e:	eef1 7a67 	vneg.f32	s15, s15
 8004812:	4b3b      	ldr	r3, [pc, #236]	; (8004900 <turning_table2+0x21c>)
 8004814:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8004818:	edd7 7a05 	vldr	s15, [r7, #20]
 800481c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004824:	d514      	bpl.n	8004850 <turning_table2+0x16c>
 8004826:	edd7 7a05 	vldr	s15, [r7, #20]
 800482a:	eef1 7a67 	vneg.f32	s15, s15
 800482e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004832:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483a:	dd09      	ble.n	8004850 <turning_table2+0x16c>
 800483c:	4b33      	ldr	r3, [pc, #204]	; (800490c <turning_table2+0x228>)
 800483e:	2205      	movs	r2, #5
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	edd7 7a01 	vldr	s15, [r7, #4]
 8004846:	eef1 7a67 	vneg.f32	s15, s15
 800484a:	4b2d      	ldr	r3, [pc, #180]	; (8004900 <turning_table2+0x21c>)
 800484c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8004850:	edd7 7a05 	vldr	s15, [r7, #20]
 8004854:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800485c:	d50e      	bpl.n	800487c <turning_table2+0x198>
 800485e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004862:	edd7 7a05 	vldr	s15, [r7, #20]
 8004866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800486a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800486e:	d505      	bpl.n	800487c <turning_table2+0x198>
 8004870:	4b26      	ldr	r3, [pc, #152]	; (800490c <turning_table2+0x228>)
 8004872:	2206      	movs	r2, #6
 8004874:	701a      	strb	r2, [r3, #0]
 8004876:	4a22      	ldr	r2, [pc, #136]	; (8004900 <turning_table2+0x21c>)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 800487c:	4b24      	ldr	r3, [pc, #144]	; (8004910 <turning_table2+0x22c>)
 800487e:	2202      	movs	r2, #2
 8004880:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004882:	f003 fee9 	bl	8008658 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8004886:	bf00      	nop
 8004888:	4b20      	ldr	r3, [pc, #128]	; (800490c <turning_table2+0x228>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b04      	cmp	r3, #4
 8004890:	d1fa      	bne.n	8004888 <turning_table2+0x1a4>

	}
	if(input_end_velocity==0){//BREAK
 8004892:	edd7 7a03 	vldr	s15, [r7, #12]
 8004896:	eef5 7a40 	vcmp.f32	s15, #0.0
 800489a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489e:	d10f      	bne.n	80048c0 <turning_table2+0x1dc>
		wait_ms_NoReset(300);
 80048a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80048a4:	f004 f9b0 	bl	8008c08 <wait_ms_NoReset>
		modeacc = 0;
 80048a8:	4b19      	ldr	r3, [pc, #100]	; (8004910 <turning_table2+0x22c>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	701a      	strb	r2, [r3, #0]
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 80048ae:	2003      	movs	r0, #3
 80048b0:	f003 feac 	bl	800860c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 80048b4:	2003      	movs	r0, #3
 80048b6:	f003 fe81 	bl	80085bc <pl_L_DriveMotor_mode>
		wait_ms_NoReset(100);
 80048ba:	2064      	movs	r0, #100	; 0x64
 80048bc:	f004 f9a4 	bl	8008c08 <wait_ms_NoReset>
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 80048c0:	4b14      	ldr	r3, [pc, #80]	; (8004914 <turning_table2+0x230>)
 80048c2:	ed93 7a00 	vldr	s14, [r3]
 80048c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80048ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048ce:	4b11      	ldr	r3, [pc, #68]	; (8004914 <turning_table2+0x230>)
 80048d0:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 80048d4:	f003 fece 	bl	8008674 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 80048d8:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <turning_table2+0x234>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a0f      	ldr	r2, [pc, #60]	; (800491c <turning_table2+0x238>)
 80048de:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 80048e0:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <turning_table2+0x23c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a0f      	ldr	r2, [pc, #60]	; (8004924 <turning_table2+0x240>)
 80048e6:	6013      	str	r3, [r2, #0]

	return turning.velocity;
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <turning_table2+0x21c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	ee07 3a90 	vmov	s15, r3
}
 80048f0:	eeb0 0a67 	vmov.f32	s0, s15
 80048f4:	3720      	adds	r7, #32
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	2000050c 	.word	0x2000050c
 8004900:	200004e8 	.word	0x200004e8
 8004904:	200004dc 	.word	0x200004dc
 8004908:	20000811 	.word	0x20000811
 800490c:	20000810 	.word	0x20000810
 8004910:	20000534 	.word	0x20000534
 8004914:	20000268 	.word	0x20000268
 8004918:	20000228 	.word	0x20000228
 800491c:	20000258 	.word	0x20000258
 8004920:	2000022c 	.word	0x2000022c
 8004924:	2000025c 	.word	0x2000025c

08004928 <slalom_table2>:



float slalom_table2(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af00      	add	r7, sp, #0
 800492e:	ed87 0a05 	vstr	s0, [r7, #20]
 8004932:	edc7 0a04 	vstr	s1, [r7, #16]
 8004936:	ed87 1a03 	vstr	s2, [r7, #12]
 800493a:	edc7 1a02 	vstr	s3, [r7, #8]
 800493e:	ed87 2a01 	vstr	s4, [r7, #4]
 8004942:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8004946:	edd7 7a02 	vldr	s15, [r7, #8]
 800494a:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 800494e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004952:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004956:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 800495a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800495e:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8004962:	ed97 7a00 	vldr	s14, [r7]
 8004966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800496a:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 800496e:	edd7 7a00 	vldr	s15, [r7]
 8004972:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800497a:	d505      	bpl.n	8004988 <slalom_table2+0x60>
 800497c:	edd7 7a00 	vldr	s15, [r7]
 8004980:	eef1 7a67 	vneg.f32	s15, s15
 8004984:	edc7 7a00 	vstr	s15, [r7]

	Trapezoid_turning.displacement = input_displacement;
 8004988:	4a5e      	ldr	r2, [pc, #376]	; (8004b04 <slalom_table2+0x1dc>)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 800498e:	4a5d      	ldr	r2, [pc, #372]	; (8004b04 <slalom_table2+0x1dc>)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8004994:	4a5b      	ldr	r2, [pc, #364]	; (8004b04 <slalom_table2+0x1dc>)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 800499a:	4a5a      	ldr	r2, [pc, #360]	; (8004b04 <slalom_table2+0x1dc>)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 80049a0:	4a58      	ldr	r2, [pc, #352]	; (8004b04 <slalom_table2+0x1dc>)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 80049a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80049aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b2:	db03      	blt.n	80049bc <slalom_table2+0x94>
 80049b4:	4a54      	ldr	r2, [pc, #336]	; (8004b08 <slalom_table2+0x1e0>)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	6053      	str	r3, [r2, #4]
 80049ba:	e006      	b.n	80049ca <slalom_table2+0xa2>
	}else{turning.acceleration = -input_acceleration;}
 80049bc:	edd7 7a00 	vldr	s15, [r7]
 80049c0:	eef1 7a67 	vneg.f32	s15, s15
 80049c4:	4b50      	ldr	r3, [pc, #320]	; (8004b08 <slalom_table2+0x1e0>)
 80049c6:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 80049ca:	4a4f      	ldr	r2, [pc, #316]	; (8004b08 <slalom_table2+0x1e0>)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 80049d0:	4b4d      	ldr	r3, [pc, #308]	; (8004b08 <slalom_table2+0x1e0>)
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 80049d8:	4a4c      	ldr	r2, [pc, #304]	; (8004b0c <slalom_table2+0x1e4>)
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 80049de:	4b4b      	ldr	r3, [pc, #300]	; (8004b0c <slalom_table2+0x1e4>)
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 80049e6:	4b49      	ldr	r3, [pc, #292]	; (8004b0c <slalom_table2+0x1e4>)
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 80049ee:	4b48      	ldr	r3, [pc, #288]	; (8004b10 <slalom_table2+0x1e8>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 80049f4:	4b47      	ldr	r3, [pc, #284]	; (8004b14 <slalom_table2+0x1ec>)
 80049f6:	2201      	movs	r2, #1
 80049f8:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 80049fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80049fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a06:	dd0e      	ble.n	8004a26 <slalom_table2+0xfe>
 8004a08:	ed97 7a07 	vldr	s14, [r7, #28]
 8004a0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a18:	dd05      	ble.n	8004a26 <slalom_table2+0xfe>
 8004a1a:	4b3e      	ldr	r3, [pc, #248]	; (8004b14 <slalom_table2+0x1ec>)
 8004a1c:	2205      	movs	r2, #5
 8004a1e:	701a      	strb	r2, [r3, #0]
 8004a20:	4a39      	ldr	r2, [pc, #228]	; (8004b08 <slalom_table2+0x1e0>)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8004a26:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a32:	dd14      	ble.n	8004a5e <slalom_table2+0x136>
 8004a34:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a38:	eef1 7a67 	vneg.f32	s15, s15
 8004a3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004a40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a48:	d509      	bpl.n	8004a5e <slalom_table2+0x136>
 8004a4a:	4b32      	ldr	r3, [pc, #200]	; (8004b14 <slalom_table2+0x1ec>)
 8004a4c:	2206      	movs	r2, #6
 8004a4e:	701a      	strb	r2, [r3, #0]
 8004a50:	edd7 7a00 	vldr	s15, [r7]
 8004a54:	eef1 7a67 	vneg.f32	s15, s15
 8004a58:	4b2b      	ldr	r3, [pc, #172]	; (8004b08 <slalom_table2+0x1e0>)
 8004a5a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8004a5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6a:	d514      	bpl.n	8004a96 <slalom_table2+0x16e>
 8004a6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a70:	eef1 7a67 	vneg.f32	s15, s15
 8004a74:	ed97 7a07 	vldr	s14, [r7, #28]
 8004a78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a80:	dd09      	ble.n	8004a96 <slalom_table2+0x16e>
 8004a82:	4b24      	ldr	r3, [pc, #144]	; (8004b14 <slalom_table2+0x1ec>)
 8004a84:	2205      	movs	r2, #5
 8004a86:	701a      	strb	r2, [r3, #0]
 8004a88:	edd7 7a00 	vldr	s15, [r7]
 8004a8c:	eef1 7a67 	vneg.f32	s15, s15
 8004a90:	4b1d      	ldr	r3, [pc, #116]	; (8004b08 <slalom_table2+0x1e0>)
 8004a92:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8004a96:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa2:	d50e      	bpl.n	8004ac2 <slalom_table2+0x19a>
 8004aa4:	ed97 7a07 	vldr	s14, [r7, #28]
 8004aa8:	edd7 7a04 	vldr	s15, [r7, #16]
 8004aac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab4:	d505      	bpl.n	8004ac2 <slalom_table2+0x19a>
 8004ab6:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <slalom_table2+0x1ec>)
 8004ab8:	2206      	movs	r2, #6
 8004aba:	701a      	strb	r2, [r3, #0]
 8004abc:	4a12      	ldr	r2, [pc, #72]	; (8004b08 <slalom_table2+0x1e0>)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	6053      	str	r3, [r2, #4]
	modeacc = 4;
 8004ac2:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <slalom_table2+0x1f0>)
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	701a      	strb	r2, [r3, #0]
//	enc.sigma_error=0;
	pl_DriveMotor_start();
 8004ac8:	f003 fdc6 	bl	8008658 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8004acc:	bf00      	nop
 8004ace:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <slalom_table2+0x1ec>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d1fa      	bne.n	8004ace <slalom_table2+0x1a6>

	}
//	modeacc = 0;
//	enc.sigma_error=0;

	angle = angle - input_displacement;
 8004ad8:	4b10      	ldr	r3, [pc, #64]	; (8004b1c <slalom_table2+0x1f4>)
 8004ada:	ed93 7a00 	vldr	s14, [r3]
 8004ade:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ae6:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <slalom_table2+0x1f4>)
 8004ae8:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8004aec:	f003 fdc2 	bl	8008674 <pl_DriveMotor_stop>

	return turning.velocity;
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <slalom_table2+0x1e0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	ee07 3a90 	vmov	s15, r3
}
 8004af8:	eeb0 0a67 	vmov.f32	s0, s15
 8004afc:	3720      	adds	r7, #32
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	2000050c 	.word	0x2000050c
 8004b08:	200004e8 	.word	0x200004e8
 8004b0c:	200004dc 	.word	0x200004dc
 8004b10:	20000811 	.word	0x20000811
 8004b14:	20000810 	.word	0x20000810
 8004b18:	20000534 	.word	0x20000534
 8004b1c:	20000268 	.word	0x20000268

08004b20 <no_angle>:

void no_angle(void){
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8004b24:	4b20      	ldr	r3, [pc, #128]	; (8004ba8 <no_angle+0x88>)
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8004b2c:	4b1e      	ldr	r3, [pc, #120]	; (8004ba8 <no_angle+0x88>)
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8004b34:	4b1c      	ldr	r3, [pc, #112]	; (8004ba8 <no_angle+0x88>)
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8004b3c:	4b1b      	ldr	r3, [pc, #108]	; (8004bac <no_angle+0x8c>)
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8004b44:	4b19      	ldr	r3, [pc, #100]	; (8004bac <no_angle+0x8c>)
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8004b4c:	4b17      	ldr	r3, [pc, #92]	; (8004bac <no_angle+0x8c>)
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	609a      	str	r2, [r3, #8]

	modeacc = 3;
 8004b54:	4b16      	ldr	r3, [pc, #88]	; (8004bb0 <no_angle+0x90>)
 8004b56:	2203      	movs	r2, #3
 8004b58:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004b5a:	f003 fd7d 	bl	8008658 <pl_DriveMotor_start>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8004b5e:	e002      	b.n	8004b66 <no_angle+0x46>
		HAL_Delay(1);
 8004b60:	2001      	movs	r0, #1
 8004b62:	f014 fdc7 	bl	80196f4 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8004b66:	4b13      	ldr	r3, [pc, #76]	; (8004bb4 <no_angle+0x94>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004b6e:	ddf7      	ble.n	8004b60 <no_angle+0x40>
 8004b70:	4b10      	ldr	r3, [pc, #64]	; (8004bb4 <no_angle+0x94>)
 8004b72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b76:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004b7a:	ddf1      	ble.n	8004b60 <no_angle+0x40>
 8004b7c:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <no_angle+0x94>)
 8004b7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b82:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004b86:	ddeb      	ble.n	8004b60 <no_angle+0x40>
//		if(record_time >= max_record_time){
//			break;
//		}
	}
	modeacc = 0;
 8004b88:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <no_angle+0x90>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8004b8e:	f003 fd71 	bl	8008674 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8004b92:	4b09      	ldr	r3, [pc, #36]	; (8004bb8 <no_angle+0x98>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a09      	ldr	r2, [pc, #36]	; (8004bbc <no_angle+0x9c>)
 8004b98:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8004b9a:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <no_angle+0xa0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a09      	ldr	r2, [pc, #36]	; (8004bc4 <no_angle+0xa4>)
 8004ba0:	6013      	str	r3, [r2, #0]

}
 8004ba2:	bf00      	nop
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	200004e8 	.word	0x200004e8
 8004bac:	200004dc 	.word	0x200004dc
 8004bb0:	20000534 	.word	0x20000534
 8004bb4:	200002bc 	.word	0x200002bc
 8004bb8:	20000228 	.word	0x20000228
 8004bbc:	20000258 	.word	0x20000258
 8004bc0:	2000022c 	.word	0x2000022c
 8004bc4:	2000025c 	.word	0x2000025c

08004bc8 <mollifier_slalom_table>:


void mollifier_slalom_table(float input_center_velocity,float input_displacement, float input_max_turning_velocity) {
 8004bc8:	b5b0      	push	{r4, r5, r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	ed87 0a03 	vstr	s0, [r7, #12]
 8004bd2:	edc7 0a02 	vstr	s1, [r7, #8]
 8004bd6:	ed87 1a01 	vstr	s2, [r7, #4]

	// 例外処理

	Mollifier_turning.center_velocity = input_center_velocity;
 8004bda:	4a3d      	ldr	r2, [pc, #244]	; (8004cd0 <mollifier_slalom_table+0x108>)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6053      	str	r3, [r2, #4]
	Mollifier_turning.displacement = input_displacement;
 8004be0:	4a3b      	ldr	r2, [pc, #236]	; (8004cd0 <mollifier_slalom_table+0x108>)
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6013      	str	r3, [r2, #0]
	Mollifier_turning.max_turning_velocity = input_max_turning_velocity;
 8004be6:	4a3a      	ldr	r2, [pc, #232]	; (8004cd0 <mollifier_slalom_table+0x108>)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6093      	str	r3, [r2, #8]


	turning.velocity = 0;
 8004bec:	4b39      	ldr	r3, [pc, #228]	; (8004cd4 <mollifier_slalom_table+0x10c>)
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8004bf4:	4b37      	ldr	r3, [pc, #220]	; (8004cd4 <mollifier_slalom_table+0x10c>)
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8004bfc:	4a36      	ldr	r2, [pc, #216]	; (8004cd8 <mollifier_slalom_table+0x110>)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8004c02:	4b35      	ldr	r3, [pc, #212]	; (8004cd8 <mollifier_slalom_table+0x110>)
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8004c0a:	4b33      	ldr	r3, [pc, #204]	; (8004cd8 <mollifier_slalom_table+0x110>)
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8004c12:	4b32      	ldr	r3, [pc, #200]	; (8004cdc <mollifier_slalom_table+0x114>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8004c18:	4b31      	ldr	r3, [pc, #196]	; (8004ce0 <mollifier_slalom_table+0x118>)
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	701a      	strb	r2, [r3, #0]
	mollifier_timer=-fabs(input_displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input_max_turning_velocity;
 8004c1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c22:	eef0 7ae7 	vabs.f32	s15, s15
 8004c26:	ee17 0a90 	vmov	r0, s15
 8004c2a:	f7fb fcb5 	bl	8000598 <__aeabi_f2d>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4614      	mov	r4, r2
 8004c34:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004c38:	a321      	add	r3, pc, #132	; (adr r3, 8004cc0 <mollifier_slalom_table+0xf8>)
 8004c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3e:	4620      	mov	r0, r4
 8004c40:	4629      	mov	r1, r5
 8004c42:	f7fb fe2b 	bl	800089c <__aeabi_ddiv>
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	a31e      	add	r3, pc, #120	; (adr r3, 8004cc8 <mollifier_slalom_table+0x100>)
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	f7fb fcf8 	bl	8000648 <__aeabi_dmul>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4614      	mov	r4, r2
 8004c5e:	461d      	mov	r5, r3
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7fb fc99 	bl	8000598 <__aeabi_f2d>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	f7fb fe15 	bl	800089c <__aeabi_ddiv>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	4610      	mov	r0, r2
 8004c78:	4619      	mov	r1, r3
 8004c7a:	f7fb ffbd 	bl	8000bf8 <__aeabi_d2f>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	4a18      	ldr	r2, [pc, #96]	; (8004ce4 <mollifier_slalom_table+0x11c>)
 8004c82:	6013      	str	r3, [r2, #0]
	modeacc = 6;
 8004c84:	4b18      	ldr	r3, [pc, #96]	; (8004ce8 <mollifier_slalom_table+0x120>)
 8004c86:	2206      	movs	r2, #6
 8004c88:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004c8a:	f003 fce5 	bl	8008658 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8004c8e:	bf00      	nop
 8004c90:	4b13      	ldr	r3, [pc, #76]	; (8004ce0 <mollifier_slalom_table+0x118>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d1fa      	bne.n	8004c90 <mollifier_slalom_table+0xc8>

	}
//	modeacc = 0;


	angle = angle - input_displacement;
 8004c9a:	4b14      	ldr	r3, [pc, #80]	; (8004cec <mollifier_slalom_table+0x124>)
 8004c9c:	ed93 7a00 	vldr	s14, [r3]
 8004ca0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ca8:	4b10      	ldr	r3, [pc, #64]	; (8004cec <mollifier_slalom_table+0x124>)
 8004caa:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8004cae:	f003 fce1 	bl	8008674 <pl_DriveMotor_stop>

}
 8004cb2:	bf00      	nop
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	f3af 8000 	nop.w
 8004cc0:	f9db22d1 	.word	0xf9db22d1
 8004cc4:	3fdc6a7e 	.word	0x3fdc6a7e
 8004cc8:	362cef38 	.word	0x362cef38
 8004ccc:	3fd78b56 	.word	0x3fd78b56
 8004cd0:	20000524 	.word	0x20000524
 8004cd4:	200004e8 	.word	0x200004e8
 8004cd8:	200004dc 	.word	0x200004dc
 8004cdc:	20000811 	.word	0x20000811
 8004ce0:	20000810 	.word	0x20000810
 8004ce4:	2000080c 	.word	0x2000080c
 8004ce8:	20000534 	.word	0x20000534
 8004cec:	20000268 	.word	0x20000268

08004cf0 <no_frontwall_straight>:


void no_frontwall_straight(void){
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8004cf4:	4b1a      	ldr	r3, [pc, #104]	; (8004d60 <no_frontwall_straight+0x70>)
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8004cfc:	4b18      	ldr	r3, [pc, #96]	; (8004d60 <no_frontwall_straight+0x70>)
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8004d04:	4b16      	ldr	r3, [pc, #88]	; (8004d60 <no_frontwall_straight+0x70>)
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8004d0c:	4b15      	ldr	r3, [pc, #84]	; (8004d64 <no_frontwall_straight+0x74>)
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8004d14:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <no_frontwall_straight+0x74>)
 8004d16:	f04f 0200 	mov.w	r2, #0
 8004d1a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8004d1c:	4b11      	ldr	r3, [pc, #68]	; (8004d64 <no_frontwall_straight+0x74>)
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	609a      	str	r2, [r3, #8]

	g_FrontWallControl_mode=1;
 8004d24:	4b10      	ldr	r3, [pc, #64]	; (8004d68 <no_frontwall_straight+0x78>)
 8004d26:	2201      	movs	r2, #1
 8004d28:	701a      	strb	r2, [r3, #0]
	modeacc = 5;
 8004d2a:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <no_frontwall_straight+0x7c>)
 8004d2c:	2205      	movs	r2, #5
 8004d2e:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004d30:	f003 fc92 	bl	8008658 <pl_DriveMotor_start>
	wait_ms_NoReset(150);
 8004d34:	2096      	movs	r0, #150	; 0x96
 8004d36:	f003 ff67 	bl	8008c08 <wait_ms_NoReset>
//		HAL_Delay(1);
////		if(record_time >= max_record_time){
////			break;
////		}
//	}
	g_FrontWallControl_mode=0;
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <no_frontwall_straight+0x78>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	701a      	strb	r2, [r3, #0]
	modeacc = 0;
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <no_frontwall_straight+0x7c>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8004d46:	f003 fc95 	bl	8008674 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8004d4a:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <no_frontwall_straight+0x80>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <no_frontwall_straight+0x84>)
 8004d50:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8004d52:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <no_frontwall_straight+0x88>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a09      	ldr	r2, [pc, #36]	; (8004d7c <no_frontwall_straight+0x8c>)
 8004d58:	6013      	str	r3, [r2, #0]

}
 8004d5a:	bf00      	nop
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	200004e8 	.word	0x200004e8
 8004d64:	200004dc 	.word	0x200004dc
 8004d68:	2000059d 	.word	0x2000059d
 8004d6c:	20000534 	.word	0x20000534
 8004d70:	20000228 	.word	0x20000228
 8004d74:	20000258 	.word	0x20000258
 8004d78:	2000022c 	.word	0x2000022c
 8004d7c:	2000025c 	.word	0x2000025c

08004d80 <feedforward_const_accel>:
#include "fail_safe.h"

void feedforward_const_accel(float *feedforward_straight,
		float straight_velocity, float straight_acceleration,
		float *feedforward_turning, float turning_velocity,
		float turning_acceleration) {
 8004d80:	b5b0      	push	{r4, r5, r7, lr}
 8004d82:	b088      	sub	sp, #32
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6178      	str	r0, [r7, #20]
 8004d88:	ed87 0a04 	vstr	s0, [r7, #16]
 8004d8c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	ed87 1a01 	vstr	s2, [r7, #4]
 8004d96:	edc7 1a00 	vstr	s3, [r7]

float ImT;//0.00000116 //kg/m^2 ロータ慣性モーメントターン用

if(highspeed_mode == 1){
 8004d9a:	4bd3      	ldr	r3, [pc, #844]	; (80050e8 <feedforward_const_accel+0x368>)
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d102      	bne.n	8004da8 <feedforward_const_accel+0x28>
	ImT=0.00000052;
 8004da2:	4bd2      	ldr	r3, [pc, #840]	; (80050ec <feedforward_const_accel+0x36c>)
 8004da4:	61fb      	str	r3, [r7, #28]
 8004da6:	e001      	b.n	8004dac <feedforward_const_accel+0x2c>
}else{
	ImT=0.00000035;
 8004da8:	4bd1      	ldr	r3, [pc, #836]	; (80050f0 <feedforward_const_accel+0x370>)
 8004daa:	61fb      	str	r3, [r7, #28]

}

	if (straight_velocity >= 0) {
 8004dac:	edd7 7a04 	vldr	s15, [r7, #16]
 8004db0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db8:	db7c      	blt.n	8004eb4 <feedforward_const_accel+0x134>
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f7fb fbec 	bl	8000598 <__aeabi_f2d>
 8004dc0:	a3bd      	add	r3, pc, #756	; (adr r3, 80050b8 <feedforward_const_accel+0x338>)
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	f7fb fc3f 	bl	8000648 <__aeabi_dmul>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4610      	mov	r0, r2
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	f04f 0200 	mov.w	r2, #0
 8004dd6:	4bc7      	ldr	r3, [pc, #796]	; (80050f4 <feedforward_const_accel+0x374>)
 8004dd8:	f7fb fd60 	bl	800089c <__aeabi_ddiv>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4610      	mov	r0, r2
 8004de2:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 8004de4:	a3b6      	add	r3, pc, #728	; (adr r3, 80050c0 <feedforward_const_accel+0x340>)
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	f7fb fd57 	bl	800089c <__aeabi_ddiv>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4610      	mov	r0, r2
 8004df4:	4619      	mov	r1, r3
 8004df6:	f04f 0200 	mov.w	r2, #0
 8004dfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dfe:	f7fb fd4d 	bl	800089c <__aeabi_ddiv>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4610      	mov	r0, r2
 8004e08:	4619      	mov	r1, r3
 8004e0a:	a3af      	add	r3, pc, #700	; (adr r3, 80050c8 <feedforward_const_accel+0x348>)
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	f7fb fa64 	bl	80002dc <__adddf3>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4610      	mov	r0, r2
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	a3ac      	add	r3, pc, #688	; (adr r3, 80050d0 <feedforward_const_accel+0x350>)
 8004e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e22:	f7fb fc11 	bl	8000648 <__aeabi_dmul>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	a3aa      	add	r3, pc, #680	; (adr r3, 80050d8 <feedforward_const_accel+0x358>)
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	f7fb fd32 	bl	800089c <__aeabi_ddiv>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4614      	mov	r4, r2
 8004e3e:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004e40:	ed97 7a04 	vldr	s14, [r7, #16]
 8004e44:	eddf 6aad 	vldr	s13, [pc, #692]	; 80050fc <feedforward_const_accel+0x37c>
 8004e48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e4c:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 80050f8 <feedforward_const_accel+0x378>
 8004e50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e54:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004e58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004e5c:	ee16 0a90 	vmov	r0, s13
 8004e60:	f7fb fb9a 	bl	8000598 <__aeabi_f2d>
 8004e64:	a39e      	add	r3, pc, #632	; (adr r3, 80050e0 <feedforward_const_accel+0x360>)
 8004e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6a:	f7fb fbed 	bl	8000648 <__aeabi_dmul>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4610      	mov	r0, r2
 8004e74:	4619      	mov	r1, r3
 8004e76:	a392      	add	r3, pc, #584	; (adr r3, 80050c0 <feedforward_const_accel+0x340>)
 8004e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7c:	f7fb fd0e 	bl	800089c <__aeabi_ddiv>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4610      	mov	r0, r2
 8004e86:	4619      	mov	r1, r3
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e90:	f7fb fd04 	bl	800089c <__aeabi_ddiv>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4620      	mov	r0, r4
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	f7fb fa1e 	bl	80002dc <__adddf3>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	f7fb fea6 	bl	8000bf8 <__aeabi_d2f>
 8004eac:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	e07b      	b.n	8004fac <feedforward_const_accel+0x22c>
	} else {
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7fb fb6f 	bl	8000598 <__aeabi_f2d>
 8004eba:	a37f      	add	r3, pc, #508	; (adr r3, 80050b8 <feedforward_const_accel+0x338>)
 8004ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec0:	f7fb fbc2 	bl	8000648 <__aeabi_dmul>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4610      	mov	r0, r2
 8004eca:	4619      	mov	r1, r3
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	4b88      	ldr	r3, [pc, #544]	; (80050f4 <feedforward_const_accel+0x374>)
 8004ed2:	f7fb fce3 	bl	800089c <__aeabi_ddiv>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4610      	mov	r0, r2
 8004edc:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 8004ede:	a378      	add	r3, pc, #480	; (adr r3, 80050c0 <feedforward_const_accel+0x340>)
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f7fb fcda 	bl	800089c <__aeabi_ddiv>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4610      	mov	r0, r2
 8004eee:	4619      	mov	r1, r3
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ef8:	f7fb fcd0 	bl	800089c <__aeabi_ddiv>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4610      	mov	r0, r2
 8004f02:	4619      	mov	r1, r3
 8004f04:	a370      	add	r3, pc, #448	; (adr r3, 80050c8 <feedforward_const_accel+0x348>)
 8004f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0a:	f7fb f9e5 	bl	80002d8 <__aeabi_dsub>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4610      	mov	r0, r2
 8004f14:	4619      	mov	r1, r3
 8004f16:	a36e      	add	r3, pc, #440	; (adr r3, 80050d0 <feedforward_const_accel+0x350>)
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	f7fb fb94 	bl	8000648 <__aeabi_dmul>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4610      	mov	r0, r2
 8004f26:	4619      	mov	r1, r3
 8004f28:	a36b      	add	r3, pc, #428	; (adr r3, 80050d8 <feedforward_const_accel+0x358>)
 8004f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2e:	f7fb fcb5 	bl	800089c <__aeabi_ddiv>
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	4614      	mov	r4, r2
 8004f38:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004f3a:	ed97 7a04 	vldr	s14, [r7, #16]
 8004f3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80050fc <feedforward_const_accel+0x37c>
 8004f42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f46:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80050f8 <feedforward_const_accel+0x378>
 8004f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f4e:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004f52:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004f56:	ee16 0a90 	vmov	r0, s13
 8004f5a:	f7fb fb1d 	bl	8000598 <__aeabi_f2d>
 8004f5e:	a360      	add	r3, pc, #384	; (adr r3, 80050e0 <feedforward_const_accel+0x360>)
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	f7fb fb70 	bl	8000648 <__aeabi_dmul>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	4619      	mov	r1, r3
 8004f70:	a353      	add	r3, pc, #332	; (adr r3, 80050c0 <feedforward_const_accel+0x340>)
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	f7fb fc91 	bl	800089c <__aeabi_ddiv>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4610      	mov	r0, r2
 8004f80:	4619      	mov	r1, r3
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f8a:	f7fb fc87 	bl	800089c <__aeabi_ddiv>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	4620      	mov	r0, r4
 8004f94:	4629      	mov	r1, r5
 8004f96:	f7fb f9a1 	bl	80002dc <__adddf3>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	f7fb fe29 	bl	8000bf8 <__aeabi_d2f>
 8004fa6:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	601a      	str	r2, [r3, #0]
	}
	if (turning_velocity >= 0) {
 8004fac:	edd7 7a01 	vldr	s15, [r7, #4]
 8004fb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb8:	f2c0 80a2 	blt.w	8005100 <feedforward_const_accel+0x380>
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004fbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8004fc0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80050f8 <feedforward_const_accel+0x378>
 8004fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fc8:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8004fcc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004fd0:	edd7 7a00 	vldr	s15, [r7]
 8004fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80050fc <feedforward_const_accel+0x37c>
 8004fdc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004fe0:	ee16 0a90 	vmov	r0, s13
 8004fe4:	f7fb fad8 	bl	8000598 <__aeabi_f2d>
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 8004fe8:	a335      	add	r3, pc, #212	; (adr r3, 80050c0 <feedforward_const_accel+0x340>)
 8004fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fee:	f7fb fc55 	bl	800089c <__aeabi_ddiv>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	f04f 0200 	mov.w	r2, #0
 8004ffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005002:	f7fb fc4b 	bl	800089c <__aeabi_ddiv>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4610      	mov	r0, r2
 800500c:	4619      	mov	r1, r3
 800500e:	a32e      	add	r3, pc, #184	; (adr r3, 80050c8 <feedforward_const_accel+0x348>)
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f7fb f962 	bl	80002dc <__adddf3>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4610      	mov	r0, r2
 800501e:	4619      	mov	r1, r3
 8005020:	a32b      	add	r3, pc, #172	; (adr r3, 80050d0 <feedforward_const_accel+0x350>)
 8005022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005026:	f7fb fb0f 	bl	8000648 <__aeabi_dmul>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	4610      	mov	r0, r2
 8005030:	4619      	mov	r1, r3
 8005032:	a329      	add	r3, pc, #164	; (adr r3, 80050d8 <feedforward_const_accel+0x358>)
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	f7fb fc30 	bl	800089c <__aeabi_ddiv>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4614      	mov	r4, r2
 8005042:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8005044:	ed97 7a01 	vldr	s14, [r7, #4]
 8005048:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80050fc <feedforward_const_accel+0x37c>
 800504c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005050:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80050f8 <feedforward_const_accel+0x378>
 8005054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005058:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800505c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005060:	ee16 0a90 	vmov	r0, s13
 8005064:	f7fb fa98 	bl	8000598 <__aeabi_f2d>
 8005068:	a31d      	add	r3, pc, #116	; (adr r3, 80050e0 <feedforward_const_accel+0x360>)
 800506a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506e:	f7fb faeb 	bl	8000648 <__aeabi_dmul>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4610      	mov	r0, r2
 8005078:	4619      	mov	r1, r3
 800507a:	a311      	add	r3, pc, #68	; (adr r3, 80050c0 <feedforward_const_accel+0x340>)
 800507c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005080:	f7fb fc0c 	bl	800089c <__aeabi_ddiv>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4610      	mov	r0, r2
 800508a:	4619      	mov	r1, r3
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005094:	f7fb fc02 	bl	800089c <__aeabi_ddiv>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	4620      	mov	r0, r4
 800509e:	4629      	mov	r1, r5
 80050a0:	f7fb f91c 	bl	80002dc <__adddf3>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4610      	mov	r0, r2
 80050aa:	4619      	mov	r1, r3
 80050ac:	f7fb fda4 	bl	8000bf8 <__aeabi_d2f>
 80050b0:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	601a      	str	r2, [r3, #0]
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
	}
	//*feedforward_straight=0;
	//*feedforward_turning =0;

}
 80050b6:	e0a0      	b.n	80051fa <feedforward_const_accel+0x47a>
 80050b8:	7df8b79b 	.word	0x7df8b79b
 80050bc:	3ed5fdfc 	.word	0x3ed5fdfc
 80050c0:	69243a16 	.word	0x69243a16
 80050c4:	3f9abf15 	.word	0x3f9abf15
 80050c8:	eb1c432d 	.word	0xeb1c432d
 80050cc:	3f1a36e2 	.word	0x3f1a36e2
 80050d0:	51eb851f 	.word	0x51eb851f
 80050d4:	3ff11eb8 	.word	0x3ff11eb8
 80050d8:	b7952d23 	.word	0xb7952d23
 80050dc:	3f569c23 	.word	0x3f569c23
 80050e0:	761b0f50 	.word	0x761b0f50
 80050e4:	3f66bf29 	.word	0x3f66bf29
 80050e8:	20000814 	.word	0x20000814
 80050ec:	350b9621 	.word	0x350b9621
 80050f0:	34bbe7a2 	.word	0x34bbe7a2
 80050f4:	408f4000 	.word	0x408f4000
 80050f8:	421c0000 	.word	0x421c0000
 80050fc:	447a0000 	.word	0x447a0000
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8005100:	edd7 7a07 	vldr	s15, [r7, #28]
 8005104:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 80050f8 <feedforward_const_accel+0x378>
 8005108:	ee67 7a87 	vmul.f32	s15, s15, s14
 800510c:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8005110:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005114:	edd7 7a00 	vldr	s15, [r7]
 8005118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511c:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 80050fc <feedforward_const_accel+0x37c>
 8005120:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005124:	ee16 0a90 	vmov	r0, s13
 8005128:	f7fb fa36 	bl	8000598 <__aeabi_f2d>
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 800512c:	a338      	add	r3, pc, #224	; (adr r3, 8005210 <feedforward_const_accel+0x490>)
 800512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005132:	f7fb fbb3 	bl	800089c <__aeabi_ddiv>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4610      	mov	r0, r2
 800513c:	4619      	mov	r1, r3
 800513e:	f04f 0200 	mov.w	r2, #0
 8005142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005146:	f7fb fba9 	bl	800089c <__aeabi_ddiv>
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	4610      	mov	r0, r2
 8005150:	4619      	mov	r1, r3
 8005152:	a333      	add	r3, pc, #204	; (adr r3, 8005220 <feedforward_const_accel+0x4a0>)
 8005154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005158:	f7fb f8be 	bl	80002d8 <__aeabi_dsub>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4610      	mov	r0, r2
 8005162:	4619      	mov	r1, r3
 8005164:	a330      	add	r3, pc, #192	; (adr r3, 8005228 <feedforward_const_accel+0x4a8>)
 8005166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516a:	f7fb fa6d 	bl	8000648 <__aeabi_dmul>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4610      	mov	r0, r2
 8005174:	4619      	mov	r1, r3
 8005176:	a32e      	add	r3, pc, #184	; (adr r3, 8005230 <feedforward_const_accel+0x4b0>)
 8005178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517c:	f7fb fb8e 	bl	800089c <__aeabi_ddiv>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4614      	mov	r4, r2
 8005186:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8005188:	ed97 7a01 	vldr	s14, [r7, #4]
 800518c:	eddf 6a22 	vldr	s13, [pc, #136]	; 8005218 <feedforward_const_accel+0x498>
 8005190:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005194:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800521c <feedforward_const_accel+0x49c>
 8005198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800519c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80051a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80051a4:	ee16 0a90 	vmov	r0, s13
 80051a8:	f7fb f9f6 	bl	8000598 <__aeabi_f2d>
 80051ac:	a316      	add	r3, pc, #88	; (adr r3, 8005208 <feedforward_const_accel+0x488>)
 80051ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b2:	f7fb fa49 	bl	8000648 <__aeabi_dmul>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4610      	mov	r0, r2
 80051bc:	4619      	mov	r1, r3
 80051be:	a314      	add	r3, pc, #80	; (adr r3, 8005210 <feedforward_const_accel+0x490>)
 80051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c4:	f7fb fb6a 	bl	800089c <__aeabi_ddiv>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4610      	mov	r0, r2
 80051ce:	4619      	mov	r1, r3
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051d8:	f7fb fb60 	bl	800089c <__aeabi_ddiv>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4620      	mov	r0, r4
 80051e2:	4629      	mov	r1, r5
 80051e4:	f7fb f87a 	bl	80002dc <__adddf3>
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	4610      	mov	r0, r2
 80051ee:	4619      	mov	r1, r3
 80051f0:	f7fb fd02 	bl	8000bf8 <__aeabi_d2f>
 80051f4:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	601a      	str	r2, [r3, #0]
}
 80051fa:	bf00      	nop
 80051fc:	3720      	adds	r7, #32
 80051fe:	46bd      	mov	sp, r7
 8005200:	bdb0      	pop	{r4, r5, r7, pc}
 8005202:	bf00      	nop
 8005204:	f3af 8000 	nop.w
 8005208:	761b0f50 	.word	0x761b0f50
 800520c:	3f66bf29 	.word	0x3f66bf29
 8005210:	69243a16 	.word	0x69243a16
 8005214:	3f9abf15 	.word	0x3f9abf15
 8005218:	447a0000 	.word	0x447a0000
 800521c:	421c0000 	.word	0x421c0000
 8005220:	eb1c432d 	.word	0xeb1c432d
 8005224:	3f1a36e2 	.word	0x3f1a36e2
 8005228:	51eb851f 	.word	0x51eb851f
 800522c:	3ff11eb8 	.word	0x3ff11eb8
 8005230:	b7952d23 	.word	0xb7952d23
 8005234:	3f569c23 	.word	0x3f569c23

08005238 <PID_Init>:
struct PID Gyro;

float Ksp, Ksi, Ksd;
float Ktp, Kti, Ktd;

void PID_Init(void) {
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0

	Ksp = 3.1; //3//P項の制御量直進*****************************************************
 800523c:	4b0f      	ldr	r3, [pc, #60]	; (800527c <PID_Init+0x44>)
 800523e:	4a10      	ldr	r2, [pc, #64]	; (8005280 <PID_Init+0x48>)
 8005240:	601a      	str	r2, [r3, #0]
	Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
 8005242:	4b10      	ldr	r3, [pc, #64]	; (8005284 <PID_Init+0x4c>)
 8005244:	4a10      	ldr	r2, [pc, #64]	; (8005288 <PID_Init+0x50>)
 8005246:	601a      	str	r2, [r3, #0]
	Ksd = 0.00; //D項の制御量直進*****************************************************
 8005248:	4b10      	ldr	r3, [pc, #64]	; (800528c <PID_Init+0x54>)
 800524a:	f04f 0200 	mov.w	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
	Ktp = 1.6; //295//P項の制御量旋回*****************************************************
 8005250:	4b0f      	ldr	r3, [pc, #60]	; (8005290 <PID_Init+0x58>)
 8005252:	4a10      	ldr	r2, [pc, #64]	; (8005294 <PID_Init+0x5c>)
 8005254:	601a      	str	r2, [r3, #0]
	Kti = 0.06; //1//.6//I項の制御量旋回*****************************************************
 8005256:	4b10      	ldr	r3, [pc, #64]	; (8005298 <PID_Init+0x60>)
 8005258:	4a10      	ldr	r2, [pc, #64]	; (800529c <PID_Init+0x64>)
 800525a:	601a      	str	r2, [r3, #0]
	Ktd = 0.002; //205//D項の制御量旋回*****************************************************
 800525c:	4b10      	ldr	r3, [pc, #64]	; (80052a0 <PID_Init+0x68>)
 800525e:	4a11      	ldr	r2, [pc, #68]	; (80052a4 <PID_Init+0x6c>)
 8005260:	601a      	str	r2, [r3, #0]
	enc.sigma_error = 0;
 8005262:	4b11      	ldr	r3, [pc, #68]	; (80052a8 <PID_Init+0x70>)
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 800526a:	4b10      	ldr	r3, [pc, #64]	; (80052ac <PID_Init+0x74>)
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	609a      	str	r2, [r3, #8]

}
 8005272:	bf00      	nop
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	20000560 	.word	0x20000560
 8005280:	40466666 	.word	0x40466666
 8005284:	20000564 	.word	0x20000564
 8005288:	3da3d70a 	.word	0x3da3d70a
 800528c:	20000568 	.word	0x20000568
 8005290:	2000056c 	.word	0x2000056c
 8005294:	3fcccccd 	.word	0x3fcccccd
 8005298:	20000570 	.word	0x20000570
 800529c:	3d75c28f 	.word	0x3d75c28f
 80052a0:	20000574 	.word	0x20000574
 80052a4:	3b03126f 	.word	0x3b03126f
 80052a8:	20000540 	.word	0x20000540
 80052ac:	20000550 	.word	0x20000550

080052b0 <clear_Ierror>:

void clear_Ierror(void) {
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
	enc.sigma_error = 0;
 80052b4:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <clear_Ierror+0x20>)
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <clear_Ierror+0x24>)
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	609a      	str	r2, [r3, #8]
}
 80052c4:	bf00      	nop
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	20000540 	.word	0x20000540
 80052d4:	20000550 	.word	0x20000550

080052d8 <EncoderGyro_PID>:


void EncoderGyro_PID(float *PID_s, float *PID_t,float straight_velocity,float turning_velocity) {
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80052e6:	edc7 0a00 	vstr	s1, [r7]
	float PID_stra = 0;
 80052ea:	f04f 0300 	mov.w	r3, #0
 80052ee:	617b      	str	r3, [r7, #20]
	float PID_turn = 0;
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	613b      	str	r3, [r7, #16]
	if(highspeed_mode == 1){
 80052f6:	4b7d      	ldr	r3, [pc, #500]	; (80054ec <EncoderGyro_PID+0x214>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d111      	bne.n	8005322 <EncoderGyro_PID+0x4a>
		Ksp = 5.7; //3//P項の制御量直進*****************************************************
 80052fe:	4b7c      	ldr	r3, [pc, #496]	; (80054f0 <EncoderGyro_PID+0x218>)
 8005300:	4a7c      	ldr	r2, [pc, #496]	; (80054f4 <EncoderGyro_PID+0x21c>)
 8005302:	601a      	str	r2, [r3, #0]
		Ksi = 0.09; //80//5//43//I項の制御量直進*****************************************************
 8005304:	4b7c      	ldr	r3, [pc, #496]	; (80054f8 <EncoderGyro_PID+0x220>)
 8005306:	4a7d      	ldr	r2, [pc, #500]	; (80054fc <EncoderGyro_PID+0x224>)
 8005308:	601a      	str	r2, [r3, #0]
		Ksd = -0.007; //D項の制御量直進*****************************************************
 800530a:	4b7d      	ldr	r3, [pc, #500]	; (8005500 <EncoderGyro_PID+0x228>)
 800530c:	4a7d      	ldr	r2, [pc, #500]	; (8005504 <EncoderGyro_PID+0x22c>)
 800530e:	601a      	str	r2, [r3, #0]
		Ktp = 4.6; //295//P項の制御量旋回*****************************************************
 8005310:	4b7d      	ldr	r3, [pc, #500]	; (8005508 <EncoderGyro_PID+0x230>)
 8005312:	4a7e      	ldr	r2, [pc, #504]	; (800550c <EncoderGyro_PID+0x234>)
 8005314:	601a      	str	r2, [r3, #0]
		Kti = 0.07; //1//.6//I項の制御量旋回*****************************************************
 8005316:	4b7e      	ldr	r3, [pc, #504]	; (8005510 <EncoderGyro_PID+0x238>)
 8005318:	4a7e      	ldr	r2, [pc, #504]	; (8005514 <EncoderGyro_PID+0x23c>)
 800531a:	601a      	str	r2, [r3, #0]
		Ktd = -0.01; //205//D項の制御量旋回*****************************************************
 800531c:	4b7e      	ldr	r3, [pc, #504]	; (8005518 <EncoderGyro_PID+0x240>)
 800531e:	4a7f      	ldr	r2, [pc, #508]	; (800551c <EncoderGyro_PID+0x244>)
 8005320:	601a      	str	r2, [r3, #0]

//	if (straight_velocity == 0) {
//		reset_speed();
//	}
	//straight.velocity>=2500 && fabs(angle_speed)<100
	if (fabs(angle_speed) < 120 && straight_velocity >= 100 && modeacc!=4) {
 8005322:	4b7f      	ldr	r3, [pc, #508]	; (8005520 <EncoderGyro_PID+0x248>)
 8005324:	edd3 7a00 	vldr	s15, [r3]
 8005328:	eef0 7ae7 	vabs.f32	s15, s15
 800532c:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8005524 <EncoderGyro_PID+0x24c>
 8005330:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005338:	d520      	bpl.n	800537c <EncoderGyro_PID+0xa4>
 800533a:	edd7 7a01 	vldr	s15, [r7, #4]
 800533e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8005528 <EncoderGyro_PID+0x250>
 8005342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800534a:	db17      	blt.n	800537c <EncoderGyro_PID+0xa4>
 800534c:	4b77      	ldr	r3, [pc, #476]	; (800552c <EncoderGyro_PID+0x254>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b04      	cmp	r3, #4
 8005352:	d013      	beq.n	800537c <EncoderGyro_PID+0xa4>
		enc.error = (straight_velocity - (fusion_speedR + fusion_speedL) / 2);
 8005354:	4b76      	ldr	r3, [pc, #472]	; (8005530 <EncoderGyro_PID+0x258>)
 8005356:	ed93 7a00 	vldr	s14, [r3]
 800535a:	4b76      	ldr	r3, [pc, #472]	; (8005534 <EncoderGyro_PID+0x25c>)
 800535c:	edd3 7a00 	vldr	s15, [r3]
 8005360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005364:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005368:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800536c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005370:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005374:	4b70      	ldr	r3, [pc, #448]	; (8005538 <EncoderGyro_PID+0x260>)
 8005376:	edc3 7a00 	vstr	s15, [r3]
 800537a:	e01a      	b.n	80053b2 <EncoderGyro_PID+0xda>
	} else {
		enc.error = (straight_velocity - (E_speedR + E_speedL) / 2);
 800537c:	4b6f      	ldr	r3, [pc, #444]	; (800553c <EncoderGyro_PID+0x264>)
 800537e:	ed93 7a00 	vldr	s14, [r3]
 8005382:	4b6f      	ldr	r3, [pc, #444]	; (8005540 <EncoderGyro_PID+0x268>)
 8005384:	edd3 7a00 	vldr	s15, [r3]
 8005388:	ee37 7a27 	vadd.f32	s14, s14, s15
 800538c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005390:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005394:	ed97 7a01 	vldr	s14, [r7, #4]
 8005398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800539c:	4b66      	ldr	r3, [pc, #408]	; (8005538 <EncoderGyro_PID+0x260>)
 800539e:	edc3 7a00 	vstr	s15, [r3]
		fusion_speedL = E_lpf_speedL;
 80053a2:	4b68      	ldr	r3, [pc, #416]	; (8005544 <EncoderGyro_PID+0x26c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a63      	ldr	r2, [pc, #396]	; (8005534 <EncoderGyro_PID+0x25c>)
 80053a8:	6013      	str	r3, [r2, #0]
		fusion_speedR = E_lpf_speedR;
 80053aa:	4b67      	ldr	r3, [pc, #412]	; (8005548 <EncoderGyro_PID+0x270>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a60      	ldr	r2, [pc, #384]	; (8005530 <EncoderGyro_PID+0x258>)
 80053b0:	6013      	str	r3, [r2, #0]
	}
	//enc.error = (straight.velocity - (fusion_speedR + fusion_speedL) / 2);
	enc.delta_error = enc.error - enc.old_error;
 80053b2:	4b61      	ldr	r3, [pc, #388]	; (8005538 <EncoderGyro_PID+0x260>)
 80053b4:	ed93 7a00 	vldr	s14, [r3]
 80053b8:	4b5f      	ldr	r3, [pc, #380]	; (8005538 <EncoderGyro_PID+0x260>)
 80053ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80053be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053c2:	4b5d      	ldr	r3, [pc, #372]	; (8005538 <EncoderGyro_PID+0x260>)
 80053c4:	edc3 7a03 	vstr	s15, [r3, #12]
	enc.old_error = enc.error;
 80053c8:	4b5b      	ldr	r3, [pc, #364]	; (8005538 <EncoderGyro_PID+0x260>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a5a      	ldr	r2, [pc, #360]	; (8005538 <EncoderGyro_PID+0x260>)
 80053ce:	6053      	str	r3, [r2, #4]
	enc.sigma_error += enc.error;
 80053d0:	4b59      	ldr	r3, [pc, #356]	; (8005538 <EncoderGyro_PID+0x260>)
 80053d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80053d6:	4b58      	ldr	r3, [pc, #352]	; (8005538 <EncoderGyro_PID+0x260>)
 80053d8:	edd3 7a00 	vldr	s15, [r3]
 80053dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053e0:	4b55      	ldr	r3, [pc, #340]	; (8005538 <EncoderGyro_PID+0x260>)
 80053e2:	edc3 7a02 	vstr	s15, [r3, #8]
	PID_stra = Ksp * enc.error + Ksi * enc.sigma_error + Ksd * enc.delta_error;
 80053e6:	4b54      	ldr	r3, [pc, #336]	; (8005538 <EncoderGyro_PID+0x260>)
 80053e8:	ed93 7a00 	vldr	s14, [r3]
 80053ec:	4b40      	ldr	r3, [pc, #256]	; (80054f0 <EncoderGyro_PID+0x218>)
 80053ee:	edd3 7a00 	vldr	s15, [r3]
 80053f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053f6:	4b50      	ldr	r3, [pc, #320]	; (8005538 <EncoderGyro_PID+0x260>)
 80053f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80053fc:	4b3e      	ldr	r3, [pc, #248]	; (80054f8 <EncoderGyro_PID+0x220>)
 80053fe:	edd3 7a00 	vldr	s15, [r3]
 8005402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005406:	ee37 7a27 	vadd.f32	s14, s14, s15
 800540a:	4b4b      	ldr	r3, [pc, #300]	; (8005538 <EncoderGyro_PID+0x260>)
 800540c:	edd3 6a03 	vldr	s13, [r3, #12]
 8005410:	4b3b      	ldr	r3, [pc, #236]	; (8005500 <EncoderGyro_PID+0x228>)
 8005412:	edd3 7a00 	vldr	s15, [r3]
 8005416:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800541a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800541e:	edc7 7a05 	vstr	s15, [r7, #20]



//	if ((g_WallControl_mode == 3 || g_WallControl_mode == 1)
//			&& (highspeed_mode == 1)) {
		Gyro.error = (turning_velocity - angle_speed);
 8005422:	4b3f      	ldr	r3, [pc, #252]	; (8005520 <EncoderGyro_PID+0x248>)
 8005424:	edd3 7a00 	vldr	s15, [r3]
 8005428:	ed97 7a00 	vldr	s14, [r7]
 800542c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005430:	4b46      	ldr	r3, [pc, #280]	; (800554c <EncoderGyro_PID+0x274>)
 8005432:	edc3 7a00 	vstr	s15, [r3]
		Gyro.delta_error = Gyro.error - Gyro.old_error;
 8005436:	4b45      	ldr	r3, [pc, #276]	; (800554c <EncoderGyro_PID+0x274>)
 8005438:	ed93 7a00 	vldr	s14, [r3]
 800543c:	4b43      	ldr	r3, [pc, #268]	; (800554c <EncoderGyro_PID+0x274>)
 800543e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005442:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005446:	4b41      	ldr	r3, [pc, #260]	; (800554c <EncoderGyro_PID+0x274>)
 8005448:	edc3 7a03 	vstr	s15, [r3, #12]
		Gyro.old_error = Gyro.error;
 800544c:	4b3f      	ldr	r3, [pc, #252]	; (800554c <EncoderGyro_PID+0x274>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a3e      	ldr	r2, [pc, #248]	; (800554c <EncoderGyro_PID+0x274>)
 8005452:	6053      	str	r3, [r2, #4]
		Gyro.sigma_error += Gyro.error;
 8005454:	4b3d      	ldr	r3, [pc, #244]	; (800554c <EncoderGyro_PID+0x274>)
 8005456:	ed93 7a02 	vldr	s14, [r3, #8]
 800545a:	4b3c      	ldr	r3, [pc, #240]	; (800554c <EncoderGyro_PID+0x274>)
 800545c:	edd3 7a00 	vldr	s15, [r3]
 8005460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005464:	4b39      	ldr	r3, [pc, #228]	; (800554c <EncoderGyro_PID+0x274>)
 8005466:	edc3 7a02 	vstr	s15, [r3, #8]
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 800546a:	4b38      	ldr	r3, [pc, #224]	; (800554c <EncoderGyro_PID+0x274>)
 800546c:	ed93 7a00 	vldr	s14, [r3]
 8005470:	4b25      	ldr	r3, [pc, #148]	; (8005508 <EncoderGyro_PID+0x230>)
 8005472:	edd3 7a00 	vldr	s15, [r3]
 8005476:	ee27 7a27 	vmul.f32	s14, s14, s15
 800547a:	4b34      	ldr	r3, [pc, #208]	; (800554c <EncoderGyro_PID+0x274>)
 800547c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005480:	4b23      	ldr	r3, [pc, #140]	; (8005510 <EncoderGyro_PID+0x238>)
 8005482:	edd3 7a00 	vldr	s15, [r3]
 8005486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800548a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Ktd * Gyro.delta_error;
 800548e:	4b2f      	ldr	r3, [pc, #188]	; (800554c <EncoderGyro_PID+0x274>)
 8005490:	edd3 6a03 	vldr	s13, [r3, #12]
 8005494:	4b20      	ldr	r3, [pc, #128]	; (8005518 <EncoderGyro_PID+0x240>)
 8005496:	edd3 7a00 	vldr	s15, [r3]
 800549a:	ee66 7aa7 	vmul.f32	s15, s13, s15
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 800549e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054a2:	edc7 7a04 	vstr	s15, [r7, #16]
//
//		*PID_all_R += PID_turn;
//		*PID_all_L -= PID_turn;
//	}

	*PID_s = PID_stra / MAXMOTOR * g_V_battery_mean;
 80054a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80054aa:	eddf 6a29 	vldr	s13, [pc, #164]	; 8005550 <EncoderGyro_PID+0x278>
 80054ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80054b2:	4b28      	ldr	r3, [pc, #160]	; (8005554 <EncoderGyro_PID+0x27c>)
 80054b4:	edd3 7a00 	vldr	s15, [r3]
 80054b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	edc3 7a00 	vstr	s15, [r3]
	*PID_t = PID_turn / MAXMOTOR * g_V_battery_mean;
 80054c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80054c6:	eddf 6a22 	vldr	s13, [pc, #136]	; 8005550 <EncoderGyro_PID+0x278>
 80054ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80054ce:	4b21      	ldr	r3, [pc, #132]	; (8005554 <EncoderGyro_PID+0x27c>)
 80054d0:	edd3 7a00 	vldr	s15, [r3]
 80054d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	edc3 7a00 	vstr	s15, [r3]

}
 80054de:	bf00      	nop
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	20000814 	.word	0x20000814
 80054f0:	20000560 	.word	0x20000560
 80054f4:	40b66666 	.word	0x40b66666
 80054f8:	20000564 	.word	0x20000564
 80054fc:	3db851ec 	.word	0x3db851ec
 8005500:	20000568 	.word	0x20000568
 8005504:	bbe56042 	.word	0xbbe56042
 8005508:	2000056c 	.word	0x2000056c
 800550c:	40933333 	.word	0x40933333
 8005510:	20000570 	.word	0x20000570
 8005514:	3d8f5c29 	.word	0x3d8f5c29
 8005518:	20000574 	.word	0x20000574
 800551c:	bc23d70a 	.word	0xbc23d70a
 8005520:	2000026c 	.word	0x2000026c
 8005524:	42f00000 	.word	0x42f00000
 8005528:	42c80000 	.word	0x42c80000
 800552c:	20000534 	.word	0x20000534
 8005530:	2000025c 	.word	0x2000025c
 8005534:	20000258 	.word	0x20000258
 8005538:	20000540 	.word	0x20000540
 800553c:	2000022c 	.word	0x2000022c
 8005540:	20000228 	.word	0x20000228
 8005544:	20000238 	.word	0x20000238
 8005548:	2000023c 	.word	0x2000023c
 800554c:	20000550 	.word	0x20000550
 8005550:	44d1e000 	.word	0x44d1e000
 8005554:	200004d8 	.word	0x200004d8

08005558 <init_WallControl>:
float g_CenterSlantR90_diff, g_CenterSlantL90_diff, g_CenterSlantR45_diff,
		g_CenterSlantL45_diff;



void init_WallControl(void) {
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
	g_WallControl_mode = 0;
 800555c:	4b3f      	ldr	r3, [pc, #252]	; (800565c <init_WallControl+0x104>)
 800555e:	2200      	movs	r2, #0
 8005560:	701a      	strb	r2, [r3, #0]
	g_FrontWallControl_mode = 0;
 8005562:	4b3f      	ldr	r3, [pc, #252]	; (8005660 <init_WallControl+0x108>)
 8005564:	2200      	movs	r2, #0
 8005566:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus = 0;
 8005568:	4b3e      	ldr	r3, [pc, #248]	; (8005664 <init_WallControl+0x10c>)
 800556a:	2200      	movs	r2, #0
 800556c:	701a      	strb	r2, [r3, #0]
	g_wallCut_mode = 0;
 800556e:	4b3e      	ldr	r3, [pc, #248]	; (8005668 <init_WallControl+0x110>)
 8005570:	2200      	movs	r2, #0
 8005572:	701a      	strb	r2, [r3, #0]
	StabilityCount_reset = 0;
 8005574:	4b3d      	ldr	r3, [pc, #244]	; (800566c <init_WallControl+0x114>)
 8005576:	2200      	movs	r2, #0
 8005578:	701a      	strb	r2, [r3, #0]
	StabilityCount_L = 0;
 800557a:	4b3d      	ldr	r3, [pc, #244]	; (8005670 <init_WallControl+0x118>)
 800557c:	2200      	movs	r2, #0
 800557e:	701a      	strb	r2, [r3, #0]
	StabilityCount_R = 0;
 8005580:	4b3c      	ldr	r3, [pc, #240]	; (8005674 <init_WallControl+0x11c>)
 8005582:	2200      	movs	r2, #0
 8005584:	701a      	strb	r2, [r3, #0]
	g_sensor_max_l = CENTER_L;
 8005586:	4b3c      	ldr	r3, [pc, #240]	; (8005678 <init_WallControl+0x120>)
 8005588:	4a3c      	ldr	r2, [pc, #240]	; (800567c <init_WallControl+0x124>)
 800558a:	601a      	str	r2, [r3, #0]
	g_sensor_max_r = CENTER_R;
 800558c:	4b3c      	ldr	r3, [pc, #240]	; (8005680 <init_WallControl+0x128>)
 800558e:	4a3d      	ldr	r2, [pc, #244]	; (8005684 <init_WallControl+0x12c>)
 8005590:	601a      	str	r2, [r3, #0]
	g_skewer_displacement = SKEWER_LIMIT;
 8005592:	4b3d      	ldr	r3, [pc, #244]	; (8005688 <init_WallControl+0x130>)
 8005594:	4a3d      	ldr	r2, [pc, #244]	; (800568c <init_WallControl+0x134>)
 8005596:	601a      	str	r2, [r3, #0]

	NoWallCountL90 = 0;
 8005598:	4b3d      	ldr	r3, [pc, #244]	; (8005690 <init_WallControl+0x138>)
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]
	NoWallCountR90 = 0;
 800559e:	4b3d      	ldr	r3, [pc, #244]	; (8005694 <init_WallControl+0x13c>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]
	NoWallCountL45 = 0;
 80055a4:	4b3c      	ldr	r3, [pc, #240]	; (8005698 <init_WallControl+0x140>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]
	NoWallCountR45 = 0;
 80055aa:	4b3c      	ldr	r3, [pc, #240]	; (800569c <init_WallControl+0x144>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
	NoWallCountL45slant = 0;
 80055b0:	4b3b      	ldr	r3, [pc, #236]	; (80056a0 <init_WallControl+0x148>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
	NoWallCountR45slant = 0;
 80055b6:	4b3b      	ldr	r3, [pc, #236]	; (80056a4 <init_WallControl+0x14c>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]

	NoWallDisplacementL90 = 0;
 80055bc:	4b3a      	ldr	r3, [pc, #232]	; (80056a8 <init_WallControl+0x150>)
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR90 = 0;
 80055c4:	4b39      	ldr	r3, [pc, #228]	; (80056ac <init_WallControl+0x154>)
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 80055cc:	4b38      	ldr	r3, [pc, #224]	; (80056b0 <init_WallControl+0x158>)
 80055ce:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80055d2:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 80055d4:	4b37      	ldr	r3, [pc, #220]	; (80056b4 <init_WallControl+0x15c>)
 80055d6:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80055da:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant = 0;
 80055dc:	4b36      	ldr	r3, [pc, #216]	; (80056b8 <init_WallControl+0x160>)
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant = 0;
 80055e4:	4b35      	ldr	r3, [pc, #212]	; (80056bc <init_WallControl+0x164>)
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant2 = 0;
 80055ec:	4b34      	ldr	r3, [pc, #208]	; (80056c0 <init_WallControl+0x168>)
 80055ee:	f04f 0200 	mov.w	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant2 = 0;
 80055f4:	4b33      	ldr	r3, [pc, #204]	; (80056c4 <init_WallControl+0x16c>)
 80055f6:	f04f 0200 	mov.w	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]

	NoWallCountL45_flag = 0;
 80055fc:	4b32      	ldr	r3, [pc, #200]	; (80056c8 <init_WallControl+0x170>)
 80055fe:	2200      	movs	r2, #0
 8005600:	701a      	strb	r2, [r3, #0]
	NoWallCountR45_flag = 0;
 8005602:	4b32      	ldr	r3, [pc, #200]	; (80056cc <init_WallControl+0x174>)
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]
	NoWallCountL45slant_flag = 0;
 8005608:	4b31      	ldr	r3, [pc, #196]	; (80056d0 <init_WallControl+0x178>)
 800560a:	2200      	movs	r2, #0
 800560c:	701a      	strb	r2, [r3, #0]
	NoWallCountR45slant_flag = 0;
 800560e:	4b31      	ldr	r3, [pc, #196]	; (80056d4 <init_WallControl+0x17c>)
 8005610:	2200      	movs	r2, #0
 8005612:	701a      	strb	r2, [r3, #0]
	slantWallControlL_flag = 0;
 8005614:	4b30      	ldr	r3, [pc, #192]	; (80056d8 <init_WallControl+0x180>)
 8005616:	2200      	movs	r2, #0
 8005618:	701a      	strb	r2, [r3, #0]
	slantWallControlR_flag = 0;
 800561a:	4b30      	ldr	r3, [pc, #192]	; (80056dc <init_WallControl+0x184>)
 800561c:	2200      	movs	r2, #0
 800561e:	701a      	strb	r2, [r3, #0]

	front_wall_break_90 = 0;
 8005620:	4b2f      	ldr	r3, [pc, #188]	; (80056e0 <init_WallControl+0x188>)
 8005622:	2200      	movs	r2, #0
 8005624:	701a      	strb	r2, [r3, #0]
	front_wall_break_45 = 0;
 8005626:	4b2f      	ldr	r3, [pc, #188]	; (80056e4 <init_WallControl+0x18c>)
 8005628:	2200      	movs	r2, #0
 800562a:	701a      	strb	r2, [r3, #0]
	front_wall_break_45slant = 0;
 800562c:	4b2e      	ldr	r3, [pc, #184]	; (80056e8 <init_WallControl+0x190>)
 800562e:	2200      	movs	r2, #0
 8005630:	701a      	strb	r2, [r3, #0]

	g_sensor_max_fl = 0;
 8005632:	4b2e      	ldr	r3, [pc, #184]	; (80056ec <init_WallControl+0x194>)
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr = 0;
 800563a:	4b2d      	ldr	r3, [pc, #180]	; (80056f0 <init_WallControl+0x198>)
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
	g_sensor_max_fl_slant = 0;
 8005642:	4b2c      	ldr	r3, [pc, #176]	; (80056f4 <init_WallControl+0x19c>)
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr_slant = 0;
 800564a:	4b2b      	ldr	r3, [pc, #172]	; (80056f8 <init_WallControl+0x1a0>)
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	601a      	str	r2, [r3, #0]
}
 8005652:	bf00      	nop
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	2000059c 	.word	0x2000059c
 8005660:	2000059d 	.word	0x2000059d
 8005664:	2000059f 	.word	0x2000059f
 8005668:	2000059e 	.word	0x2000059e
 800566c:	200005a1 	.word	0x200005a1
 8005670:	200005a2 	.word	0x200005a2
 8005674:	200005a3 	.word	0x200005a3
 8005678:	200005a4 	.word	0x200005a4
 800567c:	44be6000 	.word	0x44be6000
 8005680:	200005a8 	.word	0x200005a8
 8005684:	44974000 	.word	0x44974000
 8005688:	200005ac 	.word	0x200005ac
 800568c:	41a00000 	.word	0x41a00000
 8005690:	200005c4 	.word	0x200005c4
 8005694:	200005c0 	.word	0x200005c0
 8005698:	200005cc 	.word	0x200005cc
 800569c:	200005c8 	.word	0x200005c8
 80056a0:	200005d4 	.word	0x200005d4
 80056a4:	200005d0 	.word	0x200005d0
 80056a8:	200005dc 	.word	0x200005dc
 80056ac:	200005d8 	.word	0x200005d8
 80056b0:	200005e4 	.word	0x200005e4
 80056b4:	200005e0 	.word	0x200005e0
 80056b8:	200005ec 	.word	0x200005ec
 80056bc:	200005e8 	.word	0x200005e8
 80056c0:	200005f4 	.word	0x200005f4
 80056c4:	200005f0 	.word	0x200005f0
 80056c8:	200005f8 	.word	0x200005f8
 80056cc:	200005f9 	.word	0x200005f9
 80056d0:	200005fa 	.word	0x200005fa
 80056d4:	200005fb 	.word	0x200005fb
 80056d8:	200005fc 	.word	0x200005fc
 80056dc:	200005fd 	.word	0x200005fd
 80056e0:	200005fe 	.word	0x200005fe
 80056e4:	200005ff 	.word	0x200005ff
 80056e8:	20000600 	.word	0x20000600
 80056ec:	20000604 	.word	0x20000604
 80056f0:	20000608 	.word	0x20000608
 80056f4:	2000060c 	.word	0x2000060c
 80056f8:	20000610 	.word	0x20000610
 80056fc:	00000000 	.word	0x00000000

08005700 <calWallConrol>:


float calWallConrol(void) {
 8005700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005704:	b0aa      	sub	sp, #168	; 0xa8
 8005706:	af00      	add	r7, sp, #0
	float PID_wall,PID_w;
	float sensor_gain_p, sensor_gain_d;
	float sensorWall_L, sensorWall_R;
	float wallcut_threshold_L, wallcut_threshold_R;

	if (highspeed_mode == 1) {
 8005708:	4ba1      	ldr	r3, [pc, #644]	; (8005990 <calWallConrol+0x290>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d13d      	bne.n	800578c <calWallConrol+0x8c>
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_SHORT_L;
 8005710:	4ba0      	ldr	r3, [pc, #640]	; (8005994 <calWallConrol+0x294>)
 8005712:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_SHORT_R;
 8005716:	4ba0      	ldr	r3, [pc, #640]	; (8005998 <calWallConrol+0x298>)
 8005718:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		if (straight.velocity > 1000) {
 800571c:	4b9f      	ldr	r3, [pc, #636]	; (800599c <calWallConrol+0x29c>)
 800571e:	edd3 7a00 	vldr	s15, [r3]
 8005722:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 80059a0 <calWallConrol+0x2a0>
 8005726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800572a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800572e:	dd06      	ble.n	800573e <calWallConrol+0x3e>
			sensor_gain_p = SENSOR_GAIN_SHORT_P * 1000;
 8005730:	4b9c      	ldr	r3, [pc, #624]	; (80059a4 <calWallConrol+0x2a4>)
 8005732:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * 1000;
 8005736:	4b9c      	ldr	r3, [pc, #624]	; (80059a8 <calWallConrol+0x2a8>)
 8005738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800573c:	e052      	b.n	80057e4 <calWallConrol+0xe4>
		} else {
			sensor_gain_p = SENSOR_GAIN_SHORT_P * straight.velocity;
 800573e:	4b97      	ldr	r3, [pc, #604]	; (800599c <calWallConrol+0x29c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f7fa ff28 	bl	8000598 <__aeabi_f2d>
 8005748:	a389      	add	r3, pc, #548	; (adr r3, 8005970 <calWallConrol+0x270>)
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	f7fa ff7b 	bl	8000648 <__aeabi_dmul>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4610      	mov	r0, r2
 8005758:	4619      	mov	r1, r3
 800575a:	f7fb fa4d 	bl	8000bf8 <__aeabi_d2f>
 800575e:	4603      	mov	r3, r0
 8005760:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * straight.velocity;
 8005764:	4b8d      	ldr	r3, [pc, #564]	; (800599c <calWallConrol+0x29c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4618      	mov	r0, r3
 800576a:	f7fa ff15 	bl	8000598 <__aeabi_f2d>
 800576e:	a382      	add	r3, pc, #520	; (adr r3, 8005978 <calWallConrol+0x278>)
 8005770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005774:	f7fa ff68 	bl	8000648 <__aeabi_dmul>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	4610      	mov	r0, r2
 800577e:	4619      	mov	r1, r3
 8005780:	f7fb fa3a 	bl	8000bf8 <__aeabi_d2f>
 8005784:	4603      	mov	r3, r0
 8005786:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800578a:	e02b      	b.n	80057e4 <calWallConrol+0xe4>
		}
	} else {
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_L;
 800578c:	4b87      	ldr	r3, [pc, #540]	; (80059ac <calWallConrol+0x2ac>)
 800578e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_R;
 8005792:	4b87      	ldr	r3, [pc, #540]	; (80059b0 <calWallConrol+0x2b0>)
 8005794:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sensor_gain_p = SENSOR_GAIN_P * straight.velocity;
 8005798:	4b80      	ldr	r3, [pc, #512]	; (800599c <calWallConrol+0x29c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4618      	mov	r0, r3
 800579e:	f7fa fefb 	bl	8000598 <__aeabi_f2d>
 80057a2:	a377      	add	r3, pc, #476	; (adr r3, 8005980 <calWallConrol+0x280>)
 80057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a8:	f7fa ff4e 	bl	8000648 <__aeabi_dmul>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4610      	mov	r0, r2
 80057b2:	4619      	mov	r1, r3
 80057b4:	f7fb fa20 	bl	8000bf8 <__aeabi_d2f>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		sensor_gain_d = SENSOR_GAIN_D * straight.velocity;
 80057be:	4b77      	ldr	r3, [pc, #476]	; (800599c <calWallConrol+0x29c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fa fee8 	bl	8000598 <__aeabi_f2d>
 80057c8:	a36f      	add	r3, pc, #444	; (adr r3, 8005988 <calWallConrol+0x288>)
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	f7fa ff3b 	bl	8000648 <__aeabi_dmul>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4610      	mov	r0, r2
 80057d8:	4619      	mov	r1, r3
 80057da:	f7fb fa0d 	bl	8000bf8 <__aeabi_d2f>
 80057de:	4603      	mov	r3, r0
 80057e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	if (g_sensor[SENSOR_LEFT][0] < SENSOR_L_MIN) {
 80057e4:	4b73      	ldr	r3, [pc, #460]	; (80059b4 <calWallConrol+0x2b4>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f240 2289 	movw	r2, #649	; 0x289
 80057ec:	4293      	cmp	r3, r2
 80057ee:	dc03      	bgt.n	80057f8 <calWallConrol+0xf8>
		sensorWall_L = SENSOR_L_MIN;
 80057f0:	4b71      	ldr	r3, [pc, #452]	; (80059b8 <calWallConrol+0x2b8>)
 80057f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057f6:	e011      	b.n	800581c <calWallConrol+0x11c>
	} else if (g_sensor[SENSOR_LEFT][0] > SENSOR_L_MAX) {
 80057f8:	4b6e      	ldr	r3, [pc, #440]	; (80059b4 <calWallConrol+0x2b4>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8005800:	4293      	cmp	r3, r2
 8005802:	dd03      	ble.n	800580c <calWallConrol+0x10c>
		sensorWall_L = SENSOR_L_MAX;
 8005804:	4b6d      	ldr	r3, [pc, #436]	; (80059bc <calWallConrol+0x2bc>)
 8005806:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800580a:	e007      	b.n	800581c <calWallConrol+0x11c>
	} else {
		sensorWall_L = (float) (g_sensor[SENSOR_LEFT][0]);
 800580c:	4b69      	ldr	r3, [pc, #420]	; (80059b4 <calWallConrol+0x2b4>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	ee07 3a90 	vmov	s15, r3
 8005814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005818:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	}
	if (g_sensor[SENSOR_RIGHT][0] < SENSOR_R_MIN) {
 800581c:	4b65      	ldr	r3, [pc, #404]	; (80059b4 <calWallConrol+0x2b4>)
 800581e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005822:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005826:	da03      	bge.n	8005830 <calWallConrol+0x130>
		sensorWall_R = SENSOR_R_MIN;
 8005828:	4b65      	ldr	r3, [pc, #404]	; (80059c0 <calWallConrol+0x2c0>)
 800582a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800582e:	e012      	b.n	8005856 <calWallConrol+0x156>
	} else if (g_sensor[SENSOR_RIGHT][0] > SENSOR_R_MAX) {
 8005830:	4b60      	ldr	r3, [pc, #384]	; (80059b4 <calWallConrol+0x2b4>)
 8005832:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005836:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800583a:	dd03      	ble.n	8005844 <calWallConrol+0x144>
		sensorWall_R = SENSOR_R_MAX;
 800583c:	4b61      	ldr	r3, [pc, #388]	; (80059c4 <calWallConrol+0x2c4>)
 800583e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005842:	e008      	b.n	8005856 <calWallConrol+0x156>
	} else {
		sensorWall_R = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005844:	4b5b      	ldr	r3, [pc, #364]	; (80059b4 <calWallConrol+0x2b4>)
 8005846:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005852:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
//
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;

	PID_wall = 0;
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PID_w = 0;
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	66bb      	str	r3, [r7, #104]	; 0x68
	if (g_WallControl_mode == 0) {
 8005864:	4b58      	ldr	r3, [pc, #352]	; (80059c8 <calWallConrol+0x2c8>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d11c      	bne.n	80058a6 <calWallConrol+0x1a6>
		g_WallControlStatus = 0;
 800586c:	4b57      	ldr	r3, [pc, #348]	; (80059cc <calWallConrol+0x2cc>)
 800586e:	2200      	movs	r2, #0
 8005870:	701a      	strb	r2, [r3, #0]
		StabilityCount_reset = 0;
 8005872:	4b57      	ldr	r3, [pc, #348]	; (80059d0 <calWallConrol+0x2d0>)
 8005874:	2200      	movs	r2, #0
 8005876:	701a      	strb	r2, [r3, #0]
		StabilityCount_L = 0;
 8005878:	4b56      	ldr	r3, [pc, #344]	; (80059d4 <calWallConrol+0x2d4>)
 800587a:	2200      	movs	r2, #0
 800587c:	701a      	strb	r2, [r3, #0]
		StabilityCount_R = 0;
 800587e:	4b56      	ldr	r3, [pc, #344]	; (80059d8 <calWallConrol+0x2d8>)
 8005880:	2200      	movs	r2, #0
 8005882:	701a      	strb	r2, [r3, #0]
		g_sensor_max_l = CENTER_L;
 8005884:	4b55      	ldr	r3, [pc, #340]	; (80059dc <calWallConrol+0x2dc>)
 8005886:	4a56      	ldr	r2, [pc, #344]	; (80059e0 <calWallConrol+0x2e0>)
 8005888:	601a      	str	r2, [r3, #0]
		g_sensor_max_r = CENTER_R;
 800588a:	4b56      	ldr	r3, [pc, #344]	; (80059e4 <calWallConrol+0x2e4>)
 800588c:	4a56      	ldr	r2, [pc, #344]	; (80059e8 <calWallConrol+0x2e8>)
 800588e:	601a      	str	r2, [r3, #0]
		g_skewer_displacement = SKEWER_LIMIT;
 8005890:	4b56      	ldr	r3, [pc, #344]	; (80059ec <calWallConrol+0x2ec>)
 8005892:	4a57      	ldr	r2, [pc, #348]	; (80059f0 <calWallConrol+0x2f0>)
 8005894:	601a      	str	r2, [r3, #0]
		PID_wall = 0;
 8005896:	f04f 0300 	mov.w	r3, #0
 800589a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		pl_yellow_LED_off();
 800589e:	f002 f909 	bl	8007ab4 <pl_yellow_LED_off>
 80058a2:	f001 ba4c 	b.w	8006d3e <calWallConrol+0x163e>

	} else if (g_WallControl_mode == 1) {
 80058a6:	4b48      	ldr	r3, [pc, #288]	; (80059c8 <calWallConrol+0x2c8>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	f040 82ef 	bne.w	8005e8e <calWallConrol+0x78e>

		// 左壁の有無の判定
		if (((g_WallControlStatus >> 0) & 1) == 1) {
 80058b0:	4b46      	ldr	r3, [pc, #280]	; (80059cc <calWallConrol+0x2cc>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 809d 	beq.w	80059f8 <calWallConrol+0x2f8>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L
 80058be:	4b3d      	ldr	r3, [pc, #244]	; (80059b4 <calWallConrol+0x2b4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80058c6:	db16      	blt.n	80058f6 <calWallConrol+0x1f6>
					|| fabs(g_sensor_diff[SENSOR_LEFT]) > wallcut_threshold_L) {
 80058c8:	4b4a      	ldr	r3, [pc, #296]	; (80059f4 <calWallConrol+0x2f4>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fa fe51 	bl	8000574 <__aeabi_i2d>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4690      	mov	r8, r2
 80058d8:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80058dc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80058e0:	f7fa fe5a 	bl	8000598 <__aeabi_f2d>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	4640      	mov	r0, r8
 80058ea:	4649      	mov	r1, r9
 80058ec:	f7fb f93c 	bl	8000b68 <__aeabi_dcmpgt>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d037      	beq.n	8005966 <calWallConrol+0x266>
				g_WallControlStatus = g_WallControlStatus - 1;
 80058f6:	4b35      	ldr	r3, [pc, #212]	; (80059cc <calWallConrol+0x2cc>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	4b33      	ldr	r3, [pc, #204]	; (80059cc <calWallConrol+0x2cc>)
 8005900:	701a      	strb	r2, [r3, #0]
				g_sensor_max_l = 0;
 8005902:	4b36      	ldr	r3, [pc, #216]	; (80059dc <calWallConrol+0x2dc>)
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 800590a:	2300      	movs	r3, #0
 800590c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005910:	e021      	b.n	8005956 <calWallConrol+0x256>
					if (g_sensor_max_l < (float) (g_sensor[SENSOR_LEFT][i])) {
 8005912:	4a28      	ldr	r2, [pc, #160]	; (80059b4 <calWallConrol+0x2b4>)
 8005914:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800591c:	ee07 3a90 	vmov	s15, r3
 8005920:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005924:	4b2d      	ldr	r3, [pc, #180]	; (80059dc <calWallConrol+0x2dc>)
 8005926:	edd3 7a00 	vldr	s15, [r3]
 800592a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800592e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005932:	dd0b      	ble.n	800594c <calWallConrol+0x24c>
						g_sensor_max_l = (float) (g_sensor[SENSOR_LEFT][i]);
 8005934:	4a1f      	ldr	r2, [pc, #124]	; (80059b4 <calWallConrol+0x2b4>)
 8005936:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800593a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800593e:	ee07 3a90 	vmov	s15, r3
 8005942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005946:	4b25      	ldr	r3, [pc, #148]	; (80059dc <calWallConrol+0x2dc>)
 8005948:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 800594c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005950:	3301      	adds	r3, #1
 8005952:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005956:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800595a:	2b13      	cmp	r3, #19
 800595c:	ddd9      	ble.n	8005912 <calWallConrol+0x212>
					}
				}
				g_skewer_displacement = 0;
 800595e:	4b23      	ldr	r3, [pc, #140]	; (80059ec <calWallConrol+0x2ec>)
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_L = 0;
 8005966:	4b1b      	ldr	r3, [pc, #108]	; (80059d4 <calWallConrol+0x2d4>)
 8005968:	2200      	movs	r2, #0
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	e066      	b.n	8005a3c <calWallConrol+0x33c>
 800596e:	bf00      	nop
 8005970:	33333333 	.word	0x33333333
 8005974:	3fd33333 	.word	0x3fd33333
 8005978:	d2f1a9fc 	.word	0xd2f1a9fc
 800597c:	bf70624d 	.word	0xbf70624d
 8005980:	33333333 	.word	0x33333333
 8005984:	3fe33333 	.word	0x3fe33333
 8005988:	bc6a7efa 	.word	0xbc6a7efa
 800598c:	3f789374 	.word	0x3f789374
 8005990:	20000814 	.word	0x20000814
 8005994:	435c0000 	.word	0x435c0000
 8005998:	43480000 	.word	0x43480000
 800599c:	200004dc 	.word	0x200004dc
 80059a0:	447a0000 	.word	0x447a0000
 80059a4:	43960000 	.word	0x43960000
 80059a8:	c0800000 	.word	0xc0800000
 80059ac:	431d0000 	.word	0x431d0000
 80059b0:	42dc0000 	.word	0x42dc0000
 80059b4:	200002bc 	.word	0x200002bc
 80059b8:	44228000 	.word	0x44228000
 80059bc:	450fc000 	.word	0x450fc000
 80059c0:	44160000 	.word	0x44160000
 80059c4:	44fa0000 	.word	0x44fa0000
 80059c8:	2000059c 	.word	0x2000059c
 80059cc:	2000059f 	.word	0x2000059f
 80059d0:	200005a1 	.word	0x200005a1
 80059d4:	200005a2 	.word	0x200005a2
 80059d8:	200005a3 	.word	0x200005a3
 80059dc:	200005a4 	.word	0x200005a4
 80059e0:	44be6000 	.word	0x44be6000
 80059e4:	200005a8 	.word	0x200005a8
 80059e8:	44974000 	.word	0x44974000
 80059ec:	200005ac 	.word	0x200005ac
 80059f0:	41a00000 	.word	0x41a00000
 80059f4:	2000044c 	.word	0x2000044c
		} else {
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L
 80059f8:	4bbf      	ldr	r3, [pc, #764]	; (8005cf8 <calWallConrol+0x5f8>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005a00:	dd1c      	ble.n	8005a3c <calWallConrol+0x33c>
					&& fabs(g_sensor_diff[SENSOR_LEFT]) < wallcut_threshold_L) {
 8005a02:	4bbe      	ldr	r3, [pc, #760]	; (8005cfc <calWallConrol+0x5fc>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fa fdb4 	bl	8000574 <__aeabi_i2d>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4614      	mov	r4, r2
 8005a12:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005a16:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005a1a:	f7fa fdbd 	bl	8000598 <__aeabi_f2d>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	4620      	mov	r0, r4
 8005a24:	4629      	mov	r1, r5
 8005a26:	f7fb f881 	bl	8000b2c <__aeabi_dcmplt>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d005      	beq.n	8005a3c <calWallConrol+0x33c>
				g_WallControlStatus = g_WallControlStatus + 1;
 8005a30:	4bb3      	ldr	r3, [pc, #716]	; (8005d00 <calWallConrol+0x600>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	3301      	adds	r3, #1
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	4bb1      	ldr	r3, [pc, #708]	; (8005d00 <calWallConrol+0x600>)
 8005a3a:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_L >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 1;
//			}
		}
		// 右壁の有無の判定
		if (((g_WallControlStatus >> 1) & 1) == 1) {
 8005a3c:	4bb0      	ldr	r3, [pc, #704]	; (8005d00 <calWallConrol+0x600>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	085b      	lsrs	r3, r3, #1
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d05c      	beq.n	8005b06 <calWallConrol+0x406>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R
 8005a4c:	4baa      	ldr	r3, [pc, #680]	; (8005cf8 <calWallConrol+0x5f8>)
 8005a4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005a52:	f240 2225 	movw	r2, #549	; 0x225
 8005a56:	4293      	cmp	r3, r2
 8005a58:	dd17      	ble.n	8005a8a <calWallConrol+0x38a>
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8005a5a:	4ba8      	ldr	r3, [pc, #672]	; (8005cfc <calWallConrol+0x5fc>)
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fa fd88 	bl	8000574 <__aeabi_i2d>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	613a      	str	r2, [r7, #16]
 8005a6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a6e:	617b      	str	r3, [r7, #20]
							> wallcut_threshold_R) {
 8005a70:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8005a74:	f7fa fd90 	bl	8000598 <__aeabi_f2d>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8005a7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a80:	f7fb f872 	bl	8000b68 <__aeabi_dcmpgt>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d039      	beq.n	8005afe <calWallConrol+0x3fe>
				g_WallControlStatus = g_WallControlStatus - 2;
 8005a8a:	4b9d      	ldr	r3, [pc, #628]	; (8005d00 <calWallConrol+0x600>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	3b02      	subs	r3, #2
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	4b9b      	ldr	r3, [pc, #620]	; (8005d00 <calWallConrol+0x600>)
 8005a94:	701a      	strb	r2, [r3, #0]
				g_sensor_max_r = 0;
 8005a96:	4b9b      	ldr	r3, [pc, #620]	; (8005d04 <calWallConrol+0x604>)
 8005a98:	f04f 0200 	mov.w	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005aa4:	e023      	b.n	8005aee <calWallConrol+0x3ee>
					if (g_sensor_max_r < (float) (g_sensor[SENSOR_RIGHT][i])) {
 8005aa6:	4a94      	ldr	r2, [pc, #592]	; (8005cf8 <calWallConrol+0x5f8>)
 8005aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005aac:	3350      	adds	r3, #80	; 0x50
 8005aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005aba:	4b92      	ldr	r3, [pc, #584]	; (8005d04 <calWallConrol+0x604>)
 8005abc:	edd3 7a00 	vldr	s15, [r3]
 8005ac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac8:	dd0c      	ble.n	8005ae4 <calWallConrol+0x3e4>
						g_sensor_max_r = (float) (g_sensor[SENSOR_RIGHT][i]);
 8005aca:	4a8b      	ldr	r2, [pc, #556]	; (8005cf8 <calWallConrol+0x5f8>)
 8005acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ad0:	3350      	adds	r3, #80	; 0x50
 8005ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ade:	4b89      	ldr	r3, [pc, #548]	; (8005d04 <calWallConrol+0x604>)
 8005ae0:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8005ae4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ae8:	3301      	adds	r3, #1
 8005aea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005aee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005af2:	2b13      	cmp	r3, #19
 8005af4:	ddd7      	ble.n	8005aa6 <calWallConrol+0x3a6>
					}
				}
				g_skewer_displacement = 0;
 8005af6:	4b84      	ldr	r3, [pc, #528]	; (8005d08 <calWallConrol+0x608>)
 8005af8:	f04f 0200 	mov.w	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_R = 0;
 8005afe:	4b83      	ldr	r3, [pc, #524]	; (8005d0c <calWallConrol+0x60c>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	701a      	strb	r2, [r3, #0]
 8005b04:	e024      	b.n	8005b50 <calWallConrol+0x450>
		} else {
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R
 8005b06:	4b7c      	ldr	r3, [pc, #496]	; (8005cf8 <calWallConrol+0x5f8>)
 8005b08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005b0c:	f240 2226 	movw	r2, #550	; 0x226
 8005b10:	4293      	cmp	r3, r2
 8005b12:	dd1d      	ble.n	8005b50 <calWallConrol+0x450>
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8005b14:	4b79      	ldr	r3, [pc, #484]	; (8005cfc <calWallConrol+0x5fc>)
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fa fd2b 	bl	8000574 <__aeabi_i2d>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	60ba      	str	r2, [r7, #8]
 8005b24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b28:	60fb      	str	r3, [r7, #12]
							< wallcut_threshold_R) {
 8005b2a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8005b2e:	f7fa fd33 	bl	8000598 <__aeabi_f2d>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8005b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b3a:	f7fa fff7 	bl	8000b2c <__aeabi_dcmplt>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d005      	beq.n	8005b50 <calWallConrol+0x450>
				//StabilityCount_R++;
				g_WallControlStatus = g_WallControlStatus + 2;			//安定消す
 8005b44:	4b6e      	ldr	r3, [pc, #440]	; (8005d00 <calWallConrol+0x600>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	3302      	adds	r3, #2
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	4b6c      	ldr	r3, [pc, #432]	; (8005d00 <calWallConrol+0x600>)
 8005b4e:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_R >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 2;
//			}
		}

		switch (g_WallControlStatus) {
 8005b50:	4b6b      	ldr	r3, [pc, #428]	; (8005d00 <calWallConrol+0x600>)
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b03      	cmp	r3, #3
 8005b56:	f201 80f2 	bhi.w	8006d3e <calWallConrol+0x163e>
 8005b5a:	a201      	add	r2, pc, #4	; (adr r2, 8005b60 <calWallConrol+0x460>)
 8005b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b60:	08005b71 	.word	0x08005b71
 8005b64:	08005c77 	.word	0x08005c77
 8005b68:	08005d25 	.word	0x08005d25
 8005b6c:	08005d8f 	.word	0x08005d8f
		case 0:			//両壁なし
			g_skewer_displacement += straight.velocity * INTERRUPT_TIME;
 8005b70:	4b65      	ldr	r3, [pc, #404]	; (8005d08 <calWallConrol+0x608>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7fa fd0f 	bl	8000598 <__aeabi_f2d>
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	460d      	mov	r5, r1
 8005b7e:	4b64      	ldr	r3, [pc, #400]	; (8005d10 <calWallConrol+0x610>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fa fd08 	bl	8000598 <__aeabi_f2d>
 8005b88:	a357      	add	r3, pc, #348	; (adr r3, 8005ce8 <calWallConrol+0x5e8>)
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	f7fa fd5b 	bl	8000648 <__aeabi_dmul>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	4620      	mov	r0, r4
 8005b98:	4629      	mov	r1, r5
 8005b9a:	f7fa fb9f 	bl	80002dc <__adddf3>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	f7fb f827 	bl	8000bf8 <__aeabi_d2f>
 8005baa:	4603      	mov	r3, r0
 8005bac:	4a56      	ldr	r2, [pc, #344]	; (8005d08 <calWallConrol+0x608>)
 8005bae:	6013      	str	r3, [r2, #0]
			if (g_skewer_displacement < SKEWER_LIMIT) {
 8005bb0:	4b55      	ldr	r3, [pc, #340]	; (8005d08 <calWallConrol+0x608>)
 8005bb2:	edd3 7a00 	vldr	s15, [r3]
 8005bb6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc2:	d52e      	bpl.n	8005c22 <calWallConrol+0x522>
				wall_normal.error = 0.7
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8005bc4:	4b53      	ldr	r3, [pc, #332]	; (8005d14 <calWallConrol+0x614>)
 8005bc6:	edd3 7a00 	vldr	s15, [r3]
 8005bca:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8005d18 <calWallConrol+0x618>
 8005bce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005bd2:	eef1 6a67 	vneg.f32	s13, s15
 8005bd6:	4b4f      	ldr	r3, [pc, #316]	; (8005d14 <calWallConrol+0x614>)
 8005bd8:	edd3 7a00 	vldr	s15, [r3]
 8005bdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
								+ (g_sensor_max_r - CENTER_R) / g_sensor_max_r);
 8005be0:	4b48      	ldr	r3, [pc, #288]	; (8005d04 <calWallConrol+0x604>)
 8005be2:	edd3 7a00 	vldr	s15, [r3]
 8005be6:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005d20 <calWallConrol+0x620>
 8005bea:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8005bee:	4b45      	ldr	r3, [pc, #276]	; (8005d04 <calWallConrol+0x604>)
 8005bf0:	edd3 6a00 	vldr	s13, [r3]
 8005bf4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bfc:	ee17 0a90 	vmov	r0, s15
 8005c00:	f7fa fcca 	bl	8000598 <__aeabi_f2d>
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8005c04:	a33a      	add	r3, pc, #232	; (adr r3, 8005cf0 <calWallConrol+0x5f0>)
 8005c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0a:	f7fa fd1d 	bl	8000648 <__aeabi_dmul>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	4610      	mov	r0, r2
 8005c14:	4619      	mov	r1, r3
 8005c16:	f7fa ffef 	bl	8000bf8 <__aeabi_d2f>
 8005c1a:	4603      	mov	r3, r0
				wall_normal.error = 0.7
 8005c1c:	4a3f      	ldr	r2, [pc, #252]	; (8005d1c <calWallConrol+0x61c>)
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	e003      	b.n	8005c2a <calWallConrol+0x52a>
			} else {
				wall_normal.error = 0;
 8005c22:	4b3e      	ldr	r3, [pc, #248]	; (8005d1c <calWallConrol+0x61c>)
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]
			}
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005c2a:	4b3c      	ldr	r3, [pc, #240]	; (8005d1c <calWallConrol+0x61c>)
 8005c2c:	ed93 7a00 	vldr	s14, [r3]
 8005c30:	4b3a      	ldr	r3, [pc, #232]	; (8005d1c <calWallConrol+0x61c>)
 8005c32:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c3a:	4b38      	ldr	r3, [pc, #224]	; (8005d1c <calWallConrol+0x61c>)
 8005c3c:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005c40:	4b36      	ldr	r3, [pc, #216]	; (8005d1c <calWallConrol+0x61c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a35      	ldr	r2, [pc, #212]	; (8005d1c <calWallConrol+0x61c>)
 8005c46:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005c48:	4b34      	ldr	r3, [pc, #208]	; (8005d1c <calWallConrol+0x61c>)
 8005c4a:	ed93 7a00 	vldr	s14, [r3]
 8005c4e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005c52:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005c56:	4b31      	ldr	r3, [pc, #196]	; (8005d1c <calWallConrol+0x61c>)
 8005c58:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c5c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005c60:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c68:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_count(0);
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	f001 ff5b 	bl	8007b28 <pl_yellow_LED_count>
			break;
 8005c72:	f001 b864 	b.w	8006d3e <calWallConrol+0x163e>
		case 1:			//左壁のみ
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8005c76:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005c7a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005d18 <calWallConrol+0x618>
 8005c7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c82:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8005c86:	ee67 6a87 	vmul.f32	s13, s15, s14
					/ (float) (sensorWall_L));
 8005c8a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8005c92:	4b22      	ldr	r3, [pc, #136]	; (8005d1c <calWallConrol+0x61c>)
 8005c94:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005c98:	4b20      	ldr	r3, [pc, #128]	; (8005d1c <calWallConrol+0x61c>)
 8005c9a:	ed93 7a00 	vldr	s14, [r3]
 8005c9e:	4b1f      	ldr	r3, [pc, #124]	; (8005d1c <calWallConrol+0x61c>)
 8005ca0:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ca8:	4b1c      	ldr	r3, [pc, #112]	; (8005d1c <calWallConrol+0x61c>)
 8005caa:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005cae:	4b1b      	ldr	r3, [pc, #108]	; (8005d1c <calWallConrol+0x61c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a1a      	ldr	r2, [pc, #104]	; (8005d1c <calWallConrol+0x61c>)
 8005cb4:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005cb6:	4b19      	ldr	r3, [pc, #100]	; (8005d1c <calWallConrol+0x61c>)
 8005cb8:	ed93 7a00 	vldr	s14, [r3]
 8005cbc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005cc0:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005cc4:	4b15      	ldr	r3, [pc, #84]	; (8005d1c <calWallConrol+0x61c>)
 8005cc6:	edd3 6a02 	vldr	s13, [r3, #8]
 8005cca:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cd6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-2 * (float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0]));
			pl_yellow_LED_count(128);
 8005cda:	2080      	movs	r0, #128	; 0x80
 8005cdc:	f001 ff24 	bl	8007b28 <pl_yellow_LED_count>
			break;
 8005ce0:	f001 b82d 	b.w	8006d3e <calWallConrol+0x163e>
 8005ce4:	f3af 8000 	nop.w
 8005ce8:	d2f1a9fc 	.word	0xd2f1a9fc
 8005cec:	3f50624d 	.word	0x3f50624d
 8005cf0:	66666666 	.word	0x66666666
 8005cf4:	3fe66666 	.word	0x3fe66666
 8005cf8:	200002bc 	.word	0x200002bc
 8005cfc:	2000044c 	.word	0x2000044c
 8005d00:	2000059f 	.word	0x2000059f
 8005d04:	200005a8 	.word	0x200005a8
 8005d08:	200005ac 	.word	0x200005ac
 8005d0c:	200005a3 	.word	0x200005a3
 8005d10:	200004dc 	.word	0x200004dc
 8005d14:	200005a4 	.word	0x200005a4
 8005d18:	44be6000 	.word	0x44be6000
 8005d1c:	20000578 	.word	0x20000578
 8005d20:	44974000 	.word	0x44974000
		case 2:			//右壁のみ
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005d24:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005d28:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8005d20 <calWallConrol+0x620>
 8005d2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d30:	ee77 6aa7 	vadd.f32	s13, s15, s15
					/ (float) (sensorWall_R));
 8005d34:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005d38:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005d3c:	4baa      	ldr	r3, [pc, #680]	; (8005fe8 <calWallConrol+0x8e8>)
 8005d3e:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005d42:	4ba9      	ldr	r3, [pc, #676]	; (8005fe8 <calWallConrol+0x8e8>)
 8005d44:	ed93 7a00 	vldr	s14, [r3]
 8005d48:	4ba7      	ldr	r3, [pc, #668]	; (8005fe8 <calWallConrol+0x8e8>)
 8005d4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d52:	4ba5      	ldr	r3, [pc, #660]	; (8005fe8 <calWallConrol+0x8e8>)
 8005d54:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005d58:	4ba3      	ldr	r3, [pc, #652]	; (8005fe8 <calWallConrol+0x8e8>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4aa2      	ldr	r2, [pc, #648]	; (8005fe8 <calWallConrol+0x8e8>)
 8005d5e:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005d60:	4ba1      	ldr	r3, [pc, #644]	; (8005fe8 <calWallConrol+0x8e8>)
 8005d62:	ed93 7a00 	vldr	s14, [r3]
 8005d66:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005d6a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005d6e:	4b9e      	ldr	r3, [pc, #632]	; (8005fe8 <calWallConrol+0x8e8>)
 8005d70:	edd3 6a02 	vldr	s13, [r3, #8]
 8005d74:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005d78:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d80:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (2 * (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(1);
 8005d84:	2001      	movs	r0, #1
 8005d86:	f001 fecf 	bl	8007b28 <pl_yellow_LED_count>
			break;
 8005d8a:	f000 bfd8 	b.w	8006d3e <calWallConrol+0x163e>
		case 3:			//両壁あり
			wall_normal.error =
					(-(float) (sensorWall_L - CENTER_L) / (float) (sensorWall_L)
 8005d8e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005d92:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8005fec <calWallConrol+0x8ec>
 8005d96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d9a:	eef1 6a67 	vneg.f32	s13, s15
 8005d9e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
							+ (float) (sensorWall_R - CENTER_R)
 8005da6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005daa:	eddf 6a91 	vldr	s13, [pc, #580]	; 8005ff0 <calWallConrol+0x8f0>
 8005dae:	ee37 6ae6 	vsub.f32	s12, s15, s13
									/ (float) (sensorWall_R));
 8005db2:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8005db6:	eec6 7a26 	vdiv.f32	s15, s12, s13
							+ (float) (sensorWall_R - CENTER_R)
 8005dba:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_normal.error =
 8005dbe:	4b8a      	ldr	r3, [pc, #552]	; (8005fe8 <calWallConrol+0x8e8>)
 8005dc0:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005dc4:	4b88      	ldr	r3, [pc, #544]	; (8005fe8 <calWallConrol+0x8e8>)
 8005dc6:	ed93 7a00 	vldr	s14, [r3]
 8005dca:	4b87      	ldr	r3, [pc, #540]	; (8005fe8 <calWallConrol+0x8e8>)
 8005dcc:	edd3 7a01 	vldr	s15, [r3, #4]
 8005dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dd4:	4b84      	ldr	r3, [pc, #528]	; (8005fe8 <calWallConrol+0x8e8>)
 8005dd6:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005dda:	4b83      	ldr	r3, [pc, #524]	; (8005fe8 <calWallConrol+0x8e8>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a82      	ldr	r2, [pc, #520]	; (8005fe8 <calWallConrol+0x8e8>)
 8005de0:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005de2:	4b81      	ldr	r3, [pc, #516]	; (8005fe8 <calWallConrol+0x8e8>)
 8005de4:	ed93 7a00 	vldr	s14, [r3]
 8005de8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005dec:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005df0:	4b7d      	ldr	r3, [pc, #500]	; (8005fe8 <calWallConrol+0x8e8>)
 8005df2:	edd3 6a02 	vldr	s13, [r3, #8]
 8005df6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e02:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-(float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0])
//							+ (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(129);
 8005e06:	2081      	movs	r0, #129	; 0x81
 8005e08:	f001 fe8e 	bl	8007b28 <pl_yellow_LED_count>
			if ((fabs(g_sensor_diff[SENSOR_LEFT]) < 30)
 8005e0c:	4b79      	ldr	r3, [pc, #484]	; (8005ff4 <calWallConrol+0x8f4>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fa fbaf 	bl	8000574 <__aeabi_i2d>
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	603a      	str	r2, [r7, #0]
 8005e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e20:	607b      	str	r3, [r7, #4]
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	4b74      	ldr	r3, [pc, #464]	; (8005ff8 <calWallConrol+0x8f8>)
 8005e28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e2c:	f7fa fe7e 	bl	8000b2c <__aeabi_dcmplt>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01a      	beq.n	8005e6c <calWallConrol+0x76c>
					&& (fabs(g_sensor_diff[SENSOR_RIGHT]) < 30)) {
 8005e36:	4b6f      	ldr	r3, [pc, #444]	; (8005ff4 <calWallConrol+0x8f4>)
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fa fb9a 	bl	8000574 <__aeabi_i2d>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4692      	mov	sl, r2
 8005e46:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	4b6a      	ldr	r3, [pc, #424]	; (8005ff8 <calWallConrol+0x8f8>)
 8005e50:	4650      	mov	r0, sl
 8005e52:	4659      	mov	r1, fp
 8005e54:	f7fa fe6a 	bl	8000b2c <__aeabi_dcmplt>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d006      	beq.n	8005e6c <calWallConrol+0x76c>
				StabilityCount_reset++;
 8005e5e:	4b67      	ldr	r3, [pc, #412]	; (8005ffc <calWallConrol+0x8fc>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	3301      	adds	r3, #1
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	4b65      	ldr	r3, [pc, #404]	; (8005ffc <calWallConrol+0x8fc>)
 8005e68:	701a      	strb	r2, [r3, #0]
 8005e6a:	e002      	b.n	8005e72 <calWallConrol+0x772>
			} else {
				StabilityCount_reset = 0;
 8005e6c:	4b63      	ldr	r3, [pc, #396]	; (8005ffc <calWallConrol+0x8fc>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	701a      	strb	r2, [r3, #0]
			}
			if (StabilityCount_reset >= 25) {
 8005e72:	4b62      	ldr	r3, [pc, #392]	; (8005ffc <calWallConrol+0x8fc>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	2b18      	cmp	r3, #24
 8005e78:	f240 8760 	bls.w	8006d3c <calWallConrol+0x163c>
				Gyro.sigma_error = 0;
 8005e7c:	4b60      	ldr	r3, [pc, #384]	; (8006000 <calWallConrol+0x900>)
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	609a      	str	r2, [r3, #8]
				StabilityCount_reset = 0;
 8005e84:	4b5d      	ldr	r3, [pc, #372]	; (8005ffc <calWallConrol+0x8fc>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005e8a:	f000 bf57 	b.w	8006d3c <calWallConrol+0x163c>
		}
//		if (highspeed_mode == 1) {
//			PID_wall = PID_wall * 0.7;
//		}

	} else if (g_WallControl_mode == 2) {
 8005e8e:	4b5d      	ldr	r3, [pc, #372]	; (8006004 <calWallConrol+0x904>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	f000 8753 	beq.w	8006d3e <calWallConrol+0x163e>
// 斜めの制御


	} else if (g_WallControl_mode == 3) {
 8005e98:	4b5a      	ldr	r3, [pc, #360]	; (8006004 <calWallConrol+0x904>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	f040 874e 	bne.w	8006d3e <calWallConrol+0x163e>
		//g_WallControlStatus=3;
		float CenterSlantR, CenterSlantL;
		float coefficientR[4];
		float coefficientL[4];
		float sensor_gain_slant90_p, sensor_gain_slant90_d;
		if (straight.velocity > 1000) {
 8005ea2:	4b59      	ldr	r3, [pc, #356]	; (8006008 <calWallConrol+0x908>)
 8005ea4:	edd3 7a00 	vldr	s15, [r3]
 8005ea8:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800600c <calWallConrol+0x90c>
 8005eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb4:	dd05      	ble.n	8005ec2 <calWallConrol+0x7c2>
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * 1000;
 8005eb6:	4b56      	ldr	r3, [pc, #344]	; (8006010 <calWallConrol+0x910>)
 8005eb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * 1000;
 8005ebc:	4b55      	ldr	r3, [pc, #340]	; (8006014 <calWallConrol+0x914>)
 8005ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ec0:	e024      	b.n	8005f0c <calWallConrol+0x80c>
		} else {
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * straight.velocity;
 8005ec2:	4b51      	ldr	r3, [pc, #324]	; (8006008 <calWallConrol+0x908>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fa fb66 	bl	8000598 <__aeabi_f2d>
 8005ecc:	a342      	add	r3, pc, #264	; (adr r3, 8005fd8 <calWallConrol+0x8d8>)
 8005ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed2:	f7fa fbb9 	bl	8000648 <__aeabi_dmul>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	4610      	mov	r0, r2
 8005edc:	4619      	mov	r1, r3
 8005ede:	f7fa fe8b 	bl	8000bf8 <__aeabi_d2f>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * straight.velocity;
 8005ee8:	4b47      	ldr	r3, [pc, #284]	; (8006008 <calWallConrol+0x908>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fa fb53 	bl	8000598 <__aeabi_f2d>
 8005ef2:	a33b      	add	r3, pc, #236	; (adr r3, 8005fe0 <calWallConrol+0x8e0>)
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	f7fa fba6 	bl	8000648 <__aeabi_dmul>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4610      	mov	r0, r2
 8005f02:	4619      	mov	r1, r3
 8005f04:	f7fa fe78 	bl	8000bf8 <__aeabi_d2f>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if (NoWallDisplacementR45slant > AREAMIN_R0
 8005f0c:	4b42      	ldr	r3, [pc, #264]	; (8006018 <calWallConrol+0x918>)
 8005f0e:	edd3 7a00 	vldr	s15, [r3]
 8005f12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f1e:	dd12      	ble.n	8005f46 <calWallConrol+0x846>
				&& NoWallDisplacementR45slant <= AREAMAX_R0) {
 8005f20:	4b3d      	ldr	r3, [pc, #244]	; (8006018 <calWallConrol+0x918>)
 8005f22:	edd3 7a00 	vldr	s15, [r3]
 8005f26:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8005f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f32:	d808      	bhi.n	8005f46 <calWallConrol+0x846>
			coefficientR[0] = COEFFICIENT_R0_0;
 8005f34:	4b39      	ldr	r3, [pc, #228]	; (800601c <calWallConrol+0x91c>)
 8005f36:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R0_1;
 8005f38:	4b39      	ldr	r3, [pc, #228]	; (8006020 <calWallConrol+0x920>)
 8005f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R0_2;
 8005f3c:	4b39      	ldr	r3, [pc, #228]	; (8006024 <calWallConrol+0x924>)
 8005f3e:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R0_3;
 8005f40:	4b39      	ldr	r3, [pc, #228]	; (8006028 <calWallConrol+0x928>)
 8005f42:	657b      	str	r3, [r7, #84]	; 0x54
 8005f44:	e0a7      	b.n	8006096 <calWallConrol+0x996>
		} else if (NoWallDisplacementR45slant > AREAMIN_R1
 8005f46:	4b34      	ldr	r3, [pc, #208]	; (8006018 <calWallConrol+0x918>)
 8005f48:	edd3 7a00 	vldr	s15, [r3]
 8005f4c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800602c <calWallConrol+0x92c>
 8005f50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f58:	dd12      	ble.n	8005f80 <calWallConrol+0x880>
				&& NoWallDisplacementR45slant <= AREAMAX_R1) {
 8005f5a:	4b2f      	ldr	r3, [pc, #188]	; (8006018 <calWallConrol+0x918>)
 8005f5c:	edd3 7a00 	vldr	s15, [r3]
 8005f60:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8006030 <calWallConrol+0x930>
 8005f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f6c:	d808      	bhi.n	8005f80 <calWallConrol+0x880>
			coefficientR[0] = COEFFICIENT_R1_0;
 8005f6e:	4b31      	ldr	r3, [pc, #196]	; (8006034 <calWallConrol+0x934>)
 8005f70:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R1_1;
 8005f72:	4b31      	ldr	r3, [pc, #196]	; (8006038 <calWallConrol+0x938>)
 8005f74:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R1_2;
 8005f76:	4b31      	ldr	r3, [pc, #196]	; (800603c <calWallConrol+0x93c>)
 8005f78:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R1_3;
 8005f7a:	4b31      	ldr	r3, [pc, #196]	; (8006040 <calWallConrol+0x940>)
 8005f7c:	657b      	str	r3, [r7, #84]	; 0x54
 8005f7e:	e08a      	b.n	8006096 <calWallConrol+0x996>
		} else if (NoWallDisplacementR45slant > AREAMIN_R2
 8005f80:	4b25      	ldr	r3, [pc, #148]	; (8006018 <calWallConrol+0x918>)
 8005f82:	edd3 7a00 	vldr	s15, [r3]
 8005f86:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006044 <calWallConrol+0x944>
 8005f8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f92:	dd12      	ble.n	8005fba <calWallConrol+0x8ba>
				&& NoWallDisplacementR45slant <= AREAMAX_R2) {
 8005f94:	4b20      	ldr	r3, [pc, #128]	; (8006018 <calWallConrol+0x918>)
 8005f96:	edd3 7a00 	vldr	s15, [r3]
 8005f9a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006048 <calWallConrol+0x948>
 8005f9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa6:	d808      	bhi.n	8005fba <calWallConrol+0x8ba>
			coefficientR[0] = COEFFICIENT_R2_0;
 8005fa8:	4b28      	ldr	r3, [pc, #160]	; (800604c <calWallConrol+0x94c>)
 8005faa:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R2_1;
 8005fac:	4b28      	ldr	r3, [pc, #160]	; (8006050 <calWallConrol+0x950>)
 8005fae:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R2_2;
 8005fb0:	4b28      	ldr	r3, [pc, #160]	; (8006054 <calWallConrol+0x954>)
 8005fb2:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R2_3;
 8005fb4:	4b28      	ldr	r3, [pc, #160]	; (8006058 <calWallConrol+0x958>)
 8005fb6:	657b      	str	r3, [r7, #84]	; 0x54
 8005fb8:	e06d      	b.n	8006096 <calWallConrol+0x996>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R) {
 8005fba:	4b28      	ldr	r3, [pc, #160]	; (800605c <calWallConrol+0x95c>)
 8005fbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005fc0:	2bb4      	cmp	r3, #180	; 0xb4
 8005fc2:	dd4f      	ble.n	8006064 <calWallConrol+0x964>
				g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8005fc4:	4b26      	ldr	r3, [pc, #152]	; (8006060 <calWallConrol+0x960>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	f043 0302 	orr.w	r3, r3, #2
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	4b24      	ldr	r3, [pc, #144]	; (8006060 <calWallConrol+0x960>)
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	e04e      	b.n	8006072 <calWallConrol+0x972>
 8005fd4:	f3af 8000 	nop.w
 8005fd8:	66666666 	.word	0x66666666
 8005fdc:	3fe66666 	.word	0x3fe66666
 8005fe0:	1eb851ec 	.word	0x1eb851ec
 8005fe4:	bfb1eb85 	.word	0xbfb1eb85
 8005fe8:	20000578 	.word	0x20000578
 8005fec:	44be6000 	.word	0x44be6000
 8005ff0:	44974000 	.word	0x44974000
 8005ff4:	2000044c 	.word	0x2000044c
 8005ff8:	403e0000 	.word	0x403e0000
 8005ffc:	200005a1 	.word	0x200005a1
 8006000:	20000550 	.word	0x20000550
 8006004:	2000059c 	.word	0x2000059c
 8006008:	200004dc 	.word	0x200004dc
 800600c:	447a0000 	.word	0x447a0000
 8006010:	442f0000 	.word	0x442f0000
 8006014:	c28c0000 	.word	0xc28c0000
 8006018:	200005e8 	.word	0x200005e8
 800601c:	4519d2f5 	.word	0x4519d2f5
 8006020:	c40e02ec 	.word	0xc40e02ec
 8006024:	423da41a 	.word	0x423da41a
 8006028:	bfa28f5c 	.word	0xbfa28f5c
 800602c:	420c0000 	.word	0x420c0000
 8006030:	42700000 	.word	0x42700000
 8006034:	440d1857 	.word	0x440d1857
 8006038:	c181619b 	.word	0xc181619b
 800603c:	3eaab6f2 	.word	0x3eaab6f2
 8006040:	bacaf00f 	.word	0xbacaf00f
 8006044:	42c80000 	.word	0x42c80000
 8006048:	42f00000 	.word	0x42f00000
 800604c:	4559c991 	.word	0x4559c991
 8006050:	41cef541 	.word	0x41cef541
 8006054:	bfbda504 	.word	0xbfbda504
 8006058:	3c22339c 	.word	0x3c22339c
 800605c:	200002bc 	.word	0x200002bc
 8006060:	2000059f 	.word	0x2000059f
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 8006064:	4b79      	ldr	r3, [pc, #484]	; (800624c <calWallConrol+0xb4c>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	f023 0302 	bic.w	r3, r3, #2
 800606c:	b2da      	uxtb	r2, r3
 800606e:	4b77      	ldr	r3, [pc, #476]	; (800624c <calWallConrol+0xb4c>)
 8006070:	701a      	strb	r2, [r3, #0]
			}
			coefficientR[0] = (float) (g_sensor[SENSOR_RIGHT][0]);
 8006072:	4b77      	ldr	r3, [pc, #476]	; (8006250 <calWallConrol+0xb50>)
 8006074:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006078:	ee07 3a90 	vmov	s15, r3
 800607c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006080:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			coefficientR[1] = 0;
 8006084:	f04f 0300 	mov.w	r3, #0
 8006088:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = 0;
 800608a:	f04f 0300 	mov.w	r3, #0
 800608e:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = 0;
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	657b      	str	r3, [r7, #84]	; 0x54
		}

		if (NoWallDisplacementL45slant > AREAMIN_L0
 8006096:	4b6f      	ldr	r3, [pc, #444]	; (8006254 <calWallConrol+0xb54>)
 8006098:	edd3 7a00 	vldr	s15, [r3]
 800609c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a8:	dd12      	ble.n	80060d0 <calWallConrol+0x9d0>
				&& NoWallDisplacementL45slant <= AREAMAX_L0) {
 80060aa:	4b6a      	ldr	r3, [pc, #424]	; (8006254 <calWallConrol+0xb54>)
 80060ac:	edd3 7a00 	vldr	s15, [r3]
 80060b0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80060b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060bc:	d808      	bhi.n	80060d0 <calWallConrol+0x9d0>
			coefficientL[0] = COEFFICIENT_L0_0;
 80060be:	4b66      	ldr	r3, [pc, #408]	; (8006258 <calWallConrol+0xb58>)
 80060c0:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L0_1;
 80060c2:	4b66      	ldr	r3, [pc, #408]	; (800625c <calWallConrol+0xb5c>)
 80060c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L0_2;
 80060c6:	4b66      	ldr	r3, [pc, #408]	; (8006260 <calWallConrol+0xb60>)
 80060c8:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L0_3;
 80060ca:	4b66      	ldr	r3, [pc, #408]	; (8006264 <calWallConrol+0xb64>)
 80060cc:	647b      	str	r3, [r7, #68]	; 0x44
 80060ce:	e05d      	b.n	800618c <calWallConrol+0xa8c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L1
 80060d0:	4b60      	ldr	r3, [pc, #384]	; (8006254 <calWallConrol+0xb54>)
 80060d2:	edd3 7a00 	vldr	s15, [r3]
 80060d6:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8006268 <calWallConrol+0xb68>
 80060da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060e2:	dd12      	ble.n	800610a <calWallConrol+0xa0a>
				&& NoWallDisplacementL45slant <= AREAMAX_L1) {
 80060e4:	4b5b      	ldr	r3, [pc, #364]	; (8006254 <calWallConrol+0xb54>)
 80060e6:	edd3 7a00 	vldr	s15, [r3]
 80060ea:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800626c <calWallConrol+0xb6c>
 80060ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f6:	d808      	bhi.n	800610a <calWallConrol+0xa0a>
			coefficientL[0] = COEFFICIENT_L1_0;
 80060f8:	4b5d      	ldr	r3, [pc, #372]	; (8006270 <calWallConrol+0xb70>)
 80060fa:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L1_1;
 80060fc:	4b5d      	ldr	r3, [pc, #372]	; (8006274 <calWallConrol+0xb74>)
 80060fe:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L1_2;
 8006100:	4b5d      	ldr	r3, [pc, #372]	; (8006278 <calWallConrol+0xb78>)
 8006102:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L1_3;
 8006104:	4b5d      	ldr	r3, [pc, #372]	; (800627c <calWallConrol+0xb7c>)
 8006106:	647b      	str	r3, [r7, #68]	; 0x44
 8006108:	e040      	b.n	800618c <calWallConrol+0xa8c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L2
 800610a:	4b52      	ldr	r3, [pc, #328]	; (8006254 <calWallConrol+0xb54>)
 800610c:	edd3 7a00 	vldr	s15, [r3]
 8006110:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8006280 <calWallConrol+0xb80>
 8006114:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800611c:	dd12      	ble.n	8006144 <calWallConrol+0xa44>
				&& NoWallDisplacementL45slant <= AREAMAX_L2) {
 800611e:	4b4d      	ldr	r3, [pc, #308]	; (8006254 <calWallConrol+0xb54>)
 8006120:	edd3 7a00 	vldr	s15, [r3]
 8006124:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8006284 <calWallConrol+0xb84>
 8006128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800612c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006130:	d808      	bhi.n	8006144 <calWallConrol+0xa44>
			coefficientL[0] = COEFFICIENT_L2_0;
 8006132:	4b55      	ldr	r3, [pc, #340]	; (8006288 <calWallConrol+0xb88>)
 8006134:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L2_1;
 8006136:	4b55      	ldr	r3, [pc, #340]	; (800628c <calWallConrol+0xb8c>)
 8006138:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L2_2;
 800613a:	4b55      	ldr	r3, [pc, #340]	; (8006290 <calWallConrol+0xb90>)
 800613c:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L2_3;
 800613e:	4b55      	ldr	r3, [pc, #340]	; (8006294 <calWallConrol+0xb94>)
 8006140:	647b      	str	r3, [r7, #68]	; 0x44
 8006142:	e023      	b.n	800618c <calWallConrol+0xa8c>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L) {
 8006144:	4b42      	ldr	r3, [pc, #264]	; (8006250 <calWallConrol+0xb50>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2bb4      	cmp	r3, #180	; 0xb4
 800614a:	dd07      	ble.n	800615c <calWallConrol+0xa5c>
				g_WallControlStatus = g_WallControlStatus | (1 << 0);
 800614c:	4b3f      	ldr	r3, [pc, #252]	; (800624c <calWallConrol+0xb4c>)
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	f043 0301 	orr.w	r3, r3, #1
 8006154:	b2da      	uxtb	r2, r3
 8006156:	4b3d      	ldr	r3, [pc, #244]	; (800624c <calWallConrol+0xb4c>)
 8006158:	701a      	strb	r2, [r3, #0]
 800615a:	e006      	b.n	800616a <calWallConrol+0xa6a>
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 800615c:	4b3b      	ldr	r3, [pc, #236]	; (800624c <calWallConrol+0xb4c>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	f023 0301 	bic.w	r3, r3, #1
 8006164:	b2da      	uxtb	r2, r3
 8006166:	4b39      	ldr	r3, [pc, #228]	; (800624c <calWallConrol+0xb4c>)
 8006168:	701a      	strb	r2, [r3, #0]
			}
			coefficientL[0] = (float) (g_sensor[SENSOR_LEFT][0]);
 800616a:	4b39      	ldr	r3, [pc, #228]	; (8006250 <calWallConrol+0xb50>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	ee07 3a90 	vmov	s15, r3
 8006172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006176:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			coefficientL[1] = 0;
 800617a:	f04f 0300 	mov.w	r3, #0
 800617e:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = 0;
 8006180:	f04f 0300 	mov.w	r3, #0
 8006184:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = 0;
 8006186:	f04f 0300 	mov.w	r3, #0
 800618a:	647b      	str	r3, [r7, #68]	; 0x44
		}

		CenterSlantR = coefficientR[0]
 800618c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
				+ coefficientR[1] * NoWallDisplacementR45slant
 8006190:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8006194:	4b40      	ldr	r3, [pc, #256]	; (8006298 <calWallConrol+0xb98>)
 8006196:	edd3 7a00 	vldr	s15, [r3]
 800619a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800619e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 80061a2:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80061a6:	4b3c      	ldr	r3, [pc, #240]	; (8006298 <calWallConrol+0xb98>)
 80061a8:	edd3 7a00 	vldr	s15, [r3]
 80061ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80061b0:	4b39      	ldr	r3, [pc, #228]	; (8006298 <calWallConrol+0xb98>)
 80061b2:	edd3 7a00 	vldr	s15, [r3]
 80061b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 80061ba:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[3] * NoWallDisplacementR45slant
 80061be:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80061c2:	4b35      	ldr	r3, [pc, #212]	; (8006298 <calWallConrol+0xb98>)
 80061c4:	edd3 7a00 	vldr	s15, [r3]
 80061c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80061cc:	4b32      	ldr	r3, [pc, #200]	; (8006298 <calWallConrol+0xb98>)
 80061ce:	edd3 7a00 	vldr	s15, [r3]
 80061d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 80061d6:	4b30      	ldr	r3, [pc, #192]	; (8006298 <calWallConrol+0xb98>)
 80061d8:	edd3 7a00 	vldr	s15, [r3]
 80061dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR = coefficientR[0]
 80061e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061e4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		CenterSlantL = coefficientL[0]
 80061e8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
				+ coefficientL[1] * NoWallDisplacementL45slant
 80061ec:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80061f0:	4b18      	ldr	r3, [pc, #96]	; (8006254 <calWallConrol+0xb54>)
 80061f2:	edd3 7a00 	vldr	s15, [r3]
 80061f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061fa:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 80061fe:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8006202:	4b14      	ldr	r3, [pc, #80]	; (8006254 <calWallConrol+0xb54>)
 8006204:	edd3 7a00 	vldr	s15, [r3]
 8006208:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 800620c:	4b11      	ldr	r3, [pc, #68]	; (8006254 <calWallConrol+0xb54>)
 800620e:	edd3 7a00 	vldr	s15, [r3]
 8006212:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 8006216:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[3] * NoWallDisplacementL45slant
 800621a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800621e:	4b0d      	ldr	r3, [pc, #52]	; (8006254 <calWallConrol+0xb54>)
 8006220:	edd3 7a00 	vldr	s15, [r3]
 8006224:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8006228:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <calWallConrol+0xb54>)
 800622a:	edd3 7a00 	vldr	s15, [r3]
 800622e:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8006232:	4b08      	ldr	r3, [pc, #32]	; (8006254 <calWallConrol+0xb54>)
 8006234:	edd3 7a00 	vldr	s15, [r3]
 8006238:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL = coefficientL[0]
 800623c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006240:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		for (int j = 11; j >= 1; j--) {
 8006244:	230b      	movs	r3, #11
 8006246:	67bb      	str	r3, [r7, #120]	; 0x78
 8006248:	e041      	b.n	80062ce <calWallConrol+0xbce>
 800624a:	bf00      	nop
 800624c:	2000059f 	.word	0x2000059f
 8006250:	200002bc 	.word	0x200002bc
 8006254:	200005ec 	.word	0x200005ec
 8006258:	44f286e9 	.word	0x44f286e9
 800625c:	c3c54757 	.word	0xc3c54757
 8006260:	41e9f1c4 	.word	0x41e9f1c4
 8006264:	bf307804 	.word	0xbf307804
 8006268:	420c0000 	.word	0x420c0000
 800626c:	42700000 	.word	0x42700000
 8006270:	43b4a7f9 	.word	0x43b4a7f9
 8006274:	c04f43da 	.word	0xc04f43da
 8006278:	3a9164ed 	.word	0x3a9164ed
 800627c:	3a8c6aa9 	.word	0x3a8c6aa9
 8006280:	42c80000 	.word	0x42c80000
 8006284:	42f00000 	.word	0x42f00000
 8006288:	478c2a26 	.word	0x478c2a26
 800628c:	c4fbb229 	.word	0xc4fbb229
 8006290:	4195b611 	.word	0x4195b611
 8006294:	bd67d567 	.word	0xbd67d567
 8006298:	200005e8 	.word	0x200005e8
			g_CenterSlantR90[j] = g_CenterSlantR90[j - 1];
 800629c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800629e:	3b01      	subs	r3, #1
 80062a0:	4a9c      	ldr	r2, [pc, #624]	; (8006514 <calWallConrol+0xe14>)
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	499a      	ldr	r1, [pc, #616]	; (8006514 <calWallConrol+0xe14>)
 80062aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	440b      	add	r3, r1
 80062b0:	601a      	str	r2, [r3, #0]
			g_CenterSlantL90[j] = g_CenterSlantL90[j - 1];
 80062b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062b4:	3b01      	subs	r3, #1
 80062b6:	4a98      	ldr	r2, [pc, #608]	; (8006518 <calWallConrol+0xe18>)
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	4996      	ldr	r1, [pc, #600]	; (8006518 <calWallConrol+0xe18>)
 80062c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 80062c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062ca:	3b01      	subs	r3, #1
 80062cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80062ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	dce3      	bgt.n	800629c <calWallConrol+0xb9c>
		}
		g_CenterSlantR90[0] = CenterSlantR;
 80062d4:	4a8f      	ldr	r2, [pc, #572]	; (8006514 <calWallConrol+0xe14>)
 80062d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062d8:	6013      	str	r3, [r2, #0]
		g_CenterSlantL90[0] = CenterSlantL;
 80062da:	4a8f      	ldr	r2, [pc, #572]	; (8006518 <calWallConrol+0xe18>)
 80062dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062de:	6013      	str	r3, [r2, #0]

		g_CenterSlantR90_diff = g_CenterSlantR90[0] - g_CenterSlantR90[11];
 80062e0:	4b8c      	ldr	r3, [pc, #560]	; (8006514 <calWallConrol+0xe14>)
 80062e2:	ed93 7a00 	vldr	s14, [r3]
 80062e6:	4b8b      	ldr	r3, [pc, #556]	; (8006514 <calWallConrol+0xe14>)
 80062e8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80062ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062f0:	4b8a      	ldr	r3, [pc, #552]	; (800651c <calWallConrol+0xe1c>)
 80062f2:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL90_diff = g_CenterSlantL90[0] - g_CenterSlantL90[11];
 80062f6:	4b88      	ldr	r3, [pc, #544]	; (8006518 <calWallConrol+0xe18>)
 80062f8:	ed93 7a00 	vldr	s14, [r3]
 80062fc:	4b86      	ldr	r3, [pc, #536]	; (8006518 <calWallConrol+0xe18>)
 80062fe:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006306:	4b86      	ldr	r3, [pc, #536]	; (8006520 <calWallConrol+0xe20>)
 8006308:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R
 800630c:	4b85      	ldr	r3, [pc, #532]	; (8006524 <calWallConrol+0xe24>)
 800630e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006312:	2bb4      	cmp	r3, #180	; 0xb4
 8006314:	dd1a      	ble.n	800634c <calWallConrol+0xc4c>
				&& fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8006316:	4b84      	ldr	r3, [pc, #528]	; (8006528 <calWallConrol+0xe28>)
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	ee07 3a90 	vmov	s15, r3
 800631e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006322:	4b7e      	ldr	r3, [pc, #504]	; (800651c <calWallConrol+0xe1c>)
 8006324:	edd3 7a00 	vldr	s15, [r3]
 8006328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800632c:	eef0 7ae7 	vabs.f32	s15, s15
 8006330:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800652c <calWallConrol+0xe2c>
 8006334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800633c:	d506      	bpl.n	800634c <calWallConrol+0xc4c>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus | (1 << 1);
 800633e:	4b7c      	ldr	r3, [pc, #496]	; (8006530 <calWallConrol+0xe30>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	f043 0302 	orr.w	r3, r3, #2
 8006346:	b2da      	uxtb	r2, r3
 8006348:	4b79      	ldr	r3, [pc, #484]	; (8006530 <calWallConrol+0xe30>)
 800634a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L
 800634c:	4b75      	ldr	r3, [pc, #468]	; (8006524 <calWallConrol+0xe24>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2bb4      	cmp	r3, #180	; 0xb4
 8006352:	dd1a      	ble.n	800638a <calWallConrol+0xc8a>
				&& fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 8006354:	4b74      	ldr	r3, [pc, #464]	; (8006528 <calWallConrol+0xe28>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	ee07 3a90 	vmov	s15, r3
 800635c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006360:	4b6f      	ldr	r3, [pc, #444]	; (8006520 <calWallConrol+0xe20>)
 8006362:	edd3 7a00 	vldr	s15, [r3]
 8006366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800636a:	eef0 7ae7 	vabs.f32	s15, s15
 800636e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800652c <calWallConrol+0xe2c>
 8006372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800637a:	d506      	bpl.n	800638a <calWallConrol+0xc8a>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus | (1 << 0);
 800637c:	4b6c      	ldr	r3, [pc, #432]	; (8006530 <calWallConrol+0xe30>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	f043 0301 	orr.w	r3, r3, #1
 8006384:	b2da      	uxtb	r2, r3
 8006386:	4b6a      	ldr	r3, [pc, #424]	; (8006530 <calWallConrol+0xe30>)
 8006388:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT_R
 800638a:	4b66      	ldr	r3, [pc, #408]	; (8006524 <calWallConrol+0xe24>)
 800638c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006390:	2bb3      	cmp	r3, #179	; 0xb3
 8006392:	dd13      	ble.n	80063bc <calWallConrol+0xcbc>
				|| fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8006394:	4b64      	ldr	r3, [pc, #400]	; (8006528 <calWallConrol+0xe28>)
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	ee07 3a90 	vmov	s15, r3
 800639c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063a0:	4b5e      	ldr	r3, [pc, #376]	; (800651c <calWallConrol+0xe1c>)
 80063a2:	edd3 7a00 	vldr	s15, [r3]
 80063a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063aa:	eef0 7ae7 	vabs.f32	s15, s15
 80063ae:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800652c <calWallConrol+0xe2c>
 80063b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ba:	dd06      	ble.n	80063ca <calWallConrol+0xcca>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 80063bc:	4b5c      	ldr	r3, [pc, #368]	; (8006530 <calWallConrol+0xe30>)
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	f023 0302 	bic.w	r3, r3, #2
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	4b5a      	ldr	r3, [pc, #360]	; (8006530 <calWallConrol+0xe30>)
 80063c8:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT_L
 80063ca:	4b56      	ldr	r3, [pc, #344]	; (8006524 <calWallConrol+0xe24>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2bb3      	cmp	r3, #179	; 0xb3
 80063d0:	dd13      	ble.n	80063fa <calWallConrol+0xcfa>
				|| fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 80063d2:	4b55      	ldr	r3, [pc, #340]	; (8006528 <calWallConrol+0xe28>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	ee07 3a90 	vmov	s15, r3
 80063da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063de:	4b50      	ldr	r3, [pc, #320]	; (8006520 <calWallConrol+0xe20>)
 80063e0:	edd3 7a00 	vldr	s15, [r3]
 80063e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063e8:	eef0 7ae7 	vabs.f32	s15, s15
 80063ec:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800652c <calWallConrol+0xe2c>
 80063f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063f8:	dd06      	ble.n	8006408 <calWallConrol+0xd08>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 80063fa:	4b4d      	ldr	r3, [pc, #308]	; (8006530 <calWallConrol+0xe30>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	f023 0301 	bic.w	r3, r3, #1
 8006402:	b2da      	uxtb	r2, r3
 8006404:	4b4a      	ldr	r3, [pc, #296]	; (8006530 <calWallConrol+0xe30>)
 8006406:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus) {
 8006408:	4b49      	ldr	r3, [pc, #292]	; (8006530 <calWallConrol+0xe30>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b03      	cmp	r3, #3
 800640e:	f200 813d 	bhi.w	800668c <calWallConrol+0xf8c>
 8006412:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <calWallConrol+0xd18>)
 8006414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006418:	08006429 	.word	0x08006429
 800641c:	0800647d 	.word	0x0800647d
 8006420:	08006541 	.word	0x08006541
 8006424:	080065d7 	.word	0x080065d7
		case 0:			//両壁なし
			PID_wall = 0;
 8006428:	f04f 0300 	mov.w	r3, #0
 800642c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			pl_yellow_LED_1(0);
 8006430:	2000      	movs	r0, #0
 8006432:	f001 faf7 	bl	8007a24 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8006436:	2000      	movs	r0, #0
 8006438:	f001 fb2a 	bl	8007a90 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 800643c:	4b39      	ldr	r3, [pc, #228]	; (8006524 <calWallConrol+0xe24>)
 800643e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800644a:	4b3a      	ldr	r3, [pc, #232]	; (8006534 <calWallConrol+0xe34>)
 800644c:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8006450:	4b34      	ldr	r3, [pc, #208]	; (8006524 <calWallConrol+0xe24>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	ee07 3a90 	vmov	s15, r3
 8006458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800645c:	4b36      	ldr	r3, [pc, #216]	; (8006538 <calWallConrol+0xe38>)
 800645e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = 0;
 8006462:	4b36      	ldr	r3, [pc, #216]	; (800653c <calWallConrol+0xe3c>)
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	601a      	str	r2, [r3, #0]
			wall_slant90.delta_error = 0;
 800646a:	4b34      	ldr	r3, [pc, #208]	; (800653c <calWallConrol+0xe3c>)
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	609a      	str	r2, [r3, #8]
			wall_slant90.old_error = 0;
 8006472:	4b32      	ldr	r3, [pc, #200]	; (800653c <calWallConrol+0xe3c>)
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	605a      	str	r2, [r3, #4]
			break;
 800647a:	e107      	b.n	800668c <calWallConrol+0xf8c>
		case 1:			//左壁のみ
			pl_yellow_LED_1(0);
 800647c:	2000      	movs	r0, #0
 800647e:	f001 fad1 	bl	8007a24 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8006482:	2001      	movs	r0, #1
 8006484:	f001 fb04 	bl	8007a90 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8006488:	4b26      	ldr	r3, [pc, #152]	; (8006524 <calWallConrol+0xe24>)
 800648a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800648e:	ee07 3a90 	vmov	s15, r3
 8006492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006496:	4b27      	ldr	r3, [pc, #156]	; (8006534 <calWallConrol+0xe34>)
 8006498:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = CenterSlantL;
 800649c:	4a26      	ldr	r2, [pc, #152]	; (8006538 <calWallConrol+0xe38>)
 800649e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064a0:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 80064a2:	4b20      	ldr	r3, [pc, #128]	; (8006524 <calWallConrol+0xe24>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064ae:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80064b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064b6:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0]));
 80064ba:	4b1a      	ldr	r3, [pc, #104]	; (8006524 <calWallConrol+0xe24>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 80064ca:	4b1c      	ldr	r3, [pc, #112]	; (800653c <calWallConrol+0xe3c>)
 80064cc:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 80064d0:	4b1a      	ldr	r3, [pc, #104]	; (800653c <calWallConrol+0xe3c>)
 80064d2:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 80064d6:	4b19      	ldr	r3, [pc, #100]	; (800653c <calWallConrol+0xe3c>)
 80064d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80064dc:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 80064e0:	4b16      	ldr	r3, [pc, #88]	; (800653c <calWallConrol+0xe3c>)
 80064e2:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 80064e6:	4b15      	ldr	r3, [pc, #84]	; (800653c <calWallConrol+0xe3c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a14      	ldr	r2, [pc, #80]	; (800653c <calWallConrol+0xe3c>)
 80064ec:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80064ee:	4b13      	ldr	r3, [pc, #76]	; (800653c <calWallConrol+0xe3c>)
 80064f0:	ed93 7a00 	vldr	s14, [r3]
 80064f4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80064f8:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 80064fc:	4b0f      	ldr	r3, [pc, #60]	; (800653c <calWallConrol+0xe3c>)
 80064fe:	edd3 6a02 	vldr	s13, [r3, #8]
 8006502:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8006506:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 800650a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800650e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006512:	e0bb      	b.n	800668c <calWallConrol+0xf8c>
 8006514:	20000614 	.word	0x20000614
 8006518:	20000644 	.word	0x20000644
 800651c:	200006d4 	.word	0x200006d4
 8006520:	200006d8 	.word	0x200006d8
 8006524:	200002bc 	.word	0x200002bc
 8006528:	2000044c 	.word	0x2000044c
 800652c:	42a00000 	.word	0x42a00000
 8006530:	2000059f 	.word	0x2000059f
 8006534:	200005b8 	.word	0x200005b8
 8006538:	200005bc 	.word	0x200005bc
 800653c:	20000584 	.word	0x20000584
		case 2:			//右壁のみ
			pl_yellow_LED_1(1);
 8006540:	2001      	movs	r0, #1
 8006542:	f001 fa6f 	bl	8007a24 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8006546:	2000      	movs	r0, #0
 8006548:	f001 faa2 	bl	8007a90 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 800654c:	4aa4      	ldr	r2, [pc, #656]	; (80067e0 <calWallConrol+0x10e0>)
 800654e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006550:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8006552:	4ba4      	ldr	r3, [pc, #656]	; (80067e4 <calWallConrol+0x10e4>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	ee07 3a90 	vmov	s15, r3
 800655a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800655e:	4ba2      	ldr	r3, [pc, #648]	; (80067e8 <calWallConrol+0x10e8>)
 8006560:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8006564:	4b9f      	ldr	r3, [pc, #636]	; (80067e4 <calWallConrol+0x10e4>)
 8006566:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800656a:	ee07 3a90 	vmov	s15, r3
 800656e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006572:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006576:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR) / (float) (g_sensor[SENSOR_RIGHT][0]));
 800657a:	4b9a      	ldr	r3, [pc, #616]	; (80067e4 <calWallConrol+0x10e4>)
 800657c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006580:	ee07 3a90 	vmov	s15, r3
 8006584:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006588:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 800658c:	4b97      	ldr	r3, [pc, #604]	; (80067ec <calWallConrol+0x10ec>)
 800658e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8006592:	4b96      	ldr	r3, [pc, #600]	; (80067ec <calWallConrol+0x10ec>)
 8006594:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8006598:	4b94      	ldr	r3, [pc, #592]	; (80067ec <calWallConrol+0x10ec>)
 800659a:	edd3 7a01 	vldr	s15, [r3, #4]
 800659e:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 80065a2:	4b92      	ldr	r3, [pc, #584]	; (80067ec <calWallConrol+0x10ec>)
 80065a4:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 80065a8:	4b90      	ldr	r3, [pc, #576]	; (80067ec <calWallConrol+0x10ec>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a8f      	ldr	r2, [pc, #572]	; (80067ec <calWallConrol+0x10ec>)
 80065ae:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80065b0:	4b8e      	ldr	r3, [pc, #568]	; (80067ec <calWallConrol+0x10ec>)
 80065b2:	ed93 7a00 	vldr	s14, [r3]
 80065b6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80065ba:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 80065be:	4b8b      	ldr	r3, [pc, #556]	; (80067ec <calWallConrol+0x10ec>)
 80065c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80065c4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80065c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80065cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065d0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80065d4:	e05a      	b.n	800668c <calWallConrol+0xf8c>
		case 3:			//両壁あり
			pl_yellow_LED_1(1);
 80065d6:	2001      	movs	r0, #1
 80065d8:	f001 fa24 	bl	8007a24 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 80065dc:	2001      	movs	r0, #1
 80065de:	f001 fa57 	bl	8007a90 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 80065e2:	4a7f      	ldr	r2, [pc, #508]	; (80067e0 <calWallConrol+0x10e0>)
 80065e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065e6:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = CenterSlantL;
 80065e8:	4a7f      	ldr	r2, [pc, #508]	; (80067e8 <calWallConrol+0x10e8>)
 80065ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065ec:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 80065ee:	4b7d      	ldr	r3, [pc, #500]	; (80067e4 <calWallConrol+0x10e4>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	ee07 3a90 	vmov	s15, r3
 80065f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065fa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80065fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006602:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0])
 8006606:	4b77      	ldr	r3, [pc, #476]	; (80067e4 <calWallConrol+0x10e4>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	ee07 3a90 	vmov	s15, r3
 800660e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8006616:	4b73      	ldr	r3, [pc, #460]	; (80067e4 <calWallConrol+0x10e4>)
 8006618:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800661c:	ee07 3a90 	vmov	s15, r3
 8006620:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006624:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006628:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_RIGHT][0]));
 800662c:	4b6d      	ldr	r3, [pc, #436]	; (80067e4 <calWallConrol+0x10e4>)
 800662e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006632:	ee07 3a90 	vmov	s15, r3
 8006636:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800663a:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 800663e:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8006642:	4b6a      	ldr	r3, [pc, #424]	; (80067ec <calWallConrol+0x10ec>)
 8006644:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8006648:	4b68      	ldr	r3, [pc, #416]	; (80067ec <calWallConrol+0x10ec>)
 800664a:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 800664e:	4b67      	ldr	r3, [pc, #412]	; (80067ec <calWallConrol+0x10ec>)
 8006650:	edd3 7a01 	vldr	s15, [r3, #4]
 8006654:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8006658:	4b64      	ldr	r3, [pc, #400]	; (80067ec <calWallConrol+0x10ec>)
 800665a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 800665e:	4b63      	ldr	r3, [pc, #396]	; (80067ec <calWallConrol+0x10ec>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a62      	ldr	r2, [pc, #392]	; (80067ec <calWallConrol+0x10ec>)
 8006664:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8006666:	4b61      	ldr	r3, [pc, #388]	; (80067ec <calWallConrol+0x10ec>)
 8006668:	ed93 7a00 	vldr	s14, [r3]
 800666c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006670:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8006674:	4b5d      	ldr	r3, [pc, #372]	; (80067ec <calWallConrol+0x10ec>)
 8006676:	edd3 6a02 	vldr	s13, [r3, #8]
 800667a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800667e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8006682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006686:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800668a:	bf00      	nop
// 斜め45度
		float CenterSlantR45, CenterSlantL45;
		float coefficientR45[4];
		float coefficientL45[4];
		float sensor_gain_slant45_p, sensor_gain_slant45_d;
		if (straight.velocity > 1000) {
 800668c:	4b58      	ldr	r3, [pc, #352]	; (80067f0 <calWallConrol+0x10f0>)
 800668e:	edd3 7a00 	vldr	s15, [r3]
 8006692:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80067f4 <calWallConrol+0x10f4>
 8006696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800669a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800669e:	dd04      	ble.n	80066aa <calWallConrol+0xfaa>
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * 1000;
 80066a0:	4b55      	ldr	r3, [pc, #340]	; (80067f8 <calWallConrol+0x10f8>)
 80066a2:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * 1000;
 80066a4:	4b55      	ldr	r3, [pc, #340]	; (80067fc <calWallConrol+0x10fc>)
 80066a6:	673b      	str	r3, [r7, #112]	; 0x70
 80066a8:	e023      	b.n	80066f2 <calWallConrol+0xff2>
		} else {
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * straight.velocity;
 80066aa:	4b51      	ldr	r3, [pc, #324]	; (80067f0 <calWallConrol+0x10f0>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7f9 ff72 	bl	8000598 <__aeabi_f2d>
 80066b4:	a346      	add	r3, pc, #280	; (adr r3, 80067d0 <calWallConrol+0x10d0>)
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	f7f9 ffc5 	bl	8000648 <__aeabi_dmul>
 80066be:	4602      	mov	r2, r0
 80066c0:	460b      	mov	r3, r1
 80066c2:	4610      	mov	r0, r2
 80066c4:	4619      	mov	r1, r3
 80066c6:	f7fa fa97 	bl	8000bf8 <__aeabi_d2f>
 80066ca:	4603      	mov	r3, r0
 80066cc:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * straight.velocity;
 80066ce:	4b48      	ldr	r3, [pc, #288]	; (80067f0 <calWallConrol+0x10f0>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7f9 ff60 	bl	8000598 <__aeabi_f2d>
 80066d8:	a33f      	add	r3, pc, #252	; (adr r3, 80067d8 <calWallConrol+0x10d8>)
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	f7f9 ffb3 	bl	8000648 <__aeabi_dmul>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4610      	mov	r0, r2
 80066e8:	4619      	mov	r1, r3
 80066ea:	f7fa fa85 	bl	8000bf8 <__aeabi_d2f>
 80066ee:	4603      	mov	r3, r0
 80066f0:	673b      	str	r3, [r7, #112]	; 0x70
		}

		if (NoWallDisplacementR45slant > AREAMIN45_R0
 80066f2:	4b43      	ldr	r3, [pc, #268]	; (8006800 <calWallConrol+0x1100>)
 80066f4:	edd3 7a00 	vldr	s15, [r3]
 80066f8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80066fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006704:	dd12      	ble.n	800672c <calWallConrol+0x102c>
				&& NoWallDisplacementR45slant <= AREAMAX45_R0) {
 8006706:	4b3e      	ldr	r3, [pc, #248]	; (8006800 <calWallConrol+0x1100>)
 8006708:	edd3 7a00 	vldr	s15, [r3]
 800670c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8006804 <calWallConrol+0x1104>
 8006710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006718:	d808      	bhi.n	800672c <calWallConrol+0x102c>
			coefficientR45[0] = COEFFICIENT45_R0_0;
 800671a:	4b3b      	ldr	r3, [pc, #236]	; (8006808 <calWallConrol+0x1108>)
 800671c:	62bb      	str	r3, [r7, #40]	; 0x28
			coefficientR45[1] = COEFFICIENT45_R0_1;
 800671e:	4b3b      	ldr	r3, [pc, #236]	; (800680c <calWallConrol+0x110c>)
 8006720:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = COEFFICIENT45_R0_2;
 8006722:	4b3b      	ldr	r3, [pc, #236]	; (8006810 <calWallConrol+0x1110>)
 8006724:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = COEFFICIENT45_R0_3;
 8006726:	4b3b      	ldr	r3, [pc, #236]	; (8006814 <calWallConrol+0x1114>)
 8006728:	637b      	str	r3, [r7, #52]	; 0x34
 800672a:	e025      	b.n	8006778 <calWallConrol+0x1078>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_RIGHT][0]
 800672c:	4b2d      	ldr	r3, [pc, #180]	; (80067e4 <calWallConrol+0x10e4>)
 800672e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006732:	2bdc      	cmp	r3, #220	; 0xdc
 8006734:	dd07      	ble.n	8006746 <calWallConrol+0x1046>
					> CONTROLWALL_THRESHOLD_SLANT45_R) {
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8006736:	4b38      	ldr	r3, [pc, #224]	; (8006818 <calWallConrol+0x1118>)
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	f043 0302 	orr.w	r3, r3, #2
 800673e:	b2da      	uxtb	r2, r3
 8006740:	4b35      	ldr	r3, [pc, #212]	; (8006818 <calWallConrol+0x1118>)
 8006742:	701a      	strb	r2, [r3, #0]
 8006744:	e006      	b.n	8006754 <calWallConrol+0x1054>
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8006746:	4b34      	ldr	r3, [pc, #208]	; (8006818 <calWallConrol+0x1118>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	f023 0302 	bic.w	r3, r3, #2
 800674e:	b2da      	uxtb	r2, r3
 8006750:	4b31      	ldr	r3, [pc, #196]	; (8006818 <calWallConrol+0x1118>)
 8006752:	701a      	strb	r2, [r3, #0]
			}
			coefficientR45[0] = g_sensor[SENSOR_FRONT_RIGHT][0];
 8006754:	4b23      	ldr	r3, [pc, #140]	; (80067e4 <calWallConrol+0x10e4>)
 8006756:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800675a:	ee07 3a90 	vmov	s15, r3
 800675e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006762:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			coefficientR45[1] = 0;
 8006766:	f04f 0300 	mov.w	r3, #0
 800676a:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = 0;
 800676c:	f04f 0300 	mov.w	r3, #0
 8006770:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = 0;
 8006772:	f04f 0300 	mov.w	r3, #0
 8006776:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (NoWallDisplacementL45slant > AREAMIN45_L0
 8006778:	4b28      	ldr	r3, [pc, #160]	; (800681c <calWallConrol+0x111c>)
 800677a:	edd3 7a00 	vldr	s15, [r3]
 800677e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800678a:	dd12      	ble.n	80067b2 <calWallConrol+0x10b2>
				&& NoWallDisplacementL45slant <= AREAMAX45_L0) {
 800678c:	4b23      	ldr	r3, [pc, #140]	; (800681c <calWallConrol+0x111c>)
 800678e:	edd3 7a00 	vldr	s15, [r3]
 8006792:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006804 <calWallConrol+0x1104>
 8006796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800679a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800679e:	d808      	bhi.n	80067b2 <calWallConrol+0x10b2>
			coefficientL45[0] = COEFFICIENT45_L0_0;
 80067a0:	4b1f      	ldr	r3, [pc, #124]	; (8006820 <calWallConrol+0x1120>)
 80067a2:	61bb      	str	r3, [r7, #24]
			coefficientL45[1] = COEFFICIENT45_L0_1;
 80067a4:	4b1f      	ldr	r3, [pc, #124]	; (8006824 <calWallConrol+0x1124>)
 80067a6:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = COEFFICIENT45_L0_2;
 80067a8:	4b1f      	ldr	r3, [pc, #124]	; (8006828 <calWallConrol+0x1128>)
 80067aa:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = COEFFICIENT45_L0_3;
 80067ac:	4b1f      	ldr	r3, [pc, #124]	; (800682c <calWallConrol+0x112c>)
 80067ae:	627b      	str	r3, [r7, #36]	; 0x24
 80067b0:	e056      	b.n	8006860 <calWallConrol+0x1160>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L) {
 80067b2:	4b0c      	ldr	r3, [pc, #48]	; (80067e4 <calWallConrol+0x10e4>)
 80067b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b6:	2bdc      	cmp	r3, #220	; 0xdc
 80067b8:	dd3a      	ble.n	8006830 <calWallConrol+0x1130>
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 80067ba:	4b17      	ldr	r3, [pc, #92]	; (8006818 <calWallConrol+0x1118>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	f043 0301 	orr.w	r3, r3, #1
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	4b14      	ldr	r3, [pc, #80]	; (8006818 <calWallConrol+0x1118>)
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	e039      	b.n	800683e <calWallConrol+0x113e>
 80067ca:	bf00      	nop
 80067cc:	f3af 8000 	nop.w
 80067d0:	33333333 	.word	0x33333333
 80067d4:	3fe33333 	.word	0x3fe33333
 80067d8:	eb851eb8 	.word	0xeb851eb8
 80067dc:	bfaeb851 	.word	0xbfaeb851
 80067e0:	200005b8 	.word	0x200005b8
 80067e4:	200002bc 	.word	0x200002bc
 80067e8:	200005bc 	.word	0x200005bc
 80067ec:	20000584 	.word	0x20000584
 80067f0:	200004dc 	.word	0x200004dc
 80067f4:	447a0000 	.word	0x447a0000
 80067f8:	44160000 	.word	0x44160000
 80067fc:	c2700000 	.word	0xc2700000
 8006800:	200005e8 	.word	0x200005e8
 8006804:	42a00000 	.word	0x42a00000
 8006808:	43e7e73c 	.word	0x43e7e73c
 800680c:	c0f9d45b 	.word	0xc0f9d45b
 8006810:	3e043787 	.word	0x3e043787
 8006814:	b83cbe62 	.word	0xb83cbe62
 8006818:	200005a0 	.word	0x200005a0
 800681c:	200005ec 	.word	0x200005ec
 8006820:	440fa6b0 	.word	0x440fa6b0
 8006824:	c1892199 	.word	0xc1892199
 8006828:	3ea1604b 	.word	0x3ea1604b
 800682c:	baa12c1b 	.word	0xbaa12c1b
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8006830:	4bb5      	ldr	r3, [pc, #724]	; (8006b08 <calWallConrol+0x1408>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	f023 0301 	bic.w	r3, r3, #1
 8006838:	b2da      	uxtb	r2, r3
 800683a:	4bb3      	ldr	r3, [pc, #716]	; (8006b08 <calWallConrol+0x1408>)
 800683c:	701a      	strb	r2, [r3, #0]
			}
			coefficientL45[0] = g_sensor[SENSOR_FRONT_LEFT][0];
 800683e:	4bb3      	ldr	r3, [pc, #716]	; (8006b0c <calWallConrol+0x140c>)
 8006840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006842:	ee07 3a90 	vmov	s15, r3
 8006846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800684a:	edc7 7a06 	vstr	s15, [r7, #24]
			coefficientL45[1] = 0;
 800684e:	f04f 0300 	mov.w	r3, #0
 8006852:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = 0;
 8006854:	f04f 0300 	mov.w	r3, #0
 8006858:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = 0;
 800685a:	f04f 0300 	mov.w	r3, #0
 800685e:	627b      	str	r3, [r7, #36]	; 0x24
		}
		CenterSlantR45 = coefficientR45[0]
 8006860:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
				+ coefficientR45[1] * NoWallDisplacementR45slant
 8006864:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8006868:	4ba9      	ldr	r3, [pc, #676]	; (8006b10 <calWallConrol+0x1410>)
 800686a:	edd3 7a00 	vldr	s15, [r3]
 800686e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006872:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8006876:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800687a:	4ba5      	ldr	r3, [pc, #660]	; (8006b10 <calWallConrol+0x1410>)
 800687c:	edd3 7a00 	vldr	s15, [r3]
 8006880:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8006884:	4ba2      	ldr	r3, [pc, #648]	; (8006b10 <calWallConrol+0x1410>)
 8006886:	edd3 7a00 	vldr	s15, [r3]
 800688a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 800688e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[3] * NoWallDisplacementR45slant
 8006892:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8006896:	4b9e      	ldr	r3, [pc, #632]	; (8006b10 <calWallConrol+0x1410>)
 8006898:	edd3 7a00 	vldr	s15, [r3]
 800689c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80068a0:	4b9b      	ldr	r3, [pc, #620]	; (8006b10 <calWallConrol+0x1410>)
 80068a2:	edd3 7a00 	vldr	s15, [r3]
 80068a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 80068aa:	4b99      	ldr	r3, [pc, #612]	; (8006b10 <calWallConrol+0x1410>)
 80068ac:	edd3 7a00 	vldr	s15, [r3]
 80068b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR45 = coefficientR45[0]
 80068b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068b8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		CenterSlantL45 = coefficientL45[0]
 80068bc:	ed97 7a06 	vldr	s14, [r7, #24]
				+ coefficientL45[1] * NoWallDisplacementL45slant
 80068c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80068c4:	4b93      	ldr	r3, [pc, #588]	; (8006b14 <calWallConrol+0x1414>)
 80068c6:	edd3 7a00 	vldr	s15, [r3]
 80068ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068ce:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 80068d2:	edd7 6a08 	vldr	s13, [r7, #32]
 80068d6:	4b8f      	ldr	r3, [pc, #572]	; (8006b14 <calWallConrol+0x1414>)
 80068d8:	edd3 7a00 	vldr	s15, [r3]
 80068dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 80068e0:	4b8c      	ldr	r3, [pc, #560]	; (8006b14 <calWallConrol+0x1414>)
 80068e2:	edd3 7a00 	vldr	s15, [r3]
 80068e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 80068ea:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[3] * NoWallDisplacementL45slant
 80068ee:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80068f2:	4b88      	ldr	r3, [pc, #544]	; (8006b14 <calWallConrol+0x1414>)
 80068f4:	edd3 7a00 	vldr	s15, [r3]
 80068f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 80068fc:	4b85      	ldr	r3, [pc, #532]	; (8006b14 <calWallConrol+0x1414>)
 80068fe:	edd3 7a00 	vldr	s15, [r3]
 8006902:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8006906:	4b83      	ldr	r3, [pc, #524]	; (8006b14 <calWallConrol+0x1414>)
 8006908:	edd3 7a00 	vldr	s15, [r3]
 800690c:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL45 = coefficientL45[0]
 8006910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006914:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		for (int j = 11; j >= 1; j--) {
 8006918:	230b      	movs	r3, #11
 800691a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800691c:	e018      	b.n	8006950 <calWallConrol+0x1250>
			g_CenterSlantR45[j] = g_CenterSlantR45[j - 1];
 800691e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006920:	3b01      	subs	r3, #1
 8006922:	4a7d      	ldr	r2, [pc, #500]	; (8006b18 <calWallConrol+0x1418>)
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	497b      	ldr	r1, [pc, #492]	; (8006b18 <calWallConrol+0x1418>)
 800692c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	440b      	add	r3, r1
 8006932:	601a      	str	r2, [r3, #0]
			g_CenterSlantL45[j] = g_CenterSlantL45[j - 1];
 8006934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006936:	3b01      	subs	r3, #1
 8006938:	4a78      	ldr	r2, [pc, #480]	; (8006b1c <calWallConrol+0x141c>)
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	4976      	ldr	r1, [pc, #472]	; (8006b1c <calWallConrol+0x141c>)
 8006942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	440b      	add	r3, r1
 8006948:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 800694a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800694c:	3b01      	subs	r3, #1
 800694e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006952:	2b00      	cmp	r3, #0
 8006954:	dce3      	bgt.n	800691e <calWallConrol+0x121e>
		}
		g_CenterSlantR45[0] = CenterSlantR45;
 8006956:	4a70      	ldr	r2, [pc, #448]	; (8006b18 <calWallConrol+0x1418>)
 8006958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800695a:	6013      	str	r3, [r2, #0]
		g_CenterSlantL45[0] = CenterSlantL45;
 800695c:	4a6f      	ldr	r2, [pc, #444]	; (8006b1c <calWallConrol+0x141c>)
 800695e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006960:	6013      	str	r3, [r2, #0]

		g_CenterSlantR45_diff = g_CenterSlantR45[0] - g_CenterSlantR45[11];
 8006962:	4b6d      	ldr	r3, [pc, #436]	; (8006b18 <calWallConrol+0x1418>)
 8006964:	ed93 7a00 	vldr	s14, [r3]
 8006968:	4b6b      	ldr	r3, [pc, #428]	; (8006b18 <calWallConrol+0x1418>)
 800696a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800696e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006972:	4b6b      	ldr	r3, [pc, #428]	; (8006b20 <calWallConrol+0x1420>)
 8006974:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL45_diff = g_CenterSlantL45[0] - g_CenterSlantL45[11];
 8006978:	4b68      	ldr	r3, [pc, #416]	; (8006b1c <calWallConrol+0x141c>)
 800697a:	ed93 7a00 	vldr	s14, [r3]
 800697e:	4b67      	ldr	r3, [pc, #412]	; (8006b1c <calWallConrol+0x141c>)
 8006980:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006984:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006988:	4b66      	ldr	r3, [pc, #408]	; (8006b24 <calWallConrol+0x1424>)
 800698a:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT45_R
 800698e:	4b5f      	ldr	r3, [pc, #380]	; (8006b0c <calWallConrol+0x140c>)
 8006990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006994:	2bdc      	cmp	r3, #220	; 0xdc
 8006996:	dd1a      	ble.n	80069ce <calWallConrol+0x12ce>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8006998:	4b63      	ldr	r3, [pc, #396]	; (8006b28 <calWallConrol+0x1428>)
 800699a:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 800699c:	ee07 3a90 	vmov	s15, r3
 80069a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069a4:	4b5e      	ldr	r3, [pc, #376]	; (8006b20 <calWallConrol+0x1420>)
 80069a6:	edd3 7a00 	vldr	s15, [r3]
 80069aa:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 80069ae:	eef0 7ae7 	vabs.f32	s15, s15
 80069b2:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8006b2c <calWallConrol+0x142c>
 80069b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069be:	d506      	bpl.n	80069ce <calWallConrol+0x12ce>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 80069c0:	4b51      	ldr	r3, [pc, #324]	; (8006b08 <calWallConrol+0x1408>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	f043 0302 	orr.w	r3, r3, #2
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	4b4f      	ldr	r3, [pc, #316]	; (8006b08 <calWallConrol+0x1408>)
 80069cc:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L
 80069ce:	4b4f      	ldr	r3, [pc, #316]	; (8006b0c <calWallConrol+0x140c>)
 80069d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d2:	2bdc      	cmp	r3, #220	; 0xdc
 80069d4:	dd1a      	ble.n	8006a0c <calWallConrol+0x130c>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 80069d6:	4b54      	ldr	r3, [pc, #336]	; (8006b28 <calWallConrol+0x1428>)
 80069d8:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 80069da:	ee07 3a90 	vmov	s15, r3
 80069de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069e2:	4b50      	ldr	r3, [pc, #320]	; (8006b24 <calWallConrol+0x1424>)
 80069e4:	edd3 7a00 	vldr	s15, [r3]
 80069e8:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 80069ec:	eef0 7ae7 	vabs.f32	s15, s15
 80069f0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8006b2c <calWallConrol+0x142c>
 80069f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069fc:	d506      	bpl.n	8006a0c <calWallConrol+0x130c>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 80069fe:	4b42      	ldr	r3, [pc, #264]	; (8006b08 <calWallConrol+0x1408>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	f043 0301 	orr.w	r3, r3, #1
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	4b3f      	ldr	r3, [pc, #252]	; (8006b08 <calWallConrol+0x1408>)
 8006a0a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT45_R
 8006a0c:	4b3f      	ldr	r3, [pc, #252]	; (8006b0c <calWallConrol+0x140c>)
 8006a0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a12:	2bdb      	cmp	r3, #219	; 0xdb
 8006a14:	dd13      	ble.n	8006a3e <calWallConrol+0x133e>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8006a16:	4b44      	ldr	r3, [pc, #272]	; (8006b28 <calWallConrol+0x1428>)
 8006a18:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8006a1a:	ee07 3a90 	vmov	s15, r3
 8006a1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a22:	4b3f      	ldr	r3, [pc, #252]	; (8006b20 <calWallConrol+0x1420>)
 8006a24:	edd3 7a00 	vldr	s15, [r3]
 8006a28:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8006a2c:	eef0 7ae7 	vabs.f32	s15, s15
 8006a30:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8006b2c <calWallConrol+0x142c>
 8006a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a3c:	dd06      	ble.n	8006a4c <calWallConrol+0x134c>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8006a3e:	4b32      	ldr	r3, [pc, #200]	; (8006b08 <calWallConrol+0x1408>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	f023 0302 	bic.w	r3, r3, #2
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	4b2f      	ldr	r3, [pc, #188]	; (8006b08 <calWallConrol+0x1408>)
 8006a4a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT45_L
 8006a4c:	4b2f      	ldr	r3, [pc, #188]	; (8006b0c <calWallConrol+0x140c>)
 8006a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a50:	2bdb      	cmp	r3, #219	; 0xdb
 8006a52:	dd13      	ble.n	8006a7c <calWallConrol+0x137c>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8006a54:	4b34      	ldr	r3, [pc, #208]	; (8006b28 <calWallConrol+0x1428>)
 8006a56:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8006a58:	ee07 3a90 	vmov	s15, r3
 8006a5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a60:	4b30      	ldr	r3, [pc, #192]	; (8006b24 <calWallConrol+0x1424>)
 8006a62:	edd3 7a00 	vldr	s15, [r3]
 8006a66:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8006a6a:	eef0 7ae7 	vabs.f32	s15, s15
 8006a6e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006b2c <calWallConrol+0x142c>
 8006a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a7a:	dd06      	ble.n	8006a8a <calWallConrol+0x138a>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8006a7c:	4b22      	ldr	r3, [pc, #136]	; (8006b08 <calWallConrol+0x1408>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	f023 0301 	bic.w	r3, r3, #1
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	4b20      	ldr	r3, [pc, #128]	; (8006b08 <calWallConrol+0x1408>)
 8006a88:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus45) {
 8006a8a:	4b1f      	ldr	r3, [pc, #124]	; (8006b08 <calWallConrol+0x1408>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	f200 8155 	bhi.w	8006d3e <calWallConrol+0x163e>
 8006a94:	a201      	add	r2, pc, #4	; (adr r2, 8006a9c <calWallConrol+0x139c>)
 8006a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9a:	bf00      	nop
 8006a9c:	08006aad 	.word	0x08006aad
 8006aa0:	08006b41 	.word	0x08006b41
 8006aa4:	08006be1 	.word	0x08006be1
 8006aa8:	08006c7f 	.word	0x08006c7f
		case 0:			//両壁なし
			PID_wall += 0;
 8006aac:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006ab0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006b30 <calWallConrol+0x1430>
 8006ab4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ab8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_3(0);
 8006abc:	2000      	movs	r0, #0
 8006abe:	f000 ffc3 	bl	8007a48 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	f000 ffd2 	bl	8007a6c <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8006ac8:	4b10      	ldr	r3, [pc, #64]	; (8006b0c <calWallConrol+0x140c>)
 8006aca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ad6:	4b17      	ldr	r3, [pc, #92]	; (8006b34 <calWallConrol+0x1434>)
 8006ad8:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8006adc:	4b0b      	ldr	r3, [pc, #44]	; (8006b0c <calWallConrol+0x140c>)
 8006ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae0:	ee07 3a90 	vmov	s15, r3
 8006ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ae8:	4b13      	ldr	r3, [pc, #76]	; (8006b38 <calWallConrol+0x1438>)
 8006aea:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = 0;
 8006aee:	4b13      	ldr	r3, [pc, #76]	; (8006b3c <calWallConrol+0x143c>)
 8006af0:	f04f 0200 	mov.w	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]
			wall_slant45.delta_error = 0;
 8006af6:	4b11      	ldr	r3, [pc, #68]	; (8006b3c <calWallConrol+0x143c>)
 8006af8:	f04f 0200 	mov.w	r2, #0
 8006afc:	609a      	str	r2, [r3, #8]
			wall_slant45.old_error = 0;
 8006afe:	4b0f      	ldr	r3, [pc, #60]	; (8006b3c <calWallConrol+0x143c>)
 8006b00:	f04f 0200 	mov.w	r2, #0
 8006b04:	605a      	str	r2, [r3, #4]
			break;
 8006b06:	e11a      	b.n	8006d3e <calWallConrol+0x163e>
 8006b08:	200005a0 	.word	0x200005a0
 8006b0c:	200002bc 	.word	0x200002bc
 8006b10:	200005e8 	.word	0x200005e8
 8006b14:	200005ec 	.word	0x200005ec
 8006b18:	20000674 	.word	0x20000674
 8006b1c:	200006a4 	.word	0x200006a4
 8006b20:	200006dc 	.word	0x200006dc
 8006b24:	200006e0 	.word	0x200006e0
 8006b28:	2000044c 	.word	0x2000044c
 8006b2c:	42a00000 	.word	0x42a00000
 8006b30:	00000000 	.word	0x00000000
 8006b34:	200005b0 	.word	0x200005b0
 8006b38:	200005b4 	.word	0x200005b4
 8006b3c:	20000590 	.word	0x20000590
		case 1:			//左壁のみ
			pl_yellow_LED_3(0);
 8006b40:	2000      	movs	r0, #0
 8006b42:	f000 ff81 	bl	8007a48 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8006b46:	2001      	movs	r0, #1
 8006b48:	f000 ff90 	bl	8007a6c <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8006b4c:	4b87      	ldr	r3, [pc, #540]	; (8006d6c <calWallConrol+0x166c>)
 8006b4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b5a:	4b85      	ldr	r3, [pc, #532]	; (8006d70 <calWallConrol+0x1670>)
 8006b5c:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = CenterSlantL45;
 8006b60:	4a84      	ldr	r2, [pc, #528]	; (8006d74 <calWallConrol+0x1674>)
 8006b62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b64:	6013      	str	r3, [r2, #0]
			wall_slant45.error =
					(-(float) (g_sensor[SENSOR_FRONT_LEFT][0] - CenterSlantL45)
 8006b66:	4b81      	ldr	r3, [pc, #516]	; (8006d6c <calWallConrol+0x166c>)
 8006b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b72:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006b76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b7a:	eef1 6a67 	vneg.f32	s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_LEFT][0]));
 8006b7e:	4b7b      	ldr	r3, [pc, #492]	; (8006d6c <calWallConrol+0x166c>)
 8006b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error =
 8006b8e:	4b7a      	ldr	r3, [pc, #488]	; (8006d78 <calWallConrol+0x1678>)
 8006b90:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006b94:	4b78      	ldr	r3, [pc, #480]	; (8006d78 <calWallConrol+0x1678>)
 8006b96:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8006b9a:	4b77      	ldr	r3, [pc, #476]	; (8006d78 <calWallConrol+0x1678>)
 8006b9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006ba4:	4b74      	ldr	r3, [pc, #464]	; (8006d78 <calWallConrol+0x1678>)
 8006ba6:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8006baa:	4b73      	ldr	r3, [pc, #460]	; (8006d78 <calWallConrol+0x1678>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a72      	ldr	r2, [pc, #456]	; (8006d78 <calWallConrol+0x1678>)
 8006bb0:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006bb2:	4b71      	ldr	r3, [pc, #452]	; (8006d78 <calWallConrol+0x1678>)
 8006bb4:	ed93 7a00 	vldr	s14, [r3]
 8006bb8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006bbc:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006bc0:	4b6d      	ldr	r3, [pc, #436]	; (8006d78 <calWallConrol+0x1678>)
 8006bc2:	edd3 6a02 	vldr	s13, [r3, #8]
 8006bc6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006bca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bce:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006bd2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bda:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006bde:	e0ae      	b.n	8006d3e <calWallConrol+0x163e>
		case 2:			//右壁のみ
			pl_yellow_LED_3(1);
 8006be0:	2001      	movs	r0, #1
 8006be2:	f000 ff31 	bl	8007a48 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8006be6:	2000      	movs	r0, #0
 8006be8:	f000 ff40 	bl	8007a6c <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8006bec:	4a60      	ldr	r2, [pc, #384]	; (8006d70 <calWallConrol+0x1670>)
 8006bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bf0:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8006bf2:	4b5e      	ldr	r3, [pc, #376]	; (8006d6c <calWallConrol+0x166c>)
 8006bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf6:	ee07 3a90 	vmov	s15, r3
 8006bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bfe:	4b5d      	ldr	r3, [pc, #372]	; (8006d74 <calWallConrol+0x1674>)
 8006c00:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8006c04:	4b59      	ldr	r3, [pc, #356]	; (8006d6c <calWallConrol+0x166c>)
 8006c06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c0a:	ee07 3a90 	vmov	s15, r3
 8006c0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c12:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006c16:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR45)
					/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 8006c1a:	4b54      	ldr	r3, [pc, #336]	; (8006d6c <calWallConrol+0x166c>)
 8006c1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c20:	ee07 3a90 	vmov	s15, r3
 8006c24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c28:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8006c2c:	4b52      	ldr	r3, [pc, #328]	; (8006d78 <calWallConrol+0x1678>)
 8006c2e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006c32:	4b51      	ldr	r3, [pc, #324]	; (8006d78 <calWallConrol+0x1678>)
 8006c34:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8006c38:	4b4f      	ldr	r3, [pc, #316]	; (8006d78 <calWallConrol+0x1678>)
 8006c3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8006c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006c42:	4b4d      	ldr	r3, [pc, #308]	; (8006d78 <calWallConrol+0x1678>)
 8006c44:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8006c48:	4b4b      	ldr	r3, [pc, #300]	; (8006d78 <calWallConrol+0x1678>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a4a      	ldr	r2, [pc, #296]	; (8006d78 <calWallConrol+0x1678>)
 8006c4e:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006c50:	4b49      	ldr	r3, [pc, #292]	; (8006d78 <calWallConrol+0x1678>)
 8006c52:	ed93 7a00 	vldr	s14, [r3]
 8006c56:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006c5a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006c5e:	4b46      	ldr	r3, [pc, #280]	; (8006d78 <calWallConrol+0x1678>)
 8006c60:	edd3 6a02 	vldr	s13, [r3, #8]
 8006c64:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006c68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006c70:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c78:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006c7c:	e05f      	b.n	8006d3e <calWallConrol+0x163e>
		case 3:			//両壁あり
			pl_yellow_LED_3(1);
 8006c7e:	2001      	movs	r0, #1
 8006c80:	f000 fee2 	bl	8007a48 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8006c84:	2001      	movs	r0, #1
 8006c86:	f000 fef1 	bl	8007a6c <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8006c8a:	4a39      	ldr	r2, [pc, #228]	; (8006d70 <calWallConrol+0x1670>)
 8006c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c8e:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = CenterSlantL45;
 8006c90:	4a38      	ldr	r2, [pc, #224]	; (8006d74 <calWallConrol+0x1674>)
 8006c92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c94:	6013      	str	r3, [r2, #0]
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8006c96:	4b35      	ldr	r3, [pc, #212]	; (8006d6c <calWallConrol+0x166c>)
 8006c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ca2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006ca6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006caa:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL45) / (float) (g_sensor[SENSOR_FRONT_LEFT][0])
 8006cae:	4b2f      	ldr	r3, [pc, #188]	; (8006d6c <calWallConrol+0x166c>)
 8006cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb2:	ee07 3a90 	vmov	s15, r3
 8006cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8006cbe:	4b2b      	ldr	r3, [pc, #172]	; (8006d6c <calWallConrol+0x166c>)
 8006cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cc4:	ee07 3a90 	vmov	s15, r3
 8006cc8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006ccc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006cd0:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 8006cd4:	4b25      	ldr	r3, [pc, #148]	; (8006d6c <calWallConrol+0x166c>)
 8006cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cda:	ee07 3a90 	vmov	s15, r3
 8006cde:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006ce2:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8006ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8006cea:	4b23      	ldr	r3, [pc, #140]	; (8006d78 <calWallConrol+0x1678>)
 8006cec:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006cf0:	4b21      	ldr	r3, [pc, #132]	; (8006d78 <calWallConrol+0x1678>)
 8006cf2:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8006cf6:	4b20      	ldr	r3, [pc, #128]	; (8006d78 <calWallConrol+0x1678>)
 8006cf8:	edd3 7a01 	vldr	s15, [r3, #4]
 8006cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006d00:	4b1d      	ldr	r3, [pc, #116]	; (8006d78 <calWallConrol+0x1678>)
 8006d02:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8006d06:	4b1c      	ldr	r3, [pc, #112]	; (8006d78 <calWallConrol+0x1678>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a1b      	ldr	r2, [pc, #108]	; (8006d78 <calWallConrol+0x1678>)
 8006d0c:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006d0e:	4b1a      	ldr	r3, [pc, #104]	; (8006d78 <calWallConrol+0x1678>)
 8006d10:	ed93 7a00 	vldr	s14, [r3]
 8006d14:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006d18:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006d1c:	4b16      	ldr	r3, [pc, #88]	; (8006d78 <calWallConrol+0x1678>)
 8006d1e:	edd3 6a02 	vldr	s13, [r3, #8]
 8006d22:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006d26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006d2e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d36:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006d3a:	e000      	b.n	8006d3e <calWallConrol+0x163e>
			break;
 8006d3c:	bf00      	nop
		}

	}
	PID_w = PID_wall / MAXMOTOR * g_V_battery_mean;
 8006d3e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006d42:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006d7c <calWallConrol+0x167c>
 8006d46:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	; (8006d80 <calWallConrol+0x1680>)
 8006d4c:	edd3 7a00 	vldr	s15, [r3]
 8006d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d54:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	return PID_w;
 8006d58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d5a:	ee07 3a90 	vmov	s15, r3
}
 8006d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8006d62:	37a8      	adds	r7, #168	; 0xa8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d6a:	bf00      	nop
 8006d6c:	200002bc 	.word	0x200002bc
 8006d70:	200005b0 	.word	0x200005b0
 8006d74:	200005b4 	.word	0x200005b4
 8006d78:	20000590 	.word	0x20000590
 8006d7c:	44d1e000 	.word	0x44d1e000
 8006d80:	200004d8 	.word	0x200004d8
 8006d84:	00000000 	.word	0x00000000

08006d88 <interrupt_WallCut>:
			*PID_frontwall_r = 0;
		}
	}
}

void interrupt_WallCut(void) {
 8006d88:	b5b0      	push	{r4, r5, r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
	int del_time=ceil(3.5/INTERRUPT_TIME/fabs(straight.velocity));
 8006d8e:	4ba2      	ldr	r3, [pc, #648]	; (8007018 <interrupt_WallCut+0x290>)
 8006d90:	edd3 7a00 	vldr	s15, [r3]
 8006d94:	eef0 7ae7 	vabs.f32	s15, s15
 8006d98:	ee17 0a90 	vmov	r0, s15
 8006d9c:	f7f9 fbfc 	bl	8000598 <__aeabi_f2d>
 8006da0:	4602      	mov	r2, r0
 8006da2:	460b      	mov	r3, r1
 8006da4:	a198      	add	r1, pc, #608	; (adr r1, 8007008 <interrupt_WallCut+0x280>)
 8006da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006daa:	f7f9 fd77 	bl	800089c <__aeabi_ddiv>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	ec43 2b17 	vmov	d7, r2, r3
 8006db6:	eeb0 0a47 	vmov.f32	s0, s14
 8006dba:	eef0 0a67 	vmov.f32	s1, s15
 8006dbe:	f01c fd73 	bl	80238a8 <ceil>
 8006dc2:	ec53 2b10 	vmov	r2, r3, d0
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	4619      	mov	r1, r3
 8006dca:	f7f9 feed 	bl	8000ba8 <__aeabi_d2iz>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	617b      	str	r3, [r7, #20]
	if(del_time>=11){del_time=11;}
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2b0a      	cmp	r3, #10
 8006dd6:	dd01      	ble.n	8006ddc <interrupt_WallCut+0x54>
 8006dd8:	230b      	movs	r3, #11
 8006dda:	617b      	str	r3, [r7, #20]
	if(del_time<=4){del_time=4;}
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	dc01      	bgt.n	8006de6 <interrupt_WallCut+0x5e>
 8006de2:	2304      	movs	r3, #4
 8006de4:	617b      	str	r3, [r7, #20]
	for (int j = 0; j <= 4; j++) {
 8006de6:	2300      	movs	r3, #0
 8006de8:	613b      	str	r3, [r7, #16]
 8006dea:	e019      	b.n	8006e20 <interrupt_WallCut+0x98>
		g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][del_time];
 8006dec:	498b      	ldr	r1, [pc, #556]	; (800701c <interrupt_WallCut+0x294>)
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	4613      	mov	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	011b      	lsls	r3, r3, #4
 8006df8:	440b      	add	r3, r1
 8006dfa:	6819      	ldr	r1, [r3, #0]
 8006dfc:	4887      	ldr	r0, [pc, #540]	; (800701c <interrupt_WallCut+0x294>)
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	4613      	mov	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006e10:	1aca      	subs	r2, r1, r3
 8006e12:	4983      	ldr	r1, [pc, #524]	; (8007020 <interrupt_WallCut+0x298>)
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int j = 0; j <= 4; j++) {
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	613b      	str	r3, [r7, #16]
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	dde2      	ble.n	8006dec <interrupt_WallCut+0x64>
	}
//	if (maze_mode == 1 || (modeacc != 0 && modeacc != 3)) {}

	if (g_wallCut_mode == 1) {
 8006e26:	4b7f      	ldr	r3, [pc, #508]	; (8007024 <interrupt_WallCut+0x29c>)
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	f040 8555 	bne.w	80078da <interrupt_WallCut+0xb52>
// 壁壁の検知判定()
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_90) {
 8006e30:	4b7a      	ldr	r3, [pc, #488]	; (800701c <interrupt_WallCut+0x294>)
 8006e32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e3a:	dd03      	ble.n	8006e44 <interrupt_WallCut+0xbc>
			front_wall_break_90 = 1;
 8006e3c:	4b7a      	ldr	r3, [pc, #488]	; (8007028 <interrupt_WallCut+0x2a0>)
 8006e3e:	2201      	movs	r2, #1
 8006e40:	701a      	strb	r2, [r3, #0]
 8006e42:	e002      	b.n	8006e4a <interrupt_WallCut+0xc2>
		} else {
			front_wall_break_90 = 0;
 8006e44:	4b78      	ldr	r3, [pc, #480]	; (8007028 <interrupt_WallCut+0x2a0>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45) {
 8006e4a:	4b74      	ldr	r3, [pc, #464]	; (800701c <interrupt_WallCut+0x294>)
 8006e4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e50:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006e54:	dd03      	ble.n	8006e5e <interrupt_WallCut+0xd6>
			front_wall_break_45 = 1;
 8006e56:	4b75      	ldr	r3, [pc, #468]	; (800702c <interrupt_WallCut+0x2a4>)
 8006e58:	2201      	movs	r2, #1
 8006e5a:	701a      	strb	r2, [r3, #0]
 8006e5c:	e002      	b.n	8006e64 <interrupt_WallCut+0xdc>
		} else {
			front_wall_break_45 = 0;
 8006e5e:	4b73      	ldr	r3, [pc, #460]	; (800702c <interrupt_WallCut+0x2a4>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45SLANT) {
 8006e64:	4b6d      	ldr	r3, [pc, #436]	; (800701c <interrupt_WallCut+0x294>)
 8006e66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006e6e:	dd03      	ble.n	8006e78 <interrupt_WallCut+0xf0>
			front_wall_break_45slant = 1;
 8006e70:	4b6f      	ldr	r3, [pc, #444]	; (8007030 <interrupt_WallCut+0x2a8>)
 8006e72:	2201      	movs	r2, #1
 8006e74:	701a      	strb	r2, [r3, #0]
 8006e76:	e002      	b.n	8006e7e <interrupt_WallCut+0xf6>
		} else {
			front_wall_break_45slant = 0;
 8006e78:	4b6d      	ldr	r3, [pc, #436]	; (8007030 <interrupt_WallCut+0x2a8>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	701a      	strb	r2, [r3, #0]
		}

// スラロームで用いる90度センサーの壁切れ
		if (g_sensor[SENSOR_LEFT][0] < WALLCUT_THRESHOLD_L90) {
 8006e7e:	4b67      	ldr	r3, [pc, #412]	; (800701c <interrupt_WallCut+0x294>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006e86:	da30      	bge.n	8006eea <interrupt_WallCut+0x162>
			NoWallCountL90++;
 8006e88:	4b6a      	ldr	r3, [pc, #424]	; (8007034 <interrupt_WallCut+0x2ac>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	4a69      	ldr	r2, [pc, #420]	; (8007034 <interrupt_WallCut+0x2ac>)
 8006e90:	6013      	str	r3, [r2, #0]
			//straight.velocityのほうが良き？
			NoWallDisplacementL90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006e92:	4b69      	ldr	r3, [pc, #420]	; (8007038 <interrupt_WallCut+0x2b0>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7f9 fb7e 	bl	8000598 <__aeabi_f2d>
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	460d      	mov	r5, r1
 8006ea0:	4b66      	ldr	r3, [pc, #408]	; (800703c <interrupt_WallCut+0x2b4>)
 8006ea2:	ed93 7a00 	vldr	s14, [r3]
 8006ea6:	4b66      	ldr	r3, [pc, #408]	; (8007040 <interrupt_WallCut+0x2b8>)
 8006ea8:	edd3 7a00 	vldr	s15, [r3]
 8006eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006eb0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006eb4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006eb8:	ee16 0a90 	vmov	r0, s13
 8006ebc:	f7f9 fb6c 	bl	8000598 <__aeabi_f2d>
 8006ec0:	a353      	add	r3, pc, #332	; (adr r3, 8007010 <interrupt_WallCut+0x288>)
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	f7f9 fbbf 	bl	8000648 <__aeabi_dmul>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	4620      	mov	r0, r4
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	f7f9 fa03 	bl	80002dc <__adddf3>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	4610      	mov	r0, r2
 8006edc:	4619      	mov	r1, r3
 8006ede:	f7f9 fe8b 	bl	8000bf8 <__aeabi_d2f>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	4a54      	ldr	r2, [pc, #336]	; (8007038 <interrupt_WallCut+0x2b0>)
 8006ee6:	6013      	str	r3, [r2, #0]
 8006ee8:	e006      	b.n	8006ef8 <interrupt_WallCut+0x170>
//			straight.velocity*INTERRUPT_TIME - straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2
		} else {
			NoWallCountL90 = 0;
 8006eea:	4b52      	ldr	r3, [pc, #328]	; (8007034 <interrupt_WallCut+0x2ac>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	601a      	str	r2, [r3, #0]
			NoWallDisplacementL90 = 0;
 8006ef0:	4b51      	ldr	r3, [pc, #324]	; (8007038 <interrupt_WallCut+0x2b0>)
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	601a      	str	r2, [r3, #0]
		}

		if (g_sensor[SENSOR_RIGHT][0] < WALLCUT_THRESHOLD_R90) {
 8006ef8:	4b48      	ldr	r3, [pc, #288]	; (800701c <interrupt_WallCut+0x294>)
 8006efa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006efe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006f02:	da30      	bge.n	8006f66 <interrupt_WallCut+0x1de>
			NoWallCountR90++;
 8006f04:	4b4f      	ldr	r3, [pc, #316]	; (8007044 <interrupt_WallCut+0x2bc>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	4a4e      	ldr	r2, [pc, #312]	; (8007044 <interrupt_WallCut+0x2bc>)
 8006f0c:	6013      	str	r3, [r2, #0]
			NoWallDisplacementR90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006f0e:	4b4e      	ldr	r3, [pc, #312]	; (8007048 <interrupt_WallCut+0x2c0>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7f9 fb40 	bl	8000598 <__aeabi_f2d>
 8006f18:	4604      	mov	r4, r0
 8006f1a:	460d      	mov	r5, r1
 8006f1c:	4b47      	ldr	r3, [pc, #284]	; (800703c <interrupt_WallCut+0x2b4>)
 8006f1e:	ed93 7a00 	vldr	s14, [r3]
 8006f22:	4b47      	ldr	r3, [pc, #284]	; (8007040 <interrupt_WallCut+0x2b8>)
 8006f24:	edd3 7a00 	vldr	s15, [r3]
 8006f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f2c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006f30:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006f34:	ee16 0a90 	vmov	r0, s13
 8006f38:	f7f9 fb2e 	bl	8000598 <__aeabi_f2d>
 8006f3c:	a334      	add	r3, pc, #208	; (adr r3, 8007010 <interrupt_WallCut+0x288>)
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	f7f9 fb81 	bl	8000648 <__aeabi_dmul>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	4629      	mov	r1, r5
 8006f4e:	f7f9 f9c5 	bl	80002dc <__adddf3>
 8006f52:	4602      	mov	r2, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	4610      	mov	r0, r2
 8006f58:	4619      	mov	r1, r3
 8006f5a:	f7f9 fe4d 	bl	8000bf8 <__aeabi_d2f>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	4a39      	ldr	r2, [pc, #228]	; (8007048 <interrupt_WallCut+0x2c0>)
 8006f62:	6013      	str	r3, [r2, #0]
 8006f64:	e006      	b.n	8006f74 <interrupt_WallCut+0x1ec>
		} else {
			NoWallCountR90 = 0;
 8006f66:	4b37      	ldr	r3, [pc, #220]	; (8007044 <interrupt_WallCut+0x2bc>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	601a      	str	r2, [r3, #0]
			NoWallDisplacementR90 = 0;
 8006f6c:	4b36      	ldr	r3, [pc, #216]	; (8007048 <interrupt_WallCut+0x2c0>)
 8006f6e:	f04f 0200 	mov.w	r2, #0
 8006f72:	601a      	str	r2, [r3, #0]
		}

// 大回りターンで用いる45度センサーの壁切れ
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 8006f74:	4b2a      	ldr	r3, [pc, #168]	; (8007020 <interrupt_WallCut+0x298>)
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8006f7c:	da03      	bge.n	8006f86 <interrupt_WallCut+0x1fe>
				> WALLCUT_THRESHOLD_DIFF_L45 || g_sensor[SENSOR_FRONT_LEFT][0]
 8006f7e:	4b27      	ldr	r3, [pc, #156]	; (800701c <interrupt_WallCut+0x294>)
 8006f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f82:	2bc8      	cmp	r3, #200	; 0xc8
 8006f84:	dd37      	ble.n	8006ff6 <interrupt_WallCut+0x26e>
																				> WALLCUT_THRESHOLD_L45) {
			g_sensor_max_fl = 0;			//CENTER_FL;
 8006f86:	4b31      	ldr	r3, [pc, #196]	; (800704c <interrupt_WallCut+0x2c4>)
 8006f88:	f04f 0200 	mov.w	r2, #0
 8006f8c:	601a      	str	r2, [r3, #0]
			NoWallCountL45++;
 8006f8e:	4b30      	ldr	r3, [pc, #192]	; (8007050 <interrupt_WallCut+0x2c8>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3301      	adds	r3, #1
 8006f94:	4a2e      	ldr	r2, [pc, #184]	; (8007050 <interrupt_WallCut+0x2c8>)
 8006f96:	6013      	str	r3, [r2, #0]
			//pl_l_blue_LED(0);
			NoWallCountL45_flag = 0;
 8006f98:	4b2e      	ldr	r3, [pc, #184]	; (8007054 <interrupt_WallCut+0x2cc>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountL45_flag == 1) {
//			NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006f9e:	4b2e      	ldr	r3, [pc, #184]	; (8007058 <interrupt_WallCut+0x2d0>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7f9 faf8 	bl	8000598 <__aeabi_f2d>
 8006fa8:	4604      	mov	r4, r0
 8006faa:	460d      	mov	r5, r1
 8006fac:	4b23      	ldr	r3, [pc, #140]	; (800703c <interrupt_WallCut+0x2b4>)
 8006fae:	ed93 7a00 	vldr	s14, [r3]
 8006fb2:	4b23      	ldr	r3, [pc, #140]	; (8007040 <interrupt_WallCut+0x2b8>)
 8006fb4:	edd3 7a00 	vldr	s15, [r3]
 8006fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fbc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006fc0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006fc4:	ee16 0a90 	vmov	r0, s13
 8006fc8:	f7f9 fae6 	bl	8000598 <__aeabi_f2d>
 8006fcc:	a310      	add	r3, pc, #64	; (adr r3, 8007010 <interrupt_WallCut+0x288>)
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	f7f9 fb39 	bl	8000648 <__aeabi_dmul>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4620      	mov	r0, r4
 8006fdc:	4629      	mov	r1, r5
 8006fde:	f7f9 f97d 	bl	80002dc <__adddf3>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	4619      	mov	r1, r3
 8006fea:	f7f9 fe05 	bl	8000bf8 <__aeabi_d2f>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	4a19      	ldr	r2, [pc, #100]	; (8007058 <interrupt_WallCut+0x2d0>)
 8006ff2:	6013      	str	r3, [r2, #0]
 8006ff4:	e09f      	b.n	8007136 <interrupt_WallCut+0x3ae>
//			}
		} else {

			if (NoWallCountL45_flag == 0) {
 8006ff6:	4b17      	ldr	r3, [pc, #92]	; (8007054 <interrupt_WallCut+0x2cc>)
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d16b      	bne.n	80070d6 <interrupt_WallCut+0x34e>
				for (int i = 0; i <= 19; i++) {
 8006ffe:	2300      	movs	r3, #0
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	e04b      	b.n	800709c <interrupt_WallCut+0x314>
 8007004:	f3af 8000 	nop.w
 8007008:	00000000 	.word	0x00000000
 800700c:	40ab5800 	.word	0x40ab5800
 8007010:	d2f1a9fc 	.word	0xd2f1a9fc
 8007014:	3f50624d 	.word	0x3f50624d
 8007018:	200004dc 	.word	0x200004dc
 800701c:	200002bc 	.word	0x200002bc
 8007020:	20000460 	.word	0x20000460
 8007024:	2000059e 	.word	0x2000059e
 8007028:	200005fe 	.word	0x200005fe
 800702c:	200005ff 	.word	0x200005ff
 8007030:	20000600 	.word	0x20000600
 8007034:	200005c4 	.word	0x200005c4
 8007038:	200005dc 	.word	0x200005dc
 800703c:	20000258 	.word	0x20000258
 8007040:	2000025c 	.word	0x2000025c
 8007044:	200005c0 	.word	0x200005c0
 8007048:	200005d8 	.word	0x200005d8
 800704c:	20000604 	.word	0x20000604
 8007050:	200005cc 	.word	0x200005cc
 8007054:	200005f8 	.word	0x200005f8
 8007058:	200005e4 	.word	0x200005e4
					if (g_sensor_max_fl
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 800705c:	4a7c      	ldr	r2, [pc, #496]	; (8007250 <interrupt_WallCut+0x4c8>)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3314      	adds	r3, #20
 8007062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007066:	ee07 3a90 	vmov	s15, r3
 800706a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800706e:	4b79      	ldr	r3, [pc, #484]	; (8007254 <interrupt_WallCut+0x4cc>)
 8007070:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl
 8007074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800707c:	dd0b      	ble.n	8007096 <interrupt_WallCut+0x30e>
						g_sensor_max_fl =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 800707e:	4a74      	ldr	r2, [pc, #464]	; (8007250 <interrupt_WallCut+0x4c8>)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	3314      	adds	r3, #20
 8007084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007088:	ee07 3a90 	vmov	s15, r3
 800708c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl =
 8007090:	4b70      	ldr	r3, [pc, #448]	; (8007254 <interrupt_WallCut+0x4cc>)
 8007092:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	3301      	adds	r3, #1
 800709a:	60fb      	str	r3, [r7, #12]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b13      	cmp	r3, #19
 80070a0:	dddc      	ble.n	800705c <interrupt_WallCut+0x2d4>
					}
				}
				NoWallCountL45 = 0;
 80070a2:	4b6d      	ldr	r3, [pc, #436]	; (8007258 <interrupt_WallCut+0x4d0>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	601a      	str	r2, [r3, #0]
				NoWallCountL45_flag = 1;
 80070a8:	4b6c      	ldr	r3, [pc, #432]	; (800725c <interrupt_WallCut+0x4d4>)
 80070aa:	2201      	movs	r2, #1
 80070ac:	701a      	strb	r2, [r3, #0]
				//pl_l_blue_LED(1);
				//NoWallDisplacementL45 = 0;
				NoWallDisplacementL45 = GAIN_WALLCUT
						* (g_sensor_max_fl - CENTER_FL) / g_sensor_max_fl;
 80070ae:	4b69      	ldr	r3, [pc, #420]	; (8007254 <interrupt_WallCut+0x4cc>)
 80070b0:	edd3 7a00 	vldr	s15, [r3]
 80070b4:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8007260 <interrupt_WallCut+0x4d8>
 80070b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80070bc:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8007264 <interrupt_WallCut+0x4dc>
 80070c0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80070c4:	4b63      	ldr	r3, [pc, #396]	; (8007254 <interrupt_WallCut+0x4cc>)
 80070c6:	ed93 7a00 	vldr	s14, [r3]
 80070ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementL45 = GAIN_WALLCUT
 80070ce:	4b66      	ldr	r3, [pc, #408]	; (8007268 <interrupt_WallCut+0x4e0>)
 80070d0:	edc3 7a00 	vstr	s15, [r3]
 80070d4:	e02f      	b.n	8007136 <interrupt_WallCut+0x3ae>
			} else {
				NoWallCountL45++;
 80070d6:	4b60      	ldr	r3, [pc, #384]	; (8007258 <interrupt_WallCut+0x4d0>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3301      	adds	r3, #1
 80070dc:	4a5e      	ldr	r2, [pc, #376]	; (8007258 <interrupt_WallCut+0x4d0>)
 80070de:	6013      	str	r3, [r2, #0]
//				NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 80070e0:	4b61      	ldr	r3, [pc, #388]	; (8007268 <interrupt_WallCut+0x4e0>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7f9 fa57 	bl	8000598 <__aeabi_f2d>
 80070ea:	4604      	mov	r4, r0
 80070ec:	460d      	mov	r5, r1
 80070ee:	4b5f      	ldr	r3, [pc, #380]	; (800726c <interrupt_WallCut+0x4e4>)
 80070f0:	ed93 7a00 	vldr	s14, [r3]
 80070f4:	4b5e      	ldr	r3, [pc, #376]	; (8007270 <interrupt_WallCut+0x4e8>)
 80070f6:	edd3 7a00 	vldr	s15, [r3]
 80070fa:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 80070fe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007102:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007106:	ee16 0a90 	vmov	r0, s13
 800710a:	f7f9 fa45 	bl	8000598 <__aeabi_f2d>
 800710e:	a34e      	add	r3, pc, #312	; (adr r3, 8007248 <interrupt_WallCut+0x4c0>)
 8007110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007114:	f7f9 fa98 	bl	8000648 <__aeabi_dmul>
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 800711c:	4620      	mov	r0, r4
 800711e:	4629      	mov	r1, r5
 8007120:	f7f9 f8dc 	bl	80002dc <__adddf3>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4610      	mov	r0, r2
 800712a:	4619      	mov	r1, r3
 800712c:	f7f9 fd64 	bl	8000bf8 <__aeabi_d2f>
 8007130:	4603      	mov	r3, r0
 8007132:	4a4d      	ldr	r2, [pc, #308]	; (8007268 <interrupt_WallCut+0x4e0>)
 8007134:	6013      	str	r3, [r2, #0]
			}
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 8007136:	4b4f      	ldr	r3, [pc, #316]	; (8007274 <interrupt_WallCut+0x4ec>)
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800713e:	da05      	bge.n	800714c <interrupt_WallCut+0x3c4>
				> WALLCUT_THRESHOLD_DIFF_R45 || g_sensor[SENSOR_FRONT_RIGHT][0]
 8007140:	4b43      	ldr	r3, [pc, #268]	; (8007250 <interrupt_WallCut+0x4c8>)
 8007142:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007146:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800714a:	dd37      	ble.n	80071bc <interrupt_WallCut+0x434>
																		> WALLCUT_THRESHOLD_R45) {
			g_sensor_max_fr = 0;			//CENTER_FR;
 800714c:	4b4a      	ldr	r3, [pc, #296]	; (8007278 <interrupt_WallCut+0x4f0>)
 800714e:	f04f 0200 	mov.w	r2, #0
 8007152:	601a      	str	r2, [r3, #0]
			NoWallCountR45++;
 8007154:	4b49      	ldr	r3, [pc, #292]	; (800727c <interrupt_WallCut+0x4f4>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3301      	adds	r3, #1
 800715a:	4a48      	ldr	r2, [pc, #288]	; (800727c <interrupt_WallCut+0x4f4>)
 800715c:	6013      	str	r3, [r2, #0]
			//pl_r_blue_LED(0);
			NoWallCountR45_flag = 0;
 800715e:	4b48      	ldr	r3, [pc, #288]	; (8007280 <interrupt_WallCut+0x4f8>)
 8007160:	2200      	movs	r2, #0
 8007162:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountR45_flag == 1) {
//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8007164:	4b47      	ldr	r3, [pc, #284]	; (8007284 <interrupt_WallCut+0x4fc>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4618      	mov	r0, r3
 800716a:	f7f9 fa15 	bl	8000598 <__aeabi_f2d>
 800716e:	4604      	mov	r4, r0
 8007170:	460d      	mov	r5, r1
 8007172:	4b3e      	ldr	r3, [pc, #248]	; (800726c <interrupt_WallCut+0x4e4>)
 8007174:	ed93 7a00 	vldr	s14, [r3]
 8007178:	4b3d      	ldr	r3, [pc, #244]	; (8007270 <interrupt_WallCut+0x4e8>)
 800717a:	edd3 7a00 	vldr	s15, [r3]
 800717e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007182:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007186:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800718a:	ee16 0a90 	vmov	r0, s13
 800718e:	f7f9 fa03 	bl	8000598 <__aeabi_f2d>
 8007192:	a32d      	add	r3, pc, #180	; (adr r3, 8007248 <interrupt_WallCut+0x4c0>)
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	f7f9 fa56 	bl	8000648 <__aeabi_dmul>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4620      	mov	r0, r4
 80071a2:	4629      	mov	r1, r5
 80071a4:	f7f9 f89a 	bl	80002dc <__adddf3>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	4610      	mov	r0, r2
 80071ae:	4619      	mov	r1, r3
 80071b0:	f7f9 fd22 	bl	8000bf8 <__aeabi_d2f>
 80071b4:	4603      	mov	r3, r0
 80071b6:	4a33      	ldr	r2, [pc, #204]	; (8007284 <interrupt_WallCut+0x4fc>)
 80071b8:	6013      	str	r3, [r2, #0]
 80071ba:	e097      	b.n	80072ec <interrupt_WallCut+0x564>
//			}
		} else {
			if (NoWallCountR45_flag == 0) {
 80071bc:	4b30      	ldr	r3, [pc, #192]	; (8007280 <interrupt_WallCut+0x4f8>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d163      	bne.n	800728c <interrupt_WallCut+0x504>
				for (int i = 0; i <= 19; i++) {
 80071c4:	2300      	movs	r3, #0
 80071c6:	60bb      	str	r3, [r7, #8]
 80071c8:	e01f      	b.n	800720a <interrupt_WallCut+0x482>
					if (g_sensor_max_fr
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 80071ca:	4a21      	ldr	r2, [pc, #132]	; (8007250 <interrupt_WallCut+0x4c8>)
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	333c      	adds	r3, #60	; 0x3c
 80071d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071d4:	ee07 3a90 	vmov	s15, r3
 80071d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071dc:	4b26      	ldr	r3, [pc, #152]	; (8007278 <interrupt_WallCut+0x4f0>)
 80071de:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr
 80071e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ea:	dd0b      	ble.n	8007204 <interrupt_WallCut+0x47c>
						g_sensor_max_fr =
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 80071ec:	4a18      	ldr	r2, [pc, #96]	; (8007250 <interrupt_WallCut+0x4c8>)
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	333c      	adds	r3, #60	; 0x3c
 80071f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr =
 80071fe:	4b1e      	ldr	r3, [pc, #120]	; (8007278 <interrupt_WallCut+0x4f0>)
 8007200:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	3301      	adds	r3, #1
 8007208:	60bb      	str	r3, [r7, #8]
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b13      	cmp	r3, #19
 800720e:	dddc      	ble.n	80071ca <interrupt_WallCut+0x442>
					}
				}
				NoWallCountR45 = 0;
 8007210:	4b1a      	ldr	r3, [pc, #104]	; (800727c <interrupt_WallCut+0x4f4>)
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]
				NoWallCountR45_flag = 1;
 8007216:	4b1a      	ldr	r3, [pc, #104]	; (8007280 <interrupt_WallCut+0x4f8>)
 8007218:	2201      	movs	r2, #1
 800721a:	701a      	strb	r2, [r3, #0]
				//pl_r_blue_LED(1);
				//NoWallDisplacementR45 = 0;
				NoWallDisplacementR45 = GAIN_WALLCUT
						* (g_sensor_max_fr - CENTER_FR) / g_sensor_max_fr;
 800721c:	4b16      	ldr	r3, [pc, #88]	; (8007278 <interrupt_WallCut+0x4f0>)
 800721e:	edd3 7a00 	vldr	s15, [r3]
 8007222:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007288 <interrupt_WallCut+0x500>
 8007226:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800722a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007264 <interrupt_WallCut+0x4dc>
 800722e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007232:	4b11      	ldr	r3, [pc, #68]	; (8007278 <interrupt_WallCut+0x4f0>)
 8007234:	ed93 7a00 	vldr	s14, [r3]
 8007238:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementR45 = GAIN_WALLCUT
 800723c:	4b11      	ldr	r3, [pc, #68]	; (8007284 <interrupt_WallCut+0x4fc>)
 800723e:	edc3 7a00 	vstr	s15, [r3]
 8007242:	e053      	b.n	80072ec <interrupt_WallCut+0x564>
 8007244:	f3af 8000 	nop.w
 8007248:	d2f1a9fc 	.word	0xd2f1a9fc
 800724c:	3f50624d 	.word	0x3f50624d
 8007250:	200002bc 	.word	0x200002bc
 8007254:	20000604 	.word	0x20000604
 8007258:	200005cc 	.word	0x200005cc
 800725c:	200005f8 	.word	0x200005f8
 8007260:	43f68000 	.word	0x43f68000
 8007264:	00000000 	.word	0x00000000
 8007268:	200005e4 	.word	0x200005e4
 800726c:	20000258 	.word	0x20000258
 8007270:	2000025c 	.word	0x2000025c
 8007274:	20000460 	.word	0x20000460
 8007278:	20000608 	.word	0x20000608
 800727c:	200005c8 	.word	0x200005c8
 8007280:	200005f9 	.word	0x200005f9
 8007284:	200005e0 	.word	0x200005e0
 8007288:	44484000 	.word	0x44484000
			} else {
				NoWallCountR45++;
 800728c:	4b94      	ldr	r3, [pc, #592]	; (80074e0 <interrupt_WallCut+0x758>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3301      	adds	r3, #1
 8007292:	4a93      	ldr	r2, [pc, #588]	; (80074e0 <interrupt_WallCut+0x758>)
 8007294:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 8007296:	4b93      	ldr	r3, [pc, #588]	; (80074e4 <interrupt_WallCut+0x75c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4618      	mov	r0, r3
 800729c:	f7f9 f97c 	bl	8000598 <__aeabi_f2d>
 80072a0:	4604      	mov	r4, r0
 80072a2:	460d      	mov	r5, r1
 80072a4:	4b90      	ldr	r3, [pc, #576]	; (80074e8 <interrupt_WallCut+0x760>)
 80072a6:	ed93 7a00 	vldr	s14, [r3]
 80072aa:	4b90      	ldr	r3, [pc, #576]	; (80074ec <interrupt_WallCut+0x764>)
 80072ac:	edd3 7a00 	vldr	s15, [r3]
 80072b0:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 80072b4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80072b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80072bc:	ee16 0a90 	vmov	r0, s13
 80072c0:	f7f9 f96a 	bl	8000598 <__aeabi_f2d>
 80072c4:	a384      	add	r3, pc, #528	; (adr r3, 80074d8 <interrupt_WallCut+0x750>)
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	f7f9 f9bd 	bl	8000648 <__aeabi_dmul>
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 80072d2:	4620      	mov	r0, r4
 80072d4:	4629      	mov	r1, r5
 80072d6:	f7f9 f801 	bl	80002dc <__adddf3>
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	4610      	mov	r0, r2
 80072e0:	4619      	mov	r1, r3
 80072e2:	f7f9 fc89 	bl	8000bf8 <__aeabi_d2f>
 80072e6:	4603      	mov	r3, r0
 80072e8:	4a7e      	ldr	r2, [pc, #504]	; (80074e4 <interrupt_WallCut+0x75c>)
 80072ea:	6013      	str	r3, [r2, #0]
			}

		}

		// 大回りターンで用いる45度センサーの壁切れ(斜め)
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 80072ec:	4b80      	ldr	r3, [pc, #512]	; (80074f0 <interrupt_WallCut+0x768>)
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f113 0fef 	cmn.w	r3, #239	; 0xef
 80072f4:	db5f      	blt.n	80073b6 <interrupt_WallCut+0x62e>
				> WALLCUT_THRESHOLD_DIFF_L45_SLANT) {
			g_sensor_max_fl_slant = 0;			//CENTER_FL_SLANT;
 80072f6:	4b7f      	ldr	r3, [pc, #508]	; (80074f4 <interrupt_WallCut+0x76c>)
 80072f8:	f04f 0200 	mov.w	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]
			NoWallCountL45slant++;
 80072fe:	4b7e      	ldr	r3, [pc, #504]	; (80074f8 <interrupt_WallCut+0x770>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3301      	adds	r3, #1
 8007304:	4a7c      	ldr	r2, [pc, #496]	; (80074f8 <interrupt_WallCut+0x770>)
 8007306:	6013      	str	r3, [r2, #0]
			pl_l_blue_LED(0);
 8007308:	2000      	movs	r0, #0
 800730a:	f000 fccf 	bl	8007cac <pl_l_blue_LED>
			NoWallCountL45slant_flag = 0;
 800730e:	4b7b      	ldr	r3, [pc, #492]	; (80074fc <interrupt_WallCut+0x774>)
 8007310:	2200      	movs	r2, #0
 8007312:	701a      	strb	r2, [r3, #0]
			//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8007314:	4b7a      	ldr	r3, [pc, #488]	; (8007500 <interrupt_WallCut+0x778>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4618      	mov	r0, r3
 800731a:	f7f9 f93d 	bl	8000598 <__aeabi_f2d>
 800731e:	4604      	mov	r4, r0
 8007320:	460d      	mov	r5, r1
 8007322:	4b71      	ldr	r3, [pc, #452]	; (80074e8 <interrupt_WallCut+0x760>)
 8007324:	ed93 7a00 	vldr	s14, [r3]
 8007328:	4b70      	ldr	r3, [pc, #448]	; (80074ec <interrupt_WallCut+0x764>)
 800732a:	edd3 7a00 	vldr	s15, [r3]
 800732e:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8007332:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007336:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800733a:	ee16 0a90 	vmov	r0, s13
 800733e:	f7f9 f92b 	bl	8000598 <__aeabi_f2d>
 8007342:	a365      	add	r3, pc, #404	; (adr r3, 80074d8 <interrupt_WallCut+0x750>)
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	f7f9 f97e 	bl	8000648 <__aeabi_dmul>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8007350:	4620      	mov	r0, r4
 8007352:	4629      	mov	r1, r5
 8007354:	f7f8 ffc2 	bl	80002dc <__adddf3>
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	4610      	mov	r0, r2
 800735e:	4619      	mov	r1, r3
 8007360:	f7f9 fc4a 	bl	8000bf8 <__aeabi_d2f>
 8007364:	4603      	mov	r3, r0
 8007366:	4a66      	ldr	r2, [pc, #408]	; (8007500 <interrupt_WallCut+0x778>)
 8007368:	6013      	str	r3, [r2, #0]
			if (slantWallControlL_flag == 1) {
 800736a:	4b66      	ldr	r3, [pc, #408]	; (8007504 <interrupt_WallCut+0x77c>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b01      	cmp	r3, #1
 8007370:	f040 812b 	bne.w	80075ca <interrupt_WallCut+0x842>
				NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8007374:	4b64      	ldr	r3, [pc, #400]	; (8007508 <interrupt_WallCut+0x780>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	f7f9 f90d 	bl	8000598 <__aeabi_f2d>
 800737e:	4604      	mov	r4, r0
 8007380:	460d      	mov	r5, r1
 8007382:	4b62      	ldr	r3, [pc, #392]	; (800750c <interrupt_WallCut+0x784>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4618      	mov	r0, r3
 8007388:	f7f9 f906 	bl	8000598 <__aeabi_f2d>
 800738c:	a352      	add	r3, pc, #328	; (adr r3, 80074d8 <interrupt_WallCut+0x750>)
 800738e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007392:	f7f9 f959 	bl	8000648 <__aeabi_dmul>
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	4620      	mov	r0, r4
 800739c:	4629      	mov	r1, r5
 800739e:	f7f8 ff9d 	bl	80002dc <__adddf3>
 80073a2:	4602      	mov	r2, r0
 80073a4:	460b      	mov	r3, r1
 80073a6:	4610      	mov	r0, r2
 80073a8:	4619      	mov	r1, r3
 80073aa:	f7f9 fc25 	bl	8000bf8 <__aeabi_d2f>
 80073ae:	4603      	mov	r3, r0
 80073b0:	4a55      	ldr	r2, [pc, #340]	; (8007508 <interrupt_WallCut+0x780>)
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	e109      	b.n	80075ca <interrupt_WallCut+0x842>
				//NoWallDisplacementL45slant += (E_speedL + E_speedR)
				//		/ 2*INTERRUPT_TIME;
			}
		} else {
			if (NoWallCountL45slant_flag == 0) {
 80073b6:	4b51      	ldr	r3, [pc, #324]	; (80074fc <interrupt_WallCut+0x774>)
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f040 80ae 	bne.w	800751c <interrupt_WallCut+0x794>
				for (int i = 0; i <= 19; i++) {
 80073c0:	2300      	movs	r3, #0
 80073c2:	607b      	str	r3, [r7, #4]
 80073c4:	e01f      	b.n	8007406 <interrupt_WallCut+0x67e>
					if (g_sensor_max_fl_slant
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 80073c6:	4a52      	ldr	r2, [pc, #328]	; (8007510 <interrupt_WallCut+0x788>)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3314      	adds	r3, #20
 80073cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073d0:	ee07 3a90 	vmov	s15, r3
 80073d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073d8:	4b46      	ldr	r3, [pc, #280]	; (80074f4 <interrupt_WallCut+0x76c>)
 80073da:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl_slant
 80073de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80073e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e6:	dd0b      	ble.n	8007400 <interrupt_WallCut+0x678>
						g_sensor_max_fl_slant =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 80073e8:	4a49      	ldr	r2, [pc, #292]	; (8007510 <interrupt_WallCut+0x788>)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3314      	adds	r3, #20
 80073ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl_slant =
 80073fa:	4b3e      	ldr	r3, [pc, #248]	; (80074f4 <interrupt_WallCut+0x76c>)
 80073fc:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	3301      	adds	r3, #1
 8007404:	607b      	str	r3, [r7, #4]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b13      	cmp	r3, #19
 800740a:	dddc      	ble.n	80073c6 <interrupt_WallCut+0x63e>
					}
				}
				NoWallCountL45slant = 0;
 800740c:	4b3a      	ldr	r3, [pc, #232]	; (80074f8 <interrupt_WallCut+0x770>)
 800740e:	2200      	movs	r2, #0
 8007410:	601a      	str	r2, [r3, #0]
				NoWallCountL45slant_flag = 1;
 8007412:	4b3a      	ldr	r3, [pc, #232]	; (80074fc <interrupt_WallCut+0x774>)
 8007414:	2201      	movs	r2, #1
 8007416:	701a      	strb	r2, [r3, #0]
				pl_l_blue_LED(1);
 8007418:	2001      	movs	r0, #1
 800741a:	f000 fc47 	bl	8007cac <pl_l_blue_LED>
				//			NoWallDisplacementL45slant = 0;
				//			NoWallDisplacementL45slant2 = 0;
				if (g_sensor_max_fl_slant - CENTER_FL_SLANT >= 0) {
 800741e:	4b35      	ldr	r3, [pc, #212]	; (80074f4 <interrupt_WallCut+0x76c>)
 8007420:	edd3 7a00 	vldr	s15, [r3]
 8007424:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007514 <interrupt_WallCut+0x78c>
 8007428:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800742c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007434:	db26      	blt.n	8007484 <interrupt_WallCut+0x6fc>
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8007436:	4b2f      	ldr	r3, [pc, #188]	; (80074f4 <interrupt_WallCut+0x76c>)
 8007438:	edd3 7a00 	vldr	s15, [r3]
 800743c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8007514 <interrupt_WallCut+0x78c>
 8007440:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007444:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007518 <interrupt_WallCut+0x790>
 8007448:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 800744c:	4b29      	ldr	r3, [pc, #164]	; (80074f4 <interrupt_WallCut+0x76c>)
 800744e:	ed93 7a00 	vldr	s14, [r3]
 8007452:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
 8007456:	4b2c      	ldr	r3, [pc, #176]	; (8007508 <interrupt_WallCut+0x780>)
 8007458:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 800745c:	4b25      	ldr	r3, [pc, #148]	; (80074f4 <interrupt_WallCut+0x76c>)
 800745e:	edd3 7a00 	vldr	s15, [r3]
 8007462:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007514 <interrupt_WallCut+0x78c>
 8007466:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800746a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007518 <interrupt_WallCut+0x790>
 800746e:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8007472:	4b20      	ldr	r3, [pc, #128]	; (80074f4 <interrupt_WallCut+0x76c>)
 8007474:	ed93 7a00 	vldr	s14, [r3]
 8007478:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
 800747c:	4b20      	ldr	r3, [pc, #128]	; (8007500 <interrupt_WallCut+0x778>)
 800747e:	edc3 7a00 	vstr	s15, [r3]
 8007482:	e09f      	b.n	80075c4 <interrupt_WallCut+0x83c>
				} else {
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8007484:	4b1b      	ldr	r3, [pc, #108]	; (80074f4 <interrupt_WallCut+0x76c>)
 8007486:	edd3 7a00 	vldr	s15, [r3]
 800748a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007514 <interrupt_WallCut+0x78c>
 800748e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007492:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007518 <interrupt_WallCut+0x790>
 8007496:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 800749a:	4b16      	ldr	r3, [pc, #88]	; (80074f4 <interrupt_WallCut+0x76c>)
 800749c:	ed93 7a00 	vldr	s14, [r3]
 80074a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
 80074a4:	4b18      	ldr	r3, [pc, #96]	; (8007508 <interrupt_WallCut+0x780>)
 80074a6:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 80074aa:	4b12      	ldr	r3, [pc, #72]	; (80074f4 <interrupt_WallCut+0x76c>)
 80074ac:	edd3 7a00 	vldr	s15, [r3]
 80074b0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007514 <interrupt_WallCut+0x78c>
 80074b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074b8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8007518 <interrupt_WallCut+0x790>
 80074bc:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 80074c0:	4b0c      	ldr	r3, [pc, #48]	; (80074f4 <interrupt_WallCut+0x76c>)
 80074c2:	ed93 7a00 	vldr	s14, [r3]
 80074c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
 80074ca:	4b0d      	ldr	r3, [pc, #52]	; (8007500 <interrupt_WallCut+0x778>)
 80074cc:	edc3 7a00 	vstr	s15, [r3]
 80074d0:	e078      	b.n	80075c4 <interrupt_WallCut+0x83c>
 80074d2:	bf00      	nop
 80074d4:	f3af 8000 	nop.w
 80074d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80074dc:	3f50624d 	.word	0x3f50624d
 80074e0:	200005c8 	.word	0x200005c8
 80074e4:	200005e0 	.word	0x200005e0
 80074e8:	20000258 	.word	0x20000258
 80074ec:	2000025c 	.word	0x2000025c
 80074f0:	20000460 	.word	0x20000460
 80074f4:	2000060c 	.word	0x2000060c
 80074f8:	200005d4 	.word	0x200005d4
 80074fc:	200005fa 	.word	0x200005fa
 8007500:	200005f4 	.word	0x200005f4
 8007504:	200005fc 	.word	0x200005fc
 8007508:	200005ec 	.word	0x200005ec
 800750c:	200004dc 	.word	0x200004dc
 8007510:	200002bc 	.word	0x200002bc
 8007514:	455ac000 	.word	0x455ac000
 8007518:	00000000 	.word	0x00000000
				}

			} else {
				NoWallCountL45slant++;
 800751c:	4bac      	ldr	r3, [pc, #688]	; (80077d0 <interrupt_WallCut+0xa48>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3301      	adds	r3, #1
 8007522:	4aab      	ldr	r2, [pc, #684]	; (80077d0 <interrupt_WallCut+0xa48>)
 8007524:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8007526:	4bab      	ldr	r3, [pc, #684]	; (80077d4 <interrupt_WallCut+0xa4c>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4618      	mov	r0, r3
 800752c:	f7f9 f834 	bl	8000598 <__aeabi_f2d>
 8007530:	4604      	mov	r4, r0
 8007532:	460d      	mov	r5, r1
 8007534:	4ba8      	ldr	r3, [pc, #672]	; (80077d8 <interrupt_WallCut+0xa50>)
 8007536:	ed93 7a00 	vldr	s14, [r3]
 800753a:	4ba8      	ldr	r3, [pc, #672]	; (80077dc <interrupt_WallCut+0xa54>)
 800753c:	edd3 7a00 	vldr	s15, [r3]
 8007540:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8007544:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007548:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800754c:	ee16 0a90 	vmov	r0, s13
 8007550:	f7f9 f822 	bl	8000598 <__aeabi_f2d>
 8007554:	a39c      	add	r3, pc, #624	; (adr r3, 80077c8 <interrupt_WallCut+0xa40>)
 8007556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755a:	f7f9 f875 	bl	8000648 <__aeabi_dmul>
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8007562:	4620      	mov	r0, r4
 8007564:	4629      	mov	r1, r5
 8007566:	f7f8 feb9 	bl	80002dc <__adddf3>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4610      	mov	r0, r2
 8007570:	4619      	mov	r1, r3
 8007572:	f7f9 fb41 	bl	8000bf8 <__aeabi_d2f>
 8007576:	4603      	mov	r3, r0
 8007578:	4a96      	ldr	r2, [pc, #600]	; (80077d4 <interrupt_WallCut+0xa4c>)
 800757a:	6013      	str	r3, [r2, #0]
				if (slantWallControlL_flag == 1) {
 800757c:	4b98      	ldr	r3, [pc, #608]	; (80077e0 <interrupt_WallCut+0xa58>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d11f      	bne.n	80075c4 <interrupt_WallCut+0x83c>
					NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8007584:	4b97      	ldr	r3, [pc, #604]	; (80077e4 <interrupt_WallCut+0xa5c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4618      	mov	r0, r3
 800758a:	f7f9 f805 	bl	8000598 <__aeabi_f2d>
 800758e:	4604      	mov	r4, r0
 8007590:	460d      	mov	r5, r1
 8007592:	4b95      	ldr	r3, [pc, #596]	; (80077e8 <interrupt_WallCut+0xa60>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4618      	mov	r0, r3
 8007598:	f7f8 fffe 	bl	8000598 <__aeabi_f2d>
 800759c:	a38a      	add	r3, pc, #552	; (adr r3, 80077c8 <interrupt_WallCut+0xa40>)
 800759e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a2:	f7f9 f851 	bl	8000648 <__aeabi_dmul>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4620      	mov	r0, r4
 80075ac:	4629      	mov	r1, r5
 80075ae:	f7f8 fe95 	bl	80002dc <__adddf3>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	4610      	mov	r0, r2
 80075b8:	4619      	mov	r1, r3
 80075ba:	f7f9 fb1d 	bl	8000bf8 <__aeabi_d2f>
 80075be:	4603      	mov	r3, r0
 80075c0:	4a88      	ldr	r2, [pc, #544]	; (80077e4 <interrupt_WallCut+0xa5c>)
 80075c2:	6013      	str	r3, [r2, #0]
//					NoWallDisplacementL45slant += (E_speedL + E_speedR)
//							/ 2*INTERRUPT_TIME;
				}
			}

			slantWallControlL_flag = 1;
 80075c4:	4b86      	ldr	r3, [pc, #536]	; (80077e0 <interrupt_WallCut+0xa58>)
 80075c6:	2201      	movs	r2, #1
 80075c8:	701a      	strb	r2, [r3, #0]
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 80075ca:	4b88      	ldr	r3, [pc, #544]	; (80077ec <interrupt_WallCut+0xa64>)
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f113 0fef 	cmn.w	r3, #239	; 0xef
 80075d2:	db6a      	blt.n	80076aa <interrupt_WallCut+0x922>
				> WALLCUT_THRESHOLD_DIFF_R45_SLANT) {
			g_sensor_max_fr_slant = 0;				//CENTER_FR_SLANT;
 80075d4:	4b86      	ldr	r3, [pc, #536]	; (80077f0 <interrupt_WallCut+0xa68>)
 80075d6:	f04f 0200 	mov.w	r2, #0
 80075da:	601a      	str	r2, [r3, #0]
			NoWallCountR45slant++;
 80075dc:	4b85      	ldr	r3, [pc, #532]	; (80077f4 <interrupt_WallCut+0xa6c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3301      	adds	r3, #1
 80075e2:	4a84      	ldr	r2, [pc, #528]	; (80077f4 <interrupt_WallCut+0xa6c>)
 80075e4:	6013      	str	r3, [r2, #0]
			pl_r_blue_LED(0);
 80075e6:	2000      	movs	r0, #0
 80075e8:	f000 fb4e 	bl	8007c88 <pl_r_blue_LED>
			NoWallCountR45slant_flag = 0;
 80075ec:	4b82      	ldr	r3, [pc, #520]	; (80077f8 <interrupt_WallCut+0xa70>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	701a      	strb	r2, [r3, #0]
//	 		NoWallDisplacementR45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 80075f2:	4b82      	ldr	r3, [pc, #520]	; (80077fc <interrupt_WallCut+0xa74>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7f8 ffce 	bl	8000598 <__aeabi_f2d>
 80075fc:	4604      	mov	r4, r0
 80075fe:	460d      	mov	r5, r1
 8007600:	4b75      	ldr	r3, [pc, #468]	; (80077d8 <interrupt_WallCut+0xa50>)
 8007602:	ed93 7a00 	vldr	s14, [r3]
 8007606:	4b75      	ldr	r3, [pc, #468]	; (80077dc <interrupt_WallCut+0xa54>)
 8007608:	edd3 7a00 	vldr	s15, [r3]
 800760c:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8007610:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007614:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007618:	ee16 0a90 	vmov	r0, s13
 800761c:	f7f8 ffbc 	bl	8000598 <__aeabi_f2d>
 8007620:	a369      	add	r3, pc, #420	; (adr r3, 80077c8 <interrupt_WallCut+0xa40>)
 8007622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007626:	f7f9 f80f 	bl	8000648 <__aeabi_dmul>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 800762e:	4620      	mov	r0, r4
 8007630:	4629      	mov	r1, r5
 8007632:	f7f8 fe53 	bl	80002dc <__adddf3>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	4610      	mov	r0, r2
 800763c:	4619      	mov	r1, r3
 800763e:	f7f9 fadb 	bl	8000bf8 <__aeabi_d2f>
 8007642:	4603      	mov	r3, r0
 8007644:	4a6d      	ldr	r2, [pc, #436]	; (80077fc <interrupt_WallCut+0xa74>)
 8007646:	6013      	str	r3, [r2, #0]
			if (slantWallControlR_flag == 1) {
 8007648:	4b6d      	ldr	r3, [pc, #436]	; (8007800 <interrupt_WallCut+0xa78>)
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	2b01      	cmp	r3, #1
 800764e:	f040 81a4 	bne.w	800799a <interrupt_WallCut+0xc12>
//				NoWallDisplacementR45slant += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8007652:	4b6c      	ldr	r3, [pc, #432]	; (8007804 <interrupt_WallCut+0xa7c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4618      	mov	r0, r3
 8007658:	f7f8 ff9e 	bl	8000598 <__aeabi_f2d>
 800765c:	4604      	mov	r4, r0
 800765e:	460d      	mov	r5, r1
 8007660:	4b5d      	ldr	r3, [pc, #372]	; (80077d8 <interrupt_WallCut+0xa50>)
 8007662:	ed93 7a00 	vldr	s14, [r3]
 8007666:	4b5d      	ldr	r3, [pc, #372]	; (80077dc <interrupt_WallCut+0xa54>)
 8007668:	edd3 7a00 	vldr	s15, [r3]
 800766c:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8007670:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007674:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007678:	ee16 0a90 	vmov	r0, s13
 800767c:	f7f8 ff8c 	bl	8000598 <__aeabi_f2d>
 8007680:	a351      	add	r3, pc, #324	; (adr r3, 80077c8 <interrupt_WallCut+0xa40>)
 8007682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007686:	f7f8 ffdf 	bl	8000648 <__aeabi_dmul>
 800768a:	4602      	mov	r2, r0
 800768c:	460b      	mov	r3, r1
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 800768e:	4620      	mov	r0, r4
 8007690:	4629      	mov	r1, r5
 8007692:	f7f8 fe23 	bl	80002dc <__adddf3>
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	4610      	mov	r0, r2
 800769c:	4619      	mov	r1, r3
 800769e:	f7f9 faab 	bl	8000bf8 <__aeabi_d2f>
 80076a2:	4603      	mov	r3, r0
 80076a4:	4a57      	ldr	r2, [pc, #348]	; (8007804 <interrupt_WallCut+0xa7c>)
 80076a6:	6013      	str	r3, [r2, #0]
		g_sensor_max_fl_slant = 0;
		g_sensor_max_fr_slant = 0;

	}

}
 80076a8:	e177      	b.n	800799a <interrupt_WallCut+0xc12>
			if (NoWallCountR45slant_flag == 0) {
 80076aa:	4b53      	ldr	r3, [pc, #332]	; (80077f8 <interrupt_WallCut+0xa70>)
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f040 80b0 	bne.w	8007814 <interrupt_WallCut+0xa8c>
				for (int i = 0; i <= 19; i++) {
 80076b4:	2300      	movs	r3, #0
 80076b6:	603b      	str	r3, [r7, #0]
 80076b8:	e01f      	b.n	80076fa <interrupt_WallCut+0x972>
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 80076ba:	4a53      	ldr	r2, [pc, #332]	; (8007808 <interrupt_WallCut+0xa80>)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	333c      	adds	r3, #60	; 0x3c
 80076c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076c4:	ee07 3a90 	vmov	s15, r3
 80076c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076cc:	4b48      	ldr	r3, [pc, #288]	; (80077f0 <interrupt_WallCut+0xa68>)
 80076ce:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr_slant
 80076d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076da:	dd0b      	ble.n	80076f4 <interrupt_WallCut+0x96c>
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 80076dc:	4a4a      	ldr	r2, [pc, #296]	; (8007808 <interrupt_WallCut+0xa80>)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	333c      	adds	r3, #60	; 0x3c
 80076e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr_slant =
 80076ee:	4b40      	ldr	r3, [pc, #256]	; (80077f0 <interrupt_WallCut+0xa68>)
 80076f0:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	3301      	adds	r3, #1
 80076f8:	603b      	str	r3, [r7, #0]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b13      	cmp	r3, #19
 80076fe:	dddc      	ble.n	80076ba <interrupt_WallCut+0x932>
				NoWallCountR45slant = 0;
 8007700:	4b3c      	ldr	r3, [pc, #240]	; (80077f4 <interrupt_WallCut+0xa6c>)
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
				NoWallCountR45slant_flag = 1;
 8007706:	4b3c      	ldr	r3, [pc, #240]	; (80077f8 <interrupt_WallCut+0xa70>)
 8007708:	2201      	movs	r2, #1
 800770a:	701a      	strb	r2, [r3, #0]
				pl_r_blue_LED(1);
 800770c:	2001      	movs	r0, #1
 800770e:	f000 fabb 	bl	8007c88 <pl_r_blue_LED>
				if (g_sensor_max_fr_slant - CENTER_FR_SLANT >= 0) {
 8007712:	4b37      	ldr	r3, [pc, #220]	; (80077f0 <interrupt_WallCut+0xa68>)
 8007714:	edd3 7a00 	vldr	s15, [r3]
 8007718:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800780c <interrupt_WallCut+0xa84>
 800771c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007720:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007728:	db26      	blt.n	8007778 <interrupt_WallCut+0x9f0>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 800772a:	4b31      	ldr	r3, [pc, #196]	; (80077f0 <interrupt_WallCut+0xa68>)
 800772c:	edd3 7a00 	vldr	s15, [r3]
 8007730:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800780c <interrupt_WallCut+0xa84>
 8007734:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007738:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8007810 <interrupt_WallCut+0xa88>
 800773c:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8007740:	4b2b      	ldr	r3, [pc, #172]	; (80077f0 <interrupt_WallCut+0xa68>)
 8007742:	ed93 7a00 	vldr	s14, [r3]
 8007746:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT
 800774a:	4b2e      	ldr	r3, [pc, #184]	; (8007804 <interrupt_WallCut+0xa7c>)
 800774c:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8007750:	4b27      	ldr	r3, [pc, #156]	; (80077f0 <interrupt_WallCut+0xa68>)
 8007752:	edd3 7a00 	vldr	s15, [r3]
 8007756:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800780c <interrupt_WallCut+0xa84>
 800775a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800775e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007810 <interrupt_WallCut+0xa88>
 8007762:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8007766:	4b22      	ldr	r3, [pc, #136]	; (80077f0 <interrupt_WallCut+0xa68>)
 8007768:	ed93 7a00 	vldr	s14, [r3]
 800776c:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT
 8007770:	4b22      	ldr	r3, [pc, #136]	; (80077fc <interrupt_WallCut+0xa74>)
 8007772:	edc3 7a00 	vstr	s15, [r3]
 8007776:	e0ac      	b.n	80078d2 <interrupt_WallCut+0xb4a>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8007778:	4b1d      	ldr	r3, [pc, #116]	; (80077f0 <interrupt_WallCut+0xa68>)
 800777a:	edd3 7a00 	vldr	s15, [r3]
 800777e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800780c <interrupt_WallCut+0xa84>
 8007782:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007786:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007810 <interrupt_WallCut+0xa88>
 800778a:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 800778e:	4b18      	ldr	r3, [pc, #96]	; (80077f0 <interrupt_WallCut+0xa68>)
 8007790:	ed93 7a00 	vldr	s14, [r3]
 8007794:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT2
 8007798:	4b1a      	ldr	r3, [pc, #104]	; (8007804 <interrupt_WallCut+0xa7c>)
 800779a:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 800779e:	4b14      	ldr	r3, [pc, #80]	; (80077f0 <interrupt_WallCut+0xa68>)
 80077a0:	edd3 7a00 	vldr	s15, [r3]
 80077a4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800780c <interrupt_WallCut+0xa84>
 80077a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80077ac:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007810 <interrupt_WallCut+0xa88>
 80077b0:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 80077b4:	4b0e      	ldr	r3, [pc, #56]	; (80077f0 <interrupt_WallCut+0xa68>)
 80077b6:	ed93 7a00 	vldr	s14, [r3]
 80077ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT2
 80077be:	4b0f      	ldr	r3, [pc, #60]	; (80077fc <interrupt_WallCut+0xa74>)
 80077c0:	edc3 7a00 	vstr	s15, [r3]
 80077c4:	e085      	b.n	80078d2 <interrupt_WallCut+0xb4a>
 80077c6:	bf00      	nop
 80077c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80077cc:	3f50624d 	.word	0x3f50624d
 80077d0:	200005d4 	.word	0x200005d4
 80077d4:	200005f4 	.word	0x200005f4
 80077d8:	20000258 	.word	0x20000258
 80077dc:	2000025c 	.word	0x2000025c
 80077e0:	200005fc 	.word	0x200005fc
 80077e4:	200005ec 	.word	0x200005ec
 80077e8:	200004dc 	.word	0x200004dc
 80077ec:	20000460 	.word	0x20000460
 80077f0:	20000610 	.word	0x20000610
 80077f4:	200005d0 	.word	0x200005d0
 80077f8:	200005fb 	.word	0x200005fb
 80077fc:	200005f0 	.word	0x200005f0
 8007800:	200005fd 	.word	0x200005fd
 8007804:	200005e8 	.word	0x200005e8
 8007808:	200002bc 	.word	0x200002bc
 800780c:	455ac000 	.word	0x455ac000
 8007810:	00000000 	.word	0x00000000
				NoWallCountR45slant++;
 8007814:	4b66      	ldr	r3, [pc, #408]	; (80079b0 <interrupt_WallCut+0xc28>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	3301      	adds	r3, #1
 800781a:	4a65      	ldr	r2, [pc, #404]	; (80079b0 <interrupt_WallCut+0xc28>)
 800781c:	6013      	str	r3, [r2, #0]
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 800781e:	4b65      	ldr	r3, [pc, #404]	; (80079b4 <interrupt_WallCut+0xc2c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4618      	mov	r0, r3
 8007824:	f7f8 feb8 	bl	8000598 <__aeabi_f2d>
 8007828:	4604      	mov	r4, r0
 800782a:	460d      	mov	r5, r1
 800782c:	4b62      	ldr	r3, [pc, #392]	; (80079b8 <interrupt_WallCut+0xc30>)
 800782e:	ed93 7a00 	vldr	s14, [r3]
 8007832:	4b62      	ldr	r3, [pc, #392]	; (80079bc <interrupt_WallCut+0xc34>)
 8007834:	edd3 7a00 	vldr	s15, [r3]
 8007838:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 800783c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007840:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007844:	ee16 0a90 	vmov	r0, s13
 8007848:	f7f8 fea6 	bl	8000598 <__aeabi_f2d>
 800784c:	a356      	add	r3, pc, #344	; (adr r3, 80079a8 <interrupt_WallCut+0xc20>)
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	f7f8 fef9 	bl	8000648 <__aeabi_dmul>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 800785a:	4620      	mov	r0, r4
 800785c:	4629      	mov	r1, r5
 800785e:	f7f8 fd3d 	bl	80002dc <__adddf3>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	4610      	mov	r0, r2
 8007868:	4619      	mov	r1, r3
 800786a:	f7f9 f9c5 	bl	8000bf8 <__aeabi_d2f>
 800786e:	4603      	mov	r3, r0
 8007870:	4a50      	ldr	r2, [pc, #320]	; (80079b4 <interrupt_WallCut+0xc2c>)
 8007872:	6013      	str	r3, [r2, #0]
				if (slantWallControlR_flag == 1) {
 8007874:	4b52      	ldr	r3, [pc, #328]	; (80079c0 <interrupt_WallCut+0xc38>)
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d12a      	bne.n	80078d2 <interrupt_WallCut+0xb4a>
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 800787c:	4b51      	ldr	r3, [pc, #324]	; (80079c4 <interrupt_WallCut+0xc3c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4618      	mov	r0, r3
 8007882:	f7f8 fe89 	bl	8000598 <__aeabi_f2d>
 8007886:	4604      	mov	r4, r0
 8007888:	460d      	mov	r5, r1
 800788a:	4b4b      	ldr	r3, [pc, #300]	; (80079b8 <interrupt_WallCut+0xc30>)
 800788c:	ed93 7a00 	vldr	s14, [r3]
 8007890:	4b4a      	ldr	r3, [pc, #296]	; (80079bc <interrupt_WallCut+0xc34>)
 8007892:	edd3 7a00 	vldr	s15, [r3]
 8007896:	ee77 7a27 	vadd.f32	s15, s14, s15
							/ 2*INTERRUPT_TIME;
 800789a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800789e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80078a2:	ee16 0a90 	vmov	r0, s13
 80078a6:	f7f8 fe77 	bl	8000598 <__aeabi_f2d>
 80078aa:	a33f      	add	r3, pc, #252	; (adr r3, 80079a8 <interrupt_WallCut+0xc20>)
 80078ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b0:	f7f8 feca 	bl	8000648 <__aeabi_dmul>
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 80078b8:	4620      	mov	r0, r4
 80078ba:	4629      	mov	r1, r5
 80078bc:	f7f8 fd0e 	bl	80002dc <__adddf3>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	4610      	mov	r0, r2
 80078c6:	4619      	mov	r1, r3
 80078c8:	f7f9 f996 	bl	8000bf8 <__aeabi_d2f>
 80078cc:	4603      	mov	r3, r0
 80078ce:	4a3d      	ldr	r2, [pc, #244]	; (80079c4 <interrupt_WallCut+0xc3c>)
 80078d0:	6013      	str	r3, [r2, #0]
			slantWallControlR_flag = 1;
 80078d2:	4b3b      	ldr	r3, [pc, #236]	; (80079c0 <interrupt_WallCut+0xc38>)
 80078d4:	2201      	movs	r2, #1
 80078d6:	701a      	strb	r2, [r3, #0]
}
 80078d8:	e05f      	b.n	800799a <interrupt_WallCut+0xc12>
		NoWallCountL90 = 0;
 80078da:	4b3b      	ldr	r3, [pc, #236]	; (80079c8 <interrupt_WallCut+0xc40>)
 80078dc:	2200      	movs	r2, #0
 80078de:	601a      	str	r2, [r3, #0]
		NoWallCountR90 = 0;
 80078e0:	4b3a      	ldr	r3, [pc, #232]	; (80079cc <interrupt_WallCut+0xc44>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]
		NoWallCountL45 = 0;
 80078e6:	4b3a      	ldr	r3, [pc, #232]	; (80079d0 <interrupt_WallCut+0xc48>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	601a      	str	r2, [r3, #0]
		NoWallCountR45 = 0;
 80078ec:	4b39      	ldr	r3, [pc, #228]	; (80079d4 <interrupt_WallCut+0xc4c>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	601a      	str	r2, [r3, #0]
		NoWallCountL45slant = 0;
 80078f2:	4b39      	ldr	r3, [pc, #228]	; (80079d8 <interrupt_WallCut+0xc50>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	601a      	str	r2, [r3, #0]
		NoWallCountR45slant = 0;
 80078f8:	4b2d      	ldr	r3, [pc, #180]	; (80079b0 <interrupt_WallCut+0xc28>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL90 = 0;
 80078fe:	4b37      	ldr	r3, [pc, #220]	; (80079dc <interrupt_WallCut+0xc54>)
 8007900:	f04f 0200 	mov.w	r2, #0
 8007904:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR90 = 0;
 8007906:	4b36      	ldr	r3, [pc, #216]	; (80079e0 <interrupt_WallCut+0xc58>)
 8007908:	f04f 0200 	mov.w	r2, #0
 800790c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 800790e:	4b35      	ldr	r3, [pc, #212]	; (80079e4 <interrupt_WallCut+0xc5c>)
 8007910:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8007914:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8007916:	4b34      	ldr	r3, [pc, #208]	; (80079e8 <interrupt_WallCut+0xc60>)
 8007918:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 800791c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant = 0;
 800791e:	4b33      	ldr	r3, [pc, #204]	; (80079ec <interrupt_WallCut+0xc64>)
 8007920:	f04f 0200 	mov.w	r2, #0
 8007924:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant = 0;
 8007926:	4b27      	ldr	r3, [pc, #156]	; (80079c4 <interrupt_WallCut+0xc3c>)
 8007928:	f04f 0200 	mov.w	r2, #0
 800792c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant2 = 0;			//単純な壁切れ用
 800792e:	4b30      	ldr	r3, [pc, #192]	; (80079f0 <interrupt_WallCut+0xc68>)
 8007930:	f04f 0200 	mov.w	r2, #0
 8007934:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant2 = 0;			//単純な壁切れ用
 8007936:	4b1f      	ldr	r3, [pc, #124]	; (80079b4 <interrupt_WallCut+0xc2c>)
 8007938:	f04f 0200 	mov.w	r2, #0
 800793c:	601a      	str	r2, [r3, #0]
		NoWallCountL45_flag = 0;
 800793e:	4b2d      	ldr	r3, [pc, #180]	; (80079f4 <interrupt_WallCut+0xc6c>)
 8007940:	2200      	movs	r2, #0
 8007942:	701a      	strb	r2, [r3, #0]
		NoWallCountR45_flag = 0;
 8007944:	4b2c      	ldr	r3, [pc, #176]	; (80079f8 <interrupt_WallCut+0xc70>)
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
		NoWallCountL45slant_flag = 0;
 800794a:	4b2c      	ldr	r3, [pc, #176]	; (80079fc <interrupt_WallCut+0xc74>)
 800794c:	2200      	movs	r2, #0
 800794e:	701a      	strb	r2, [r3, #0]
		NoWallCountR45slant_flag = 0;
 8007950:	4b2b      	ldr	r3, [pc, #172]	; (8007a00 <interrupt_WallCut+0xc78>)
 8007952:	2200      	movs	r2, #0
 8007954:	701a      	strb	r2, [r3, #0]
		slantWallControlL_flag = 0;
 8007956:	4b2b      	ldr	r3, [pc, #172]	; (8007a04 <interrupt_WallCut+0xc7c>)
 8007958:	2200      	movs	r2, #0
 800795a:	701a      	strb	r2, [r3, #0]
		slantWallControlR_flag = 0;
 800795c:	4b18      	ldr	r3, [pc, #96]	; (80079c0 <interrupt_WallCut+0xc38>)
 800795e:	2200      	movs	r2, #0
 8007960:	701a      	strb	r2, [r3, #0]
		front_wall_break_90 = 0;
 8007962:	4b29      	ldr	r3, [pc, #164]	; (8007a08 <interrupt_WallCut+0xc80>)
 8007964:	2200      	movs	r2, #0
 8007966:	701a      	strb	r2, [r3, #0]
		front_wall_break_45 = 0;
 8007968:	4b28      	ldr	r3, [pc, #160]	; (8007a0c <interrupt_WallCut+0xc84>)
 800796a:	2200      	movs	r2, #0
 800796c:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 800796e:	4b28      	ldr	r3, [pc, #160]	; (8007a10 <interrupt_WallCut+0xc88>)
 8007970:	2200      	movs	r2, #0
 8007972:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8007974:	4b26      	ldr	r3, [pc, #152]	; (8007a10 <interrupt_WallCut+0xc88>)
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]
		g_sensor_max_fl = 0;
 800797a:	4b26      	ldr	r3, [pc, #152]	; (8007a14 <interrupt_WallCut+0xc8c>)
 800797c:	f04f 0200 	mov.w	r2, #0
 8007980:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr = 0;
 8007982:	4b25      	ldr	r3, [pc, #148]	; (8007a18 <interrupt_WallCut+0xc90>)
 8007984:	f04f 0200 	mov.w	r2, #0
 8007988:	601a      	str	r2, [r3, #0]
		g_sensor_max_fl_slant = 0;
 800798a:	4b24      	ldr	r3, [pc, #144]	; (8007a1c <interrupt_WallCut+0xc94>)
 800798c:	f04f 0200 	mov.w	r2, #0
 8007990:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr_slant = 0;
 8007992:	4b23      	ldr	r3, [pc, #140]	; (8007a20 <interrupt_WallCut+0xc98>)
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	601a      	str	r2, [r3, #0]
}
 800799a:	bf00      	nop
 800799c:	3718      	adds	r7, #24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bdb0      	pop	{r4, r5, r7, pc}
 80079a2:	bf00      	nop
 80079a4:	f3af 8000 	nop.w
 80079a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80079ac:	3f50624d 	.word	0x3f50624d
 80079b0:	200005d0 	.word	0x200005d0
 80079b4:	200005f0 	.word	0x200005f0
 80079b8:	20000258 	.word	0x20000258
 80079bc:	2000025c 	.word	0x2000025c
 80079c0:	200005fd 	.word	0x200005fd
 80079c4:	200005e8 	.word	0x200005e8
 80079c8:	200005c4 	.word	0x200005c4
 80079cc:	200005c0 	.word	0x200005c0
 80079d0:	200005cc 	.word	0x200005cc
 80079d4:	200005c8 	.word	0x200005c8
 80079d8:	200005d4 	.word	0x200005d4
 80079dc:	200005dc 	.word	0x200005dc
 80079e0:	200005d8 	.word	0x200005d8
 80079e4:	200005e4 	.word	0x200005e4
 80079e8:	200005e0 	.word	0x200005e0
 80079ec:	200005ec 	.word	0x200005ec
 80079f0:	200005f4 	.word	0x200005f4
 80079f4:	200005f8 	.word	0x200005f8
 80079f8:	200005f9 	.word	0x200005f9
 80079fc:	200005fa 	.word	0x200005fa
 8007a00:	200005fb 	.word	0x200005fb
 8007a04:	200005fc 	.word	0x200005fc
 8007a08:	200005fe 	.word	0x200005fe
 8007a0c:	200005ff 	.word	0x200005ff
 8007a10:	20000600 	.word	0x20000600
 8007a14:	20000604 	.word	0x20000604
 8007a18:	20000608 	.word	0x20000608
 8007a1c:	2000060c 	.word	0x2000060c
 8007a20:	20000610 	.word	0x20000610

08007a24 <pl_yellow_LED_1>:
#include "gpio.h"
#include "main.h"



void pl_yellow_LED_1(int pin){
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,pin);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	461a      	mov	r2, r3
 8007a32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007a3a:	f015 f817 	bl	801ca6c <HAL_GPIO_WritePin>
}
 8007a3e:	bf00      	nop
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <pl_yellow_LED_3>:
void pl_yellow_LED_2(int pin){
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,pin);
}
void pl_yellow_LED_3(int pin){
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,pin);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	461a      	mov	r2, r3
 8007a56:	2140      	movs	r1, #64	; 0x40
 8007a58:	4803      	ldr	r0, [pc, #12]	; (8007a68 <pl_yellow_LED_3+0x20>)
 8007a5a:	f015 f807 	bl	801ca6c <HAL_GPIO_WritePin>
}
 8007a5e:	bf00      	nop
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	48000800 	.word	0x48000800

08007a6c <pl_yellow_LED_6>:
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,pin);
}
void pl_yellow_LED_5(int pin){
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,pin);
}
void pl_yellow_LED_6(int pin){
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,pin);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	461a      	mov	r2, r3
 8007a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007a7e:	4803      	ldr	r0, [pc, #12]	; (8007a8c <pl_yellow_LED_6+0x20>)
 8007a80:	f014 fff4 	bl	801ca6c <HAL_GPIO_WritePin>
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	48000400 	.word	0x48000400

08007a90 <pl_yellow_LED_8>:
void pl_yellow_LED_7(int pin){
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,pin);
}
void pl_yellow_LED_8(int pin){
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,pin);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007aa2:	4803      	ldr	r0, [pc, #12]	; (8007ab0 <pl_yellow_LED_8+0x20>)
 8007aa4:	f014 ffe2 	bl	801ca6c <HAL_GPIO_WritePin>
}
 8007aa8:	bf00      	nop
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	48000400 	.word	0x48000400

08007ab4 <pl_yellow_LED_off>:




void pl_yellow_LED_off(void){
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007ac2:	f014 ffd3 	bl	801ca6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007ad0:	f014 ffcc 	bl	801ca6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	2140      	movs	r1, #64	; 0x40
 8007ad8:	4811      	ldr	r0, [pc, #68]	; (8007b20 <pl_yellow_LED_off+0x6c>)
 8007ada:	f014 ffc7 	bl	801ca6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ae4:	480f      	ldr	r0, [pc, #60]	; (8007b24 <pl_yellow_LED_off+0x70>)
 8007ae6:	f014 ffc1 	bl	801ca6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8007aea:	2200      	movs	r2, #0
 8007aec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007af0:	480c      	ldr	r0, [pc, #48]	; (8007b24 <pl_yellow_LED_off+0x70>)
 8007af2:	f014 ffbb 	bl	801ca6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8007af6:	2200      	movs	r2, #0
 8007af8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007afc:	4809      	ldr	r0, [pc, #36]	; (8007b24 <pl_yellow_LED_off+0x70>)
 8007afe:	f014 ffb5 	bl	801ca6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8007b02:	2200      	movs	r2, #0
 8007b04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b08:	4806      	ldr	r0, [pc, #24]	; (8007b24 <pl_yellow_LED_off+0x70>)
 8007b0a:	f014 ffaf 	bl	801ca6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b14:	4803      	ldr	r0, [pc, #12]	; (8007b24 <pl_yellow_LED_off+0x70>)
 8007b16:	f014 ffa9 	bl	801ca6c <HAL_GPIO_WritePin>
}
 8007b1a:	bf00      	nop
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	48000800 	.word	0x48000800
 8007b24:	48000400 	.word	0x48000400

08007b28 <pl_yellow_LED_count>:
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
}


void pl_yellow_LED_count(unsigned char yy){
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	71fb      	strb	r3, [r7, #7]

unsigned char yy1,yy2,yy3,yy4,yy5,yy6,yy7,yy8;

yy1 = yy & 1;
 8007b32:	79fb      	ldrb	r3, [r7, #7]
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	73fb      	strb	r3, [r7, #15]
yy2 = yy & 2;
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	73bb      	strb	r3, [r7, #14]
yy3 = yy & 4;
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	f003 0304 	and.w	r3, r3, #4
 8007b48:	737b      	strb	r3, [r7, #13]
yy4 = yy & 8;
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	f003 0308 	and.w	r3, r3, #8
 8007b50:	733b      	strb	r3, [r7, #12]
yy5 = yy & 16;
 8007b52:	79fb      	ldrb	r3, [r7, #7]
 8007b54:	f003 0310 	and.w	r3, r3, #16
 8007b58:	72fb      	strb	r3, [r7, #11]
yy6 = yy & 32;
 8007b5a:	79fb      	ldrb	r3, [r7, #7]
 8007b5c:	f003 0320 	and.w	r3, r3, #32
 8007b60:	72bb      	strb	r3, [r7, #10]
yy7 = yy & 64;
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b68:	727b      	strb	r3, [r7, #9]
yy8 = yy & 128;
 8007b6a:	79fb      	ldrb	r3, [r7, #7]
 8007b6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b70:	723b      	strb	r3, [r7, #8]

if(yy1 >= 1){
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d007      	beq.n	8007b88 <pl_yellow_LED_count+0x60>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b82:	f014 ff73 	bl	801ca6c <HAL_GPIO_WritePin>
 8007b86:	e006      	b.n	8007b96 <pl_yellow_LED_count+0x6e>
}else{
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b92:	f014 ff6b 	bl	801ca6c <HAL_GPIO_WritePin>
}
if(yy2 >= 1){
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d007      	beq.n	8007bac <pl_yellow_LED_count+0x84>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007ba6:	f014 ff61 	bl	801ca6c <HAL_GPIO_WritePin>
 8007baa:	e006      	b.n	8007bba <pl_yellow_LED_count+0x92>
}
else{
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8007bac:	2200      	movs	r2, #0
 8007bae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007bb6:	f014 ff59 	bl	801ca6c <HAL_GPIO_WritePin>
}
if(yy3 >= 1){
 8007bba:	7b7b      	ldrb	r3, [r7, #13]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d005      	beq.n	8007bcc <pl_yellow_LED_count+0xa4>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	2140      	movs	r1, #64	; 0x40
 8007bc4:	482e      	ldr	r0, [pc, #184]	; (8007c80 <pl_yellow_LED_count+0x158>)
 8007bc6:	f014 ff51 	bl	801ca6c <HAL_GPIO_WritePin>
 8007bca:	e004      	b.n	8007bd6 <pl_yellow_LED_count+0xae>
}else{
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8007bcc:	2200      	movs	r2, #0
 8007bce:	2140      	movs	r1, #64	; 0x40
 8007bd0:	482b      	ldr	r0, [pc, #172]	; (8007c80 <pl_yellow_LED_count+0x158>)
 8007bd2:	f014 ff4b 	bl	801ca6c <HAL_GPIO_WritePin>
}
if(yy4 >= 1){
 8007bd6:	7b3b      	ldrb	r3, [r7, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d006      	beq.n	8007bea <pl_yellow_LED_count+0xc2>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007be2:	4828      	ldr	r0, [pc, #160]	; (8007c84 <pl_yellow_LED_count+0x15c>)
 8007be4:	f014 ff42 	bl	801ca6c <HAL_GPIO_WritePin>
 8007be8:	e005      	b.n	8007bf6 <pl_yellow_LED_count+0xce>
}else{
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8007bea:	2200      	movs	r2, #0
 8007bec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bf0:	4824      	ldr	r0, [pc, #144]	; (8007c84 <pl_yellow_LED_count+0x15c>)
 8007bf2:	f014 ff3b 	bl	801ca6c <HAL_GPIO_WritePin>
}
if(yy5 >= 1){
 8007bf6:	7afb      	ldrb	r3, [r7, #11]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d006      	beq.n	8007c0a <pl_yellow_LED_count+0xe2>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007c02:	4820      	ldr	r0, [pc, #128]	; (8007c84 <pl_yellow_LED_count+0x15c>)
 8007c04:	f014 ff32 	bl	801ca6c <HAL_GPIO_WritePin>
 8007c08:	e005      	b.n	8007c16 <pl_yellow_LED_count+0xee>
}else{
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007c10:	481c      	ldr	r0, [pc, #112]	; (8007c84 <pl_yellow_LED_count+0x15c>)
 8007c12:	f014 ff2b 	bl	801ca6c <HAL_GPIO_WritePin>
}
if(yy6 >= 1){
 8007c16:	7abb      	ldrb	r3, [r7, #10]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d006      	beq.n	8007c2a <pl_yellow_LED_count+0x102>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007c22:	4818      	ldr	r0, [pc, #96]	; (8007c84 <pl_yellow_LED_count+0x15c>)
 8007c24:	f014 ff22 	bl	801ca6c <HAL_GPIO_WritePin>
 8007c28:	e005      	b.n	8007c36 <pl_yellow_LED_count+0x10e>
}else{
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007c30:	4814      	ldr	r0, [pc, #80]	; (8007c84 <pl_yellow_LED_count+0x15c>)
 8007c32:	f014 ff1b 	bl	801ca6c <HAL_GPIO_WritePin>
}
if(yy7 >= 1){
 8007c36:	7a7b      	ldrb	r3, [r7, #9]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d006      	beq.n	8007c4a <pl_yellow_LED_count+0x122>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c42:	4810      	ldr	r0, [pc, #64]	; (8007c84 <pl_yellow_LED_count+0x15c>)
 8007c44:	f014 ff12 	bl	801ca6c <HAL_GPIO_WritePin>
 8007c48:	e005      	b.n	8007c56 <pl_yellow_LED_count+0x12e>
}else{
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c50:	480c      	ldr	r0, [pc, #48]	; (8007c84 <pl_yellow_LED_count+0x15c>)
 8007c52:	f014 ff0b 	bl	801ca6c <HAL_GPIO_WritePin>
}
if(yy8 >= 1){
 8007c56:	7a3b      	ldrb	r3, [r7, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d006      	beq.n	8007c6a <pl_yellow_LED_count+0x142>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c62:	4808      	ldr	r0, [pc, #32]	; (8007c84 <pl_yellow_LED_count+0x15c>)
 8007c64:	f014 ff02 	bl	801ca6c <HAL_GPIO_WritePin>
}else{
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
}
}
 8007c68:	e005      	b.n	8007c76 <pl_yellow_LED_count+0x14e>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c70:	4804      	ldr	r0, [pc, #16]	; (8007c84 <pl_yellow_LED_count+0x15c>)
 8007c72:	f014 fefb 	bl	801ca6c <HAL_GPIO_WritePin>
}
 8007c76:	bf00      	nop
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	48000800 	.word	0x48000800
 8007c84:	48000400 	.word	0x48000400

08007c88 <pl_r_blue_LED>:


void pl_r_blue_LED(int pin){
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,pin);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	461a      	mov	r2, r3
 8007c96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007c9a:	4803      	ldr	r0, [pc, #12]	; (8007ca8 <pl_r_blue_LED+0x20>)
 8007c9c:	f014 fee6 	bl	801ca6c <HAL_GPIO_WritePin>
}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	48000800 	.word	0x48000800

08007cac <pl_l_blue_LED>:

void pl_l_blue_LED(int pin){
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,pin);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	461a      	mov	r2, r3
 8007cba:	2104      	movs	r1, #4
 8007cbc:	4803      	ldr	r0, [pc, #12]	; (8007ccc <pl_l_blue_LED+0x20>)
 8007cbe:	f014 fed5 	bl	801ca6c <HAL_GPIO_WritePin>
}
 8007cc2:	bf00      	nop
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	48000400 	.word	0x48000400

08007cd0 <encoder_read_byte_R>:
#include "spi.h"
#include <stdio.h>

float encoder_R,encoder_L;

uint16_t encoder_read_byte_R(uint16_t address,uint16_t data){
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b088      	sub	sp, #32
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	460a      	mov	r2, r1
 8007cda:	80fb      	strh	r3, [r7, #6]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	2110      	movs	r1, #16
 8007ce4:	4833      	ldr	r0, [pc, #204]	; (8007db4 <encoder_read_byte_R+0xe4>)
 8007ce6:	f014 fec1 	bl	801ca6c <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 8007cea:	88fb      	ldrh	r3, [r7, #6]
 8007cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cf0:	80fb      	strh	r3, [r7, #6]
	parity=0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	61bb      	str	r3, [r7, #24]
 8007cfa:	e00d      	b.n	8007d18 <encoder_read_byte_R+0x48>
 8007cfc:	88fa      	ldrh	r2, [r7, #6]
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	fa42 f303 	asr.w	r3, r2, r3
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	8bfb      	ldrh	r3, [r7, #30]
 8007d0e:	4413      	add	r3, r2
 8007d10:	83fb      	strh	r3, [r7, #30]
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	3301      	adds	r3, #1
 8007d16:	61bb      	str	r3, [r7, #24]
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	2b0e      	cmp	r3, #14
 8007d1c:	ddee      	ble.n	8007cfc <encoder_read_byte_R+0x2c>
	address = address | ((parity % 2) << 15);
 8007d1e:	8bfb      	ldrh	r3, [r7, #30]
 8007d20:	03db      	lsls	r3, r3, #15
 8007d22:	b21a      	sxth	r2, r3
 8007d24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	b21b      	sxth	r3, r3
 8007d2c:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8007d2e:	88fb      	ldrh	r3, [r7, #6]
 8007d30:	0a1b      	lsrs	r3, r3, #8
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007d38:	88fb      	ldrh	r3, [r7, #6]
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	747b      	strb	r3, [r7, #17]


	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 50);
 8007d3e:	f107 0110 	add.w	r1, r7, #16
 8007d42:	2332      	movs	r3, #50	; 0x32
 8007d44:	2202      	movs	r2, #2
 8007d46:	481c      	ldr	r0, [pc, #112]	; (8007db8 <encoder_read_byte_R+0xe8>)
 8007d48:	f015 ff73 	bl	801dc32 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, address, 2, 100);

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	2110      	movs	r1, #16
 8007d50:	4818      	ldr	r0, [pc, #96]	; (8007db4 <encoder_read_byte_R+0xe4>)
 8007d52:	f014 fe8b 	bl	801ca6c <HAL_GPIO_WritePin>

	for(int i=0;i<50;i++){}
 8007d56:	2300      	movs	r3, #0
 8007d58:	617b      	str	r3, [r7, #20]
 8007d5a:	e002      	b.n	8007d62 <encoder_read_byte_R+0x92>
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	617b      	str	r3, [r7, #20]
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	2b31      	cmp	r3, #49	; 0x31
 8007d66:	ddf9      	ble.n	8007d5c <encoder_read_byte_R+0x8c>

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2110      	movs	r1, #16
 8007d6c:	4811      	ldr	r0, [pc, #68]	; (8007db4 <encoder_read_byte_R+0xe4>)
 8007d6e:	f014 fe7d 	bl	801ca6c <HAL_GPIO_WritePin>

//	data=0xC000;
	dataBuffer[0]=data>>8;
 8007d72:	88bb      	ldrh	r3, [r7, #4]
 8007d74:	0a1b      	lsrs	r3, r3, #8
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8007d7c:	88bb      	ldrh	r3, [r7, #4]
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 50);
 8007d82:	f107 010c 	add.w	r1, r7, #12
 8007d86:	2332      	movs	r3, #50	; 0x32
 8007d88:	2202      	movs	r2, #2
 8007d8a:	480b      	ldr	r0, [pc, #44]	; (8007db8 <encoder_read_byte_R+0xe8>)
 8007d8c:	f016 f8bf 	bl	801df0e <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007d90:	7b3b      	ldrb	r3, [r7, #12]
 8007d92:	021b      	lsls	r3, r3, #8
 8007d94:	b21a      	sxth	r2, r3
 8007d96:	7b7b      	ldrb	r3, [r7, #13]
 8007d98:	b21b      	sxth	r3, r3
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	b21b      	sxth	r3, r3
 8007d9e:	80bb      	strh	r3, [r7, #4]
//	HAL_SPI_Transmit(&hspi3, data, 2, 100);
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007da0:	2201      	movs	r2, #1
 8007da2:	2110      	movs	r1, #16
 8007da4:	4803      	ldr	r0, [pc, #12]	; (8007db4 <encoder_read_byte_R+0xe4>)
 8007da6:	f014 fe61 	bl	801ca6c <HAL_GPIO_WritePin>

	return data;
 8007daa:	88bb      	ldrh	r3, [r7, #4]

}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3720      	adds	r7, #32
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	48000400 	.word	0x48000400
 8007db8:	2000f2f8 	.word	0x2000f2f8

08007dbc <encoder_read_byte_L>:
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;

}


uint16_t encoder_read_byte_L(uint16_t address,uint16_t data){
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b088      	sub	sp, #32
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	460a      	mov	r2, r1
 8007dc6:	80fb      	strh	r3, [r7, #6]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007dd6:	f014 fe49 	bl	801ca6c <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 8007dda:	88fb      	ldrh	r3, [r7, #6]
 8007ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007de0:	80fb      	strh	r3, [r7, #6]
	parity=0;
 8007de2:	2300      	movs	r3, #0
 8007de4:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 8007de6:	2300      	movs	r3, #0
 8007de8:	61bb      	str	r3, [r7, #24]
 8007dea:	e00d      	b.n	8007e08 <encoder_read_byte_L+0x4c>
 8007dec:	88fa      	ldrh	r2, [r7, #6]
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	fa42 f303 	asr.w	r3, r2, r3
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	8bfb      	ldrh	r3, [r7, #30]
 8007dfe:	4413      	add	r3, r2
 8007e00:	83fb      	strh	r3, [r7, #30]
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	3301      	adds	r3, #1
 8007e06:	61bb      	str	r3, [r7, #24]
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	2b0e      	cmp	r3, #14
 8007e0c:	ddee      	ble.n	8007dec <encoder_read_byte_L+0x30>
	address = address | ((parity % 2) << 15);
 8007e0e:	8bfb      	ldrh	r3, [r7, #30]
 8007e10:	03db      	lsls	r3, r3, #15
 8007e12:	b21a      	sxth	r2, r3
 8007e14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	b21b      	sxth	r3, r3
 8007e1c:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8007e1e:	88fb      	ldrh	r3, [r7, #6]
 8007e20:	0a1b      	lsrs	r3, r3, #8
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007e28:	88fb      	ldrh	r3, [r7, #6]
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	747b      	strb	r3, [r7, #17]

	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 50);
 8007e2e:	f107 0110 	add.w	r1, r7, #16
 8007e32:	2332      	movs	r3, #50	; 0x32
 8007e34:	2202      	movs	r2, #2
 8007e36:	481e      	ldr	r0, [pc, #120]	; (8007eb0 <encoder_read_byte_L+0xf4>)
 8007e38:	f015 fefb 	bl	801dc32 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e46:	f014 fe11 	bl	801ca6c <HAL_GPIO_WritePin>

	for(int i=0;i<50;i++){}
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	617b      	str	r3, [r7, #20]
 8007e4e:	e002      	b.n	8007e56 <encoder_read_byte_L+0x9a>
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	3301      	adds	r3, #1
 8007e54:	617b      	str	r3, [r7, #20]
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2b31      	cmp	r3, #49	; 0x31
 8007e5a:	ddf9      	ble.n	8007e50 <encoder_read_byte_L+0x94>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e66:	f014 fe01 	bl	801ca6c <HAL_GPIO_WritePin>

//	data=0x0000;
	dataBuffer[0]=data>>8;
 8007e6a:	88bb      	ldrh	r3, [r7, #4]
 8007e6c:	0a1b      	lsrs	r3, r3, #8
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8007e74:	88bb      	ldrh	r3, [r7, #4]
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 50);
 8007e7a:	f107 010c 	add.w	r1, r7, #12
 8007e7e:	2332      	movs	r3, #50	; 0x32
 8007e80:	2202      	movs	r2, #2
 8007e82:	480b      	ldr	r0, [pc, #44]	; (8007eb0 <encoder_read_byte_L+0xf4>)
 8007e84:	f016 f843 	bl	801df0e <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007e88:	7b3b      	ldrb	r3, [r7, #12]
 8007e8a:	021b      	lsls	r3, r3, #8
 8007e8c:	b21a      	sxth	r2, r3
 8007e8e:	7b7b      	ldrb	r3, [r7, #13]
 8007e90:	b21b      	sxth	r3, r3
 8007e92:	4313      	orrs	r3, r2
 8007e94:	b21b      	sxth	r3, r3
 8007e96:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007ea2:	f014 fde3 	bl	801ca6c <HAL_GPIO_WritePin>

	return data;
 8007ea6:	88bb      	ldrh	r3, [r7, #4]

}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3720      	adds	r7, #32
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	2000f2f8 	.word	0x2000f2f8

08007eb4 <AS5047_DataUpdate>:

}



void AS5047_DataUpdate(void){
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	af00      	add	r7, sp, #0

		//encoder_read_byte_L(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_R=(float)(encoder_read_byte_R(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 8007eb8:	2100      	movs	r1, #0
 8007eba:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8007ebe:	f7ff ff07 	bl	8007cd0 <encoder_read_byte_R>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007ec8:	ee07 3a90 	vmov	s15, r3
 8007ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ed0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007f18 <AS5047_DataUpdate+0x64>
 8007ed4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007ed8:	eddf 6a10 	vldr	s13, [pc, #64]	; 8007f1c <AS5047_DataUpdate+0x68>
 8007edc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007ee0:	4b0f      	ldr	r3, [pc, #60]	; (8007f20 <AS5047_DataUpdate+0x6c>)
 8007ee2:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(500);

		//encoder_read_byte_R(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_L=(float)(encoder_read_byte_L(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8007eec:	f7ff ff66 	bl	8007dbc <encoder_read_byte_L>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007ef6:	ee07 3a90 	vmov	s15, r3
 8007efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007efe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007f18 <AS5047_DataUpdate+0x64>
 8007f02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007f06:	eddf 6a05 	vldr	s13, [pc, #20]	; 8007f1c <AS5047_DataUpdate+0x68>
 8007f0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007f0e:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <AS5047_DataUpdate+0x70>)
 8007f10:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(5);

}
 8007f14:	bf00      	nop
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	43b40000 	.word	0x43b40000
 8007f1c:	46800000 	.word	0x46800000
 8007f20:	200006e4 	.word	0x200006e4
 8007f24:	200006e8 	.word	0x200006e8

08007f28 <test_flash>:


const uint32_t start_address = 0x807F000; //bank1 page last start address
const uint32_t end_adress = 0x807FFFF; // bank1 page last end address

void test_flash(void){
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	af00      	add	r7, sp, #0
		  record_out();
 8007f2c:	f000 f914 	bl	8008158 <record_out>
		  maze_display();
 8007f30:	f00d fb6a 	bl	8015608 <maze_display>
		  flash_record_init();
 8007f34:	f000 f9b6 	bl	80082a4 <flash_record_init>
		  record_in();
 8007f38:	f000 f858 	bl	8007fec <record_in>
}
 8007f3c:	bf00      	nop
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <eraseFlash>:


void eraseFlash( void )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_PAGES;	// select page
 8007f46:	2300      	movs	r3, #0
 8007f48:	60bb      	str	r3, [r7, #8]
	erase.Banks = FLASH_BANK_1;		       // set bank1
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	60fb      	str	r3, [r7, #12]
	erase.Page = 254;// set page254(127)
 8007f4e:	23fe      	movs	r3, #254	; 0xfe
 8007f50:	613b      	str	r3, [r7, #16]
	erase.NbPages = 1;//delete page
 8007f52:	2301      	movs	r3, #1
 8007f54:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 8007f56:	2300      	movs	r3, #0
 8007f58:	607b      	str	r3, [r7, #4]

	HAL_FLASHEx_Erase(&erase, &pageError);	// erase sector
 8007f5a:	1d3a      	adds	r2, r7, #4
 8007f5c:	f107 0308 	add.w	r3, r7, #8
 8007f60:	4611      	mov	r1, r2
 8007f62:	4618      	mov	r0, r3
 8007f64:	f014 fada 	bl	801c51c <HAL_FLASHEx_Erase>

//	for (int i=0;i<10;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 8007f68:	bf00      	nop
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <writeFlash>:


void writeFlash(uint32_t address, uint64_t *data, uint32_t size,uint8_t erasemode)
{
 8007f70:	b5b0      	push	{r4, r5, r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
 8007f7c:	70fb      	strb	r3, [r7, #3]
	HAL_FLASH_Unlock();		// unlock flash
 8007f7e:	f014 f9e1 	bl	801c344 <HAL_FLASH_Unlock>
	if(erasemode==1){eraseFlash();}
 8007f82:	78fb      	ldrb	r3, [r7, #3]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d101      	bne.n	8007f8c <writeFlash+0x1c>
 8007f88:	f7ff ffda 	bl	8007f40 <eraseFlash>

	for ( uint32_t add = address; add < (address + size); add+=8 ){
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	617b      	str	r3, [r7, #20]
 8007f90:	e00f      	b.n	8007fb2 <writeFlash+0x42>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, add, (uint64_t *)data); // write byte
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	17da      	asrs	r2, r3, #31
 8007f96:	461c      	mov	r4, r3
 8007f98:	4615      	mov	r5, r2
 8007f9a:	4622      	mov	r2, r4
 8007f9c:	462b      	mov	r3, r5
 8007f9e:	6979      	ldr	r1, [r7, #20]
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	f014 f979 	bl	801c298 <HAL_FLASH_Program>
		data=data+4;  // add data pointer
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	3320      	adds	r3, #32
 8007faa:	60bb      	str	r3, [r7, #8]
	for ( uint32_t add = address; add < (address + size); add+=8 ){
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	3308      	adds	r3, #8
 8007fb0:	617b      	str	r3, [r7, #20]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d3e9      	bcc.n	8007f92 <writeFlash+0x22>
	}

	HAL_FLASH_Lock();		// lock flash
 8007fbe:	f014 f9e3 	bl	801c388 <HAL_FLASH_Lock>

}
 8007fc2:	bf00      	nop
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bdb0      	pop	{r4, r5, r7, pc}

08007fca <loadFlash>:

void loadFlash(uint32_t address, uint64_t *data, uint32_t size )
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b084      	sub	sp, #16
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	60f8      	str	r0, [r7, #12]
 8007fd2:	60b9      	str	r1, [r7, #8]
 8007fd4:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*)address,size); // copy data
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	68b8      	ldr	r0, [r7, #8]
 8007fde:	f018 fe5b 	bl	8020c98 <memcpy>

}
 8007fe2:	bf00      	nop
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
	...

08007fec <record_in>:


void record_in(void) {
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
	int t = 0;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 8007ff6:	4b55      	ldr	r3, [pc, #340]	; (800814c <record_in+0x160>)
 8007ff8:	603b      	str	r3, [r7, #0]

	while (t <= 14) {
 8007ffa:	e016      	b.n	800802a <record_in+0x3e>
		record.row[t] = wall.row[t];
 8007ffc:	4a54      	ldr	r2, [pc, #336]	; (8008150 <record_in+0x164>)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008004:	4953      	ldr	r1, [pc, #332]	; (8008154 <record_in+0x168>)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		record.column[t] = wall.column[t];
 800800c:	4a50      	ldr	r2, [pc, #320]	; (8008150 <record_in+0x164>)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	330e      	adds	r3, #14
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	494e      	ldr	r1, [pc, #312]	; (8008154 <record_in+0x168>)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	330e      	adds	r3, #14
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	440b      	add	r3, r1
 8008022:	605a      	str	r2, [r3, #4]
		t++;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	3301      	adds	r3, #1
 8008028:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b0e      	cmp	r3, #14
 800802e:	dde5      	ble.n	8007ffc <record_in+0x10>
	}
	t = 0;
 8008030:	2300      	movs	r3, #0
 8008032:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008034:	e018      	b.n	8008068 <record_in+0x7c>
		record.row_look[t] = wall.row_look[t];
 8008036:	4a46      	ldr	r2, [pc, #280]	; (8008150 <record_in+0x164>)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	331e      	adds	r3, #30
 800803c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008040:	4944      	ldr	r1, [pc, #272]	; (8008154 <record_in+0x168>)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	331e      	adds	r3, #30
 8008046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		record.column_look[t] = wall.column_look[t];
 800804a:	4a41      	ldr	r2, [pc, #260]	; (8008150 <record_in+0x164>)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	332c      	adds	r3, #44	; 0x2c
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	493f      	ldr	r1, [pc, #252]	; (8008154 <record_in+0x168>)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	332c      	adds	r3, #44	; 0x2c
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	440b      	add	r3, r1
 8008060:	605a      	str	r2, [r3, #4]
		t++;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	3301      	adds	r3, #1
 8008066:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b0e      	cmp	r3, #14
 800806c:	dde3      	ble.n	8008036 <record_in+0x4a>
	}
	t = 0;
 800806e:	2300      	movs	r3, #0
 8008070:	607b      	str	r3, [r7, #4]

	writeFlash(address, (uint64_t*) record.row[0], 1, ON);
 8008072:	4b38      	ldr	r3, [pc, #224]	; (8008154 <record_in+0x168>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4619      	mov	r1, r3
 8008078:	2301      	movs	r3, #1
 800807a:	2201      	movs	r2, #1
 800807c:	6838      	ldr	r0, [r7, #0]
 800807e:	f7ff ff77 	bl	8007f70 <writeFlash>
	address+=16;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	3310      	adds	r3, #16
 8008086:	603b      	str	r3, [r7, #0]
	t=1;
 8008088:	2301      	movs	r3, #1
 800808a:	607b      	str	r3, [r7, #4]

	while (t <= 14) {
 800808c:	e00f      	b.n	80080ae <record_in+0xc2>
	writeFlash(address, (uint64_t*) record.row[t], 1, OFF);
 800808e:	4a31      	ldr	r2, [pc, #196]	; (8008154 <record_in+0x168>)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008096:	4619      	mov	r1, r3
 8008098:	2300      	movs	r3, #0
 800809a:	2201      	movs	r2, #1
 800809c:	6838      	ldr	r0, [r7, #0]
 800809e:	f7ff ff67 	bl	8007f70 <writeFlash>
	address+=16;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	3310      	adds	r3, #16
 80080a6:	603b      	str	r3, [r7, #0]
	t++;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	3301      	adds	r3, #1
 80080ac:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b0e      	cmp	r3, #14
 80080b2:	ddec      	ble.n	800808e <record_in+0xa2>
	}

	t=0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80080b8:	e011      	b.n	80080de <record_in+0xf2>
	writeFlash(address, (uint64_t*) record.column[t], 1, OFF);
 80080ba:	4a26      	ldr	r2, [pc, #152]	; (8008154 <record_in+0x168>)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	330e      	adds	r3, #14
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	4619      	mov	r1, r3
 80080c8:	2300      	movs	r3, #0
 80080ca:	2201      	movs	r2, #1
 80080cc:	6838      	ldr	r0, [r7, #0]
 80080ce:	f7ff ff4f 	bl	8007f70 <writeFlash>
	address+=16;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	3310      	adds	r3, #16
 80080d6:	603b      	str	r3, [r7, #0]
	t++;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3301      	adds	r3, #1
 80080dc:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b0e      	cmp	r3, #14
 80080e2:	ddea      	ble.n	80080ba <record_in+0xce>
	}

	t=0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80080e8:	e010      	b.n	800810c <record_in+0x120>
	writeFlash(address, (uint64_t*) record.row_look[t], 1, OFF);
 80080ea:	4a1a      	ldr	r2, [pc, #104]	; (8008154 <record_in+0x168>)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	331e      	adds	r3, #30
 80080f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080f4:	4619      	mov	r1, r3
 80080f6:	2300      	movs	r3, #0
 80080f8:	2201      	movs	r2, #1
 80080fa:	6838      	ldr	r0, [r7, #0]
 80080fc:	f7ff ff38 	bl	8007f70 <writeFlash>
	address+=16;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	3310      	adds	r3, #16
 8008104:	603b      	str	r3, [r7, #0]
	t++;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	3301      	adds	r3, #1
 800810a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b0e      	cmp	r3, #14
 8008110:	ddeb      	ble.n	80080ea <record_in+0xfe>
	}

	t=0;
 8008112:	2300      	movs	r3, #0
 8008114:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008116:	e011      	b.n	800813c <record_in+0x150>
	writeFlash(address, (uint64_t*) record.column_look[t], 1, OFF);
 8008118:	4a0e      	ldr	r2, [pc, #56]	; (8008154 <record_in+0x168>)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	332c      	adds	r3, #44	; 0x2c
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	4619      	mov	r1, r3
 8008126:	2300      	movs	r3, #0
 8008128:	2201      	movs	r2, #1
 800812a:	6838      	ldr	r0, [r7, #0]
 800812c:	f7ff ff20 	bl	8007f70 <writeFlash>
	address+=16;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	3310      	adds	r3, #16
 8008134:	603b      	str	r3, [r7, #0]
	t++;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	3301      	adds	r3, #1
 800813a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b0e      	cmp	r3, #14
 8008140:	ddea      	ble.n	8008118 <record_in+0x12c>

//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 8008142:	bf00      	nop
 8008144:	bf00      	nop
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	0807f000 	.word	0x0807f000
 8008150:	20001010 	.word	0x20001010
 8008154:	20001100 	.word	0x20001100

08008158 <record_out>:


void record_out(void) {
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

	int t=0;
 800815e:	2300      	movs	r3, #0
 8008160:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 8008162:	4b4d      	ldr	r3, [pc, #308]	; (8008298 <record_out+0x140>)
 8008164:	603b      	str	r3, [r7, #0]
	while (t <= 14) {
 8008166:	e00e      	b.n	8008186 <record_out+0x2e>
	loadFlash(address, (uint64_t*)&record.row[t], 2);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4a4b      	ldr	r2, [pc, #300]	; (800829c <record_out+0x144>)
 800816e:	4413      	add	r3, r2
 8008170:	2202      	movs	r2, #2
 8008172:	4619      	mov	r1, r3
 8008174:	6838      	ldr	r0, [r7, #0]
 8008176:	f7ff ff28 	bl	8007fca <loadFlash>
	address+=16;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	3310      	adds	r3, #16
 800817e:	603b      	str	r3, [r7, #0]
	t++;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	3301      	adds	r3, #1
 8008184:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2b0e      	cmp	r3, #14
 800818a:	dded      	ble.n	8008168 <record_out+0x10>
	}

	t=0;
 800818c:	2300      	movs	r3, #0
 800818e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008190:	e010      	b.n	80081b4 <record_out+0x5c>
	loadFlash(address, (uint64_t*)&record.column[t], 2);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	330e      	adds	r3, #14
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4a40      	ldr	r2, [pc, #256]	; (800829c <record_out+0x144>)
 800819a:	4413      	add	r3, r2
 800819c:	3304      	adds	r3, #4
 800819e:	2202      	movs	r2, #2
 80081a0:	4619      	mov	r1, r3
 80081a2:	6838      	ldr	r0, [r7, #0]
 80081a4:	f7ff ff11 	bl	8007fca <loadFlash>
	address+=16;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	3310      	adds	r3, #16
 80081ac:	603b      	str	r3, [r7, #0]
	t++;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	3301      	adds	r3, #1
 80081b2:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b0e      	cmp	r3, #14
 80081b8:	ddeb      	ble.n	8008192 <record_out+0x3a>
	}

	t=0;
 80081ba:	2300      	movs	r3, #0
 80081bc:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80081be:	e00f      	b.n	80081e0 <record_out+0x88>
		loadFlash(address, (uint64_t*)&record.row_look[t], 2);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	331e      	adds	r3, #30
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4a35      	ldr	r2, [pc, #212]	; (800829c <record_out+0x144>)
 80081c8:	4413      	add	r3, r2
 80081ca:	2202      	movs	r2, #2
 80081cc:	4619      	mov	r1, r3
 80081ce:	6838      	ldr	r0, [r7, #0]
 80081d0:	f7ff fefb 	bl	8007fca <loadFlash>
		address+=16;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	3310      	adds	r3, #16
 80081d8:	603b      	str	r3, [r7, #0]
		t++;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	3301      	adds	r3, #1
 80081de:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b0e      	cmp	r3, #14
 80081e4:	ddec      	ble.n	80081c0 <record_out+0x68>
	}

	t=0;
 80081e6:	2300      	movs	r3, #0
 80081e8:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80081ea:	e010      	b.n	800820e <record_out+0xb6>
		loadFlash(address, (uint64_t*)&record.column_look[t], 2);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	332c      	adds	r3, #44	; 0x2c
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4a2a      	ldr	r2, [pc, #168]	; (800829c <record_out+0x144>)
 80081f4:	4413      	add	r3, r2
 80081f6:	3304      	adds	r3, #4
 80081f8:	2202      	movs	r2, #2
 80081fa:	4619      	mov	r1, r3
 80081fc:	6838      	ldr	r0, [r7, #0]
 80081fe:	f7ff fee4 	bl	8007fca <loadFlash>
		address+=16;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	3310      	adds	r3, #16
 8008206:	603b      	str	r3, [r7, #0]
		t++;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	3301      	adds	r3, #1
 800820c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2b0e      	cmp	r3, #14
 8008212:	ddeb      	ble.n	80081ec <record_out+0x94>
//			sizeof(record.column));
//	loadFlash(start_address + 2 * sizeof(record.row),
//			(uint64_t*) record.row_look, sizeof(record.row_look));
//	loadFlash(start_address + 3 * sizeof(record.row),
//			(uint64_t*) record.column_look, sizeof(record.column_look));
	t = 0;
 8008214:	2300      	movs	r3, #0
 8008216:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008218:	e016      	b.n	8008248 <record_out+0xf0>
		wall.row[t] = record.row[t];
 800821a:	4a20      	ldr	r2, [pc, #128]	; (800829c <record_out+0x144>)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008222:	491f      	ldr	r1, [pc, #124]	; (80082a0 <record_out+0x148>)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column[t] = record.column[t];
 800822a:	4a1c      	ldr	r2, [pc, #112]	; (800829c <record_out+0x144>)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	330e      	adds	r3, #14
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	491a      	ldr	r1, [pc, #104]	; (80082a0 <record_out+0x148>)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	330e      	adds	r3, #14
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	440b      	add	r3, r1
 8008240:	605a      	str	r2, [r3, #4]
		t++;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	3301      	adds	r3, #1
 8008246:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b0e      	cmp	r3, #14
 800824c:	dde5      	ble.n	800821a <record_out+0xc2>
	}
	t = 0;
 800824e:	2300      	movs	r3, #0
 8008250:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008252:	e018      	b.n	8008286 <record_out+0x12e>
		wall.row_look[t] = record.row_look[t];
 8008254:	4a11      	ldr	r2, [pc, #68]	; (800829c <record_out+0x144>)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	331e      	adds	r3, #30
 800825a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800825e:	4910      	ldr	r1, [pc, #64]	; (80082a0 <record_out+0x148>)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	331e      	adds	r3, #30
 8008264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column_look[t] = record.column_look[t];
 8008268:	4a0c      	ldr	r2, [pc, #48]	; (800829c <record_out+0x144>)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	332c      	adds	r3, #44	; 0x2c
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	685a      	ldr	r2, [r3, #4]
 8008274:	490a      	ldr	r1, [pc, #40]	; (80082a0 <record_out+0x148>)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	332c      	adds	r3, #44	; 0x2c
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	440b      	add	r3, r1
 800827e:	605a      	str	r2, [r3, #4]
		t++;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3301      	adds	r3, #1
 8008284:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2b0e      	cmp	r3, #14
 800828a:	dde3      	ble.n	8008254 <record_out+0xfc>
	}

	t = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	607b      	str	r3, [r7, #4]

}
 8008290:	bf00      	nop
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	0807f000 	.word	0x0807f000
 800829c:	20001100 	.word	0x20001100
 80082a0:	20001010 	.word	0x20001010

080082a4 <flash_record_init>:

void flash_record_init(void){
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
	int t = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80082ae:	e011      	b.n	80082d4 <flash_record_init+0x30>
		wall.row[t] = 0b111100011;
 80082b0:	4a1a      	ldr	r2, [pc, #104]	; (800831c <flash_record_init+0x78>)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f240 11e3 	movw	r1, #483	; 0x1e3
 80082b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		wall.column[t] = t*2;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	005b      	lsls	r3, r3, #1
 80082c0:	4619      	mov	r1, r3
 80082c2:	4a16      	ldr	r2, [pc, #88]	; (800831c <flash_record_init+0x78>)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	330e      	adds	r3, #14
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	6059      	str	r1, [r3, #4]
		t++;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	3301      	adds	r3, #1
 80082d2:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b0e      	cmp	r3, #14
 80082d8:	ddea      	ble.n	80082b0 <flash_record_init+0xc>
	}
	t = 0;
 80082da:	2300      	movs	r3, #0
 80082dc:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80082de:	e013      	b.n	8008308 <flash_record_init+0x64>
		wall.row_look[t] = t*4;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4619      	mov	r1, r3
 80082e6:	4a0d      	ldr	r2, [pc, #52]	; (800831c <flash_record_init+0x78>)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	331e      	adds	r3, #30
 80082ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		wall.column_look[t] = t*8;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	4619      	mov	r1, r3
 80082f6:	4a09      	ldr	r2, [pc, #36]	; (800831c <flash_record_init+0x78>)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	332c      	adds	r3, #44	; 0x2c
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	6059      	str	r1, [r3, #4]
		t++;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	3301      	adds	r3, #1
 8008306:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b0e      	cmp	r3, #14
 800830c:	dde8      	ble.n	80082e0 <flash_record_init+0x3c>
	}

}
 800830e:	bf00      	nop
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	20001010 	.word	0x20001010

08008320 <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	4603      	mov	r3, r0
 8008328:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 800832a:	2200      	movs	r2, #0
 800832c:	2110      	movs	r1, #16
 800832e:	4810      	ldr	r0, [pc, #64]	; (8008370 <gyro_read_byte+0x50>)
 8008330:	f014 fb9c 	bl	801ca6c <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 8008334:	79fb      	ldrb	r3, [r7, #7]
 8008336:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800833a:	b2db      	uxtb	r3, r3
 800833c:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 800833e:	f107 010f 	add.w	r1, r7, #15
 8008342:	2364      	movs	r3, #100	; 0x64
 8008344:	2201      	movs	r2, #1
 8008346:	480b      	ldr	r0, [pc, #44]	; (8008374 <gyro_read_byte+0x54>)
 8008348:	f015 fc73 	bl	801dc32 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 800834c:	f107 010e 	add.w	r1, r7, #14
 8008350:	2364      	movs	r3, #100	; 0x64
 8008352:	2201      	movs	r2, #1
 8008354:	4807      	ldr	r0, [pc, #28]	; (8008374 <gyro_read_byte+0x54>)
 8008356:	f015 fdda 	bl	801df0e <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 800835a:	2201      	movs	r2, #1
 800835c:	2110      	movs	r1, #16
 800835e:	4804      	ldr	r0, [pc, #16]	; (8008370 <gyro_read_byte+0x50>)
 8008360:	f014 fb84 	bl	801ca6c <HAL_GPIO_WritePin>

	return val;
 8008364:	7bbb      	ldrb	r3, [r7, #14]

}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	48000800 	.word	0x48000800
 8008374:	2000f294 	.word	0x2000f294

08008378 <gyro_write_byte>:

void gyro_write_byte(uint8_t reg, uint8_t val)

{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	4603      	mov	r3, r0
 8008380:	460a      	mov	r2, r1
 8008382:	71fb      	strb	r3, [r7, #7]
 8008384:	4613      	mov	r3, r2
 8008386:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;

	ret = reg & 0x7F;//先頭のbitを0に
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800838e:	b2db      	uxtb	r3, r3
 8008390:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8008392:	2200      	movs	r2, #0
 8008394:	2110      	movs	r1, #16
 8008396:	480c      	ldr	r0, [pc, #48]	; (80083c8 <gyro_write_byte+0x50>)
 8008398:	f014 fb68 	bl	801ca6c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 800839c:	f107 010f 	add.w	r1, r7, #15
 80083a0:	2364      	movs	r3, #100	; 0x64
 80083a2:	2201      	movs	r2, #1
 80083a4:	4809      	ldr	r0, [pc, #36]	; (80083cc <gyro_write_byte+0x54>)
 80083a6:	f015 fc44 	bl	801dc32 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &val, 1, 100);
 80083aa:	1db9      	adds	r1, r7, #6
 80083ac:	2364      	movs	r3, #100	; 0x64
 80083ae:	2201      	movs	r2, #1
 80083b0:	4806      	ldr	r0, [pc, #24]	; (80083cc <gyro_write_byte+0x54>)
 80083b2:	f015 fc3e 	bl	801dc32 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80083b6:	2201      	movs	r2, #1
 80083b8:	2110      	movs	r1, #16
 80083ba:	4803      	ldr	r0, [pc, #12]	; (80083c8 <gyro_write_byte+0x50>)
 80083bc:	f014 fb56 	bl	801ca6c <HAL_GPIO_WritePin>

}
 80083c0:	bf00      	nop
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	48000800 	.word	0x48000800
 80083cc:	2000f294 	.word	0x2000f294

080083d0 <pl_gyro_init>:

void pl_gyro_init(void)

{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80083d6:	2300      	movs	r3, #0
 80083d8:	71fb      	strb	r3, [r7, #7]

// check WHO_AM_I (0x75)

	who_am_i = gyro_read_byte(0x75);
 80083da:	2075      	movs	r0, #117	; 0x75
 80083dc:	f7ff ffa0 	bl	8008320 <gyro_read_byte>
 80083e0:	4603      	mov	r3, r0
 80083e2:	71fb      	strb	r3, [r7, #7]

// who am i = 0x12

	printf("\r\nwho_am_i = 0x%x\r\n", who_am_i);
 80083e4:	79fb      	ldrb	r3, [r7, #7]
 80083e6:	4619      	mov	r1, r3
 80083e8:	481b      	ldr	r0, [pc, #108]	; (8008458 <pl_gyro_init+0x88>)
 80083ea:	f019 f8d5 	bl	8021598 <iprintf>

// recheck

	if (who_am_i != 0x98) {
 80083ee:	79fb      	ldrb	r3, [r7, #7]
 80083f0:	2b98      	cmp	r3, #152	; 0x98
 80083f2:	d00e      	beq.n	8008412 <pl_gyro_init+0x42>

		HAL_Delay(100);
 80083f4:	2064      	movs	r0, #100	; 0x64
 80083f6:	f011 f97d 	bl	80196f4 <HAL_Delay>

		who_am_i = gyro_read_byte(0x75);
 80083fa:	2075      	movs	r0, #117	; 0x75
 80083fc:	f7ff ff90 	bl	8008320 <gyro_read_byte>
 8008400:	4603      	mov	r3, r0
 8008402:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x98) {
 8008404:	79fb      	ldrb	r3, [r7, #7]
 8008406:	2b98      	cmp	r3, #152	; 0x98
 8008408:	d003      	beq.n	8008412 <pl_gyro_init+0x42>

			while (1) {

				printf("gyro_error\r");
 800840a:	4814      	ldr	r0, [pc, #80]	; (800845c <pl_gyro_init+0x8c>)
 800840c:	f019 f8c4 	bl	8021598 <iprintf>
 8008410:	e7fb      	b.n	800840a <pl_gyro_init+0x3a>

// set pwr might

// PWR_MIGHT_1 0x6B

	gyro_write_byte(0x6B, 0x00);
 8008412:	2100      	movs	r1, #0
 8008414:	206b      	movs	r0, #107	; 0x6b
 8008416:	f7ff ffaf 	bl	8008378 <gyro_write_byte>

	HAL_Delay(50);
 800841a:	2032      	movs	r0, #50	; 0x32
 800841c:	f011 f96a 	bl	80196f4 <HAL_Delay>

// PWR_MIGHT_2 0x6C

	gyro_write_byte(0x6C, 0x00);
 8008420:	2100      	movs	r1, #0
 8008422:	206c      	movs	r0, #108	; 0x6c
 8008424:	f7ff ffa8 	bl	8008378 <gyro_write_byte>

	HAL_Delay(50);
 8008428:	2032      	movs	r0, #50	; 0x32
 800842a:	f011 f963 	bl	80196f4 <HAL_Delay>

// set gyro config

// GYRO_CONFIG 0x1B

	gyro_write_byte(0x1B, 0x18); // use 2000 dps
 800842e:	2118      	movs	r1, #24
 8008430:	201b      	movs	r0, #27
 8008432:	f7ff ffa1 	bl	8008378 <gyro_write_byte>

	HAL_Delay(50);
 8008436:	2032      	movs	r0, #50	; 0x32
 8008438:	f011 f95c 	bl	80196f4 <HAL_Delay>

// ACCEL_CONFIG 0x1C

	gyro_write_byte(0x1C, 0x18); // use pm 16g
 800843c:	2118      	movs	r1, #24
 800843e:	201c      	movs	r0, #28
 8008440:	f7ff ff9a 	bl	8008378 <gyro_write_byte>

	HAL_Delay(50);
 8008444:	2032      	movs	r0, #50	; 0x32
 8008446:	f011 f955 	bl	80196f4 <HAL_Delay>

	//gyro_write_byte(0x1D, 0x08);
	//HAL_Delay(50);

	set_flag = 1;
 800844a:	4b05      	ldr	r3, [pc, #20]	; (8008460 <pl_gyro_init+0x90>)
 800844c:	2201      	movs	r2, #1
 800844e:	701a      	strb	r2, [r3, #0]

}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	08024f78 	.word	0x08024f78
 800845c:	08024f8c 	.word	0x08024f8c
 8008460:	200006ec 	.word	0x200006ec

08008464 <ICM20602_GYRO_READ>:

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 8008464:	b590      	push	{r4, r7, lr}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	4603      	mov	r3, r0
 800846c:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800846e:	79fb      	ldrb	r3, [r7, #7]
 8008470:	4618      	mov	r0, r3
 8008472:	f7ff ff55 	bl	8008320 <gyro_read_byte>
 8008476:	4603      	mov	r3, r0
 8008478:	021b      	lsls	r3, r3, #8
 800847a:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 800847c:	79fb      	ldrb	r3, [r7, #7]
 800847e:	3301      	adds	r3, #1
 8008480:	b2db      	uxtb	r3, r3
 8008482:	4618      	mov	r0, r3
 8008484:	f7ff ff4c 	bl	8008320 <gyro_read_byte>
 8008488:	4603      	mov	r3, r0
 800848a:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800848c:	4323      	orrs	r3, r4
 800848e:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 8008490:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008494:	ee07 3a90 	vmov	s15, r3
 8008498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800849c:	eddf 6a06 	vldr	s13, [pc, #24]	; 80084b8 <ICM20602_GYRO_READ+0x54>
 80084a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80084a4:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	ee07 3a90 	vmov	s15, r3

}
 80084ae:	eeb0 0a67 	vmov.f32	s0, s15
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd90      	pop	{r4, r7, pc}
 80084b8:	41833333 	.word	0x41833333

080084bc <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 80084bc:	b590      	push	{r4, r7, lr}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	4603      	mov	r3, r0
 80084c4:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80084c6:	79fb      	ldrb	r3, [r7, #7]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7ff ff29 	bl	8008320 <gyro_read_byte>
 80084ce:	4603      	mov	r3, r0
 80084d0:	021b      	lsls	r3, r3, #8
 80084d2:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 80084d4:	79fb      	ldrb	r3, [r7, #7]
 80084d6:	3301      	adds	r3, #1
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	4618      	mov	r0, r3
 80084dc:	f7ff ff20 	bl	8008320 <gyro_read_byte>
 80084e0:	4603      	mov	r3, r0
 80084e2:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80084e4:	4323      	orrs	r3, r4
 80084e6:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 80084e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80084ec:	ee07 3a90 	vmov	s15, r3
 80084f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084f4:	eddf 6a06 	vldr	s13, [pc, #24]	; 8008510 <ICM20602_ACCEL_READ+0x54>
 80084f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80084fc:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	ee07 3a90 	vmov	s15, r3

}
 8008506:	eeb0 0a67 	vmov.f32	s0, s15
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	bd90      	pop	{r4, r7, pc}
 8008510:	45000000 	.word	0x45000000

08008514 <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 8008514:	b580      	push	{r7, lr}
 8008516:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 8008518:	4b0e      	ldr	r3, [pc, #56]	; (8008554 <ICM20602_DataUpdate+0x40>)
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d117      	bne.n	8008550 <ICM20602_DataUpdate+0x3c>

// get yawrate

		//gyro.omega_y = ICM20602_GYRO_READ(0x43);

		gyro.omega_x = ICM20602_GYRO_READ(0x45);
 8008520:	2045      	movs	r0, #69	; 0x45
 8008522:	f7ff ff9f 	bl	8008464 <ICM20602_GYRO_READ>
 8008526:	eef0 7a40 	vmov.f32	s15, s0
 800852a:	4b0b      	ldr	r3, [pc, #44]	; (8008558 <ICM20602_DataUpdate+0x44>)
 800852c:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 8008530:	2047      	movs	r0, #71	; 0x47
 8008532:	f7ff ff97 	bl	8008464 <ICM20602_GYRO_READ>
 8008536:	eef0 7a40 	vmov.f32	s15, s0
 800853a:	4b07      	ldr	r3, [pc, #28]	; (8008558 <ICM20602_DataUpdate+0x44>)
 800853c:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_y = ICM20602_ACCEL_READ(0x3B);
 8008540:	203b      	movs	r0, #59	; 0x3b
 8008542:	f7ff ffbb 	bl	80084bc <ICM20602_ACCEL_READ>
 8008546:	eef0 7a40 	vmov.f32	s15, s0
 800854a:	4b03      	ldr	r3, [pc, #12]	; (8008558 <ICM20602_DataUpdate+0x44>)
 800854c:	edc3 7a04 	vstr	s15, [r3, #16]

		//gyro.accel_z = ICM20602_ACCEL_READ(0x3F);

	}

}
 8008550:	bf00      	nop
 8008552:	bd80      	pop	{r7, pc}
 8008554:	200006ec 	.word	0x200006ec
 8008558:	200006f0 	.word	0x200006f0

0800855c <pl_motor_init>:
#include "PL_motor.h"
#include "tim.h"
#include "gpio.h"
#include "define.h"

void pl_motor_init(void){
 800855c:	b580      	push	{r7, lr}
 800855e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim8);//モータ
 8008560:	480f      	ldr	r0, [pc, #60]	; (80085a0 <pl_motor_init+0x44>)
 8008562:	f016 fa2b 	bl	801e9bc <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim8);//モータ
 8008566:	480e      	ldr	r0, [pc, #56]	; (80085a0 <pl_motor_init+0x44>)
 8008568:	f00f ff50 	bl	801840c <HAL_TIM_PWM_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);//吸
 800856c:	480d      	ldr	r0, [pc, #52]	; (80085a4 <pl_motor_init+0x48>)
 800856e:	f016 fa25 	bl	801e9bc <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim16);//吸
 8008572:	480c      	ldr	r0, [pc, #48]	; (80085a4 <pl_motor_init+0x48>)
 8008574:	f00f ff4a 	bl	801840c <HAL_TIM_PWM_MspInit>

	pl_L_DriveMotor_mode(MOTOR_FRONT);
 8008578:	2001      	movs	r0, #1
 800857a:	f000 f81f 	bl	80085bc <pl_L_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,90);
 800857e:	4b08      	ldr	r3, [pc, #32]	; (80085a0 <pl_motor_init+0x44>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	225a      	movs	r2, #90	; 0x5a
 8008584:	63da      	str	r2, [r3, #60]	; 0x3c
	pl_R_DriveMotor_mode(MOTOR_FRONT);
 8008586:	2001      	movs	r0, #1
 8008588:	f000 f840 	bl	800860c <pl_R_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,90);
 800858c:	4b04      	ldr	r3, [pc, #16]	; (80085a0 <pl_motor_init+0x44>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	225a      	movs	r2, #90	; 0x5a
 8008592:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,30);
 8008594:	4b03      	ldr	r3, [pc, #12]	; (80085a4 <pl_motor_init+0x48>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	221e      	movs	r2, #30
 800859a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800859c:	bf00      	nop
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	2000f3ac 	.word	0x2000f3ac
 80085a4:	2000f3f8 	.word	0x2000f3f8

080085a8 <pl_DriveMotor_standby>:

void pl_DriveMotor_standby(int pin){
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, pin);
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <pl_L_DriveMotor_mode>:

void pl_L_DriveMotor_mode(int l_motor_mode){
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]

switch (l_motor_mode){
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d819      	bhi.n	80085fe <pl_L_DriveMotor_mode+0x42>
 80085ca:	a201      	add	r2, pc, #4	; (adr r2, 80085d0 <pl_L_DriveMotor_mode+0x14>)
 80085cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d0:	080085fd 	.word	0x080085fd
 80085d4:	080085e1 	.word	0x080085e1
 80085d8:	080085ef 	.word	0x080085ef
 80085dc:	080085fd 	.word	0x080085fd
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 80085e0:	2200      	movs	r2, #0
 80085e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80085e6:	4808      	ldr	r0, [pc, #32]	; (8008608 <pl_L_DriveMotor_mode+0x4c>)
 80085e8:	f014 fa40 	bl	801ca6c <HAL_GPIO_WritePin>
break;
 80085ec:	e007      	b.n	80085fe <pl_L_DriveMotor_mode+0x42>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_SET);
 80085ee:	2201      	movs	r2, #1
 80085f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80085f4:	4804      	ldr	r0, [pc, #16]	; (8008608 <pl_L_DriveMotor_mode+0x4c>)
 80085f6:	f014 fa39 	bl	801ca6c <HAL_GPIO_WritePin>
break;
 80085fa:	e000      	b.n	80085fe <pl_L_DriveMotor_mode+0x42>
break;
 80085fc:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 80085fe:	bf00      	nop
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	48000800 	.word	0x48000800

0800860c <pl_R_DriveMotor_mode>:

void pl_R_DriveMotor_mode(int r_motor_mode){
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]

switch (r_motor_mode){
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b03      	cmp	r3, #3
 8008618:	d817      	bhi.n	800864a <pl_R_DriveMotor_mode+0x3e>
 800861a:	a201      	add	r2, pc, #4	; (adr r2, 8008620 <pl_R_DriveMotor_mode+0x14>)
 800861c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008620:	08008649 	.word	0x08008649
 8008624:	08008631 	.word	0x08008631
 8008628:	0800863d 	.word	0x0800863d
 800862c:	08008649 	.word	0x08008649
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 8008630:	2201      	movs	r2, #1
 8008632:	2180      	movs	r1, #128	; 0x80
 8008634:	4807      	ldr	r0, [pc, #28]	; (8008654 <pl_R_DriveMotor_mode+0x48>)
 8008636:	f014 fa19 	bl	801ca6c <HAL_GPIO_WritePin>
break;
 800863a:	e006      	b.n	800864a <pl_R_DriveMotor_mode+0x3e>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_RESET);
 800863c:	2200      	movs	r2, #0
 800863e:	2180      	movs	r1, #128	; 0x80
 8008640:	4804      	ldr	r0, [pc, #16]	; (8008654 <pl_R_DriveMotor_mode+0x48>)
 8008642:	f014 fa13 	bl	801ca6c <HAL_GPIO_WritePin>
break;
 8008646:	e000      	b.n	800864a <pl_R_DriveMotor_mode+0x3e>
break;
 8008648:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 800864a:	bf00      	nop
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	48000400 	.word	0x48000400

08008658 <pl_DriveMotor_start>:



void pl_DriveMotor_start(void){
 8008658:	b580      	push	{r7, lr}
 800865a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800865c:	2108      	movs	r1, #8
 800865e:	4804      	ldr	r0, [pc, #16]	; (8008670 <pl_DriveMotor_start+0x18>)
 8008660:	f016 fa74 	bl	801eb4c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8008664:	2100      	movs	r1, #0
 8008666:	4802      	ldr	r0, [pc, #8]	; (8008670 <pl_DriveMotor_start+0x18>)
 8008668:	f016 fa70 	bl	801eb4c <HAL_TIM_PWM_Start>
}
 800866c:	bf00      	nop
 800866e:	bd80      	pop	{r7, pc}
 8008670:	2000f3ac 	.word	0x2000f3ac

08008674 <pl_DriveMotor_stop>:

void pl_DriveMotor_stop(void){
 8008674:	b580      	push	{r7, lr}
 8008676:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8008678:	2108      	movs	r1, #8
 800867a:	4804      	ldr	r0, [pc, #16]	; (800868c <pl_DriveMotor_stop+0x18>)
 800867c:	f016 fb72 	bl	801ed64 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8008680:	2100      	movs	r1, #0
 8008682:	4802      	ldr	r0, [pc, #8]	; (800868c <pl_DriveMotor_stop+0x18>)
 8008684:	f016 fb6e 	bl	801ed64 <HAL_TIM_PWM_Stop>
}
 8008688:	bf00      	nop
 800868a:	bd80      	pop	{r7, pc}
 800868c:	2000f3ac 	.word	0x2000f3ac

08008690 <pl_DriveMotor_duty>:

void pl_DriveMotor_duty(int duty_l,int duty_r){
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,duty_l);
 800869a:	4b07      	ldr	r3, [pc, #28]	; (80086b8 <pl_DriveMotor_duty+0x28>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,duty_r);
 80086a2:	4b05      	ldr	r3, [pc, #20]	; (80086b8 <pl_DriveMotor_duty+0x28>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80086aa:	bf00      	nop
 80086ac:	370c      	adds	r7, #12
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	2000f3ac 	.word	0x2000f3ac

080086bc <pl_FunMotor_start>:



void pl_FunMotor_start(void){
 80086bc:	b580      	push	{r7, lr}
 80086be:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80086c0:	2100      	movs	r1, #0
 80086c2:	4802      	ldr	r0, [pc, #8]	; (80086cc <pl_FunMotor_start+0x10>)
 80086c4:	f016 fa42 	bl	801eb4c <HAL_TIM_PWM_Start>
}
 80086c8:	bf00      	nop
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	2000f3f8 	.word	0x2000f3f8

080086d0 <pl_FunMotor_stop>:

void pl_FunMotor_stop(void){
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80086d4:	2100      	movs	r1, #0
 80086d6:	4802      	ldr	r0, [pc, #8]	; (80086e0 <pl_FunMotor_stop+0x10>)
 80086d8:	f016 fb44 	bl	801ed64 <HAL_TIM_PWM_Stop>
}
 80086dc:	bf00      	nop
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	2000f3f8 	.word	0x2000f3f8

080086e4 <pl_FunMotor_duty>:

void pl_FunMotor_duty(float fun_ratio){
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_fun=(int)(FUN_MAX_DUTY*fun_ratio);
 80086ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80086f2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8008728 <pl_FunMotor_duty+0x44>
 80086f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80086fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086fe:	ee17 3a90 	vmov	r3, s15
 8008702:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim16, FUN_MAX_DUTY);
 8008704:	4b09      	ldr	r3, [pc, #36]	; (800872c <pl_FunMotor_duty+0x48>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2264      	movs	r2, #100	; 0x64
 800870a:	62da      	str	r2, [r3, #44]	; 0x2c
 800870c:	4b07      	ldr	r3, [pc, #28]	; (800872c <pl_FunMotor_duty+0x48>)
 800870e:	2264      	movs	r2, #100	; 0x64
 8008710:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,duty_fun);
 8008712:	4b06      	ldr	r3, [pc, #24]	; (800872c <pl_FunMotor_duty+0x48>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	635a      	str	r2, [r3, #52]	; 0x34

}
 800871a:	bf00      	nop
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	42c80000 	.word	0x42c80000
 800872c:	2000f3f8 	.word	0x2000f3f8

08008730 <pl_sensor_init>:
/*******************************************************************/
/*	sensorのinit					(pl_sensor_init)	*/
/*******************************************************************/
/*	sensorを初期設定						*/
/*******************************************************************/
void pl_sensor_init(void){
 8008730:	b580      	push	{r7, lr}
 8008732:	af00      	add	r7, sp, #0
	AD_step=0;
 8008734:	4b04      	ldr	r3, [pc, #16]	; (8008748 <pl_sensor_init+0x18>)
 8008736:	2200      	movs	r2, #0
 8008738:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Init(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800873a:	217f      	movs	r1, #127	; 0x7f
 800873c:	4803      	ldr	r0, [pc, #12]	; (800874c <pl_sensor_init+0x1c>)
 800873e:	f013 f853 	bl	801b7e8 <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_ConfigChannel(&hadc1,&sConfig);
}
 8008742:	bf00      	nop
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	20000714 	.word	0x20000714
 800874c:	20000740 	.word	0x20000740

08008750 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 8008756:	483c      	ldr	r0, [pc, #240]	; (8008848 <pl_getbatt+0xf8>)
 8008758:	f011 fc34 	bl	8019fc4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 800875c:	2132      	movs	r1, #50	; 0x32
 800875e:	483a      	ldr	r0, [pc, #232]	; (8008848 <pl_getbatt+0xf8>)
 8008760:	f011 fd2e 	bl	801a1c0 <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 8008764:	4838      	ldr	r0, [pc, #224]	; (8008848 <pl_getbatt+0xf8>)
 8008766:	f011 ff4a 	bl	801a5fe <HAL_ADC_GetValue>
 800876a:	4603      	mov	r3, r0
 800876c:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 800876e:	4836      	ldr	r0, [pc, #216]	; (8008848 <pl_getbatt+0xf8>)
 8008770:	f011 fcf2 	bl	801a158 <HAL_ADC_Stop>
	batt = 3.3 * (float) battAD / 4095 * (10.0 + 10.0) / 10.0*1.15*3.7/3.86;//* 1.2975
 8008774:	88fb      	ldrh	r3, [r7, #6]
 8008776:	ee07 3a90 	vmov	s15, r3
 800877a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877e:	ee17 0a90 	vmov	r0, s15
 8008782:	f7f7 ff09 	bl	8000598 <__aeabi_f2d>
 8008786:	a326      	add	r3, pc, #152	; (adr r3, 8008820 <pl_getbatt+0xd0>)
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	f7f7 ff5c 	bl	8000648 <__aeabi_dmul>
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	4610      	mov	r0, r2
 8008796:	4619      	mov	r1, r3
 8008798:	a323      	add	r3, pc, #140	; (adr r3, 8008828 <pl_getbatt+0xd8>)
 800879a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879e:	f7f8 f87d 	bl	800089c <__aeabi_ddiv>
 80087a2:	4602      	mov	r2, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	4610      	mov	r0, r2
 80087a8:	4619      	mov	r1, r3
 80087aa:	f04f 0200 	mov.w	r2, #0
 80087ae:	4b27      	ldr	r3, [pc, #156]	; (800884c <pl_getbatt+0xfc>)
 80087b0:	f7f7 ff4a 	bl	8000648 <__aeabi_dmul>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	4610      	mov	r0, r2
 80087ba:	4619      	mov	r1, r3
 80087bc:	f04f 0200 	mov.w	r2, #0
 80087c0:	4b23      	ldr	r3, [pc, #140]	; (8008850 <pl_getbatt+0x100>)
 80087c2:	f7f8 f86b 	bl	800089c <__aeabi_ddiv>
 80087c6:	4602      	mov	r2, r0
 80087c8:	460b      	mov	r3, r1
 80087ca:	4610      	mov	r0, r2
 80087cc:	4619      	mov	r1, r3
 80087ce:	a318      	add	r3, pc, #96	; (adr r3, 8008830 <pl_getbatt+0xe0>)
 80087d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d4:	f7f7 ff38 	bl	8000648 <__aeabi_dmul>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4610      	mov	r0, r2
 80087de:	4619      	mov	r1, r3
 80087e0:	a315      	add	r3, pc, #84	; (adr r3, 8008838 <pl_getbatt+0xe8>)
 80087e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e6:	f7f7 ff2f 	bl	8000648 <__aeabi_dmul>
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	4610      	mov	r0, r2
 80087f0:	4619      	mov	r1, r3
 80087f2:	a313      	add	r3, pc, #76	; (adr r3, 8008840 <pl_getbatt+0xf0>)
 80087f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f8:	f7f8 f850 	bl	800089c <__aeabi_ddiv>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4610      	mov	r0, r2
 8008802:	4619      	mov	r1, r3
 8008804:	f7f8 f9f8 	bl	8000bf8 <__aeabi_d2f>
 8008808:	4603      	mov	r3, r0
 800880a:	603b      	str	r3, [r7, #0]
return batt;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	ee07 3a90 	vmov	s15, r3
}
 8008812:	eeb0 0a67 	vmov.f32	s0, s15
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	f3af 8000 	nop.w
 8008820:	66666666 	.word	0x66666666
 8008824:	400a6666 	.word	0x400a6666
 8008828:	00000000 	.word	0x00000000
 800882c:	40affe00 	.word	0x40affe00
 8008830:	66666666 	.word	0x66666666
 8008834:	3ff26666 	.word	0x3ff26666
 8008838:	9999999a 	.word	0x9999999a
 800883c:	400d9999 	.word	0x400d9999
 8008840:	ae147ae1 	.word	0xae147ae1
 8008844:	400ee147 	.word	0x400ee147
 8008848:	20000740 	.word	0x20000740
 800884c:	40340000 	.word	0x40340000
 8008850:	40240000 	.word	0x40240000
 8008854:	00000000 	.word	0x00000000

08008858 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 800885e:	4882      	ldr	r0, [pc, #520]	; (8008a68 <pl_callback_getSensor+0x210>)
 8008860:	f011 fe6c 	bl	801a53c <HAL_ADC_Stop_DMA>


	switch (AD_step) {
 8008864:	4b81      	ldr	r3, [pc, #516]	; (8008a6c <pl_callback_getSensor+0x214>)
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	2b04      	cmp	r3, #4
 800886a:	f200 80d9 	bhi.w	8008a20 <pl_callback_getSensor+0x1c8>
 800886e:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <pl_callback_getSensor+0x1c>)
 8008870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008874:	08008889 	.word	0x08008889
 8008878:	080088c1 	.word	0x080088c1
 800887c:	08008921 	.word	0x08008921
 8008880:	08008961 	.word	0x08008961
 8008884:	08008a21 	.word	0x08008a21
	case 0:
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin, GPIO_PIN_SET);
 8008888:	2201      	movs	r2, #1
 800888a:	2102      	movs	r1, #2
 800888c:	4878      	ldr	r0, [pc, #480]	; (8008a70 <pl_callback_getSensor+0x218>)
 800888e:	f014 f8ed 	bl	801ca6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8008892:	2200      	movs	r2, #0
 8008894:	2110      	movs	r1, #16
 8008896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800889a:	f014 f8e7 	bl	801ca6c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 800889e:	2200      	movs	r2, #0
 80088a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088a4:	4873      	ldr	r0, [pc, #460]	; (8008a74 <pl_callback_getSensor+0x21c>)
 80088a6:	f014 f8e1 	bl	801ca6c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 80088aa:	2300      	movs	r3, #0
 80088ac:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 80088ae:	e002      	b.n	80088b6 <pl_callback_getSensor+0x5e>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3301      	adds	r3, #1
 80088b4:	607b      	str	r3, [r7, #4]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088bc:	ddf8      	ble.n	80088b0 <pl_callback_getSensor+0x58>
		break;
 80088be:	e0af      	b.n	8008a20 <pl_callback_getSensor+0x1c8>
	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 80088c0:	4b6d      	ldr	r3, [pc, #436]	; (8008a78 <pl_callback_getSensor+0x220>)
 80088c2:	885a      	ldrh	r2, [r3, #2]
 80088c4:	4b6d      	ldr	r3, [pc, #436]	; (8008a7c <pl_callback_getSensor+0x224>)
 80088c6:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 80088c8:	4b6b      	ldr	r3, [pc, #428]	; (8008a78 <pl_callback_getSensor+0x220>)
 80088ca:	889a      	ldrh	r2, [r3, #4]
 80088cc:	4b6b      	ldr	r3, [pc, #428]	; (8008a7c <pl_callback_getSensor+0x224>)
 80088ce:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 80088d0:	4b69      	ldr	r3, [pc, #420]	; (8008a78 <pl_callback_getSensor+0x220>)
 80088d2:	88da      	ldrh	r2, [r3, #6]
 80088d4:	4b6a      	ldr	r3, [pc, #424]	; (8008a80 <pl_callback_getSensor+0x228>)
 80088d6:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 80088d8:	4b67      	ldr	r3, [pc, #412]	; (8008a78 <pl_callback_getSensor+0x220>)
 80088da:	891a      	ldrh	r2, [r3, #8]
 80088dc:	4b68      	ldr	r3, [pc, #416]	; (8008a80 <pl_callback_getSensor+0x228>)
 80088de:	80da      	strh	r2, [r3, #6]
		g_sensor_off[4] = g_ADCBuffer[5];
 80088e0:	4b65      	ldr	r3, [pc, #404]	; (8008a78 <pl_callback_getSensor+0x220>)
 80088e2:	895a      	ldrh	r2, [r3, #10]
 80088e4:	4b66      	ldr	r3, [pc, #408]	; (8008a80 <pl_callback_getSensor+0x228>)
 80088e6:	811a      	strh	r2, [r3, #8]

		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 80088e8:	2200      	movs	r2, #0
 80088ea:	2102      	movs	r1, #2
 80088ec:	4860      	ldr	r0, [pc, #384]	; (8008a70 <pl_callback_getSensor+0x218>)
 80088ee:	f014 f8bd 	bl	801ca6c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin, GPIO_PIN_SET);
 80088f2:	2201      	movs	r2, #1
 80088f4:	2110      	movs	r1, #16
 80088f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088fa:	f014 f8b7 	bl	801ca6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 80088fe:	2200      	movs	r2, #0
 8008900:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008904:	485b      	ldr	r0, [pc, #364]	; (8008a74 <pl_callback_getSensor+0x21c>)
 8008906:	f014 f8b1 	bl	801ca6c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 800890a:	2300      	movs	r3, #0
 800890c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 800890e:	e002      	b.n	8008916 <pl_callback_getSensor+0xbe>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	3301      	adds	r3, #1
 8008914:	607b      	str	r3, [r7, #4]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800891c:	ddf8      	ble.n	8008910 <pl_callback_getSensor+0xb8>
		break;
 800891e:	e07f      	b.n	8008a20 <pl_callback_getSensor+0x1c8>
	case 2:
		g_sensor_on[2] = g_ADCBuffer[3];
 8008920:	4b55      	ldr	r3, [pc, #340]	; (8008a78 <pl_callback_getSensor+0x220>)
 8008922:	88da      	ldrh	r2, [r3, #6]
 8008924:	4b55      	ldr	r3, [pc, #340]	; (8008a7c <pl_callback_getSensor+0x224>)
 8008926:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8008928:	2200      	movs	r2, #0
 800892a:	2102      	movs	r1, #2
 800892c:	4850      	ldr	r0, [pc, #320]	; (8008a70 <pl_callback_getSensor+0x218>)
 800892e:	f014 f89d 	bl	801ca6c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8008932:	2200      	movs	r2, #0
 8008934:	2110      	movs	r1, #16
 8008936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800893a:	f014 f897 	bl	801ca6c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin, GPIO_PIN_SET);
 800893e:	2201      	movs	r2, #1
 8008940:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008944:	484b      	ldr	r0, [pc, #300]	; (8008a74 <pl_callback_getSensor+0x21c>)
 8008946:	f014 f891 	bl	801ca6c <HAL_GPIO_WritePin>
		j=0;
 800894a:	2300      	movs	r3, #0
 800894c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 800894e:	e002      	b.n	8008956 <pl_callback_getSensor+0xfe>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3301      	adds	r3, #1
 8008954:	607b      	str	r3, [r7, #4]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800895c:	ddf8      	ble.n	8008950 <pl_callback_getSensor+0xf8>
		break;
 800895e:	e05f      	b.n	8008a20 <pl_callback_getSensor+0x1c8>
	case 3:
		g_sensor_off[0] = g_ADCBuffer[1];
 8008960:	4b45      	ldr	r3, [pc, #276]	; (8008a78 <pl_callback_getSensor+0x220>)
 8008962:	885a      	ldrh	r2, [r3, #2]
 8008964:	4b46      	ldr	r3, [pc, #280]	; (8008a80 <pl_callback_getSensor+0x228>)
 8008966:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 8008968:	4b43      	ldr	r3, [pc, #268]	; (8008a78 <pl_callback_getSensor+0x220>)
 800896a:	889a      	ldrh	r2, [r3, #4]
 800896c:	4b44      	ldr	r3, [pc, #272]	; (8008a80 <pl_callback_getSensor+0x228>)
 800896e:	805a      	strh	r2, [r3, #2]
		g_sensor_on[3] = g_ADCBuffer[4];
 8008970:	4b41      	ldr	r3, [pc, #260]	; (8008a78 <pl_callback_getSensor+0x220>)
 8008972:	891a      	ldrh	r2, [r3, #8]
 8008974:	4b41      	ldr	r3, [pc, #260]	; (8008a7c <pl_callback_getSensor+0x224>)
 8008976:	80da      	strh	r2, [r3, #6]
		g_sensor_on[4] = g_ADCBuffer[5];
 8008978:	4b3f      	ldr	r3, [pc, #252]	; (8008a78 <pl_callback_getSensor+0x220>)
 800897a:	895a      	ldrh	r2, [r3, #10]
 800897c:	4b3f      	ldr	r3, [pc, #252]	; (8008a7c <pl_callback_getSensor+0x224>)
 800897e:	811a      	strh	r2, [r3, #8]


		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8008980:	2200      	movs	r2, #0
 8008982:	2102      	movs	r1, #2
 8008984:	483a      	ldr	r0, [pc, #232]	; (8008a70 <pl_callback_getSensor+0x218>)
 8008986:	f014 f871 	bl	801ca6c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 800898a:	2200      	movs	r2, #0
 800898c:	2110      	movs	r1, #16
 800898e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008992:	f014 f86b 	bl	801ca6c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8008996:	2200      	movs	r2, #0
 8008998:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800899c:	4835      	ldr	r0, [pc, #212]	; (8008a74 <pl_callback_getSensor+0x21c>)
 800899e:	f014 f865 	bl	801ca6c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	607b      	str	r3, [r7, #4]
		while (j <= 50) {j++;}
 80089a6:	e002      	b.n	80089ae <pl_callback_getSensor+0x156>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3301      	adds	r3, #1
 80089ac:	607b      	str	r3, [r7, #4]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b32      	cmp	r3, #50	; 0x32
 80089b2:	ddf9      	ble.n	80089a8 <pl_callback_getSensor+0x150>
		V_battAD = g_ADCBuffer[0];
 80089b4:	4b30      	ldr	r3, [pc, #192]	; (8008a78 <pl_callback_getSensor+0x220>)
 80089b6:	881b      	ldrh	r3, [r3, #0]
 80089b8:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 4095.0 * (100.0 + 50.0) / 50.0;
 80089ba:	887b      	ldrh	r3, [r7, #2]
 80089bc:	ee07 3a90 	vmov	s15, r3
 80089c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c4:	ee17 0a90 	vmov	r0, s15
 80089c8:	f7f7 fde6 	bl	8000598 <__aeabi_f2d>
 80089cc:	a320      	add	r3, pc, #128	; (adr r3, 8008a50 <pl_callback_getSensor+0x1f8>)
 80089ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d2:	f7f7 fe39 	bl	8000648 <__aeabi_dmul>
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	4610      	mov	r0, r2
 80089dc:	4619      	mov	r1, r3
 80089de:	a31e      	add	r3, pc, #120	; (adr r3, 8008a58 <pl_callback_getSensor+0x200>)
 80089e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e4:	f7f7 ff5a 	bl	800089c <__aeabi_ddiv>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4610      	mov	r0, r2
 80089ee:	4619      	mov	r1, r3
 80089f0:	a31b      	add	r3, pc, #108	; (adr r3, 8008a60 <pl_callback_getSensor+0x208>)
 80089f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f6:	f7f7 fe27 	bl	8000648 <__aeabi_dmul>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	4610      	mov	r0, r2
 8008a00:	4619      	mov	r1, r3
 8008a02:	f04f 0200 	mov.w	r2, #0
 8008a06:	4b1f      	ldr	r3, [pc, #124]	; (8008a84 <pl_callback_getSensor+0x22c>)
 8008a08:	f7f7 ff48 	bl	800089c <__aeabi_ddiv>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	4610      	mov	r0, r2
 8008a12:	4619      	mov	r1, r3
 8008a14:	f7f8 f8f0 	bl	8000bf8 <__aeabi_d2f>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	4a1b      	ldr	r2, [pc, #108]	; (8008a88 <pl_callback_getSensor+0x230>)
 8008a1c:	6013      	str	r3, [r2, #0]
		break;
 8008a1e:	bf00      	nop

		break;
	}


	AD_step++;
 8008a20:	4b12      	ldr	r3, [pc, #72]	; (8008a6c <pl_callback_getSensor+0x214>)
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	3301      	adds	r3, #1
 8008a26:	b2da      	uxtb	r2, r3
 8008a28:	4b10      	ldr	r3, [pc, #64]	; (8008a6c <pl_callback_getSensor+0x214>)
 8008a2a:	701a      	strb	r2, [r3, #0]
	//for(j=0;j<=2000;j++){}
	if (AD_step != 4) {
 8008a2c:	4b0f      	ldr	r3, [pc, #60]	; (8008a6c <pl_callback_getSensor+0x214>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	2b04      	cmp	r3, #4
 8008a32:	d005      	beq.n	8008a40 <pl_callback_getSensor+0x1e8>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8008a34:	2206      	movs	r2, #6
 8008a36:	4910      	ldr	r1, [pc, #64]	; (8008a78 <pl_callback_getSensor+0x220>)
 8008a38:	480b      	ldr	r0, [pc, #44]	; (8008a68 <pl_callback_getSensor+0x210>)
 8008a3a:	f011 fcb5 	bl	801a3a8 <HAL_ADC_Start_DMA>
	 the HAL_ADC_ConvCpltCallback could be implemented in the user file
	 */
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer)/sizeof(uint16_t));
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
	//	sizeof(g_ADCBuffer) / sizeof(uint16_t));
}
 8008a3e:	e002      	b.n	8008a46 <pl_callback_getSensor+0x1ee>
		AD_step = 0;
 8008a40:	4b0a      	ldr	r3, [pc, #40]	; (8008a6c <pl_callback_getSensor+0x214>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	701a      	strb	r2, [r3, #0]
}
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	66666666 	.word	0x66666666
 8008a54:	400a6666 	.word	0x400a6666
 8008a58:	00000000 	.word	0x00000000
 8008a5c:	40affe00 	.word	0x40affe00
 8008a60:	00000000 	.word	0x00000000
 8008a64:	4062c000 	.word	0x4062c000
 8008a68:	20000740 	.word	0x20000740
 8008a6c:	20000714 	.word	0x20000714
 8008a70:	48000400 	.word	0x48000400
 8008a74:	48000800 	.word	0x48000800
 8008a78:	20000708 	.word	0x20000708
 8008a7c:	20000718 	.word	0x20000718
 8008a80:	20000724 	.word	0x20000724
 8008a84:	40490000 	.word	0x40490000
 8008a88:	20000730 	.word	0x20000730

08008a8c <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8008a90:	2206      	movs	r2, #6
 8008a92:	4903      	ldr	r1, [pc, #12]	; (8008aa0 <pl_interupt_getSensor+0x14>)
 8008a94:	4803      	ldr	r0, [pc, #12]	; (8008aa4 <pl_interupt_getSensor+0x18>)
 8008a96:	f011 fc87 	bl	801a3a8 <HAL_ADC_Start_DMA>

}
 8008a9a:	bf00      	nop
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	20000708 	.word	0x20000708
 8008aa4:	20000740 	.word	0x20000740

08008aa8 <pl_timer_init>:

volatile uint32_t g_timCount;
float g_timCount_sec;
uint8_t count_mode;

void pl_timer_init(void){
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	af00      	add	r7, sp, #0
	count_mode=0;
 8008aac:	4b05      	ldr	r3, [pc, #20]	; (8008ac4 <pl_timer_init+0x1c>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8008ab2:	4b05      	ldr	r3, [pc, #20]	; (8008ac8 <pl_timer_init+0x20>)
 8008ab4:	f04f 0200 	mov.w	r2, #0
 8008ab8:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);//割り込み
 8008aba:	4804      	ldr	r0, [pc, #16]	; (8008acc <pl_timer_init+0x24>)
 8008abc:	f015 ff7e 	bl	801e9bc <HAL_TIM_Base_Start_IT>
}
 8008ac0:	bf00      	nop
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	2000073c 	.word	0x2000073c
 8008ac8:	20000738 	.word	0x20000738
 8008acc:	2000f360 	.word	0x2000f360

08008ad0 <interrupt_timer>:

void interrupt_timer(void){
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	af00      	add	r7, sp, #0
	g_timCount++;
 8008ad4:	4b10      	ldr	r3, [pc, #64]	; (8008b18 <interrupt_timer+0x48>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	4a0f      	ldr	r2, [pc, #60]	; (8008b18 <interrupt_timer+0x48>)
 8008adc:	6013      	str	r3, [r2, #0]
	if(count_mode==1){
 8008ade:	4b0f      	ldr	r3, [pc, #60]	; (8008b1c <interrupt_timer+0x4c>)
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d112      	bne.n	8008b0c <interrupt_timer+0x3c>
	g_timCount_sec=g_timCount_sec + INTERRUPT_TIME;
 8008ae6:	4b0e      	ldr	r3, [pc, #56]	; (8008b20 <interrupt_timer+0x50>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7f7 fd54 	bl	8000598 <__aeabi_f2d>
 8008af0:	a307      	add	r3, pc, #28	; (adr r3, 8008b10 <interrupt_timer+0x40>)
 8008af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af6:	f7f7 fbf1 	bl	80002dc <__adddf3>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	4610      	mov	r0, r2
 8008b00:	4619      	mov	r1, r3
 8008b02:	f7f8 f879 	bl	8000bf8 <__aeabi_d2f>
 8008b06:	4603      	mov	r3, r0
 8008b08:	4a05      	ldr	r2, [pc, #20]	; (8008b20 <interrupt_timer+0x50>)
 8008b0a:	6013      	str	r3, [r2, #0]
	}

}
 8008b0c:	bf00      	nop
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	d2f1a9fc 	.word	0xd2f1a9fc
 8008b14:	3f50624d 	.word	0x3f50624d
 8008b18:	20000734 	.word	0x20000734
 8008b1c:	2000073c 	.word	0x2000073c
 8008b20:	20000738 	.word	0x20000738

08008b24 <tic_timer>:

void tic_timer(void){
 8008b24:	b480      	push	{r7}
 8008b26:	af00      	add	r7, sp, #0
	count_mode=1;
 8008b28:	4b05      	ldr	r3, [pc, #20]	; (8008b40 <tic_timer+0x1c>)
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8008b2e:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <tic_timer+0x20>)
 8008b30:	f04f 0200 	mov.w	r2, #0
 8008b34:	601a      	str	r2, [r3, #0]
}
 8008b36:	bf00      	nop
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	2000073c 	.word	0x2000073c
 8008b44:	20000738 	.word	0x20000738

08008b48 <toc_timer>:

float toc_timer(void){
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
	float timer;
	timer=g_timCount_sec;
 8008b4e:	4b0a      	ldr	r3, [pc, #40]	; (8008b78 <toc_timer+0x30>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	607b      	str	r3, [r7, #4]
	count_mode=0;
 8008b54:	4b09      	ldr	r3, [pc, #36]	; (8008b7c <toc_timer+0x34>)
 8008b56:	2200      	movs	r2, #0
 8008b58:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8008b5a:	4b07      	ldr	r3, [pc, #28]	; (8008b78 <toc_timer+0x30>)
 8008b5c:	f04f 0200 	mov.w	r2, #0
 8008b60:	601a      	str	r2, [r3, #0]
	return timer;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	ee07 3a90 	vmov	s15, r3
}
 8008b68:	eeb0 0a67 	vmov.f32	s0, s15
 8008b6c:	370c      	adds	r7, #12
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	20000738 	.word	0x20000738
 8008b7c:	2000073c 	.word	0x2000073c

08008b80 <wait_ms>:

void wait_ms(uint32_t waitTime) {
 8008b80:	b5b0      	push	{r4, r5, r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8008b88:	4b1d      	ldr	r3, [pc, #116]	; (8008c00 <wait_ms+0x80>)
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 8008b8e:	4b1d      	ldr	r3, [pc, #116]	; (8008c04 <wait_ms+0x84>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2200      	movs	r2, #0
 8008b94:	625a      	str	r2, [r3, #36]	; 0x24
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8008b96:	bf00      	nop
 8008b98:	4b19      	ldr	r3, [pc, #100]	; (8008c00 <wait_ms+0x80>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	ee07 3a90 	vmov	s15, r3
 8008ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba4:	ee17 0a90 	vmov	r0, s15
 8008ba8:	f7f7 fcf6 	bl	8000598 <__aeabi_f2d>
 8008bac:	a312      	add	r3, pc, #72	; (adr r3, 8008bf8 <wait_ms+0x78>)
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	f7f7 fd49 	bl	8000648 <__aeabi_dmul>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	4610      	mov	r0, r2
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	a30e      	add	r3, pc, #56	; (adr r3, 8008bf8 <wait_ms+0x78>)
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	f7f7 fe6a 	bl	800089c <__aeabi_ddiv>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4614      	mov	r4, r2
 8008bce:	461d      	mov	r5, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7f7 fcbf 	bl	8000554 <__aeabi_ui2d>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	460b      	mov	r3, r1
 8008bda:	4620      	mov	r0, r4
 8008bdc:	4629      	mov	r1, r5
 8008bde:	f7f7 ffa5 	bl	8000b2c <__aeabi_dcmplt>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1d7      	bne.n	8008b98 <wait_ms+0x18>
        }

}
 8008be8:	bf00      	nop
 8008bea:	bf00      	nop
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	f3af 8000 	nop.w
 8008bf8:	d2f1a9fc 	.word	0xd2f1a9fc
 8008bfc:	3f50624d 	.word	0x3f50624d
 8008c00:	20000734 	.word	0x20000734
 8008c04:	2000f360 	.word	0x2000f360

08008c08 <wait_ms_NoReset>:

void wait_ms_NoReset(uint32_t waitTime) {
 8008c08:	b5b0      	push	{r4, r5, r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8008c10:	4b1b      	ldr	r3, [pc, #108]	; (8008c80 <wait_ms_NoReset+0x78>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	601a      	str	r2, [r3, #0]
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8008c16:	bf00      	nop
 8008c18:	4b19      	ldr	r3, [pc, #100]	; (8008c80 <wait_ms_NoReset+0x78>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	ee07 3a90 	vmov	s15, r3
 8008c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c24:	ee17 0a90 	vmov	r0, s15
 8008c28:	f7f7 fcb6 	bl	8000598 <__aeabi_f2d>
 8008c2c:	a312      	add	r3, pc, #72	; (adr r3, 8008c78 <wait_ms_NoReset+0x70>)
 8008c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c32:	f7f7 fd09 	bl	8000648 <__aeabi_dmul>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	a30e      	add	r3, pc, #56	; (adr r3, 8008c78 <wait_ms_NoReset+0x70>)
 8008c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c44:	f7f7 fe2a 	bl	800089c <__aeabi_ddiv>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	4614      	mov	r4, r2
 8008c4e:	461d      	mov	r5, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7f7 fc7f 	bl	8000554 <__aeabi_ui2d>
 8008c56:	4602      	mov	r2, r0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	f7f7 ff65 	bl	8000b2c <__aeabi_dcmplt>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1d7      	bne.n	8008c18 <wait_ms_NoReset+0x10>
        }

}
 8008c68:	bf00      	nop
 8008c6a:	bf00      	nop
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bdb0      	pop	{r4, r5, r7, pc}
 8008c72:	bf00      	nop
 8008c74:	f3af 8000 	nop.w
 8008c78:	d2f1a9fc 	.word	0xd2f1a9fc
 8008c7c:	3f50624d 	.word	0x3f50624d
 8008c80:	20000734 	.word	0x20000734

08008c84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b08c      	sub	sp, #48	; 0x30
 8008c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8008c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c8e:	2200      	movs	r2, #0
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	605a      	str	r2, [r3, #4]
 8008c94:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8008c96:	1d3b      	adds	r3, r7, #4
 8008c98:	2220      	movs	r2, #32
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f018 f809 	bl	8020cb4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8008ca2:	4b56      	ldr	r3, [pc, #344]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008ca4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008ca8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008caa:	4b54      	ldr	r3, [pc, #336]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008cac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008cb0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008cb2:	4b52      	ldr	r3, [pc, #328]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008cb8:	4b50      	ldr	r3, [pc, #320]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8008cbe:	4b4f      	ldr	r3, [pc, #316]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8008cc4:	4b4d      	ldr	r3, [pc, #308]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008cca:	4b4c      	ldr	r3, [pc, #304]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008ccc:	2208      	movs	r2, #8
 8008cce:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8008cd0:	4b4a      	ldr	r3, [pc, #296]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008cd6:	4b49      	ldr	r3, [pc, #292]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008cd8:	2201      	movs	r2, #1
 8008cda:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 8008cdc:	4b47      	ldr	r3, [pc, #284]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008cde:	2206      	movs	r2, #6
 8008ce0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008ce2:	4b46      	ldr	r3, [pc, #280]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008cea:	4b44      	ldr	r3, [pc, #272]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008cf0:	4b42      	ldr	r3, [pc, #264]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8008cf6:	4b41      	ldr	r3, [pc, #260]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008cfe:	4b3f      	ldr	r3, [pc, #252]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8008d04:	4b3d      	ldr	r3, [pc, #244]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008d0c:	483b      	ldr	r0, [pc, #236]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008d0e:	f010 ffa5 	bl	8019c5c <HAL_ADC_Init>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8008d18:	f001 fdd7 	bl	800a8ca <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8008d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d24:	4619      	mov	r1, r3
 8008d26:	4835      	ldr	r0, [pc, #212]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008d28:	f012 fdf2 	bl	801b910 <HAL_ADCEx_MultiModeConfigChannel>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8008d32:	f001 fdca 	bl	800a8ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8008d36:	4b32      	ldr	r3, [pc, #200]	; (8008e00 <MX_ADC1_Init+0x17c>)
 8008d38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008d3a:	2306      	movs	r3, #6
 8008d3c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008d42:	237f      	movs	r3, #127	; 0x7f
 8008d44:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8008d46:	2304      	movs	r3, #4
 8008d48:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008d4e:	1d3b      	adds	r3, r7, #4
 8008d50:	4619      	mov	r1, r3
 8008d52:	482a      	ldr	r0, [pc, #168]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008d54:	f011 feb8 	bl	801aac8 <HAL_ADC_ConfigChannel>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8008d5e:	f001 fdb4 	bl	800a8ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8008d62:	4b28      	ldr	r3, [pc, #160]	; (8008e04 <MX_ADC1_Init+0x180>)
 8008d64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8008d66:	230c      	movs	r3, #12
 8008d68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008d6a:	1d3b      	adds	r3, r7, #4
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	4823      	ldr	r0, [pc, #140]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008d70:	f011 feaa 	bl	801aac8 <HAL_ADC_ConfigChannel>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8008d7a:	f001 fda6 	bl	800a8ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8008d7e:	4b22      	ldr	r3, [pc, #136]	; (8008e08 <MX_ADC1_Init+0x184>)
 8008d80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8008d82:	2312      	movs	r3, #18
 8008d84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008d86:	1d3b      	adds	r3, r7, #4
 8008d88:	4619      	mov	r1, r3
 8008d8a:	481c      	ldr	r0, [pc, #112]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008d8c:	f011 fe9c 	bl	801aac8 <HAL_ADC_ConfigChannel>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8008d96:	f001 fd98 	bl	800a8ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8008d9a:	4b1c      	ldr	r3, [pc, #112]	; (8008e0c <MX_ADC1_Init+0x188>)
 8008d9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8008d9e:	2318      	movs	r3, #24
 8008da0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008da2:	1d3b      	adds	r3, r7, #4
 8008da4:	4619      	mov	r1, r3
 8008da6:	4815      	ldr	r0, [pc, #84]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008da8:	f011 fe8e 	bl	801aac8 <HAL_ADC_ConfigChannel>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8008db2:	f001 fd8a 	bl	800a8ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8008db6:	4b16      	ldr	r3, [pc, #88]	; (8008e10 <MX_ADC1_Init+0x18c>)
 8008db8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8008dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008dc0:	1d3b      	adds	r3, r7, #4
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	480d      	ldr	r0, [pc, #52]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008dc6:	f011 fe7f 	bl	801aac8 <HAL_ADC_ConfigChannel>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8008dd0:	f001 fd7b 	bl	800a8ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8008dd4:	4b0f      	ldr	r3, [pc, #60]	; (8008e14 <MX_ADC1_Init+0x190>)
 8008dd6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8008dd8:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008ddc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008dde:	1d3b      	adds	r3, r7, #4
 8008de0:	4619      	mov	r1, r3
 8008de2:	4806      	ldr	r0, [pc, #24]	; (8008dfc <MX_ADC1_Init+0x178>)
 8008de4:	f011 fe70 	bl	801aac8 <HAL_ADC_ConfigChannel>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8008dee:	f001 fd6c 	bl	800a8ca <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008df2:	bf00      	nop
 8008df4:	3730      	adds	r7, #48	; 0x30
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	20000740 	.word	0x20000740
 8008e00:	2e300800 	.word	0x2e300800
 8008e04:	3ef08000 	.word	0x3ef08000
 8008e08:	10c00010 	.word	0x10c00010
 8008e0c:	0c900008 	.word	0x0c900008
 8008e10:	08600004 	.word	0x08600004
 8008e14:	04300002 	.word	0x04300002

08008e18 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b09e      	sub	sp, #120	; 0x78
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008e24:	2200      	movs	r2, #0
 8008e26:	601a      	str	r2, [r3, #0]
 8008e28:	605a      	str	r2, [r3, #4]
 8008e2a:	609a      	str	r2, [r3, #8]
 8008e2c:	60da      	str	r2, [r3, #12]
 8008e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008e30:	f107 0314 	add.w	r3, r7, #20
 8008e34:	2250      	movs	r2, #80	; 0x50
 8008e36:	2100      	movs	r1, #0
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f017 ff3b 	bl	8020cb4 <memset>
  if(adcHandle->Instance==ADC1)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e46:	f040 8082 	bne.w	8008f4e <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8008e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8008e50:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008e54:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008e56:	f107 0314 	add.w	r3, r7, #20
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f014 fc02 	bl	801d664 <HAL_RCCEx_PeriphCLKConfig>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8008e66:	f001 fd30 	bl	800a8ca <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8008e6a:	4b3b      	ldr	r3, [pc, #236]	; (8008f58 <HAL_ADC_MspInit+0x140>)
 8008e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e6e:	4a3a      	ldr	r2, [pc, #232]	; (8008f58 <HAL_ADC_MspInit+0x140>)
 8008e70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e76:	4b38      	ldr	r3, [pc, #224]	; (8008f58 <HAL_ADC_MspInit+0x140>)
 8008e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e7e:	613b      	str	r3, [r7, #16]
 8008e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e82:	4b35      	ldr	r3, [pc, #212]	; (8008f58 <HAL_ADC_MspInit+0x140>)
 8008e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e86:	4a34      	ldr	r2, [pc, #208]	; (8008f58 <HAL_ADC_MspInit+0x140>)
 8008e88:	f043 0301 	orr.w	r3, r3, #1
 8008e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e8e:	4b32      	ldr	r3, [pc, #200]	; (8008f58 <HAL_ADC_MspInit+0x140>)
 8008e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e92:	f003 0301 	and.w	r3, r3, #1
 8008e96:	60fb      	str	r3, [r7, #12]
 8008e98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e9a:	4b2f      	ldr	r3, [pc, #188]	; (8008f58 <HAL_ADC_MspInit+0x140>)
 8008e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e9e:	4a2e      	ldr	r2, [pc, #184]	; (8008f58 <HAL_ADC_MspInit+0x140>)
 8008ea0:	f043 0302 	orr.w	r3, r3, #2
 8008ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ea6:	4b2c      	ldr	r3, [pc, #176]	; (8008f58 <HAL_ADC_MspInit+0x140>)
 8008ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eaa:	f003 0302 	and.w	r3, r3, #2
 8008eae:	60bb      	str	r3, [r7, #8]
 8008eb0:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 8008eb2:	230f      	movs	r3, #15
 8008eb4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ebe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008ec8:	f013 fc4e 	bl	801c768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 8008ecc:	f241 0301 	movw	r3, #4097	; 0x1001
 8008ed0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008eda:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008ede:	4619      	mov	r1, r3
 8008ee0:	481e      	ldr	r0, [pc, #120]	; (8008f5c <HAL_ADC_MspInit+0x144>)
 8008ee2:	f013 fc41 	bl	801c768 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8008ee6:	4b1e      	ldr	r3, [pc, #120]	; (8008f60 <HAL_ADC_MspInit+0x148>)
 8008ee8:	4a1e      	ldr	r2, [pc, #120]	; (8008f64 <HAL_ADC_MspInit+0x14c>)
 8008eea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8008eec:	4b1c      	ldr	r3, [pc, #112]	; (8008f60 <HAL_ADC_MspInit+0x148>)
 8008eee:	2205      	movs	r2, #5
 8008ef0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008ef2:	4b1b      	ldr	r3, [pc, #108]	; (8008f60 <HAL_ADC_MspInit+0x148>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008ef8:	4b19      	ldr	r3, [pc, #100]	; (8008f60 <HAL_ADC_MspInit+0x148>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008efe:	4b18      	ldr	r3, [pc, #96]	; (8008f60 <HAL_ADC_MspInit+0x148>)
 8008f00:	2280      	movs	r2, #128	; 0x80
 8008f02:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008f04:	4b16      	ldr	r3, [pc, #88]	; (8008f60 <HAL_ADC_MspInit+0x148>)
 8008f06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f0a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008f0c:	4b14      	ldr	r3, [pc, #80]	; (8008f60 <HAL_ADC_MspInit+0x148>)
 8008f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f12:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008f14:	4b12      	ldr	r3, [pc, #72]	; (8008f60 <HAL_ADC_MspInit+0x148>)
 8008f16:	2220      	movs	r2, #32
 8008f18:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8008f1a:	4b11      	ldr	r3, [pc, #68]	; (8008f60 <HAL_ADC_MspInit+0x148>)
 8008f1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008f20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008f22:	480f      	ldr	r0, [pc, #60]	; (8008f60 <HAL_ADC_MspInit+0x148>)
 8008f24:	f012 feec 	bl	801bd00 <HAL_DMA_Init>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 8008f2e:	f001 fccc 	bl	800a8ca <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a0a      	ldr	r2, [pc, #40]	; (8008f60 <HAL_ADC_MspInit+0x148>)
 8008f36:	655a      	str	r2, [r3, #84]	; 0x54
 8008f38:	4a09      	ldr	r2, [pc, #36]	; (8008f60 <HAL_ADC_MspInit+0x148>)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8008f3e:	2200      	movs	r2, #0
 8008f40:	2100      	movs	r1, #0
 8008f42:	2012      	movs	r0, #18
 8008f44:	f012 fea7 	bl	801bc96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8008f48:	2012      	movs	r0, #18
 8008f4a:	f012 febe 	bl	801bcca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008f4e:	bf00      	nop
 8008f50:	3778      	adds	r7, #120	; 0x78
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	40021000 	.word	0x40021000
 8008f5c:	48000400 	.word	0x48000400
 8008f60:	200007ac 	.word	0x200007ac
 8008f64:	40020008 	.word	0x40020008

08008f68 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8008f70:	f7ff fc72 	bl	8008858 <pl_callback_getSensor>
}
 8008f74:	bf00      	nop
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <cal_table>:

volatile char g_acc_flag;
volatile char g_MotorEnd_flag;


void cal_table(TRAPEZOID input,TARGET *target){
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	f107 0420 	add.w	r4, r7, #32
 8008f8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 8008f8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008f92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f9a:	f2c0 819d 	blt.w	80092d8 <cal_table+0x35c>
	switch (g_acc_flag) {
 8008f9e:	4bcd      	ldr	r3, [pc, #820]	; (80092d4 <cal_table+0x358>)
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	2b06      	cmp	r3, #6
 8008fa6:	f200 833a 	bhi.w	800961e <cal_table+0x6a2>
 8008faa:	a201      	add	r2, pc, #4	; (adr r2, 8008fb0 <cal_table+0x34>)
 8008fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb0:	08009611 	.word	0x08009611
 8008fb4:	08008fcd 	.word	0x08008fcd
 8008fb8:	0800913f 	.word	0x0800913f
 8008fbc:	0800925d 	.word	0x0800925d
 8008fc0:	08009611 	.word	0x08009611
 8008fc4:	08009289 	.word	0x08009289
 8008fc8:	080092af 	.word	0x080092af
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 8008fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fce:	ed93 7a00 	vldr	s14, [r3]
 8008fd2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008fd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fde:	db0a      	blt.n	8008ff6 <cal_table+0x7a>
				target->velocity = input.count_velocity;
 8008fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe4:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8008fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe8:	f04f 0200 	mov.w	r2, #0
 8008fec:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 8008fee:	4bb9      	ldr	r3, [pc, #740]	; (80092d4 <cal_table+0x358>)
 8008ff0:	2202      	movs	r2, #2
 8008ff2:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 8008ff4:	e313      	b.n	800961e <cal_table+0x6a2>
			else if((input.displacement <= (2*target->velocity*target->velocity
 8008ff6:	ed97 7a08 	vldr	s14, [r7, #32]
 8008ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffc:	edd3 7a00 	vldr	s15, [r3]
 8009000:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8009004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009006:	edd3 7a00 	vldr	s15, [r3]
 800900a:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 800900e:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8009012:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009016:	ee66 7a27 	vmul.f32	s15, s12, s15
 800901a:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 800901e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009022:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009026:	ee66 7a27 	vmul.f32	s15, s12, s15
 800902a:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 800902e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009032:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8009036:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800903a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 800903e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009046:	d900      	bls.n	800904a <cal_table+0xce>
		break;
 8009048:	e2e9      	b.n	800961e <cal_table+0x6a2>
				time_over=((2*target->velocity*target->velocity
 800904a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904c:	edd3 7a00 	vldr	s15, [r3]
 8009050:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009056:	edd3 7a00 	vldr	s15, [r3]
 800905a:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 800905e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009062:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009066:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800906a:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 800906e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009072:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009076:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800907a:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 800907e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009082:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009086:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800908a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800908e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009092:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009098:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 800909c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090a0:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 80090a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7f7 fa75 	bl	8000598 <__aeabi_f2d>
 80090ae:	4604      	mov	r4, r0
 80090b0:	460d      	mov	r5, r1
 80090b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7f7 fa6f 	bl	8000598 <__aeabi_f2d>
 80090ba:	f04f 0200 	mov.w	r2, #0
 80090be:	f04f 0300 	mov.w	r3, #0
 80090c2:	f7f7 fac1 	bl	8000648 <__aeabi_dmul>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4690      	mov	r8, r2
 80090cc:	4699      	mov	r9, r3
 80090ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80090d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80090d6:	ee17 0a90 	vmov	r0, s15
 80090da:	f7f7 fa5d 	bl	8000598 <__aeabi_f2d>
 80090de:	4602      	mov	r2, r0
 80090e0:	460b      	mov	r3, r1
 80090e2:	4640      	mov	r0, r8
 80090e4:	4649      	mov	r1, r9
 80090e6:	f7f7 faaf 	bl	8000648 <__aeabi_dmul>
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	4620      	mov	r0, r4
 80090f0:	4629      	mov	r1, r5
 80090f2:	f7f7 f8f1 	bl	80002d8 <__aeabi_dsub>
 80090f6:	4602      	mov	r2, r0
 80090f8:	460b      	mov	r3, r1
 80090fa:	4610      	mov	r0, r2
 80090fc:	4619      	mov	r1, r3
 80090fe:	f7f7 fd7b 	bl	8000bf8 <__aeabi_d2f>
 8009102:	4602      	mov	r2, r0
 8009104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009106:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 8009108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910a:	ed93 7a00 	vldr	s14, [r3]
 800910e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009112:	edd7 7a01 	vldr	s15, [r7, #4]
 8009116:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800911a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800911e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009124:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 8009128:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800912c:	eef1 7a67 	vneg.f32	s15, s15
 8009130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009132:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 8009136:	4b67      	ldr	r3, [pc, #412]	; (80092d4 <cal_table+0x358>)
 8009138:	2203      	movs	r2, #3
 800913a:	701a      	strb	r2, [r3, #0]
		break;
 800913c:	e26f      	b.n	800961e <cal_table+0x6a2>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 800913e:	ed97 7a08 	vldr	s14, [r7, #32]
 8009142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009144:	edd3 7a02 	vldr	s15, [r3, #8]
 8009148:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 800914c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009150:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009154:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8009158:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800915c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009160:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009164:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009168:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800916c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8009170:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009174:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 8009178:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800917c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009180:	d900      	bls.n	8009184 <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 8009182:	e24c      	b.n	800961e <cal_table+0x6a2>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8009184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009186:	ed93 7a02 	vldr	s14, [r3, #8]
 800918a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800918e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009192:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 8009196:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800919a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800919e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80091a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80091a6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80091aa:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 80091ae:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80091b2:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80091b6:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 80091ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80091be:	ee77 6a67 	vsub.f32	s13, s14, s15
 80091c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c4:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80091c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091cc:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 80091d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7f7 f9df 	bl	8000598 <__aeabi_f2d>
 80091da:	4604      	mov	r4, r0
 80091dc:	460d      	mov	r5, r1
 80091de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7f7 f9d9 	bl	8000598 <__aeabi_f2d>
 80091e6:	f04f 0200 	mov.w	r2, #0
 80091ea:	f04f 0300 	mov.w	r3, #0
 80091ee:	f7f7 fa2b 	bl	8000648 <__aeabi_dmul>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4690      	mov	r8, r2
 80091f8:	4699      	mov	r9, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7f7 f9cc 	bl	8000598 <__aeabi_f2d>
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	4640      	mov	r0, r8
 8009206:	4649      	mov	r1, r9
 8009208:	f7f7 fa1e 	bl	8000648 <__aeabi_dmul>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	4620      	mov	r0, r4
 8009212:	4629      	mov	r1, r5
 8009214:	f7f7 f860 	bl	80002d8 <__aeabi_dsub>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	4610      	mov	r0, r2
 800921e:	4619      	mov	r1, r3
 8009220:	f7f7 fcea 	bl	8000bf8 <__aeabi_d2f>
 8009224:	4602      	mov	r2, r0
 8009226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009228:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 800922a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922c:	ed93 7a00 	vldr	s14, [r3]
 8009230:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009234:	edd7 7a01 	vldr	s15, [r7, #4]
 8009238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800923c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009242:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 8009246:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800924a:	eef1 7a67 	vneg.f32	s15, s15
 800924e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009250:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 8009254:	4b1f      	ldr	r3, [pc, #124]	; (80092d4 <cal_table+0x358>)
 8009256:	2203      	movs	r2, #3
 8009258:	701a      	strb	r2, [r3, #0]
		break;
 800925a:	e1e0      	b.n	800961e <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 800925c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925e:	ed93 7a00 	vldr	s14, [r3]
 8009262:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009266:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800926a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800926e:	d900      	bls.n	8009272 <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009270:	e1d5      	b.n	800961e <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 8009272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009276:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8009278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927a:	f04f 0200 	mov.w	r2, #0
 800927e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009280:	4b14      	ldr	r3, [pc, #80]	; (80092d4 <cal_table+0x358>)
 8009282:	2204      	movs	r2, #4
 8009284:	701a      	strb	r2, [r3, #0]
		break;
 8009286:	e1ca      	b.n	800961e <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 8009288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928a:	ed93 7a02 	vldr	s14, [r3, #8]
 800928e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800929a:	da00      	bge.n	800929e <cal_table+0x322>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800929c:	e1bf      	b.n	800961e <cal_table+0x6a2>
			target->acceleration = 0;
 800929e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a0:	f04f 0200 	mov.w	r2, #0
 80092a4:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80092a6:	4b0b      	ldr	r3, [pc, #44]	; (80092d4 <cal_table+0x358>)
 80092a8:	2204      	movs	r2, #4
 80092aa:	701a      	strb	r2, [r3, #0]
		break;
 80092ac:	e1b7      	b.n	800961e <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 80092ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b0:	ed93 7a02 	vldr	s14, [r3, #8]
 80092b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80092b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80092bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c0:	da00      	bge.n	80092c4 <cal_table+0x348>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80092c2:	e1ac      	b.n	800961e <cal_table+0x6a2>
			target->acceleration = 0;
 80092c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c6:	f04f 0200 	mov.w	r2, #0
 80092ca:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80092cc:	4b01      	ldr	r3, [pc, #4]	; (80092d4 <cal_table+0x358>)
 80092ce:	2204      	movs	r2, #4
 80092d0:	701a      	strb	r2, [r3, #0]
		break;
 80092d2:	e1a4      	b.n	800961e <cal_table+0x6a2>
 80092d4:	20000810 	.word	0x20000810
	}
}else{
	switch (g_acc_flag) {
 80092d8:	4bce      	ldr	r3, [pc, #824]	; (8009614 <cal_table+0x698>)
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b06      	cmp	r3, #6
 80092e0:	f200 819d 	bhi.w	800961e <cal_table+0x6a2>
 80092e4:	a201      	add	r2, pc, #4	; (adr r2, 80092ec <cal_table+0x370>)
 80092e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ea:	bf00      	nop
 80092ec:	0800961d 	.word	0x0800961d
 80092f0:	08009309 	.word	0x08009309
 80092f4:	0800947b 	.word	0x0800947b
 80092f8:	08009591 	.word	0x08009591
 80092fc:	080095bd 	.word	0x080095bd
 8009300:	080095c5 	.word	0x080095c5
 8009304:	080095eb 	.word	0x080095eb
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 8009308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930a:	ed93 7a00 	vldr	s14, [r3]
 800930e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009312:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800931a:	d80a      	bhi.n	8009332 <cal_table+0x3b6>
				target->velocity = input.count_velocity;
 800931c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800931e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009320:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8009322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009324:	f04f 0200 	mov.w	r2, #0
 8009328:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 800932a:	4bba      	ldr	r3, [pc, #744]	; (8009614 <cal_table+0x698>)
 800932c:	2202      	movs	r2, #2
 800932e:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 8009330:	e175      	b.n	800961e <cal_table+0x6a2>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8009332:	edd7 7a08 	vldr	s15, [r7, #32]
 8009336:	eeb1 7a67 	vneg.f32	s14, s15
 800933a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933c:	edd3 7a00 	vldr	s15, [r3]
 8009340:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8009344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009346:	edd3 7a00 	vldr	s15, [r3]
 800934a:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 800934e:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8009352:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009356:	ee66 7a27 	vmul.f32	s15, s12, s15
 800935a:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 800935e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009362:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009366:	ee66 7a27 	vmul.f32	s15, s12, s15
 800936a:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 800936e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009372:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8009376:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800937a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 800937e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009386:	d900      	bls.n	800938a <cal_table+0x40e>
		break;
 8009388:	e149      	b.n	800961e <cal_table+0x6a2>
				time_over=(-(2*target->velocity*target->velocity
 800938a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938c:	edd3 7a00 	vldr	s15, [r3]
 8009390:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009396:	edd3 7a00 	vldr	s15, [r3]
 800939a:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 800939e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80093a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80093a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80093aa:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 80093ae:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80093b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80093b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80093ba:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 80093be:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 80093c2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80093c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80093ca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80093ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80093d6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80093da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093dc:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 80093e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093e4:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 80093e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7f7 f8d3 	bl	8000598 <__aeabi_f2d>
 80093f2:	4604      	mov	r4, r0
 80093f4:	460d      	mov	r5, r1
 80093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7f7 f8cd 	bl	8000598 <__aeabi_f2d>
 80093fe:	f04f 0200 	mov.w	r2, #0
 8009402:	f04f 0300 	mov.w	r3, #0
 8009406:	f7f7 f91f 	bl	8000648 <__aeabi_dmul>
 800940a:	4602      	mov	r2, r0
 800940c:	460b      	mov	r3, r1
 800940e:	4690      	mov	r8, r2
 8009410:	4699      	mov	r9, r3
 8009412:	edd7 7a01 	vldr	s15, [r7, #4]
 8009416:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800941a:	ee17 0a90 	vmov	r0, s15
 800941e:	f7f7 f8bb 	bl	8000598 <__aeabi_f2d>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	4640      	mov	r0, r8
 8009428:	4649      	mov	r1, r9
 800942a:	f7f7 f90d 	bl	8000648 <__aeabi_dmul>
 800942e:	4602      	mov	r2, r0
 8009430:	460b      	mov	r3, r1
 8009432:	4620      	mov	r0, r4
 8009434:	4629      	mov	r1, r5
 8009436:	f7f6 ff51 	bl	80002dc <__adddf3>
 800943a:	4602      	mov	r2, r0
 800943c:	460b      	mov	r3, r1
 800943e:	4610      	mov	r0, r2
 8009440:	4619      	mov	r1, r3
 8009442:	f7f7 fbd9 	bl	8000bf8 <__aeabi_d2f>
 8009446:	4602      	mov	r2, r0
 8009448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944a:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 800944c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944e:	ed93 7a00 	vldr	s14, [r3]
 8009452:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009456:	edd7 7a01 	vldr	s15, [r7, #4]
 800945a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800945e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009468:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 800946c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800946e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009470:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 8009472:	4b68      	ldr	r3, [pc, #416]	; (8009614 <cal_table+0x698>)
 8009474:	2203      	movs	r2, #3
 8009476:	701a      	strb	r2, [r3, #0]
		break;
 8009478:	e0d1      	b.n	800961e <cal_table+0x6a2>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 800947a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947c:	ed93 7a02 	vldr	s14, [r3, #8]
 8009480:	edd7 7a08 	vldr	s15, [r7, #32]
 8009484:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8009488:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800948c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009490:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8009494:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009498:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800949c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80094a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80094a4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80094a8:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80094ac:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80094b0:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 80094b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80094b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094bc:	d900      	bls.n	80094c0 <cal_table+0x544>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 80094be:	e0ae      	b.n	800961e <cal_table+0x6a2>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 80094c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80094c6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80094ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80094ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 80094d2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80094d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80094da:	ee66 7a27 	vmul.f32	s15, s12, s15
 80094de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80094e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80094e6:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 80094ea:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80094ee:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 80094f2:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 80094f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80094fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80094fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009500:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8009504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009508:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 800950c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	4618      	mov	r0, r3
 8009512:	f7f7 f841 	bl	8000598 <__aeabi_f2d>
 8009516:	4604      	mov	r4, r0
 8009518:	460d      	mov	r5, r1
 800951a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951c:	4618      	mov	r0, r3
 800951e:	f7f7 f83b 	bl	8000598 <__aeabi_f2d>
 8009522:	f04f 0200 	mov.w	r2, #0
 8009526:	f04f 0300 	mov.w	r3, #0
 800952a:	f7f7 f88d 	bl	8000648 <__aeabi_dmul>
 800952e:	4602      	mov	r2, r0
 8009530:	460b      	mov	r3, r1
 8009532:	4690      	mov	r8, r2
 8009534:	4699      	mov	r9, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7f7 f82e 	bl	8000598 <__aeabi_f2d>
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	4640      	mov	r0, r8
 8009542:	4649      	mov	r1, r9
 8009544:	f7f7 f880 	bl	8000648 <__aeabi_dmul>
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	4620      	mov	r0, r4
 800954e:	4629      	mov	r1, r5
 8009550:	f7f6 fec4 	bl	80002dc <__adddf3>
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	4610      	mov	r0, r2
 800955a:	4619      	mov	r1, r3
 800955c:	f7f7 fb4c 	bl	8000bf8 <__aeabi_d2f>
 8009560:	4602      	mov	r2, r0
 8009562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009564:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 8009566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009568:	ed93 7a00 	vldr	s14, [r3]
 800956c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009570:	edd7 7a01 	vldr	s15, [r7, #4]
 8009574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800957c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957e:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 8009582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009586:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8009588:	4b22      	ldr	r3, [pc, #136]	; (8009614 <cal_table+0x698>)
 800958a:	2203      	movs	r2, #3
 800958c:	701a      	strb	r2, [r3, #0]
		break;
 800958e:	e046      	b.n	800961e <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8009590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009592:	ed93 7a00 	vldr	s14, [r3]
 8009596:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800959a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800959e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a2:	da00      	bge.n	80095a6 <cal_table+0x62a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80095a4:	e03b      	b.n	800961e <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 80095a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095aa:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 80095ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ae:	f04f 0200 	mov.w	r2, #0
 80095b2:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80095b4:	4b17      	ldr	r3, [pc, #92]	; (8009614 <cal_table+0x698>)
 80095b6:	2204      	movs	r2, #4
 80095b8:	701a      	strb	r2, [r3, #0]
		break;
 80095ba:	e030      	b.n	800961e <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 80095bc:	4b16      	ldr	r3, [pc, #88]	; (8009618 <cal_table+0x69c>)
 80095be:	2201      	movs	r2, #1
 80095c0:	701a      	strb	r2, [r3, #0]
		break;
 80095c2:	e02c      	b.n	800961e <cal_table+0x6a2>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 80095c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c6:	ed93 7a02 	vldr	s14, [r3, #8]
 80095ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80095ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d6:	d900      	bls.n	80095da <cal_table+0x65e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80095d8:	e021      	b.n	800961e <cal_table+0x6a2>
			target->acceleration = 0;
 80095da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095dc:	f04f 0200 	mov.w	r2, #0
 80095e0:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80095e2:	4b0c      	ldr	r3, [pc, #48]	; (8009614 <cal_table+0x698>)
 80095e4:	2204      	movs	r2, #4
 80095e6:	701a      	strb	r2, [r3, #0]
		break;
 80095e8:	e019      	b.n	800961e <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 80095ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80095f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80095f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095fc:	d900      	bls.n	8009600 <cal_table+0x684>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80095fe:	e00e      	b.n	800961e <cal_table+0x6a2>
			target->acceleration = 0;
 8009600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009602:	f04f 0200 	mov.w	r2, #0
 8009606:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009608:	4b02      	ldr	r3, [pc, #8]	; (8009614 <cal_table+0x698>)
 800960a:	2204      	movs	r2, #4
 800960c:	701a      	strb	r2, [r3, #0]
		break;
 800960e:	e006      	b.n	800961e <cal_table+0x6a2>
		break;
 8009610:	bf00      	nop
 8009612:	e004      	b.n	800961e <cal_table+0x6a2>
 8009614:	20000810 	.word	0x20000810
 8009618:	20000811 	.word	0x20000811
		break;
 800961c:	bf00      	nop
	}

}

}
 800961e:	bf00      	nop
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8009628:	b004      	add	sp, #16
 800962a:	4770      	bx	lr

0800962c <cal_table_dis>:



// 減速をより速くした機能を追加
void cal_table_dis(TRAPEZOID input,TARGET *target){
 800962c:	b084      	sub	sp, #16
 800962e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800963a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
float acc_distance;//初速度から現在の速度に達するまでに使った距離
float dec_distance;//現在の速度から終端速度になるのに必要なた距離
float velocity=(fusion_speedL+fusion_speedR)/2;
 800963e:	4bb3      	ldr	r3, [pc, #716]	; (800990c <cal_table_dis+0x2e0>)
 8009640:	ed93 7a00 	vldr	s14, [r3]
 8009644:	4bb2      	ldr	r3, [pc, #712]	; (8009910 <cal_table_dis+0x2e4>)
 8009646:	edd3 7a00 	vldr	s15, [r3]
 800964a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800964e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009652:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009656:	edc7 7a05 	vstr	s15, [r7, #20]
float distance=(fusion_distanceL+fusion_distanceL)/2;
 800965a:	4bae      	ldr	r3, [pc, #696]	; (8009914 <cal_table_dis+0x2e8>)
 800965c:	edd3 7a00 	vldr	s15, [r3]
 8009660:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009664:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009668:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800966c:	edc7 7a04 	vstr	s15, [r7, #16]
if (input.displacement>=0){
 8009670:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009674:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800967c:	f2c0 812f 	blt.w	80098de <cal_table_dis+0x2b2>
	switch (g_acc_flag) {
 8009680:	4ba5      	ldr	r3, [pc, #660]	; (8009918 <cal_table_dis+0x2ec>)
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	b2db      	uxtb	r3, r3
 8009686:	2b06      	cmp	r3, #6
 8009688:	f200 82d7 	bhi.w	8009c3a <cal_table_dis+0x60e>
 800968c:	a201      	add	r2, pc, #4	; (adr r2, 8009694 <cal_table_dis+0x68>)
 800968e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009692:	bf00      	nop
 8009694:	08009c31 	.word	0x08009c31
 8009698:	080096b1 	.word	0x080096b1
 800969c:	08009739 	.word	0x08009739
 80096a0:	08009867 	.word	0x08009867
 80096a4:	08009c31 	.word	0x08009c31
 80096a8:	08009893 	.word	0x08009893
 80096ac:	080098b9 	.word	0x080098b9
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			acc_distance = distance;
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	60fb      	str	r3, [r7, #12]
			dec_distance = (velocity*velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 80096b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80096b8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80096bc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80096c0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80096c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096cc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80096d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80096d4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80096d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096dc:	edc7 7a02 	vstr	s15, [r7, #8]
			target->displacement = distance;
 80096e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096e2:	693a      	ldr	r2, [r7, #16]
 80096e4:	609a      	str	r2, [r3, #8]
			target->velocity = velocity;
 80096e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096e8:	697a      	ldr	r2, [r7, #20]
 80096ea:	601a      	str	r2, [r3, #0]
			target->acceleration = 10000000;
 80096ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096ee:	4a8b      	ldr	r2, [pc, #556]	; (800991c <cal_table_dis+0x2f0>)
 80096f0:	605a      	str	r2, [r3, #4]
			if (velocity >= input.count_velocity){
 80096f2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80096f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80096fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80096fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009702:	f280 8297 	bge.w	8009c34 <cal_table_dis+0x608>
//				velocity = input.count_velocity;
//				target->acceleration = 0;
//				g_acc_flag=2;
			}
			else if(input.displacement <= (acc_distance + dec_distance)){
 8009706:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800970a:	edd7 6a03 	vldr	s13, [r7, #12]
 800970e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800971a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800971e:	d900      	bls.n	8009722 <cal_table_dis+0xf6>
//				velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.deceleration;
				g_acc_flag=3;
			}
		break;
 8009720:	e288      	b.n	8009c34 <cal_table_dis+0x608>
				target->acceleration = -input.deceleration;
 8009722:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009726:	eef1 7a67 	vneg.f32	s15, s15
 800972a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800972c:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 8009730:	4b79      	ldr	r3, [pc, #484]	; (8009918 <cal_table_dis+0x2ec>)
 8009732:	2203      	movs	r2, #3
 8009734:	701a      	strb	r2, [r3, #0]
		break;
 8009736:	e27d      	b.n	8009c34 <cal_table_dis+0x608>
	case 2:
		//定常
		acc_distance = (input.count_velocity*input.count_velocity-input.start_velocity*input.start_velocity)/2/input.acceleration;
 8009738:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800973c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009744:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009748:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800974c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009754:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009758:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800975c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009764:	edc7 7a03 	vstr	s15, [r7, #12]
		dec_distance = (input.count_velocity*input.count_velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 8009768:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800976c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009774:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8009778:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800977c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009784:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009788:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800978c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009794:	edc7 7a02 	vstr	s15, [r7, #8]
		if (input.displacement-target->displacement <= dec_distance) {
 8009798:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800979c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800979e:	edd3 7a02 	vldr	s15, [r3, #8]
 80097a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80097aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80097ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097b2:	da00      	bge.n	80097b6 <cal_table_dis+0x18a>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.deceleration;
			g_acc_flag=3;
		}
		break;
 80097b4:	e241      	b.n	8009c3a <cal_table_dis+0x60e>
			time_over=(target->displacement+dec_distance-input.displacement)/target->velocity;
 80097b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80097bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80097c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80097c4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80097c8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80097cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097ce:	ed93 7a00 	vldr	s14, [r3]
 80097d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097d6:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 80097da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	4618      	mov	r0, r3
 80097e0:	f7f6 feda 	bl	8000598 <__aeabi_f2d>
 80097e4:	4604      	mov	r4, r0
 80097e6:	460d      	mov	r5, r1
 80097e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7f6 fed4 	bl	8000598 <__aeabi_f2d>
 80097f0:	f04f 0200 	mov.w	r2, #0
 80097f4:	f04f 0300 	mov.w	r3, #0
 80097f8:	f7f6 ff26 	bl	8000648 <__aeabi_dmul>
 80097fc:	4602      	mov	r2, r0
 80097fe:	460b      	mov	r3, r1
 8009800:	4690      	mov	r8, r2
 8009802:	4699      	mov	r9, r3
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7f6 fec7 	bl	8000598 <__aeabi_f2d>
 800980a:	4602      	mov	r2, r0
 800980c:	460b      	mov	r3, r1
 800980e:	4640      	mov	r0, r8
 8009810:	4649      	mov	r1, r9
 8009812:	f7f6 ff19 	bl	8000648 <__aeabi_dmul>
 8009816:	4602      	mov	r2, r0
 8009818:	460b      	mov	r3, r1
 800981a:	4620      	mov	r0, r4
 800981c:	4629      	mov	r1, r5
 800981e:	f7f6 fd5b 	bl	80002d8 <__aeabi_dsub>
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	4610      	mov	r0, r2
 8009828:	4619      	mov	r1, r3
 800982a:	f7f7 f9e5 	bl	8000bf8 <__aeabi_d2f>
 800982e:	4602      	mov	r2, r0
 8009830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009832:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 8009834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009836:	ed93 7a00 	vldr	s14, [r3]
 800983a:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800983e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009842:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800984a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800984c:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.deceleration;
 8009850:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009854:	eef1 7a67 	vneg.f32	s15, s15
 8009858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800985a:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 800985e:	4b2e      	ldr	r3, [pc, #184]	; (8009918 <cal_table_dis+0x2ec>)
 8009860:	2203      	movs	r2, #3
 8009862:	701a      	strb	r2, [r3, #0]
		break;
 8009864:	e1e9      	b.n	8009c3a <cal_table_dis+0x60e>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 8009866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009868:	ed93 7a00 	vldr	s14, [r3]
 800986c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009870:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009878:	d900      	bls.n	800987c <cal_table_dis+0x250>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800987a:	e1de      	b.n	8009c3a <cal_table_dis+0x60e>
			target->velocity = input.end_velocity;
 800987c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800987e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009880:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8009882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009884:	f04f 0200 	mov.w	r2, #0
 8009888:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800988a:	4b23      	ldr	r3, [pc, #140]	; (8009918 <cal_table_dis+0x2ec>)
 800988c:	2204      	movs	r2, #4
 800988e:	701a      	strb	r2, [r3, #0]
		break;
 8009890:	e1d3      	b.n	8009c3a <cal_table_dis+0x60e>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 8009892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009894:	ed93 7a02 	vldr	s14, [r3, #8]
 8009898:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800989c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098a4:	da00      	bge.n	80098a8 <cal_table_dis+0x27c>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80098a6:	e1c8      	b.n	8009c3a <cal_table_dis+0x60e>
			target->acceleration = 0;
 80098a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098aa:	f04f 0200 	mov.w	r2, #0
 80098ae:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80098b0:	4b19      	ldr	r3, [pc, #100]	; (8009918 <cal_table_dis+0x2ec>)
 80098b2:	2204      	movs	r2, #4
 80098b4:	701a      	strb	r2, [r3, #0]
		break;
 80098b6:	e1c0      	b.n	8009c3a <cal_table_dis+0x60e>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 80098b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80098be:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80098c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ca:	da00      	bge.n	80098ce <cal_table_dis+0x2a2>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80098cc:	e1b5      	b.n	8009c3a <cal_table_dis+0x60e>
			target->acceleration = 0;
 80098ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098d0:	f04f 0200 	mov.w	r2, #0
 80098d4:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80098d6:	4b10      	ldr	r3, [pc, #64]	; (8009918 <cal_table_dis+0x2ec>)
 80098d8:	2204      	movs	r2, #4
 80098da:	701a      	strb	r2, [r3, #0]
		break;
 80098dc:	e1ad      	b.n	8009c3a <cal_table_dis+0x60e>
	}
}else{
	switch (g_acc_flag) {
 80098de:	4b0e      	ldr	r3, [pc, #56]	; (8009918 <cal_table_dis+0x2ec>)
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	2b06      	cmp	r3, #6
 80098e6:	f200 81a8 	bhi.w	8009c3a <cal_table_dis+0x60e>
 80098ea:	a201      	add	r2, pc, #4	; (adr r2, 80098f0 <cal_table_dis+0x2c4>)
 80098ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f0:	08009c39 	.word	0x08009c39
 80098f4:	08009921 	.word	0x08009921
 80098f8:	08009a8b 	.word	0x08009a8b
 80098fc:	08009bb1 	.word	0x08009bb1
 8009900:	08009bdd 	.word	0x08009bdd
 8009904:	08009be5 	.word	0x08009be5
 8009908:	08009c0b 	.word	0x08009c0b
 800990c:	20000258 	.word	0x20000258
 8009910:	2000025c 	.word	0x2000025c
 8009914:	20000250 	.word	0x20000250
 8009918:	20000810 	.word	0x20000810
 800991c:	4b189680 	.word	0x4b189680
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
		acc_distance = (target->velocity*target->velocity-input.start_velocity*input.start_velocity)/2/input.acceleration;
 8009920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009922:	ed93 7a00 	vldr	s14, [r3]
 8009926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009928:	edd3 7a00 	vldr	s15, [r3]
 800992c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009930:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009934:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800993c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009940:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009944:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009948:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800994c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009950:	edc7 7a03 	vstr	s15, [r7, #12]
		dec_distance = (target->velocity*target->velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 8009954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009956:	ed93 7a00 	vldr	s14, [r3]
 800995a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800995c:	edd3 7a00 	vldr	s15, [r3]
 8009960:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009964:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8009968:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800996c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009974:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009978:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800997c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009984:	edc7 7a02 	vstr	s15, [r7, #8]
			if (target->velocity <= input.count_velocity){
 8009988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800998a:	ed93 7a00 	vldr	s14, [r3]
 800998e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800999a:	d80a      	bhi.n	80099b2 <cal_table_dis+0x386>
				target->velocity = input.count_velocity;
 800999c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800999e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099a0:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 80099a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099a4:	f04f 0200 	mov.w	r2, #0
 80099a8:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 80099aa:	4ba7      	ldr	r3, [pc, #668]	; (8009c48 <cal_table_dis+0x61c>)
 80099ac:	2202      	movs	r2, #2
 80099ae:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.deceleration;
				g_acc_flag=3;
			}
		break;
 80099b0:	e143      	b.n	8009c3a <cal_table_dis+0x60e>
			else if(-input.displacement <= (acc_distance + dec_distance)){
 80099b2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80099b6:	eeb1 7a67 	vneg.f32	s14, s15
 80099ba:	edd7 6a03 	vldr	s13, [r7, #12]
 80099be:	edd7 7a02 	vldr	s15, [r7, #8]
 80099c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ce:	d900      	bls.n	80099d2 <cal_table_dis+0x3a6>
		break;
 80099d0:	e133      	b.n	8009c3a <cal_table_dis+0x60e>
				time_over=( -acc_distance - dec_distance - input.displacement)/target->velocity;
 80099d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80099d6:	eeb1 7a67 	vneg.f32	s14, s15
 80099da:	edd7 7a02 	vldr	s15, [r7, #8]
 80099de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80099e2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80099e6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80099ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099ec:	ed93 7a00 	vldr	s14, [r3]
 80099f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099f4:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 80099f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7f6 fdcb 	bl	8000598 <__aeabi_f2d>
 8009a02:	4604      	mov	r4, r0
 8009a04:	460d      	mov	r5, r1
 8009a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7f6 fdc5 	bl	8000598 <__aeabi_f2d>
 8009a0e:	f04f 0200 	mov.w	r2, #0
 8009a12:	f04f 0300 	mov.w	r3, #0
 8009a16:	f7f6 fe17 	bl	8000648 <__aeabi_dmul>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4690      	mov	r8, r2
 8009a20:	4699      	mov	r9, r3
 8009a22:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a26:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009a2a:	ee17 0a90 	vmov	r0, s15
 8009a2e:	f7f6 fdb3 	bl	8000598 <__aeabi_f2d>
 8009a32:	4602      	mov	r2, r0
 8009a34:	460b      	mov	r3, r1
 8009a36:	4640      	mov	r0, r8
 8009a38:	4649      	mov	r1, r9
 8009a3a:	f7f6 fe05 	bl	8000648 <__aeabi_dmul>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	460b      	mov	r3, r1
 8009a42:	4620      	mov	r0, r4
 8009a44:	4629      	mov	r1, r5
 8009a46:	f7f6 fc49 	bl	80002dc <__adddf3>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	4610      	mov	r0, r2
 8009a50:	4619      	mov	r1, r3
 8009a52:	f7f7 f8d1 	bl	8000bf8 <__aeabi_d2f>
 8009a56:	4602      	mov	r2, r0
 8009a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a5a:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 8009a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a5e:	ed93 7a00 	vldr	s14, [r3]
 8009a62:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8009a66:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a6a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009a6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a78:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.deceleration;
 8009a7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a80:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 8009a82:	4b71      	ldr	r3, [pc, #452]	; (8009c48 <cal_table_dis+0x61c>)
 8009a84:	2203      	movs	r2, #3
 8009a86:	701a      	strb	r2, [r3, #0]
		break;
 8009a88:	e0d7      	b.n	8009c3a <cal_table_dis+0x60e>
	case 2:
		//定常
		acc_distance = (input.count_velocity*input.count_velocity-input.start_velocity*input.start_velocity)/2/input.acceleration;
 8009a8a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009a8e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009a92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a96:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009a9a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009a9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009aa6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009aaa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009aae:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009ab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ab6:	edc7 7a03 	vstr	s15, [r7, #12]
		dec_distance = (input.count_velocity*input.count_velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 8009aba:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009abe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009ac2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ac6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8009aca:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009ace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ad6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009ada:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009ade:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ae6:	edc7 7a02 	vstr	s15, [r7, #8]
		if (-input.displacement+target->displacement <= dec_distance) {
 8009aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009aec:	ed93 7a02 	vldr	s14, [r3, #8]
 8009af0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009af8:	ed97 7a02 	vldr	s14, [r7, #8]
 8009afc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b04:	da00      	bge.n	8009b08 <cal_table_dis+0x4dc>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.deceleration;
			g_acc_flag=3;
		}
		break;
 8009b06:	e098      	b.n	8009c3a <cal_table_dis+0x60e>
			time_over=(target->displacement-dec_distance-input.displacement)/target->velocity;
 8009b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b0a:	ed93 7a02 	vldr	s14, [r3, #8]
 8009b0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009b12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b16:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009b1a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b20:	ed93 7a00 	vldr	s14, [r3]
 8009b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b28:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8009b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7f6 fd31 	bl	8000598 <__aeabi_f2d>
 8009b36:	4604      	mov	r4, r0
 8009b38:	460d      	mov	r5, r1
 8009b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7f6 fd2b 	bl	8000598 <__aeabi_f2d>
 8009b42:	f04f 0200 	mov.w	r2, #0
 8009b46:	f04f 0300 	mov.w	r3, #0
 8009b4a:	f7f6 fd7d 	bl	8000648 <__aeabi_dmul>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	460b      	mov	r3, r1
 8009b52:	4690      	mov	r8, r2
 8009b54:	4699      	mov	r9, r3
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7f6 fd1e 	bl	8000598 <__aeabi_f2d>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	460b      	mov	r3, r1
 8009b60:	4640      	mov	r0, r8
 8009b62:	4649      	mov	r1, r9
 8009b64:	f7f6 fd70 	bl	8000648 <__aeabi_dmul>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	4629      	mov	r1, r5
 8009b70:	f7f6 fbb4 	bl	80002dc <__adddf3>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4610      	mov	r0, r2
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	f7f7 f83c 	bl	8000bf8 <__aeabi_d2f>
 8009b80:	4602      	mov	r2, r0
 8009b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b84:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 8009b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b88:	ed93 7a00 	vldr	s14, [r3]
 8009b8c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8009b90:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b9e:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.deceleration;
 8009ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ba6:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8009ba8:	4b27      	ldr	r3, [pc, #156]	; (8009c48 <cal_table_dis+0x61c>)
 8009baa:	2203      	movs	r2, #3
 8009bac:	701a      	strb	r2, [r3, #0]
		break;
 8009bae:	e044      	b.n	8009c3a <cal_table_dis+0x60e>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8009bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bb2:	ed93 7a00 	vldr	s14, [r3]
 8009bb6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bc2:	da00      	bge.n	8009bc6 <cal_table_dis+0x59a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009bc4:	e039      	b.n	8009c3a <cal_table_dis+0x60e>
			target->velocity = input.end_velocity;
 8009bc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bca:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8009bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bce:	f04f 0200 	mov.w	r2, #0
 8009bd2:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009bd4:	4b1c      	ldr	r3, [pc, #112]	; (8009c48 <cal_table_dis+0x61c>)
 8009bd6:	2204      	movs	r2, #4
 8009bd8:	701a      	strb	r2, [r3, #0]
		break;
 8009bda:	e02e      	b.n	8009c3a <cal_table_dis+0x60e>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 8009bdc:	4b1b      	ldr	r3, [pc, #108]	; (8009c4c <cal_table_dis+0x620>)
 8009bde:	2201      	movs	r2, #1
 8009be0:	701a      	strb	r2, [r3, #0]
		break;
 8009be2:	e02a      	b.n	8009c3a <cal_table_dis+0x60e>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 8009be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009be6:	ed93 7a02 	vldr	s14, [r3, #8]
 8009bea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009bee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bf6:	d900      	bls.n	8009bfa <cal_table_dis+0x5ce>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009bf8:	e01f      	b.n	8009c3a <cal_table_dis+0x60e>
			target->acceleration = 0;
 8009bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bfc:	f04f 0200 	mov.w	r2, #0
 8009c00:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009c02:	4b11      	ldr	r3, [pc, #68]	; (8009c48 <cal_table_dis+0x61c>)
 8009c04:	2204      	movs	r2, #4
 8009c06:	701a      	strb	r2, [r3, #0]
		break;
 8009c08:	e017      	b.n	8009c3a <cal_table_dis+0x60e>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 8009c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c0c:	ed93 7a02 	vldr	s14, [r3, #8]
 8009c10:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009c14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c1c:	d900      	bls.n	8009c20 <cal_table_dis+0x5f4>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009c1e:	e00c      	b.n	8009c3a <cal_table_dis+0x60e>
			target->acceleration = 0;
 8009c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c22:	f04f 0200 	mov.w	r2, #0
 8009c26:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009c28:	4b07      	ldr	r3, [pc, #28]	; (8009c48 <cal_table_dis+0x61c>)
 8009c2a:	2204      	movs	r2, #4
 8009c2c:	701a      	strb	r2, [r3, #0]
		break;
 8009c2e:	e004      	b.n	8009c3a <cal_table_dis+0x60e>
		break;
 8009c30:	bf00      	nop
 8009c32:	e002      	b.n	8009c3a <cal_table_dis+0x60e>
		break;
 8009c34:	bf00      	nop
 8009c36:	e000      	b.n	8009c3a <cal_table_dis+0x60e>
		break;
 8009c38:	bf00      	nop
	}

}

}
 8009c3a:	bf00      	nop
 8009c3c:	3718      	adds	r7, #24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8009c44:	b004      	add	sp, #16
 8009c46:	4770      	bx	lr
 8009c48:	20000810 	.word	0x20000810
 8009c4c:	20000811 	.word	0x20000811

08009c50 <cal_mollifier_table>:





void cal_mollifier_table(MOLLIFIER input,TARGET *target){
 8009c50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009c54:	b088      	sub	sp, #32
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	eef0 6a40 	vmov.f32	s13, s0
 8009c5c:	eeb0 7a60 	vmov.f32	s14, s1
 8009c60:	eef0 7a41 	vmov.f32	s15, s2
 8009c64:	6038      	str	r0, [r7, #0]
 8009c66:	edc7 6a01 	vstr	s13, [r7, #4]
 8009c6a:	ed87 7a02 	vstr	s14, [r7, #8]
 8009c6e:	edc7 7a03 	vstr	s15, [r7, #12]

float mollifier_T;
float old_velocity;
float time_delay=12;
 8009c72:	4bbf      	ldr	r3, [pc, #764]	; (8009f70 <cal_mollifier_table+0x320>)
 8009c74:	61fb      	str	r3, [r7, #28]
float time_delay2=-10;
 8009c76:	4bbf      	ldr	r3, [pc, #764]	; (8009f74 <cal_mollifier_table+0x324>)
 8009c78:	61bb      	str	r3, [r7, #24]
	mollifier_timer+=INTERRUPT_TIME;
 8009c7a:	4bbf      	ldr	r3, [pc, #764]	; (8009f78 <cal_mollifier_table+0x328>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7f6 fc8a 	bl	8000598 <__aeabi_f2d>
 8009c84:	a3b2      	add	r3, pc, #712	; (adr r3, 8009f50 <cal_mollifier_table+0x300>)
 8009c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8a:	f7f6 fb27 	bl	80002dc <__adddf3>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	460b      	mov	r3, r1
 8009c92:	4610      	mov	r0, r2
 8009c94:	4619      	mov	r1, r3
 8009c96:	f7f6 ffaf 	bl	8000bf8 <__aeabi_d2f>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	4ab6      	ldr	r2, [pc, #728]	; (8009f78 <cal_mollifier_table+0x328>)
 8009c9e:	6013      	str	r3, [r2, #0]
		mollifier_T=2*fabs(input.displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input.max_turning_velocity;
 8009ca0:	edd7 7a01 	vldr	s15, [r7, #4]
 8009ca4:	eef0 7ae7 	vabs.f32	s15, s15
 8009ca8:	ee17 0a90 	vmov	r0, s15
 8009cac:	f7f6 fc74 	bl	8000598 <__aeabi_f2d>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	f7f6 fb12 	bl	80002dc <__adddf3>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	460b      	mov	r3, r1
 8009cbc:	4610      	mov	r0, r2
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	a3a5      	add	r3, pc, #660	; (adr r3, 8009f58 <cal_mollifier_table+0x308>)
 8009cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc6:	f7f6 fde9 	bl	800089c <__aeabi_ddiv>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	4610      	mov	r0, r2
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	a3a3      	add	r3, pc, #652	; (adr r3, 8009f60 <cal_mollifier_table+0x310>)
 8009cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd8:	f7f6 fcb6 	bl	8000648 <__aeabi_dmul>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4614      	mov	r4, r2
 8009ce2:	461d      	mov	r5, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7f6 fc56 	bl	8000598 <__aeabi_f2d>
 8009cec:	4602      	mov	r2, r0
 8009cee:	460b      	mov	r3, r1
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	4629      	mov	r1, r5
 8009cf4:	f7f6 fdd2 	bl	800089c <__aeabi_ddiv>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	4610      	mov	r0, r2
 8009cfe:	4619      	mov	r1, r3
 8009d00:	f7f6 ff7a 	bl	8000bf8 <__aeabi_d2f>
 8009d04:	4603      	mov	r3, r0
 8009d06:	617b      	str	r3, [r7, #20]
		if (mollifier_timer>-mollifier_T/2 && mollifier_timer<mollifier_T/2){
 8009d08:	edd7 7a05 	vldr	s15, [r7, #20]
 8009d0c:	eef1 7a67 	vneg.f32	s15, s15
 8009d10:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009d14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009d18:	4b97      	ldr	r3, [pc, #604]	; (8009f78 <cal_mollifier_table+0x328>)
 8009d1a:	edd3 7a00 	vldr	s15, [r3]
 8009d1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d26:	f140 81a2 	bpl.w	800a06e <cal_mollifier_table+0x41e>
 8009d2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8009d2e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009d32:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009d36:	4b90      	ldr	r3, [pc, #576]	; (8009f78 <cal_mollifier_table+0x328>)
 8009d38:	edd3 7a00 	vldr	s15, [r3]
 8009d3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d44:	f340 8193 	ble.w	800a06e <cal_mollifier_table+0x41e>
			old_velocity=target->velocity;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	613b      	str	r3, [r7, #16]
			target->velocity = cal_mollifier_velocity(mollifier_timer,mollifier_T,input.displacement);
 8009d4e:	4b8a      	ldr	r3, [pc, #552]	; (8009f78 <cal_mollifier_table+0x328>)
 8009d50:	edd3 7a00 	vldr	s15, [r3]
 8009d54:	ed97 7a01 	vldr	s14, [r7, #4]
 8009d58:	eeb0 1a47 	vmov.f32	s2, s14
 8009d5c:	edd7 0a05 	vldr	s1, [r7, #20]
 8009d60:	eeb0 0a67 	vmov.f32	s0, s15
 8009d64:	f000 f9ac 	bl	800a0c0 <cal_mollifier_velocity>
 8009d68:	eef0 7a40 	vmov.f32	s15, s0
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	edc3 7a00 	vstr	s15, [r3]

			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009d72:	4b81      	ldr	r3, [pc, #516]	; (8009f78 <cal_mollifier_table+0x328>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7f6 fc0e 	bl	8000598 <__aeabi_f2d>
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	460d      	mov	r5, r1
 8009d80:	edd7 7a05 	vldr	s15, [r7, #20]
 8009d84:	eef1 7a67 	vneg.f32	s15, s15
 8009d88:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009d8c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009d90:	ee16 0a90 	vmov	r0, s13
 8009d94:	f7f6 fc00 	bl	8000598 <__aeabi_f2d>
 8009d98:	a373      	add	r3, pc, #460	; (adr r3, 8009f68 <cal_mollifier_table+0x318>)
 8009d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9e:	f7f6 fd7d 	bl	800089c <__aeabi_ddiv>
 8009da2:	4602      	mov	r2, r0
 8009da4:	460b      	mov	r3, r1
 8009da6:	4690      	mov	r8, r2
 8009da8:	4699      	mov	r9, r3
 8009daa:	69f8      	ldr	r0, [r7, #28]
 8009dac:	f7f6 fbf4 	bl	8000598 <__aeabi_f2d>
 8009db0:	a367      	add	r3, pc, #412	; (adr r3, 8009f50 <cal_mollifier_table+0x300>)
 8009db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db6:	f7f6 fc47 	bl	8000648 <__aeabi_dmul>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	4640      	mov	r0, r8
 8009dc0:	4649      	mov	r1, r9
 8009dc2:	f7f6 fa8b 	bl	80002dc <__adddf3>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	4620      	mov	r0, r4
 8009dcc:	4629      	mov	r1, r5
 8009dce:	f7f6 fead 	bl	8000b2c <__aeabi_dcmplt>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d027      	beq.n	8009e28 <cal_mollifier_table+0x1d8>
				target->acceleration = cal_mollifier_acceleration(-mollifier_T/2/1.316,mollifier_T,input.displacement);
 8009dd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8009ddc:	eef1 7a67 	vneg.f32	s15, s15
 8009de0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009de4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009de8:	ee16 0a90 	vmov	r0, s13
 8009dec:	f7f6 fbd4 	bl	8000598 <__aeabi_f2d>
 8009df0:	a35d      	add	r3, pc, #372	; (adr r3, 8009f68 <cal_mollifier_table+0x318>)
 8009df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df6:	f7f6 fd51 	bl	800089c <__aeabi_ddiv>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	4610      	mov	r0, r2
 8009e00:	4619      	mov	r1, r3
 8009e02:	f7f6 fef9 	bl	8000bf8 <__aeabi_d2f>
 8009e06:	4603      	mov	r3, r0
 8009e08:	edd7 7a01 	vldr	s15, [r7, #4]
 8009e0c:	eeb0 1a67 	vmov.f32	s2, s15
 8009e10:	edd7 0a05 	vldr	s1, [r7, #20]
 8009e14:	ee00 3a10 	vmov	s0, r3
 8009e18:	f000 f9b2 	bl	800a180 <cal_mollifier_acceleration>
 8009e1c:	eef0 7a40 	vmov.f32	s15, s0
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009e26:	e137      	b.n	800a098 <cal_mollifier_table+0x448>
			}else if(mollifier_timer<0){
 8009e28:	4b53      	ldr	r3, [pc, #332]	; (8009f78 <cal_mollifier_table+0x328>)
 8009e2a:	edd3 7a00 	vldr	s15, [r3]
 8009e2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e36:	d52b      	bpl.n	8009e90 <cal_mollifier_table+0x240>
				target->acceleration = cal_mollifier_acceleration(mollifier_timer-INTERRUPT_TIME*time_delay,mollifier_T,input.displacement);
 8009e38:	4b4f      	ldr	r3, [pc, #316]	; (8009f78 <cal_mollifier_table+0x328>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7f6 fbab 	bl	8000598 <__aeabi_f2d>
 8009e42:	4604      	mov	r4, r0
 8009e44:	460d      	mov	r5, r1
 8009e46:	69f8      	ldr	r0, [r7, #28]
 8009e48:	f7f6 fba6 	bl	8000598 <__aeabi_f2d>
 8009e4c:	a340      	add	r3, pc, #256	; (adr r3, 8009f50 <cal_mollifier_table+0x300>)
 8009e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e52:	f7f6 fbf9 	bl	8000648 <__aeabi_dmul>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	f7f6 fa3b 	bl	80002d8 <__aeabi_dsub>
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	4610      	mov	r0, r2
 8009e68:	4619      	mov	r1, r3
 8009e6a:	f7f6 fec5 	bl	8000bf8 <__aeabi_d2f>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	edd7 7a01 	vldr	s15, [r7, #4]
 8009e74:	eeb0 1a67 	vmov.f32	s2, s15
 8009e78:	edd7 0a05 	vldr	s1, [r7, #20]
 8009e7c:	ee00 3a10 	vmov	s0, r3
 8009e80:	f000 f97e 	bl	800a180 <cal_mollifier_acceleration>
 8009e84:	eef0 7a40 	vmov.f32	s15, s0
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009e8e:	e103      	b.n	800a098 <cal_mollifier_table+0x448>
			}else if(mollifier_timer<mollifier_T/2/1.316+time_delay2*INTERRUPT_TIME){
 8009e90:	4b39      	ldr	r3, [pc, #228]	; (8009f78 <cal_mollifier_table+0x328>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7f6 fb7f 	bl	8000598 <__aeabi_f2d>
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	460d      	mov	r5, r1
 8009e9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009ea2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009ea6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009eaa:	ee16 0a90 	vmov	r0, s13
 8009eae:	f7f6 fb73 	bl	8000598 <__aeabi_f2d>
 8009eb2:	a32d      	add	r3, pc, #180	; (adr r3, 8009f68 <cal_mollifier_table+0x318>)
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	f7f6 fcf0 	bl	800089c <__aeabi_ddiv>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	4690      	mov	r8, r2
 8009ec2:	4699      	mov	r9, r3
 8009ec4:	69b8      	ldr	r0, [r7, #24]
 8009ec6:	f7f6 fb67 	bl	8000598 <__aeabi_f2d>
 8009eca:	a321      	add	r3, pc, #132	; (adr r3, 8009f50 <cal_mollifier_table+0x300>)
 8009ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed0:	f7f6 fbba 	bl	8000648 <__aeabi_dmul>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	4640      	mov	r0, r8
 8009eda:	4649      	mov	r1, r9
 8009edc:	f7f6 f9fe 	bl	80002dc <__adddf3>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	4629      	mov	r1, r5
 8009ee8:	f7f6 fe20 	bl	8000b2c <__aeabi_dcmplt>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d044      	beq.n	8009f7c <cal_mollifier_table+0x32c>
				target->acceleration = cal_mollifier_acceleration(mollifier_timer-INTERRUPT_TIME*time_delay,mollifier_T,input.displacement);
 8009ef2:	4b21      	ldr	r3, [pc, #132]	; (8009f78 <cal_mollifier_table+0x328>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7f6 fb4e 	bl	8000598 <__aeabi_f2d>
 8009efc:	4604      	mov	r4, r0
 8009efe:	460d      	mov	r5, r1
 8009f00:	69f8      	ldr	r0, [r7, #28]
 8009f02:	f7f6 fb49 	bl	8000598 <__aeabi_f2d>
 8009f06:	a312      	add	r3, pc, #72	; (adr r3, 8009f50 <cal_mollifier_table+0x300>)
 8009f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0c:	f7f6 fb9c 	bl	8000648 <__aeabi_dmul>
 8009f10:	4602      	mov	r2, r0
 8009f12:	460b      	mov	r3, r1
 8009f14:	4620      	mov	r0, r4
 8009f16:	4629      	mov	r1, r5
 8009f18:	f7f6 f9de 	bl	80002d8 <__aeabi_dsub>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	460b      	mov	r3, r1
 8009f20:	4610      	mov	r0, r2
 8009f22:	4619      	mov	r1, r3
 8009f24:	f7f6 fe68 	bl	8000bf8 <__aeabi_d2f>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f2e:	eeb0 1a67 	vmov.f32	s2, s15
 8009f32:	edd7 0a05 	vldr	s1, [r7, #20]
 8009f36:	ee00 3a10 	vmov	s0, r3
 8009f3a:	f000 f921 	bl	800a180 <cal_mollifier_acceleration>
 8009f3e:	eef0 7a40 	vmov.f32	s15, s0
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009f48:	e0a6      	b.n	800a098 <cal_mollifier_table+0x448>
 8009f4a:	bf00      	nop
 8009f4c:	f3af 8000 	nop.w
 8009f50:	d2f1a9fc 	.word	0xd2f1a9fc
 8009f54:	3f50624d 	.word	0x3f50624d
 8009f58:	f9db22d1 	.word	0xf9db22d1
 8009f5c:	3fdc6a7e 	.word	0x3fdc6a7e
 8009f60:	362cef38 	.word	0x362cef38
 8009f64:	3fd78b56 	.word	0x3fd78b56
 8009f68:	04189375 	.word	0x04189375
 8009f6c:	3ff50e56 	.word	0x3ff50e56
 8009f70:	41400000 	.word	0x41400000
 8009f74:	c1200000 	.word	0xc1200000
 8009f78:	2000080c 	.word	0x2000080c
			}else if(mollifier_timer<mollifier_T/2+time_delay2*INTERRUPT_TIME){
 8009f7c:	4b4e      	ldr	r3, [pc, #312]	; (800a0b8 <cal_mollifier_table+0x468>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7f6 fb09 	bl	8000598 <__aeabi_f2d>
 8009f86:	4604      	mov	r4, r0
 8009f88:	460d      	mov	r5, r1
 8009f8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f8e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009f92:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009f96:	ee16 0a90 	vmov	r0, s13
 8009f9a:	f7f6 fafd 	bl	8000598 <__aeabi_f2d>
 8009f9e:	4680      	mov	r8, r0
 8009fa0:	4689      	mov	r9, r1
 8009fa2:	69b8      	ldr	r0, [r7, #24]
 8009fa4:	f7f6 faf8 	bl	8000598 <__aeabi_f2d>
 8009fa8:	a33f      	add	r3, pc, #252	; (adr r3, 800a0a8 <cal_mollifier_table+0x458>)
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	f7f6 fb4b 	bl	8000648 <__aeabi_dmul>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	4640      	mov	r0, r8
 8009fb8:	4649      	mov	r1, r9
 8009fba:	f7f6 f98f 	bl	80002dc <__adddf3>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	4629      	mov	r1, r5
 8009fc6:	f7f6 fdb1 	bl	8000b2c <__aeabi_dcmplt>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d028      	beq.n	800a022 <cal_mollifier_table+0x3d2>
				time_delay=0;
 8009fd0:	f04f 0300 	mov.w	r3, #0
 8009fd4:	61fb      	str	r3, [r7, #28]
				target->acceleration = cal_mollifier_acceleration(mollifier_T/2/1.316,mollifier_T,input.displacement);
 8009fd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8009fda:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009fde:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009fe2:	ee16 0a90 	vmov	r0, s13
 8009fe6:	f7f6 fad7 	bl	8000598 <__aeabi_f2d>
 8009fea:	a331      	add	r3, pc, #196	; (adr r3, 800a0b0 <cal_mollifier_table+0x460>)
 8009fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff0:	f7f6 fc54 	bl	800089c <__aeabi_ddiv>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	f7f6 fdfc 	bl	8000bf8 <__aeabi_d2f>
 800a000:	4603      	mov	r3, r0
 800a002:	edd7 7a01 	vldr	s15, [r7, #4]
 800a006:	eeb0 1a67 	vmov.f32	s2, s15
 800a00a:	edd7 0a05 	vldr	s1, [r7, #20]
 800a00e:	ee00 3a10 	vmov	s0, r3
 800a012:	f000 f8b5 	bl	800a180 <cal_mollifier_acceleration>
 800a016:	eef0 7a40 	vmov.f32	s15, s0
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 800a020:	e03a      	b.n	800a098 <cal_mollifier_table+0x448>
			}else{
				target->acceleration = cal_mollifier_acceleration(mollifier_T/2-INTERRUPT_TIME,mollifier_T,input.displacement);
 800a022:	edd7 7a05 	vldr	s15, [r7, #20]
 800a026:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a02a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a02e:	ee16 0a90 	vmov	r0, s13
 800a032:	f7f6 fab1 	bl	8000598 <__aeabi_f2d>
 800a036:	a31c      	add	r3, pc, #112	; (adr r3, 800a0a8 <cal_mollifier_table+0x458>)
 800a038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03c:	f7f6 f94c 	bl	80002d8 <__aeabi_dsub>
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	4610      	mov	r0, r2
 800a046:	4619      	mov	r1, r3
 800a048:	f7f6 fdd6 	bl	8000bf8 <__aeabi_d2f>
 800a04c:	4603      	mov	r3, r0
 800a04e:	edd7 7a01 	vldr	s15, [r7, #4]
 800a052:	eeb0 1a67 	vmov.f32	s2, s15
 800a056:	edd7 0a05 	vldr	s1, [r7, #20]
 800a05a:	ee00 3a10 	vmov	s0, r3
 800a05e:	f000 f88f 	bl	800a180 <cal_mollifier_acceleration>
 800a062:	eef0 7a40 	vmov.f32	s15, s0
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 800a06c:	e014      	b.n	800a098 <cal_mollifier_table+0x448>
//			}
//			if(mollifier_timer>mollifier_T/2*0.9){
//							target->acceleration = -0.6*target->acceleration;
//			}
		}else{
			old_velocity=target->velocity;
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	613b      	str	r3, [r7, #16]
			target->velocity=0;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	f04f 0200 	mov.w	r2, #0
 800a07a:	601a      	str	r2, [r3, #0]
			target->acceleration = -target->velocity+old_velocity;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	edd3 7a00 	vldr	s15, [r3]
 800a082:	ed97 7a04 	vldr	s14, [r7, #16]
 800a086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=4;
 800a090:	4b0a      	ldr	r3, [pc, #40]	; (800a0bc <cal_mollifier_table+0x46c>)
 800a092:	2204      	movs	r2, #4
 800a094:	701a      	strb	r2, [r3, #0]

		}

}
 800a096:	bf00      	nop
 800a098:	bf00      	nop
 800a09a:	3720      	adds	r7, #32
 800a09c:	46bd      	mov	sp, r7
 800a09e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a0a2:	bf00      	nop
 800a0a4:	f3af 8000 	nop.w
 800a0a8:	d2f1a9fc 	.word	0xd2f1a9fc
 800a0ac:	3f50624d 	.word	0x3f50624d
 800a0b0:	04189375 	.word	0x04189375
 800a0b4:	3ff50e56 	.word	0x3ff50e56
 800a0b8:	2000080c 	.word	0x2000080c
 800a0bc:	20000810 	.word	0x20000810

0800a0c0 <cal_mollifier_velocity>:


float cal_mollifier_velocity(float t_now,float mollifier_T,float integral){
 800a0c0:	b5b0      	push	{r4, r5, r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	ed87 0a03 	vstr	s0, [r7, #12]
 800a0ca:	edc7 0a02 	vstr	s1, [r7, #8]
 800a0ce:	ed87 1a01 	vstr	s2, [r7, #4]
	float velocity;
	velocity=(2/mollifier_T)*integral/MOLLIFIER_INTEGRAL*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-t_now*t_now));
 800a0d2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a0d6:	edd7 7a02 	vldr	s15, [r7, #8]
 800a0da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0de:	edd7 7a01 	vldr	s15, [r7, #4]
 800a0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0e6:	ee17 0a90 	vmov	r0, s15
 800a0ea:	f7f6 fa55 	bl	8000598 <__aeabi_f2d>
 800a0ee:	a322      	add	r3, pc, #136	; (adr r3, 800a178 <cal_mollifier_velocity+0xb8>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	f7f6 fbd2 	bl	800089c <__aeabi_ddiv>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	4614      	mov	r4, r2
 800a0fe:	461d      	mov	r5, r3
 800a100:	edd7 7a02 	vldr	s15, [r7, #8]
 800a104:	eeb1 7a67 	vneg.f32	s14, s15
 800a108:	edd7 7a02 	vldr	s15, [r7, #8]
 800a10c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a110:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800a114:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a118:	edd7 7a02 	vldr	s15, [r7, #8]
 800a11c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a120:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800a124:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800a128:	edd7 7a03 	vldr	s15, [r7, #12]
 800a12c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a130:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a134:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a138:	ee16 0a90 	vmov	r0, s13
 800a13c:	f7f6 fa2c 	bl	8000598 <__aeabi_f2d>
 800a140:	4602      	mov	r2, r0
 800a142:	460b      	mov	r3, r1
 800a144:	ec43 2b10 	vmov	d0, r2, r3
 800a148:	f019 fcde 	bl	8023b08 <exp>
 800a14c:	ec53 2b10 	vmov	r2, r3, d0
 800a150:	4620      	mov	r0, r4
 800a152:	4629      	mov	r1, r5
 800a154:	f7f6 fa78 	bl	8000648 <__aeabi_dmul>
 800a158:	4602      	mov	r2, r0
 800a15a:	460b      	mov	r3, r1
 800a15c:	4610      	mov	r0, r2
 800a15e:	4619      	mov	r1, r3
 800a160:	f7f6 fd4a 	bl	8000bf8 <__aeabi_d2f>
 800a164:	4603      	mov	r3, r0
 800a166:	617b      	str	r3, [r7, #20]
	return velocity;
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	ee07 3a90 	vmov	s15, r3
}
 800a16e:	eeb0 0a67 	vmov.f32	s0, s15
 800a172:	3718      	adds	r7, #24
 800a174:	46bd      	mov	sp, r7
 800a176:	bdb0      	pop	{r4, r5, r7, pc}
 800a178:	f9db22d1 	.word	0xf9db22d1
 800a17c:	3fdc6a7e 	.word	0x3fdc6a7e

0800a180 <cal_mollifier_acceleration>:
float cal_mollifier_acceleration(float t_now,float mollifier_T,float integral){
 800a180:	b5b0      	push	{r4, r5, r7, lr}
 800a182:	b086      	sub	sp, #24
 800a184:	af00      	add	r7, sp, #0
 800a186:	ed87 0a03 	vstr	s0, [r7, #12]
 800a18a:	edc7 0a02 	vstr	s1, [r7, #8]
 800a18e:	ed87 1a01 	vstr	s2, [r7, #4]
	float acceleration;
	acceleration= integral/MOLLIFIER_INTEGRAL*(-mollifier_T*t_now/(mollifier_T*mollifier_T/4-t_now*t_now)/(mollifier_T*mollifier_T/4-t_now*t_now))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-t_now*t_now));
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f7f6 fa00 	bl	8000598 <__aeabi_f2d>
 800a198:	a33d      	add	r3, pc, #244	; (adr r3, 800a290 <cal_mollifier_acceleration+0x110>)
 800a19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19e:	f7f6 fb7d 	bl	800089c <__aeabi_ddiv>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	4614      	mov	r4, r2
 800a1a8:	461d      	mov	r5, r3
 800a1aa:	edd7 7a02 	vldr	s15, [r7, #8]
 800a1ae:	eeb1 7a67 	vneg.f32	s14, s15
 800a1b2:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1b6:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a1ba:	edd7 7a02 	vldr	s15, [r7, #8]
 800a1be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a1c2:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800a1c6:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800a1ca:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a1d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1da:	edd7 7a02 	vldr	s15, [r7, #8]
 800a1de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a1e2:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800a1e6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800a1ea:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a1f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a1f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a1fa:	ee16 0a90 	vmov	r0, s13
 800a1fe:	f7f6 f9cb 	bl	8000598 <__aeabi_f2d>
 800a202:	4602      	mov	r2, r0
 800a204:	460b      	mov	r3, r1
 800a206:	4620      	mov	r0, r4
 800a208:	4629      	mov	r1, r5
 800a20a:	f7f6 fa1d 	bl	8000648 <__aeabi_dmul>
 800a20e:	4602      	mov	r2, r0
 800a210:	460b      	mov	r3, r1
 800a212:	4614      	mov	r4, r2
 800a214:	461d      	mov	r5, r3
 800a216:	edd7 7a02 	vldr	s15, [r7, #8]
 800a21a:	eeb1 7a67 	vneg.f32	s14, s15
 800a21e:	edd7 7a02 	vldr	s15, [r7, #8]
 800a222:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a226:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800a22a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a22e:	edd7 7a02 	vldr	s15, [r7, #8]
 800a232:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a236:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800a23a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800a23e:	edd7 7a03 	vldr	s15, [r7, #12]
 800a242:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a246:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a24a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a24e:	ee16 0a90 	vmov	r0, s13
 800a252:	f7f6 f9a1 	bl	8000598 <__aeabi_f2d>
 800a256:	4602      	mov	r2, r0
 800a258:	460b      	mov	r3, r1
 800a25a:	ec43 2b10 	vmov	d0, r2, r3
 800a25e:	f019 fc53 	bl	8023b08 <exp>
 800a262:	ec53 2b10 	vmov	r2, r3, d0
 800a266:	4620      	mov	r0, r4
 800a268:	4629      	mov	r1, r5
 800a26a:	f7f6 f9ed 	bl	8000648 <__aeabi_dmul>
 800a26e:	4602      	mov	r2, r0
 800a270:	460b      	mov	r3, r1
 800a272:	4610      	mov	r0, r2
 800a274:	4619      	mov	r1, r3
 800a276:	f7f6 fcbf 	bl	8000bf8 <__aeabi_d2f>
 800a27a:	4603      	mov	r3, r0
 800a27c:	617b      	str	r3, [r7, #20]
	return acceleration;
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	ee07 3a90 	vmov	s15, r3
}
 800a284:	eeb0 0a67 	vmov.f32	s0, s15
 800a288:	3718      	adds	r7, #24
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bdb0      	pop	{r4, r5, r7, pc}
 800a28e:	bf00      	nop
 800a290:	f9db22d1 	.word	0xf9db22d1
 800a294:	3fdc6a7e 	.word	0x3fdc6a7e

0800a298 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800a29e:	4b12      	ldr	r3, [pc, #72]	; (800a2e8 <MX_DMA_Init+0x50>)
 800a2a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2a2:	4a11      	ldr	r2, [pc, #68]	; (800a2e8 <MX_DMA_Init+0x50>)
 800a2a4:	f043 0304 	orr.w	r3, r3, #4
 800a2a8:	6493      	str	r3, [r2, #72]	; 0x48
 800a2aa:	4b0f      	ldr	r3, [pc, #60]	; (800a2e8 <MX_DMA_Init+0x50>)
 800a2ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2ae:	f003 0304 	and.w	r3, r3, #4
 800a2b2:	607b      	str	r3, [r7, #4]
 800a2b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a2b6:	4b0c      	ldr	r3, [pc, #48]	; (800a2e8 <MX_DMA_Init+0x50>)
 800a2b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2ba:	4a0b      	ldr	r2, [pc, #44]	; (800a2e8 <MX_DMA_Init+0x50>)
 800a2bc:	f043 0301 	orr.w	r3, r3, #1
 800a2c0:	6493      	str	r3, [r2, #72]	; 0x48
 800a2c2:	4b09      	ldr	r3, [pc, #36]	; (800a2e8 <MX_DMA_Init+0x50>)
 800a2c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2c6:	f003 0301 	and.w	r3, r3, #1
 800a2ca:	603b      	str	r3, [r7, #0]
 800a2cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	200b      	movs	r0, #11
 800a2d4:	f011 fcdf 	bl	801bc96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800a2d8:	200b      	movs	r0, #11
 800a2da:	f011 fcf6 	bl	801bcca <HAL_NVIC_EnableIRQ>

}
 800a2de:	bf00      	nop
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	40021000 	.word	0x40021000

0800a2ec <init_FailSafe>:
float encoder_PID_error_highspeed;
float gyro_PID_error_highspeed;
float gyro_x_error_highspeed;
int error_time_count;

void init_FailSafe(void){
 800a2ec:	b480      	push	{r7}
 800a2ee:	af00      	add	r7, sp, #0
	error_mode=0;
 800a2f0:	4b11      	ldr	r3, [pc, #68]	; (800a338 <init_FailSafe+0x4c>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	701a      	strb	r2, [r3, #0]
	no_safty=0;
 800a2f6:	4b11      	ldr	r3, [pc, #68]	; (800a33c <init_FailSafe+0x50>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 800a2fc:	4b10      	ldr	r3, [pc, #64]	; (800a340 <init_FailSafe+0x54>)
 800a2fe:	2200      	movs	r2, #0
 800a300:	701a      	strb	r2, [r3, #0]
	error_time_count=0;
 800a302:	4b10      	ldr	r3, [pc, #64]	; (800a344 <init_FailSafe+0x58>)
 800a304:	2200      	movs	r2, #0
 800a306:	601a      	str	r2, [r3, #0]
	encoder_PID_error=1500;
 800a308:	4b0f      	ldr	r3, [pc, #60]	; (800a348 <init_FailSafe+0x5c>)
 800a30a:	4a10      	ldr	r2, [pc, #64]	; (800a34c <init_FailSafe+0x60>)
 800a30c:	601a      	str	r2, [r3, #0]
	gyro_PID_error=800;
 800a30e:	4b10      	ldr	r3, [pc, #64]	; (800a350 <init_FailSafe+0x64>)
 800a310:	4a10      	ldr	r2, [pc, #64]	; (800a354 <init_FailSafe+0x68>)
 800a312:	601a      	str	r2, [r3, #0]
	gyro_x_error=1500;
 800a314:	4b10      	ldr	r3, [pc, #64]	; (800a358 <init_FailSafe+0x6c>)
 800a316:	4a0d      	ldr	r2, [pc, #52]	; (800a34c <init_FailSafe+0x60>)
 800a318:	601a      	str	r2, [r3, #0]

	encoder_PID_error_highspeed=3500;//3000
 800a31a:	4b10      	ldr	r3, [pc, #64]	; (800a35c <init_FailSafe+0x70>)
 800a31c:	4a10      	ldr	r2, [pc, #64]	; (800a360 <init_FailSafe+0x74>)
 800a31e:	601a      	str	r2, [r3, #0]
	gyro_PID_error_highspeed=1900;
 800a320:	4b10      	ldr	r3, [pc, #64]	; (800a364 <init_FailSafe+0x78>)
 800a322:	4a11      	ldr	r2, [pc, #68]	; (800a368 <init_FailSafe+0x7c>)
 800a324:	601a      	str	r2, [r3, #0]
	gyro_x_error_highspeed=1900;
 800a326:	4b11      	ldr	r3, [pc, #68]	; (800a36c <init_FailSafe+0x80>)
 800a328:	4a0f      	ldr	r2, [pc, #60]	; (800a368 <init_FailSafe+0x7c>)
 800a32a:	601a      	str	r2, [r3, #0]
}
 800a32c:	bf00      	nop
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
 800a336:	bf00      	nop
 800a338:	20000813 	.word	0x20000813
 800a33c:	20000812 	.word	0x20000812
 800a340:	20000814 	.word	0x20000814
 800a344:	20000830 	.word	0x20000830
 800a348:	20000818 	.word	0x20000818
 800a34c:	44bb8000 	.word	0x44bb8000
 800a350:	2000081c 	.word	0x2000081c
 800a354:	44480000 	.word	0x44480000
 800a358:	20000820 	.word	0x20000820
 800a35c:	20000824 	.word	0x20000824
 800a360:	455ac000 	.word	0x455ac000
 800a364:	20000828 	.word	0x20000828
 800a368:	44ed8000 	.word	0x44ed8000
 800a36c:	2000082c 	.word	0x2000082c

0800a370 <interrupt_FailSafe>:


void interrupt_FailSafe(void){
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
	float encoder_PID_error_in;
	float gyro_PID_error_in;
	float gyro_x_error_in;

	if (highspeed_mode == 0) {
 800a376:	4b6e      	ldr	r3, [pc, #440]	; (800a530 <interrupt_FailSafe+0x1c0>)
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d109      	bne.n	800a392 <interrupt_FailSafe+0x22>
		encoder_PID_error_in=encoder_PID_error;
 800a37e:	4b6d      	ldr	r3, [pc, #436]	; (800a534 <interrupt_FailSafe+0x1c4>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error;
 800a384:	4b6c      	ldr	r3, [pc, #432]	; (800a538 <interrupt_FailSafe+0x1c8>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error;
 800a38a:	4b6c      	ldr	r3, [pc, #432]	; (800a53c <interrupt_FailSafe+0x1cc>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	607b      	str	r3, [r7, #4]
 800a390:	e008      	b.n	800a3a4 <interrupt_FailSafe+0x34>
	}else{
		encoder_PID_error_in=encoder_PID_error_highspeed;
 800a392:	4b6b      	ldr	r3, [pc, #428]	; (800a540 <interrupt_FailSafe+0x1d0>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error_highspeed;
 800a398:	4b6a      	ldr	r3, [pc, #424]	; (800a544 <interrupt_FailSafe+0x1d4>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error_highspeed;
 800a39e:	4b6a      	ldr	r3, [pc, #424]	; (800a548 <interrupt_FailSafe+0x1d8>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	607b      	str	r3, [r7, #4]
	}

	if (modeacc != 0 && modeacc != 3){
 800a3a4:	4b69      	ldr	r3, [pc, #420]	; (800a54c <interrupt_FailSafe+0x1dc>)
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d062      	beq.n	800a472 <interrupt_FailSafe+0x102>
 800a3ac:	4b67      	ldr	r3, [pc, #412]	; (800a54c <interrupt_FailSafe+0x1dc>)
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d05e      	beq.n	800a472 <interrupt_FailSafe+0x102>
		if (no_safty == 0 && error_mode == 0) {
 800a3b4:	4b66      	ldr	r3, [pc, #408]	; (800a550 <interrupt_FailSafe+0x1e0>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d15a      	bne.n	800a472 <interrupt_FailSafe+0x102>
 800a3bc:	4b65      	ldr	r3, [pc, #404]	; (800a554 <interrupt_FailSafe+0x1e4>)
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d156      	bne.n	800a472 <interrupt_FailSafe+0x102>
			//ジャイロの誤差が一定以上
					if (fabs(turning.velocity - angle_speed) >= gyro_PID_error_in ) {
 800a3c4:	4b64      	ldr	r3, [pc, #400]	; (800a558 <interrupt_FailSafe+0x1e8>)
 800a3c6:	ed93 7a00 	vldr	s14, [r3]
 800a3ca:	4b64      	ldr	r3, [pc, #400]	; (800a55c <interrupt_FailSafe+0x1ec>)
 800a3cc:	edd3 7a00 	vldr	s15, [r3]
 800a3d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3d4:	eef0 7ae7 	vabs.f32	s15, s15
 800a3d8:	ed97 7a02 	vldr	s14, [r7, #8]
 800a3dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e4:	d809      	bhi.n	800a3fa <interrupt_FailSafe+0x8a>
						//(gyro.omega_x >= 320 && gyro.omega_y >= 320) ||
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 800a3e6:	f7fe f973 	bl	80086d0 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(1);
 800a3ea:	2001      	movs	r0, #1
 800a3ec:	f7fd fb9c 	bl	8007b28 <pl_yellow_LED_count>
						error_mode = 1;
 800a3f0:	4b58      	ldr	r3, [pc, #352]	; (800a554 <interrupt_FailSafe+0x1e4>)
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800a3f6:	f7fa ff5b 	bl	80052b0 <clear_Ierror>
					}
					if (angle_speedx_set >= gyro_x_error_in) {
 800a3fa:	4b59      	ldr	r3, [pc, #356]	; (800a560 <interrupt_FailSafe+0x1f0>)
 800a3fc:	edd3 7a00 	vldr	s15, [r3]
 800a400:	ed97 7a01 	vldr	s14, [r7, #4]
 800a404:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a40c:	d809      	bhi.n	800a422 <interrupt_FailSafe+0xb2>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 800a40e:	f7fe f95f 	bl	80086d0 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(2);
 800a412:	2002      	movs	r0, #2
 800a414:	f7fd fb88 	bl	8007b28 <pl_yellow_LED_count>
						error_mode = 1;
 800a418:	4b4e      	ldr	r3, [pc, #312]	; (800a554 <interrupt_FailSafe+0x1e4>)
 800a41a:	2201      	movs	r2, #1
 800a41c:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800a41e:	f7fa ff47 	bl	80052b0 <clear_Ierror>
					}
					if(fabs(straight.velocity - (fusion_speedR+fusion_speedL)/2) >= encoder_PID_error_in && modeacc==1){
 800a422:	4b50      	ldr	r3, [pc, #320]	; (800a564 <interrupt_FailSafe+0x1f4>)
 800a424:	ed93 7a00 	vldr	s14, [r3]
 800a428:	4b4f      	ldr	r3, [pc, #316]	; (800a568 <interrupt_FailSafe+0x1f8>)
 800a42a:	edd3 6a00 	vldr	s13, [r3]
 800a42e:	4b4f      	ldr	r3, [pc, #316]	; (800a56c <interrupt_FailSafe+0x1fc>)
 800a430:	edd3 7a00 	vldr	s15, [r3]
 800a434:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a438:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800a43c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800a440:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a444:	eef0 7ae7 	vabs.f32	s15, s15
 800a448:	ed97 7a03 	vldr	s14, [r7, #12]
 800a44c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a454:	d80d      	bhi.n	800a472 <interrupt_FailSafe+0x102>
 800a456:	4b3d      	ldr	r3, [pc, #244]	; (800a54c <interrupt_FailSafe+0x1dc>)
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d109      	bne.n	800a472 <interrupt_FailSafe+0x102>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 800a45e:	f7fe f937 	bl	80086d0 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(4);
 800a462:	2004      	movs	r0, #4
 800a464:	f7fd fb60 	bl	8007b28 <pl_yellow_LED_count>
						error_mode = 1;
 800a468:	4b3a      	ldr	r3, [pc, #232]	; (800a554 <interrupt_FailSafe+0x1e4>)
 800a46a:	2201      	movs	r2, #1
 800a46c:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800a46e:	f7fa ff1f 	bl	80052b0 <clear_Ierror>

				}

	}

	if(error_mode==1){
 800a472:	4b38      	ldr	r3, [pc, #224]	; (800a554 <interrupt_FailSafe+0x1e4>)
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	2b01      	cmp	r3, #1
 800a478:	d153      	bne.n	800a522 <interrupt_FailSafe+0x1b2>
		record_mode=0;
 800a47a:	4b3d      	ldr	r3, [pc, #244]	; (800a570 <interrupt_FailSafe+0x200>)
 800a47c:	2200      	movs	r2, #0
 800a47e:	701a      	strb	r2, [r3, #0]
		error_time_count++;
 800a480:	4b3c      	ldr	r3, [pc, #240]	; (800a574 <interrupt_FailSafe+0x204>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	3301      	adds	r3, #1
 800a486:	4a3b      	ldr	r2, [pc, #236]	; (800a574 <interrupt_FailSafe+0x204>)
 800a488:	6013      	str	r3, [r2, #0]
		if(error_time_count<=1000){
 800a48a:	4b3a      	ldr	r3, [pc, #232]	; (800a574 <interrupt_FailSafe+0x204>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a492:	dc05      	bgt.n	800a4a0 <interrupt_FailSafe+0x130>
			init_WallControl();
 800a494:	f7fb f860 	bl	8005558 <init_WallControl>
			modeacc=100;//エラー用
 800a498:	4b2c      	ldr	r3, [pc, #176]	; (800a54c <interrupt_FailSafe+0x1dc>)
 800a49a:	2264      	movs	r2, #100	; 0x64
 800a49c:	701a      	strb	r2, [r3, #0]
 800a49e:	e009      	b.n	800a4b4 <interrupt_FailSafe+0x144>
			//pl_R_DriveMotor_mode(MOTOR_BREAK);
			//pl_L_DriveMotor_mode(MOTOR_BREAK);
		}else{
			pl_DriveMotor_standby(OFF);
 800a4a0:	2000      	movs	r0, #0
 800a4a2:	f7fe f881 	bl	80085a8 <pl_DriveMotor_standby>
			pl_DriveMotor_stop();
 800a4a6:	f7fe f8e5 	bl	8008674 <pl_DriveMotor_stop>
			pl_FunMotor_stop();
 800a4aa:	f7fe f911 	bl	80086d0 <pl_FunMotor_stop>
			modeacc=0;
 800a4ae:	4b27      	ldr	r3, [pc, #156]	; (800a54c <interrupt_FailSafe+0x1dc>)
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	701a      	strb	r2, [r3, #0]
		}
					NoWallCountL90 = 4294967295;
 800a4b4:	4b30      	ldr	r3, [pc, #192]	; (800a578 <interrupt_FailSafe+0x208>)
 800a4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ba:	601a      	str	r2, [r3, #0]
					NoWallCountR90 = 4294967295;
 800a4bc:	4b2f      	ldr	r3, [pc, #188]	; (800a57c <interrupt_FailSafe+0x20c>)
 800a4be:	f04f 32ff 	mov.w	r2, #4294967295
 800a4c2:	601a      	str	r2, [r3, #0]
					NoWallCountL45 = 4294967295;
 800a4c4:	4b2e      	ldr	r3, [pc, #184]	; (800a580 <interrupt_FailSafe+0x210>)
 800a4c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ca:	601a      	str	r2, [r3, #0]
					NoWallCountR45 = 4294967295;
 800a4cc:	4b2d      	ldr	r3, [pc, #180]	; (800a584 <interrupt_FailSafe+0x214>)
 800a4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a4d2:	601a      	str	r2, [r3, #0]
					NoWallCountL45slant = 4294967295;
 800a4d4:	4b2c      	ldr	r3, [pc, #176]	; (800a588 <interrupt_FailSafe+0x218>)
 800a4d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4da:	601a      	str	r2, [r3, #0]
					NoWallCountR45slant = 4294967295;
 800a4dc:	4b2b      	ldr	r3, [pc, #172]	; (800a58c <interrupt_FailSafe+0x21c>)
 800a4de:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e2:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL90 = 50;
 800a4e4:	4b2a      	ldr	r3, [pc, #168]	; (800a590 <interrupt_FailSafe+0x220>)
 800a4e6:	4a2b      	ldr	r2, [pc, #172]	; (800a594 <interrupt_FailSafe+0x224>)
 800a4e8:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR90 = 50;
 800a4ea:	4b2b      	ldr	r3, [pc, #172]	; (800a598 <interrupt_FailSafe+0x228>)
 800a4ec:	4a29      	ldr	r2, [pc, #164]	; (800a594 <interrupt_FailSafe+0x224>)
 800a4ee:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45 = 20;
 800a4f0:	4b2a      	ldr	r3, [pc, #168]	; (800a59c <interrupt_FailSafe+0x22c>)
 800a4f2:	4a2b      	ldr	r2, [pc, #172]	; (800a5a0 <interrupt_FailSafe+0x230>)
 800a4f4:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45 = 20;
 800a4f6:	4b2b      	ldr	r3, [pc, #172]	; (800a5a4 <interrupt_FailSafe+0x234>)
 800a4f8:	4a29      	ldr	r2, [pc, #164]	; (800a5a0 <interrupt_FailSafe+0x230>)
 800a4fa:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant = 35;
 800a4fc:	4b2a      	ldr	r3, [pc, #168]	; (800a5a8 <interrupt_FailSafe+0x238>)
 800a4fe:	4a2b      	ldr	r2, [pc, #172]	; (800a5ac <interrupt_FailSafe+0x23c>)
 800a500:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant = 35;
 800a502:	4b2b      	ldr	r3, [pc, #172]	; (800a5b0 <interrupt_FailSafe+0x240>)
 800a504:	4a29      	ldr	r2, [pc, #164]	; (800a5ac <interrupt_FailSafe+0x23c>)
 800a506:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant2 = 35;
 800a508:	4b2a      	ldr	r3, [pc, #168]	; (800a5b4 <interrupt_FailSafe+0x244>)
 800a50a:	4a28      	ldr	r2, [pc, #160]	; (800a5ac <interrupt_FailSafe+0x23c>)
 800a50c:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant2 = 35;
 800a50e:	4b2a      	ldr	r3, [pc, #168]	; (800a5b8 <interrupt_FailSafe+0x248>)
 800a510:	4a26      	ldr	r2, [pc, #152]	; (800a5ac <interrupt_FailSafe+0x23c>)
 800a512:	601a      	str	r2, [r3, #0]
					g_acc_flag=4;
 800a514:	4b29      	ldr	r3, [pc, #164]	; (800a5bc <interrupt_FailSafe+0x24c>)
 800a516:	2204      	movs	r2, #4
 800a518:	701a      	strb	r2, [r3, #0]
					g_wallCut_mode = 0;
 800a51a:	4b29      	ldr	r3, [pc, #164]	; (800a5c0 <interrupt_FailSafe+0x250>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	701a      	strb	r2, [r3, #0]
	}else{
		error_time_count=0;
	}


}
 800a520:	e002      	b.n	800a528 <interrupt_FailSafe+0x1b8>
		error_time_count=0;
 800a522:	4b14      	ldr	r3, [pc, #80]	; (800a574 <interrupt_FailSafe+0x204>)
 800a524:	2200      	movs	r2, #0
 800a526:	601a      	str	r2, [r3, #0]
}
 800a528:	bf00      	nop
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	20000814 	.word	0x20000814
 800a534:	20000818 	.word	0x20000818
 800a538:	2000081c 	.word	0x2000081c
 800a53c:	20000820 	.word	0x20000820
 800a540:	20000824 	.word	0x20000824
 800a544:	20000828 	.word	0x20000828
 800a548:	2000082c 	.word	0x2000082c
 800a54c:	20000534 	.word	0x20000534
 800a550:	20000812 	.word	0x20000812
 800a554:	20000813 	.word	0x20000813
 800a558:	200004e8 	.word	0x200004e8
 800a55c:	2000026c 	.word	0x2000026c
 800a560:	20000278 	.word	0x20000278
 800a564:	200004dc 	.word	0x200004dc
 800a568:	2000025c 	.word	0x2000025c
 800a56c:	20000258 	.word	0x20000258
 800a570:	2000f284 	.word	0x2000f284
 800a574:	20000830 	.word	0x20000830
 800a578:	200005c4 	.word	0x200005c4
 800a57c:	200005c0 	.word	0x200005c0
 800a580:	200005cc 	.word	0x200005cc
 800a584:	200005c8 	.word	0x200005c8
 800a588:	200005d4 	.word	0x200005d4
 800a58c:	200005d0 	.word	0x200005d0
 800a590:	200005dc 	.word	0x200005dc
 800a594:	42480000 	.word	0x42480000
 800a598:	200005d8 	.word	0x200005d8
 800a59c:	200005e4 	.word	0x200005e4
 800a5a0:	41a00000 	.word	0x41a00000
 800a5a4:	200005e0 	.word	0x200005e0
 800a5a8:	200005ec 	.word	0x200005ec
 800a5ac:	420c0000 	.word	0x420c0000
 800a5b0:	200005e8 	.word	0x200005e8
 800a5b4:	200005f4 	.word	0x200005f4
 800a5b8:	200005f0 	.word	0x200005f0
 800a5bc:	20000810 	.word	0x20000810
 800a5c0:	2000059e 	.word	0x2000059e

0800a5c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b08a      	sub	sp, #40	; 0x28
 800a5c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5ca:	f107 0314 	add.w	r3, r7, #20
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	601a      	str	r2, [r3, #0]
 800a5d2:	605a      	str	r2, [r3, #4]
 800a5d4:	609a      	str	r2, [r3, #8]
 800a5d6:	60da      	str	r2, [r3, #12]
 800a5d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a5da:	4b3a      	ldr	r3, [pc, #232]	; (800a6c4 <MX_GPIO_Init+0x100>)
 800a5dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5de:	4a39      	ldr	r2, [pc, #228]	; (800a6c4 <MX_GPIO_Init+0x100>)
 800a5e0:	f043 0304 	orr.w	r3, r3, #4
 800a5e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a5e6:	4b37      	ldr	r3, [pc, #220]	; (800a6c4 <MX_GPIO_Init+0x100>)
 800a5e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ea:	f003 0304 	and.w	r3, r3, #4
 800a5ee:	613b      	str	r3, [r7, #16]
 800a5f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a5f2:	4b34      	ldr	r3, [pc, #208]	; (800a6c4 <MX_GPIO_Init+0x100>)
 800a5f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5f6:	4a33      	ldr	r2, [pc, #204]	; (800a6c4 <MX_GPIO_Init+0x100>)
 800a5f8:	f043 0320 	orr.w	r3, r3, #32
 800a5fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a5fe:	4b31      	ldr	r3, [pc, #196]	; (800a6c4 <MX_GPIO_Init+0x100>)
 800a600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a602:	f003 0320 	and.w	r3, r3, #32
 800a606:	60fb      	str	r3, [r7, #12]
 800a608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a60a:	4b2e      	ldr	r3, [pc, #184]	; (800a6c4 <MX_GPIO_Init+0x100>)
 800a60c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a60e:	4a2d      	ldr	r2, [pc, #180]	; (800a6c4 <MX_GPIO_Init+0x100>)
 800a610:	f043 0301 	orr.w	r3, r3, #1
 800a614:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a616:	4b2b      	ldr	r3, [pc, #172]	; (800a6c4 <MX_GPIO_Init+0x100>)
 800a618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a61a:	f003 0301 	and.w	r3, r3, #1
 800a61e:	60bb      	str	r3, [r7, #8]
 800a620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a622:	4b28      	ldr	r3, [pc, #160]	; (800a6c4 <MX_GPIO_Init+0x100>)
 800a624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a626:	4a27      	ldr	r2, [pc, #156]	; (800a6c4 <MX_GPIO_Init+0x100>)
 800a628:	f043 0302 	orr.w	r3, r3, #2
 800a62c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a62e:	4b25      	ldr	r3, [pc, #148]	; (800a6c4 <MX_GPIO_Init+0x100>)
 800a630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a632:	f003 0302 	and.w	r3, r3, #2
 800a636:	607b      	str	r3, [r7, #4]
 800a638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 800a63a:	2200      	movs	r2, #0
 800a63c:	f24e 0150 	movw	r1, #57424	; 0xe050
 800a640:	4821      	ldr	r0, [pc, #132]	; (800a6c8 <MX_GPIO_Init+0x104>)
 800a642:	f012 fa13 	bl	801ca6c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 800a646:	2200      	movs	r2, #0
 800a648:	f648 1110 	movw	r1, #35088	; 0x8910
 800a64c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a650:	f012 fa0c 	bl	801ca6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 800a654:	2200      	movs	r2, #0
 800a656:	f64e 4196 	movw	r1, #60566	; 0xec96
 800a65a:	481c      	ldr	r0, [pc, #112]	; (800a6cc <MX_GPIO_Init+0x108>)
 800a65c:	f012 fa06 	bl	801ca6c <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 800a660:	f24e 0350 	movw	r3, #57424	; 0xe050
 800a664:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a666:	2301      	movs	r3, #1
 800a668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a66a:	2300      	movs	r3, #0
 800a66c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a66e:	2300      	movs	r3, #0
 800a670:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a672:	f107 0314 	add.w	r3, r7, #20
 800a676:	4619      	mov	r1, r3
 800a678:	4813      	ldr	r0, [pc, #76]	; (800a6c8 <MX_GPIO_Init+0x104>)
 800a67a:	f012 f875 	bl	801c768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 800a67e:	f648 1310 	movw	r3, #35088	; 0x8910
 800a682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a684:	2301      	movs	r3, #1
 800a686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a688:	2300      	movs	r3, #0
 800a68a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a68c:	2300      	movs	r3, #0
 800a68e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a690:	f107 0314 	add.w	r3, r7, #20
 800a694:	4619      	mov	r1, r3
 800a696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a69a:	f012 f865 	bl	801c768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 800a69e:	f64e 4396 	movw	r3, #60566	; 0xec96
 800a6a2:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a6b0:	f107 0314 	add.w	r3, r7, #20
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	4805      	ldr	r0, [pc, #20]	; (800a6cc <MX_GPIO_Init+0x108>)
 800a6b8:	f012 f856 	bl	801c768 <HAL_GPIO_Init>

}
 800a6bc:	bf00      	nop
 800a6be:	3728      	adds	r7, #40	; 0x28
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	40021000 	.word	0x40021000
 800a6c8:	48000800 	.word	0x48000800
 800a6cc:	48000400 	.word	0x48000400

0800a6d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a6d0:	b590      	push	{r4, r7, lr}
 800a6d2:	b089      	sub	sp, #36	; 0x24
 800a6d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a6d6:	f00e ff95 	bl	8019604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a6da:	f000 f8ab 	bl	800a834 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 800a6de:	f7ff fddb 	bl	800a298 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a6e2:	f7ff ff6f 	bl	800a5c4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800a6e6:	f7fe facd 	bl	8008c84 <MX_ADC1_Init>
  MX_SPI1_Init();
 800a6ea:	f00d fa99 	bl	8017c20 <MX_SPI1_Init>
  MX_TIM6_Init();
 800a6ee:	f00d fd05 	bl	80180fc <MX_TIM6_Init>
  MX_TIM8_Init();
 800a6f2:	f00d fd39 	bl	8018168 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800a6f6:	f00e feb7 	bl	8019468 <MX_USART1_UART_Init>
  MX_DMA_Init();
 800a6fa:	f7ff fdcd 	bl	800a298 <MX_DMA_Init>
  MX_SPI3_Init();
 800a6fe:	f00d facd 	bl	8017c9c <MX_SPI3_Init>
  MX_TIM16_Init();
 800a702:	f00d fdd1 	bl	80182a8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  pl_timer_init();
 800a706:	f7fe f9cf 	bl	8008aa8 <pl_timer_init>
  pl_gyro_init();
 800a70a:	f7fd fe61 	bl	80083d0 <pl_gyro_init>
  pl_sensor_init();
 800a70e:	f7fe f80f 	bl	8008730 <pl_sensor_init>
  reset_distance();
 800a712:	f7f6 fc43 	bl	8000f9c <reset_distance>
  reset_gyro();
 800a716:	f7f7 fa77 	bl	8001c08 <reset_gyro>
  reset_speed();
 800a71a:	f7f6 fc83 	bl	8001024 <reset_speed>
  record_reset();
 800a71e:	f00c ffd1 	bl	80176c4 <record_reset>
  pl_motor_init();
 800a722:	f7fd ff1b 	bl	800855c <pl_motor_init>
  PID_Init();
 800a726:	f7fa fd87 	bl	8005238 <PID_Init>
  init_WallControl();
 800a72a:	f7fa ff15 	bl	8005558 <init_WallControl>
  Control_mode_Init();
 800a72e:	f7f7 fdcd 	bl	80022cc <Control_mode_Init>
  init_FailSafe();
 800a732:	f7ff fddb 	bl	800a2ec <init_FailSafe>
  input_parameter();
 800a736:	f00d ff97 	bl	8018668 <input_parameter>

	//uint8_t hello[] = "Hello World\n\r";
  //float PI=3.14;
  //uint8_t hoge = 3;
  int mode=0;
 800a73a:	2300      	movs	r3, #0
 800a73c:	617b      	str	r3, [r7, #20]
  int a=0;
 800a73e:	2300      	movs	r3, #0
 800a740:	607b      	str	r3, [r7, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800a742:	4b38      	ldr	r3, [pc, #224]	; (800a824 <main+0x154>)
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	4619      	mov	r1, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800a748:	4b36      	ldr	r3, [pc, #216]	; (800a824 <main+0x154>)
 800a74a:	885b      	ldrh	r3, [r3, #2]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800a74c:	4618      	mov	r0, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800a74e:	4b35      	ldr	r3, [pc, #212]	; (800a824 <main+0x154>)
 800a750:	889b      	ldrh	r3, [r3, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800a752:	461c      	mov	r4, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800a754:	4b33      	ldr	r3, [pc, #204]	; (800a824 <main+0x154>)
 800a756:	88db      	ldrh	r3, [r3, #6]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800a758:	461a      	mov	r2, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800a75a:	4b32      	ldr	r3, [pc, #200]	; (800a824 <main+0x154>)
 800a75c:	891b      	ldrh	r3, [r3, #8]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800a75e:	9301      	str	r3, [sp, #4]
 800a760:	9200      	str	r2, [sp, #0]
 800a762:	4623      	mov	r3, r4
 800a764:	4602      	mov	r2, r0
 800a766:	4830      	ldr	r0, [pc, #192]	; (800a828 <main+0x158>)
 800a768:	f016 ff16 	bl	8021598 <iprintf>
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800a76c:	4b2f      	ldr	r3, [pc, #188]	; (800a82c <main+0x15c>)
 800a76e:	881b      	ldrh	r3, [r3, #0]
 800a770:	4619      	mov	r1, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800a772:	4b2e      	ldr	r3, [pc, #184]	; (800a82c <main+0x15c>)
 800a774:	885b      	ldrh	r3, [r3, #2]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800a776:	4618      	mov	r0, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800a778:	4b2c      	ldr	r3, [pc, #176]	; (800a82c <main+0x15c>)
 800a77a:	889b      	ldrh	r3, [r3, #4]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800a77c:	461c      	mov	r4, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800a77e:	4b2b      	ldr	r3, [pc, #172]	; (800a82c <main+0x15c>)
 800a780:	88db      	ldrh	r3, [r3, #6]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800a782:	461a      	mov	r2, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800a784:	4b29      	ldr	r3, [pc, #164]	; (800a82c <main+0x15c>)
 800a786:	891b      	ldrh	r3, [r3, #8]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800a788:	9301      	str	r3, [sp, #4]
 800a78a:	9200      	str	r2, [sp, #0]
 800a78c:	4623      	mov	r3, r4
 800a78e:	4602      	mov	r2, r0
 800a790:	4827      	ldr	r0, [pc, #156]	; (800a830 <main+0x160>)
 800a792:	f016 ff01 	bl	8021598 <iprintf>


//起動cheak
	int yellow_count=1;
 800a796:	2301      	movs	r3, #1
 800a798:	613b      	str	r3, [r7, #16]
	for(int i=0;i<8;i++){
 800a79a:	2300      	movs	r3, #0
 800a79c:	60fb      	str	r3, [r7, #12]
 800a79e:	e00d      	b.n	800a7bc <main+0xec>
		pl_yellow_LED_count(yellow_count);
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7fd f9bf 	bl	8007b28 <pl_yellow_LED_count>
		HAL_Delay(50);
 800a7aa:	2032      	movs	r0, #50	; 0x32
 800a7ac:	f00e ffa2 	bl	80196f4 <HAL_Delay>
		yellow_count=yellow_count*2;
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	005b      	lsls	r3, r3, #1
 800a7b4:	613b      	str	r3, [r7, #16]
	for(int i=0;i<8;i++){
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	60fb      	str	r3, [r7, #12]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2b07      	cmp	r3, #7
 800a7c0:	ddee      	ble.n	800a7a0 <main+0xd0>
	}
	for(int i=0;i<9;i++){
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	60bb      	str	r3, [r7, #8]
 800a7c6:	e00f      	b.n	800a7e8 <main+0x118>
			pl_yellow_LED_count(yellow_count);
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7fd f9ab 	bl	8007b28 <pl_yellow_LED_count>
			HAL_Delay(50);
 800a7d2:	2032      	movs	r0, #50	; 0x32
 800a7d4:	f00e ff8e 	bl	80196f4 <HAL_Delay>
			yellow_count=yellow_count/2;
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	0fda      	lsrs	r2, r3, #31
 800a7dc:	4413      	add	r3, r2
 800a7de:	105b      	asrs	r3, r3, #1
 800a7e0:	613b      	str	r3, [r7, #16]
	for(int i=0;i<9;i++){
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	60bb      	str	r3, [r7, #8]
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	2b08      	cmp	r3, #8
 800a7ec:	ddec      	ble.n	800a7c8 <main+0xf8>
	}
	battcheak();
 800a7ee:	f7f7 fc2f 	bl	8002050 <battcheak>
//		tim1 = toc_timer();
//		maze_display();
//		maze_display_Dijkstra();
//		printf("tim1=%f,tim2=%f\n", tim1, tim2);

	  		mode=mode_decision(mode);
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f00b f8fe 	bl	80159f8 <mode_decision>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	617b      	str	r3, [r7, #20]
//	  		clear_Ierror();
	  		reset_distance();
 800a800:	f7f6 fbcc 	bl	8000f9c <reset_distance>
	  		reset_gyro();
 800a804:	f7f7 fa00 	bl	8001c08 <reset_gyro>
	  		reset_speed();
 800a808:	f7f6 fc0c 	bl	8001024 <reset_speed>

	  		mode_execution(mode);
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	4618      	mov	r0, r3
 800a812:	f00b f9eb 	bl	8015bec <mode_execution>

// failsafe後の修理
	  		Control_mode_Init();
 800a816:	f7f7 fd59 	bl	80022cc <Control_mode_Init>
	  		init_WallControl();
 800a81a:	f7fa fe9d 	bl	8005558 <init_WallControl>
	  		init_FailSafe();
 800a81e:	f7ff fd65 	bl	800a2ec <init_FailSafe>
	  		mode=mode_decision(mode);
 800a822:	e7e6      	b.n	800a7f2 <main+0x122>
 800a824:	20000718 	.word	0x20000718
 800a828:	08024f98 	.word	0x08024f98
 800a82c:	20000724 	.word	0x20000724
 800a830:	08024fc4 	.word	0x08024fc4

0800a834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b094      	sub	sp, #80	; 0x50
 800a838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a83a:	f107 0318 	add.w	r3, r7, #24
 800a83e:	2238      	movs	r2, #56	; 0x38
 800a840:	2100      	movs	r1, #0
 800a842:	4618      	mov	r0, r3
 800a844:	f016 fa36 	bl	8020cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a848:	1d3b      	adds	r3, r7, #4
 800a84a:	2200      	movs	r2, #0
 800a84c:	601a      	str	r2, [r3, #0]
 800a84e:	605a      	str	r2, [r3, #4]
 800a850:	609a      	str	r2, [r3, #8]
 800a852:	60da      	str	r2, [r3, #12]
 800a854:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800a856:	2000      	movs	r0, #0
 800a858:	f012 f920 	bl	801ca9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a85c:	2301      	movs	r3, #1
 800a85e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a860:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a864:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a866:	2302      	movs	r3, #2
 800a868:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a86a:	2303      	movs	r3, #3
 800a86c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800a86e:	2304      	movs	r3, #4
 800a870:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800a872:	2355      	movs	r3, #85	; 0x55
 800a874:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a876:	2302      	movs	r3, #2
 800a878:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a87a:	2302      	movs	r3, #2
 800a87c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a87e:	2302      	movs	r3, #2
 800a880:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a882:	f107 0318 	add.w	r3, r7, #24
 800a886:	4618      	mov	r0, r3
 800a888:	f012 f9bc 	bl	801cc04 <HAL_RCC_OscConfig>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d001      	beq.n	800a896 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800a892:	f000 f81a 	bl	800a8ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a896:	230f      	movs	r3, #15
 800a898:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a89a:	2303      	movs	r3, #3
 800a89c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a8a2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800a8a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a8a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a8ae:	1d3b      	adds	r3, r7, #4
 800a8b0:	2104      	movs	r1, #4
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f012 fcbe 	bl	801d234 <HAL_RCC_ClockConfig>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d001      	beq.n	800a8c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800a8be:	f000 f804 	bl	800a8ca <Error_Handler>
  }
}
 800a8c2:	bf00      	nop
 800a8c4:	3750      	adds	r7, #80	; 0x50
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a8ca:	b480      	push	{r7}
 800a8cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a8ce:	b672      	cpsid	i
}
 800a8d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a8d2:	e7fe      	b.n	800a8d2 <Error_Handler+0x8>

0800a8d4 <backTurn_controlWall>:
	}
	wait_ms_NoReset(150);

}

void backTurn_controlWall(float input_TurningVelocity,float input_TurningAcceleration,_Bool front_wall,_Bool left_wall,_Bool right_wall){
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	ed87 0a03 	vstr	s0, [r7, #12]
 800a8de:	edc7 0a02 	vstr	s1, [r7, #8]
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	71fb      	strb	r3, [r7, #7]
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	71bb      	strb	r3, [r7, #6]
 800a8ea:	4613      	mov	r3, r2
 800a8ec:	717b      	strb	r3, [r7, #5]
	no_safty = 1;
 800a8ee:	4b5e      	ldr	r3, [pc, #376]	; (800aa68 <backTurn_controlWall+0x194>)
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	701a      	strb	r2, [r3, #0]
	if(front_wall){
 800a8f4:	79fb      	ldrb	r3, [r7, #7]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00a      	beq.n	800a910 <backTurn_controlWall+0x3c>
		no_frontwall_straight();
 800a8fa:	f7fa f9f9 	bl	8004cf0 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a8fe:	2003      	movs	r0, #3
 800a900:	f7fd fe84 	bl	800860c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a904:	2003      	movs	r0, #3
 800a906:	f7fd fe59 	bl	80085bc <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 800a90a:	2032      	movs	r0, #50	; 0x32
 800a90c:	f7fe f97c 	bl	8008c08 <wait_ms_NoReset>
	}
	if(left_wall){
 800a910:	79bb      	ldrb	r3, [r7, #6]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d02c      	beq.n	800a970 <backTurn_controlWall+0x9c>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800a916:	ed97 2a02 	vldr	s4, [r7, #8]
 800a91a:	edd7 1a03 	vldr	s3, [r7, #12]
 800a91e:	ed9f 1a53 	vldr	s2, [pc, #332]	; 800aa6c <backTurn_controlWall+0x198>
 800a922:	eddf 0a52 	vldr	s1, [pc, #328]	; 800aa6c <backTurn_controlWall+0x198>
 800a926:	ed9f 0a52 	vldr	s0, [pc, #328]	; 800aa70 <backTurn_controlWall+0x19c>
 800a92a:	f7f9 fedb 	bl	80046e4 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a92e:	2003      	movs	r0, #3
 800a930:	f7fd fe6c 	bl	800860c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a934:	2003      	movs	r0, #3
 800a936:	f7fd fe41 	bl	80085bc <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800a93a:	2032      	movs	r0, #50	; 0x32
 800a93c:	f7fe f964 	bl	8008c08 <wait_ms_NoReset>
		no_frontwall_straight();
 800a940:	f7fa f9d6 	bl	8004cf0 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a944:	2003      	movs	r0, #3
 800a946:	f7fd fe61 	bl	800860c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a94a:	2003      	movs	r0, #3
 800a94c:	f7fd fe36 	bl	80085bc <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 800a950:	2032      	movs	r0, #50	; 0x32
 800a952:	f7fe f959 	bl	8008c08 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800a956:	ed97 2a02 	vldr	s4, [r7, #8]
 800a95a:	edd7 1a03 	vldr	s3, [r7, #12]
 800a95e:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800aa6c <backTurn_controlWall+0x198>
 800a962:	eddf 0a42 	vldr	s1, [pc, #264]	; 800aa6c <backTurn_controlWall+0x198>
 800a966:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800aa70 <backTurn_controlWall+0x19c>
 800a96a:	f7f9 febb 	bl	80046e4 <turning_table2>
 800a96e:	e06a      	b.n	800aa46 <backTurn_controlWall+0x172>
	}else if(left_wall==0 && right_wall){
 800a970:	79bb      	ldrb	r3, [r7, #6]
 800a972:	f083 0301 	eor.w	r3, r3, #1
 800a976:	b2db      	uxtb	r3, r3
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d037      	beq.n	800a9ec <backTurn_controlWall+0x118>
 800a97c:	797b      	ldrb	r3, [r7, #5]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d034      	beq.n	800a9ec <backTurn_controlWall+0x118>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800a982:	edd7 7a03 	vldr	s15, [r7, #12]
 800a986:	eef1 7a67 	vneg.f32	s15, s15
 800a98a:	ed97 2a02 	vldr	s4, [r7, #8]
 800a98e:	eef0 1a67 	vmov.f32	s3, s15
 800a992:	ed9f 1a36 	vldr	s2, [pc, #216]	; 800aa6c <backTurn_controlWall+0x198>
 800a996:	eddf 0a35 	vldr	s1, [pc, #212]	; 800aa6c <backTurn_controlWall+0x198>
 800a99a:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800aa74 <backTurn_controlWall+0x1a0>
 800a99e:	f7f9 fea1 	bl	80046e4 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a9a2:	2003      	movs	r0, #3
 800a9a4:	f7fd fe32 	bl	800860c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a9a8:	2003      	movs	r0, #3
 800a9aa:	f7fd fe07 	bl	80085bc <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800a9ae:	2032      	movs	r0, #50	; 0x32
 800a9b0:	f7fe f92a 	bl	8008c08 <wait_ms_NoReset>
		no_frontwall_straight();
 800a9b4:	f7fa f99c 	bl	8004cf0 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a9b8:	2003      	movs	r0, #3
 800a9ba:	f7fd fe27 	bl	800860c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a9be:	2003      	movs	r0, #3
 800a9c0:	f7fd fdfc 	bl	80085bc <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 800a9c4:	2032      	movs	r0, #50	; 0x32
 800a9c6:	f7fe f91f 	bl	8008c08 <wait_ms_NoReset>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800a9ca:	edd7 7a03 	vldr	s15, [r7, #12]
 800a9ce:	eef1 7a67 	vneg.f32	s15, s15
 800a9d2:	ed97 2a02 	vldr	s4, [r7, #8]
 800a9d6:	eef0 1a67 	vmov.f32	s3, s15
 800a9da:	ed9f 1a24 	vldr	s2, [pc, #144]	; 800aa6c <backTurn_controlWall+0x198>
 800a9de:	eddf 0a23 	vldr	s1, [pc, #140]	; 800aa6c <backTurn_controlWall+0x198>
 800a9e2:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800aa74 <backTurn_controlWall+0x1a0>
 800a9e6:	f7f9 fe7d 	bl	80046e4 <turning_table2>
 800a9ea:	e02c      	b.n	800aa46 <backTurn_controlWall+0x172>
	}else if(left_wall==0 && right_wall==0){
 800a9ec:	79bb      	ldrb	r3, [r7, #6]
 800a9ee:	f083 0301 	eor.w	r3, r3, #1
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d026      	beq.n	800aa46 <backTurn_controlWall+0x172>
 800a9f8:	797b      	ldrb	r3, [r7, #5]
 800a9fa:	f083 0301 	eor.w	r3, r3, #1
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d020      	beq.n	800aa46 <backTurn_controlWall+0x172>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800aa04:	ed97 2a02 	vldr	s4, [r7, #8]
 800aa08:	edd7 1a03 	vldr	s3, [r7, #12]
 800aa0c:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800aa6c <backTurn_controlWall+0x198>
 800aa10:	eddf 0a16 	vldr	s1, [pc, #88]	; 800aa6c <backTurn_controlWall+0x198>
 800aa14:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800aa70 <backTurn_controlWall+0x19c>
 800aa18:	f7f9 fe64 	bl	80046e4 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800aa1c:	2003      	movs	r0, #3
 800aa1e:	f7fd fdf5 	bl	800860c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800aa22:	2003      	movs	r0, #3
 800aa24:	f7fd fdca 	bl	80085bc <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800aa28:	2032      	movs	r0, #50	; 0x32
 800aa2a:	f7fe f8ed 	bl	8008c08 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800aa2e:	ed97 2a02 	vldr	s4, [r7, #8]
 800aa32:	edd7 1a03 	vldr	s3, [r7, #12]
 800aa36:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 800aa6c <backTurn_controlWall+0x198>
 800aa3a:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800aa6c <backTurn_controlWall+0x198>
 800aa3e:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800aa70 <backTurn_controlWall+0x19c>
 800aa42:	f7f9 fe4f 	bl	80046e4 <turning_table2>
	}
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800aa46:	2003      	movs	r0, #3
 800aa48:	f7fd fde0 	bl	800860c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800aa4c:	2003      	movs	r0, #3
 800aa4e:	f7fd fdb5 	bl	80085bc <pl_L_DriveMotor_mode>
	wait_ms_NoReset(150);
 800aa52:	2096      	movs	r0, #150	; 0x96
 800aa54:	f7fe f8d8 	bl	8008c08 <wait_ms_NoReset>
	no_safty = 0;
 800aa58:	4b03      	ldr	r3, [pc, #12]	; (800aa68 <backTurn_controlWall+0x194>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	701a      	strb	r2, [r3, #0]
}
 800aa5e:	bf00      	nop
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	20000812 	.word	0x20000812
 800aa6c:	00000000 	.word	0x00000000
 800aa70:	42b40000 	.word	0x42b40000
 800aa74:	c2b40000 	.word	0xc2b40000

0800aa78 <slalomR>:


void slalomR(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800aa78:	b084      	sub	sp, #16
 800aa7a:	b5b0      	push	{r4, r5, r7, lr}
 800aa7c:	ed2d 8b02 	vpush	{d8}
 800aa80:	b084      	sub	sp, #16
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800aa88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800aa8c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800aa90:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	f040 80f5 	bne.w	800ac84 <slalomR+0x20c>
		highspeed_mode = 0;
 800aa9a:	4be3      	ldr	r3, [pc, #908]	; (800ae28 <slalomR+0x3b0>)
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800aaac:	2300      	movs	r3, #0
 800aaae:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800aab0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d11f      	bne.n	800aaf8 <slalomR+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800aab8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800aabc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aac0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aac4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aac8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aacc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800aad0:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800aad4:	eddf 5ad5 	vldr	s11, [pc, #852]	; 800ae2c <slalomR+0x3b4>
 800aad8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	eeb0 2a47 	vmov.f32	s4, s14
 800aae2:	eef0 1a46 	vmov.f32	s3, s12
 800aae6:	eeb0 1a66 	vmov.f32	s2, s13
 800aaea:	eddf 0ad1 	vldr	s1, [pc, #836]	; 800ae30 <slalomR+0x3b8>
 800aaee:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 800ae34 <slalomR+0x3bc>
 800aaf2:	f7f9 f8cd 	bl	8003c90 <straight_table2>
 800aaf6:	e01e      	b.n	800ab36 <slalomR+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800aaf8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800aafc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ab00:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab0c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ab10:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800ab14:	eddf 5ac5 	vldr	s11, [pc, #788]	; 800ae2c <slalomR+0x3b4>
 800ab18:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ab1c:	68f8      	ldr	r0, [r7, #12]
 800ab1e:	eeb0 2a47 	vmov.f32	s4, s14
 800ab22:	eef0 1a46 	vmov.f32	s3, s12
 800ab26:	eeb0 1a66 	vmov.f32	s2, s13
 800ab2a:	eddf 0ac1 	vldr	s1, [pc, #772]	; 800ae30 <slalomR+0x3b8>
 800ab2e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800ae38 <slalomR+0x3c0>
 800ab32:	f7f9 f8ad 	bl	8003c90 <straight_table2>
		}
		wallmode.WallCutMode=1;
 800ab36:	2301      	movs	r3, #1
 800ab38:	73fb      	strb	r3, [r7, #15]
		wallmode.WallControlMode=0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	733b      	strb	r3, [r7, #12]
		if(shortest_mode==0){
 800ab3e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d127      	bne.n	800ab96 <slalomR+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab46:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ab4a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800ab4e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ab52:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ab56:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ab5a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ab5e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab62:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab66:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab6a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ab6e:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab72:	eddf 4aae 	vldr	s9, [pc, #696]	; 800ae2c <slalomR+0x3b4>
 800ab76:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	eeb0 2a47 	vmov.f32	s4, s14
 800ab80:	eef0 1a45 	vmov.f32	s3, s10
 800ab84:	eeb0 1a65 	vmov.f32	s2, s11
 800ab88:	eef0 0a46 	vmov.f32	s1, s12
 800ab8c:	eeb0 0a66 	vmov.f32	s0, s13
 800ab90:	f7f9 f87e 	bl	8003c90 <straight_table2>
 800ab94:	e022      	b.n	800abdc <slalomR+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab96:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ab9a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ab9e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800aba2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aba6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800abaa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abb2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800abb6:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800abba:	eddf 4a9c 	vldr	s9, [pc, #624]	; 800ae2c <slalomR+0x3b4>
 800abbe:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	eeb0 2a47 	vmov.f32	s4, s14
 800abc8:	eef0 1a45 	vmov.f32	s3, s10
 800abcc:	eeb0 1a65 	vmov.f32	s2, s11
 800abd0:	eef0 0a46 	vmov.f32	s1, s12
 800abd4:	eeb0 0a66 	vmov.f32	s0, s13
 800abd8:	f7f9 f85a 	bl	8003c90 <straight_table2>
		}
		if(mollifier_mode == ON){
 800abdc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d10c      	bne.n	800abfe <slalomR+0x186>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800abe4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abe8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800abec:	eeb0 1a47 	vmov.f32	s2, s14
 800abf0:	eddf 0a92 	vldr	s1, [pc, #584]	; 800ae3c <slalomR+0x3c4>
 800abf4:	eeb0 0a67 	vmov.f32	s0, s15
 800abf8:	f7f9 ffe6 	bl	8004bc8 <mollifier_slalom_table>
 800abfc:	e015      	b.n	800ac2a <slalomR+0x1b2>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800abfe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac02:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ac06:	eef1 7a67 	vneg.f32	s15, s15
 800ac0a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ac0e:	eef0 2a66 	vmov.f32	s5, s13
 800ac12:	eeb0 2a67 	vmov.f32	s4, s15
 800ac16:	eddf 1a86 	vldr	s3, [pc, #536]	; 800ae30 <slalomR+0x3b8>
 800ac1a:	ed9f 1a85 	vldr	s2, [pc, #532]	; 800ae30 <slalomR+0x3b8>
 800ac1e:	eddf 0a87 	vldr	s1, [pc, #540]	; 800ae3c <slalomR+0x3c4>
 800ac22:	eeb0 0a47 	vmov.f32	s0, s14
 800ac26:	f7f9 fe7f 	bl	8004928 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ac32:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ac36:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800ae2c <slalomR+0x3b4>
 800ac3a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ac3e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ac42:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ac46:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac4a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac52:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ac56:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ac5a:	ed9f 5a74 	vldr	s10, [pc, #464]	; 800ae2c <slalomR+0x3b4>
 800ac5e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	eeb0 2a47 	vmov.f32	s4, s14
 800ac68:	eef0 1a65 	vmov.f32	s3, s11
 800ac6c:	ed9f 1a70 	vldr	s2, [pc, #448]	; 800ae30 <slalomR+0x3b8>
 800ac70:	eef0 0a46 	vmov.f32	s1, s12
 800ac74:	eeb0 0a66 	vmov.f32	s0, s13
 800ac78:	f7f9 f80a 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800ac7c:	4b6a      	ldr	r3, [pc, #424]	; (800ae28 <slalomR+0x3b0>)
 800ac7e:	2200      	movs	r2, #0
 800ac80:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
//		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
//										fabs(end_velocity*end_velocity-turnpara.g_speed * turnpara.g_speed)  / 2 / turnpara.e_ofset,wallmode);
	}
}
 800ac82:	e0c8      	b.n	800ae16 <slalomR+0x39e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800ac84:	2300      	movs	r3, #0
 800ac86:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ac90:	2300      	movs	r3, #0
 800ac92:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800ac94:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d127      	bne.n	800acec <slalomR+0x274>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ac9c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800aca0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800aca4:	ee77 6a87 	vadd.f32	s13, s15, s14
 800aca8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800acac:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800acb0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800acb4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800acb8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800acbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800acc0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800acc4:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800acc8:	eddf 4a58 	vldr	s9, [pc, #352]	; 800ae2c <slalomR+0x3b4>
 800accc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	eeb0 2a47 	vmov.f32	s4, s14
 800acd6:	eef0 1a45 	vmov.f32	s3, s10
 800acda:	eeb0 1a65 	vmov.f32	s2, s11
 800acde:	eef0 0a46 	vmov.f32	s1, s12
 800ace2:	eeb0 0a66 	vmov.f32	s0, s13
 800ace6:	f7f8 ffd3 	bl	8003c90 <straight_table2>
 800acea:	e022      	b.n	800ad32 <slalomR+0x2ba>
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800acec:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800acf0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800acf4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800acf8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800acfc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad00:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad04:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad08:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ad0c:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad10:	eddf 4a46 	vldr	s9, [pc, #280]	; 800ae2c <slalomR+0x3b4>
 800ad14:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	eeb0 2a47 	vmov.f32	s4, s14
 800ad1e:	eef0 1a45 	vmov.f32	s3, s10
 800ad22:	eeb0 1a65 	vmov.f32	s2, s11
 800ad26:	eef0 0a46 	vmov.f32	s1, s12
 800ad2a:	eeb0 0a66 	vmov.f32	s0, s13
 800ad2e:	f7f8 ffaf 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800ad32:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d10c      	bne.n	800ad54 <slalomR+0x2dc>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800ad3a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad3e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ad42:	eeb0 1a47 	vmov.f32	s2, s14
 800ad46:	eddf 0a3d 	vldr	s1, [pc, #244]	; 800ae3c <slalomR+0x3c4>
 800ad4a:	eeb0 0a67 	vmov.f32	s0, s15
 800ad4e:	f7f9 ff3b 	bl	8004bc8 <mollifier_slalom_table>
 800ad52:	e015      	b.n	800ad80 <slalomR+0x308>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ad54:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad58:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ad5c:	eef1 7a67 	vneg.f32	s15, s15
 800ad60:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ad64:	eef0 2a66 	vmov.f32	s5, s13
 800ad68:	eeb0 2a67 	vmov.f32	s4, s15
 800ad6c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ae30 <slalomR+0x3b8>
 800ad70:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ae30 <slalomR+0x3b8>
 800ad74:	eddf 0a31 	vldr	s1, [pc, #196]	; 800ae3c <slalomR+0x3c4>
 800ad78:	eeb0 0a47 	vmov.f32	s0, s14
 800ad7c:	f7f9 fdd4 	bl	8004928 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800ad80:	2300      	movs	r3, #0
 800ad82:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ad84:	2300      	movs	r3, #0
 800ad86:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ad88:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800ad8c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ad90:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad94:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad98:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad9c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ada0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ada4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ada8:	eef0 7ae7 	vabs.f32	s15, s15
 800adac:	ee17 0a90 	vmov	r0, s15
 800adb0:	f7f5 fbf2 	bl	8000598 <__aeabi_f2d>
 800adb4:	f04f 0200 	mov.w	r2, #0
 800adb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800adbc:	f7f5 fd6e 	bl	800089c <__aeabi_ddiv>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	4614      	mov	r4, r2
 800adc6:	461d      	mov	r5, r3
 800adc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adca:	4618      	mov	r0, r3
 800adcc:	f7f5 fbe4 	bl	8000598 <__aeabi_f2d>
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	4620      	mov	r0, r4
 800add6:	4629      	mov	r1, r5
 800add8:	f7f5 fd60 	bl	800089c <__aeabi_ddiv>
 800addc:	4602      	mov	r2, r0
 800adde:	460b      	mov	r3, r1
 800ade0:	4610      	mov	r0, r2
 800ade2:	4619      	mov	r1, r3
 800ade4:	f04f 0200 	mov.w	r2, #0
 800ade8:	4b15      	ldr	r3, [pc, #84]	; (800ae40 <slalomR+0x3c8>)
 800adea:	f7f5 fa77 	bl	80002dc <__adddf3>
 800adee:	4602      	mov	r2, r0
 800adf0:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800adf2:	4610      	mov	r0, r2
 800adf4:	4619      	mov	r1, r3
 800adf6:	f7f5 feff 	bl	8000bf8 <__aeabi_d2f>
 800adfa:	4603      	mov	r3, r0
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	ee02 3a10 	vmov	s4, r3
 800ae02:	edd7 1a01 	vldr	s3, [r7, #4]
 800ae06:	ed97 1a01 	vldr	s2, [r7, #4]
 800ae0a:	eef0 0a68 	vmov.f32	s1, s17
 800ae0e:	eeb0 0a48 	vmov.f32	s0, s16
 800ae12:	f7f8 ff3d 	bl	8003c90 <straight_table2>
}
 800ae16:	bf00      	nop
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	ecbd 8b02 	vpop	{d8}
 800ae20:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ae24:	b004      	add	sp, #16
 800ae26:	4770      	bx	lr
 800ae28:	20000814 	.word	0x20000814
 800ae2c:	42340000 	.word	0x42340000
 800ae30:	00000000 	.word	0x00000000
 800ae34:	431b8000 	.word	0x431b8000
 800ae38:	43138000 	.word	0x43138000
 800ae3c:	c2b40000 	.word	0xc2b40000
 800ae40:	408f4000 	.word	0x408f4000

0800ae44 <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800ae44:	b084      	sub	sp, #16
 800ae46:	b5b0      	push	{r4, r5, r7, lr}
 800ae48:	ed2d 8b02 	vpush	{d8}
 800ae4c:	b084      	sub	sp, #16
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ae54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ae58:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800ae5c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	f040 80f3 	bne.w	800b04c <slalomL+0x208>
		highspeed_mode = 0;
 800ae66:	4be1      	ldr	r3, [pc, #900]	; (800b1ec <slalomL+0x3a8>)
 800ae68:	2200      	movs	r2, #0
 800ae6a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ae70:	2300      	movs	r3, #0
 800ae72:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800ae74:	2300      	movs	r3, #0
 800ae76:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800ae7c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d11f      	bne.n	800aec4 <slalomL+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800ae84:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ae88:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ae8c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae94:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae98:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ae9c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800aea0:	eddf 5ad3 	vldr	s11, [pc, #844]	; 800b1f0 <slalomL+0x3ac>
 800aea4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	eeb0 2a47 	vmov.f32	s4, s14
 800aeae:	eef0 1a46 	vmov.f32	s3, s12
 800aeb2:	eeb0 1a66 	vmov.f32	s2, s13
 800aeb6:	eddf 0acf 	vldr	s1, [pc, #828]	; 800b1f4 <slalomL+0x3b0>
 800aeba:	ed9f 0acf 	vldr	s0, [pc, #828]	; 800b1f8 <slalomL+0x3b4>
 800aebe:	f7f8 fee7 	bl	8003c90 <straight_table2>
 800aec2:	e01e      	b.n	800af02 <slalomL+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800aec4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800aec8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aecc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aed0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aed4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aed8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800aedc:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800aee0:	eddf 5ac3 	vldr	s11, [pc, #780]	; 800b1f0 <slalomL+0x3ac>
 800aee4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	eeb0 2a47 	vmov.f32	s4, s14
 800aeee:	eef0 1a46 	vmov.f32	s3, s12
 800aef2:	eeb0 1a66 	vmov.f32	s2, s13
 800aef6:	eddf 0abf 	vldr	s1, [pc, #764]	; 800b1f4 <slalomL+0x3b0>
 800aefa:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 800b1fc <slalomL+0x3b8>
 800aefe:	f7f8 fec7 	bl	8003c90 <straight_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800af02:	2300      	movs	r3, #0
 800af04:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=1;
 800af06:	2301      	movs	r3, #1
 800af08:	73fb      	strb	r3, [r7, #15]
		if(shortest_mode==0){
 800af0a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d127      	bne.n	800af62 <slalomL+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800af12:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800af16:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800af1a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800af1e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800af22:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800af26:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800af2a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800af2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af32:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af36:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800af3a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800af3e:	eddf 4aac 	vldr	s9, [pc, #688]	; 800b1f0 <slalomL+0x3ac>
 800af42:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800af46:	68f8      	ldr	r0, [r7, #12]
 800af48:	eeb0 2a47 	vmov.f32	s4, s14
 800af4c:	eef0 1a45 	vmov.f32	s3, s10
 800af50:	eeb0 1a65 	vmov.f32	s2, s11
 800af54:	eef0 0a46 	vmov.f32	s1, s12
 800af58:	eeb0 0a66 	vmov.f32	s0, s13
 800af5c:	f7f8 fe98 	bl	8003c90 <straight_table2>
 800af60:	e022      	b.n	800afa8 <slalomL+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800af62:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800af66:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800af6a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800af6e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800af72:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800af76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af7e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800af82:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800af86:	eddf 4a9a 	vldr	s9, [pc, #616]	; 800b1f0 <slalomL+0x3ac>
 800af8a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	eeb0 2a47 	vmov.f32	s4, s14
 800af94:	eef0 1a45 	vmov.f32	s3, s10
 800af98:	eeb0 1a65 	vmov.f32	s2, s11
 800af9c:	eef0 0a46 	vmov.f32	s1, s12
 800afa0:	eeb0 0a66 	vmov.f32	s0, s13
 800afa4:	f7f8 fe74 	bl	8003c90 <straight_table2>
		}
		if(mollifier_mode == ON){
 800afa8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800afac:	2b01      	cmp	r3, #1
 800afae:	d10c      	bne.n	800afca <slalomL+0x186>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800afb0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afb4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800afb8:	eeb0 1a47 	vmov.f32	s2, s14
 800afbc:	eddf 0a90 	vldr	s1, [pc, #576]	; 800b200 <slalomL+0x3bc>
 800afc0:	eeb0 0a67 	vmov.f32	s0, s15
 800afc4:	f7f9 fe00 	bl	8004bc8 <mollifier_slalom_table>
 800afc8:	e013      	b.n	800aff2 <slalomL+0x1ae>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800afca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800afd2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800afd6:	eef0 2a66 	vmov.f32	s5, s13
 800afda:	eeb0 2a47 	vmov.f32	s4, s14
 800afde:	eddf 1a85 	vldr	s3, [pc, #532]	; 800b1f4 <slalomL+0x3b0>
 800afe2:	ed9f 1a84 	vldr	s2, [pc, #528]	; 800b1f4 <slalomL+0x3b0>
 800afe6:	eddf 0a86 	vldr	s1, [pc, #536]	; 800b200 <slalomL+0x3bc>
 800afea:	eeb0 0a67 	vmov.f32	s0, s15
 800afee:	f7f9 fc9b 	bl	8004928 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800aff2:	2300      	movs	r3, #0
 800aff4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800aff6:	2300      	movs	r3, #0
 800aff8:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800affa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800affe:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800b1f0 <slalomL+0x3ac>
 800b002:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b006:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b00a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b00e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b012:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b01a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b01e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b022:	ed9f 5a73 	vldr	s10, [pc, #460]	; 800b1f0 <slalomL+0x3ac>
 800b026:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	eeb0 2a47 	vmov.f32	s4, s14
 800b030:	eef0 1a65 	vmov.f32	s3, s11
 800b034:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800b1f4 <slalomL+0x3b0>
 800b038:	eef0 0a46 	vmov.f32	s1, s12
 800b03c:	eeb0 0a66 	vmov.f32	s0, s13
 800b040:	f7f8 fe26 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800b044:	4b69      	ldr	r3, [pc, #420]	; (800b1ec <slalomL+0x3a8>)
 800b046:	2200      	movs	r2, #0
 800b048:	701a      	strb	r2, [r3, #0]
		wallmode.WallCutMode=0;
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}
}
 800b04a:	e0c6      	b.n	800b1da <slalomL+0x396>
		wallmode.WallControlMode=0;
 800b04c:	2300      	movs	r3, #0
 800b04e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b050:	2300      	movs	r3, #0
 800b052:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800b054:	2301      	movs	r3, #1
 800b056:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b058:	2300      	movs	r3, #0
 800b05a:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800b05c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b060:	2b00      	cmp	r3, #0
 800b062:	d127      	bne.n	800b0b4 <slalomL+0x270>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b064:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b068:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800b06c:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b070:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b074:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b078:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b07c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b080:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b084:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b088:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b08c:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b090:	eddf 4a57 	vldr	s9, [pc, #348]	; 800b1f0 <slalomL+0x3ac>
 800b094:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	eeb0 2a47 	vmov.f32	s4, s14
 800b09e:	eef0 1a45 	vmov.f32	s3, s10
 800b0a2:	eeb0 1a65 	vmov.f32	s2, s11
 800b0a6:	eef0 0a46 	vmov.f32	s1, s12
 800b0aa:	eeb0 0a66 	vmov.f32	s0, s13
 800b0ae:	f7f8 fdef 	bl	8003c90 <straight_table2>
 800b0b2:	e022      	b.n	800b0fa <slalomL+0x2b6>
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b0b4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b0b8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b0bc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b0c0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b0c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b0c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b0cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0d0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b0d4:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b0d8:	eddf 4a45 	vldr	s9, [pc, #276]	; 800b1f0 <slalomL+0x3ac>
 800b0dc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	eeb0 2a47 	vmov.f32	s4, s14
 800b0e6:	eef0 1a45 	vmov.f32	s3, s10
 800b0ea:	eeb0 1a65 	vmov.f32	s2, s11
 800b0ee:	eef0 0a46 	vmov.f32	s1, s12
 800b0f2:	eeb0 0a66 	vmov.f32	s0, s13
 800b0f6:	f7f8 fdcb 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800b0fa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d10c      	bne.n	800b11c <slalomL+0x2d8>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800b102:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b106:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b10a:	eeb0 1a47 	vmov.f32	s2, s14
 800b10e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800b200 <slalomL+0x3bc>
 800b112:	eeb0 0a67 	vmov.f32	s0, s15
 800b116:	f7f9 fd57 	bl	8004bc8 <mollifier_slalom_table>
 800b11a:	e013      	b.n	800b144 <slalomL+0x300>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b11c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b120:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b124:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b128:	eef0 2a66 	vmov.f32	s5, s13
 800b12c:	eeb0 2a47 	vmov.f32	s4, s14
 800b130:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b1f4 <slalomL+0x3b0>
 800b134:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b1f4 <slalomL+0x3b0>
 800b138:	eddf 0a31 	vldr	s1, [pc, #196]	; 800b200 <slalomL+0x3bc>
 800b13c:	eeb0 0a67 	vmov.f32	s0, s15
 800b140:	f7f9 fbf2 	bl	8004928 <slalom_table2>
		wallmode.WallControlMode=0;
 800b144:	2300      	movs	r3, #0
 800b146:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b148:	2300      	movs	r3, #0
 800b14a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b14c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b150:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b154:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b158:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b15c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b160:	edd7 7a01 	vldr	s15, [r7, #4]
 800b164:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b16c:	eef0 7ae7 	vabs.f32	s15, s15
 800b170:	ee17 0a90 	vmov	r0, s15
 800b174:	f7f5 fa10 	bl	8000598 <__aeabi_f2d>
 800b178:	f04f 0200 	mov.w	r2, #0
 800b17c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b180:	f7f5 fb8c 	bl	800089c <__aeabi_ddiv>
 800b184:	4602      	mov	r2, r0
 800b186:	460b      	mov	r3, r1
 800b188:	4614      	mov	r4, r2
 800b18a:	461d      	mov	r5, r3
 800b18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18e:	4618      	mov	r0, r3
 800b190:	f7f5 fa02 	bl	8000598 <__aeabi_f2d>
 800b194:	4602      	mov	r2, r0
 800b196:	460b      	mov	r3, r1
 800b198:	4620      	mov	r0, r4
 800b19a:	4629      	mov	r1, r5
 800b19c:	f7f5 fb7e 	bl	800089c <__aeabi_ddiv>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	4610      	mov	r0, r2
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	f04f 0200 	mov.w	r2, #0
 800b1ac:	4b15      	ldr	r3, [pc, #84]	; (800b204 <slalomL+0x3c0>)
 800b1ae:	f7f5 f895 	bl	80002dc <__adddf3>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b1b6:	4610      	mov	r0, r2
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	f7f5 fd1d 	bl	8000bf8 <__aeabi_d2f>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	ee02 3a10 	vmov	s4, r3
 800b1c6:	edd7 1a01 	vldr	s3, [r7, #4]
 800b1ca:	ed97 1a01 	vldr	s2, [r7, #4]
 800b1ce:	eef0 0a68 	vmov.f32	s1, s17
 800b1d2:	eeb0 0a48 	vmov.f32	s0, s16
 800b1d6:	f7f8 fd5b 	bl	8003c90 <straight_table2>
}
 800b1da:	bf00      	nop
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	ecbd 8b02 	vpop	{d8}
 800b1e4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b1e8:	b004      	add	sp, #16
 800b1ea:	4770      	bx	lr
 800b1ec:	20000814 	.word	0x20000814
 800b1f0:	42340000 	.word	0x42340000
 800b1f4:	00000000 	.word	0x00000000
 800b1f8:	431b8000 	.word	0x431b8000
 800b1fc:	43138000 	.word	0x43138000
 800b200:	42b40000 	.word	0x42b40000
 800b204:	408f4000 	.word	0x408f4000

0800b208 <turn90R>:


void turn90R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b208:	b084      	sub	sp, #16
 800b20a:	b5b0      	push	{r4, r5, r7, lr}
 800b20c:	ed2d 8b02 	vpush	{d8}
 800b210:	b084      	sub	sp, #16
 800b212:	af00      	add	r7, sp, #0
 800b214:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b21c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b220:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b224:	2b01      	cmp	r3, #1
 800b226:	f040 80a5 	bne.w	800b374 <turn90R+0x16c>
		highspeed_mode = 1;
 800b22a:	4ba5      	ldr	r3, [pc, #660]	; (800b4c0 <turn90R+0x2b8>)
 800b22c:	2201      	movs	r2, #1
 800b22e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b230:	2301      	movs	r3, #1
 800b232:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b234:	2300      	movs	r3, #0
 800b236:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b238:	2300      	movs	r3, #0
 800b23a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b240:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b244:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b248:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b24c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b250:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b254:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b258:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b25c:	eddf 5a99 	vldr	s11, [pc, #612]	; 800b4c4 <turn90R+0x2bc>
 800b260:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	eeb0 2a47 	vmov.f32	s4, s14
 800b26a:	eef0 1a46 	vmov.f32	s3, s12
 800b26e:	eeb0 1a66 	vmov.f32	s2, s13
 800b272:	eddf 0a95 	vldr	s1, [pc, #596]	; 800b4c8 <turn90R+0x2c0>
 800b276:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800b4cc <turn90R+0x2c4>
 800b27a:	f7f8 fd09 	bl	8003c90 <straight_table2>
		wallmode.WallControlMode=0;
 800b27e:	2300      	movs	r3, #0
 800b280:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b282:	2302      	movs	r3, #2
 800b284:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b286:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b28a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b28e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b292:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b296:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b29a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b29e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b2a2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b2a6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b2aa:	eddf 4a86 	vldr	s9, [pc, #536]	; 800b4c4 <turn90R+0x2bc>
 800b2ae:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	eeb0 2a47 	vmov.f32	s4, s14
 800b2b8:	eef0 1a45 	vmov.f32	s3, s10
 800b2bc:	eeb0 1a65 	vmov.f32	s2, s11
 800b2c0:	eef0 0a46 	vmov.f32	s1, s12
 800b2c4:	eeb0 0a66 	vmov.f32	s0, s13
 800b2c8:	f7f8 fce2 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800b2cc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d10c      	bne.n	800b2ee <turn90R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800b2d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b2d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b2dc:	eeb0 1a47 	vmov.f32	s2, s14
 800b2e0:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800b4d0 <turn90R+0x2c8>
 800b2e4:	eeb0 0a67 	vmov.f32	s0, s15
 800b2e8:	f7f9 fc6e 	bl	8004bc8 <mollifier_slalom_table>
 800b2ec:	e015      	b.n	800b31a <turn90R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b2ee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b2f2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b2f6:	eef1 7a67 	vneg.f32	s15, s15
 800b2fa:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b2fe:	eef0 2a66 	vmov.f32	s5, s13
 800b302:	eeb0 2a67 	vmov.f32	s4, s15
 800b306:	eddf 1a70 	vldr	s3, [pc, #448]	; 800b4c8 <turn90R+0x2c0>
 800b30a:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800b4c8 <turn90R+0x2c0>
 800b30e:	eddf 0a70 	vldr	s1, [pc, #448]	; 800b4d0 <turn90R+0x2c8>
 800b312:	eeb0 0a47 	vmov.f32	s0, s14
 800b316:	f7f9 fb07 	bl	8004928 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b31a:	2300      	movs	r3, #0
 800b31c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b31e:	2300      	movs	r3, #0
 800b320:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b322:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b326:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800b4d4 <turn90R+0x2cc>
 800b32a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b32e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b332:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b336:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b33a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b33e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b342:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b346:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b34a:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800b4c4 <turn90R+0x2bc>
 800b34e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	eeb0 2a47 	vmov.f32	s4, s14
 800b358:	eef0 1a65 	vmov.f32	s3, s11
 800b35c:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800b4c8 <turn90R+0x2c0>
 800b360:	eef0 0a46 	vmov.f32	s1, s12
 800b364:	eeb0 0a66 	vmov.f32	s0, s13
 800b368:	f7f8 fc92 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800b36c:	4b54      	ldr	r3, [pc, #336]	; (800b4c0 <turn90R+0x2b8>)
 800b36e:	2200      	movs	r2, #0
 800b370:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800b372:	e09c      	b.n	800b4ae <turn90R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b374:	2300      	movs	r3, #0
 800b376:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b378:	2300      	movs	r3, #0
 800b37a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b37c:	2302      	movs	r3, #2
 800b37e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b380:	2300      	movs	r3, #0
 800b382:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b384:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b388:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b38c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b390:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b394:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b398:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b39c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b3a0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b3a4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b3a8:	eddf 4a46 	vldr	s9, [pc, #280]	; 800b4c4 <turn90R+0x2bc>
 800b3ac:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	eeb0 2a47 	vmov.f32	s4, s14
 800b3b6:	eef0 1a45 	vmov.f32	s3, s10
 800b3ba:	eeb0 1a65 	vmov.f32	s2, s11
 800b3be:	eef0 0a46 	vmov.f32	s1, s12
 800b3c2:	eeb0 0a66 	vmov.f32	s0, s13
 800b3c6:	f7f8 fc63 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800b3ca:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d10c      	bne.n	800b3ec <turn90R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800b3d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b3d6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b3da:	eeb0 1a47 	vmov.f32	s2, s14
 800b3de:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800b4d0 <turn90R+0x2c8>
 800b3e2:	eeb0 0a67 	vmov.f32	s0, s15
 800b3e6:	f7f9 fbef 	bl	8004bc8 <mollifier_slalom_table>
 800b3ea:	e015      	b.n	800b418 <turn90R+0x210>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b3ec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b3f0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b3f4:	eef1 7a67 	vneg.f32	s15, s15
 800b3f8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b3fc:	eef0 2a66 	vmov.f32	s5, s13
 800b400:	eeb0 2a67 	vmov.f32	s4, s15
 800b404:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b4c8 <turn90R+0x2c0>
 800b408:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b4c8 <turn90R+0x2c0>
 800b40c:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b4d0 <turn90R+0x2c8>
 800b410:	eeb0 0a47 	vmov.f32	s0, s14
 800b414:	f7f9 fa88 	bl	8004928 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b418:	2301      	movs	r3, #1
 800b41a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b41c:	2300      	movs	r3, #0
 800b41e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b420:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b424:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b428:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b42c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b430:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b434:	edd7 7a01 	vldr	s15, [r7, #4]
 800b438:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b43c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b440:	eef0 7ae7 	vabs.f32	s15, s15
 800b444:	ee17 0a90 	vmov	r0, s15
 800b448:	f7f5 f8a6 	bl	8000598 <__aeabi_f2d>
 800b44c:	f04f 0200 	mov.w	r2, #0
 800b450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b454:	f7f5 fa22 	bl	800089c <__aeabi_ddiv>
 800b458:	4602      	mov	r2, r0
 800b45a:	460b      	mov	r3, r1
 800b45c:	4614      	mov	r4, r2
 800b45e:	461d      	mov	r5, r3
 800b460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b462:	4618      	mov	r0, r3
 800b464:	f7f5 f898 	bl	8000598 <__aeabi_f2d>
 800b468:	4602      	mov	r2, r0
 800b46a:	460b      	mov	r3, r1
 800b46c:	4620      	mov	r0, r4
 800b46e:	4629      	mov	r1, r5
 800b470:	f7f5 fa14 	bl	800089c <__aeabi_ddiv>
 800b474:	4602      	mov	r2, r0
 800b476:	460b      	mov	r3, r1
 800b478:	4610      	mov	r0, r2
 800b47a:	4619      	mov	r1, r3
 800b47c:	f04f 0200 	mov.w	r2, #0
 800b480:	4b15      	ldr	r3, [pc, #84]	; (800b4d8 <turn90R+0x2d0>)
 800b482:	f7f4 ff2b 	bl	80002dc <__adddf3>
 800b486:	4602      	mov	r2, r0
 800b488:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b48a:	4610      	mov	r0, r2
 800b48c:	4619      	mov	r1, r3
 800b48e:	f7f5 fbb3 	bl	8000bf8 <__aeabi_d2f>
 800b492:	4603      	mov	r3, r0
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	ee02 3a10 	vmov	s4, r3
 800b49a:	edd7 1a01 	vldr	s3, [r7, #4]
 800b49e:	ed97 1a01 	vldr	s2, [r7, #4]
 800b4a2:	eef0 0a68 	vmov.f32	s1, s17
 800b4a6:	eeb0 0a48 	vmov.f32	s0, s16
 800b4aa:	f7f8 fbf1 	bl	8003c90 <straight_table2>
}
 800b4ae:	bf00      	nop
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	ecbd 8b02 	vpop	{d8}
 800b4b8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b4bc:	b004      	add	sp, #16
 800b4be:	4770      	bx	lr
 800b4c0:	20000814 	.word	0x20000814
 800b4c4:	42340000 	.word	0x42340000
 800b4c8:	00000000 	.word	0x00000000
 800b4cc:	42cd0000 	.word	0x42cd0000
 800b4d0:	c2b40000 	.word	0xc2b40000
 800b4d4:	42b40000 	.word	0x42b40000
 800b4d8:	408f4000 	.word	0x408f4000

0800b4dc <turn90L>:

void turn90L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b4dc:	b084      	sub	sp, #16
 800b4de:	b5b0      	push	{r4, r5, r7, lr}
 800b4e0:	ed2d 8b02 	vpush	{d8}
 800b4e4:	b084      	sub	sp, #16
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b4ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b4f0:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b4f4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	f040 80a3 	bne.w	800b644 <turn90L+0x168>
		highspeed_mode = 1;
 800b4fe:	4ba3      	ldr	r3, [pc, #652]	; (800b78c <turn90L+0x2b0>)
 800b500:	2201      	movs	r2, #1
 800b502:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b504:	2301      	movs	r3, #1
 800b506:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b508:	2300      	movs	r3, #0
 800b50a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b50c:	2300      	movs	r3, #0
 800b50e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b510:	2300      	movs	r3, #0
 800b512:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b514:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b518:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b51c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b520:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b524:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b528:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b52c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b530:	eddf 5a97 	vldr	s11, [pc, #604]	; 800b790 <turn90L+0x2b4>
 800b534:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b538:	68f8      	ldr	r0, [r7, #12]
 800b53a:	eeb0 2a47 	vmov.f32	s4, s14
 800b53e:	eef0 1a46 	vmov.f32	s3, s12
 800b542:	eeb0 1a66 	vmov.f32	s2, s13
 800b546:	eddf 0a93 	vldr	s1, [pc, #588]	; 800b794 <turn90L+0x2b8>
 800b54a:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800b798 <turn90L+0x2bc>
 800b54e:	f7f8 fb9f 	bl	8003c90 <straight_table2>
		wallmode.WallControlMode=0;
 800b552:	2300      	movs	r3, #0
 800b554:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b556:	2302      	movs	r3, #2
 800b558:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b55a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b55e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b562:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b566:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b56a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b56e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b572:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b576:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b57a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b57e:	eddf 4a84 	vldr	s9, [pc, #528]	; 800b790 <turn90L+0x2b4>
 800b582:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	eeb0 2a47 	vmov.f32	s4, s14
 800b58c:	eef0 1a45 	vmov.f32	s3, s10
 800b590:	eeb0 1a65 	vmov.f32	s2, s11
 800b594:	eef0 0a46 	vmov.f32	s1, s12
 800b598:	eeb0 0a66 	vmov.f32	s0, s13
 800b59c:	f7f8 fb78 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800b5a0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d10c      	bne.n	800b5c2 <turn90L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800b5a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b5ac:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b5b0:	eeb0 1a47 	vmov.f32	s2, s14
 800b5b4:	eddf 0a79 	vldr	s1, [pc, #484]	; 800b79c <turn90L+0x2c0>
 800b5b8:	eeb0 0a67 	vmov.f32	s0, s15
 800b5bc:	f7f9 fb04 	bl	8004bc8 <mollifier_slalom_table>
 800b5c0:	e013      	b.n	800b5ea <turn90L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b5c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b5c6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b5ca:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b5ce:	eef0 2a66 	vmov.f32	s5, s13
 800b5d2:	eeb0 2a47 	vmov.f32	s4, s14
 800b5d6:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800b794 <turn90L+0x2b8>
 800b5da:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800b794 <turn90L+0x2b8>
 800b5de:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800b79c <turn90L+0x2c0>
 800b5e2:	eeb0 0a67 	vmov.f32	s0, s15
 800b5e6:	f7f9 f99f 	bl	8004928 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b5f2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b5f6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800b79c <turn90L+0x2c0>
 800b5fa:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b5fe:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b602:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b606:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b60a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b60e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b612:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b616:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b61a:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800b790 <turn90L+0x2b4>
 800b61e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b622:	68f8      	ldr	r0, [r7, #12]
 800b624:	eeb0 2a47 	vmov.f32	s4, s14
 800b628:	eef0 1a65 	vmov.f32	s3, s11
 800b62c:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800b794 <turn90L+0x2b8>
 800b630:	eef0 0a46 	vmov.f32	s1, s12
 800b634:	eeb0 0a66 	vmov.f32	s0, s13
 800b638:	f7f8 fb2a 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800b63c:	4b53      	ldr	r3, [pc, #332]	; (800b78c <turn90L+0x2b0>)
 800b63e:	2200      	movs	r2, #0
 800b640:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800b642:	e09a      	b.n	800b77a <turn90L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b644:	2300      	movs	r3, #0
 800b646:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b648:	2300      	movs	r3, #0
 800b64a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b64c:	2302      	movs	r3, #2
 800b64e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b650:	2300      	movs	r3, #0
 800b652:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b654:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b658:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b65c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b660:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b664:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b668:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b66c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b670:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b674:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b678:	eddf 4a45 	vldr	s9, [pc, #276]	; 800b790 <turn90L+0x2b4>
 800b67c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	eeb0 2a47 	vmov.f32	s4, s14
 800b686:	eef0 1a45 	vmov.f32	s3, s10
 800b68a:	eeb0 1a65 	vmov.f32	s2, s11
 800b68e:	eef0 0a46 	vmov.f32	s1, s12
 800b692:	eeb0 0a66 	vmov.f32	s0, s13
 800b696:	f7f8 fafb 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800b69a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d10c      	bne.n	800b6bc <turn90L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800b6a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b6a6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b6aa:	eeb0 1a47 	vmov.f32	s2, s14
 800b6ae:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800b79c <turn90L+0x2c0>
 800b6b2:	eeb0 0a67 	vmov.f32	s0, s15
 800b6b6:	f7f9 fa87 	bl	8004bc8 <mollifier_slalom_table>
 800b6ba:	e013      	b.n	800b6e4 <turn90L+0x208>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b6bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b6c0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b6c4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b6c8:	eef0 2a66 	vmov.f32	s5, s13
 800b6cc:	eeb0 2a47 	vmov.f32	s4, s14
 800b6d0:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b794 <turn90L+0x2b8>
 800b6d4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b794 <turn90L+0x2b8>
 800b6d8:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b79c <turn90L+0x2c0>
 800b6dc:	eeb0 0a67 	vmov.f32	s0, s15
 800b6e0:	f7f9 f922 	bl	8004928 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b6ec:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b6f0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b6f4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b6f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b6fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b700:	edd7 7a01 	vldr	s15, [r7, #4]
 800b704:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b70c:	eef0 7ae7 	vabs.f32	s15, s15
 800b710:	ee17 0a90 	vmov	r0, s15
 800b714:	f7f4 ff40 	bl	8000598 <__aeabi_f2d>
 800b718:	f04f 0200 	mov.w	r2, #0
 800b71c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b720:	f7f5 f8bc 	bl	800089c <__aeabi_ddiv>
 800b724:	4602      	mov	r2, r0
 800b726:	460b      	mov	r3, r1
 800b728:	4614      	mov	r4, r2
 800b72a:	461d      	mov	r5, r3
 800b72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72e:	4618      	mov	r0, r3
 800b730:	f7f4 ff32 	bl	8000598 <__aeabi_f2d>
 800b734:	4602      	mov	r2, r0
 800b736:	460b      	mov	r3, r1
 800b738:	4620      	mov	r0, r4
 800b73a:	4629      	mov	r1, r5
 800b73c:	f7f5 f8ae 	bl	800089c <__aeabi_ddiv>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	4610      	mov	r0, r2
 800b746:	4619      	mov	r1, r3
 800b748:	f04f 0200 	mov.w	r2, #0
 800b74c:	4b14      	ldr	r3, [pc, #80]	; (800b7a0 <turn90L+0x2c4>)
 800b74e:	f7f4 fdc5 	bl	80002dc <__adddf3>
 800b752:	4602      	mov	r2, r0
 800b754:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b756:	4610      	mov	r0, r2
 800b758:	4619      	mov	r1, r3
 800b75a:	f7f5 fa4d 	bl	8000bf8 <__aeabi_d2f>
 800b75e:	4603      	mov	r3, r0
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	ee02 3a10 	vmov	s4, r3
 800b766:	edd7 1a01 	vldr	s3, [r7, #4]
 800b76a:	ed97 1a01 	vldr	s2, [r7, #4]
 800b76e:	eef0 0a68 	vmov.f32	s1, s17
 800b772:	eeb0 0a48 	vmov.f32	s0, s16
 800b776:	f7f8 fa8b 	bl	8003c90 <straight_table2>
}
 800b77a:	bf00      	nop
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	ecbd 8b02 	vpop	{d8}
 800b784:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b788:	b004      	add	sp, #16
 800b78a:	4770      	bx	lr
 800b78c:	20000814 	.word	0x20000814
 800b790:	42340000 	.word	0x42340000
 800b794:	00000000 	.word	0x00000000
 800b798:	42cd0000 	.word	0x42cd0000
 800b79c:	42b40000 	.word	0x42b40000
 800b7a0:	408f4000 	.word	0x408f4000

0800b7a4 <turn180R>:


void turn180R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b7a4:	b084      	sub	sp, #16
 800b7a6:	b5b0      	push	{r4, r5, r7, lr}
 800b7a8:	ed2d 8b02 	vpush	{d8}
 800b7ac:	b084      	sub	sp, #16
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b7b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b7b8:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b7bc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	f040 80a5 	bne.w	800b910 <turn180R+0x16c>
		highspeed_mode = 1;
 800b7c6:	4ba5      	ldr	r3, [pc, #660]	; (800ba5c <turn180R+0x2b8>)
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b7dc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b7e0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b7e4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b7e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b7f0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b7f4:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b7f8:	eddf 5a99 	vldr	s11, [pc, #612]	; 800ba60 <turn180R+0x2bc>
 800b7fc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	eeb0 2a47 	vmov.f32	s4, s14
 800b806:	eef0 1a46 	vmov.f32	s3, s12
 800b80a:	eeb0 1a66 	vmov.f32	s2, s13
 800b80e:	eddf 0a95 	vldr	s1, [pc, #596]	; 800ba64 <turn180R+0x2c0>
 800b812:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800ba68 <turn180R+0x2c4>
 800b816:	f7f8 fa3b 	bl	8003c90 <straight_table2>
		wallmode.WallControlMode=0;
 800b81a:	2300      	movs	r3, #0
 800b81c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b81e:	2302      	movs	r3, #2
 800b820:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b822:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b826:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b82a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b82e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b832:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b836:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b83a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b83e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b842:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b846:	eddf 4a86 	vldr	s9, [pc, #536]	; 800ba60 <turn180R+0x2bc>
 800b84a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b84e:	68f8      	ldr	r0, [r7, #12]
 800b850:	eeb0 2a47 	vmov.f32	s4, s14
 800b854:	eef0 1a45 	vmov.f32	s3, s10
 800b858:	eeb0 1a65 	vmov.f32	s2, s11
 800b85c:	eef0 0a46 	vmov.f32	s1, s12
 800b860:	eeb0 0a66 	vmov.f32	s0, s13
 800b864:	f7f8 fa14 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800b868:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d10c      	bne.n	800b88a <turn180R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800b870:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b874:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b878:	eeb0 1a47 	vmov.f32	s2, s14
 800b87c:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800ba6c <turn180R+0x2c8>
 800b880:	eeb0 0a67 	vmov.f32	s0, s15
 800b884:	f7f9 f9a0 	bl	8004bc8 <mollifier_slalom_table>
 800b888:	e015      	b.n	800b8b6 <turn180R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b88a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b88e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b892:	eef1 7a67 	vneg.f32	s15, s15
 800b896:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b89a:	eef0 2a66 	vmov.f32	s5, s13
 800b89e:	eeb0 2a67 	vmov.f32	s4, s15
 800b8a2:	eddf 1a70 	vldr	s3, [pc, #448]	; 800ba64 <turn180R+0x2c0>
 800b8a6:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800ba64 <turn180R+0x2c0>
 800b8aa:	eddf 0a70 	vldr	s1, [pc, #448]	; 800ba6c <turn180R+0x2c8>
 800b8ae:	eeb0 0a47 	vmov.f32	s0, s14
 800b8b2:	f7f9 f839 	bl	8004928 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b8be:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b8c2:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800ba70 <turn180R+0x2cc>
 800b8c6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b8ca:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b8ce:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b8d2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b8d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8da:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8de:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b8e2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b8e6:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800ba60 <turn180R+0x2bc>
 800b8ea:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	eeb0 2a47 	vmov.f32	s4, s14
 800b8f4:	eef0 1a65 	vmov.f32	s3, s11
 800b8f8:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800ba64 <turn180R+0x2c0>
 800b8fc:	eef0 0a46 	vmov.f32	s1, s12
 800b900:	eeb0 0a66 	vmov.f32	s0, s13
 800b904:	f7f8 f9c4 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800b908:	4b54      	ldr	r3, [pc, #336]	; (800ba5c <turn180R+0x2b8>)
 800b90a:	2200      	movs	r2, #0
 800b90c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800b90e:	e09c      	b.n	800ba4a <turn180R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b910:	2300      	movs	r3, #0
 800b912:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b914:	2300      	movs	r3, #0
 800b916:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b918:	2302      	movs	r3, #2
 800b91a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b91c:	2300      	movs	r3, #0
 800b91e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b920:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b924:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b928:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b92c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b930:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b934:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b93c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b940:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b944:	eddf 4a46 	vldr	s9, [pc, #280]	; 800ba60 <turn180R+0x2bc>
 800b948:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	eeb0 2a47 	vmov.f32	s4, s14
 800b952:	eef0 1a45 	vmov.f32	s3, s10
 800b956:	eeb0 1a65 	vmov.f32	s2, s11
 800b95a:	eef0 0a46 	vmov.f32	s1, s12
 800b95e:	eeb0 0a66 	vmov.f32	s0, s13
 800b962:	f7f8 f995 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800b966:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d10c      	bne.n	800b988 <turn180R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800b96e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b972:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b976:	eeb0 1a47 	vmov.f32	s2, s14
 800b97a:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800ba6c <turn180R+0x2c8>
 800b97e:	eeb0 0a67 	vmov.f32	s0, s15
 800b982:	f7f9 f921 	bl	8004bc8 <mollifier_slalom_table>
 800b986:	e015      	b.n	800b9b4 <turn180R+0x210>
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b988:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b98c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b990:	eef1 7a67 	vneg.f32	s15, s15
 800b994:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b998:	eef0 2a66 	vmov.f32	s5, s13
 800b99c:	eeb0 2a67 	vmov.f32	s4, s15
 800b9a0:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ba64 <turn180R+0x2c0>
 800b9a4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ba64 <turn180R+0x2c0>
 800b9a8:	eddf 0a30 	vldr	s1, [pc, #192]	; 800ba6c <turn180R+0x2c8>
 800b9ac:	eeb0 0a47 	vmov.f32	s0, s14
 800b9b0:	f7f8 ffba 	bl	8004928 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b9bc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b9c0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b9c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b9c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b9cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9d0:	edd7 7a01 	vldr	s15, [r7, #4]
 800b9d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b9d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9dc:	eef0 7ae7 	vabs.f32	s15, s15
 800b9e0:	ee17 0a90 	vmov	r0, s15
 800b9e4:	f7f4 fdd8 	bl	8000598 <__aeabi_f2d>
 800b9e8:	f04f 0200 	mov.w	r2, #0
 800b9ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b9f0:	f7f4 ff54 	bl	800089c <__aeabi_ddiv>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	4614      	mov	r4, r2
 800b9fa:	461d      	mov	r5, r3
 800b9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7f4 fdca 	bl	8000598 <__aeabi_f2d>
 800ba04:	4602      	mov	r2, r0
 800ba06:	460b      	mov	r3, r1
 800ba08:	4620      	mov	r0, r4
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	f7f4 ff46 	bl	800089c <__aeabi_ddiv>
 800ba10:	4602      	mov	r2, r0
 800ba12:	460b      	mov	r3, r1
 800ba14:	4610      	mov	r0, r2
 800ba16:	4619      	mov	r1, r3
 800ba18:	f04f 0200 	mov.w	r2, #0
 800ba1c:	4b15      	ldr	r3, [pc, #84]	; (800ba74 <turn180R+0x2d0>)
 800ba1e:	f7f4 fc5d 	bl	80002dc <__adddf3>
 800ba22:	4602      	mov	r2, r0
 800ba24:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ba26:	4610      	mov	r0, r2
 800ba28:	4619      	mov	r1, r3
 800ba2a:	f7f5 f8e5 	bl	8000bf8 <__aeabi_d2f>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	ee02 3a10 	vmov	s4, r3
 800ba36:	edd7 1a01 	vldr	s3, [r7, #4]
 800ba3a:	ed97 1a01 	vldr	s2, [r7, #4]
 800ba3e:	eef0 0a68 	vmov.f32	s1, s17
 800ba42:	eeb0 0a48 	vmov.f32	s0, s16
 800ba46:	f7f8 f923 	bl	8003c90 <straight_table2>
}
 800ba4a:	bf00      	nop
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	ecbd 8b02 	vpop	{d8}
 800ba54:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ba58:	b004      	add	sp, #16
 800ba5a:	4770      	bx	lr
 800ba5c:	20000814 	.word	0x20000814
 800ba60:	42340000 	.word	0x42340000
 800ba64:	00000000 	.word	0x00000000
 800ba68:	42cd0000 	.word	0x42cd0000
 800ba6c:	c3340000 	.word	0xc3340000
 800ba70:	42b40000 	.word	0x42b40000
 800ba74:	408f4000 	.word	0x408f4000

0800ba78 <turn180L>:

void turn180L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800ba78:	b084      	sub	sp, #16
 800ba7a:	b5b0      	push	{r4, r5, r7, lr}
 800ba7c:	ed2d 8b02 	vpush	{d8}
 800ba80:	b084      	sub	sp, #16
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ba88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ba8c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800ba90:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	f040 80a3 	bne.w	800bbe0 <turn180L+0x168>
		highspeed_mode = 1;
 800ba9a:	4ba3      	ldr	r3, [pc, #652]	; (800bd28 <turn180L+0x2b0>)
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800baa0:	2301      	movs	r3, #1
 800baa2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800baa4:	2300      	movs	r3, #0
 800baa6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800baa8:	2300      	movs	r3, #0
 800baaa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800baac:	2300      	movs	r3, #0
 800baae:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bab0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bab4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bab8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800babc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bac0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bac4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bac8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bacc:	eddf 5a97 	vldr	s11, [pc, #604]	; 800bd2c <turn180L+0x2b4>
 800bad0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	eeb0 2a47 	vmov.f32	s4, s14
 800bada:	eef0 1a46 	vmov.f32	s3, s12
 800bade:	eeb0 1a66 	vmov.f32	s2, s13
 800bae2:	eddf 0a93 	vldr	s1, [pc, #588]	; 800bd30 <turn180L+0x2b8>
 800bae6:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800bd34 <turn180L+0x2bc>
 800baea:	f7f8 f8d1 	bl	8003c90 <straight_table2>
		wallmode.WallControlMode=0;
 800baee:	2300      	movs	r3, #0
 800baf0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800baf2:	2302      	movs	r3, #2
 800baf4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800baf6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bafa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bafe:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bb02:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bb06:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bb0a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb12:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bb16:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bb1a:	eddf 4a84 	vldr	s9, [pc, #528]	; 800bd2c <turn180L+0x2b4>
 800bb1e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	eeb0 2a47 	vmov.f32	s4, s14
 800bb28:	eef0 1a45 	vmov.f32	s3, s10
 800bb2c:	eeb0 1a65 	vmov.f32	s2, s11
 800bb30:	eef0 0a46 	vmov.f32	s1, s12
 800bb34:	eeb0 0a66 	vmov.f32	s0, s13
 800bb38:	f7f8 f8aa 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800bb3c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d10c      	bne.n	800bb5e <turn180L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800bb44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb48:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bb4c:	eeb0 1a47 	vmov.f32	s2, s14
 800bb50:	eddf 0a79 	vldr	s1, [pc, #484]	; 800bd38 <turn180L+0x2c0>
 800bb54:	eeb0 0a67 	vmov.f32	s0, s15
 800bb58:	f7f9 f836 	bl	8004bc8 <mollifier_slalom_table>
 800bb5c:	e013      	b.n	800bb86 <turn180L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800bb5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb62:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bb66:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bb6a:	eef0 2a66 	vmov.f32	s5, s13
 800bb6e:	eeb0 2a47 	vmov.f32	s4, s14
 800bb72:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800bd30 <turn180L+0x2b8>
 800bb76:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800bd30 <turn180L+0x2b8>
 800bb7a:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800bd38 <turn180L+0x2c0>
 800bb7e:	eeb0 0a67 	vmov.f32	s0, s15
 800bb82:	f7f8 fed1 	bl	8004928 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bb86:	2300      	movs	r3, #0
 800bb88:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bb8e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800bb92:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800bd3c <turn180L+0x2c4>
 800bb96:	ee77 6a87 	vadd.f32	s13, s15, s14
 800bb9a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bb9e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bba2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bba6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bbaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbae:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bbb2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bbb6:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800bd2c <turn180L+0x2b4>
 800bbba:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	eeb0 2a47 	vmov.f32	s4, s14
 800bbc4:	eef0 1a65 	vmov.f32	s3, s11
 800bbc8:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800bd30 <turn180L+0x2b8>
 800bbcc:	eef0 0a46 	vmov.f32	s1, s12
 800bbd0:	eeb0 0a66 	vmov.f32	s0, s13
 800bbd4:	f7f8 f85c 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800bbd8:	4b53      	ldr	r3, [pc, #332]	; (800bd28 <turn180L+0x2b0>)
 800bbda:	2200      	movs	r2, #0
 800bbdc:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800bbde:	e09a      	b.n	800bd16 <turn180L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800bbe8:	2302      	movs	r3, #2
 800bbea:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bbec:	2300      	movs	r3, #0
 800bbee:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bbf0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bbf4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bbf8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bbfc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bc00:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc0c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bc10:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bc14:	eddf 4a45 	vldr	s9, [pc, #276]	; 800bd2c <turn180L+0x2b4>
 800bc18:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bc1c:	68f8      	ldr	r0, [r7, #12]
 800bc1e:	eeb0 2a47 	vmov.f32	s4, s14
 800bc22:	eef0 1a45 	vmov.f32	s3, s10
 800bc26:	eeb0 1a65 	vmov.f32	s2, s11
 800bc2a:	eef0 0a46 	vmov.f32	s1, s12
 800bc2e:	eeb0 0a66 	vmov.f32	s0, s13
 800bc32:	f7f8 f82d 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800bc36:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d10c      	bne.n	800bc58 <turn180L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800bc3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc42:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bc46:	eeb0 1a47 	vmov.f32	s2, s14
 800bc4a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800bd38 <turn180L+0x2c0>
 800bc4e:	eeb0 0a67 	vmov.f32	s0, s15
 800bc52:	f7f8 ffb9 	bl	8004bc8 <mollifier_slalom_table>
 800bc56:	e013      	b.n	800bc80 <turn180L+0x208>
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800bc58:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc5c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bc60:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bc64:	eef0 2a66 	vmov.f32	s5, s13
 800bc68:	eeb0 2a47 	vmov.f32	s4, s14
 800bc6c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800bd30 <turn180L+0x2b8>
 800bc70:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800bd30 <turn180L+0x2b8>
 800bc74:	eddf 0a30 	vldr	s1, [pc, #192]	; 800bd38 <turn180L+0x2c0>
 800bc78:	eeb0 0a67 	vmov.f32	s0, s15
 800bc7c:	f7f8 fe54 	bl	8004928 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800bc80:	2301      	movs	r3, #1
 800bc82:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bc84:	2300      	movs	r3, #0
 800bc86:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bc88:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bc8c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bc90:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc94:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc98:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc9c:	edd7 7a01 	vldr	s15, [r7, #4]
 800bca0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bca8:	eef0 7ae7 	vabs.f32	s15, s15
 800bcac:	ee17 0a90 	vmov	r0, s15
 800bcb0:	f7f4 fc72 	bl	8000598 <__aeabi_f2d>
 800bcb4:	f04f 0200 	mov.w	r2, #0
 800bcb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bcbc:	f7f4 fdee 	bl	800089c <__aeabi_ddiv>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	4614      	mov	r4, r2
 800bcc6:	461d      	mov	r5, r3
 800bcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7f4 fc64 	bl	8000598 <__aeabi_f2d>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	4629      	mov	r1, r5
 800bcd8:	f7f4 fde0 	bl	800089c <__aeabi_ddiv>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	4610      	mov	r0, r2
 800bce2:	4619      	mov	r1, r3
 800bce4:	f04f 0200 	mov.w	r2, #0
 800bce8:	4b15      	ldr	r3, [pc, #84]	; (800bd40 <turn180L+0x2c8>)
 800bcea:	f7f4 faf7 	bl	80002dc <__adddf3>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bcf2:	4610      	mov	r0, r2
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	f7f4 ff7f 	bl	8000bf8 <__aeabi_d2f>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	ee02 3a10 	vmov	s4, r3
 800bd02:	edd7 1a01 	vldr	s3, [r7, #4]
 800bd06:	ed97 1a01 	vldr	s2, [r7, #4]
 800bd0a:	eef0 0a68 	vmov.f32	s1, s17
 800bd0e:	eeb0 0a48 	vmov.f32	s0, s16
 800bd12:	f7f7 ffbd 	bl	8003c90 <straight_table2>
}
 800bd16:	bf00      	nop
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	ecbd 8b02 	vpop	{d8}
 800bd20:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bd24:	b004      	add	sp, #16
 800bd26:	4770      	bx	lr
 800bd28:	20000814 	.word	0x20000814
 800bd2c:	42340000 	.word	0x42340000
 800bd30:	00000000 	.word	0x00000000
 800bd34:	42cd0000 	.word	0x42cd0000
 800bd38:	43340000 	.word	0x43340000
 800bd3c:	42b40000 	.word	0x42b40000
 800bd40:	408f4000 	.word	0x408f4000
 800bd44:	00000000 	.word	0x00000000

0800bd48 <turn45inR>:



void turn45inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bd48:	b084      	sub	sp, #16
 800bd4a:	b5b0      	push	{r4, r5, r7, lr}
 800bd4c:	ed2d 8b02 	vpush	{d8}
 800bd50:	b084      	sub	sp, #16
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bd58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bd5c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800bd60:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	f040 80ae 	bne.w	800bec6 <turn45inR+0x17e>
		highspeed_mode = 1;
 800bd6a:	4bdd      	ldr	r3, [pc, #884]	; (800c0e0 <turn45inR+0x398>)
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bd70:	2301      	movs	r3, #1
 800bd72:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bd74:	2300      	movs	r3, #0
 800bd76:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bd80:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bd84:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bd88:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd94:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bd98:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bd9c:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800c0e4 <turn45inR+0x39c>
 800bda0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bda4:	68f8      	ldr	r0, [r7, #12]
 800bda6:	eeb0 2a47 	vmov.f32	s4, s14
 800bdaa:	eef0 1a46 	vmov.f32	s3, s12
 800bdae:	eeb0 1a66 	vmov.f32	s2, s13
 800bdb2:	eddf 0acf 	vldr	s1, [pc, #828]	; 800c0f0 <turn45inR+0x3a8>
 800bdb6:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800c0e8 <turn45inR+0x3a0>
 800bdba:	f7f7 ff69 	bl	8003c90 <straight_table2>
		wallmode.WallControlMode=0;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bdc2:	2302      	movs	r3, #2
 800bdc4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bdc6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bdca:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bdce:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bdd2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bdd6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bdda:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bdde:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bde2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bde6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bdea:	eddf 4abe 	vldr	s9, [pc, #760]	; 800c0e4 <turn45inR+0x39c>
 800bdee:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	eeb0 2a47 	vmov.f32	s4, s14
 800bdf8:	eef0 1a45 	vmov.f32	s3, s10
 800bdfc:	eeb0 1a65 	vmov.f32	s2, s11
 800be00:	eef0 0a46 	vmov.f32	s1, s12
 800be04:	eeb0 0a66 	vmov.f32	s0, s13
 800be08:	f7f7 ff42 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800be0c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800be10:	2b01      	cmp	r3, #1
 800be12:	d10c      	bne.n	800be2e <turn45inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800be14:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be18:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800be1c:	eeb0 1a47 	vmov.f32	s2, s14
 800be20:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800c0f4 <turn45inR+0x3ac>
 800be24:	eeb0 0a67 	vmov.f32	s0, s15
 800be28:	f7f8 fece 	bl	8004bc8 <mollifier_slalom_table>
 800be2c:	e015      	b.n	800be5a <turn45inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800be2e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be32:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800be36:	eef1 7a67 	vneg.f32	s15, s15
 800be3a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800be3e:	eef0 2a66 	vmov.f32	s5, s13
 800be42:	eeb0 2a67 	vmov.f32	s4, s15
 800be46:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800c0f0 <turn45inR+0x3a8>
 800be4a:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800c0f0 <turn45inR+0x3a8>
 800be4e:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800c0f4 <turn45inR+0x3ac>
 800be52:	eeb0 0a47 	vmov.f32	s0, s14
 800be56:	f7f8 fd67 	bl	8004928 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800be5a:	2300      	movs	r3, #0
 800be5c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800be5e:	2300      	movs	r3, #0
 800be60:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	4618      	mov	r0, r3
 800be66:	f7f4 fb97 	bl	8000598 <__aeabi_f2d>
 800be6a:	a39b      	add	r3, pc, #620	; (adr r3, 800c0d8 <turn45inR+0x390>)
 800be6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be70:	f7f4 fa34 	bl	80002dc <__adddf3>
 800be74:	4602      	mov	r2, r0
 800be76:	460b      	mov	r3, r1
 800be78:	4610      	mov	r0, r2
 800be7a:	4619      	mov	r1, r3
 800be7c:	f7f4 febc 	bl	8000bf8 <__aeabi_d2f>
 800be80:	4603      	mov	r3, r0
 800be82:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800be86:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be8a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be8e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be92:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be96:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800be9a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800be9e:	eddf 5a91 	vldr	s11, [pc, #580]	; 800c0e4 <turn45inR+0x39c>
 800bea2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bea6:	68f8      	ldr	r0, [r7, #12]
 800bea8:	eeb0 2a47 	vmov.f32	s4, s14
 800beac:	eef0 1a46 	vmov.f32	s3, s12
 800beb0:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800c0f0 <turn45inR+0x3a8>
 800beb4:	eef0 0a66 	vmov.f32	s1, s13
 800beb8:	ee00 3a10 	vmov	s0, r3
 800bebc:	f7f7 fee8 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800bec0:	4b87      	ldr	r3, [pc, #540]	; (800c0e0 <turn45inR+0x398>)
 800bec2:	2200      	movs	r2, #0
 800bec4:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800bec6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800beca:	2b00      	cmp	r3, #0
 800becc:	f040 809d 	bne.w	800c00a <turn45inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800bed0:	2300      	movs	r3, #0
 800bed2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bed4:	2300      	movs	r3, #0
 800bed6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800bed8:	2302      	movs	r3, #2
 800beda:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bedc:	2300      	movs	r3, #0
 800bede:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bee0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bee4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bee8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800beec:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bef0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bef4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bef8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800befc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bf00:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf04:	eddf 4a77 	vldr	s9, [pc, #476]	; 800c0e4 <turn45inR+0x39c>
 800bf08:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bf0c:	68f8      	ldr	r0, [r7, #12]
 800bf0e:	eeb0 2a47 	vmov.f32	s4, s14
 800bf12:	eef0 1a45 	vmov.f32	s3, s10
 800bf16:	eeb0 1a65 	vmov.f32	s2, s11
 800bf1a:	eef0 0a46 	vmov.f32	s1, s12
 800bf1e:	eeb0 0a66 	vmov.f32	s0, s13
 800bf22:	f7f7 feb5 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800bf26:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d10c      	bne.n	800bf48 <turn45inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800bf2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf32:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bf36:	eeb0 1a47 	vmov.f32	s2, s14
 800bf3a:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800c0f4 <turn45inR+0x3ac>
 800bf3e:	eeb0 0a67 	vmov.f32	s0, s15
 800bf42:	f7f8 fe41 	bl	8004bc8 <mollifier_slalom_table>
 800bf46:	e015      	b.n	800bf74 <turn45inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bf48:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf4c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bf50:	eef1 7a67 	vneg.f32	s15, s15
 800bf54:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bf58:	eef0 2a66 	vmov.f32	s5, s13
 800bf5c:	eeb0 2a67 	vmov.f32	s4, s15
 800bf60:	eddf 1a63 	vldr	s3, [pc, #396]	; 800c0f0 <turn45inR+0x3a8>
 800bf64:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800c0f0 <turn45inR+0x3a8>
 800bf68:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c0f4 <turn45inR+0x3ac>
 800bf6c:	eeb0 0a47 	vmov.f32	s0, s14
 800bf70:	f7f8 fcda 	bl	8004928 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800bf74:	2303      	movs	r3, #3
 800bf76:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bf7c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bf80:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bf84:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf88:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf90:	edd7 7a01 	vldr	s15, [r7, #4]
 800bf94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bf98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf9c:	eef0 7ae7 	vabs.f32	s15, s15
 800bfa0:	ee17 0a90 	vmov	r0, s15
 800bfa4:	f7f4 faf8 	bl	8000598 <__aeabi_f2d>
 800bfa8:	f04f 0200 	mov.w	r2, #0
 800bfac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bfb0:	f7f4 fc74 	bl	800089c <__aeabi_ddiv>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	460b      	mov	r3, r1
 800bfb8:	4614      	mov	r4, r2
 800bfba:	461d      	mov	r5, r3
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7f4 faea 	bl	8000598 <__aeabi_f2d>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	4620      	mov	r0, r4
 800bfca:	4629      	mov	r1, r5
 800bfcc:	f7f4 fc66 	bl	800089c <__aeabi_ddiv>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	4610      	mov	r0, r2
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	f04f 0200 	mov.w	r2, #0
 800bfdc:	4b43      	ldr	r3, [pc, #268]	; (800c0ec <turn45inR+0x3a4>)
 800bfde:	f7f4 f97d 	bl	80002dc <__adddf3>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bfe6:	4610      	mov	r0, r2
 800bfe8:	4619      	mov	r1, r3
 800bfea:	f7f4 fe05 	bl	8000bf8 <__aeabi_d2f>
 800bfee:	4603      	mov	r3, r0
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	ee02 3a10 	vmov	s4, r3
 800bff6:	edd7 1a01 	vldr	s3, [r7, #4]
 800bffa:	ed97 1a01 	vldr	s2, [r7, #4]
 800bffe:	eef0 0a68 	vmov.f32	s1, s17
 800c002:	eeb0 0a48 	vmov.f32	s0, s16
 800c006:	f7f7 fe43 	bl	8003c90 <straight_table2>

	}
	if (test_mode >= 2) {
 800c00a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c00e:	2b01      	cmp	r3, #1
 800c010:	f240 80d0 	bls.w	800c1b4 <turn45inR+0x46c>

		highspeed_mode = 1;
 800c014:	4b32      	ldr	r3, [pc, #200]	; (800c0e0 <turn45inR+0x398>)
 800c016:	2201      	movs	r2, #1
 800c018:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c01a:	2301      	movs	r3, #1
 800c01c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c01e:	2300      	movs	r3, #0
 800c020:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c022:	2300      	movs	r3, #0
 800c024:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c026:	2300      	movs	r3, #0
 800c028:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c02a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c02e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c032:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c036:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c03a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c03e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c042:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c046:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c0e4 <turn45inR+0x39c>
 800c04a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c04e:	68f8      	ldr	r0, [r7, #12]
 800c050:	eeb0 2a47 	vmov.f32	s4, s14
 800c054:	eef0 1a46 	vmov.f32	s3, s12
 800c058:	eeb0 1a66 	vmov.f32	s2, s13
 800c05c:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c0f0 <turn45inR+0x3a8>
 800c060:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c0e8 <turn45inR+0x3a0>
 800c064:	f7f7 fe14 	bl	8003c90 <straight_table2>
		wallmode.WallControlMode=0;
 800c068:	2300      	movs	r3, #0
 800c06a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c06c:	2302      	movs	r3, #2
 800c06e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c070:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c074:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c078:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c07c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c080:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c084:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c08c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c090:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c094:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c0e4 <turn45inR+0x39c>
 800c098:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	eeb0 2a47 	vmov.f32	s4, s14
 800c0a2:	eef0 1a45 	vmov.f32	s3, s10
 800c0a6:	eeb0 1a65 	vmov.f32	s2, s11
 800c0aa:	eef0 0a46 	vmov.f32	s1, s12
 800c0ae:	eeb0 0a66 	vmov.f32	s0, s13
 800c0b2:	f7f7 fded 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800c0b6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d11c      	bne.n	800c0f8 <turn45inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c0be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0c2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c0c6:	eeb0 1a47 	vmov.f32	s2, s14
 800c0ca:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800c0f4 <turn45inR+0x3ac>
 800c0ce:	eeb0 0a67 	vmov.f32	s0, s15
 800c0d2:	f7f8 fd79 	bl	8004bc8 <mollifier_slalom_table>
 800c0d6:	e025      	b.n	800c124 <turn45inR+0x3dc>
 800c0d8:	c022ec18 	.word	0xc022ec18
 800c0dc:	405fd1de 	.word	0x405fd1de
 800c0e0:	20000814 	.word	0x20000814
 800c0e4:	42340000 	.word	0x42340000
 800c0e8:	42cd0000 	.word	0x42cd0000
 800c0ec:	408f4000 	.word	0x408f4000
 800c0f0:	00000000 	.word	0x00000000
 800c0f4:	c2340000 	.word	0xc2340000
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c0f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c0fc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c100:	eef1 7a67 	vneg.f32	s15, s15
 800c104:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c108:	eef0 2a66 	vmov.f32	s5, s13
 800c10c:	eeb0 2a67 	vmov.f32	s4, s15
 800c110:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800c0f0 <turn45inR+0x3a8>
 800c114:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800c0f0 <turn45inR+0x3a8>
 800c118:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800c0f4 <turn45inR+0x3ac>
 800c11c:	eeb0 0a47 	vmov.f32	s0, s14
 800c120:	f7f8 fc02 	bl	8004928 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c124:	2300      	movs	r3, #0
 800c126:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c128:	2300      	movs	r3, #0
 800c12a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c12c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c130:	3b02      	subs	r3, #2
 800c132:	4618      	mov	r0, r3
 800c134:	f7f4 fa1e 	bl	8000574 <__aeabi_i2d>
 800c138:	a325      	add	r3, pc, #148	; (adr r3, 800c1d0 <turn45inR+0x488>)
 800c13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13e:	f7f4 fa83 	bl	8000648 <__aeabi_dmul>
 800c142:	4602      	mov	r2, r0
 800c144:	460b      	mov	r3, r1
 800c146:	4614      	mov	r4, r2
 800c148:	461d      	mov	r5, r3
 800c14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7f4 fa23 	bl	8000598 <__aeabi_f2d>
 800c152:	4602      	mov	r2, r0
 800c154:	460b      	mov	r3, r1
 800c156:	4620      	mov	r0, r4
 800c158:	4629      	mov	r1, r5
 800c15a:	f7f4 f8bf 	bl	80002dc <__adddf3>
 800c15e:	4602      	mov	r2, r0
 800c160:	460b      	mov	r3, r1
 800c162:	4610      	mov	r0, r2
 800c164:	4619      	mov	r1, r3
 800c166:	f7f4 fd47 	bl	8000bf8 <__aeabi_d2f>
 800c16a:	4603      	mov	r3, r0
 800c16c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c170:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c174:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c178:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c17c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c180:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c184:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c188:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c18c:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800c1c8 <turn45inR+0x480>
 800c190:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	eeb0 2a47 	vmov.f32	s4, s14
 800c19a:	eef0 1a65 	vmov.f32	s3, s11
 800c19e:	eeb0 1a46 	vmov.f32	s2, s12
 800c1a2:	eef0 0a66 	vmov.f32	s1, s13
 800c1a6:	ee00 3a10 	vmov	s0, r3
 800c1aa:	f7f7 fd71 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800c1ae:	4b07      	ldr	r3, [pc, #28]	; (800c1cc <turn45inR+0x484>)
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	701a      	strb	r2, [r3, #0]
	}

}
 800c1b4:	bf00      	nop
 800c1b6:	3710      	adds	r7, #16
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	ecbd 8b02 	vpop	{d8}
 800c1be:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c1c2:	b004      	add	sp, #16
 800c1c4:	4770      	bx	lr
 800c1c6:	bf00      	nop
 800c1c8:	42340000 	.word	0x42340000
 800c1cc:	20000814 	.word	0x20000814
 800c1d0:	c022ec18 	.word	0xc022ec18
 800c1d4:	404fd1de 	.word	0x404fd1de

0800c1d8 <turn45inL>:

void turn45inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800c1d8:	b084      	sub	sp, #16
 800c1da:	b5b0      	push	{r4, r5, r7, lr}
 800c1dc:	ed2d 8b02 	vpush	{d8}
 800c1e0:	b084      	sub	sp, #16
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c1e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c1ec:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c1f0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	f040 80ac 	bne.w	800c352 <turn45inL+0x17a>
		highspeed_mode = 1;
 800c1fa:	4bdb      	ldr	r3, [pc, #876]	; (800c568 <turn45inL+0x390>)
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c200:	2301      	movs	r3, #1
 800c202:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c204:	2300      	movs	r3, #0
 800c206:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c208:	2300      	movs	r3, #0
 800c20a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c20c:	2300      	movs	r3, #0
 800c20e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c210:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c214:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c218:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c21c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c220:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c224:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c228:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c22c:	eddf 5ad2 	vldr	s11, [pc, #840]	; 800c578 <turn45inL+0x3a0>
 800c230:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c234:	68f8      	ldr	r0, [r7, #12]
 800c236:	eeb0 2a47 	vmov.f32	s4, s14
 800c23a:	eef0 1a46 	vmov.f32	s3, s12
 800c23e:	eeb0 1a66 	vmov.f32	s2, s13
 800c242:	eddf 0acc 	vldr	s1, [pc, #816]	; 800c574 <turn45inL+0x39c>
 800c246:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800c56c <turn45inL+0x394>
 800c24a:	f7f7 fd21 	bl	8003c90 <straight_table2>
		wallmode.WallControlMode=0;
 800c24e:	2300      	movs	r3, #0
 800c250:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c252:	2302      	movs	r3, #2
 800c254:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c256:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c25a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c25e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c262:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c266:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c26a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c26e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c272:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c276:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c27a:	eddf 4abf 	vldr	s9, [pc, #764]	; 800c578 <turn45inL+0x3a0>
 800c27e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c282:	68f8      	ldr	r0, [r7, #12]
 800c284:	eeb0 2a47 	vmov.f32	s4, s14
 800c288:	eef0 1a45 	vmov.f32	s3, s10
 800c28c:	eeb0 1a65 	vmov.f32	s2, s11
 800c290:	eef0 0a46 	vmov.f32	s1, s12
 800c294:	eeb0 0a66 	vmov.f32	s0, s13
 800c298:	f7f7 fcfa 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800c29c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d10c      	bne.n	800c2be <turn45inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c2a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2a8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c2ac:	eeb0 1a47 	vmov.f32	s2, s14
 800c2b0:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800c578 <turn45inL+0x3a0>
 800c2b4:	eeb0 0a67 	vmov.f32	s0, s15
 800c2b8:	f7f8 fc86 	bl	8004bc8 <mollifier_slalom_table>
 800c2bc:	e013      	b.n	800c2e6 <turn45inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c2be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2c2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c2c6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c2ca:	eef0 2a66 	vmov.f32	s5, s13
 800c2ce:	eeb0 2a47 	vmov.f32	s4, s14
 800c2d2:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800c574 <turn45inL+0x39c>
 800c2d6:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 800c574 <turn45inL+0x39c>
 800c2da:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800c578 <turn45inL+0x3a0>
 800c2de:	eeb0 0a67 	vmov.f32	s0, s15
 800c2e2:	f7f8 fb21 	bl	8004928 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7f4 f951 	bl	8000598 <__aeabi_f2d>
 800c2f6:	a39a      	add	r3, pc, #616	; (adr r3, 800c560 <turn45inL+0x388>)
 800c2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fc:	f7f3 ffee 	bl	80002dc <__adddf3>
 800c300:	4602      	mov	r2, r0
 800c302:	460b      	mov	r3, r1
 800c304:	4610      	mov	r0, r2
 800c306:	4619      	mov	r1, r3
 800c308:	f7f4 fc76 	bl	8000bf8 <__aeabi_d2f>
 800c30c:	4603      	mov	r3, r0
 800c30e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c312:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c316:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c31a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c31e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c322:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c326:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c32a:	eddf 5a93 	vldr	s11, [pc, #588]	; 800c578 <turn45inL+0x3a0>
 800c32e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c332:	68f8      	ldr	r0, [r7, #12]
 800c334:	eeb0 2a47 	vmov.f32	s4, s14
 800c338:	eef0 1a46 	vmov.f32	s3, s12
 800c33c:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800c574 <turn45inL+0x39c>
 800c340:	eef0 0a66 	vmov.f32	s1, s13
 800c344:	ee00 3a10 	vmov	s0, r3
 800c348:	f7f7 fca2 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800c34c:	4b86      	ldr	r3, [pc, #536]	; (800c568 <turn45inL+0x390>)
 800c34e:	2200      	movs	r2, #0
 800c350:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800c352:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c356:	2b00      	cmp	r3, #0
 800c358:	f040 809b 	bne.w	800c492 <turn45inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800c35c:	2300      	movs	r3, #0
 800c35e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c360:	2300      	movs	r3, #0
 800c362:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800c364:	2302      	movs	r3, #2
 800c366:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c368:	2300      	movs	r3, #0
 800c36a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c36c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c370:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c374:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c378:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c37c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c380:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c384:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c388:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c38c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c390:	eddf 4a79 	vldr	s9, [pc, #484]	; 800c578 <turn45inL+0x3a0>
 800c394:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c398:	68f8      	ldr	r0, [r7, #12]
 800c39a:	eeb0 2a47 	vmov.f32	s4, s14
 800c39e:	eef0 1a45 	vmov.f32	s3, s10
 800c3a2:	eeb0 1a65 	vmov.f32	s2, s11
 800c3a6:	eef0 0a46 	vmov.f32	s1, s12
 800c3aa:	eeb0 0a66 	vmov.f32	s0, s13
 800c3ae:	f7f7 fc6f 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800c3b2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d10c      	bne.n	800c3d4 <turn45inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c3ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c3be:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c3c2:	eeb0 1a47 	vmov.f32	s2, s14
 800c3c6:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800c578 <turn45inL+0x3a0>
 800c3ca:	eeb0 0a67 	vmov.f32	s0, s15
 800c3ce:	f7f8 fbfb 	bl	8004bc8 <mollifier_slalom_table>
 800c3d2:	e013      	b.n	800c3fc <turn45inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c3d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c3d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c3dc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c3e0:	eef0 2a66 	vmov.f32	s5, s13
 800c3e4:	eeb0 2a47 	vmov.f32	s4, s14
 800c3e8:	eddf 1a62 	vldr	s3, [pc, #392]	; 800c574 <turn45inL+0x39c>
 800c3ec:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800c574 <turn45inL+0x39c>
 800c3f0:	eddf 0a61 	vldr	s1, [pc, #388]	; 800c578 <turn45inL+0x3a0>
 800c3f4:	eeb0 0a67 	vmov.f32	s0, s15
 800c3f8:	f7f8 fa96 	bl	8004928 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800c3fc:	2303      	movs	r3, #3
 800c3fe:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c400:	2300      	movs	r3, #0
 800c402:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c404:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c408:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c40c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c410:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c414:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c418:	edd7 7a01 	vldr	s15, [r7, #4]
 800c41c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c420:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c424:	eef0 7ae7 	vabs.f32	s15, s15
 800c428:	ee17 0a90 	vmov	r0, s15
 800c42c:	f7f4 f8b4 	bl	8000598 <__aeabi_f2d>
 800c430:	f04f 0200 	mov.w	r2, #0
 800c434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c438:	f7f4 fa30 	bl	800089c <__aeabi_ddiv>
 800c43c:	4602      	mov	r2, r0
 800c43e:	460b      	mov	r3, r1
 800c440:	4614      	mov	r4, r2
 800c442:	461d      	mov	r5, r3
 800c444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c446:	4618      	mov	r0, r3
 800c448:	f7f4 f8a6 	bl	8000598 <__aeabi_f2d>
 800c44c:	4602      	mov	r2, r0
 800c44e:	460b      	mov	r3, r1
 800c450:	4620      	mov	r0, r4
 800c452:	4629      	mov	r1, r5
 800c454:	f7f4 fa22 	bl	800089c <__aeabi_ddiv>
 800c458:	4602      	mov	r2, r0
 800c45a:	460b      	mov	r3, r1
 800c45c:	4610      	mov	r0, r2
 800c45e:	4619      	mov	r1, r3
 800c460:	f04f 0200 	mov.w	r2, #0
 800c464:	4b42      	ldr	r3, [pc, #264]	; (800c570 <turn45inL+0x398>)
 800c466:	f7f3 ff39 	bl	80002dc <__adddf3>
 800c46a:	4602      	mov	r2, r0
 800c46c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c46e:	4610      	mov	r0, r2
 800c470:	4619      	mov	r1, r3
 800c472:	f7f4 fbc1 	bl	8000bf8 <__aeabi_d2f>
 800c476:	4603      	mov	r3, r0
 800c478:	68f8      	ldr	r0, [r7, #12]
 800c47a:	ee02 3a10 	vmov	s4, r3
 800c47e:	edd7 1a01 	vldr	s3, [r7, #4]
 800c482:	ed97 1a01 	vldr	s2, [r7, #4]
 800c486:	eef0 0a68 	vmov.f32	s1, s17
 800c48a:	eeb0 0a48 	vmov.f32	s0, s16
 800c48e:	f7f7 fbff 	bl	8003c90 <straight_table2>

	}
	if (test_mode >= 2) {
 800c492:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c496:	2b01      	cmp	r3, #1
 800c498:	f240 80cc 	bls.w	800c634 <turn45inL+0x45c>

		highspeed_mode = 1;
 800c49c:	4b32      	ldr	r3, [pc, #200]	; (800c568 <turn45inL+0x390>)
 800c49e:	2201      	movs	r2, #1
 800c4a0:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c4b2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c4b6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c4ba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c4be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c4c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4c6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c4ca:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c4ce:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800c578 <turn45inL+0x3a0>
 800c4d2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c4d6:	68f8      	ldr	r0, [r7, #12]
 800c4d8:	eeb0 2a47 	vmov.f32	s4, s14
 800c4dc:	eef0 1a46 	vmov.f32	s3, s12
 800c4e0:	eeb0 1a66 	vmov.f32	s2, s13
 800c4e4:	eddf 0a23 	vldr	s1, [pc, #140]	; 800c574 <turn45inL+0x39c>
 800c4e8:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800c56c <turn45inL+0x394>
 800c4ec:	f7f7 fbd0 	bl	8003c90 <straight_table2>
		wallmode.WallControlMode=0;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c4f4:	2302      	movs	r3, #2
 800c4f6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c4f8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c4fc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c500:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c504:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c508:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c50c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c510:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c514:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c518:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c51c:	eddf 4a16 	vldr	s9, [pc, #88]	; 800c578 <turn45inL+0x3a0>
 800c520:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	eeb0 2a47 	vmov.f32	s4, s14
 800c52a:	eef0 1a45 	vmov.f32	s3, s10
 800c52e:	eeb0 1a65 	vmov.f32	s2, s11
 800c532:	eef0 0a46 	vmov.f32	s1, s12
 800c536:	eeb0 0a66 	vmov.f32	s0, s13
 800c53a:	f7f7 fba9 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800c53e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c542:	2b01      	cmp	r3, #1
 800c544:	d11a      	bne.n	800c57c <turn45inL+0x3a4>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c546:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c54a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c54e:	eeb0 1a47 	vmov.f32	s2, s14
 800c552:	eddf 0a09 	vldr	s1, [pc, #36]	; 800c578 <turn45inL+0x3a0>
 800c556:	eeb0 0a67 	vmov.f32	s0, s15
 800c55a:	f7f8 fb35 	bl	8004bc8 <mollifier_slalom_table>
 800c55e:	e021      	b.n	800c5a4 <turn45inL+0x3cc>
 800c560:	c022ec18 	.word	0xc022ec18
 800c564:	405fd1de 	.word	0x405fd1de
 800c568:	20000814 	.word	0x20000814
 800c56c:	42cd0000 	.word	0x42cd0000
 800c570:	408f4000 	.word	0x408f4000
 800c574:	00000000 	.word	0x00000000
 800c578:	42340000 	.word	0x42340000
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c57c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c580:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c584:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c588:	eef0 2a66 	vmov.f32	s5, s13
 800c58c:	eeb0 2a47 	vmov.f32	s4, s14
 800c590:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800c574 <turn45inL+0x39c>
 800c594:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800c574 <turn45inL+0x39c>
 800c598:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800c578 <turn45inL+0x3a0>
 800c59c:	eeb0 0a67 	vmov.f32	s0, s15
 800c5a0:	f7f8 f9c2 	bl	8004928 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c5ac:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c5b0:	3b02      	subs	r3, #2
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7f3 ffde 	bl	8000574 <__aeabi_i2d>
 800c5b8:	a325      	add	r3, pc, #148	; (adr r3, 800c650 <turn45inL+0x478>)
 800c5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5be:	f7f4 f843 	bl	8000648 <__aeabi_dmul>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	4614      	mov	r4, r2
 800c5c8:	461d      	mov	r5, r3
 800c5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7f3 ffe3 	bl	8000598 <__aeabi_f2d>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	4629      	mov	r1, r5
 800c5da:	f7f3 fe7f 	bl	80002dc <__adddf3>
 800c5de:	4602      	mov	r2, r0
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	4610      	mov	r0, r2
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	f7f4 fb07 	bl	8000bf8 <__aeabi_d2f>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c5f0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c5f4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c5f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c5fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c600:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c604:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c608:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c60c:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800c648 <turn45inL+0x470>
 800c610:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	eeb0 2a47 	vmov.f32	s4, s14
 800c61a:	eef0 1a65 	vmov.f32	s3, s11
 800c61e:	eeb0 1a46 	vmov.f32	s2, s12
 800c622:	eef0 0a66 	vmov.f32	s1, s13
 800c626:	ee00 3a10 	vmov	s0, r3
 800c62a:	f7f7 fb31 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800c62e:	4b07      	ldr	r3, [pc, #28]	; (800c64c <turn45inL+0x474>)
 800c630:	2200      	movs	r2, #0
 800c632:	701a      	strb	r2, [r3, #0]
	}

}
 800c634:	bf00      	nop
 800c636:	3710      	adds	r7, #16
 800c638:	46bd      	mov	sp, r7
 800c63a:	ecbd 8b02 	vpop	{d8}
 800c63e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c642:	b004      	add	sp, #16
 800c644:	4770      	bx	lr
 800c646:	bf00      	nop
 800c648:	42340000 	.word	0x42340000
 800c64c:	20000814 	.word	0x20000814
 800c650:	c022ec18 	.word	0xc022ec18
 800c654:	404fd1de 	.word	0x404fd1de

0800c658 <turn135inR>:

void turn135inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800c658:	b084      	sub	sp, #16
 800c65a:	b5b0      	push	{r4, r5, r7, lr}
 800c65c:	ed2d 8b02 	vpush	{d8}
 800c660:	b084      	sub	sp, #16
 800c662:	af00      	add	r7, sp, #0
 800c664:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c668:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c66c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c670:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c674:	2b01      	cmp	r3, #1
 800c676:	f040 80ae 	bne.w	800c7d6 <turn135inR+0x17e>
		highspeed_mode = 1;
 800c67a:	4bdd      	ldr	r3, [pc, #884]	; (800c9f0 <turn135inR+0x398>)
 800c67c:	2201      	movs	r2, #1
 800c67e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c680:	2301      	movs	r3, #1
 800c682:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c684:	2300      	movs	r3, #0
 800c686:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c688:	2300      	movs	r3, #0
 800c68a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c68c:	2300      	movs	r3, #0
 800c68e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c690:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c694:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c698:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c69c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6a4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c6a8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c6ac:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800c9f4 <turn135inR+0x39c>
 800c6b0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	eeb0 2a47 	vmov.f32	s4, s14
 800c6ba:	eef0 1a46 	vmov.f32	s3, s12
 800c6be:	eeb0 1a66 	vmov.f32	s2, s13
 800c6c2:	eddf 0acf 	vldr	s1, [pc, #828]	; 800ca00 <turn135inR+0x3a8>
 800c6c6:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800c9f8 <turn135inR+0x3a0>
 800c6ca:	f7f7 fae1 	bl	8003c90 <straight_table2>
		wallmode.WallControlMode=0;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c6d2:	2302      	movs	r3, #2
 800c6d4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c6d6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c6da:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c6de:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c6e2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c6e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c6ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6f2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c6f6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c6fa:	eddf 4abe 	vldr	s9, [pc, #760]	; 800c9f4 <turn135inR+0x39c>
 800c6fe:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c702:	68f8      	ldr	r0, [r7, #12]
 800c704:	eeb0 2a47 	vmov.f32	s4, s14
 800c708:	eef0 1a45 	vmov.f32	s3, s10
 800c70c:	eeb0 1a65 	vmov.f32	s2, s11
 800c710:	eef0 0a46 	vmov.f32	s1, s12
 800c714:	eeb0 0a66 	vmov.f32	s0, s13
 800c718:	f7f7 faba 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800c71c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c720:	2b01      	cmp	r3, #1
 800c722:	d10c      	bne.n	800c73e <turn135inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800c724:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c728:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c72c:	eeb0 1a47 	vmov.f32	s2, s14
 800c730:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800ca04 <turn135inR+0x3ac>
 800c734:	eeb0 0a67 	vmov.f32	s0, s15
 800c738:	f7f8 fa46 	bl	8004bc8 <mollifier_slalom_table>
 800c73c:	e015      	b.n	800c76a <turn135inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c73e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c742:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c746:	eef1 7a67 	vneg.f32	s15, s15
 800c74a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c74e:	eef0 2a66 	vmov.f32	s5, s13
 800c752:	eeb0 2a67 	vmov.f32	s4, s15
 800c756:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800ca00 <turn135inR+0x3a8>
 800c75a:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800ca00 <turn135inR+0x3a8>
 800c75e:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800ca04 <turn135inR+0x3ac>
 800c762:	eeb0 0a47 	vmov.f32	s0, s14
 800c766:	f7f8 f8df 	bl	8004928 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c76a:	2300      	movs	r3, #0
 800c76c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c76e:	2300      	movs	r3, #0
 800c770:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c774:	4618      	mov	r0, r3
 800c776:	f7f3 ff0f 	bl	8000598 <__aeabi_f2d>
 800c77a:	a39b      	add	r3, pc, #620	; (adr r3, 800c9e8 <turn135inR+0x390>)
 800c77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c780:	f7f3 fdac 	bl	80002dc <__adddf3>
 800c784:	4602      	mov	r2, r0
 800c786:	460b      	mov	r3, r1
 800c788:	4610      	mov	r0, r2
 800c78a:	4619      	mov	r1, r3
 800c78c:	f7f4 fa34 	bl	8000bf8 <__aeabi_d2f>
 800c790:	4603      	mov	r3, r0
 800c792:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c796:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c79a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c79e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7a6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c7aa:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c7ae:	eddf 5a91 	vldr	s11, [pc, #580]	; 800c9f4 <turn135inR+0x39c>
 800c7b2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c7b6:	68f8      	ldr	r0, [r7, #12]
 800c7b8:	eeb0 2a47 	vmov.f32	s4, s14
 800c7bc:	eef0 1a46 	vmov.f32	s3, s12
 800c7c0:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800ca00 <turn135inR+0x3a8>
 800c7c4:	eef0 0a66 	vmov.f32	s1, s13
 800c7c8:	ee00 3a10 	vmov	s0, r3
 800c7cc:	f7f7 fa60 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800c7d0:	4b87      	ldr	r3, [pc, #540]	; (800c9f0 <turn135inR+0x398>)
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800c7d6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	f040 809d 	bne.w	800c91a <turn135inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800c7e8:	2302      	movs	r3, #2
 800c7ea:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c7f0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c7f4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c7f8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c7fc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c800:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c804:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c80c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c810:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c814:	eddf 4a77 	vldr	s9, [pc, #476]	; 800c9f4 <turn135inR+0x39c>
 800c818:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c81c:	68f8      	ldr	r0, [r7, #12]
 800c81e:	eeb0 2a47 	vmov.f32	s4, s14
 800c822:	eef0 1a45 	vmov.f32	s3, s10
 800c826:	eeb0 1a65 	vmov.f32	s2, s11
 800c82a:	eef0 0a46 	vmov.f32	s1, s12
 800c82e:	eeb0 0a66 	vmov.f32	s0, s13
 800c832:	f7f7 fa2d 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800c836:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	d10c      	bne.n	800c858 <turn135inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800c83e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c842:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c846:	eeb0 1a47 	vmov.f32	s2, s14
 800c84a:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800ca04 <turn135inR+0x3ac>
 800c84e:	eeb0 0a67 	vmov.f32	s0, s15
 800c852:	f7f8 f9b9 	bl	8004bc8 <mollifier_slalom_table>
 800c856:	e015      	b.n	800c884 <turn135inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c858:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c85c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c860:	eef1 7a67 	vneg.f32	s15, s15
 800c864:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c868:	eef0 2a66 	vmov.f32	s5, s13
 800c86c:	eeb0 2a67 	vmov.f32	s4, s15
 800c870:	eddf 1a63 	vldr	s3, [pc, #396]	; 800ca00 <turn135inR+0x3a8>
 800c874:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800ca00 <turn135inR+0x3a8>
 800c878:	eddf 0a62 	vldr	s1, [pc, #392]	; 800ca04 <turn135inR+0x3ac>
 800c87c:	eeb0 0a47 	vmov.f32	s0, s14
 800c880:	f7f8 f852 	bl	8004928 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800c884:	2303      	movs	r3, #3
 800c886:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c888:	2300      	movs	r3, #0
 800c88a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c88c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c890:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c894:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c898:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c89c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8a0:	edd7 7a01 	vldr	s15, [r7, #4]
 800c8a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c8a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8ac:	eef0 7ae7 	vabs.f32	s15, s15
 800c8b0:	ee17 0a90 	vmov	r0, s15
 800c8b4:	f7f3 fe70 	bl	8000598 <__aeabi_f2d>
 800c8b8:	f04f 0200 	mov.w	r2, #0
 800c8bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c8c0:	f7f3 ffec 	bl	800089c <__aeabi_ddiv>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	460b      	mov	r3, r1
 800c8c8:	4614      	mov	r4, r2
 800c8ca:	461d      	mov	r5, r3
 800c8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7f3 fe62 	bl	8000598 <__aeabi_f2d>
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	4620      	mov	r0, r4
 800c8da:	4629      	mov	r1, r5
 800c8dc:	f7f3 ffde 	bl	800089c <__aeabi_ddiv>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	4610      	mov	r0, r2
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	f04f 0200 	mov.w	r2, #0
 800c8ec:	4b43      	ldr	r3, [pc, #268]	; (800c9fc <turn135inR+0x3a4>)
 800c8ee:	f7f3 fcf5 	bl	80002dc <__adddf3>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c8f6:	4610      	mov	r0, r2
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	f7f4 f97d 	bl	8000bf8 <__aeabi_d2f>
 800c8fe:	4603      	mov	r3, r0
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	ee02 3a10 	vmov	s4, r3
 800c906:	edd7 1a01 	vldr	s3, [r7, #4]
 800c90a:	ed97 1a01 	vldr	s2, [r7, #4]
 800c90e:	eef0 0a68 	vmov.f32	s1, s17
 800c912:	eeb0 0a48 	vmov.f32	s0, s16
 800c916:	f7f7 f9bb 	bl	8003c90 <straight_table2>

	}
	if (test_mode >= 2) {
 800c91a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c91e:	2b01      	cmp	r3, #1
 800c920:	f240 80d0 	bls.w	800cac4 <turn135inR+0x46c>

		highspeed_mode = 1;
 800c924:	4b32      	ldr	r3, [pc, #200]	; (800c9f0 <turn135inR+0x398>)
 800c926:	2201      	movs	r2, #1
 800c928:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c92a:	2301      	movs	r3, #1
 800c92c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c92e:	2300      	movs	r3, #0
 800c930:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c932:	2300      	movs	r3, #0
 800c934:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c936:	2300      	movs	r3, #0
 800c938:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c93a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c93e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c942:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c946:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c94a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c94e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c952:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c956:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c9f4 <turn135inR+0x39c>
 800c95a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c95e:	68f8      	ldr	r0, [r7, #12]
 800c960:	eeb0 2a47 	vmov.f32	s4, s14
 800c964:	eef0 1a46 	vmov.f32	s3, s12
 800c968:	eeb0 1a66 	vmov.f32	s2, s13
 800c96c:	eddf 0a24 	vldr	s1, [pc, #144]	; 800ca00 <turn135inR+0x3a8>
 800c970:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c9f8 <turn135inR+0x3a0>
 800c974:	f7f7 f98c 	bl	8003c90 <straight_table2>
		wallmode.WallControlMode=0;
 800c978:	2300      	movs	r3, #0
 800c97a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c97c:	2302      	movs	r3, #2
 800c97e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c980:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c984:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c988:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c98c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c990:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c994:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c998:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c99c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c9a0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c9a4:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c9f4 <turn135inR+0x39c>
 800c9a8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c9ac:	68f8      	ldr	r0, [r7, #12]
 800c9ae:	eeb0 2a47 	vmov.f32	s4, s14
 800c9b2:	eef0 1a45 	vmov.f32	s3, s10
 800c9b6:	eeb0 1a65 	vmov.f32	s2, s11
 800c9ba:	eef0 0a46 	vmov.f32	s1, s12
 800c9be:	eeb0 0a66 	vmov.f32	s0, s13
 800c9c2:	f7f7 f965 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800c9c6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d11c      	bne.n	800ca08 <turn135inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800c9ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c9d2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c9d6:	eeb0 1a47 	vmov.f32	s2, s14
 800c9da:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800ca04 <turn135inR+0x3ac>
 800c9de:	eeb0 0a67 	vmov.f32	s0, s15
 800c9e2:	f7f8 f8f1 	bl	8004bc8 <mollifier_slalom_table>
 800c9e6:	e025      	b.n	800ca34 <turn135inR+0x3dc>
 800c9e8:	c022ec18 	.word	0xc022ec18
 800c9ec:	405fd1de 	.word	0x405fd1de
 800c9f0:	20000814 	.word	0x20000814
 800c9f4:	42340000 	.word	0x42340000
 800c9f8:	42cd0000 	.word	0x42cd0000
 800c9fc:	408f4000 	.word	0x408f4000
 800ca00:	00000000 	.word	0x00000000
 800ca04:	c3070000 	.word	0xc3070000
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ca08:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca0c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ca10:	eef1 7a67 	vneg.f32	s15, s15
 800ca14:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ca18:	eef0 2a66 	vmov.f32	s5, s13
 800ca1c:	eeb0 2a67 	vmov.f32	s4, s15
 800ca20:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800ca00 <turn135inR+0x3a8>
 800ca24:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800ca00 <turn135inR+0x3a8>
 800ca28:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800ca04 <turn135inR+0x3ac>
 800ca2c:	eeb0 0a47 	vmov.f32	s0, s14
 800ca30:	f7f7 ff7a 	bl	8004928 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ca34:	2300      	movs	r3, #0
 800ca36:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ca3c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ca40:	3b02      	subs	r3, #2
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7f3 fd96 	bl	8000574 <__aeabi_i2d>
 800ca48:	a325      	add	r3, pc, #148	; (adr r3, 800cae0 <turn135inR+0x488>)
 800ca4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4e:	f7f3 fdfb 	bl	8000648 <__aeabi_dmul>
 800ca52:	4602      	mov	r2, r0
 800ca54:	460b      	mov	r3, r1
 800ca56:	4614      	mov	r4, r2
 800ca58:	461d      	mov	r5, r3
 800ca5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7f3 fd9b 	bl	8000598 <__aeabi_f2d>
 800ca62:	4602      	mov	r2, r0
 800ca64:	460b      	mov	r3, r1
 800ca66:	4620      	mov	r0, r4
 800ca68:	4629      	mov	r1, r5
 800ca6a:	f7f3 fc37 	bl	80002dc <__adddf3>
 800ca6e:	4602      	mov	r2, r0
 800ca70:	460b      	mov	r3, r1
 800ca72:	4610      	mov	r0, r2
 800ca74:	4619      	mov	r1, r3
 800ca76:	f7f4 f8bf 	bl	8000bf8 <__aeabi_d2f>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ca80:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ca84:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ca88:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca94:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ca98:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ca9c:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800cad8 <turn135inR+0x480>
 800caa0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800caa4:	68f8      	ldr	r0, [r7, #12]
 800caa6:	eeb0 2a47 	vmov.f32	s4, s14
 800caaa:	eef0 1a65 	vmov.f32	s3, s11
 800caae:	eeb0 1a46 	vmov.f32	s2, s12
 800cab2:	eef0 0a66 	vmov.f32	s1, s13
 800cab6:	ee00 3a10 	vmov	s0, r3
 800caba:	f7f7 f8e9 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800cabe:	4b07      	ldr	r3, [pc, #28]	; (800cadc <turn135inR+0x484>)
 800cac0:	2200      	movs	r2, #0
 800cac2:	701a      	strb	r2, [r3, #0]
	}

}
 800cac4:	bf00      	nop
 800cac6:	3710      	adds	r7, #16
 800cac8:	46bd      	mov	sp, r7
 800caca:	ecbd 8b02 	vpop	{d8}
 800cace:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cad2:	b004      	add	sp, #16
 800cad4:	4770      	bx	lr
 800cad6:	bf00      	nop
 800cad8:	42340000 	.word	0x42340000
 800cadc:	20000814 	.word	0x20000814
 800cae0:	c022ec18 	.word	0xc022ec18
 800cae4:	404fd1de 	.word	0x404fd1de

0800cae8 <turn135inL>:

void turn135inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800cae8:	b084      	sub	sp, #16
 800caea:	b5b0      	push	{r4, r5, r7, lr}
 800caec:	ed2d 8b02 	vpush	{d8}
 800caf0:	b084      	sub	sp, #16
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800caf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cafc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800cb00:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	f040 80ac 	bne.w	800cc62 <turn135inL+0x17a>
		highspeed_mode = 1;
 800cb0a:	4bdb      	ldr	r3, [pc, #876]	; (800ce78 <turn135inL+0x390>)
 800cb0c:	2201      	movs	r2, #1
 800cb0e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800cb10:	2301      	movs	r3, #1
 800cb12:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cb14:	2300      	movs	r3, #0
 800cb16:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800cb20:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cb24:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cb28:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb30:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb34:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cb38:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800cb3c:	eddf 5acf 	vldr	s11, [pc, #828]	; 800ce7c <turn135inL+0x394>
 800cb40:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cb44:	68f8      	ldr	r0, [r7, #12]
 800cb46:	eeb0 2a47 	vmov.f32	s4, s14
 800cb4a:	eef0 1a46 	vmov.f32	s3, s12
 800cb4e:	eeb0 1a66 	vmov.f32	s2, s13
 800cb52:	eddf 0acd 	vldr	s1, [pc, #820]	; 800ce88 <turn135inL+0x3a0>
 800cb56:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800ce80 <turn135inL+0x398>
 800cb5a:	f7f7 f899 	bl	8003c90 <straight_table2>
		wallmode.WallControlMode=0;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800cb62:	2302      	movs	r3, #2
 800cb64:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cb66:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cb6a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cb6e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cb72:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cb76:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb7a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb82:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cb86:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cb8a:	eddf 4abc 	vldr	s9, [pc, #752]	; 800ce7c <turn135inL+0x394>
 800cb8e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cb92:	68f8      	ldr	r0, [r7, #12]
 800cb94:	eeb0 2a47 	vmov.f32	s4, s14
 800cb98:	eef0 1a45 	vmov.f32	s3, s10
 800cb9c:	eeb0 1a65 	vmov.f32	s2, s11
 800cba0:	eef0 0a46 	vmov.f32	s1, s12
 800cba4:	eeb0 0a66 	vmov.f32	s0, s13
 800cba8:	f7f7 f872 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800cbac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d10c      	bne.n	800cbce <turn135inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800cbb4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cbb8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cbbc:	eeb0 1a47 	vmov.f32	s2, s14
 800cbc0:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800ce8c <turn135inL+0x3a4>
 800cbc4:	eeb0 0a67 	vmov.f32	s0, s15
 800cbc8:	f7f7 fffe 	bl	8004bc8 <mollifier_slalom_table>
 800cbcc:	e013      	b.n	800cbf6 <turn135inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cbce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cbd2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cbd6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cbda:	eef0 2a66 	vmov.f32	s5, s13
 800cbde:	eeb0 2a47 	vmov.f32	s4, s14
 800cbe2:	eddf 1aa9 	vldr	s3, [pc, #676]	; 800ce88 <turn135inL+0x3a0>
 800cbe6:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 800ce88 <turn135inL+0x3a0>
 800cbea:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800ce8c <turn135inL+0x3a4>
 800cbee:	eeb0 0a67 	vmov.f32	s0, s15
 800cbf2:	f7f7 fe99 	bl	8004928 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7f3 fcc9 	bl	8000598 <__aeabi_f2d>
 800cc06:	a39a      	add	r3, pc, #616	; (adr r3, 800ce70 <turn135inL+0x388>)
 800cc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0c:	f7f3 fb66 	bl	80002dc <__adddf3>
 800cc10:	4602      	mov	r2, r0
 800cc12:	460b      	mov	r3, r1
 800cc14:	4610      	mov	r0, r2
 800cc16:	4619      	mov	r1, r3
 800cc18:	f7f3 ffee 	bl	8000bf8 <__aeabi_d2f>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cc22:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cc26:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc2a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc32:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cc36:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cc3a:	eddf 5a90 	vldr	s11, [pc, #576]	; 800ce7c <turn135inL+0x394>
 800cc3e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cc42:	68f8      	ldr	r0, [r7, #12]
 800cc44:	eeb0 2a47 	vmov.f32	s4, s14
 800cc48:	eef0 1a46 	vmov.f32	s3, s12
 800cc4c:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800ce88 <turn135inL+0x3a0>
 800cc50:	eef0 0a66 	vmov.f32	s1, s13
 800cc54:	ee00 3a10 	vmov	s0, r3
 800cc58:	f7f7 f81a 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800cc5c:	4b86      	ldr	r3, [pc, #536]	; (800ce78 <turn135inL+0x390>)
 800cc5e:	2200      	movs	r2, #0
 800cc60:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800cc62:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	f040 809b 	bne.w	800cda2 <turn135inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cc70:	2300      	movs	r3, #0
 800cc72:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800cc74:	2302      	movs	r3, #2
 800cc76:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cc7c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cc80:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cc84:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cc88:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cc8c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc94:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc98:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cc9c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cca0:	eddf 4a76 	vldr	s9, [pc, #472]	; 800ce7c <turn135inL+0x394>
 800cca4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	eeb0 2a47 	vmov.f32	s4, s14
 800ccae:	eef0 1a45 	vmov.f32	s3, s10
 800ccb2:	eeb0 1a65 	vmov.f32	s2, s11
 800ccb6:	eef0 0a46 	vmov.f32	s1, s12
 800ccba:	eeb0 0a66 	vmov.f32	s0, s13
 800ccbe:	f7f6 ffe7 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800ccc2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d10c      	bne.n	800cce4 <turn135inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800ccca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ccd2:	eeb0 1a47 	vmov.f32	s2, s14
 800ccd6:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800ce8c <turn135inL+0x3a4>
 800ccda:	eeb0 0a67 	vmov.f32	s0, s15
 800ccde:	f7f7 ff73 	bl	8004bc8 <mollifier_slalom_table>
 800cce2:	e013      	b.n	800cd0c <turn135inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cce4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cce8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ccec:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ccf0:	eef0 2a66 	vmov.f32	s5, s13
 800ccf4:	eeb0 2a47 	vmov.f32	s4, s14
 800ccf8:	eddf 1a63 	vldr	s3, [pc, #396]	; 800ce88 <turn135inL+0x3a0>
 800ccfc:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800ce88 <turn135inL+0x3a0>
 800cd00:	eddf 0a62 	vldr	s1, [pc, #392]	; 800ce8c <turn135inL+0x3a4>
 800cd04:	eeb0 0a67 	vmov.f32	s0, s15
 800cd08:	f7f7 fe0e 	bl	8004928 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800cd0c:	2303      	movs	r3, #3
 800cd0e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cd10:	2300      	movs	r3, #0
 800cd12:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cd14:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cd18:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cd1c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd20:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd24:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd28:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cd30:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd34:	eef0 7ae7 	vabs.f32	s15, s15
 800cd38:	ee17 0a90 	vmov	r0, s15
 800cd3c:	f7f3 fc2c 	bl	8000598 <__aeabi_f2d>
 800cd40:	f04f 0200 	mov.w	r2, #0
 800cd44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cd48:	f7f3 fda8 	bl	800089c <__aeabi_ddiv>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	460b      	mov	r3, r1
 800cd50:	4614      	mov	r4, r2
 800cd52:	461d      	mov	r5, r3
 800cd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7f3 fc1e 	bl	8000598 <__aeabi_f2d>
 800cd5c:	4602      	mov	r2, r0
 800cd5e:	460b      	mov	r3, r1
 800cd60:	4620      	mov	r0, r4
 800cd62:	4629      	mov	r1, r5
 800cd64:	f7f3 fd9a 	bl	800089c <__aeabi_ddiv>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	4610      	mov	r0, r2
 800cd6e:	4619      	mov	r1, r3
 800cd70:	f04f 0200 	mov.w	r2, #0
 800cd74:	4b43      	ldr	r3, [pc, #268]	; (800ce84 <turn135inL+0x39c>)
 800cd76:	f7f3 fab1 	bl	80002dc <__adddf3>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cd7e:	4610      	mov	r0, r2
 800cd80:	4619      	mov	r1, r3
 800cd82:	f7f3 ff39 	bl	8000bf8 <__aeabi_d2f>
 800cd86:	4603      	mov	r3, r0
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	ee02 3a10 	vmov	s4, r3
 800cd8e:	edd7 1a01 	vldr	s3, [r7, #4]
 800cd92:	ed97 1a01 	vldr	s2, [r7, #4]
 800cd96:	eef0 0a68 	vmov.f32	s1, s17
 800cd9a:	eeb0 0a48 	vmov.f32	s0, s16
 800cd9e:	f7f6 ff77 	bl	8003c90 <straight_table2>

	}
	if (test_mode >= 2) {
 800cda2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cda6:	2b01      	cmp	r3, #1
 800cda8:	f240 80ce 	bls.w	800cf48 <turn135inL+0x460>

		highspeed_mode = 1;
 800cdac:	4b32      	ldr	r3, [pc, #200]	; (800ce78 <turn135inL+0x390>)
 800cdae:	2201      	movs	r2, #1
 800cdb0:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800cdc2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cdc6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cdca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cdce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cdd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdd6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cdda:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800cdde:	eddf 5a27 	vldr	s11, [pc, #156]	; 800ce7c <turn135inL+0x394>
 800cde2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cde6:	68f8      	ldr	r0, [r7, #12]
 800cde8:	eeb0 2a47 	vmov.f32	s4, s14
 800cdec:	eef0 1a46 	vmov.f32	s3, s12
 800cdf0:	eeb0 1a66 	vmov.f32	s2, s13
 800cdf4:	eddf 0a24 	vldr	s1, [pc, #144]	; 800ce88 <turn135inL+0x3a0>
 800cdf8:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800ce80 <turn135inL+0x398>
 800cdfc:	f7f6 ff48 	bl	8003c90 <straight_table2>
		wallmode.WallControlMode=0;
 800ce00:	2300      	movs	r3, #0
 800ce02:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800ce04:	2302      	movs	r3, #2
 800ce06:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ce08:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ce0c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ce10:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ce14:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ce18:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce20:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce24:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ce28:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ce2c:	eddf 4a13 	vldr	s9, [pc, #76]	; 800ce7c <turn135inL+0x394>
 800ce30:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ce34:	68f8      	ldr	r0, [r7, #12]
 800ce36:	eeb0 2a47 	vmov.f32	s4, s14
 800ce3a:	eef0 1a45 	vmov.f32	s3, s10
 800ce3e:	eeb0 1a65 	vmov.f32	s2, s11
 800ce42:	eef0 0a46 	vmov.f32	s1, s12
 800ce46:	eeb0 0a66 	vmov.f32	s0, s13
 800ce4a:	f7f6 ff21 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800ce4e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	d11c      	bne.n	800ce90 <turn135inL+0x3a8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800ce56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce5a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ce5e:	eeb0 1a47 	vmov.f32	s2, s14
 800ce62:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800ce8c <turn135inL+0x3a4>
 800ce66:	eeb0 0a67 	vmov.f32	s0, s15
 800ce6a:	f7f7 fead 	bl	8004bc8 <mollifier_slalom_table>
 800ce6e:	e023      	b.n	800ceb8 <turn135inL+0x3d0>
 800ce70:	c022ec18 	.word	0xc022ec18
 800ce74:	405fd1de 	.word	0x405fd1de
 800ce78:	20000814 	.word	0x20000814
 800ce7c:	42340000 	.word	0x42340000
 800ce80:	42cd0000 	.word	0x42cd0000
 800ce84:	408f4000 	.word	0x408f4000
 800ce88:	00000000 	.word	0x00000000
 800ce8c:	43070000 	.word	0x43070000
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ce90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce94:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ce98:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ce9c:	eef0 2a66 	vmov.f32	s5, s13
 800cea0:	eeb0 2a47 	vmov.f32	s4, s14
 800cea4:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800ce88 <turn135inL+0x3a0>
 800cea8:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800ce88 <turn135inL+0x3a0>
 800ceac:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800ce8c <turn135inL+0x3a4>
 800ceb0:	eeb0 0a67 	vmov.f32	s0, s15
 800ceb4:	f7f7 fd38 	bl	8004928 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cebc:	2300      	movs	r3, #0
 800cebe:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cec0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cec4:	3b02      	subs	r3, #2
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7f3 fb54 	bl	8000574 <__aeabi_i2d>
 800cecc:	a326      	add	r3, pc, #152	; (adr r3, 800cf68 <turn135inL+0x480>)
 800cece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced2:	f7f3 fbb9 	bl	8000648 <__aeabi_dmul>
 800ced6:	4602      	mov	r2, r0
 800ced8:	460b      	mov	r3, r1
 800ceda:	4614      	mov	r4, r2
 800cedc:	461d      	mov	r5, r3
 800cede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7f3 fb59 	bl	8000598 <__aeabi_f2d>
 800cee6:	4602      	mov	r2, r0
 800cee8:	460b      	mov	r3, r1
 800ceea:	4620      	mov	r0, r4
 800ceec:	4629      	mov	r1, r5
 800ceee:	f7f3 f9f5 	bl	80002dc <__adddf3>
 800cef2:	4602      	mov	r2, r0
 800cef4:	460b      	mov	r3, r1
 800cef6:	4610      	mov	r0, r2
 800cef8:	4619      	mov	r1, r3
 800cefa:	f7f3 fe7d 	bl	8000bf8 <__aeabi_d2f>
 800cefe:	4603      	mov	r3, r0
 800cf00:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cf04:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cf08:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cf0c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf18:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cf1c:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cf20:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 800cf60 <turn135inL+0x478>
 800cf24:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cf28:	68f8      	ldr	r0, [r7, #12]
 800cf2a:	eeb0 2a47 	vmov.f32	s4, s14
 800cf2e:	eef0 1a65 	vmov.f32	s3, s11
 800cf32:	eeb0 1a46 	vmov.f32	s2, s12
 800cf36:	eef0 0a66 	vmov.f32	s1, s13
 800cf3a:	ee00 3a10 	vmov	s0, r3
 800cf3e:	f7f6 fea7 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800cf42:	4b08      	ldr	r3, [pc, #32]	; (800cf64 <turn135inL+0x47c>)
 800cf44:	2200      	movs	r2, #0
 800cf46:	701a      	strb	r2, [r3, #0]
	}

}
 800cf48:	bf00      	nop
 800cf4a:	3710      	adds	r7, #16
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	ecbd 8b02 	vpop	{d8}
 800cf52:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cf56:	b004      	add	sp, #16
 800cf58:	4770      	bx	lr
 800cf5a:	bf00      	nop
 800cf5c:	f3af 8000 	nop.w
 800cf60:	42340000 	.word	0x42340000
 800cf64:	20000814 	.word	0x20000814
 800cf68:	c022ec18 	.word	0xc022ec18
 800cf6c:	404fd1de 	.word	0x404fd1de

0800cf70 <turn45outR>:


void turn45outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800cf70:	b084      	sub	sp, #16
 800cf72:	b5b0      	push	{r4, r5, r7, lr}
 800cf74:	ed2d 8b02 	vpush	{d8}
 800cf78:	b084      	sub	sp, #16
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800cf80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cf84:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;

	if (test_mode == 1) {
 800cf88:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	f040 80a5 	bne.w	800d0dc <turn45outR+0x16c>
		highspeed_mode = 1;
 800cf92:	4be9      	ldr	r3, [pc, #932]	; (800d338 <turn45outR+0x3c8>)
 800cf94:	2201      	movs	r2, #1
 800cf96:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cfa8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cfac:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cfb0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cfb4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cfb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cfbc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cfc0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cfc4:	eddf 5add 	vldr	s11, [pc, #884]	; 800d33c <turn45outR+0x3cc>
 800cfc8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cfcc:	68f8      	ldr	r0, [r7, #12]
 800cfce:	eeb0 2a47 	vmov.f32	s4, s14
 800cfd2:	eef0 1a46 	vmov.f32	s3, s12
 800cfd6:	eeb0 1a66 	vmov.f32	s2, s13
 800cfda:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800d340 <turn45outR+0x3d0>
 800cfde:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800d344 <turn45outR+0x3d4>
 800cfe2:	f7f6 fe55 	bl	8003c90 <straight_table2>
		wallmode.WallControlMode=0;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=3;
 800cfea:	2303      	movs	r3, #3
 800cfec:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cfee:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cff2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cff6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cffa:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cffe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d002:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d006:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d00a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d00e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d012:	eddf 4aca 	vldr	s9, [pc, #808]	; 800d33c <turn45outR+0x3cc>
 800d016:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d01a:	68f8      	ldr	r0, [r7, #12]
 800d01c:	eeb0 2a47 	vmov.f32	s4, s14
 800d020:	eef0 1a45 	vmov.f32	s3, s10
 800d024:	eeb0 1a65 	vmov.f32	s2, s11
 800d028:	eef0 0a46 	vmov.f32	s1, s12
 800d02c:	eeb0 0a66 	vmov.f32	s0, s13
 800d030:	f7f6 fe2e 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800d034:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d10c      	bne.n	800d056 <turn45outR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800d03c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d040:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d044:	eeb0 1a47 	vmov.f32	s2, s14
 800d048:	eddf 0abf 	vldr	s1, [pc, #764]	; 800d348 <turn45outR+0x3d8>
 800d04c:	eeb0 0a67 	vmov.f32	s0, s15
 800d050:	f7f7 fdba 	bl	8004bc8 <mollifier_slalom_table>
 800d054:	e015      	b.n	800d082 <turn45outR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d056:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d05a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d05e:	eef1 7a67 	vneg.f32	s15, s15
 800d062:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d066:	eef0 2a66 	vmov.f32	s5, s13
 800d06a:	eeb0 2a67 	vmov.f32	s4, s15
 800d06e:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800d340 <turn45outR+0x3d0>
 800d072:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800d340 <turn45outR+0x3d0>
 800d076:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800d348 <turn45outR+0x3d8>
 800d07a:	eeb0 0a47 	vmov.f32	s0, s14
 800d07e:	f7f7 fc53 	bl	8004928 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800d082:	2300      	movs	r3, #0
 800d084:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d086:	2300      	movs	r3, #0
 800d088:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d08a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d08e:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800d34c <turn45outR+0x3dc>
 800d092:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d096:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d09a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d09e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d0a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0aa:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d0ae:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d0b2:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800d33c <turn45outR+0x3cc>
 800d0b6:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d0ba:	68f8      	ldr	r0, [r7, #12]
 800d0bc:	eeb0 2a47 	vmov.f32	s4, s14
 800d0c0:	eef0 1a65 	vmov.f32	s3, s11
 800d0c4:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800d340 <turn45outR+0x3d0>
 800d0c8:	eef0 0a46 	vmov.f32	s1, s12
 800d0cc:	eeb0 0a66 	vmov.f32	s0, s13
 800d0d0:	f7f6 fdde 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800d0d4:	4b98      	ldr	r3, [pc, #608]	; (800d338 <turn45outR+0x3c8>)
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d0da:	e123      	b.n	800d324 <turn45outR+0x3b4>
	}else if (test_mode >= 2) {
 800d0dc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	f240 8082 	bls.w	800d1ea <turn45outR+0x27a>
		highspeed_mode = 1;
 800d0e6:	4b94      	ldr	r3, [pc, #592]	; (800d338 <turn45outR+0x3c8>)
 800d0e8:	2201      	movs	r2, #1
 800d0ea:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d0f4:	2303      	movs	r3, #3
 800d0f6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d0fc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d100:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d104:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d108:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d10c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d110:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d114:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d118:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d11c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d120:	eddf 4a86 	vldr	s9, [pc, #536]	; 800d33c <turn45outR+0x3cc>
 800d124:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	eeb0 2a47 	vmov.f32	s4, s14
 800d12e:	eef0 1a45 	vmov.f32	s3, s10
 800d132:	eeb0 1a65 	vmov.f32	s2, s11
 800d136:	eef0 0a46 	vmov.f32	s1, s12
 800d13a:	eeb0 0a66 	vmov.f32	s0, s13
 800d13e:	f7f6 fda7 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800d142:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d146:	2b01      	cmp	r3, #1
 800d148:	d10c      	bne.n	800d164 <turn45outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800d14a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d14e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d152:	eeb0 1a47 	vmov.f32	s2, s14
 800d156:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800d348 <turn45outR+0x3d8>
 800d15a:	eeb0 0a67 	vmov.f32	s0, s15
 800d15e:	f7f7 fd33 	bl	8004bc8 <mollifier_slalom_table>
 800d162:	e015      	b.n	800d190 <turn45outR+0x220>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d164:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d168:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d16c:	eef1 7a67 	vneg.f32	s15, s15
 800d170:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d174:	eef0 2a66 	vmov.f32	s5, s13
 800d178:	eeb0 2a67 	vmov.f32	s4, s15
 800d17c:	eddf 1a70 	vldr	s3, [pc, #448]	; 800d340 <turn45outR+0x3d0>
 800d180:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800d340 <turn45outR+0x3d0>
 800d184:	eddf 0a70 	vldr	s1, [pc, #448]	; 800d348 <turn45outR+0x3d8>
 800d188:	eeb0 0a47 	vmov.f32	s0, s14
 800d18c:	f7f7 fbcc 	bl	8004928 <slalom_table2>
		wallmode.WallControlMode=0;
 800d190:	2300      	movs	r3, #0
 800d192:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d194:	2300      	movs	r3, #0
 800d196:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d198:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d19c:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800d34c <turn45outR+0x3dc>
 800d1a0:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d1a4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d1a8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d1ac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d1b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1b8:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d1bc:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d1c0:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800d33c <turn45outR+0x3cc>
 800d1c4:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d1c8:	68f8      	ldr	r0, [r7, #12]
 800d1ca:	eeb0 2a47 	vmov.f32	s4, s14
 800d1ce:	eef0 1a65 	vmov.f32	s3, s11
 800d1d2:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800d340 <turn45outR+0x3d0>
 800d1d6:	eef0 0a46 	vmov.f32	s1, s12
 800d1da:	eeb0 0a66 	vmov.f32	s0, s13
 800d1de:	f7f6 fd57 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800d1e2:	4b55      	ldr	r3, [pc, #340]	; (800d338 <turn45outR+0x3c8>)
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	701a      	strb	r2, [r3, #0]
}
 800d1e8:	e09c      	b.n	800d324 <turn45outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d1f2:	2303      	movs	r3, #3
 800d1f4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d1fa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d1fe:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d202:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d206:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d20a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d20e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d212:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d216:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d21a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d21e:	eddf 4a47 	vldr	s9, [pc, #284]	; 800d33c <turn45outR+0x3cc>
 800d222:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d226:	68f8      	ldr	r0, [r7, #12]
 800d228:	eeb0 2a47 	vmov.f32	s4, s14
 800d22c:	eef0 1a45 	vmov.f32	s3, s10
 800d230:	eeb0 1a65 	vmov.f32	s2, s11
 800d234:	eef0 0a46 	vmov.f32	s1, s12
 800d238:	eeb0 0a66 	vmov.f32	s0, s13
 800d23c:	f7f6 fd28 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800d240:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d244:	2b01      	cmp	r3, #1
 800d246:	d10c      	bne.n	800d262 <turn45outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800d248:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d24c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d250:	eeb0 1a47 	vmov.f32	s2, s14
 800d254:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800d348 <turn45outR+0x3d8>
 800d258:	eeb0 0a67 	vmov.f32	s0, s15
 800d25c:	f7f7 fcb4 	bl	8004bc8 <mollifier_slalom_table>
 800d260:	e015      	b.n	800d28e <turn45outR+0x31e>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d262:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d266:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d26a:	eef1 7a67 	vneg.f32	s15, s15
 800d26e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d272:	eef0 2a66 	vmov.f32	s5, s13
 800d276:	eeb0 2a67 	vmov.f32	s4, s15
 800d27a:	eddf 1a31 	vldr	s3, [pc, #196]	; 800d340 <turn45outR+0x3d0>
 800d27e:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800d340 <turn45outR+0x3d0>
 800d282:	eddf 0a31 	vldr	s1, [pc, #196]	; 800d348 <turn45outR+0x3d8>
 800d286:	eeb0 0a47 	vmov.f32	s0, s14
 800d28a:	f7f7 fb4d 	bl	8004928 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d28e:	2301      	movs	r3, #1
 800d290:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d292:	2300      	movs	r3, #0
 800d294:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d296:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d29a:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d29e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d2a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2aa:	edd7 7a01 	vldr	s15, [r7, #4]
 800d2ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d2b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2b6:	eef0 7ae7 	vabs.f32	s15, s15
 800d2ba:	ee17 0a90 	vmov	r0, s15
 800d2be:	f7f3 f96b 	bl	8000598 <__aeabi_f2d>
 800d2c2:	f04f 0200 	mov.w	r2, #0
 800d2c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d2ca:	f7f3 fae7 	bl	800089c <__aeabi_ddiv>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	4614      	mov	r4, r2
 800d2d4:	461d      	mov	r5, r3
 800d2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f7f3 f95d 	bl	8000598 <__aeabi_f2d>
 800d2de:	4602      	mov	r2, r0
 800d2e0:	460b      	mov	r3, r1
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	4629      	mov	r1, r5
 800d2e6:	f7f3 fad9 	bl	800089c <__aeabi_ddiv>
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	4610      	mov	r0, r2
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	f04f 0200 	mov.w	r2, #0
 800d2f6:	4b16      	ldr	r3, [pc, #88]	; (800d350 <turn45outR+0x3e0>)
 800d2f8:	f7f2 fff0 	bl	80002dc <__adddf3>
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d300:	4610      	mov	r0, r2
 800d302:	4619      	mov	r1, r3
 800d304:	f7f3 fc78 	bl	8000bf8 <__aeabi_d2f>
 800d308:	4603      	mov	r3, r0
 800d30a:	68f8      	ldr	r0, [r7, #12]
 800d30c:	ee02 3a10 	vmov	s4, r3
 800d310:	edd7 1a01 	vldr	s3, [r7, #4]
 800d314:	ed97 1a01 	vldr	s2, [r7, #4]
 800d318:	eef0 0a68 	vmov.f32	s1, s17
 800d31c:	eeb0 0a48 	vmov.f32	s0, s16
 800d320:	f7f6 fcb6 	bl	8003c90 <straight_table2>
}
 800d324:	bf00      	nop
 800d326:	3710      	adds	r7, #16
 800d328:	46bd      	mov	sp, r7
 800d32a:	ecbd 8b02 	vpop	{d8}
 800d32e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d332:	b004      	add	sp, #16
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop
 800d338:	20000814 	.word	0x20000814
 800d33c:	42340000 	.word	0x42340000
 800d340:	00000000 	.word	0x00000000
 800d344:	42c4477b 	.word	0x42c4477b
 800d348:	c2340000 	.word	0xc2340000
 800d34c:	42b40000 	.word	0x42b40000
 800d350:	408f4000 	.word	0x408f4000

0800d354 <turn45outL>:


void turn45outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d354:	b084      	sub	sp, #16
 800d356:	b5b0      	push	{r4, r5, r7, lr}
 800d358:	ed2d 8b02 	vpush	{d8}
 800d35c:	b084      	sub	sp, #16
 800d35e:	af00      	add	r7, sp, #0
 800d360:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d368:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d36c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d370:	2b01      	cmp	r3, #1
 800d372:	f040 80a3 	bne.w	800d4bc <turn45outL+0x168>
			highspeed_mode = 1;
 800d376:	4be5      	ldr	r3, [pc, #916]	; (800d70c <turn45outL+0x3b8>)
 800d378:	2201      	movs	r2, #1
 800d37a:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800d37c:	2300      	movs	r3, #0
 800d37e:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800d380:	2300      	movs	r3, #0
 800d382:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800d384:	2300      	movs	r3, #0
 800d386:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800d388:	2300      	movs	r3, #0
 800d38a:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d38c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d390:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d394:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d398:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d39c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3a0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d3a4:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d3a8:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800d710 <turn45outL+0x3bc>
 800d3ac:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d3b0:	68f8      	ldr	r0, [r7, #12]
 800d3b2:	eeb0 2a47 	vmov.f32	s4, s14
 800d3b6:	eef0 1a46 	vmov.f32	s3, s12
 800d3ba:	eeb0 1a66 	vmov.f32	s2, s13
 800d3be:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800d714 <turn45outL+0x3c0>
 800d3c2:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800d718 <turn45outL+0x3c4>
 800d3c6:	f7f6 fc63 	bl	8003c90 <straight_table2>
			wallmode.WallControlMode=0;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=4;
 800d3ce:	2304      	movs	r3, #4
 800d3d0:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d3d2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d3d6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d3da:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d3de:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d3e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d3e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d3ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3ee:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d3f2:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d3f6:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800d710 <turn45outL+0x3bc>
 800d3fa:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d3fe:	68f8      	ldr	r0, [r7, #12]
 800d400:	eeb0 2a47 	vmov.f32	s4, s14
 800d404:	eef0 1a45 	vmov.f32	s3, s10
 800d408:	eeb0 1a65 	vmov.f32	s2, s11
 800d40c:	eef0 0a46 	vmov.f32	s1, s12
 800d410:	eeb0 0a66 	vmov.f32	s0, s13
 800d414:	f7f6 fc3c 	bl	8003c90 <straight_table2>
			if(mollifier_mode == ON){
 800d418:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d10c      	bne.n	800d43a <turn45outL+0xe6>
				mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800d420:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d424:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d428:	eeb0 1a47 	vmov.f32	s2, s14
 800d42c:	eddf 0ab8 	vldr	s1, [pc, #736]	; 800d710 <turn45outL+0x3bc>
 800d430:	eeb0 0a67 	vmov.f32	s0, s15
 800d434:	f7f7 fbc8 	bl	8004bc8 <mollifier_slalom_table>
 800d438:	e013      	b.n	800d462 <turn45outL+0x10e>
			}else{
				slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d43a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d43e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d442:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d446:	eef0 2a66 	vmov.f32	s5, s13
 800d44a:	eeb0 2a47 	vmov.f32	s4, s14
 800d44e:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800d714 <turn45outL+0x3c0>
 800d452:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800d714 <turn45outL+0x3c0>
 800d456:	eddf 0aae 	vldr	s1, [pc, #696]	; 800d710 <turn45outL+0x3bc>
 800d45a:	eeb0 0a67 	vmov.f32	s0, s15
 800d45e:	f7f7 fa63 	bl	8004928 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d462:	2300      	movs	r3, #0
 800d464:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d466:	2300      	movs	r3, #0
 800d468:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d46a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d46e:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800d71c <turn45outL+0x3c8>
 800d472:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d476:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d47a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d47e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d482:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d486:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d48a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d48e:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d492:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800d710 <turn45outL+0x3bc>
 800d496:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d49a:	68f8      	ldr	r0, [r7, #12]
 800d49c:	eeb0 2a47 	vmov.f32	s4, s14
 800d4a0:	eef0 1a65 	vmov.f32	s3, s11
 800d4a4:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800d714 <turn45outL+0x3c0>
 800d4a8:	eef0 0a46 	vmov.f32	s1, s12
 800d4ac:	eeb0 0a66 	vmov.f32	s0, s13
 800d4b0:	f7f6 fbee 	bl	8003c90 <straight_table2>
			highspeed_mode = 0;
 800d4b4:	4b95      	ldr	r3, [pc, #596]	; (800d70c <turn45outL+0x3b8>)
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d4ba:	e11e      	b.n	800d6fa <turn45outL+0x3a6>
		}else if (test_mode >= 2) {
 800d4bc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d97f      	bls.n	800d5c4 <turn45outL+0x270>
		highspeed_mode = 1;
 800d4c4:	4b91      	ldr	r3, [pc, #580]	; (800d70c <turn45outL+0x3b8>)
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d4d2:	2304      	movs	r3, #4
 800d4d4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d4da:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d4de:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d4e2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d4e6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d4ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d4ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d4f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4f6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d4fa:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d4fe:	eddf 4a84 	vldr	s9, [pc, #528]	; 800d710 <turn45outL+0x3bc>
 800d502:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d506:	68f8      	ldr	r0, [r7, #12]
 800d508:	eeb0 2a47 	vmov.f32	s4, s14
 800d50c:	eef0 1a45 	vmov.f32	s3, s10
 800d510:	eeb0 1a65 	vmov.f32	s2, s11
 800d514:	eef0 0a46 	vmov.f32	s1, s12
 800d518:	eeb0 0a66 	vmov.f32	s0, s13
 800d51c:	f7f6 fbb8 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800d520:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d524:	2b01      	cmp	r3, #1
 800d526:	d10c      	bne.n	800d542 <turn45outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800d528:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d52c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d530:	eeb0 1a47 	vmov.f32	s2, s14
 800d534:	eddf 0a76 	vldr	s1, [pc, #472]	; 800d710 <turn45outL+0x3bc>
 800d538:	eeb0 0a67 	vmov.f32	s0, s15
 800d53c:	f7f7 fb44 	bl	8004bc8 <mollifier_slalom_table>
 800d540:	e013      	b.n	800d56a <turn45outL+0x216>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d542:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d546:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d54a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d54e:	eef0 2a66 	vmov.f32	s5, s13
 800d552:	eeb0 2a47 	vmov.f32	s4, s14
 800d556:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800d714 <turn45outL+0x3c0>
 800d55a:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800d714 <turn45outL+0x3c0>
 800d55e:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800d710 <turn45outL+0x3bc>
 800d562:	eeb0 0a67 	vmov.f32	s0, s15
 800d566:	f7f7 f9df 	bl	8004928 <slalom_table2>
		wallmode.WallControlMode=0;
 800d56a:	2300      	movs	r3, #0
 800d56c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d56e:	2300      	movs	r3, #0
 800d570:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d572:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d576:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800d71c <turn45outL+0x3c8>
 800d57a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d57e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d582:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d586:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d58a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d58e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d592:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d596:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d59a:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800d710 <turn45outL+0x3bc>
 800d59e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d5a2:	68f8      	ldr	r0, [r7, #12]
 800d5a4:	eeb0 2a47 	vmov.f32	s4, s14
 800d5a8:	eef0 1a65 	vmov.f32	s3, s11
 800d5ac:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800d714 <turn45outL+0x3c0>
 800d5b0:	eef0 0a46 	vmov.f32	s1, s12
 800d5b4:	eeb0 0a66 	vmov.f32	s0, s13
 800d5b8:	f7f6 fb6a 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800d5bc:	4b53      	ldr	r3, [pc, #332]	; (800d70c <turn45outL+0x3b8>)
 800d5be:	2200      	movs	r2, #0
 800d5c0:	701a      	strb	r2, [r3, #0]
}
 800d5c2:	e09a      	b.n	800d6fa <turn45outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d5cc:	2304      	movs	r3, #4
 800d5ce:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d5d4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d5d8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d5dc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d5e0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d5e4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d5e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d5ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5f0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d5f4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d5f8:	eddf 4a45 	vldr	s9, [pc, #276]	; 800d710 <turn45outL+0x3bc>
 800d5fc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d600:	68f8      	ldr	r0, [r7, #12]
 800d602:	eeb0 2a47 	vmov.f32	s4, s14
 800d606:	eef0 1a45 	vmov.f32	s3, s10
 800d60a:	eeb0 1a65 	vmov.f32	s2, s11
 800d60e:	eef0 0a46 	vmov.f32	s1, s12
 800d612:	eeb0 0a66 	vmov.f32	s0, s13
 800d616:	f7f6 fb3b 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800d61a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d10c      	bne.n	800d63c <turn45outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800d622:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d626:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d62a:	eeb0 1a47 	vmov.f32	s2, s14
 800d62e:	eddf 0a38 	vldr	s1, [pc, #224]	; 800d710 <turn45outL+0x3bc>
 800d632:	eeb0 0a67 	vmov.f32	s0, s15
 800d636:	f7f7 fac7 	bl	8004bc8 <mollifier_slalom_table>
 800d63a:	e013      	b.n	800d664 <turn45outL+0x310>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d63c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d640:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d644:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d648:	eef0 2a66 	vmov.f32	s5, s13
 800d64c:	eeb0 2a47 	vmov.f32	s4, s14
 800d650:	eddf 1a30 	vldr	s3, [pc, #192]	; 800d714 <turn45outL+0x3c0>
 800d654:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800d714 <turn45outL+0x3c0>
 800d658:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800d710 <turn45outL+0x3bc>
 800d65c:	eeb0 0a67 	vmov.f32	s0, s15
 800d660:	f7f7 f962 	bl	8004928 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d664:	2301      	movs	r3, #1
 800d666:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d668:	2300      	movs	r3, #0
 800d66a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d66c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d670:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d674:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d678:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d67c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d680:	edd7 7a01 	vldr	s15, [r7, #4]
 800d684:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d68c:	eef0 7ae7 	vabs.f32	s15, s15
 800d690:	ee17 0a90 	vmov	r0, s15
 800d694:	f7f2 ff80 	bl	8000598 <__aeabi_f2d>
 800d698:	f04f 0200 	mov.w	r2, #0
 800d69c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d6a0:	f7f3 f8fc 	bl	800089c <__aeabi_ddiv>
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	460b      	mov	r3, r1
 800d6a8:	4614      	mov	r4, r2
 800d6aa:	461d      	mov	r5, r3
 800d6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7f2 ff72 	bl	8000598 <__aeabi_f2d>
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	4629      	mov	r1, r5
 800d6bc:	f7f3 f8ee 	bl	800089c <__aeabi_ddiv>
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	460b      	mov	r3, r1
 800d6c4:	4610      	mov	r0, r2
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	f04f 0200 	mov.w	r2, #0
 800d6cc:	4b14      	ldr	r3, [pc, #80]	; (800d720 <turn45outL+0x3cc>)
 800d6ce:	f7f2 fe05 	bl	80002dc <__adddf3>
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d6d6:	4610      	mov	r0, r2
 800d6d8:	4619      	mov	r1, r3
 800d6da:	f7f3 fa8d 	bl	8000bf8 <__aeabi_d2f>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	ee02 3a10 	vmov	s4, r3
 800d6e6:	edd7 1a01 	vldr	s3, [r7, #4]
 800d6ea:	ed97 1a01 	vldr	s2, [r7, #4]
 800d6ee:	eef0 0a68 	vmov.f32	s1, s17
 800d6f2:	eeb0 0a48 	vmov.f32	s0, s16
 800d6f6:	f7f6 facb 	bl	8003c90 <straight_table2>
}
 800d6fa:	bf00      	nop
 800d6fc:	3710      	adds	r7, #16
 800d6fe:	46bd      	mov	sp, r7
 800d700:	ecbd 8b02 	vpop	{d8}
 800d704:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d708:	b004      	add	sp, #16
 800d70a:	4770      	bx	lr
 800d70c:	20000814 	.word	0x20000814
 800d710:	42340000 	.word	0x42340000
 800d714:	00000000 	.word	0x00000000
 800d718:	42c4477b 	.word	0x42c4477b
 800d71c:	42b40000 	.word	0x42b40000
 800d720:	408f4000 	.word	0x408f4000

0800d724 <turn135outR>:



void turn135outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d724:	b084      	sub	sp, #16
 800d726:	b5b0      	push	{r4, r5, r7, lr}
 800d728:	ed2d 8b02 	vpush	{d8}
 800d72c:	b084      	sub	sp, #16
 800d72e:	af00      	add	r7, sp, #0
 800d730:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d734:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d738:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d73c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d740:	2b01      	cmp	r3, #1
 800d742:	f040 80a5 	bne.w	800d890 <turn135outR+0x16c>
			highspeed_mode = 1;
 800d746:	4be9      	ldr	r3, [pc, #932]	; (800daec <turn135outR+0x3c8>)
 800d748:	2201      	movs	r2, #1
 800d74a:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800d74c:	2300      	movs	r3, #0
 800d74e:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800d750:	2300      	movs	r3, #0
 800d752:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800d754:	2300      	movs	r3, #0
 800d756:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800d758:	2300      	movs	r3, #0
 800d75a:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d75c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d760:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d764:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d768:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d76c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d770:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d774:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d778:	eddf 5add 	vldr	s11, [pc, #884]	; 800daf0 <turn135outR+0x3cc>
 800d77c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d780:	68f8      	ldr	r0, [r7, #12]
 800d782:	eeb0 2a47 	vmov.f32	s4, s14
 800d786:	eef0 1a46 	vmov.f32	s3, s12
 800d78a:	eeb0 1a66 	vmov.f32	s2, s13
 800d78e:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800daf4 <turn135outR+0x3d0>
 800d792:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800daf8 <turn135outR+0x3d4>
 800d796:	f7f6 fa7b 	bl	8003c90 <straight_table2>
			wallmode.WallControlMode=0;
 800d79a:	2300      	movs	r3, #0
 800d79c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800d79e:	2303      	movs	r3, #3
 800d7a0:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d7a2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d7a6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d7aa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d7ae:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d7b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d7b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d7ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7be:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d7c2:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d7c6:	eddf 4aca 	vldr	s9, [pc, #808]	; 800daf0 <turn135outR+0x3cc>
 800d7ca:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	eeb0 2a47 	vmov.f32	s4, s14
 800d7d4:	eef0 1a45 	vmov.f32	s3, s10
 800d7d8:	eeb0 1a65 	vmov.f32	s2, s11
 800d7dc:	eef0 0a46 	vmov.f32	s1, s12
 800d7e0:	eeb0 0a66 	vmov.f32	s0, s13
 800d7e4:	f7f6 fa54 	bl	8003c90 <straight_table2>
			if(mollifier_mode == ON){
 800d7e8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d10c      	bne.n	800d80a <turn135outR+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800d7f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d7f4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d7f8:	eeb0 1a47 	vmov.f32	s2, s14
 800d7fc:	eddf 0abf 	vldr	s1, [pc, #764]	; 800dafc <turn135outR+0x3d8>
 800d800:	eeb0 0a67 	vmov.f32	s0, s15
 800d804:	f7f7 f9e0 	bl	8004bc8 <mollifier_slalom_table>
 800d808:	e015      	b.n	800d836 <turn135outR+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d80a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d80e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d812:	eef1 7a67 	vneg.f32	s15, s15
 800d816:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d81a:	eef0 2a66 	vmov.f32	s5, s13
 800d81e:	eeb0 2a67 	vmov.f32	s4, s15
 800d822:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800daf4 <turn135outR+0x3d0>
 800d826:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800daf4 <turn135outR+0x3d0>
 800d82a:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800dafc <turn135outR+0x3d8>
 800d82e:	eeb0 0a47 	vmov.f32	s0, s14
 800d832:	f7f7 f879 	bl	8004928 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d836:	2300      	movs	r3, #0
 800d838:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d83a:	2300      	movs	r3, #0
 800d83c:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d83e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d842:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800db00 <turn135outR+0x3dc>
 800d846:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d84a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d84e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d852:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d856:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d85a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d85e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d862:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d866:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800daf0 <turn135outR+0x3cc>
 800d86a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d86e:	68f8      	ldr	r0, [r7, #12]
 800d870:	eeb0 2a47 	vmov.f32	s4, s14
 800d874:	eef0 1a65 	vmov.f32	s3, s11
 800d878:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800daf4 <turn135outR+0x3d0>
 800d87c:	eef0 0a46 	vmov.f32	s1, s12
 800d880:	eeb0 0a66 	vmov.f32	s0, s13
 800d884:	f7f6 fa04 	bl	8003c90 <straight_table2>
			highspeed_mode = 0;
 800d888:	4b98      	ldr	r3, [pc, #608]	; (800daec <turn135outR+0x3c8>)
 800d88a:	2200      	movs	r2, #0
 800d88c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d88e:	e123      	b.n	800dad8 <turn135outR+0x3b4>
		}else if (test_mode >= 2) {
 800d890:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d894:	2b01      	cmp	r3, #1
 800d896:	f240 8082 	bls.w	800d99e <turn135outR+0x27a>
		highspeed_mode = 1;
 800d89a:	4b94      	ldr	r3, [pc, #592]	; (800daec <turn135outR+0x3c8>)
 800d89c:	2201      	movs	r2, #1
 800d89e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d8a8:	2303      	movs	r3, #3
 800d8aa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d8b0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d8b4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d8b8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d8bc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d8c0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d8c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8cc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d8d0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d8d4:	eddf 4a86 	vldr	s9, [pc, #536]	; 800daf0 <turn135outR+0x3cc>
 800d8d8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d8dc:	68f8      	ldr	r0, [r7, #12]
 800d8de:	eeb0 2a47 	vmov.f32	s4, s14
 800d8e2:	eef0 1a45 	vmov.f32	s3, s10
 800d8e6:	eeb0 1a65 	vmov.f32	s2, s11
 800d8ea:	eef0 0a46 	vmov.f32	s1, s12
 800d8ee:	eeb0 0a66 	vmov.f32	s0, s13
 800d8f2:	f7f6 f9cd 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800d8f6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d8fa:	2b01      	cmp	r3, #1
 800d8fc:	d10c      	bne.n	800d918 <turn135outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800d8fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d902:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d906:	eeb0 1a47 	vmov.f32	s2, s14
 800d90a:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800dafc <turn135outR+0x3d8>
 800d90e:	eeb0 0a67 	vmov.f32	s0, s15
 800d912:	f7f7 f959 	bl	8004bc8 <mollifier_slalom_table>
 800d916:	e015      	b.n	800d944 <turn135outR+0x220>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d918:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d91c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d920:	eef1 7a67 	vneg.f32	s15, s15
 800d924:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d928:	eef0 2a66 	vmov.f32	s5, s13
 800d92c:	eeb0 2a67 	vmov.f32	s4, s15
 800d930:	eddf 1a70 	vldr	s3, [pc, #448]	; 800daf4 <turn135outR+0x3d0>
 800d934:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800daf4 <turn135outR+0x3d0>
 800d938:	eddf 0a70 	vldr	s1, [pc, #448]	; 800dafc <turn135outR+0x3d8>
 800d93c:	eeb0 0a47 	vmov.f32	s0, s14
 800d940:	f7f6 fff2 	bl	8004928 <slalom_table2>
		wallmode.WallControlMode=0;
 800d944:	2300      	movs	r3, #0
 800d946:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d948:	2300      	movs	r3, #0
 800d94a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d94c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d950:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800db00 <turn135outR+0x3dc>
 800d954:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d958:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d95c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d960:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d964:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d968:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d96c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d970:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d974:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800daf0 <turn135outR+0x3cc>
 800d978:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	eeb0 2a47 	vmov.f32	s4, s14
 800d982:	eef0 1a65 	vmov.f32	s3, s11
 800d986:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800daf4 <turn135outR+0x3d0>
 800d98a:	eef0 0a46 	vmov.f32	s1, s12
 800d98e:	eeb0 0a66 	vmov.f32	s0, s13
 800d992:	f7f6 f97d 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800d996:	4b55      	ldr	r3, [pc, #340]	; (800daec <turn135outR+0x3c8>)
 800d998:	2200      	movs	r2, #0
 800d99a:	701a      	strb	r2, [r3, #0]
}
 800d99c:	e09c      	b.n	800dad8 <turn135outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d9a6:	2303      	movs	r3, #3
 800d9a8:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d9ae:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d9b2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d9b6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d9ba:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d9be:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d9c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9ca:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d9ce:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d9d2:	eddf 4a47 	vldr	s9, [pc, #284]	; 800daf0 <turn135outR+0x3cc>
 800d9d6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d9da:	68f8      	ldr	r0, [r7, #12]
 800d9dc:	eeb0 2a47 	vmov.f32	s4, s14
 800d9e0:	eef0 1a45 	vmov.f32	s3, s10
 800d9e4:	eeb0 1a65 	vmov.f32	s2, s11
 800d9e8:	eef0 0a46 	vmov.f32	s1, s12
 800d9ec:	eeb0 0a66 	vmov.f32	s0, s13
 800d9f0:	f7f6 f94e 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800d9f4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d10c      	bne.n	800da16 <turn135outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800d9fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da00:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800da04:	eeb0 1a47 	vmov.f32	s2, s14
 800da08:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800dafc <turn135outR+0x3d8>
 800da0c:	eeb0 0a67 	vmov.f32	s0, s15
 800da10:	f7f7 f8da 	bl	8004bc8 <mollifier_slalom_table>
 800da14:	e015      	b.n	800da42 <turn135outR+0x31e>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800da16:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800da1a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800da1e:	eef1 7a67 	vneg.f32	s15, s15
 800da22:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800da26:	eef0 2a66 	vmov.f32	s5, s13
 800da2a:	eeb0 2a67 	vmov.f32	s4, s15
 800da2e:	eddf 1a31 	vldr	s3, [pc, #196]	; 800daf4 <turn135outR+0x3d0>
 800da32:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800daf4 <turn135outR+0x3d0>
 800da36:	eddf 0a31 	vldr	s1, [pc, #196]	; 800dafc <turn135outR+0x3d8>
 800da3a:	eeb0 0a47 	vmov.f32	s0, s14
 800da3e:	f7f6 ff73 	bl	8004928 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800da42:	2301      	movs	r3, #1
 800da44:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800da46:	2300      	movs	r3, #0
 800da48:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800da4a:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800da4e:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800da52:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800da56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da5e:	edd7 7a01 	vldr	s15, [r7, #4]
 800da62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800da66:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da6a:	eef0 7ae7 	vabs.f32	s15, s15
 800da6e:	ee17 0a90 	vmov	r0, s15
 800da72:	f7f2 fd91 	bl	8000598 <__aeabi_f2d>
 800da76:	f04f 0200 	mov.w	r2, #0
 800da7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800da7e:	f7f2 ff0d 	bl	800089c <__aeabi_ddiv>
 800da82:	4602      	mov	r2, r0
 800da84:	460b      	mov	r3, r1
 800da86:	4614      	mov	r4, r2
 800da88:	461d      	mov	r5, r3
 800da8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7f2 fd83 	bl	8000598 <__aeabi_f2d>
 800da92:	4602      	mov	r2, r0
 800da94:	460b      	mov	r3, r1
 800da96:	4620      	mov	r0, r4
 800da98:	4629      	mov	r1, r5
 800da9a:	f7f2 feff 	bl	800089c <__aeabi_ddiv>
 800da9e:	4602      	mov	r2, r0
 800daa0:	460b      	mov	r3, r1
 800daa2:	4610      	mov	r0, r2
 800daa4:	4619      	mov	r1, r3
 800daa6:	f04f 0200 	mov.w	r2, #0
 800daaa:	4b16      	ldr	r3, [pc, #88]	; (800db04 <turn135outR+0x3e0>)
 800daac:	f7f2 fc16 	bl	80002dc <__adddf3>
 800dab0:	4602      	mov	r2, r0
 800dab2:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800dab4:	4610      	mov	r0, r2
 800dab6:	4619      	mov	r1, r3
 800dab8:	f7f3 f89e 	bl	8000bf8 <__aeabi_d2f>
 800dabc:	4603      	mov	r3, r0
 800dabe:	68f8      	ldr	r0, [r7, #12]
 800dac0:	ee02 3a10 	vmov	s4, r3
 800dac4:	edd7 1a01 	vldr	s3, [r7, #4]
 800dac8:	ed97 1a01 	vldr	s2, [r7, #4]
 800dacc:	eef0 0a68 	vmov.f32	s1, s17
 800dad0:	eeb0 0a48 	vmov.f32	s0, s16
 800dad4:	f7f6 f8dc 	bl	8003c90 <straight_table2>
}
 800dad8:	bf00      	nop
 800dada:	3710      	adds	r7, #16
 800dadc:	46bd      	mov	sp, r7
 800dade:	ecbd 8b02 	vpop	{d8}
 800dae2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800dae6:	b004      	add	sp, #16
 800dae8:	4770      	bx	lr
 800daea:	bf00      	nop
 800daec:	20000814 	.word	0x20000814
 800daf0:	42340000 	.word	0x42340000
 800daf4:	00000000 	.word	0x00000000
 800daf8:	42c4477b 	.word	0x42c4477b
 800dafc:	c3070000 	.word	0xc3070000
 800db00:	42b40000 	.word	0x42b40000
 800db04:	408f4000 	.word	0x408f4000

0800db08 <turn135outL>:


void turn135outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800db08:	b084      	sub	sp, #16
 800db0a:	b5b0      	push	{r4, r5, r7, lr}
 800db0c:	ed2d 8b02 	vpush	{d8}
 800db10:	b084      	sub	sp, #16
 800db12:	af00      	add	r7, sp, #0
 800db14:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800db18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800db1c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800db20:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800db24:	2b01      	cmp	r3, #1
 800db26:	f040 80a3 	bne.w	800dc70 <turn135outL+0x168>
		highspeed_mode = 1;
 800db2a:	4be5      	ldr	r3, [pc, #916]	; (800dec0 <turn135outL+0x3b8>)
 800db2c:	2201      	movs	r2, #1
 800db2e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800db30:	2300      	movs	r3, #0
 800db32:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800db34:	2300      	movs	r3, #0
 800db36:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800db38:	2300      	movs	r3, #0
 800db3a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800db3c:	2300      	movs	r3, #0
 800db3e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800db40:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800db44:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800db48:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800db4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db50:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db54:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800db58:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800db5c:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800dec4 <turn135outL+0x3bc>
 800db60:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800db64:	68f8      	ldr	r0, [r7, #12]
 800db66:	eeb0 2a47 	vmov.f32	s4, s14
 800db6a:	eef0 1a46 	vmov.f32	s3, s12
 800db6e:	eeb0 1a66 	vmov.f32	s2, s13
 800db72:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800dec8 <turn135outL+0x3c0>
 800db76:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800decc <turn135outL+0x3c4>
 800db7a:	f7f6 f889 	bl	8003c90 <straight_table2>
		wallmode.WallControlMode=0;
 800db7e:	2300      	movs	r3, #0
 800db80:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=4;
 800db82:	2304      	movs	r3, #4
 800db84:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800db86:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800db8a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800db8e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800db92:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800db96:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800db9a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dba2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800dba6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dbaa:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800dec4 <turn135outL+0x3bc>
 800dbae:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800dbb2:	68f8      	ldr	r0, [r7, #12]
 800dbb4:	eeb0 2a47 	vmov.f32	s4, s14
 800dbb8:	eef0 1a45 	vmov.f32	s3, s10
 800dbbc:	eeb0 1a65 	vmov.f32	s2, s11
 800dbc0:	eef0 0a46 	vmov.f32	s1, s12
 800dbc4:	eeb0 0a66 	vmov.f32	s0, s13
 800dbc8:	f7f6 f862 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800dbcc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d10c      	bne.n	800dbee <turn135outL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800dbd4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dbd8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dbdc:	eeb0 1a47 	vmov.f32	s2, s14
 800dbe0:	eddf 0abb 	vldr	s1, [pc, #748]	; 800ded0 <turn135outL+0x3c8>
 800dbe4:	eeb0 0a67 	vmov.f32	s0, s15
 800dbe8:	f7f6 ffee 	bl	8004bc8 <mollifier_slalom_table>
 800dbec:	e013      	b.n	800dc16 <turn135outL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800dbee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dbf2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dbf6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800dbfa:	eef0 2a66 	vmov.f32	s5, s13
 800dbfe:	eeb0 2a47 	vmov.f32	s4, s14
 800dc02:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800dec8 <turn135outL+0x3c0>
 800dc06:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800dec8 <turn135outL+0x3c0>
 800dc0a:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800ded0 <turn135outL+0x3c8>
 800dc0e:	eeb0 0a67 	vmov.f32	s0, s15
 800dc12:	f7f6 fe89 	bl	8004928 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800dc16:	2300      	movs	r3, #0
 800dc18:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800dc1e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800dc22:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800ded4 <turn135outL+0x3cc>
 800dc26:	ee77 6a87 	vadd.f32	s13, s15, s14
 800dc2a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dc2e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dc32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dc36:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dc3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc3e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800dc42:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800dc46:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800dec4 <turn135outL+0x3bc>
 800dc4a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800dc4e:	68f8      	ldr	r0, [r7, #12]
 800dc50:	eeb0 2a47 	vmov.f32	s4, s14
 800dc54:	eef0 1a65 	vmov.f32	s3, s11
 800dc58:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800dec8 <turn135outL+0x3c0>
 800dc5c:	eef0 0a46 	vmov.f32	s1, s12
 800dc60:	eeb0 0a66 	vmov.f32	s0, s13
 800dc64:	f7f6 f814 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800dc68:	4b95      	ldr	r3, [pc, #596]	; (800dec0 <turn135outL+0x3b8>)
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800dc6e:	e11e      	b.n	800deae <turn135outL+0x3a6>
	}else if (test_mode >= 2) {
 800dc70:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d97f      	bls.n	800dd78 <turn135outL+0x270>
		highspeed_mode = 1;
 800dc78:	4b91      	ldr	r3, [pc, #580]	; (800dec0 <turn135outL+0x3b8>)
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800dc82:	2300      	movs	r3, #0
 800dc84:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800dc86:	2304      	movs	r3, #4
 800dc88:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dc8e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800dc92:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dc96:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800dc9a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dc9e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dca2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dca6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dcaa:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800dcae:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dcb2:	eddf 4a84 	vldr	s9, [pc, #528]	; 800dec4 <turn135outL+0x3bc>
 800dcb6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800dcba:	68f8      	ldr	r0, [r7, #12]
 800dcbc:	eeb0 2a47 	vmov.f32	s4, s14
 800dcc0:	eef0 1a45 	vmov.f32	s3, s10
 800dcc4:	eeb0 1a65 	vmov.f32	s2, s11
 800dcc8:	eef0 0a46 	vmov.f32	s1, s12
 800dccc:	eeb0 0a66 	vmov.f32	s0, s13
 800dcd0:	f7f5 ffde 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800dcd4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d10c      	bne.n	800dcf6 <turn135outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800dcdc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dce0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dce4:	eeb0 1a47 	vmov.f32	s2, s14
 800dce8:	eddf 0a79 	vldr	s1, [pc, #484]	; 800ded0 <turn135outL+0x3c8>
 800dcec:	eeb0 0a67 	vmov.f32	s0, s15
 800dcf0:	f7f6 ff6a 	bl	8004bc8 <mollifier_slalom_table>
 800dcf4:	e013      	b.n	800dd1e <turn135outL+0x216>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800dcf6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dcfa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dcfe:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800dd02:	eef0 2a66 	vmov.f32	s5, s13
 800dd06:	eeb0 2a47 	vmov.f32	s4, s14
 800dd0a:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800dec8 <turn135outL+0x3c0>
 800dd0e:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800dec8 <turn135outL+0x3c0>
 800dd12:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800ded0 <turn135outL+0x3c8>
 800dd16:	eeb0 0a67 	vmov.f32	s0, s15
 800dd1a:	f7f6 fe05 	bl	8004928 <slalom_table2>
		wallmode.WallControlMode=0;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800dd22:	2300      	movs	r3, #0
 800dd24:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800dd26:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800dd2a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800ded4 <turn135outL+0x3cc>
 800dd2e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800dd32:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dd36:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dd3a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dd3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dd42:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd46:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800dd4a:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800dd4e:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800dec4 <turn135outL+0x3bc>
 800dd52:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800dd56:	68f8      	ldr	r0, [r7, #12]
 800dd58:	eeb0 2a47 	vmov.f32	s4, s14
 800dd5c:	eef0 1a65 	vmov.f32	s3, s11
 800dd60:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800dec8 <turn135outL+0x3c0>
 800dd64:	eef0 0a46 	vmov.f32	s1, s12
 800dd68:	eeb0 0a66 	vmov.f32	s0, s13
 800dd6c:	f7f5 ff90 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800dd70:	4b53      	ldr	r3, [pc, #332]	; (800dec0 <turn135outL+0x3b8>)
 800dd72:	2200      	movs	r2, #0
 800dd74:	701a      	strb	r2, [r3, #0]
}
 800dd76:	e09a      	b.n	800deae <turn135outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800dd80:	2304      	movs	r3, #4
 800dd82:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800dd84:	2300      	movs	r3, #0
 800dd86:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dd88:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800dd8c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dd90:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800dd94:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dd98:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dd9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dda0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dda4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800dda8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ddac:	eddf 4a45 	vldr	s9, [pc, #276]	; 800dec4 <turn135outL+0x3bc>
 800ddb0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ddb4:	68f8      	ldr	r0, [r7, #12]
 800ddb6:	eeb0 2a47 	vmov.f32	s4, s14
 800ddba:	eef0 1a45 	vmov.f32	s3, s10
 800ddbe:	eeb0 1a65 	vmov.f32	s2, s11
 800ddc2:	eef0 0a46 	vmov.f32	s1, s12
 800ddc6:	eeb0 0a66 	vmov.f32	s0, s13
 800ddca:	f7f5 ff61 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800ddce:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ddd2:	2b01      	cmp	r3, #1
 800ddd4:	d10c      	bne.n	800ddf0 <turn135outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800ddd6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ddda:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ddde:	eeb0 1a47 	vmov.f32	s2, s14
 800dde2:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800ded0 <turn135outL+0x3c8>
 800dde6:	eeb0 0a67 	vmov.f32	s0, s15
 800ddea:	f7f6 feed 	bl	8004bc8 <mollifier_slalom_table>
 800ddee:	e013      	b.n	800de18 <turn135outL+0x310>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ddf0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ddf4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ddf8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ddfc:	eef0 2a66 	vmov.f32	s5, s13
 800de00:	eeb0 2a47 	vmov.f32	s4, s14
 800de04:	eddf 1a30 	vldr	s3, [pc, #192]	; 800dec8 <turn135outL+0x3c0>
 800de08:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800dec8 <turn135outL+0x3c0>
 800de0c:	eddf 0a30 	vldr	s1, [pc, #192]	; 800ded0 <turn135outL+0x3c8>
 800de10:	eeb0 0a67 	vmov.f32	s0, s15
 800de14:	f7f6 fd88 	bl	8004928 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800de18:	2301      	movs	r3, #1
 800de1a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800de1c:	2300      	movs	r3, #0
 800de1e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800de20:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800de24:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800de28:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800de2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800de30:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de34:	edd7 7a01 	vldr	s15, [r7, #4]
 800de38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800de3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de40:	eef0 7ae7 	vabs.f32	s15, s15
 800de44:	ee17 0a90 	vmov	r0, s15
 800de48:	f7f2 fba6 	bl	8000598 <__aeabi_f2d>
 800de4c:	f04f 0200 	mov.w	r2, #0
 800de50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800de54:	f7f2 fd22 	bl	800089c <__aeabi_ddiv>
 800de58:	4602      	mov	r2, r0
 800de5a:	460b      	mov	r3, r1
 800de5c:	4614      	mov	r4, r2
 800de5e:	461d      	mov	r5, r3
 800de60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de62:	4618      	mov	r0, r3
 800de64:	f7f2 fb98 	bl	8000598 <__aeabi_f2d>
 800de68:	4602      	mov	r2, r0
 800de6a:	460b      	mov	r3, r1
 800de6c:	4620      	mov	r0, r4
 800de6e:	4629      	mov	r1, r5
 800de70:	f7f2 fd14 	bl	800089c <__aeabi_ddiv>
 800de74:	4602      	mov	r2, r0
 800de76:	460b      	mov	r3, r1
 800de78:	4610      	mov	r0, r2
 800de7a:	4619      	mov	r1, r3
 800de7c:	f04f 0200 	mov.w	r2, #0
 800de80:	4b15      	ldr	r3, [pc, #84]	; (800ded8 <turn135outL+0x3d0>)
 800de82:	f7f2 fa2b 	bl	80002dc <__adddf3>
 800de86:	4602      	mov	r2, r0
 800de88:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800de8a:	4610      	mov	r0, r2
 800de8c:	4619      	mov	r1, r3
 800de8e:	f7f2 feb3 	bl	8000bf8 <__aeabi_d2f>
 800de92:	4603      	mov	r3, r0
 800de94:	68f8      	ldr	r0, [r7, #12]
 800de96:	ee02 3a10 	vmov	s4, r3
 800de9a:	edd7 1a01 	vldr	s3, [r7, #4]
 800de9e:	ed97 1a01 	vldr	s2, [r7, #4]
 800dea2:	eef0 0a68 	vmov.f32	s1, s17
 800dea6:	eeb0 0a48 	vmov.f32	s0, s16
 800deaa:	f7f5 fef1 	bl	8003c90 <straight_table2>
}
 800deae:	bf00      	nop
 800deb0:	3710      	adds	r7, #16
 800deb2:	46bd      	mov	sp, r7
 800deb4:	ecbd 8b02 	vpop	{d8}
 800deb8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800debc:	b004      	add	sp, #16
 800debe:	4770      	bx	lr
 800dec0:	20000814 	.word	0x20000814
 800dec4:	42340000 	.word	0x42340000
 800dec8:	00000000 	.word	0x00000000
 800decc:	42c4477b 	.word	0x42c4477b
 800ded0:	43070000 	.word	0x43070000
 800ded4:	42b40000 	.word	0x42b40000
 800ded8:	408f4000 	.word	0x408f4000
 800dedc:	00000000 	.word	0x00000000

0800dee0 <V90R>:


void V90R(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800dee0:	b084      	sub	sp, #16
 800dee2:	b5b0      	push	{r4, r5, r7, lr}
 800dee4:	ed2d 8b02 	vpush	{d8}
 800dee8:	b084      	sub	sp, #16
 800deea:	af00      	add	r7, sp, #0
 800deec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800def0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800def4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800def8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800defc:	2b01      	cmp	r3, #1
 800defe:	f040 80af 	bne.w	800e060 <V90R+0x180>
			highspeed_mode = 1;
 800df02:	4bc1      	ldr	r3, [pc, #772]	; (800e208 <V90R+0x328>)
 800df04:	2201      	movs	r2, #1
 800df06:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800df08:	2300      	movs	r3, #0
 800df0a:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800df0c:	2300      	movs	r3, #0
 800df0e:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800df10:	2300      	movs	r3, #0
 800df12:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800df14:	2300      	movs	r3, #0
 800df16:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800df18:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800df1c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800df20:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800df24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800df28:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df2c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800df30:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800df34:	eddf 5ab5 	vldr	s11, [pc, #724]	; 800e20c <V90R+0x32c>
 800df38:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800df3c:	68f8      	ldr	r0, [r7, #12]
 800df3e:	eeb0 2a47 	vmov.f32	s4, s14
 800df42:	eef0 1a46 	vmov.f32	s3, s12
 800df46:	eeb0 1a66 	vmov.f32	s2, s13
 800df4a:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800e214 <V90R+0x334>
 800df4e:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800e210 <V90R+0x330>
 800df52:	f7f5 fe9d 	bl	8003c90 <straight_table2>
			wallmode.WallControlMode=0;
 800df56:	2300      	movs	r3, #0
 800df58:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800df5a:	2303      	movs	r3, #3
 800df5c:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800df5e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800df62:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800df66:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800df6a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800df6e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800df72:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800df76:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df7a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800df7e:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800df82:	eddf 4aa2 	vldr	s9, [pc, #648]	; 800e20c <V90R+0x32c>
 800df86:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800df8a:	68f8      	ldr	r0, [r7, #12]
 800df8c:	eeb0 2a47 	vmov.f32	s4, s14
 800df90:	eef0 1a45 	vmov.f32	s3, s10
 800df94:	eeb0 1a65 	vmov.f32	s2, s11
 800df98:	eef0 0a46 	vmov.f32	s1, s12
 800df9c:	eeb0 0a66 	vmov.f32	s0, s13
 800dfa0:	f7f5 fe76 	bl	8003c90 <straight_table2>
			if(mollifier_mode == ON){
 800dfa4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d10c      	bne.n	800dfc6 <V90R+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800dfac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dfb0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dfb4:	eeb0 1a47 	vmov.f32	s2, s14
 800dfb8:	eddf 0a97 	vldr	s1, [pc, #604]	; 800e218 <V90R+0x338>
 800dfbc:	eeb0 0a67 	vmov.f32	s0, s15
 800dfc0:	f7f6 fe02 	bl	8004bc8 <mollifier_slalom_table>
 800dfc4:	e015      	b.n	800dff2 <V90R+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800dfc6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dfca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800dfce:	eef1 7a67 	vneg.f32	s15, s15
 800dfd2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800dfd6:	eef0 2a66 	vmov.f32	s5, s13
 800dfda:	eeb0 2a67 	vmov.f32	s4, s15
 800dfde:	eddf 1a8d 	vldr	s3, [pc, #564]	; 800e214 <V90R+0x334>
 800dfe2:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 800e214 <V90R+0x334>
 800dfe6:	eddf 0a8c 	vldr	s1, [pc, #560]	; 800e218 <V90R+0x338>
 800dfea:	eeb0 0a47 	vmov.f32	s0, s14
 800dfee:	f7f6 fc9b 	bl	8004928 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800dff2:	2300      	movs	r3, #0
 800dff4:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800dff6:	2300      	movs	r3, #0
 800dff8:	73fb      	strb	r3, [r7, #15]
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800dffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dffc:	4618      	mov	r0, r3
 800dffe:	f7f2 facb 	bl	8000598 <__aeabi_f2d>
 800e002:	a37f      	add	r3, pc, #508	; (adr r3, 800e200 <V90R+0x320>)
 800e004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e008:	f7f2 f968 	bl	80002dc <__adddf3>
 800e00c:	4602      	mov	r2, r0
 800e00e:	460b      	mov	r3, r1
 800e010:	4610      	mov	r0, r2
 800e012:	4619      	mov	r1, r3
 800e014:	f7f2 fdf0 	bl	8000bf8 <__aeabi_d2f>
 800e018:	4603      	mov	r3, r0
 800e01a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e01e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e022:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e026:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e02a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e02e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e032:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e036:	eddf 5a75 	vldr	s11, [pc, #468]	; 800e20c <V90R+0x32c>
 800e03a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800e03e:	68f8      	ldr	r0, [r7, #12]
 800e040:	eeb0 2a47 	vmov.f32	s4, s14
 800e044:	eef0 1a46 	vmov.f32	s3, s12
 800e048:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800e214 <V90R+0x334>
 800e04c:	eef0 0a66 	vmov.f32	s1, s13
 800e050:	ee00 3a10 	vmov	s0, r3
 800e054:	f7f5 fe1c 	bl	8003c90 <straight_table2>
			highspeed_mode = 0;
 800e058:	4b6b      	ldr	r3, [pc, #428]	; (800e208 <V90R+0x328>)
 800e05a:	2200      	movs	r2, #0
 800e05c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800e05e:	e13e      	b.n	800e2de <V90R+0x3fe>
		}else if (test_mode >= 2) {
 800e060:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e064:	2b01      	cmp	r3, #1
 800e066:	f240 808c 	bls.w	800e182 <V90R+0x2a2>
		highspeed_mode = 1;
 800e06a:	4b67      	ldr	r3, [pc, #412]	; (800e208 <V90R+0x328>)
 800e06c:	2201      	movs	r2, #1
 800e06e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800e070:	2300      	movs	r3, #0
 800e072:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800e074:	2300      	movs	r3, #0
 800e076:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800e078:	2303      	movs	r3, #3
 800e07a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800e07c:	2300      	movs	r3, #0
 800e07e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e080:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e084:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e088:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e08c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e090:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e094:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e09c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e0a0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e0a4:	eddf 4a59 	vldr	s9, [pc, #356]	; 800e20c <V90R+0x32c>
 800e0a8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e0ac:	68f8      	ldr	r0, [r7, #12]
 800e0ae:	eeb0 2a47 	vmov.f32	s4, s14
 800e0b2:	eef0 1a45 	vmov.f32	s3, s10
 800e0b6:	eeb0 1a65 	vmov.f32	s2, s11
 800e0ba:	eef0 0a46 	vmov.f32	s1, s12
 800e0be:	eeb0 0a66 	vmov.f32	s0, s13
 800e0c2:	f7f5 fde5 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800e0c6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e0ca:	2b01      	cmp	r3, #1
 800e0cc:	d10c      	bne.n	800e0e8 <V90R+0x208>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800e0ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e0d2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e0d6:	eeb0 1a47 	vmov.f32	s2, s14
 800e0da:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800e218 <V90R+0x338>
 800e0de:	eeb0 0a67 	vmov.f32	s0, s15
 800e0e2:	f7f6 fd71 	bl	8004bc8 <mollifier_slalom_table>
 800e0e6:	e015      	b.n	800e114 <V90R+0x234>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800e0e8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e0ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e0f0:	eef1 7a67 	vneg.f32	s15, s15
 800e0f4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e0f8:	eef0 2a66 	vmov.f32	s5, s13
 800e0fc:	eeb0 2a67 	vmov.f32	s4, s15
 800e100:	eddf 1a44 	vldr	s3, [pc, #272]	; 800e214 <V90R+0x334>
 800e104:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800e214 <V90R+0x334>
 800e108:	eddf 0a43 	vldr	s1, [pc, #268]	; 800e218 <V90R+0x338>
 800e10c:	eeb0 0a47 	vmov.f32	s0, s14
 800e110:	f7f6 fc0a 	bl	8004928 <slalom_table2>
		wallmode.WallControlMode=0;
 800e114:	2300      	movs	r3, #0
 800e116:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800e118:	2300      	movs	r3, #0
 800e11a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e11e:	4618      	mov	r0, r3
 800e120:	f7f2 fa3a 	bl	8000598 <__aeabi_f2d>
 800e124:	a336      	add	r3, pc, #216	; (adr r3, 800e200 <V90R+0x320>)
 800e126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12a:	f7f2 f8d7 	bl	80002dc <__adddf3>
 800e12e:	4602      	mov	r2, r0
 800e130:	460b      	mov	r3, r1
 800e132:	4610      	mov	r0, r2
 800e134:	4619      	mov	r1, r3
 800e136:	f7f2 fd5f 	bl	8000bf8 <__aeabi_d2f>
 800e13a:	4603      	mov	r3, r0
 800e13c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e140:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e144:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e148:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e14c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e150:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e154:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e158:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800e20c <V90R+0x32c>
 800e15c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800e160:	68f8      	ldr	r0, [r7, #12]
 800e162:	eeb0 2a47 	vmov.f32	s4, s14
 800e166:	eef0 1a46 	vmov.f32	s3, s12
 800e16a:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800e214 <V90R+0x334>
 800e16e:	eef0 0a66 	vmov.f32	s1, s13
 800e172:	ee00 3a10 	vmov	s0, r3
 800e176:	f7f5 fd8b 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800e17a:	4b23      	ldr	r3, [pc, #140]	; (800e208 <V90R+0x328>)
 800e17c:	2200      	movs	r2, #0
 800e17e:	701a      	strb	r2, [r3, #0]
}
 800e180:	e0ad      	b.n	800e2de <V90R+0x3fe>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800e182:	2300      	movs	r3, #0
 800e184:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800e186:	2300      	movs	r3, #0
 800e188:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800e18a:	2303      	movs	r3, #3
 800e18c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800e18e:	2300      	movs	r3, #0
 800e190:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e192:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e196:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e19a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e19e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e1a2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e1a6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e1aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1ae:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e1b2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e1b6:	eddf 4a15 	vldr	s9, [pc, #84]	; 800e20c <V90R+0x32c>
 800e1ba:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e1be:	68f8      	ldr	r0, [r7, #12]
 800e1c0:	eeb0 2a47 	vmov.f32	s4, s14
 800e1c4:	eef0 1a45 	vmov.f32	s3, s10
 800e1c8:	eeb0 1a65 	vmov.f32	s2, s11
 800e1cc:	eef0 0a46 	vmov.f32	s1, s12
 800e1d0:	eeb0 0a66 	vmov.f32	s0, s13
 800e1d4:	f7f5 fd5c 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800e1d8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d11d      	bne.n	800e21c <V90R+0x33c>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800e1e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e1e4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e1e8:	eeb0 1a47 	vmov.f32	s2, s14
 800e1ec:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800e218 <V90R+0x338>
 800e1f0:	eeb0 0a67 	vmov.f32	s0, s15
 800e1f4:	f7f6 fce8 	bl	8004bc8 <mollifier_slalom_table>
 800e1f8:	e026      	b.n	800e248 <V90R+0x368>
 800e1fa:	bf00      	nop
 800e1fc:	f3af 8000 	nop.w
 800e200:	c022ec18 	.word	0xc022ec18
 800e204:	405fd1de 	.word	0x405fd1de
 800e208:	20000814 	.word	0x20000814
 800e20c:	42340000 	.word	0x42340000
 800e210:	42c4477b 	.word	0x42c4477b
 800e214:	00000000 	.word	0x00000000
 800e218:	c2b40000 	.word	0xc2b40000
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800e21c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e220:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e224:	eef1 7a67 	vneg.f32	s15, s15
 800e228:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e22c:	eef0 2a66 	vmov.f32	s5, s13
 800e230:	eeb0 2a67 	vmov.f32	s4, s15
 800e234:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800e214 <V90R+0x334>
 800e238:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800e214 <V90R+0x334>
 800e23c:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800e218 <V90R+0x338>
 800e240:	eeb0 0a47 	vmov.f32	s0, s14
 800e244:	f7f6 fb70 	bl	8004928 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800e248:	2303      	movs	r3, #3
 800e24a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800e24c:	2300      	movs	r3, #0
 800e24e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800e250:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800e254:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800e258:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e25c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e260:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e264:	edd7 7a01 	vldr	s15, [r7, #4]
 800e268:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e26c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e270:	eef0 7ae7 	vabs.f32	s15, s15
 800e274:	ee17 0a90 	vmov	r0, s15
 800e278:	f7f2 f98e 	bl	8000598 <__aeabi_f2d>
 800e27c:	f04f 0200 	mov.w	r2, #0
 800e280:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e284:	f7f2 fb0a 	bl	800089c <__aeabi_ddiv>
 800e288:	4602      	mov	r2, r0
 800e28a:	460b      	mov	r3, r1
 800e28c:	4614      	mov	r4, r2
 800e28e:	461d      	mov	r5, r3
 800e290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e292:	4618      	mov	r0, r3
 800e294:	f7f2 f980 	bl	8000598 <__aeabi_f2d>
 800e298:	4602      	mov	r2, r0
 800e29a:	460b      	mov	r3, r1
 800e29c:	4620      	mov	r0, r4
 800e29e:	4629      	mov	r1, r5
 800e2a0:	f7f2 fafc 	bl	800089c <__aeabi_ddiv>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	4610      	mov	r0, r2
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	f04f 0200 	mov.w	r2, #0
 800e2b0:	4b0f      	ldr	r3, [pc, #60]	; (800e2f0 <V90R+0x410>)
 800e2b2:	f7f2 f813 	bl	80002dc <__adddf3>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800e2ba:	4610      	mov	r0, r2
 800e2bc:	4619      	mov	r1, r3
 800e2be:	f7f2 fc9b 	bl	8000bf8 <__aeabi_d2f>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	68f8      	ldr	r0, [r7, #12]
 800e2c6:	ee02 3a10 	vmov	s4, r3
 800e2ca:	edd7 1a01 	vldr	s3, [r7, #4]
 800e2ce:	ed97 1a01 	vldr	s2, [r7, #4]
 800e2d2:	eef0 0a68 	vmov.f32	s1, s17
 800e2d6:	eeb0 0a48 	vmov.f32	s0, s16
 800e2da:	f7f5 fcd9 	bl	8003c90 <straight_table2>
}
 800e2de:	bf00      	nop
 800e2e0:	3710      	adds	r7, #16
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	ecbd 8b02 	vpop	{d8}
 800e2e8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800e2ec:	b004      	add	sp, #16
 800e2ee:	4770      	bx	lr
 800e2f0:	408f4000 	.word	0x408f4000
 800e2f4:	00000000 	.word	0x00000000

0800e2f8 <V90L>:

void V90L(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800e2f8:	b084      	sub	sp, #16
 800e2fa:	b5b0      	push	{r4, r5, r7, lr}
 800e2fc:	ed2d 8b02 	vpush	{d8}
 800e300:	b084      	sub	sp, #16
 800e302:	af00      	add	r7, sp, #0
 800e304:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e308:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e30c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800e310:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e314:	2b01      	cmp	r3, #1
 800e316:	f040 80ad 	bne.w	800e474 <V90L+0x17c>
				highspeed_mode = 1;
 800e31a:	4bbf      	ldr	r3, [pc, #764]	; (800e618 <V90L+0x320>)
 800e31c:	2201      	movs	r2, #1
 800e31e:	701a      	strb	r2, [r3, #0]
				wallmode.WallControlMode=0;
 800e320:	2300      	movs	r3, #0
 800e322:	733b      	strb	r3, [r7, #12]
				wallmode.WallControlStatus=0;
 800e324:	2300      	movs	r3, #0
 800e326:	737b      	strb	r3, [r7, #13]
				wallmode.WallCutMode=0;
 800e328:	2300      	movs	r3, #0
 800e32a:	73fb      	strb	r3, [r7, #15]
				wallmode.calMazeMode=0;
 800e32c:	2300      	movs	r3, #0
 800e32e:	73bb      	strb	r3, [r7, #14]
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800e330:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e334:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
							turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e338:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e33c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e340:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e344:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e348:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800e34c:	eddf 5ab3 	vldr	s11, [pc, #716]	; 800e61c <V90L+0x324>
 800e350:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800e354:	68f8      	ldr	r0, [r7, #12]
 800e356:	eeb0 2a47 	vmov.f32	s4, s14
 800e35a:	eef0 1a46 	vmov.f32	s3, s12
 800e35e:	eeb0 1a66 	vmov.f32	s2, s13
 800e362:	eddf 0ab0 	vldr	s1, [pc, #704]	; 800e624 <V90L+0x32c>
 800e366:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800e620 <V90L+0x328>
 800e36a:	f7f5 fc91 	bl	8003c90 <straight_table2>
				wallmode.WallControlMode=0;
 800e36e:	2300      	movs	r3, #0
 800e370:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=4;
 800e372:	2304      	movs	r3, #4
 800e374:	73fb      	strb	r3, [r7, #15]
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e376:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e37a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e37e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e382:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e386:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e38a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e38e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e392:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e396:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e39a:	eddf 4aa0 	vldr	s9, [pc, #640]	; 800e61c <V90L+0x324>
 800e39e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	eeb0 2a47 	vmov.f32	s4, s14
 800e3a8:	eef0 1a45 	vmov.f32	s3, s10
 800e3ac:	eeb0 1a65 	vmov.f32	s2, s11
 800e3b0:	eef0 0a46 	vmov.f32	s1, s12
 800e3b4:	eeb0 0a66 	vmov.f32	s0, s13
 800e3b8:	f7f5 fc6a 	bl	8003c90 <straight_table2>
				if(mollifier_mode == ON){
 800e3bc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	d10c      	bne.n	800e3de <V90L+0xe6>
					mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800e3c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e3c8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e3cc:	eeb0 1a47 	vmov.f32	s2, s14
 800e3d0:	eddf 0a95 	vldr	s1, [pc, #596]	; 800e628 <V90L+0x330>
 800e3d4:	eeb0 0a67 	vmov.f32	s0, s15
 800e3d8:	f7f6 fbf6 	bl	8004bc8 <mollifier_slalom_table>
 800e3dc:	e013      	b.n	800e406 <V90L+0x10e>
				}else{
					slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800e3de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e3e2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e3e6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e3ea:	eef0 2a66 	vmov.f32	s5, s13
 800e3ee:	eeb0 2a47 	vmov.f32	s4, s14
 800e3f2:	eddf 1a8c 	vldr	s3, [pc, #560]	; 800e624 <V90L+0x32c>
 800e3f6:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 800e624 <V90L+0x32c>
 800e3fa:	eddf 0a8b 	vldr	s1, [pc, #556]	; 800e628 <V90L+0x330>
 800e3fe:	eeb0 0a67 	vmov.f32	s0, s15
 800e402:	f7f6 fa91 	bl	8004928 <slalom_table2>
				}
				wallmode.WallControlMode=0;
 800e406:	2300      	movs	r3, #0
 800e408:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=0;
 800e40a:	2300      	movs	r3, #0
 800e40c:	73fb      	strb	r3, [r7, #15]
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e410:	4618      	mov	r0, r3
 800e412:	f7f2 f8c1 	bl	8000598 <__aeabi_f2d>
 800e416:	a37e      	add	r3, pc, #504	; (adr r3, 800e610 <V90L+0x318>)
 800e418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41c:	f7f1 ff5e 	bl	80002dc <__adddf3>
 800e420:	4602      	mov	r2, r0
 800e422:	460b      	mov	r3, r1
 800e424:	4610      	mov	r0, r2
 800e426:	4619      	mov	r1, r3
 800e428:	f7f2 fbe6 	bl	8000bf8 <__aeabi_d2f>
 800e42c:	4603      	mov	r3, r0
 800e42e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e432:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e436:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e43a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e43e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e442:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e446:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e44a:	eddf 5a74 	vldr	s11, [pc, #464]	; 800e61c <V90L+0x324>
 800e44e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800e452:	68f8      	ldr	r0, [r7, #12]
 800e454:	eeb0 2a47 	vmov.f32	s4, s14
 800e458:	eef0 1a46 	vmov.f32	s3, s12
 800e45c:	ed9f 1a71 	vldr	s2, [pc, #452]	; 800e624 <V90L+0x32c>
 800e460:	eef0 0a66 	vmov.f32	s1, s13
 800e464:	ee00 3a10 	vmov	s0, r3
 800e468:	f7f5 fc12 	bl	8003c90 <straight_table2>
				highspeed_mode = 0;
 800e46c:	4b6a      	ldr	r3, [pc, #424]	; (800e618 <V90L+0x320>)
 800e46e:	2200      	movs	r2, #0
 800e470:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800e472:	e13a      	b.n	800e6ea <V90L+0x3f2>
			}else if (test_mode >= 2) {
 800e474:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e478:	2b01      	cmp	r3, #1
 800e47a:	f240 808a 	bls.w	800e592 <V90L+0x29a>
		highspeed_mode = 1;
 800e47e:	4b66      	ldr	r3, [pc, #408]	; (800e618 <V90L+0x320>)
 800e480:	2201      	movs	r2, #1
 800e482:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800e484:	2300      	movs	r3, #0
 800e486:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800e488:	2300      	movs	r3, #0
 800e48a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800e48c:	2304      	movs	r3, #4
 800e48e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800e490:	2300      	movs	r3, #0
 800e492:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e494:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e498:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e49c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e4a0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e4a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e4a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e4ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e4b0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e4b4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e4b8:	eddf 4a58 	vldr	s9, [pc, #352]	; 800e61c <V90L+0x324>
 800e4bc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e4c0:	68f8      	ldr	r0, [r7, #12]
 800e4c2:	eeb0 2a47 	vmov.f32	s4, s14
 800e4c6:	eef0 1a45 	vmov.f32	s3, s10
 800e4ca:	eeb0 1a65 	vmov.f32	s2, s11
 800e4ce:	eef0 0a46 	vmov.f32	s1, s12
 800e4d2:	eeb0 0a66 	vmov.f32	s0, s13
 800e4d6:	f7f5 fbdb 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800e4da:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e4de:	2b01      	cmp	r3, #1
 800e4e0:	d10c      	bne.n	800e4fc <V90L+0x204>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800e4e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e4e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e4ea:	eeb0 1a47 	vmov.f32	s2, s14
 800e4ee:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800e628 <V90L+0x330>
 800e4f2:	eeb0 0a67 	vmov.f32	s0, s15
 800e4f6:	f7f6 fb67 	bl	8004bc8 <mollifier_slalom_table>
 800e4fa:	e013      	b.n	800e524 <V90L+0x22c>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800e4fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e500:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e504:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e508:	eef0 2a66 	vmov.f32	s5, s13
 800e50c:	eeb0 2a47 	vmov.f32	s4, s14
 800e510:	eddf 1a44 	vldr	s3, [pc, #272]	; 800e624 <V90L+0x32c>
 800e514:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800e624 <V90L+0x32c>
 800e518:	eddf 0a43 	vldr	s1, [pc, #268]	; 800e628 <V90L+0x330>
 800e51c:	eeb0 0a67 	vmov.f32	s0, s15
 800e520:	f7f6 fa02 	bl	8004928 <slalom_table2>
		wallmode.WallControlMode=0;
 800e524:	2300      	movs	r3, #0
 800e526:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800e528:	2300      	movs	r3, #0
 800e52a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e52e:	4618      	mov	r0, r3
 800e530:	f7f2 f832 	bl	8000598 <__aeabi_f2d>
 800e534:	a336      	add	r3, pc, #216	; (adr r3, 800e610 <V90L+0x318>)
 800e536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53a:	f7f1 fecf 	bl	80002dc <__adddf3>
 800e53e:	4602      	mov	r2, r0
 800e540:	460b      	mov	r3, r1
 800e542:	4610      	mov	r0, r2
 800e544:	4619      	mov	r1, r3
 800e546:	f7f2 fb57 	bl	8000bf8 <__aeabi_d2f>
 800e54a:	4603      	mov	r3, r0
 800e54c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e550:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e554:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e558:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e55c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e560:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e564:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e568:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800e61c <V90L+0x324>
 800e56c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800e570:	68f8      	ldr	r0, [r7, #12]
 800e572:	eeb0 2a47 	vmov.f32	s4, s14
 800e576:	eef0 1a46 	vmov.f32	s3, s12
 800e57a:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800e624 <V90L+0x32c>
 800e57e:	eef0 0a66 	vmov.f32	s1, s13
 800e582:	ee00 3a10 	vmov	s0, r3
 800e586:	f7f5 fb83 	bl	8003c90 <straight_table2>
		highspeed_mode = 0;
 800e58a:	4b23      	ldr	r3, [pc, #140]	; (800e618 <V90L+0x320>)
 800e58c:	2200      	movs	r2, #0
 800e58e:	701a      	strb	r2, [r3, #0]
}
 800e590:	e0ab      	b.n	800e6ea <V90L+0x3f2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800e592:	2300      	movs	r3, #0
 800e594:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800e596:	2300      	movs	r3, #0
 800e598:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800e59a:	2304      	movs	r3, #4
 800e59c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e5a2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e5a6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e5aa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e5ae:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e5b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e5b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e5ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e5be:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e5c2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e5c6:	eddf 4a15 	vldr	s9, [pc, #84]	; 800e61c <V90L+0x324>
 800e5ca:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	eeb0 2a47 	vmov.f32	s4, s14
 800e5d4:	eef0 1a45 	vmov.f32	s3, s10
 800e5d8:	eeb0 1a65 	vmov.f32	s2, s11
 800e5dc:	eef0 0a46 	vmov.f32	s1, s12
 800e5e0:	eeb0 0a66 	vmov.f32	s0, s13
 800e5e4:	f7f5 fb54 	bl	8003c90 <straight_table2>
		if(mollifier_mode == ON){
 800e5e8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e5ec:	2b01      	cmp	r3, #1
 800e5ee:	d11d      	bne.n	800e62c <V90L+0x334>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800e5f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e5f4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e5f8:	eeb0 1a47 	vmov.f32	s2, s14
 800e5fc:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800e628 <V90L+0x330>
 800e600:	eeb0 0a67 	vmov.f32	s0, s15
 800e604:	f7f6 fae0 	bl	8004bc8 <mollifier_slalom_table>
 800e608:	e024      	b.n	800e654 <V90L+0x35c>
 800e60a:	bf00      	nop
 800e60c:	f3af 8000 	nop.w
 800e610:	c022ec18 	.word	0xc022ec18
 800e614:	405fd1de 	.word	0x405fd1de
 800e618:	20000814 	.word	0x20000814
 800e61c:	42340000 	.word	0x42340000
 800e620:	42d4477b 	.word	0x42d4477b
 800e624:	00000000 	.word	0x00000000
 800e628:	42b40000 	.word	0x42b40000
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800e62c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e630:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e634:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e638:	eef0 2a66 	vmov.f32	s5, s13
 800e63c:	eeb0 2a47 	vmov.f32	s4, s14
 800e640:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800e624 <V90L+0x32c>
 800e644:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800e624 <V90L+0x32c>
 800e648:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800e628 <V90L+0x330>
 800e64c:	eeb0 0a67 	vmov.f32	s0, s15
 800e650:	f7f6 f96a 	bl	8004928 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800e654:	2303      	movs	r3, #3
 800e656:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800e658:	2300      	movs	r3, #0
 800e65a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800e65c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800e660:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800e664:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e668:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e66c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e670:	edd7 7a01 	vldr	s15, [r7, #4]
 800e674:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e67c:	eef0 7ae7 	vabs.f32	s15, s15
 800e680:	ee17 0a90 	vmov	r0, s15
 800e684:	f7f1 ff88 	bl	8000598 <__aeabi_f2d>
 800e688:	f04f 0200 	mov.w	r2, #0
 800e68c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e690:	f7f2 f904 	bl	800089c <__aeabi_ddiv>
 800e694:	4602      	mov	r2, r0
 800e696:	460b      	mov	r3, r1
 800e698:	4614      	mov	r4, r2
 800e69a:	461d      	mov	r5, r3
 800e69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7f1 ff7a 	bl	8000598 <__aeabi_f2d>
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	4620      	mov	r0, r4
 800e6aa:	4629      	mov	r1, r5
 800e6ac:	f7f2 f8f6 	bl	800089c <__aeabi_ddiv>
 800e6b0:	4602      	mov	r2, r0
 800e6b2:	460b      	mov	r3, r1
 800e6b4:	4610      	mov	r0, r2
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	f04f 0200 	mov.w	r2, #0
 800e6bc:	4b0f      	ldr	r3, [pc, #60]	; (800e6fc <V90L+0x404>)
 800e6be:	f7f1 fe0d 	bl	80002dc <__adddf3>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800e6c6:	4610      	mov	r0, r2
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	f7f2 fa95 	bl	8000bf8 <__aeabi_d2f>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	68f8      	ldr	r0, [r7, #12]
 800e6d2:	ee02 3a10 	vmov	s4, r3
 800e6d6:	edd7 1a01 	vldr	s3, [r7, #4]
 800e6da:	ed97 1a01 	vldr	s2, [r7, #4]
 800e6de:	eef0 0a68 	vmov.f32	s1, s17
 800e6e2:	eeb0 0a48 	vmov.f32	s0, s16
 800e6e6:	f7f5 fad3 	bl	8003c90 <straight_table2>
}
 800e6ea:	bf00      	nop
 800e6ec:	3710      	adds	r7, #16
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	ecbd 8b02 	vpop	{d8}
 800e6f4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800e6f8:	b004      	add	sp, #16
 800e6fa:	4770      	bx	lr
 800e6fc:	408f4000 	.word	0x408f4000

0800e700 <testturning>:


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode,char funmode,float funduty,char mollifier_mode){
 800e700:	b084      	sub	sp, #16
 800e702:	b580      	push	{r7, lr}
 800e704:	b086      	sub	sp, #24
 800e706:	af04      	add	r7, sp, #16
 800e708:	f107 0c10 	add.w	ip, r7, #16
 800e70c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800e710:	ed87 0a01 	vstr	s0, [r7, #4]
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L
	if(funmode==ON){
 800e714:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 800e718:	2b01      	cmp	r3, #1
 800e71a:	d116      	bne.n	800e74a <testturning+0x4a>
		pl_DriveMotor_standby(ON);
 800e71c:	2001      	movs	r0, #1
 800e71e:	f7f9 ff43 	bl	80085a8 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e722:	2003      	movs	r0, #3
 800e724:	f7f9 ff4a 	bl	80085bc <pl_L_DriveMotor_mode>
		pl_FunMotor_duty(funduty);
 800e728:	ed97 0a01 	vldr	s0, [r7, #4]
 800e72c:	f7f9 ffda 	bl	80086e4 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800e730:	f7f9 ffc4 	bl	80086bc <pl_FunMotor_start>
		HAL_Delay(600);
 800e734:	f44f 7016 	mov.w	r0, #600	; 0x258
 800e738:	f00a ffdc 	bl	80196f4 <HAL_Delay>
		reset_gyro();
 800e73c:	f7f3 fa64 	bl	8001c08 <reset_gyro>
		reset_speed();
 800e740:	f7f2 fc70 	bl	8001024 <reset_speed>
		clear_Ierror();
 800e744:	f7f6 fdb4 	bl	80052b0 <clear_Ierror>
 800e748:	e00b      	b.n	800e762 <testturning+0x62>

	}else{
		pl_DriveMotor_standby(ON);
 800e74a:	2001      	movs	r0, #1
 800e74c:	f7f9 ff2c 	bl	80085a8 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e750:	2003      	movs	r0, #3
 800e752:	f7f9 ff33 	bl	80085bc <pl_L_DriveMotor_mode>
		reset_gyro();
 800e756:	f7f3 fa57 	bl	8001c08 <reset_gyro>
		reset_speed();
 800e75a:	f7f2 fc63 	bl	8001024 <reset_speed>
		clear_Ierror();
 800e75e:	f7f6 fda7 	bl	80052b0 <clear_Ierror>

	}
	record_mode=12;
 800e762:	4ba8      	ldr	r3, [pc, #672]	; (800ea04 <testturning+0x304>)
 800e764:	220c      	movs	r2, #12
 800e766:	701a      	strb	r2, [r3, #0]
//	if(turnmode==0){test_mollifier_slalomR(Howspeed.slalom_R);}
	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode,mollifier_mode,-100);}
 800e768:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d110      	bne.n	800e792 <testturning+0x92>
 800e770:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e774:	9303      	str	r3, [sp, #12]
 800e776:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800e77a:	9302      	str	r3, [sp, #8]
 800e77c:	2301      	movs	r3, #1
 800e77e:	9301      	str	r3, [sp, #4]
 800e780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e782:	9300      	str	r3, [sp, #0]
 800e784:	f107 0318 	add.w	r3, r7, #24
 800e788:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e78a:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800ea08 <testturning+0x308>
 800e78e:	f7fc f973 	bl	800aa78 <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode,mollifier_mode,-100);}
 800e792:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e796:	2b01      	cmp	r3, #1
 800e798:	d110      	bne.n	800e7bc <testturning+0xbc>
 800e79a:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e79e:	9303      	str	r3, [sp, #12]
 800e7a0:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800e7a4:	9302      	str	r3, [sp, #8]
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	9301      	str	r3, [sp, #4]
 800e7aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7ac:	9300      	str	r3, [sp, #0]
 800e7ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e7b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e7b4:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800ea08 <testturning+0x308>
 800e7b8:	f7fc fb44 	bl	800ae44 <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON,mollifier_mode,-100);}
 800e7bc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e7c0:	2b02      	cmp	r3, #2
 800e7c2:	d10d      	bne.n	800e7e0 <testturning+0xe0>
 800e7c4:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e7c8:	9302      	str	r3, [sp, #8]
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	9301      	str	r3, [sp, #4]
 800e7ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7d0:	9300      	str	r3, [sp, #0]
 800e7d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e7d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e7d8:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800ea08 <testturning+0x308>
 800e7dc:	f7fc fd14 	bl	800b208 <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON,mollifier_mode,-100);}
 800e7e0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e7e4:	2b03      	cmp	r3, #3
 800e7e6:	d10d      	bne.n	800e804 <testturning+0x104>
 800e7e8:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e7ec:	9302      	str	r3, [sp, #8]
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	9301      	str	r3, [sp, #4]
 800e7f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e7f4:	9300      	str	r3, [sp, #0]
 800e7f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e7fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e7fc:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800ea08 <testturning+0x308>
 800e800:	f7fc fe6c 	bl	800b4dc <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON,mollifier_mode,-100);}
 800e804:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e808:	2b04      	cmp	r3, #4
 800e80a:	d10d      	bne.n	800e828 <testturning+0x128>
 800e80c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e810:	9302      	str	r3, [sp, #8]
 800e812:	2301      	movs	r3, #1
 800e814:	9301      	str	r3, [sp, #4]
 800e816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e81e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e820:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800ea08 <testturning+0x308>
 800e824:	f7fc ffbe 	bl	800b7a4 <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON,mollifier_mode,-100);}
 800e828:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e82c:	2b05      	cmp	r3, #5
 800e82e:	d10e      	bne.n	800e84e <testturning+0x14e>
 800e830:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e834:	9302      	str	r3, [sp, #8]
 800e836:	2301      	movs	r3, #1
 800e838:	9301      	str	r3, [sp, #4]
 800e83a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e83e:	9300      	str	r3, [sp, #0]
 800e840:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e844:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e846:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800ea08 <testturning+0x308>
 800e84a:	f7fd f915 	bl	800ba78 <turn180L>
	if(turnmode==6){turn45inR(Howspeed.turn45in_R,ON,mollifier_mode,-100);}
 800e84e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e852:	2b06      	cmp	r3, #6
 800e854:	d10e      	bne.n	800e874 <testturning+0x174>
 800e856:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e85a:	9302      	str	r3, [sp, #8]
 800e85c:	2301      	movs	r3, #1
 800e85e:	9301      	str	r3, [sp, #4]
 800e860:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e864:	9300      	str	r3, [sp, #0]
 800e866:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e86a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e86c:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800ea08 <testturning+0x308>
 800e870:	f7fd fa6a 	bl	800bd48 <turn45inR>
	if(turnmode==7){turn45inL(Howspeed.turn45in_L,ON,mollifier_mode,-100);}
 800e874:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e878:	2b07      	cmp	r3, #7
 800e87a:	d10e      	bne.n	800e89a <testturning+0x19a>
 800e87c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e880:	9302      	str	r3, [sp, #8]
 800e882:	2301      	movs	r3, #1
 800e884:	9301      	str	r3, [sp, #4]
 800e886:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e88a:	9300      	str	r3, [sp, #0]
 800e88c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e890:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e892:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800ea08 <testturning+0x308>
 800e896:	f7fd fc9f 	bl	800c1d8 <turn45inL>
	if(turnmode==8){turn135inR(Howspeed.turn135in_R,ON,mollifier_mode,-100);}
 800e89a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e89e:	2b08      	cmp	r3, #8
 800e8a0:	d10e      	bne.n	800e8c0 <testturning+0x1c0>
 800e8a2:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e8a6:	9302      	str	r3, [sp, #8]
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	9301      	str	r3, [sp, #4]
 800e8ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e8b0:	9300      	str	r3, [sp, #0]
 800e8b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800e8b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e8b8:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800ea08 <testturning+0x308>
 800e8bc:	f7fd fecc 	bl	800c658 <turn135inR>
	if(turnmode==9){turn135inL(Howspeed.turn135in_L,ON,mollifier_mode,-100);}
 800e8c0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e8c4:	2b09      	cmp	r3, #9
 800e8c6:	d10e      	bne.n	800e8e6 <testturning+0x1e6>
 800e8c8:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e8cc:	9302      	str	r3, [sp, #8]
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	9301      	str	r3, [sp, #4]
 800e8d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e8d6:	9300      	str	r3, [sp, #0]
 800e8d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e8dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e8de:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800ea08 <testturning+0x308>
 800e8e2:	f7fe f901 	bl	800cae8 <turn135inL>
	if(turnmode==10){turn45outR(Howspeed.turn45out_R,ON,mollifier_mode,-100);}
 800e8e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e8ea:	2b0a      	cmp	r3, #10
 800e8ec:	d10e      	bne.n	800e90c <testturning+0x20c>
 800e8ee:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e8f2:	9302      	str	r3, [sp, #8]
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	9301      	str	r3, [sp, #4]
 800e8f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e8fc:	9300      	str	r3, [sp, #0]
 800e8fe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800e902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e904:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800ea08 <testturning+0x308>
 800e908:	f7fe fb32 	bl	800cf70 <turn45outR>
	if(turnmode==11){turn45outL(Howspeed.turn45out_L,ON,mollifier_mode,-100);}
 800e90c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e910:	2b0b      	cmp	r3, #11
 800e912:	d10e      	bne.n	800e932 <testturning+0x232>
 800e914:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e918:	9302      	str	r3, [sp, #8]
 800e91a:	2301      	movs	r3, #1
 800e91c:	9301      	str	r3, [sp, #4]
 800e91e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e922:	9300      	str	r3, [sp, #0]
 800e924:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800e928:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e92a:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800ea08 <testturning+0x308>
 800e92e:	f7fe fd11 	bl	800d354 <turn45outL>
	if(turnmode==12){turn135outR(Howspeed.turn135out_R,ON,mollifier_mode,-100);}
 800e932:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e936:	2b0c      	cmp	r3, #12
 800e938:	d10e      	bne.n	800e958 <testturning+0x258>
 800e93a:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e93e:	9302      	str	r3, [sp, #8]
 800e940:	2301      	movs	r3, #1
 800e942:	9301      	str	r3, [sp, #4]
 800e944:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e948:	9300      	str	r3, [sp, #0]
 800e94a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e94e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e950:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800ea08 <testturning+0x308>
 800e954:	f7fe fee6 	bl	800d724 <turn135outR>
	if(turnmode==13){turn135outL(Howspeed.turn135out_L,ON,mollifier_mode,-100);}
 800e958:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e95c:	2b0d      	cmp	r3, #13
 800e95e:	d10e      	bne.n	800e97e <testturning+0x27e>
 800e960:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e964:	9302      	str	r3, [sp, #8]
 800e966:	2301      	movs	r3, #1
 800e968:	9301      	str	r3, [sp, #4]
 800e96a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e96e:	9300      	str	r3, [sp, #0]
 800e970:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800e974:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e976:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800ea08 <testturning+0x308>
 800e97a:	f7ff f8c5 	bl	800db08 <turn135outL>
	if(turnmode==14){V90R(Howspeed.V90_R,ON,mollifier_mode,-100);}
 800e97e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e982:	2b0e      	cmp	r3, #14
 800e984:	d10e      	bne.n	800e9a4 <testturning+0x2a4>
 800e986:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e98a:	9302      	str	r3, [sp, #8]
 800e98c:	2301      	movs	r3, #1
 800e98e:	9301      	str	r3, [sp, #4]
 800e990:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800e994:	9300      	str	r3, [sp, #0]
 800e996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e99a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e99c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800ea08 <testturning+0x308>
 800e9a0:	f7ff fa9e 	bl	800dee0 <V90R>
	if(turnmode==15){V90L(Howspeed.V90_L,ON,mollifier_mode,-100);}
 800e9a4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e9a8:	2b0f      	cmp	r3, #15
 800e9aa:	d10e      	bne.n	800e9ca <testturning+0x2ca>
 800e9ac:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e9b0:	9302      	str	r3, [sp, #8]
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	9301      	str	r3, [sp, #4]
 800e9b6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800e9ba:	9300      	str	r3, [sp, #0]
 800e9bc:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800e9c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e9c2:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800ea08 <testturning+0x308>
 800e9c6:	f7ff fc97 	bl	800e2f8 <V90L>
//	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,CONNECT);}
//	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,CONNECT);}
//	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,CONNECT);}
//	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,CONNECT);}

	record_mode=0;
 800e9ca:	4b0e      	ldr	r3, [pc, #56]	; (800ea04 <testturning+0x304>)
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e9d0:	2003      	movs	r0, #3
 800e9d2:	f7f9 fe1b 	bl	800860c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e9d6:	2003      	movs	r0, #3
 800e9d8:	f7f9 fdf0 	bl	80085bc <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800e9dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e9e0:	f7fa f912 	bl	8008c08 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800e9e4:	f7f9 fe74 	bl	80086d0 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 800e9e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e9ec:	f7fa f90c 	bl	8008c08 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800e9f0:	2000      	movs	r0, #0
 800e9f2:	f7f9 fdd9 	bl	80085a8 <pl_DriveMotor_standby>

}
 800e9f6:	bf00      	nop
 800e9f8:	3708      	adds	r7, #8
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ea00:	b004      	add	sp, #16
 800ea02:	4770      	bx	lr
 800ea04:	2000f284 	.word	0x2000f284
 800ea08:	c2c80000 	.word	0xc2c80000

0800ea0c <get_wallData_sensor>:





void get_wallData_sensor(_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 800ea0c:	b480      	push	{r7}
 800ea0e:	b085      	sub	sp, #20
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	607a      	str	r2, [r7, #4]

	*front_wall = (g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800ea18:	4b12      	ldr	r3, [pc, #72]	; (800ea64 <get_wallData_sensor+0x58>)
 800ea1a:	689b      	ldr	r3, [r3, #8]
 800ea1c:	2b86      	cmp	r3, #134	; 0x86
 800ea1e:	bfcc      	ite	gt
 800ea20:	2301      	movgt	r3, #1
 800ea22:	2300      	movle	r3, #0
 800ea24:	b2da      	uxtb	r2, r3
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	701a      	strb	r2, [r3, #0]
	*right_wall = (g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800ea2a:	4b0e      	ldr	r3, [pc, #56]	; (800ea64 <get_wallData_sensor+0x58>)
 800ea2c:	691b      	ldr	r3, [r3, #16]
 800ea2e:	f240 12f3 	movw	r2, #499	; 0x1f3
 800ea32:	4293      	cmp	r3, r2
 800ea34:	bfcc      	ite	gt
 800ea36:	2301      	movgt	r3, #1
 800ea38:	2300      	movle	r3, #0
 800ea3a:	b2da      	uxtb	r2, r3
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	701a      	strb	r2, [r3, #0]
	*left_wall  = (g_sensor_mean[SENSOR_LEFT]  >= L_PRESENCE);
 800ea40:	4b08      	ldr	r3, [pc, #32]	; (800ea64 <get_wallData_sensor+0x58>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	f240 12f3 	movw	r2, #499	; 0x1f3
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	bfcc      	ite	gt
 800ea4c:	2301      	movgt	r3, #1
 800ea4e:	2300      	movle	r3, #0
 800ea50:	b2da      	uxtb	r2, r3
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	701a      	strb	r2, [r3, #0]

}
 800ea56:	bf00      	nop
 800ea58:	3714      	adds	r7, #20
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr
 800ea62:	bf00      	nop
 800ea64:	20000474 	.word	0x20000474

0800ea68 <update_coordinate>:


void update_coordinate(int *x,int *y,int direction){
 800ea68:	b480      	push	{r7}
 800ea6a:	b085      	sub	sp, #20
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	60f8      	str	r0, [r7, #12]
 800ea70:	60b9      	str	r1, [r7, #8]
 800ea72:	607a      	str	r2, [r7, #4]
// int direction,int *x_coordinate,int *y_coordinate
//	*direction = *direction % 4;
//	if (*direction <= 0) {
//		*direction = *direction+4;
//	}
	switch (direction) {
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	3b01      	subs	r3, #1
 800ea78:	2b03      	cmp	r3, #3
 800ea7a:	d823      	bhi.n	800eac4 <update_coordinate+0x5c>
 800ea7c:	a201      	add	r2, pc, #4	; (adr r2, 800ea84 <update_coordinate+0x1c>)
 800ea7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea82:	bf00      	nop
 800ea84:	0800ea95 	.word	0x0800ea95
 800ea88:	0800eaa1 	.word	0x0800eaa1
 800ea8c:	0800eaad 	.word	0x0800eaad
 800ea90:	0800eab9 	.word	0x0800eab9
	case 1://北
		*y += 1;
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	1c5a      	adds	r2, r3, #1
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	601a      	str	r2, [r3, #0]
		break;
 800ea9e:	e011      	b.n	800eac4 <update_coordinate+0x5c>
	case 2://東
		*x += 1;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	1c5a      	adds	r2, r3, #1
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	601a      	str	r2, [r3, #0]
		break;
 800eaaa:	e00b      	b.n	800eac4 <update_coordinate+0x5c>
	case 3://南
		*y -= 1;
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	1e5a      	subs	r2, r3, #1
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	601a      	str	r2, [r3, #0]
		break;
 800eab6:	e005      	b.n	800eac4 <update_coordinate+0x5c>
	case 4://西
		*x -= 1;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	1e5a      	subs	r2, r3, #1
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	601a      	str	r2, [r3, #0]
		break;
 800eac2:	bf00      	nop
	}



}
 800eac4:	bf00      	nop
 800eac6:	3714      	adds	r7, #20
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <run_movement_continuity>:

void run_movement_continuity(int *direction,unsigned short front_count,unsigned short right_count,
		unsigned short back_count,unsigned short left_count,float input_StraightVelocity,
		float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,_Bool front_wall,_Bool right_wall,_Bool left_wall){
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b08e      	sub	sp, #56	; 0x38
 800ead4:	af04      	add	r7, sp, #16
 800ead6:	61f8      	str	r0, [r7, #28]
 800ead8:	4608      	mov	r0, r1
 800eada:	4611      	mov	r1, r2
 800eadc:	461a      	mov	r2, r3
 800eade:	ed87 0a04 	vstr	s0, [r7, #16]
 800eae2:	edc7 0a03 	vstr	s1, [r7, #12]
 800eae6:	ed87 1a02 	vstr	s2, [r7, #8]
 800eaea:	edc7 1a01 	vstr	s3, [r7, #4]
 800eaee:	4603      	mov	r3, r0
 800eaf0:	837b      	strh	r3, [r7, #26]
 800eaf2:	460b      	mov	r3, r1
 800eaf4:	833b      	strh	r3, [r7, #24]
 800eaf6:	4613      	mov	r3, r2
 800eaf8:	82fb      	strh	r3, [r7, #22]
	MOTOR_MODE mode;
	// 移動の優先順位 ： 前→右→左→後
	if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800eafa:	8b7a      	ldrh	r2, [r7, #26]
 800eafc:	8b3b      	ldrh	r3, [r7, #24]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d81d      	bhi.n	800eb3e <run_movement_continuity+0x6e>
 800eb02:	8b7a      	ldrh	r2, [r7, #26]
 800eb04:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d819      	bhi.n	800eb3e <run_movement_continuity+0x6e>
 800eb0a:	8b7a      	ldrh	r2, [r7, #26]
 800eb0c:	8afb      	ldrh	r3, [r7, #22]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d815      	bhi.n	800eb3e <run_movement_continuity+0x6e>
		// 直進
		mode.WallControlMode=1;
 800eb12:	2301      	movs	r3, #1
 800eb14:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		mode.calMazeMode=0;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		mode.WallCutMode=0;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		straight_table2(MAZE_SECTION-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eb24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb26:	ed97 2a02 	vldr	s4, [r7, #8]
 800eb2a:	edd7 1a04 	vldr	s3, [r7, #16]
 800eb2e:	ed97 1a04 	vldr	s2, [r7, #16]
 800eb32:	edd7 0a04 	vldr	s1, [r7, #16]
 800eb36:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 800ecb4 <run_movement_continuity+0x1e4>
 800eb3a:	f7f5 f8a9 	bl	8003c90 <straight_table2>
	}
	if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800eb3e:	8b3a      	ldrh	r2, [r7, #24]
 800eb40:	8b7b      	ldrh	r3, [r7, #26]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d21b      	bcs.n	800eb7e <run_movement_continuity+0xae>
 800eb46:	8b3a      	ldrh	r2, [r7, #24]
 800eb48:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d817      	bhi.n	800eb7e <run_movement_continuity+0xae>
 800eb4e:	8b3a      	ldrh	r2, [r7, #24]
 800eb50:	8afb      	ldrh	r3, [r7, #22]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d813      	bhi.n	800eb7e <run_movement_continuity+0xae>
		// 右旋回
		slalomR(howspeed.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800eb56:	2300      	movs	r3, #0
 800eb58:	9303      	str	r3, [sp, #12]
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	9302      	str	r3, [sp, #8]
 800eb5e:	2300      	movs	r3, #0
 800eb60:	9301      	str	r3, [sp, #4]
 800eb62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb64:	9300      	str	r3, [sp, #0]
 800eb66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800eb6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eb6c:	ed97 0a04 	vldr	s0, [r7, #16]
 800eb70:	f7fb ff82 	bl	800aa78 <slalomR>
		*direction += 1;
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	1c5a      	adds	r2, r3, #1
 800eb7a:	69fb      	ldr	r3, [r7, #28]
 800eb7c:	601a      	str	r2, [r3, #0]
	}
	if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800eb7e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800eb80:	8b7b      	ldrh	r3, [r7, #26]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d21b      	bcs.n	800ebbe <run_movement_continuity+0xee>
 800eb86:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800eb88:	8b3b      	ldrh	r3, [r7, #24]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d217      	bcs.n	800ebbe <run_movement_continuity+0xee>
 800eb8e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800eb90:	8afb      	ldrh	r3, [r7, #22]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d813      	bhi.n	800ebbe <run_movement_continuity+0xee>
		// 左旋回
		slalomL(howspeed.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800eb96:	2300      	movs	r3, #0
 800eb98:	9303      	str	r3, [sp, #12]
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	9302      	str	r3, [sp, #8]
 800eb9e:	2300      	movs	r3, #0
 800eba0:	9301      	str	r3, [sp, #4]
 800eba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eba4:	9300      	str	r3, [sp, #0]
 800eba6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ebaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ebac:	ed97 0a04 	vldr	s0, [r7, #16]
 800ebb0:	f7fc f948 	bl	800ae44 <slalomL>
		*direction -= 1;
 800ebb4:	69fb      	ldr	r3, [r7, #28]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	1e5a      	subs	r2, r3, #1
 800ebba:	69fb      	ldr	r3, [r7, #28]
 800ebbc:	601a      	str	r2, [r3, #0]
	}
	if(back_count < front_count && back_count < right_count
 800ebbe:	8afa      	ldrh	r2, [r7, #22]
 800ebc0:	8b7b      	ldrh	r3, [r7, #26]
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d272      	bcs.n	800ecac <run_movement_continuity+0x1dc>
 800ebc6:	8afa      	ldrh	r2, [r7, #22]
 800ebc8:	8b3b      	ldrh	r3, [r7, #24]
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d26e      	bcs.n	800ecac <run_movement_continuity+0x1dc>
			&& back_count < left_count){
 800ebce:	8afa      	ldrh	r2, [r7, #22]
 800ebd0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d26a      	bcs.n	800ecac <run_movement_continuity+0x1dc>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		mode.WallControlMode=1;
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		mode.calMazeMode=0;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		mode.WallCutMode=0;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800ebe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebea:	ed97 2a02 	vldr	s4, [r7, #8]
 800ebee:	edd7 1a04 	vldr	s3, [r7, #16]
 800ebf2:	ed9f 1a31 	vldr	s2, [pc, #196]	; 800ecb8 <run_movement_continuity+0x1e8>
 800ebf6:	edd7 0a04 	vldr	s1, [r7, #16]
 800ebfa:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800ecbc <run_movement_continuity+0x1ec>
 800ebfe:	f7f5 f847 	bl	8003c90 <straight_table2>
		create_DijkstraMap();
 800ec02:	f003 f9c3 	bl	8011f8c <create_DijkstraMap>
		backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800ec06:	f897 2180 	ldrb.w	r2, [r7, #384]	; 0x180
 800ec0a:	f897 1184 	ldrb.w	r1, [r7, #388]	; 0x184
 800ec0e:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800ec12:	4618      	mov	r0, r3
 800ec14:	edd7 0a01 	vldr	s1, [r7, #4]
 800ec18:	ed97 0a03 	vldr	s0, [r7, #12]
 800ec1c:	f7fb fe5a 	bl	800a8d4 <backTurn_controlWall>
		//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
		wait_ms_NoReset(100);
 800ec20:	2064      	movs	r0, #100	; 0x64
 800ec22:	f7f9 fff1 	bl	8008c08 <wait_ms_NoReset>
		mode.WallControlMode=0;
 800ec26:	2300      	movs	r3, #0
 800ec28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if(front_wall){
 800ec2c:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d024      	beq.n	800ec7e <run_movement_continuity+0x1ae>
		straight_table2(-BACK_TO_CENTER_FRONT, 0,0,-150,1000, mode);
 800ec34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec36:	ed9f 2a22 	vldr	s4, [pc, #136]	; 800ecc0 <run_movement_continuity+0x1f0>
 800ec3a:	eddf 1a22 	vldr	s3, [pc, #136]	; 800ecc4 <run_movement_continuity+0x1f4>
 800ec3e:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 800ecb8 <run_movement_continuity+0x1e8>
 800ec42:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800ecb8 <run_movement_continuity+0x1e8>
 800ec46:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800ec4a:	f7f5 f821 	bl	8003c90 <straight_table2>
		wait_ms_NoReset(100);
 800ec4e:	2064      	movs	r0, #100	; 0x64
 800ec50:	f7f9 ffda 	bl	8008c08 <wait_ms_NoReset>
		clear_Ierror();
 800ec54:	f7f6 fb2c 	bl	80052b0 <clear_Ierror>
		reset_speed();
 800ec58:	f7f2 f9e4 	bl	8001024 <reset_speed>
		mode.WallControlMode=1;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		straight_table2(BACK_TO_CENTER +MAZE_SECTION/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ec62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec64:	ed97 2a02 	vldr	s4, [r7, #8]
 800ec68:	edd7 1a04 	vldr	s3, [r7, #16]
 800ec6c:	ed97 1a04 	vldr	s2, [r7, #16]
 800ec70:	eddf 0a11 	vldr	s1, [pc, #68]	; 800ecb8 <run_movement_continuity+0x1e8>
 800ec74:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800ecc8 <run_movement_continuity+0x1f8>
 800ec78:	f7f5 f80a 	bl	8003c90 <straight_table2>
 800ec7c:	e011      	b.n	800eca2 <run_movement_continuity+0x1d2>
		}else{
			clear_Ierror();
 800ec7e:	f7f6 fb17 	bl	80052b0 <clear_Ierror>
			mode.WallControlMode=0;
 800ec82:	2300      	movs	r3, #0
 800ec84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			straight_table2(MAZE_SECTION/2+BACK_TO_CENTER-BACK_TO_CENTER_FRONT,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ec88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec8a:	ed97 2a02 	vldr	s4, [r7, #8]
 800ec8e:	edd7 1a04 	vldr	s3, [r7, #16]
 800ec92:	ed97 1a04 	vldr	s2, [r7, #16]
 800ec96:	eddf 0a08 	vldr	s1, [pc, #32]	; 800ecb8 <run_movement_continuity+0x1e8>
 800ec9a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800eccc <run_movement_continuity+0x1fc>
 800ec9e:	f7f4 fff7 	bl	8003c90 <straight_table2>
		}
		*direction = *direction + 2;
 800eca2:	69fb      	ldr	r3, [r7, #28]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	1c9a      	adds	r2, r3, #2
 800eca8:	69fb      	ldr	r3, [r7, #28]
 800ecaa:	601a      	str	r2, [r3, #0]
	}

}
 800ecac:	bf00      	nop
 800ecae:	3728      	adds	r7, #40	; 0x28
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	42a40000 	.word	0x42a40000
 800ecb8:	00000000 	.word	0x00000000
 800ecbc:	42140000 	.word	0x42140000
 800ecc0:	447a0000 	.word	0x447a0000
 800ecc4:	c3160000 	.word	0xc3160000
 800ecc8:	42830000 	.word	0x42830000
 800eccc:	42540000 	.word	0x42540000

0800ecd0 <run_movement_suspension>:
void run_movement_suspension(int *direction, unsigned short front_count,
		unsigned short right_count, unsigned short back_count,
		unsigned short left_count, float input_StraightVelocity,
		float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,
		_Bool front_wall, _Bool right_wall, _Bool left_wall,int x,int y,uint8_t MazeRecord_mode,uint8_t Dijkstra_mode) {
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b08e      	sub	sp, #56	; 0x38
 800ecd4:	af04      	add	r7, sp, #16
 800ecd6:	61f8      	str	r0, [r7, #28]
 800ecd8:	4608      	mov	r0, r1
 800ecda:	4611      	mov	r1, r2
 800ecdc:	461a      	mov	r2, r3
 800ecde:	ed87 0a04 	vstr	s0, [r7, #16]
 800ece2:	edc7 0a03 	vstr	s1, [r7, #12]
 800ece6:	ed87 1a02 	vstr	s2, [r7, #8]
 800ecea:	edc7 1a01 	vstr	s3, [r7, #4]
 800ecee:	4603      	mov	r3, r0
 800ecf0:	837b      	strh	r3, [r7, #26]
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	833b      	strh	r3, [r7, #24]
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	82fb      	strh	r3, [r7, #22]
	MOTOR_MODE mode;
	// 移動の優先順位 ： 前→右→左→後
	mode.WallControlMode = 1;
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	mode.calMazeMode = 0;
 800ed00:	2300      	movs	r3, #0
 800ed02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	mode.WallCutMode = 0;
 800ed06:	2300      	movs	r3, #0
 800ed08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	straight_table2(MAZE_SECTION / 2 - MAZE_OFFSET - (BACK_TO_CENTER - BACK_TO_CENTER_FRONT), input_StraightVelocity, 0, input_StraightVelocity, input_StraightAcceleration, mode);
 800ed0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed0e:	ed97 2a02 	vldr	s4, [r7, #8]
 800ed12:	edd7 1a04 	vldr	s3, [r7, #16]
 800ed16:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 800efa4 <run_movement_suspension+0x2d4>
 800ed1a:	edd7 0a04 	vldr	s1, [r7, #16]
 800ed1e:	eeb3 0a0d 	vmov.f32	s0, #61	; 0x41e80000  29.0
 800ed22:	f7f4 ffb5 	bl	8003c90 <straight_table2>

	if(MazeRecord_mode==1){
 800ed26:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d10e      	bne.n	800ed4c <run_movement_suspension+0x7c>
		if(error_mode==0){
 800ed2e:	4b9e      	ldr	r3, [pc, #632]	; (800efa8 <run_movement_suspension+0x2d8>)
 800ed30:	781b      	ldrb	r3, [r3, #0]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d101      	bne.n	800ed3a <run_movement_suspension+0x6a>
		record_in();
 800ed36:	f7f9 f959 	bl	8007fec <record_in>
		}
		clear_Ierror();
 800ed3a:	f7f6 fab9 	bl	80052b0 <clear_Ierror>
		reset_gyro();
 800ed3e:	f7f2 ff63 	bl	8001c08 <reset_gyro>
		reset_speed();
 800ed42:	f7f2 f96f 	bl	8001024 <reset_speed>
		maze_mode = 1;
 800ed46:	4b99      	ldr	r3, [pc, #612]	; (800efac <run_movement_suspension+0x2dc>)
 800ed48:	2201      	movs	r2, #1
 800ed4a:	701a      	strb	r2, [r3, #0]
	}

	if(Dijkstra_mode==1){
 800ed4c:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	d144      	bne.n	800edde <run_movement_suspension+0x10e>
		create_DijkstraMap();
 800ed54:	f003 f91a 	bl	8011f8c <create_DijkstraMap>
		route_Dijkstra(); //ダイクストラ法の結果から最短ルートをスタックに入れる
 800ed58:	f004 fe50 	bl	80139fc <route_Dijkstra>
		create_StepCountMap_unknown();
 800ed5c:	f005 fb04 	bl	8014368 <create_StepCountMap_unknown>
		search_AroundWalkCount(&front_count, &right_count, &back_count, &left_count, x, y, *direction);
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	f107 0216 	add.w	r2, r7, #22
 800ed68:	f107 0118 	add.w	r1, r7, #24
 800ed6c:	f107 001a 	add.w	r0, r7, #26
 800ed70:	9302      	str	r3, [sp, #8]
 800ed72:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800ed76:	9301      	str	r3, [sp, #4]
 800ed78:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800ed7c:	9300      	str	r3, [sp, #0]
 800ed7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ed82:	f002 ffdb 	bl	8011d3c <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800ed86:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d001      	beq.n	800ed92 <run_movement_suspension+0xc2>
 800ed8e:	23ff      	movs	r3, #255	; 0xff
 800ed90:	837b      	strh	r3, [r7, #26]
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800ed92:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d001      	beq.n	800ed9e <run_movement_suspension+0xce>
 800ed9a:	23ff      	movs	r3, #255	; 0xff
 800ed9c:	833b      	strh	r3, [r7, #24]
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800ed9e:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d001      	beq.n	800edaa <run_movement_suspension+0xda>
 800eda6:	23ff      	movs	r3, #255	; 0xff
 800eda8:	863b      	strh	r3, [r7, #48]	; 0x30
		if (front_count == MAX_WALKCOUNT && right_count == MAX_WALKCOUNT && left_count == MAX_WALKCOUNT && back_count == MAX_WALKCOUNT) {
 800edaa:	8b7b      	ldrh	r3, [r7, #26]
 800edac:	2bff      	cmp	r3, #255	; 0xff
 800edae:	d116      	bne.n	800edde <run_movement_suspension+0x10e>
 800edb0:	8b3b      	ldrh	r3, [r7, #24]
 800edb2:	2bff      	cmp	r3, #255	; 0xff
 800edb4:	d113      	bne.n	800edde <run_movement_suspension+0x10e>
 800edb6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800edb8:	2bff      	cmp	r3, #255	; 0xff
 800edba:	d110      	bne.n	800edde <run_movement_suspension+0x10e>
 800edbc:	8afb      	ldrh	r3, [r7, #22]
 800edbe:	2bff      	cmp	r3, #255	; 0xff
 800edc0:	d10d      	bne.n	800edde <run_movement_suspension+0x10e>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode = 1;
 800edc2:	4b79      	ldr	r3, [pc, #484]	; (800efa8 <run_movement_suspension+0x2d8>)
 800edc4:	2201      	movs	r2, #1
 800edc6:	701a      	strb	r2, [r3, #0]
			g_WallControl_mode = 0;
 800edc8:	4b79      	ldr	r3, [pc, #484]	; (800efb0 <run_movement_suspension+0x2e0>)
 800edca:	2200      	movs	r2, #0
 800edcc:	701a      	strb	r2, [r3, #0]
			pl_yellow_LED_count(2 * 2 * 2 * 2 * 2);
 800edce:	2020      	movs	r0, #32
 800edd0:	f7f8 feaa 	bl	8007b28 <pl_yellow_LED_count>
			pl_DriveMotor_stop();
 800edd4:	f7f9 fc4e 	bl	8008674 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800edd8:	2000      	movs	r0, #0
 800edda:	f7f9 fbe5 	bl	80085a8 <pl_DriveMotor_standby>
			//break;
		}
	}

if(error_mode==0){
 800edde:	4b72      	ldr	r3, [pc, #456]	; (800efa8 <run_movement_suspension+0x2d8>)
 800ede0:	781b      	ldrb	r3, [r3, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	f040 80d9 	bne.w	800ef9a <run_movement_suspension+0x2ca>
	mode.WallControlMode = 0;
 800ede8:	2300      	movs	r3, #0
 800edea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	mode.WallCutMode = 0;
 800edee:	2300      	movs	r3, #0
 800edf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	mode.calMazeMode = 0;
 800edf4:	2300      	movs	r3, #0
 800edf6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (front_count <= right_count && front_count <= left_count && front_count <= back_count) {
 800edfa:	8b7a      	ldrh	r2, [r7, #26]
 800edfc:	8b3b      	ldrh	r3, [r7, #24]
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d814      	bhi.n	800ee2c <run_movement_suspension+0x15c>
 800ee02:	8b7a      	ldrh	r2, [r7, #26]
 800ee04:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d810      	bhi.n	800ee2c <run_movement_suspension+0x15c>
 800ee0a:	8b7a      	ldrh	r2, [r7, #26]
 800ee0c:	8afb      	ldrh	r3, [r7, #22]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d80c      	bhi.n	800ee2c <run_movement_suspension+0x15c>
		// 直進
		straight_table2(MAZE_SECTION / 2 + (BACK_TO_CENTER - BACK_TO_CENTER_FRONT), 0, input_StraightVelocity, input_StraightVelocity, input_StraightAcceleration, mode);
 800ee12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee14:	ed97 2a02 	vldr	s4, [r7, #8]
 800ee18:	edd7 1a04 	vldr	s3, [r7, #16]
 800ee1c:	ed97 1a04 	vldr	s2, [r7, #16]
 800ee20:	eddf 0a60 	vldr	s1, [pc, #384]	; 800efa4 <run_movement_suspension+0x2d4>
 800ee24:	ed9f 0a63 	vldr	s0, [pc, #396]	; 800efb4 <run_movement_suspension+0x2e4>
 800ee28:	f7f4 ff32 	bl	8003c90 <straight_table2>
	}
	if (right_count < front_count && right_count <= left_count && right_count <= back_count) {
 800ee2c:	8b3a      	ldrh	r2, [r7, #24]
 800ee2e:	8b7b      	ldrh	r3, [r7, #26]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d229      	bcs.n	800ee88 <run_movement_suspension+0x1b8>
 800ee34:	8b3a      	ldrh	r2, [r7, #24]
 800ee36:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d825      	bhi.n	800ee88 <run_movement_suspension+0x1b8>
 800ee3c:	8b3a      	ldrh	r2, [r7, #24]
 800ee3e:	8afb      	ldrh	r3, [r7, #22]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d821      	bhi.n	800ee88 <run_movement_suspension+0x1b8>
		// 右旋回
		turning_table2(-90, 0, 0, -input_TurningVelocity, input_TurningAcceleration);
 800ee44:	edd7 7a03 	vldr	s15, [r7, #12]
 800ee48:	eef1 7a67 	vneg.f32	s15, s15
 800ee4c:	ed97 2a01 	vldr	s4, [r7, #4]
 800ee50:	eef0 1a67 	vmov.f32	s3, s15
 800ee54:	ed9f 1a53 	vldr	s2, [pc, #332]	; 800efa4 <run_movement_suspension+0x2d4>
 800ee58:	eddf 0a52 	vldr	s1, [pc, #328]	; 800efa4 <run_movement_suspension+0x2d4>
 800ee5c:	ed9f 0a56 	vldr	s0, [pc, #344]	; 800efb8 <run_movement_suspension+0x2e8>
 800ee60:	f7f5 fc40 	bl	80046e4 <turning_table2>
		straight_table2(MAZE_SECTION / 2 + (BACK_TO_CENTER - BACK_TO_CENTER_FRONT), 0, input_StraightVelocity, input_StraightVelocity, input_StraightAcceleration, mode);
 800ee64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee66:	ed97 2a02 	vldr	s4, [r7, #8]
 800ee6a:	edd7 1a04 	vldr	s3, [r7, #16]
 800ee6e:	ed97 1a04 	vldr	s2, [r7, #16]
 800ee72:	eddf 0a4c 	vldr	s1, [pc, #304]	; 800efa4 <run_movement_suspension+0x2d4>
 800ee76:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800efb4 <run_movement_suspension+0x2e4>
 800ee7a:	f7f4 ff09 	bl	8003c90 <straight_table2>
		*direction += 1;
 800ee7e:	69fb      	ldr	r3, [r7, #28]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	1c5a      	adds	r2, r3, #1
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	601a      	str	r2, [r3, #0]
	}
	if (left_count < front_count && left_count < right_count && left_count <= back_count) {
 800ee88:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ee8a:	8b7b      	ldrh	r3, [r7, #26]
 800ee8c:	429a      	cmp	r2, r3
 800ee8e:	d225      	bcs.n	800eedc <run_movement_suspension+0x20c>
 800ee90:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ee92:	8b3b      	ldrh	r3, [r7, #24]
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d221      	bcs.n	800eedc <run_movement_suspension+0x20c>
 800ee98:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ee9a:	8afb      	ldrh	r3, [r7, #22]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d81d      	bhi.n	800eedc <run_movement_suspension+0x20c>
		// 左旋回
		turning_table2(90, 0, 0, input_TurningVelocity, input_TurningAcceleration);
 800eea0:	ed97 2a01 	vldr	s4, [r7, #4]
 800eea4:	edd7 1a03 	vldr	s3, [r7, #12]
 800eea8:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 800efa4 <run_movement_suspension+0x2d4>
 800eeac:	eddf 0a3d 	vldr	s1, [pc, #244]	; 800efa4 <run_movement_suspension+0x2d4>
 800eeb0:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800efbc <run_movement_suspension+0x2ec>
 800eeb4:	f7f5 fc16 	bl	80046e4 <turning_table2>
		straight_table2(MAZE_SECTION / 2 + (BACK_TO_CENTER - BACK_TO_CENTER_FRONT), 0, input_StraightVelocity, input_StraightVelocity, input_StraightAcceleration, mode);
 800eeb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eeba:	ed97 2a02 	vldr	s4, [r7, #8]
 800eebe:	edd7 1a04 	vldr	s3, [r7, #16]
 800eec2:	ed97 1a04 	vldr	s2, [r7, #16]
 800eec6:	eddf 0a37 	vldr	s1, [pc, #220]	; 800efa4 <run_movement_suspension+0x2d4>
 800eeca:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800efb4 <run_movement_suspension+0x2e4>
 800eece:	f7f4 fedf 	bl	8003c90 <straight_table2>
		*direction -= 1;
 800eed2:	69fb      	ldr	r3, [r7, #28]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	1e5a      	subs	r2, r3, #1
 800eed8:	69fb      	ldr	r3, [r7, #28]
 800eeda:	601a      	str	r2, [r3, #0]
	}
	if(back_count < front_count && back_count < right_count
 800eedc:	8afa      	ldrh	r2, [r7, #22]
 800eede:	8b7b      	ldrh	r3, [r7, #26]
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d25a      	bcs.n	800ef9a <run_movement_suspension+0x2ca>
 800eee4:	8afa      	ldrh	r2, [r7, #22]
 800eee6:	8b3b      	ldrh	r3, [r7, #24]
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d256      	bcs.n	800ef9a <run_movement_suspension+0x2ca>
			&& back_count < left_count){
 800eeec:	8afa      	ldrh	r2, [r7, #22]
 800eeee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d252      	bcs.n	800ef9a <run_movement_suspension+0x2ca>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800eef4:	f897 2180 	ldrb.w	r2, [r7, #384]	; 0x180
 800eef8:	f897 1184 	ldrb.w	r1, [r7, #388]	; 0x184
 800eefc:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800ef00:	4618      	mov	r0, r3
 800ef02:	edd7 0a01 	vldr	s1, [r7, #4]
 800ef06:	ed97 0a03 	vldr	s0, [r7, #12]
 800ef0a:	f7fb fce3 	bl	800a8d4 <backTurn_controlWall>
		//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
		wait_ms_NoReset(100);
 800ef0e:	2064      	movs	r0, #100	; 0x64
 800ef10:	f7f9 fe7a 	bl	8008c08 <wait_ms_NoReset>
		mode.WallControlMode=0;
 800ef14:	2300      	movs	r3, #0
 800ef16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if(front_wall){
 800ef1a:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d024      	beq.n	800ef6c <run_movement_suspension+0x29c>
		straight_table2(-BACK_TO_CENTER_FRONT, 0,0,-150,1000, mode);
 800ef22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef24:	ed9f 2a26 	vldr	s4, [pc, #152]	; 800efc0 <run_movement_suspension+0x2f0>
 800ef28:	eddf 1a26 	vldr	s3, [pc, #152]	; 800efc4 <run_movement_suspension+0x2f4>
 800ef2c:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 800efa4 <run_movement_suspension+0x2d4>
 800ef30:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800efa4 <run_movement_suspension+0x2d4>
 800ef34:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800ef38:	f7f4 feaa 	bl	8003c90 <straight_table2>
		wait_ms_NoReset(100);
 800ef3c:	2064      	movs	r0, #100	; 0x64
 800ef3e:	f7f9 fe63 	bl	8008c08 <wait_ms_NoReset>
		clear_Ierror();
 800ef42:	f7f6 f9b5 	bl	80052b0 <clear_Ierror>
		reset_speed();
 800ef46:	f7f2 f86d 	bl	8001024 <reset_speed>
		mode.WallControlMode=1;
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		straight_table2(BACK_TO_CENTER +MAZE_SECTION/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ef50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef52:	ed97 2a02 	vldr	s4, [r7, #8]
 800ef56:	edd7 1a04 	vldr	s3, [r7, #16]
 800ef5a:	ed97 1a04 	vldr	s2, [r7, #16]
 800ef5e:	eddf 0a11 	vldr	s1, [pc, #68]	; 800efa4 <run_movement_suspension+0x2d4>
 800ef62:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800efc8 <run_movement_suspension+0x2f8>
 800ef66:	f7f4 fe93 	bl	8003c90 <straight_table2>
 800ef6a:	e011      	b.n	800ef90 <run_movement_suspension+0x2c0>
		}else{
			clear_Ierror();
 800ef6c:	f7f6 f9a0 	bl	80052b0 <clear_Ierror>
			mode.WallControlMode=0;
 800ef70:	2300      	movs	r3, #0
 800ef72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			straight_table2(MAZE_SECTION/2+BACK_TO_CENTER-BACK_TO_CENTER_FRONT,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ef76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef78:	ed97 2a02 	vldr	s4, [r7, #8]
 800ef7c:	edd7 1a04 	vldr	s3, [r7, #16]
 800ef80:	ed97 1a04 	vldr	s2, [r7, #16]
 800ef84:	eddf 0a07 	vldr	s1, [pc, #28]	; 800efa4 <run_movement_suspension+0x2d4>
 800ef88:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800efb4 <run_movement_suspension+0x2e4>
 800ef8c:	f7f4 fe80 	bl	8003c90 <straight_table2>
		}
		*direction = *direction + 2;
 800ef90:	69fb      	ldr	r3, [r7, #28]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	1c9a      	adds	r2, r3, #2
 800ef96:	69fb      	ldr	r3, [r7, #28]
 800ef98:	601a      	str	r2, [r3, #0]
	}
}

}
 800ef9a:	bf00      	nop
 800ef9c:	3728      	adds	r7, #40	; 0x28
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	00000000 	.word	0x00000000
 800efa8:	20000813 	.word	0x20000813
 800efac:	20000836 	.word	0x20000836
 800efb0:	2000059c 	.word	0x2000059c
 800efb4:	42540000 	.word	0x42540000
 800efb8:	c2b40000 	.word	0xc2b40000
 800efbc:	42b40000 	.word	0x42b40000
 800efc0:	447a0000 	.word	0x447a0000
 800efc4:	c3160000 	.word	0xc3160000
 800efc8:	42830000 	.word	0x42830000

0800efcc <AdatiWayReturn>:



void AdatiWayReturn(float input_StraightVelocity, float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,int know_mode,uint8_t Dijkstra_mode) {
 800efcc:	b084      	sub	sp, #16
 800efce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efd2:	b0ea      	sub	sp, #424	; 0x1a8
 800efd4:	af5a      	add	r7, sp, #360	; 0x168
 800efd6:	ed87 0a05 	vstr	s0, [r7, #20]
 800efda:	edc7 0a04 	vstr	s1, [r7, #16]
 800efde:	ed87 1a03 	vstr	s2, [r7, #12]
 800efe2:	edc7 1a02 	vstr	s3, [r7, #8]
 800efe6:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800efea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}



	//初期化
	maze_mode = 1; //迷路探索開始フラグ
 800efee:	4bb7      	ldr	r3, [pc, #732]	; (800f2cc <AdatiWayReturn+0x300>)
 800eff0:	2201      	movs	r2, #1
 800eff2:	701a      	strb	r2, [r3, #0]
	unsigned short front_count, right_count, back_count, left_count;
	int x=0;//構造体にしたい
 800eff4:	2300      	movs	r3, #0
 800eff6:	633b      	str	r3, [r7, #48]	; 0x30
	int y=0;
 800eff8:	2300      	movs	r3, #0
 800effa:	62fb      	str	r3, [r7, #44]	; 0x2c
	int direction=1;
 800effc:	2301      	movs	r3, #1
 800effe:	62bb      	str	r3, [r7, #40]	; 0x28
	_Bool front_wall,right_wall,left_wall;
	char timer_end_mode=0;
 800f000:	2300      	movs	r3, #0
 800f002:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int kitiku_distance;
	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800f006:	2301      	movs	r3, #1
 800f008:	773b      	strb	r3, [r7, #28]
	mode.WallControlStatus=0;
 800f00a:	2300      	movs	r3, #0
 800f00c:	777b      	strb	r3, [r7, #29]
	mode.WallCutMode=0;
 800f00e:	2300      	movs	r3, #0
 800f010:	77fb      	strb	r3, [r7, #31]
	mode.calMazeMode=0;
 800f012:	2300      	movs	r3, #0
 800f014:	77bb      	strb	r3, [r7, #30]

	//モータenable
	pl_DriveMotor_standby(ON);
 800f016:	2001      	movs	r0, #1
 800f018:	f7f9 fac6 	bl	80085a8 <pl_DriveMotor_standby>
	wait_ms_NoReset(500);
 800f01c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f020:	f7f9 fdf2 	bl	8008c08 <wait_ms_NoReset>
	//初期位置のセンサー確認
	get_wallData_sensor(&front_wall,&right_wall,&left_wall);
 800f024:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800f028:	f107 0126 	add.w	r1, r7, #38	; 0x26
 800f02c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800f030:	4618      	mov	r0, r3
 800f032:	f7ff fceb 	bl	800ea0c <get_wallData_sensor>
	//初期位置での壁更新
	update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800f036:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f038:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f03a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800f03c:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 800f040:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f044:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f048:	9201      	str	r2, [sp, #4]
 800f04a:	9300      	str	r3, [sp, #0]
 800f04c:	462b      	mov	r3, r5
 800f04e:	4622      	mov	r2, r4
 800f050:	f002 f9a2 	bl	8011398 <update_wall>
	//初期位置での迷路展開
	create_StepCountMap_queue();
 800f054:	f005 fcba 	bl	80149cc <create_StepCountMap_queue>
	straight_table2(MAZE_SECTION/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800f058:	69f8      	ldr	r0, [r7, #28]
 800f05a:	ed97 2a03 	vldr	s4, [r7, #12]
 800f05e:	edd7 1a05 	vldr	s3, [r7, #20]
 800f062:	ed97 1a05 	vldr	s2, [r7, #20]
 800f066:	eddf 0a9a 	vldr	s1, [pc, #616]	; 800f2d0 <AdatiWayReturn+0x304>
 800f06a:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 800f2d4 <AdatiWayReturn+0x308>
 800f06e:	f7f4 fe0f 	bl	8003c90 <straight_table2>

	while (1) {

		update_coordinate(&x,&y,direction);
 800f072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f074:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f078:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7ff fcf3 	bl	800ea68 <update_coordinate>

		get_wallData_sensor(&front_wall,&right_wall,&left_wall);
 800f082:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800f086:	f107 0126 	add.w	r1, r7, #38	; 0x26
 800f08a:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800f08e:	4618      	mov	r0, r3
 800f090:	f7ff fcbc 	bl	800ea0c <get_wallData_sensor>

		mode.WallControlMode=1;
 800f094:	2301      	movs	r3, #1
 800f096:	773b      	strb	r3, [r7, #28]
		mode.calMazeMode=1;
 800f098:	2301      	movs	r3, #1
 800f09a:	77bb      	strb	r3, [r7, #30]
		mode.WallCutMode=0;
 800f09c:	2300      	movs	r3, #0
 800f09e:	77fb      	strb	r3, [r7, #31]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800f0a0:	69f8      	ldr	r0, [r7, #28]
 800f0a2:	ed97 2a03 	vldr	s4, [r7, #12]
 800f0a6:	edd7 1a05 	vldr	s3, [r7, #20]
 800f0aa:	ed97 1a05 	vldr	s2, [r7, #20]
 800f0ae:	edd7 0a05 	vldr	s1, [r7, #20]
 800f0b2:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800f0b6:	f7f4 fdeb 	bl	8003c90 <straight_table2>
		//走行中計算
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800f0ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f0be:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800f0c0:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 800f0c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f0c8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f0cc:	9201      	str	r2, [sp, #4]
 800f0ce:	9300      	str	r3, [sp, #0]
 800f0d0:	462b      	mov	r3, r5
 800f0d2:	4622      	mov	r2, r4
 800f0d4:	f002 f960 	bl	8011398 <update_wall>
		create_StepCountMap_queue();
 800f0d8:	f005 fc78 	bl	80149cc <create_StepCountMap_queue>
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800f0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f0e2:	f107 0636 	add.w	r6, r7, #54	; 0x36
 800f0e6:	f107 0538 	add.w	r5, r7, #56	; 0x38
 800f0ea:	f107 043a 	add.w	r4, r7, #58	; 0x3a
 800f0ee:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800f0f2:	9102      	str	r1, [sp, #8]
 800f0f4:	9201      	str	r2, [sp, #4]
 800f0f6:	9300      	str	r3, [sp, #0]
 800f0f8:	4633      	mov	r3, r6
 800f0fa:	462a      	mov	r2, r5
 800f0fc:	4621      	mov	r1, r4
 800f0fe:	f002 fe1d 	bl	8011d3c <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800f102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f106:	2b00      	cmp	r3, #0
 800f108:	d001      	beq.n	800f10e <AdatiWayReturn+0x142>
 800f10a:	23ff      	movs	r3, #255	; 0xff
 800f10c:	87bb      	strh	r3, [r7, #60]	; 0x3c
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800f10e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f112:	2b00      	cmp	r3, #0
 800f114:	d001      	beq.n	800f11a <AdatiWayReturn+0x14e>
 800f116:	23ff      	movs	r3, #255	; 0xff
 800f118:	877b      	strh	r3, [r7, #58]	; 0x3a
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800f11a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d001      	beq.n	800f126 <AdatiWayReturn+0x15a>
 800f122:	23ff      	movs	r3, #255	; 0xff
 800f124:	86fb      	strh	r3, [r7, #54]	; 0x36
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800f126:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f128:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800f12a:	6abd      	ldr	r5, [r7, #40]	; 0x28
 800f12c:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
 800f12e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f130:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f132:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800f134:	9102      	str	r1, [sp, #8]
 800f136:	9201      	str	r2, [sp, #4]
 800f138:	9300      	str	r3, [sp, #0]
 800f13a:	4633      	mov	r3, r6
 800f13c:	462a      	mov	r2, r5
 800f13e:	4621      	mov	r1, r4
 800f140:	f001 fdd6 	bl	8010cf0 <decision_kitiku>

		mode.WallCutMode=1;
 800f144:	2301      	movs	r3, #1
 800f146:	77fb      	strb	r3, [r7, #31]
		End_straight(MAZE_OFFSET, mode,right_wall,left_wall);
 800f148:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f14c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f150:	4619      	mov	r1, r3
 800f152:	69f8      	ldr	r0, [r7, #28]
 800f154:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800f158:	f7f5 fa58 	bl	800460c <End_straight>


		//異常終了
		if (x == 0 && y == 0) {
 800f15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d10b      	bne.n	800f17a <AdatiWayReturn+0x1ae>
 800f162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f164:	2b00      	cmp	r3, #0
 800f166:	d108      	bne.n	800f17a <AdatiWayReturn+0x1ae>
			error_mode=1;
 800f168:	4b5b      	ldr	r3, [pc, #364]	; (800f2d8 <AdatiWayReturn+0x30c>)
 800f16a:	2201      	movs	r2, #1
 800f16c:	701a      	strb	r2, [r3, #0]
			pl_DriveMotor_stop();
 800f16e:	f7f9 fa81 	bl	8008674 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800f172:	2000      	movs	r0, #0
 800f174:	f7f9 fa18 	bl	80085a8 <pl_DriveMotor_standby>
			break;
 800f178:	e10b      	b.n	800f392 <AdatiWayReturn+0x3c6>
		}
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800f17a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f17c:	2bff      	cmp	r3, #255	; 0xff
 800f17e:	d111      	bne.n	800f1a4 <AdatiWayReturn+0x1d8>
 800f180:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f182:	2bff      	cmp	r3, #255	; 0xff
 800f184:	d10e      	bne.n	800f1a4 <AdatiWayReturn+0x1d8>
 800f186:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f188:	2bff      	cmp	r3, #255	; 0xff
 800f18a:	d10b      	bne.n	800f1a4 <AdatiWayReturn+0x1d8>
 800f18c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f18e:	2bff      	cmp	r3, #255	; 0xff
 800f190:	d108      	bne.n	800f1a4 <AdatiWayReturn+0x1d8>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 800f192:	4b51      	ldr	r3, [pc, #324]	; (800f2d8 <AdatiWayReturn+0x30c>)
 800f194:	2201      	movs	r2, #1
 800f196:	701a      	strb	r2, [r3, #0]
			pl_DriveMotor_stop();
 800f198:	f7f9 fa6c 	bl	8008674 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800f19c:	2000      	movs	r0, #0
 800f19e:	f7f9 fa03 	bl	80085a8 <pl_DriveMotor_standby>
			break;
 800f1a2:	e0f6      	b.n	800f392 <AdatiWayReturn+0x3c6>
		}
		//　時間制限
		if (g_timCount_sec>240){
 800f1a4:	4b4d      	ldr	r3, [pc, #308]	; (800f2dc <AdatiWayReturn+0x310>)
 800f1a6:	edd3 7a00 	vldr	s15, [r3]
 800f1aa:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800f2e0 <AdatiWayReturn+0x314>
 800f1ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f1b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1b6:	dd08      	ble.n	800f1ca <AdatiWayReturn+0x1fe>
			timer_end_mode=1;
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			pl_DriveMotor_stop();
 800f1be:	f7f9 fa59 	bl	8008674 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800f1c2:	2000      	movs	r0, #0
 800f1c4:	f7f9 f9f0 	bl	80085a8 <pl_DriveMotor_standby>
			break;
 800f1c8:	e0e3      	b.n	800f392 <AdatiWayReturn+0x3c6>
		}
		//正常終了
		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800f1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1cc:	2b02      	cmp	r3, #2
 800f1ce:	d002      	beq.n	800f1d6 <AdatiWayReturn+0x20a>
 800f1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d2:	2b03      	cmp	r3, #3
 800f1d4:	d146      	bne.n	800f264 <AdatiWayReturn+0x298>
 800f1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d002      	beq.n	800f1e2 <AdatiWayReturn+0x216>
 800f1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1de:	2b01      	cmp	r3, #1
 800f1e0:	d140      	bne.n	800f264 <AdatiWayReturn+0x298>
			run_movement_suspension(&direction,front_count,right_count,back_count,left_count,
 800f1e2:	f8b7 803c 	ldrh.w	r8, [r7, #60]	; 0x3c
 800f1e6:	f8b7 903a 	ldrh.w	r9, [r7, #58]	; 0x3a
 800f1ea:	f8b7 a038 	ldrh.w	sl, [r7, #56]	; 0x38
 800f1ee:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 800f1f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1f4:	607b      	str	r3, [r7, #4]
 800f1f6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f1fa:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800f1fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f200:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f202:	f107 0628 	add.w	r6, r7, #40	; 0x28
 800f206:	2301      	movs	r3, #1
 800f208:	9359      	str	r3, [sp, #356]	; 0x164
 800f20a:	2301      	movs	r3, #1
 800f20c:	9358      	str	r3, [sp, #352]	; 0x160
 800f20e:	9557      	str	r5, [sp, #348]	; 0x15c
 800f210:	9056      	str	r0, [sp, #344]	; 0x158
 800f212:	9155      	str	r1, [sp, #340]	; 0x154
 800f214:	9254      	str	r2, [sp, #336]	; 0x150
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	9353      	str	r3, [sp, #332]	; 0x14c
 800f21a:	ab01      	add	r3, sp, #4
 800f21c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f220:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800f224:	4618      	mov	r0, r3
 800f226:	f011 fd37 	bl	8020c98 <memcpy>
 800f22a:	9400      	str	r4, [sp, #0]
 800f22c:	edd7 1a02 	vldr	s3, [r7, #8]
 800f230:	ed97 1a03 	vldr	s2, [r7, #12]
 800f234:	edd7 0a04 	vldr	s1, [r7, #16]
 800f238:	ed97 0a05 	vldr	s0, [r7, #20]
 800f23c:	4653      	mov	r3, sl
 800f23e:	464a      	mov	r2, r9
 800f240:	4641      	mov	r1, r8
 800f242:	4630      	mov	r0, r6
 800f244:	f7ff fd44 	bl	800ecd0 <run_movement_suspension>
					input_StraightVelocity, input_TurningVelocity, input_StraightAcceleration, input_TurningAcceleration, howspeed,
					front_wall, right_wall, left_wall, x, y, 1, 1);
			if (direction >= 5) {direction = direction-4;}
 800f248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24a:	2b04      	cmp	r3, #4
 800f24c:	dd02      	ble.n	800f254 <AdatiWayReturn+0x288>
 800f24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f250:	3b04      	subs	r3, #4
 800f252:	62bb      	str	r3, [r7, #40]	; 0x28
			if (direction <= 0) {direction = direction+4;}
 800f254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f256:	2b00      	cmp	r3, #0
 800f258:	f300 8098 	bgt.w	800f38c <AdatiWayReturn+0x3c0>
 800f25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f25e:	3304      	adds	r3, #4
 800f260:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 800f262:	e093      	b.n	800f38c <AdatiWayReturn+0x3c0>
		}

		if(know_mode==0){kitikukan = 0;}
 800f264:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d102      	bne.n	800f272 <AdatiWayReturn+0x2a6>
 800f26c:	4b1d      	ldr	r3, [pc, #116]	; (800f2e4 <AdatiWayReturn+0x318>)
 800f26e:	2200      	movs	r2, #0
 800f270:	601a      	str	r2, [r3, #0]
		if (kitikukan == OFF) {
 800f272:	4b1c      	ldr	r3, [pc, #112]	; (800f2e4 <AdatiWayReturn+0x318>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d13a      	bne.n	800f2f0 <AdatiWayReturn+0x324>

			run_movement_continuity(&direction,front_count,right_count,back_count,left_count,
 800f27a:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
 800f27c:	f8b7 803a 	ldrh.w	r8, [r7, #58]	; 0x3a
 800f280:	f8b7 9038 	ldrh.w	r9, [r7, #56]	; 0x38
 800f284:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 800f286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f28a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f28e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800f292:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800f296:	9155      	str	r1, [sp, #340]	; 0x154
 800f298:	9254      	str	r2, [sp, #336]	; 0x150
 800f29a:	9353      	str	r3, [sp, #332]	; 0x14c
 800f29c:	ab01      	add	r3, sp, #4
 800f29e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f2a2:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f011 fcf6 	bl	8020c98 <memcpy>
 800f2ac:	9400      	str	r4, [sp, #0]
 800f2ae:	edd7 1a02 	vldr	s3, [r7, #8]
 800f2b2:	ed97 1a03 	vldr	s2, [r7, #12]
 800f2b6:	edd7 0a04 	vldr	s1, [r7, #16]
 800f2ba:	ed97 0a05 	vldr	s0, [r7, #20]
 800f2be:	464b      	mov	r3, r9
 800f2c0:	4642      	mov	r2, r8
 800f2c2:	4631      	mov	r1, r6
 800f2c4:	4628      	mov	r0, r5
 800f2c6:	f7ff fc03 	bl	800ead0 <run_movement_continuity>
 800f2ca:	e04e      	b.n	800f36a <AdatiWayReturn+0x39e>
 800f2cc:	20000836 	.word	0x20000836
 800f2d0:	00000000 	.word	0x00000000
 800f2d4:	42830000 	.word	0x42830000
 800f2d8:	20000813 	.word	0x20000813
 800f2dc:	20000738 	.word	0x20000738
 800f2e0:	43700000 	.word	0x43700000
 800f2e4:	20000838 	.word	0x20000838
 800f2e8:	42140000 	.word	0x42140000
 800f2ec:	44610000 	.word	0x44610000
					input_StraightVelocity, input_TurningVelocity, input_StraightAcceleration, input_TurningAcceleration, howspeed,
					front_wall, right_wall, left_wall);

		} else {
			mode.WallControlMode=1;
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	773b      	strb	r3, [r7, #28]
			mode.calMazeMode=1;
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	77bb      	strb	r3, [r7, #30]
			mode.WallCutMode=0;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	77fb      	strb	r3, [r7, #31]
			straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800f2fc:	69f8      	ldr	r0, [r7, #28]
 800f2fe:	ed97 2a03 	vldr	s4, [r7, #12]
 800f302:	edd7 1a05 	vldr	s3, [r7, #20]
 800f306:	ed97 1a05 	vldr	s2, [r7, #20]
 800f30a:	edd7 0a05 	vldr	s1, [r7, #20]
 800f30e:	ed1f 0a0a 	vldr	s0, [pc, #-40]	; 800f2e8 <AdatiWayReturn+0x31c>
 800f312:	f7f4 fcbd 	bl	8003c90 <straight_table2>
			compress_kitiku(&x,&y,&direction,&kitiku_distance);
 800f316:	f107 0320 	add.w	r3, r7, #32
 800f31a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f31e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f322:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f326:	f001 fd55 	bl	8010dd4 <compress_kitiku>
			End_straight(MAZE_SECTION/2-MAZE_OFFSET,mode,1,1);
 800f32a:	2201      	movs	r2, #1
 800f32c:	2101      	movs	r1, #1
 800f32e:	69f8      	ldr	r0, [r7, #28]
 800f330:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 800f2e8 <AdatiWayReturn+0x31c>
 800f334:	f7f5 f96a 	bl	800460c <End_straight>
			mode.calMazeMode=0;
 800f338:	2300      	movs	r3, #0
 800f33a:	77bb      	strb	r3, [r7, #30]
			straight_table2((MAZE_SECTION/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,900,input_StraightAcceleration, mode);
 800f33c:	6a3a      	ldr	r2, [r7, #32]
 800f33e:	4613      	mov	r3, r2
 800f340:	005b      	lsls	r3, r3, #1
 800f342:	4413      	add	r3, r2
 800f344:	011a      	lsls	r2, r3, #4
 800f346:	1ad3      	subs	r3, r2, r3
 800f348:	ee07 3a90 	vmov	s15, r3
 800f34c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f350:	69f8      	ldr	r0, [r7, #28]
 800f352:	ed97 2a03 	vldr	s4, [r7, #12]
 800f356:	ed5f 1a1b 	vldr	s3, [pc, #-108]	; 800f2ec <AdatiWayReturn+0x320>
 800f35a:	ed97 1a05 	vldr	s2, [r7, #20]
 800f35e:	edd7 0a05 	vldr	s1, [r7, #20]
 800f362:	eeb0 0a67 	vmov.f32	s0, s15
 800f366:	f7f4 fc93 	bl	8003c90 <straight_table2>
		}

		if (direction >= 5) {direction = direction-4;}
 800f36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36c:	2b04      	cmp	r3, #4
 800f36e:	dd02      	ble.n	800f376 <AdatiWayReturn+0x3aa>
 800f370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f372:	3b04      	subs	r3, #4
 800f374:	62bb      	str	r3, [r7, #40]	; 0x28
		if (direction <= 0) {direction = direction+4;}
 800f376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f378:	2b00      	cmp	r3, #0
 800f37a:	dc02      	bgt.n	800f382 <AdatiWayReturn+0x3b6>
 800f37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f37e:	3304      	adds	r3, #4
 800f380:	62bb      	str	r3, [r7, #40]	; 0x28

		if(error_mode==1){break;}
 800f382:	4ba1      	ldr	r3, [pc, #644]	; (800f608 <AdatiWayReturn+0x63c>)
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	2b01      	cmp	r3, #1
 800f388:	d002      	beq.n	800f390 <AdatiWayReturn+0x3c4>
		update_coordinate(&x,&y,direction);
 800f38a:	e672      	b.n	800f072 <AdatiWayReturn+0xa6>
			break;
 800f38c:	bf00      	nop
 800f38e:	e000      	b.n	800f392 <AdatiWayReturn+0x3c6>
		if(error_mode==1){break;}
 800f390:	bf00      	nop




	while (1) {
		update_coordinate(&x,&y,direction);
 800f392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f394:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f398:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7ff fb63 	bl	800ea68 <update_coordinate>

		get_wallData_sensor(&front_wall,&right_wall,&left_wall);
 800f3a2:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800f3a6:	f107 0126 	add.w	r1, r7, #38	; 0x26
 800f3aa:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7ff fb2c 	bl	800ea0c <get_wallData_sensor>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800f3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b6:	2b02      	cmp	r3, #2
 800f3b8:	d002      	beq.n	800f3c0 <AdatiWayReturn+0x3f4>
 800f3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3bc:	2b03      	cmp	r3, #3
 800f3be:	d109      	bne.n	800f3d4 <AdatiWayReturn+0x408>
 800f3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d002      	beq.n	800f3cc <AdatiWayReturn+0x400>
 800f3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	d103      	bne.n	800f3d4 <AdatiWayReturn+0x408>
			noGoalPillarMode=1;
 800f3cc:	4b8f      	ldr	r3, [pc, #572]	; (800f60c <AdatiWayReturn+0x640>)
 800f3ce:	2201      	movs	r2, #1
 800f3d0:	701a      	strb	r2, [r3, #0]
 800f3d2:	e002      	b.n	800f3da <AdatiWayReturn+0x40e>
		}else{
			noGoalPillarMode=0;
 800f3d4:	4b8d      	ldr	r3, [pc, #564]	; (800f60c <AdatiWayReturn+0x640>)
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	701a      	strb	r2, [r3, #0]
		}

		mode.WallControlMode=1;
 800f3da:	2301      	movs	r3, #1
 800f3dc:	773b      	strb	r3, [r7, #28]
		mode.calMazeMode=1;
 800f3de:	2301      	movs	r3, #1
 800f3e0:	77bb      	strb	r3, [r7, #30]
		mode.WallCutMode=0;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	77fb      	strb	r3, [r7, #31]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800f3e6:	69f8      	ldr	r0, [r7, #28]
 800f3e8:	ed97 2a03 	vldr	s4, [r7, #12]
 800f3ec:	edd7 1a05 	vldr	s3, [r7, #20]
 800f3f0:	ed97 1a05 	vldr	s2, [r7, #20]
 800f3f4:	edd7 0a05 	vldr	s1, [r7, #20]
 800f3f8:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800f3fc:	f7f4 fc48 	bl	8003c90 <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800f400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f404:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800f406:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 800f40a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f40e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f412:	9201      	str	r2, [sp, #4]
 800f414:	9300      	str	r3, [sp, #0]
 800f416:	462b      	mov	r3, r5
 800f418:	4622      	mov	r2, r4
 800f41a:	f001 ffbd 	bl	8011398 <update_wall>
		if(Dijkstra_mode==1){
 800f41e:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 800f422:	2b01      	cmp	r3, #1
 800f424:	d104      	bne.n	800f430 <AdatiWayReturn+0x464>
			route_Dijkstra();//ダイクストラ法の結果から最短ルートをスタックに入れる
 800f426:	f004 fae9 	bl	80139fc <route_Dijkstra>
			create_StepCountMap_unknown();
 800f42a:	f004 ff9d 	bl	8014368 <create_StepCountMap_unknown>
 800f42e:	e001      	b.n	800f434 <AdatiWayReturn+0x468>
		}else{
			create_StepCountMapBack_queue();
 800f430:	f005 fdb2 	bl	8014f98 <create_StepCountMapBack_queue>
		}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800f434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f43a:	f107 0636 	add.w	r6, r7, #54	; 0x36
 800f43e:	f107 0538 	add.w	r5, r7, #56	; 0x38
 800f442:	f107 043a 	add.w	r4, r7, #58	; 0x3a
 800f446:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800f44a:	9102      	str	r1, [sp, #8]
 800f44c:	9201      	str	r2, [sp, #4]
 800f44e:	9300      	str	r3, [sp, #0]
 800f450:	4633      	mov	r3, r6
 800f452:	462a      	mov	r2, r5
 800f454:	4621      	mov	r1, r4
 800f456:	f002 fc71 	bl	8011d3c <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800f45a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d001      	beq.n	800f466 <AdatiWayReturn+0x49a>
 800f462:	23ff      	movs	r3, #255	; 0xff
 800f464:	87bb      	strh	r3, [r7, #60]	; 0x3c
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800f466:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d001      	beq.n	800f472 <AdatiWayReturn+0x4a6>
 800f46e:	23ff      	movs	r3, #255	; 0xff
 800f470:	877b      	strh	r3, [r7, #58]	; 0x3a
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800f472:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f476:	2b00      	cmp	r3, #0
 800f478:	d001      	beq.n	800f47e <AdatiWayReturn+0x4b2>
 800f47a:	23ff      	movs	r3, #255	; 0xff
 800f47c:	86fb      	strh	r3, [r7, #54]	; 0x36
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800f47e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f480:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800f482:	6abd      	ldr	r5, [r7, #40]	; 0x28
 800f484:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
 800f486:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f488:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f48a:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800f48c:	9102      	str	r1, [sp, #8]
 800f48e:	9201      	str	r2, [sp, #4]
 800f490:	9300      	str	r3, [sp, #0]
 800f492:	4633      	mov	r3, r6
 800f494:	462a      	mov	r2, r5
 800f496:	4621      	mov	r1, r4
 800f498:	f001 fc2a 	bl	8010cf0 <decision_kitiku>
		mode.WallCutMode=1;
 800f49c:	2301      	movs	r3, #1
 800f49e:	77fb      	strb	r3, [r7, #31]
		End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800f4a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f4a4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f4a8:	4619      	mov	r1, r3
 800f4aa:	69f8      	ldr	r0, [r7, #28]
 800f4ac:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800f4b0:	f7f5 f8ac 	bl	800460c <End_straight>

		//異常終了
        if(back_count < front_count && back_count < right_count && back_count < left_count){
 800f4b4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f4b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d20a      	bcs.n	800f4d2 <AdatiWayReturn+0x506>
 800f4bc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f4be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d206      	bcs.n	800f4d2 <AdatiWayReturn+0x506>
 800f4c4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f4c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d202      	bcs.n	800f4d2 <AdatiWayReturn+0x506>
            Dijkstra_maker_flag=1;
 800f4cc:	4b50      	ldr	r3, [pc, #320]	; (800f610 <AdatiWayReturn+0x644>)
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	701a      	strb	r2, [r3, #0]
        }
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800f4d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f4d4:	2bff      	cmp	r3, #255	; 0xff
 800f4d6:	d10b      	bne.n	800f4f0 <AdatiWayReturn+0x524>
 800f4d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f4da:	2bff      	cmp	r3, #255	; 0xff
 800f4dc:	d108      	bne.n	800f4f0 <AdatiWayReturn+0x524>
 800f4de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4e0:	2bff      	cmp	r3, #255	; 0xff
 800f4e2:	d105      	bne.n	800f4f0 <AdatiWayReturn+0x524>
 800f4e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f4e6:	2bff      	cmp	r3, #255	; 0xff
 800f4e8:	d102      	bne.n	800f4f0 <AdatiWayReturn+0x524>
			// 迷路破損のため、ダイクストラ法更新
			Dijkstra_maker_flag=1;
 800f4ea:	4b49      	ldr	r3, [pc, #292]	; (800f610 <AdatiWayReturn+0x644>)
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	701a      	strb	r2, [r3, #0]
		}
		if (x<0 || y<0 || x>15 || y>15){
 800f4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	db08      	blt.n	800f508 <AdatiWayReturn+0x53c>
 800f4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	db05      	blt.n	800f508 <AdatiWayReturn+0x53c>
 800f4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4fe:	2b0f      	cmp	r3, #15
 800f500:	dc02      	bgt.n	800f508 <AdatiWayReturn+0x53c>
 800f502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f504:	2b0f      	cmp	r3, #15
 800f506:	dd0e      	ble.n	800f526 <AdatiWayReturn+0x55a>
			// 自己位置の破損
			error_mode=1;
 800f508:	4b3f      	ldr	r3, [pc, #252]	; (800f608 <AdatiWayReturn+0x63c>)
 800f50a:	2201      	movs	r2, #1
 800f50c:	701a      	strb	r2, [r3, #0]
			g_WallControl_mode=0;
 800f50e:	4b41      	ldr	r3, [pc, #260]	; (800f614 <AdatiWayReturn+0x648>)
 800f510:	2200      	movs	r2, #0
 800f512:	701a      	strb	r2, [r3, #0]
			pl_yellow_LED_count(2*2*2*2);
 800f514:	2010      	movs	r0, #16
 800f516:	f7f8 fb07 	bl	8007b28 <pl_yellow_LED_count>
			pl_DriveMotor_stop();
 800f51a:	f7f9 f8ab 	bl	8008674 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800f51e:	2000      	movs	r0, #0
 800f520:	f7f9 f842 	bl	80085a8 <pl_DriveMotor_standby>
			break;
 800f524:	e105      	b.n	800f732 <AdatiWayReturn+0x766>
		}
		if (g_timCount_sec>240){
 800f526:	4b3c      	ldr	r3, [pc, #240]	; (800f618 <AdatiWayReturn+0x64c>)
 800f528:	edd3 7a00 	vldr	s15, [r3]
 800f52c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800f61c <AdatiWayReturn+0x650>
 800f530:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f538:	dd08      	ble.n	800f54c <AdatiWayReturn+0x580>
			// 秒数エンド
			timer_end_mode=1;
 800f53a:	2301      	movs	r3, #1
 800f53c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			pl_DriveMotor_stop();
 800f540:	f7f9 f898 	bl	8008674 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800f544:	2000      	movs	r0, #0
 800f546:	f7f9 f82f 	bl	80085a8 <pl_DriveMotor_standby>
			break;
 800f54a:	e0f2      	b.n	800f732 <AdatiWayReturn+0x766>
		}
		//正常終了
		if(x == 0 && y == 0) {
 800f54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d122      	bne.n	800f598 <AdatiWayReturn+0x5cc>
 800f552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f554:	2b00      	cmp	r3, #0
 800f556:	d11f      	bne.n	800f598 <AdatiWayReturn+0x5cc>
			mode.WallControlMode=0;
 800f558:	2300      	movs	r3, #0
 800f55a:	773b      	strb	r3, [r7, #28]
			mode.calMazeMode=0;
 800f55c:	2300      	movs	r3, #0
 800f55e:	77bb      	strb	r3, [r7, #30]
			mode.WallCutMode=0;
 800f560:	2300      	movs	r3, #0
 800f562:	77fb      	strb	r3, [r7, #31]
			straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800f564:	69f8      	ldr	r0, [r7, #28]
 800f566:	ed97 2a03 	vldr	s4, [r7, #12]
 800f56a:	edd7 1a05 	vldr	s3, [r7, #20]
 800f56e:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 800f620 <AdatiWayReturn+0x654>
 800f572:	edd7 0a05 	vldr	s1, [r7, #20]
 800f576:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800f624 <AdatiWayReturn+0x658>
 800f57a:	f7f4 fb89 	bl	8003c90 <straight_table2>
			turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800f57e:	ed97 2a02 	vldr	s4, [r7, #8]
 800f582:	edd7 1a04 	vldr	s3, [r7, #16]
 800f586:	ed9f 1a26 	vldr	s2, [pc, #152]	; 800f620 <AdatiWayReturn+0x654>
 800f58a:	eddf 0a25 	vldr	s1, [pc, #148]	; 800f620 <AdatiWayReturn+0x654>
 800f58e:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800f628 <AdatiWayReturn+0x65c>
 800f592:	f7f5 f8a7 	bl	80046e4 <turning_table2>
			break;
 800f596:	e0cc      	b.n	800f732 <AdatiWayReturn+0x766>
		}


		if(Dijkstra_maker_flag==1){
 800f598:	4b1d      	ldr	r3, [pc, #116]	; (800f610 <AdatiWayReturn+0x644>)
 800f59a:	781b      	ldrb	r3, [r3, #0]
 800f59c:	2b01      	cmp	r3, #1
 800f59e:	d145      	bne.n	800f62c <AdatiWayReturn+0x660>
			run_movement_suspension(&direction,front_count,right_count,back_count,left_count,
 800f5a0:	f8b7 803c 	ldrh.w	r8, [r7, #60]	; 0x3c
 800f5a4:	f8b7 903a 	ldrh.w	r9, [r7, #58]	; 0x3a
 800f5a8:	f8b7 a038 	ldrh.w	sl, [r7, #56]	; 0x38
 800f5ac:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 800f5ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5b2:	607b      	str	r3, [r7, #4]
 800f5b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f5b8:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800f5bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5be:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f5c0:	f107 0628 	add.w	r6, r7, #40	; 0x28
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	9359      	str	r3, [sp, #356]	; 0x164
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	9358      	str	r3, [sp, #352]	; 0x160
 800f5cc:	9557      	str	r5, [sp, #348]	; 0x15c
 800f5ce:	9056      	str	r0, [sp, #344]	; 0x158
 800f5d0:	9155      	str	r1, [sp, #340]	; 0x154
 800f5d2:	9254      	str	r2, [sp, #336]	; 0x150
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	9353      	str	r3, [sp, #332]	; 0x14c
 800f5d8:	ab01      	add	r3, sp, #4
 800f5da:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f5de:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f011 fb58 	bl	8020c98 <memcpy>
 800f5e8:	9400      	str	r4, [sp, #0]
 800f5ea:	edd7 1a02 	vldr	s3, [r7, #8]
 800f5ee:	ed97 1a03 	vldr	s2, [r7, #12]
 800f5f2:	edd7 0a04 	vldr	s1, [r7, #16]
 800f5f6:	ed97 0a05 	vldr	s0, [r7, #20]
 800f5fa:	4653      	mov	r3, sl
 800f5fc:	464a      	mov	r2, r9
 800f5fe:	4641      	mov	r1, r8
 800f600:	4630      	mov	r0, r6
 800f602:	f7ff fb65 	bl	800ecd0 <run_movement_suspension>
 800f606:	e082      	b.n	800f70e <AdatiWayReturn+0x742>
 800f608:	20000813 	.word	0x20000813
 800f60c:	20000535 	.word	0x20000535
 800f610:	200011f0 	.word	0x200011f0
 800f614:	2000059c 	.word	0x2000059c
 800f618:	20000738 	.word	0x20000738
 800f61c:	43700000 	.word	0x43700000
 800f620:	00000000 	.word	0x00000000
 800f624:	42140000 	.word	0x42140000
 800f628:	43340000 	.word	0x43340000
					input_StraightVelocity, input_TurningVelocity, input_StraightAcceleration, input_TurningAcceleration, howspeed,
					front_wall, right_wall, left_wall, x, y, 0, 1);
		}else{

			if(know_mode==0){kitikukan = 0;}
 800f62c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800f630:	2b00      	cmp	r3, #0
 800f632:	d102      	bne.n	800f63a <AdatiWayReturn+0x66e>
 800f634:	4b54      	ldr	r3, [pc, #336]	; (800f788 <AdatiWayReturn+0x7bc>)
 800f636:	2200      	movs	r2, #0
 800f638:	601a      	str	r2, [r3, #0]
			if (kitikukan == OFF) {
 800f63a:	4b53      	ldr	r3, [pc, #332]	; (800f788 <AdatiWayReturn+0x7bc>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d128      	bne.n	800f694 <AdatiWayReturn+0x6c8>
				run_movement_continuity(&direction,front_count,right_count,back_count,left_count,
 800f642:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
 800f644:	f8b7 803a 	ldrh.w	r8, [r7, #58]	; 0x3a
 800f648:	f8b7 9038 	ldrh.w	r9, [r7, #56]	; 0x38
 800f64c:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 800f64e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f652:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f656:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800f65a:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800f65e:	9155      	str	r1, [sp, #340]	; 0x154
 800f660:	9254      	str	r2, [sp, #336]	; 0x150
 800f662:	9353      	str	r3, [sp, #332]	; 0x14c
 800f664:	ab01      	add	r3, sp, #4
 800f666:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f66a:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800f66e:	4618      	mov	r0, r3
 800f670:	f011 fb12 	bl	8020c98 <memcpy>
 800f674:	9400      	str	r4, [sp, #0]
 800f676:	edd7 1a02 	vldr	s3, [r7, #8]
 800f67a:	ed97 1a03 	vldr	s2, [r7, #12]
 800f67e:	edd7 0a04 	vldr	s1, [r7, #16]
 800f682:	ed97 0a05 	vldr	s0, [r7, #20]
 800f686:	464b      	mov	r3, r9
 800f688:	4642      	mov	r2, r8
 800f68a:	4631      	mov	r1, r6
 800f68c:	4628      	mov	r0, r5
 800f68e:	f7ff fa1f 	bl	800ead0 <run_movement_continuity>
 800f692:	e03c      	b.n	800f70e <AdatiWayReturn+0x742>
						input_StraightVelocity, input_TurningVelocity, input_StraightAcceleration, input_TurningAcceleration, howspeed,
						front_wall, right_wall, left_wall);
			} else {
				mode.WallControlMode=1;
 800f694:	2301      	movs	r3, #1
 800f696:	773b      	strb	r3, [r7, #28]
				mode.calMazeMode=1;
 800f698:	2301      	movs	r3, #1
 800f69a:	77bb      	strb	r3, [r7, #30]
				mode.WallCutMode=0;
 800f69c:	2300      	movs	r3, #0
 800f69e:	77fb      	strb	r3, [r7, #31]
				straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800f6a0:	69f8      	ldr	r0, [r7, #28]
 800f6a2:	ed97 2a03 	vldr	s4, [r7, #12]
 800f6a6:	edd7 1a05 	vldr	s3, [r7, #20]
 800f6aa:	ed97 1a05 	vldr	s2, [r7, #20]
 800f6ae:	edd7 0a05 	vldr	s1, [r7, #20]
 800f6b2:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800f78c <AdatiWayReturn+0x7c0>
 800f6b6:	f7f4 faeb 	bl	8003c90 <straight_table2>
				compress_kitiku(&x,&y,&direction,&kitiku_distance);
 800f6ba:	f107 0320 	add.w	r3, r7, #32
 800f6be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f6c2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f6c6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f6ca:	f001 fb83 	bl	8010dd4 <compress_kitiku>
				End_straight(MAZE_SECTION/2-MAZE_OFFSET,mode,1,1);
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	2101      	movs	r1, #1
 800f6d2:	69f8      	ldr	r0, [r7, #28]
 800f6d4:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800f78c <AdatiWayReturn+0x7c0>
 800f6d8:	f7f4 ff98 	bl	800460c <End_straight>
				mode.calMazeMode=0;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	77bb      	strb	r3, [r7, #30]
				straight_table2((MAZE_SECTION/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,1000,input_StraightAcceleration, mode);
 800f6e0:	6a3a      	ldr	r2, [r7, #32]
 800f6e2:	4613      	mov	r3, r2
 800f6e4:	005b      	lsls	r3, r3, #1
 800f6e6:	4413      	add	r3, r2
 800f6e8:	011a      	lsls	r2, r3, #4
 800f6ea:	1ad3      	subs	r3, r2, r3
 800f6ec:	ee07 3a90 	vmov	s15, r3
 800f6f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f6f4:	69f8      	ldr	r0, [r7, #28]
 800f6f6:	ed97 2a03 	vldr	s4, [r7, #12]
 800f6fa:	eddf 1a25 	vldr	s3, [pc, #148]	; 800f790 <AdatiWayReturn+0x7c4>
 800f6fe:	ed97 1a05 	vldr	s2, [r7, #20]
 800f702:	edd7 0a05 	vldr	s1, [r7, #20]
 800f706:	eeb0 0a67 	vmov.f32	s0, s15
 800f70a:	f7f4 fac1 	bl	8003c90 <straight_table2>
			}

		}

		if (direction >= 5) {direction = direction-4;}
 800f70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f710:	2b04      	cmp	r3, #4
 800f712:	dd02      	ble.n	800f71a <AdatiWayReturn+0x74e>
 800f714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f716:	3b04      	subs	r3, #4
 800f718:	62bb      	str	r3, [r7, #40]	; 0x28
		if (direction <= 0) {direction = direction+4;}
 800f71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	dc02      	bgt.n	800f726 <AdatiWayReturn+0x75a>
 800f720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f722:	3304      	adds	r3, #4
 800f724:	62bb      	str	r3, [r7, #40]	; 0x28

		if(error_mode==1){break;}
 800f726:	4b1b      	ldr	r3, [pc, #108]	; (800f794 <AdatiWayReturn+0x7c8>)
 800f728:	781b      	ldrb	r3, [r3, #0]
 800f72a:	2b01      	cmp	r3, #1
 800f72c:	d000      	beq.n	800f730 <AdatiWayReturn+0x764>
		update_coordinate(&x,&y,direction);
 800f72e:	e630      	b.n	800f392 <AdatiWayReturn+0x3c6>
		if(error_mode==1){break;}
 800f730:	bf00      	nop

		}



	pl_DriveMotor_standby(OFF); //MTU2.TSTR.BIT.CST0 = 0;
 800f732:	2000      	movs	r0, #0
 800f734:	f7f8 ff38 	bl	80085a8 <pl_DriveMotor_standby>
	maze_mode = 0;
 800f738:	4b17      	ldr	r3, [pc, #92]	; (800f798 <AdatiWayReturn+0x7cc>)
 800f73a:	2200      	movs	r2, #0
 800f73c:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(100);
 800f73e:	2064      	movs	r0, #100	; 0x64
 800f740:	f7f9 fa62 	bl	8008c08 <wait_ms_NoReset>
	maze_display();
 800f744:	f005 ff60 	bl	8015608 <maze_display>
	create_StepCountMap_queue();
 800f748:	f005 f940 	bl	80149cc <create_StepCountMap_queue>
	if(walk_count[0][0] == MAX_WALKCOUNT){
 800f74c:	4b13      	ldr	r3, [pc, #76]	; (800f79c <AdatiWayReturn+0x7d0>)
 800f74e:	881b      	ldrh	r3, [r3, #0]
 800f750:	2bff      	cmp	r3, #255	; 0xff
 800f752:	d102      	bne.n	800f75a <AdatiWayReturn+0x78e>
		error_mode = 1;
 800f754:	4b0f      	ldr	r3, [pc, #60]	; (800f794 <AdatiWayReturn+0x7c8>)
 800f756:	2201      	movs	r2, #1
 800f758:	701a      	strb	r2, [r3, #0]
	}
	if (error_mode == 0) {
 800f75a:	4b0e      	ldr	r3, [pc, #56]	; (800f794 <AdatiWayReturn+0x7c8>)
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d102      	bne.n	800f768 <AdatiWayReturn+0x79c>
		record_in();
 800f762:	f7f8 fc43 	bl	8007fec <record_in>
		record_out();
	}else{
		record_in();
	}

}
 800f766:	e008      	b.n	800f77a <AdatiWayReturn+0x7ae>
	} else if(timer_end_mode==0) {
 800f768:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d102      	bne.n	800f776 <AdatiWayReturn+0x7aa>
		record_out();
 800f770:	f7f8 fcf2 	bl	8008158 <record_out>
}
 800f774:	e001      	b.n	800f77a <AdatiWayReturn+0x7ae>
		record_in();
 800f776:	f7f8 fc39 	bl	8007fec <record_in>
}
 800f77a:	bf00      	nop
 800f77c:	3740      	adds	r7, #64	; 0x40
 800f77e:	46bd      	mov	sp, r7
 800f780:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f784:	b004      	add	sp, #16
 800f786:	4770      	bx	lr
 800f788:	20000838 	.word	0x20000838
 800f78c:	42140000 	.word	0x42140000
 800f790:	447a0000 	.word	0x447a0000
 800f794:	20000813 	.word	0x20000813
 800f798:	20000836 	.word	0x20000836
 800f79c:	200011f4 	.word	0x200011f4

0800f7a0 <pass_maker_Dijkstra>:





void pass_maker_Dijkstra(void){
 800f7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7a2:	b08b      	sub	sp, #44	; 0x2c
 800f7a4:	af04      	add	r7, sp, #16

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	607b      	str	r3, [r7, #4]
	int y = 0;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	603b      	str	r3, [r7, #0]
	int direction = 1;
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	617b      	str	r3, [r7, #20]
	pass_count = 0;
 800f7b2:	4b8b      	ldr	r3, [pc, #556]	; (800f9e0 <pass_maker_Dijkstra+0x240>)
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	801a      	strh	r2, [r3, #0]
	create_DijkstraMap();
 800f7b8:	f002 fbe8 	bl	8011f8c <create_DijkstraMap>
	maze_display_Dijkstra();
 800f7bc:	f006 f838 	bl	8015830 <maze_display_Dijkstra>
	pass[0] = 1;
 800f7c0:	4b88      	ldr	r3, [pc, #544]	; (800f9e4 <pass_maker_Dijkstra+0x244>)
 800f7c2:	2201      	movs	r2, #1
 800f7c4:	601a      	str	r2, [r3, #0]
	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 800f7c6:	4639      	mov	r1, r7
 800f7c8:	1d3b      	adds	r3, r7, #4
 800f7ca:	697a      	ldr	r2, [r7, #20]
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7ff f94b 	bl	800ea68 <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2b02      	cmp	r3, #2
 800f7d6:	d002      	beq.n	800f7de <pass_maker_Dijkstra+0x3e>
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2b03      	cmp	r3, #3
 800f7dc:	d13a      	bne.n	800f854 <pass_maker_Dijkstra+0xb4>
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d002      	beq.n	800f7ea <pass_maker_Dijkstra+0x4a>
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	d134      	bne.n	800f854 <pass_maker_Dijkstra+0xb4>

			if (pass[pass_count] >= 0) {
 800f7ea:	4b7d      	ldr	r3, [pc, #500]	; (800f9e0 <pass_maker_Dijkstra+0x240>)
 800f7ec:	881b      	ldrh	r3, [r3, #0]
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	4b7c      	ldr	r3, [pc, #496]	; (800f9e4 <pass_maker_Dijkstra+0x244>)
 800f7f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	da05      	bge.n	800f806 <pass_maker_Dijkstra+0x66>
					} else {
						pass_count++;
 800f7fa:	4b79      	ldr	r3, [pc, #484]	; (800f9e0 <pass_maker_Dijkstra+0x240>)
 800f7fc:	881b      	ldrh	r3, [r3, #0]
 800f7fe:	3301      	adds	r3, #1
 800f800:	b29a      	uxth	r2, r3
 800f802:	4b77      	ldr	r3, [pc, #476]	; (800f9e0 <pass_maker_Dijkstra+0x240>)
 800f804:	801a      	strh	r2, [r3, #0]
					}
					pass[pass_count] = pass[pass_count] + 1;
 800f806:	4b76      	ldr	r3, [pc, #472]	; (800f9e0 <pass_maker_Dijkstra+0x240>)
 800f808:	881b      	ldrh	r3, [r3, #0]
 800f80a:	461a      	mov	r2, r3
 800f80c:	4b75      	ldr	r3, [pc, #468]	; (800f9e4 <pass_maker_Dijkstra+0x244>)
 800f80e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f812:	4a73      	ldr	r2, [pc, #460]	; (800f9e0 <pass_maker_Dijkstra+0x240>)
 800f814:	8812      	ldrh	r2, [r2, #0]
 800f816:	4611      	mov	r1, r2
 800f818:	3301      	adds	r3, #1
 800f81a:	4a72      	ldr	r2, [pc, #456]	; (800f9e4 <pass_maker_Dijkstra+0x244>)
 800f81c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//			wait(10);
		//			maze_display();
		//			x = 0;
		//			y = 0;
					direction = direction + 2;
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	3302      	adds	r3, #2
 800f824:	617b      	str	r3, [r7, #20]
					if (direction == 5) {
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	2b05      	cmp	r3, #5
 800f82a:	d101      	bne.n	800f830 <pass_maker_Dijkstra+0x90>
						direction = 1;
 800f82c:	2301      	movs	r3, #1
 800f82e:	617b      	str	r3, [r7, #20]
					}
					if (direction == 6) {
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	2b06      	cmp	r3, #6
 800f834:	d101      	bne.n	800f83a <pass_maker_Dijkstra+0x9a>
						direction = 2;
 800f836:	2302      	movs	r3, #2
 800f838:	617b      	str	r3, [r7, #20]
					}
					if (direction == 0) {
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d101      	bne.n	800f844 <pass_maker_Dijkstra+0xa4>
						direction = 4;
 800f840:	2304      	movs	r3, #4
 800f842:	617b      	str	r3, [r7, #20]
					}
					if (direction == -1) {
 800f844:	697b      	ldr	r3, [r7, #20]
 800f846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f84a:	f040 80c2 	bne.w	800f9d2 <pass_maker_Dijkstra+0x232>
						direction = 3;
 800f84e:	2303      	movs	r3, #3
 800f850:	617b      	str	r3, [r7, #20]
					}
					break;
 800f852:	e0be      	b.n	800f9d2 <pass_maker_Dijkstra+0x232>

		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	6839      	ldr	r1, [r7, #0]
 800f858:	f107 020b 	add.w	r2, r7, #11
 800f85c:	f107 0309 	add.w	r3, r7, #9
 800f860:	9301      	str	r3, [sp, #4]
 800f862:	f107 030a 	add.w	r3, r7, #10
 800f866:	9300      	str	r3, [sp, #0]
 800f868:	4613      	mov	r3, r2
 800f86a:	697a      	ldr	r2, [r7, #20]
 800f86c:	f001 ffa8 	bl	80117c0 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	683a      	ldr	r2, [r7, #0]
 800f874:	f107 060c 	add.w	r6, r7, #12
 800f878:	f107 050e 	add.w	r5, r7, #14
 800f87c:	f107 0410 	add.w	r4, r7, #16
 800f880:	f107 0012 	add.w	r0, r7, #18
 800f884:	6979      	ldr	r1, [r7, #20]
 800f886:	9102      	str	r1, [sp, #8]
 800f888:	9201      	str	r2, [sp, #4]
 800f88a:	9300      	str	r3, [sp, #0]
 800f88c:	4633      	mov	r3, r6
 800f88e:	462a      	mov	r2, r5
 800f890:	4621      	mov	r1, r4
 800f892:	f002 fae1 	bl	8011e58 <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f896:	7afb      	ldrb	r3, [r7, #11]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d002      	beq.n	800f8a2 <pass_maker_Dijkstra+0x102>
 800f89c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8a0:	827b      	strh	r3, [r7, #18]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f8a2:	7abb      	ldrb	r3, [r7, #10]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d002      	beq.n	800f8ae <pass_maker_Dijkstra+0x10e>
 800f8a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8ac:	823b      	strh	r3, [r7, #16]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f8ae:	7a7b      	ldrb	r3, [r7, #9]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d002      	beq.n	800f8ba <pass_maker_Dijkstra+0x11a>
 800f8b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8b8:	81bb      	strh	r3, [r7, #12]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 800f8ba:	8a7b      	ldrh	r3, [r7, #18]
 800f8bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	d10e      	bne.n	800f8e2 <pass_maker_Dijkstra+0x142>
 800f8c4:	8a3b      	ldrh	r3, [r7, #16]
 800f8c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	d109      	bne.n	800f8e2 <pass_maker_Dijkstra+0x142>
 800f8ce:	89bb      	ldrh	r3, [r7, #12]
 800f8d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8d4:	4293      	cmp	r3, r2
 800f8d6:	d104      	bne.n	800f8e2 <pass_maker_Dijkstra+0x142>
 800f8d8:	89fb      	ldrh	r3, [r7, #14]
 800f8da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	d079      	beq.n	800f9d6 <pass_maker_Dijkstra+0x236>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800f8e2:	8a7a      	ldrh	r2, [r7, #18]
 800f8e4:	8a3b      	ldrh	r3, [r7, #16]
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d822      	bhi.n	800f930 <pass_maker_Dijkstra+0x190>
 800f8ea:	8a7a      	ldrh	r2, [r7, #18]
 800f8ec:	89bb      	ldrh	r3, [r7, #12]
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d81e      	bhi.n	800f930 <pass_maker_Dijkstra+0x190>
 800f8f2:	8a7a      	ldrh	r2, [r7, #18]
 800f8f4:	89fb      	ldrh	r3, [r7, #14]
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d81a      	bhi.n	800f930 <pass_maker_Dijkstra+0x190>
			// 直進
			if (pass[pass_count] >= 0) {} else {pass_count++;}
 800f8fa:	4b39      	ldr	r3, [pc, #228]	; (800f9e0 <pass_maker_Dijkstra+0x240>)
 800f8fc:	881b      	ldrh	r3, [r3, #0]
 800f8fe:	461a      	mov	r2, r3
 800f900:	4b38      	ldr	r3, [pc, #224]	; (800f9e4 <pass_maker_Dijkstra+0x244>)
 800f902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f906:	2b00      	cmp	r3, #0
 800f908:	da05      	bge.n	800f916 <pass_maker_Dijkstra+0x176>
 800f90a:	4b35      	ldr	r3, [pc, #212]	; (800f9e0 <pass_maker_Dijkstra+0x240>)
 800f90c:	881b      	ldrh	r3, [r3, #0]
 800f90e:	3301      	adds	r3, #1
 800f910:	b29a      	uxth	r2, r3
 800f912:	4b33      	ldr	r3, [pc, #204]	; (800f9e0 <pass_maker_Dijkstra+0x240>)
 800f914:	801a      	strh	r2, [r3, #0]
			pass[pass_count] = pass[pass_count] + 2;
 800f916:	4b32      	ldr	r3, [pc, #200]	; (800f9e0 <pass_maker_Dijkstra+0x240>)
 800f918:	881b      	ldrh	r3, [r3, #0]
 800f91a:	461a      	mov	r2, r3
 800f91c:	4b31      	ldr	r3, [pc, #196]	; (800f9e4 <pass_maker_Dijkstra+0x244>)
 800f91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f922:	4a2f      	ldr	r2, [pc, #188]	; (800f9e0 <pass_maker_Dijkstra+0x240>)
 800f924:	8812      	ldrh	r2, [r2, #0]
 800f926:	4611      	mov	r1, r2
 800f928:	3302      	adds	r3, #2
 800f92a:	4a2e      	ldr	r2, [pc, #184]	; (800f9e4 <pass_maker_Dijkstra+0x244>)
 800f92c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800f930:	8a3a      	ldrh	r2, [r7, #16]
 800f932:	8a7b      	ldrh	r3, [r7, #18]
 800f934:	429a      	cmp	r2, r3
 800f936:	d218      	bcs.n	800f96a <pass_maker_Dijkstra+0x1ca>
 800f938:	8a3a      	ldrh	r2, [r7, #16]
 800f93a:	89bb      	ldrh	r3, [r7, #12]
 800f93c:	429a      	cmp	r2, r3
 800f93e:	d814      	bhi.n	800f96a <pass_maker_Dijkstra+0x1ca>
 800f940:	8a3a      	ldrh	r2, [r7, #16]
 800f942:	89fb      	ldrh	r3, [r7, #14]
 800f944:	429a      	cmp	r2, r3
 800f946:	d810      	bhi.n	800f96a <pass_maker_Dijkstra+0x1ca>
			// 右旋回
			pass_count++;
 800f948:	4b25      	ldr	r3, [pc, #148]	; (800f9e0 <pass_maker_Dijkstra+0x240>)
 800f94a:	881b      	ldrh	r3, [r3, #0]
 800f94c:	3301      	adds	r3, #1
 800f94e:	b29a      	uxth	r2, r3
 800f950:	4b23      	ldr	r3, [pc, #140]	; (800f9e0 <pass_maker_Dijkstra+0x240>)
 800f952:	801a      	strh	r2, [r3, #0]
			pass[pass_count] = -2;
 800f954:	4b22      	ldr	r3, [pc, #136]	; (800f9e0 <pass_maker_Dijkstra+0x240>)
 800f956:	881b      	ldrh	r3, [r3, #0]
 800f958:	4619      	mov	r1, r3
 800f95a:	4b22      	ldr	r3, [pc, #136]	; (800f9e4 <pass_maker_Dijkstra+0x244>)
 800f95c:	f06f 0201 	mvn.w	r2, #1
 800f960:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction++;
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	3301      	adds	r3, #1
 800f968:	617b      	str	r3, [r7, #20]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800f96a:	89ba      	ldrh	r2, [r7, #12]
 800f96c:	8a7b      	ldrh	r3, [r7, #18]
 800f96e:	429a      	cmp	r2, r3
 800f970:	d218      	bcs.n	800f9a4 <pass_maker_Dijkstra+0x204>
 800f972:	89ba      	ldrh	r2, [r7, #12]
 800f974:	8a3b      	ldrh	r3, [r7, #16]
 800f976:	429a      	cmp	r2, r3
 800f978:	d214      	bcs.n	800f9a4 <pass_maker_Dijkstra+0x204>
 800f97a:	89ba      	ldrh	r2, [r7, #12]
 800f97c:	89fb      	ldrh	r3, [r7, #14]
 800f97e:	429a      	cmp	r2, r3
 800f980:	d810      	bhi.n	800f9a4 <pass_maker_Dijkstra+0x204>
			// 左旋回
			pass_count++;
 800f982:	4b17      	ldr	r3, [pc, #92]	; (800f9e0 <pass_maker_Dijkstra+0x240>)
 800f984:	881b      	ldrh	r3, [r3, #0]
 800f986:	3301      	adds	r3, #1
 800f988:	b29a      	uxth	r2, r3
 800f98a:	4b15      	ldr	r3, [pc, #84]	; (800f9e0 <pass_maker_Dijkstra+0x240>)
 800f98c:	801a      	strh	r2, [r3, #0]
			pass[pass_count] = -3;
 800f98e:	4b14      	ldr	r3, [pc, #80]	; (800f9e0 <pass_maker_Dijkstra+0x240>)
 800f990:	881b      	ldrh	r3, [r3, #0]
 800f992:	4619      	mov	r1, r3
 800f994:	4b13      	ldr	r3, [pc, #76]	; (800f9e4 <pass_maker_Dijkstra+0x244>)
 800f996:	f06f 0202 	mvn.w	r2, #2
 800f99a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction--;
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	3b01      	subs	r3, #1
 800f9a2:	617b      	str	r3, [r7, #20]
		}

		if (direction == 5) {
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	2b05      	cmp	r3, #5
 800f9a8:	d101      	bne.n	800f9ae <pass_maker_Dijkstra+0x20e>
			direction = 1;
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	617b      	str	r3, [r7, #20]
		}
		if (direction == 6) {
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	2b06      	cmp	r3, #6
 800f9b2:	d101      	bne.n	800f9b8 <pass_maker_Dijkstra+0x218>
			direction = 2;
 800f9b4:	2302      	movs	r3, #2
 800f9b6:	617b      	str	r3, [r7, #20]
		}
		if (direction == 0) {
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d101      	bne.n	800f9c2 <pass_maker_Dijkstra+0x222>
			direction = 4;
 800f9be:	2304      	movs	r3, #4
 800f9c0:	617b      	str	r3, [r7, #20]
		}
		if (direction == -1) {
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9c8:	f47f aefd 	bne.w	800f7c6 <pass_maker_Dijkstra+0x26>
			direction = 3;
 800f9cc:	2303      	movs	r3, #3
 800f9ce:	617b      	str	r3, [r7, #20]
		update_coordinate(&x,&y,direction);
 800f9d0:	e6f9      	b.n	800f7c6 <pass_maker_Dijkstra+0x26>
					break;
 800f9d2:	bf00      	nop
 800f9d4:	e000      	b.n	800f9d8 <pass_maker_Dijkstra+0x238>
			break;
 800f9d6:	bf00      	nop
		}

	}
}
 800f9d8:	bf00      	nop
 800f9da:	371c      	adds	r7, #28
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9e0:	20000834 	.word	0x20000834
 800f9e4:	2000083c 	.word	0x2000083c

0800f9e8 <run_shortest>:


void run_shortest(float inspeed, float inacc, int stmass, char pass_mode, char fun_mode,
		char slant_mode, parameter_speed howspeed,float fun_ratio,char mollifier_mode) {
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b0e2      	sub	sp, #392	; 0x188
 800f9ec:	af50      	add	r7, sp, #320	; 0x140
 800f9ee:	ed87 0a05 	vstr	s0, [r7, #20]
 800f9f2:	edc7 0a04 	vstr	s1, [r7, #16]
 800f9f6:	60f8      	str	r0, [r7, #12]
 800f9f8:	4608      	mov	r0, r1
 800f9fa:	4611      	mov	r1, r2
 800f9fc:	461a      	mov	r2, r3
 800f9fe:	ed87 1a01 	vstr	s2, [r7, #4]
 800fa02:	4603      	mov	r3, r0
 800fa04:	72fb      	strb	r3, [r7, #11]
 800fa06:	460b      	mov	r3, r1
 800fa08:	72bb      	strb	r3, [r7, #10]
 800fa0a:	4613      	mov	r3, r2
 800fa0c:	727b      	strb	r3, [r7, #9]
//	_Bool left_wall;
//
//	int x = 0;
//	int y = 0;
//	int direction = 1;
	slant_direction = -2;
 800fa0e:	f06f 0301 	mvn.w	r3, #1
 800fa12:	643b      	str	r3, [r7, #64]	; 0x40

	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800fa14:	2301      	movs	r3, #1
 800fa16:	773b      	strb	r3, [r7, #28]
	mode.WallControlStatus=0;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	777b      	strb	r3, [r7, #29]
	mode.WallCutMode=0;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	77fb      	strb	r3, [r7, #31]
	mode.calMazeMode=0;
 800fa20:	2300      	movs	r3, #0
 800fa22:	77bb      	strb	r3, [r7, #30]

	//highspeed_mode = 1;
	for(int i = 0; i <= 254; i++){pass[i] = 0;}
 800fa24:	2300      	movs	r3, #0
 800fa26:	637b      	str	r3, [r7, #52]	; 0x34
 800fa28:	e007      	b.n	800fa3a <run_shortest+0x52>
 800fa2a:	4a07      	ldr	r2, [pc, #28]	; (800fa48 <run_shortest+0x60>)
 800fa2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa2e:	2100      	movs	r1, #0
 800fa30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800fa34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa36:	3301      	adds	r3, #1
 800fa38:	637b      	str	r3, [r7, #52]	; 0x34
 800fa3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa3c:	2bfe      	cmp	r3, #254	; 0xfe
 800fa3e:	ddf4      	ble.n	800fa2a <run_shortest+0x42>
	for(int i = 0; i <= 14; i++){
 800fa40:	2300      	movs	r3, #0
 800fa42:	633b      	str	r3, [r7, #48]	; 0x30
 800fa44:	e068      	b.n	800fb18 <run_shortest+0x130>
 800fa46:	bf00      	nop
 800fa48:	2000083c 	.word	0x2000083c
		record.row[i] = wall.row[i];
 800fa4c:	4aa8      	ldr	r2, [pc, #672]	; (800fcf0 <run_shortest+0x308>)
 800fa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fa54:	49a7      	ldr	r1, [pc, #668]	; (800fcf4 <run_shortest+0x30c>)
 800fa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		record.column[i] = wall.column[i];
 800fa5c:	4aa4      	ldr	r2, [pc, #656]	; (800fcf0 <run_shortest+0x308>)
 800fa5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa60:	330e      	adds	r3, #14
 800fa62:	009b      	lsls	r3, r3, #2
 800fa64:	4413      	add	r3, r2
 800fa66:	685a      	ldr	r2, [r3, #4]
 800fa68:	49a2      	ldr	r1, [pc, #648]	; (800fcf4 <run_shortest+0x30c>)
 800fa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa6c:	330e      	adds	r3, #14
 800fa6e:	009b      	lsls	r3, r3, #2
 800fa70:	440b      	add	r3, r1
 800fa72:	605a      	str	r2, [r3, #4]
		record.row_look[i] = wall.row_look[i];
 800fa74:	4a9e      	ldr	r2, [pc, #632]	; (800fcf0 <run_shortest+0x308>)
 800fa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa78:	331e      	adds	r3, #30
 800fa7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fa7e:	499d      	ldr	r1, [pc, #628]	; (800fcf4 <run_shortest+0x30c>)
 800fa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa82:	331e      	adds	r3, #30
 800fa84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		record.column_look[i] = wall.column_look[i];
 800fa88:	4a99      	ldr	r2, [pc, #612]	; (800fcf0 <run_shortest+0x308>)
 800fa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa8c:	332c      	adds	r3, #44	; 0x2c
 800fa8e:	009b      	lsls	r3, r3, #2
 800fa90:	4413      	add	r3, r2
 800fa92:	685a      	ldr	r2, [r3, #4]
 800fa94:	4997      	ldr	r1, [pc, #604]	; (800fcf4 <run_shortest+0x30c>)
 800fa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa98:	332c      	adds	r3, #44	; 0x2c
 800fa9a:	009b      	lsls	r3, r3, #2
 800fa9c:	440b      	add	r3, r1
 800fa9e:	605a      	str	r2, [r3, #4]
		wall.row_look[i] = ~wall.row_look[i];
 800faa0:	4a93      	ldr	r2, [pc, #588]	; (800fcf0 <run_shortest+0x308>)
 800faa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faa4:	331e      	adds	r3, #30
 800faa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800faaa:	43da      	mvns	r2, r3
 800faac:	4990      	ldr	r1, [pc, #576]	; (800fcf0 <run_shortest+0x308>)
 800faae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab0:	331e      	adds	r3, #30
 800fab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column_look[i] = ~wall.column_look[i];
 800fab6:	4a8e      	ldr	r2, [pc, #568]	; (800fcf0 <run_shortest+0x308>)
 800fab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faba:	332c      	adds	r3, #44	; 0x2c
 800fabc:	009b      	lsls	r3, r3, #2
 800fabe:	4413      	add	r3, r2
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	43da      	mvns	r2, r3
 800fac4:	498a      	ldr	r1, [pc, #552]	; (800fcf0 <run_shortest+0x308>)
 800fac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac8:	332c      	adds	r3, #44	; 0x2c
 800faca:	009b      	lsls	r3, r3, #2
 800facc:	440b      	add	r3, r1
 800face:	605a      	str	r2, [r3, #4]
		wall.row[i] = wall.row[i] | wall.row_look[i];
 800fad0:	4a87      	ldr	r2, [pc, #540]	; (800fcf0 <run_shortest+0x308>)
 800fad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fad8:	4985      	ldr	r1, [pc, #532]	; (800fcf0 <run_shortest+0x308>)
 800fada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fadc:	331e      	adds	r3, #30
 800fade:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fae2:	431a      	orrs	r2, r3
 800fae4:	4982      	ldr	r1, [pc, #520]	; (800fcf0 <run_shortest+0x308>)
 800fae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column[i] = wall.column[i] | wall.column_look[i];
 800faec:	4a80      	ldr	r2, [pc, #512]	; (800fcf0 <run_shortest+0x308>)
 800faee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf0:	330e      	adds	r3, #14
 800faf2:	009b      	lsls	r3, r3, #2
 800faf4:	4413      	add	r3, r2
 800faf6:	685a      	ldr	r2, [r3, #4]
 800faf8:	497d      	ldr	r1, [pc, #500]	; (800fcf0 <run_shortest+0x308>)
 800fafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fafc:	332c      	adds	r3, #44	; 0x2c
 800fafe:	009b      	lsls	r3, r3, #2
 800fb00:	440b      	add	r3, r1
 800fb02:	685b      	ldr	r3, [r3, #4]
 800fb04:	431a      	orrs	r2, r3
 800fb06:	497a      	ldr	r1, [pc, #488]	; (800fcf0 <run_shortest+0x308>)
 800fb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb0a:	330e      	adds	r3, #14
 800fb0c:	009b      	lsls	r3, r3, #2
 800fb0e:	440b      	add	r3, r1
 800fb10:	605a      	str	r2, [r3, #4]
	for(int i = 0; i <= 14; i++){
 800fb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb14:	3301      	adds	r3, #1
 800fb16:	633b      	str	r3, [r7, #48]	; 0x30
 800fb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1a:	2b0e      	cmp	r3, #14
 800fb1c:	dd96      	ble.n	800fa4c <run_shortest+0x64>
	}
	//pass_maker();
   pass_maker_Dijkstra();
 800fb1e:	f7ff fe3f 	bl	800f7a0 <pass_maker_Dijkstra>

	pass_count = 1;
 800fb22:	4b75      	ldr	r3, [pc, #468]	; (800fcf8 <run_shortest+0x310>)
 800fb24:	2201      	movs	r2, #1
 800fb26:	801a      	strh	r2, [r3, #0]
if(pass_mode==1){
 800fb28:	7afb      	ldrb	r3, [r7, #11]
 800fb2a:	2b01      	cmp	r3, #1
 800fb2c:	f040 84b6 	bne.w	801049c <run_shortest+0xab4>
	while (1) {		//パス圧縮
//		if (mode_safty == 1) {
//
//			break;
//		}
		if (pass[pass_count] == 0) {
 800fb30:	4b71      	ldr	r3, [pc, #452]	; (800fcf8 <run_shortest+0x310>)
 800fb32:	881b      	ldrh	r3, [r3, #0]
 800fb34:	461a      	mov	r2, r3
 800fb36:	4b71      	ldr	r3, [pc, #452]	; (800fcfc <run_shortest+0x314>)
 800fb38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	f000 813b 	beq.w	800fdb8 <run_shortest+0x3d0>
			break;
		}

		if (pass[pass_count] == -2 && pass[pass_count - 1] >= 1	//右90度大回りの条件
 800fb42:	4b6d      	ldr	r3, [pc, #436]	; (800fcf8 <run_shortest+0x310>)
 800fb44:	881b      	ldrh	r3, [r3, #0]
 800fb46:	461a      	mov	r2, r3
 800fb48:	4b6c      	ldr	r3, [pc, #432]	; (800fcfc <run_shortest+0x314>)
 800fb4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb4e:	f113 0f02 	cmn.w	r3, #2
 800fb52:	d131      	bne.n	800fbb8 <run_shortest+0x1d0>
 800fb54:	4b68      	ldr	r3, [pc, #416]	; (800fcf8 <run_shortest+0x310>)
 800fb56:	881b      	ldrh	r3, [r3, #0]
 800fb58:	3b01      	subs	r3, #1
 800fb5a:	4a68      	ldr	r2, [pc, #416]	; (800fcfc <run_shortest+0x314>)
 800fb5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	dd29      	ble.n	800fbb8 <run_shortest+0x1d0>
		&& pass[pass_count + 1] >= 1) {
 800fb64:	4b64      	ldr	r3, [pc, #400]	; (800fcf8 <run_shortest+0x310>)
 800fb66:	881b      	ldrh	r3, [r3, #0]
 800fb68:	3301      	adds	r3, #1
 800fb6a:	4a64      	ldr	r2, [pc, #400]	; (800fcfc <run_shortest+0x314>)
 800fb6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	dd21      	ble.n	800fbb8 <run_shortest+0x1d0>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800fb74:	4b60      	ldr	r3, [pc, #384]	; (800fcf8 <run_shortest+0x310>)
 800fb76:	881b      	ldrh	r3, [r3, #0]
 800fb78:	3b01      	subs	r3, #1
 800fb7a:	4a60      	ldr	r2, [pc, #384]	; (800fcfc <run_shortest+0x314>)
 800fb7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fb80:	4b5d      	ldr	r3, [pc, #372]	; (800fcf8 <run_shortest+0x310>)
 800fb82:	881b      	ldrh	r3, [r3, #0]
 800fb84:	3b01      	subs	r3, #1
 800fb86:	3a01      	subs	r2, #1
 800fb88:	495c      	ldr	r1, [pc, #368]	; (800fcfc <run_shortest+0x314>)
 800fb8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800fb8e:	4b5a      	ldr	r3, [pc, #360]	; (800fcf8 <run_shortest+0x310>)
 800fb90:	881b      	ldrh	r3, [r3, #0]
 800fb92:	3301      	adds	r3, #1
 800fb94:	4a59      	ldr	r2, [pc, #356]	; (800fcfc <run_shortest+0x314>)
 800fb96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fb9a:	4b57      	ldr	r3, [pc, #348]	; (800fcf8 <run_shortest+0x310>)
 800fb9c:	881b      	ldrh	r3, [r3, #0]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	3a01      	subs	r2, #1
 800fba2:	4956      	ldr	r1, [pc, #344]	; (800fcfc <run_shortest+0x314>)
 800fba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -4;		//右90度大回り
 800fba8:	4b53      	ldr	r3, [pc, #332]	; (800fcf8 <run_shortest+0x310>)
 800fbaa:	881b      	ldrh	r3, [r3, #0]
 800fbac:	4619      	mov	r1, r3
 800fbae:	4b53      	ldr	r3, [pc, #332]	; (800fcfc <run_shortest+0x314>)
 800fbb0:	f06f 0203 	mvn.w	r2, #3
 800fbb4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count] == -3 && pass[pass_count - 1] >= 1	//左90度大回りの条件
 800fbb8:	4b4f      	ldr	r3, [pc, #316]	; (800fcf8 <run_shortest+0x310>)
 800fbba:	881b      	ldrh	r3, [r3, #0]
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	4b4f      	ldr	r3, [pc, #316]	; (800fcfc <run_shortest+0x314>)
 800fbc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbc4:	f113 0f03 	cmn.w	r3, #3
 800fbc8:	d131      	bne.n	800fc2e <run_shortest+0x246>
 800fbca:	4b4b      	ldr	r3, [pc, #300]	; (800fcf8 <run_shortest+0x310>)
 800fbcc:	881b      	ldrh	r3, [r3, #0]
 800fbce:	3b01      	subs	r3, #1
 800fbd0:	4a4a      	ldr	r2, [pc, #296]	; (800fcfc <run_shortest+0x314>)
 800fbd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	dd29      	ble.n	800fc2e <run_shortest+0x246>
		&& pass[pass_count + 1] >= 1) {
 800fbda:	4b47      	ldr	r3, [pc, #284]	; (800fcf8 <run_shortest+0x310>)
 800fbdc:	881b      	ldrh	r3, [r3, #0]
 800fbde:	3301      	adds	r3, #1
 800fbe0:	4a46      	ldr	r2, [pc, #280]	; (800fcfc <run_shortest+0x314>)
 800fbe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	dd21      	ble.n	800fc2e <run_shortest+0x246>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800fbea:	4b43      	ldr	r3, [pc, #268]	; (800fcf8 <run_shortest+0x310>)
 800fbec:	881b      	ldrh	r3, [r3, #0]
 800fbee:	3b01      	subs	r3, #1
 800fbf0:	4a42      	ldr	r2, [pc, #264]	; (800fcfc <run_shortest+0x314>)
 800fbf2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fbf6:	4b40      	ldr	r3, [pc, #256]	; (800fcf8 <run_shortest+0x310>)
 800fbf8:	881b      	ldrh	r3, [r3, #0]
 800fbfa:	3b01      	subs	r3, #1
 800fbfc:	3a01      	subs	r2, #1
 800fbfe:	493f      	ldr	r1, [pc, #252]	; (800fcfc <run_shortest+0x314>)
 800fc00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800fc04:	4b3c      	ldr	r3, [pc, #240]	; (800fcf8 <run_shortest+0x310>)
 800fc06:	881b      	ldrh	r3, [r3, #0]
 800fc08:	3301      	adds	r3, #1
 800fc0a:	4a3c      	ldr	r2, [pc, #240]	; (800fcfc <run_shortest+0x314>)
 800fc0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fc10:	4b39      	ldr	r3, [pc, #228]	; (800fcf8 <run_shortest+0x310>)
 800fc12:	881b      	ldrh	r3, [r3, #0]
 800fc14:	3301      	adds	r3, #1
 800fc16:	3a01      	subs	r2, #1
 800fc18:	4938      	ldr	r1, [pc, #224]	; (800fcfc <run_shortest+0x314>)
 800fc1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -5;		//左90度大回り
 800fc1e:	4b36      	ldr	r3, [pc, #216]	; (800fcf8 <run_shortest+0x310>)
 800fc20:	881b      	ldrh	r3, [r3, #0]
 800fc22:	4619      	mov	r1, r3
 800fc24:	4b35      	ldr	r3, [pc, #212]	; (800fcfc <run_shortest+0x314>)
 800fc26:	f06f 0204 	mvn.w	r2, #4
 800fc2a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -2
 800fc2e:	4b32      	ldr	r3, [pc, #200]	; (800fcf8 <run_shortest+0x310>)
 800fc30:	881b      	ldrh	r3, [r3, #0]
 800fc32:	3b01      	subs	r3, #1
 800fc34:	4a31      	ldr	r2, [pc, #196]	; (800fcfc <run_shortest+0x314>)
 800fc36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	dd43      	ble.n	800fcc6 <run_shortest+0x2de>
 800fc3e:	4b2e      	ldr	r3, [pc, #184]	; (800fcf8 <run_shortest+0x310>)
 800fc40:	881b      	ldrh	r3, [r3, #0]
 800fc42:	461a      	mov	r2, r3
 800fc44:	4b2d      	ldr	r3, [pc, #180]	; (800fcfc <run_shortest+0x314>)
 800fc46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc4a:	f113 0f02 	cmn.w	r3, #2
 800fc4e:	d13a      	bne.n	800fcc6 <run_shortest+0x2de>
				&& pass[pass_count + 1] == -2 && pass[pass_count + 2] >= 1) {//右180度大回りの条件
 800fc50:	4b29      	ldr	r3, [pc, #164]	; (800fcf8 <run_shortest+0x310>)
 800fc52:	881b      	ldrh	r3, [r3, #0]
 800fc54:	3301      	adds	r3, #1
 800fc56:	4a29      	ldr	r2, [pc, #164]	; (800fcfc <run_shortest+0x314>)
 800fc58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc5c:	f113 0f02 	cmn.w	r3, #2
 800fc60:	d131      	bne.n	800fcc6 <run_shortest+0x2de>
 800fc62:	4b25      	ldr	r3, [pc, #148]	; (800fcf8 <run_shortest+0x310>)
 800fc64:	881b      	ldrh	r3, [r3, #0]
 800fc66:	3302      	adds	r3, #2
 800fc68:	4a24      	ldr	r2, [pc, #144]	; (800fcfc <run_shortest+0x314>)
 800fc6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	dd29      	ble.n	800fcc6 <run_shortest+0x2de>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800fc72:	4b21      	ldr	r3, [pc, #132]	; (800fcf8 <run_shortest+0x310>)
 800fc74:	881b      	ldrh	r3, [r3, #0]
 800fc76:	3b01      	subs	r3, #1
 800fc78:	4a20      	ldr	r2, [pc, #128]	; (800fcfc <run_shortest+0x314>)
 800fc7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fc7e:	4b1e      	ldr	r3, [pc, #120]	; (800fcf8 <run_shortest+0x310>)
 800fc80:	881b      	ldrh	r3, [r3, #0]
 800fc82:	3b01      	subs	r3, #1
 800fc84:	3a01      	subs	r2, #1
 800fc86:	491d      	ldr	r1, [pc, #116]	; (800fcfc <run_shortest+0x314>)
 800fc88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -6;
 800fc8c:	4b1a      	ldr	r3, [pc, #104]	; (800fcf8 <run_shortest+0x310>)
 800fc8e:	881b      	ldrh	r3, [r3, #0]
 800fc90:	4619      	mov	r1, r3
 800fc92:	4b1a      	ldr	r3, [pc, #104]	; (800fcfc <run_shortest+0x314>)
 800fc94:	f06f 0205 	mvn.w	r2, #5
 800fc98:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800fc9c:	4b16      	ldr	r3, [pc, #88]	; (800fcf8 <run_shortest+0x310>)
 800fc9e:	881b      	ldrh	r3, [r3, #0]
 800fca0:	3301      	adds	r3, #1
 800fca2:	4a16      	ldr	r2, [pc, #88]	; (800fcfc <run_shortest+0x314>)
 800fca4:	f04f 31ff 	mov.w	r1, #4294967295
 800fca8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800fcac:	4b12      	ldr	r3, [pc, #72]	; (800fcf8 <run_shortest+0x310>)
 800fcae:	881b      	ldrh	r3, [r3, #0]
 800fcb0:	3302      	adds	r3, #2
 800fcb2:	4a12      	ldr	r2, [pc, #72]	; (800fcfc <run_shortest+0x314>)
 800fcb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fcb8:	4b0f      	ldr	r3, [pc, #60]	; (800fcf8 <run_shortest+0x310>)
 800fcba:	881b      	ldrh	r3, [r3, #0]
 800fcbc:	3302      	adds	r3, #2
 800fcbe:	3a01      	subs	r2, #1
 800fcc0:	490e      	ldr	r1, [pc, #56]	; (800fcfc <run_shortest+0x314>)
 800fcc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -3
 800fcc6:	4b0c      	ldr	r3, [pc, #48]	; (800fcf8 <run_shortest+0x310>)
 800fcc8:	881b      	ldrh	r3, [r3, #0]
 800fcca:	3b01      	subs	r3, #1
 800fccc:	4a0b      	ldr	r2, [pc, #44]	; (800fcfc <run_shortest+0x314>)
 800fcce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	dd4c      	ble.n	800fd70 <run_shortest+0x388>
 800fcd6:	4b08      	ldr	r3, [pc, #32]	; (800fcf8 <run_shortest+0x310>)
 800fcd8:	881b      	ldrh	r3, [r3, #0]
 800fcda:	461a      	mov	r2, r3
 800fcdc:	4b07      	ldr	r3, [pc, #28]	; (800fcfc <run_shortest+0x314>)
 800fcde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fce2:	f113 0f03 	cmn.w	r3, #3
 800fce6:	d143      	bne.n	800fd70 <run_shortest+0x388>
				&& pass[pass_count + 1] == -3 && pass[pass_count + 2] >= 1) {//左180度大回りの条件
 800fce8:	4b03      	ldr	r3, [pc, #12]	; (800fcf8 <run_shortest+0x310>)
 800fcea:	881b      	ldrh	r3, [r3, #0]
 800fcec:	3301      	adds	r3, #1
 800fcee:	e007      	b.n	800fd00 <run_shortest+0x318>
 800fcf0:	20001010 	.word	0x20001010
 800fcf4:	20001100 	.word	0x20001100
 800fcf8:	20000834 	.word	0x20000834
 800fcfc:	2000083c 	.word	0x2000083c
 800fd00:	4a2b      	ldr	r2, [pc, #172]	; (800fdb0 <run_shortest+0x3c8>)
 800fd02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd06:	f113 0f03 	cmn.w	r3, #3
 800fd0a:	d131      	bne.n	800fd70 <run_shortest+0x388>
 800fd0c:	4b29      	ldr	r3, [pc, #164]	; (800fdb4 <run_shortest+0x3cc>)
 800fd0e:	881b      	ldrh	r3, [r3, #0]
 800fd10:	3302      	adds	r3, #2
 800fd12:	4a27      	ldr	r2, [pc, #156]	; (800fdb0 <run_shortest+0x3c8>)
 800fd14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	dd29      	ble.n	800fd70 <run_shortest+0x388>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800fd1c:	4b25      	ldr	r3, [pc, #148]	; (800fdb4 <run_shortest+0x3cc>)
 800fd1e:	881b      	ldrh	r3, [r3, #0]
 800fd20:	3b01      	subs	r3, #1
 800fd22:	4a23      	ldr	r2, [pc, #140]	; (800fdb0 <run_shortest+0x3c8>)
 800fd24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fd28:	4b22      	ldr	r3, [pc, #136]	; (800fdb4 <run_shortest+0x3cc>)
 800fd2a:	881b      	ldrh	r3, [r3, #0]
 800fd2c:	3b01      	subs	r3, #1
 800fd2e:	3a01      	subs	r2, #1
 800fd30:	491f      	ldr	r1, [pc, #124]	; (800fdb0 <run_shortest+0x3c8>)
 800fd32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -7;
 800fd36:	4b1f      	ldr	r3, [pc, #124]	; (800fdb4 <run_shortest+0x3cc>)
 800fd38:	881b      	ldrh	r3, [r3, #0]
 800fd3a:	4619      	mov	r1, r3
 800fd3c:	4b1c      	ldr	r3, [pc, #112]	; (800fdb0 <run_shortest+0x3c8>)
 800fd3e:	f06f 0206 	mvn.w	r2, #6
 800fd42:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800fd46:	4b1b      	ldr	r3, [pc, #108]	; (800fdb4 <run_shortest+0x3cc>)
 800fd48:	881b      	ldrh	r3, [r3, #0]
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	4a18      	ldr	r2, [pc, #96]	; (800fdb0 <run_shortest+0x3c8>)
 800fd4e:	f04f 31ff 	mov.w	r1, #4294967295
 800fd52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800fd56:	4b17      	ldr	r3, [pc, #92]	; (800fdb4 <run_shortest+0x3cc>)
 800fd58:	881b      	ldrh	r3, [r3, #0]
 800fd5a:	3302      	adds	r3, #2
 800fd5c:	4a14      	ldr	r2, [pc, #80]	; (800fdb0 <run_shortest+0x3c8>)
 800fd5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fd62:	4b14      	ldr	r3, [pc, #80]	; (800fdb4 <run_shortest+0x3cc>)
 800fd64:	881b      	ldrh	r3, [r3, #0]
 800fd66:	3302      	adds	r3, #2
 800fd68:	3a01      	subs	r2, #1
 800fd6a:	4911      	ldr	r1, [pc, #68]	; (800fdb0 <run_shortest+0x3c8>)
 800fd6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (pass[pass_count] == -2 && pass[pass_count - 1] == -3	//左90度大回りの条件
 800fd70:	4b10      	ldr	r3, [pc, #64]	; (800fdb4 <run_shortest+0x3cc>)
 800fd72:	881b      	ldrh	r3, [r3, #0]
 800fd74:	461a      	mov	r2, r3
 800fd76:	4b0e      	ldr	r3, [pc, #56]	; (800fdb0 <run_shortest+0x3c8>)
 800fd78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd7c:	f113 0f02 	cmn.w	r3, #2

				) {
		}
//		if(){}
		if (pass[pass_count - 1] == 0) {
 800fd80:	4b0c      	ldr	r3, [pc, #48]	; (800fdb4 <run_shortest+0x3cc>)
 800fd82:	881b      	ldrh	r3, [r3, #0]
 800fd84:	3b01      	subs	r3, #1
 800fd86:	4a0a      	ldr	r2, [pc, #40]	; (800fdb0 <run_shortest+0x3c8>)
 800fd88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d107      	bne.n	800fda0 <run_shortest+0x3b8>
			pass[pass_count - 1] = -1;		//passが0になってしまったときの対策
 800fd90:	4b08      	ldr	r3, [pc, #32]	; (800fdb4 <run_shortest+0x3cc>)
 800fd92:	881b      	ldrh	r3, [r3, #0]
 800fd94:	3b01      	subs	r3, #1
 800fd96:	4a06      	ldr	r2, [pc, #24]	; (800fdb0 <run_shortest+0x3c8>)
 800fd98:	f04f 31ff 	mov.w	r1, #4294967295
 800fd9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		pass_count++;
 800fda0:	4b04      	ldr	r3, [pc, #16]	; (800fdb4 <run_shortest+0x3cc>)
 800fda2:	881b      	ldrh	r3, [r3, #0]
 800fda4:	3301      	adds	r3, #1
 800fda6:	b29a      	uxth	r2, r3
 800fda8:	4b02      	ldr	r3, [pc, #8]	; (800fdb4 <run_shortest+0x3cc>)
 800fdaa:	801a      	strh	r2, [r3, #0]
		if (pass[pass_count] == 0) {
 800fdac:	e6c0      	b.n	800fb30 <run_shortest+0x148>
 800fdae:	bf00      	nop
 800fdb0:	2000083c 	.word	0x2000083c
 800fdb4:	20000834 	.word	0x20000834
			break;
 800fdb8:	bf00      	nop
	}

	pass_count = 1;
 800fdba:	4b8c      	ldr	r3, [pc, #560]	; (800ffec <run_shortest+0x604>)
 800fdbc:	2201      	movs	r2, #1
 800fdbe:	801a      	strh	r2, [r3, #0]
	if (slant_mode == 1) {
 800fdc0:	7a7b      	ldrb	r3, [r7, #9]
 800fdc2:	2b01      	cmp	r3, #1
 800fdc4:	f040 836a 	bne.w	801049c <run_shortest+0xab4>
		while (1) {		//斜め入出の圧縮
			if (pass[pass_count] == 0) {
 800fdc8:	4b88      	ldr	r3, [pc, #544]	; (800ffec <run_shortest+0x604>)
 800fdca:	881b      	ldrh	r3, [r3, #0]
 800fdcc:	461a      	mov	r2, r3
 800fdce:	4b88      	ldr	r3, [pc, #544]	; (800fff0 <run_shortest+0x608>)
 800fdd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	f000 81f1 	beq.w	80101bc <run_shortest+0x7d4>
				break;
			}

			if (pass[pass_count - 1] >= 1) {
 800fdda:	4b84      	ldr	r3, [pc, #528]	; (800ffec <run_shortest+0x604>)
 800fddc:	881b      	ldrh	r3, [r3, #0]
 800fdde:	3b01      	subs	r3, #1
 800fde0:	4a83      	ldr	r2, [pc, #524]	; (800fff0 <run_shortest+0x608>)
 800fde2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	f340 81dc 	ble.w	80101a4 <run_shortest+0x7bc>
				if (pass[pass_count] == -2 || pass[pass_count] == -3) {
 800fdec:	4b7f      	ldr	r3, [pc, #508]	; (800ffec <run_shortest+0x604>)
 800fdee:	881b      	ldrh	r3, [r3, #0]
 800fdf0:	461a      	mov	r2, r3
 800fdf2:	4b7f      	ldr	r3, [pc, #508]	; (800fff0 <run_shortest+0x608>)
 800fdf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdf8:	f113 0f02 	cmn.w	r3, #2
 800fdfc:	d009      	beq.n	800fe12 <run_shortest+0x42a>
 800fdfe:	4b7b      	ldr	r3, [pc, #492]	; (800ffec <run_shortest+0x604>)
 800fe00:	881b      	ldrh	r3, [r3, #0]
 800fe02:	461a      	mov	r2, r3
 800fe04:	4b7a      	ldr	r3, [pc, #488]	; (800fff0 <run_shortest+0x608>)
 800fe06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe0a:	f113 0f03 	cmn.w	r3, #3
 800fe0e:	f040 81c9 	bne.w	80101a4 <run_shortest+0x7bc>
//***************************************************************************************入りのモーションstart
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -3) {
 800fe12:	4b76      	ldr	r3, [pc, #472]	; (800ffec <run_shortest+0x604>)
 800fe14:	881b      	ldrh	r3, [r3, #0]
 800fe16:	461a      	mov	r2, r3
 800fe18:	4b75      	ldr	r3, [pc, #468]	; (800fff0 <run_shortest+0x608>)
 800fe1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe1e:	f113 0f02 	cmn.w	r3, #2
 800fe22:	d12d      	bne.n	800fe80 <run_shortest+0x498>
 800fe24:	4b71      	ldr	r3, [pc, #452]	; (800ffec <run_shortest+0x604>)
 800fe26:	881b      	ldrh	r3, [r3, #0]
 800fe28:	3301      	adds	r3, #1
 800fe2a:	4a71      	ldr	r2, [pc, #452]	; (800fff0 <run_shortest+0x608>)
 800fe2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe30:	f113 0f03 	cmn.w	r3, #3
 800fe34:	d124      	bne.n	800fe80 <run_shortest+0x498>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800fe36:	4b6d      	ldr	r3, [pc, #436]	; (800ffec <run_shortest+0x604>)
 800fe38:	881b      	ldrh	r3, [r3, #0]
 800fe3a:	3b01      	subs	r3, #1
 800fe3c:	4a6c      	ldr	r2, [pc, #432]	; (800fff0 <run_shortest+0x608>)
 800fe3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fe42:	4b6a      	ldr	r3, [pc, #424]	; (800ffec <run_shortest+0x604>)
 800fe44:	881b      	ldrh	r3, [r3, #0]
 800fe46:	3b01      	subs	r3, #1
 800fe48:	3a01      	subs	r2, #1
 800fe4a:	4969      	ldr	r1, [pc, #420]	; (800fff0 <run_shortest+0x608>)
 800fe4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800fe50:	4b66      	ldr	r3, [pc, #408]	; (800ffec <run_shortest+0x604>)
 800fe52:	881b      	ldrh	r3, [r3, #0]
 800fe54:	3b01      	subs	r3, #1
 800fe56:	4a66      	ldr	r2, [pc, #408]	; (800fff0 <run_shortest+0x608>)
 800fe58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d107      	bne.n	800fe70 <run_shortest+0x488>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800fe60:	4b62      	ldr	r3, [pc, #392]	; (800ffec <run_shortest+0x604>)
 800fe62:	881b      	ldrh	r3, [r3, #0]
 800fe64:	3b01      	subs	r3, #1
 800fe66:	4a62      	ldr	r2, [pc, #392]	; (800fff0 <run_shortest+0x608>)
 800fe68:	f04f 31ff 	mov.w	r1, #4294967295
 800fe6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -8;		//右45
 800fe70:	4b5e      	ldr	r3, [pc, #376]	; (800ffec <run_shortest+0x604>)
 800fe72:	881b      	ldrh	r3, [r3, #0]
 800fe74:	4619      	mov	r1, r3
 800fe76:	4b5e      	ldr	r3, [pc, #376]	; (800fff0 <run_shortest+0x608>)
 800fe78:	f06f 0207 	mvn.w	r2, #7
 800fe7c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -2) {
 800fe80:	4b5a      	ldr	r3, [pc, #360]	; (800ffec <run_shortest+0x604>)
 800fe82:	881b      	ldrh	r3, [r3, #0]
 800fe84:	461a      	mov	r2, r3
 800fe86:	4b5a      	ldr	r3, [pc, #360]	; (800fff0 <run_shortest+0x608>)
 800fe88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe8c:	f113 0f03 	cmn.w	r3, #3
 800fe90:	d12d      	bne.n	800feee <run_shortest+0x506>
 800fe92:	4b56      	ldr	r3, [pc, #344]	; (800ffec <run_shortest+0x604>)
 800fe94:	881b      	ldrh	r3, [r3, #0]
 800fe96:	3301      	adds	r3, #1
 800fe98:	4a55      	ldr	r2, [pc, #340]	; (800fff0 <run_shortest+0x608>)
 800fe9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe9e:	f113 0f02 	cmn.w	r3, #2
 800fea2:	d124      	bne.n	800feee <run_shortest+0x506>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800fea4:	4b51      	ldr	r3, [pc, #324]	; (800ffec <run_shortest+0x604>)
 800fea6:	881b      	ldrh	r3, [r3, #0]
 800fea8:	3b01      	subs	r3, #1
 800feaa:	4a51      	ldr	r2, [pc, #324]	; (800fff0 <run_shortest+0x608>)
 800feac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800feb0:	4b4e      	ldr	r3, [pc, #312]	; (800ffec <run_shortest+0x604>)
 800feb2:	881b      	ldrh	r3, [r3, #0]
 800feb4:	3b01      	subs	r3, #1
 800feb6:	3a01      	subs	r2, #1
 800feb8:	494d      	ldr	r1, [pc, #308]	; (800fff0 <run_shortest+0x608>)
 800feba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800febe:	4b4b      	ldr	r3, [pc, #300]	; (800ffec <run_shortest+0x604>)
 800fec0:	881b      	ldrh	r3, [r3, #0]
 800fec2:	3b01      	subs	r3, #1
 800fec4:	4a4a      	ldr	r2, [pc, #296]	; (800fff0 <run_shortest+0x608>)
 800fec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d107      	bne.n	800fede <run_shortest+0x4f6>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800fece:	4b47      	ldr	r3, [pc, #284]	; (800ffec <run_shortest+0x604>)
 800fed0:	881b      	ldrh	r3, [r3, #0]
 800fed2:	3b01      	subs	r3, #1
 800fed4:	4a46      	ldr	r2, [pc, #280]	; (800fff0 <run_shortest+0x608>)
 800fed6:	f04f 31ff 	mov.w	r1, #4294967295
 800feda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -9;		//左45
 800fede:	4b43      	ldr	r3, [pc, #268]	; (800ffec <run_shortest+0x604>)
 800fee0:	881b      	ldrh	r3, [r3, #0]
 800fee2:	4619      	mov	r1, r3
 800fee4:	4b42      	ldr	r3, [pc, #264]	; (800fff0 <run_shortest+0x608>)
 800fee6:	f06f 0208 	mvn.w	r2, #8
 800feea:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -2) {
 800feee:	4b3f      	ldr	r3, [pc, #252]	; (800ffec <run_shortest+0x604>)
 800fef0:	881b      	ldrh	r3, [r3, #0]
 800fef2:	461a      	mov	r2, r3
 800fef4:	4b3e      	ldr	r3, [pc, #248]	; (800fff0 <run_shortest+0x608>)
 800fef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fefa:	f113 0f02 	cmn.w	r3, #2
 800fefe:	d135      	bne.n	800ff6c <run_shortest+0x584>
 800ff00:	4b3a      	ldr	r3, [pc, #232]	; (800ffec <run_shortest+0x604>)
 800ff02:	881b      	ldrh	r3, [r3, #0]
 800ff04:	3301      	adds	r3, #1
 800ff06:	4a3a      	ldr	r2, [pc, #232]	; (800fff0 <run_shortest+0x608>)
 800ff08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff0c:	f113 0f02 	cmn.w	r3, #2
 800ff10:	d12c      	bne.n	800ff6c <run_shortest+0x584>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800ff12:	4b36      	ldr	r3, [pc, #216]	; (800ffec <run_shortest+0x604>)
 800ff14:	881b      	ldrh	r3, [r3, #0]
 800ff16:	3b01      	subs	r3, #1
 800ff18:	4a35      	ldr	r2, [pc, #212]	; (800fff0 <run_shortest+0x608>)
 800ff1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ff1e:	4b33      	ldr	r3, [pc, #204]	; (800ffec <run_shortest+0x604>)
 800ff20:	881b      	ldrh	r3, [r3, #0]
 800ff22:	3b01      	subs	r3, #1
 800ff24:	3a01      	subs	r2, #1
 800ff26:	4932      	ldr	r1, [pc, #200]	; (800fff0 <run_shortest+0x608>)
 800ff28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800ff2c:	4b2f      	ldr	r3, [pc, #188]	; (800ffec <run_shortest+0x604>)
 800ff2e:	881b      	ldrh	r3, [r3, #0]
 800ff30:	3b01      	subs	r3, #1
 800ff32:	4a2f      	ldr	r2, [pc, #188]	; (800fff0 <run_shortest+0x608>)
 800ff34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d107      	bne.n	800ff4c <run_shortest+0x564>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800ff3c:	4b2b      	ldr	r3, [pc, #172]	; (800ffec <run_shortest+0x604>)
 800ff3e:	881b      	ldrh	r3, [r3, #0]
 800ff40:	3b01      	subs	r3, #1
 800ff42:	4a2b      	ldr	r2, [pc, #172]	; (800fff0 <run_shortest+0x608>)
 800ff44:	f04f 31ff 	mov.w	r1, #4294967295
 800ff48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -10;		//右135
 800ff4c:	4b27      	ldr	r3, [pc, #156]	; (800ffec <run_shortest+0x604>)
 800ff4e:	881b      	ldrh	r3, [r3, #0]
 800ff50:	4619      	mov	r1, r3
 800ff52:	4b27      	ldr	r3, [pc, #156]	; (800fff0 <run_shortest+0x608>)
 800ff54:	f06f 0209 	mvn.w	r2, #9
 800ff58:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800ff5c:	4b23      	ldr	r3, [pc, #140]	; (800ffec <run_shortest+0x604>)
 800ff5e:	881b      	ldrh	r3, [r3, #0]
 800ff60:	3301      	adds	r3, #1
 800ff62:	4a23      	ldr	r2, [pc, #140]	; (800fff0 <run_shortest+0x608>)
 800ff64:	f04f 31ff 	mov.w	r1, #4294967295
 800ff68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -3) {
 800ff6c:	4b1f      	ldr	r3, [pc, #124]	; (800ffec <run_shortest+0x604>)
 800ff6e:	881b      	ldrh	r3, [r3, #0]
 800ff70:	461a      	mov	r2, r3
 800ff72:	4b1f      	ldr	r3, [pc, #124]	; (800fff0 <run_shortest+0x608>)
 800ff74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff78:	f113 0f03 	cmn.w	r3, #3
 800ff7c:	d140      	bne.n	8010000 <run_shortest+0x618>
 800ff7e:	4b1b      	ldr	r3, [pc, #108]	; (800ffec <run_shortest+0x604>)
 800ff80:	881b      	ldrh	r3, [r3, #0]
 800ff82:	3301      	adds	r3, #1
 800ff84:	4a1a      	ldr	r2, [pc, #104]	; (800fff0 <run_shortest+0x608>)
 800ff86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff8a:	f113 0f03 	cmn.w	r3, #3
 800ff8e:	d137      	bne.n	8010000 <run_shortest+0x618>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800ff90:	4b16      	ldr	r3, [pc, #88]	; (800ffec <run_shortest+0x604>)
 800ff92:	881b      	ldrh	r3, [r3, #0]
 800ff94:	3b01      	subs	r3, #1
 800ff96:	4a16      	ldr	r2, [pc, #88]	; (800fff0 <run_shortest+0x608>)
 800ff98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ff9c:	4b13      	ldr	r3, [pc, #76]	; (800ffec <run_shortest+0x604>)
 800ff9e:	881b      	ldrh	r3, [r3, #0]
 800ffa0:	3b01      	subs	r3, #1
 800ffa2:	3a01      	subs	r2, #1
 800ffa4:	4912      	ldr	r1, [pc, #72]	; (800fff0 <run_shortest+0x608>)
 800ffa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800ffaa:	4b10      	ldr	r3, [pc, #64]	; (800ffec <run_shortest+0x604>)
 800ffac:	881b      	ldrh	r3, [r3, #0]
 800ffae:	3b01      	subs	r3, #1
 800ffb0:	4a0f      	ldr	r2, [pc, #60]	; (800fff0 <run_shortest+0x608>)
 800ffb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d107      	bne.n	800ffca <run_shortest+0x5e2>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800ffba:	4b0c      	ldr	r3, [pc, #48]	; (800ffec <run_shortest+0x604>)
 800ffbc:	881b      	ldrh	r3, [r3, #0]
 800ffbe:	3b01      	subs	r3, #1
 800ffc0:	4a0b      	ldr	r2, [pc, #44]	; (800fff0 <run_shortest+0x608>)
 800ffc2:	f04f 31ff 	mov.w	r1, #4294967295
 800ffc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -11;		//左135
 800ffca:	4b08      	ldr	r3, [pc, #32]	; (800ffec <run_shortest+0x604>)
 800ffcc:	881b      	ldrh	r3, [r3, #0]
 800ffce:	4619      	mov	r1, r3
 800ffd0:	4b07      	ldr	r3, [pc, #28]	; (800fff0 <run_shortest+0x608>)
 800ffd2:	f06f 020a 	mvn.w	r2, #10
 800ffd6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800ffda:	4b04      	ldr	r3, [pc, #16]	; (800ffec <run_shortest+0x604>)
 800ffdc:	881b      	ldrh	r3, [r3, #0]
 800ffde:	3301      	adds	r3, #1
 800ffe0:	4a03      	ldr	r2, [pc, #12]	; (800fff0 <run_shortest+0x608>)
 800ffe2:	f04f 31ff 	mov.w	r1, #4294967295
 800ffe6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
//***************************************************************************************入りのモーションend

//***************************************************************************************途中のモーションstart
					while (pass[pass_count] <= -1) {
 800ffea:	e009      	b.n	8010000 <run_shortest+0x618>
 800ffec:	20000834 	.word	0x20000834
 800fff0:	2000083c 	.word	0x2000083c
						pass_count++;
 800fff4:	4b6f      	ldr	r3, [pc, #444]	; (80101b4 <run_shortest+0x7cc>)
 800fff6:	881b      	ldrh	r3, [r3, #0]
 800fff8:	3301      	adds	r3, #1
 800fffa:	b29a      	uxth	r2, r3
 800fffc:	4b6d      	ldr	r3, [pc, #436]	; (80101b4 <run_shortest+0x7cc>)
 800fffe:	801a      	strh	r2, [r3, #0]
					while (pass[pass_count] <= -1) {
 8010000:	4b6c      	ldr	r3, [pc, #432]	; (80101b4 <run_shortest+0x7cc>)
 8010002:	881b      	ldrh	r3, [r3, #0]
 8010004:	461a      	mov	r2, r3
 8010006:	4b6c      	ldr	r3, [pc, #432]	; (80101b8 <run_shortest+0x7d0>)
 8010008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801000c:	2b00      	cmp	r3, #0
 801000e:	dbf1      	blt.n	800fff4 <run_shortest+0x60c>
					}
//***************************************************************************************途中のモーションend

//***************************************************************************************出のモーションstart
					if (pass[pass_count - 1] == -2) {
 8010010:	4b68      	ldr	r3, [pc, #416]	; (80101b4 <run_shortest+0x7cc>)
 8010012:	881b      	ldrh	r3, [r3, #0]
 8010014:	3b01      	subs	r3, #1
 8010016:	4a68      	ldr	r2, [pc, #416]	; (80101b8 <run_shortest+0x7d0>)
 8010018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801001c:	f113 0f02 	cmn.w	r3, #2
 8010020:	d15b      	bne.n	80100da <run_shortest+0x6f2>
						if (pass[pass_count - 2] == -2) {
 8010022:	4b64      	ldr	r3, [pc, #400]	; (80101b4 <run_shortest+0x7cc>)
 8010024:	881b      	ldrh	r3, [r3, #0]
 8010026:	3b02      	subs	r3, #2
 8010028:	4a63      	ldr	r2, [pc, #396]	; (80101b8 <run_shortest+0x7d0>)
 801002a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801002e:	f113 0f02 	cmn.w	r3, #2
 8010032:	d12d      	bne.n	8010090 <run_shortest+0x6a8>
							pass[pass_count] = pass[pass_count] - 1;
 8010034:	4b5f      	ldr	r3, [pc, #380]	; (80101b4 <run_shortest+0x7cc>)
 8010036:	881b      	ldrh	r3, [r3, #0]
 8010038:	461a      	mov	r2, r3
 801003a:	4b5f      	ldr	r3, [pc, #380]	; (80101b8 <run_shortest+0x7d0>)
 801003c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010040:	4a5c      	ldr	r2, [pc, #368]	; (80101b4 <run_shortest+0x7cc>)
 8010042:	8812      	ldrh	r2, [r2, #0]
 8010044:	4611      	mov	r1, r2
 8010046:	3b01      	subs	r3, #1
 8010048:	4a5b      	ldr	r2, [pc, #364]	; (80101b8 <run_shortest+0x7d0>)
 801004a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 801004e:	4b59      	ldr	r3, [pc, #356]	; (80101b4 <run_shortest+0x7cc>)
 8010050:	881b      	ldrh	r3, [r3, #0]
 8010052:	461a      	mov	r2, r3
 8010054:	4b58      	ldr	r3, [pc, #352]	; (80101b8 <run_shortest+0x7d0>)
 8010056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d107      	bne.n	801006e <run_shortest+0x686>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 801005e:	4b55      	ldr	r3, [pc, #340]	; (80101b4 <run_shortest+0x7cc>)
 8010060:	881b      	ldrh	r3, [r3, #0]
 8010062:	4619      	mov	r1, r3
 8010064:	4b54      	ldr	r3, [pc, #336]	; (80101b8 <run_shortest+0x7d0>)
 8010066:	f04f 32ff 	mov.w	r2, #4294967295
 801006a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -14;		//右135
 801006e:	4b51      	ldr	r3, [pc, #324]	; (80101b4 <run_shortest+0x7cc>)
 8010070:	881b      	ldrh	r3, [r3, #0]
 8010072:	3b01      	subs	r3, #1
 8010074:	4a50      	ldr	r2, [pc, #320]	; (80101b8 <run_shortest+0x7d0>)
 8010076:	f06f 010d 	mvn.w	r1, #13
 801007a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 801007e:	4b4d      	ldr	r3, [pc, #308]	; (80101b4 <run_shortest+0x7cc>)
 8010080:	881b      	ldrh	r3, [r3, #0]
 8010082:	3b02      	subs	r3, #2
 8010084:	4a4c      	ldr	r2, [pc, #304]	; (80101b8 <run_shortest+0x7d0>)
 8010086:	f04f 31ff 	mov.w	r1, #4294967295
 801008a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801008e:	e024      	b.n	80100da <run_shortest+0x6f2>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 8010090:	4b48      	ldr	r3, [pc, #288]	; (80101b4 <run_shortest+0x7cc>)
 8010092:	881b      	ldrh	r3, [r3, #0]
 8010094:	461a      	mov	r2, r3
 8010096:	4b48      	ldr	r3, [pc, #288]	; (80101b8 <run_shortest+0x7d0>)
 8010098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801009c:	4a45      	ldr	r2, [pc, #276]	; (80101b4 <run_shortest+0x7cc>)
 801009e:	8812      	ldrh	r2, [r2, #0]
 80100a0:	4611      	mov	r1, r2
 80100a2:	3b01      	subs	r3, #1
 80100a4:	4a44      	ldr	r2, [pc, #272]	; (80101b8 <run_shortest+0x7d0>)
 80100a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 80100aa:	4b42      	ldr	r3, [pc, #264]	; (80101b4 <run_shortest+0x7cc>)
 80100ac:	881b      	ldrh	r3, [r3, #0]
 80100ae:	461a      	mov	r2, r3
 80100b0:	4b41      	ldr	r3, [pc, #260]	; (80101b8 <run_shortest+0x7d0>)
 80100b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d107      	bne.n	80100ca <run_shortest+0x6e2>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 80100ba:	4b3e      	ldr	r3, [pc, #248]	; (80101b4 <run_shortest+0x7cc>)
 80100bc:	881b      	ldrh	r3, [r3, #0]
 80100be:	4619      	mov	r1, r3
 80100c0:	4b3d      	ldr	r3, [pc, #244]	; (80101b8 <run_shortest+0x7d0>)
 80100c2:	f04f 32ff 	mov.w	r2, #4294967295
 80100c6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -12;		//右45
 80100ca:	4b3a      	ldr	r3, [pc, #232]	; (80101b4 <run_shortest+0x7cc>)
 80100cc:	881b      	ldrh	r3, [r3, #0]
 80100ce:	3b01      	subs	r3, #1
 80100d0:	4a39      	ldr	r2, [pc, #228]	; (80101b8 <run_shortest+0x7d0>)
 80100d2:	f06f 010b 	mvn.w	r1, #11
 80100d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

					}
					if (pass[pass_count - 1] == -3) {
 80100da:	4b36      	ldr	r3, [pc, #216]	; (80101b4 <run_shortest+0x7cc>)
 80100dc:	881b      	ldrh	r3, [r3, #0]
 80100de:	3b01      	subs	r3, #1
 80100e0:	4a35      	ldr	r2, [pc, #212]	; (80101b8 <run_shortest+0x7d0>)
 80100e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100e6:	f113 0f03 	cmn.w	r3, #3
 80100ea:	d15b      	bne.n	80101a4 <run_shortest+0x7bc>
						if (pass[pass_count - 2] == -3) {
 80100ec:	4b31      	ldr	r3, [pc, #196]	; (80101b4 <run_shortest+0x7cc>)
 80100ee:	881b      	ldrh	r3, [r3, #0]
 80100f0:	3b02      	subs	r3, #2
 80100f2:	4a31      	ldr	r2, [pc, #196]	; (80101b8 <run_shortest+0x7d0>)
 80100f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100f8:	f113 0f03 	cmn.w	r3, #3
 80100fc:	d12d      	bne.n	801015a <run_shortest+0x772>
							pass[pass_count] = pass[pass_count] - 1;
 80100fe:	4b2d      	ldr	r3, [pc, #180]	; (80101b4 <run_shortest+0x7cc>)
 8010100:	881b      	ldrh	r3, [r3, #0]
 8010102:	461a      	mov	r2, r3
 8010104:	4b2c      	ldr	r3, [pc, #176]	; (80101b8 <run_shortest+0x7d0>)
 8010106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801010a:	4a2a      	ldr	r2, [pc, #168]	; (80101b4 <run_shortest+0x7cc>)
 801010c:	8812      	ldrh	r2, [r2, #0]
 801010e:	4611      	mov	r1, r2
 8010110:	3b01      	subs	r3, #1
 8010112:	4a29      	ldr	r2, [pc, #164]	; (80101b8 <run_shortest+0x7d0>)
 8010114:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 8010118:	4b26      	ldr	r3, [pc, #152]	; (80101b4 <run_shortest+0x7cc>)
 801011a:	881b      	ldrh	r3, [r3, #0]
 801011c:	461a      	mov	r2, r3
 801011e:	4b26      	ldr	r3, [pc, #152]	; (80101b8 <run_shortest+0x7d0>)
 8010120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d107      	bne.n	8010138 <run_shortest+0x750>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 8010128:	4b22      	ldr	r3, [pc, #136]	; (80101b4 <run_shortest+0x7cc>)
 801012a:	881b      	ldrh	r3, [r3, #0]
 801012c:	4619      	mov	r1, r3
 801012e:	4b22      	ldr	r3, [pc, #136]	; (80101b8 <run_shortest+0x7d0>)
 8010130:	f04f 32ff 	mov.w	r2, #4294967295
 8010134:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -15;		//左135
 8010138:	4b1e      	ldr	r3, [pc, #120]	; (80101b4 <run_shortest+0x7cc>)
 801013a:	881b      	ldrh	r3, [r3, #0]
 801013c:	3b01      	subs	r3, #1
 801013e:	4a1e      	ldr	r2, [pc, #120]	; (80101b8 <run_shortest+0x7d0>)
 8010140:	f06f 010e 	mvn.w	r1, #14
 8010144:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 8010148:	4b1a      	ldr	r3, [pc, #104]	; (80101b4 <run_shortest+0x7cc>)
 801014a:	881b      	ldrh	r3, [r3, #0]
 801014c:	3b02      	subs	r3, #2
 801014e:	4a1a      	ldr	r2, [pc, #104]	; (80101b8 <run_shortest+0x7d0>)
 8010150:	f04f 31ff 	mov.w	r1, #4294967295
 8010154:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8010158:	e024      	b.n	80101a4 <run_shortest+0x7bc>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 801015a:	4b16      	ldr	r3, [pc, #88]	; (80101b4 <run_shortest+0x7cc>)
 801015c:	881b      	ldrh	r3, [r3, #0]
 801015e:	461a      	mov	r2, r3
 8010160:	4b15      	ldr	r3, [pc, #84]	; (80101b8 <run_shortest+0x7d0>)
 8010162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010166:	4a13      	ldr	r2, [pc, #76]	; (80101b4 <run_shortest+0x7cc>)
 8010168:	8812      	ldrh	r2, [r2, #0]
 801016a:	4611      	mov	r1, r2
 801016c:	3b01      	subs	r3, #1
 801016e:	4a12      	ldr	r2, [pc, #72]	; (80101b8 <run_shortest+0x7d0>)
 8010170:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 8010174:	4b0f      	ldr	r3, [pc, #60]	; (80101b4 <run_shortest+0x7cc>)
 8010176:	881b      	ldrh	r3, [r3, #0]
 8010178:	461a      	mov	r2, r3
 801017a:	4b0f      	ldr	r3, [pc, #60]	; (80101b8 <run_shortest+0x7d0>)
 801017c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d107      	bne.n	8010194 <run_shortest+0x7ac>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 8010184:	4b0b      	ldr	r3, [pc, #44]	; (80101b4 <run_shortest+0x7cc>)
 8010186:	881b      	ldrh	r3, [r3, #0]
 8010188:	4619      	mov	r1, r3
 801018a:	4b0b      	ldr	r3, [pc, #44]	; (80101b8 <run_shortest+0x7d0>)
 801018c:	f04f 32ff 	mov.w	r2, #4294967295
 8010190:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -13;		//左45
 8010194:	4b07      	ldr	r3, [pc, #28]	; (80101b4 <run_shortest+0x7cc>)
 8010196:	881b      	ldrh	r3, [r3, #0]
 8010198:	3b01      	subs	r3, #1
 801019a:	4a07      	ldr	r2, [pc, #28]	; (80101b8 <run_shortest+0x7d0>)
 801019c:	f06f 010c 	mvn.w	r1, #12
 80101a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//***************************************************************************************出のモーションend
				}
			}
			//		if(){}

			pass_count++;
 80101a4:	4b03      	ldr	r3, [pc, #12]	; (80101b4 <run_shortest+0x7cc>)
 80101a6:	881b      	ldrh	r3, [r3, #0]
 80101a8:	3301      	adds	r3, #1
 80101aa:	b29a      	uxth	r2, r3
 80101ac:	4b01      	ldr	r3, [pc, #4]	; (80101b4 <run_shortest+0x7cc>)
 80101ae:	801a      	strh	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 80101b0:	e60a      	b.n	800fdc8 <run_shortest+0x3e0>
 80101b2:	bf00      	nop
 80101b4:	20000834 	.word	0x20000834
 80101b8:	2000083c 	.word	0x2000083c
				break;
 80101bc:	bf00      	nop
		}

		pass_count = 1;
 80101be:	4ba3      	ldr	r3, [pc, #652]	; (801044c <run_shortest+0xa64>)
 80101c0:	2201      	movs	r2, #1
 80101c2:	801a      	strh	r2, [r3, #0]
		while (1) {		//斜の圧縮
			if (pass[pass_count] == 0) {
 80101c4:	4ba1      	ldr	r3, [pc, #644]	; (801044c <run_shortest+0xa64>)
 80101c6:	881b      	ldrh	r3, [r3, #0]
 80101c8:	461a      	mov	r2, r3
 80101ca:	4ba1      	ldr	r3, [pc, #644]	; (8010450 <run_shortest+0xa68>)
 80101cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	f000 813f 	beq.w	8010454 <run_shortest+0xa6c>
				break;
			}

			if (pass[pass_count] == -8 || pass[pass_count] == -9
 80101d6:	4b9d      	ldr	r3, [pc, #628]	; (801044c <run_shortest+0xa64>)
 80101d8:	881b      	ldrh	r3, [r3, #0]
 80101da:	461a      	mov	r2, r3
 80101dc:	4b9c      	ldr	r3, [pc, #624]	; (8010450 <run_shortest+0xa68>)
 80101de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101e2:	f113 0f08 	cmn.w	r3, #8
 80101e6:	d01b      	beq.n	8010220 <run_shortest+0x838>
 80101e8:	4b98      	ldr	r3, [pc, #608]	; (801044c <run_shortest+0xa64>)
 80101ea:	881b      	ldrh	r3, [r3, #0]
 80101ec:	461a      	mov	r2, r3
 80101ee:	4b98      	ldr	r3, [pc, #608]	; (8010450 <run_shortest+0xa68>)
 80101f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101f4:	f113 0f09 	cmn.w	r3, #9
 80101f8:	d012      	beq.n	8010220 <run_shortest+0x838>
					|| pass[pass_count] == -10 || pass[pass_count] == -11) {
 80101fa:	4b94      	ldr	r3, [pc, #592]	; (801044c <run_shortest+0xa64>)
 80101fc:	881b      	ldrh	r3, [r3, #0]
 80101fe:	461a      	mov	r2, r3
 8010200:	4b93      	ldr	r3, [pc, #588]	; (8010450 <run_shortest+0xa68>)
 8010202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010206:	f113 0f0a 	cmn.w	r3, #10
 801020a:	d009      	beq.n	8010220 <run_shortest+0x838>
 801020c:	4b8f      	ldr	r3, [pc, #572]	; (801044c <run_shortest+0xa64>)
 801020e:	881b      	ldrh	r3, [r3, #0]
 8010210:	461a      	mov	r2, r3
 8010212:	4b8f      	ldr	r3, [pc, #572]	; (8010450 <run_shortest+0xa68>)
 8010214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010218:	f113 0f0b 	cmn.w	r3, #11
 801021c:	f040 810f 	bne.w	801043e <run_shortest+0xa56>
				if (pass[pass_count] == -8 || pass[pass_count] == -10) {
 8010220:	4b8a      	ldr	r3, [pc, #552]	; (801044c <run_shortest+0xa64>)
 8010222:	881b      	ldrh	r3, [r3, #0]
 8010224:	461a      	mov	r2, r3
 8010226:	4b8a      	ldr	r3, [pc, #552]	; (8010450 <run_shortest+0xa68>)
 8010228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801022c:	f113 0f08 	cmn.w	r3, #8
 8010230:	d008      	beq.n	8010244 <run_shortest+0x85c>
 8010232:	4b86      	ldr	r3, [pc, #536]	; (801044c <run_shortest+0xa64>)
 8010234:	881b      	ldrh	r3, [r3, #0]
 8010236:	461a      	mov	r2, r3
 8010238:	4b85      	ldr	r3, [pc, #532]	; (8010450 <run_shortest+0xa68>)
 801023a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801023e:	f113 0f0a 	cmn.w	r3, #10
 8010242:	d102      	bne.n	801024a <run_shortest+0x862>
					slant_direction = -3;
 8010244:	f06f 0302 	mvn.w	r3, #2
 8010248:	643b      	str	r3, [r7, #64]	; 0x40
				}
				if (pass[pass_count] == -9 || pass[pass_count] == -11) {
 801024a:	4b80      	ldr	r3, [pc, #512]	; (801044c <run_shortest+0xa64>)
 801024c:	881b      	ldrh	r3, [r3, #0]
 801024e:	461a      	mov	r2, r3
 8010250:	4b7f      	ldr	r3, [pc, #508]	; (8010450 <run_shortest+0xa68>)
 8010252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010256:	f113 0f09 	cmn.w	r3, #9
 801025a:	d008      	beq.n	801026e <run_shortest+0x886>
 801025c:	4b7b      	ldr	r3, [pc, #492]	; (801044c <run_shortest+0xa64>)
 801025e:	881b      	ldrh	r3, [r3, #0]
 8010260:	461a      	mov	r2, r3
 8010262:	4b7b      	ldr	r3, [pc, #492]	; (8010450 <run_shortest+0xa68>)
 8010264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010268:	f113 0f0b 	cmn.w	r3, #11
 801026c:	d102      	bne.n	8010274 <run_shortest+0x88c>
					slant_direction = -2;
 801026e:	f06f 0301 	mvn.w	r3, #1
 8010272:	643b      	str	r3, [r7, #64]	; 0x40
				}
				pass_count++;
 8010274:	4b75      	ldr	r3, [pc, #468]	; (801044c <run_shortest+0xa64>)
 8010276:	881b      	ldrh	r3, [r3, #0]
 8010278:	3301      	adds	r3, #1
 801027a:	b29a      	uxth	r2, r3
 801027c:	4b73      	ldr	r3, [pc, #460]	; (801044c <run_shortest+0xa64>)
 801027e:	801a      	strh	r2, [r3, #0]
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 8010280:	4b72      	ldr	r3, [pc, #456]	; (801044c <run_shortest+0xa64>)
 8010282:	881b      	ldrh	r3, [r3, #0]
 8010284:	461a      	mov	r2, r3
 8010286:	4b72      	ldr	r3, [pc, #456]	; (8010450 <run_shortest+0xa68>)
 8010288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801028c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010290:	d105      	bne.n	801029e <run_shortest+0x8b6>
					pass_count++;
 8010292:	4b6e      	ldr	r3, [pc, #440]	; (801044c <run_shortest+0xa64>)
 8010294:	881b      	ldrh	r3, [r3, #0]
 8010296:	3301      	adds	r3, #1
 8010298:	b29a      	uxth	r2, r3
 801029a:	4b6c      	ldr	r3, [pc, #432]	; (801044c <run_shortest+0xa64>)
 801029c:	801a      	strh	r2, [r3, #0]
				}
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 801029e:	4b6b      	ldr	r3, [pc, #428]	; (801044c <run_shortest+0xa64>)
 80102a0:	881b      	ldrh	r3, [r3, #0]
 80102a2:	461a      	mov	r2, r3
 80102a4:	4b6a      	ldr	r3, [pc, #424]	; (8010450 <run_shortest+0xa68>)
 80102a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ae:	d105      	bne.n	80102bc <run_shortest+0x8d4>
					pass_count++;
 80102b0:	4b66      	ldr	r3, [pc, #408]	; (801044c <run_shortest+0xa64>)
 80102b2:	881b      	ldrh	r3, [r3, #0]
 80102b4:	3301      	adds	r3, #1
 80102b6:	b29a      	uxth	r2, r3
 80102b8:	4b64      	ldr	r3, [pc, #400]	; (801044c <run_shortest+0xa64>)
 80102ba:	801a      	strh	r2, [r3, #0]
				}
				if (pass[pass_count] >= -3) {
 80102bc:	4b63      	ldr	r3, [pc, #396]	; (801044c <run_shortest+0xa64>)
 80102be:	881b      	ldrh	r3, [r3, #0]
 80102c0:	461a      	mov	r2, r3
 80102c2:	4b63      	ldr	r3, [pc, #396]	; (8010450 <run_shortest+0xa68>)
 80102c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102c8:	f113 0f03 	cmn.w	r3, #3
 80102cc:	f2c0 80ad 	blt.w	801042a <run_shortest+0xa42>
					slant_count = pass_count;
 80102d0:	4b5e      	ldr	r3, [pc, #376]	; (801044c <run_shortest+0xa64>)
 80102d2:	881b      	ldrh	r3, [r3, #0]
 80102d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pass[slant_count] = 51;
 80102d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80102dc:	4a5c      	ldr	r2, [pc, #368]	; (8010450 <run_shortest+0xa68>)
 80102de:	2133      	movs	r1, #51	; 0x33
 80102e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					pass_count++;
 80102e4:	4b59      	ldr	r3, [pc, #356]	; (801044c <run_shortest+0xa64>)
 80102e6:	881b      	ldrh	r3, [r3, #0]
 80102e8:	3301      	adds	r3, #1
 80102ea:	b29a      	uxth	r2, r3
 80102ec:	4b57      	ldr	r3, [pc, #348]	; (801044c <run_shortest+0xa64>)
 80102ee:	801a      	strh	r2, [r3, #0]
				}

				//***************************************************************************************途中のモーションstart
				while (pass[pass_count] >= -3) {
 80102f0:	e09b      	b.n	801042a <run_shortest+0xa42>
					if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 80102f2:	4b56      	ldr	r3, [pc, #344]	; (801044c <run_shortest+0xa64>)
 80102f4:	881b      	ldrh	r3, [r3, #0]
 80102f6:	461a      	mov	r2, r3
 80102f8:	4b55      	ldr	r3, [pc, #340]	; (8010450 <run_shortest+0xa68>)
 80102fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010302:	d105      	bne.n	8010310 <run_shortest+0x928>
						pass_count++;
 8010304:	4b51      	ldr	r3, [pc, #324]	; (801044c <run_shortest+0xa64>)
 8010306:	881b      	ldrh	r3, [r3, #0]
 8010308:	3301      	adds	r3, #1
 801030a:	b29a      	uxth	r2, r3
 801030c:	4b4f      	ldr	r3, [pc, #316]	; (801044c <run_shortest+0xa64>)
 801030e:	801a      	strh	r2, [r3, #0]
					}
					if (pass[pass_count] == -12 || pass[pass_count] == -13
 8010310:	4b4e      	ldr	r3, [pc, #312]	; (801044c <run_shortest+0xa64>)
 8010312:	881b      	ldrh	r3, [r3, #0]
 8010314:	461a      	mov	r2, r3
 8010316:	4b4e      	ldr	r3, [pc, #312]	; (8010450 <run_shortest+0xa68>)
 8010318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801031c:	f113 0f0c 	cmn.w	r3, #12
 8010320:	f000 808d 	beq.w	801043e <run_shortest+0xa56>
 8010324:	4b49      	ldr	r3, [pc, #292]	; (801044c <run_shortest+0xa64>)
 8010326:	881b      	ldrh	r3, [r3, #0]
 8010328:	461a      	mov	r2, r3
 801032a:	4b49      	ldr	r3, [pc, #292]	; (8010450 <run_shortest+0xa68>)
 801032c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010330:	f113 0f0d 	cmn.w	r3, #13
 8010334:	f000 8083 	beq.w	801043e <run_shortest+0xa56>
							|| pass[pass_count] == -14
 8010338:	4b44      	ldr	r3, [pc, #272]	; (801044c <run_shortest+0xa64>)
 801033a:	881b      	ldrh	r3, [r3, #0]
 801033c:	461a      	mov	r2, r3
 801033e:	4b44      	ldr	r3, [pc, #272]	; (8010450 <run_shortest+0xa68>)
 8010340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010344:	f113 0f0e 	cmn.w	r3, #14
 8010348:	d079      	beq.n	801043e <run_shortest+0xa56>
							|| pass[pass_count] == -15) {
 801034a:	4b40      	ldr	r3, [pc, #256]	; (801044c <run_shortest+0xa64>)
 801034c:	881b      	ldrh	r3, [r3, #0]
 801034e:	461a      	mov	r2, r3
 8010350:	4b3f      	ldr	r3, [pc, #252]	; (8010450 <run_shortest+0xa68>)
 8010352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010356:	f113 0f0f 	cmn.w	r3, #15
 801035a:	d070      	beq.n	801043e <run_shortest+0xa56>
						break;
					}
					if (pass[pass_count] == slant_direction) {
 801035c:	4b3b      	ldr	r3, [pc, #236]	; (801044c <run_shortest+0xa64>)
 801035e:	881b      	ldrh	r3, [r3, #0]
 8010360:	461a      	mov	r2, r3
 8010362:	4b3b      	ldr	r3, [pc, #236]	; (8010450 <run_shortest+0xa68>)
 8010364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010368:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801036a:	429a      	cmp	r2, r3
 801036c:	d127      	bne.n	80103be <run_shortest+0x9d6>
						pass[slant_count] = pass[slant_count] - 1;
 801036e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010372:	4a37      	ldr	r2, [pc, #220]	; (8010450 <run_shortest+0xa68>)
 8010374:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010378:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801037c:	3a01      	subs	r2, #1
 801037e:	4934      	ldr	r1, [pc, #208]	; (8010450 <run_shortest+0xa68>)
 8010380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						slant_count = pass_count;
 8010384:	4b31      	ldr	r3, [pc, #196]	; (801044c <run_shortest+0xa64>)
 8010386:	881b      	ldrh	r3, [r3, #0]
 8010388:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						if (slant_direction == -2) {
 801038c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801038e:	f113 0f02 	cmn.w	r3, #2
 8010392:	d107      	bne.n	80103a4 <run_shortest+0x9bc>
							pass[pass_count] = -16;
 8010394:	4b2d      	ldr	r3, [pc, #180]	; (801044c <run_shortest+0xa64>)
 8010396:	881b      	ldrh	r3, [r3, #0]
 8010398:	4619      	mov	r1, r3
 801039a:	4b2d      	ldr	r3, [pc, #180]	; (8010450 <run_shortest+0xa68>)
 801039c:	f06f 020f 	mvn.w	r2, #15
 80103a0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						}
						if (slant_direction == -3) {
 80103a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103a6:	f113 0f03 	cmn.w	r3, #3
 80103aa:	d138      	bne.n	801041e <run_shortest+0xa36>
							pass[pass_count] = -17;
 80103ac:	4b27      	ldr	r3, [pc, #156]	; (801044c <run_shortest+0xa64>)
 80103ae:	881b      	ldrh	r3, [r3, #0]
 80103b0:	4619      	mov	r1, r3
 80103b2:	4b27      	ldr	r3, [pc, #156]	; (8010450 <run_shortest+0xa68>)
 80103b4:	f06f 0210 	mvn.w	r2, #16
 80103b8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80103bc:	e02f      	b.n	801041e <run_shortest+0xa36>
						}

					} else {
						if (pass[slant_count] >= 50) {
 80103be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80103c2:	4a23      	ldr	r2, [pc, #140]	; (8010450 <run_shortest+0xa68>)
 80103c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103c8:	2b31      	cmp	r3, #49	; 0x31
 80103ca:	dd08      	ble.n	80103de <run_shortest+0x9f6>
							pass[pass_count] = -1;
 80103cc:	4b1f      	ldr	r3, [pc, #124]	; (801044c <run_shortest+0xa64>)
 80103ce:	881b      	ldrh	r3, [r3, #0]
 80103d0:	4619      	mov	r1, r3
 80103d2:	4b1f      	ldr	r3, [pc, #124]	; (8010450 <run_shortest+0xa68>)
 80103d4:	f04f 32ff 	mov.w	r2, #4294967295
 80103d8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80103dc:	e009      	b.n	80103f2 <run_shortest+0xa0a>
						} else {
							slant_count = pass_count;
 80103de:	4b1b      	ldr	r3, [pc, #108]	; (801044c <run_shortest+0xa64>)
 80103e0:	881b      	ldrh	r3, [r3, #0]
 80103e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							pass[slant_count] = 50;
 80103e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80103ea:	4a19      	ldr	r2, [pc, #100]	; (8010450 <run_shortest+0xa68>)
 80103ec:	2132      	movs	r1, #50	; 0x32
 80103ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[slant_count] = pass[slant_count] + 1;
 80103f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80103f6:	4a16      	ldr	r2, [pc, #88]	; (8010450 <run_shortest+0xa68>)
 80103f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80103fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010400:	3201      	adds	r2, #1
 8010402:	4913      	ldr	r1, [pc, #76]	; (8010450 <run_shortest+0xa68>)
 8010404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (slant_direction == -2) {
 8010408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801040a:	f113 0f02 	cmn.w	r3, #2
 801040e:	d103      	bne.n	8010418 <run_shortest+0xa30>
							slant_direction = -3;
 8010410:	f06f 0302 	mvn.w	r3, #2
 8010414:	643b      	str	r3, [r7, #64]	; 0x40
 8010416:	e002      	b.n	801041e <run_shortest+0xa36>
						} else {
							slant_direction = -2;
 8010418:	f06f 0301 	mvn.w	r3, #1
 801041c:	643b      	str	r3, [r7, #64]	; 0x40
						}

					}

					pass_count++;
 801041e:	4b0b      	ldr	r3, [pc, #44]	; (801044c <run_shortest+0xa64>)
 8010420:	881b      	ldrh	r3, [r3, #0]
 8010422:	3301      	adds	r3, #1
 8010424:	b29a      	uxth	r2, r3
 8010426:	4b09      	ldr	r3, [pc, #36]	; (801044c <run_shortest+0xa64>)
 8010428:	801a      	strh	r2, [r3, #0]
				while (pass[pass_count] >= -3) {
 801042a:	4b08      	ldr	r3, [pc, #32]	; (801044c <run_shortest+0xa64>)
 801042c:	881b      	ldrh	r3, [r3, #0]
 801042e:	461a      	mov	r2, r3
 8010430:	4b07      	ldr	r3, [pc, #28]	; (8010450 <run_shortest+0xa68>)
 8010432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010436:	f113 0f03 	cmn.w	r3, #3
 801043a:	f6bf af5a 	bge.w	80102f2 <run_shortest+0x90a>

			}

			//		if(){}

			pass_count++;
 801043e:	4b03      	ldr	r3, [pc, #12]	; (801044c <run_shortest+0xa64>)
 8010440:	881b      	ldrh	r3, [r3, #0]
 8010442:	3301      	adds	r3, #1
 8010444:	b29a      	uxth	r2, r3
 8010446:	4b01      	ldr	r3, [pc, #4]	; (801044c <run_shortest+0xa64>)
 8010448:	801a      	strh	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 801044a:	e6bb      	b.n	80101c4 <run_shortest+0x7dc>
 801044c:	20000834 	.word	0x20000834
 8010450:	2000083c 	.word	0x2000083c
				break;
 8010454:	bf00      	nop
		}
		pass_count=0;
 8010456:	4bb1      	ldr	r3, [pc, #708]	; (801071c <run_shortest+0xd34>)
 8010458:	2200      	movs	r2, #0
 801045a:	801a      	strh	r2, [r3, #0]
		while (1) {		//パス圧縮

			if (pass[pass_count] == 50) {
 801045c:	4baf      	ldr	r3, [pc, #700]	; (801071c <run_shortest+0xd34>)
 801045e:	881b      	ldrh	r3, [r3, #0]
 8010460:	461a      	mov	r2, r3
 8010462:	4baf      	ldr	r3, [pc, #700]	; (8010720 <run_shortest+0xd38>)
 8010464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010468:	2b32      	cmp	r3, #50	; 0x32
 801046a:	d107      	bne.n	801047c <run_shortest+0xa94>
				pass[pass_count] =-1;
 801046c:	4bab      	ldr	r3, [pc, #684]	; (801071c <run_shortest+0xd34>)
 801046e:	881b      	ldrh	r3, [r3, #0]
 8010470:	4619      	mov	r1, r3
 8010472:	4bab      	ldr	r3, [pc, #684]	; (8010720 <run_shortest+0xd38>)
 8010474:	f04f 32ff 	mov.w	r2, #4294967295
 8010478:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

			}
			if (pass[pass_count] == 0) {
 801047c:	4ba7      	ldr	r3, [pc, #668]	; (801071c <run_shortest+0xd34>)
 801047e:	881b      	ldrh	r3, [r3, #0]
 8010480:	461a      	mov	r2, r3
 8010482:	4ba7      	ldr	r3, [pc, #668]	; (8010720 <run_shortest+0xd38>)
 8010484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d006      	beq.n	801049a <run_shortest+0xab2>
				break;
			}
			pass_count++;
 801048c:	4ba3      	ldr	r3, [pc, #652]	; (801071c <run_shortest+0xd34>)
 801048e:	881b      	ldrh	r3, [r3, #0]
 8010490:	3301      	adds	r3, #1
 8010492:	b29a      	uxth	r2, r3
 8010494:	4ba1      	ldr	r3, [pc, #644]	; (801071c <run_shortest+0xd34>)
 8010496:	801a      	strh	r2, [r3, #0]
			if (pass[pass_count] == 50) {
 8010498:	e7e0      	b.n	801045c <run_shortest+0xa74>
				break;
 801049a:	bf00      	nop
		}

	}
}
	int j = 0;
 801049c:	2300      	movs	r3, #0
 801049e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pass[j] != 0) {
 80104a0:	e00b      	b.n	80104ba <run_shortest+0xad2>
		printf("pass_count %d pass %d\n", j, pass[j]);
 80104a2:	4a9f      	ldr	r2, [pc, #636]	; (8010720 <run_shortest+0xd38>)
 80104a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104aa:	461a      	mov	r2, r3
 80104ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80104ae:	489d      	ldr	r0, [pc, #628]	; (8010724 <run_shortest+0xd3c>)
 80104b0:	f011 f872 	bl	8021598 <iprintf>
		j++;
 80104b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b6:	3301      	adds	r3, #1
 80104b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pass[j] != 0) {
 80104ba:	4a99      	ldr	r2, [pc, #612]	; (8010720 <run_shortest+0xd38>)
 80104bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d1ed      	bne.n	80104a2 <run_shortest+0xaba>
	}
	int pass_count2;
	pass_count2=0;
 80104c6:	2300      	movs	r3, #0
 80104c8:	62bb      	str	r3, [r7, #40]	; 0x28
	while(pass[pass_count2] == -1){
 80104ca:	e002      	b.n	80104d2 <run_shortest+0xaea>
		pass_count2++;
 80104cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ce:	3301      	adds	r3, #1
 80104d0:	62bb      	str	r3, [r7, #40]	; 0x28
	while(pass[pass_count2] == -1){
 80104d2:	4a93      	ldr	r2, [pc, #588]	; (8010720 <run_shortest+0xd38>)
 80104d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104de:	d0f5      	beq.n	80104cc <run_shortest+0xae4>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 80104e0:	4a8f      	ldr	r2, [pc, #572]	; (8010720 <run_shortest+0xd38>)
 80104e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104e8:	934e      	str	r3, [sp, #312]	; 0x138
 80104ea:	4668      	mov	r0, sp
 80104ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80104f0:	f44f 729c 	mov.w	r2, #312	; 0x138
 80104f4:	4619      	mov	r1, r3
 80104f6:	f010 fbcf 	bl	8020c98 <memcpy>
 80104fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80104fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010500:	f008 f812 	bl	8018528 <get_center_velocity>
 8010504:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
	printf("%d,%f\n",pass_count2, end_velocity);
 8010508:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801050a:	f7f0 f845 	bl	8000598 <__aeabi_f2d>
 801050e:	4602      	mov	r2, r0
 8010510:	460b      	mov	r3, r1
 8010512:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010514:	4884      	ldr	r0, [pc, #528]	; (8010728 <run_shortest+0xd40>)
 8010516:	f011 f83f 	bl	8021598 <iprintf>

	wait_ms_NoReset(500);
 801051a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801051e:	f7f8 fb73 	bl	8008c08 <wait_ms_NoReset>
	pl_DriveMotor_standby(ON);
 8010522:	2001      	movs	r0, #1
 8010524:	f7f8 f840 	bl	80085a8 <pl_DriveMotor_standby>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8010528:	2003      	movs	r0, #3
 801052a:	f7f8 f86f 	bl	800860c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801052e:	2003      	movs	r0, #3
 8010530:	f7f8 f844 	bl	80085bc <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8010534:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010538:	f7f8 fb66 	bl	8008c08 <wait_ms_NoReset>
	no_safty = 1;
 801053c:	4b7b      	ldr	r3, [pc, #492]	; (801072c <run_shortest+0xd44>)
 801053e:	2201      	movs	r2, #1
 8010540:	701a      	strb	r2, [r3, #0]
	no_safty = 0;
 8010542:	4b7a      	ldr	r3, [pc, #488]	; (801072c <run_shortest+0xd44>)
 8010544:	2200      	movs	r2, #0
 8010546:	701a      	strb	r2, [r3, #0]
	clear_Ierror();
 8010548:	f7f4 feb2 	bl	80052b0 <clear_Ierror>
	////wall_control_mode = 1;
	if (fun_mode == 1) {
 801054c:	7abb      	ldrb	r3, [r7, #10]
 801054e:	2b01      	cmp	r3, #1
 8010550:	d10f      	bne.n	8010572 <run_shortest+0xb8a>
		pl_FunMotor_duty(fun_ratio);
 8010552:	ed97 0a01 	vldr	s0, [r7, #4]
 8010556:	f7f8 f8c5 	bl	80086e4 <pl_FunMotor_duty>
		pl_FunMotor_start();
 801055a:	f7f8 f8af 	bl	80086bc <pl_FunMotor_start>
		wait_ms_NoReset(600);
 801055e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8010562:	f7f8 fb51 	bl	8008c08 <wait_ms_NoReset>
		reset_gyro();
 8010566:	f7f1 fb4f 	bl	8001c08 <reset_gyro>
		reset_speed();
 801056a:	f7f0 fd5b 	bl	8001024 <reset_speed>
		clear_Ierror();
 801056e:	f7f4 fe9f 	bl	80052b0 <clear_Ierror>
//				pl_FunMotor_duty(160);
//		pl_FunMotor_start();
//						wait_ms_NoReset(2000);	//候補1

	}
	maze_mode = 1;
 8010572:	4b6f      	ldr	r3, [pc, #444]	; (8010730 <run_shortest+0xd48>)
 8010574:	2201      	movs	r2, #1
 8010576:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 1;
 8010578:	4b6e      	ldr	r3, [pc, #440]	; (8010734 <run_shortest+0xd4c>)
 801057a:	2201      	movs	r2, #1
 801057c:	701a      	strb	r2, [r3, #0]
//	record_mode=14;
	record_mode=18;
 801057e:	4b6e      	ldr	r3, [pc, #440]	; (8010738 <run_shortest+0xd50>)
 8010580:	2212      	movs	r2, #18
 8010582:	701a      	strb	r2, [r3, #0]
//	encoder_PID_error=2500;
//	gyro_PID_error=1800;
	pass_count = 0;
 8010584:	4b65      	ldr	r3, [pc, #404]	; (801071c <run_shortest+0xd34>)
 8010586:	2200      	movs	r2, #0
 8010588:	801a      	strh	r2, [r3, #0]


	mode.WallControlMode=1;
 801058a:	2301      	movs	r3, #1
 801058c:	773b      	strb	r3, [r7, #28]
	mode.WallControlStatus=0;
 801058e:	2300      	movs	r3, #0
 8010590:	777b      	strb	r3, [r7, #29]
	mode.calMazeMode=0;
 8010592:	2300      	movs	r3, #0
 8010594:	77bb      	strb	r3, [r7, #30]
	mode.WallCutMode=0;
 8010596:	2300      	movs	r3, #0
 8010598:	77fb      	strb	r3, [r7, #31]
	pass_count2=0;
 801059a:	2300      	movs	r3, #0
 801059c:	62bb      	str	r3, [r7, #40]	; 0x28
	while(pass[pass_count2] == -1){
 801059e:	e002      	b.n	80105a6 <run_shortest+0xbbe>
		pass_count2++;
 80105a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105a2:	3301      	adds	r3, #1
 80105a4:	62bb      	str	r3, [r7, #40]	; 0x28
	while(pass[pass_count2] == -1){
 80105a6:	4a5e      	ldr	r2, [pc, #376]	; (8010720 <run_shortest+0xd38>)
 80105a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105b2:	d0f5      	beq.n	80105a0 <run_shortest+0xbb8>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 80105b4:	4a5a      	ldr	r2, [pc, #360]	; (8010720 <run_shortest+0xd38>)
 80105b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105bc:	934e      	str	r3, [sp, #312]	; 0x138
 80105be:	4668      	mov	r0, sp
 80105c0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80105c4:	f44f 729c 	mov.w	r2, #312	; 0x138
 80105c8:	4619      	mov	r1, r3
 80105ca:	f010 fb65 	bl	8020c98 <memcpy>
 80105ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80105d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80105d4:	f007 ffa8 	bl	8018528 <get_center_velocity>
 80105d8:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
	straight_table2(BACK_TO_CENTER_FRONT,0,end_velocity,end_velocity,end_velocity*end_velocity/ BACK_TO_CENTER_FRONT/2, mode);
 80105dc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80105e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80105e4:	ee17 0a90 	vmov	r0, s15
 80105e8:	f7ef ffd6 	bl	8000598 <__aeabi_f2d>
 80105ec:	f04f 0200 	mov.w	r2, #0
 80105f0:	4b52      	ldr	r3, [pc, #328]	; (801073c <run_shortest+0xd54>)
 80105f2:	f7f0 f953 	bl	800089c <__aeabi_ddiv>
 80105f6:	4602      	mov	r2, r0
 80105f8:	460b      	mov	r3, r1
 80105fa:	4610      	mov	r0, r2
 80105fc:	4619      	mov	r1, r3
 80105fe:	f04f 0200 	mov.w	r2, #0
 8010602:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010606:	f7f0 f949 	bl	800089c <__aeabi_ddiv>
 801060a:	4602      	mov	r2, r0
 801060c:	460b      	mov	r3, r1
 801060e:	4610      	mov	r0, r2
 8010610:	4619      	mov	r1, r3
 8010612:	f7f0 faf1 	bl	8000bf8 <__aeabi_d2f>
 8010616:	4603      	mov	r3, r0
 8010618:	69f8      	ldr	r0, [r7, #28]
 801061a:	ee02 3a10 	vmov	s4, r3
 801061e:	edd7 1a0e 	vldr	s3, [r7, #56]	; 0x38
 8010622:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 8010626:	eddf 0a46 	vldr	s1, [pc, #280]	; 8010740 <run_shortest+0xd58>
 801062a:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 801062e:	f7f3 fb2f 	bl	8003c90 <straight_table2>


	while (pass_count <= 500) {
 8010632:	e2d5      	b.n	8010be0 <run_shortest+0x11f8>
		pass_count2=pass_count+1;
 8010634:	4b39      	ldr	r3, [pc, #228]	; (801071c <run_shortest+0xd34>)
 8010636:	881b      	ldrh	r3, [r3, #0]
 8010638:	3301      	adds	r3, #1
 801063a:	62bb      	str	r3, [r7, #40]	; 0x28
		while(pass[pass_count2] == -1){
 801063c:	e002      	b.n	8010644 <run_shortest+0xc5c>
			pass_count2++;
 801063e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010640:	3301      	adds	r3, #1
 8010642:	62bb      	str	r3, [r7, #40]	; 0x28
		while(pass[pass_count2] == -1){
 8010644:	4a36      	ldr	r2, [pc, #216]	; (8010720 <run_shortest+0xd38>)
 8010646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801064c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010650:	d0f5      	beq.n	801063e <run_shortest+0xc56>
		}
		end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 8010652:	4a33      	ldr	r2, [pc, #204]	; (8010720 <run_shortest+0xd38>)
 8010654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801065a:	934e      	str	r3, [sp, #312]	; 0x138
 801065c:	4668      	mov	r0, sp
 801065e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010662:	f44f 729c 	mov.w	r2, #312	; 0x138
 8010666:	4619      	mov	r1, r3
 8010668:	f010 fb16 	bl	8020c98 <memcpy>
 801066c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010670:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010672:	f007 ff59 	bl	8018528 <get_center_velocity>
 8010676:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

		if (pass[pass_count] == -1) {
 801067a:	4b28      	ldr	r3, [pc, #160]	; (801071c <run_shortest+0xd34>)
 801067c:	881b      	ldrh	r3, [r3, #0]
 801067e:	461a      	mov	r2, r3
 8010680:	4b27      	ldr	r3, [pc, #156]	; (8010720 <run_shortest+0xd38>)
 8010682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010686:	f1b3 3fff 	cmp.w	r3, #4294967295
 801068a:	d106      	bne.n	801069a <run_shortest+0xcb2>
			pass_count++;
 801068c:	4b23      	ldr	r3, [pc, #140]	; (801071c <run_shortest+0xd34>)
 801068e:	881b      	ldrh	r3, [r3, #0]
 8010690:	3301      	adds	r3, #1
 8010692:	b29a      	uxth	r2, r3
 8010694:	4b21      	ldr	r3, [pc, #132]	; (801071c <run_shortest+0xd34>)
 8010696:	801a      	strh	r2, [r3, #0]
 8010698:	e29a      	b.n	8010bd0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -2) {
 801069a:	4b20      	ldr	r3, [pc, #128]	; (801071c <run_shortest+0xd34>)
 801069c:	881b      	ldrh	r3, [r3, #0]
 801069e:	461a      	mov	r2, r3
 80106a0:	4b1f      	ldr	r3, [pc, #124]	; (8010720 <run_shortest+0xd38>)
 80106a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106a6:	f113 0f02 	cmn.w	r3, #2
 80106aa:	d116      	bne.n	80106da <run_shortest+0xcf2>

			slalomR(howspeed.slalom_R, OFF,SHORTEST,mollifier_mode,end_velocity);
 80106ac:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80106b0:	9303      	str	r3, [sp, #12]
 80106b2:	2301      	movs	r3, #1
 80106b4:	9302      	str	r3, [sp, #8]
 80106b6:	2300      	movs	r3, #0
 80106b8:	9301      	str	r3, [sp, #4]
 80106ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80106bc:	9300      	str	r3, [sp, #0]
 80106be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80106c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80106c4:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80106c8:	f7fa f9d6 	bl	800aa78 <slalomR>

			pass_count++;
 80106cc:	4b13      	ldr	r3, [pc, #76]	; (801071c <run_shortest+0xd34>)
 80106ce:	881b      	ldrh	r3, [r3, #0]
 80106d0:	3301      	adds	r3, #1
 80106d2:	b29a      	uxth	r2, r3
 80106d4:	4b11      	ldr	r3, [pc, #68]	; (801071c <run_shortest+0xd34>)
 80106d6:	801a      	strh	r2, [r3, #0]
 80106d8:	e27a      	b.n	8010bd0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -3) {
 80106da:	4b10      	ldr	r3, [pc, #64]	; (801071c <run_shortest+0xd34>)
 80106dc:	881b      	ldrh	r3, [r3, #0]
 80106de:	461a      	mov	r2, r3
 80106e0:	4b0f      	ldr	r3, [pc, #60]	; (8010720 <run_shortest+0xd38>)
 80106e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106e6:	f113 0f03 	cmn.w	r3, #3
 80106ea:	d12b      	bne.n	8010744 <run_shortest+0xd5c>

			slalomL(howspeed.slalom_L, OFF,SHORTEST,mollifier_mode,end_velocity);
 80106ec:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80106f0:	9303      	str	r3, [sp, #12]
 80106f2:	2301      	movs	r3, #1
 80106f4:	9302      	str	r3, [sp, #8]
 80106f6:	2300      	movs	r3, #0
 80106f8:	9301      	str	r3, [sp, #4]
 80106fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80106fc:	9300      	str	r3, [sp, #0]
 80106fe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010702:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010704:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010708:	f7fa fb9c 	bl	800ae44 <slalomL>

			pass_count++;
 801070c:	4b03      	ldr	r3, [pc, #12]	; (801071c <run_shortest+0xd34>)
 801070e:	881b      	ldrh	r3, [r3, #0]
 8010710:	3301      	adds	r3, #1
 8010712:	b29a      	uxth	r2, r3
 8010714:	4b01      	ldr	r3, [pc, #4]	; (801071c <run_shortest+0xd34>)
 8010716:	801a      	strh	r2, [r3, #0]
 8010718:	e25a      	b.n	8010bd0 <run_shortest+0x11e8>
 801071a:	bf00      	nop
 801071c:	20000834 	.word	0x20000834
 8010720:	2000083c 	.word	0x2000083c
 8010724:	08024ff4 	.word	0x08024ff4
 8010728:	0802500c 	.word	0x0802500c
 801072c:	20000812 	.word	0x20000812
 8010730:	20000836 	.word	0x20000836
 8010734:	20000814 	.word	0x20000814
 8010738:	2000f284 	.word	0x2000f284
 801073c:	40290000 	.word	0x40290000
 8010740:	00000000 	.word	0x00000000
		}
		else if (pass[pass_count] == -4) {
 8010744:	4baa      	ldr	r3, [pc, #680]	; (80109f0 <run_shortest+0x1008>)
 8010746:	881b      	ldrh	r3, [r3, #0]
 8010748:	461a      	mov	r2, r3
 801074a:	4baa      	ldr	r3, [pc, #680]	; (80109f4 <run_shortest+0x100c>)
 801074c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010750:	f113 0f04 	cmn.w	r3, #4
 8010754:	d115      	bne.n	8010782 <run_shortest+0xd9a>
			turn90R(howspeed.turn90_R, OFF,mollifier_mode,end_velocity);
 8010756:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801075a:	9302      	str	r3, [sp, #8]
 801075c:	2300      	movs	r3, #0
 801075e:	9301      	str	r3, [sp, #4]
 8010760:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010764:	9300      	str	r3, [sp, #0]
 8010766:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801076a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801076c:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010770:	f7fa fd4a 	bl	800b208 <turn90R>
			pass_count++;
 8010774:	4b9e      	ldr	r3, [pc, #632]	; (80109f0 <run_shortest+0x1008>)
 8010776:	881b      	ldrh	r3, [r3, #0]
 8010778:	3301      	adds	r3, #1
 801077a:	b29a      	uxth	r2, r3
 801077c:	4b9c      	ldr	r3, [pc, #624]	; (80109f0 <run_shortest+0x1008>)
 801077e:	801a      	strh	r2, [r3, #0]
 8010780:	e226      	b.n	8010bd0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -5) {
 8010782:	4b9b      	ldr	r3, [pc, #620]	; (80109f0 <run_shortest+0x1008>)
 8010784:	881b      	ldrh	r3, [r3, #0]
 8010786:	461a      	mov	r2, r3
 8010788:	4b9a      	ldr	r3, [pc, #616]	; (80109f4 <run_shortest+0x100c>)
 801078a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801078e:	f113 0f05 	cmn.w	r3, #5
 8010792:	d115      	bne.n	80107c0 <run_shortest+0xdd8>
			turn90L(howspeed.turn90_L, OFF,mollifier_mode,end_velocity);
 8010794:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010798:	9302      	str	r3, [sp, #8]
 801079a:	2300      	movs	r3, #0
 801079c:	9301      	str	r3, [sp, #4]
 801079e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80107a2:	9300      	str	r3, [sp, #0]
 80107a4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80107a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80107aa:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80107ae:	f7fa fe95 	bl	800b4dc <turn90L>
			pass_count++;
 80107b2:	4b8f      	ldr	r3, [pc, #572]	; (80109f0 <run_shortest+0x1008>)
 80107b4:	881b      	ldrh	r3, [r3, #0]
 80107b6:	3301      	adds	r3, #1
 80107b8:	b29a      	uxth	r2, r3
 80107ba:	4b8d      	ldr	r3, [pc, #564]	; (80109f0 <run_shortest+0x1008>)
 80107bc:	801a      	strh	r2, [r3, #0]
 80107be:	e207      	b.n	8010bd0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -6) {
 80107c0:	4b8b      	ldr	r3, [pc, #556]	; (80109f0 <run_shortest+0x1008>)
 80107c2:	881b      	ldrh	r3, [r3, #0]
 80107c4:	461a      	mov	r2, r3
 80107c6:	4b8b      	ldr	r3, [pc, #556]	; (80109f4 <run_shortest+0x100c>)
 80107c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107cc:	f113 0f06 	cmn.w	r3, #6
 80107d0:	d115      	bne.n	80107fe <run_shortest+0xe16>
			turn180R(howspeed.turn180_R, OFF,mollifier_mode,end_velocity);
 80107d2:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80107d6:	9302      	str	r3, [sp, #8]
 80107d8:	2300      	movs	r3, #0
 80107da:	9301      	str	r3, [sp, #4]
 80107dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80107e0:	9300      	str	r3, [sp, #0]
 80107e2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80107e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80107e8:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80107ec:	f7fa ffda 	bl	800b7a4 <turn180R>
			pass_count++;
 80107f0:	4b7f      	ldr	r3, [pc, #508]	; (80109f0 <run_shortest+0x1008>)
 80107f2:	881b      	ldrh	r3, [r3, #0]
 80107f4:	3301      	adds	r3, #1
 80107f6:	b29a      	uxth	r2, r3
 80107f8:	4b7d      	ldr	r3, [pc, #500]	; (80109f0 <run_shortest+0x1008>)
 80107fa:	801a      	strh	r2, [r3, #0]
 80107fc:	e1e8      	b.n	8010bd0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -7) {
 80107fe:	4b7c      	ldr	r3, [pc, #496]	; (80109f0 <run_shortest+0x1008>)
 8010800:	881b      	ldrh	r3, [r3, #0]
 8010802:	461a      	mov	r2, r3
 8010804:	4b7b      	ldr	r3, [pc, #492]	; (80109f4 <run_shortest+0x100c>)
 8010806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801080a:	f113 0f07 	cmn.w	r3, #7
 801080e:	d115      	bne.n	801083c <run_shortest+0xe54>
			turn180L(howspeed.turn180_L, OFF,mollifier_mode,end_velocity);
 8010810:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010814:	9302      	str	r3, [sp, #8]
 8010816:	2300      	movs	r3, #0
 8010818:	9301      	str	r3, [sp, #4]
 801081a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801081e:	9300      	str	r3, [sp, #0]
 8010820:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8010824:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010826:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 801082a:	f7fb f925 	bl	800ba78 <turn180L>
			pass_count++;
 801082e:	4b70      	ldr	r3, [pc, #448]	; (80109f0 <run_shortest+0x1008>)
 8010830:	881b      	ldrh	r3, [r3, #0]
 8010832:	3301      	adds	r3, #1
 8010834:	b29a      	uxth	r2, r3
 8010836:	4b6e      	ldr	r3, [pc, #440]	; (80109f0 <run_shortest+0x1008>)
 8010838:	801a      	strh	r2, [r3, #0]
 801083a:	e1c9      	b.n	8010bd0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -8) { //入り45R
 801083c:	4b6c      	ldr	r3, [pc, #432]	; (80109f0 <run_shortest+0x1008>)
 801083e:	881b      	ldrh	r3, [r3, #0]
 8010840:	461a      	mov	r2, r3
 8010842:	4b6c      	ldr	r3, [pc, #432]	; (80109f4 <run_shortest+0x100c>)
 8010844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010848:	f113 0f08 	cmn.w	r3, #8
 801084c:	d115      	bne.n	801087a <run_shortest+0xe92>
			turn45inR(howspeed.turn45in_R, OFF,mollifier_mode,end_velocity);
 801084e:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010852:	9302      	str	r3, [sp, #8]
 8010854:	2300      	movs	r3, #0
 8010856:	9301      	str	r3, [sp, #4]
 8010858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801085c:	9300      	str	r3, [sp, #0]
 801085e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010864:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010868:	f7fb fa6e 	bl	800bd48 <turn45inR>
			pass_count++;
 801086c:	4b60      	ldr	r3, [pc, #384]	; (80109f0 <run_shortest+0x1008>)
 801086e:	881b      	ldrh	r3, [r3, #0]
 8010870:	3301      	adds	r3, #1
 8010872:	b29a      	uxth	r2, r3
 8010874:	4b5e      	ldr	r3, [pc, #376]	; (80109f0 <run_shortest+0x1008>)
 8010876:	801a      	strh	r2, [r3, #0]
 8010878:	e1aa      	b.n	8010bd0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -9) { //入り45L
 801087a:	4b5d      	ldr	r3, [pc, #372]	; (80109f0 <run_shortest+0x1008>)
 801087c:	881b      	ldrh	r3, [r3, #0]
 801087e:	461a      	mov	r2, r3
 8010880:	4b5c      	ldr	r3, [pc, #368]	; (80109f4 <run_shortest+0x100c>)
 8010882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010886:	f113 0f09 	cmn.w	r3, #9
 801088a:	d115      	bne.n	80108b8 <run_shortest+0xed0>
			turn45inL(howspeed.turn45in_L, OFF,mollifier_mode,end_velocity);
 801088c:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010890:	9302      	str	r3, [sp, #8]
 8010892:	2300      	movs	r3, #0
 8010894:	9301      	str	r3, [sp, #4]
 8010896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801089a:	9300      	str	r3, [sp, #0]
 801089c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80108a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80108a2:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80108a6:	f7fb fc97 	bl	800c1d8 <turn45inL>
			pass_count++;
 80108aa:	4b51      	ldr	r3, [pc, #324]	; (80109f0 <run_shortest+0x1008>)
 80108ac:	881b      	ldrh	r3, [r3, #0]
 80108ae:	3301      	adds	r3, #1
 80108b0:	b29a      	uxth	r2, r3
 80108b2:	4b4f      	ldr	r3, [pc, #316]	; (80109f0 <run_shortest+0x1008>)
 80108b4:	801a      	strh	r2, [r3, #0]
 80108b6:	e18b      	b.n	8010bd0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -10) { //入り135R
 80108b8:	4b4d      	ldr	r3, [pc, #308]	; (80109f0 <run_shortest+0x1008>)
 80108ba:	881b      	ldrh	r3, [r3, #0]
 80108bc:	461a      	mov	r2, r3
 80108be:	4b4d      	ldr	r3, [pc, #308]	; (80109f4 <run_shortest+0x100c>)
 80108c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108c4:	f113 0f0a 	cmn.w	r3, #10
 80108c8:	d115      	bne.n	80108f6 <run_shortest+0xf0e>
			turn135inR(howspeed.turn135in_R, OFF,mollifier_mode,end_velocity);
 80108ca:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80108ce:	9302      	str	r3, [sp, #8]
 80108d0:	2300      	movs	r3, #0
 80108d2:	9301      	str	r3, [sp, #4]
 80108d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80108d8:	9300      	str	r3, [sp, #0]
 80108da:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80108de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80108e0:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80108e4:	f7fb feb8 	bl	800c658 <turn135inR>
			pass_count++;
 80108e8:	4b41      	ldr	r3, [pc, #260]	; (80109f0 <run_shortest+0x1008>)
 80108ea:	881b      	ldrh	r3, [r3, #0]
 80108ec:	3301      	adds	r3, #1
 80108ee:	b29a      	uxth	r2, r3
 80108f0:	4b3f      	ldr	r3, [pc, #252]	; (80109f0 <run_shortest+0x1008>)
 80108f2:	801a      	strh	r2, [r3, #0]
 80108f4:	e16c      	b.n	8010bd0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -11) { //入り135L
 80108f6:	4b3e      	ldr	r3, [pc, #248]	; (80109f0 <run_shortest+0x1008>)
 80108f8:	881b      	ldrh	r3, [r3, #0]
 80108fa:	461a      	mov	r2, r3
 80108fc:	4b3d      	ldr	r3, [pc, #244]	; (80109f4 <run_shortest+0x100c>)
 80108fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010902:	f113 0f0b 	cmn.w	r3, #11
 8010906:	d115      	bne.n	8010934 <run_shortest+0xf4c>
			turn135inL(howspeed.turn135in_L, OFF,mollifier_mode,end_velocity);
 8010908:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801090c:	9302      	str	r3, [sp, #8]
 801090e:	2300      	movs	r3, #0
 8010910:	9301      	str	r3, [sp, #4]
 8010912:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010916:	9300      	str	r3, [sp, #0]
 8010918:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801091c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801091e:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010922:	f7fc f8e1 	bl	800cae8 <turn135inL>
			pass_count++;
 8010926:	4b32      	ldr	r3, [pc, #200]	; (80109f0 <run_shortest+0x1008>)
 8010928:	881b      	ldrh	r3, [r3, #0]
 801092a:	3301      	adds	r3, #1
 801092c:	b29a      	uxth	r2, r3
 801092e:	4b30      	ldr	r3, [pc, #192]	; (80109f0 <run_shortest+0x1008>)
 8010930:	801a      	strh	r2, [r3, #0]
 8010932:	e14d      	b.n	8010bd0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -12) { //出り45R
 8010934:	4b2e      	ldr	r3, [pc, #184]	; (80109f0 <run_shortest+0x1008>)
 8010936:	881b      	ldrh	r3, [r3, #0]
 8010938:	461a      	mov	r2, r3
 801093a:	4b2e      	ldr	r3, [pc, #184]	; (80109f4 <run_shortest+0x100c>)
 801093c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010940:	f113 0f0c 	cmn.w	r3, #12
 8010944:	d115      	bne.n	8010972 <run_shortest+0xf8a>
			turn45outR(howspeed.turn45out_R, OFF,mollifier_mode,end_velocity);
 8010946:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801094a:	9302      	str	r3, [sp, #8]
 801094c:	2300      	movs	r3, #0
 801094e:	9301      	str	r3, [sp, #4]
 8010950:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010954:	9300      	str	r3, [sp, #0]
 8010956:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801095a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801095c:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010960:	f7fc fb06 	bl	800cf70 <turn45outR>
			pass_count++;
 8010964:	4b22      	ldr	r3, [pc, #136]	; (80109f0 <run_shortest+0x1008>)
 8010966:	881b      	ldrh	r3, [r3, #0]
 8010968:	3301      	adds	r3, #1
 801096a:	b29a      	uxth	r2, r3
 801096c:	4b20      	ldr	r3, [pc, #128]	; (80109f0 <run_shortest+0x1008>)
 801096e:	801a      	strh	r2, [r3, #0]
 8010970:	e12e      	b.n	8010bd0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -13) { //出り45L
 8010972:	4b1f      	ldr	r3, [pc, #124]	; (80109f0 <run_shortest+0x1008>)
 8010974:	881b      	ldrh	r3, [r3, #0]
 8010976:	461a      	mov	r2, r3
 8010978:	4b1e      	ldr	r3, [pc, #120]	; (80109f4 <run_shortest+0x100c>)
 801097a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801097e:	f113 0f0d 	cmn.w	r3, #13
 8010982:	d115      	bne.n	80109b0 <run_shortest+0xfc8>
			turn45outL(howspeed.turn45out_L, OFF,mollifier_mode,end_velocity);
 8010984:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010988:	9302      	str	r3, [sp, #8]
 801098a:	2300      	movs	r3, #0
 801098c:	9301      	str	r3, [sp, #4]
 801098e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8010992:	9300      	str	r3, [sp, #0]
 8010994:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8010998:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801099a:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 801099e:	f7fc fcd9 	bl	800d354 <turn45outL>
			pass_count++;
 80109a2:	4b13      	ldr	r3, [pc, #76]	; (80109f0 <run_shortest+0x1008>)
 80109a4:	881b      	ldrh	r3, [r3, #0]
 80109a6:	3301      	adds	r3, #1
 80109a8:	b29a      	uxth	r2, r3
 80109aa:	4b11      	ldr	r3, [pc, #68]	; (80109f0 <run_shortest+0x1008>)
 80109ac:	801a      	strh	r2, [r3, #0]
 80109ae:	e10f      	b.n	8010bd0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -14) { //出り135R
 80109b0:	4b0f      	ldr	r3, [pc, #60]	; (80109f0 <run_shortest+0x1008>)
 80109b2:	881b      	ldrh	r3, [r3, #0]
 80109b4:	461a      	mov	r2, r3
 80109b6:	4b0f      	ldr	r3, [pc, #60]	; (80109f4 <run_shortest+0x100c>)
 80109b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109bc:	f113 0f0e 	cmn.w	r3, #14
 80109c0:	d11a      	bne.n	80109f8 <run_shortest+0x1010>
			turn135outR(howspeed.turn135out_R, OFF,mollifier_mode,end_velocity);
 80109c2:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80109c6:	9302      	str	r3, [sp, #8]
 80109c8:	2300      	movs	r3, #0
 80109ca:	9301      	str	r3, [sp, #4]
 80109cc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80109d0:	9300      	str	r3, [sp, #0]
 80109d2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80109d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80109d8:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80109dc:	f7fc fea2 	bl	800d724 <turn135outR>
			pass_count++;
 80109e0:	4b03      	ldr	r3, [pc, #12]	; (80109f0 <run_shortest+0x1008>)
 80109e2:	881b      	ldrh	r3, [r3, #0]
 80109e4:	3301      	adds	r3, #1
 80109e6:	b29a      	uxth	r2, r3
 80109e8:	4b01      	ldr	r3, [pc, #4]	; (80109f0 <run_shortest+0x1008>)
 80109ea:	801a      	strh	r2, [r3, #0]
 80109ec:	e0f0      	b.n	8010bd0 <run_shortest+0x11e8>
 80109ee:	bf00      	nop
 80109f0:	20000834 	.word	0x20000834
 80109f4:	2000083c 	.word	0x2000083c
		}
		else if (pass[pass_count] == -15) { //出り135L
 80109f8:	4ba1      	ldr	r3, [pc, #644]	; (8010c80 <run_shortest+0x1298>)
 80109fa:	881b      	ldrh	r3, [r3, #0]
 80109fc:	461a      	mov	r2, r3
 80109fe:	4ba1      	ldr	r3, [pc, #644]	; (8010c84 <run_shortest+0x129c>)
 8010a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a04:	f113 0f0f 	cmn.w	r3, #15
 8010a08:	d115      	bne.n	8010a36 <run_shortest+0x104e>
			turn135outL(howspeed.turn135out_L, OFF,mollifier_mode,end_velocity);
 8010a0a:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010a0e:	9302      	str	r3, [sp, #8]
 8010a10:	2300      	movs	r3, #0
 8010a12:	9301      	str	r3, [sp, #4]
 8010a14:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8010a18:	9300      	str	r3, [sp, #0]
 8010a1a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8010a1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010a20:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010a24:	f7fd f870 	bl	800db08 <turn135outL>
			pass_count++;
 8010a28:	4b95      	ldr	r3, [pc, #596]	; (8010c80 <run_shortest+0x1298>)
 8010a2a:	881b      	ldrh	r3, [r3, #0]
 8010a2c:	3301      	adds	r3, #1
 8010a2e:	b29a      	uxth	r2, r3
 8010a30:	4b93      	ldr	r3, [pc, #588]	; (8010c80 <run_shortest+0x1298>)
 8010a32:	801a      	strh	r2, [r3, #0]
 8010a34:	e0cc      	b.n	8010bd0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -16) { //V90R
 8010a36:	4b92      	ldr	r3, [pc, #584]	; (8010c80 <run_shortest+0x1298>)
 8010a38:	881b      	ldrh	r3, [r3, #0]
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	4b91      	ldr	r3, [pc, #580]	; (8010c84 <run_shortest+0x129c>)
 8010a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a42:	f113 0f10 	cmn.w	r3, #16
 8010a46:	d115      	bne.n	8010a74 <run_shortest+0x108c>
			V90R(howspeed.V90_R, OFF,mollifier_mode,end_velocity);
 8010a48:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010a4c:	9302      	str	r3, [sp, #8]
 8010a4e:	2300      	movs	r3, #0
 8010a50:	9301      	str	r3, [sp, #4]
 8010a52:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8010a56:	9300      	str	r3, [sp, #0]
 8010a58:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8010a5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010a5e:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010a62:	f7fd fa3d 	bl	800dee0 <V90R>
			pass_count++;
 8010a66:	4b86      	ldr	r3, [pc, #536]	; (8010c80 <run_shortest+0x1298>)
 8010a68:	881b      	ldrh	r3, [r3, #0]
 8010a6a:	3301      	adds	r3, #1
 8010a6c:	b29a      	uxth	r2, r3
 8010a6e:	4b84      	ldr	r3, [pc, #528]	; (8010c80 <run_shortest+0x1298>)
 8010a70:	801a      	strh	r2, [r3, #0]
 8010a72:	e0ad      	b.n	8010bd0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -17) { //V90L
 8010a74:	4b82      	ldr	r3, [pc, #520]	; (8010c80 <run_shortest+0x1298>)
 8010a76:	881b      	ldrh	r3, [r3, #0]
 8010a78:	461a      	mov	r2, r3
 8010a7a:	4b82      	ldr	r3, [pc, #520]	; (8010c84 <run_shortest+0x129c>)
 8010a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a80:	f113 0f11 	cmn.w	r3, #17
 8010a84:	d115      	bne.n	8010ab2 <run_shortest+0x10ca>
			V90L(howspeed.V90_L, OFF,mollifier_mode,end_velocity);
 8010a86:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010a8a:	9302      	str	r3, [sp, #8]
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	9301      	str	r3, [sp, #4]
 8010a90:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8010a94:	9300      	str	r3, [sp, #0]
 8010a96:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8010a9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010a9c:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010aa0:	f7fd fc2a 	bl	800e2f8 <V90L>
			pass_count++;
 8010aa4:	4b76      	ldr	r3, [pc, #472]	; (8010c80 <run_shortest+0x1298>)
 8010aa6:	881b      	ldrh	r3, [r3, #0]
 8010aa8:	3301      	adds	r3, #1
 8010aaa:	b29a      	uxth	r2, r3
 8010aac:	4b74      	ldr	r3, [pc, #464]	; (8010c80 <run_shortest+0x1298>)
 8010aae:	801a      	strh	r2, [r3, #0]
 8010ab0:	e08e      	b.n	8010bd0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] >= 1) {
 8010ab2:	4b73      	ldr	r3, [pc, #460]	; (8010c80 <run_shortest+0x1298>)
 8010ab4:	881b      	ldrh	r3, [r3, #0]
 8010ab6:	461a      	mov	r2, r3
 8010ab8:	4b72      	ldr	r3, [pc, #456]	; (8010c84 <run_shortest+0x129c>)
 8010aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	f340 8086 	ble.w	8010bd0 <run_shortest+0x11e8>
			first_v = howspeed.TurnCentervelocity;
 8010ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
			last_v = howspeed.TurnCentervelocity;
 8010ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010aca:	623b      	str	r3, [r7, #32]
			if (pass_count >= 1) {
 8010acc:	4b6c      	ldr	r3, [pc, #432]	; (8010c80 <run_shortest+0x1298>)
 8010ace:	881b      	ldrh	r3, [r3, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d013      	beq.n	8010afc <run_shortest+0x1114>

				if (pass[pass_count - 1] == -2 || pass[pass_count - 1] == -3) {
 8010ad4:	4b6a      	ldr	r3, [pc, #424]	; (8010c80 <run_shortest+0x1298>)
 8010ad6:	881b      	ldrh	r3, [r3, #0]
 8010ad8:	3b01      	subs	r3, #1
 8010ada:	4a6a      	ldr	r2, [pc, #424]	; (8010c84 <run_shortest+0x129c>)
 8010adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ae0:	f113 0f02 	cmn.w	r3, #2
 8010ae4:	d008      	beq.n	8010af8 <run_shortest+0x1110>
 8010ae6:	4b66      	ldr	r3, [pc, #408]	; (8010c80 <run_shortest+0x1298>)
 8010ae8:	881b      	ldrh	r3, [r3, #0]
 8010aea:	3b01      	subs	r3, #1
 8010aec:	4a65      	ldr	r2, [pc, #404]	; (8010c84 <run_shortest+0x129c>)
 8010aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010af2:	f113 0f03 	cmn.w	r3, #3
 8010af6:	d101      	bne.n	8010afc <run_shortest+0x1114>
					first_v = howspeed.SlalomCentervelocity;
 8010af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010afa:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
			}
			if (pass[pass_count + 1] == -2 || pass[pass_count + 1] == -3) {
 8010afc:	4b60      	ldr	r3, [pc, #384]	; (8010c80 <run_shortest+0x1298>)
 8010afe:	881b      	ldrh	r3, [r3, #0]
 8010b00:	3301      	adds	r3, #1
 8010b02:	4a60      	ldr	r2, [pc, #384]	; (8010c84 <run_shortest+0x129c>)
 8010b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b08:	f113 0f02 	cmn.w	r3, #2
 8010b0c:	d008      	beq.n	8010b20 <run_shortest+0x1138>
 8010b0e:	4b5c      	ldr	r3, [pc, #368]	; (8010c80 <run_shortest+0x1298>)
 8010b10:	881b      	ldrh	r3, [r3, #0]
 8010b12:	3301      	adds	r3, #1
 8010b14:	4a5b      	ldr	r2, [pc, #364]	; (8010c84 <run_shortest+0x129c>)
 8010b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b1a:	f113 0f03 	cmn.w	r3, #3
 8010b1e:	d101      	bne.n	8010b24 <run_shortest+0x113c>
				last_v = howspeed.SlalomCentervelocity;
 8010b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b22:	623b      	str	r3, [r7, #32]
			}
			if (pass[pass_count] >= 50) {
 8010b24:	4b56      	ldr	r3, [pc, #344]	; (8010c80 <run_shortest+0x1298>)
 8010b26:	881b      	ldrh	r3, [r3, #0]
 8010b28:	461a      	mov	r2, r3
 8010b2a:	4b56      	ldr	r3, [pc, #344]	; (8010c84 <run_shortest+0x129c>)
 8010b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b30:	2b31      	cmp	r3, #49	; 0x31
 8010b32:	dd27      	ble.n	8010b84 <run_shortest+0x119c>
				mode.WallControlMode=3;
 8010b34:	2303      	movs	r3, #3
 8010b36:	773b      	strb	r3, [r7, #28]
				mode.WallControlStatus=0;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	777b      	strb	r3, [r7, #29]
				straight_table2((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc, mode);
 8010b3c:	4b50      	ldr	r3, [pc, #320]	; (8010c80 <run_shortest+0x1298>)
 8010b3e:	881b      	ldrh	r3, [r3, #0]
 8010b40:	461a      	mov	r2, r3
 8010b42:	4b50      	ldr	r3, [pc, #320]	; (8010c84 <run_shortest+0x129c>)
 8010b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b48:	3b32      	subs	r3, #50	; 0x32
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f7ef fd12 	bl	8000574 <__aeabi_i2d>
 8010b50:	a349      	add	r3, pc, #292	; (adr r3, 8010c78 <run_shortest+0x1290>)
 8010b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b56:	f7ef fd77 	bl	8000648 <__aeabi_dmul>
 8010b5a:	4602      	mov	r2, r0
 8010b5c:	460b      	mov	r3, r1
 8010b5e:	4610      	mov	r0, r2
 8010b60:	4619      	mov	r1, r3
 8010b62:	f7f0 f849 	bl	8000bf8 <__aeabi_d2f>
 8010b66:	4603      	mov	r3, r0
 8010b68:	69f8      	ldr	r0, [r7, #28]
 8010b6a:	ed97 2a04 	vldr	s4, [r7, #16]
 8010b6e:	edd7 1a05 	vldr	s3, [r7, #20]
 8010b72:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 8010b76:	edd7 0a0f 	vldr	s1, [r7, #60]	; 0x3c
 8010b7a:	ee00 3a10 	vmov	s0, r3
 8010b7e:	f7f3 f887 	bl	8003c90 <straight_table2>
 8010b82:	e01f      	b.n	8010bc4 <run_shortest+0x11dc>
				//straight_table_max((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc,35000, mode);
			} else {
				mode.WallControlMode=1;
 8010b84:	2301      	movs	r3, #1
 8010b86:	773b      	strb	r3, [r7, #28]
				mode.WallControlStatus=0;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	777b      	strb	r3, [r7, #29]
				straight_table2((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc, mode);
 8010b8c:	4b3c      	ldr	r3, [pc, #240]	; (8010c80 <run_shortest+0x1298>)
 8010b8e:	881b      	ldrh	r3, [r3, #0]
 8010b90:	461a      	mov	r2, r3
 8010b92:	4b3c      	ldr	r3, [pc, #240]	; (8010c84 <run_shortest+0x129c>)
 8010b94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010b98:	4613      	mov	r3, r2
 8010b9a:	005b      	lsls	r3, r3, #1
 8010b9c:	4413      	add	r3, r2
 8010b9e:	011a      	lsls	r2, r3, #4
 8010ba0:	1ad3      	subs	r3, r2, r3
 8010ba2:	ee07 3a90 	vmov	s15, r3
 8010ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010baa:	69f8      	ldr	r0, [r7, #28]
 8010bac:	ed97 2a04 	vldr	s4, [r7, #16]
 8010bb0:	edd7 1a05 	vldr	s3, [r7, #20]
 8010bb4:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 8010bb8:	edd7 0a0f 	vldr	s1, [r7, #60]	; 0x3c
 8010bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8010bc0:	f7f3 f866 	bl	8003c90 <straight_table2>
				//straight_table_max((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc,35000, mode);
			}

			pass_count++;
 8010bc4:	4b2e      	ldr	r3, [pc, #184]	; (8010c80 <run_shortest+0x1298>)
 8010bc6:	881b      	ldrh	r3, [r3, #0]
 8010bc8:	3301      	adds	r3, #1
 8010bca:	b29a      	uxth	r2, r3
 8010bcc:	4b2c      	ldr	r3, [pc, #176]	; (8010c80 <run_shortest+0x1298>)
 8010bce:	801a      	strh	r2, [r3, #0]
		}

		if (pass[pass_count] == 0) {
 8010bd0:	4b2b      	ldr	r3, [pc, #172]	; (8010c80 <run_shortest+0x1298>)
 8010bd2:	881b      	ldrh	r3, [r3, #0]
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	4b2b      	ldr	r3, [pc, #172]	; (8010c84 <run_shortest+0x129c>)
 8010bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d006      	beq.n	8010bee <run_shortest+0x1206>
	while (pass_count <= 500) {
 8010be0:	4b27      	ldr	r3, [pc, #156]	; (8010c80 <run_shortest+0x1298>)
 8010be2:	881b      	ldrh	r3, [r3, #0]
 8010be4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010be8:	f67f ad24 	bls.w	8010634 <run_shortest+0xc4c>
 8010bec:	e000      	b.n	8010bf0 <run_shortest+0x1208>
			break;
 8010bee:	bf00      	nop
//
//			break;
//		}
	}

		mode.WallControlMode=1;
 8010bf0:	2301      	movs	r3, #1
 8010bf2:	773b      	strb	r3, [r7, #28]
		mode.WallControlStatus=0;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	777b      	strb	r3, [r7, #29]
		straight_table2(MAZE_SECTION,end_velocity, 0,inspeed, inacc, mode);
 8010bf8:	69f8      	ldr	r0, [r7, #28]
 8010bfa:	ed97 2a04 	vldr	s4, [r7, #16]
 8010bfe:	edd7 1a05 	vldr	s3, [r7, #20]
 8010c02:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8010c88 <run_shortest+0x12a0>
 8010c06:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8010c0a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8010c8c <run_shortest+0x12a4>
 8010c0e:	f7f3 f83f 	bl	8003c90 <straight_table2>
		wait_ms_NoReset(700);
 8010c12:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8010c16:	f7f7 fff7 	bl	8008c08 <wait_ms_NoReset>
		pl_FunMotor_stop();
 8010c1a:	f7f7 fd59 	bl	80086d0 <pl_FunMotor_stop>
//		turning_table(180, 0, 0, 400, 5000);

	maze_mode = 0;
 8010c1e:	4b1c      	ldr	r3, [pc, #112]	; (8010c90 <run_shortest+0x12a8>)
 8010c20:	2200      	movs	r2, #0
 8010c22:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 8010c24:	4b1b      	ldr	r3, [pc, #108]	; (8010c94 <run_shortest+0x12ac>)
 8010c26:	2200      	movs	r2, #0
 8010c28:	701a      	strb	r2, [r3, #0]
	record_mode=0;
 8010c2a:	4b1b      	ldr	r3, [pc, #108]	; (8010c98 <run_shortest+0x12b0>)
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_standby(OFF);
 8010c30:	2000      	movs	r0, #0
 8010c32:	f7f7 fcb9 	bl	80085a8 <pl_DriveMotor_standby>
	int t = 0;
 8010c36:	2300      	movs	r3, #0
 8010c38:	627b      	str	r3, [r7, #36]	; 0x24

	while (t <= 14) {
 8010c3a:	e016      	b.n	8010c6a <run_shortest+0x1282>
		wall.row[t] = record.row[t];
 8010c3c:	4a17      	ldr	r2, [pc, #92]	; (8010c9c <run_shortest+0x12b4>)
 8010c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010c44:	4916      	ldr	r1, [pc, #88]	; (8010ca0 <run_shortest+0x12b8>)
 8010c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column[t] = record.column[t];
 8010c4c:	4a13      	ldr	r2, [pc, #76]	; (8010c9c <run_shortest+0x12b4>)
 8010c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c50:	330e      	adds	r3, #14
 8010c52:	009b      	lsls	r3, r3, #2
 8010c54:	4413      	add	r3, r2
 8010c56:	685a      	ldr	r2, [r3, #4]
 8010c58:	4911      	ldr	r1, [pc, #68]	; (8010ca0 <run_shortest+0x12b8>)
 8010c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5c:	330e      	adds	r3, #14
 8010c5e:	009b      	lsls	r3, r3, #2
 8010c60:	440b      	add	r3, r1
 8010c62:	605a      	str	r2, [r3, #4]
		t++;
 8010c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c66:	3301      	adds	r3, #1
 8010c68:	627b      	str	r3, [r7, #36]	; 0x24
	while (t <= 14) {
 8010c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c6c:	2b0e      	cmp	r3, #14
 8010c6e:	dde5      	ble.n	8010c3c <run_shortest+0x1254>
	}
	t = 0;
 8010c70:	2300      	movs	r3, #0
 8010c72:	627b      	str	r3, [r7, #36]	; 0x24
	while (t <= 14) {
 8010c74:	e031      	b.n	8010cda <run_shortest+0x12f2>
 8010c76:	bf00      	nop
 8010c78:	c022ec18 	.word	0xc022ec18
 8010c7c:	404fd1de 	.word	0x404fd1de
 8010c80:	20000834 	.word	0x20000834
 8010c84:	2000083c 	.word	0x2000083c
 8010c88:	00000000 	.word	0x00000000
 8010c8c:	42b40000 	.word	0x42b40000
 8010c90:	20000836 	.word	0x20000836
 8010c94:	20000814 	.word	0x20000814
 8010c98:	2000f284 	.word	0x2000f284
 8010c9c:	20001100 	.word	0x20001100
 8010ca0:	20001010 	.word	0x20001010
		wall.row_look[t] = ~wall.row_look[t];
 8010ca4:	4a11      	ldr	r2, [pc, #68]	; (8010cec <run_shortest+0x1304>)
 8010ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca8:	331e      	adds	r3, #30
 8010caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cae:	43da      	mvns	r2, r3
 8010cb0:	490e      	ldr	r1, [pc, #56]	; (8010cec <run_shortest+0x1304>)
 8010cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb4:	331e      	adds	r3, #30
 8010cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column_look[t] = ~wall.column_look[t];
 8010cba:	4a0c      	ldr	r2, [pc, #48]	; (8010cec <run_shortest+0x1304>)
 8010cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cbe:	332c      	adds	r3, #44	; 0x2c
 8010cc0:	009b      	lsls	r3, r3, #2
 8010cc2:	4413      	add	r3, r2
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	43da      	mvns	r2, r3
 8010cc8:	4908      	ldr	r1, [pc, #32]	; (8010cec <run_shortest+0x1304>)
 8010cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ccc:	332c      	adds	r3, #44	; 0x2c
 8010cce:	009b      	lsls	r3, r3, #2
 8010cd0:	440b      	add	r3, r1
 8010cd2:	605a      	str	r2, [r3, #4]
		t++;
 8010cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd6:	3301      	adds	r3, #1
 8010cd8:	627b      	str	r3, [r7, #36]	; 0x24
	while (t <= 14) {
 8010cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cdc:	2b0e      	cmp	r3, #14
 8010cde:	dde1      	ble.n	8010ca4 <run_shortest+0x12bc>
	}

}
 8010ce0:	bf00      	nop
 8010ce2:	bf00      	nop
 8010ce4:	3748      	adds	r7, #72	; 0x48
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	20001010 	.word	0x20001010

08010cf0 <decision_kitiku>:





void decision_kitiku(int x,int y,int direction,unsigned short front_count,unsigned short right_count,unsigned short back_count,unsigned short left_count){
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b08a      	sub	sp, #40	; 0x28
 8010cf4:	af02      	add	r7, sp, #8
 8010cf6:	60f8      	str	r0, [r7, #12]
 8010cf8:	60b9      	str	r1, [r7, #8]
 8010cfa:	607a      	str	r2, [r7, #4]
 8010cfc:	807b      	strh	r3, [r7, #2]
	_Bool front_wall=1;
 8010cfe:	2301      	movs	r3, #1
 8010d00:	77bb      	strb	r3, [r7, #30]
	_Bool right_wall=1;
 8010d02:	2301      	movs	r3, #1
 8010d04:	777b      	strb	r3, [r7, #29]
	_Bool left_wall=1;
 8010d06:	2301      	movs	r3, #1
 8010d08:	773b      	strb	r3, [r7, #28]
	int x_front=x;
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	61bb      	str	r3, [r7, #24]
	int y_front=y;
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	617b      	str	r3, [r7, #20]
	update_coordinate(&x_front,&y_front,direction);
 8010d12:	f107 0114 	add.w	r1, r7, #20
 8010d16:	f107 0318 	add.w	r3, r7, #24
 8010d1a:	687a      	ldr	r2, [r7, #4]
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f7fd fea3 	bl	800ea68 <update_coordinate>
	get_wall_look(x_front,y_front,direction,&front_wall,&right_wall,&left_wall);
 8010d22:	69b8      	ldr	r0, [r7, #24]
 8010d24:	6979      	ldr	r1, [r7, #20]
 8010d26:	f107 021e 	add.w	r2, r7, #30
 8010d2a:	f107 031c 	add.w	r3, r7, #28
 8010d2e:	9301      	str	r3, [sp, #4]
 8010d30:	f107 031d 	add.w	r3, r7, #29
 8010d34:	9300      	str	r3, [sp, #0]
 8010d36:	4613      	mov	r3, r2
 8010d38:	687a      	ldr	r2, [r7, #4]
 8010d3a:	f000 fe9d 	bl	8011a78 <get_wall_look>
	_Bool look_f=(front_wall && right_wall && left_wall);
 8010d3e:	7fbb      	ldrb	r3, [r7, #30]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d007      	beq.n	8010d54 <decision_kitiku+0x64>
 8010d44:	7f7b      	ldrb	r3, [r7, #29]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d004      	beq.n	8010d54 <decision_kitiku+0x64>
 8010d4a:	7f3b      	ldrb	r3, [r7, #28]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d001      	beq.n	8010d54 <decision_kitiku+0x64>
 8010d50:	2301      	movs	r3, #1
 8010d52:	e000      	b.n	8010d56 <decision_kitiku+0x66>
 8010d54:	2300      	movs	r3, #0
 8010d56:	77fb      	strb	r3, [r7, #31]
 8010d58:	7ffb      	ldrb	r3, [r7, #31]
 8010d5a:	f003 0301 	and.w	r3, r3, #1
 8010d5e:	77fb      	strb	r3, [r7, #31]

	//ここに壁条件がない
	if (look_f && front_count <= right_count
 8010d60:	7ffb      	ldrb	r3, [r7, #31]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d02b      	beq.n	8010dbe <decision_kitiku+0xce>
 8010d66:	887a      	ldrh	r2, [r7, #2]
 8010d68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d827      	bhi.n	8010dbe <decision_kitiku+0xce>
			&& front_count <= left_count && front_count <= back_count) {
 8010d6e:	887a      	ldrh	r2, [r7, #2]
 8010d70:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d823      	bhi.n	8010dbe <decision_kitiku+0xce>
 8010d76:	887a      	ldrh	r2, [r7, #2]
 8010d78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d81f      	bhi.n	8010dbe <decision_kitiku+0xce>
		if ((direction==1 && y>=14) ||
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	d102      	bne.n	8010d8a <decision_kitiku+0x9a>
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	2b0d      	cmp	r3, #13
 8010d88:	dc11      	bgt.n	8010dae <decision_kitiku+0xbe>
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2b02      	cmp	r3, #2
 8010d8e:	d102      	bne.n	8010d96 <decision_kitiku+0xa6>
			(direction==2 && x>=14) ||
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	2b0d      	cmp	r3, #13
 8010d94:	dc0b      	bgt.n	8010dae <decision_kitiku+0xbe>
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2b03      	cmp	r3, #3
 8010d9a:	d102      	bne.n	8010da2 <decision_kitiku+0xb2>
			(direction==3 && y<=1) ||
 8010d9c:	68bb      	ldr	r3, [r7, #8]
 8010d9e:	2b01      	cmp	r3, #1
 8010da0:	dd05      	ble.n	8010dae <decision_kitiku+0xbe>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2b04      	cmp	r3, #4
 8010da6:	d106      	bne.n	8010db6 <decision_kitiku+0xc6>
			(direction==4 && x<=1) ){
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	2b01      	cmp	r3, #1
 8010dac:	dc03      	bgt.n	8010db6 <decision_kitiku+0xc6>
			kitikukan = 0;
 8010dae:	4b08      	ldr	r3, [pc, #32]	; (8010dd0 <decision_kitiku+0xe0>)
 8010db0:	2200      	movs	r2, #0
 8010db2:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010db4:	e007      	b.n	8010dc6 <decision_kitiku+0xd6>
		}else{
			kitikukan = 1;
 8010db6:	4b06      	ldr	r3, [pc, #24]	; (8010dd0 <decision_kitiku+0xe0>)
 8010db8:	2201      	movs	r2, #1
 8010dba:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010dbc:	e003      	b.n	8010dc6 <decision_kitiku+0xd6>
		}

	} else {
		kitikukan = 0;
 8010dbe:	4b04      	ldr	r3, [pc, #16]	; (8010dd0 <decision_kitiku+0xe0>)
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	601a      	str	r2, [r3, #0]
	}


}
 8010dc4:	bf00      	nop
 8010dc6:	bf00      	nop
 8010dc8:	3720      	adds	r7, #32
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	bd80      	pop	{r7, pc}
 8010dce:	bf00      	nop
 8010dd0:	20000838 	.word	0x20000838

08010dd4 <compress_kitiku>:

void compress_kitiku(int *x,int *y,int *direction,int *kitiku_distance) {
 8010dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dd6:	b09b      	sub	sp, #108	; 0x6c
 8010dd8:	af04      	add	r7, sp, #16
 8010dda:	60f8      	str	r0, [r7, #12]
 8010ddc:	60b9      	str	r1, [r7, #8]
 8010dde:	607a      	str	r2, [r7, #4]
 8010de0:	603b      	str	r3, [r7, #0]
	*kitiku_distance = 1;
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	2201      	movs	r2, #1
 8010de6:	601a      	str	r2, [r3, #0]
	int kitiku = 1;
 8010de8:	2301      	movs	r3, #1
 8010dea:	647b      	str	r3, [r7, #68]	; 0x44
	_Bool look_f,look_r,look_l;
	int x_now,y_now,direction_now;
	int x_front,y_front,x_right,y_right,x_left,y_left;
	int direction_right,direction_left;
	unsigned short front_count, right_count, back_count, left_count;
	x_now=*x;y_now=*y;direction_now=*direction;
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	63bb      	str	r3, [r7, #56]	; 0x38
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	637b      	str	r3, [r7, #52]	; 0x34
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	657b      	str	r3, [r7, #84]	; 0x54
	while (1) {
		update_coordinate(&x_now,&y_now,direction_now);
 8010dfe:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8010e02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010e06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f7fd fe2d 	bl	800ea68 <update_coordinate>
		x_front=x_now;y_front=y_now;x_right=x_now;y_right=y_now;x_left=x_now;y_left=y_now;
 8010e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e10:	633b      	str	r3, [r7, #48]	; 0x30
 8010e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8010e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e20:	623b      	str	r3, [r7, #32]
 8010e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e24:	61fb      	str	r3, [r7, #28]

		update_coordinate(&x_front,&y_front,direction_now);
 8010e26:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8010e2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010e2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010e30:	4618      	mov	r0, r3
 8010e32:	f7fd fe19 	bl	800ea68 <update_coordinate>
		get_wall_look(x_front,y_front,direction_now,&front_wall,&right_wall,&left_wall);
 8010e36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e3a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010e3e:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8010e42:	9301      	str	r3, [sp, #4]
 8010e44:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8010e48:	9300      	str	r3, [sp, #0]
 8010e4a:	4613      	mov	r3, r2
 8010e4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010e4e:	f000 fe13 	bl	8011a78 <get_wall_look>
		look_f=(front_wall && right_wall && left_wall);
 8010e52:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d009      	beq.n	8010e6e <compress_kitiku+0x9a>
 8010e5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d005      	beq.n	8010e6e <compress_kitiku+0x9a>
 8010e62:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d001      	beq.n	8010e6e <compress_kitiku+0x9a>
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	e000      	b.n	8010e70 <compress_kitiku+0x9c>
 8010e6e:	2300      	movs	r3, #0
 8010e70:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010e78:	f003 0301 	and.w	r3, r3, #1
 8010e7c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43


		if(direction_now==4){direction_right=1;}else{direction_right=direction_now+1;}
 8010e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e82:	2b04      	cmp	r3, #4
 8010e84:	d102      	bne.n	8010e8c <compress_kitiku+0xb8>
 8010e86:	2301      	movs	r3, #1
 8010e88:	653b      	str	r3, [r7, #80]	; 0x50
 8010e8a:	e002      	b.n	8010e92 <compress_kitiku+0xbe>
 8010e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e8e:	3301      	adds	r3, #1
 8010e90:	653b      	str	r3, [r7, #80]	; 0x50
		update_coordinate(&x_right,&y_right,direction_right);
 8010e92:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8010e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010e9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f7fd fde3 	bl	800ea68 <update_coordinate>
		get_wall_look(x_right,y_right,direction_right,&front_wall,&right_wall,&left_wall);
 8010ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ea6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010eaa:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8010eae:	9301      	str	r3, [sp, #4]
 8010eb0:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8010eb4:	9300      	str	r3, [sp, #0]
 8010eb6:	4613      	mov	r3, r2
 8010eb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010eba:	f000 fddd 	bl	8011a78 <get_wall_look>
		look_r=(front_wall && right_wall && left_wall);
 8010ebe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d009      	beq.n	8010eda <compress_kitiku+0x106>
 8010ec6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d005      	beq.n	8010eda <compress_kitiku+0x106>
 8010ece:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d001      	beq.n	8010eda <compress_kitiku+0x106>
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	e000      	b.n	8010edc <compress_kitiku+0x108>
 8010eda:	2300      	movs	r3, #0
 8010edc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010ee0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8010ee4:	f003 0301 	and.w	r3, r3, #1
 8010ee8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


		if(direction_now==1){direction_left=4;}else{direction_left=direction_now-1;}
 8010eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010eee:	2b01      	cmp	r3, #1
 8010ef0:	d102      	bne.n	8010ef8 <compress_kitiku+0x124>
 8010ef2:	2304      	movs	r3, #4
 8010ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010ef6:	e002      	b.n	8010efe <compress_kitiku+0x12a>
 8010ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010efa:	3b01      	subs	r3, #1
 8010efc:	64fb      	str	r3, [r7, #76]	; 0x4c
		update_coordinate(&x_left,&y_left,direction_left);
 8010efe:	f107 011c 	add.w	r1, r7, #28
 8010f02:	f107 0320 	add.w	r3, r7, #32
 8010f06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f7fd fdad 	bl	800ea68 <update_coordinate>
		get_wall_look(x_left,y_left,direction_left,&front_wall,&right_wall,&left_wall);
 8010f0e:	6a38      	ldr	r0, [r7, #32]
 8010f10:	69f9      	ldr	r1, [r7, #28]
 8010f12:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010f16:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8010f1a:	9301      	str	r3, [sp, #4]
 8010f1c:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8010f20:	9300      	str	r3, [sp, #0]
 8010f22:	4613      	mov	r3, r2
 8010f24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010f26:	f000 fda7 	bl	8011a78 <get_wall_look>
		look_l=(front_wall && right_wall && left_wall);
 8010f2a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d009      	beq.n	8010f46 <compress_kitiku+0x172>
 8010f32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d005      	beq.n	8010f46 <compress_kitiku+0x172>
 8010f3a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d001      	beq.n	8010f46 <compress_kitiku+0x172>
 8010f42:	2301      	movs	r3, #1
 8010f44:	e000      	b.n	8010f48 <compress_kitiku+0x174>
 8010f46:	2300      	movs	r3, #0
 8010f48:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8010f4c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8010f50:	f003 0301 	and.w	r3, r3, #1
 8010f54:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

		get_wall(x_now,y_now,direction_now,&front_wall,&right_wall,&left_wall);
 8010f58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010f5c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010f60:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8010f64:	9301      	str	r3, [sp, #4]
 8010f66:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8010f6a:	9300      	str	r3, [sp, #0]
 8010f6c:	4613      	mov	r3, r2
 8010f6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010f70:	f000 fc26 	bl	80117c0 <get_wall>

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x_now,y_now,direction_now);
 8010f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f78:	f107 0614 	add.w	r6, r7, #20
 8010f7c:	f107 0516 	add.w	r5, r7, #22
 8010f80:	f107 0418 	add.w	r4, r7, #24
 8010f84:	f107 001a 	add.w	r0, r7, #26
 8010f88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010f8a:	9102      	str	r1, [sp, #8]
 8010f8c:	9201      	str	r2, [sp, #4]
 8010f8e:	9300      	str	r3, [sp, #0]
 8010f90:	4633      	mov	r3, r6
 8010f92:	462a      	mov	r2, r5
 8010f94:	4621      	mov	r1, r4
 8010f96:	f000 fed1 	bl	8011d3c <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 8010f9a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d001      	beq.n	8010fa6 <compress_kitiku+0x1d2>
 8010fa2:	23ff      	movs	r3, #255	; 0xff
 8010fa4:	837b      	strh	r3, [r7, #26]
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 8010fa6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d001      	beq.n	8010fb2 <compress_kitiku+0x1de>
 8010fae:	23ff      	movs	r3, #255	; 0xff
 8010fb0:	833b      	strh	r3, [r7, #24]
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 8010fb2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d001      	beq.n	8010fbe <compress_kitiku+0x1ea>
 8010fba:	23ff      	movs	r3, #255	; 0xff
 8010fbc:	82bb      	strh	r3, [r7, #20]
		// 移動の優先順位 ： 前→右→左→後
		if (walk_count[x_now][y_now] <= 1) {
 8010fbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fc2:	496c      	ldr	r1, [pc, #432]	; (8011174 <compress_kitiku+0x3a0>)
 8010fc4:	0112      	lsls	r2, r2, #4
 8010fc6:	4413      	add	r3, r2
 8010fc8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010fcc:	2b01      	cmp	r3, #1
 8010fce:	f240 8099 	bls.w	8011104 <compress_kitiku+0x330>
			//goal間近で停止
			break;
		}
		if (direction_now==1 && y_now>=14) {break;}
 8010fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fd4:	2b01      	cmp	r3, #1
 8010fd6:	d103      	bne.n	8010fe0 <compress_kitiku+0x20c>
 8010fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fda:	2b0d      	cmp	r3, #13
 8010fdc:	f300 8094 	bgt.w	8011108 <compress_kitiku+0x334>
		if (direction_now==2 && x_now>=14) {break;}
 8010fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fe2:	2b02      	cmp	r3, #2
 8010fe4:	d103      	bne.n	8010fee <compress_kitiku+0x21a>
 8010fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fe8:	2b0d      	cmp	r3, #13
 8010fea:	f300 808f 	bgt.w	801110c <compress_kitiku+0x338>
		if (direction_now==3 && y_now<=1) {break;}
 8010fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ff0:	2b03      	cmp	r3, #3
 8010ff2:	d103      	bne.n	8010ffc <compress_kitiku+0x228>
 8010ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ff6:	2b01      	cmp	r3, #1
 8010ff8:	f340 808a 	ble.w	8011110 <compress_kitiku+0x33c>
		if (direction_now==4 && x_now<=1) {break;}
 8010ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ffe:	2b04      	cmp	r3, #4
 8011000:	d103      	bne.n	801100a <compress_kitiku+0x236>
 8011002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011004:	2b01      	cmp	r3, #1
 8011006:	f340 8085 	ble.w	8011114 <compress_kitiku+0x340>
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 801100a:	8b7b      	ldrh	r3, [r7, #26]
 801100c:	2bff      	cmp	r3, #255	; 0xff
 801100e:	d10c      	bne.n	801102a <compress_kitiku+0x256>
 8011010:	8b3b      	ldrh	r3, [r7, #24]
 8011012:	2bff      	cmp	r3, #255	; 0xff
 8011014:	d109      	bne.n	801102a <compress_kitiku+0x256>
 8011016:	8abb      	ldrh	r3, [r7, #20]
 8011018:	2bff      	cmp	r3, #255	; 0xff
 801101a:	d106      	bne.n	801102a <compress_kitiku+0x256>
 801101c:	8afb      	ldrh	r3, [r7, #22]
 801101e:	2bff      	cmp	r3, #255	; 0xff
 8011020:	d103      	bne.n	801102a <compress_kitiku+0x256>
		// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 8011022:	4b55      	ldr	r3, [pc, #340]	; (8011178 <compress_kitiku+0x3a4>)
 8011024:	2201      	movs	r2, #1
 8011026:	701a      	strb	r2, [r3, #0]
		break;
 8011028:	e077      	b.n	801111a <compress_kitiku+0x346>
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 801102a:	8b7a      	ldrh	r2, [r7, #26]
 801102c:	8b3b      	ldrh	r3, [r7, #24]
 801102e:	429a      	cmp	r2, r3
 8011030:	d814      	bhi.n	801105c <compress_kitiku+0x288>
 8011032:	8b7a      	ldrh	r2, [r7, #26]
 8011034:	8abb      	ldrh	r3, [r7, #20]
 8011036:	429a      	cmp	r2, r3
 8011038:	d810      	bhi.n	801105c <compress_kitiku+0x288>
 801103a:	8b7a      	ldrh	r2, [r7, #26]
 801103c:	8afb      	ldrh	r3, [r7, #22]
 801103e:	429a      	cmp	r2, r3
 8011040:	d80c      	bhi.n	801105c <compress_kitiku+0x288>
		// 直進
			if(look_f){
 8011042:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011046:	2b00      	cmp	r3, #0
 8011048:	d005      	beq.n	8011056 <compress_kitiku+0x282>
				*kitiku_distance += 2;
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	1c9a      	adds	r2, r3, #2
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	601a      	str	r2, [r3, #0]
 8011054:	e002      	b.n	801105c <compress_kitiku+0x288>
			}else{
				kitiku = 0;
 8011056:	2300      	movs	r3, #0
 8011058:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 801105a:	e05e      	b.n	801111a <compress_kitiku+0x346>
			}
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 801105c:	8b3a      	ldrh	r2, [r7, #24]
 801105e:	8b7b      	ldrh	r3, [r7, #26]
 8011060:	429a      	cmp	r2, r3
 8011062:	d211      	bcs.n	8011088 <compress_kitiku+0x2b4>
 8011064:	8b3a      	ldrh	r2, [r7, #24]
 8011066:	8abb      	ldrh	r3, [r7, #20]
 8011068:	429a      	cmp	r2, r3
 801106a:	d80d      	bhi.n	8011088 <compress_kitiku+0x2b4>
 801106c:	8b3a      	ldrh	r2, [r7, #24]
 801106e:	8afb      	ldrh	r3, [r7, #22]
 8011070:	429a      	cmp	r2, r3
 8011072:	d809      	bhi.n	8011088 <compress_kitiku+0x2b4>
		// 右旋回
			if(look_r){
 8011074:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8011078:	2b00      	cmp	r3, #0
 801107a:	d002      	beq.n	8011082 <compress_kitiku+0x2ae>
				kitiku = 0;
 801107c:	2300      	movs	r3, #0
 801107e:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 8011080:	e04b      	b.n	801111a <compress_kitiku+0x346>
			}else{
				kitiku = 0;
 8011082:	2300      	movs	r3, #0
 8011084:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 8011086:	e048      	b.n	801111a <compress_kitiku+0x346>
			}
			direction_now++;
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 8011088:	8aba      	ldrh	r2, [r7, #20]
 801108a:	8b7b      	ldrh	r3, [r7, #26]
 801108c:	429a      	cmp	r2, r3
 801108e:	d211      	bcs.n	80110b4 <compress_kitiku+0x2e0>
 8011090:	8aba      	ldrh	r2, [r7, #20]
 8011092:	8b3b      	ldrh	r3, [r7, #24]
 8011094:	429a      	cmp	r2, r3
 8011096:	d20d      	bcs.n	80110b4 <compress_kitiku+0x2e0>
 8011098:	8aba      	ldrh	r2, [r7, #20]
 801109a:	8afb      	ldrh	r3, [r7, #22]
 801109c:	429a      	cmp	r2, r3
 801109e:	d809      	bhi.n	80110b4 <compress_kitiku+0x2e0>
		// 左旋回
			if(look_l){
 80110a0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d002      	beq.n	80110ae <compress_kitiku+0x2da>
				kitiku = 0;
 80110a8:	2300      	movs	r3, #0
 80110aa:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 80110ac:	e035      	b.n	801111a <compress_kitiku+0x346>
			}else{
				kitiku = 0;
 80110ae:	2300      	movs	r3, #0
 80110b0:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 80110b2:	e032      	b.n	801111a <compress_kitiku+0x346>
			}
			direction_now--;
		}
		if(back_count < front_count && back_count < right_count
 80110b4:	8afa      	ldrh	r2, [r7, #22]
 80110b6:	8b7b      	ldrh	r3, [r7, #26]
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d20a      	bcs.n	80110d2 <compress_kitiku+0x2fe>
 80110bc:	8afa      	ldrh	r2, [r7, #22]
 80110be:	8b3b      	ldrh	r3, [r7, #24]
 80110c0:	429a      	cmp	r2, r3
 80110c2:	d206      	bcs.n	80110d2 <compress_kitiku+0x2fe>
								&& back_count < left_count){
 80110c4:	8afa      	ldrh	r2, [r7, #22]
 80110c6:	8abb      	ldrh	r3, [r7, #20]
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d202      	bcs.n	80110d2 <compress_kitiku+0x2fe>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
			kitiku = 0;
 80110cc:	2300      	movs	r3, #0
 80110ce:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 80110d0:	e023      	b.n	801111a <compress_kitiku+0x346>
			direction_now+=2;
		}


		if (direction_now == 5) {
 80110d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110d4:	2b05      	cmp	r3, #5
 80110d6:	d101      	bne.n	80110dc <compress_kitiku+0x308>
			direction_now = 1;
 80110d8:	2301      	movs	r3, #1
 80110da:	657b      	str	r3, [r7, #84]	; 0x54
		}
		if (direction_now == 6) {
 80110dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110de:	2b06      	cmp	r3, #6
 80110e0:	d101      	bne.n	80110e6 <compress_kitiku+0x312>
			direction_now = 2;
 80110e2:	2302      	movs	r3, #2
 80110e4:	657b      	str	r3, [r7, #84]	; 0x54
		}
		if (direction_now == 0) {
 80110e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d101      	bne.n	80110f0 <compress_kitiku+0x31c>
			direction_now = 4;
 80110ec:	2304      	movs	r3, #4
 80110ee:	657b      	str	r3, [r7, #84]	; 0x54
		}
		if (direction_now == -1) {
 80110f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110f6:	d101      	bne.n	80110fc <compress_kitiku+0x328>
			direction_now = 3;
 80110f8:	2303      	movs	r3, #3
 80110fa:	657b      	str	r3, [r7, #84]	; 0x54
		}
		if (kitiku == 0) {
 80110fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d00a      	beq.n	8011118 <compress_kitiku+0x344>
		update_coordinate(&x_now,&y_now,direction_now);
 8011102:	e67c      	b.n	8010dfe <compress_kitiku+0x2a>
			break;
 8011104:	bf00      	nop
 8011106:	e008      	b.n	801111a <compress_kitiku+0x346>
		if (direction_now==1 && y_now>=14) {break;}
 8011108:	bf00      	nop
 801110a:	e006      	b.n	801111a <compress_kitiku+0x346>
		if (direction_now==2 && x_now>=14) {break;}
 801110c:	bf00      	nop
 801110e:	e004      	b.n	801111a <compress_kitiku+0x346>
		if (direction_now==3 && y_now<=1) {break;}
 8011110:	bf00      	nop
 8011112:	e002      	b.n	801111a <compress_kitiku+0x346>
		if (direction_now==4 && x_now<=1) {break;}
 8011114:	bf00      	nop
 8011116:	e000      	b.n	801111a <compress_kitiku+0x346>

			break;
 8011118:	bf00      	nop
		}

	}

	int direction2=direction_now+2;
 801111a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801111c:	3302      	adds	r3, #2
 801111e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (direction2 == 5) {
 8011120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011122:	2b05      	cmp	r3, #5
 8011124:	d101      	bne.n	801112a <compress_kitiku+0x356>
				direction2 = 1;
 8011126:	2301      	movs	r3, #1
 8011128:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			if (direction2 == 6) {
 801112a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801112c:	2b06      	cmp	r3, #6
 801112e:	d101      	bne.n	8011134 <compress_kitiku+0x360>
				direction2 = 2;
 8011130:	2302      	movs	r3, #2
 8011132:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			if (direction2 == 0) {
 8011134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011136:	2b00      	cmp	r3, #0
 8011138:	d101      	bne.n	801113e <compress_kitiku+0x36a>
				direction2 = 4;
 801113a:	2304      	movs	r3, #4
 801113c:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			if (direction2 == -1) {
 801113e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011144:	d101      	bne.n	801114a <compress_kitiku+0x376>
				direction2 = 3;
 8011146:	2303      	movs	r3, #3
 8011148:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	update_coordinate(&x_now,&y_now,direction2);
 801114a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 801114e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011154:	4618      	mov	r0, r3
 8011156:	f7fd fc87 	bl	800ea68 <update_coordinate>

	*x=x_now;
 801115a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	601a      	str	r2, [r3, #0]
	*y=y_now;
 8011160:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	601a      	str	r2, [r3, #0]
	*direction=direction_now;
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801116a:	601a      	str	r2, [r3, #0]

}
 801116c:	bf00      	nop
 801116e:	375c      	adds	r7, #92	; 0x5c
 8011170:	46bd      	mov	sp, r7
 8011172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011174:	200011f4 	.word	0x200011f4
 8011178:	20000813 	.word	0x20000813

0801117c <maze_out_matlab>:
uint16_t walk_count[16][16]; //歩数いれる箱
DIJKSTRA Dijkstra;
STACK_T g_Goal_x;
STACK_T g_Goal_y;

void maze_out_matlab(void){
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0

	int tt=0;
 8011182:	2300      	movs	r3, #0
 8011184:	607b      	str	r3, [r7, #4]
	while (tt <= 14) {
 8011186:	e018      	b.n	80111ba <maze_out_matlab+0x3e>
		printf("g_maze_row(%d) = %d;\n",tt+1,wall.row[tt]);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	1c59      	adds	r1, r3, #1
 801118c:	4a0f      	ldr	r2, [pc, #60]	; (80111cc <maze_out_matlab+0x50>)
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011194:	461a      	mov	r2, r3
 8011196:	480e      	ldr	r0, [pc, #56]	; (80111d0 <maze_out_matlab+0x54>)
 8011198:	f010 f9fe 	bl	8021598 <iprintf>
		printf("g_maze_column(%d) = %d;\n",tt+1,wall.column[tt]);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	1c59      	adds	r1, r3, #1
 80111a0:	4a0a      	ldr	r2, [pc, #40]	; (80111cc <maze_out_matlab+0x50>)
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	330e      	adds	r3, #14
 80111a6:	009b      	lsls	r3, r3, #2
 80111a8:	4413      	add	r3, r2
 80111aa:	685b      	ldr	r3, [r3, #4]
 80111ac:	461a      	mov	r2, r3
 80111ae:	4809      	ldr	r0, [pc, #36]	; (80111d4 <maze_out_matlab+0x58>)
 80111b0:	f010 f9f2 	bl	8021598 <iprintf>
		tt++;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	3301      	adds	r3, #1
 80111b8:	607b      	str	r3, [r7, #4]
	while (tt <= 14) {
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2b0e      	cmp	r3, #14
 80111be:	dde3      	ble.n	8011188 <maze_out_matlab+0xc>
	}
	tt = 0;
 80111c0:	2300      	movs	r3, #0
 80111c2:	607b      	str	r3, [r7, #4]

}
 80111c4:	bf00      	nop
 80111c6:	3708      	adds	r7, #8
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd80      	pop	{r7, pc}
 80111cc:	20001010 	.word	0x20001010
 80111d0:	08025014 	.word	0x08025014
 80111d4:	0802502c 	.word	0x0802502c

080111d8 <maze_clear>:



void maze_clear(void) { //初期化
 80111d8:	b580      	push	{r7, lr}
 80111da:	b084      	sub	sp, #16
 80111dc:	af00      	add	r7, sp, #0

	Dijkstra_maker_flag=0;
 80111de:	4b6b      	ldr	r3, [pc, #428]	; (801138c <maze_clear+0x1b4>)
 80111e0:	2200      	movs	r2, #0
 80111e2:	701a      	strb	r2, [r3, #0]
	int tt = 0;
 80111e4:	2300      	movs	r3, #0
 80111e6:	60fb      	str	r3, [r7, #12]
	while (tt <= 14) {
 80111e8:	e01b      	b.n	8011222 <maze_clear+0x4a>
		wall.row[tt] = 0;
 80111ea:	4a69      	ldr	r2, [pc, #420]	; (8011390 <maze_clear+0x1b8>)
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	2100      	movs	r1, #0
 80111f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		wall.column[tt] = 0;
 80111f4:	4a66      	ldr	r2, [pc, #408]	; (8011390 <maze_clear+0x1b8>)
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	330e      	adds	r3, #14
 80111fa:	009b      	lsls	r3, r3, #2
 80111fc:	4413      	add	r3, r2
 80111fe:	2200      	movs	r2, #0
 8011200:	605a      	str	r2, [r3, #4]
		wall.row_look[tt] = 0;
 8011202:	4a63      	ldr	r2, [pc, #396]	; (8011390 <maze_clear+0x1b8>)
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	331e      	adds	r3, #30
 8011208:	2100      	movs	r1, #0
 801120a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		wall.column_look[tt] = 0;
 801120e:	4a60      	ldr	r2, [pc, #384]	; (8011390 <maze_clear+0x1b8>)
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	332c      	adds	r3, #44	; 0x2c
 8011214:	009b      	lsls	r3, r3, #2
 8011216:	4413      	add	r3, r2
 8011218:	2200      	movs	r2, #0
 801121a:	605a      	str	r2, [r3, #4]
		tt++;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	3301      	adds	r3, #1
 8011220:	60fb      	str	r3, [r7, #12]
	while (tt <= 14) {
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	2b0e      	cmp	r3, #14
 8011226:	dde0      	ble.n	80111ea <maze_clear+0x12>
	}
	tt = 0;
 8011228:	2300      	movs	r3, #0
 801122a:	60fb      	str	r3, [r7, #12]
//	wall.row[0]=0;wall.row[1]=2;wall.row[2]=32762;wall.row[3]=50;wall.row[4]=16320;wall.row[5]=423;wall.row[6]=105;wall.row[7]=32490;
//	wall.row[8]=469;wall.row[9]=533;wall.row[10]=1258;wall.row[11]=3182;wall.row[12]=7837;wall.row[13]=13818;wall.row[14]=57342;
//	wall.column[0] = 20499;wall.column[1] = 8301;wall.column[2] = 61;wall.column[3] = 50;wall.column[4] = 6261;wall.column[5] = 10130;wall.column[6] = 4117;wall.column[7] = 3149;
//	wall.column[8] = 16085;wall.column[9] = 365;wall.column[10] = 725;wall.column[11] = 9837;wall.column[12] = 2773;wall.column[13] = 23149;wall.column[14] = 16381;
	    wall.column[0] = 0b0000011000011011;
 801122c:	4b58      	ldr	r3, [pc, #352]	; (8011390 <maze_clear+0x1b8>)
 801122e:	f240 621b 	movw	r2, #1563	; 0x61b
 8011232:	63da      	str	r2, [r3, #60]	; 0x3c
	    wall.column[1] = 0b0000000011001000;
 8011234:	4b56      	ldr	r3, [pc, #344]	; (8011390 <maze_clear+0x1b8>)
 8011236:	22c8      	movs	r2, #200	; 0xc8
 8011238:	641a      	str	r2, [r3, #64]	; 0x40
	    wall.column[2] = 0b0000000110000100;
 801123a:	4b55      	ldr	r3, [pc, #340]	; (8011390 <maze_clear+0x1b8>)
 801123c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011240:	645a      	str	r2, [r3, #68]	; 0x44
	    wall.column[3] = 0b0000011110110000;
 8011242:	4b53      	ldr	r3, [pc, #332]	; (8011390 <maze_clear+0x1b8>)
 8011244:	f44f 62f6 	mov.w	r2, #1968	; 0x7b0
 8011248:	649a      	str	r2, [r3, #72]	; 0x48
	    wall.column[4] = 0b0000100100011000;
 801124a:	4b51      	ldr	r3, [pc, #324]	; (8011390 <maze_clear+0x1b8>)
 801124c:	f640 1218 	movw	r2, #2328	; 0x918
 8011250:	64da      	str	r2, [r3, #76]	; 0x4c
	    wall.column[5] = 0b0000000000000000;
 8011252:	4b4f      	ldr	r3, [pc, #316]	; (8011390 <maze_clear+0x1b8>)
 8011254:	2200      	movs	r2, #0
 8011256:	651a      	str	r2, [r3, #80]	; 0x50
	    wall.column[6] = 0b0000000101000000;
 8011258:	4b4d      	ldr	r3, [pc, #308]	; (8011390 <maze_clear+0x1b8>)
 801125a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801125e:	655a      	str	r2, [r3, #84]	; 0x54
	    wall.column[7] = 0b0011101111111110;
 8011260:	4b4b      	ldr	r3, [pc, #300]	; (8011390 <maze_clear+0x1b8>)
 8011262:	f643 32fe 	movw	r2, #15358	; 0x3bfe
 8011266:	659a      	str	r2, [r3, #88]	; 0x58
	    wall.column[8] = 0b0011111001011100;
 8011268:	4b49      	ldr	r3, [pc, #292]	; (8011390 <maze_clear+0x1b8>)
 801126a:	f643 625c 	movw	r2, #15964	; 0x3e5c
 801126e:	65da      	str	r2, [r3, #92]	; 0x5c
	    wall.column[9] = 0b0000000000000000;
 8011270:	4b47      	ldr	r3, [pc, #284]	; (8011390 <maze_clear+0x1b8>)
 8011272:	2200      	movs	r2, #0
 8011274:	661a      	str	r2, [r3, #96]	; 0x60
	    wall.column[10] = 0b0000110110000000;
 8011276:	4b46      	ldr	r3, [pc, #280]	; (8011390 <maze_clear+0x1b8>)
 8011278:	f44f 6258 	mov.w	r2, #3456	; 0xd80
 801127c:	665a      	str	r2, [r3, #100]	; 0x64
	    wall.column[11] = 0b0000001001000100;
 801127e:	4b44      	ldr	r3, [pc, #272]	; (8011390 <maze_clear+0x1b8>)
 8011280:	f44f 7211 	mov.w	r2, #580	; 0x244
 8011284:	669a      	str	r2, [r3, #104]	; 0x68
	    wall.column[12] = 0b0110111001101010;
 8011286:	4b42      	ldr	r3, [pc, #264]	; (8011390 <maze_clear+0x1b8>)
 8011288:	f646 626a 	movw	r2, #28266	; 0x6e6a
 801128c:	66da      	str	r2, [r3, #108]	; 0x6c
	    wall.column[13] = 0b0011111111010100;
 801128e:	4b40      	ldr	r3, [pc, #256]	; (8011390 <maze_clear+0x1b8>)
 8011290:	f643 72d4 	movw	r2, #16340	; 0x3fd4
 8011294:	671a      	str	r2, [r3, #112]	; 0x70
	    wall.column[14] = 0b0111011010101000;
 8011296:	4b3e      	ldr	r3, [pc, #248]	; (8011390 <maze_clear+0x1b8>)
 8011298:	f247 62a8 	movw	r2, #30376	; 0x76a8
 801129c:	675a      	str	r2, [r3, #116]	; 0x74
	    wall.row[14] = 0b0110000000000000;
 801129e:	4b3c      	ldr	r3, [pc, #240]	; (8011390 <maze_clear+0x1b8>)
 80112a0:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80112a4:	639a      	str	r2, [r3, #56]	; 0x38
	    wall.row[13] = 0b0000000100000000;
 80112a6:	4b3a      	ldr	r3, [pc, #232]	; (8011390 <maze_clear+0x1b8>)
 80112a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80112ac:	635a      	str	r2, [r3, #52]	; 0x34
	    wall.row[12] = 0b0000000000000000;
 80112ae:	4b38      	ldr	r3, [pc, #224]	; (8011390 <maze_clear+0x1b8>)
 80112b0:	2200      	movs	r2, #0
 80112b2:	631a      	str	r2, [r3, #48]	; 0x30
	    wall.row[11] = 0b0000100000000110;
 80112b4:	4b36      	ldr	r3, [pc, #216]	; (8011390 <maze_clear+0x1b8>)
 80112b6:	f640 0206 	movw	r2, #2054	; 0x806
 80112ba:	62da      	str	r2, [r3, #44]	; 0x2c
	    wall.row[10] = 0b0000000011101110;
 80112bc:	4b34      	ldr	r3, [pc, #208]	; (8011390 <maze_clear+0x1b8>)
 80112be:	22ee      	movs	r2, #238	; 0xee
 80112c0:	629a      	str	r2, [r3, #40]	; 0x28
	    wall.row[9] = 0b0000000011110000;
 80112c2:	4b33      	ldr	r3, [pc, #204]	; (8011390 <maze_clear+0x1b8>)
 80112c4:	22f0      	movs	r2, #240	; 0xf0
 80112c6:	625a      	str	r2, [r3, #36]	; 0x24
	    wall.row[8] = 0b0001011001100110;
 80112c8:	4b31      	ldr	r3, [pc, #196]	; (8011390 <maze_clear+0x1b8>)
 80112ca:	f241 6266 	movw	r2, #5734	; 0x1666
 80112ce:	621a      	str	r2, [r3, #32]
	    wall.row[7] = 0b0011001100000010;
 80112d0:	4b2f      	ldr	r3, [pc, #188]	; (8011390 <maze_clear+0x1b8>)
 80112d2:	f243 3202 	movw	r2, #13058	; 0x3302
 80112d6:	61da      	str	r2, [r3, #28]
	    wall.row[6] = 0b1011011000001000;
 80112d8:	4b2d      	ldr	r3, [pc, #180]	; (8011390 <maze_clear+0x1b8>)
 80112da:	f24b 6208 	movw	r2, #46600	; 0xb608
 80112de:	619a      	str	r2, [r3, #24]
	    wall.row[5] = 0b0100111001111000;
 80112e0:	4b2b      	ldr	r3, [pc, #172]	; (8011390 <maze_clear+0x1b8>)
 80112e2:	f644 6278 	movw	r2, #20088	; 0x4e78
 80112e6:	615a      	str	r2, [r3, #20]
	    wall.row[4] = 0b0101111001100001;
 80112e8:	4b29      	ldr	r3, [pc, #164]	; (8011390 <maze_clear+0x1b8>)
 80112ea:	f645 6261 	movw	r2, #24161	; 0x5e61
 80112ee:	611a      	str	r2, [r3, #16]
	    wall.row[3] = 0b0010000000001100;
 80112f0:	4b27      	ldr	r3, [pc, #156]	; (8011390 <maze_clear+0x1b8>)
 80112f2:	f242 020c 	movw	r2, #8204	; 0x200c
 80112f6:	60da      	str	r2, [r3, #12]
	    wall.row[2] = 0b0101000000011010;
 80112f8:	4b25      	ldr	r3, [pc, #148]	; (8011390 <maze_clear+0x1b8>)
 80112fa:	f245 021a 	movw	r2, #20506	; 0x501a
 80112fe:	609a      	str	r2, [r3, #8]
	    wall.row[1] = 0b0010011000000010;
 8011300:	4b23      	ldr	r3, [pc, #140]	; (8011390 <maze_clear+0x1b8>)
 8011302:	f242 6202 	movw	r2, #9730	; 0x2602
 8011306:	605a      	str	r2, [r3, #4]
	    wall.row[0] = 0b0001101100000000;
 8011308:	4b21      	ldr	r3, [pc, #132]	; (8011390 <maze_clear+0x1b8>)
 801130a:	f44f 52d8 	mov.w	r2, #6912	; 0x1b00
 801130e:	601a      	str	r2, [r3, #0]


	for(int i=0;i<=15;i++){
 8011310:	2300      	movs	r3, #0
 8011312:	60bb      	str	r3, [r7, #8]
 8011314:	e022      	b.n	801135c <maze_clear+0x184>
		for(int j=0;j<=14;j++){
 8011316:	2300      	movs	r3, #0
 8011318:	607b      	str	r3, [r7, #4]
 801131a:	e019      	b.n	8011350 <maze_clear+0x178>
			Dijkstra.column_count[i][j]=MAX_WALKCOUNT_DIJKSTRA;
 801131c:	491d      	ldr	r1, [pc, #116]	; (8011394 <maze_clear+0x1bc>)
 801131e:	68ba      	ldr	r2, [r7, #8]
 8011320:	4613      	mov	r3, r2
 8011322:	011b      	lsls	r3, r3, #4
 8011324:	1a9b      	subs	r3, r3, r2
 8011326:	687a      	ldr	r2, [r7, #4]
 8011328:	4413      	add	r3, r2
 801132a:	33f0      	adds	r3, #240	; 0xf0
 801132c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011330:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			Dijkstra.row_count[i][j]=MAX_WALKCOUNT_DIJKSTRA;
 8011334:	4917      	ldr	r1, [pc, #92]	; (8011394 <maze_clear+0x1bc>)
 8011336:	68ba      	ldr	r2, [r7, #8]
 8011338:	4613      	mov	r3, r2
 801133a:	011b      	lsls	r3, r3, #4
 801133c:	1a9b      	subs	r3, r3, r2
 801133e:	687a      	ldr	r2, [r7, #4]
 8011340:	4413      	add	r3, r2
 8011342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011346:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j=0;j<=14;j++){
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	3301      	adds	r3, #1
 801134e:	607b      	str	r3, [r7, #4]
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2b0e      	cmp	r3, #14
 8011354:	dde2      	ble.n	801131c <maze_clear+0x144>
	for(int i=0;i<=15;i++){
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	3301      	adds	r3, #1
 801135a:	60bb      	str	r3, [r7, #8]
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	2b0f      	cmp	r3, #15
 8011360:	ddd9      	ble.n	8011316 <maze_clear+0x13e>
		}
	}
	Dijkstra.row_count[GOAL_X][GOAL_Y]=0;
 8011362:	4b0c      	ldr	r3, [pc, #48]	; (8011394 <maze_clear+0x1bc>)
 8011364:	2200      	movs	r2, #0
 8011366:	879a      	strh	r2, [r3, #60]	; 0x3c
	Dijkstra.row_count[GOAL_X+1][GOAL_Y]=0;
 8011368:	4b0a      	ldr	r3, [pc, #40]	; (8011394 <maze_clear+0x1bc>)
 801136a:	2200      	movs	r2, #0
 801136c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	Dijkstra.column_count[GOAL_Y][GOAL_X]=0;
 8011370:	4b08      	ldr	r3, [pc, #32]	; (8011394 <maze_clear+0x1bc>)
 8011372:	2200      	movs	r2, #0
 8011374:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
	Dijkstra.column_count[GOAL_Y+1][GOAL_X]=0;
 8011378:	4b06      	ldr	r3, [pc, #24]	; (8011394 <maze_clear+0x1bc>)
 801137a:	2200      	movs	r2, #0
 801137c:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202


//ここから歩数マップの初期状態を作る．
create_StepCountMap_queue();
 8011380:	f003 fb24 	bl	80149cc <create_StepCountMap_queue>

//kokomade

}
 8011384:	bf00      	nop
 8011386:	3710      	adds	r7, #16
 8011388:	46bd      	mov	sp, r7
 801138a:	bd80      	pop	{r7, pc}
 801138c:	200011f0 	.word	0x200011f0
 8011390:	20001010 	.word	0x20001010
 8011394:	200013f4 	.word	0x200013f4

08011398 <update_wall>:



void update_wall(int x,int y,int direction,_Bool front_wall,_Bool right_wall,_Bool left_wall){
 8011398:	b480      	push	{r7}
 801139a:	b085      	sub	sp, #20
 801139c:	af00      	add	r7, sp, #0
 801139e:	60f8      	str	r0, [r7, #12]
 80113a0:	60b9      	str	r1, [r7, #8]
 80113a2:	607a      	str	r2, [r7, #4]
 80113a4:	70fb      	strb	r3, [r7, #3]
// x:x座標, y:y座標, direction:向き(北1東2南3西4),
//front_wall:前壁の有無(Ture=1 false=0), right_wall:右壁の有無(Ture=1 false=0), left_wall:左壁の有無(Ture=1 false=0)

	switch (direction) {
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	3b01      	subs	r3, #1
 80113aa:	2b03      	cmp	r3, #3
 80113ac:	f200 81ff 	bhi.w	80117ae <update_wall+0x416>
 80113b0:	a201      	add	r2, pc, #4	; (adr r2, 80113b8 <update_wall+0x20>)
 80113b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113b6:	bf00      	nop
 80113b8:	080113c9 	.word	0x080113c9
 80113bc:	080114bf 	.word	0x080114bf
 80113c0:	080115ad 	.word	0x080115ad
 80113c4:	080116af 	.word	0x080116af
	case 1:
		if (y <= 14) {
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	2b0e      	cmp	r3, #14
 80113cc:	dc1e      	bgt.n	801140c <update_wall+0x74>
			wall.row_look[y] = wall.row_look[y] | (1 << x);
 80113ce:	4a76      	ldr	r2, [pc, #472]	; (80115a8 <update_wall+0x210>)
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	331e      	adds	r3, #30
 80113d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113d8:	2101      	movs	r1, #1
 80113da:	68fa      	ldr	r2, [r7, #12]
 80113dc:	fa01 f202 	lsl.w	r2, r1, r2
 80113e0:	431a      	orrs	r2, r3
 80113e2:	4971      	ldr	r1, [pc, #452]	; (80115a8 <update_wall+0x210>)
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	331e      	adds	r3, #30
 80113e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(front_wall){wall.row[y] = wall.row[y] | (1 << x);}
 80113ec:	78fb      	ldrb	r3, [r7, #3]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d00c      	beq.n	801140c <update_wall+0x74>
 80113f2:	4a6d      	ldr	r2, [pc, #436]	; (80115a8 <update_wall+0x210>)
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113fa:	2101      	movs	r1, #1
 80113fc:	68fa      	ldr	r2, [r7, #12]
 80113fe:	fa01 f202 	lsl.w	r2, r1, r2
 8011402:	431a      	orrs	r2, r3
 8011404:	4968      	ldr	r1, [pc, #416]	; (80115a8 <update_wall+0x210>)
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		if (x >= 1) {
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	2b00      	cmp	r3, #0
 8011410:	dd2a      	ble.n	8011468 <update_wall+0xd0>
			wall.column_look[x - 1] = wall.column_look[x - 1] | (1 << y);
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	3b01      	subs	r3, #1
 8011416:	4a64      	ldr	r2, [pc, #400]	; (80115a8 <update_wall+0x210>)
 8011418:	332c      	adds	r3, #44	; 0x2c
 801141a:	009b      	lsls	r3, r3, #2
 801141c:	4413      	add	r3, r2
 801141e:	685a      	ldr	r2, [r3, #4]
 8011420:	2101      	movs	r1, #1
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	fa01 f303 	lsl.w	r3, r1, r3
 8011428:	4619      	mov	r1, r3
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	3b01      	subs	r3, #1
 801142e:	430a      	orrs	r2, r1
 8011430:	495d      	ldr	r1, [pc, #372]	; (80115a8 <update_wall+0x210>)
 8011432:	332c      	adds	r3, #44	; 0x2c
 8011434:	009b      	lsls	r3, r3, #2
 8011436:	440b      	add	r3, r1
 8011438:	605a      	str	r2, [r3, #4]
			if(left_wall){wall.column[x - 1] = wall.column[x - 1] | (1 << y);}
 801143a:	7f3b      	ldrb	r3, [r7, #28]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d013      	beq.n	8011468 <update_wall+0xd0>
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	3b01      	subs	r3, #1
 8011444:	4a58      	ldr	r2, [pc, #352]	; (80115a8 <update_wall+0x210>)
 8011446:	330e      	adds	r3, #14
 8011448:	009b      	lsls	r3, r3, #2
 801144a:	4413      	add	r3, r2
 801144c:	685a      	ldr	r2, [r3, #4]
 801144e:	2101      	movs	r1, #1
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	fa01 f303 	lsl.w	r3, r1, r3
 8011456:	4619      	mov	r1, r3
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	3b01      	subs	r3, #1
 801145c:	430a      	orrs	r2, r1
 801145e:	4952      	ldr	r1, [pc, #328]	; (80115a8 <update_wall+0x210>)
 8011460:	330e      	adds	r3, #14
 8011462:	009b      	lsls	r3, r3, #2
 8011464:	440b      	add	r3, r1
 8011466:	605a      	str	r2, [r3, #4]
		}

		if (x <= 14) {
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	2b0e      	cmp	r3, #14
 801146c:	f300 8198 	bgt.w	80117a0 <update_wall+0x408>
			wall.column_look[x] = wall.column_look[x] | (1 << y);
 8011470:	4a4d      	ldr	r2, [pc, #308]	; (80115a8 <update_wall+0x210>)
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	332c      	adds	r3, #44	; 0x2c
 8011476:	009b      	lsls	r3, r3, #2
 8011478:	4413      	add	r3, r2
 801147a:	685b      	ldr	r3, [r3, #4]
 801147c:	2101      	movs	r1, #1
 801147e:	68ba      	ldr	r2, [r7, #8]
 8011480:	fa01 f202 	lsl.w	r2, r1, r2
 8011484:	431a      	orrs	r2, r3
 8011486:	4948      	ldr	r1, [pc, #288]	; (80115a8 <update_wall+0x210>)
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	332c      	adds	r3, #44	; 0x2c
 801148c:	009b      	lsls	r3, r3, #2
 801148e:	440b      	add	r3, r1
 8011490:	605a      	str	r2, [r3, #4]
			if(right_wall){wall.column[x] = wall.column[x] | (1 << y);}
 8011492:	7e3b      	ldrb	r3, [r7, #24]
 8011494:	2b00      	cmp	r3, #0
 8011496:	f000 8183 	beq.w	80117a0 <update_wall+0x408>
 801149a:	4a43      	ldr	r2, [pc, #268]	; (80115a8 <update_wall+0x210>)
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	330e      	adds	r3, #14
 80114a0:	009b      	lsls	r3, r3, #2
 80114a2:	4413      	add	r3, r2
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	2101      	movs	r1, #1
 80114a8:	68ba      	ldr	r2, [r7, #8]
 80114aa:	fa01 f202 	lsl.w	r2, r1, r2
 80114ae:	431a      	orrs	r2, r3
 80114b0:	493d      	ldr	r1, [pc, #244]	; (80115a8 <update_wall+0x210>)
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	330e      	adds	r3, #14
 80114b6:	009b      	lsls	r3, r3, #2
 80114b8:	440b      	add	r3, r1
 80114ba:	605a      	str	r2, [r3, #4]
		}

		break;
 80114bc:	e170      	b.n	80117a0 <update_wall+0x408>
	case 2:
		if (x <= 14) {
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	2b0e      	cmp	r3, #14
 80114c2:	dc24      	bgt.n	801150e <update_wall+0x176>
			wall.column_look[x] = wall.column_look[x] | (1 << y);
 80114c4:	4a38      	ldr	r2, [pc, #224]	; (80115a8 <update_wall+0x210>)
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	332c      	adds	r3, #44	; 0x2c
 80114ca:	009b      	lsls	r3, r3, #2
 80114cc:	4413      	add	r3, r2
 80114ce:	685b      	ldr	r3, [r3, #4]
 80114d0:	2101      	movs	r1, #1
 80114d2:	68ba      	ldr	r2, [r7, #8]
 80114d4:	fa01 f202 	lsl.w	r2, r1, r2
 80114d8:	431a      	orrs	r2, r3
 80114da:	4933      	ldr	r1, [pc, #204]	; (80115a8 <update_wall+0x210>)
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	332c      	adds	r3, #44	; 0x2c
 80114e0:	009b      	lsls	r3, r3, #2
 80114e2:	440b      	add	r3, r1
 80114e4:	605a      	str	r2, [r3, #4]
			if(front_wall){wall.column[x] = wall.column[x] | (1 << y);}
 80114e6:	78fb      	ldrb	r3, [r7, #3]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d010      	beq.n	801150e <update_wall+0x176>
 80114ec:	4a2e      	ldr	r2, [pc, #184]	; (80115a8 <update_wall+0x210>)
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	330e      	adds	r3, #14
 80114f2:	009b      	lsls	r3, r3, #2
 80114f4:	4413      	add	r3, r2
 80114f6:	685b      	ldr	r3, [r3, #4]
 80114f8:	2101      	movs	r1, #1
 80114fa:	68ba      	ldr	r2, [r7, #8]
 80114fc:	fa01 f202 	lsl.w	r2, r1, r2
 8011500:	431a      	orrs	r2, r3
 8011502:	4929      	ldr	r1, [pc, #164]	; (80115a8 <update_wall+0x210>)
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	330e      	adds	r3, #14
 8011508:	009b      	lsls	r3, r3, #2
 801150a:	440b      	add	r3, r1
 801150c:	605a      	str	r2, [r3, #4]
		}

		if (y <= 14) {
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	2b0e      	cmp	r3, #14
 8011512:	dc1e      	bgt.n	8011552 <update_wall+0x1ba>
			wall.row_look[y] = wall.row_look[y] | (1 << x);
 8011514:	4a24      	ldr	r2, [pc, #144]	; (80115a8 <update_wall+0x210>)
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	331e      	adds	r3, #30
 801151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801151e:	2101      	movs	r1, #1
 8011520:	68fa      	ldr	r2, [r7, #12]
 8011522:	fa01 f202 	lsl.w	r2, r1, r2
 8011526:	431a      	orrs	r2, r3
 8011528:	491f      	ldr	r1, [pc, #124]	; (80115a8 <update_wall+0x210>)
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	331e      	adds	r3, #30
 801152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(left_wall){wall.row[y] = wall.row[y] | (1 << x);}
 8011532:	7f3b      	ldrb	r3, [r7, #28]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d00c      	beq.n	8011552 <update_wall+0x1ba>
 8011538:	4a1b      	ldr	r2, [pc, #108]	; (80115a8 <update_wall+0x210>)
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011540:	2101      	movs	r1, #1
 8011542:	68fa      	ldr	r2, [r7, #12]
 8011544:	fa01 f202 	lsl.w	r2, r1, r2
 8011548:	431a      	orrs	r2, r3
 801154a:	4917      	ldr	r1, [pc, #92]	; (80115a8 <update_wall+0x210>)
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		if (y >= 1) {
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	2b00      	cmp	r3, #0
 8011556:	f340 8125 	ble.w	80117a4 <update_wall+0x40c>
			wall.row_look[y - 1] = wall.row_look[y - 1] | (1 << x);
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	3b01      	subs	r3, #1
 801155e:	4a12      	ldr	r2, [pc, #72]	; (80115a8 <update_wall+0x210>)
 8011560:	331e      	adds	r3, #30
 8011562:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011566:	2101      	movs	r1, #1
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	fa01 f303 	lsl.w	r3, r1, r3
 801156e:	4619      	mov	r1, r3
 8011570:	68bb      	ldr	r3, [r7, #8]
 8011572:	3b01      	subs	r3, #1
 8011574:	430a      	orrs	r2, r1
 8011576:	490c      	ldr	r1, [pc, #48]	; (80115a8 <update_wall+0x210>)
 8011578:	331e      	adds	r3, #30
 801157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(right_wall){wall.row[y - 1] = wall.row[y - 1] | (1 << x);}
 801157e:	7e3b      	ldrb	r3, [r7, #24]
 8011580:	2b00      	cmp	r3, #0
 8011582:	f000 810f 	beq.w	80117a4 <update_wall+0x40c>
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	3b01      	subs	r3, #1
 801158a:	4a07      	ldr	r2, [pc, #28]	; (80115a8 <update_wall+0x210>)
 801158c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011590:	2101      	movs	r1, #1
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	fa01 f303 	lsl.w	r3, r1, r3
 8011598:	4619      	mov	r1, r3
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	3b01      	subs	r3, #1
 801159e:	430a      	orrs	r2, r1
 80115a0:	4901      	ldr	r1, [pc, #4]	; (80115a8 <update_wall+0x210>)
 80115a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		break;
 80115a6:	e0fd      	b.n	80117a4 <update_wall+0x40c>
 80115a8:	20001010 	.word	0x20001010
	case 3:
		if (y >= 1) {
 80115ac:	68bb      	ldr	r3, [r7, #8]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	dd24      	ble.n	80115fc <update_wall+0x264>
			wall.row_look[y - 1] = wall.row_look[y - 1] | (1 << x);
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	3b01      	subs	r3, #1
 80115b6:	4a81      	ldr	r2, [pc, #516]	; (80117bc <update_wall+0x424>)
 80115b8:	331e      	adds	r3, #30
 80115ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80115be:	2101      	movs	r1, #1
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	fa01 f303 	lsl.w	r3, r1, r3
 80115c6:	4619      	mov	r1, r3
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	3b01      	subs	r3, #1
 80115cc:	430a      	orrs	r2, r1
 80115ce:	497b      	ldr	r1, [pc, #492]	; (80117bc <update_wall+0x424>)
 80115d0:	331e      	adds	r3, #30
 80115d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(front_wall){wall.row[y - 1] = wall.row[y - 1] | (1 << x);}
 80115d6:	78fb      	ldrb	r3, [r7, #3]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d00f      	beq.n	80115fc <update_wall+0x264>
 80115dc:	68bb      	ldr	r3, [r7, #8]
 80115de:	3b01      	subs	r3, #1
 80115e0:	4a76      	ldr	r2, [pc, #472]	; (80117bc <update_wall+0x424>)
 80115e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80115e6:	2101      	movs	r1, #1
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	fa01 f303 	lsl.w	r3, r1, r3
 80115ee:	4619      	mov	r1, r3
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	3b01      	subs	r3, #1
 80115f4:	430a      	orrs	r2, r1
 80115f6:	4971      	ldr	r1, [pc, #452]	; (80117bc <update_wall+0x424>)
 80115f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		if (x <= 14) {
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	2b0e      	cmp	r3, #14
 8011600:	dc24      	bgt.n	801164c <update_wall+0x2b4>
			wall.column_look[x] = wall.column_look[x] | (1 << y);
 8011602:	4a6e      	ldr	r2, [pc, #440]	; (80117bc <update_wall+0x424>)
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	332c      	adds	r3, #44	; 0x2c
 8011608:	009b      	lsls	r3, r3, #2
 801160a:	4413      	add	r3, r2
 801160c:	685b      	ldr	r3, [r3, #4]
 801160e:	2101      	movs	r1, #1
 8011610:	68ba      	ldr	r2, [r7, #8]
 8011612:	fa01 f202 	lsl.w	r2, r1, r2
 8011616:	431a      	orrs	r2, r3
 8011618:	4968      	ldr	r1, [pc, #416]	; (80117bc <update_wall+0x424>)
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	332c      	adds	r3, #44	; 0x2c
 801161e:	009b      	lsls	r3, r3, #2
 8011620:	440b      	add	r3, r1
 8011622:	605a      	str	r2, [r3, #4]
			if(left_wall){wall.column[x] = wall.column[x] | (1 << y);}
 8011624:	7f3b      	ldrb	r3, [r7, #28]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d010      	beq.n	801164c <update_wall+0x2b4>
 801162a:	4a64      	ldr	r2, [pc, #400]	; (80117bc <update_wall+0x424>)
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	330e      	adds	r3, #14
 8011630:	009b      	lsls	r3, r3, #2
 8011632:	4413      	add	r3, r2
 8011634:	685b      	ldr	r3, [r3, #4]
 8011636:	2101      	movs	r1, #1
 8011638:	68ba      	ldr	r2, [r7, #8]
 801163a:	fa01 f202 	lsl.w	r2, r1, r2
 801163e:	431a      	orrs	r2, r3
 8011640:	495e      	ldr	r1, [pc, #376]	; (80117bc <update_wall+0x424>)
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	330e      	adds	r3, #14
 8011646:	009b      	lsls	r3, r3, #2
 8011648:	440b      	add	r3, r1
 801164a:	605a      	str	r2, [r3, #4]
		}

		if (x >= 1) {
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	2b00      	cmp	r3, #0
 8011650:	f340 80aa 	ble.w	80117a8 <update_wall+0x410>
			wall.column_look[x - 1] = wall.column_look[x - 1] | (1 << y);
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	3b01      	subs	r3, #1
 8011658:	4a58      	ldr	r2, [pc, #352]	; (80117bc <update_wall+0x424>)
 801165a:	332c      	adds	r3, #44	; 0x2c
 801165c:	009b      	lsls	r3, r3, #2
 801165e:	4413      	add	r3, r2
 8011660:	685a      	ldr	r2, [r3, #4]
 8011662:	2101      	movs	r1, #1
 8011664:	68bb      	ldr	r3, [r7, #8]
 8011666:	fa01 f303 	lsl.w	r3, r1, r3
 801166a:	4619      	mov	r1, r3
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	3b01      	subs	r3, #1
 8011670:	430a      	orrs	r2, r1
 8011672:	4952      	ldr	r1, [pc, #328]	; (80117bc <update_wall+0x424>)
 8011674:	332c      	adds	r3, #44	; 0x2c
 8011676:	009b      	lsls	r3, r3, #2
 8011678:	440b      	add	r3, r1
 801167a:	605a      	str	r2, [r3, #4]
			if(right_wall){wall.column[x - 1] = wall.column[x - 1] | (1 << y);}
 801167c:	7e3b      	ldrb	r3, [r7, #24]
 801167e:	2b00      	cmp	r3, #0
 8011680:	f000 8092 	beq.w	80117a8 <update_wall+0x410>
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	3b01      	subs	r3, #1
 8011688:	4a4c      	ldr	r2, [pc, #304]	; (80117bc <update_wall+0x424>)
 801168a:	330e      	adds	r3, #14
 801168c:	009b      	lsls	r3, r3, #2
 801168e:	4413      	add	r3, r2
 8011690:	685a      	ldr	r2, [r3, #4]
 8011692:	2101      	movs	r1, #1
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	fa01 f303 	lsl.w	r3, r1, r3
 801169a:	4619      	mov	r1, r3
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	3b01      	subs	r3, #1
 80116a0:	430a      	orrs	r2, r1
 80116a2:	4946      	ldr	r1, [pc, #280]	; (80117bc <update_wall+0x424>)
 80116a4:	330e      	adds	r3, #14
 80116a6:	009b      	lsls	r3, r3, #2
 80116a8:	440b      	add	r3, r1
 80116aa:	605a      	str	r2, [r3, #4]
		}

		break;
 80116ac:	e07c      	b.n	80117a8 <update_wall+0x410>
	case 4:
		if (x >= 1) {
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	dd2a      	ble.n	801170a <update_wall+0x372>
			wall.column_look[x - 1] = wall.column_look[x - 1] | (1 << y);
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	3b01      	subs	r3, #1
 80116b8:	4a40      	ldr	r2, [pc, #256]	; (80117bc <update_wall+0x424>)
 80116ba:	332c      	adds	r3, #44	; 0x2c
 80116bc:	009b      	lsls	r3, r3, #2
 80116be:	4413      	add	r3, r2
 80116c0:	685a      	ldr	r2, [r3, #4]
 80116c2:	2101      	movs	r1, #1
 80116c4:	68bb      	ldr	r3, [r7, #8]
 80116c6:	fa01 f303 	lsl.w	r3, r1, r3
 80116ca:	4619      	mov	r1, r3
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	3b01      	subs	r3, #1
 80116d0:	430a      	orrs	r2, r1
 80116d2:	493a      	ldr	r1, [pc, #232]	; (80117bc <update_wall+0x424>)
 80116d4:	332c      	adds	r3, #44	; 0x2c
 80116d6:	009b      	lsls	r3, r3, #2
 80116d8:	440b      	add	r3, r1
 80116da:	605a      	str	r2, [r3, #4]
			if(front_wall){wall.column[x - 1] = wall.column[x - 1] | (1 << y);}
 80116dc:	78fb      	ldrb	r3, [r7, #3]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d013      	beq.n	801170a <update_wall+0x372>
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	3b01      	subs	r3, #1
 80116e6:	4a35      	ldr	r2, [pc, #212]	; (80117bc <update_wall+0x424>)
 80116e8:	330e      	adds	r3, #14
 80116ea:	009b      	lsls	r3, r3, #2
 80116ec:	4413      	add	r3, r2
 80116ee:	685a      	ldr	r2, [r3, #4]
 80116f0:	2101      	movs	r1, #1
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	fa01 f303 	lsl.w	r3, r1, r3
 80116f8:	4619      	mov	r1, r3
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	3b01      	subs	r3, #1
 80116fe:	430a      	orrs	r2, r1
 8011700:	492e      	ldr	r1, [pc, #184]	; (80117bc <update_wall+0x424>)
 8011702:	330e      	adds	r3, #14
 8011704:	009b      	lsls	r3, r3, #2
 8011706:	440b      	add	r3, r1
 8011708:	605a      	str	r2, [r3, #4]
		}

		if (y >= 1) {
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	2b00      	cmp	r3, #0
 801170e:	dd24      	ble.n	801175a <update_wall+0x3c2>
			wall.row_look[y - 1] = wall.row_look[y - 1] | (1 << x);
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	3b01      	subs	r3, #1
 8011714:	4a29      	ldr	r2, [pc, #164]	; (80117bc <update_wall+0x424>)
 8011716:	331e      	adds	r3, #30
 8011718:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801171c:	2101      	movs	r1, #1
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	fa01 f303 	lsl.w	r3, r1, r3
 8011724:	4619      	mov	r1, r3
 8011726:	68bb      	ldr	r3, [r7, #8]
 8011728:	3b01      	subs	r3, #1
 801172a:	430a      	orrs	r2, r1
 801172c:	4923      	ldr	r1, [pc, #140]	; (80117bc <update_wall+0x424>)
 801172e:	331e      	adds	r3, #30
 8011730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(left_wall){wall.row[y - 1] = wall.row[y - 1] | (1 << x);}
 8011734:	7f3b      	ldrb	r3, [r7, #28]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d00f      	beq.n	801175a <update_wall+0x3c2>
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	3b01      	subs	r3, #1
 801173e:	4a1f      	ldr	r2, [pc, #124]	; (80117bc <update_wall+0x424>)
 8011740:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011744:	2101      	movs	r1, #1
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	fa01 f303 	lsl.w	r3, r1, r3
 801174c:	4619      	mov	r1, r3
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	3b01      	subs	r3, #1
 8011752:	430a      	orrs	r2, r1
 8011754:	4919      	ldr	r1, [pc, #100]	; (80117bc <update_wall+0x424>)
 8011756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		if (y <= 14) {
 801175a:	68bb      	ldr	r3, [r7, #8]
 801175c:	2b0e      	cmp	r3, #14
 801175e:	dc25      	bgt.n	80117ac <update_wall+0x414>
			wall.row_look[y] = wall.row_look[y] | (1 << x);
 8011760:	4a16      	ldr	r2, [pc, #88]	; (80117bc <update_wall+0x424>)
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	331e      	adds	r3, #30
 8011766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801176a:	2101      	movs	r1, #1
 801176c:	68fa      	ldr	r2, [r7, #12]
 801176e:	fa01 f202 	lsl.w	r2, r1, r2
 8011772:	431a      	orrs	r2, r3
 8011774:	4911      	ldr	r1, [pc, #68]	; (80117bc <update_wall+0x424>)
 8011776:	68bb      	ldr	r3, [r7, #8]
 8011778:	331e      	adds	r3, #30
 801177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(right_wall){wall.row[y] = wall.row[y] | (1 << x);}
 801177e:	7e3b      	ldrb	r3, [r7, #24]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d013      	beq.n	80117ac <update_wall+0x414>
 8011784:	4a0d      	ldr	r2, [pc, #52]	; (80117bc <update_wall+0x424>)
 8011786:	68bb      	ldr	r3, [r7, #8]
 8011788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801178c:	2101      	movs	r1, #1
 801178e:	68fa      	ldr	r2, [r7, #12]
 8011790:	fa01 f202 	lsl.w	r2, r1, r2
 8011794:	431a      	orrs	r2, r3
 8011796:	4909      	ldr	r1, [pc, #36]	; (80117bc <update_wall+0x424>)
 8011798:	68bb      	ldr	r3, [r7, #8]
 801179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		break;
 801179e:	e005      	b.n	80117ac <update_wall+0x414>
		break;
 80117a0:	bf00      	nop
 80117a2:	e004      	b.n	80117ae <update_wall+0x416>
		break;
 80117a4:	bf00      	nop
 80117a6:	e002      	b.n	80117ae <update_wall+0x416>
		break;
 80117a8:	bf00      	nop
 80117aa:	e000      	b.n	80117ae <update_wall+0x416>
		break;
 80117ac:	bf00      	nop

	}


}
 80117ae:	bf00      	nop
 80117b0:	3714      	adds	r7, #20
 80117b2:	46bd      	mov	sp, r7
 80117b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b8:	4770      	bx	lr
 80117ba:	bf00      	nop
 80117bc:	20001010 	.word	0x20001010

080117c0 <get_wall>:



void get_wall(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 80117c0:	b480      	push	{r7}
 80117c2:	b085      	sub	sp, #20
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	60f8      	str	r0, [r7, #12]
 80117c8:	60b9      	str	r1, [r7, #8]
 80117ca:	607a      	str	r2, [r7, #4]
 80117cc:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	2201      	movs	r2, #1
 80117d2:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 80117d4:	69bb      	ldr	r3, [r7, #24]
 80117d6:	2201      	movs	r2, #1
 80117d8:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 80117da:	69fb      	ldr	r3, [r7, #28]
 80117dc:	2201      	movs	r2, #1
 80117de:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	3b01      	subs	r3, #1
 80117e4:	2b03      	cmp	r3, #3
 80117e6:	f200 813e 	bhi.w	8011a66 <get_wall+0x2a6>
 80117ea:	a201      	add	r2, pc, #4	; (adr r2, 80117f0 <get_wall+0x30>)
 80117ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117f0:	08011801 	.word	0x08011801
 80117f4:	08011899 	.word	0x08011899
 80117f8:	0801192d 	.word	0x0801192d
 80117fc:	080119c5 	.word	0x080119c5
	case 1:
		if (y <= 14) {
 8011800:	68bb      	ldr	r3, [r7, #8]
 8011802:	2b0e      	cmp	r3, #14
 8011804:	dc13      	bgt.n	801182e <get_wall+0x6e>
			*front_wall=((wall.row[y] & (1 << x)) == (1 << x));
 8011806:	4a9b      	ldr	r2, [pc, #620]	; (8011a74 <get_wall+0x2b4>)
 8011808:	68bb      	ldr	r3, [r7, #8]
 801180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801180e:	2101      	movs	r1, #1
 8011810:	68fa      	ldr	r2, [r7, #12]
 8011812:	fa01 f202 	lsl.w	r2, r1, r2
 8011816:	4013      	ands	r3, r2
 8011818:	2101      	movs	r1, #1
 801181a:	68fa      	ldr	r2, [r7, #12]
 801181c:	fa01 f202 	lsl.w	r2, r1, r2
 8011820:	4293      	cmp	r3, r2
 8011822:	bf0c      	ite	eq
 8011824:	2301      	moveq	r3, #1
 8011826:	2300      	movne	r3, #0
 8011828:	b2da      	uxtb	r2, r3
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	2b00      	cmp	r3, #0
 8011832:	dd16      	ble.n	8011862 <get_wall+0xa2>
			*left_wall=((wall.column[x - 1] & (1 << y)) == (1 << y));
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	3b01      	subs	r3, #1
 8011838:	4a8e      	ldr	r2, [pc, #568]	; (8011a74 <get_wall+0x2b4>)
 801183a:	330e      	adds	r3, #14
 801183c:	009b      	lsls	r3, r3, #2
 801183e:	4413      	add	r3, r2
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	2101      	movs	r1, #1
 8011844:	68ba      	ldr	r2, [r7, #8]
 8011846:	fa01 f202 	lsl.w	r2, r1, r2
 801184a:	4013      	ands	r3, r2
 801184c:	2101      	movs	r1, #1
 801184e:	68ba      	ldr	r2, [r7, #8]
 8011850:	fa01 f202 	lsl.w	r2, r1, r2
 8011854:	4293      	cmp	r3, r2
 8011856:	bf0c      	ite	eq
 8011858:	2301      	moveq	r3, #1
 801185a:	2300      	movne	r3, #0
 801185c:	b2da      	uxtb	r2, r3
 801185e:	69fb      	ldr	r3, [r7, #28]
 8011860:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	2b0e      	cmp	r3, #14
 8011866:	f300 80f7 	bgt.w	8011a58 <get_wall+0x298>
			*right_wall=((wall.column[x] & (1 << y)) == (1 << y));
 801186a:	4a82      	ldr	r2, [pc, #520]	; (8011a74 <get_wall+0x2b4>)
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	330e      	adds	r3, #14
 8011870:	009b      	lsls	r3, r3, #2
 8011872:	4413      	add	r3, r2
 8011874:	685b      	ldr	r3, [r3, #4]
 8011876:	2101      	movs	r1, #1
 8011878:	68ba      	ldr	r2, [r7, #8]
 801187a:	fa01 f202 	lsl.w	r2, r1, r2
 801187e:	4013      	ands	r3, r2
 8011880:	2101      	movs	r1, #1
 8011882:	68ba      	ldr	r2, [r7, #8]
 8011884:	fa01 f202 	lsl.w	r2, r1, r2
 8011888:	4293      	cmp	r3, r2
 801188a:	bf0c      	ite	eq
 801188c:	2301      	moveq	r3, #1
 801188e:	2300      	movne	r3, #0
 8011890:	b2da      	uxtb	r2, r3
 8011892:	69bb      	ldr	r3, [r7, #24]
 8011894:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011896:	e0df      	b.n	8011a58 <get_wall+0x298>
	case 2:
		if (x <= 14) {
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	2b0e      	cmp	r3, #14
 801189c:	dc15      	bgt.n	80118ca <get_wall+0x10a>
			*front_wall=((wall.column[x] & (1 << y)) == (1 << y));
 801189e:	4a75      	ldr	r2, [pc, #468]	; (8011a74 <get_wall+0x2b4>)
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	330e      	adds	r3, #14
 80118a4:	009b      	lsls	r3, r3, #2
 80118a6:	4413      	add	r3, r2
 80118a8:	685b      	ldr	r3, [r3, #4]
 80118aa:	2101      	movs	r1, #1
 80118ac:	68ba      	ldr	r2, [r7, #8]
 80118ae:	fa01 f202 	lsl.w	r2, r1, r2
 80118b2:	4013      	ands	r3, r2
 80118b4:	2101      	movs	r1, #1
 80118b6:	68ba      	ldr	r2, [r7, #8]
 80118b8:	fa01 f202 	lsl.w	r2, r1, r2
 80118bc:	4293      	cmp	r3, r2
 80118be:	bf0c      	ite	eq
 80118c0:	2301      	moveq	r3, #1
 80118c2:	2300      	movne	r3, #0
 80118c4:	b2da      	uxtb	r2, r3
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	2b0e      	cmp	r3, #14
 80118ce:	dc13      	bgt.n	80118f8 <get_wall+0x138>
			*left_wall=((wall.row[y] & (1 << x)) == (1 << x));
 80118d0:	4a68      	ldr	r2, [pc, #416]	; (8011a74 <get_wall+0x2b4>)
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80118d8:	2101      	movs	r1, #1
 80118da:	68fa      	ldr	r2, [r7, #12]
 80118dc:	fa01 f202 	lsl.w	r2, r1, r2
 80118e0:	4013      	ands	r3, r2
 80118e2:	2101      	movs	r1, #1
 80118e4:	68fa      	ldr	r2, [r7, #12]
 80118e6:	fa01 f202 	lsl.w	r2, r1, r2
 80118ea:	4293      	cmp	r3, r2
 80118ec:	bf0c      	ite	eq
 80118ee:	2301      	moveq	r3, #1
 80118f0:	2300      	movne	r3, #0
 80118f2:	b2da      	uxtb	r2, r3
 80118f4:	69fb      	ldr	r3, [r7, #28]
 80118f6:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 80118f8:	68bb      	ldr	r3, [r7, #8]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	f340 80ae 	ble.w	8011a5c <get_wall+0x29c>
			*right_wall=((wall.row[y - 1] & (1 << x)) == (1 << x));
 8011900:	68bb      	ldr	r3, [r7, #8]
 8011902:	3b01      	subs	r3, #1
 8011904:	4a5b      	ldr	r2, [pc, #364]	; (8011a74 <get_wall+0x2b4>)
 8011906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801190a:	2101      	movs	r1, #1
 801190c:	68fa      	ldr	r2, [r7, #12]
 801190e:	fa01 f202 	lsl.w	r2, r1, r2
 8011912:	4013      	ands	r3, r2
 8011914:	2101      	movs	r1, #1
 8011916:	68fa      	ldr	r2, [r7, #12]
 8011918:	fa01 f202 	lsl.w	r2, r1, r2
 801191c:	4293      	cmp	r3, r2
 801191e:	bf0c      	ite	eq
 8011920:	2301      	moveq	r3, #1
 8011922:	2300      	movne	r3, #0
 8011924:	b2da      	uxtb	r2, r3
 8011926:	69bb      	ldr	r3, [r7, #24]
 8011928:	701a      	strb	r2, [r3, #0]
		}
		break;
 801192a:	e097      	b.n	8011a5c <get_wall+0x29c>
	case 3:
		if (y >= 1) {
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	2b00      	cmp	r3, #0
 8011930:	dd14      	ble.n	801195c <get_wall+0x19c>
			*front_wall=((wall.row[y - 1] & (1 << x)) == (1 << x));
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	3b01      	subs	r3, #1
 8011936:	4a4f      	ldr	r2, [pc, #316]	; (8011a74 <get_wall+0x2b4>)
 8011938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801193c:	2101      	movs	r1, #1
 801193e:	68fa      	ldr	r2, [r7, #12]
 8011940:	fa01 f202 	lsl.w	r2, r1, r2
 8011944:	4013      	ands	r3, r2
 8011946:	2101      	movs	r1, #1
 8011948:	68fa      	ldr	r2, [r7, #12]
 801194a:	fa01 f202 	lsl.w	r2, r1, r2
 801194e:	4293      	cmp	r3, r2
 8011950:	bf0c      	ite	eq
 8011952:	2301      	moveq	r3, #1
 8011954:	2300      	movne	r3, #0
 8011956:	b2da      	uxtb	r2, r3
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	2b0e      	cmp	r3, #14
 8011960:	dc15      	bgt.n	801198e <get_wall+0x1ce>
			*left_wall=((wall.column[x] & (1 << y)) == (1 << y));
 8011962:	4a44      	ldr	r2, [pc, #272]	; (8011a74 <get_wall+0x2b4>)
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	330e      	adds	r3, #14
 8011968:	009b      	lsls	r3, r3, #2
 801196a:	4413      	add	r3, r2
 801196c:	685b      	ldr	r3, [r3, #4]
 801196e:	2101      	movs	r1, #1
 8011970:	68ba      	ldr	r2, [r7, #8]
 8011972:	fa01 f202 	lsl.w	r2, r1, r2
 8011976:	4013      	ands	r3, r2
 8011978:	2101      	movs	r1, #1
 801197a:	68ba      	ldr	r2, [r7, #8]
 801197c:	fa01 f202 	lsl.w	r2, r1, r2
 8011980:	4293      	cmp	r3, r2
 8011982:	bf0c      	ite	eq
 8011984:	2301      	moveq	r3, #1
 8011986:	2300      	movne	r3, #0
 8011988:	b2da      	uxtb	r2, r3
 801198a:	69fb      	ldr	r3, [r7, #28]
 801198c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	2b00      	cmp	r3, #0
 8011992:	dd65      	ble.n	8011a60 <get_wall+0x2a0>
			*right_wall=((wall.column[x - 1] & (1 << y)) == (1 << y));
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	3b01      	subs	r3, #1
 8011998:	4a36      	ldr	r2, [pc, #216]	; (8011a74 <get_wall+0x2b4>)
 801199a:	330e      	adds	r3, #14
 801199c:	009b      	lsls	r3, r3, #2
 801199e:	4413      	add	r3, r2
 80119a0:	685b      	ldr	r3, [r3, #4]
 80119a2:	2101      	movs	r1, #1
 80119a4:	68ba      	ldr	r2, [r7, #8]
 80119a6:	fa01 f202 	lsl.w	r2, r1, r2
 80119aa:	4013      	ands	r3, r2
 80119ac:	2101      	movs	r1, #1
 80119ae:	68ba      	ldr	r2, [r7, #8]
 80119b0:	fa01 f202 	lsl.w	r2, r1, r2
 80119b4:	4293      	cmp	r3, r2
 80119b6:	bf0c      	ite	eq
 80119b8:	2301      	moveq	r3, #1
 80119ba:	2300      	movne	r3, #0
 80119bc:	b2da      	uxtb	r2, r3
 80119be:	69bb      	ldr	r3, [r7, #24]
 80119c0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80119c2:	e04d      	b.n	8011a60 <get_wall+0x2a0>
	case 4:
		if (x >= 1) {
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	dd16      	ble.n	80119f8 <get_wall+0x238>
			*front_wall=((wall.column[x - 1] & (1 << y)) == (1 << y));
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	3b01      	subs	r3, #1
 80119ce:	4a29      	ldr	r2, [pc, #164]	; (8011a74 <get_wall+0x2b4>)
 80119d0:	330e      	adds	r3, #14
 80119d2:	009b      	lsls	r3, r3, #2
 80119d4:	4413      	add	r3, r2
 80119d6:	685b      	ldr	r3, [r3, #4]
 80119d8:	2101      	movs	r1, #1
 80119da:	68ba      	ldr	r2, [r7, #8]
 80119dc:	fa01 f202 	lsl.w	r2, r1, r2
 80119e0:	4013      	ands	r3, r2
 80119e2:	2101      	movs	r1, #1
 80119e4:	68ba      	ldr	r2, [r7, #8]
 80119e6:	fa01 f202 	lsl.w	r2, r1, r2
 80119ea:	4293      	cmp	r3, r2
 80119ec:	bf0c      	ite	eq
 80119ee:	2301      	moveq	r3, #1
 80119f0:	2300      	movne	r3, #0
 80119f2:	b2da      	uxtb	r2, r3
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	dd14      	ble.n	8011a28 <get_wall+0x268>
			*left_wall=((wall.row[y - 1] & (1 << x)) == (1 << x));
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	3b01      	subs	r3, #1
 8011a02:	4a1c      	ldr	r2, [pc, #112]	; (8011a74 <get_wall+0x2b4>)
 8011a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a08:	2101      	movs	r1, #1
 8011a0a:	68fa      	ldr	r2, [r7, #12]
 8011a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8011a10:	4013      	ands	r3, r2
 8011a12:	2101      	movs	r1, #1
 8011a14:	68fa      	ldr	r2, [r7, #12]
 8011a16:	fa01 f202 	lsl.w	r2, r1, r2
 8011a1a:	4293      	cmp	r3, r2
 8011a1c:	bf0c      	ite	eq
 8011a1e:	2301      	moveq	r3, #1
 8011a20:	2300      	movne	r3, #0
 8011a22:	b2da      	uxtb	r2, r3
 8011a24:	69fb      	ldr	r3, [r7, #28]
 8011a26:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	2b0e      	cmp	r3, #14
 8011a2c:	dc1a      	bgt.n	8011a64 <get_wall+0x2a4>
			*right_wall=((wall.row[y] & (1 << x)) == (1 << x));
 8011a2e:	4a11      	ldr	r2, [pc, #68]	; (8011a74 <get_wall+0x2b4>)
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a36:	2101      	movs	r1, #1
 8011a38:	68fa      	ldr	r2, [r7, #12]
 8011a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8011a3e:	4013      	ands	r3, r2
 8011a40:	2101      	movs	r1, #1
 8011a42:	68fa      	ldr	r2, [r7, #12]
 8011a44:	fa01 f202 	lsl.w	r2, r1, r2
 8011a48:	4293      	cmp	r3, r2
 8011a4a:	bf0c      	ite	eq
 8011a4c:	2301      	moveq	r3, #1
 8011a4e:	2300      	movne	r3, #0
 8011a50:	b2da      	uxtb	r2, r3
 8011a52:	69bb      	ldr	r3, [r7, #24]
 8011a54:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011a56:	e005      	b.n	8011a64 <get_wall+0x2a4>
		break;
 8011a58:	bf00      	nop
 8011a5a:	e004      	b.n	8011a66 <get_wall+0x2a6>
		break;
 8011a5c:	bf00      	nop
 8011a5e:	e002      	b.n	8011a66 <get_wall+0x2a6>
		break;
 8011a60:	bf00      	nop
 8011a62:	e000      	b.n	8011a66 <get_wall+0x2a6>
		break;
 8011a64:	bf00      	nop
	}

}
 8011a66:	bf00      	nop
 8011a68:	3714      	adds	r7, #20
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a70:	4770      	bx	lr
 8011a72:	bf00      	nop
 8011a74:	20001010 	.word	0x20001010

08011a78 <get_wall_look>:


void get_wall_look(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8011a78:	b480      	push	{r7}
 8011a7a:	b085      	sub	sp, #20
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	60f8      	str	r0, [r7, #12]
 8011a80:	60b9      	str	r1, [r7, #8]
 8011a82:	607a      	str	r2, [r7, #4]
 8011a84:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	2201      	movs	r2, #1
 8011a8a:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8011a8c:	69bb      	ldr	r3, [r7, #24]
 8011a8e:	2201      	movs	r2, #1
 8011a90:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8011a92:	69fb      	ldr	r3, [r7, #28]
 8011a94:	2201      	movs	r2, #1
 8011a96:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	3b01      	subs	r3, #1
 8011a9c:	2b03      	cmp	r3, #3
 8011a9e:	f200 8144 	bhi.w	8011d2a <get_wall_look+0x2b2>
 8011aa2:	a201      	add	r2, pc, #4	; (adr r2, 8011aa8 <get_wall_look+0x30>)
 8011aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aa8:	08011ab9 	.word	0x08011ab9
 8011aac:	08011b53 	.word	0x08011b53
 8011ab0:	08011beb 	.word	0x08011beb
 8011ab4:	08011c85 	.word	0x08011c85
	case 1:
		if (y <= 14) {
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	2b0e      	cmp	r3, #14
 8011abc:	dc14      	bgt.n	8011ae8 <get_wall_look+0x70>
			*front_wall=((wall.row_look[y] & (1 << x)) == (1 << x));
 8011abe:	4a9e      	ldr	r2, [pc, #632]	; (8011d38 <get_wall_look+0x2c0>)
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	331e      	adds	r3, #30
 8011ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ac8:	2101      	movs	r1, #1
 8011aca:	68fa      	ldr	r2, [r7, #12]
 8011acc:	fa01 f202 	lsl.w	r2, r1, r2
 8011ad0:	4013      	ands	r3, r2
 8011ad2:	2101      	movs	r1, #1
 8011ad4:	68fa      	ldr	r2, [r7, #12]
 8011ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8011ada:	4293      	cmp	r3, r2
 8011adc:	bf0c      	ite	eq
 8011ade:	2301      	moveq	r3, #1
 8011ae0:	2300      	movne	r3, #0
 8011ae2:	b2da      	uxtb	r2, r3
 8011ae4:	683b      	ldr	r3, [r7, #0]
 8011ae6:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	dd16      	ble.n	8011b1c <get_wall_look+0xa4>
			*left_wall=((wall.column_look[x - 1] & (1 << y)) == (1 << y));
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	3b01      	subs	r3, #1
 8011af2:	4a91      	ldr	r2, [pc, #580]	; (8011d38 <get_wall_look+0x2c0>)
 8011af4:	332c      	adds	r3, #44	; 0x2c
 8011af6:	009b      	lsls	r3, r3, #2
 8011af8:	4413      	add	r3, r2
 8011afa:	685b      	ldr	r3, [r3, #4]
 8011afc:	2101      	movs	r1, #1
 8011afe:	68ba      	ldr	r2, [r7, #8]
 8011b00:	fa01 f202 	lsl.w	r2, r1, r2
 8011b04:	4013      	ands	r3, r2
 8011b06:	2101      	movs	r1, #1
 8011b08:	68ba      	ldr	r2, [r7, #8]
 8011b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8011b0e:	4293      	cmp	r3, r2
 8011b10:	bf0c      	ite	eq
 8011b12:	2301      	moveq	r3, #1
 8011b14:	2300      	movne	r3, #0
 8011b16:	b2da      	uxtb	r2, r3
 8011b18:	69fb      	ldr	r3, [r7, #28]
 8011b1a:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	2b0e      	cmp	r3, #14
 8011b20:	f300 80fc 	bgt.w	8011d1c <get_wall_look+0x2a4>
			*right_wall=((wall.column_look[x] & (1 << y)) == (1 << y));
 8011b24:	4a84      	ldr	r2, [pc, #528]	; (8011d38 <get_wall_look+0x2c0>)
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	332c      	adds	r3, #44	; 0x2c
 8011b2a:	009b      	lsls	r3, r3, #2
 8011b2c:	4413      	add	r3, r2
 8011b2e:	685b      	ldr	r3, [r3, #4]
 8011b30:	2101      	movs	r1, #1
 8011b32:	68ba      	ldr	r2, [r7, #8]
 8011b34:	fa01 f202 	lsl.w	r2, r1, r2
 8011b38:	4013      	ands	r3, r2
 8011b3a:	2101      	movs	r1, #1
 8011b3c:	68ba      	ldr	r2, [r7, #8]
 8011b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8011b42:	4293      	cmp	r3, r2
 8011b44:	bf0c      	ite	eq
 8011b46:	2301      	moveq	r3, #1
 8011b48:	2300      	movne	r3, #0
 8011b4a:	b2da      	uxtb	r2, r3
 8011b4c:	69bb      	ldr	r3, [r7, #24]
 8011b4e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011b50:	e0e4      	b.n	8011d1c <get_wall_look+0x2a4>
	case 2:
		if (x <= 14) {
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	2b0e      	cmp	r3, #14
 8011b56:	dc15      	bgt.n	8011b84 <get_wall_look+0x10c>
			*front_wall=((wall.column_look[x] & (1 << y)) == (1 << y));
 8011b58:	4a77      	ldr	r2, [pc, #476]	; (8011d38 <get_wall_look+0x2c0>)
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	332c      	adds	r3, #44	; 0x2c
 8011b5e:	009b      	lsls	r3, r3, #2
 8011b60:	4413      	add	r3, r2
 8011b62:	685b      	ldr	r3, [r3, #4]
 8011b64:	2101      	movs	r1, #1
 8011b66:	68ba      	ldr	r2, [r7, #8]
 8011b68:	fa01 f202 	lsl.w	r2, r1, r2
 8011b6c:	4013      	ands	r3, r2
 8011b6e:	2101      	movs	r1, #1
 8011b70:	68ba      	ldr	r2, [r7, #8]
 8011b72:	fa01 f202 	lsl.w	r2, r1, r2
 8011b76:	4293      	cmp	r3, r2
 8011b78:	bf0c      	ite	eq
 8011b7a:	2301      	moveq	r3, #1
 8011b7c:	2300      	movne	r3, #0
 8011b7e:	b2da      	uxtb	r2, r3
 8011b80:	683b      	ldr	r3, [r7, #0]
 8011b82:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	2b0e      	cmp	r3, #14
 8011b88:	dc14      	bgt.n	8011bb4 <get_wall_look+0x13c>
			*left_wall=((wall.row_look[y] & (1 << x)) == (1 << x));
 8011b8a:	4a6b      	ldr	r2, [pc, #428]	; (8011d38 <get_wall_look+0x2c0>)
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	331e      	adds	r3, #30
 8011b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b94:	2101      	movs	r1, #1
 8011b96:	68fa      	ldr	r2, [r7, #12]
 8011b98:	fa01 f202 	lsl.w	r2, r1, r2
 8011b9c:	4013      	ands	r3, r2
 8011b9e:	2101      	movs	r1, #1
 8011ba0:	68fa      	ldr	r2, [r7, #12]
 8011ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8011ba6:	4293      	cmp	r3, r2
 8011ba8:	bf0c      	ite	eq
 8011baa:	2301      	moveq	r3, #1
 8011bac:	2300      	movne	r3, #0
 8011bae:	b2da      	uxtb	r2, r3
 8011bb0:	69fb      	ldr	r3, [r7, #28]
 8011bb2:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8011bb4:	68bb      	ldr	r3, [r7, #8]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	f340 80b2 	ble.w	8011d20 <get_wall_look+0x2a8>
			*right_wall=((wall.row_look[y - 1] & (1 << x)) == (1 << x));
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	3b01      	subs	r3, #1
 8011bc0:	4a5d      	ldr	r2, [pc, #372]	; (8011d38 <get_wall_look+0x2c0>)
 8011bc2:	331e      	adds	r3, #30
 8011bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011bc8:	2101      	movs	r1, #1
 8011bca:	68fa      	ldr	r2, [r7, #12]
 8011bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8011bd0:	4013      	ands	r3, r2
 8011bd2:	2101      	movs	r1, #1
 8011bd4:	68fa      	ldr	r2, [r7, #12]
 8011bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8011bda:	4293      	cmp	r3, r2
 8011bdc:	bf0c      	ite	eq
 8011bde:	2301      	moveq	r3, #1
 8011be0:	2300      	movne	r3, #0
 8011be2:	b2da      	uxtb	r2, r3
 8011be4:	69bb      	ldr	r3, [r7, #24]
 8011be6:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011be8:	e09a      	b.n	8011d20 <get_wall_look+0x2a8>
	case 3:
		if (y >= 1) {
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	dd15      	ble.n	8011c1c <get_wall_look+0x1a4>
			*front_wall=((wall.row_look[y - 1] & (1 << x)) == (1 << x));
 8011bf0:	68bb      	ldr	r3, [r7, #8]
 8011bf2:	3b01      	subs	r3, #1
 8011bf4:	4a50      	ldr	r2, [pc, #320]	; (8011d38 <get_wall_look+0x2c0>)
 8011bf6:	331e      	adds	r3, #30
 8011bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011bfc:	2101      	movs	r1, #1
 8011bfe:	68fa      	ldr	r2, [r7, #12]
 8011c00:	fa01 f202 	lsl.w	r2, r1, r2
 8011c04:	4013      	ands	r3, r2
 8011c06:	2101      	movs	r1, #1
 8011c08:	68fa      	ldr	r2, [r7, #12]
 8011c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8011c0e:	4293      	cmp	r3, r2
 8011c10:	bf0c      	ite	eq
 8011c12:	2301      	moveq	r3, #1
 8011c14:	2300      	movne	r3, #0
 8011c16:	b2da      	uxtb	r2, r3
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	2b0e      	cmp	r3, #14
 8011c20:	dc15      	bgt.n	8011c4e <get_wall_look+0x1d6>
			*left_wall=((wall.column_look[x] & (1 << y)) == (1 << y));
 8011c22:	4a45      	ldr	r2, [pc, #276]	; (8011d38 <get_wall_look+0x2c0>)
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	332c      	adds	r3, #44	; 0x2c
 8011c28:	009b      	lsls	r3, r3, #2
 8011c2a:	4413      	add	r3, r2
 8011c2c:	685b      	ldr	r3, [r3, #4]
 8011c2e:	2101      	movs	r1, #1
 8011c30:	68ba      	ldr	r2, [r7, #8]
 8011c32:	fa01 f202 	lsl.w	r2, r1, r2
 8011c36:	4013      	ands	r3, r2
 8011c38:	2101      	movs	r1, #1
 8011c3a:	68ba      	ldr	r2, [r7, #8]
 8011c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8011c40:	4293      	cmp	r3, r2
 8011c42:	bf0c      	ite	eq
 8011c44:	2301      	moveq	r3, #1
 8011c46:	2300      	movne	r3, #0
 8011c48:	b2da      	uxtb	r2, r3
 8011c4a:	69fb      	ldr	r3, [r7, #28]
 8011c4c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	dd67      	ble.n	8011d24 <get_wall_look+0x2ac>
			*right_wall=((wall.column_look[x - 1] & (1 << y)) == (1 << y));
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	3b01      	subs	r3, #1
 8011c58:	4a37      	ldr	r2, [pc, #220]	; (8011d38 <get_wall_look+0x2c0>)
 8011c5a:	332c      	adds	r3, #44	; 0x2c
 8011c5c:	009b      	lsls	r3, r3, #2
 8011c5e:	4413      	add	r3, r2
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	2101      	movs	r1, #1
 8011c64:	68ba      	ldr	r2, [r7, #8]
 8011c66:	fa01 f202 	lsl.w	r2, r1, r2
 8011c6a:	4013      	ands	r3, r2
 8011c6c:	2101      	movs	r1, #1
 8011c6e:	68ba      	ldr	r2, [r7, #8]
 8011c70:	fa01 f202 	lsl.w	r2, r1, r2
 8011c74:	4293      	cmp	r3, r2
 8011c76:	bf0c      	ite	eq
 8011c78:	2301      	moveq	r3, #1
 8011c7a:	2300      	movne	r3, #0
 8011c7c:	b2da      	uxtb	r2, r3
 8011c7e:	69bb      	ldr	r3, [r7, #24]
 8011c80:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011c82:	e04f      	b.n	8011d24 <get_wall_look+0x2ac>
	case 4:
		if (x >= 1) {
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	dd16      	ble.n	8011cb8 <get_wall_look+0x240>
			*front_wall=((wall.column_look[x - 1] & (1 << y)) == (1 << y));
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	3b01      	subs	r3, #1
 8011c8e:	4a2a      	ldr	r2, [pc, #168]	; (8011d38 <get_wall_look+0x2c0>)
 8011c90:	332c      	adds	r3, #44	; 0x2c
 8011c92:	009b      	lsls	r3, r3, #2
 8011c94:	4413      	add	r3, r2
 8011c96:	685b      	ldr	r3, [r3, #4]
 8011c98:	2101      	movs	r1, #1
 8011c9a:	68ba      	ldr	r2, [r7, #8]
 8011c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8011ca0:	4013      	ands	r3, r2
 8011ca2:	2101      	movs	r1, #1
 8011ca4:	68ba      	ldr	r2, [r7, #8]
 8011ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8011caa:	4293      	cmp	r3, r2
 8011cac:	bf0c      	ite	eq
 8011cae:	2301      	moveq	r3, #1
 8011cb0:	2300      	movne	r3, #0
 8011cb2:	b2da      	uxtb	r2, r3
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	dd15      	ble.n	8011cea <get_wall_look+0x272>
			*left_wall=((wall.row_look[y - 1] & (1 << x)) == (1 << x));
 8011cbe:	68bb      	ldr	r3, [r7, #8]
 8011cc0:	3b01      	subs	r3, #1
 8011cc2:	4a1d      	ldr	r2, [pc, #116]	; (8011d38 <get_wall_look+0x2c0>)
 8011cc4:	331e      	adds	r3, #30
 8011cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011cca:	2101      	movs	r1, #1
 8011ccc:	68fa      	ldr	r2, [r7, #12]
 8011cce:	fa01 f202 	lsl.w	r2, r1, r2
 8011cd2:	4013      	ands	r3, r2
 8011cd4:	2101      	movs	r1, #1
 8011cd6:	68fa      	ldr	r2, [r7, #12]
 8011cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8011cdc:	4293      	cmp	r3, r2
 8011cde:	bf0c      	ite	eq
 8011ce0:	2301      	moveq	r3, #1
 8011ce2:	2300      	movne	r3, #0
 8011ce4:	b2da      	uxtb	r2, r3
 8011ce6:	69fb      	ldr	r3, [r7, #28]
 8011ce8:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011cea:	68bb      	ldr	r3, [r7, #8]
 8011cec:	2b0e      	cmp	r3, #14
 8011cee:	dc1b      	bgt.n	8011d28 <get_wall_look+0x2b0>
			*right_wall=((wall.row_look[y] & (1 << x)) == (1 << x));
 8011cf0:	4a11      	ldr	r2, [pc, #68]	; (8011d38 <get_wall_look+0x2c0>)
 8011cf2:	68bb      	ldr	r3, [r7, #8]
 8011cf4:	331e      	adds	r3, #30
 8011cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011cfa:	2101      	movs	r1, #1
 8011cfc:	68fa      	ldr	r2, [r7, #12]
 8011cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8011d02:	4013      	ands	r3, r2
 8011d04:	2101      	movs	r1, #1
 8011d06:	68fa      	ldr	r2, [r7, #12]
 8011d08:	fa01 f202 	lsl.w	r2, r1, r2
 8011d0c:	4293      	cmp	r3, r2
 8011d0e:	bf0c      	ite	eq
 8011d10:	2301      	moveq	r3, #1
 8011d12:	2300      	movne	r3, #0
 8011d14:	b2da      	uxtb	r2, r3
 8011d16:	69bb      	ldr	r3, [r7, #24]
 8011d18:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011d1a:	e005      	b.n	8011d28 <get_wall_look+0x2b0>
		break;
 8011d1c:	bf00      	nop
 8011d1e:	e004      	b.n	8011d2a <get_wall_look+0x2b2>
		break;
 8011d20:	bf00      	nop
 8011d22:	e002      	b.n	8011d2a <get_wall_look+0x2b2>
		break;
 8011d24:	bf00      	nop
 8011d26:	e000      	b.n	8011d2a <get_wall_look+0x2b2>
		break;
 8011d28:	bf00      	nop
	}

}
 8011d2a:	bf00      	nop
 8011d2c:	3714      	adds	r7, #20
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d34:	4770      	bx	lr
 8011d36:	bf00      	nop
 8011d38:	20001010 	.word	0x20001010

08011d3c <search_AroundWalkCount>:


void search_AroundWalkCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8011d3c:	b480      	push	{r7}
 8011d3e:	b087      	sub	sp, #28
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	60f8      	str	r0, [r7, #12]
 8011d44:	60b9      	str	r1, [r7, #8]
 8011d46:	607a      	str	r2, [r7, #4]
 8011d48:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT;}
 8011d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4c:	2b0e      	cmp	r3, #14
 8011d4e:	dd02      	ble.n	8011d56 <search_AroundWalkCount+0x1a>
 8011d50:	23ff      	movs	r3, #255	; 0xff
 8011d52:	82fb      	strh	r3, [r7, #22]
 8011d54:	e008      	b.n	8011d68 <search_AroundWalkCount+0x2c>
	else {north_count = walk_count[x][y + 1];}
 8011d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d58:	3301      	adds	r3, #1
 8011d5a:	493e      	ldr	r1, [pc, #248]	; (8011e54 <search_AroundWalkCount+0x118>)
 8011d5c:	6a3a      	ldr	r2, [r7, #32]
 8011d5e:	0112      	lsls	r2, r2, #4
 8011d60:	4413      	add	r3, r2
 8011d62:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011d66:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT;}
 8011d68:	6a3b      	ldr	r3, [r7, #32]
 8011d6a:	2b0e      	cmp	r3, #14
 8011d6c:	dd02      	ble.n	8011d74 <search_AroundWalkCount+0x38>
 8011d6e:	23ff      	movs	r3, #255	; 0xff
 8011d70:	82bb      	strh	r3, [r7, #20]
 8011d72:	e008      	b.n	8011d86 <search_AroundWalkCount+0x4a>
	else {east_count = walk_count[x + 1][y];}
 8011d74:	6a3b      	ldr	r3, [r7, #32]
 8011d76:	3301      	adds	r3, #1
 8011d78:	4936      	ldr	r1, [pc, #216]	; (8011e54 <search_AroundWalkCount+0x118>)
 8011d7a:	011a      	lsls	r2, r3, #4
 8011d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d7e:	4413      	add	r3, r2
 8011d80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011d84:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT;}
 8011d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	dc02      	bgt.n	8011d92 <search_AroundWalkCount+0x56>
 8011d8c:	23ff      	movs	r3, #255	; 0xff
 8011d8e:	827b      	strh	r3, [r7, #18]
 8011d90:	e008      	b.n	8011da4 <search_AroundWalkCount+0x68>
	else {south_count = walk_count[x][y - 1];}
 8011d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d94:	3b01      	subs	r3, #1
 8011d96:	492f      	ldr	r1, [pc, #188]	; (8011e54 <search_AroundWalkCount+0x118>)
 8011d98:	6a3a      	ldr	r2, [r7, #32]
 8011d9a:	0112      	lsls	r2, r2, #4
 8011d9c:	4413      	add	r3, r2
 8011d9e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011da2:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT;}
 8011da4:	6a3b      	ldr	r3, [r7, #32]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	dc02      	bgt.n	8011db0 <search_AroundWalkCount+0x74>
 8011daa:	23ff      	movs	r3, #255	; 0xff
 8011dac:	823b      	strh	r3, [r7, #16]
 8011dae:	e008      	b.n	8011dc2 <search_AroundWalkCount+0x86>
	else {west_count = walk_count[x - 1][y];}
 8011db0:	6a3b      	ldr	r3, [r7, #32]
 8011db2:	3b01      	subs	r3, #1
 8011db4:	4927      	ldr	r1, [pc, #156]	; (8011e54 <search_AroundWalkCount+0x118>)
 8011db6:	011a      	lsls	r2, r3, #4
 8011db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dba:	4413      	add	r3, r2
 8011dbc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011dc0:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 8011dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc4:	3b01      	subs	r3, #1
 8011dc6:	2b03      	cmp	r3, #3
 8011dc8:	d83e      	bhi.n	8011e48 <search_AroundWalkCount+0x10c>
 8011dca:	a201      	add	r2, pc, #4	; (adr r2, 8011dd0 <search_AroundWalkCount+0x94>)
 8011dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dd0:	08011de1 	.word	0x08011de1
 8011dd4:	08011dfb 	.word	0x08011dfb
 8011dd8:	08011e15 	.word	0x08011e15
 8011ddc:	08011e2f 	.word	0x08011e2f
	case 1:
		*front_count = north_count;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	8afa      	ldrh	r2, [r7, #22]
 8011de4:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	8aba      	ldrh	r2, [r7, #20]
 8011dea:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	8a7a      	ldrh	r2, [r7, #18]
 8011df0:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	8a3a      	ldrh	r2, [r7, #16]
 8011df6:	801a      	strh	r2, [r3, #0]
		break;
 8011df8:	e026      	b.n	8011e48 <search_AroundWalkCount+0x10c>
	case 2:
		*front_count = east_count;
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	8aba      	ldrh	r2, [r7, #20]
 8011dfe:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	8a7a      	ldrh	r2, [r7, #18]
 8011e04:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	8a3a      	ldrh	r2, [r7, #16]
 8011e0a:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	8afa      	ldrh	r2, [r7, #22]
 8011e10:	801a      	strh	r2, [r3, #0]
		break;
 8011e12:	e019      	b.n	8011e48 <search_AroundWalkCount+0x10c>
	case 3:
		*front_count = south_count;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	8a7a      	ldrh	r2, [r7, #18]
 8011e18:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 8011e1a:	68bb      	ldr	r3, [r7, #8]
 8011e1c:	8a3a      	ldrh	r2, [r7, #16]
 8011e1e:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	8afa      	ldrh	r2, [r7, #22]
 8011e24:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	8aba      	ldrh	r2, [r7, #20]
 8011e2a:	801a      	strh	r2, [r3, #0]
		break;
 8011e2c:	e00c      	b.n	8011e48 <search_AroundWalkCount+0x10c>
	case 4:
		*front_count = west_count;
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	8a3a      	ldrh	r2, [r7, #16]
 8011e32:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 8011e34:	68bb      	ldr	r3, [r7, #8]
 8011e36:	8afa      	ldrh	r2, [r7, #22]
 8011e38:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	8aba      	ldrh	r2, [r7, #20]
 8011e3e:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	8a7a      	ldrh	r2, [r7, #18]
 8011e44:	801a      	strh	r2, [r3, #0]
		break;
 8011e46:	bf00      	nop

	}


}
 8011e48:	bf00      	nop
 8011e4a:	371c      	adds	r7, #28
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e52:	4770      	bx	lr
 8011e54:	200011f4 	.word	0x200011f4

08011e58 <search_AroundDijkstraCount>:





void search_AroundDijkstraCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8011e58:	b480      	push	{r7}
 8011e5a:	b087      	sub	sp, #28
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	60f8      	str	r0, [r7, #12]
 8011e60:	60b9      	str	r1, [r7, #8]
 8011e62:	607a      	str	r2, [r7, #4]
 8011e64:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT_DIJKSTRA;}
 8011e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e68:	2b0e      	cmp	r3, #14
 8011e6a:	dd03      	ble.n	8011e74 <search_AroundDijkstraCount+0x1c>
 8011e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e70:	82fb      	strh	r3, [r7, #22]
 8011e72:	e009      	b.n	8011e88 <search_AroundDijkstraCount+0x30>
	else {north_count = Dijkstra.row_count[x][y];}
 8011e74:	4944      	ldr	r1, [pc, #272]	; (8011f88 <search_AroundDijkstraCount+0x130>)
 8011e76:	6a3a      	ldr	r2, [r7, #32]
 8011e78:	4613      	mov	r3, r2
 8011e7a:	011b      	lsls	r3, r3, #4
 8011e7c:	1a9b      	subs	r3, r3, r2
 8011e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e80:	4413      	add	r3, r2
 8011e82:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011e86:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT_DIJKSTRA;}
 8011e88:	6a3b      	ldr	r3, [r7, #32]
 8011e8a:	2b0e      	cmp	r3, #14
 8011e8c:	dd03      	ble.n	8011e96 <search_AroundDijkstraCount+0x3e>
 8011e8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e92:	82bb      	strh	r3, [r7, #20]
 8011e94:	e00a      	b.n	8011eac <search_AroundDijkstraCount+0x54>
	else {east_count = Dijkstra.column_count[y][x];}
 8011e96:	493c      	ldr	r1, [pc, #240]	; (8011f88 <search_AroundDijkstraCount+0x130>)
 8011e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e9a:	4613      	mov	r3, r2
 8011e9c:	011b      	lsls	r3, r3, #4
 8011e9e:	1a9b      	subs	r3, r3, r2
 8011ea0:	6a3a      	ldr	r2, [r7, #32]
 8011ea2:	4413      	add	r3, r2
 8011ea4:	33f0      	adds	r3, #240	; 0xf0
 8011ea6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011eaa:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT_DIJKSTRA;}
 8011eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	dc03      	bgt.n	8011eba <search_AroundDijkstraCount+0x62>
 8011eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011eb6:	827b      	strh	r3, [r7, #18]
 8011eb8:	e00a      	b.n	8011ed0 <search_AroundDijkstraCount+0x78>
	else {south_count = Dijkstra.row_count[x][y-1];}
 8011eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ebc:	1e59      	subs	r1, r3, #1
 8011ebe:	4832      	ldr	r0, [pc, #200]	; (8011f88 <search_AroundDijkstraCount+0x130>)
 8011ec0:	6a3a      	ldr	r2, [r7, #32]
 8011ec2:	4613      	mov	r3, r2
 8011ec4:	011b      	lsls	r3, r3, #4
 8011ec6:	1a9b      	subs	r3, r3, r2
 8011ec8:	440b      	add	r3, r1
 8011eca:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011ece:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT_DIJKSTRA;}
 8011ed0:	6a3b      	ldr	r3, [r7, #32]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	dc03      	bgt.n	8011ede <search_AroundDijkstraCount+0x86>
 8011ed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011eda:	823b      	strh	r3, [r7, #16]
 8011edc:	e00b      	b.n	8011ef6 <search_AroundDijkstraCount+0x9e>
	else {west_count = Dijkstra.column_count[y][x-1];}
 8011ede:	6a3b      	ldr	r3, [r7, #32]
 8011ee0:	1e59      	subs	r1, r3, #1
 8011ee2:	4829      	ldr	r0, [pc, #164]	; (8011f88 <search_AroundDijkstraCount+0x130>)
 8011ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ee6:	4613      	mov	r3, r2
 8011ee8:	011b      	lsls	r3, r3, #4
 8011eea:	1a9b      	subs	r3, r3, r2
 8011eec:	440b      	add	r3, r1
 8011eee:	33f0      	adds	r3, #240	; 0xf0
 8011ef0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011ef4:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 8011ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef8:	3b01      	subs	r3, #1
 8011efa:	2b03      	cmp	r3, #3
 8011efc:	d83e      	bhi.n	8011f7c <search_AroundDijkstraCount+0x124>
 8011efe:	a201      	add	r2, pc, #4	; (adr r2, 8011f04 <search_AroundDijkstraCount+0xac>)
 8011f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f04:	08011f15 	.word	0x08011f15
 8011f08:	08011f2f 	.word	0x08011f2f
 8011f0c:	08011f49 	.word	0x08011f49
 8011f10:	08011f63 	.word	0x08011f63
	case 1:
		*front_count = north_count;
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	8afa      	ldrh	r2, [r7, #22]
 8011f18:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 8011f1a:	68bb      	ldr	r3, [r7, #8]
 8011f1c:	8aba      	ldrh	r2, [r7, #20]
 8011f1e:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	8a7a      	ldrh	r2, [r7, #18]
 8011f24:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	8a3a      	ldrh	r2, [r7, #16]
 8011f2a:	801a      	strh	r2, [r3, #0]
		break;
 8011f2c:	e026      	b.n	8011f7c <search_AroundDijkstraCount+0x124>
	case 2:
		*front_count = east_count;
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	8aba      	ldrh	r2, [r7, #20]
 8011f32:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8011f34:	68bb      	ldr	r3, [r7, #8]
 8011f36:	8a7a      	ldrh	r2, [r7, #18]
 8011f38:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	8a3a      	ldrh	r2, [r7, #16]
 8011f3e:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	8afa      	ldrh	r2, [r7, #22]
 8011f44:	801a      	strh	r2, [r3, #0]
		break;
 8011f46:	e019      	b.n	8011f7c <search_AroundDijkstraCount+0x124>
	case 3:
		*front_count = south_count;
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	8a7a      	ldrh	r2, [r7, #18]
 8011f4c:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	8a3a      	ldrh	r2, [r7, #16]
 8011f52:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	8afa      	ldrh	r2, [r7, #22]
 8011f58:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	8aba      	ldrh	r2, [r7, #20]
 8011f5e:	801a      	strh	r2, [r3, #0]
		break;
 8011f60:	e00c      	b.n	8011f7c <search_AroundDijkstraCount+0x124>
	case 4:
		*front_count = west_count;
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	8a3a      	ldrh	r2, [r7, #16]
 8011f66:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	8afa      	ldrh	r2, [r7, #22]
 8011f6c:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	8aba      	ldrh	r2, [r7, #20]
 8011f72:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 8011f74:	683b      	ldr	r3, [r7, #0]
 8011f76:	8a7a      	ldrh	r2, [r7, #18]
 8011f78:	801a      	strh	r2, [r3, #0]
		break;
 8011f7a:	bf00      	nop

	}


}
 8011f7c:	bf00      	nop
 8011f7e:	371c      	adds	r7, #28
 8011f80:	46bd      	mov	sp, r7
 8011f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f86:	4770      	bx	lr
 8011f88:	200013f4 	.word	0x200013f4

08011f8c <create_DijkstraMap>:




void create_DijkstraMap(void){
 8011f8c:	b590      	push	{r4, r7, lr}
 8011f8e:	f5ad 4d9d 	sub.w	sp, sp, #20096	; 0x4e80
 8011f92:	b081      	sub	sp, #4
 8011f94:	af00      	add	r7, sp, #0
	STACK_T stack_x;
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_direction;//向き(0北　1北東　2東　3南東　4南　5南西　6西　7北西　8エラー)
	STACK_T stack_cost;//引かれるコスト
	int16_t VerticalCost=VERTICALCOST;
 8011f96:	23b4      	movs	r3, #180	; 0xb4
 8011f98:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f9c:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011fa0:	8013      	strh	r3, [r2, #0]
	int16_t DiagonalCost=DIAGONALCOST;
 8011fa2:	237f      	movs	r3, #127	; 0x7f
 8011fa4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011fa8:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011fac:	8013      	strh	r3, [r2, #0]
	int16_t discount_v[V_NUM_MAX]={180,118,100,91,90};
 8011fae:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011fb2:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011fb6:	4a1d      	ldr	r2, [pc, #116]	; (801202c <create_DijkstraMap+0xa0>)
 8011fb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8011fba:	c303      	stmia	r3!, {r0, r1}
 8011fbc:	801a      	strh	r2, [r3, #0]
	int16_t discount_d[D_NUM_MAX]={127,91,79,71,65,64};
 8011fbe:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011fc2:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011fc6:	4a1a      	ldr	r2, [pc, #104]	; (8012030 <create_DijkstraMap+0xa4>)
 8011fc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8011fca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int16_t dis_cost_in;
	//printf("%d,%d,%d,%d,%d\n",discount_v[0],discount_v[1],discount_v[2],discount_v[3],discount_v[4]);
	//printf("%d,%d,%d,%d,%d,%d\n",discount_d[0],discount_d[1],discount_d[2],discount_d[3],discount_d[4],discount_d[5]);
	initStack_walk(&stack_x);
 8011fce:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011fd2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f003 fab2 	bl	8015540 <initStack_walk>
	initStack_walk(&stack_y);
 8011fdc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011fe0:	f103 0320 	add.w	r3, r3, #32
 8011fe4:	3b0c      	subs	r3, #12
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f003 faaa 	bl	8015540 <initStack_walk>
	initStack_walk(&stack_matrix);
 8011fec:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011ff0:	3b14      	subs	r3, #20
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f003 faa4 	bl	8015540 <initStack_walk>
	initStack_walk(&stack_direction);
 8011ff8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011ffc:	3b3c      	subs	r3, #60	; 0x3c
 8011ffe:	4618      	mov	r0, r3
 8012000:	f003 fa9e 	bl	8015540 <initStack_walk>
	initStack_walk(&stack_cost);
 8012004:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012008:	3b64      	subs	r3, #100	; 0x64
 801200a:	4618      	mov	r0, r3
 801200c:	f003 fa98 	bl	8015540 <initStack_walk>
	for(int i=0;i<=15;i++){
 8012010:	2300      	movs	r3, #0
 8012012:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012016:	f102 0274 	add.w	r2, r2, #116	; 0x74
 801201a:	6013      	str	r3, [r2, #0]
 801201c:	e04e      	b.n	80120bc <create_DijkstraMap+0x130>
		for(int j=0;j<=14;j++){
 801201e:	2300      	movs	r3, #0
 8012020:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012024:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8012028:	6013      	str	r3, [r2, #0]
 801202a:	e035      	b.n	8012098 <create_DijkstraMap+0x10c>
 801202c:	08025048 	.word	0x08025048
 8012030:	08025054 	.word	0x08025054
			Dijkstra.column_count[i][j]=MAX_WALKCOUNT_DIJKSTRA;
 8012034:	49c6      	ldr	r1, [pc, #792]	; (8012350 <create_DijkstraMap+0x3c4>)
 8012036:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801203a:	f103 0374 	add.w	r3, r3, #116	; 0x74
 801203e:	681a      	ldr	r2, [r3, #0]
 8012040:	4613      	mov	r3, r2
 8012042:	011b      	lsls	r3, r3, #4
 8012044:	1a9b      	subs	r3, r3, r2
 8012046:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801204a:	f102 0270 	add.w	r2, r2, #112	; 0x70
 801204e:	6812      	ldr	r2, [r2, #0]
 8012050:	4413      	add	r3, r2
 8012052:	33f0      	adds	r3, #240	; 0xf0
 8012054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012058:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			Dijkstra.row_count[i][j]=MAX_WALKCOUNT_DIJKSTRA;
 801205c:	49bc      	ldr	r1, [pc, #752]	; (8012350 <create_DijkstraMap+0x3c4>)
 801205e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012062:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8012066:	681a      	ldr	r2, [r3, #0]
 8012068:	4613      	mov	r3, r2
 801206a:	011b      	lsls	r3, r3, #4
 801206c:	1a9b      	subs	r3, r3, r2
 801206e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012072:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8012076:	6812      	ldr	r2, [r2, #0]
 8012078:	4413      	add	r3, r2
 801207a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801207e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j=0;j<=14;j++){
 8012082:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012086:	f103 0370 	add.w	r3, r3, #112	; 0x70
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	3301      	adds	r3, #1
 801208e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012092:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8012096:	6013      	str	r3, [r2, #0]
 8012098:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801209c:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	2b0e      	cmp	r3, #14
 80120a4:	ddc6      	ble.n	8012034 <create_DijkstraMap+0xa8>
	for(int i=0;i<=15;i++){
 80120a6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120aa:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	3301      	adds	r3, #1
 80120b2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80120b6:	f102 0274 	add.w	r2, r2, #116	; 0x74
 80120ba:	6013      	str	r3, [r2, #0]
 80120bc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120c0:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	2b0f      	cmp	r3, #15
 80120c8:	dda9      	ble.n	801201e <create_DijkstraMap+0x92>
		}
	}
	Dijkstra.row_count[GOAL_X][GOAL_Y]=0;
 80120ca:	4ba1      	ldr	r3, [pc, #644]	; (8012350 <create_DijkstraMap+0x3c4>)
 80120cc:	2200      	movs	r2, #0
 80120ce:	879a      	strh	r2, [r3, #60]	; 0x3c
	Dijkstra.row_count[GOAL_X+1][GOAL_Y]=0;
 80120d0:	4b9f      	ldr	r3, [pc, #636]	; (8012350 <create_DijkstraMap+0x3c4>)
 80120d2:	2200      	movs	r2, #0
 80120d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	Dijkstra.column_count[GOAL_Y][GOAL_X]=0;
 80120d8:	4b9d      	ldr	r3, [pc, #628]	; (8012350 <create_DijkstraMap+0x3c4>)
 80120da:	2200      	movs	r2, #0
 80120dc:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
	Dijkstra.column_count[GOAL_Y+1][GOAL_X]=0;
 80120e0:	4b9b      	ldr	r3, [pc, #620]	; (8012350 <create_DijkstraMap+0x3c4>)
 80120e2:	2200      	movs	r2, #0
 80120e4:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 80120e8:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80120ec:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80120f0:	2102      	movs	r1, #2
 80120f2:	4618      	mov	r0, r3
 80120f4:	f003 fa34 	bl	8015560 <pushStack_walk>
 80120f8:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80120fc:	f103 0320 	add.w	r3, r3, #32
 8012100:	3b0c      	subs	r3, #12
 8012102:	2100      	movs	r1, #0
 8012104:	4618      	mov	r0, r3
 8012106:	f003 fa2b 	bl	8015560 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 801210a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801210e:	3b14      	subs	r3, #20
 8012110:	2100      	movs	r1, #0
 8012112:	4618      	mov	r0, r3
 8012114:	f003 fa24 	bl	8015560 <pushStack_walk>
 8012118:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801211c:	3b3c      	subs	r3, #60	; 0x3c
 801211e:	2108      	movs	r1, #8
 8012120:	4618      	mov	r0, r3
 8012122:	f003 fa1d 	bl	8015560 <pushStack_walk>
 8012126:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801212a:	3b64      	subs	r3, #100	; 0x64
 801212c:	2100      	movs	r1, #0
 801212e:	4618      	mov	r0, r3
 8012130:	f003 fa16 	bl	8015560 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X+1);pushStack_walk(&stack_y,GOAL_Y);
 8012134:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012138:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801213c:	2103      	movs	r1, #3
 801213e:	4618      	mov	r0, r3
 8012140:	f003 fa0e 	bl	8015560 <pushStack_walk>
 8012144:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012148:	f103 0320 	add.w	r3, r3, #32
 801214c:	3b0c      	subs	r3, #12
 801214e:	2100      	movs	r1, #0
 8012150:	4618      	mov	r0, r3
 8012152:	f003 fa05 	bl	8015560 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8012156:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801215a:	3b14      	subs	r3, #20
 801215c:	2100      	movs	r1, #0
 801215e:	4618      	mov	r0, r3
 8012160:	f003 f9fe 	bl	8015560 <pushStack_walk>
 8012164:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012168:	3b3c      	subs	r3, #60	; 0x3c
 801216a:	2108      	movs	r1, #8
 801216c:	4618      	mov	r0, r3
 801216e:	f003 f9f7 	bl	8015560 <pushStack_walk>
 8012172:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012176:	3b64      	subs	r3, #100	; 0x64
 8012178:	2100      	movs	r1, #0
 801217a:	4618      	mov	r0, r3
 801217c:	f003 f9f0 	bl	8015560 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8012180:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012184:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012188:	2102      	movs	r1, #2
 801218a:	4618      	mov	r0, r3
 801218c:	f003 f9e8 	bl	8015560 <pushStack_walk>
 8012190:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012194:	f103 0320 	add.w	r3, r3, #32
 8012198:	3b0c      	subs	r3, #12
 801219a:	2100      	movs	r1, #0
 801219c:	4618      	mov	r0, r3
 801219e:	f003 f9df 	bl	8015560 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80121a2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80121a6:	3b14      	subs	r3, #20
 80121a8:	2101      	movs	r1, #1
 80121aa:	4618      	mov	r0, r3
 80121ac:	f003 f9d8 	bl	8015560 <pushStack_walk>
 80121b0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80121b4:	3b3c      	subs	r3, #60	; 0x3c
 80121b6:	2108      	movs	r1, #8
 80121b8:	4618      	mov	r0, r3
 80121ba:	f003 f9d1 	bl	8015560 <pushStack_walk>
 80121be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80121c2:	3b64      	subs	r3, #100	; 0x64
 80121c4:	2100      	movs	r1, #0
 80121c6:	4618      	mov	r0, r3
 80121c8:	f003 f9ca 	bl	8015560 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y+1);
 80121cc:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80121d0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80121d4:	2102      	movs	r1, #2
 80121d6:	4618      	mov	r0, r3
 80121d8:	f003 f9c2 	bl	8015560 <pushStack_walk>
 80121dc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80121e0:	f103 0320 	add.w	r3, r3, #32
 80121e4:	3b0c      	subs	r3, #12
 80121e6:	2101      	movs	r1, #1
 80121e8:	4618      	mov	r0, r3
 80121ea:	f003 f9b9 	bl	8015560 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80121ee:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80121f2:	3b14      	subs	r3, #20
 80121f4:	2101      	movs	r1, #1
 80121f6:	4618      	mov	r0, r3
 80121f8:	f003 f9b2 	bl	8015560 <pushStack_walk>
 80121fc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012200:	3b3c      	subs	r3, #60	; 0x3c
 8012202:	2108      	movs	r1, #8
 8012204:	4618      	mov	r0, r3
 8012206:	f003 f9ab 	bl	8015560 <pushStack_walk>
 801220a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801220e:	3b64      	subs	r3, #100	; 0x64
 8012210:	2100      	movs	r1, #0
 8012212:	4618      	mov	r0, r3
 8012214:	f003 f9a4 	bl	8015560 <pushStack_walk>



	unsigned short count_number = 1;
 8012218:	2301      	movs	r3, #1
 801221a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801221e:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 8012222:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate,Row_or_Column,Direction,dis_cost;
	while (1) {

		Xcoordinate = popStack_walk(&stack_x);
 8012224:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012228:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801222c:	4618      	mov	r0, r3
 801222e:	f003 f9c1 	bl	80155b4 <popStack_walk>
 8012232:	4603      	mov	r3, r0
 8012234:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012238:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801223c:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 801223e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012242:	f103 0320 	add.w	r3, r3, #32
 8012246:	3b0c      	subs	r3, #12
 8012248:	4618      	mov	r0, r3
 801224a:	f003 f9b3 	bl	80155b4 <popStack_walk>
 801224e:	4603      	mov	r3, r0
 8012250:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012254:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012258:	8013      	strh	r3, [r2, #0]
		Row_or_Column = popStack_walk(&stack_matrix);
 801225a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801225e:	3b14      	subs	r3, #20
 8012260:	4618      	mov	r0, r3
 8012262:	f003 f9a7 	bl	80155b4 <popStack_walk>
 8012266:	4603      	mov	r3, r0
 8012268:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801226c:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8012270:	8013      	strh	r3, [r2, #0]
		Direction = popStack_walk(&stack_direction);
 8012272:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012276:	3b3c      	subs	r3, #60	; 0x3c
 8012278:	4618      	mov	r0, r3
 801227a:	f003 f99b 	bl	80155b4 <popStack_walk>
 801227e:	4603      	mov	r3, r0
 8012280:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012284:	f102 0266 	add.w	r2, r2, #102	; 0x66
 8012288:	8013      	strh	r3, [r2, #0]
		dis_cost = popStack_walk(&stack_cost);
 801228a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801228e:	3b64      	subs	r3, #100	; 0x64
 8012290:	4618      	mov	r0, r3
 8012292:	f003 f98f 	bl	80155b4 <popStack_walk>
 8012296:	4603      	mov	r3, r0
 8012298:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801229c:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80122a0:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
		//printf("cost_num %d\n",dis_cost);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == MAX_WALKCOUNT_DIJKSTRA || Ycoordinate == MAX_WALKCOUNT_DIJKSTRA) {
 80122a2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122a6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80122aa:	881b      	ldrh	r3, [r3, #0]
 80122ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122b0:	4293      	cmp	r3, r2
 80122b2:	f001 8398 	beq.w	80139e6 <create_DijkstraMap+0x1a5a>
 80122b6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122ba:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80122be:	881b      	ldrh	r3, [r3, #0]
 80122c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122c4:	4293      	cmp	r3, r2
 80122c6:	f001 838e 	beq.w	80139e6 <create_DijkstraMap+0x1a5a>
			//printf("stack_end\n");
			break;
		}
		if(Row_or_Column==ROW){
 80122ca:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122ce:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80122d2:	881b      	ldrh	r3, [r3, #0]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	f040 85b7 	bne.w	8012e48 <create_DijkstraMap+0xebc>
			if(Ycoordinate <= 13){
 80122da:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122de:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80122e2:	881b      	ldrh	r3, [r3, #0]
 80122e4:	2b0d      	cmp	r3, #13
 80122e6:	f200 80ea 	bhi.w	80124be <create_DijkstraMap+0x532>
				if(Direction==SLANT_NORTH){
 80122ea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122ee:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80122f2:	881b      	ldrh	r3, [r3, #0]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d12d      	bne.n	8012354 <create_DijkstraMap+0x3c8>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 80122f8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122fc:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012300:	881b      	ldrh	r3, [r3, #0]
 8012302:	3301      	adds	r3, #1
 8012304:	b29b      	uxth	r3, r3
 8012306:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801230a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801230e:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8012310:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012314:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012318:	f9b3 3000 	ldrsh.w	r3, [r3]
 801231c:	2b04      	cmp	r3, #4
 801231e:	dd05      	ble.n	801232c <create_DijkstraMap+0x3a0>
 8012320:	2304      	movs	r3, #4
 8012322:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012326:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801232a:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 801232c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012330:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012334:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012338:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801233c:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012340:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012344:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012348:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 801234c:	8013      	strh	r3, [r2, #0]
 801234e:	e011      	b.n	8012374 <create_DijkstraMap+0x3e8>
 8012350:	200013f4 	.word	0x200013f4
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8012354:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012358:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 801235c:	881b      	ldrh	r3, [r3, #0]
 801235e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012362:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012366:	8013      	strh	r3, [r2, #0]
 8012368:	2300      	movs	r3, #0
 801236a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801236e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012372:	8013      	strh	r3, [r2, #0]
				if((wall.row[Ycoordinate+1] & (1 << Xcoordinate))==0 && Dijkstra.row_count[Xcoordinate][Ycoordinate+1]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8012374:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012378:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801237c:	881b      	ldrh	r3, [r3, #0]
 801237e:	3301      	adds	r3, #1
 8012380:	4a6c      	ldr	r2, [pc, #432]	; (8012534 <create_DijkstraMap+0x5a8>)
 8012382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012386:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801238a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801238e:	8812      	ldrh	r2, [r2, #0]
 8012390:	2101      	movs	r1, #1
 8012392:	fa01 f202 	lsl.w	r2, r1, r2
 8012396:	4013      	ands	r3, r2
 8012398:	2b00      	cmp	r3, #0
 801239a:	f040 8090 	bne.w	80124be <create_DijkstraMap+0x532>
 801239e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123a2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80123a6:	881a      	ldrh	r2, [r3, #0]
 80123a8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123ac:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80123b0:	881b      	ldrh	r3, [r3, #0]
 80123b2:	1c59      	adds	r1, r3, #1
 80123b4:	4860      	ldr	r0, [pc, #384]	; (8012538 <create_DijkstraMap+0x5ac>)
 80123b6:	4613      	mov	r3, r2
 80123b8:	011b      	lsls	r3, r3, #4
 80123ba:	1a9b      	subs	r3, r3, r2
 80123bc:	440b      	add	r3, r1
 80123be:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80123c2:	461c      	mov	r4, r3
 80123c4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123c8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80123cc:	881a      	ldrh	r2, [r3, #0]
 80123ce:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123d2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80123d6:	8819      	ldrh	r1, [r3, #0]
 80123d8:	4857      	ldr	r0, [pc, #348]	; (8012538 <create_DijkstraMap+0x5ac>)
 80123da:	4613      	mov	r3, r2
 80123dc:	011b      	lsls	r3, r3, #4
 80123de:	1a9b      	subs	r3, r3, r2
 80123e0:	440b      	add	r3, r1
 80123e2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80123e6:	461a      	mov	r2, r3
 80123e8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123ec:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80123f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80123f4:	4413      	add	r3, r2
 80123f6:	429c      	cmp	r4, r3
 80123f8:	dd61      	ble.n	80124be <create_DijkstraMap+0x532>
					Dijkstra.row_count[Xcoordinate][Ycoordinate+1]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+VerticalCost;
 80123fa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123fe:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012402:	881a      	ldrh	r2, [r3, #0]
 8012404:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012408:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801240c:	8819      	ldrh	r1, [r3, #0]
 801240e:	484a      	ldr	r0, [pc, #296]	; (8012538 <create_DijkstraMap+0x5ac>)
 8012410:	4613      	mov	r3, r2
 8012412:	011b      	lsls	r3, r3, #4
 8012414:	1a9b      	subs	r3, r3, r2
 8012416:	440b      	add	r3, r1
 8012418:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801241c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012420:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8012424:	881b      	ldrh	r3, [r3, #0]
 8012426:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801242a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801242e:	8812      	ldrh	r2, [r2, #0]
 8012430:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012434:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012438:	8809      	ldrh	r1, [r1, #0]
 801243a:	3101      	adds	r1, #1
 801243c:	4403      	add	r3, r0
 801243e:	b29c      	uxth	r4, r3
 8012440:	483d      	ldr	r0, [pc, #244]	; (8012538 <create_DijkstraMap+0x5ac>)
 8012442:	4613      	mov	r3, r2
 8012444:	011b      	lsls	r3, r3, #4
 8012446:	1a9b      	subs	r3, r3, r2
 8012448:	440b      	add	r3, r1
 801244a:	4622      	mov	r2, r4
 801244c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8012450:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012454:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012458:	881a      	ldrh	r2, [r3, #0]
 801245a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801245e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012462:	4611      	mov	r1, r2
 8012464:	4618      	mov	r0, r3
 8012466:	f003 f87b 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate + 1);
 801246a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801246e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012472:	881b      	ldrh	r3, [r3, #0]
 8012474:	3301      	adds	r3, #1
 8012476:	b29a      	uxth	r2, r3
 8012478:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801247c:	f103 0320 	add.w	r3, r3, #32
 8012480:	3b0c      	subs	r3, #12
 8012482:	4611      	mov	r1, r2
 8012484:	4618      	mov	r0, r3
 8012486:	f003 f86b 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 801248a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801248e:	3b14      	subs	r3, #20
 8012490:	2100      	movs	r1, #0
 8012492:	4618      	mov	r0, r3
 8012494:	f003 f864 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH);
 8012498:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801249c:	3b3c      	subs	r3, #60	; 0x3c
 801249e:	2100      	movs	r1, #0
 80124a0:	4618      	mov	r0, r3
 80124a2:	f003 f85d 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 80124a6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124aa:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80124ae:	881a      	ldrh	r2, [r3, #0]
 80124b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80124b4:	3b64      	subs	r3, #100	; 0x64
 80124b6:	4611      	mov	r1, r2
 80124b8:	4618      	mov	r0, r3
 80124ba:	f003 f851 	bl	8015560 <pushStack_walk>
				}
			}
			if (Ycoordinate >= 1) {
 80124be:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124c2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80124c6:	881b      	ldrh	r3, [r3, #0]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	f000 80ec 	beq.w	80126a6 <create_DijkstraMap+0x71a>
				if(Direction==SLANT_SOUTH){
 80124ce:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124d2:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80124d6:	881b      	ldrh	r3, [r3, #0]
 80124d8:	2b04      	cmp	r3, #4
 80124da:	d12f      	bne.n	801253c <create_DijkstraMap+0x5b0>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 80124dc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124e0:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80124e4:	881b      	ldrh	r3, [r3, #0]
 80124e6:	3301      	adds	r3, #1
 80124e8:	b29b      	uxth	r3, r3
 80124ea:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80124ee:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80124f2:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 80124f4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124f8:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80124fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012500:	2b04      	cmp	r3, #4
 8012502:	dd05      	ble.n	8012510 <create_DijkstraMap+0x584>
 8012504:	2304      	movs	r3, #4
 8012506:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801250a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801250e:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 8012510:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012514:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012518:	f9b3 2000 	ldrsh.w	r2, [r3]
 801251c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012520:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012524:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012528:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801252c:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012530:	8013      	strh	r3, [r2, #0]
 8012532:	e013      	b.n	801255c <create_DijkstraMap+0x5d0>
 8012534:	20001010 	.word	0x20001010
 8012538:	200013f4 	.word	0x200013f4
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 801253c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012540:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012544:	881b      	ldrh	r3, [r3, #0]
 8012546:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801254a:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 801254e:	8013      	strh	r3, [r2, #0]
 8012550:	2300      	movs	r3, #0
 8012552:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012556:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801255a:	8013      	strh	r3, [r2, #0]
				if((wall.row[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.row_count[Xcoordinate][Ycoordinate-1]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+VerticalCost){
 801255c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012560:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012564:	881b      	ldrh	r3, [r3, #0]
 8012566:	3b01      	subs	r3, #1
 8012568:	4a6c      	ldr	r2, [pc, #432]	; (801271c <create_DijkstraMap+0x790>)
 801256a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801256e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012572:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012576:	8812      	ldrh	r2, [r2, #0]
 8012578:	2101      	movs	r1, #1
 801257a:	fa01 f202 	lsl.w	r2, r1, r2
 801257e:	4013      	ands	r3, r2
 8012580:	2b00      	cmp	r3, #0
 8012582:	f040 8090 	bne.w	80126a6 <create_DijkstraMap+0x71a>
 8012586:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801258a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801258e:	881a      	ldrh	r2, [r3, #0]
 8012590:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012594:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012598:	881b      	ldrh	r3, [r3, #0]
 801259a:	1e59      	subs	r1, r3, #1
 801259c:	4860      	ldr	r0, [pc, #384]	; (8012720 <create_DijkstraMap+0x794>)
 801259e:	4613      	mov	r3, r2
 80125a0:	011b      	lsls	r3, r3, #4
 80125a2:	1a9b      	subs	r3, r3, r2
 80125a4:	440b      	add	r3, r1
 80125a6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80125aa:	461c      	mov	r4, r3
 80125ac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125b0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80125b4:	881a      	ldrh	r2, [r3, #0]
 80125b6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125ba:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80125be:	8819      	ldrh	r1, [r3, #0]
 80125c0:	4857      	ldr	r0, [pc, #348]	; (8012720 <create_DijkstraMap+0x794>)
 80125c2:	4613      	mov	r3, r2
 80125c4:	011b      	lsls	r3, r3, #4
 80125c6:	1a9b      	subs	r3, r3, r2
 80125c8:	440b      	add	r3, r1
 80125ca:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80125ce:	461a      	mov	r2, r3
 80125d0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125d4:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80125d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125dc:	4413      	add	r3, r2
 80125de:	429c      	cmp	r4, r3
 80125e0:	dd61      	ble.n	80126a6 <create_DijkstraMap+0x71a>
					Dijkstra.row_count[Xcoordinate][Ycoordinate-1]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+VerticalCost;
 80125e2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125e6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80125ea:	881a      	ldrh	r2, [r3, #0]
 80125ec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125f0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80125f4:	8819      	ldrh	r1, [r3, #0]
 80125f6:	484a      	ldr	r0, [pc, #296]	; (8012720 <create_DijkstraMap+0x794>)
 80125f8:	4613      	mov	r3, r2
 80125fa:	011b      	lsls	r3, r3, #4
 80125fc:	1a9b      	subs	r3, r3, r2
 80125fe:	440b      	add	r3, r1
 8012600:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012604:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012608:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 801260c:	881b      	ldrh	r3, [r3, #0]
 801260e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012612:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012616:	8812      	ldrh	r2, [r2, #0]
 8012618:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801261c:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012620:	8809      	ldrh	r1, [r1, #0]
 8012622:	3901      	subs	r1, #1
 8012624:	4403      	add	r3, r0
 8012626:	b29c      	uxth	r4, r3
 8012628:	483d      	ldr	r0, [pc, #244]	; (8012720 <create_DijkstraMap+0x794>)
 801262a:	4613      	mov	r3, r2
 801262c:	011b      	lsls	r3, r3, #4
 801262e:	1a9b      	subs	r3, r3, r2
 8012630:	440b      	add	r3, r1
 8012632:	4622      	mov	r2, r4
 8012634:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8012638:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801263c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012640:	881a      	ldrh	r2, [r3, #0]
 8012642:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012646:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801264a:	4611      	mov	r1, r2
 801264c:	4618      	mov	r0, r3
 801264e:	f002 ff87 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate - 1);
 8012652:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012656:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801265a:	881b      	ldrh	r3, [r3, #0]
 801265c:	3b01      	subs	r3, #1
 801265e:	b29a      	uxth	r2, r3
 8012660:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012664:	f103 0320 	add.w	r3, r3, #32
 8012668:	3b0c      	subs	r3, #12
 801266a:	4611      	mov	r1, r2
 801266c:	4618      	mov	r0, r3
 801266e:	f002 ff77 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012672:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012676:	3b14      	subs	r3, #20
 8012678:	2100      	movs	r1, #0
 801267a:	4618      	mov	r0, r3
 801267c:	f002 ff70 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH);
 8012680:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012684:	3b3c      	subs	r3, #60	; 0x3c
 8012686:	2104      	movs	r1, #4
 8012688:	4618      	mov	r0, r3
 801268a:	f002 ff69 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 801268e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012692:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012696:	881a      	ldrh	r2, [r3, #0]
 8012698:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801269c:	3b64      	subs	r3, #100	; 0x64
 801269e:	4611      	mov	r1, r2
 80126a0:	4618      	mov	r0, r3
 80126a2:	f002 ff5d 	bl	8015560 <pushStack_walk>
				}
			}
			if (Xcoordinate <= 14) {
 80126a6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126aa:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80126ae:	881b      	ldrh	r3, [r3, #0]
 80126b0:	2b0e      	cmp	r3, #14
 80126b2:	f200 81dc 	bhi.w	8012a6e <create_DijkstraMap+0xae2>
				if(Direction==SLANT_SOUTH_EAST){
 80126b6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126ba:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80126be:	881b      	ldrh	r3, [r3, #0]
 80126c0:	2b03      	cmp	r3, #3
 80126c2:	d12f      	bne.n	8012724 <create_DijkstraMap+0x798>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80126c4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126c8:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80126cc:	881b      	ldrh	r3, [r3, #0]
 80126ce:	3301      	adds	r3, #1
 80126d0:	b29b      	uxth	r3, r3
 80126d2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80126d6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80126da:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80126dc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126e0:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80126e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126e8:	2b05      	cmp	r3, #5
 80126ea:	dd05      	ble.n	80126f8 <create_DijkstraMap+0x76c>
 80126ec:	2305      	movs	r3, #5
 80126ee:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80126f2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80126f6:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 80126f8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126fc:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012700:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012704:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012708:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801270c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012710:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012714:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012718:	8013      	strh	r3, [r2, #0]
 801271a:	e013      	b.n	8012744 <create_DijkstraMap+0x7b8>
 801271c:	20001010 	.word	0x20001010
 8012720:	200013f4 	.word	0x200013f4
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012724:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012728:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801272c:	881b      	ldrh	r3, [r3, #0]
 801272e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012732:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012736:	8013      	strh	r3, [r2, #0]
 8012738:	2300      	movs	r3, #0
 801273a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801273e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012742:	8013      	strh	r3, [r2, #0]
				if((wall.column[Xcoordinate] & (1 << Ycoordinate))==0 && Dijkstra.column_count[Ycoordinate][Xcoordinate]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012744:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012748:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801274c:	881b      	ldrh	r3, [r3, #0]
 801274e:	4a69      	ldr	r2, [pc, #420]	; (80128f4 <create_DijkstraMap+0x968>)
 8012750:	330e      	adds	r3, #14
 8012752:	009b      	lsls	r3, r3, #2
 8012754:	4413      	add	r3, r2
 8012756:	685b      	ldr	r3, [r3, #4]
 8012758:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801275c:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012760:	8812      	ldrh	r2, [r2, #0]
 8012762:	2101      	movs	r1, #1
 8012764:	fa01 f202 	lsl.w	r2, r1, r2
 8012768:	4013      	ands	r3, r2
 801276a:	2b00      	cmp	r3, #0
 801276c:	f040 808e 	bne.w	801288c <create_DijkstraMap+0x900>
 8012770:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012774:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012778:	881a      	ldrh	r2, [r3, #0]
 801277a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801277e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012782:	8819      	ldrh	r1, [r3, #0]
 8012784:	485c      	ldr	r0, [pc, #368]	; (80128f8 <create_DijkstraMap+0x96c>)
 8012786:	4613      	mov	r3, r2
 8012788:	011b      	lsls	r3, r3, #4
 801278a:	1a9b      	subs	r3, r3, r2
 801278c:	440b      	add	r3, r1
 801278e:	33f0      	adds	r3, #240	; 0xf0
 8012790:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012794:	461c      	mov	r4, r3
 8012796:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801279a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801279e:	881a      	ldrh	r2, [r3, #0]
 80127a0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127a4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80127a8:	8819      	ldrh	r1, [r3, #0]
 80127aa:	4853      	ldr	r0, [pc, #332]	; (80128f8 <create_DijkstraMap+0x96c>)
 80127ac:	4613      	mov	r3, r2
 80127ae:	011b      	lsls	r3, r3, #4
 80127b0:	1a9b      	subs	r3, r3, r2
 80127b2:	440b      	add	r3, r1
 80127b4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80127b8:	461a      	mov	r2, r3
 80127ba:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127be:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80127c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127c6:	4413      	add	r3, r2
 80127c8:	429c      	cmp	r4, r3
 80127ca:	dd5f      	ble.n	801288c <create_DijkstraMap+0x900>
					Dijkstra.column_count[Ycoordinate][Xcoordinate]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 80127cc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127d0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80127d4:	881a      	ldrh	r2, [r3, #0]
 80127d6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127da:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80127de:	8819      	ldrh	r1, [r3, #0]
 80127e0:	4845      	ldr	r0, [pc, #276]	; (80128f8 <create_DijkstraMap+0x96c>)
 80127e2:	4613      	mov	r3, r2
 80127e4:	011b      	lsls	r3, r3, #4
 80127e6:	1a9b      	subs	r3, r3, r2
 80127e8:	440b      	add	r3, r1
 80127ea:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80127ee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127f2:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80127f6:	881b      	ldrh	r3, [r3, #0]
 80127f8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80127fc:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012800:	8812      	ldrh	r2, [r2, #0]
 8012802:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012806:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 801280a:	8809      	ldrh	r1, [r1, #0]
 801280c:	4403      	add	r3, r0
 801280e:	b29c      	uxth	r4, r3
 8012810:	4839      	ldr	r0, [pc, #228]	; (80128f8 <create_DijkstraMap+0x96c>)
 8012812:	4613      	mov	r3, r2
 8012814:	011b      	lsls	r3, r3, #4
 8012816:	1a9b      	subs	r3, r3, r2
 8012818:	440b      	add	r3, r1
 801281a:	33f0      	adds	r3, #240	; 0xf0
 801281c:	4622      	mov	r2, r4
 801281e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8012822:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012826:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801282a:	881a      	ldrh	r2, [r3, #0]
 801282c:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012830:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012834:	4611      	mov	r1, r2
 8012836:	4618      	mov	r0, r3
 8012838:	f002 fe92 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 801283c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012840:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012844:	881a      	ldrh	r2, [r3, #0]
 8012846:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801284a:	f103 0320 	add.w	r3, r3, #32
 801284e:	3b0c      	subs	r3, #12
 8012850:	4611      	mov	r1, r2
 8012852:	4618      	mov	r0, r3
 8012854:	f002 fe84 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8012858:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801285c:	3b14      	subs	r3, #20
 801285e:	2101      	movs	r1, #1
 8012860:	4618      	mov	r0, r3
 8012862:	f002 fe7d 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8012866:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801286a:	3b3c      	subs	r3, #60	; 0x3c
 801286c:	2103      	movs	r1, #3
 801286e:	4618      	mov	r0, r3
 8012870:	f002 fe76 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012874:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012878:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801287c:	881a      	ldrh	r2, [r3, #0]
 801287e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012882:	3b64      	subs	r3, #100	; 0x64
 8012884:	4611      	mov	r1, r2
 8012886:	4618      	mov	r0, r3
 8012888:	f002 fe6a 	bl	8015560 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_EAST){
 801288c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012890:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012894:	881b      	ldrh	r3, [r3, #0]
 8012896:	2b01      	cmp	r3, #1
 8012898:	d130      	bne.n	80128fc <create_DijkstraMap+0x970>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 801289a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801289e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80128a2:	881b      	ldrh	r3, [r3, #0]
 80128a4:	3301      	adds	r3, #1
 80128a6:	b29b      	uxth	r3, r3
 80128a8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80128ac:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80128b0:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80128b2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128b6:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80128ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80128be:	2b05      	cmp	r3, #5
 80128c0:	dd05      	ble.n	80128ce <create_DijkstraMap+0x942>
 80128c2:	2305      	movs	r3, #5
 80128c4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80128c8:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80128cc:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 80128ce:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128d2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80128d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80128da:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80128de:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80128e2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80128e6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80128ea:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80128ee:	8013      	strh	r3, [r2, #0]
 80128f0:	e014      	b.n	801291c <create_DijkstraMap+0x990>
 80128f2:	bf00      	nop
 80128f4:	20001010 	.word	0x20001010
 80128f8:	200013f4 	.word	0x200013f4
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80128fc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012900:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012904:	881b      	ldrh	r3, [r3, #0]
 8012906:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801290a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801290e:	8013      	strh	r3, [r2, #0]
 8012910:	2300      	movs	r3, #0
 8012912:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012916:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801291a:	8013      	strh	r3, [r2, #0]
				if((wall.column[Xcoordinate] & (1 << (Ycoordinate+1)))==0 && Dijkstra.column_count[Ycoordinate+1][Xcoordinate]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 801291c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012920:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012924:	881b      	ldrh	r3, [r3, #0]
 8012926:	4a6f      	ldr	r2, [pc, #444]	; (8012ae4 <create_DijkstraMap+0xb58>)
 8012928:	330e      	adds	r3, #14
 801292a:	009b      	lsls	r3, r3, #2
 801292c:	4413      	add	r3, r2
 801292e:	685b      	ldr	r3, [r3, #4]
 8012930:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012934:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012938:	8812      	ldrh	r2, [r2, #0]
 801293a:	3201      	adds	r2, #1
 801293c:	2101      	movs	r1, #1
 801293e:	fa01 f202 	lsl.w	r2, r1, r2
 8012942:	4013      	ands	r3, r2
 8012944:	2b00      	cmp	r3, #0
 8012946:	f040 8092 	bne.w	8012a6e <create_DijkstraMap+0xae2>
 801294a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801294e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012952:	881b      	ldrh	r3, [r3, #0]
 8012954:	1c5a      	adds	r2, r3, #1
 8012956:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801295a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801295e:	8819      	ldrh	r1, [r3, #0]
 8012960:	4861      	ldr	r0, [pc, #388]	; (8012ae8 <create_DijkstraMap+0xb5c>)
 8012962:	4613      	mov	r3, r2
 8012964:	011b      	lsls	r3, r3, #4
 8012966:	1a9b      	subs	r3, r3, r2
 8012968:	440b      	add	r3, r1
 801296a:	33f0      	adds	r3, #240	; 0xf0
 801296c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012970:	461c      	mov	r4, r3
 8012972:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012976:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801297a:	881a      	ldrh	r2, [r3, #0]
 801297c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012980:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012984:	8819      	ldrh	r1, [r3, #0]
 8012986:	4858      	ldr	r0, [pc, #352]	; (8012ae8 <create_DijkstraMap+0xb5c>)
 8012988:	4613      	mov	r3, r2
 801298a:	011b      	lsls	r3, r3, #4
 801298c:	1a9b      	subs	r3, r3, r2
 801298e:	440b      	add	r3, r1
 8012990:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012994:	461a      	mov	r2, r3
 8012996:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801299a:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801299e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80129a2:	4413      	add	r3, r2
 80129a4:	429c      	cmp	r4, r3
 80129a6:	dd62      	ble.n	8012a6e <create_DijkstraMap+0xae2>
					Dijkstra.column_count[Ycoordinate+1][Xcoordinate]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 80129a8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129ac:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80129b0:	881a      	ldrh	r2, [r3, #0]
 80129b2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129b6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80129ba:	8819      	ldrh	r1, [r3, #0]
 80129bc:	484a      	ldr	r0, [pc, #296]	; (8012ae8 <create_DijkstraMap+0xb5c>)
 80129be:	4613      	mov	r3, r2
 80129c0:	011b      	lsls	r3, r3, #4
 80129c2:	1a9b      	subs	r3, r3, r2
 80129c4:	440b      	add	r3, r1
 80129c6:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80129ca:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129ce:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80129d2:	881b      	ldrh	r3, [r3, #0]
 80129d4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80129d8:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80129dc:	8812      	ldrh	r2, [r2, #0]
 80129de:	3201      	adds	r2, #1
 80129e0:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80129e4:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 80129e8:	8809      	ldrh	r1, [r1, #0]
 80129ea:	4403      	add	r3, r0
 80129ec:	b29c      	uxth	r4, r3
 80129ee:	483e      	ldr	r0, [pc, #248]	; (8012ae8 <create_DijkstraMap+0xb5c>)
 80129f0:	4613      	mov	r3, r2
 80129f2:	011b      	lsls	r3, r3, #4
 80129f4:	1a9b      	subs	r3, r3, r2
 80129f6:	440b      	add	r3, r1
 80129f8:	33f0      	adds	r3, #240	; 0xf0
 80129fa:	4622      	mov	r2, r4
 80129fc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8012a00:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a04:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012a08:	881a      	ldrh	r2, [r3, #0]
 8012a0a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012a0e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012a12:	4611      	mov	r1, r2
 8012a14:	4618      	mov	r0, r3
 8012a16:	f002 fda3 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 8012a1a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a1e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012a22:	881b      	ldrh	r3, [r3, #0]
 8012a24:	3301      	adds	r3, #1
 8012a26:	b29a      	uxth	r2, r3
 8012a28:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012a2c:	f103 0320 	add.w	r3, r3, #32
 8012a30:	3b0c      	subs	r3, #12
 8012a32:	4611      	mov	r1, r2
 8012a34:	4618      	mov	r0, r3
 8012a36:	f002 fd93 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8012a3a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012a3e:	3b14      	subs	r3, #20
 8012a40:	2101      	movs	r1, #1
 8012a42:	4618      	mov	r0, r3
 8012a44:	f002 fd8c 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8012a48:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012a4c:	3b3c      	subs	r3, #60	; 0x3c
 8012a4e:	2101      	movs	r1, #1
 8012a50:	4618      	mov	r0, r3
 8012a52:	f002 fd85 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012a56:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a5a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012a5e:	881a      	ldrh	r2, [r3, #0]
 8012a60:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012a64:	3b64      	subs	r3, #100	; 0x64
 8012a66:	4611      	mov	r1, r2
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f002 fd79 	bl	8015560 <pushStack_walk>
				}
			}
			if (Xcoordinate >= 1) {
 8012a6e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a72:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012a76:	881b      	ldrh	r3, [r3, #0]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	f000 81e5 	beq.w	8012e48 <create_DijkstraMap+0xebc>
				if(Direction==SLANT_SOUTH_WEST){
 8012a7e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a82:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012a86:	881b      	ldrh	r3, [r3, #0]
 8012a88:	2b05      	cmp	r3, #5
 8012a8a:	d12f      	bne.n	8012aec <create_DijkstraMap+0xb60>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012a8c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a90:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012a94:	881b      	ldrh	r3, [r3, #0]
 8012a96:	3301      	adds	r3, #1
 8012a98:	b29b      	uxth	r3, r3
 8012a9a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a9e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012aa2:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012aa4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012aa8:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ab0:	2b05      	cmp	r3, #5
 8012ab2:	dd05      	ble.n	8012ac0 <create_DijkstraMap+0xb34>
 8012ab4:	2305      	movs	r3, #5
 8012ab6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012aba:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012abe:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8012ac0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ac4:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012ac8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012acc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012ad0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012ad4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012ad8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012adc:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012ae0:	8013      	strh	r3, [r2, #0]
 8012ae2:	e013      	b.n	8012b0c <create_DijkstraMap+0xb80>
 8012ae4:	20001010 	.word	0x20001010
 8012ae8:	200013f4 	.word	0x200013f4
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012aec:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012af0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012af4:	881b      	ldrh	r3, [r3, #0]
 8012af6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012afa:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012afe:	8013      	strh	r3, [r2, #0]
 8012b00:	2300      	movs	r3, #0
 8012b02:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012b06:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012b0a:	8013      	strh	r3, [r2, #0]
				if((wall.column[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.column_count[Ycoordinate][Xcoordinate-1]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012b0c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b10:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012b14:	881b      	ldrh	r3, [r3, #0]
 8012b16:	3b01      	subs	r3, #1
 8012b18:	4a6a      	ldr	r2, [pc, #424]	; (8012cc4 <create_DijkstraMap+0xd38>)
 8012b1a:	330e      	adds	r3, #14
 8012b1c:	009b      	lsls	r3, r3, #2
 8012b1e:	4413      	add	r3, r2
 8012b20:	685b      	ldr	r3, [r3, #4]
 8012b22:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012b26:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012b2a:	8812      	ldrh	r2, [r2, #0]
 8012b2c:	2101      	movs	r1, #1
 8012b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8012b32:	4013      	ands	r3, r2
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	f040 8092 	bne.w	8012c5e <create_DijkstraMap+0xcd2>
 8012b3a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b3e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b42:	881a      	ldrh	r2, [r3, #0]
 8012b44:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b48:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012b4c:	881b      	ldrh	r3, [r3, #0]
 8012b4e:	1e59      	subs	r1, r3, #1
 8012b50:	485d      	ldr	r0, [pc, #372]	; (8012cc8 <create_DijkstraMap+0xd3c>)
 8012b52:	4613      	mov	r3, r2
 8012b54:	011b      	lsls	r3, r3, #4
 8012b56:	1a9b      	subs	r3, r3, r2
 8012b58:	440b      	add	r3, r1
 8012b5a:	33f0      	adds	r3, #240	; 0xf0
 8012b5c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012b60:	461c      	mov	r4, r3
 8012b62:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b66:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012b6a:	881a      	ldrh	r2, [r3, #0]
 8012b6c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b70:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b74:	8819      	ldrh	r1, [r3, #0]
 8012b76:	4854      	ldr	r0, [pc, #336]	; (8012cc8 <create_DijkstraMap+0xd3c>)
 8012b78:	4613      	mov	r3, r2
 8012b7a:	011b      	lsls	r3, r3, #4
 8012b7c:	1a9b      	subs	r3, r3, r2
 8012b7e:	440b      	add	r3, r1
 8012b80:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012b84:	461a      	mov	r2, r3
 8012b86:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b8a:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012b92:	4413      	add	r3, r2
 8012b94:	429c      	cmp	r4, r3
 8012b96:	dd62      	ble.n	8012c5e <create_DijkstraMap+0xcd2>
					Dijkstra.column_count[Ycoordinate][Xcoordinate-1]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8012b98:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b9c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012ba0:	881a      	ldrh	r2, [r3, #0]
 8012ba2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ba6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012baa:	8819      	ldrh	r1, [r3, #0]
 8012bac:	4846      	ldr	r0, [pc, #280]	; (8012cc8 <create_DijkstraMap+0xd3c>)
 8012bae:	4613      	mov	r3, r2
 8012bb0:	011b      	lsls	r3, r3, #4
 8012bb2:	1a9b      	subs	r3, r3, r2
 8012bb4:	440b      	add	r3, r1
 8012bb6:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012bba:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012bbe:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012bc2:	881b      	ldrh	r3, [r3, #0]
 8012bc4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012bc8:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012bcc:	8812      	ldrh	r2, [r2, #0]
 8012bce:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012bd2:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012bd6:	8809      	ldrh	r1, [r1, #0]
 8012bd8:	3901      	subs	r1, #1
 8012bda:	4403      	add	r3, r0
 8012bdc:	b29c      	uxth	r4, r3
 8012bde:	483a      	ldr	r0, [pc, #232]	; (8012cc8 <create_DijkstraMap+0xd3c>)
 8012be0:	4613      	mov	r3, r2
 8012be2:	011b      	lsls	r3, r3, #4
 8012be4:	1a9b      	subs	r3, r3, r2
 8012be6:	440b      	add	r3, r1
 8012be8:	33f0      	adds	r3, #240	; 0xf0
 8012bea:	4622      	mov	r2, r4
 8012bec:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 8012bf0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012bf4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012bf8:	881b      	ldrh	r3, [r3, #0]
 8012bfa:	3b01      	subs	r3, #1
 8012bfc:	b29a      	uxth	r2, r3
 8012bfe:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012c02:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012c06:	4611      	mov	r1, r2
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f002 fca9 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8012c0e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c12:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012c16:	881a      	ldrh	r2, [r3, #0]
 8012c18:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012c1c:	f103 0320 	add.w	r3, r3, #32
 8012c20:	3b0c      	subs	r3, #12
 8012c22:	4611      	mov	r1, r2
 8012c24:	4618      	mov	r0, r3
 8012c26:	f002 fc9b 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8012c2a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012c2e:	3b14      	subs	r3, #20
 8012c30:	2101      	movs	r1, #1
 8012c32:	4618      	mov	r0, r3
 8012c34:	f002 fc94 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8012c38:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012c3c:	3b3c      	subs	r3, #60	; 0x3c
 8012c3e:	2105      	movs	r1, #5
 8012c40:	4618      	mov	r0, r3
 8012c42:	f002 fc8d 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012c46:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c4a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012c4e:	881a      	ldrh	r2, [r3, #0]
 8012c50:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012c54:	3b64      	subs	r3, #100	; 0x64
 8012c56:	4611      	mov	r1, r2
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f002 fc81 	bl	8015560 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_WEST){
 8012c5e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c62:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012c66:	881b      	ldrh	r3, [r3, #0]
 8012c68:	2b07      	cmp	r3, #7
 8012c6a:	d12f      	bne.n	8012ccc <create_DijkstraMap+0xd40>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012c6c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c70:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012c74:	881b      	ldrh	r3, [r3, #0]
 8012c76:	3301      	adds	r3, #1
 8012c78:	b29b      	uxth	r3, r3
 8012c7a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012c7e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012c82:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012c84:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c88:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c90:	2b05      	cmp	r3, #5
 8012c92:	dd05      	ble.n	8012ca0 <create_DijkstraMap+0xd14>
 8012c94:	2305      	movs	r3, #5
 8012c96:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012c9a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012c9e:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8012ca0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ca4:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012ca8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012cac:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012cb0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012cb4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012cb8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012cbc:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012cc0:	8013      	strh	r3, [r2, #0]
 8012cc2:	e013      	b.n	8012cec <create_DijkstraMap+0xd60>
 8012cc4:	20001010 	.word	0x20001010
 8012cc8:	200013f4 	.word	0x200013f4
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012ccc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012cd0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012cd4:	881b      	ldrh	r3, [r3, #0]
 8012cd6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012cda:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012cde:	8013      	strh	r3, [r2, #0]
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ce6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012cea:	8013      	strh	r3, [r2, #0]
				if((wall.column[Xcoordinate-1] & (1 << (Ycoordinate+1)))==0 && Dijkstra.column_count[Ycoordinate+1][Xcoordinate-1]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012cec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cf0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012cf4:	881b      	ldrh	r3, [r3, #0]
 8012cf6:	3b01      	subs	r3, #1
 8012cf8:	4a75      	ldr	r2, [pc, #468]	; (8012ed0 <create_DijkstraMap+0xf44>)
 8012cfa:	330e      	adds	r3, #14
 8012cfc:	009b      	lsls	r3, r3, #2
 8012cfe:	4413      	add	r3, r2
 8012d00:	685b      	ldr	r3, [r3, #4]
 8012d02:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012d06:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012d0a:	8812      	ldrh	r2, [r2, #0]
 8012d0c:	3201      	adds	r2, #1
 8012d0e:	2101      	movs	r1, #1
 8012d10:	fa01 f202 	lsl.w	r2, r1, r2
 8012d14:	4013      	ands	r3, r2
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	f040 8096 	bne.w	8012e48 <create_DijkstraMap+0xebc>
 8012d1c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d20:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012d24:	881b      	ldrh	r3, [r3, #0]
 8012d26:	1c5a      	adds	r2, r3, #1
 8012d28:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d2c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012d30:	881b      	ldrh	r3, [r3, #0]
 8012d32:	1e59      	subs	r1, r3, #1
 8012d34:	4867      	ldr	r0, [pc, #412]	; (8012ed4 <create_DijkstraMap+0xf48>)
 8012d36:	4613      	mov	r3, r2
 8012d38:	011b      	lsls	r3, r3, #4
 8012d3a:	1a9b      	subs	r3, r3, r2
 8012d3c:	440b      	add	r3, r1
 8012d3e:	33f0      	adds	r3, #240	; 0xf0
 8012d40:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012d44:	461c      	mov	r4, r3
 8012d46:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d4a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012d4e:	881a      	ldrh	r2, [r3, #0]
 8012d50:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d54:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012d58:	8819      	ldrh	r1, [r3, #0]
 8012d5a:	485e      	ldr	r0, [pc, #376]	; (8012ed4 <create_DijkstraMap+0xf48>)
 8012d5c:	4613      	mov	r3, r2
 8012d5e:	011b      	lsls	r3, r3, #4
 8012d60:	1a9b      	subs	r3, r3, r2
 8012d62:	440b      	add	r3, r1
 8012d64:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012d68:	461a      	mov	r2, r3
 8012d6a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d6e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012d76:	4413      	add	r3, r2
 8012d78:	429c      	cmp	r4, r3
 8012d7a:	dd65      	ble.n	8012e48 <create_DijkstraMap+0xebc>
					Dijkstra.column_count[Ycoordinate+1][Xcoordinate-1]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8012d7c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d80:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012d84:	881a      	ldrh	r2, [r3, #0]
 8012d86:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d8a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012d8e:	8819      	ldrh	r1, [r3, #0]
 8012d90:	4850      	ldr	r0, [pc, #320]	; (8012ed4 <create_DijkstraMap+0xf48>)
 8012d92:	4613      	mov	r3, r2
 8012d94:	011b      	lsls	r3, r3, #4
 8012d96:	1a9b      	subs	r3, r3, r2
 8012d98:	440b      	add	r3, r1
 8012d9a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012d9e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012da2:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012da6:	881b      	ldrh	r3, [r3, #0]
 8012da8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012dac:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012db0:	8812      	ldrh	r2, [r2, #0]
 8012db2:	3201      	adds	r2, #1
 8012db4:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012db8:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012dbc:	8809      	ldrh	r1, [r1, #0]
 8012dbe:	3901      	subs	r1, #1
 8012dc0:	4403      	add	r3, r0
 8012dc2:	b29c      	uxth	r4, r3
 8012dc4:	4843      	ldr	r0, [pc, #268]	; (8012ed4 <create_DijkstraMap+0xf48>)
 8012dc6:	4613      	mov	r3, r2
 8012dc8:	011b      	lsls	r3, r3, #4
 8012dca:	1a9b      	subs	r3, r3, r2
 8012dcc:	440b      	add	r3, r1
 8012dce:	33f0      	adds	r3, #240	; 0xf0
 8012dd0:	4622      	mov	r2, r4
 8012dd2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 8012dd6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012dda:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012dde:	881b      	ldrh	r3, [r3, #0]
 8012de0:	3b01      	subs	r3, #1
 8012de2:	b29a      	uxth	r2, r3
 8012de4:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012de8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012dec:	4611      	mov	r1, r2
 8012dee:	4618      	mov	r0, r3
 8012df0:	f002 fbb6 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 8012df4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012df8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012dfc:	881b      	ldrh	r3, [r3, #0]
 8012dfe:	3301      	adds	r3, #1
 8012e00:	b29a      	uxth	r2, r3
 8012e02:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012e06:	f103 0320 	add.w	r3, r3, #32
 8012e0a:	3b0c      	subs	r3, #12
 8012e0c:	4611      	mov	r1, r2
 8012e0e:	4618      	mov	r0, r3
 8012e10:	f002 fba6 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8012e14:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012e18:	3b14      	subs	r3, #20
 8012e1a:	2101      	movs	r1, #1
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f002 fb9f 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 8012e22:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012e26:	3b3c      	subs	r3, #60	; 0x3c
 8012e28:	2107      	movs	r1, #7
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f002 fb98 	bl	8015560 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012e30:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e34:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012e38:	881a      	ldrh	r2, [r3, #0]
 8012e3a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012e3e:	3b64      	subs	r3, #100	; 0x64
 8012e40:	4611      	mov	r1, r2
 8012e42:	4618      	mov	r0, r3
 8012e44:	f002 fb8c 	bl	8015560 <pushStack_walk>
				}
			}

		}
		if(Row_or_Column==COLUMN){
 8012e48:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e4c:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8012e50:	881b      	ldrh	r3, [r3, #0]
 8012e52:	2b01      	cmp	r3, #1
 8012e54:	f040 85ba 	bne.w	80139cc <create_DijkstraMap+0x1a40>
					if(Xcoordinate <= 13){
 8012e58:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e5c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012e60:	881b      	ldrh	r3, [r3, #0]
 8012e62:	2b0d      	cmp	r3, #13
 8012e64:	f200 80f3 	bhi.w	801304e <create_DijkstraMap+0x10c2>
						if(Direction==SLANT_EAST){
 8012e68:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e6c:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012e70:	881b      	ldrh	r3, [r3, #0]
 8012e72:	2b02      	cmp	r3, #2
 8012e74:	d130      	bne.n	8012ed8 <create_DijkstraMap+0xf4c>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8012e76:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e7a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012e7e:	881b      	ldrh	r3, [r3, #0]
 8012e80:	3301      	adds	r3, #1
 8012e82:	b29b      	uxth	r3, r3
 8012e84:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012e88:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012e8c:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8012e8e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e92:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e9a:	2b04      	cmp	r3, #4
 8012e9c:	dd05      	ble.n	8012eaa <create_DijkstraMap+0xf1e>
 8012e9e:	2304      	movs	r3, #4
 8012ea0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ea4:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012ea8:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 8012eaa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012eae:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012eb2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012eb6:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012eba:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012ebe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012ec2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ec6:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012eca:	8013      	strh	r3, [r2, #0]
 8012ecc:	e014      	b.n	8012ef8 <create_DijkstraMap+0xf6c>
 8012ece:	bf00      	nop
 8012ed0:	20001010 	.word	0x20001010
 8012ed4:	200013f4 	.word	0x200013f4
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8012ed8:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012edc:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012ee0:	881b      	ldrh	r3, [r3, #0]
 8012ee2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ee6:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012eea:	8013      	strh	r3, [r2, #0]
 8012eec:	2300      	movs	r3, #0
 8012eee:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ef2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012ef6:	8013      	strh	r3, [r2, #0]
						if((wall.column[Xcoordinate+1] & (1 << Ycoordinate))==0 && Dijkstra.column_count[Ycoordinate][Xcoordinate+1]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+VerticalCost){
 8012ef8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012efc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012f00:	881b      	ldrh	r3, [r3, #0]
 8012f02:	3301      	adds	r3, #1
 8012f04:	4a6f      	ldr	r2, [pc, #444]	; (80130c4 <create_DijkstraMap+0x1138>)
 8012f06:	330e      	adds	r3, #14
 8012f08:	009b      	lsls	r3, r3, #2
 8012f0a:	4413      	add	r3, r2
 8012f0c:	685b      	ldr	r3, [r3, #4]
 8012f0e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012f12:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012f16:	8812      	ldrh	r2, [r2, #0]
 8012f18:	2101      	movs	r1, #1
 8012f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8012f1e:	4013      	ands	r3, r2
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	f040 8094 	bne.w	801304e <create_DijkstraMap+0x10c2>
 8012f26:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f2a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012f2e:	881a      	ldrh	r2, [r3, #0]
 8012f30:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f34:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012f38:	881b      	ldrh	r3, [r3, #0]
 8012f3a:	1c59      	adds	r1, r3, #1
 8012f3c:	4862      	ldr	r0, [pc, #392]	; (80130c8 <create_DijkstraMap+0x113c>)
 8012f3e:	4613      	mov	r3, r2
 8012f40:	011b      	lsls	r3, r3, #4
 8012f42:	1a9b      	subs	r3, r3, r2
 8012f44:	440b      	add	r3, r1
 8012f46:	33f0      	adds	r3, #240	; 0xf0
 8012f48:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012f4c:	461c      	mov	r4, r3
 8012f4e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f52:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012f56:	881a      	ldrh	r2, [r3, #0]
 8012f58:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f5c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012f60:	8819      	ldrh	r1, [r3, #0]
 8012f62:	4859      	ldr	r0, [pc, #356]	; (80130c8 <create_DijkstraMap+0x113c>)
 8012f64:	4613      	mov	r3, r2
 8012f66:	011b      	lsls	r3, r3, #4
 8012f68:	1a9b      	subs	r3, r3, r2
 8012f6a:	440b      	add	r3, r1
 8012f6c:	33f0      	adds	r3, #240	; 0xf0
 8012f6e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012f72:	461a      	mov	r2, r3
 8012f74:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f78:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8012f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f80:	4413      	add	r3, r2
 8012f82:	429c      	cmp	r4, r3
 8012f84:	dd63      	ble.n	801304e <create_DijkstraMap+0x10c2>
							Dijkstra.column_count[Ycoordinate][Xcoordinate+1]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+VerticalCost;
 8012f86:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f8a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012f8e:	881a      	ldrh	r2, [r3, #0]
 8012f90:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f94:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012f98:	8819      	ldrh	r1, [r3, #0]
 8012f9a:	484b      	ldr	r0, [pc, #300]	; (80130c8 <create_DijkstraMap+0x113c>)
 8012f9c:	4613      	mov	r3, r2
 8012f9e:	011b      	lsls	r3, r3, #4
 8012fa0:	1a9b      	subs	r3, r3, r2
 8012fa2:	440b      	add	r3, r1
 8012fa4:	33f0      	adds	r3, #240	; 0xf0
 8012fa6:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012faa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012fae:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8012fb2:	881b      	ldrh	r3, [r3, #0]
 8012fb4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012fb8:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012fbc:	8812      	ldrh	r2, [r2, #0]
 8012fbe:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012fc2:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012fc6:	8809      	ldrh	r1, [r1, #0]
 8012fc8:	3101      	adds	r1, #1
 8012fca:	4403      	add	r3, r0
 8012fcc:	b29c      	uxth	r4, r3
 8012fce:	483e      	ldr	r0, [pc, #248]	; (80130c8 <create_DijkstraMap+0x113c>)
 8012fd0:	4613      	mov	r3, r2
 8012fd2:	011b      	lsls	r3, r3, #4
 8012fd4:	1a9b      	subs	r3, r3, r2
 8012fd6:	440b      	add	r3, r1
 8012fd8:	33f0      	adds	r3, #240	; 0xf0
 8012fda:	4622      	mov	r2, r4
 8012fdc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 8012fe0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012fe4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012fe8:	881b      	ldrh	r3, [r3, #0]
 8012fea:	3301      	adds	r3, #1
 8012fec:	b29a      	uxth	r2, r3
 8012fee:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012ff2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012ff6:	4611      	mov	r1, r2
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f002 fab1 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012ffe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013002:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013006:	881a      	ldrh	r2, [r3, #0]
 8013008:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801300c:	f103 0320 	add.w	r3, r3, #32
 8013010:	3b0c      	subs	r3, #12
 8013012:	4611      	mov	r1, r2
 8013014:	4618      	mov	r0, r3
 8013016:	f002 faa3 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 801301a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801301e:	3b14      	subs	r3, #20
 8013020:	2101      	movs	r1, #1
 8013022:	4618      	mov	r0, r3
 8013024:	f002 fa9c 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_EAST);
 8013028:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801302c:	3b3c      	subs	r3, #60	; 0x3c
 801302e:	2102      	movs	r1, #2
 8013030:	4618      	mov	r0, r3
 8013032:	f002 fa95 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8013036:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801303a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801303e:	881a      	ldrh	r2, [r3, #0]
 8013040:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013044:	3b64      	subs	r3, #100	; 0x64
 8013046:	4611      	mov	r1, r2
 8013048:	4618      	mov	r0, r3
 801304a:	f002 fa89 	bl	8015560 <pushStack_walk>
						}
					}
					if (Xcoordinate >= 1) {
 801304e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013052:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013056:	881b      	ldrh	r3, [r3, #0]
 8013058:	2b00      	cmp	r3, #0
 801305a:	f000 80f2 	beq.w	8013242 <create_DijkstraMap+0x12b6>
						if(Direction==SLANT_WEST){
 801305e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013062:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8013066:	881b      	ldrh	r3, [r3, #0]
 8013068:	2b06      	cmp	r3, #6
 801306a:	d12f      	bne.n	80130cc <create_DijkstraMap+0x1140>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 801306c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013070:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8013074:	881b      	ldrh	r3, [r3, #0]
 8013076:	3301      	adds	r3, #1
 8013078:	b29b      	uxth	r3, r3
 801307a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801307e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013082:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8013084:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013088:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801308c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013090:	2b04      	cmp	r3, #4
 8013092:	dd05      	ble.n	80130a0 <create_DijkstraMap+0x1114>
 8013094:	2304      	movs	r3, #4
 8013096:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801309a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801309e:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 80130a0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80130a4:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80130a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80130ac:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80130b0:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80130b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80130b8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80130bc:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80130c0:	8013      	strh	r3, [r2, #0]
 80130c2:	e013      	b.n	80130ec <create_DijkstraMap+0x1160>
 80130c4:	20001010 	.word	0x20001010
 80130c8:	200013f4 	.word	0x200013f4
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 80130cc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80130d0:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80130d4:	881b      	ldrh	r3, [r3, #0]
 80130d6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80130da:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80130de:	8013      	strh	r3, [r2, #0]
 80130e0:	2300      	movs	r3, #0
 80130e2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80130e6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80130ea:	8013      	strh	r3, [r2, #0]
						if((wall.column[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.column_count[Ycoordinate][Xcoordinate-1]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+VerticalCost){
 80130ec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80130f0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80130f4:	881b      	ldrh	r3, [r3, #0]
 80130f6:	3b01      	subs	r3, #1
 80130f8:	4a6f      	ldr	r2, [pc, #444]	; (80132b8 <create_DijkstraMap+0x132c>)
 80130fa:	330e      	adds	r3, #14
 80130fc:	009b      	lsls	r3, r3, #2
 80130fe:	4413      	add	r3, r2
 8013100:	685b      	ldr	r3, [r3, #4]
 8013102:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013106:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 801310a:	8812      	ldrh	r2, [r2, #0]
 801310c:	2101      	movs	r1, #1
 801310e:	fa01 f202 	lsl.w	r2, r1, r2
 8013112:	4013      	ands	r3, r2
 8013114:	2b00      	cmp	r3, #0
 8013116:	f040 8094 	bne.w	8013242 <create_DijkstraMap+0x12b6>
 801311a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801311e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013122:	881a      	ldrh	r2, [r3, #0]
 8013124:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013128:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801312c:	881b      	ldrh	r3, [r3, #0]
 801312e:	1e59      	subs	r1, r3, #1
 8013130:	4862      	ldr	r0, [pc, #392]	; (80132bc <create_DijkstraMap+0x1330>)
 8013132:	4613      	mov	r3, r2
 8013134:	011b      	lsls	r3, r3, #4
 8013136:	1a9b      	subs	r3, r3, r2
 8013138:	440b      	add	r3, r1
 801313a:	33f0      	adds	r3, #240	; 0xf0
 801313c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013140:	461c      	mov	r4, r3
 8013142:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013146:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801314a:	881a      	ldrh	r2, [r3, #0]
 801314c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013150:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013154:	8819      	ldrh	r1, [r3, #0]
 8013156:	4859      	ldr	r0, [pc, #356]	; (80132bc <create_DijkstraMap+0x1330>)
 8013158:	4613      	mov	r3, r2
 801315a:	011b      	lsls	r3, r3, #4
 801315c:	1a9b      	subs	r3, r3, r2
 801315e:	440b      	add	r3, r1
 8013160:	33f0      	adds	r3, #240	; 0xf0
 8013162:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013166:	461a      	mov	r2, r3
 8013168:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801316c:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8013170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013174:	4413      	add	r3, r2
 8013176:	429c      	cmp	r4, r3
 8013178:	dd63      	ble.n	8013242 <create_DijkstraMap+0x12b6>
							Dijkstra.column_count[Ycoordinate][Xcoordinate-1]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+VerticalCost;
 801317a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801317e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013182:	881a      	ldrh	r2, [r3, #0]
 8013184:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013188:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801318c:	8819      	ldrh	r1, [r3, #0]
 801318e:	484b      	ldr	r0, [pc, #300]	; (80132bc <create_DijkstraMap+0x1330>)
 8013190:	4613      	mov	r3, r2
 8013192:	011b      	lsls	r3, r3, #4
 8013194:	1a9b      	subs	r3, r3, r2
 8013196:	440b      	add	r3, r1
 8013198:	33f0      	adds	r3, #240	; 0xf0
 801319a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801319e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80131a2:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80131a6:	881b      	ldrh	r3, [r3, #0]
 80131a8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80131ac:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80131b0:	8812      	ldrh	r2, [r2, #0]
 80131b2:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80131b6:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 80131ba:	8809      	ldrh	r1, [r1, #0]
 80131bc:	3901      	subs	r1, #1
 80131be:	4403      	add	r3, r0
 80131c0:	b29c      	uxth	r4, r3
 80131c2:	483e      	ldr	r0, [pc, #248]	; (80132bc <create_DijkstraMap+0x1330>)
 80131c4:	4613      	mov	r3, r2
 80131c6:	011b      	lsls	r3, r3, #4
 80131c8:	1a9b      	subs	r3, r3, r2
 80131ca:	440b      	add	r3, r1
 80131cc:	33f0      	adds	r3, #240	; 0xf0
 80131ce:	4622      	mov	r2, r4
 80131d0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate - 1);
 80131d4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80131d8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80131dc:	881b      	ldrh	r3, [r3, #0]
 80131de:	3b01      	subs	r3, #1
 80131e0:	b29a      	uxth	r2, r3
 80131e2:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80131e6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80131ea:	4611      	mov	r1, r2
 80131ec:	4618      	mov	r0, r3
 80131ee:	f002 f9b7 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 80131f2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80131f6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80131fa:	881a      	ldrh	r2, [r3, #0]
 80131fc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013200:	f103 0320 	add.w	r3, r3, #32
 8013204:	3b0c      	subs	r3, #12
 8013206:	4611      	mov	r1, r2
 8013208:	4618      	mov	r0, r3
 801320a:	f002 f9a9 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 801320e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8013212:	3b14      	subs	r3, #20
 8013214:	2101      	movs	r1, #1
 8013216:	4618      	mov	r0, r3
 8013218:	f002 f9a2 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_WEST);
 801321c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8013220:	3b3c      	subs	r3, #60	; 0x3c
 8013222:	2106      	movs	r1, #6
 8013224:	4618      	mov	r0, r3
 8013226:	f002 f99b 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 801322a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801322e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013232:	881a      	ldrh	r2, [r3, #0]
 8013234:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013238:	3b64      	subs	r3, #100	; 0x64
 801323a:	4611      	mov	r1, r2
 801323c:	4618      	mov	r0, r3
 801323e:	f002 f98f 	bl	8015560 <pushStack_walk>
						}
					}
					if (Ycoordinate <= 14) {
 8013242:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013246:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801324a:	881b      	ldrh	r3, [r3, #0]
 801324c:	2b0e      	cmp	r3, #14
 801324e:	f200 81d8 	bhi.w	8013602 <create_DijkstraMap+0x1676>
						if(Direction==SLANT_NORTH_WEST){
 8013252:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013256:	f103 0366 	add.w	r3, r3, #102	; 0x66
 801325a:	881b      	ldrh	r3, [r3, #0]
 801325c:	2b07      	cmp	r3, #7
 801325e:	d12f      	bne.n	80132c0 <create_DijkstraMap+0x1334>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8013260:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013264:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8013268:	881b      	ldrh	r3, [r3, #0]
 801326a:	3301      	adds	r3, #1
 801326c:	b29b      	uxth	r3, r3
 801326e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013272:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013276:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8013278:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801327c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013284:	2b05      	cmp	r3, #5
 8013286:	dd05      	ble.n	8013294 <create_DijkstraMap+0x1308>
 8013288:	2305      	movs	r3, #5
 801328a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801328e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013292:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8013294:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013298:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801329c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80132a0:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80132a4:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80132a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80132ac:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80132b0:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80132b4:	8013      	strh	r3, [r2, #0]
 80132b6:	e013      	b.n	80132e0 <create_DijkstraMap+0x1354>
 80132b8:	20001010 	.word	0x20001010
 80132bc:	200013f4 	.word	0x200013f4
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80132c0:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80132c4:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80132c8:	881b      	ldrh	r3, [r3, #0]
 80132ca:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80132ce:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80132d2:	8013      	strh	r3, [r2, #0]
 80132d4:	2300      	movs	r3, #0
 80132d6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80132da:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80132de:	8013      	strh	r3, [r2, #0]
						if((wall.row[Ycoordinate] & (1 << Xcoordinate))==0 && Dijkstra.row_count[Xcoordinate][Ycoordinate]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 80132e0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80132e4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80132e8:	881b      	ldrh	r3, [r3, #0]
 80132ea:	4a68      	ldr	r2, [pc, #416]	; (801348c <create_DijkstraMap+0x1500>)
 80132ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80132f0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80132f4:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80132f8:	8812      	ldrh	r2, [r2, #0]
 80132fa:	2101      	movs	r1, #1
 80132fc:	fa01 f202 	lsl.w	r2, r1, r2
 8013300:	4013      	ands	r3, r2
 8013302:	2b00      	cmp	r3, #0
 8013304:	f040 808e 	bne.w	8013424 <create_DijkstraMap+0x1498>
 8013308:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801330c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013310:	881a      	ldrh	r2, [r3, #0]
 8013312:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013316:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801331a:	8819      	ldrh	r1, [r3, #0]
 801331c:	485c      	ldr	r0, [pc, #368]	; (8013490 <create_DijkstraMap+0x1504>)
 801331e:	4613      	mov	r3, r2
 8013320:	011b      	lsls	r3, r3, #4
 8013322:	1a9b      	subs	r3, r3, r2
 8013324:	440b      	add	r3, r1
 8013326:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801332a:	461c      	mov	r4, r3
 801332c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013330:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013334:	881a      	ldrh	r2, [r3, #0]
 8013336:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801333a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801333e:	8819      	ldrh	r1, [r3, #0]
 8013340:	4853      	ldr	r0, [pc, #332]	; (8013490 <create_DijkstraMap+0x1504>)
 8013342:	4613      	mov	r3, r2
 8013344:	011b      	lsls	r3, r3, #4
 8013346:	1a9b      	subs	r3, r3, r2
 8013348:	440b      	add	r3, r1
 801334a:	33f0      	adds	r3, #240	; 0xf0
 801334c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013350:	461a      	mov	r2, r3
 8013352:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013356:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801335a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801335e:	4413      	add	r3, r2
 8013360:	429c      	cmp	r4, r3
 8013362:	dd5f      	ble.n	8013424 <create_DijkstraMap+0x1498>
							Dijkstra.row_count[Xcoordinate][Ycoordinate]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8013364:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013368:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801336c:	881a      	ldrh	r2, [r3, #0]
 801336e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013372:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013376:	8819      	ldrh	r1, [r3, #0]
 8013378:	4845      	ldr	r0, [pc, #276]	; (8013490 <create_DijkstraMap+0x1504>)
 801337a:	4613      	mov	r3, r2
 801337c:	011b      	lsls	r3, r3, #4
 801337e:	1a9b      	subs	r3, r3, r2
 8013380:	440b      	add	r3, r1
 8013382:	33f0      	adds	r3, #240	; 0xf0
 8013384:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8013388:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801338c:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013390:	881b      	ldrh	r3, [r3, #0]
 8013392:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013396:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801339a:	8812      	ldrh	r2, [r2, #0]
 801339c:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80133a0:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 80133a4:	8809      	ldrh	r1, [r1, #0]
 80133a6:	4403      	add	r3, r0
 80133a8:	b29c      	uxth	r4, r3
 80133aa:	4839      	ldr	r0, [pc, #228]	; (8013490 <create_DijkstraMap+0x1504>)
 80133ac:	4613      	mov	r3, r2
 80133ae:	011b      	lsls	r3, r3, #4
 80133b0:	1a9b      	subs	r3, r3, r2
 80133b2:	440b      	add	r3, r1
 80133b4:	4622      	mov	r2, r4
 80133b6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 80133ba:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80133be:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80133c2:	881a      	ldrh	r2, [r3, #0]
 80133c4:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80133c8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80133cc:	4611      	mov	r1, r2
 80133ce:	4618      	mov	r0, r3
 80133d0:	f002 f8c6 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 80133d4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80133d8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80133dc:	881a      	ldrh	r2, [r3, #0]
 80133de:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80133e2:	f103 0320 	add.w	r3, r3, #32
 80133e6:	3b0c      	subs	r3, #12
 80133e8:	4611      	mov	r1, r2
 80133ea:	4618      	mov	r0, r3
 80133ec:	f002 f8b8 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 80133f0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80133f4:	3b14      	subs	r3, #20
 80133f6:	2100      	movs	r1, #0
 80133f8:	4618      	mov	r0, r3
 80133fa:	f002 f8b1 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 80133fe:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8013402:	3b3c      	subs	r3, #60	; 0x3c
 8013404:	2107      	movs	r1, #7
 8013406:	4618      	mov	r0, r3
 8013408:	f002 f8aa 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 801340c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013410:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013414:	881a      	ldrh	r2, [r3, #0]
 8013416:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801341a:	3b64      	subs	r3, #100	; 0x64
 801341c:	4611      	mov	r1, r2
 801341e:	4618      	mov	r0, r3
 8013420:	f002 f89e 	bl	8015560 <pushStack_walk>
						}
						if(Direction==SLANT_NORTH_EAST){
 8013424:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013428:	f103 0366 	add.w	r3, r3, #102	; 0x66
 801342c:	881b      	ldrh	r3, [r3, #0]
 801342e:	2b01      	cmp	r3, #1
 8013430:	d130      	bne.n	8013494 <create_DijkstraMap+0x1508>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8013432:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013436:	f103 0364 	add.w	r3, r3, #100	; 0x64
 801343a:	881b      	ldrh	r3, [r3, #0]
 801343c:	3301      	adds	r3, #1
 801343e:	b29b      	uxth	r3, r3
 8013440:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013444:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013448:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 801344a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801344e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013456:	2b05      	cmp	r3, #5
 8013458:	dd05      	ble.n	8013466 <create_DijkstraMap+0x14da>
 801345a:	2305      	movs	r3, #5
 801345c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013460:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013464:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8013466:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801346a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801346e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013472:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013476:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801347a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801347e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013482:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8013486:	8013      	strh	r3, [r2, #0]
 8013488:	e014      	b.n	80134b4 <create_DijkstraMap+0x1528>
 801348a:	bf00      	nop
 801348c:	20001010 	.word	0x20001010
 8013490:	200013f4 	.word	0x200013f4
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8013494:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013498:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801349c:	881b      	ldrh	r3, [r3, #0]
 801349e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80134a2:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80134a6:	8013      	strh	r3, [r2, #0]
 80134a8:	2300      	movs	r3, #0
 80134aa:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80134ae:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80134b2:	8013      	strh	r3, [r2, #0]
						if((wall.row[Ycoordinate] & (1 << (Xcoordinate+1)))==0 && Dijkstra.row_count[Xcoordinate+1][Ycoordinate]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 80134b4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80134b8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80134bc:	881b      	ldrh	r3, [r3, #0]
 80134be:	4a6e      	ldr	r2, [pc, #440]	; (8013678 <create_DijkstraMap+0x16ec>)
 80134c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80134c4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80134c8:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80134cc:	8812      	ldrh	r2, [r2, #0]
 80134ce:	3201      	adds	r2, #1
 80134d0:	2101      	movs	r1, #1
 80134d2:	fa01 f202 	lsl.w	r2, r1, r2
 80134d6:	4013      	ands	r3, r2
 80134d8:	2b00      	cmp	r3, #0
 80134da:	f040 8092 	bne.w	8013602 <create_DijkstraMap+0x1676>
 80134de:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80134e2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80134e6:	881b      	ldrh	r3, [r3, #0]
 80134e8:	1c5a      	adds	r2, r3, #1
 80134ea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80134ee:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80134f2:	8819      	ldrh	r1, [r3, #0]
 80134f4:	4861      	ldr	r0, [pc, #388]	; (801367c <create_DijkstraMap+0x16f0>)
 80134f6:	4613      	mov	r3, r2
 80134f8:	011b      	lsls	r3, r3, #4
 80134fa:	1a9b      	subs	r3, r3, r2
 80134fc:	440b      	add	r3, r1
 80134fe:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013502:	461c      	mov	r4, r3
 8013504:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013508:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801350c:	881a      	ldrh	r2, [r3, #0]
 801350e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013512:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013516:	8819      	ldrh	r1, [r3, #0]
 8013518:	4858      	ldr	r0, [pc, #352]	; (801367c <create_DijkstraMap+0x16f0>)
 801351a:	4613      	mov	r3, r2
 801351c:	011b      	lsls	r3, r3, #4
 801351e:	1a9b      	subs	r3, r3, r2
 8013520:	440b      	add	r3, r1
 8013522:	33f0      	adds	r3, #240	; 0xf0
 8013524:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013528:	461a      	mov	r2, r3
 801352a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801352e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013536:	4413      	add	r3, r2
 8013538:	429c      	cmp	r4, r3
 801353a:	dd62      	ble.n	8013602 <create_DijkstraMap+0x1676>
							Dijkstra.row_count[Xcoordinate+1][Ycoordinate]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 801353c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013540:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013544:	881a      	ldrh	r2, [r3, #0]
 8013546:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801354a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801354e:	8819      	ldrh	r1, [r3, #0]
 8013550:	484a      	ldr	r0, [pc, #296]	; (801367c <create_DijkstraMap+0x16f0>)
 8013552:	4613      	mov	r3, r2
 8013554:	011b      	lsls	r3, r3, #4
 8013556:	1a9b      	subs	r3, r3, r2
 8013558:	440b      	add	r3, r1
 801355a:	33f0      	adds	r3, #240	; 0xf0
 801355c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8013560:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013564:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013568:	881b      	ldrh	r3, [r3, #0]
 801356a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801356e:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8013572:	8812      	ldrh	r2, [r2, #0]
 8013574:	3201      	adds	r2, #1
 8013576:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801357a:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 801357e:	8809      	ldrh	r1, [r1, #0]
 8013580:	4403      	add	r3, r0
 8013582:	b29c      	uxth	r4, r3
 8013584:	483d      	ldr	r0, [pc, #244]	; (801367c <create_DijkstraMap+0x16f0>)
 8013586:	4613      	mov	r3, r2
 8013588:	011b      	lsls	r3, r3, #4
 801358a:	1a9b      	subs	r3, r3, r2
 801358c:	440b      	add	r3, r1
 801358e:	4622      	mov	r2, r4
 8013590:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 8013594:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013598:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801359c:	881b      	ldrh	r3, [r3, #0]
 801359e:	3301      	adds	r3, #1
 80135a0:	b29a      	uxth	r2, r3
 80135a2:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80135a6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80135aa:	4611      	mov	r1, r2
 80135ac:	4618      	mov	r0, r3
 80135ae:	f001 ffd7 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 80135b2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80135b6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80135ba:	881a      	ldrh	r2, [r3, #0]
 80135bc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80135c0:	f103 0320 	add.w	r3, r3, #32
 80135c4:	3b0c      	subs	r3, #12
 80135c6:	4611      	mov	r1, r2
 80135c8:	4618      	mov	r0, r3
 80135ca:	f001 ffc9 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 80135ce:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80135d2:	3b14      	subs	r3, #20
 80135d4:	2100      	movs	r1, #0
 80135d6:	4618      	mov	r0, r3
 80135d8:	f001 ffc2 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 80135dc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80135e0:	3b3c      	subs	r3, #60	; 0x3c
 80135e2:	2101      	movs	r1, #1
 80135e4:	4618      	mov	r0, r3
 80135e6:	f001 ffbb 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80135ea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80135ee:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80135f2:	881a      	ldrh	r2, [r3, #0]
 80135f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80135f8:	3b64      	subs	r3, #100	; 0x64
 80135fa:	4611      	mov	r1, r2
 80135fc:	4618      	mov	r0, r3
 80135fe:	f001 ffaf 	bl	8015560 <pushStack_walk>
						}
					}
					if (Ycoordinate >= 1) {
 8013602:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013606:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801360a:	881b      	ldrh	r3, [r3, #0]
 801360c:	2b00      	cmp	r3, #0
 801360e:	f000 81dd 	beq.w	80139cc <create_DijkstraMap+0x1a40>
						if(Direction==SLANT_SOUTH_WEST){
 8013612:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013616:	f103 0366 	add.w	r3, r3, #102	; 0x66
 801361a:	881b      	ldrh	r3, [r3, #0]
 801361c:	2b05      	cmp	r3, #5
 801361e:	d12f      	bne.n	8013680 <create_DijkstraMap+0x16f4>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8013620:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013624:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8013628:	881b      	ldrh	r3, [r3, #0]
 801362a:	3301      	adds	r3, #1
 801362c:	b29b      	uxth	r3, r3
 801362e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013632:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013636:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8013638:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801363c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013640:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013644:	2b05      	cmp	r3, #5
 8013646:	dd05      	ble.n	8013654 <create_DijkstraMap+0x16c8>
 8013648:	2305      	movs	r3, #5
 801364a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801364e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013652:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8013654:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013658:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801365c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013660:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013664:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013668:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801366c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013670:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8013674:	8013      	strh	r3, [r2, #0]
 8013676:	e013      	b.n	80136a0 <create_DijkstraMap+0x1714>
 8013678:	20001010 	.word	0x20001010
 801367c:	200013f4 	.word	0x200013f4
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8013680:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013684:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013688:	881b      	ldrh	r3, [r3, #0]
 801368a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801368e:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8013692:	8013      	strh	r3, [r2, #0]
 8013694:	2300      	movs	r3, #0
 8013696:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801369a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801369e:	8013      	strh	r3, [r2, #0]
						if((wall.row[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.row_count[Xcoordinate][Ycoordinate-1]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 80136a0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136a4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80136a8:	881b      	ldrh	r3, [r3, #0]
 80136aa:	3b01      	subs	r3, #1
 80136ac:	4ad1      	ldr	r2, [pc, #836]	; (80139f4 <create_DijkstraMap+0x1a68>)
 80136ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136b2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80136b6:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80136ba:	8812      	ldrh	r2, [r2, #0]
 80136bc:	2101      	movs	r1, #1
 80136be:	fa01 f202 	lsl.w	r2, r1, r2
 80136c2:	4013      	ands	r3, r2
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	f040 8092 	bne.w	80137ee <create_DijkstraMap+0x1862>
 80136ca:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136ce:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80136d2:	881a      	ldrh	r2, [r3, #0]
 80136d4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136d8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80136dc:	881b      	ldrh	r3, [r3, #0]
 80136de:	1e59      	subs	r1, r3, #1
 80136e0:	48c5      	ldr	r0, [pc, #788]	; (80139f8 <create_DijkstraMap+0x1a6c>)
 80136e2:	4613      	mov	r3, r2
 80136e4:	011b      	lsls	r3, r3, #4
 80136e6:	1a9b      	subs	r3, r3, r2
 80136e8:	440b      	add	r3, r1
 80136ea:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80136ee:	461c      	mov	r4, r3
 80136f0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136f4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80136f8:	881a      	ldrh	r2, [r3, #0]
 80136fa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136fe:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013702:	8819      	ldrh	r1, [r3, #0]
 8013704:	48bc      	ldr	r0, [pc, #752]	; (80139f8 <create_DijkstraMap+0x1a6c>)
 8013706:	4613      	mov	r3, r2
 8013708:	011b      	lsls	r3, r3, #4
 801370a:	1a9b      	subs	r3, r3, r2
 801370c:	440b      	add	r3, r1
 801370e:	33f0      	adds	r3, #240	; 0xf0
 8013710:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013714:	461a      	mov	r2, r3
 8013716:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801371a:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801371e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013722:	4413      	add	r3, r2
 8013724:	429c      	cmp	r4, r3
 8013726:	dd62      	ble.n	80137ee <create_DijkstraMap+0x1862>
							Dijkstra.row_count[Xcoordinate][Ycoordinate-1]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8013728:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801372c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013730:	881a      	ldrh	r2, [r3, #0]
 8013732:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013736:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801373a:	8819      	ldrh	r1, [r3, #0]
 801373c:	48ae      	ldr	r0, [pc, #696]	; (80139f8 <create_DijkstraMap+0x1a6c>)
 801373e:	4613      	mov	r3, r2
 8013740:	011b      	lsls	r3, r3, #4
 8013742:	1a9b      	subs	r3, r3, r2
 8013744:	440b      	add	r3, r1
 8013746:	33f0      	adds	r3, #240	; 0xf0
 8013748:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801374c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013750:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013754:	881b      	ldrh	r3, [r3, #0]
 8013756:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801375a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801375e:	8812      	ldrh	r2, [r2, #0]
 8013760:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8013764:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8013768:	8809      	ldrh	r1, [r1, #0]
 801376a:	3901      	subs	r1, #1
 801376c:	4403      	add	r3, r0
 801376e:	b29c      	uxth	r4, r3
 8013770:	48a1      	ldr	r0, [pc, #644]	; (80139f8 <create_DijkstraMap+0x1a6c>)
 8013772:	4613      	mov	r3, r2
 8013774:	011b      	lsls	r3, r3, #4
 8013776:	1a9b      	subs	r3, r3, r2
 8013778:	440b      	add	r3, r1
 801377a:	4622      	mov	r2, r4
 801377c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8013780:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013784:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013788:	881a      	ldrh	r2, [r3, #0]
 801378a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801378e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8013792:	4611      	mov	r1, r2
 8013794:	4618      	mov	r0, r3
 8013796:	f001 fee3 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate - 1);
 801379a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801379e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80137a2:	881b      	ldrh	r3, [r3, #0]
 80137a4:	3b01      	subs	r3, #1
 80137a6:	b29a      	uxth	r2, r3
 80137a8:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80137ac:	f103 0320 	add.w	r3, r3, #32
 80137b0:	3b0c      	subs	r3, #12
 80137b2:	4611      	mov	r1, r2
 80137b4:	4618      	mov	r0, r3
 80137b6:	f001 fed3 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 80137ba:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80137be:	3b14      	subs	r3, #20
 80137c0:	2100      	movs	r1, #0
 80137c2:	4618      	mov	r0, r3
 80137c4:	f001 fecc 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 80137c8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80137cc:	3b3c      	subs	r3, #60	; 0x3c
 80137ce:	2105      	movs	r1, #5
 80137d0:	4618      	mov	r0, r3
 80137d2:	f001 fec5 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80137d6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80137da:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80137de:	881a      	ldrh	r2, [r3, #0]
 80137e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80137e4:	3b64      	subs	r3, #100	; 0x64
 80137e6:	4611      	mov	r1, r2
 80137e8:	4618      	mov	r0, r3
 80137ea:	f001 feb9 	bl	8015560 <pushStack_walk>
						}
						if(Direction==SLANT_SOUTH_EAST){
 80137ee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80137f2:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80137f6:	881b      	ldrh	r3, [r3, #0]
 80137f8:	2b03      	cmp	r3, #3
 80137fa:	d12b      	bne.n	8013854 <create_DijkstraMap+0x18c8>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80137fc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013800:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8013804:	881b      	ldrh	r3, [r3, #0]
 8013806:	3301      	adds	r3, #1
 8013808:	b29b      	uxth	r3, r3
 801380a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801380e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013812:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8013814:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013818:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801381c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013820:	2b05      	cmp	r3, #5
 8013822:	dd05      	ble.n	8013830 <create_DijkstraMap+0x18a4>
 8013824:	2305      	movs	r3, #5
 8013826:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801382a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801382e:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8013830:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013834:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013838:	f9b3 2000 	ldrsh.w	r2, [r3]
 801383c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013840:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013844:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013848:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801384c:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8013850:	8013      	strh	r3, [r2, #0]
 8013852:	e00f      	b.n	8013874 <create_DijkstraMap+0x18e8>
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8013854:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013858:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801385c:	881b      	ldrh	r3, [r3, #0]
 801385e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013862:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8013866:	8013      	strh	r3, [r2, #0]
 8013868:	2300      	movs	r3, #0
 801386a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801386e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013872:	8013      	strh	r3, [r2, #0]
						if((wall.row[Ycoordinate-1] & (1 << (Xcoordinate+1)))==0 && Dijkstra.row_count[Xcoordinate+1][Ycoordinate-1]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8013874:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013878:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801387c:	881b      	ldrh	r3, [r3, #0]
 801387e:	3b01      	subs	r3, #1
 8013880:	4a5c      	ldr	r2, [pc, #368]	; (80139f4 <create_DijkstraMap+0x1a68>)
 8013882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013886:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801388a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801388e:	8812      	ldrh	r2, [r2, #0]
 8013890:	3201      	adds	r2, #1
 8013892:	2101      	movs	r1, #1
 8013894:	fa01 f202 	lsl.w	r2, r1, r2
 8013898:	4013      	ands	r3, r2
 801389a:	2b00      	cmp	r3, #0
 801389c:	f040 8096 	bne.w	80139cc <create_DijkstraMap+0x1a40>
 80138a0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80138a4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80138a8:	881b      	ldrh	r3, [r3, #0]
 80138aa:	1c5a      	adds	r2, r3, #1
 80138ac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80138b0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80138b4:	881b      	ldrh	r3, [r3, #0]
 80138b6:	1e59      	subs	r1, r3, #1
 80138b8:	484f      	ldr	r0, [pc, #316]	; (80139f8 <create_DijkstraMap+0x1a6c>)
 80138ba:	4613      	mov	r3, r2
 80138bc:	011b      	lsls	r3, r3, #4
 80138be:	1a9b      	subs	r3, r3, r2
 80138c0:	440b      	add	r3, r1
 80138c2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80138c6:	461c      	mov	r4, r3
 80138c8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80138cc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80138d0:	881a      	ldrh	r2, [r3, #0]
 80138d2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80138d6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80138da:	8819      	ldrh	r1, [r3, #0]
 80138dc:	4846      	ldr	r0, [pc, #280]	; (80139f8 <create_DijkstraMap+0x1a6c>)
 80138de:	4613      	mov	r3, r2
 80138e0:	011b      	lsls	r3, r3, #4
 80138e2:	1a9b      	subs	r3, r3, r2
 80138e4:	440b      	add	r3, r1
 80138e6:	33f0      	adds	r3, #240	; 0xf0
 80138e8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80138ec:	461a      	mov	r2, r3
 80138ee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80138f2:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80138f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80138fa:	4413      	add	r3, r2
 80138fc:	429c      	cmp	r4, r3
 80138fe:	dd65      	ble.n	80139cc <create_DijkstraMap+0x1a40>
							Dijkstra.row_count[Xcoordinate+1][Ycoordinate-1]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8013900:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013904:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013908:	881a      	ldrh	r2, [r3, #0]
 801390a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801390e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013912:	8819      	ldrh	r1, [r3, #0]
 8013914:	4838      	ldr	r0, [pc, #224]	; (80139f8 <create_DijkstraMap+0x1a6c>)
 8013916:	4613      	mov	r3, r2
 8013918:	011b      	lsls	r3, r3, #4
 801391a:	1a9b      	subs	r3, r3, r2
 801391c:	440b      	add	r3, r1
 801391e:	33f0      	adds	r3, #240	; 0xf0
 8013920:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8013924:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013928:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801392c:	881b      	ldrh	r3, [r3, #0]
 801392e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013932:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8013936:	8812      	ldrh	r2, [r2, #0]
 8013938:	3201      	adds	r2, #1
 801393a:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801393e:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8013942:	8809      	ldrh	r1, [r1, #0]
 8013944:	3901      	subs	r1, #1
 8013946:	4403      	add	r3, r0
 8013948:	b29c      	uxth	r4, r3
 801394a:	482b      	ldr	r0, [pc, #172]	; (80139f8 <create_DijkstraMap+0x1a6c>)
 801394c:	4613      	mov	r3, r2
 801394e:	011b      	lsls	r3, r3, #4
 8013950:	1a9b      	subs	r3, r3, r2
 8013952:	440b      	add	r3, r1
 8013954:	4622      	mov	r2, r4
 8013956:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate+1);
 801395a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801395e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013962:	881b      	ldrh	r3, [r3, #0]
 8013964:	3301      	adds	r3, #1
 8013966:	b29a      	uxth	r2, r3
 8013968:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801396c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8013970:	4611      	mov	r1, r2
 8013972:	4618      	mov	r0, r3
 8013974:	f001 fdf4 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate-1);
 8013978:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801397c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013980:	881b      	ldrh	r3, [r3, #0]
 8013982:	3b01      	subs	r3, #1
 8013984:	b29a      	uxth	r2, r3
 8013986:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801398a:	f103 0320 	add.w	r3, r3, #32
 801398e:	3b0c      	subs	r3, #12
 8013990:	4611      	mov	r1, r2
 8013992:	4618      	mov	r0, r3
 8013994:	f001 fde4 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 8013998:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801399c:	3b14      	subs	r3, #20
 801399e:	2100      	movs	r1, #0
 80139a0:	4618      	mov	r0, r3
 80139a2:	f001 fddd 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 80139a6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80139aa:	3b3c      	subs	r3, #60	; 0x3c
 80139ac:	2103      	movs	r1, #3
 80139ae:	4618      	mov	r0, r3
 80139b0:	f001 fdd6 	bl	8015560 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80139b4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80139b8:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80139bc:	881a      	ldrh	r2, [r3, #0]
 80139be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80139c2:	3b64      	subs	r3, #100	; 0x64
 80139c4:	4611      	mov	r1, r2
 80139c6:	4618      	mov	r0, r3
 80139c8:	f001 fdca 	bl	8015560 <pushStack_walk>
						}
					}

				}

		count_number+=1;
 80139cc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80139d0:	f103 036e 	add.w	r3, r3, #110	; 0x6e
 80139d4:	881b      	ldrh	r3, [r3, #0]
 80139d6:	3301      	adds	r3, #1
 80139d8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80139dc:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 80139e0:	8013      	strh	r3, [r2, #0]
		Xcoordinate = popStack_walk(&stack_x);
 80139e2:	f7fe bc1f 	b.w	8012224 <create_DijkstraMap+0x298>

		}



}
 80139e6:	bf00      	nop
 80139e8:	f507 479d 	add.w	r7, r7, #20096	; 0x4e80
 80139ec:	3704      	adds	r7, #4
 80139ee:	46bd      	mov	sp, r7
 80139f0:	bd90      	pop	{r4, r7, pc}
 80139f2:	bf00      	nop
 80139f4:	20001010 	.word	0x20001010
 80139f8:	200013f4 	.word	0x200013f4

080139fc <route_Dijkstra>:





void route_Dijkstra(void){
 80139fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139fe:	f5ad 4dbc 	sub.w	sp, sp, #24064	; 0x5e00
 8013a02:	b089      	sub	sp, #36	; 0x24
 8013a04:	af04      	add	r7, sp, #16
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_x_unknow;
	STACK_T stack_y_unknow;
	STACK_T stack_matrix_unknow;//行列
	initStack_walk(&stack_x);
 8013a06:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013a0a:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f001 fd96 	bl	8015540 <initStack_walk>
	initStack_walk(&stack_y);
 8013a14:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013a18:	f103 0310 	add.w	r3, r3, #16
 8013a1c:	3b1c      	subs	r3, #28
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f001 fd8e 	bl	8015540 <initStack_walk>
	initStack_walk(&stack_matrix);
 8013a24:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013a28:	f103 0310 	add.w	r3, r3, #16
 8013a2c:	3b04      	subs	r3, #4
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f001 fd86 	bl	8015540 <initStack_walk>
	initStack_walk(&g_Goal_x);
 8013a34:	48be      	ldr	r0, [pc, #760]	; (8013d30 <route_Dijkstra+0x334>)
 8013a36:	f001 fd83 	bl	8015540 <initStack_walk>
	initStack_walk(&g_Goal_y);
 8013a3a:	48be      	ldr	r0, [pc, #760]	; (8013d34 <route_Dijkstra+0x338>)
 8013a3c:	f001 fd80 	bl	8015540 <initStack_walk>

	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8013a40:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013a44:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013a48:	2100      	movs	r1, #0
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	f001 fd88 	bl	8015560 <pushStack_walk>
 8013a50:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013a54:	f103 0310 	add.w	r3, r3, #16
 8013a58:	3b1c      	subs	r3, #28
 8013a5a:	2100      	movs	r1, #0
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f001 fd7f 	bl	8015560 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);
 8013a62:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013a66:	f103 0310 	add.w	r3, r3, #16
 8013a6a:	3b04      	subs	r3, #4
 8013a6c:	2100      	movs	r1, #0
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f001 fd76 	bl	8015560 <pushStack_walk>

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int xd = 0;
 8013a74:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013a78:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	601a      	str	r2, [r3, #0]
	int yd = 0;
 8013a80:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013a84:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013a88:	2200      	movs	r2, #0
 8013a8a:	601a      	str	r2, [r3, #0]
	int direction_d = 1;
 8013a8c:	2301      	movs	r3, #1
 8013a8e:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013a92:	f102 020c 	add.w	r2, r2, #12
 8013a96:	6013      	str	r3, [r2, #0]


	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&xd,&yd,direction_d);
 8013a98:	f107 0110 	add.w	r1, r7, #16
 8013a9c:	390c      	subs	r1, #12
 8013a9e:	f107 0310 	add.w	r3, r7, #16
 8013aa2:	3b08      	subs	r3, #8
 8013aa4:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013aa8:	f102 020c 	add.w	r2, r2, #12
 8013aac:	6812      	ldr	r2, [r2, #0]
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f7fa ffda 	bl	800ea68 <update_coordinate>

		if((xd == GOAL_X || xd == GOAL_X+1) && (yd == GOAL_Y || yd == GOAL_Y+1)){
 8013ab4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ab8:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	2b02      	cmp	r3, #2
 8013ac0:	d006      	beq.n	8013ad0 <route_Dijkstra+0xd4>
 8013ac2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ac6:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	2b03      	cmp	r3, #3
 8013ace:	d10f      	bne.n	8013af0 <route_Dijkstra+0xf4>
 8013ad0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ad4:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	f000 8331 	beq.w	8014142 <route_Dijkstra+0x746>
 8013ae0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ae4:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	2b01      	cmp	r3, #1
 8013aec:	f000 8329 	beq.w	8014142 <route_Dijkstra+0x746>
					break;
		}


		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,xd,yd,direction_d);
 8013af0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013af4:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013af8:	6819      	ldr	r1, [r3, #0]
 8013afa:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013afe:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013b02:	681c      	ldr	r4, [r3, #0]
 8013b04:	f107 0310 	add.w	r3, r7, #16
 8013b08:	3b04      	subs	r3, #4
 8013b0a:	f107 0210 	add.w	r2, r7, #16
 8013b0e:	3a02      	subs	r2, #2
 8013b10:	f107 0610 	add.w	r6, r7, #16
 8013b14:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8013b18:	387e      	subs	r0, #126	; 0x7e
 8013b1a:	f507 45bc 	add.w	r5, r7, #24064	; 0x5e00
 8013b1e:	f105 050c 	add.w	r5, r5, #12
 8013b22:	682d      	ldr	r5, [r5, #0]
 8013b24:	9502      	str	r5, [sp, #8]
 8013b26:	9401      	str	r4, [sp, #4]
 8013b28:	9100      	str	r1, [sp, #0]
 8013b2a:	4631      	mov	r1, r6
 8013b2c:	f7fe f994 	bl	8011e58 <search_AroundDijkstraCount>
		//get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
		//if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
		//if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
		//if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 8013b30:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b34:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013b38:	881b      	ldrh	r3, [r3, #0]
 8013b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b3e:	4293      	cmp	r3, r2
 8013b40:	d11b      	bne.n	8013b7a <route_Dijkstra+0x17e>
 8013b42:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b46:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013b4a:	881b      	ldrh	r3, [r3, #0]
 8013b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b50:	4293      	cmp	r3, r2
 8013b52:	d112      	bne.n	8013b7a <route_Dijkstra+0x17e>
 8013b54:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b58:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013b5c:	881b      	ldrh	r3, [r3, #0]
 8013b5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b62:	4293      	cmp	r3, r2
 8013b64:	d109      	bne.n	8013b7a <route_Dijkstra+0x17e>
 8013b66:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b6a:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013b6e:	881b      	ldrh	r3, [r3, #0]
 8013b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b74:	4293      	cmp	r3, r2
 8013b76:	f000 82e3 	beq.w	8014140 <route_Dijkstra+0x744>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 8013b7a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b7e:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013b82:	881a      	ldrh	r2, [r3, #0]
 8013b84:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b88:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013b8c:	881b      	ldrh	r3, [r3, #0]
 8013b8e:	429a      	cmp	r2, r3
 8013b90:	f200 80d2 	bhi.w	8013d38 <route_Dijkstra+0x33c>
 8013b94:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b98:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013b9c:	881a      	ldrh	r2, [r3, #0]
 8013b9e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ba2:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013ba6:	881b      	ldrh	r3, [r3, #0]
 8013ba8:	429a      	cmp	r2, r3
 8013baa:	f200 80c5 	bhi.w	8013d38 <route_Dijkstra+0x33c>
 8013bae:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013bb2:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013bb6:	881a      	ldrh	r2, [r3, #0]
 8013bb8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013bbc:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013bc0:	881b      	ldrh	r3, [r3, #0]
 8013bc2:	429a      	cmp	r2, r3
 8013bc4:	f200 80b8 	bhi.w	8013d38 <route_Dijkstra+0x33c>
			// 直進
			switch (direction_d) {		//
 8013bc8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013bcc:	f103 030c 	add.w	r3, r3, #12
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	3b01      	subs	r3, #1
 8013bd4:	2b03      	cmp	r3, #3
 8013bd6:	f200 80b0 	bhi.w	8013d3a <route_Dijkstra+0x33e>
 8013bda:	a201      	add	r2, pc, #4	; (adr r2, 8013be0 <route_Dijkstra+0x1e4>)
 8013bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013be0:	08013bf1 	.word	0x08013bf1
 8013be4:	08013c3f 	.word	0x08013c3f
 8013be8:	08013c8d 	.word	0x08013c8d
 8013bec:	08013cdf 	.word	0x08013cdf
			case 1:
				pushStack_walk(&stack_x,xd);
 8013bf0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013bf4:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	b29a      	uxth	r2, r3
 8013bfc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013c00:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013c04:	4611      	mov	r1, r2
 8013c06:	4618      	mov	r0, r3
 8013c08:	f001 fcaa 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013c0c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013c10:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	b29a      	uxth	r2, r3
 8013c18:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013c1c:	f103 0310 	add.w	r3, r3, #16
 8013c20:	3b1c      	subs	r3, #28
 8013c22:	4611      	mov	r1, r2
 8013c24:	4618      	mov	r0, r3
 8013c26:	f001 fc9b 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013c2a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013c2e:	f103 0310 	add.w	r3, r3, #16
 8013c32:	3b04      	subs	r3, #4
 8013c34:	2100      	movs	r1, #0
 8013c36:	4618      	mov	r0, r3
 8013c38:	f001 fc92 	bl	8015560 <pushStack_walk>
				break;
 8013c3c:	e07d      	b.n	8013d3a <route_Dijkstra+0x33e>
			case 2:
				pushStack_walk(&stack_x,xd);
 8013c3e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013c42:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	b29a      	uxth	r2, r3
 8013c4a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013c4e:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013c52:	4611      	mov	r1, r2
 8013c54:	4618      	mov	r0, r3
 8013c56:	f001 fc83 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013c5a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013c5e:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	b29a      	uxth	r2, r3
 8013c66:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013c6a:	f103 0310 	add.w	r3, r3, #16
 8013c6e:	3b1c      	subs	r3, #28
 8013c70:	4611      	mov	r1, r2
 8013c72:	4618      	mov	r0, r3
 8013c74:	f001 fc74 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013c78:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013c7c:	f103 0310 	add.w	r3, r3, #16
 8013c80:	3b04      	subs	r3, #4
 8013c82:	2101      	movs	r1, #1
 8013c84:	4618      	mov	r0, r3
 8013c86:	f001 fc6b 	bl	8015560 <pushStack_walk>
				break;
 8013c8a:	e056      	b.n	8013d3a <route_Dijkstra+0x33e>
			case 3:
				pushStack_walk(&stack_x,xd);
 8013c8c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013c90:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	b29a      	uxth	r2, r3
 8013c98:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013c9c:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013ca0:	4611      	mov	r1, r2
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f001 fc5c 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_y,yd-1);
 8013ca8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013cac:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	b29b      	uxth	r3, r3
 8013cb4:	3b01      	subs	r3, #1
 8013cb6:	b29a      	uxth	r2, r3
 8013cb8:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013cbc:	f103 0310 	add.w	r3, r3, #16
 8013cc0:	3b1c      	subs	r3, #28
 8013cc2:	4611      	mov	r1, r2
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	f001 fc4b 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013cca:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013cce:	f103 0310 	add.w	r3, r3, #16
 8013cd2:	3b04      	subs	r3, #4
 8013cd4:	2100      	movs	r1, #0
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f001 fc42 	bl	8015560 <pushStack_walk>
				break;
 8013cdc:	e02d      	b.n	8013d3a <route_Dijkstra+0x33e>
			case 4:
				pushStack_walk(&stack_x,xd-1);
 8013cde:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ce2:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	b29b      	uxth	r3, r3
 8013cea:	3b01      	subs	r3, #1
 8013cec:	b29a      	uxth	r2, r3
 8013cee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013cf2:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013cf6:	4611      	mov	r1, r2
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f001 fc31 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013cfe:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013d02:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	b29a      	uxth	r2, r3
 8013d0a:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013d0e:	f103 0310 	add.w	r3, r3, #16
 8013d12:	3b1c      	subs	r3, #28
 8013d14:	4611      	mov	r1, r2
 8013d16:	4618      	mov	r0, r3
 8013d18:	f001 fc22 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013d1c:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013d20:	f103 0310 	add.w	r3, r3, #16
 8013d24:	3b04      	subs	r3, #4
 8013d26:	2101      	movs	r1, #1
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f001 fc19 	bl	8015560 <pushStack_walk>
				break;
 8013d2e:	e004      	b.n	8013d3a <route_Dijkstra+0x33e>
 8013d30:	200017b4 	.word	0x200017b4
 8013d34:	2000275c 	.word	0x2000275c
			}

		}
 8013d38:	bf00      	nop

		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 8013d3a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013d3e:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013d42:	881a      	ldrh	r2, [r3, #0]
 8013d44:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013d48:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013d4c:	881b      	ldrh	r3, [r3, #0]
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	f080 80d9 	bcs.w	8013f06 <route_Dijkstra+0x50a>
 8013d54:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013d58:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013d5c:	881a      	ldrh	r2, [r3, #0]
 8013d5e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013d62:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013d66:	881b      	ldrh	r3, [r3, #0]
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	f200 80cc 	bhi.w	8013f06 <route_Dijkstra+0x50a>
 8013d6e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013d72:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013d76:	881a      	ldrh	r2, [r3, #0]
 8013d78:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013d7c:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013d80:	881b      	ldrh	r3, [r3, #0]
 8013d82:	429a      	cmp	r2, r3
 8013d84:	f200 80bf 	bhi.w	8013f06 <route_Dijkstra+0x50a>
			// 右旋回
			switch (direction_d) {		//
 8013d88:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013d8c:	f103 030c 	add.w	r3, r3, #12
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	3b01      	subs	r3, #1
 8013d94:	2b03      	cmp	r3, #3
 8013d96:	f200 80ab 	bhi.w	8013ef0 <route_Dijkstra+0x4f4>
 8013d9a:	a201      	add	r2, pc, #4	; (adr r2, 8013da0 <route_Dijkstra+0x3a4>)
 8013d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013da0:	08013db1 	.word	0x08013db1
 8013da4:	08013dff 	.word	0x08013dff
 8013da8:	08013e51 	.word	0x08013e51
 8013dac:	08013ea3 	.word	0x08013ea3
			case 1:
				pushStack_walk(&stack_x,xd);
 8013db0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013db4:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	b29a      	uxth	r2, r3
 8013dbc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013dc0:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013dc4:	4611      	mov	r1, r2
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	f001 fbca 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013dcc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013dd0:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	b29a      	uxth	r2, r3
 8013dd8:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013ddc:	f103 0310 	add.w	r3, r3, #16
 8013de0:	3b1c      	subs	r3, #28
 8013de2:	4611      	mov	r1, r2
 8013de4:	4618      	mov	r0, r3
 8013de6:	f001 fbbb 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013dea:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013dee:	f103 0310 	add.w	r3, r3, #16
 8013df2:	3b04      	subs	r3, #4
 8013df4:	2101      	movs	r1, #1
 8013df6:	4618      	mov	r0, r3
 8013df8:	f001 fbb2 	bl	8015560 <pushStack_walk>
				break;
 8013dfc:	e078      	b.n	8013ef0 <route_Dijkstra+0x4f4>
			case 2:
				pushStack_walk(&stack_x,xd);
 8013dfe:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013e02:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	b29a      	uxth	r2, r3
 8013e0a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013e0e:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013e12:	4611      	mov	r1, r2
 8013e14:	4618      	mov	r0, r3
 8013e16:	f001 fba3 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_y,yd-1);
 8013e1a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013e1e:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	b29b      	uxth	r3, r3
 8013e26:	3b01      	subs	r3, #1
 8013e28:	b29a      	uxth	r2, r3
 8013e2a:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013e2e:	f103 0310 	add.w	r3, r3, #16
 8013e32:	3b1c      	subs	r3, #28
 8013e34:	4611      	mov	r1, r2
 8013e36:	4618      	mov	r0, r3
 8013e38:	f001 fb92 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013e3c:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013e40:	f103 0310 	add.w	r3, r3, #16
 8013e44:	3b04      	subs	r3, #4
 8013e46:	2100      	movs	r1, #0
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f001 fb89 	bl	8015560 <pushStack_walk>
				break;
 8013e4e:	e04f      	b.n	8013ef0 <route_Dijkstra+0x4f4>
			case 3:
				pushStack_walk(&stack_x,xd-1);
 8013e50:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013e54:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	b29b      	uxth	r3, r3
 8013e5c:	3b01      	subs	r3, #1
 8013e5e:	b29a      	uxth	r2, r3
 8013e60:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013e64:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013e68:	4611      	mov	r1, r2
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f001 fb78 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013e70:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013e74:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	b29a      	uxth	r2, r3
 8013e7c:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013e80:	f103 0310 	add.w	r3, r3, #16
 8013e84:	3b1c      	subs	r3, #28
 8013e86:	4611      	mov	r1, r2
 8013e88:	4618      	mov	r0, r3
 8013e8a:	f001 fb69 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013e8e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013e92:	f103 0310 	add.w	r3, r3, #16
 8013e96:	3b04      	subs	r3, #4
 8013e98:	2101      	movs	r1, #1
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	f001 fb60 	bl	8015560 <pushStack_walk>
				break;
 8013ea0:	e026      	b.n	8013ef0 <route_Dijkstra+0x4f4>
			case 4:
				pushStack_walk(&stack_x,xd);
 8013ea2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ea6:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	b29a      	uxth	r2, r3
 8013eae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013eb2:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013eb6:	4611      	mov	r1, r2
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f001 fb51 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013ebe:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ec2:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	b29a      	uxth	r2, r3
 8013eca:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013ece:	f103 0310 	add.w	r3, r3, #16
 8013ed2:	3b1c      	subs	r3, #28
 8013ed4:	4611      	mov	r1, r2
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	f001 fb42 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013edc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013ee0:	f103 0310 	add.w	r3, r3, #16
 8013ee4:	3b04      	subs	r3, #4
 8013ee6:	2100      	movs	r1, #0
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f001 fb39 	bl	8015560 <pushStack_walk>
				break;
 8013eee:	bf00      	nop
			}
			direction_d++;
 8013ef0:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013ef4:	f103 030c 	add.w	r3, r3, #12
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	3301      	adds	r3, #1
 8013efc:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013f00:	f102 020c 	add.w	r2, r2, #12
 8013f04:	6013      	str	r3, [r2, #0]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 8013f06:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013f0a:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013f0e:	881a      	ldrh	r2, [r3, #0]
 8013f10:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013f14:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013f18:	881b      	ldrh	r3, [r3, #0]
 8013f1a:	429a      	cmp	r2, r3
 8013f1c:	f080 80d9 	bcs.w	80140d2 <route_Dijkstra+0x6d6>
 8013f20:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013f24:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013f28:	881a      	ldrh	r2, [r3, #0]
 8013f2a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013f2e:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013f32:	881b      	ldrh	r3, [r3, #0]
 8013f34:	429a      	cmp	r2, r3
 8013f36:	f080 80cc 	bcs.w	80140d2 <route_Dijkstra+0x6d6>
 8013f3a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013f3e:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013f42:	881a      	ldrh	r2, [r3, #0]
 8013f44:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013f48:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013f4c:	881b      	ldrh	r3, [r3, #0]
 8013f4e:	429a      	cmp	r2, r3
 8013f50:	f200 80bf 	bhi.w	80140d2 <route_Dijkstra+0x6d6>
			// 左旋回
			switch (direction_d) {		//
 8013f54:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013f58:	f103 030c 	add.w	r3, r3, #12
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	3b01      	subs	r3, #1
 8013f60:	2b03      	cmp	r3, #3
 8013f62:	f200 80ab 	bhi.w	80140bc <route_Dijkstra+0x6c0>
 8013f66:	a201      	add	r2, pc, #4	; (adr r2, 8013f6c <route_Dijkstra+0x570>)
 8013f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f6c:	08013f7d 	.word	0x08013f7d
 8013f70:	08013fcf 	.word	0x08013fcf
 8013f74:	0801401d 	.word	0x0801401d
 8013f78:	0801406b 	.word	0x0801406b
			case 1:
				pushStack_walk(&stack_x,xd-1);
 8013f7c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013f80:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	b29b      	uxth	r3, r3
 8013f88:	3b01      	subs	r3, #1
 8013f8a:	b29a      	uxth	r2, r3
 8013f8c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013f90:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013f94:	4611      	mov	r1, r2
 8013f96:	4618      	mov	r0, r3
 8013f98:	f001 fae2 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013f9c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013fa0:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	b29a      	uxth	r2, r3
 8013fa8:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013fac:	f103 0310 	add.w	r3, r3, #16
 8013fb0:	3b1c      	subs	r3, #28
 8013fb2:	4611      	mov	r1, r2
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f001 fad3 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013fba:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013fbe:	f103 0310 	add.w	r3, r3, #16
 8013fc2:	3b04      	subs	r3, #4
 8013fc4:	2101      	movs	r1, #1
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f001 faca 	bl	8015560 <pushStack_walk>
				break;
 8013fcc:	e076      	b.n	80140bc <route_Dijkstra+0x6c0>
			case 2:
				pushStack_walk(&stack_x,xd);
 8013fce:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013fd2:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	b29a      	uxth	r2, r3
 8013fda:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013fde:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013fe2:	4611      	mov	r1, r2
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	f001 fabb 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013fea:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013fee:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	b29a      	uxth	r2, r3
 8013ff6:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013ffa:	f103 0310 	add.w	r3, r3, #16
 8013ffe:	3b1c      	subs	r3, #28
 8014000:	4611      	mov	r1, r2
 8014002:	4618      	mov	r0, r3
 8014004:	f001 faac 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8014008:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801400c:	f103 0310 	add.w	r3, r3, #16
 8014010:	3b04      	subs	r3, #4
 8014012:	2100      	movs	r1, #0
 8014014:	4618      	mov	r0, r3
 8014016:	f001 faa3 	bl	8015560 <pushStack_walk>
				break;
 801401a:	e04f      	b.n	80140bc <route_Dijkstra+0x6c0>
			case 3:
				pushStack_walk(&stack_x,xd);
 801401c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014020:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	b29a      	uxth	r2, r3
 8014028:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801402c:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8014030:	4611      	mov	r1, r2
 8014032:	4618      	mov	r0, r3
 8014034:	f001 fa94 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8014038:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801403c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	b29a      	uxth	r2, r3
 8014044:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8014048:	f103 0310 	add.w	r3, r3, #16
 801404c:	3b1c      	subs	r3, #28
 801404e:	4611      	mov	r1, r2
 8014050:	4618      	mov	r0, r3
 8014052:	f001 fa85 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8014056:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801405a:	f103 0310 	add.w	r3, r3, #16
 801405e:	3b04      	subs	r3, #4
 8014060:	2101      	movs	r1, #1
 8014062:	4618      	mov	r0, r3
 8014064:	f001 fa7c 	bl	8015560 <pushStack_walk>
				break;
 8014068:	e028      	b.n	80140bc <route_Dijkstra+0x6c0>
			case 4:
				pushStack_walk(&stack_x,xd);
 801406a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801406e:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	b29a      	uxth	r2, r3
 8014076:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801407a:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801407e:	4611      	mov	r1, r2
 8014080:	4618      	mov	r0, r3
 8014082:	f001 fa6d 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_y,yd-1);
 8014086:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801408a:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	b29b      	uxth	r3, r3
 8014092:	3b01      	subs	r3, #1
 8014094:	b29a      	uxth	r2, r3
 8014096:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 801409a:	f103 0310 	add.w	r3, r3, #16
 801409e:	3b1c      	subs	r3, #28
 80140a0:	4611      	mov	r1, r2
 80140a2:	4618      	mov	r0, r3
 80140a4:	f001 fa5c 	bl	8015560 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80140a8:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80140ac:	f103 0310 	add.w	r3, r3, #16
 80140b0:	3b04      	subs	r3, #4
 80140b2:	2100      	movs	r1, #0
 80140b4:	4618      	mov	r0, r3
 80140b6:	f001 fa53 	bl	8015560 <pushStack_walk>
				break;
 80140ba:	bf00      	nop
			}
			direction_d--;
 80140bc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80140c0:	f103 030c 	add.w	r3, r3, #12
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	3b01      	subs	r3, #1
 80140c8:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80140cc:	f102 020c 	add.w	r2, r2, #12
 80140d0:	6013      	str	r3, [r2, #0]
		}

		if (direction_d == 5) {
 80140d2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80140d6:	f103 030c 	add.w	r3, r3, #12
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	2b05      	cmp	r3, #5
 80140de:	d105      	bne.n	80140ec <route_Dijkstra+0x6f0>
			direction_d = 1;
 80140e0:	2301      	movs	r3, #1
 80140e2:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80140e6:	f102 020c 	add.w	r2, r2, #12
 80140ea:	6013      	str	r3, [r2, #0]
		}
		if (direction_d == 6) {
 80140ec:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80140f0:	f103 030c 	add.w	r3, r3, #12
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	2b06      	cmp	r3, #6
 80140f8:	d105      	bne.n	8014106 <route_Dijkstra+0x70a>
			direction_d = 2;
 80140fa:	2302      	movs	r3, #2
 80140fc:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8014100:	f102 020c 	add.w	r2, r2, #12
 8014104:	6013      	str	r3, [r2, #0]
		}
		if (direction_d == 0) {
 8014106:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801410a:	f103 030c 	add.w	r3, r3, #12
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d105      	bne.n	8014120 <route_Dijkstra+0x724>
			direction_d = 4;
 8014114:	2304      	movs	r3, #4
 8014116:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801411a:	f102 020c 	add.w	r2, r2, #12
 801411e:	6013      	str	r3, [r2, #0]
		}
		if (direction_d == -1) {
 8014120:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014124:	f103 030c 	add.w	r3, r3, #12
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801412e:	f47f acb3 	bne.w	8013a98 <route_Dijkstra+0x9c>
			direction_d = 3;
 8014132:	2303      	movs	r3, #3
 8014134:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8014138:	f102 020c 	add.w	r2, r2, #12
 801413c:	6013      	str	r3, [r2, #0]
		update_coordinate(&xd,&yd,direction_d);
 801413e:	e4ab      	b.n	8013a98 <route_Dijkstra+0x9c>
			break;
 8014140:	bf00      	nop
	}

	unsigned short Xcoordinate,Ycoordinate,Row_or_Column;
	while (1) {

			Xcoordinate = popStack_walk(&stack_x);
 8014142:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014146:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801414a:	4618      	mov	r0, r3
 801414c:	f001 fa32 	bl	80155b4 <popStack_walk>
 8014150:	4603      	mov	r3, r0
 8014152:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8014156:	f102 020a 	add.w	r2, r2, #10
 801415a:	8013      	strh	r3, [r2, #0]
			Ycoordinate = popStack_walk(&stack_y);
 801415c:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8014160:	f103 0310 	add.w	r3, r3, #16
 8014164:	3b1c      	subs	r3, #28
 8014166:	4618      	mov	r0, r3
 8014168:	f001 fa24 	bl	80155b4 <popStack_walk>
 801416c:	4603      	mov	r3, r0
 801416e:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8014172:	f102 0208 	add.w	r2, r2, #8
 8014176:	8013      	strh	r3, [r2, #0]
			Row_or_Column = popStack_walk(&stack_matrix);
 8014178:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801417c:	f103 0310 	add.w	r3, r3, #16
 8014180:	3b04      	subs	r3, #4
 8014182:	4618      	mov	r0, r3
 8014184:	f001 fa16 	bl	80155b4 <popStack_walk>
 8014188:	4603      	mov	r3, r0
 801418a:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801418e:	f102 0206 	add.w	r2, r2, #6
 8014192:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (Xcoordinate == MAX_WALKCOUNT_DIJKSTRA || Ycoordinate == MAX_WALKCOUNT_DIJKSTRA) {
 8014194:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014198:	f103 030a 	add.w	r3, r3, #10
 801419c:	881b      	ldrh	r3, [r3, #0]
 801419e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80141a2:	4293      	cmp	r3, r2
 80141a4:	f000 80d2 	beq.w	801434c <route_Dijkstra+0x950>
 80141a8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80141ac:	f103 0308 	add.w	r3, r3, #8
 80141b0:	881b      	ldrh	r3, [r3, #0]
 80141b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80141b6:	4293      	cmp	r3, r2
 80141b8:	f000 80c8 	beq.w	801434c <route_Dijkstra+0x950>
				//printf("stack_end\n");
				break;
			}
			if(Row_or_Column==ROW && ((wall.row_look[Ycoordinate] & (1 << Xcoordinate)) == 0)){
 80141bc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80141c0:	f103 0306 	add.w	r3, r3, #6
 80141c4:	881b      	ldrh	r3, [r3, #0]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d15a      	bne.n	8014280 <route_Dijkstra+0x884>
 80141ca:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80141ce:	f103 0308 	add.w	r3, r3, #8
 80141d2:	881b      	ldrh	r3, [r3, #0]
 80141d4:	4a60      	ldr	r2, [pc, #384]	; (8014358 <route_Dijkstra+0x95c>)
 80141d6:	331e      	adds	r3, #30
 80141d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80141dc:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80141e0:	f102 020a 	add.w	r2, r2, #10
 80141e4:	8812      	ldrh	r2, [r2, #0]
 80141e6:	2101      	movs	r1, #1
 80141e8:	fa01 f202 	lsl.w	r2, r1, r2
 80141ec:	4013      	ands	r3, r2
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d146      	bne.n	8014280 <route_Dijkstra+0x884>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 80141f2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80141f6:	f103 030a 	add.w	r3, r3, #10
 80141fa:	881a      	ldrh	r2, [r3, #0]
 80141fc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014200:	f103 0308 	add.w	r3, r3, #8
 8014204:	881b      	ldrh	r3, [r3, #0]
 8014206:	4955      	ldr	r1, [pc, #340]	; (801435c <route_Dijkstra+0x960>)
 8014208:	0112      	lsls	r2, r2, #4
 801420a:	4413      	add	r3, r2
 801420c:	2200      	movs	r2, #0
 801420e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate][Ycoordinate + 1] = 0;
 8014212:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014216:	f103 030a 	add.w	r3, r3, #10
 801421a:	881a      	ldrh	r2, [r3, #0]
 801421c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014220:	f103 0308 	add.w	r3, r3, #8
 8014224:	881b      	ldrh	r3, [r3, #0]
 8014226:	3301      	adds	r3, #1
 8014228:	494c      	ldr	r1, [pc, #304]	; (801435c <route_Dijkstra+0x960>)
 801422a:	0112      	lsls	r2, r2, #4
 801422c:	4413      	add	r3, r2
 801422e:	2200      	movs	r2, #0
 8014230:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 8014234:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014238:	f103 030a 	add.w	r3, r3, #10
 801423c:	881b      	ldrh	r3, [r3, #0]
 801423e:	4619      	mov	r1, r3
 8014240:	4847      	ldr	r0, [pc, #284]	; (8014360 <route_Dijkstra+0x964>)
 8014242:	f001 f98d 	bl	8015560 <pushStack_walk>
 8014246:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801424a:	f103 0308 	add.w	r3, r3, #8
 801424e:	881b      	ldrh	r3, [r3, #0]
 8014250:	4619      	mov	r1, r3
 8014252:	4844      	ldr	r0, [pc, #272]	; (8014364 <route_Dijkstra+0x968>)
 8014254:	f001 f984 	bl	8015560 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate+1);
 8014258:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801425c:	f103 030a 	add.w	r3, r3, #10
 8014260:	881b      	ldrh	r3, [r3, #0]
 8014262:	4619      	mov	r1, r3
 8014264:	483e      	ldr	r0, [pc, #248]	; (8014360 <route_Dijkstra+0x964>)
 8014266:	f001 f97b 	bl	8015560 <pushStack_walk>
 801426a:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801426e:	f103 0308 	add.w	r3, r3, #8
 8014272:	881b      	ldrh	r3, [r3, #0]
 8014274:	3301      	adds	r3, #1
 8014276:	b29b      	uxth	r3, r3
 8014278:	4619      	mov	r1, r3
 801427a:	483a      	ldr	r0, [pc, #232]	; (8014364 <route_Dijkstra+0x968>)
 801427c:	f001 f970 	bl	8015560 <pushStack_walk>
			}
			if(Row_or_Column==COLUMN && ((wall.column_look[Xcoordinate] & (1 << Ycoordinate)) == 0)){
 8014280:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014284:	f103 0306 	add.w	r3, r3, #6
 8014288:	881b      	ldrh	r3, [r3, #0]
 801428a:	2b01      	cmp	r3, #1
 801428c:	f47f af59 	bne.w	8014142 <route_Dijkstra+0x746>
 8014290:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014294:	f103 030a 	add.w	r3, r3, #10
 8014298:	881b      	ldrh	r3, [r3, #0]
 801429a:	4a2f      	ldr	r2, [pc, #188]	; (8014358 <route_Dijkstra+0x95c>)
 801429c:	332c      	adds	r3, #44	; 0x2c
 801429e:	009b      	lsls	r3, r3, #2
 80142a0:	4413      	add	r3, r2
 80142a2:	685b      	ldr	r3, [r3, #4]
 80142a4:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80142a8:	f102 0208 	add.w	r2, r2, #8
 80142ac:	8812      	ldrh	r2, [r2, #0]
 80142ae:	2101      	movs	r1, #1
 80142b0:	fa01 f202 	lsl.w	r2, r1, r2
 80142b4:	4013      	ands	r3, r2
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	f47f af43 	bne.w	8014142 <route_Dijkstra+0x746>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 80142bc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80142c0:	f103 030a 	add.w	r3, r3, #10
 80142c4:	881a      	ldrh	r2, [r3, #0]
 80142c6:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80142ca:	f103 0308 	add.w	r3, r3, #8
 80142ce:	881b      	ldrh	r3, [r3, #0]
 80142d0:	4922      	ldr	r1, [pc, #136]	; (801435c <route_Dijkstra+0x960>)
 80142d2:	0112      	lsls	r2, r2, #4
 80142d4:	4413      	add	r3, r2
 80142d6:	2200      	movs	r2, #0
 80142d8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate + 1][Ycoordinate] = 0;
 80142dc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80142e0:	f103 030a 	add.w	r3, r3, #10
 80142e4:	881b      	ldrh	r3, [r3, #0]
 80142e6:	1c5a      	adds	r2, r3, #1
 80142e8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80142ec:	f103 0308 	add.w	r3, r3, #8
 80142f0:	881b      	ldrh	r3, [r3, #0]
 80142f2:	491a      	ldr	r1, [pc, #104]	; (801435c <route_Dijkstra+0x960>)
 80142f4:	0112      	lsls	r2, r2, #4
 80142f6:	4413      	add	r3, r2
 80142f8:	2200      	movs	r2, #0
 80142fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 80142fe:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014302:	f103 030a 	add.w	r3, r3, #10
 8014306:	881b      	ldrh	r3, [r3, #0]
 8014308:	4619      	mov	r1, r3
 801430a:	4815      	ldr	r0, [pc, #84]	; (8014360 <route_Dijkstra+0x964>)
 801430c:	f001 f928 	bl	8015560 <pushStack_walk>
 8014310:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014314:	f103 0308 	add.w	r3, r3, #8
 8014318:	881b      	ldrh	r3, [r3, #0]
 801431a:	4619      	mov	r1, r3
 801431c:	4811      	ldr	r0, [pc, #68]	; (8014364 <route_Dijkstra+0x968>)
 801431e:	f001 f91f 	bl	8015560 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate+1);pushStack_walk(&g_Goal_y,Ycoordinate);
 8014322:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014326:	f103 030a 	add.w	r3, r3, #10
 801432a:	881b      	ldrh	r3, [r3, #0]
 801432c:	3301      	adds	r3, #1
 801432e:	b29b      	uxth	r3, r3
 8014330:	4619      	mov	r1, r3
 8014332:	480b      	ldr	r0, [pc, #44]	; (8014360 <route_Dijkstra+0x964>)
 8014334:	f001 f914 	bl	8015560 <pushStack_walk>
 8014338:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801433c:	f103 0308 	add.w	r3, r3, #8
 8014340:	881b      	ldrh	r3, [r3, #0]
 8014342:	4619      	mov	r1, r3
 8014344:	4807      	ldr	r0, [pc, #28]	; (8014364 <route_Dijkstra+0x968>)
 8014346:	f001 f90b 	bl	8015560 <pushStack_walk>
			Xcoordinate = popStack_walk(&stack_x);
 801434a:	e6fa      	b.n	8014142 <route_Dijkstra+0x746>
			}
	}


}
 801434c:	bf00      	nop
 801434e:	f507 47bc 	add.w	r7, r7, #24064	; 0x5e00
 8014352:	3714      	adds	r7, #20
 8014354:	46bd      	mov	sp, r7
 8014356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014358:	20001010 	.word	0x20001010
 801435c:	200011f4 	.word	0x200011f4
 8014360:	200017b4 	.word	0x200017b4
 8014364:	2000275c 	.word	0x2000275c

08014368 <create_StepCountMap_unknown>:




void create_StepCountMap_unknown(void){
 8014368:	b580      	push	{r7, lr}
 801436a:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 801436e:	b082      	sub	sp, #8
 8014370:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	unsigned short goalX,goalY;
	for(uint8_t xx = 0;xx <= 15;xx++){
 8014372:	2300      	movs	r3, #0
 8014374:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014378:	f102 0207 	add.w	r2, r2, #7
 801437c:	7013      	strb	r3, [r2, #0]
 801437e:	e033      	b.n	80143e8 <create_StepCountMap_unknown+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 8014380:	2300      	movs	r3, #0
 8014382:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014386:	f102 0206 	add.w	r2, r2, #6
 801438a:	7013      	strb	r3, [r2, #0]
 801438c:	e01a      	b.n	80143c4 <create_StepCountMap_unknown+0x5c>
			walk_count[xx][yy] = MAX_WALKCOUNT;
 801438e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014392:	f103 0307 	add.w	r3, r3, #7
 8014396:	781a      	ldrb	r2, [r3, #0]
 8014398:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801439c:	f103 0306 	add.w	r3, r3, #6
 80143a0:	781b      	ldrb	r3, [r3, #0]
 80143a2:	4966      	ldr	r1, [pc, #408]	; (801453c <create_StepCountMap_unknown+0x1d4>)
 80143a4:	0112      	lsls	r2, r2, #4
 80143a6:	4413      	add	r3, r2
 80143a8:	22ff      	movs	r2, #255	; 0xff
 80143aa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 80143ae:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80143b2:	f103 0306 	add.w	r3, r3, #6
 80143b6:	781b      	ldrb	r3, [r3, #0]
 80143b8:	3301      	adds	r3, #1
 80143ba:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80143be:	f102 0206 	add.w	r2, r2, #6
 80143c2:	7013      	strb	r3, [r2, #0]
 80143c4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80143c8:	f103 0306 	add.w	r3, r3, #6
 80143cc:	781b      	ldrb	r3, [r3, #0]
 80143ce:	2b0f      	cmp	r3, #15
 80143d0:	d9dd      	bls.n	801438e <create_StepCountMap_unknown+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 80143d2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80143d6:	f103 0307 	add.w	r3, r3, #7
 80143da:	781b      	ldrb	r3, [r3, #0]
 80143dc:	3301      	adds	r3, #1
 80143de:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80143e2:	f102 0207 	add.w	r2, r2, #7
 80143e6:	7013      	strb	r3, [r2, #0]
 80143e8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80143ec:	f103 0307 	add.w	r3, r3, #7
 80143f0:	781b      	ldrb	r3, [r3, #0]
 80143f2:	2b0f      	cmp	r3, #15
 80143f4:	d9c4      	bls.n	8014380 <create_StepCountMap_unknown+0x18>
		}
	}

	initStack_walk(&stack_x);
 80143f6:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80143fa:	4618      	mov	r0, r3
 80143fc:	f001 f8a0 	bl	8015540 <initStack_walk>
	initStack_walk(&stack_y);
 8014400:	f107 0308 	add.w	r3, r7, #8
 8014404:	3b04      	subs	r3, #4
 8014406:	4618      	mov	r0, r3
 8014408:	f001 f89a 	bl	8015540 <initStack_walk>

	while (1) {

			goalX = popStack_walk(&g_Goal_x);
 801440c:	484c      	ldr	r0, [pc, #304]	; (8014540 <create_StepCountMap_unknown+0x1d8>)
 801440e:	f001 f8d1 	bl	80155b4 <popStack_walk>
 8014412:	4603      	mov	r3, r0
 8014414:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014418:	f102 021a 	add.w	r2, r2, #26
 801441c:	8013      	strh	r3, [r2, #0]
			goalY = popStack_walk(&g_Goal_y);
 801441e:	4849      	ldr	r0, [pc, #292]	; (8014544 <create_StepCountMap_unknown+0x1dc>)
 8014420:	f001 f8c8 	bl	80155b4 <popStack_walk>
 8014424:	4603      	mov	r3, r0
 8014426:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801442a:	f102 0218 	add.w	r2, r2, #24
 801442e:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (goalX == MAX_WALKCOUNT_DIJKSTRA || goalY == MAX_WALKCOUNT_DIJKSTRA) {
 8014430:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014434:	f103 031a 	add.w	r3, r3, #26
 8014438:	881b      	ldrh	r3, [r3, #0]
 801443a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801443e:	4293      	cmp	r3, r2
 8014440:	d030      	beq.n	80144a4 <create_StepCountMap_unknown+0x13c>
 8014442:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014446:	f103 0318 	add.w	r3, r3, #24
 801444a:	881b      	ldrh	r3, [r3, #0]
 801444c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014450:	4293      	cmp	r3, r2
 8014452:	d027      	beq.n	80144a4 <create_StepCountMap_unknown+0x13c>
				//printf("stack_end\n");
				break;
			}
			walk_count[goalX][goalY] = 0;
 8014454:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014458:	f103 031a 	add.w	r3, r3, #26
 801445c:	881a      	ldrh	r2, [r3, #0]
 801445e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014462:	f103 0318 	add.w	r3, r3, #24
 8014466:	881b      	ldrh	r3, [r3, #0]
 8014468:	4934      	ldr	r1, [pc, #208]	; (801453c <create_StepCountMap_unknown+0x1d4>)
 801446a:	0112      	lsls	r2, r2, #4
 801446c:	4413      	add	r3, r2
 801446e:	2200      	movs	r2, #0
 8014470:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,goalX);pushStack_walk(&stack_y,goalY);
 8014474:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014478:	f103 031a 	add.w	r3, r3, #26
 801447c:	881a      	ldrh	r2, [r3, #0]
 801447e:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014482:	4611      	mov	r1, r2
 8014484:	4618      	mov	r0, r3
 8014486:	f001 f86b 	bl	8015560 <pushStack_walk>
 801448a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801448e:	f103 0318 	add.w	r3, r3, #24
 8014492:	881a      	ldrh	r2, [r3, #0]
 8014494:	f107 0308 	add.w	r3, r7, #8
 8014498:	3b04      	subs	r3, #4
 801449a:	4611      	mov	r1, r2
 801449c:	4618      	mov	r0, r3
 801449e:	f001 f85f 	bl	8015560 <pushStack_walk>
			goalX = popStack_walk(&g_Goal_x);
 80144a2:	e7b3      	b.n	801440c <create_StepCountMap_unknown+0xa4>
	}
	if(stack_x.tail == stack_x.head){
 80144a4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80144a8:	f103 0308 	add.w	r3, r3, #8
 80144ac:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 80144b0:	685a      	ldr	r2, [r3, #4]
 80144b2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80144b6:	f103 0308 	add.w	r3, r3, #8
 80144ba:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	429a      	cmp	r2, r3
 80144c2:	d11b      	bne.n	80144fc <create_StepCountMap_unknown+0x194>
		walk_count[0][0] = 0;
 80144c4:	4b1d      	ldr	r3, [pc, #116]	; (801453c <create_StepCountMap_unknown+0x1d4>)
 80144c6:	2200      	movs	r2, #0
 80144c8:	801a      	strh	r2, [r3, #0]
		pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 80144ca:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80144ce:	2100      	movs	r1, #0
 80144d0:	4618      	mov	r0, r3
 80144d2:	f001 f845 	bl	8015560 <pushStack_walk>
 80144d6:	f107 0308 	add.w	r3, r7, #8
 80144da:	3b04      	subs	r3, #4
 80144dc:	2100      	movs	r1, #0
 80144de:	4618      	mov	r0, r3
 80144e0:	f001 f83e 	bl	8015560 <pushStack_walk>
		if (Dijkstra_maker_flag>=1){
 80144e4:	4b18      	ldr	r3, [pc, #96]	; (8014548 <create_StepCountMap_unknown+0x1e0>)
 80144e6:	781b      	ldrb	r3, [r3, #0]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d003      	beq.n	80144f4 <create_StepCountMap_unknown+0x18c>
			Dijkstra_maker_flag=2;
 80144ec:	4b16      	ldr	r3, [pc, #88]	; (8014548 <create_StepCountMap_unknown+0x1e0>)
 80144ee:	2202      	movs	r2, #2
 80144f0:	701a      	strb	r2, [r3, #0]
 80144f2:	e006      	b.n	8014502 <create_StepCountMap_unknown+0x19a>
		}else{
			Dijkstra_maker_flag=1;
 80144f4:	4b14      	ldr	r3, [pc, #80]	; (8014548 <create_StepCountMap_unknown+0x1e0>)
 80144f6:	2201      	movs	r2, #1
 80144f8:	701a      	strb	r2, [r3, #0]
 80144fa:	e002      	b.n	8014502 <create_StepCountMap_unknown+0x19a>
		}
	}else{
		Dijkstra_maker_flag=0;
 80144fc:	4b12      	ldr	r3, [pc, #72]	; (8014548 <create_StepCountMap_unknown+0x1e0>)
 80144fe:	2200      	movs	r2, #0
 8014500:	701a      	strb	r2, [r3, #0]
	}
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 8014502:	2301      	movs	r3, #1
 8014504:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014508:	f102 0204 	add.w	r2, r2, #4
 801450c:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 801450e:	2301      	movs	r3, #1
 8014510:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014514:	f102 0202 	add.w	r2, r2, #2
 8014518:	8013      	strh	r3, [r2, #0]
 801451a:	2301      	movs	r3, #1
 801451c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014520:	8013      	strh	r3, [r2, #0]
 8014522:	2301      	movs	r3, #1
 8014524:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014528:	f102 021e 	add.w	r2, r2, #30
 801452c:	8013      	strh	r3, [r2, #0]
 801452e:	2301      	movs	r3, #1
 8014530:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014534:	f102 021c 	add.w	r2, r2, #28
 8014538:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 801453a:	e237      	b.n	80149ac <create_StepCountMap_unknown+0x644>
 801453c:	200011f4 	.word	0x200011f4
 8014540:	200017b4 	.word	0x200017b4
 8014544:	2000275c 	.word	0x2000275c
 8014548:	200011f0 	.word	0x200011f0

		Xcoordinate = popStack_walk(&stack_x);
 801454c:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014550:	4618      	mov	r0, r3
 8014552:	f001 f82f 	bl	80155b4 <popStack_walk>
 8014556:	4603      	mov	r3, r0
 8014558:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801455c:	f102 0216 	add.w	r2, r2, #22
 8014560:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8014562:	f107 0308 	add.w	r3, r7, #8
 8014566:	3b04      	subs	r3, #4
 8014568:	4618      	mov	r0, r3
 801456a:	f001 f823 	bl	80155b4 <popStack_walk>
 801456e:	4603      	mov	r3, r0
 8014570:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014574:	f102 0214 	add.w	r2, r2, #20
 8014578:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == MAX_WALKCOUNT_DIJKSTRA || Ycoordinate == MAX_WALKCOUNT_DIJKSTRA) {
 801457a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801457e:	f103 0316 	add.w	r3, r3, #22
 8014582:	881b      	ldrh	r3, [r3, #0]
 8014584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014588:	4293      	cmp	r3, r2
 801458a:	f000 8217 	beq.w	80149bc <create_StepCountMap_unknown+0x654>
 801458e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014592:	f103 0314 	add.w	r3, r3, #20
 8014596:	881b      	ldrh	r3, [r3, #0]
 8014598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801459c:	4293      	cmp	r3, r2
 801459e:	f000 820d 	beq.w	80149bc <create_StepCountMap_unknown+0x654>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 80145a2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145a6:	f103 0314 	add.w	r3, r3, #20
 80145aa:	881b      	ldrh	r3, [r3, #0]
 80145ac:	2b0e      	cmp	r3, #14
 80145ae:	d817      	bhi.n	80145e0 <create_StepCountMap_unknown+0x278>
			wall_north = wall.row[Ycoordinate] & (1 << Xcoordinate);
 80145b0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145b4:	f103 0314 	add.w	r3, r3, #20
 80145b8:	881b      	ldrh	r3, [r3, #0]
 80145ba:	4acb      	ldr	r2, [pc, #812]	; (80148e8 <create_StepCountMap_unknown+0x580>)
 80145bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80145c0:	b29a      	uxth	r2, r3
 80145c2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145c6:	f103 0316 	add.w	r3, r3, #22
 80145ca:	881b      	ldrh	r3, [r3, #0]
 80145cc:	2101      	movs	r1, #1
 80145ce:	fa01 f303 	lsl.w	r3, r1, r3
 80145d2:	b29b      	uxth	r3, r3
 80145d4:	4013      	ands	r3, r2
 80145d6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80145da:	f102 0202 	add.w	r2, r2, #2
 80145de:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 80145e0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145e4:	f103 0314 	add.w	r3, r3, #20
 80145e8:	881b      	ldrh	r3, [r3, #0]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d016      	beq.n	801461c <create_StepCountMap_unknown+0x2b4>
			wall_south = wall.row[Ycoordinate - 1] & (1 << Xcoordinate);
 80145ee:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145f2:	f103 0314 	add.w	r3, r3, #20
 80145f6:	881b      	ldrh	r3, [r3, #0]
 80145f8:	3b01      	subs	r3, #1
 80145fa:	4abb      	ldr	r2, [pc, #748]	; (80148e8 <create_StepCountMap_unknown+0x580>)
 80145fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014600:	b29a      	uxth	r2, r3
 8014602:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014606:	f103 0316 	add.w	r3, r3, #22
 801460a:	881b      	ldrh	r3, [r3, #0]
 801460c:	2101      	movs	r1, #1
 801460e:	fa01 f303 	lsl.w	r3, r1, r3
 8014612:	b29b      	uxth	r3, r3
 8014614:	4013      	ands	r3, r2
 8014616:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801461a:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 801461c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014620:	f103 0316 	add.w	r3, r3, #22
 8014624:	881b      	ldrh	r3, [r3, #0]
 8014626:	2b0e      	cmp	r3, #14
 8014628:	d819      	bhi.n	801465e <create_StepCountMap_unknown+0x2f6>
			wall_east = wall.column[Xcoordinate] & (1 << Ycoordinate);
 801462a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801462e:	f103 0316 	add.w	r3, r3, #22
 8014632:	881b      	ldrh	r3, [r3, #0]
 8014634:	4aac      	ldr	r2, [pc, #688]	; (80148e8 <create_StepCountMap_unknown+0x580>)
 8014636:	330e      	adds	r3, #14
 8014638:	009b      	lsls	r3, r3, #2
 801463a:	4413      	add	r3, r2
 801463c:	685b      	ldr	r3, [r3, #4]
 801463e:	b29a      	uxth	r2, r3
 8014640:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014644:	f103 0314 	add.w	r3, r3, #20
 8014648:	881b      	ldrh	r3, [r3, #0]
 801464a:	2101      	movs	r1, #1
 801464c:	fa01 f303 	lsl.w	r3, r1, r3
 8014650:	b29b      	uxth	r3, r3
 8014652:	4013      	ands	r3, r2
 8014654:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014658:	f102 021e 	add.w	r2, r2, #30
 801465c:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 801465e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014662:	f103 0316 	add.w	r3, r3, #22
 8014666:	881b      	ldrh	r3, [r3, #0]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d01a      	beq.n	80146a2 <create_StepCountMap_unknown+0x33a>
			wall_west = wall.column[Xcoordinate - 1] & (1 << Ycoordinate);
 801466c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014670:	f103 0316 	add.w	r3, r3, #22
 8014674:	881b      	ldrh	r3, [r3, #0]
 8014676:	3b01      	subs	r3, #1
 8014678:	4a9b      	ldr	r2, [pc, #620]	; (80148e8 <create_StepCountMap_unknown+0x580>)
 801467a:	330e      	adds	r3, #14
 801467c:	009b      	lsls	r3, r3, #2
 801467e:	4413      	add	r3, r2
 8014680:	685b      	ldr	r3, [r3, #4]
 8014682:	b29a      	uxth	r2, r3
 8014684:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014688:	f103 0314 	add.w	r3, r3, #20
 801468c:	881b      	ldrh	r3, [r3, #0]
 801468e:	2101      	movs	r1, #1
 8014690:	fa01 f303 	lsl.w	r3, r1, r3
 8014694:	b29b      	uxth	r3, r3
 8014696:	4013      	ands	r3, r2
 8014698:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801469c:	f102 021c 	add.w	r2, r2, #28
 80146a0:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == MAX_WALKCOUNT && Ycoordinate != 15 && wall_north == 0) {
 80146a2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146a6:	f103 0316 	add.w	r3, r3, #22
 80146aa:	881a      	ldrh	r2, [r3, #0]
 80146ac:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146b0:	f103 0314 	add.w	r3, r3, #20
 80146b4:	881b      	ldrh	r3, [r3, #0]
 80146b6:	3301      	adds	r3, #1
 80146b8:	498c      	ldr	r1, [pc, #560]	; (80148ec <create_StepCountMap_unknown+0x584>)
 80146ba:	0112      	lsls	r2, r2, #4
 80146bc:	4413      	add	r3, r2
 80146be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80146c2:	2bff      	cmp	r3, #255	; 0xff
 80146c4:	d148      	bne.n	8014758 <create_StepCountMap_unknown+0x3f0>
 80146c6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146ca:	f103 0314 	add.w	r3, r3, #20
 80146ce:	881b      	ldrh	r3, [r3, #0]
 80146d0:	2b0f      	cmp	r3, #15
 80146d2:	d041      	beq.n	8014758 <create_StepCountMap_unknown+0x3f0>
 80146d4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80146d8:	f103 0302 	add.w	r3, r3, #2
 80146dc:	881b      	ldrh	r3, [r3, #0]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d13a      	bne.n	8014758 <create_StepCountMap_unknown+0x3f0>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80146e2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146e6:	f103 0316 	add.w	r3, r3, #22
 80146ea:	881a      	ldrh	r2, [r3, #0]
 80146ec:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146f0:	f103 0314 	add.w	r3, r3, #20
 80146f4:	881b      	ldrh	r3, [r3, #0]
 80146f6:	497d      	ldr	r1, [pc, #500]	; (80148ec <create_StepCountMap_unknown+0x584>)
 80146f8:	0112      	lsls	r2, r2, #4
 80146fa:	4413      	add	r3, r2
 80146fc:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014700:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014704:	f103 0316 	add.w	r3, r3, #22
 8014708:	881a      	ldrh	r2, [r3, #0]
 801470a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801470e:	f103 0314 	add.w	r3, r3, #20
 8014712:	881b      	ldrh	r3, [r3, #0]
 8014714:	3301      	adds	r3, #1
 8014716:	3101      	adds	r1, #1
 8014718:	b288      	uxth	r0, r1
 801471a:	4974      	ldr	r1, [pc, #464]	; (80148ec <create_StepCountMap_unknown+0x584>)
 801471c:	0112      	lsls	r2, r2, #4
 801471e:	4413      	add	r3, r2
 8014720:	4602      	mov	r2, r0
 8014722:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014726:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801472a:	f103 0316 	add.w	r3, r3, #22
 801472e:	881a      	ldrh	r2, [r3, #0]
 8014730:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014734:	4611      	mov	r1, r2
 8014736:	4618      	mov	r0, r3
 8014738:	f000 ff12 	bl	8015560 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 801473c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014740:	f103 0314 	add.w	r3, r3, #20
 8014744:	881b      	ldrh	r3, [r3, #0]
 8014746:	3301      	adds	r3, #1
 8014748:	b29a      	uxth	r2, r3
 801474a:	f107 0308 	add.w	r3, r7, #8
 801474e:	3b04      	subs	r3, #4
 8014750:	4611      	mov	r1, r2
 8014752:	4618      	mov	r0, r3
 8014754:	f000 ff04 	bl	8015560 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == MAX_WALKCOUNT && Ycoordinate != 0 && wall_south == 0) {
 8014758:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801475c:	f103 0316 	add.w	r3, r3, #22
 8014760:	881a      	ldrh	r2, [r3, #0]
 8014762:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014766:	f103 0314 	add.w	r3, r3, #20
 801476a:	881b      	ldrh	r3, [r3, #0]
 801476c:	3b01      	subs	r3, #1
 801476e:	495f      	ldr	r1, [pc, #380]	; (80148ec <create_StepCountMap_unknown+0x584>)
 8014770:	0112      	lsls	r2, r2, #4
 8014772:	4413      	add	r3, r2
 8014774:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014778:	2bff      	cmp	r3, #255	; 0xff
 801477a:	d146      	bne.n	801480a <create_StepCountMap_unknown+0x4a2>
 801477c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014780:	f103 0314 	add.w	r3, r3, #20
 8014784:	881b      	ldrh	r3, [r3, #0]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d03f      	beq.n	801480a <create_StepCountMap_unknown+0x4a2>
 801478a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801478e:	881b      	ldrh	r3, [r3, #0]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d13a      	bne.n	801480a <create_StepCountMap_unknown+0x4a2>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014794:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014798:	f103 0316 	add.w	r3, r3, #22
 801479c:	881a      	ldrh	r2, [r3, #0]
 801479e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147a2:	f103 0314 	add.w	r3, r3, #20
 80147a6:	881b      	ldrh	r3, [r3, #0]
 80147a8:	4950      	ldr	r1, [pc, #320]	; (80148ec <create_StepCountMap_unknown+0x584>)
 80147aa:	0112      	lsls	r2, r2, #4
 80147ac:	4413      	add	r3, r2
 80147ae:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80147b2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147b6:	f103 0316 	add.w	r3, r3, #22
 80147ba:	881a      	ldrh	r2, [r3, #0]
 80147bc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147c0:	f103 0314 	add.w	r3, r3, #20
 80147c4:	881b      	ldrh	r3, [r3, #0]
 80147c6:	3b01      	subs	r3, #1
 80147c8:	3101      	adds	r1, #1
 80147ca:	b288      	uxth	r0, r1
 80147cc:	4947      	ldr	r1, [pc, #284]	; (80148ec <create_StepCountMap_unknown+0x584>)
 80147ce:	0112      	lsls	r2, r2, #4
 80147d0:	4413      	add	r3, r2
 80147d2:	4602      	mov	r2, r0
 80147d4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 80147d8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147dc:	f103 0316 	add.w	r3, r3, #22
 80147e0:	881a      	ldrh	r2, [r3, #0]
 80147e2:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80147e6:	4611      	mov	r1, r2
 80147e8:	4618      	mov	r0, r3
 80147ea:	f000 feb9 	bl	8015560 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 80147ee:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147f2:	f103 0314 	add.w	r3, r3, #20
 80147f6:	881b      	ldrh	r3, [r3, #0]
 80147f8:	3b01      	subs	r3, #1
 80147fa:	b29a      	uxth	r2, r3
 80147fc:	f107 0308 	add.w	r3, r7, #8
 8014800:	3b04      	subs	r3, #4
 8014802:	4611      	mov	r1, r2
 8014804:	4618      	mov	r0, r3
 8014806:	f000 feab 	bl	8015560 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 15 && wall_east == 0) {
 801480a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801480e:	f103 0316 	add.w	r3, r3, #22
 8014812:	881b      	ldrh	r3, [r3, #0]
 8014814:	1c5a      	adds	r2, r3, #1
 8014816:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801481a:	f103 0314 	add.w	r3, r3, #20
 801481e:	881b      	ldrh	r3, [r3, #0]
 8014820:	4932      	ldr	r1, [pc, #200]	; (80148ec <create_StepCountMap_unknown+0x584>)
 8014822:	0112      	lsls	r2, r2, #4
 8014824:	4413      	add	r3, r2
 8014826:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801482a:	2bff      	cmp	r3, #255	; 0xff
 801482c:	d148      	bne.n	80148c0 <create_StepCountMap_unknown+0x558>
 801482e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014832:	f103 0316 	add.w	r3, r3, #22
 8014836:	881b      	ldrh	r3, [r3, #0]
 8014838:	2b0f      	cmp	r3, #15
 801483a:	d041      	beq.n	80148c0 <create_StepCountMap_unknown+0x558>
 801483c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014840:	f103 031e 	add.w	r3, r3, #30
 8014844:	881b      	ldrh	r3, [r3, #0]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d13a      	bne.n	80148c0 <create_StepCountMap_unknown+0x558>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 801484a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801484e:	f103 0316 	add.w	r3, r3, #22
 8014852:	881a      	ldrh	r2, [r3, #0]
 8014854:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014858:	f103 0314 	add.w	r3, r3, #20
 801485c:	881b      	ldrh	r3, [r3, #0]
 801485e:	4923      	ldr	r1, [pc, #140]	; (80148ec <create_StepCountMap_unknown+0x584>)
 8014860:	0112      	lsls	r2, r2, #4
 8014862:	4413      	add	r3, r2
 8014864:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014868:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801486c:	f103 0316 	add.w	r3, r3, #22
 8014870:	881b      	ldrh	r3, [r3, #0]
 8014872:	1c5a      	adds	r2, r3, #1
 8014874:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014878:	f103 0314 	add.w	r3, r3, #20
 801487c:	881b      	ldrh	r3, [r3, #0]
 801487e:	3101      	adds	r1, #1
 8014880:	b288      	uxth	r0, r1
 8014882:	491a      	ldr	r1, [pc, #104]	; (80148ec <create_StepCountMap_unknown+0x584>)
 8014884:	0112      	lsls	r2, r2, #4
 8014886:	4413      	add	r3, r2
 8014888:	4602      	mov	r2, r0
 801488a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 801488e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014892:	f103 0316 	add.w	r3, r3, #22
 8014896:	881b      	ldrh	r3, [r3, #0]
 8014898:	3301      	adds	r3, #1
 801489a:	b29a      	uxth	r2, r3
 801489c:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80148a0:	4611      	mov	r1, r2
 80148a2:	4618      	mov	r0, r3
 80148a4:	f000 fe5c 	bl	8015560 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 80148a8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148ac:	f103 0314 	add.w	r3, r3, #20
 80148b0:	881a      	ldrh	r2, [r3, #0]
 80148b2:	f107 0308 	add.w	r3, r7, #8
 80148b6:	3b04      	subs	r3, #4
 80148b8:	4611      	mov	r1, r2
 80148ba:	4618      	mov	r0, r3
 80148bc:	f000 fe50 	bl	8015560 <pushStack_walk>
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 0 && wall_west == 0) {
 80148c0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148c4:	f103 0316 	add.w	r3, r3, #22
 80148c8:	881b      	ldrh	r3, [r3, #0]
 80148ca:	1e5a      	subs	r2, r3, #1
 80148cc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148d0:	f103 0314 	add.w	r3, r3, #20
 80148d4:	881b      	ldrh	r3, [r3, #0]
 80148d6:	4905      	ldr	r1, [pc, #20]	; (80148ec <create_StepCountMap_unknown+0x584>)
 80148d8:	0112      	lsls	r2, r2, #4
 80148da:	4413      	add	r3, r2
 80148dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80148e0:	2bff      	cmp	r3, #255	; 0xff
 80148e2:	d14e      	bne.n	8014982 <create_StepCountMap_unknown+0x61a>
 80148e4:	e004      	b.n	80148f0 <create_StepCountMap_unknown+0x588>
 80148e6:	bf00      	nop
 80148e8:	20001010 	.word	0x20001010
 80148ec:	200011f4 	.word	0x200011f4
 80148f0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148f4:	f103 0316 	add.w	r3, r3, #22
 80148f8:	881b      	ldrh	r3, [r3, #0]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d041      	beq.n	8014982 <create_StepCountMap_unknown+0x61a>
 80148fe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014902:	f103 031c 	add.w	r3, r3, #28
 8014906:	881b      	ldrh	r3, [r3, #0]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d13a      	bne.n	8014982 <create_StepCountMap_unknown+0x61a>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 801490c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014910:	f103 0316 	add.w	r3, r3, #22
 8014914:	881a      	ldrh	r2, [r3, #0]
 8014916:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801491a:	f103 0314 	add.w	r3, r3, #20
 801491e:	881b      	ldrh	r3, [r3, #0]
 8014920:	4929      	ldr	r1, [pc, #164]	; (80149c8 <create_StepCountMap_unknown+0x660>)
 8014922:	0112      	lsls	r2, r2, #4
 8014924:	4413      	add	r3, r2
 8014926:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 801492a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801492e:	f103 0316 	add.w	r3, r3, #22
 8014932:	881b      	ldrh	r3, [r3, #0]
 8014934:	1e5a      	subs	r2, r3, #1
 8014936:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801493a:	f103 0314 	add.w	r3, r3, #20
 801493e:	881b      	ldrh	r3, [r3, #0]
 8014940:	3101      	adds	r1, #1
 8014942:	b288      	uxth	r0, r1
 8014944:	4920      	ldr	r1, [pc, #128]	; (80149c8 <create_StepCountMap_unknown+0x660>)
 8014946:	0112      	lsls	r2, r2, #4
 8014948:	4413      	add	r3, r2
 801494a:	4602      	mov	r2, r0
 801494c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014950:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014954:	f103 0316 	add.w	r3, r3, #22
 8014958:	881b      	ldrh	r3, [r3, #0]
 801495a:	3b01      	subs	r3, #1
 801495c:	b29a      	uxth	r2, r3
 801495e:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014962:	4611      	mov	r1, r2
 8014964:	4618      	mov	r0, r3
 8014966:	f000 fdfb 	bl	8015560 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 801496a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801496e:	f103 0314 	add.w	r3, r3, #20
 8014972:	881a      	ldrh	r2, [r3, #0]
 8014974:	f107 0308 	add.w	r3, r7, #8
 8014978:	3b04      	subs	r3, #4
 801497a:	4611      	mov	r1, r2
 801497c:	4618      	mov	r0, r3
 801497e:	f000 fdef 	bl	8015560 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 8014982:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014986:	f103 0316 	add.w	r3, r3, #22
 801498a:	881a      	ldrh	r2, [r3, #0]
 801498c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014990:	f103 0314 	add.w	r3, r3, #20
 8014994:	881b      	ldrh	r3, [r3, #0]
 8014996:	490c      	ldr	r1, [pc, #48]	; (80149c8 <create_StepCountMap_unknown+0x660>)
 8014998:	0112      	lsls	r2, r2, #4
 801499a:	4413      	add	r3, r2
 801499c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80149a0:	3301      	adds	r3, #1
 80149a2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80149a6:	f102 0204 	add.w	r2, r2, #4
 80149aa:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 80149ac:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80149b0:	f103 0304 	add.w	r3, r3, #4
 80149b4:	881b      	ldrh	r3, [r3, #0]
 80149b6:	2bfe      	cmp	r3, #254	; 0xfe
 80149b8:	f67f adc8 	bls.w	801454c <create_StepCountMap_unknown+0x1e4>

		}

}
 80149bc:	bf00      	nop
 80149be:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 80149c2:	3708      	adds	r7, #8
 80149c4:	46bd      	mov	sp, r7
 80149c6:	bd80      	pop	{r7, pc}
 80149c8:	200011f4 	.word	0x200011f4

080149cc <create_StepCountMap_queue>:





void create_StepCountMap_queue(void){
 80149cc:	b580      	push	{r7, lr}
 80149ce:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 80149d2:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 80149d4:	2300      	movs	r3, #0
 80149d6:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80149da:	f102 021f 	add.w	r2, r2, #31
 80149de:	7013      	strb	r3, [r2, #0]
 80149e0:	e033      	b.n	8014a4a <create_StepCountMap_queue+0x7e>
		for(uint8_t yy = 0;yy <= 15;yy++){
 80149e2:	2300      	movs	r3, #0
 80149e4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80149e8:	f102 021e 	add.w	r2, r2, #30
 80149ec:	7013      	strb	r3, [r2, #0]
 80149ee:	e01a      	b.n	8014a26 <create_StepCountMap_queue+0x5a>
			walk_count[xx][yy] = MAX_WALKCOUNT;
 80149f0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149f4:	f103 031f 	add.w	r3, r3, #31
 80149f8:	781a      	ldrb	r2, [r3, #0]
 80149fa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149fe:	f103 031e 	add.w	r3, r3, #30
 8014a02:	781b      	ldrb	r3, [r3, #0]
 8014a04:	4946      	ldr	r1, [pc, #280]	; (8014b20 <create_StepCountMap_queue+0x154>)
 8014a06:	0112      	lsls	r2, r2, #4
 8014a08:	4413      	add	r3, r2
 8014a0a:	22ff      	movs	r2, #255	; 0xff
 8014a0c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 8014a10:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a14:	f103 031e 	add.w	r3, r3, #30
 8014a18:	781b      	ldrb	r3, [r3, #0]
 8014a1a:	3301      	adds	r3, #1
 8014a1c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014a20:	f102 021e 	add.w	r2, r2, #30
 8014a24:	7013      	strb	r3, [r2, #0]
 8014a26:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a2a:	f103 031e 	add.w	r3, r3, #30
 8014a2e:	781b      	ldrb	r3, [r3, #0]
 8014a30:	2b0f      	cmp	r3, #15
 8014a32:	d9dd      	bls.n	80149f0 <create_StepCountMap_queue+0x24>
	for(uint8_t xx = 0;xx <= 15;xx++){
 8014a34:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a38:	f103 031f 	add.w	r3, r3, #31
 8014a3c:	781b      	ldrb	r3, [r3, #0]
 8014a3e:	3301      	adds	r3, #1
 8014a40:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014a44:	f102 021f 	add.w	r2, r2, #31
 8014a48:	7013      	strb	r3, [r2, #0]
 8014a4a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a4e:	f103 031f 	add.w	r3, r3, #31
 8014a52:	781b      	ldrb	r3, [r3, #0]
 8014a54:	2b0f      	cmp	r3, #15
 8014a56:	d9c4      	bls.n	80149e2 <create_StepCountMap_queue+0x16>
		}
	}
	initStack_walk(&stack_x);
 8014a58:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f000 fd6f 	bl	8015540 <initStack_walk>
	initStack_walk(&stack_y);
 8014a62:	463b      	mov	r3, r7
 8014a64:	4618      	mov	r0, r3
 8014a66:	f000 fd6b 	bl	8015540 <initStack_walk>


	walk_count[GOAL_X][GOAL_Y] = 0;
 8014a6a:	4b2d      	ldr	r3, [pc, #180]	; (8014b20 <create_StepCountMap_queue+0x154>)
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	walk_count[GOAL_X + 1][GOAL_Y] = 0;
 8014a72:	4b2b      	ldr	r3, [pc, #172]	; (8014b20 <create_StepCountMap_queue+0x154>)
 8014a74:	2200      	movs	r2, #0
 8014a76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	walk_count[GOAL_X][GOAL_Y + 1] = 0;
 8014a7a:	4b29      	ldr	r3, [pc, #164]	; (8014b20 <create_StepCountMap_queue+0x154>)
 8014a7c:	2200      	movs	r2, #0
 8014a7e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	walk_count[GOAL_X + 1][GOAL_Y + 1] = 0;
 8014a82:	4b27      	ldr	r3, [pc, #156]	; (8014b20 <create_StepCountMap_queue+0x154>)
 8014a84:	2200      	movs	r2, #0
 8014a86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8014a8a:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014a8e:	2102      	movs	r1, #2
 8014a90:	4618      	mov	r0, r3
 8014a92:	f000 fd65 	bl	8015560 <pushStack_walk>
 8014a96:	463b      	mov	r3, r7
 8014a98:	2100      	movs	r1, #0
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	f000 fd60 	bl	8015560 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y);
 8014aa0:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014aa4:	2103      	movs	r1, #3
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f000 fd5a 	bl	8015560 <pushStack_walk>
 8014aac:	463b      	mov	r3, r7
 8014aae:	2100      	movs	r1, #0
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f000 fd55 	bl	8015560 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y + 1);
 8014ab6:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014aba:	2102      	movs	r1, #2
 8014abc:	4618      	mov	r0, r3
 8014abe:	f000 fd4f 	bl	8015560 <pushStack_walk>
 8014ac2:	463b      	mov	r3, r7
 8014ac4:	2101      	movs	r1, #1
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f000 fd4a 	bl	8015560 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y + 1);
 8014acc:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014ad0:	2103      	movs	r1, #3
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	f000 fd44 	bl	8015560 <pushStack_walk>
 8014ad8:	463b      	mov	r3, r7
 8014ada:	2101      	movs	r1, #1
 8014adc:	4618      	mov	r0, r3
 8014ade:	f000 fd3f 	bl	8015560 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 8014ae2:	2301      	movs	r3, #1
 8014ae4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014ae8:	f102 021c 	add.w	r2, r2, #28
 8014aec:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8014aee:	2301      	movs	r3, #1
 8014af0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014af4:	f102 021a 	add.w	r2, r2, #26
 8014af8:	8013      	strh	r3, [r2, #0]
 8014afa:	2301      	movs	r3, #1
 8014afc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014b00:	f102 0218 	add.w	r2, r2, #24
 8014b04:	8013      	strh	r3, [r2, #0]
 8014b06:	2301      	movs	r3, #1
 8014b08:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014b0c:	f102 0216 	add.w	r2, r2, #22
 8014b10:	8013      	strh	r3, [r2, #0]
 8014b12:	2301      	movs	r3, #1
 8014b14:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014b18:	f102 0214 	add.w	r2, r2, #20
 8014b1c:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014b1e:	e22b      	b.n	8014f78 <create_StepCountMap_queue+0x5ac>
 8014b20:	200011f4 	.word	0x200011f4

		Xcoordinate = popStack_walk(&stack_x);
 8014b24:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f000 fd43 	bl	80155b4 <popStack_walk>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014b34:	f102 0212 	add.w	r2, r2, #18
 8014b38:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8014b3a:	463b      	mov	r3, r7
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	f000 fd39 	bl	80155b4 <popStack_walk>
 8014b42:	4603      	mov	r3, r0
 8014b44:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014b48:	f102 0210 	add.w	r2, r2, #16
 8014b4c:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == MAX_WALKCOUNT_DIJKSTRA || Ycoordinate == MAX_WALKCOUNT_DIJKSTRA) {
 8014b4e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b52:	f103 0312 	add.w	r3, r3, #18
 8014b56:	881b      	ldrh	r3, [r3, #0]
 8014b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b5c:	4293      	cmp	r3, r2
 8014b5e:	f000 8213 	beq.w	8014f88 <create_StepCountMap_queue+0x5bc>
 8014b62:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b66:	f103 0310 	add.w	r3, r3, #16
 8014b6a:	881b      	ldrh	r3, [r3, #0]
 8014b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b70:	4293      	cmp	r3, r2
 8014b72:	f000 8209 	beq.w	8014f88 <create_StepCountMap_queue+0x5bc>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 8014b76:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b7a:	f103 0310 	add.w	r3, r3, #16
 8014b7e:	881b      	ldrh	r3, [r3, #0]
 8014b80:	2b0e      	cmp	r3, #14
 8014b82:	d817      	bhi.n	8014bb4 <create_StepCountMap_queue+0x1e8>
			wall_north = wall.row[Ycoordinate] & (1 << Xcoordinate);
 8014b84:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b88:	f103 0310 	add.w	r3, r3, #16
 8014b8c:	881b      	ldrh	r3, [r3, #0]
 8014b8e:	4aca      	ldr	r2, [pc, #808]	; (8014eb8 <create_StepCountMap_queue+0x4ec>)
 8014b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b94:	b29a      	uxth	r2, r3
 8014b96:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b9a:	f103 0312 	add.w	r3, r3, #18
 8014b9e:	881b      	ldrh	r3, [r3, #0]
 8014ba0:	2101      	movs	r1, #1
 8014ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8014ba6:	b29b      	uxth	r3, r3
 8014ba8:	4013      	ands	r3, r2
 8014baa:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014bae:	f102 021a 	add.w	r2, r2, #26
 8014bb2:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 8014bb4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bb8:	f103 0310 	add.w	r3, r3, #16
 8014bbc:	881b      	ldrh	r3, [r3, #0]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d018      	beq.n	8014bf4 <create_StepCountMap_queue+0x228>
			wall_south = wall.row[Ycoordinate - 1] & (1 << Xcoordinate);
 8014bc2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bc6:	f103 0310 	add.w	r3, r3, #16
 8014bca:	881b      	ldrh	r3, [r3, #0]
 8014bcc:	3b01      	subs	r3, #1
 8014bce:	4aba      	ldr	r2, [pc, #744]	; (8014eb8 <create_StepCountMap_queue+0x4ec>)
 8014bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014bd4:	b29a      	uxth	r2, r3
 8014bd6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bda:	f103 0312 	add.w	r3, r3, #18
 8014bde:	881b      	ldrh	r3, [r3, #0]
 8014be0:	2101      	movs	r1, #1
 8014be2:	fa01 f303 	lsl.w	r3, r1, r3
 8014be6:	b29b      	uxth	r3, r3
 8014be8:	4013      	ands	r3, r2
 8014bea:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014bee:	f102 0218 	add.w	r2, r2, #24
 8014bf2:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8014bf4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bf8:	f103 0312 	add.w	r3, r3, #18
 8014bfc:	881b      	ldrh	r3, [r3, #0]
 8014bfe:	2b0e      	cmp	r3, #14
 8014c00:	d819      	bhi.n	8014c36 <create_StepCountMap_queue+0x26a>
			wall_east = wall.column[Xcoordinate] & (1 << Ycoordinate);
 8014c02:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c06:	f103 0312 	add.w	r3, r3, #18
 8014c0a:	881b      	ldrh	r3, [r3, #0]
 8014c0c:	4aaa      	ldr	r2, [pc, #680]	; (8014eb8 <create_StepCountMap_queue+0x4ec>)
 8014c0e:	330e      	adds	r3, #14
 8014c10:	009b      	lsls	r3, r3, #2
 8014c12:	4413      	add	r3, r2
 8014c14:	685b      	ldr	r3, [r3, #4]
 8014c16:	b29a      	uxth	r2, r3
 8014c18:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c1c:	f103 0310 	add.w	r3, r3, #16
 8014c20:	881b      	ldrh	r3, [r3, #0]
 8014c22:	2101      	movs	r1, #1
 8014c24:	fa01 f303 	lsl.w	r3, r1, r3
 8014c28:	b29b      	uxth	r3, r3
 8014c2a:	4013      	ands	r3, r2
 8014c2c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014c30:	f102 0216 	add.w	r2, r2, #22
 8014c34:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 8014c36:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c3a:	f103 0312 	add.w	r3, r3, #18
 8014c3e:	881b      	ldrh	r3, [r3, #0]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d01a      	beq.n	8014c7a <create_StepCountMap_queue+0x2ae>
			wall_west = wall.column[Xcoordinate - 1] & (1 << Ycoordinate);
 8014c44:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c48:	f103 0312 	add.w	r3, r3, #18
 8014c4c:	881b      	ldrh	r3, [r3, #0]
 8014c4e:	3b01      	subs	r3, #1
 8014c50:	4a99      	ldr	r2, [pc, #612]	; (8014eb8 <create_StepCountMap_queue+0x4ec>)
 8014c52:	330e      	adds	r3, #14
 8014c54:	009b      	lsls	r3, r3, #2
 8014c56:	4413      	add	r3, r2
 8014c58:	685b      	ldr	r3, [r3, #4]
 8014c5a:	b29a      	uxth	r2, r3
 8014c5c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c60:	f103 0310 	add.w	r3, r3, #16
 8014c64:	881b      	ldrh	r3, [r3, #0]
 8014c66:	2101      	movs	r1, #1
 8014c68:	fa01 f303 	lsl.w	r3, r1, r3
 8014c6c:	b29b      	uxth	r3, r3
 8014c6e:	4013      	ands	r3, r2
 8014c70:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014c74:	f102 0214 	add.w	r2, r2, #20
 8014c78:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == MAX_WALKCOUNT && Ycoordinate != 15 && wall_north == 0) {
 8014c7a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c7e:	f103 0312 	add.w	r3, r3, #18
 8014c82:	881a      	ldrh	r2, [r3, #0]
 8014c84:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c88:	f103 0310 	add.w	r3, r3, #16
 8014c8c:	881b      	ldrh	r3, [r3, #0]
 8014c8e:	3301      	adds	r3, #1
 8014c90:	498a      	ldr	r1, [pc, #552]	; (8014ebc <create_StepCountMap_queue+0x4f0>)
 8014c92:	0112      	lsls	r2, r2, #4
 8014c94:	4413      	add	r3, r2
 8014c96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014c9a:	2bff      	cmp	r3, #255	; 0xff
 8014c9c:	d146      	bne.n	8014d2c <create_StepCountMap_queue+0x360>
 8014c9e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ca2:	f103 0310 	add.w	r3, r3, #16
 8014ca6:	881b      	ldrh	r3, [r3, #0]
 8014ca8:	2b0f      	cmp	r3, #15
 8014caa:	d03f      	beq.n	8014d2c <create_StepCountMap_queue+0x360>
 8014cac:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cb0:	f103 031a 	add.w	r3, r3, #26
 8014cb4:	881b      	ldrh	r3, [r3, #0]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d138      	bne.n	8014d2c <create_StepCountMap_queue+0x360>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014cba:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cbe:	f103 0312 	add.w	r3, r3, #18
 8014cc2:	881a      	ldrh	r2, [r3, #0]
 8014cc4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cc8:	f103 0310 	add.w	r3, r3, #16
 8014ccc:	881b      	ldrh	r3, [r3, #0]
 8014cce:	497b      	ldr	r1, [pc, #492]	; (8014ebc <create_StepCountMap_queue+0x4f0>)
 8014cd0:	0112      	lsls	r2, r2, #4
 8014cd2:	4413      	add	r3, r2
 8014cd4:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014cd8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cdc:	f103 0312 	add.w	r3, r3, #18
 8014ce0:	881a      	ldrh	r2, [r3, #0]
 8014ce2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ce6:	f103 0310 	add.w	r3, r3, #16
 8014cea:	881b      	ldrh	r3, [r3, #0]
 8014cec:	3301      	adds	r3, #1
 8014cee:	3101      	adds	r1, #1
 8014cf0:	b288      	uxth	r0, r1
 8014cf2:	4972      	ldr	r1, [pc, #456]	; (8014ebc <create_StepCountMap_queue+0x4f0>)
 8014cf4:	0112      	lsls	r2, r2, #4
 8014cf6:	4413      	add	r3, r2
 8014cf8:	4602      	mov	r2, r0
 8014cfa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014cfe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d02:	f103 0312 	add.w	r3, r3, #18
 8014d06:	881a      	ldrh	r2, [r3, #0]
 8014d08:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014d0c:	4611      	mov	r1, r2
 8014d0e:	4618      	mov	r0, r3
 8014d10:	f000 fc26 	bl	8015560 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8014d14:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d18:	f103 0310 	add.w	r3, r3, #16
 8014d1c:	881b      	ldrh	r3, [r3, #0]
 8014d1e:	3301      	adds	r3, #1
 8014d20:	b29a      	uxth	r2, r3
 8014d22:	463b      	mov	r3, r7
 8014d24:	4611      	mov	r1, r2
 8014d26:	4618      	mov	r0, r3
 8014d28:	f000 fc1a 	bl	8015560 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == MAX_WALKCOUNT && Ycoordinate != 0 && wall_south == 0) {
 8014d2c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d30:	f103 0312 	add.w	r3, r3, #18
 8014d34:	881a      	ldrh	r2, [r3, #0]
 8014d36:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d3a:	f103 0310 	add.w	r3, r3, #16
 8014d3e:	881b      	ldrh	r3, [r3, #0]
 8014d40:	3b01      	subs	r3, #1
 8014d42:	495e      	ldr	r1, [pc, #376]	; (8014ebc <create_StepCountMap_queue+0x4f0>)
 8014d44:	0112      	lsls	r2, r2, #4
 8014d46:	4413      	add	r3, r2
 8014d48:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014d4c:	2bff      	cmp	r3, #255	; 0xff
 8014d4e:	d146      	bne.n	8014dde <create_StepCountMap_queue+0x412>
 8014d50:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d54:	f103 0310 	add.w	r3, r3, #16
 8014d58:	881b      	ldrh	r3, [r3, #0]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d03f      	beq.n	8014dde <create_StepCountMap_queue+0x412>
 8014d5e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d62:	f103 0318 	add.w	r3, r3, #24
 8014d66:	881b      	ldrh	r3, [r3, #0]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d138      	bne.n	8014dde <create_StepCountMap_queue+0x412>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014d6c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d70:	f103 0312 	add.w	r3, r3, #18
 8014d74:	881a      	ldrh	r2, [r3, #0]
 8014d76:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d7a:	f103 0310 	add.w	r3, r3, #16
 8014d7e:	881b      	ldrh	r3, [r3, #0]
 8014d80:	494e      	ldr	r1, [pc, #312]	; (8014ebc <create_StepCountMap_queue+0x4f0>)
 8014d82:	0112      	lsls	r2, r2, #4
 8014d84:	4413      	add	r3, r2
 8014d86:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014d8a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d8e:	f103 0312 	add.w	r3, r3, #18
 8014d92:	881a      	ldrh	r2, [r3, #0]
 8014d94:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d98:	f103 0310 	add.w	r3, r3, #16
 8014d9c:	881b      	ldrh	r3, [r3, #0]
 8014d9e:	3b01      	subs	r3, #1
 8014da0:	3101      	adds	r1, #1
 8014da2:	b288      	uxth	r0, r1
 8014da4:	4945      	ldr	r1, [pc, #276]	; (8014ebc <create_StepCountMap_queue+0x4f0>)
 8014da6:	0112      	lsls	r2, r2, #4
 8014da8:	4413      	add	r3, r2
 8014daa:	4602      	mov	r2, r0
 8014dac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014db0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014db4:	f103 0312 	add.w	r3, r3, #18
 8014db8:	881a      	ldrh	r2, [r3, #0]
 8014dba:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014dbe:	4611      	mov	r1, r2
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f000 fbcd 	bl	8015560 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8014dc6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014dca:	f103 0310 	add.w	r3, r3, #16
 8014dce:	881b      	ldrh	r3, [r3, #0]
 8014dd0:	3b01      	subs	r3, #1
 8014dd2:	b29a      	uxth	r2, r3
 8014dd4:	463b      	mov	r3, r7
 8014dd6:	4611      	mov	r1, r2
 8014dd8:	4618      	mov	r0, r3
 8014dda:	f000 fbc1 	bl	8015560 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 15 && wall_east == 0) {
 8014dde:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014de2:	f103 0312 	add.w	r3, r3, #18
 8014de6:	881b      	ldrh	r3, [r3, #0]
 8014de8:	1c5a      	adds	r2, r3, #1
 8014dea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014dee:	f103 0310 	add.w	r3, r3, #16
 8014df2:	881b      	ldrh	r3, [r3, #0]
 8014df4:	4931      	ldr	r1, [pc, #196]	; (8014ebc <create_StepCountMap_queue+0x4f0>)
 8014df6:	0112      	lsls	r2, r2, #4
 8014df8:	4413      	add	r3, r2
 8014dfa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014dfe:	2bff      	cmp	r3, #255	; 0xff
 8014e00:	d146      	bne.n	8014e90 <create_StepCountMap_queue+0x4c4>
 8014e02:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e06:	f103 0312 	add.w	r3, r3, #18
 8014e0a:	881b      	ldrh	r3, [r3, #0]
 8014e0c:	2b0f      	cmp	r3, #15
 8014e0e:	d03f      	beq.n	8014e90 <create_StepCountMap_queue+0x4c4>
 8014e10:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e14:	f103 0316 	add.w	r3, r3, #22
 8014e18:	881b      	ldrh	r3, [r3, #0]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d138      	bne.n	8014e90 <create_StepCountMap_queue+0x4c4>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014e1e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e22:	f103 0312 	add.w	r3, r3, #18
 8014e26:	881a      	ldrh	r2, [r3, #0]
 8014e28:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e2c:	f103 0310 	add.w	r3, r3, #16
 8014e30:	881b      	ldrh	r3, [r3, #0]
 8014e32:	4922      	ldr	r1, [pc, #136]	; (8014ebc <create_StepCountMap_queue+0x4f0>)
 8014e34:	0112      	lsls	r2, r2, #4
 8014e36:	4413      	add	r3, r2
 8014e38:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014e3c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e40:	f103 0312 	add.w	r3, r3, #18
 8014e44:	881b      	ldrh	r3, [r3, #0]
 8014e46:	1c5a      	adds	r2, r3, #1
 8014e48:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e4c:	f103 0310 	add.w	r3, r3, #16
 8014e50:	881b      	ldrh	r3, [r3, #0]
 8014e52:	3101      	adds	r1, #1
 8014e54:	b288      	uxth	r0, r1
 8014e56:	4919      	ldr	r1, [pc, #100]	; (8014ebc <create_StepCountMap_queue+0x4f0>)
 8014e58:	0112      	lsls	r2, r2, #4
 8014e5a:	4413      	add	r3, r2
 8014e5c:	4602      	mov	r2, r0
 8014e5e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8014e62:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e66:	f103 0312 	add.w	r3, r3, #18
 8014e6a:	881b      	ldrh	r3, [r3, #0]
 8014e6c:	3301      	adds	r3, #1
 8014e6e:	b29a      	uxth	r2, r3
 8014e70:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014e74:	4611      	mov	r1, r2
 8014e76:	4618      	mov	r0, r3
 8014e78:	f000 fb72 	bl	8015560 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014e7c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e80:	f103 0310 	add.w	r3, r3, #16
 8014e84:	881a      	ldrh	r2, [r3, #0]
 8014e86:	463b      	mov	r3, r7
 8014e88:	4611      	mov	r1, r2
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	f000 fb68 	bl	8015560 <pushStack_walk>
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 0 && wall_west == 0) {
 8014e90:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e94:	f103 0312 	add.w	r3, r3, #18
 8014e98:	881b      	ldrh	r3, [r3, #0]
 8014e9a:	1e5a      	subs	r2, r3, #1
 8014e9c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ea0:	f103 0310 	add.w	r3, r3, #16
 8014ea4:	881b      	ldrh	r3, [r3, #0]
 8014ea6:	4905      	ldr	r1, [pc, #20]	; (8014ebc <create_StepCountMap_queue+0x4f0>)
 8014ea8:	0112      	lsls	r2, r2, #4
 8014eaa:	4413      	add	r3, r2
 8014eac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014eb0:	2bff      	cmp	r3, #255	; 0xff
 8014eb2:	d14c      	bne.n	8014f4e <create_StepCountMap_queue+0x582>
 8014eb4:	e004      	b.n	8014ec0 <create_StepCountMap_queue+0x4f4>
 8014eb6:	bf00      	nop
 8014eb8:	20001010 	.word	0x20001010
 8014ebc:	200011f4 	.word	0x200011f4
 8014ec0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ec4:	f103 0312 	add.w	r3, r3, #18
 8014ec8:	881b      	ldrh	r3, [r3, #0]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d03f      	beq.n	8014f4e <create_StepCountMap_queue+0x582>
 8014ece:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ed2:	f103 0314 	add.w	r3, r3, #20
 8014ed6:	881b      	ldrh	r3, [r3, #0]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d138      	bne.n	8014f4e <create_StepCountMap_queue+0x582>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014edc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ee0:	f103 0312 	add.w	r3, r3, #18
 8014ee4:	881a      	ldrh	r2, [r3, #0]
 8014ee6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014eea:	f103 0310 	add.w	r3, r3, #16
 8014eee:	881b      	ldrh	r3, [r3, #0]
 8014ef0:	4928      	ldr	r1, [pc, #160]	; (8014f94 <create_StepCountMap_queue+0x5c8>)
 8014ef2:	0112      	lsls	r2, r2, #4
 8014ef4:	4413      	add	r3, r2
 8014ef6:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014efa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014efe:	f103 0312 	add.w	r3, r3, #18
 8014f02:	881b      	ldrh	r3, [r3, #0]
 8014f04:	1e5a      	subs	r2, r3, #1
 8014f06:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014f0a:	f103 0310 	add.w	r3, r3, #16
 8014f0e:	881b      	ldrh	r3, [r3, #0]
 8014f10:	3101      	adds	r1, #1
 8014f12:	b288      	uxth	r0, r1
 8014f14:	491f      	ldr	r1, [pc, #124]	; (8014f94 <create_StepCountMap_queue+0x5c8>)
 8014f16:	0112      	lsls	r2, r2, #4
 8014f18:	4413      	add	r3, r2
 8014f1a:	4602      	mov	r2, r0
 8014f1c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014f20:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014f24:	f103 0312 	add.w	r3, r3, #18
 8014f28:	881b      	ldrh	r3, [r3, #0]
 8014f2a:	3b01      	subs	r3, #1
 8014f2c:	b29a      	uxth	r2, r3
 8014f2e:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014f32:	4611      	mov	r1, r2
 8014f34:	4618      	mov	r0, r3
 8014f36:	f000 fb13 	bl	8015560 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014f3a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014f3e:	f103 0310 	add.w	r3, r3, #16
 8014f42:	881a      	ldrh	r2, [r3, #0]
 8014f44:	463b      	mov	r3, r7
 8014f46:	4611      	mov	r1, r2
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f000 fb09 	bl	8015560 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 8014f4e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014f52:	f103 0312 	add.w	r3, r3, #18
 8014f56:	881a      	ldrh	r2, [r3, #0]
 8014f58:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014f5c:	f103 0310 	add.w	r3, r3, #16
 8014f60:	881b      	ldrh	r3, [r3, #0]
 8014f62:	490c      	ldr	r1, [pc, #48]	; (8014f94 <create_StepCountMap_queue+0x5c8>)
 8014f64:	0112      	lsls	r2, r2, #4
 8014f66:	4413      	add	r3, r2
 8014f68:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014f6c:	3301      	adds	r3, #1
 8014f6e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014f72:	f102 021c 	add.w	r2, r2, #28
 8014f76:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014f78:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014f7c:	f103 031c 	add.w	r3, r3, #28
 8014f80:	881b      	ldrh	r3, [r3, #0]
 8014f82:	2bfe      	cmp	r3, #254	; 0xfe
 8014f84:	f67f adce 	bls.w	8014b24 <create_StepCountMap_queue+0x158>

		}

}
 8014f88:	bf00      	nop
 8014f8a:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	bd80      	pop	{r7, pc}
 8014f92:	bf00      	nop
 8014f94:	200011f4 	.word	0x200011f4

08014f98 <create_StepCountMapBack_queue>:



void create_StepCountMapBack_queue(void){
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8014f9e:	b082      	sub	sp, #8
 8014fa0:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014fa8:	f102 0207 	add.w	r2, r2, #7
 8014fac:	7013      	strb	r3, [r2, #0]
 8014fae:	e033      	b.n	8015018 <create_StepCountMapBack_queue+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 8014fb0:	2300      	movs	r3, #0
 8014fb2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014fb6:	f102 0206 	add.w	r2, r2, #6
 8014fba:	7013      	strb	r3, [r2, #0]
 8014fbc:	e01a      	b.n	8014ff4 <create_StepCountMapBack_queue+0x5c>
			walk_count[xx][yy] = MAX_WALKCOUNT;
 8014fbe:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014fc2:	f103 0307 	add.w	r3, r3, #7
 8014fc6:	781a      	ldrb	r2, [r3, #0]
 8014fc8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014fcc:	f103 0306 	add.w	r3, r3, #6
 8014fd0:	781b      	ldrb	r3, [r3, #0]
 8014fd2:	4931      	ldr	r1, [pc, #196]	; (8015098 <create_StepCountMapBack_queue+0x100>)
 8014fd4:	0112      	lsls	r2, r2, #4
 8014fd6:	4413      	add	r3, r2
 8014fd8:	22ff      	movs	r2, #255	; 0xff
 8014fda:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 8014fde:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014fe2:	f103 0306 	add.w	r3, r3, #6
 8014fe6:	781b      	ldrb	r3, [r3, #0]
 8014fe8:	3301      	adds	r3, #1
 8014fea:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014fee:	f102 0206 	add.w	r2, r2, #6
 8014ff2:	7013      	strb	r3, [r2, #0]
 8014ff4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014ff8:	f103 0306 	add.w	r3, r3, #6
 8014ffc:	781b      	ldrb	r3, [r3, #0]
 8014ffe:	2b0f      	cmp	r3, #15
 8015000:	d9dd      	bls.n	8014fbe <create_StepCountMapBack_queue+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 8015002:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8015006:	f103 0307 	add.w	r3, r3, #7
 801500a:	781b      	ldrb	r3, [r3, #0]
 801500c:	3301      	adds	r3, #1
 801500e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8015012:	f102 0207 	add.w	r2, r2, #7
 8015016:	7013      	strb	r3, [r2, #0]
 8015018:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801501c:	f103 0307 	add.w	r3, r3, #7
 8015020:	781b      	ldrb	r3, [r3, #0]
 8015022:	2b0f      	cmp	r3, #15
 8015024:	d9c4      	bls.n	8014fb0 <create_StepCountMapBack_queue+0x18>
		}
	}
	initStack_walk(&stack_x);
 8015026:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801502a:	4618      	mov	r0, r3
 801502c:	f000 fa88 	bl	8015540 <initStack_walk>
	initStack_walk(&stack_y);
 8015030:	f107 0308 	add.w	r3, r7, #8
 8015034:	3b04      	subs	r3, #4
 8015036:	4618      	mov	r0, r3
 8015038:	f000 fa82 	bl	8015540 <initStack_walk>


	walk_count[0][0] = 0;
 801503c:	4b16      	ldr	r3, [pc, #88]	; (8015098 <create_StepCountMapBack_queue+0x100>)
 801503e:	2200      	movs	r2, #0
 8015040:	801a      	strh	r2, [r3, #0]
	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8015042:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8015046:	2100      	movs	r1, #0
 8015048:	4618      	mov	r0, r3
 801504a:	f000 fa89 	bl	8015560 <pushStack_walk>
 801504e:	f107 0308 	add.w	r3, r7, #8
 8015052:	3b04      	subs	r3, #4
 8015054:	2100      	movs	r1, #0
 8015056:	4618      	mov	r0, r3
 8015058:	f000 fa82 	bl	8015560 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 801505c:	2301      	movs	r3, #1
 801505e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8015062:	f102 0204 	add.w	r2, r2, #4
 8015066:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8015068:	2301      	movs	r3, #1
 801506a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801506e:	f102 0202 	add.w	r2, r2, #2
 8015072:	8013      	strh	r3, [r2, #0]
 8015074:	2301      	movs	r3, #1
 8015076:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801507a:	8013      	strh	r3, [r2, #0]
 801507c:	2301      	movs	r3, #1
 801507e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015082:	f102 021e 	add.w	r2, r2, #30
 8015086:	8013      	strh	r3, [r2, #0]
 8015088:	2301      	movs	r3, #1
 801508a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801508e:	f102 021c 	add.w	r2, r2, #28
 8015092:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8015094:	e244      	b.n	8015520 <create_StepCountMapBack_queue+0x588>
 8015096:	bf00      	nop
 8015098:	200011f4 	.word	0x200011f4

		Xcoordinate = popStack_walk(&stack_x);
 801509c:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80150a0:	4618      	mov	r0, r3
 80150a2:	f000 fa87 	bl	80155b4 <popStack_walk>
 80150a6:	4603      	mov	r3, r0
 80150a8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80150ac:	f102 021a 	add.w	r2, r2, #26
 80150b0:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 80150b2:	f107 0308 	add.w	r3, r7, #8
 80150b6:	3b04      	subs	r3, #4
 80150b8:	4618      	mov	r0, r3
 80150ba:	f000 fa7b 	bl	80155b4 <popStack_walk>
 80150be:	4603      	mov	r3, r0
 80150c0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80150c4:	f102 0218 	add.w	r2, r2, #24
 80150c8:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == MAX_WALKCOUNT_DIJKSTRA || Ycoordinate == MAX_WALKCOUNT_DIJKSTRA) {
 80150ca:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80150ce:	f103 031a 	add.w	r3, r3, #26
 80150d2:	881b      	ldrh	r3, [r3, #0]
 80150d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80150d8:	4293      	cmp	r3, r2
 80150da:	f000 8229 	beq.w	8015530 <create_StepCountMapBack_queue+0x598>
 80150de:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80150e2:	f103 0318 	add.w	r3, r3, #24
 80150e6:	881b      	ldrh	r3, [r3, #0]
 80150e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80150ec:	4293      	cmp	r3, r2
 80150ee:	f000 821f 	beq.w	8015530 <create_StepCountMapBack_queue+0x598>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 80150f2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80150f6:	f103 031a 	add.w	r3, r3, #26
 80150fa:	881b      	ldrh	r3, [r3, #0]
 80150fc:	011b      	lsls	r3, r3, #4
 80150fe:	b29a      	uxth	r2, r3
 8015100:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015104:	f103 0318 	add.w	r3, r3, #24
 8015108:	881b      	ldrh	r3, [r3, #0]
 801510a:	4413      	add	r3, r2
 801510c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015110:	f102 0216 	add.w	r2, r2, #22
 8015114:	8013      	strh	r3, [r2, #0]
		if (Ycoordinate <= 14) {
 8015116:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801511a:	f103 0318 	add.w	r3, r3, #24
 801511e:	881b      	ldrh	r3, [r3, #0]
 8015120:	2b0e      	cmp	r3, #14
 8015122:	d817      	bhi.n	8015154 <create_StepCountMapBack_queue+0x1bc>
			wall_north = wall.row[Ycoordinate] & (1 << Xcoordinate);
 8015124:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015128:	f103 0318 	add.w	r3, r3, #24
 801512c:	881b      	ldrh	r3, [r3, #0]
 801512e:	4acb      	ldr	r2, [pc, #812]	; (801545c <create_StepCountMapBack_queue+0x4c4>)
 8015130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015134:	b29a      	uxth	r2, r3
 8015136:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801513a:	f103 031a 	add.w	r3, r3, #26
 801513e:	881b      	ldrh	r3, [r3, #0]
 8015140:	2101      	movs	r1, #1
 8015142:	fa01 f303 	lsl.w	r3, r1, r3
 8015146:	b29b      	uxth	r3, r3
 8015148:	4013      	ands	r3, r2
 801514a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801514e:	f102 0202 	add.w	r2, r2, #2
 8015152:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 8015154:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015158:	f103 0318 	add.w	r3, r3, #24
 801515c:	881b      	ldrh	r3, [r3, #0]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d016      	beq.n	8015190 <create_StepCountMapBack_queue+0x1f8>
			wall_south = wall.row[Ycoordinate - 1] & (1 << Xcoordinate);
 8015162:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015166:	f103 0318 	add.w	r3, r3, #24
 801516a:	881b      	ldrh	r3, [r3, #0]
 801516c:	3b01      	subs	r3, #1
 801516e:	4abb      	ldr	r2, [pc, #748]	; (801545c <create_StepCountMapBack_queue+0x4c4>)
 8015170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015174:	b29a      	uxth	r2, r3
 8015176:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801517a:	f103 031a 	add.w	r3, r3, #26
 801517e:	881b      	ldrh	r3, [r3, #0]
 8015180:	2101      	movs	r1, #1
 8015182:	fa01 f303 	lsl.w	r3, r1, r3
 8015186:	b29b      	uxth	r3, r3
 8015188:	4013      	ands	r3, r2
 801518a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801518e:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8015190:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015194:	f103 031a 	add.w	r3, r3, #26
 8015198:	881b      	ldrh	r3, [r3, #0]
 801519a:	2b0e      	cmp	r3, #14
 801519c:	d819      	bhi.n	80151d2 <create_StepCountMapBack_queue+0x23a>
			wall_east = wall.column[Xcoordinate] & (1 << Ycoordinate);
 801519e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80151a2:	f103 031a 	add.w	r3, r3, #26
 80151a6:	881b      	ldrh	r3, [r3, #0]
 80151a8:	4aac      	ldr	r2, [pc, #688]	; (801545c <create_StepCountMapBack_queue+0x4c4>)
 80151aa:	330e      	adds	r3, #14
 80151ac:	009b      	lsls	r3, r3, #2
 80151ae:	4413      	add	r3, r2
 80151b0:	685b      	ldr	r3, [r3, #4]
 80151b2:	b29a      	uxth	r2, r3
 80151b4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80151b8:	f103 0318 	add.w	r3, r3, #24
 80151bc:	881b      	ldrh	r3, [r3, #0]
 80151be:	2101      	movs	r1, #1
 80151c0:	fa01 f303 	lsl.w	r3, r1, r3
 80151c4:	b29b      	uxth	r3, r3
 80151c6:	4013      	ands	r3, r2
 80151c8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80151cc:	f102 021e 	add.w	r2, r2, #30
 80151d0:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 80151d2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80151d6:	f103 031a 	add.w	r3, r3, #26
 80151da:	881b      	ldrh	r3, [r3, #0]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d01a      	beq.n	8015216 <create_StepCountMapBack_queue+0x27e>
			wall_west = wall.column[Xcoordinate - 1] & (1 << Ycoordinate);
 80151e0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80151e4:	f103 031a 	add.w	r3, r3, #26
 80151e8:	881b      	ldrh	r3, [r3, #0]
 80151ea:	3b01      	subs	r3, #1
 80151ec:	4a9b      	ldr	r2, [pc, #620]	; (801545c <create_StepCountMapBack_queue+0x4c4>)
 80151ee:	330e      	adds	r3, #14
 80151f0:	009b      	lsls	r3, r3, #2
 80151f2:	4413      	add	r3, r2
 80151f4:	685b      	ldr	r3, [r3, #4]
 80151f6:	b29a      	uxth	r2, r3
 80151f8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80151fc:	f103 0318 	add.w	r3, r3, #24
 8015200:	881b      	ldrh	r3, [r3, #0]
 8015202:	2101      	movs	r1, #1
 8015204:	fa01 f303 	lsl.w	r3, r1, r3
 8015208:	b29b      	uxth	r3, r3
 801520a:	4013      	ands	r3, r2
 801520c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015210:	f102 021c 	add.w	r2, r2, #28
 8015214:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == MAX_WALKCOUNT && Ycoordinate != 15 && wall_north == 0) {
 8015216:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801521a:	f103 031a 	add.w	r3, r3, #26
 801521e:	881a      	ldrh	r2, [r3, #0]
 8015220:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015224:	f103 0318 	add.w	r3, r3, #24
 8015228:	881b      	ldrh	r3, [r3, #0]
 801522a:	3301      	adds	r3, #1
 801522c:	498c      	ldr	r1, [pc, #560]	; (8015460 <create_StepCountMapBack_queue+0x4c8>)
 801522e:	0112      	lsls	r2, r2, #4
 8015230:	4413      	add	r3, r2
 8015232:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015236:	2bff      	cmp	r3, #255	; 0xff
 8015238:	d148      	bne.n	80152cc <create_StepCountMapBack_queue+0x334>
 801523a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801523e:	f103 0318 	add.w	r3, r3, #24
 8015242:	881b      	ldrh	r3, [r3, #0]
 8015244:	2b0f      	cmp	r3, #15
 8015246:	d041      	beq.n	80152cc <create_StepCountMapBack_queue+0x334>
 8015248:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801524c:	f103 0302 	add.w	r3, r3, #2
 8015250:	881b      	ldrh	r3, [r3, #0]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d13a      	bne.n	80152cc <create_StepCountMapBack_queue+0x334>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8015256:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801525a:	f103 031a 	add.w	r3, r3, #26
 801525e:	881a      	ldrh	r2, [r3, #0]
 8015260:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015264:	f103 0318 	add.w	r3, r3, #24
 8015268:	881b      	ldrh	r3, [r3, #0]
 801526a:	497d      	ldr	r1, [pc, #500]	; (8015460 <create_StepCountMapBack_queue+0x4c8>)
 801526c:	0112      	lsls	r2, r2, #4
 801526e:	4413      	add	r3, r2
 8015270:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8015274:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015278:	f103 031a 	add.w	r3, r3, #26
 801527c:	881a      	ldrh	r2, [r3, #0]
 801527e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015282:	f103 0318 	add.w	r3, r3, #24
 8015286:	881b      	ldrh	r3, [r3, #0]
 8015288:	3301      	adds	r3, #1
 801528a:	3101      	adds	r1, #1
 801528c:	b288      	uxth	r0, r1
 801528e:	4974      	ldr	r1, [pc, #464]	; (8015460 <create_StepCountMapBack_queue+0x4c8>)
 8015290:	0112      	lsls	r2, r2, #4
 8015292:	4413      	add	r3, r2
 8015294:	4602      	mov	r2, r0
 8015296:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801529a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801529e:	f103 031a 	add.w	r3, r3, #26
 80152a2:	881a      	ldrh	r2, [r3, #0]
 80152a4:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80152a8:	4611      	mov	r1, r2
 80152aa:	4618      	mov	r0, r3
 80152ac:	f000 f958 	bl	8015560 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 80152b0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80152b4:	f103 0318 	add.w	r3, r3, #24
 80152b8:	881b      	ldrh	r3, [r3, #0]
 80152ba:	3301      	adds	r3, #1
 80152bc:	b29a      	uxth	r2, r3
 80152be:	f107 0308 	add.w	r3, r7, #8
 80152c2:	3b04      	subs	r3, #4
 80152c4:	4611      	mov	r1, r2
 80152c6:	4618      	mov	r0, r3
 80152c8:	f000 f94a 	bl	8015560 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == MAX_WALKCOUNT && Ycoordinate != 0 && wall_south == 0) {
 80152cc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80152d0:	f103 031a 	add.w	r3, r3, #26
 80152d4:	881a      	ldrh	r2, [r3, #0]
 80152d6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80152da:	f103 0318 	add.w	r3, r3, #24
 80152de:	881b      	ldrh	r3, [r3, #0]
 80152e0:	3b01      	subs	r3, #1
 80152e2:	495f      	ldr	r1, [pc, #380]	; (8015460 <create_StepCountMapBack_queue+0x4c8>)
 80152e4:	0112      	lsls	r2, r2, #4
 80152e6:	4413      	add	r3, r2
 80152e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80152ec:	2bff      	cmp	r3, #255	; 0xff
 80152ee:	d146      	bne.n	801537e <create_StepCountMapBack_queue+0x3e6>
 80152f0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80152f4:	f103 0318 	add.w	r3, r3, #24
 80152f8:	881b      	ldrh	r3, [r3, #0]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d03f      	beq.n	801537e <create_StepCountMapBack_queue+0x3e6>
 80152fe:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8015302:	881b      	ldrh	r3, [r3, #0]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d13a      	bne.n	801537e <create_StepCountMapBack_queue+0x3e6>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8015308:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801530c:	f103 031a 	add.w	r3, r3, #26
 8015310:	881a      	ldrh	r2, [r3, #0]
 8015312:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015316:	f103 0318 	add.w	r3, r3, #24
 801531a:	881b      	ldrh	r3, [r3, #0]
 801531c:	4950      	ldr	r1, [pc, #320]	; (8015460 <create_StepCountMapBack_queue+0x4c8>)
 801531e:	0112      	lsls	r2, r2, #4
 8015320:	4413      	add	r3, r2
 8015322:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8015326:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801532a:	f103 031a 	add.w	r3, r3, #26
 801532e:	881a      	ldrh	r2, [r3, #0]
 8015330:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015334:	f103 0318 	add.w	r3, r3, #24
 8015338:	881b      	ldrh	r3, [r3, #0]
 801533a:	3b01      	subs	r3, #1
 801533c:	3101      	adds	r1, #1
 801533e:	b288      	uxth	r0, r1
 8015340:	4947      	ldr	r1, [pc, #284]	; (8015460 <create_StepCountMapBack_queue+0x4c8>)
 8015342:	0112      	lsls	r2, r2, #4
 8015344:	4413      	add	r3, r2
 8015346:	4602      	mov	r2, r0
 8015348:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801534c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015350:	f103 031a 	add.w	r3, r3, #26
 8015354:	881a      	ldrh	r2, [r3, #0]
 8015356:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801535a:	4611      	mov	r1, r2
 801535c:	4618      	mov	r0, r3
 801535e:	f000 f8ff 	bl	8015560 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8015362:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015366:	f103 0318 	add.w	r3, r3, #24
 801536a:	881b      	ldrh	r3, [r3, #0]
 801536c:	3b01      	subs	r3, #1
 801536e:	b29a      	uxth	r2, r3
 8015370:	f107 0308 	add.w	r3, r7, #8
 8015374:	3b04      	subs	r3, #4
 8015376:	4611      	mov	r1, r2
 8015378:	4618      	mov	r0, r3
 801537a:	f000 f8f1 	bl	8015560 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 15 && wall_east == 0) {
 801537e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015382:	f103 031a 	add.w	r3, r3, #26
 8015386:	881b      	ldrh	r3, [r3, #0]
 8015388:	1c5a      	adds	r2, r3, #1
 801538a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801538e:	f103 0318 	add.w	r3, r3, #24
 8015392:	881b      	ldrh	r3, [r3, #0]
 8015394:	4932      	ldr	r1, [pc, #200]	; (8015460 <create_StepCountMapBack_queue+0x4c8>)
 8015396:	0112      	lsls	r2, r2, #4
 8015398:	4413      	add	r3, r2
 801539a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801539e:	2bff      	cmp	r3, #255	; 0xff
 80153a0:	d148      	bne.n	8015434 <create_StepCountMapBack_queue+0x49c>
 80153a2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80153a6:	f103 031a 	add.w	r3, r3, #26
 80153aa:	881b      	ldrh	r3, [r3, #0]
 80153ac:	2b0f      	cmp	r3, #15
 80153ae:	d041      	beq.n	8015434 <create_StepCountMapBack_queue+0x49c>
 80153b0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80153b4:	f103 031e 	add.w	r3, r3, #30
 80153b8:	881b      	ldrh	r3, [r3, #0]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d13a      	bne.n	8015434 <create_StepCountMapBack_queue+0x49c>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80153be:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80153c2:	f103 031a 	add.w	r3, r3, #26
 80153c6:	881a      	ldrh	r2, [r3, #0]
 80153c8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80153cc:	f103 0318 	add.w	r3, r3, #24
 80153d0:	881b      	ldrh	r3, [r3, #0]
 80153d2:	4923      	ldr	r1, [pc, #140]	; (8015460 <create_StepCountMapBack_queue+0x4c8>)
 80153d4:	0112      	lsls	r2, r2, #4
 80153d6:	4413      	add	r3, r2
 80153d8:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80153dc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80153e0:	f103 031a 	add.w	r3, r3, #26
 80153e4:	881b      	ldrh	r3, [r3, #0]
 80153e6:	1c5a      	adds	r2, r3, #1
 80153e8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80153ec:	f103 0318 	add.w	r3, r3, #24
 80153f0:	881b      	ldrh	r3, [r3, #0]
 80153f2:	3101      	adds	r1, #1
 80153f4:	b288      	uxth	r0, r1
 80153f6:	491a      	ldr	r1, [pc, #104]	; (8015460 <create_StepCountMapBack_queue+0x4c8>)
 80153f8:	0112      	lsls	r2, r2, #4
 80153fa:	4413      	add	r3, r2
 80153fc:	4602      	mov	r2, r0
 80153fe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8015402:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015406:	f103 031a 	add.w	r3, r3, #26
 801540a:	881b      	ldrh	r3, [r3, #0]
 801540c:	3301      	adds	r3, #1
 801540e:	b29a      	uxth	r2, r3
 8015410:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8015414:	4611      	mov	r1, r2
 8015416:	4618      	mov	r0, r3
 8015418:	f000 f8a2 	bl	8015560 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 801541c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015420:	f103 0318 	add.w	r3, r3, #24
 8015424:	881a      	ldrh	r2, [r3, #0]
 8015426:	f107 0308 	add.w	r3, r7, #8
 801542a:	3b04      	subs	r3, #4
 801542c:	4611      	mov	r1, r2
 801542e:	4618      	mov	r0, r3
 8015430:	f000 f896 	bl	8015560 <pushStack_walk>
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 0 && wall_west == 0) {
 8015434:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015438:	f103 031a 	add.w	r3, r3, #26
 801543c:	881b      	ldrh	r3, [r3, #0]
 801543e:	1e5a      	subs	r2, r3, #1
 8015440:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015444:	f103 0318 	add.w	r3, r3, #24
 8015448:	881b      	ldrh	r3, [r3, #0]
 801544a:	4905      	ldr	r1, [pc, #20]	; (8015460 <create_StepCountMapBack_queue+0x4c8>)
 801544c:	0112      	lsls	r2, r2, #4
 801544e:	4413      	add	r3, r2
 8015450:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015454:	2bff      	cmp	r3, #255	; 0xff
 8015456:	d14e      	bne.n	80154f6 <create_StepCountMapBack_queue+0x55e>
 8015458:	e004      	b.n	8015464 <create_StepCountMapBack_queue+0x4cc>
 801545a:	bf00      	nop
 801545c:	20001010 	.word	0x20001010
 8015460:	200011f4 	.word	0x200011f4
 8015464:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015468:	f103 031a 	add.w	r3, r3, #26
 801546c:	881b      	ldrh	r3, [r3, #0]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d041      	beq.n	80154f6 <create_StepCountMapBack_queue+0x55e>
 8015472:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015476:	f103 031c 	add.w	r3, r3, #28
 801547a:	881b      	ldrh	r3, [r3, #0]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d13a      	bne.n	80154f6 <create_StepCountMapBack_queue+0x55e>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8015480:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015484:	f103 031a 	add.w	r3, r3, #26
 8015488:	881a      	ldrh	r2, [r3, #0]
 801548a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801548e:	f103 0318 	add.w	r3, r3, #24
 8015492:	881b      	ldrh	r3, [r3, #0]
 8015494:	4929      	ldr	r1, [pc, #164]	; (801553c <create_StepCountMapBack_queue+0x5a4>)
 8015496:	0112      	lsls	r2, r2, #4
 8015498:	4413      	add	r3, r2
 801549a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 801549e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80154a2:	f103 031a 	add.w	r3, r3, #26
 80154a6:	881b      	ldrh	r3, [r3, #0]
 80154a8:	1e5a      	subs	r2, r3, #1
 80154aa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80154ae:	f103 0318 	add.w	r3, r3, #24
 80154b2:	881b      	ldrh	r3, [r3, #0]
 80154b4:	3101      	adds	r1, #1
 80154b6:	b288      	uxth	r0, r1
 80154b8:	4920      	ldr	r1, [pc, #128]	; (801553c <create_StepCountMapBack_queue+0x5a4>)
 80154ba:	0112      	lsls	r2, r2, #4
 80154bc:	4413      	add	r3, r2
 80154be:	4602      	mov	r2, r0
 80154c0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 80154c4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80154c8:	f103 031a 	add.w	r3, r3, #26
 80154cc:	881b      	ldrh	r3, [r3, #0]
 80154ce:	3b01      	subs	r3, #1
 80154d0:	b29a      	uxth	r2, r3
 80154d2:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80154d6:	4611      	mov	r1, r2
 80154d8:	4618      	mov	r0, r3
 80154da:	f000 f841 	bl	8015560 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 80154de:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80154e2:	f103 0318 	add.w	r3, r3, #24
 80154e6:	881a      	ldrh	r2, [r3, #0]
 80154e8:	f107 0308 	add.w	r3, r7, #8
 80154ec:	3b04      	subs	r3, #4
 80154ee:	4611      	mov	r1, r2
 80154f0:	4618      	mov	r0, r3
 80154f2:	f000 f835 	bl	8015560 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 80154f6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80154fa:	f103 031a 	add.w	r3, r3, #26
 80154fe:	881a      	ldrh	r2, [r3, #0]
 8015500:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015504:	f103 0318 	add.w	r3, r3, #24
 8015508:	881b      	ldrh	r3, [r3, #0]
 801550a:	490c      	ldr	r1, [pc, #48]	; (801553c <create_StepCountMapBack_queue+0x5a4>)
 801550c:	0112      	lsls	r2, r2, #4
 801550e:	4413      	add	r3, r2
 8015510:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015514:	3301      	adds	r3, #1
 8015516:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801551a:	f102 0204 	add.w	r2, r2, #4
 801551e:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8015520:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8015524:	f103 0304 	add.w	r3, r3, #4
 8015528:	881b      	ldrh	r3, [r3, #0]
 801552a:	2bfe      	cmp	r3, #254	; 0xfe
 801552c:	f67f adb6 	bls.w	801509c <create_StepCountMapBack_queue+0x104>

		}

}
 8015530:	bf00      	nop
 8015532:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8015536:	3708      	adds	r7, #8
 8015538:	46bd      	mov	sp, r7
 801553a:	bd80      	pop	{r7, pc}
 801553c:	200011f4 	.word	0x200011f4

08015540 <initStack_walk>:




void initStack_walk(STACK_T *stack){
 8015540:	b480      	push	{r7}
 8015542:	b083      	sub	sp, #12
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
//	for(int i=0;i<=MAX_QUEUE_NUM-1;i++){
//		stack->data[i] = 0;
//	}
    /* スタックを空に設定 */
	stack->head = 0;
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	2200      	movs	r2, #0
 801554c:	601a      	str	r2, [r3, #0]
    stack->tail = 0;
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	2200      	movs	r2, #0
 8015552:	605a      	str	r2, [r3, #4]
}
 8015554:	bf00      	nop
 8015556:	370c      	adds	r7, #12
 8015558:	46bd      	mov	sp, r7
 801555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801555e:	4770      	bx	lr

08015560 <pushStack_walk>:



void pushStack_walk(STACK_T *stack, unsigned short input){
 8015560:	b580      	push	{r7, lr}
 8015562:	b082      	sub	sp, #8
 8015564:	af00      	add	r7, sp, #0
 8015566:	6078      	str	r0, [r7, #4]
 8015568:	460b      	mov	r3, r1
 801556a:	807b      	strh	r3, [r7, #2]

    /* データをデータの最後尾の１つ後ろに格納 */
    stack->data[stack->tail] = input;
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	685a      	ldr	r2, [r3, #4]
 8015570:	8879      	ldrh	r1, [r7, #2]
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	3202      	adds	r2, #2
 8015576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* データの最後尾を１つ後ろに移動 */
    stack->tail = stack->tail + 1;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	685b      	ldr	r3, [r3, #4]
 801557e:	1c5a      	adds	r2, r3, #1
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	605a      	str	r2, [r3, #4]

    /* 巡回シフト */
    if(stack->tail == MAX_QUEUE_NUM) stack->tail = 0;
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	685b      	ldr	r3, [r3, #4]
 8015588:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801558c:	d102      	bne.n	8015594 <pushStack_walk+0x34>
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	2200      	movs	r2, #0
 8015592:	605a      	str	r2, [r3, #4]

    /* スタックが満杯なら何もせず関数終了 */
    if(stack->tail == stack->head ){
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	685a      	ldr	r2, [r3, #4]
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	429a      	cmp	r2, r3
 801559e:	d103      	bne.n	80155a8 <pushStack_walk+0x48>
    	printf("stack_full\n");
 80155a0:	4803      	ldr	r0, [pc, #12]	; (80155b0 <pushStack_walk+0x50>)
 80155a2:	f00c f895 	bl	80216d0 <puts>
        return;
 80155a6:	bf00      	nop
    }
}
 80155a8:	3708      	adds	r7, #8
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd80      	pop	{r7, pc}
 80155ae:	bf00      	nop
 80155b0:	08025060 	.word	0x08025060

080155b4 <popStack_walk>:


unsigned short popStack_walk(STACK_T *stack){
 80155b4:	b480      	push	{r7}
 80155b6:	b085      	sub	sp, #20
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
    unsigned short ret = 0;
 80155bc:	2300      	movs	r3, #0
 80155be:	81fb      	strh	r3, [r7, #14]

    /* スタックが空なら何もせずに関数終了 */
    if(stack->tail == stack->head){
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	685a      	ldr	r2, [r3, #4]
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	429a      	cmp	r2, r3
 80155ca:	d102      	bne.n	80155d2 <popStack_walk+0x1e>
    	//printf("stack_empty\n");
        return MAX_WALKCOUNT_DIJKSTRA;
 80155cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80155d0:	e014      	b.n	80155fc <popStack_walk+0x48>
    }

    /* データの最前列からデータを取得 */
    ret = stack->data[stack->head];
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	681a      	ldr	r2, [r3, #0]
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	3202      	adds	r2, #2
 80155da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155de:	81fb      	strh	r3, [r7, #14]

    /* データの最前列を１つ前にずらす */
    stack->head = stack->head + 1;
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	1c5a      	adds	r2, r3, #1
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	601a      	str	r2, [r3, #0]

    /* 巡回シフト */
    if(stack->head == MAX_QUEUE_NUM) stack->head = 0;
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80155f2:	d102      	bne.n	80155fa <popStack_walk+0x46>
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	2200      	movs	r2, #0
 80155f8:	601a      	str	r2, [r3, #0]

    /* 取得したデータを返却 */
    return ret;
 80155fa:	89fb      	ldrh	r3, [r7, #14]
}
 80155fc:	4618      	mov	r0, r3
 80155fe:	3714      	adds	r7, #20
 8015600:	46bd      	mov	sp, r7
 8015602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015606:	4770      	bx	lr

08015608 <maze_display>:

void maze_makerback(int direction, int front_SEN, int left_SEN, int right_SEN,
		int x, int y) {}


void maze_display(void) {
 8015608:	b580      	push	{r7, lr}
 801560a:	b082      	sub	sp, #8
 801560c:	af00      	add	r7, sp, #0

	int tt = 14;
 801560e:	230e      	movs	r3, #14
 8015610:	607b      	str	r3, [r7, #4]
	int ss = 0;
 8015612:	2300      	movs	r3, #0
 8015614:	603b      	str	r3, [r7, #0]

	printf(
 8015616:	487c      	ldr	r0, [pc, #496]	; (8015808 <maze_display+0x200>)
 8015618:	f00c f85a 	bl	80216d0 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 801561c:	230e      	movs	r3, #14
 801561e:	607b      	str	r3, [r7, #4]
 8015620:	e06a      	b.n	80156f8 <maze_display+0xf0>

		printf("|%5d", walk_count[0][tt + 1]);
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	3301      	adds	r3, #1
 8015626:	4a79      	ldr	r2, [pc, #484]	; (801580c <maze_display+0x204>)
 8015628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801562c:	4619      	mov	r1, r3
 801562e:	4878      	ldr	r0, [pc, #480]	; (8015810 <maze_display+0x208>)
 8015630:	f00b ffb2 	bl	8021598 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015634:	2300      	movs	r3, #0
 8015636:	603b      	str	r3, [r7, #0]
 8015638:	e030      	b.n	801569c <maze_display+0x94>
			if ((wall.column[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 801563a:	4a76      	ldr	r2, [pc, #472]	; (8015814 <maze_display+0x20c>)
 801563c:	683b      	ldr	r3, [r7, #0]
 801563e:	330e      	adds	r3, #14
 8015640:	009b      	lsls	r3, r3, #2
 8015642:	4413      	add	r3, r2
 8015644:	685b      	ldr	r3, [r3, #4]
 8015646:	687a      	ldr	r2, [r7, #4]
 8015648:	3201      	adds	r2, #1
 801564a:	2101      	movs	r1, #1
 801564c:	fa01 f202 	lsl.w	r2, r1, r2
 8015650:	4013      	ands	r3, r2
 8015652:	687a      	ldr	r2, [r7, #4]
 8015654:	3201      	adds	r2, #1
 8015656:	2101      	movs	r1, #1
 8015658:	fa01 f202 	lsl.w	r2, r1, r2
 801565c:	4293      	cmp	r3, r2
 801565e:	d10d      	bne.n	801567c <maze_display+0x74>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 8015660:	683b      	ldr	r3, [r7, #0]
 8015662:	1c5a      	adds	r2, r3, #1
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	3301      	adds	r3, #1
 8015668:	4968      	ldr	r1, [pc, #416]	; (801580c <maze_display+0x204>)
 801566a:	0112      	lsls	r2, r2, #4
 801566c:	4413      	add	r3, r2
 801566e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015672:	4619      	mov	r1, r3
 8015674:	4866      	ldr	r0, [pc, #408]	; (8015810 <maze_display+0x208>)
 8015676:	f00b ff8f 	bl	8021598 <iprintf>
 801567a:	e00c      	b.n	8015696 <maze_display+0x8e>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 801567c:	683b      	ldr	r3, [r7, #0]
 801567e:	1c5a      	adds	r2, r3, #1
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	3301      	adds	r3, #1
 8015684:	4961      	ldr	r1, [pc, #388]	; (801580c <maze_display+0x204>)
 8015686:	0112      	lsls	r2, r2, #4
 8015688:	4413      	add	r3, r2
 801568a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801568e:	4619      	mov	r1, r3
 8015690:	4861      	ldr	r0, [pc, #388]	; (8015818 <maze_display+0x210>)
 8015692:	f00b ff81 	bl	8021598 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015696:	683b      	ldr	r3, [r7, #0]
 8015698:	3301      	adds	r3, #1
 801569a:	603b      	str	r3, [r7, #0]
 801569c:	683b      	ldr	r3, [r7, #0]
 801569e:	2b0e      	cmp	r3, #14
 80156a0:	ddcb      	ble.n	801563a <maze_display+0x32>
			}
		}
		printf("|\n");
 80156a2:	485e      	ldr	r0, [pc, #376]	; (801581c <maze_display+0x214>)
 80156a4:	f00c f814 	bl	80216d0 <puts>
		if (tt <= -1) {
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	db29      	blt.n	8015702 <maze_display+0xfa>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 80156ae:	2300      	movs	r3, #0
 80156b0:	603b      	str	r3, [r7, #0]
 80156b2:	e018      	b.n	80156e6 <maze_display+0xde>
			if ((wall.row[tt] & (1 << ss)) == (1 << ss)){
 80156b4:	4a57      	ldr	r2, [pc, #348]	; (8015814 <maze_display+0x20c>)
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80156bc:	2101      	movs	r1, #1
 80156be:	683a      	ldr	r2, [r7, #0]
 80156c0:	fa01 f202 	lsl.w	r2, r1, r2
 80156c4:	4013      	ands	r3, r2
 80156c6:	2101      	movs	r1, #1
 80156c8:	683a      	ldr	r2, [r7, #0]
 80156ca:	fa01 f202 	lsl.w	r2, r1, r2
 80156ce:	4293      	cmp	r3, r2
 80156d0:	d103      	bne.n	80156da <maze_display+0xd2>
				printf("+-----");
 80156d2:	4853      	ldr	r0, [pc, #332]	; (8015820 <maze_display+0x218>)
 80156d4:	f00b ff60 	bl	8021598 <iprintf>
 80156d8:	e002      	b.n	80156e0 <maze_display+0xd8>
			}else{
				printf("+     ");
 80156da:	4852      	ldr	r0, [pc, #328]	; (8015824 <maze_display+0x21c>)
 80156dc:	f00b ff5c 	bl	8021598 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 80156e0:	683b      	ldr	r3, [r7, #0]
 80156e2:	3301      	adds	r3, #1
 80156e4:	603b      	str	r3, [r7, #0]
 80156e6:	683b      	ldr	r3, [r7, #0]
 80156e8:	2b0f      	cmp	r3, #15
 80156ea:	dde3      	ble.n	80156b4 <maze_display+0xac>
			}
		}

		printf("+\n");
 80156ec:	484e      	ldr	r0, [pc, #312]	; (8015828 <maze_display+0x220>)
 80156ee:	f00b ffef 	bl	80216d0 <puts>
	for (tt = 14;tt >= -1;tt--){
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	3b01      	subs	r3, #1
 80156f6:	607b      	str	r3, [r7, #4]
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156fe:	da90      	bge.n	8015622 <maze_display+0x1a>
 8015700:	e000      	b.n	8015704 <maze_display+0xfc>
			break;
 8015702:	bf00      	nop

	}

	printf(
 8015704:	4849      	ldr	r0, [pc, #292]	; (801582c <maze_display+0x224>)
 8015706:	f00b ffe3 	bl	80216d0 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 801570a:	483f      	ldr	r0, [pc, #252]	; (8015808 <maze_display+0x200>)
 801570c:	f00b ffe0 	bl	80216d0 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");

	for (tt = 14;tt >= -1;tt--){
 8015710:	230e      	movs	r3, #14
 8015712:	607b      	str	r3, [r7, #4]
 8015714:	e06b      	b.n	80157ee <maze_display+0x1e6>
		printf("|%5d", walk_count[0][tt + 1]);
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	3301      	adds	r3, #1
 801571a:	4a3c      	ldr	r2, [pc, #240]	; (801580c <maze_display+0x204>)
 801571c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015720:	4619      	mov	r1, r3
 8015722:	483b      	ldr	r0, [pc, #236]	; (8015810 <maze_display+0x208>)
 8015724:	f00b ff38 	bl	8021598 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015728:	2300      	movs	r3, #0
 801572a:	603b      	str	r3, [r7, #0]
 801572c:	e030      	b.n	8015790 <maze_display+0x188>
			if ((wall.column_look[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 801572e:	4a39      	ldr	r2, [pc, #228]	; (8015814 <maze_display+0x20c>)
 8015730:	683b      	ldr	r3, [r7, #0]
 8015732:	332c      	adds	r3, #44	; 0x2c
 8015734:	009b      	lsls	r3, r3, #2
 8015736:	4413      	add	r3, r2
 8015738:	685b      	ldr	r3, [r3, #4]
 801573a:	687a      	ldr	r2, [r7, #4]
 801573c:	3201      	adds	r2, #1
 801573e:	2101      	movs	r1, #1
 8015740:	fa01 f202 	lsl.w	r2, r1, r2
 8015744:	4013      	ands	r3, r2
 8015746:	687a      	ldr	r2, [r7, #4]
 8015748:	3201      	adds	r2, #1
 801574a:	2101      	movs	r1, #1
 801574c:	fa01 f202 	lsl.w	r2, r1, r2
 8015750:	4293      	cmp	r3, r2
 8015752:	d10d      	bne.n	8015770 <maze_display+0x168>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 8015754:	683b      	ldr	r3, [r7, #0]
 8015756:	1c5a      	adds	r2, r3, #1
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	3301      	adds	r3, #1
 801575c:	492b      	ldr	r1, [pc, #172]	; (801580c <maze_display+0x204>)
 801575e:	0112      	lsls	r2, r2, #4
 8015760:	4413      	add	r3, r2
 8015762:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015766:	4619      	mov	r1, r3
 8015768:	4829      	ldr	r0, [pc, #164]	; (8015810 <maze_display+0x208>)
 801576a:	f00b ff15 	bl	8021598 <iprintf>
 801576e:	e00c      	b.n	801578a <maze_display+0x182>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 8015770:	683b      	ldr	r3, [r7, #0]
 8015772:	1c5a      	adds	r2, r3, #1
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	3301      	adds	r3, #1
 8015778:	4924      	ldr	r1, [pc, #144]	; (801580c <maze_display+0x204>)
 801577a:	0112      	lsls	r2, r2, #4
 801577c:	4413      	add	r3, r2
 801577e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015782:	4619      	mov	r1, r3
 8015784:	4824      	ldr	r0, [pc, #144]	; (8015818 <maze_display+0x210>)
 8015786:	f00b ff07 	bl	8021598 <iprintf>
		for(ss = 0;ss < 15;ss++){
 801578a:	683b      	ldr	r3, [r7, #0]
 801578c:	3301      	adds	r3, #1
 801578e:	603b      	str	r3, [r7, #0]
 8015790:	683b      	ldr	r3, [r7, #0]
 8015792:	2b0e      	cmp	r3, #14
 8015794:	ddcb      	ble.n	801572e <maze_display+0x126>
			}
		}
		printf("|\n");
 8015796:	4821      	ldr	r0, [pc, #132]	; (801581c <maze_display+0x214>)
 8015798:	f00b ff9a 	bl	80216d0 <puts>
		if (tt <= -1) {
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	db2a      	blt.n	80157f8 <maze_display+0x1f0>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 80157a2:	2300      	movs	r3, #0
 80157a4:	603b      	str	r3, [r7, #0]
 80157a6:	e019      	b.n	80157dc <maze_display+0x1d4>
			if ((wall.row_look[tt] & (1 << ss)) == (1 << ss)){
 80157a8:	4a1a      	ldr	r2, [pc, #104]	; (8015814 <maze_display+0x20c>)
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	331e      	adds	r3, #30
 80157ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80157b2:	2101      	movs	r1, #1
 80157b4:	683a      	ldr	r2, [r7, #0]
 80157b6:	fa01 f202 	lsl.w	r2, r1, r2
 80157ba:	4013      	ands	r3, r2
 80157bc:	2101      	movs	r1, #1
 80157be:	683a      	ldr	r2, [r7, #0]
 80157c0:	fa01 f202 	lsl.w	r2, r1, r2
 80157c4:	4293      	cmp	r3, r2
 80157c6:	d103      	bne.n	80157d0 <maze_display+0x1c8>
				printf("+-----");
 80157c8:	4815      	ldr	r0, [pc, #84]	; (8015820 <maze_display+0x218>)
 80157ca:	f00b fee5 	bl	8021598 <iprintf>
 80157ce:	e002      	b.n	80157d6 <maze_display+0x1ce>
			}else{
				printf("+     ");
 80157d0:	4814      	ldr	r0, [pc, #80]	; (8015824 <maze_display+0x21c>)
 80157d2:	f00b fee1 	bl	8021598 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 80157d6:	683b      	ldr	r3, [r7, #0]
 80157d8:	3301      	adds	r3, #1
 80157da:	603b      	str	r3, [r7, #0]
 80157dc:	683b      	ldr	r3, [r7, #0]
 80157de:	2b0f      	cmp	r3, #15
 80157e0:	dde2      	ble.n	80157a8 <maze_display+0x1a0>
			}
		}
		printf("+\n");
 80157e2:	4811      	ldr	r0, [pc, #68]	; (8015828 <maze_display+0x220>)
 80157e4:	f00b ff74 	bl	80216d0 <puts>
	for (tt = 14;tt >= -1;tt--){
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	3b01      	subs	r3, #1
 80157ec:	607b      	str	r3, [r7, #4]
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157f4:	da8f      	bge.n	8015716 <maze_display+0x10e>
 80157f6:	e000      	b.n	80157fa <maze_display+0x1f2>
			break;
 80157f8:	bf00      	nop
	}

	printf(
 80157fa:	480c      	ldr	r0, [pc, #48]	; (801582c <maze_display+0x224>)
 80157fc:	f00b ff68 	bl	80216d0 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

}
 8015800:	bf00      	nop
 8015802:	3708      	adds	r7, #8
 8015804:	46bd      	mov	sp, r7
 8015806:	bd80      	pop	{r7, pc}
 8015808:	0802506c 	.word	0x0802506c
 801580c:	200011f4 	.word	0x200011f4
 8015810:	080250d0 	.word	0x080250d0
 8015814:	20001010 	.word	0x20001010
 8015818:	080250d8 	.word	0x080250d8
 801581c:	080250e0 	.word	0x080250e0
 8015820:	080250e4 	.word	0x080250e4
 8015824:	080250ec 	.word	0x080250ec
 8015828:	080250f4 	.word	0x080250f4
 801582c:	080250f8 	.word	0x080250f8

08015830 <maze_display_Dijkstra>:





void maze_display_Dijkstra(void) {
 8015830:	b580      	push	{r7, lr}
 8015832:	b082      	sub	sp, #8
 8015834:	af00      	add	r7, sp, #0

	int tt = 14;
 8015836:	230e      	movs	r3, #14
 8015838:	607b      	str	r3, [r7, #4]
	int ss = 0;
 801583a:	2300      	movs	r3, #0
 801583c:	603b      	str	r3, [r7, #0]

	printf(
 801583e:	4863      	ldr	r0, [pc, #396]	; (80159cc <maze_display_Dijkstra+0x19c>)
 8015840:	f00b ff46 	bl	80216d0 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8015844:	230e      	movs	r3, #14
 8015846:	607b      	str	r3, [r7, #4]
 8015848:	e066      	b.n	8015918 <maze_display_Dijkstra+0xe8>

		printf("|   ");//walk_count[tt + 1]
 801584a:	4861      	ldr	r0, [pc, #388]	; (80159d0 <maze_display_Dijkstra+0x1a0>)
 801584c:	f00b fea4 	bl	8021598 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015850:	2300      	movs	r3, #0
 8015852:	603b      	str	r3, [r7, #0]
 8015854:	e028      	b.n	80158a8 <maze_display_Dijkstra+0x78>
			if ((wall.column[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8015856:	4a5f      	ldr	r2, [pc, #380]	; (80159d4 <maze_display_Dijkstra+0x1a4>)
 8015858:	683b      	ldr	r3, [r7, #0]
 801585a:	330e      	adds	r3, #14
 801585c:	009b      	lsls	r3, r3, #2
 801585e:	4413      	add	r3, r2
 8015860:	685b      	ldr	r3, [r3, #4]
 8015862:	687a      	ldr	r2, [r7, #4]
 8015864:	3201      	adds	r2, #1
 8015866:	2101      	movs	r1, #1
 8015868:	fa01 f202 	lsl.w	r2, r1, r2
 801586c:	4013      	ands	r3, r2
 801586e:	687a      	ldr	r2, [r7, #4]
 8015870:	3201      	adds	r2, #1
 8015872:	2101      	movs	r1, #1
 8015874:	fa01 f202 	lsl.w	r2, r1, r2
 8015878:	4293      	cmp	r3, r2
 801587a:	d103      	bne.n	8015884 <maze_display_Dijkstra+0x54>
				printf("  |   ");
 801587c:	4856      	ldr	r0, [pc, #344]	; (80159d8 <maze_display_Dijkstra+0x1a8>)
 801587e:	f00b fe8b 	bl	8021598 <iprintf>
 8015882:	e00e      	b.n	80158a2 <maze_display_Dijkstra+0x72>
			}else{
				printf("%5d ", Dijkstra.column_count[(tt + 1)][ss]);
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	1c5a      	adds	r2, r3, #1
 8015888:	4954      	ldr	r1, [pc, #336]	; (80159dc <maze_display_Dijkstra+0x1ac>)
 801588a:	4613      	mov	r3, r2
 801588c:	011b      	lsls	r3, r3, #4
 801588e:	1a9b      	subs	r3, r3, r2
 8015890:	683a      	ldr	r2, [r7, #0]
 8015892:	4413      	add	r3, r2
 8015894:	33f0      	adds	r3, #240	; 0xf0
 8015896:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801589a:	4619      	mov	r1, r3
 801589c:	4850      	ldr	r0, [pc, #320]	; (80159e0 <maze_display_Dijkstra+0x1b0>)
 801589e:	f00b fe7b 	bl	8021598 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80158a2:	683b      	ldr	r3, [r7, #0]
 80158a4:	3301      	adds	r3, #1
 80158a6:	603b      	str	r3, [r7, #0]
 80158a8:	683b      	ldr	r3, [r7, #0]
 80158aa:	2b0e      	cmp	r3, #14
 80158ac:	ddd3      	ble.n	8015856 <maze_display_Dijkstra+0x26>
			}
		}
		printf("   |\n");
 80158ae:	484d      	ldr	r0, [pc, #308]	; (80159e4 <maze_display_Dijkstra+0x1b4>)
 80158b0:	f00b ff0e 	bl	80216d0 <puts>
		if (tt <= -1) {
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	db33      	blt.n	8015922 <maze_display_Dijkstra+0xf2>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 80158ba:	2300      	movs	r3, #0
 80158bc:	603b      	str	r3, [r7, #0]
 80158be:	e022      	b.n	8015906 <maze_display_Dijkstra+0xd6>
			if ((wall.row[tt] & (1 << ss)) == (1 << ss)){
 80158c0:	4a44      	ldr	r2, [pc, #272]	; (80159d4 <maze_display_Dijkstra+0x1a4>)
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80158c8:	2101      	movs	r1, #1
 80158ca:	683a      	ldr	r2, [r7, #0]
 80158cc:	fa01 f202 	lsl.w	r2, r1, r2
 80158d0:	4013      	ands	r3, r2
 80158d2:	2101      	movs	r1, #1
 80158d4:	683a      	ldr	r2, [r7, #0]
 80158d6:	fa01 f202 	lsl.w	r2, r1, r2
 80158da:	4293      	cmp	r3, r2
 80158dc:	d103      	bne.n	80158e6 <maze_display_Dijkstra+0xb6>
				printf("+-----");
 80158de:	4842      	ldr	r0, [pc, #264]	; (80159e8 <maze_display_Dijkstra+0x1b8>)
 80158e0:	f00b fe5a 	bl	8021598 <iprintf>
 80158e4:	e00c      	b.n	8015900 <maze_display_Dijkstra+0xd0>
			}else{
				printf("+%5d",Dijkstra.row_count[ss][tt]);
 80158e6:	493d      	ldr	r1, [pc, #244]	; (80159dc <maze_display_Dijkstra+0x1ac>)
 80158e8:	683a      	ldr	r2, [r7, #0]
 80158ea:	4613      	mov	r3, r2
 80158ec:	011b      	lsls	r3, r3, #4
 80158ee:	1a9b      	subs	r3, r3, r2
 80158f0:	687a      	ldr	r2, [r7, #4]
 80158f2:	4413      	add	r3, r2
 80158f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80158f8:	4619      	mov	r1, r3
 80158fa:	483c      	ldr	r0, [pc, #240]	; (80159ec <maze_display_Dijkstra+0x1bc>)
 80158fc:	f00b fe4c 	bl	8021598 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	3301      	adds	r3, #1
 8015904:	603b      	str	r3, [r7, #0]
 8015906:	683b      	ldr	r3, [r7, #0]
 8015908:	2b0f      	cmp	r3, #15
 801590a:	ddd9      	ble.n	80158c0 <maze_display_Dijkstra+0x90>
			}
		}

		printf("+\n");
 801590c:	4838      	ldr	r0, [pc, #224]	; (80159f0 <maze_display_Dijkstra+0x1c0>)
 801590e:	f00b fedf 	bl	80216d0 <puts>
	for (tt = 14;tt >= -1;tt--){
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	3b01      	subs	r3, #1
 8015916:	607b      	str	r3, [r7, #4]
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801591e:	da94      	bge.n	801584a <maze_display_Dijkstra+0x1a>
 8015920:	e000      	b.n	8015924 <maze_display_Dijkstra+0xf4>
			break;
 8015922:	bf00      	nop

	}

	printf(
 8015924:	4833      	ldr	r0, [pc, #204]	; (80159f4 <maze_display_Dijkstra+0x1c4>)
 8015926:	f00b fed3 	bl	80216d0 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 801592a:	4828      	ldr	r0, [pc, #160]	; (80159cc <maze_display_Dijkstra+0x19c>)
 801592c:	f00b fed0 	bl	80216d0 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8015930:	230e      	movs	r3, #14
 8015932:	607b      	str	r3, [r7, #4]
 8015934:	e03c      	b.n	80159b0 <maze_display_Dijkstra+0x180>

		printf("|   ");//walk_count[tt + 1]
 8015936:	4826      	ldr	r0, [pc, #152]	; (80159d0 <maze_display_Dijkstra+0x1a0>)
 8015938:	f00b fe2e 	bl	8021598 <iprintf>
		for(ss = 0;ss < 15;ss++){
 801593c:	2300      	movs	r3, #0
 801593e:	603b      	str	r3, [r7, #0]
 8015940:	e011      	b.n	8015966 <maze_display_Dijkstra+0x136>

				printf("%5d ", Dijkstra.column_count[(tt + 1)][ss]);
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	1c5a      	adds	r2, r3, #1
 8015946:	4925      	ldr	r1, [pc, #148]	; (80159dc <maze_display_Dijkstra+0x1ac>)
 8015948:	4613      	mov	r3, r2
 801594a:	011b      	lsls	r3, r3, #4
 801594c:	1a9b      	subs	r3, r3, r2
 801594e:	683a      	ldr	r2, [r7, #0]
 8015950:	4413      	add	r3, r2
 8015952:	33f0      	adds	r3, #240	; 0xf0
 8015954:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015958:	4619      	mov	r1, r3
 801595a:	4821      	ldr	r0, [pc, #132]	; (80159e0 <maze_display_Dijkstra+0x1b0>)
 801595c:	f00b fe1c 	bl	8021598 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015960:	683b      	ldr	r3, [r7, #0]
 8015962:	3301      	adds	r3, #1
 8015964:	603b      	str	r3, [r7, #0]
 8015966:	683b      	ldr	r3, [r7, #0]
 8015968:	2b0e      	cmp	r3, #14
 801596a:	ddea      	ble.n	8015942 <maze_display_Dijkstra+0x112>

		}
		printf("   |\n");
 801596c:	481d      	ldr	r0, [pc, #116]	; (80159e4 <maze_display_Dijkstra+0x1b4>)
 801596e:	f00b feaf 	bl	80216d0 <puts>
		if (tt <= -1) {
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	2b00      	cmp	r3, #0
 8015976:	db20      	blt.n	80159ba <maze_display_Dijkstra+0x18a>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8015978:	2300      	movs	r3, #0
 801597a:	603b      	str	r3, [r7, #0]
 801597c:	e00f      	b.n	801599e <maze_display_Dijkstra+0x16e>
				printf("+%5d",Dijkstra.row_count[ss][tt]);
 801597e:	4917      	ldr	r1, [pc, #92]	; (80159dc <maze_display_Dijkstra+0x1ac>)
 8015980:	683a      	ldr	r2, [r7, #0]
 8015982:	4613      	mov	r3, r2
 8015984:	011b      	lsls	r3, r3, #4
 8015986:	1a9b      	subs	r3, r3, r2
 8015988:	687a      	ldr	r2, [r7, #4]
 801598a:	4413      	add	r3, r2
 801598c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015990:	4619      	mov	r1, r3
 8015992:	4816      	ldr	r0, [pc, #88]	; (80159ec <maze_display_Dijkstra+0x1bc>)
 8015994:	f00b fe00 	bl	8021598 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8015998:	683b      	ldr	r3, [r7, #0]
 801599a:	3301      	adds	r3, #1
 801599c:	603b      	str	r3, [r7, #0]
 801599e:	683b      	ldr	r3, [r7, #0]
 80159a0:	2b0f      	cmp	r3, #15
 80159a2:	ddec      	ble.n	801597e <maze_display_Dijkstra+0x14e>
		}

		printf("+\n");
 80159a4:	4812      	ldr	r0, [pc, #72]	; (80159f0 <maze_display_Dijkstra+0x1c0>)
 80159a6:	f00b fe93 	bl	80216d0 <puts>
	for (tt = 14;tt >= -1;tt--){
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	3b01      	subs	r3, #1
 80159ae:	607b      	str	r3, [r7, #4]
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159b6:	dabe      	bge.n	8015936 <maze_display_Dijkstra+0x106>
 80159b8:	e000      	b.n	80159bc <maze_display_Dijkstra+0x18c>
			break;
 80159ba:	bf00      	nop

	}

	printf(
 80159bc:	480d      	ldr	r0, [pc, #52]	; (80159f4 <maze_display_Dijkstra+0x1c4>)
 80159be:	f00b fe87 	bl	80216d0 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");




}
 80159c2:	bf00      	nop
 80159c4:	3708      	adds	r7, #8
 80159c6:	46bd      	mov	sp, r7
 80159c8:	bd80      	pop	{r7, pc}
 80159ca:	bf00      	nop
 80159cc:	0802506c 	.word	0x0802506c
 80159d0:	0802515c 	.word	0x0802515c
 80159d4:	20001010 	.word	0x20001010
 80159d8:	08025164 	.word	0x08025164
 80159dc:	200013f4 	.word	0x200013f4
 80159e0:	0802516c 	.word	0x0802516c
 80159e4:	08025174 	.word	0x08025174
 80159e8:	080250e4 	.word	0x080250e4
 80159ec:	0802517c 	.word	0x0802517c
 80159f0:	080250f4 	.word	0x080250f4
 80159f4:	080250f8 	.word	0x080250f8

080159f8 <mode_decision>:





unsigned char mode_decision(unsigned char now_mode){
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b084      	sub	sp, #16
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	4603      	mov	r3, r0
 8015a00:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8015a02:	2300      	movs	r3, #0
 8015a04:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8015a06:	2300      	movs	r3, #0
 8015a08:	73bb      	strb	r3, [r7, #14]
unsigned char main_mode=0;
 8015a0a:	2300      	movs	r3, #0
 8015a0c:	737b      	strb	r3, [r7, #13]
float dis8 =10;
 8015a0e:	4b71      	ldr	r3, [pc, #452]	; (8015bd4 <mode_decision+0x1dc>)
 8015a10:	60bb      	str	r3, [r7, #8]
main_modeR=now_mode & 0x0F;
 8015a12:	79fb      	ldrb	r3, [r7, #7]
 8015a14:	f003 030f 	and.w	r3, r3, #15
 8015a18:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8015a1a:	79fb      	ldrb	r3, [r7, #7]
 8015a1c:	091b      	lsrs	r3, r3, #4
 8015a1e:	73bb      	strb	r3, [r7, #14]

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015a20:	7bbb      	ldrb	r3, [r7, #14]
 8015a22:	011b      	lsls	r3, r3, #4
 8015a24:	b2da      	uxtb	r2, r3
 8015a26:	7bfb      	ldrb	r3, [r7, #15]
 8015a28:	4413      	add	r3, r2
 8015a2a:	b2db      	uxtb	r3, r3
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f7f2 f87b 	bl	8007b28 <pl_yellow_LED_count>
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 400) {
 8015a32:	e07f      	b.n	8015b34 <mode_decision+0x13c>
				HAL_Delay(1);
 8015a34:	2001      	movs	r0, #1
 8015a36:	f003 fe5d 	bl	80196f4 <HAL_Delay>
				if (E_distanceR >= dis8) {
 8015a3a:	4b67      	ldr	r3, [pc, #412]	; (8015bd8 <mode_decision+0x1e0>)
 8015a3c:	edd3 7a00 	vldr	s15, [r3]
 8015a40:	ed97 7a02 	vldr	s14, [r7, #8]
 8015a44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a4c:	d813      	bhi.n	8015a76 <mode_decision+0x7e>
					if (main_modeR == 15) {
 8015a4e:	7bfb      	ldrb	r3, [r7, #15]
 8015a50:	2b0f      	cmp	r3, #15
 8015a52:	d102      	bne.n	8015a5a <mode_decision+0x62>
						main_modeR = 0;
 8015a54:	2300      	movs	r3, #0
 8015a56:	73fb      	strb	r3, [r7, #15]
 8015a58:	e002      	b.n	8015a60 <mode_decision+0x68>
					} else {
						main_modeR++;
 8015a5a:	7bfb      	ldrb	r3, [r7, #15]
 8015a5c:	3301      	adds	r3, #1
 8015a5e:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8015a60:	f7eb fa9c 	bl	8000f9c <reset_distance>

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015a64:	7bbb      	ldrb	r3, [r7, #14]
 8015a66:	011b      	lsls	r3, r3, #4
 8015a68:	b2da      	uxtb	r2, r3
 8015a6a:	7bfb      	ldrb	r3, [r7, #15]
 8015a6c:	4413      	add	r3, r2
 8015a6e:	b2db      	uxtb	r3, r3
 8015a70:	4618      	mov	r0, r3
 8015a72:	f7f2 f859 	bl	8007b28 <pl_yellow_LED_count>
				}
				if (E_distanceR <= -dis8) {
 8015a76:	edd7 7a02 	vldr	s15, [r7, #8]
 8015a7a:	eeb1 7a67 	vneg.f32	s14, s15
 8015a7e:	4b56      	ldr	r3, [pc, #344]	; (8015bd8 <mode_decision+0x1e0>)
 8015a80:	edd3 7a00 	vldr	s15, [r3]
 8015a84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a8c:	db13      	blt.n	8015ab6 <mode_decision+0xbe>
					if (main_modeR == 0) {
 8015a8e:	7bfb      	ldrb	r3, [r7, #15]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d102      	bne.n	8015a9a <mode_decision+0xa2>
						main_modeR = 15;
 8015a94:	230f      	movs	r3, #15
 8015a96:	73fb      	strb	r3, [r7, #15]
 8015a98:	e002      	b.n	8015aa0 <mode_decision+0xa8>
					} else {
						main_modeR = main_modeR - 1;
 8015a9a:	7bfb      	ldrb	r3, [r7, #15]
 8015a9c:	3b01      	subs	r3, #1
 8015a9e:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8015aa0:	f7eb fa7c 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015aa4:	7bbb      	ldrb	r3, [r7, #14]
 8015aa6:	011b      	lsls	r3, r3, #4
 8015aa8:	b2da      	uxtb	r2, r3
 8015aaa:	7bfb      	ldrb	r3, [r7, #15]
 8015aac:	4413      	add	r3, r2
 8015aae:	b2db      	uxtb	r3, r3
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f7f2 f839 	bl	8007b28 <pl_yellow_LED_count>
				}
				if (E_distanceL >= dis8) {
 8015ab6:	4b49      	ldr	r3, [pc, #292]	; (8015bdc <mode_decision+0x1e4>)
 8015ab8:	edd3 7a00 	vldr	s15, [r3]
 8015abc:	ed97 7a02 	vldr	s14, [r7, #8]
 8015ac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ac8:	d813      	bhi.n	8015af2 <mode_decision+0xfa>
					if (main_modeL == 15) {
 8015aca:	7bbb      	ldrb	r3, [r7, #14]
 8015acc:	2b0f      	cmp	r3, #15
 8015ace:	d102      	bne.n	8015ad6 <mode_decision+0xde>
						main_modeL = 0;
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	73bb      	strb	r3, [r7, #14]
 8015ad4:	e002      	b.n	8015adc <mode_decision+0xe4>
					} else {
						main_modeL = main_modeL + 1;
 8015ad6:	7bbb      	ldrb	r3, [r7, #14]
 8015ad8:	3301      	adds	r3, #1
 8015ada:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8015adc:	f7eb fa5e 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015ae0:	7bbb      	ldrb	r3, [r7, #14]
 8015ae2:	011b      	lsls	r3, r3, #4
 8015ae4:	b2da      	uxtb	r2, r3
 8015ae6:	7bfb      	ldrb	r3, [r7, #15]
 8015ae8:	4413      	add	r3, r2
 8015aea:	b2db      	uxtb	r3, r3
 8015aec:	4618      	mov	r0, r3
 8015aee:	f7f2 f81b 	bl	8007b28 <pl_yellow_LED_count>
				}
				if (E_distanceL <= -dis8) {
 8015af2:	edd7 7a02 	vldr	s15, [r7, #8]
 8015af6:	eeb1 7a67 	vneg.f32	s14, s15
 8015afa:	4b38      	ldr	r3, [pc, #224]	; (8015bdc <mode_decision+0x1e4>)
 8015afc:	edd3 7a00 	vldr	s15, [r3]
 8015b00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b08:	da00      	bge.n	8015b0c <mode_decision+0x114>
 8015b0a:	e013      	b.n	8015b34 <mode_decision+0x13c>
					if (main_modeL == 0) {
 8015b0c:	7bbb      	ldrb	r3, [r7, #14]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d102      	bne.n	8015b18 <mode_decision+0x120>
						main_modeL = 15;
 8015b12:	230f      	movs	r3, #15
 8015b14:	73bb      	strb	r3, [r7, #14]
 8015b16:	e002      	b.n	8015b1e <mode_decision+0x126>
					} else {
						main_modeL = main_modeL - 1;
 8015b18:	7bbb      	ldrb	r3, [r7, #14]
 8015b1a:	3b01      	subs	r3, #1
 8015b1c:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8015b1e:	f7eb fa3d 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015b22:	7bbb      	ldrb	r3, [r7, #14]
 8015b24:	011b      	lsls	r3, r3, #4
 8015b26:	b2da      	uxtb	r2, r3
 8015b28:	7bfb      	ldrb	r3, [r7, #15]
 8015b2a:	4413      	add	r3, r2
 8015b2c:	b2db      	uxtb	r3, r3
 8015b2e:	4618      	mov	r0, r3
 8015b30:	f7f1 fffa 	bl	8007b28 <pl_yellow_LED_count>
			while (angle_speedx <= 400) {
 8015b34:	4b2a      	ldr	r3, [pc, #168]	; (8015be0 <mode_decision+0x1e8>)
 8015b36:	edd3 7a00 	vldr	s15, [r3]
 8015b3a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8015be4 <mode_decision+0x1ec>
 8015b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b46:	f67f af75 	bls.w	8015a34 <mode_decision+0x3c>
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_off();
 8015b4a:	f7f1 ffb3 	bl	8007ab4 <pl_yellow_LED_off>
			pl_r_blue_LED(ON);
 8015b4e:	2001      	movs	r0, #1
 8015b50:	f7f2 f89a 	bl	8007c88 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015b54:	2001      	movs	r0, #1
 8015b56:	f7f2 f8a9 	bl	8007cac <pl_l_blue_LED>
			HAL_Delay(1000);
 8015b5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015b5e:	f003 fdc9 	bl	80196f4 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8015b62:	e011      	b.n	8015b88 <mode_decision+0x190>

				if (angle_speedx >= 400) {
 8015b64:	4b1e      	ldr	r3, [pc, #120]	; (8015be0 <mode_decision+0x1e8>)
 8015b66:	edd3 7a00 	vldr	s15, [r3]
 8015b6a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8015be4 <mode_decision+0x1ec>
 8015b6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b76:	db04      	blt.n	8015b82 <mode_decision+0x18a>
					main_modeL = 0;
 8015b78:	2300      	movs	r3, #0
 8015b7a:	73bb      	strb	r3, [r7, #14]
					main_modeR = 0;
 8015b7c:	2300      	movs	r3, #0
 8015b7e:	73fb      	strb	r3, [r7, #15]
					break;
 8015b80:	e013      	b.n	8015baa <mode_decision+0x1b2>
				}
				HAL_Delay(1);
 8015b82:	2001      	movs	r0, #1
 8015b84:	f003 fdb6 	bl	80196f4 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8015b88:	4b17      	ldr	r3, [pc, #92]	; (8015be8 <mode_decision+0x1f0>)
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015b90:	dde8      	ble.n	8015b64 <mode_decision+0x16c>
 8015b92:	4b15      	ldr	r3, [pc, #84]	; (8015be8 <mode_decision+0x1f0>)
 8015b94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015b98:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015b9c:	dde2      	ble.n	8015b64 <mode_decision+0x16c>
 8015b9e:	4b12      	ldr	r3, [pc, #72]	; (8015be8 <mode_decision+0x1f0>)
 8015ba0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015ba4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015ba8:	dddc      	ble.n	8015b64 <mode_decision+0x16c>
			}
			pl_r_blue_LED(OFF);
 8015baa:	2000      	movs	r0, #0
 8015bac:	f7f2 f86c 	bl	8007c88 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015bb0:	2000      	movs	r0, #0
 8015bb2:	f7f2 f87b 	bl	8007cac <pl_l_blue_LED>
			pl_yellow_LED_off();
 8015bb6:	f7f1 ff7d 	bl	8007ab4 <pl_yellow_LED_off>

			main_mode=main_modeL << 4 | main_modeR;
 8015bba:	7bbb      	ldrb	r3, [r7, #14]
 8015bbc:	011b      	lsls	r3, r3, #4
 8015bbe:	b25a      	sxtb	r2, r3
 8015bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015bc4:	4313      	orrs	r3, r2
 8015bc6:	b25b      	sxtb	r3, r3
 8015bc8:	737b      	strb	r3, [r7, #13]

return main_mode;
 8015bca:	7b7b      	ldrb	r3, [r7, #13]
}
 8015bcc:	4618      	mov	r0, r3
 8015bce:	3710      	adds	r7, #16
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd80      	pop	{r7, pc}
 8015bd4:	41200000 	.word	0x41200000
 8015bd8:	20000224 	.word	0x20000224
 8015bdc:	20000220 	.word	0x20000220
 8015be0:	20000274 	.word	0x20000274
 8015be4:	43c80000 	.word	0x43c80000
 8015be8:	200002bc 	.word	0x200002bc

08015bec <mode_execution>:


void mode_execution(unsigned char now_mode){
 8015bec:	b590      	push	{r4, r7, lr}
 8015bee:	b0d7      	sub	sp, #348	; 0x15c
 8015bf0:	af52      	add	r7, sp, #328	; 0x148
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	73bb      	strb	r3, [r7, #14]

main_modeR=now_mode & 0x0F;
 8015bfe:	79fb      	ldrb	r3, [r7, #7]
 8015c00:	f003 030f 	and.w	r3, r3, #15
 8015c04:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8015c06:	79fb      	ldrb	r3, [r7, #7]
 8015c08:	091b      	lsrs	r3, r3, #4
 8015c0a:	73bb      	strb	r3, [r7, #14]


switch (main_modeL) {
 8015c0c:	7bbb      	ldrb	r3, [r7, #14]
 8015c0e:	2b0f      	cmp	r3, #15
 8015c10:	f200 809e 	bhi.w	8015d50 <mode_execution+0x164>
 8015c14:	a201      	add	r2, pc, #4	; (adr r2, 8015c1c <mode_execution+0x30>)
 8015c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c1a:	bf00      	nop
 8015c1c:	08015c5d 	.word	0x08015c5d
 8015c20:	08015c67 	.word	0x08015c67
 8015c24:	08015d4f 	.word	0x08015d4f
 8015c28:	08015c71 	.word	0x08015c71
 8015c2c:	08015c7b 	.word	0x08015c7b
 8015c30:	08015c85 	.word	0x08015c85
 8015c34:	08015cb5 	.word	0x08015cb5
 8015c38:	08015cbf 	.word	0x08015cbf
 8015c3c:	08015cef 	.word	0x08015cef
 8015c40:	08015d1f 	.word	0x08015d1f
 8015c44:	08015d4f 	.word	0x08015d4f
 8015c48:	08015d4f 	.word	0x08015d4f
 8015c4c:	08015d4f 	.word	0x08015d4f
 8015c50:	08015d4f 	.word	0x08015d4f
 8015c54:	08015d4f 	.word	0x08015d4f
 8015c58:	08015d4f 	.word	0x08015d4f
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
 8015c5c:	7bfb      	ldrb	r3, [r7, #15]
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f000 f886 	bl	8015d70 <mode_PLtest>
	break;
 8015c64:	e074      	b.n	8015d50 <mode_execution+0x164>
	case 0b0001://実行モード1
		mode_Running(main_modeR);
 8015c66:	7bfb      	ldrb	r3, [r7, #15]
 8015c68:	4618      	mov	r0, r3
 8015c6a:	f000 fa69 	bl	8016140 <mode_Running>
	break;
 8015c6e:	e06f      	b.n	8015d50 <mode_execution+0x164>
	case 0b0010://実行モード2
	break;
	case 0b0011:
		mode_Tuning0(main_modeR);
 8015c70:	7bfb      	ldrb	r3, [r7, #15]
 8015c72:	4618      	mov	r0, r3
 8015c74:	f000 fc96 	bl	80165a4 <mode_Tuning0>
	break;
 8015c78:	e06a      	b.n	8015d50 <mode_execution+0x164>
	case 0b0100:
		mode_WallSensorTuning(main_modeR);
 8015c7a:	7bfb      	ldrb	r3, [r7, #15]
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	f001 f855 	bl	8016d2c <mode_WallSensorTuning>
	break;
 8015c82:	e065      	b.n	8015d50 <mode_execution+0x164>
	case 0b0101://試験モード
		testturning(speed600_shortest_mollifier,main_modeR,1,OFF,0.51,1);
 8015c84:	7bfb      	ldrb	r3, [r7, #15]
 8015c86:	4c34      	ldr	r4, [pc, #208]	; (8015d58 <mode_execution+0x16c>)
 8015c88:	2201      	movs	r2, #1
 8015c8a:	9251      	str	r2, [sp, #324]	; 0x144
 8015c8c:	2200      	movs	r2, #0
 8015c8e:	9250      	str	r2, [sp, #320]	; 0x140
 8015c90:	2201      	movs	r2, #1
 8015c92:	924f      	str	r2, [sp, #316]	; 0x13c
 8015c94:	934e      	str	r3, [sp, #312]	; 0x138
 8015c96:	4668      	mov	r0, sp
 8015c98:	f104 0310 	add.w	r3, r4, #16
 8015c9c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015ca0:	4619      	mov	r1, r3
 8015ca2:	f00a fff9 	bl	8020c98 <memcpy>
 8015ca6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015caa:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8015d5c <mode_execution+0x170>
 8015cae:	f7f8 fd27 	bl	800e700 <testturning>
	break;
 8015cb2:	e04d      	b.n	8015d50 <mode_execution+0x164>
	case 0b0110:
		mode_WallSensorTuning_fast(main_modeR);
 8015cb4:	7bfb      	ldrb	r3, [r7, #15]
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	f001 fa70 	bl	801719c <mode_WallSensorTuning_fast>
	break;
 8015cbc:	e048      	b.n	8015d50 <mode_execution+0x164>
	case 0b0111:
		testturning(speed1000_shortest_mollifier,main_modeR,1,ON,0.99,1);
 8015cbe:	7bfb      	ldrb	r3, [r7, #15]
 8015cc0:	4c27      	ldr	r4, [pc, #156]	; (8015d60 <mode_execution+0x174>)
 8015cc2:	2201      	movs	r2, #1
 8015cc4:	9251      	str	r2, [sp, #324]	; 0x144
 8015cc6:	2201      	movs	r2, #1
 8015cc8:	9250      	str	r2, [sp, #320]	; 0x140
 8015cca:	2201      	movs	r2, #1
 8015ccc:	924f      	str	r2, [sp, #316]	; 0x13c
 8015cce:	934e      	str	r3, [sp, #312]	; 0x138
 8015cd0:	4668      	mov	r0, sp
 8015cd2:	f104 0310 	add.w	r3, r4, #16
 8015cd6:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015cda:	4619      	mov	r1, r3
 8015cdc:	f00a ffdc 	bl	8020c98 <memcpy>
 8015ce0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015ce4:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8015d64 <mode_execution+0x178>
 8015ce8:	f7f8 fd0a 	bl	800e700 <testturning>
	break;
 8015cec:	e030      	b.n	8015d50 <mode_execution+0x164>
	case 0b1000:
		testturning(speed1200_shortest_mollifier,main_modeR,1,ON,0.99,1);
 8015cee:	7bfb      	ldrb	r3, [r7, #15]
 8015cf0:	4c1d      	ldr	r4, [pc, #116]	; (8015d68 <mode_execution+0x17c>)
 8015cf2:	2201      	movs	r2, #1
 8015cf4:	9251      	str	r2, [sp, #324]	; 0x144
 8015cf6:	2201      	movs	r2, #1
 8015cf8:	9250      	str	r2, [sp, #320]	; 0x140
 8015cfa:	2201      	movs	r2, #1
 8015cfc:	924f      	str	r2, [sp, #316]	; 0x13c
 8015cfe:	934e      	str	r3, [sp, #312]	; 0x138
 8015d00:	4668      	mov	r0, sp
 8015d02:	f104 0310 	add.w	r3, r4, #16
 8015d06:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015d0a:	4619      	mov	r1, r3
 8015d0c:	f00a ffc4 	bl	8020c98 <memcpy>
 8015d10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015d14:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8015d64 <mode_execution+0x178>
 8015d18:	f7f8 fcf2 	bl	800e700 <testturning>
	break;
 8015d1c:	e018      	b.n	8015d50 <mode_execution+0x164>
	case 0b1001:
		testturning(speed1600_shortest_mollifier,main_modeR,1,ON,0.99,1);
 8015d1e:	7bfb      	ldrb	r3, [r7, #15]
 8015d20:	4c12      	ldr	r4, [pc, #72]	; (8015d6c <mode_execution+0x180>)
 8015d22:	2201      	movs	r2, #1
 8015d24:	9251      	str	r2, [sp, #324]	; 0x144
 8015d26:	2201      	movs	r2, #1
 8015d28:	9250      	str	r2, [sp, #320]	; 0x140
 8015d2a:	2201      	movs	r2, #1
 8015d2c:	924f      	str	r2, [sp, #316]	; 0x13c
 8015d2e:	934e      	str	r3, [sp, #312]	; 0x138
 8015d30:	4668      	mov	r0, sp
 8015d32:	f104 0310 	add.w	r3, r4, #16
 8015d36:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015d3a:	4619      	mov	r1, r3
 8015d3c:	f00a ffac 	bl	8020c98 <memcpy>
 8015d40:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015d44:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8015d64 <mode_execution+0x178>
 8015d48:	f7f8 fcda 	bl	800e700 <testturning>
	break;
 8015d4c:	e000      	b.n	8015d50 <mode_execution+0x164>
	break;
 8015d4e:	bf00      	nop
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}
 8015d50:	bf00      	nop
 8015d52:	3714      	adds	r7, #20
 8015d54:	46bd      	mov	sp, r7
 8015d56:	bd90      	pop	{r4, r7, pc}
 8015d58:	2000f81c 	.word	0x2000f81c
 8015d5c:	3f028f5c 	.word	0x3f028f5c
 8015d60:	2000f964 	.word	0x2000f964
 8015d64:	3f7d70a4 	.word	0x3f7d70a4
 8015d68:	2000faac 	.word	0x2000faac
 8015d6c:	2000fbf4 	.word	0x2000fbf4

08015d70 <mode_PLtest>:



void mode_PLtest(unsigned char main_modeR) {
 8015d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015d74:	b092      	sub	sp, #72	; 0x48
 8015d76:	af0a      	add	r7, sp, #40	; 0x28
 8015d78:	4603      	mov	r3, r0
 8015d7a:	75fb      	strb	r3, [r7, #23]
	int duty_L=0, duty_R=0;
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	61fb      	str	r3, [r7, #28]
 8015d80:	2300      	movs	r3, #0
 8015d82:	61bb      	str	r3, [r7, #24]
	switch (main_modeR) {
 8015d84:	7dfb      	ldrb	r3, [r7, #23]
 8015d86:	2b0f      	cmp	r3, #15
 8015d88:	f200 81d2 	bhi.w	8016130 <mode_PLtest+0x3c0>
 8015d8c:	a201      	add	r2, pc, #4	; (adr r2, 8015d94 <mode_PLtest+0x24>)
 8015d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d92:	bf00      	nop
 8015d94:	0801612f 	.word	0x0801612f
 8015d98:	08015dd5 	.word	0x08015dd5
 8015d9c:	08015e07 	.word	0x08015e07
 8015da0:	08015e83 	.word	0x08015e83
 8015da4:	08015ee7 	.word	0x08015ee7
 8015da8:	08015f67 	.word	0x08015f67
 8015dac:	08015f6d 	.word	0x08015f6d
 8015db0:	08016131 	.word	0x08016131
 8015db4:	08016131 	.word	0x08016131
 8015db8:	08015ff3 	.word	0x08015ff3
 8015dbc:	0801605b 	.word	0x0801605b
 8015dc0:	080160e1 	.word	0x080160e1
 8015dc4:	08016131 	.word	0x08016131
 8015dc8:	08016131 	.word	0x08016131
 8015dcc:	08016131 	.word	0x08016131
 8015dd0:	08016129 	.word	0x08016129
	case 0b0000:
		//飛ばすerror
		break;
	case 0b0001:	//sensor
		while (1) {
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8015dd4:	4bbb      	ldr	r3, [pc, #748]	; (80160c4 <mode_PLtest+0x354>)
 8015dd6:	6819      	ldr	r1, [r3, #0]
 8015dd8:	4bba      	ldr	r3, [pc, #744]	; (80160c4 <mode_PLtest+0x354>)
 8015dda:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015ddc:	4bb9      	ldr	r3, [pc, #740]	; (80160c4 <mode_PLtest+0x354>)
 8015dde:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8015de2:	4bb8      	ldr	r3, [pc, #736]	; (80160c4 <mode_PLtest+0x354>)
 8015de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015de8:	4ab6      	ldr	r2, [pc, #728]	; (80160c4 <mode_PLtest+0x354>)
 8015dea:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 8015dee:	9201      	str	r2, [sp, #4]
 8015df0:	9300      	str	r3, [sp, #0]
 8015df2:	4623      	mov	r3, r4
 8015df4:	4602      	mov	r2, r0
 8015df6:	48b4      	ldr	r0, [pc, #720]	; (80160c8 <mode_PLtest+0x358>)
 8015df8:	f00b fbce 	bl	8021598 <iprintf>
					g_sensor[1][0], g_sensor[2][0], g_sensor[3][0],
					g_sensor[4][0]);
			wait_ms(500);
 8015dfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015e00:	f7f2 febe 	bl	8008b80 <wait_ms>
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8015e04:	e7e6      	b.n	8015dd4 <mode_PLtest+0x64>
		}
		break;
	case 0b0010:	//encoder
		pl_r_blue_LED(ON);
 8015e06:	2001      	movs	r0, #1
 8015e08:	f7f1 ff3e 	bl	8007c88 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8015e0c:	2001      	movs	r0, #1
 8015e0e:	f7f1 ff4d 	bl	8007cac <pl_l_blue_LED>
		record_mode = 1;
 8015e12:	4bae      	ldr	r3, [pc, #696]	; (80160cc <mode_PLtest+0x35c>)
 8015e14:	2201      	movs	r2, #1
 8015e16:	701a      	strb	r2, [r3, #0]
		pl_DriveMotor_duty(900, 900);
 8015e18:	f44f 7161 	mov.w	r1, #900	; 0x384
 8015e1c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015e20:	f7f2 fc36 	bl	8008690 <pl_DriveMotor_duty>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8015e24:	2001      	movs	r0, #1
 8015e26:	f7f2 fbf1 	bl	800860c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8015e2a:	2001      	movs	r0, #1
 8015e2c:	f7f2 fbc6 	bl	80085bc <pl_L_DriveMotor_mode>
		pl_DriveMotor_start();
 8015e30:	f7f2 fc12 	bl	8008658 <pl_DriveMotor_start>
		wait_ms(2500);
 8015e34:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8015e38:	f7f2 fea2 	bl	8008b80 <wait_ms>
		pl_DriveMotor_stop();
 8015e3c:	f7f2 fc1a 	bl	8008674 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8015e40:	2000      	movs	r0, #0
 8015e42:	f7f1 ff21 	bl	8007c88 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8015e46:	2000      	movs	r0, #0
 8015e48:	f7f1 ff30 	bl	8007cac <pl_l_blue_LED>
		record_mode = 0;
 8015e4c:	4b9f      	ldr	r3, [pc, #636]	; (80160cc <mode_PLtest+0x35c>)
 8015e4e:	2200      	movs	r2, #0
 8015e50:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015e52:	e002      	b.n	8015e5a <mode_PLtest+0xea>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8015e54:	2001      	movs	r0, #1
 8015e56:	f7f2 fe93 	bl	8008b80 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015e5a:	4b9a      	ldr	r3, [pc, #616]	; (80160c4 <mode_PLtest+0x354>)
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015e62:	ddf7      	ble.n	8015e54 <mode_PLtest+0xe4>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8015e64:	4b97      	ldr	r3, [pc, #604]	; (80160c4 <mode_PLtest+0x354>)
 8015e66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015e6a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015e6e:	ddf1      	ble.n	8015e54 <mode_PLtest+0xe4>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015e70:	4b94      	ldr	r3, [pc, #592]	; (80160c4 <mode_PLtest+0x354>)
 8015e72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015e76:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015e7a:	ddeb      	ble.n	8015e54 <mode_PLtest+0xe4>
		}
		record_print();
 8015e7c:	f001 fc7e 	bl	801777c <record_print>
		break;
 8015e80:	e156      	b.n	8016130 <mode_PLtest+0x3c0>
	case 0b0011:	//gyro
		reset_gyro();
 8015e82:	f7eb fec1 	bl	8001c08 <reset_gyro>
		reset_speed();
 8015e86:	f7eb f8cd 	bl	8001024 <reset_speed>
		pl_r_blue_LED(ON);
 8015e8a:	2001      	movs	r0, #1
 8015e8c:	f7f1 fefc 	bl	8007c88 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8015e90:	2001      	movs	r0, #1
 8015e92:	f7f1 ff0b 	bl	8007cac <pl_l_blue_LED>
		record_mode = 2;
 8015e96:	4b8d      	ldr	r3, [pc, #564]	; (80160cc <mode_PLtest+0x35c>)
 8015e98:	2202      	movs	r2, #2
 8015e9a:	701a      	strb	r2, [r3, #0]
		wait_ms(2500);
 8015e9c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8015ea0:	f7f2 fe6e 	bl	8008b80 <wait_ms>
		pl_r_blue_LED(OFF);
 8015ea4:	2000      	movs	r0, #0
 8015ea6:	f7f1 feef 	bl	8007c88 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8015eaa:	2000      	movs	r0, #0
 8015eac:	f7f1 fefe 	bl	8007cac <pl_l_blue_LED>
		record_mode = 0;
 8015eb0:	4b86      	ldr	r3, [pc, #536]	; (80160cc <mode_PLtest+0x35c>)
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015eb6:	e002      	b.n	8015ebe <mode_PLtest+0x14e>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8015eb8:	2001      	movs	r0, #1
 8015eba:	f7f2 fe61 	bl	8008b80 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015ebe:	4b81      	ldr	r3, [pc, #516]	; (80160c4 <mode_PLtest+0x354>)
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015ec6:	ddf7      	ble.n	8015eb8 <mode_PLtest+0x148>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8015ec8:	4b7e      	ldr	r3, [pc, #504]	; (80160c4 <mode_PLtest+0x354>)
 8015eca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015ece:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015ed2:	ddf1      	ble.n	8015eb8 <mode_PLtest+0x148>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015ed4:	4b7b      	ldr	r3, [pc, #492]	; (80160c4 <mode_PLtest+0x354>)
 8015ed6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015eda:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015ede:	ddeb      	ble.n	8015eb8 <mode_PLtest+0x148>
		}
		record_print();
 8015ee0:	f001 fc4c 	bl	801777c <record_print>
		break;
 8015ee4:	e124      	b.n	8016130 <mode_PLtest+0x3c0>
	case 0b0100://speaker
		while (1) {
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015ee6:	4b7a      	ldr	r3, [pc, #488]	; (80160d0 <mode_PLtest+0x360>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015eea:	4618      	mov	r0, r3
 8015eec:	f7ea fb54 	bl	8000598 <__aeabi_f2d>
 8015ef0:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015ef4:	4b76      	ldr	r3, [pc, #472]	; (80160d0 <mode_PLtest+0x360>)
 8015ef6:	685b      	ldr	r3, [r3, #4]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f7ea fb4d 	bl	8000598 <__aeabi_f2d>
 8015efe:	4604      	mov	r4, r0
 8015f00:	460d      	mov	r5, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015f02:	4b73      	ldr	r3, [pc, #460]	; (80160d0 <mode_PLtest+0x360>)
 8015f04:	689b      	ldr	r3, [r3, #8]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015f06:	4618      	mov	r0, r3
 8015f08:	f7ea fb46 	bl	8000598 <__aeabi_f2d>
 8015f0c:	4680      	mov	r8, r0
 8015f0e:	4689      	mov	r9, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015f10:	4b6f      	ldr	r3, [pc, #444]	; (80160d0 <mode_PLtest+0x360>)
 8015f12:	68db      	ldr	r3, [r3, #12]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015f14:	4618      	mov	r0, r3
 8015f16:	f7ea fb3f 	bl	8000598 <__aeabi_f2d>
 8015f1a:	4682      	mov	sl, r0
 8015f1c:	468b      	mov	fp, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015f1e:	4b6c      	ldr	r3, [pc, #432]	; (80160d0 <mode_PLtest+0x360>)
 8015f20:	691b      	ldr	r3, [r3, #16]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015f22:	4618      	mov	r0, r3
 8015f24:	f7ea fb38 	bl	8000598 <__aeabi_f2d>
 8015f28:	e9c7 0100 	strd	r0, r1, [r7]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015f2c:	4b68      	ldr	r3, [pc, #416]	; (80160d0 <mode_PLtest+0x360>)
 8015f2e:	695b      	ldr	r3, [r3, #20]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015f30:	4618      	mov	r0, r3
 8015f32:	f7ea fb31 	bl	8000598 <__aeabi_f2d>
 8015f36:	4602      	mov	r2, r0
 8015f38:	460b      	mov	r3, r1
 8015f3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015f3e:	ed97 7b00 	vldr	d7, [r7]
 8015f42:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015f46:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8015f4a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8015f4e:	e9cd 4500 	strd	r4, r5, [sp]
 8015f52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015f56:	485f      	ldr	r0, [pc, #380]	; (80160d4 <mode_PLtest+0x364>)
 8015f58:	f00b fb1e 	bl	8021598 <iprintf>
			wait_ms(500);
 8015f5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015f60:	f7f2 fe0e 	bl	8008b80 <wait_ms>
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015f64:	e7bf      	b.n	8015ee6 <mode_PLtest+0x176>
		}
	break;
	case 0b0101:
		test_flash();
 8015f66:	f7f1 ffdf 	bl	8007f28 <test_flash>
		break;
 8015f6a:	e0e1      	b.n	8016130 <mode_PLtest+0x3c0>
	case 0b0110:
		record_mode=6;
 8015f6c:	4b57      	ldr	r3, [pc, #348]	; (80160cc <mode_PLtest+0x35c>)
 8015f6e:	2206      	movs	r2, #6
 8015f70:	701a      	strb	r2, [r3, #0]
		pl_r_blue_LED(ON);
 8015f72:	2001      	movs	r0, #1
 8015f74:	f7f1 fe88 	bl	8007c88 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8015f78:	2001      	movs	r0, #1
 8015f7a:	f7f1 fe97 	bl	8007cac <pl_l_blue_LED>
		get_duty(1.0, -1.0,&duty_L,&duty_R);
 8015f7e:	f107 0218 	add.w	r2, r7, #24
 8015f82:	f107 031c 	add.w	r3, r7, #28
 8015f86:	4611      	mov	r1, r2
 8015f88:	4618      	mov	r0, r3
 8015f8a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8015f8e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015f92:	f7ec f9b7 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8015f96:	69fb      	ldr	r3, [r7, #28]
 8015f98:	69ba      	ldr	r2, [r7, #24]
 8015f9a:	4611      	mov	r1, r2
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	f7f2 fb77 	bl	8008690 <pl_DriveMotor_duty>
		pl_DriveMotor_start();
 8015fa2:	f7f2 fb59 	bl	8008658 <pl_DriveMotor_start>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015fa6:	e00a      	b.n	8015fbe <mode_PLtest+0x24e>
			wait_ms(1);
 8015fa8:	2001      	movs	r0, #1
 8015faa:	f7f2 fde9 	bl	8008b80 <wait_ms>
			if(record_rupe_flag==1){
 8015fae:	4b4a      	ldr	r3, [pc, #296]	; (80160d8 <mode_PLtest+0x368>)
 8015fb0:	781b      	ldrb	r3, [r3, #0]
 8015fb2:	2b01      	cmp	r3, #1
 8015fb4:	d103      	bne.n	8015fbe <mode_PLtest+0x24e>
				record_mode=0;
 8015fb6:	4b45      	ldr	r3, [pc, #276]	; (80160cc <mode_PLtest+0x35c>)
 8015fb8:	2200      	movs	r2, #0
 8015fba:	701a      	strb	r2, [r3, #0]
				break;
 8015fbc:	e010      	b.n	8015fe0 <mode_PLtest+0x270>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015fbe:	4b41      	ldr	r3, [pc, #260]	; (80160c4 <mode_PLtest+0x354>)
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015fc6:	ddef      	ble.n	8015fa8 <mode_PLtest+0x238>
 8015fc8:	4b3e      	ldr	r3, [pc, #248]	; (80160c4 <mode_PLtest+0x354>)
 8015fca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015fce:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015fd2:	dde9      	ble.n	8015fa8 <mode_PLtest+0x238>
 8015fd4:	4b3b      	ldr	r3, [pc, #236]	; (80160c4 <mode_PLtest+0x354>)
 8015fd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015fda:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015fde:	dde3      	ble.n	8015fa8 <mode_PLtest+0x238>
			}
		}
		pl_DriveMotor_stop();
 8015fe0:	f7f2 fb48 	bl	8008674 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8015fe4:	2000      	movs	r0, #0
 8015fe6:	f7f1 fe4f 	bl	8007c88 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8015fea:	2000      	movs	r0, #0
 8015fec:	f7f1 fe5e 	bl	8007cac <pl_l_blue_LED>

		break;
 8015ff0:	e09e      	b.n	8016130 <mode_PLtest+0x3c0>
	case 0b1001://fun
			pl_FunMotor_duty(0.5);
 8015ff2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8015ff6:	f7f2 fb75 	bl	80086e4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8015ffa:	f7f2 fb5f 	bl	80086bc <pl_FunMotor_start>
			HAL_Delay(2000);
 8015ffe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8016002:	f003 fb77 	bl	80196f4 <HAL_Delay>
			reset_gyro();
 8016006:	f7eb fdff 	bl	8001c08 <reset_gyro>
			reset_speed();
 801600a:	f7eb f80b 	bl	8001024 <reset_speed>
			clear_Ierror();
 801600e:	f7ef f94f 	bl	80052b0 <clear_Ierror>
			pl_r_blue_LED(ON);
 8016012:	2001      	movs	r0, #1
 8016014:	f7f1 fe38 	bl	8007c88 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8016018:	2001      	movs	r0, #1
 801601a:	f7f1 fe47 	bl	8007cac <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801601e:	e002      	b.n	8016026 <mode_PLtest+0x2b6>
				HAL_Delay(1);
 8016020:	2001      	movs	r0, #1
 8016022:	f003 fb67 	bl	80196f4 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016026:	4b27      	ldr	r3, [pc, #156]	; (80160c4 <mode_PLtest+0x354>)
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801602e:	ddf7      	ble.n	8016020 <mode_PLtest+0x2b0>
 8016030:	4b24      	ldr	r3, [pc, #144]	; (80160c4 <mode_PLtest+0x354>)
 8016032:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016036:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801603a:	ddf1      	ble.n	8016020 <mode_PLtest+0x2b0>
 801603c:	4b21      	ldr	r3, [pc, #132]	; (80160c4 <mode_PLtest+0x354>)
 801603e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016042:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016046:	ddeb      	ble.n	8016020 <mode_PLtest+0x2b0>
			}
			pl_r_blue_LED(OFF);
 8016048:	2000      	movs	r0, #0
 801604a:	f7f1 fe1d 	bl	8007c88 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 801604e:	2000      	movs	r0, #0
 8016050:	f7f1 fe2c 	bl	8007cac <pl_l_blue_LED>
			pl_FunMotor_stop();
 8016054:	f7f2 fb3c 	bl	80086d0 <pl_FunMotor_stop>
		break;
 8016058:	e06a      	b.n	8016130 <mode_PLtest+0x3c0>
	case 0b1010://fun
			pl_FunMotor_duty(0.99);
 801605a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80160dc <mode_PLtest+0x36c>
 801605e:	f7f2 fb41 	bl	80086e4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8016062:	f7f2 fb2b 	bl	80086bc <pl_FunMotor_start>
			HAL_Delay(2000);
 8016066:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801606a:	f003 fb43 	bl	80196f4 <HAL_Delay>
			reset_gyro();
 801606e:	f7eb fdcb 	bl	8001c08 <reset_gyro>
			reset_speed();
 8016072:	f7ea ffd7 	bl	8001024 <reset_speed>
			clear_Ierror();
 8016076:	f7ef f91b 	bl	80052b0 <clear_Ierror>
			pl_r_blue_LED(ON);
 801607a:	2001      	movs	r0, #1
 801607c:	f7f1 fe04 	bl	8007c88 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8016080:	2001      	movs	r0, #1
 8016082:	f7f1 fe13 	bl	8007cac <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016086:	e002      	b.n	801608e <mode_PLtest+0x31e>
				HAL_Delay(1);
 8016088:	2001      	movs	r0, #1
 801608a:	f003 fb33 	bl	80196f4 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801608e:	4b0d      	ldr	r3, [pc, #52]	; (80160c4 <mode_PLtest+0x354>)
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016096:	ddf7      	ble.n	8016088 <mode_PLtest+0x318>
 8016098:	4b0a      	ldr	r3, [pc, #40]	; (80160c4 <mode_PLtest+0x354>)
 801609a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801609e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80160a2:	ddf1      	ble.n	8016088 <mode_PLtest+0x318>
 80160a4:	4b07      	ldr	r3, [pc, #28]	; (80160c4 <mode_PLtest+0x354>)
 80160a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80160aa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80160ae:	ddeb      	ble.n	8016088 <mode_PLtest+0x318>
			}
			pl_r_blue_LED(OFF);
 80160b0:	2000      	movs	r0, #0
 80160b2:	f7f1 fde9 	bl	8007c88 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80160b6:	2000      	movs	r0, #0
 80160b8:	f7f1 fdf8 	bl	8007cac <pl_l_blue_LED>
			pl_FunMotor_stop();
 80160bc:	f7f2 fb08 	bl	80086d0 <pl_FunMotor_stop>
		break;
 80160c0:	e036      	b.n	8016130 <mode_PLtest+0x3c0>
 80160c2:	bf00      	nop
 80160c4:	200002bc 	.word	0x200002bc
 80160c8:	08025184 	.word	0x08025184
 80160cc:	2000f284 	.word	0x2000f284
 80160d0:	200006f0 	.word	0x200006f0
 80160d4:	080251b0 	.word	0x080251b0
 80160d8:	2000f290 	.word	0x2000f290
 80160dc:	3f7d70a4 	.word	0x3f7d70a4
	case 0b1011://fun
			pl_FunMotor_duty(0.99);
 80160e0:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 80160dc <mode_PLtest+0x36c>
 80160e4:	f7f2 fafe 	bl	80086e4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 80160e8:	f7f2 fae8 	bl	80086bc <pl_FunMotor_start>
			HAL_Delay(2000);
 80160ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80160f0:	f003 fb00 	bl	80196f4 <HAL_Delay>
			reset_gyro();
 80160f4:	f7eb fd88 	bl	8001c08 <reset_gyro>
			reset_speed();
 80160f8:	f7ea ff94 	bl	8001024 <reset_speed>
			clear_Ierror();
 80160fc:	f7ef f8d8 	bl	80052b0 <clear_Ierror>
			record_mode=2;
 8016100:	4b0e      	ldr	r3, [pc, #56]	; (801613c <mode_PLtest+0x3cc>)
 8016102:	2202      	movs	r2, #2
 8016104:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8016106:	2001      	movs	r0, #1
 8016108:	f7f1 fdbe 	bl	8007c88 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 801610c:	2001      	movs	r0, #1
 801610e:	f7f1 fdcd 	bl	8007cac <pl_l_blue_LED>
			no_angle();
 8016112:	f7ee fd05 	bl	8004b20 <no_angle>
			pl_r_blue_LED(OFF);
 8016116:	2000      	movs	r0, #0
 8016118:	f7f1 fdb6 	bl	8007c88 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 801611c:	2000      	movs	r0, #0
 801611e:	f7f1 fdc5 	bl	8007cac <pl_l_blue_LED>
			pl_FunMotor_stop();
 8016122:	f7f2 fad5 	bl	80086d0 <pl_FunMotor_stop>
		break;
 8016126:	e003      	b.n	8016130 <mode_PLtest+0x3c0>
	case 0b1111:	//record_out
		record_print();
 8016128:	f001 fb28 	bl	801777c <record_print>
		break;
 801612c:	e000      	b.n	8016130 <mode_PLtest+0x3c0>
		break;
 801612e:	bf00      	nop
//			record_print();
//		break;
	}
//

}
 8016130:	bf00      	nop
 8016132:	3720      	adds	r7, #32
 8016134:	46bd      	mov	sp, r7
 8016136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801613a:	bf00      	nop
 801613c:	2000f284 	.word	0x2000f284

08016140 <mode_Running>:


void mode_Running(unsigned char main_modeR){
 8016140:	b5b0      	push	{r4, r5, r7, lr}
 8016142:	b0da      	sub	sp, #360	; 0x168
 8016144:	af54      	add	r7, sp, #336	; 0x150
 8016146:	4603      	mov	r3, r0
 8016148:	71fb      	strb	r3, [r7, #7]

	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801614a:	2003      	movs	r0, #3
 801614c:	f7f2 fa36 	bl	80085bc <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016150:	2003      	movs	r0, #3
 8016152:	f7f2 fa5b 	bl	800860c <pl_R_DriveMotor_mode>
	reset_gyro();
 8016156:	f7eb fd57 	bl	8001c08 <reset_gyro>
	reset_speed();
 801615a:	f7ea ff63 	bl	8001024 <reset_speed>
	reset_distance();
 801615e:	f7ea ff1d 	bl	8000f9c <reset_distance>
	clear_Ierror();
 8016162:	f7ef f8a5 	bl	80052b0 <clear_Ierror>
	switch (main_modeR) {
 8016166:	79fb      	ldrb	r3, [r7, #7]
 8016168:	2b0f      	cmp	r3, #15
 801616a:	f200 81e7 	bhi.w	801653c <mode_Running+0x3fc>
 801616e:	a201      	add	r2, pc, #4	; (adr r2, 8016174 <mode_Running+0x34>)
 8016170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016174:	080161b5 	.word	0x080161b5
 8016178:	0801626d 	.word	0x0801626d
 801617c:	080162a5 	.word	0x080162a5
 8016180:	080162ab 	.word	0x080162ab
 8016184:	080162e3 	.word	0x080162e3
 8016188:	08016315 	.word	0x08016315
 801618c:	08016347 	.word	0x08016347
 8016190:	08016379 	.word	0x08016379
 8016194:	080163ab 	.word	0x080163ab
 8016198:	080163dd 	.word	0x080163dd
 801619c:	0801640f 	.word	0x0801640f
 80161a0:	08016441 	.word	0x08016441
 80161a4:	08016473 	.word	0x08016473
 80161a8:	080164a5 	.word	0x080164a5
 80161ac:	080164d7 	.word	0x080164d7
 80161b0:	08016509 	.word	0x08016509
		case 0b0000://迷路表示
			//maze_maker2(1, 0, 0, 0, 7, 7);
			//record_out();
			//wall.row[8]=(1<<8);
			maze_clear();
 80161b4:	f7fb f810 	bl	80111d8 <maze_clear>
			maze_out_matlab();
 80161b8:	f7fa ffe0 	bl	801117c <maze_out_matlab>

			create_StepCountMap_queue();
 80161bc:	f7fe fc06 	bl	80149cc <create_StepCountMap_queue>
			maze_display();
 80161c0:	f7ff fa22 	bl	8015608 <maze_display>

			create_DijkstraMap();
 80161c4:	f7fb fee2 	bl	8011f8c <create_DijkstraMap>
			maze_display_Dijkstra();
 80161c8:	f7ff fb32 	bl	8015830 <maze_display_Dijkstra>

			route_Dijkstra();
 80161cc:	f7fd fc16 	bl	80139fc <route_Dijkstra>
			create_StepCountMap_unknown();
 80161d0:	f7fe f8ca 	bl	8014368 <create_StepCountMap_unknown>
			maze_display();
 80161d4:	f7ff fa18 	bl	8015608 <maze_display>

			tic_timer();
 80161d8:	f7f2 fca4 	bl	8008b24 <tic_timer>
			for(int j=0;j<5000;j++){
 80161dc:	2300      	movs	r3, #0
 80161de:	617b      	str	r3, [r7, #20]
 80161e0:	e004      	b.n	80161ec <mode_Running+0xac>
			create_StepCountMap_queue();
 80161e2:	f7fe fbf3 	bl	80149cc <create_StepCountMap_queue>
			for(int j=0;j<5000;j++){
 80161e6:	697b      	ldr	r3, [r7, #20]
 80161e8:	3301      	adds	r3, #1
 80161ea:	617b      	str	r3, [r7, #20]
 80161ec:	697b      	ldr	r3, [r7, #20]
 80161ee:	f241 3287 	movw	r2, #4999	; 0x1387
 80161f2:	4293      	cmp	r3, r2
 80161f4:	ddf5      	ble.n	80161e2 <mode_Running+0xa2>
			}
			float tim2 = toc_timer();
 80161f6:	f7f2 fca7 	bl	8008b48 <toc_timer>
 80161fa:	ed87 0a03 	vstr	s0, [r7, #12]
			maze_display();
 80161fe:	f7ff fa03 	bl	8015608 <maze_display>
			printf("tim2=%f\n", tim2);
 8016202:	68f8      	ldr	r0, [r7, #12]
 8016204:	f7ea f9c8 	bl	8000598 <__aeabi_f2d>
 8016208:	4602      	mov	r2, r0
 801620a:	460b      	mov	r3, r1
 801620c:	48cd      	ldr	r0, [pc, #820]	; (8016544 <mode_Running+0x404>)
 801620e:	f00b f9c3 	bl	8021598 <iprintf>
			tic_timer();
 8016212:	f7f2 fc87 	bl	8008b24 <tic_timer>
			create_DijkstraMap();
 8016216:	f7fb feb9 	bl	8011f8c <create_DijkstraMap>
			for(int j=0;j<5000;j++){
 801621a:	2300      	movs	r3, #0
 801621c:	613b      	str	r3, [r7, #16]
 801621e:	e006      	b.n	801622e <mode_Running+0xee>
			//create_StepCountMap();
			//maze_clear();
			//create_DijkstraMap();
			route_Dijkstra();
 8016220:	f7fd fbec 	bl	80139fc <route_Dijkstra>
			create_StepCountMap_unknown();
 8016224:	f7fe f8a0 	bl	8014368 <create_StepCountMap_unknown>
			for(int j=0;j<5000;j++){
 8016228:	693b      	ldr	r3, [r7, #16]
 801622a:	3301      	adds	r3, #1
 801622c:	613b      	str	r3, [r7, #16]
 801622e:	693b      	ldr	r3, [r7, #16]
 8016230:	f241 3287 	movw	r2, #4999	; 0x1387
 8016234:	4293      	cmp	r3, r2
 8016236:	ddf3      	ble.n	8016220 <mode_Running+0xe0>

			}
			float tim1 = toc_timer();
 8016238:	f7f2 fc86 	bl	8008b48 <toc_timer>
 801623c:	ed87 0a02 	vstr	s0, [r7, #8]
			maze_display();
 8016240:	f7ff f9e2 	bl	8015608 <maze_display>
			maze_display_Dijkstra();
 8016244:	f7ff faf4 	bl	8015830 <maze_display_Dijkstra>
			printf("tim1=%f,tim2=%f\n", tim1, tim2);
 8016248:	68b8      	ldr	r0, [r7, #8]
 801624a:	f7ea f9a5 	bl	8000598 <__aeabi_f2d>
 801624e:	4604      	mov	r4, r0
 8016250:	460d      	mov	r5, r1
 8016252:	68f8      	ldr	r0, [r7, #12]
 8016254:	f7ea f9a0 	bl	8000598 <__aeabi_f2d>
 8016258:	4602      	mov	r2, r0
 801625a:	460b      	mov	r3, r1
 801625c:	e9cd 2300 	strd	r2, r3, [sp]
 8016260:	4622      	mov	r2, r4
 8016262:	462b      	mov	r3, r5
 8016264:	48b8      	ldr	r0, [pc, #736]	; (8016548 <mode_Running+0x408>)
 8016266:	f00b f997 	bl	8021598 <iprintf>
		break;
 801626a:	e167      	b.n	801653c <mode_Running+0x3fc>
		case 0b0001://足立法(遅い)
			tic_timer();
 801626c:	f7f2 fc5a 	bl	8008b24 <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,0);
 8016270:	4cb6      	ldr	r4, [pc, #728]	; (801654c <mode_Running+0x40c>)
 8016272:	2300      	movs	r3, #0
 8016274:	934f      	str	r3, [sp, #316]	; 0x13c
 8016276:	2301      	movs	r3, #1
 8016278:	934e      	str	r3, [sp, #312]	; 0x138
 801627a:	4668      	mov	r0, sp
 801627c:	f104 0310 	add.w	r3, r4, #16
 8016280:	f44f 729c 	mov.w	r2, #312	; 0x138
 8016284:	4619      	mov	r1, r3
 8016286:	f00a fd07 	bl	8020c98 <memcpy>
 801628a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801628e:	eddf 1ab0 	vldr	s3, [pc, #704]	; 8016550 <mode_Running+0x410>
 8016292:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 8016554 <mode_Running+0x414>
 8016296:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8016558 <mode_Running+0x418>
 801629a:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 801655c <mode_Running+0x41c>
 801629e:	f7f8 fe95 	bl	800efcc <AdatiWayReturn>
			//adati_wayreturn(400, 400, 3000, 13000);
		break;
 80162a2:	e14b      	b.n	801653c <mode_Running+0x3fc>
		case 0b0010://Flashから
			record_out();
 80162a4:	f7f1 ff58 	bl	8008158 <record_out>
		break;
 80162a8:	e148      	b.n	801653c <mode_Running+0x3fc>
		case 0b0011://ゴミ
			tic_timer();
 80162aa:	f7f2 fc3b 	bl	8008b24 <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,1);
 80162ae:	4ca7      	ldr	r4, [pc, #668]	; (801654c <mode_Running+0x40c>)
 80162b0:	2301      	movs	r3, #1
 80162b2:	934f      	str	r3, [sp, #316]	; 0x13c
 80162b4:	2301      	movs	r3, #1
 80162b6:	934e      	str	r3, [sp, #312]	; 0x138
 80162b8:	4668      	mov	r0, sp
 80162ba:	f104 0310 	add.w	r3, r4, #16
 80162be:	f44f 729c 	mov.w	r2, #312	; 0x138
 80162c2:	4619      	mov	r1, r3
 80162c4:	f00a fce8 	bl	8020c98 <memcpy>
 80162c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80162cc:	eddf 1aa0 	vldr	s3, [pc, #640]	; 8016550 <mode_Running+0x410>
 80162d0:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 8016554 <mode_Running+0x414>
 80162d4:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8016558 <mode_Running+0x418>
 80162d8:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 801655c <mode_Running+0x41c>
 80162dc:	f7f8 fe76 	bl	800efcc <AdatiWayReturn>
		break;
 80162e0:	e12c      	b.n	801653c <mode_Running+0x3fc>
		case 0b0100://ゴミ
			record_out();
 80162e2:	f7f1 ff39 	bl	8008158 <record_out>
			run_shortest(1000,3000,0,TURN_OFF,FUN_OFF,SLANT_OFF,speed300_shortest,0.3,0);
 80162e6:	2300      	movs	r3, #0
 80162e8:	9352      	str	r3, [sp, #328]	; 0x148
 80162ea:	4a9d      	ldr	r2, [pc, #628]	; (8016560 <mode_Running+0x420>)
 80162ec:	466b      	mov	r3, sp
 80162ee:	4611      	mov	r1, r2
 80162f0:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80162f4:	4618      	mov	r0, r3
 80162f6:	f00a fccf 	bl	8020c98 <memcpy>
 80162fa:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 8016564 <mode_Running+0x424>
 80162fe:	2300      	movs	r3, #0
 8016300:	2200      	movs	r2, #0
 8016302:	2100      	movs	r1, #0
 8016304:	2000      	movs	r0, #0
 8016306:	eddf 0a92 	vldr	s1, [pc, #584]	; 8016550 <mode_Running+0x410>
 801630a:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8016568 <mode_Running+0x428>
 801630e:	f7f9 fb6b 	bl	800f9e8 <run_shortest>
		break;
 8016312:	e113      	b.n	801653c <mode_Running+0x3fc>
		case 0b0101://
			record_out();
 8016314:	f7f1 ff20 	bl	8008158 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_OFF,speed600_shortest_mollifier,0.99,1);
 8016318:	2301      	movs	r3, #1
 801631a:	9352      	str	r3, [sp, #328]	; 0x148
 801631c:	4a93      	ldr	r2, [pc, #588]	; (801656c <mode_Running+0x42c>)
 801631e:	466b      	mov	r3, sp
 8016320:	4611      	mov	r1, r2
 8016322:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8016326:	4618      	mov	r0, r3
 8016328:	f00a fcb6 	bl	8020c98 <memcpy>
 801632c:	ed9f 1a90 	vldr	s2, [pc, #576]	; 8016570 <mode_Running+0x430>
 8016330:	2300      	movs	r3, #0
 8016332:	2200      	movs	r2, #0
 8016334:	2101      	movs	r1, #1
 8016336:	2000      	movs	r0, #0
 8016338:	eddf 0a85 	vldr	s1, [pc, #532]	; 8016550 <mode_Running+0x410>
 801633c:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8016568 <mode_Running+0x428>
 8016340:	f7f9 fb52 	bl	800f9e8 <run_shortest>
		break;
 8016344:	e0fa      	b.n	801653c <mode_Running+0x3fc>
		case 0b0110://吸引なしで斜め走行
			record_out();
 8016346:	f7f1 ff07 	bl	8008158 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_ON,speed600_shortest_mollifier,0.99,1);
 801634a:	2301      	movs	r3, #1
 801634c:	9352      	str	r3, [sp, #328]	; 0x148
 801634e:	4a87      	ldr	r2, [pc, #540]	; (801656c <mode_Running+0x42c>)
 8016350:	466b      	mov	r3, sp
 8016352:	4611      	mov	r1, r2
 8016354:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8016358:	4618      	mov	r0, r3
 801635a:	f00a fc9d 	bl	8020c98 <memcpy>
 801635e:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8016570 <mode_Running+0x430>
 8016362:	2301      	movs	r3, #1
 8016364:	2200      	movs	r2, #0
 8016366:	2101      	movs	r1, #1
 8016368:	2000      	movs	r0, #0
 801636a:	eddf 0a79 	vldr	s1, [pc, #484]	; 8016550 <mode_Running+0x410>
 801636e:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8016568 <mode_Running+0x428>
 8016372:	f7f9 fb39 	bl	800f9e8 <run_shortest>
		break;
 8016376:	e0e1      	b.n	801653c <mode_Running+0x3fc>
		case 0b0111://吸引ありで斜め走行
			record_out();
 8016378:	f7f1 feee 	bl	8008158 <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 801637c:	2301      	movs	r3, #1
 801637e:	9352      	str	r3, [sp, #328]	; 0x148
 8016380:	4a7c      	ldr	r2, [pc, #496]	; (8016574 <mode_Running+0x434>)
 8016382:	466b      	mov	r3, sp
 8016384:	4611      	mov	r1, r2
 8016386:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801638a:	4618      	mov	r0, r3
 801638c:	f00a fc84 	bl	8020c98 <memcpy>
 8016390:	ed9f 1a77 	vldr	s2, [pc, #476]	; 8016570 <mode_Running+0x430>
 8016394:	2301      	movs	r3, #1
 8016396:	2201      	movs	r2, #1
 8016398:	2101      	movs	r1, #1
 801639a:	2000      	movs	r0, #0
 801639c:	eddf 0a76 	vldr	s1, [pc, #472]	; 8016578 <mode_Running+0x438>
 80163a0:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8016550 <mode_Running+0x410>
 80163a4:	f7f9 fb20 	bl	800f9e8 <run_shortest>
		break;
 80163a8:	e0c8      	b.n	801653c <mode_Running+0x3fc>
		case 0b1000://
			record_out();
 80163aa:	f7f1 fed5 	bl	8008158 <record_out>
			run_shortest(3200,13000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 80163ae:	2301      	movs	r3, #1
 80163b0:	9352      	str	r3, [sp, #328]	; 0x148
 80163b2:	4a70      	ldr	r2, [pc, #448]	; (8016574 <mode_Running+0x434>)
 80163b4:	466b      	mov	r3, sp
 80163b6:	4611      	mov	r1, r2
 80163b8:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80163bc:	4618      	mov	r0, r3
 80163be:	f00a fc6b 	bl	8020c98 <memcpy>
 80163c2:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8016570 <mode_Running+0x430>
 80163c6:	2301      	movs	r3, #1
 80163c8:	2201      	movs	r2, #1
 80163ca:	2101      	movs	r1, #1
 80163cc:	2000      	movs	r0, #0
 80163ce:	eddf 0a6b 	vldr	s1, [pc, #428]	; 801657c <mode_Running+0x43c>
 80163d2:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8016580 <mode_Running+0x440>
 80163d6:	f7f9 fb07 	bl	800f9e8 <run_shortest>
		break;
 80163da:	e0af      	b.n	801653c <mode_Running+0x3fc>
		case 0b1001:
			record_out();
 80163dc:	f7f1 febc 	bl	8008158 <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 80163e0:	2301      	movs	r3, #1
 80163e2:	9352      	str	r3, [sp, #328]	; 0x148
 80163e4:	4a67      	ldr	r2, [pc, #412]	; (8016584 <mode_Running+0x444>)
 80163e6:	466b      	mov	r3, sp
 80163e8:	4611      	mov	r1, r2
 80163ea:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80163ee:	4618      	mov	r0, r3
 80163f0:	f00a fc52 	bl	8020c98 <memcpy>
 80163f4:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 8016570 <mode_Running+0x430>
 80163f8:	2301      	movs	r3, #1
 80163fa:	2201      	movs	r2, #1
 80163fc:	2101      	movs	r1, #1
 80163fe:	2000      	movs	r0, #0
 8016400:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8016578 <mode_Running+0x438>
 8016404:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8016550 <mode_Running+0x410>
 8016408:	f7f9 faee 	bl	800f9e8 <run_shortest>
		break;
 801640c:	e096      	b.n	801653c <mode_Running+0x3fc>
		case 0b1010:
			record_out();
 801640e:	f7f1 fea3 	bl	8008158 <record_out>
			run_shortest(3200,13000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 8016412:	2301      	movs	r3, #1
 8016414:	9352      	str	r3, [sp, #328]	; 0x148
 8016416:	4a5b      	ldr	r2, [pc, #364]	; (8016584 <mode_Running+0x444>)
 8016418:	466b      	mov	r3, sp
 801641a:	4611      	mov	r1, r2
 801641c:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8016420:	4618      	mov	r0, r3
 8016422:	f00a fc39 	bl	8020c98 <memcpy>
 8016426:	ed9f 1a52 	vldr	s2, [pc, #328]	; 8016570 <mode_Running+0x430>
 801642a:	2301      	movs	r3, #1
 801642c:	2201      	movs	r2, #1
 801642e:	2101      	movs	r1, #1
 8016430:	2000      	movs	r0, #0
 8016432:	eddf 0a52 	vldr	s1, [pc, #328]	; 801657c <mode_Running+0x43c>
 8016436:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8016580 <mode_Running+0x440>
 801643a:	f7f9 fad5 	bl	800f9e8 <run_shortest>
		break;
 801643e:	e07d      	b.n	801653c <mode_Running+0x3fc>
		case 0b1011:
			record_out();
 8016440:	f7f1 fe8a 	bl	8008158 <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 8016444:	2301      	movs	r3, #1
 8016446:	9352      	str	r3, [sp, #328]	; 0x148
 8016448:	4a4a      	ldr	r2, [pc, #296]	; (8016574 <mode_Running+0x434>)
 801644a:	466b      	mov	r3, sp
 801644c:	4611      	mov	r1, r2
 801644e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8016452:	4618      	mov	r0, r3
 8016454:	f00a fc20 	bl	8020c98 <memcpy>
 8016458:	ed9f 1a45 	vldr	s2, [pc, #276]	; 8016570 <mode_Running+0x430>
 801645c:	2301      	movs	r3, #1
 801645e:	2201      	movs	r2, #1
 8016460:	2101      	movs	r1, #1
 8016462:	2000      	movs	r0, #0
 8016464:	eddf 0a48 	vldr	s1, [pc, #288]	; 8016588 <mode_Running+0x448>
 8016468:	ed9f 0a48 	vldr	s0, [pc, #288]	; 801658c <mode_Running+0x44c>
 801646c:	f7f9 fabc 	bl	800f9e8 <run_shortest>
		break;
 8016470:	e064      	b.n	801653c <mode_Running+0x3fc>
		case 0b1100:
			record_out();
 8016472:	f7f1 fe71 	bl	8008158 <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 8016476:	2301      	movs	r3, #1
 8016478:	9352      	str	r3, [sp, #328]	; 0x148
 801647a:	4a42      	ldr	r2, [pc, #264]	; (8016584 <mode_Running+0x444>)
 801647c:	466b      	mov	r3, sp
 801647e:	4611      	mov	r1, r2
 8016480:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8016484:	4618      	mov	r0, r3
 8016486:	f00a fc07 	bl	8020c98 <memcpy>
 801648a:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8016570 <mode_Running+0x430>
 801648e:	2301      	movs	r3, #1
 8016490:	2201      	movs	r2, #1
 8016492:	2101      	movs	r1, #1
 8016494:	2000      	movs	r0, #0
 8016496:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8016588 <mode_Running+0x448>
 801649a:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 801658c <mode_Running+0x44c>
 801649e:	f7f9 faa3 	bl	800f9e8 <run_shortest>
		break;
 80164a2:	e04b      	b.n	801653c <mode_Running+0x3fc>
		case 0b1101:
			record_out();
 80164a4:	f7f1 fe58 	bl	8008158 <record_out>
			run_shortest(3100,11000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest_mollifier,0.99,1);
 80164a8:	2301      	movs	r3, #1
 80164aa:	9352      	str	r3, [sp, #328]	; 0x148
 80164ac:	4a38      	ldr	r2, [pc, #224]	; (8016590 <mode_Running+0x450>)
 80164ae:	466b      	mov	r3, sp
 80164b0:	4611      	mov	r1, r2
 80164b2:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80164b6:	4618      	mov	r0, r3
 80164b8:	f00a fbee 	bl	8020c98 <memcpy>
 80164bc:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8016570 <mode_Running+0x430>
 80164c0:	2301      	movs	r3, #1
 80164c2:	2201      	movs	r2, #1
 80164c4:	2101      	movs	r1, #1
 80164c6:	2000      	movs	r0, #0
 80164c8:	eddf 0a32 	vldr	s1, [pc, #200]	; 8016594 <mode_Running+0x454>
 80164cc:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8016598 <mode_Running+0x458>
 80164d0:	f7f9 fa8a 	bl	800f9e8 <run_shortest>
		break;
 80164d4:	e032      	b.n	801653c <mode_Running+0x3fc>
		case 0b1110:
			record_out();
 80164d6:	f7f1 fe3f 	bl	8008158 <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest_mollifier,0.99,1);
 80164da:	2301      	movs	r3, #1
 80164dc:	9352      	str	r3, [sp, #328]	; 0x148
 80164de:	4a2c      	ldr	r2, [pc, #176]	; (8016590 <mode_Running+0x450>)
 80164e0:	466b      	mov	r3, sp
 80164e2:	4611      	mov	r1, r2
 80164e4:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80164e8:	4618      	mov	r0, r3
 80164ea:	f00a fbd5 	bl	8020c98 <memcpy>
 80164ee:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8016570 <mode_Running+0x430>
 80164f2:	2301      	movs	r3, #1
 80164f4:	2201      	movs	r2, #1
 80164f6:	2101      	movs	r1, #1
 80164f8:	2000      	movs	r0, #0
 80164fa:	eddf 0a23 	vldr	s1, [pc, #140]	; 8016588 <mode_Running+0x448>
 80164fe:	ed9f 0a23 	vldr	s0, [pc, #140]	; 801658c <mode_Running+0x44c>
 8016502:	f7f9 fa71 	bl	800f9e8 <run_shortest>
		break;
 8016506:	e019      	b.n	801653c <mode_Running+0x3fc>
		case 0b1111:
			AdatiWayReturn(250,400,2000,3000,speed250_exploration,1,0);
 8016508:	4c24      	ldr	r4, [pc, #144]	; (801659c <mode_Running+0x45c>)
 801650a:	2300      	movs	r3, #0
 801650c:	934f      	str	r3, [sp, #316]	; 0x13c
 801650e:	2301      	movs	r3, #1
 8016510:	934e      	str	r3, [sp, #312]	; 0x138
 8016512:	4668      	mov	r0, sp
 8016514:	f104 0310 	add.w	r3, r4, #16
 8016518:	f44f 729c 	mov.w	r2, #312	; 0x138
 801651c:	4619      	mov	r1, r3
 801651e:	f00a fbbb 	bl	8020c98 <memcpy>
 8016522:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016526:	eddf 1a0a 	vldr	s3, [pc, #40]	; 8016550 <mode_Running+0x410>
 801652a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8016554 <mode_Running+0x414>
 801652e:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8016558 <mode_Running+0x418>
 8016532:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80165a0 <mode_Running+0x460>
 8016536:	f7f8 fd49 	bl	800efcc <AdatiWayReturn>
		break;
 801653a:	bf00      	nop
	}


}
 801653c:	bf00      	nop
 801653e:	3718      	adds	r7, #24
 8016540:	46bd      	mov	sp, r7
 8016542:	bdb0      	pop	{r4, r5, r7, pc}
 8016544:	080251fc 	.word	0x080251fc
 8016548:	08025208 	.word	0x08025208
 801654c:	2000f444 	.word	0x2000f444
 8016550:	453b8000 	.word	0x453b8000
 8016554:	44fa0000 	.word	0x44fa0000
 8016558:	43c80000 	.word	0x43c80000
 801655c:	43960000 	.word	0x43960000
 8016560:	2000f6d4 	.word	0x2000f6d4
 8016564:	3e99999a 	.word	0x3e99999a
 8016568:	447a0000 	.word	0x447a0000
 801656c:	2000f81c 	.word	0x2000f81c
 8016570:	3f7d70a4 	.word	0x3f7d70a4
 8016574:	2000f964 	.word	0x2000f964
 8016578:	461c4000 	.word	0x461c4000
 801657c:	464b2000 	.word	0x464b2000
 8016580:	45480000 	.word	0x45480000
 8016584:	2000faac 	.word	0x2000faac
 8016588:	4684d000 	.word	0x4684d000
 801658c:	457a0000 	.word	0x457a0000
 8016590:	2000fbf4 	.word	0x2000fbf4
 8016594:	462be000 	.word	0x462be000
 8016598:	4541c000 	.word	0x4541c000
 801659c:	2000f58c 	.word	0x2000f58c
 80165a0:	437a0000 	.word	0x437a0000

080165a4 <mode_Tuning0>:





void mode_Tuning0(unsigned char main_modeR){
 80165a4:	b590      	push	{r4, r7, lr}
 80165a6:	b0db      	sub	sp, #364	; 0x16c
 80165a8:	af52      	add	r7, sp, #328	; 0x148
 80165aa:	4603      	mov	r3, r0
 80165ac:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	int duty_L=0, duty_R=0;
 80165ae:	2300      	movs	r3, #0
 80165b0:	613b      	str	r3, [r7, #16]
 80165b2:	2300      	movs	r3, #0
 80165b4:	60fb      	str	r3, [r7, #12]
	mode.WallControlMode=0;
 80165b6:	2300      	movs	r3, #0
 80165b8:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 80165ba:	2300      	movs	r3, #0
 80165bc:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 80165be:	2300      	movs	r3, #0
 80165c0:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 80165c2:	2300      	movs	r3, #0
 80165c4:	75bb      	strb	r3, [r7, #22]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80165c6:	2003      	movs	r0, #3
 80165c8:	f7f1 fff8 	bl	80085bc <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80165cc:	2003      	movs	r0, #3
 80165ce:	f7f2 f81d 	bl	800860c <pl_R_DriveMotor_mode>
	reset_gyro();
 80165d2:	f7eb fb19 	bl	8001c08 <reset_gyro>
	reset_speed();
 80165d6:	f7ea fd25 	bl	8001024 <reset_speed>
	reset_distance();
 80165da:	f7ea fcdf 	bl	8000f9c <reset_distance>
	clear_Ierror();
 80165de:	f7ee fe67 	bl	80052b0 <clear_Ierror>

	switch (main_modeR) {
 80165e2:	79fb      	ldrb	r3, [r7, #7]
 80165e4:	2b0f      	cmp	r3, #15
 80165e6:	f200 8341 	bhi.w	8016c6c <mode_Tuning0+0x6c8>
 80165ea:	a201      	add	r2, pc, #4	; (adr r2, 80165f0 <mode_Tuning0+0x4c>)
 80165ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165f0:	08016631 	.word	0x08016631
 80165f4:	080166bb 	.word	0x080166bb
 80165f8:	080166e1 	.word	0x080166e1
 80165fc:	08016707 	.word	0x08016707
 8016600:	08016737 	.word	0x08016737
 8016604:	08016767 	.word	0x08016767
 8016608:	08016831 	.word	0x08016831
 801660c:	08016885 	.word	0x08016885
 8016610:	080168d5 	.word	0x080168d5
 8016614:	080168f9 	.word	0x080168f9
 8016618:	08016955 	.word	0x08016955
 801661c:	08016a5d 	.word	0x08016a5d
 8016620:	08016a83 	.word	0x08016a83
 8016624:	08016ab5 	.word	0x08016ab5
 8016628:	08016bcd 	.word	0x08016bcd
 801662c:	08016c1d 	.word	0x08016c1d
		case 0://タイヤ径　エンコーダ+PID
			record_mode=3;
 8016630:	4bdd      	ldr	r3, [pc, #884]	; (80169a8 <mode_Tuning0+0x404>)
 8016632:	2203      	movs	r2, #3
 8016634:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016636:	2300      	movs	r3, #0
 8016638:	753b      	strb	r3, [r7, #20]
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			straight_table2(540, 0, 0, 1600, 13000,mode);
 801663a:	6978      	ldr	r0, [r7, #20]
 801663c:	ed9f 2adb 	vldr	s4, [pc, #876]	; 80169ac <mode_Tuning0+0x408>
 8016640:	eddf 1adb 	vldr	s3, [pc, #876]	; 80169b0 <mode_Tuning0+0x40c>
 8016644:	ed9f 1adb 	vldr	s2, [pc, #876]	; 80169b4 <mode_Tuning0+0x410>
 8016648:	eddf 0ada 	vldr	s1, [pc, #872]	; 80169b4 <mode_Tuning0+0x410>
 801664c:	ed9f 0ada 	vldr	s0, [pc, #872]	; 80169b8 <mode_Tuning0+0x414>
 8016650:	f7ed fb1e 	bl	8003c90 <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8016654:	ed9f 2ad9 	vldr	s4, [pc, #868]	; 80169bc <mode_Tuning0+0x418>
 8016658:	eddf 1ad9 	vldr	s3, [pc, #868]	; 80169c0 <mode_Tuning0+0x41c>
 801665c:	ed9f 1ad5 	vldr	s2, [pc, #852]	; 80169b4 <mode_Tuning0+0x410>
 8016660:	eddf 0ad4 	vldr	s1, [pc, #848]	; 80169b4 <mode_Tuning0+0x410>
 8016664:	ed9f 0ad7 	vldr	s0, [pc, #860]	; 80169c4 <mode_Tuning0+0x420>
 8016668:	f7ee f83c 	bl	80046e4 <turning_table2>
			straight_table2(540, 0, 0, 2000, 15000,mode);
 801666c:	6978      	ldr	r0, [r7, #20]
 801666e:	ed9f 2ad6 	vldr	s4, [pc, #856]	; 80169c8 <mode_Tuning0+0x424>
 8016672:	eddf 1ad6 	vldr	s3, [pc, #856]	; 80169cc <mode_Tuning0+0x428>
 8016676:	ed9f 1acf 	vldr	s2, [pc, #828]	; 80169b4 <mode_Tuning0+0x410>
 801667a:	eddf 0ace 	vldr	s1, [pc, #824]	; 80169b4 <mode_Tuning0+0x410>
 801667e:	ed9f 0ace 	vldr	s0, [pc, #824]	; 80169b8 <mode_Tuning0+0x414>
 8016682:	f7ed fb05 	bl	8003c90 <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8016686:	ed9f 2acd 	vldr	s4, [pc, #820]	; 80169bc <mode_Tuning0+0x418>
 801668a:	eddf 1acd 	vldr	s3, [pc, #820]	; 80169c0 <mode_Tuning0+0x41c>
 801668e:	ed9f 1ac9 	vldr	s2, [pc, #804]	; 80169b4 <mode_Tuning0+0x410>
 8016692:	eddf 0ac8 	vldr	s1, [pc, #800]	; 80169b4 <mode_Tuning0+0x410>
 8016696:	ed9f 0acb 	vldr	s0, [pc, #812]	; 80169c4 <mode_Tuning0+0x420>
 801669a:	f7ee f823 	bl	80046e4 <turning_table2>
			straight_table2(540, 0, 0, 2400, 20000,mode);
 801669e:	6978      	ldr	r0, [r7, #20]
 80166a0:	ed9f 2acb 	vldr	s4, [pc, #812]	; 80169d0 <mode_Tuning0+0x42c>
 80166a4:	eddf 1acb 	vldr	s3, [pc, #812]	; 80169d4 <mode_Tuning0+0x430>
 80166a8:	ed9f 1ac2 	vldr	s2, [pc, #776]	; 80169b4 <mode_Tuning0+0x410>
 80166ac:	eddf 0ac1 	vldr	s1, [pc, #772]	; 80169b4 <mode_Tuning0+0x410>
 80166b0:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 80169b8 <mode_Tuning0+0x414>
 80166b4:	f7ed faec 	bl	8003c90 <straight_table2>
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			//straight_table2(450, 0, 0, 1000, 13000,mode);
			//control_test_motor2(0,0,10);
		break;
 80166b8:	e2d8      	b.n	8016c6c <mode_Tuning0+0x6c8>
		case 1://トレッド幅??ジャイロ
			record_mode = 5;
 80166ba:	4bbb      	ldr	r3, [pc, #748]	; (80169a8 <mode_Tuning0+0x404>)
 80166bc:	2205      	movs	r2, #5
 80166be:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80166c0:	2300      	movs	r3, #0
 80166c2:	753b      	strb	r3, [r7, #20]
//			straight_table2(400, 0, 0, 400, 3000,mode);
			straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 80166c4:	6978      	ldr	r0, [r7, #20]
 80166c6:	ed9f 2ac4 	vldr	s4, [pc, #784]	; 80169d8 <mode_Tuning0+0x434>
 80166ca:	eddf 1ac4 	vldr	s3, [pc, #784]	; 80169dc <mode_Tuning0+0x438>
 80166ce:	ed9f 1ab9 	vldr	s2, [pc, #740]	; 80169b4 <mode_Tuning0+0x410>
 80166d2:	eddf 0ab8 	vldr	s1, [pc, #736]	; 80169b4 <mode_Tuning0+0x410>
 80166d6:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 80169e0 <mode_Tuning0+0x43c>
 80166da:	f7ed fad9 	bl	8003c90 <straight_table2>
			//turning_table2(360*10, 0, 0, 800, 8000);
			//control_test_motor2(1,0,5);
		break;
 80166de:	e2c5      	b.n	8016c6c <mode_Tuning0+0x6c8>
		case 2://壁制御
			record_mode=4;
 80166e0:	4bb1      	ldr	r3, [pc, #708]	; (80169a8 <mode_Tuning0+0x404>)
 80166e2:	2204      	movs	r2, #4
 80166e4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80166e6:	2301      	movs	r3, #1
 80166e8:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 300, 6000,mode);
 80166ea:	6978      	ldr	r0, [r7, #20]
 80166ec:	ed9f 2abd 	vldr	s4, [pc, #756]	; 80169e4 <mode_Tuning0+0x440>
 80166f0:	eddf 1abd 	vldr	s3, [pc, #756]	; 80169e8 <mode_Tuning0+0x444>
 80166f4:	ed9f 1aaf 	vldr	s2, [pc, #700]	; 80169b4 <mode_Tuning0+0x410>
 80166f8:	eddf 0aae 	vldr	s1, [pc, #696]	; 80169b4 <mode_Tuning0+0x410>
 80166fc:	ed9f 0abb 	vldr	s0, [pc, #748]	; 80169ec <mode_Tuning0+0x448>
 8016700:	f7ed fac6 	bl	8003c90 <straight_table2>
			//control_test_motor2(0,1,6);
		break;
 8016704:	e2b2      	b.n	8016c6c <mode_Tuning0+0x6c8>
		case 3://右スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,-90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);

			testturning(speed300_exploration,0,0,0,0,0);
 8016706:	4cba      	ldr	r4, [pc, #744]	; (80169f0 <mode_Tuning0+0x44c>)
 8016708:	2300      	movs	r3, #0
 801670a:	9351      	str	r3, [sp, #324]	; 0x144
 801670c:	2300      	movs	r3, #0
 801670e:	9350      	str	r3, [sp, #320]	; 0x140
 8016710:	2300      	movs	r3, #0
 8016712:	934f      	str	r3, [sp, #316]	; 0x13c
 8016714:	2300      	movs	r3, #0
 8016716:	934e      	str	r3, [sp, #312]	; 0x138
 8016718:	4668      	mov	r0, sp
 801671a:	f104 0310 	add.w	r3, r4, #16
 801671e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8016722:	4619      	mov	r1, r3
 8016724:	f00a fab8 	bl	8020c98 <memcpy>
 8016728:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801672c:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 80169b4 <mode_Tuning0+0x410>
 8016730:	f7f7 ffe6 	bl	800e700 <testturning>
		break;
 8016734:	e29a      	b.n	8016c6c <mode_Tuning0+0x6c8>
		case 4://左スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
			testturning(speed300_exploration,1,0,0,0,0);
 8016736:	4cae      	ldr	r4, [pc, #696]	; (80169f0 <mode_Tuning0+0x44c>)
 8016738:	2300      	movs	r3, #0
 801673a:	9351      	str	r3, [sp, #324]	; 0x144
 801673c:	2300      	movs	r3, #0
 801673e:	9350      	str	r3, [sp, #320]	; 0x140
 8016740:	2300      	movs	r3, #0
 8016742:	934f      	str	r3, [sp, #316]	; 0x13c
 8016744:	2301      	movs	r3, #1
 8016746:	934e      	str	r3, [sp, #312]	; 0x138
 8016748:	4668      	mov	r0, sp
 801674a:	f104 0310 	add.w	r3, r4, #16
 801674e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8016752:	4619      	mov	r1, r3
 8016754:	f00a faa0 	bl	8020c98 <memcpy>
 8016758:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801675c:	ed9f 0a95 	vldr	s0, [pc, #596]	; 80169b4 <mode_Tuning0+0x410>
 8016760:	f7f7 ffce 	bl	800e700 <testturning>
		break;
 8016764:	e282      	b.n	8016c6c <mode_Tuning0+0x6c8>
		case 5://直進(制御なし)
			highspeed_mode = 1;
 8016766:	4ba3      	ldr	r3, [pc, #652]	; (80169f4 <mode_Tuning0+0x450>)
 8016768:	2201      	movs	r2, #1
 801676a:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 801676c:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 80169f8 <mode_Tuning0+0x454>
 8016770:	f7f1 ffb8 	bl	80086e4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8016774:	f7f1 ffa2 	bl	80086bc <pl_FunMotor_start>
			HAL_Delay(600);
 8016778:	f44f 7016 	mov.w	r0, #600	; 0x258
 801677c:	f002 ffba 	bl	80196f4 <HAL_Delay>
			reset_gyro();
 8016780:	f7eb fa42 	bl	8001c08 <reset_gyro>
			reset_speed();
 8016784:	f7ea fc4e 	bl	8001024 <reset_speed>
			reset_distance();
 8016788:	f7ea fc08 	bl	8000f9c <reset_distance>
			clear_Ierror();
 801678c:	f7ee fd90 	bl	80052b0 <clear_Ierror>
			record_mode=6;
 8016790:	4b85      	ldr	r3, [pc, #532]	; (80169a8 <mode_Tuning0+0x404>)
 8016792:	2206      	movs	r2, #6
 8016794:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016796:	2301      	movs	r3, #1
 8016798:	753b      	strb	r3, [r7, #20]
			theta_comp_gain=0;
 801679a:	4b98      	ldr	r3, [pc, #608]	; (80169fc <mode_Tuning0+0x458>)
 801679c:	f04f 0200 	mov.w	r2, #0
 80167a0:	601a      	str	r2, [r3, #0]
			straight_table2(90*8, 0, 0, 2800, 18000,mode);
 80167a2:	6978      	ldr	r0, [r7, #20]
 80167a4:	ed9f 2a96 	vldr	s4, [pc, #600]	; 8016a00 <mode_Tuning0+0x45c>
 80167a8:	eddf 1a96 	vldr	s3, [pc, #600]	; 8016a04 <mode_Tuning0+0x460>
 80167ac:	ed9f 1a81 	vldr	s2, [pc, #516]	; 80169b4 <mode_Tuning0+0x410>
 80167b0:	eddf 0a80 	vldr	s1, [pc, #512]	; 80169b4 <mode_Tuning0+0x410>
 80167b4:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 80169ec <mode_Tuning0+0x448>
 80167b8:	f7ed fa6a 	bl	8003c90 <straight_table2>
			mode.WallControlMode=0;
 80167bc:	2300      	movs	r3, #0
 80167be:	753b      	strb	r3, [r7, #20]
			theta_comp_gain=0;
 80167c0:	4b8e      	ldr	r3, [pc, #568]	; (80169fc <mode_Tuning0+0x458>)
 80167c2:	f04f 0200 	mov.w	r2, #0
 80167c6:	601a      	str	r2, [r3, #0]
			straight_table2(-90*8, 0, 0, -2000, 14000,mode);
 80167c8:	6978      	ldr	r0, [r7, #20]
 80167ca:	ed9f 2a8f 	vldr	s4, [pc, #572]	; 8016a08 <mode_Tuning0+0x464>
 80167ce:	eddf 1a8f 	vldr	s3, [pc, #572]	; 8016a0c <mode_Tuning0+0x468>
 80167d2:	ed9f 1a78 	vldr	s2, [pc, #480]	; 80169b4 <mode_Tuning0+0x410>
 80167d6:	eddf 0a77 	vldr	s1, [pc, #476]	; 80169b4 <mode_Tuning0+0x410>
 80167da:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8016a10 <mode_Tuning0+0x46c>
 80167de:	f7ed fa57 	bl	8003c90 <straight_table2>
			mode.WallControlMode=1;
 80167e2:	2301      	movs	r3, #1
 80167e4:	753b      	strb	r3, [r7, #20]
			theta_comp_gain=1;
 80167e6:	4b85      	ldr	r3, [pc, #532]	; (80169fc <mode_Tuning0+0x458>)
 80167e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80167ec:	601a      	str	r2, [r3, #0]
			straight_table2(90*8, 0, 0, 2800, 18000,mode);
 80167ee:	6978      	ldr	r0, [r7, #20]
 80167f0:	ed9f 2a83 	vldr	s4, [pc, #524]	; 8016a00 <mode_Tuning0+0x45c>
 80167f4:	eddf 1a83 	vldr	s3, [pc, #524]	; 8016a04 <mode_Tuning0+0x460>
 80167f8:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 80169b4 <mode_Tuning0+0x410>
 80167fc:	eddf 0a6d 	vldr	s1, [pc, #436]	; 80169b4 <mode_Tuning0+0x410>
 8016800:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 80169ec <mode_Tuning0+0x448>
 8016804:	f7ed fa44 	bl	8003c90 <straight_table2>
			mode.WallControlMode=0;
 8016808:	2300      	movs	r3, #0
 801680a:	753b      	strb	r3, [r7, #20]
			theta_comp_gain=1;
 801680c:	4b7b      	ldr	r3, [pc, #492]	; (80169fc <mode_Tuning0+0x458>)
 801680e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8016812:	601a      	str	r2, [r3, #0]
			straight_table2(-90*8, 0, 0, -2000, 14000,mode);
 8016814:	6978      	ldr	r0, [r7, #20]
 8016816:	ed9f 2a7c 	vldr	s4, [pc, #496]	; 8016a08 <mode_Tuning0+0x464>
 801681a:	eddf 1a7c 	vldr	s3, [pc, #496]	; 8016a0c <mode_Tuning0+0x468>
 801681e:	ed9f 1a65 	vldr	s2, [pc, #404]	; 80169b4 <mode_Tuning0+0x410>
 8016822:	eddf 0a64 	vldr	s1, [pc, #400]	; 80169b4 <mode_Tuning0+0x410>
 8016826:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8016a10 <mode_Tuning0+0x46c>
 801682a:	f7ed fa31 	bl	8003c90 <straight_table2>

		break;
 801682e:	e21d      	b.n	8016c6c <mode_Tuning0+0x6c8>
		case 6://斜め直進(制御あり)
			highspeed_mode = 1;
 8016830:	4b70      	ldr	r3, [pc, #448]	; (80169f4 <mode_Tuning0+0x450>)
 8016832:	2201      	movs	r2, #1
 8016834:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8016836:	ed9f 0a70 	vldr	s0, [pc, #448]	; 80169f8 <mode_Tuning0+0x454>
 801683a:	f7f1 ff53 	bl	80086e4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 801683e:	f7f1 ff3d 	bl	80086bc <pl_FunMotor_start>
			HAL_Delay(600);
 8016842:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016846:	f002 ff55 	bl	80196f4 <HAL_Delay>
			reset_gyro();
 801684a:	f7eb f9dd 	bl	8001c08 <reset_gyro>
			reset_speed();
 801684e:	f7ea fbe9 	bl	8001024 <reset_speed>
			reset_distance();
 8016852:	f7ea fba3 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8016856:	f7ee fd2b 	bl	80052b0 <clear_Ierror>
			record_mode=3;
 801685a:	4b53      	ldr	r3, [pc, #332]	; (80169a8 <mode_Tuning0+0x404>)
 801685c:	2203      	movs	r2, #3
 801685e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016860:	2301      	movs	r3, #1
 8016862:	753b      	strb	r3, [r7, #20]
			straight_table_max(90*8, 0, 0, 4000, 17000,30000,mode);
 8016864:	6978      	ldr	r0, [r7, #20]
 8016866:	eddf 2a6b 	vldr	s5, [pc, #428]	; 8016a14 <mode_Tuning0+0x470>
 801686a:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 8016a18 <mode_Tuning0+0x474>
 801686e:	eddf 1a53 	vldr	s3, [pc, #332]	; 80169bc <mode_Tuning0+0x418>
 8016872:	ed9f 1a50 	vldr	s2, [pc, #320]	; 80169b4 <mode_Tuning0+0x410>
 8016876:	eddf 0a4f 	vldr	s1, [pc, #316]	; 80169b4 <mode_Tuning0+0x410>
 801687a:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 80169ec <mode_Tuning0+0x448>
 801687e:	f7ed f8c7 	bl	8003a10 <straight_table_max>
		break;
 8016882:	e1f3      	b.n	8016c6c <mode_Tuning0+0x6c8>
		case 7://斜め直進(平松さん式制御あり)
			highspeed_mode = 1;
 8016884:	4b5b      	ldr	r3, [pc, #364]	; (80169f4 <mode_Tuning0+0x450>)
 8016886:	2201      	movs	r2, #1
 8016888:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 801688a:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 80169f8 <mode_Tuning0+0x454>
 801688e:	f7f1 ff29 	bl	80086e4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8016892:	f7f1 ff13 	bl	80086bc <pl_FunMotor_start>
			HAL_Delay(600);
 8016896:	f44f 7016 	mov.w	r0, #600	; 0x258
 801689a:	f002 ff2b 	bl	80196f4 <HAL_Delay>
			reset_gyro();
 801689e:	f7eb f9b3 	bl	8001c08 <reset_gyro>
			reset_speed();
 80168a2:	f7ea fbbf 	bl	8001024 <reset_speed>
			reset_distance();
 80168a6:	f7ea fb79 	bl	8000f9c <reset_distance>
			clear_Ierror();
 80168aa:	f7ee fd01 	bl	80052b0 <clear_Ierror>
			record_mode=3;
 80168ae:	4b3e      	ldr	r3, [pc, #248]	; (80169a8 <mode_Tuning0+0x404>)
 80168b0:	2203      	movs	r2, #3
 80168b2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80168b4:	2301      	movs	r3, #1
 80168b6:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 3000, 10000,mode);
 80168b8:	6978      	ldr	r0, [r7, #20]
 80168ba:	ed9f 2a58 	vldr	s4, [pc, #352]	; 8016a1c <mode_Tuning0+0x478>
 80168be:	eddf 1a58 	vldr	s3, [pc, #352]	; 8016a20 <mode_Tuning0+0x47c>
 80168c2:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 80169b4 <mode_Tuning0+0x410>
 80168c6:	eddf 0a3b 	vldr	s1, [pc, #236]	; 80169b4 <mode_Tuning0+0x410>
 80168ca:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80169ec <mode_Tuning0+0x448>
 80168ce:	f7ed f9df 	bl	8003c90 <straight_table2>
		break;
 80168d2:	e1cb      	b.n	8016c6c <mode_Tuning0+0x6c8>
		case 8://宴会芸
			record_mode=2;
 80168d4:	4b34      	ldr	r3, [pc, #208]	; (80169a8 <mode_Tuning0+0x404>)
 80168d6:	2202      	movs	r2, #2
 80168d8:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 80168da:	2001      	movs	r0, #1
 80168dc:	f7f1 f9d4 	bl	8007c88 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80168e0:	2001      	movs	r0, #1
 80168e2:	f7f1 f9e3 	bl	8007cac <pl_l_blue_LED>
			no_angle();
 80168e6:	f7ee f91b 	bl	8004b20 <no_angle>
			pl_r_blue_LED(OFF);
 80168ea:	2000      	movs	r0, #0
 80168ec:	f7f1 f9cc 	bl	8007c88 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80168f0:	2000      	movs	r0, #0
 80168f2:	f7f1 f9db 	bl	8007cac <pl_l_blue_LED>
		break;
 80168f6:	e1b9      	b.n	8016c6c <mode_Tuning0+0x6c8>
		case 9://システム同定enc

			pl_r_blue_LED(ON);
 80168f8:	2001      	movs	r0, #1
 80168fa:	f7f1 f9c5 	bl	8007c88 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80168fe:	2001      	movs	r0, #1
 8016900:	f7f1 f9d4 	bl	8007cac <pl_l_blue_LED>
//			straight_table_ff(90, 0, 300, 300, 500);
//			straight_table_ff(90, 300, 600, 600, 1500);
//			straight_table_ff(90, 600, 300, 600, 1500);
//			straight_table_ff(90, 300, 0, 300, 500);

			get_duty(1, 1,&duty_L,&duty_R);
 8016904:	f107 020c 	add.w	r2, r7, #12
 8016908:	f107 0310 	add.w	r3, r7, #16
 801690c:	4611      	mov	r1, r2
 801690e:	4618      	mov	r0, r3
 8016910:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8016914:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016918:	f7eb fcf4 	bl	8002304 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 801691c:	693b      	ldr	r3, [r7, #16]
 801691e:	68fa      	ldr	r2, [r7, #12]
 8016920:	4611      	mov	r1, r2
 8016922:	4618      	mov	r0, r3
 8016924:	f7f1 feb4 	bl	8008690 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 8016928:	f7f1 fe96 	bl	8008658 <pl_DriveMotor_start>
			wait_ms(3000);
 801692c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8016930:	f7f2 f926 	bl	8008b80 <wait_ms>
			record_mode=11;
 8016934:	4b1c      	ldr	r3, [pc, #112]	; (80169a8 <mode_Tuning0+0x404>)
 8016936:	220b      	movs	r2, #11
 8016938:	701a      	strb	r2, [r3, #0]
			wait_ms(2000);
 801693a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801693e:	f7f2 f91f 	bl	8008b80 <wait_ms>
//				wait_ms(1);
//				if(record_rupe_flag==1){
//					break;
//				}
//			}
			pl_DriveMotor_stop();
 8016942:	f7f1 fe97 	bl	8008674 <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 8016946:	2000      	movs	r0, #0
 8016948:	f7f1 f99e 	bl	8007c88 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 801694c:	2000      	movs	r0, #0
 801694e:	f7f1 f9ad 	bl	8007cac <pl_l_blue_LED>
		break;
 8016952:	e18b      	b.n	8016c6c <mode_Tuning0+0x6c8>
		case 10://システム同定gyro
			record_mode=6;
 8016954:	4b14      	ldr	r3, [pc, #80]	; (80169a8 <mode_Tuning0+0x404>)
 8016956:	2206      	movs	r2, #6
 8016958:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 801695a:	2001      	movs	r0, #1
 801695c:	f7f1 f994 	bl	8007c88 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8016960:	2001      	movs	r0, #1
 8016962:	f7f1 f9a3 	bl	8007cac <pl_l_blue_LED>
//			turning_table_ff(90, 0, 300, 300, 500);
//			turning_table_ff(90, 300, 600, 600, 1500);
//			turning_table_ff(90, 600, 300, 600, 1500);
//			turning_table_ff(90, 300, 0, 300, 500);
			get_duty(-1.0, 1.0,&duty_L,&duty_R);
 8016966:	f107 020c 	add.w	r2, r7, #12
 801696a:	f107 0310 	add.w	r3, r7, #16
 801696e:	4611      	mov	r1, r2
 8016970:	4618      	mov	r0, r3
 8016972:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8016976:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801697a:	f7eb fcc3 	bl	8002304 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 801697e:	693b      	ldr	r3, [r7, #16]
 8016980:	68fa      	ldr	r2, [r7, #12]
 8016982:	4611      	mov	r1, r2
 8016984:	4618      	mov	r0, r3
 8016986:	f7f1 fe83 	bl	8008690 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 801698a:	f7f1 fe65 	bl	8008658 <pl_DriveMotor_start>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801698e:	e04b      	b.n	8016a28 <mode_Tuning0+0x484>
				wait_ms(1);
 8016990:	2001      	movs	r0, #1
 8016992:	f7f2 f8f5 	bl	8008b80 <wait_ms>
				if(record_rupe_flag==1){
 8016996:	4b23      	ldr	r3, [pc, #140]	; (8016a24 <mode_Tuning0+0x480>)
 8016998:	781b      	ldrb	r3, [r3, #0]
 801699a:	2b01      	cmp	r3, #1
 801699c:	d144      	bne.n	8016a28 <mode_Tuning0+0x484>
					record_mode=0;
 801699e:	4b02      	ldr	r3, [pc, #8]	; (80169a8 <mode_Tuning0+0x404>)
 80169a0:	2200      	movs	r2, #0
 80169a2:	701a      	strb	r2, [r3, #0]
					break;
 80169a4:	e051      	b.n	8016a4a <mode_Tuning0+0x4a6>
 80169a6:	bf00      	nop
 80169a8:	2000f284 	.word	0x2000f284
 80169ac:	464b2000 	.word	0x464b2000
 80169b0:	44c80000 	.word	0x44c80000
 80169b4:	00000000 	.word	0x00000000
 80169b8:	44070000 	.word	0x44070000
 80169bc:	457a0000 	.word	0x457a0000
 80169c0:	43c80000 	.word	0x43c80000
 80169c4:	43340000 	.word	0x43340000
 80169c8:	466a6000 	.word	0x466a6000
 80169cc:	44fa0000 	.word	0x44fa0000
 80169d0:	469c4000 	.word	0x469c4000
 80169d4:	45160000 	.word	0x45160000
 80169d8:	447a0000 	.word	0x447a0000
 80169dc:	c3160000 	.word	0xc3160000
 80169e0:	c1a40000 	.word	0xc1a40000
 80169e4:	45bb8000 	.word	0x45bb8000
 80169e8:	43960000 	.word	0x43960000
 80169ec:	44340000 	.word	0x44340000
 80169f0:	2000f444 	.word	0x2000f444
 80169f4:	20000814 	.word	0x20000814
 80169f8:	3f7d70a4 	.word	0x3f7d70a4
 80169fc:	20000264 	.word	0x20000264
 8016a00:	468ca000 	.word	0x468ca000
 8016a04:	452f0000 	.word	0x452f0000
 8016a08:	465ac000 	.word	0x465ac000
 8016a0c:	c4fa0000 	.word	0xc4fa0000
 8016a10:	c4340000 	.word	0xc4340000
 8016a14:	46ea6000 	.word	0x46ea6000
 8016a18:	4684d000 	.word	0x4684d000
 8016a1c:	461c4000 	.word	0x461c4000
 8016a20:	453b8000 	.word	0x453b8000
 8016a24:	2000f290 	.word	0x2000f290
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016a28:	4bad      	ldr	r3, [pc, #692]	; (8016ce0 <mode_Tuning0+0x73c>)
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016a30:	ddae      	ble.n	8016990 <mode_Tuning0+0x3ec>
 8016a32:	4bab      	ldr	r3, [pc, #684]	; (8016ce0 <mode_Tuning0+0x73c>)
 8016a34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016a38:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016a3c:	dda8      	ble.n	8016990 <mode_Tuning0+0x3ec>
 8016a3e:	4ba8      	ldr	r3, [pc, #672]	; (8016ce0 <mode_Tuning0+0x73c>)
 8016a40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016a44:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016a48:	dda2      	ble.n	8016990 <mode_Tuning0+0x3ec>
				}
			}
			pl_DriveMotor_stop();
 8016a4a:	f7f1 fe13 	bl	8008674 <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 8016a4e:	2000      	movs	r0, #0
 8016a50:	f7f1 f91a 	bl	8007c88 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8016a54:	2000      	movs	r0, #0
 8016a56:	f7f1 f929 	bl	8007cac <pl_l_blue_LED>
		break;
 8016a5a:	e107      	b.n	8016c6c <mode_Tuning0+0x6c8>
		case 11:
		record_mode=1;
 8016a5c:	4ba1      	ldr	r3, [pc, #644]	; (8016ce4 <mode_Tuning0+0x740>)
 8016a5e:	2201      	movs	r2, #1
 8016a60:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=0;
 8016a62:	2300      	movs	r3, #0
 8016a64:	753b      	strb	r3, [r7, #20]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT, 0, 0, 300, 6000,mode);
 8016a66:	6978      	ldr	r0, [r7, #20]
 8016a68:	ed9f 2a9f 	vldr	s4, [pc, #636]	; 8016ce8 <mode_Tuning0+0x744>
 8016a6c:	eddf 1a9f 	vldr	s3, [pc, #636]	; 8016cec <mode_Tuning0+0x748>
 8016a70:	ed9f 1a9f 	vldr	s2, [pc, #636]	; 8016cf0 <mode_Tuning0+0x74c>
 8016a74:	eddf 0a9e 	vldr	s1, [pc, #632]	; 8016cf0 <mode_Tuning0+0x74c>
 8016a78:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8016cf4 <mode_Tuning0+0x750>
 8016a7c:	f7ed f908 	bl	8003c90 <straight_table2>
		break;
 8016a80:	e0f4      	b.n	8016c6c <mode_Tuning0+0x6c8>
		case 12:
		record_mode=2;
 8016a82:	4b98      	ldr	r3, [pc, #608]	; (8016ce4 <mode_Tuning0+0x740>)
 8016a84:	2202      	movs	r2, #2
 8016a86:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<40;i++){
 8016a88:	2300      	movs	r3, #0
 8016a8a:	61fb      	str	r3, [r7, #28]
 8016a8c:	e00e      	b.n	8016aac <mode_Tuning0+0x508>
		turning_table2(90, 0, 0, 400, 3000);
 8016a8e:	ed9f 2a9a 	vldr	s4, [pc, #616]	; 8016cf8 <mode_Tuning0+0x754>
 8016a92:	eddf 1a9a 	vldr	s3, [pc, #616]	; 8016cfc <mode_Tuning0+0x758>
 8016a96:	ed9f 1a96 	vldr	s2, [pc, #600]	; 8016cf0 <mode_Tuning0+0x74c>
 8016a9a:	eddf 0a95 	vldr	s1, [pc, #596]	; 8016cf0 <mode_Tuning0+0x74c>
 8016a9e:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8016d00 <mode_Tuning0+0x75c>
 8016aa2:	f7ed fe1f 	bl	80046e4 <turning_table2>
		for(int i=0;i<40;i++){
 8016aa6:	69fb      	ldr	r3, [r7, #28]
 8016aa8:	3301      	adds	r3, #1
 8016aaa:	61fb      	str	r3, [r7, #28]
 8016aac:	69fb      	ldr	r3, [r7, #28]
 8016aae:	2b27      	cmp	r3, #39	; 0x27
 8016ab0:	dded      	ble.n	8016a8e <mode_Tuning0+0x4ea>
		}
		break;
 8016ab2:	e0db      	b.n	8016c6c <mode_Tuning0+0x6c8>
		case 13:
			record_mode=2;
 8016ab4:	4b8b      	ldr	r3, [pc, #556]	; (8016ce4 <mode_Tuning0+0x740>)
 8016ab6:	2202      	movs	r2, #2
 8016ab8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016aba:	2301      	movs	r3, #1
 8016abc:	753b      	strb	r3, [r7, #20]
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8016abe:	4b91      	ldr	r3, [pc, #580]	; (8016d04 <mode_Tuning0+0x760>)
 8016ac0:	edd3 6a02 	vldr	s13, [r3, #8]
 8016ac4:	4b8f      	ldr	r3, [pc, #572]	; (8016d04 <mode_Tuning0+0x760>)
 8016ac6:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8016aca:	4b8e      	ldr	r3, [pc, #568]	; (8016d04 <mode_Tuning0+0x760>)
 8016acc:	ed93 7a02 	vldr	s14, [r3, #8]
 8016ad0:	4b8c      	ldr	r3, [pc, #560]	; (8016d04 <mode_Tuning0+0x760>)
 8016ad2:	edd3 7a02 	vldr	s15, [r3, #8]
 8016ad6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016ada:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8016ade:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8016ae2:	eddf 5a89 	vldr	s11, [pc, #548]	; 8016d08 <mode_Tuning0+0x764>
 8016ae6:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8016aea:	6978      	ldr	r0, [r7, #20]
 8016aec:	eeb0 2a47 	vmov.f32	s4, s14
 8016af0:	eef0 1a46 	vmov.f32	s3, s12
 8016af4:	eeb0 1a66 	vmov.f32	s2, s13
 8016af8:	eddf 0a7d 	vldr	s1, [pc, #500]	; 8016cf0 <mode_Tuning0+0x74c>
 8016afc:	ed9f 0a83 	vldr	s0, [pc, #524]	; 8016d0c <mode_Tuning0+0x768>
 8016b00:	f7ed f8c6 	bl	8003c90 <straight_table2>
			for(int i=0;i<40;i++){
 8016b04:	2300      	movs	r3, #0
 8016b06:	61bb      	str	r3, [r7, #24]
 8016b08:	e037      	b.n	8016b7a <mode_Tuning0+0x5d6>
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8016b0a:	4b7e      	ldr	r3, [pc, #504]	; (8016d04 <mode_Tuning0+0x760>)
 8016b0c:	edd3 6a02 	vldr	s13, [r3, #8]
 8016b10:	4b7c      	ldr	r3, [pc, #496]	; (8016d04 <mode_Tuning0+0x760>)
 8016b12:	ed93 6a02 	vldr	s12, [r3, #8]
 8016b16:	4b7b      	ldr	r3, [pc, #492]	; (8016d04 <mode_Tuning0+0x760>)
 8016b18:	edd3 5a02 	vldr	s11, [r3, #8]
									speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8016b1c:	4b79      	ldr	r3, [pc, #484]	; (8016d04 <mode_Tuning0+0x760>)
 8016b1e:	ed93 7a02 	vldr	s14, [r3, #8]
 8016b22:	4b78      	ldr	r3, [pc, #480]	; (8016d04 <mode_Tuning0+0x760>)
 8016b24:	edd3 7a02 	vldr	s15, [r3, #8]
 8016b28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016b2c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8016b30:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8016b34:	ed9f 5a74 	vldr	s10, [pc, #464]	; 8016d08 <mode_Tuning0+0x764>
 8016b38:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8016b3c:	6978      	ldr	r0, [r7, #20]
 8016b3e:	eeb0 2a47 	vmov.f32	s4, s14
 8016b42:	eef0 1a65 	vmov.f32	s3, s11
 8016b46:	eeb0 1a46 	vmov.f32	s2, s12
 8016b4a:	eef0 0a66 	vmov.f32	s1, s13
 8016b4e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8016b52:	f7ed f89d 	bl	8003c90 <straight_table2>
			slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,300);
 8016b56:	4b6b      	ldr	r3, [pc, #428]	; (8016d04 <mode_Tuning0+0x760>)
 8016b58:	2200      	movs	r2, #0
 8016b5a:	9203      	str	r2, [sp, #12]
 8016b5c:	2200      	movs	r2, #0
 8016b5e:	9202      	str	r2, [sp, #8]
 8016b60:	2200      	movs	r2, #0
 8016b62:	9201      	str	r2, [sp, #4]
 8016b64:	699a      	ldr	r2, [r3, #24]
 8016b66:	9200      	str	r2, [sp, #0]
 8016b68:	3308      	adds	r3, #8
 8016b6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016b6c:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8016cec <mode_Tuning0+0x748>
 8016b70:	f7f3 ff82 	bl	800aa78 <slalomR>
			for(int i=0;i<40;i++){
 8016b74:	69bb      	ldr	r3, [r7, #24]
 8016b76:	3301      	adds	r3, #1
 8016b78:	61bb      	str	r3, [r7, #24]
 8016b7a:	69bb      	ldr	r3, [r7, #24]
 8016b7c:	2b27      	cmp	r3, #39	; 0x27
 8016b7e:	ddc4      	ble.n	8016b0a <mode_Tuning0+0x566>
			}
			mode.WallControlMode=0;
 8016b80:	2300      	movs	r3, #0
 8016b82:	753b      	strb	r3, [r7, #20]
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 8016b84:	4b5f      	ldr	r3, [pc, #380]	; (8016d04 <mode_Tuning0+0x760>)
 8016b86:	edd3 6a02 	vldr	s13, [r3, #8]
 8016b8a:	4b5e      	ldr	r3, [pc, #376]	; (8016d04 <mode_Tuning0+0x760>)
 8016b8c:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8016b90:	4b5c      	ldr	r3, [pc, #368]	; (8016d04 <mode_Tuning0+0x760>)
 8016b92:	ed93 7a02 	vldr	s14, [r3, #8]
 8016b96:	4b5b      	ldr	r3, [pc, #364]	; (8016d04 <mode_Tuning0+0x760>)
 8016b98:	edd3 7a02 	vldr	s15, [r3, #8]
 8016b9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016ba0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8016ba4:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 8016ba8:	eddf 5a57 	vldr	s11, [pc, #348]	; 8016d08 <mode_Tuning0+0x764>
 8016bac:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8016bb0:	6978      	ldr	r0, [r7, #20]
 8016bb2:	eeb0 2a47 	vmov.f32	s4, s14
 8016bb6:	eef0 1a46 	vmov.f32	s3, s12
 8016bba:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8016cf0 <mode_Tuning0+0x74c>
 8016bbe:	eef0 0a66 	vmov.f32	s1, s13
 8016bc2:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8016d08 <mode_Tuning0+0x764>
 8016bc6:	f7ed f863 	bl	8003c90 <straight_table2>
			//pl_r_blue_LED(ON);
			//pl_l_blue_LED(ON);
			//no_frontwall_straight();
			//pl_r_blue_LED(OFF);
			//pl_l_blue_LED(OFF);
		break;
 8016bca:	e04f      	b.n	8016c6c <mode_Tuning0+0x6c8>
		case 14://宴会芸＋吸引
//			record_mode=2;
//			for(int i=0;i<40;i++){
//			turning_table2(90, 0, 0, 930, 11000);
//			}
			highspeed_mode = 1;
 8016bcc:	4b50      	ldr	r3, [pc, #320]	; (8016d10 <mode_Tuning0+0x76c>)
 8016bce:	2201      	movs	r2, #1
 8016bd0:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8016bd2:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8016d14 <mode_Tuning0+0x770>
 8016bd6:	f7f1 fd85 	bl	80086e4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8016bda:	f7f1 fd6f 	bl	80086bc <pl_FunMotor_start>
			HAL_Delay(600);
 8016bde:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016be2:	f002 fd87 	bl	80196f4 <HAL_Delay>
			reset_gyro();
 8016be6:	f7eb f80f 	bl	8001c08 <reset_gyro>
			reset_speed();
 8016bea:	f7ea fa1b 	bl	8001024 <reset_speed>
			reset_distance();
 8016bee:	f7ea f9d5 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8016bf2:	f7ee fb5d 	bl	80052b0 <clear_Ierror>
			record_mode=3;
 8016bf6:	4b3b      	ldr	r3, [pc, #236]	; (8016ce4 <mode_Tuning0+0x740>)
 8016bf8:	2203      	movs	r2, #3
 8016bfa:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=1;
 8016bfc:	2301      	movs	r3, #1
 8016bfe:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 4000, 17000,mode);
 8016c00:	6978      	ldr	r0, [r7, #20]
 8016c02:	ed9f 2a45 	vldr	s4, [pc, #276]	; 8016d18 <mode_Tuning0+0x774>
 8016c06:	eddf 1a45 	vldr	s3, [pc, #276]	; 8016d1c <mode_Tuning0+0x778>
 8016c0a:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8016cf0 <mode_Tuning0+0x74c>
 8016c0e:	eddf 0a38 	vldr	s1, [pc, #224]	; 8016cf0 <mode_Tuning0+0x74c>
 8016c12:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8016d20 <mode_Tuning0+0x77c>
 8016c16:	f7ed f83b 	bl	8003c90 <straight_table2>
		break;
 8016c1a:	e027      	b.n	8016c6c <mode_Tuning0+0x6c8>
		case 15:
			highspeed_mode = 1;
 8016c1c:	4b3c      	ldr	r3, [pc, #240]	; (8016d10 <mode_Tuning0+0x76c>)
 8016c1e:	2201      	movs	r2, #1
 8016c20:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8016c22:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8016d14 <mode_Tuning0+0x770>
 8016c26:	f7f1 fd5d 	bl	80086e4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8016c2a:	f7f1 fd47 	bl	80086bc <pl_FunMotor_start>
			HAL_Delay(600);
 8016c2e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016c32:	f002 fd5f 	bl	80196f4 <HAL_Delay>
			reset_gyro();
 8016c36:	f7ea ffe7 	bl	8001c08 <reset_gyro>
			reset_speed();
 8016c3a:	f7ea f9f3 	bl	8001024 <reset_speed>
			reset_distance();
 8016c3e:	f7ea f9ad 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8016c42:	f7ee fb35 	bl	80052b0 <clear_Ierror>
			record_mode=3;
 8016c46:	4b27      	ldr	r3, [pc, #156]	; (8016ce4 <mode_Tuning0+0x740>)
 8016c48:	2203      	movs	r2, #3
 8016c4a:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=3;
 8016c4c:	2303      	movs	r3, #3
 8016c4e:	753b      	strb	r3, [r7, #20]
			straight_table2(90*7.5*sqrt(2), 0, 0, 4000, 20000,mode);
 8016c50:	6978      	ldr	r0, [r7, #20]
 8016c52:	ed9f 2a34 	vldr	s4, [pc, #208]	; 8016d24 <mode_Tuning0+0x780>
 8016c56:	eddf 1a31 	vldr	s3, [pc, #196]	; 8016d1c <mode_Tuning0+0x778>
 8016c5a:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8016cf0 <mode_Tuning0+0x74c>
 8016c5e:	eddf 0a24 	vldr	s1, [pc, #144]	; 8016cf0 <mode_Tuning0+0x74c>
 8016c62:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8016d28 <mode_Tuning0+0x784>
 8016c66:	f7ed f813 	bl	8003c90 <straight_table2>
//			record_mode=1;
//			mode.WallControlMode=0;
//			straight_table2(BACK_TO_CENTER_SLANT, 0, 0, 300, 6000,mode);
		break;
 8016c6a:	bf00      	nop
	}
	record_mode=0;
 8016c6c:	4b1d      	ldr	r3, [pc, #116]	; (8016ce4 <mode_Tuning0+0x740>)
 8016c6e:	2200      	movs	r2, #0
 8016c70:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016c72:	2003      	movs	r0, #3
 8016c74:	f7f1 fcca 	bl	800860c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016c78:	2003      	movs	r0, #3
 8016c7a:	f7f1 fc9f 	bl	80085bc <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8016c7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016c82:	f7f1 ffc1 	bl	8008c08 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8016c86:	f7f1 fd23 	bl	80086d0 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 8016c8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016c8e:	f7f1 ffbb 	bl	8008c08 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8016c92:	2000      	movs	r0, #0
 8016c94:	f7f1 fc88 	bl	80085a8 <pl_DriveMotor_standby>
	record_mode=0;
 8016c98:	4b12      	ldr	r3, [pc, #72]	; (8016ce4 <mode_Tuning0+0x740>)
 8016c9a:	2200      	movs	r2, #0
 8016c9c:	701a      	strb	r2, [r3, #0]
	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016c9e:	e002      	b.n	8016ca6 <mode_Tuning0+0x702>
		HAL_Delay(1);
 8016ca0:	2001      	movs	r0, #1
 8016ca2:	f002 fd27 	bl	80196f4 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016ca6:	4b0e      	ldr	r3, [pc, #56]	; (8016ce0 <mode_Tuning0+0x73c>)
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016cae:	ddf7      	ble.n	8016ca0 <mode_Tuning0+0x6fc>
 8016cb0:	4b0b      	ldr	r3, [pc, #44]	; (8016ce0 <mode_Tuning0+0x73c>)
 8016cb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016cb6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016cba:	ddf1      	ble.n	8016ca0 <mode_Tuning0+0x6fc>
 8016cbc:	4b08      	ldr	r3, [pc, #32]	; (8016ce0 <mode_Tuning0+0x73c>)
 8016cbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016cc2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016cc6:	ddeb      	ble.n	8016ca0 <mode_Tuning0+0x6fc>
	}
	pl_r_blue_LED(ON);
 8016cc8:	2001      	movs	r0, #1
 8016cca:	f7f0 ffdd 	bl	8007c88 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8016cce:	2001      	movs	r0, #1
 8016cd0:	f7f0 ffec 	bl	8007cac <pl_l_blue_LED>
	record_print();
 8016cd4:	f000 fd52 	bl	801777c <record_print>



}
 8016cd8:	bf00      	nop
 8016cda:	3724      	adds	r7, #36	; 0x24
 8016cdc:	46bd      	mov	sp, r7
 8016cde:	bd90      	pop	{r4, r7, pc}
 8016ce0:	200002bc 	.word	0x200002bc
 8016ce4:	2000f284 	.word	0x2000f284
 8016ce8:	45bb8000 	.word	0x45bb8000
 8016cec:	43960000 	.word	0x43960000
 8016cf0:	00000000 	.word	0x00000000
 8016cf4:	420a0000 	.word	0x420a0000
 8016cf8:	453b8000 	.word	0x453b8000
 8016cfc:	43c80000 	.word	0x43c80000
 8016d00:	42b40000 	.word	0x42b40000
 8016d04:	2000f444 	.word	0x2000f444
 8016d08:	42340000 	.word	0x42340000
 8016d0c:	431b8000 	.word	0x431b8000
 8016d10:	20000814 	.word	0x20000814
 8016d14:	3f7d70a4 	.word	0x3f7d70a4
 8016d18:	4684d000 	.word	0x4684d000
 8016d1c:	457a0000 	.word	0x457a0000
 8016d20:	44340000 	.word	0x44340000
 8016d24:	469c4000 	.word	0x469c4000
 8016d28:	446ea607 	.word	0x446ea607

08016d2c <mode_WallSensorTuning>:


void mode_WallSensorTuning(unsigned char main_modeR){
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b084      	sub	sp, #16
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	4603      	mov	r3, r0
 8016d34:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 8016d36:	2300      	movs	r3, #0
 8016d38:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 8016d3a:	2300      	movs	r3, #0
 8016d3c:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 8016d3e:	2300      	movs	r3, #0
 8016d40:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 8016d42:	2300      	movs	r3, #0
 8016d44:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 8016d46:	2001      	movs	r0, #1
 8016d48:	f7f1 fc2e 	bl	80085a8 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016d4c:	2003      	movs	r0, #3
 8016d4e:	f7f1 fc35 	bl	80085bc <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016d52:	2003      	movs	r0, #3
 8016d54:	f7f1 fc5a 	bl	800860c <pl_R_DriveMotor_mode>
	reset_gyro();
 8016d58:	f7ea ff56 	bl	8001c08 <reset_gyro>
	reset_speed();
 8016d5c:	f7ea f962 	bl	8001024 <reset_speed>
	clear_Ierror();
 8016d60:	f7ee faa6 	bl	80052b0 <clear_Ierror>

	switch (main_modeR) {
 8016d64:	79fb      	ldrb	r3, [r7, #7]
 8016d66:	2b0f      	cmp	r3, #15
 8016d68:	f200 81b0 	bhi.w	80170cc <mode_WallSensorTuning+0x3a0>
 8016d6c:	a201      	add	r2, pc, #4	; (adr r2, 8016d74 <mode_WallSensorTuning+0x48>)
 8016d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d72:	bf00      	nop
 8016d74:	08016db5 	.word	0x08016db5
 8016d78:	08016ddb 	.word	0x08016ddb
 8016d7c:	08016df3 	.word	0x08016df3
 8016d80:	08016e69 	.word	0x08016e69
 8016d84:	08016edf 	.word	0x08016edf
 8016d88:	08016f55 	.word	0x08016f55
 8016d8c:	08016fc5 	.word	0x08016fc5
 8016d90:	08016feb 	.word	0x08016feb
 8016d94:	08017011 	.word	0x08017011
 8016d98:	08017037 	.word	0x08017037
 8016d9c:	080170cd 	.word	0x080170cd
 8016da0:	080170cd 	.word	0x080170cd
 8016da4:	080170cd 	.word	0x080170cd
 8016da8:	080170cd 	.word	0x080170cd
 8016dac:	080170cd 	.word	0x080170cd
 8016db0:	0801705d 	.word	0x0801705d
		case 0://横壁追従制御
			record_mode=16;
 8016db4:	4bd2      	ldr	r3, [pc, #840]	; (8017100 <mode_WallSensorTuning+0x3d4>)
 8016db6:	2210      	movs	r2, #16
 8016db8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016dba:	2301      	movs	r3, #1
 8016dbc:	723b      	strb	r3, [r7, #8]
			straight_table2(180*8, 0, 0, 500, 5000,mode);
 8016dbe:	68b8      	ldr	r0, [r7, #8]
 8016dc0:	ed9f 2ad0 	vldr	s4, [pc, #832]	; 8017104 <mode_WallSensorTuning+0x3d8>
 8016dc4:	eddf 1ad0 	vldr	s3, [pc, #832]	; 8017108 <mode_WallSensorTuning+0x3dc>
 8016dc8:	ed9f 1ad0 	vldr	s2, [pc, #832]	; 801710c <mode_WallSensorTuning+0x3e0>
 8016dcc:	eddf 0acf 	vldr	s1, [pc, #828]	; 801710c <mode_WallSensorTuning+0x3e0>
 8016dd0:	ed9f 0acf 	vldr	s0, [pc, #828]	; 8017110 <mode_WallSensorTuning+0x3e4>
 8016dd4:	f7ec ff5c 	bl	8003c90 <straight_table2>
		break;
 8016dd8:	e178      	b.n	80170cc <mode_WallSensorTuning+0x3a0>
		case 1://前壁制御
			for(int ii=0;ii<=20;ii++){
 8016dda:	2300      	movs	r3, #0
 8016ddc:	60fb      	str	r3, [r7, #12]
 8016dde:	e004      	b.n	8016dea <mode_WallSensorTuning+0xbe>
			no_frontwall_straight();
 8016de0:	f7ed ff86 	bl	8004cf0 <no_frontwall_straight>
			for(int ii=0;ii<=20;ii++){
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	3301      	adds	r3, #1
 8016de8:	60fb      	str	r3, [r7, #12]
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	2b14      	cmp	r3, #20
 8016dee:	ddf7      	ble.n	8016de0 <mode_WallSensorTuning+0xb4>
			}
		break;
 8016df0:	e16c      	b.n	80170cc <mode_WallSensorTuning+0x3a0>
		case 2://壁切れ90度
			record_mode = 7;
 8016df2:	4bc3      	ldr	r3, [pc, #780]	; (8017100 <mode_WallSensorTuning+0x3d4>)
 8016df4:	2207      	movs	r2, #7
 8016df6:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016df8:	2300      	movs	r3, #0
 8016dfa:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016dfc:	2300      	movs	r3, #0
 8016dfe:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016e00:	2300      	movs	r3, #0
 8016e02:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016e04:	2300      	movs	r3, #0
 8016e06:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 135, 0, 300, 300,3000,mode);
 8016e08:	68b8      	ldr	r0, [r7, #8]
 8016e0a:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 8017114 <mode_WallSensorTuning+0x3e8>
 8016e0e:	eddf 1ac2 	vldr	s3, [pc, #776]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016e12:	ed9f 1ac1 	vldr	s2, [pc, #772]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016e16:	eddf 0abd 	vldr	s1, [pc, #756]	; 801710c <mode_WallSensorTuning+0x3e0>
 8016e1a:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 801711c <mode_WallSensorTuning+0x3f0>
 8016e1e:	f7ec ff37 	bl	8003c90 <straight_table2>
			mode.WallCutMode=1;
 8016e22:	2301      	movs	r3, #1
 8016e24:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016e26:	2300      	movs	r3, #0
 8016e28:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 8016e2a:	68b8      	ldr	r0, [r7, #8]
 8016e2c:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8017114 <mode_WallSensorTuning+0x3e8>
 8016e30:	eddf 1ab9 	vldr	s3, [pc, #740]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016e34:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016e38:	eddf 0ab7 	vldr	s1, [pc, #732]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016e3c:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8017120 <mode_WallSensorTuning+0x3f4>
 8016e40:	f7ec ff26 	bl	8003c90 <straight_table2>
			mode.WallControlMode=0;
 8016e44:	2300      	movs	r3, #0
 8016e46:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016e48:	2300      	movs	r3, #0
 8016e4a:	72fb      	strb	r3, [r7, #11]
			straight_table2(45 + 22.5, 300, 0, 300,3000,mode);
 8016e4c:	68b8      	ldr	r0, [r7, #8]
 8016e4e:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 8017114 <mode_WallSensorTuning+0x3e8>
 8016e52:	eddf 1ab1 	vldr	s3, [pc, #708]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016e56:	ed9f 1aad 	vldr	s2, [pc, #692]	; 801710c <mode_WallSensorTuning+0x3e0>
 8016e5a:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016e5e:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8017124 <mode_WallSensorTuning+0x3f8>
 8016e62:	f7ec ff15 	bl	8003c90 <straight_table2>
		break;
 8016e66:	e131      	b.n	80170cc <mode_WallSensorTuning+0x3a0>
		case 3://壁切れ45度//90°大回り
			record_mode = 8;
 8016e68:	4ba5      	ldr	r3, [pc, #660]	; (8017100 <mode_WallSensorTuning+0x3d4>)
 8016e6a:	2208      	movs	r2, #8
 8016e6c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016e6e:	2300      	movs	r3, #0
 8016e70:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016e72:	2300      	movs	r3, #0
 8016e74:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016e76:	2300      	movs	r3, #0
 8016e78:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 300, 300,3000,mode);
 8016e7e:	68b8      	ldr	r0, [r7, #8]
 8016e80:	ed9f 2aa4 	vldr	s4, [pc, #656]	; 8017114 <mode_WallSensorTuning+0x3e8>
 8016e84:	eddf 1aa4 	vldr	s3, [pc, #656]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016e88:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016e8c:	eddf 0a9f 	vldr	s1, [pc, #636]	; 801710c <mode_WallSensorTuning+0x3e0>
 8016e90:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8017128 <mode_WallSensorTuning+0x3fc>
 8016e94:	f7ec fefc 	bl	8003c90 <straight_table2>
			mode.WallCutMode=2;
 8016e98:	2302      	movs	r3, #2
 8016e9a:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 8016ea0:	68b8      	ldr	r0, [r7, #8]
 8016ea2:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 8017114 <mode_WallSensorTuning+0x3e8>
 8016ea6:	eddf 1a9c 	vldr	s3, [pc, #624]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016eaa:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016eae:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016eb2:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8017120 <mode_WallSensorTuning+0x3f4>
 8016eb6:	f7ec feeb 	bl	8003c90 <straight_table2>
			mode.WallControlMode=0;
 8016eba:	2300      	movs	r3, #0
 8016ebc:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016ebe:	2300      	movs	r3, #0
 8016ec0:	72fb      	strb	r3, [r7, #11]
			straight_table2(45+22.5, 300, 0, 300,3000,mode);
 8016ec2:	68b8      	ldr	r0, [r7, #8]
 8016ec4:	ed9f 2a93 	vldr	s4, [pc, #588]	; 8017114 <mode_WallSensorTuning+0x3e8>
 8016ec8:	eddf 1a93 	vldr	s3, [pc, #588]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016ecc:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 801710c <mode_WallSensorTuning+0x3e0>
 8016ed0:	eddf 0a91 	vldr	s1, [pc, #580]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016ed4:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8017124 <mode_WallSensorTuning+0x3f8>
 8016ed8:	f7ec feda 	bl	8003c90 <straight_table2>
		break;
 8016edc:	e0f6      	b.n	80170cc <mode_WallSensorTuning+0x3a0>
		case 4://壁切れ45度斜め(考え中)
			record_mode = 8;
 8016ede:	4b88      	ldr	r3, [pc, #544]	; (8017100 <mode_WallSensorTuning+0x3d4>)
 8016ee0:	2208      	movs	r2, #8
 8016ee2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016ee8:	2300      	movs	r3, #0
 8016eea:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016eec:	2300      	movs	r3, #0
 8016eee:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT + 90*sqrt(2), 0, 300, 300,3000,mode);
 8016ef4:	68b8      	ldr	r0, [r7, #8]
 8016ef6:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8017114 <mode_WallSensorTuning+0x3e8>
 8016efa:	eddf 1a87 	vldr	s3, [pc, #540]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016efe:	ed9f 1a86 	vldr	s2, [pc, #536]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016f02:	eddf 0a82 	vldr	s1, [pc, #520]	; 801710c <mode_WallSensorTuning+0x3e0>
 8016f06:	ed9f 0a89 	vldr	s0, [pc, #548]	; 801712c <mode_WallSensorTuning+0x400>
 8016f0a:	f7ec fec1 	bl	8003c90 <straight_table2>
			mode.WallCutMode=3;
 8016f0e:	2303      	movs	r3, #3
 8016f10:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016f12:	2300      	movs	r3, #0
 8016f14:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 8016f16:	68b8      	ldr	r0, [r7, #8]
 8016f18:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 8017114 <mode_WallSensorTuning+0x3e8>
 8016f1c:	eddf 1a7e 	vldr	s3, [pc, #504]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016f20:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016f24:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016f28:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8017130 <mode_WallSensorTuning+0x404>
 8016f2c:	f7ec feb0 	bl	8003c90 <straight_table2>
			mode.WallControlMode=0;
 8016f30:	2300      	movs	r3, #0
 8016f32:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016f34:	2300      	movs	r3, #0
 8016f36:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 8016f38:	68b8      	ldr	r0, [r7, #8]
 8016f3a:	ed9f 2a76 	vldr	s4, [pc, #472]	; 8017114 <mode_WallSensorTuning+0x3e8>
 8016f3e:	eddf 1a76 	vldr	s3, [pc, #472]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016f42:	ed9f 1a72 	vldr	s2, [pc, #456]	; 801710c <mode_WallSensorTuning+0x3e0>
 8016f46:	eddf 0a74 	vldr	s1, [pc, #464]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016f4a:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8017134 <mode_WallSensorTuning+0x408>
 8016f4e:	f7ec fe9f 	bl	8003c90 <straight_table2>
		break;
 8016f52:	e0bb      	b.n	80170cc <mode_WallSensorTuning+0x3a0>
		case 5://壁切れ45度斜め(考え中)
			mode.WallControlMode=0;//3でもいいかも
 8016f54:	2300      	movs	r3, #0
 8016f56:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016f58:	2300      	movs	r3, #0
 8016f5a:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016f60:	2300      	movs	r3, #0
 8016f62:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT+90*sqrt(2), 0, 300, 300,3000,mode);
 8016f64:	68b8      	ldr	r0, [r7, #8]
 8016f66:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 8017114 <mode_WallSensorTuning+0x3e8>
 8016f6a:	eddf 1a6b 	vldr	s3, [pc, #428]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016f6e:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016f72:	eddf 0a66 	vldr	s1, [pc, #408]	; 801710c <mode_WallSensorTuning+0x3e0>
 8016f76:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801712c <mode_WallSensorTuning+0x400>
 8016f7a:	f7ec fe89 	bl	8003c90 <straight_table2>
			mode.WallCutMode=4;
 8016f7e:	2304      	movs	r3, #4
 8016f80:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016f82:	2300      	movs	r3, #0
 8016f84:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 8016f86:	68b8      	ldr	r0, [r7, #8]
 8016f88:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8017114 <mode_WallSensorTuning+0x3e8>
 8016f8c:	eddf 1a62 	vldr	s3, [pc, #392]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016f90:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016f94:	eddf 0a60 	vldr	s1, [pc, #384]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016f98:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8017130 <mode_WallSensorTuning+0x404>
 8016f9c:	f7ec fe78 	bl	8003c90 <straight_table2>
			mode.WallControlMode=0;
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 8016fa8:	68b8      	ldr	r0, [r7, #8]
 8016faa:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 8017114 <mode_WallSensorTuning+0x3e8>
 8016fae:	eddf 1a5a 	vldr	s3, [pc, #360]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016fb2:	ed9f 1a56 	vldr	s2, [pc, #344]	; 801710c <mode_WallSensorTuning+0x3e0>
 8016fb6:	eddf 0a58 	vldr	s1, [pc, #352]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016fba:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8017134 <mode_WallSensorTuning+0x408>
 8016fbe:	f7ec fe67 	bl	8003c90 <straight_table2>
		break;
 8016fc2:	e083      	b.n	80170cc <mode_WallSensorTuning+0x3a0>
		case 6://斜め直進(90)
			record_mode=9;
 8016fc4:	4b4e      	ldr	r3, [pc, #312]	; (8017100 <mode_WallSensorTuning+0x3d4>)
 8016fc6:	2209      	movs	r2, #9
 8016fc8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016fca:	2300      	movs	r3, #0
 8016fcc:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8016fce:	68b8      	ldr	r0, [r7, #8]
 8016fd0:	ed9f 2a50 	vldr	s4, [pc, #320]	; 8017114 <mode_WallSensorTuning+0x3e8>
 8016fd4:	eddf 1a50 	vldr	s3, [pc, #320]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016fd8:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 801710c <mode_WallSensorTuning+0x3e0>
 8016fdc:	eddf 0a4b 	vldr	s1, [pc, #300]	; 801710c <mode_WallSensorTuning+0x3e0>
 8016fe0:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8017138 <mode_WallSensorTuning+0x40c>
 8016fe4:	f7ec fe54 	bl	8003c90 <straight_table2>
		break;
 8016fe8:	e070      	b.n	80170cc <mode_WallSensorTuning+0x3a0>
		case 7://斜め直進(45)
			record_mode=10;
 8016fea:	4b45      	ldr	r3, [pc, #276]	; (8017100 <mode_WallSensorTuning+0x3d4>)
 8016fec:	220a      	movs	r2, #10
 8016fee:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016ff0:	2300      	movs	r3, #0
 8016ff2:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8016ff4:	68b8      	ldr	r0, [r7, #8]
 8016ff6:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8017114 <mode_WallSensorTuning+0x3e8>
 8016ffa:	eddf 1a47 	vldr	s3, [pc, #284]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8016ffe:	ed9f 1a43 	vldr	s2, [pc, #268]	; 801710c <mode_WallSensorTuning+0x3e0>
 8017002:	eddf 0a42 	vldr	s1, [pc, #264]	; 801710c <mode_WallSensorTuning+0x3e0>
 8017006:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8017138 <mode_WallSensorTuning+0x40c>
 801700a:	f7ec fe41 	bl	8003c90 <straight_table2>

		break;
 801700e:	e05d      	b.n	80170cc <mode_WallSensorTuning+0x3a0>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8017010:	4b3b      	ldr	r3, [pc, #236]	; (8017100 <mode_WallSensorTuning+0x3d4>)
 8017012:	2207      	movs	r2, #7
 8017014:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8017016:	2303      	movs	r3, #3
 8017018:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 801701a:	68b8      	ldr	r0, [r7, #8]
 801701c:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 8017114 <mode_WallSensorTuning+0x3e8>
 8017020:	eddf 1a3d 	vldr	s3, [pc, #244]	; 8017118 <mode_WallSensorTuning+0x3ec>
 8017024:	ed9f 1a39 	vldr	s2, [pc, #228]	; 801710c <mode_WallSensorTuning+0x3e0>
 8017028:	eddf 0a38 	vldr	s1, [pc, #224]	; 801710c <mode_WallSensorTuning+0x3e0>
 801702c:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8017138 <mode_WallSensorTuning+0x40c>
 8017030:	f7ec fe2e 	bl	8003c90 <straight_table2>
		break;
 8017034:	e04a      	b.n	80170cc <mode_WallSensorTuning+0x3a0>
		case 9:
			record_mode=8;
 8017036:	4b32      	ldr	r3, [pc, #200]	; (8017100 <mode_WallSensorTuning+0x3d4>)
 8017038:	2208      	movs	r2, #8
 801703a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 801703c:	2303      	movs	r3, #3
 801703e:	723b      	strb	r3, [r7, #8]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 700, 10000,mode);
 8017040:	68b8      	ldr	r0, [r7, #8]
 8017042:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 801713c <mode_WallSensorTuning+0x410>
 8017046:	eddf 1a3e 	vldr	s3, [pc, #248]	; 8017140 <mode_WallSensorTuning+0x414>
 801704a:	ed9f 1a30 	vldr	s2, [pc, #192]	; 801710c <mode_WallSensorTuning+0x3e0>
 801704e:	eddf 0a2f 	vldr	s1, [pc, #188]	; 801710c <mode_WallSensorTuning+0x3e0>
 8017052:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8017144 <mode_WallSensorTuning+0x418>
 8017056:	f7ec fe1b 	bl	8003c90 <straight_table2>
		break;
 801705a:	e037      	b.n	80170cc <mode_WallSensorTuning+0x3a0>
		case 10:
		break;
		case 11:
		break;
		case 15:
			mode.WallControlMode=5;
 801705c:	2305      	movs	r3, #5
 801705e:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8017060:	2300      	movs	r3, #0
 8017062:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8017064:	2300      	movs	r3, #0
 8017066:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8017068:	2300      	movs	r3, #0
 801706a:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 180, 0, 500, 500,1500,mode);
 801706c:	68b8      	ldr	r0, [r7, #8]
 801706e:	ed9f 2a36 	vldr	s4, [pc, #216]	; 8017148 <mode_WallSensorTuning+0x41c>
 8017072:	eddf 1a25 	vldr	s3, [pc, #148]	; 8017108 <mode_WallSensorTuning+0x3dc>
 8017076:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8017108 <mode_WallSensorTuning+0x3dc>
 801707a:	eddf 0a24 	vldr	s1, [pc, #144]	; 801710c <mode_WallSensorTuning+0x3e0>
 801707e:	ed9f 0a33 	vldr	s0, [pc, #204]	; 801714c <mode_WallSensorTuning+0x420>
 8017082:	f7ec fe05 	bl	8003c90 <straight_table2>
			mode.WallCutMode=2;
 8017086:	2302      	movs	r3, #2
 8017088:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 801708a:	2300      	movs	r3, #0
 801708c:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 801708e:	68b8      	ldr	r0, [r7, #8]
 8017090:	ed9f 2a2d 	vldr	s4, [pc, #180]	; 8017148 <mode_WallSensorTuning+0x41c>
 8017094:	eddf 1a1c 	vldr	s3, [pc, #112]	; 8017108 <mode_WallSensorTuning+0x3dc>
 8017098:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8017108 <mode_WallSensorTuning+0x3dc>
 801709c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8017108 <mode_WallSensorTuning+0x3dc>
 80170a0:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8017150 <mode_WallSensorTuning+0x424>
 80170a4:	f7ec fdf4 	bl	8003c90 <straight_table2>
			mode.WallControlMode=0;
 80170a8:	2300      	movs	r3, #0
 80170aa:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80170ac:	2300      	movs	r3, #0
 80170ae:	72fb      	strb	r3, [r7, #11]
			straight_table2(90+45, 500, 0, 500,1500,mode);
 80170b0:	68b8      	ldr	r0, [r7, #8]
 80170b2:	ed9f 2a25 	vldr	s4, [pc, #148]	; 8017148 <mode_WallSensorTuning+0x41c>
 80170b6:	eddf 1a14 	vldr	s3, [pc, #80]	; 8017108 <mode_WallSensorTuning+0x3dc>
 80170ba:	ed9f 1a14 	vldr	s2, [pc, #80]	; 801710c <mode_WallSensorTuning+0x3e0>
 80170be:	eddf 0a12 	vldr	s1, [pc, #72]	; 8017108 <mode_WallSensorTuning+0x3dc>
 80170c2:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8017154 <mode_WallSensorTuning+0x428>
 80170c6:	f7ec fde3 	bl	8003c90 <straight_table2>
		break;
 80170ca:	bf00      	nop
	}
	record_mode=0;
 80170cc:	4b0c      	ldr	r3, [pc, #48]	; (8017100 <mode_WallSensorTuning+0x3d4>)
 80170ce:	2200      	movs	r2, #0
 80170d0:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80170d2:	2003      	movs	r0, #3
 80170d4:	f7f1 fa9a 	bl	800860c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80170d8:	2003      	movs	r0, #3
 80170da:	f7f1 fa6f 	bl	80085bc <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 80170de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80170e2:	f7f1 fd91 	bl	8008c08 <wait_ms_NoReset>
	pl_FunMotor_stop();
 80170e6:	f7f1 faf3 	bl	80086d0 <pl_FunMotor_stop>
	record_mode=0;
 80170ea:	4b05      	ldr	r3, [pc, #20]	; (8017100 <mode_WallSensorTuning+0x3d4>)
 80170ec:	2200      	movs	r2, #0
 80170ee:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 80170f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80170f4:	f7f1 fd88 	bl	8008c08 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 80170f8:	2000      	movs	r0, #0
 80170fa:	f7f1 fa55 	bl	80085a8 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80170fe:	e02e      	b.n	801715e <mode_WallSensorTuning+0x432>
 8017100:	2000f284 	.word	0x2000f284
 8017104:	459c4000 	.word	0x459c4000
 8017108:	43fa0000 	.word	0x43fa0000
 801710c:	00000000 	.word	0x00000000
 8017110:	44b40000 	.word	0x44b40000
 8017114:	453b8000 	.word	0x453b8000
 8017118:	43960000 	.word	0x43960000
 801711c:	431b8000 	.word	0x431b8000
 8017120:	41b40000 	.word	0x41b40000
 8017124:	42870000 	.word	0x42870000
 8017128:	42cd0000 	.word	0x42cd0000
 801712c:	4329c77b 	.word	0x4329c77b
 8017130:	41fe8ef6 	.word	0x41fe8ef6
 8017134:	42beeb39 	.word	0x42beeb39
 8017138:	43beeb39 	.word	0x43beeb39
 801713c:	461c4000 	.word	0x461c4000
 8017140:	442f0000 	.word	0x442f0000
 8017144:	4484977b 	.word	0x4484977b
 8017148:	44bb8000 	.word	0x44bb8000
 801714c:	43488000 	.word	0x43488000
 8017150:	42340000 	.word	0x42340000
 8017154:	43070000 	.word	0x43070000
		HAL_Delay(1);
 8017158:	2001      	movs	r0, #1
 801715a:	f002 facb 	bl	80196f4 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801715e:	4b0e      	ldr	r3, [pc, #56]	; (8017198 <mode_WallSensorTuning+0x46c>)
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8017166:	ddf7      	ble.n	8017158 <mode_WallSensorTuning+0x42c>
 8017168:	4b0b      	ldr	r3, [pc, #44]	; (8017198 <mode_WallSensorTuning+0x46c>)
 801716a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801716e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8017172:	ddf1      	ble.n	8017158 <mode_WallSensorTuning+0x42c>
 8017174:	4b08      	ldr	r3, [pc, #32]	; (8017198 <mode_WallSensorTuning+0x46c>)
 8017176:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801717a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801717e:	ddeb      	ble.n	8017158 <mode_WallSensorTuning+0x42c>
	}
	pl_r_blue_LED(ON);
 8017180:	2001      	movs	r0, #1
 8017182:	f7f0 fd81 	bl	8007c88 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8017186:	2001      	movs	r0, #1
 8017188:	f7f0 fd90 	bl	8007cac <pl_l_blue_LED>
	record_print();
 801718c:	f000 faf6 	bl	801777c <record_print>



}
 8017190:	bf00      	nop
 8017192:	3710      	adds	r7, #16
 8017194:	46bd      	mov	sp, r7
 8017196:	bd80      	pop	{r7, pc}
 8017198:	200002bc 	.word	0x200002bc

0801719c <mode_WallSensorTuning_fast>:





void mode_WallSensorTuning_fast(unsigned char main_modeR){
 801719c:	b580      	push	{r7, lr}
 801719e:	b084      	sub	sp, #16
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	4603      	mov	r3, r0
 80171a4:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 80171a6:	2300      	movs	r3, #0
 80171a8:	733b      	strb	r3, [r7, #12]
	mode.WallControlStatus=0;
 80171aa:	2300      	movs	r3, #0
 80171ac:	737b      	strb	r3, [r7, #13]
	mode.WallCutMode=0;
 80171ae:	2300      	movs	r3, #0
 80171b0:	73fb      	strb	r3, [r7, #15]
	mode.calMazeMode=0;
 80171b2:	2300      	movs	r3, #0
 80171b4:	73bb      	strb	r3, [r7, #14]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 80171b6:	2001      	movs	r0, #1
 80171b8:	f7f1 f9f6 	bl	80085a8 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80171bc:	2003      	movs	r0, #3
 80171be:	f7f1 f9fd 	bl	80085bc <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80171c2:	2003      	movs	r0, #3
 80171c4:	f7f1 fa22 	bl	800860c <pl_R_DriveMotor_mode>
	pl_FunMotor_duty(0.99);
 80171c8:	ed9f 0ae3 	vldr	s0, [pc, #908]	; 8017558 <mode_WallSensorTuning_fast+0x3bc>
 80171cc:	f7f1 fa8a 	bl	80086e4 <pl_FunMotor_duty>
	pl_FunMotor_start();
 80171d0:	f7f1 fa74 	bl	80086bc <pl_FunMotor_start>
	HAL_Delay(600);
 80171d4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80171d8:	f002 fa8c 	bl	80196f4 <HAL_Delay>
	reset_gyro();
 80171dc:	f7ea fd14 	bl	8001c08 <reset_gyro>
	reset_speed();
 80171e0:	f7e9 ff20 	bl	8001024 <reset_speed>
	clear_Ierror();
 80171e4:	f7ee f864 	bl	80052b0 <clear_Ierror>
	angle=0;
 80171e8:	4bdc      	ldr	r3, [pc, #880]	; (801755c <mode_WallSensorTuning_fast+0x3c0>)
 80171ea:	f04f 0200 	mov.w	r2, #0
 80171ee:	601a      	str	r2, [r3, #0]

	switch (main_modeR) {
 80171f0:	79fb      	ldrb	r3, [r7, #7]
 80171f2:	2b0f      	cmp	r3, #15
 80171f4:	f200 821b 	bhi.w	801762e <mode_WallSensorTuning_fast+0x492>
 80171f8:	a201      	add	r2, pc, #4	; (adr r2, 8017200 <mode_WallSensorTuning_fast+0x64>)
 80171fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171fe:	bf00      	nop
 8017200:	08017241 	.word	0x08017241
 8017204:	08017273 	.word	0x08017273
 8017208:	080172e9 	.word	0x080172e9
 801720c:	0801735f 	.word	0x0801735f
 8017210:	080173d5 	.word	0x080173d5
 8017214:	0801744b 	.word	0x0801744b
 8017218:	080174c1 	.word	0x080174c1
 801721c:	080174e7 	.word	0x080174e7
 8017220:	0801750d 	.word	0x0801750d
 8017224:	08017533 	.word	0x08017533
 8017228:	080175bd 	.word	0x080175bd
 801722c:	080175e3 	.word	0x080175e3
 8017230:	08017609 	.word	0x08017609
 8017234:	0801762f 	.word	0x0801762f
 8017238:	0801762f 	.word	0x0801762f
 801723c:	0801762f 	.word	0x0801762f
		case 0://横壁追従制御
			record_mode=15;
 8017240:	4bc7      	ldr	r3, [pc, #796]	; (8017560 <mode_WallSensorTuning_fast+0x3c4>)
 8017242:	220f      	movs	r2, #15
 8017244:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8017246:	2301      	movs	r3, #1
 8017248:	733b      	strb	r3, [r7, #12]
			highspeed_mode=1;
 801724a:	4bc6      	ldr	r3, [pc, #792]	; (8017564 <mode_WallSensorTuning_fast+0x3c8>)
 801724c:	2201      	movs	r2, #1
 801724e:	701a      	strb	r2, [r3, #0]
			straight_table2(BACK_TO_CENTER+180*10, 0, 0, 5000, 24000,mode);
 8017250:	68f8      	ldr	r0, [r7, #12]
 8017252:	ed9f 2ac5 	vldr	s4, [pc, #788]	; 8017568 <mode_WallSensorTuning_fast+0x3cc>
 8017256:	eddf 1ac5 	vldr	s3, [pc, #788]	; 801756c <mode_WallSensorTuning_fast+0x3d0>
 801725a:	ed9f 1ac5 	vldr	s2, [pc, #788]	; 8017570 <mode_WallSensorTuning_fast+0x3d4>
 801725e:	eddf 0ac4 	vldr	s1, [pc, #784]	; 8017570 <mode_WallSensorTuning_fast+0x3d4>
 8017262:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 8017574 <mode_WallSensorTuning_fast+0x3d8>
 8017266:	f7ec fd13 	bl	8003c90 <straight_table2>
			highspeed_mode=0;
 801726a:	4bbe      	ldr	r3, [pc, #760]	; (8017564 <mode_WallSensorTuning_fast+0x3c8>)
 801726c:	2200      	movs	r2, #0
 801726e:	701a      	strb	r2, [r3, #0]
		break;
 8017270:	e1dd      	b.n	801762e <mode_WallSensorTuning_fast+0x492>
		case 1://なし
			record_mode=8;
 8017272:	4bbb      	ldr	r3, [pc, #748]	; (8017560 <mode_WallSensorTuning_fast+0x3c4>)
 8017274:	2208      	movs	r2, #8
 8017276:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8017278:	2301      	movs	r3, #1
 801727a:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 801727c:	2300      	movs	r3, #0
 801727e:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8017280:	2300      	movs	r3, #0
 8017282:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8017284:	2300      	movs	r3, #0
 8017286:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1000, 1000,10000,mode);
 8017288:	68f8      	ldr	r0, [r7, #12]
 801728a:	ed9f 2abb 	vldr	s4, [pc, #748]	; 8017578 <mode_WallSensorTuning_fast+0x3dc>
 801728e:	eddf 1abb 	vldr	s3, [pc, #748]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 8017292:	ed9f 1aba 	vldr	s2, [pc, #744]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 8017296:	eddf 0ab6 	vldr	s1, [pc, #728]	; 8017570 <mode_WallSensorTuning_fast+0x3d4>
 801729a:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8017580 <mode_WallSensorTuning_fast+0x3e4>
 801729e:	f7ec fcf7 	bl	8003c90 <straight_table2>
			mode.WallCutMode=2;
 80172a2:	2302      	movs	r3, #2
 80172a4:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 80172a6:	2300      	movs	r3, #0
 80172a8:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1000, 1000, 1000,10000,mode);
 80172aa:	68f8      	ldr	r0, [r7, #12]
 80172ac:	ed9f 2ab2 	vldr	s4, [pc, #712]	; 8017578 <mode_WallSensorTuning_fast+0x3dc>
 80172b0:	eddf 1ab2 	vldr	s3, [pc, #712]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 80172b4:	ed9f 1ab1 	vldr	s2, [pc, #708]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 80172b8:	eddf 0ab0 	vldr	s1, [pc, #704]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 80172bc:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8017584 <mode_WallSensorTuning_fast+0x3e8>
 80172c0:	f7ec fce6 	bl	8003c90 <straight_table2>
			mode.WallControlMode=1;
 80172c4:	2301      	movs	r3, #1
 80172c6:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80172c8:	2300      	movs	r3, #0
 80172ca:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1000, 0, 1000,10000,mode);
 80172cc:	68f8      	ldr	r0, [r7, #12]
 80172ce:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 8017578 <mode_WallSensorTuning_fast+0x3dc>
 80172d2:	eddf 1aaa 	vldr	s3, [pc, #680]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 80172d6:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 8017570 <mode_WallSensorTuning_fast+0x3d4>
 80172da:	eddf 0aa8 	vldr	s1, [pc, #672]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 80172de:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 8017588 <mode_WallSensorTuning_fast+0x3ec>
 80172e2:	f7ec fcd5 	bl	8003c90 <straight_table2>
		break;
 80172e6:	e1a2      	b.n	801762e <mode_WallSensorTuning_fast+0x492>
		case 2://なし
			record_mode=8;
 80172e8:	4b9d      	ldr	r3, [pc, #628]	; (8017560 <mode_WallSensorTuning_fast+0x3c4>)
 80172ea:	2208      	movs	r2, #8
 80172ec:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80172ee:	2301      	movs	r3, #1
 80172f0:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 80172f2:	2300      	movs	r3, #0
 80172f4:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 80172f6:	2300      	movs	r3, #0
 80172f8:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 80172fa:	2300      	movs	r3, #0
 80172fc:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1200, 1200,10000,mode);
 80172fe:	68f8      	ldr	r0, [r7, #12]
 8017300:	ed9f 2a9d 	vldr	s4, [pc, #628]	; 8017578 <mode_WallSensorTuning_fast+0x3dc>
 8017304:	eddf 1aa1 	vldr	s3, [pc, #644]	; 801758c <mode_WallSensorTuning_fast+0x3f0>
 8017308:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 801758c <mode_WallSensorTuning_fast+0x3f0>
 801730c:	eddf 0a98 	vldr	s1, [pc, #608]	; 8017570 <mode_WallSensorTuning_fast+0x3d4>
 8017310:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8017580 <mode_WallSensorTuning_fast+0x3e4>
 8017314:	f7ec fcbc 	bl	8003c90 <straight_table2>
			mode.WallCutMode=2;
 8017318:	2302      	movs	r3, #2
 801731a:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 801731c:	2300      	movs	r3, #0
 801731e:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1200, 1200, 1200,10000,mode);
 8017320:	68f8      	ldr	r0, [r7, #12]
 8017322:	ed9f 2a95 	vldr	s4, [pc, #596]	; 8017578 <mode_WallSensorTuning_fast+0x3dc>
 8017326:	eddf 1a99 	vldr	s3, [pc, #612]	; 801758c <mode_WallSensorTuning_fast+0x3f0>
 801732a:	ed9f 1a98 	vldr	s2, [pc, #608]	; 801758c <mode_WallSensorTuning_fast+0x3f0>
 801732e:	eddf 0a97 	vldr	s1, [pc, #604]	; 801758c <mode_WallSensorTuning_fast+0x3f0>
 8017332:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8017584 <mode_WallSensorTuning_fast+0x3e8>
 8017336:	f7ec fcab 	bl	8003c90 <straight_table2>
			mode.WallControlMode=1;
 801733a:	2301      	movs	r3, #1
 801733c:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 801733e:	2300      	movs	r3, #0
 8017340:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1200, 0, 1200,10000,mode);
 8017342:	68f8      	ldr	r0, [r7, #12]
 8017344:	ed9f 2a8c 	vldr	s4, [pc, #560]	; 8017578 <mode_WallSensorTuning_fast+0x3dc>
 8017348:	eddf 1a90 	vldr	s3, [pc, #576]	; 801758c <mode_WallSensorTuning_fast+0x3f0>
 801734c:	ed9f 1a88 	vldr	s2, [pc, #544]	; 8017570 <mode_WallSensorTuning_fast+0x3d4>
 8017350:	eddf 0a8e 	vldr	s1, [pc, #568]	; 801758c <mode_WallSensorTuning_fast+0x3f0>
 8017354:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8017588 <mode_WallSensorTuning_fast+0x3ec>
 8017358:	f7ec fc9a 	bl	8003c90 <straight_table2>
		break;
 801735c:	e167      	b.n	801762e <mode_WallSensorTuning_fast+0x492>
		case 3://壁切れ45度//90°大回り
			record_mode=8;
 801735e:	4b80      	ldr	r3, [pc, #512]	; (8017560 <mode_WallSensorTuning_fast+0x3c4>)
 8017360:	2208      	movs	r2, #8
 8017362:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8017364:	2301      	movs	r3, #1
 8017366:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8017368:	2300      	movs	r3, #0
 801736a:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 801736c:	2300      	movs	r3, #0
 801736e:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8017370:	2300      	movs	r3, #0
 8017372:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1500, 1500,13000,mode);
 8017374:	68f8      	ldr	r0, [r7, #12]
 8017376:	ed9f 2a86 	vldr	s4, [pc, #536]	; 8017590 <mode_WallSensorTuning_fast+0x3f4>
 801737a:	eddf 1a86 	vldr	s3, [pc, #536]	; 8017594 <mode_WallSensorTuning_fast+0x3f8>
 801737e:	ed9f 1a85 	vldr	s2, [pc, #532]	; 8017594 <mode_WallSensorTuning_fast+0x3f8>
 8017382:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8017570 <mode_WallSensorTuning_fast+0x3d4>
 8017386:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8017580 <mode_WallSensorTuning_fast+0x3e4>
 801738a:	f7ec fc81 	bl	8003c90 <straight_table2>
			mode.WallCutMode=2;
 801738e:	2302      	movs	r3, #2
 8017390:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8017392:	2300      	movs	r3, #0
 8017394:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1500, 1500, 1500,13000,mode);
 8017396:	68f8      	ldr	r0, [r7, #12]
 8017398:	ed9f 2a7d 	vldr	s4, [pc, #500]	; 8017590 <mode_WallSensorTuning_fast+0x3f4>
 801739c:	eddf 1a7d 	vldr	s3, [pc, #500]	; 8017594 <mode_WallSensorTuning_fast+0x3f8>
 80173a0:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 8017594 <mode_WallSensorTuning_fast+0x3f8>
 80173a4:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8017594 <mode_WallSensorTuning_fast+0x3f8>
 80173a8:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8017584 <mode_WallSensorTuning_fast+0x3e8>
 80173ac:	f7ec fc70 	bl	8003c90 <straight_table2>
			mode.WallControlMode=1;
 80173b0:	2301      	movs	r3, #1
 80173b2:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80173b4:	2300      	movs	r3, #0
 80173b6:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1500, 0, 1500,13000,mode);
 80173b8:	68f8      	ldr	r0, [r7, #12]
 80173ba:	ed9f 2a75 	vldr	s4, [pc, #468]	; 8017590 <mode_WallSensorTuning_fast+0x3f4>
 80173be:	eddf 1a75 	vldr	s3, [pc, #468]	; 8017594 <mode_WallSensorTuning_fast+0x3f8>
 80173c2:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8017570 <mode_WallSensorTuning_fast+0x3d4>
 80173c6:	eddf 0a73 	vldr	s1, [pc, #460]	; 8017594 <mode_WallSensorTuning_fast+0x3f8>
 80173ca:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8017588 <mode_WallSensorTuning_fast+0x3ec>
 80173ce:	f7ec fc5f 	bl	8003c90 <straight_table2>
		break;
 80173d2:	e12c      	b.n	801762e <mode_WallSensorTuning_fast+0x492>
		case 4://壁切れ45度斜め(考え中)右
			record_mode=8;
 80173d4:	4b62      	ldr	r3, [pc, #392]	; (8017560 <mode_WallSensorTuning_fast+0x3c4>)
 80173d6:	2208      	movs	r2, #8
 80173d8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 80173da:	2300      	movs	r3, #0
 80173dc:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 80173de:	2300      	movs	r3, #0
 80173e0:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 80173e2:	2300      	movs	r3, #0
 80173e4:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 80173e6:	2300      	movs	r3, #0
 80173e8:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 90*sqrt(2), 0, 1000, 1000,10000,mode);
 80173ea:	68f8      	ldr	r0, [r7, #12]
 80173ec:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8017578 <mode_WallSensorTuning_fast+0x3dc>
 80173f0:	eddf 1a62 	vldr	s3, [pc, #392]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 80173f4:	ed9f 1a61 	vldr	s2, [pc, #388]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 80173f8:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8017570 <mode_WallSensorTuning_fast+0x3d4>
 80173fc:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8017598 <mode_WallSensorTuning_fast+0x3fc>
 8017400:	f7ec fc46 	bl	8003c90 <straight_table2>
			mode.WallCutMode=3;
 8017404:	2303      	movs	r3, #3
 8017406:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8017408:	2300      	movs	r3, #0
 801740a:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 801740c:	68f8      	ldr	r0, [r7, #12]
 801740e:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 8017578 <mode_WallSensorTuning_fast+0x3dc>
 8017412:	eddf 1a5a 	vldr	s3, [pc, #360]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 8017416:	ed9f 1a59 	vldr	s2, [pc, #356]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 801741a:	eddf 0a58 	vldr	s1, [pc, #352]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 801741e:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 801759c <mode_WallSensorTuning_fast+0x400>
 8017422:	f7ec fc35 	bl	8003c90 <straight_table2>
			mode.WallControlMode=0;
 8017426:	2300      	movs	r3, #0
 8017428:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 801742a:	2300      	movs	r3, #0
 801742c:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 801742e:	68f8      	ldr	r0, [r7, #12]
 8017430:	ed9f 2a51 	vldr	s4, [pc, #324]	; 8017578 <mode_WallSensorTuning_fast+0x3dc>
 8017434:	eddf 1a51 	vldr	s3, [pc, #324]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 8017438:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8017570 <mode_WallSensorTuning_fast+0x3d4>
 801743c:	eddf 0a4f 	vldr	s1, [pc, #316]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 8017440:	ed9f 0a57 	vldr	s0, [pc, #348]	; 80175a0 <mode_WallSensorTuning_fast+0x404>
 8017444:	f7ec fc24 	bl	8003c90 <straight_table2>
		break;
 8017448:	e0f1      	b.n	801762e <mode_WallSensorTuning_fast+0x492>
		case 5://壁切れ45度斜め(考え中)左
			record_mode=8;
 801744a:	4b45      	ldr	r3, [pc, #276]	; (8017560 <mode_WallSensorTuning_fast+0x3c4>)
 801744c:	2208      	movs	r2, #8
 801744e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8017450:	2300      	movs	r3, #0
 8017452:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8017454:	2300      	movs	r3, #0
 8017456:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8017458:	2300      	movs	r3, #0
 801745a:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 801745c:	2300      	movs	r3, #0
 801745e:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT+90*sqrt(2), 0, 1000, 1000,10000,mode);
 8017460:	68f8      	ldr	r0, [r7, #12]
 8017462:	ed9f 2a45 	vldr	s4, [pc, #276]	; 8017578 <mode_WallSensorTuning_fast+0x3dc>
 8017466:	eddf 1a45 	vldr	s3, [pc, #276]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 801746a:	ed9f 1a44 	vldr	s2, [pc, #272]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 801746e:	eddf 0a40 	vldr	s1, [pc, #256]	; 8017570 <mode_WallSensorTuning_fast+0x3d4>
 8017472:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8017598 <mode_WallSensorTuning_fast+0x3fc>
 8017476:	f7ec fc0b 	bl	8003c90 <straight_table2>
			mode.WallCutMode=4;
 801747a:	2304      	movs	r3, #4
 801747c:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 801747e:	2300      	movs	r3, #0
 8017480:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 8017482:	68f8      	ldr	r0, [r7, #12]
 8017484:	ed9f 2a3c 	vldr	s4, [pc, #240]	; 8017578 <mode_WallSensorTuning_fast+0x3dc>
 8017488:	eddf 1a3c 	vldr	s3, [pc, #240]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 801748c:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 8017490:	eddf 0a3a 	vldr	s1, [pc, #232]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 8017494:	ed9f 0a41 	vldr	s0, [pc, #260]	; 801759c <mode_WallSensorTuning_fast+0x400>
 8017498:	f7ec fbfa 	bl	8003c90 <straight_table2>
			mode.WallControlMode=0;
 801749c:	2300      	movs	r3, #0
 801749e:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80174a0:	2300      	movs	r3, #0
 80174a2:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 80174a4:	68f8      	ldr	r0, [r7, #12]
 80174a6:	ed9f 2a34 	vldr	s4, [pc, #208]	; 8017578 <mode_WallSensorTuning_fast+0x3dc>
 80174aa:	eddf 1a34 	vldr	s3, [pc, #208]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 80174ae:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8017570 <mode_WallSensorTuning_fast+0x3d4>
 80174b2:	eddf 0a32 	vldr	s1, [pc, #200]	; 801757c <mode_WallSensorTuning_fast+0x3e0>
 80174b6:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 80175a0 <mode_WallSensorTuning_fast+0x404>
 80174ba:	f7ec fbe9 	bl	8003c90 <straight_table2>
		break;
 80174be:	e0b6      	b.n	801762e <mode_WallSensorTuning_fast+0x492>
		case 6://斜め直進(制御なし計測用)
			record_mode=7;
 80174c0:	4b27      	ldr	r3, [pc, #156]	; (8017560 <mode_WallSensorTuning_fast+0x3c4>)
 80174c2:	2207      	movs	r2, #7
 80174c4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80174c6:	2300      	movs	r3, #0
 80174c8:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 80174ca:	68f8      	ldr	r0, [r7, #12]
 80174cc:	ed9f 2a35 	vldr	s4, [pc, #212]	; 80175a4 <mode_WallSensorTuning_fast+0x408>
 80174d0:	eddf 1a35 	vldr	s3, [pc, #212]	; 80175a8 <mode_WallSensorTuning_fast+0x40c>
 80174d4:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8017570 <mode_WallSensorTuning_fast+0x3d4>
 80174d8:	eddf 0a25 	vldr	s1, [pc, #148]	; 8017570 <mode_WallSensorTuning_fast+0x3d4>
 80174dc:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80175ac <mode_WallSensorTuning_fast+0x410>
 80174e0:	f7ec fbd6 	bl	8003c90 <straight_table2>
		break;
 80174e4:	e0a3      	b.n	801762e <mode_WallSensorTuning_fast+0x492>
		case 7://斜め直進(制御なし計測用)
			record_mode=9;
 80174e6:	4b1e      	ldr	r3, [pc, #120]	; (8017560 <mode_WallSensorTuning_fast+0x3c4>)
 80174e8:	2209      	movs	r2, #9
 80174ea:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80174ec:	2300      	movs	r3, #0
 80174ee:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 80174f0:	68f8      	ldr	r0, [r7, #12]
 80174f2:	ed9f 2a2c 	vldr	s4, [pc, #176]	; 80175a4 <mode_WallSensorTuning_fast+0x408>
 80174f6:	eddf 1a2c 	vldr	s3, [pc, #176]	; 80175a8 <mode_WallSensorTuning_fast+0x40c>
 80174fa:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8017570 <mode_WallSensorTuning_fast+0x3d4>
 80174fe:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8017570 <mode_WallSensorTuning_fast+0x3d4>
 8017502:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80175ac <mode_WallSensorTuning_fast+0x410>
 8017506:	f7ec fbc3 	bl	8003c90 <straight_table2>

		break;
 801750a:	e090      	b.n	801762e <mode_WallSensorTuning_fast+0x492>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 801750c:	4b14      	ldr	r3, [pc, #80]	; (8017560 <mode_WallSensorTuning_fast+0x3c4>)
 801750e:	2207      	movs	r2, #7
 8017510:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8017512:	2303      	movs	r3, #3
 8017514:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8017516:	68f8      	ldr	r0, [r7, #12]
 8017518:	ed9f 2a22 	vldr	s4, [pc, #136]	; 80175a4 <mode_WallSensorTuning_fast+0x408>
 801751c:	eddf 1a24 	vldr	s3, [pc, #144]	; 80175b0 <mode_WallSensorTuning_fast+0x414>
 8017520:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8017570 <mode_WallSensorTuning_fast+0x3d4>
 8017524:	eddf 0a12 	vldr	s1, [pc, #72]	; 8017570 <mode_WallSensorTuning_fast+0x3d4>
 8017528:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80175b4 <mode_WallSensorTuning_fast+0x418>
 801752c:	f7ec fbb0 	bl	8003c90 <straight_table2>
		break;
 8017530:	e07d      	b.n	801762e <mode_WallSensorTuning_fast+0x492>
		case 9:
			record_mode=8;
 8017532:	4b0b      	ldr	r3, [pc, #44]	; (8017560 <mode_WallSensorTuning_fast+0x3c4>)
 8017534:	2208      	movs	r2, #8
 8017536:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8017538:	2303      	movs	r3, #3
 801753a:	733b      	strb	r3, [r7, #12]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 3500, 20000,mode);
 801753c:	68f8      	ldr	r0, [r7, #12]
 801753e:	ed9f 2a19 	vldr	s4, [pc, #100]	; 80175a4 <mode_WallSensorTuning_fast+0x408>
 8017542:	eddf 1a1b 	vldr	s3, [pc, #108]	; 80175b0 <mode_WallSensorTuning_fast+0x414>
 8017546:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8017570 <mode_WallSensorTuning_fast+0x3d4>
 801754a:	eddf 0a09 	vldr	s1, [pc, #36]	; 8017570 <mode_WallSensorTuning_fast+0x3d4>
 801754e:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80175b8 <mode_WallSensorTuning_fast+0x41c>
 8017552:	f7ec fb9d 	bl	8003c90 <straight_table2>
		break;
 8017556:	e06a      	b.n	801762e <mode_WallSensorTuning_fast+0x492>
 8017558:	3f7d70a4 	.word	0x3f7d70a4
 801755c:	20000268 	.word	0x20000268
 8017560:	2000f284 	.word	0x2000f284
 8017564:	20000814 	.word	0x20000814
 8017568:	46bb8000 	.word	0x46bb8000
 801756c:	459c4000 	.word	0x459c4000
 8017570:	00000000 	.word	0x00000000
 8017574:	44e39000 	.word	0x44e39000
 8017578:	461c4000 	.word	0x461c4000
 801757c:	447a0000 	.word	0x447a0000
 8017580:	42cd0000 	.word	0x42cd0000
 8017584:	41b40000 	.word	0x41b40000
 8017588:	42e10000 	.word	0x42e10000
 801758c:	44960000 	.word	0x44960000
 8017590:	464b2000 	.word	0x464b2000
 8017594:	44bb8000 	.word	0x44bb8000
 8017598:	4321c77b 	.word	0x4321c77b
 801759c:	41fe8ef6 	.word	0x41fe8ef6
 80175a0:	42beeb39 	.word	0x42beeb39
 80175a4:	469c4000 	.word	0x469c4000
 80175a8:	44fa0000 	.word	0x44fa0000
 80175ac:	445ebd17 	.word	0x445ebd17
 80175b0:	455ac000 	.word	0x455ac000
 80175b4:	443eeb39 	.word	0x443eeb39
 80175b8:	4484977b 	.word	0x4484977b
		case 10:
			record_mode=10;
 80175bc:	4b39      	ldr	r3, [pc, #228]	; (80176a4 <mode_WallSensorTuning_fast+0x508>)
 80175be:	220a      	movs	r2, #10
 80175c0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80175c2:	2303      	movs	r3, #3
 80175c4:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 80175c6:	68f8      	ldr	r0, [r7, #12]
 80175c8:	ed9f 2a37 	vldr	s4, [pc, #220]	; 80176a8 <mode_WallSensorTuning_fast+0x50c>
 80175cc:	eddf 1a37 	vldr	s3, [pc, #220]	; 80176ac <mode_WallSensorTuning_fast+0x510>
 80175d0:	ed9f 1a37 	vldr	s2, [pc, #220]	; 80176b0 <mode_WallSensorTuning_fast+0x514>
 80175d4:	eddf 0a36 	vldr	s1, [pc, #216]	; 80176b0 <mode_WallSensorTuning_fast+0x514>
 80175d8:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80176b4 <mode_WallSensorTuning_fast+0x518>
 80175dc:	f7ec fb58 	bl	8003c90 <straight_table2>
		break;
 80175e0:	e025      	b.n	801762e <mode_WallSensorTuning_fast+0x492>
		case 11:
			record_mode=11;
 80175e2:	4b30      	ldr	r3, [pc, #192]	; (80176a4 <mode_WallSensorTuning_fast+0x508>)
 80175e4:	220b      	movs	r2, #11
 80175e6:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80175e8:	2303      	movs	r3, #3
 80175ea:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 80175ec:	68f8      	ldr	r0, [r7, #12]
 80175ee:	ed9f 2a32 	vldr	s4, [pc, #200]	; 80176b8 <mode_WallSensorTuning_fast+0x51c>
 80175f2:	eddf 1a32 	vldr	s3, [pc, #200]	; 80176bc <mode_WallSensorTuning_fast+0x520>
 80175f6:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 80176b0 <mode_WallSensorTuning_fast+0x514>
 80175fa:	eddf 0a2d 	vldr	s1, [pc, #180]	; 80176b0 <mode_WallSensorTuning_fast+0x514>
 80175fe:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80176b4 <mode_WallSensorTuning_fast+0x518>
 8017602:	f7ec fb45 	bl	8003c90 <straight_table2>
		break;
 8017606:	e012      	b.n	801762e <mode_WallSensorTuning_fast+0x492>
		case 12:
			record_mode=12;
 8017608:	4b26      	ldr	r3, [pc, #152]	; (80176a4 <mode_WallSensorTuning_fast+0x508>)
 801760a:	220c      	movs	r2, #12
 801760c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 801760e:	2303      	movs	r3, #3
 8017610:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 8017612:	68f8      	ldr	r0, [r7, #12]
 8017614:	ed9f 2a28 	vldr	s4, [pc, #160]	; 80176b8 <mode_WallSensorTuning_fast+0x51c>
 8017618:	eddf 1a28 	vldr	s3, [pc, #160]	; 80176bc <mode_WallSensorTuning_fast+0x520>
 801761c:	ed9f 1a24 	vldr	s2, [pc, #144]	; 80176b0 <mode_WallSensorTuning_fast+0x514>
 8017620:	eddf 0a23 	vldr	s1, [pc, #140]	; 80176b0 <mode_WallSensorTuning_fast+0x514>
 8017624:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80176b4 <mode_WallSensorTuning_fast+0x518>
 8017628:	f7ec fb32 	bl	8003c90 <straight_table2>
		break;
 801762c:	bf00      	nop
		case 15:
		break;
	}
	record_mode=0;
 801762e:	4b1d      	ldr	r3, [pc, #116]	; (80176a4 <mode_WallSensorTuning_fast+0x508>)
 8017630:	2200      	movs	r2, #0
 8017632:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8017634:	2003      	movs	r0, #3
 8017636:	f7f0 ffe9 	bl	800860c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801763a:	2003      	movs	r0, #3
 801763c:	f7f0 ffbe 	bl	80085bc <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8017640:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8017644:	f7f1 fae0 	bl	8008c08 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8017648:	f7f1 f842 	bl	80086d0 <pl_FunMotor_stop>
	record_mode=0;
 801764c:	4b15      	ldr	r3, [pc, #84]	; (80176a4 <mode_WallSensorTuning_fast+0x508>)
 801764e:	2200      	movs	r2, #0
 8017650:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8017652:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8017656:	f7f1 fad7 	bl	8008c08 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 801765a:	2000      	movs	r0, #0
 801765c:	f7f0 ffa4 	bl	80085a8 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8017660:	e002      	b.n	8017668 <mode_WallSensorTuning_fast+0x4cc>
		HAL_Delay(1);
 8017662:	2001      	movs	r0, #1
 8017664:	f002 f846 	bl	80196f4 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8017668:	4b15      	ldr	r3, [pc, #84]	; (80176c0 <mode_WallSensorTuning_fast+0x524>)
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8017670:	ddf7      	ble.n	8017662 <mode_WallSensorTuning_fast+0x4c6>
 8017672:	4b13      	ldr	r3, [pc, #76]	; (80176c0 <mode_WallSensorTuning_fast+0x524>)
 8017674:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8017678:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801767c:	ddf1      	ble.n	8017662 <mode_WallSensorTuning_fast+0x4c6>
 801767e:	4b10      	ldr	r3, [pc, #64]	; (80176c0 <mode_WallSensorTuning_fast+0x524>)
 8017680:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8017684:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8017688:	ddeb      	ble.n	8017662 <mode_WallSensorTuning_fast+0x4c6>
	}
	pl_r_blue_LED(ON);
 801768a:	2001      	movs	r0, #1
 801768c:	f7f0 fafc 	bl	8007c88 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8017690:	2001      	movs	r0, #1
 8017692:	f7f0 fb0b 	bl	8007cac <pl_l_blue_LED>
	record_print();
 8017696:	f000 f871 	bl	801777c <record_print>



}
 801769a:	bf00      	nop
 801769c:	3710      	adds	r7, #16
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}
 80176a2:	bf00      	nop
 80176a4:	2000f284 	.word	0x2000f284
 80176a8:	469c4000 	.word	0x469c4000
 80176ac:	455ac000 	.word	0x455ac000
 80176b0:	00000000 	.word	0x00000000
 80176b4:	443eeb39 	.word	0x443eeb39
 80176b8:	466a6000 	.word	0x466a6000
 80176bc:	453b8000 	.word	0x453b8000
 80176c0:	200002bc 	.word	0x200002bc

080176c4 <record_reset>:
char record_rupe_flag;

//int SEN_record[5][15];
//int SEN_recordD[5][15];

void record_reset(void) {
 80176c4:	b480      	push	{r7}
 80176c6:	af00      	add	r7, sp, #0
	record_mode = 0;
 80176c8:	4b06      	ldr	r3, [pc, #24]	; (80176e4 <record_reset+0x20>)
 80176ca:	2200      	movs	r2, #0
 80176cc:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 80176ce:	4b06      	ldr	r3, [pc, #24]	; (80176e8 <record_reset+0x24>)
 80176d0:	2200      	movs	r2, #0
 80176d2:	601a      	str	r2, [r3, #0]
	record_rupe_flag = 0;
 80176d4:	4b05      	ldr	r3, [pc, #20]	; (80176ec <record_reset+0x28>)
 80176d6:	2200      	movs	r2, #0
 80176d8:	701a      	strb	r2, [r3, #0]
}
 80176da:	bf00      	nop
 80176dc:	46bd      	mov	sp, r7
 80176de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e2:	4770      	bx	lr
 80176e4:	2000f284 	.word	0x2000f284
 80176e8:	2000f288 	.word	0x2000f288
 80176ec:	2000f290 	.word	0x2000f290

080176f0 <record_data>:

void record_data(float *input_record_data, int numlen) {
 80176f0:	b490      	push	{r4, r7}
 80176f2:	b084      	sub	sp, #16
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
 80176f8:	6039      	str	r1, [r7, #0]

	for (int record_count = 0; record_count < numlen; record_count++) {
 80176fa:	2300      	movs	r3, #0
 80176fc:	60fb      	str	r3, [r7, #12]
 80176fe:	e013      	b.n	8017728 <record_data+0x38>
		record_value[record_count][record_time] =
				input_record_data[record_count];
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	009b      	lsls	r3, r3, #2
 8017704:	687a      	ldr	r2, [r7, #4]
 8017706:	441a      	add	r2, r3
		record_value[record_count][record_time] =
 8017708:	4b18      	ldr	r3, [pc, #96]	; (801776c <record_data+0x7c>)
 801770a:	681b      	ldr	r3, [r3, #0]
				input_record_data[record_count];
 801770c:	6812      	ldr	r2, [r2, #0]
		record_value[record_count][record_time] =
 801770e:	4818      	ldr	r0, [pc, #96]	; (8017770 <record_data+0x80>)
 8017710:	68f9      	ldr	r1, [r7, #12]
 8017712:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8017716:	fb04 f101 	mul.w	r1, r4, r1
 801771a:	440b      	add	r3, r1
 801771c:	009b      	lsls	r3, r3, #2
 801771e:	4403      	add	r3, r0
 8017720:	601a      	str	r2, [r3, #0]
	for (int record_count = 0; record_count < numlen; record_count++) {
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	3301      	adds	r3, #1
 8017726:	60fb      	str	r3, [r7, #12]
 8017728:	68fa      	ldr	r2, [r7, #12]
 801772a:	683b      	ldr	r3, [r7, #0]
 801772c:	429a      	cmp	r2, r3
 801772e:	dbe7      	blt.n	8017700 <record_data+0x10>
	}
	if (record_rupe_flag == 1) {
 8017730:	4b10      	ldr	r3, [pc, #64]	; (8017774 <record_data+0x84>)
 8017732:	781b      	ldrb	r3, [r3, #0]
 8017734:	2b01      	cmp	r3, #1
 8017736:	d103      	bne.n	8017740 <record_data+0x50>
		record_end_point = record_time;
 8017738:	4b0c      	ldr	r3, [pc, #48]	; (801776c <record_data+0x7c>)
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	4a0e      	ldr	r2, [pc, #56]	; (8017778 <record_data+0x88>)
 801773e:	6013      	str	r3, [r2, #0]
	}
	record_time++;
 8017740:	4b0a      	ldr	r3, [pc, #40]	; (801776c <record_data+0x7c>)
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	3301      	adds	r3, #1
 8017746:	4a09      	ldr	r2, [pc, #36]	; (801776c <record_data+0x7c>)
 8017748:	6013      	str	r3, [r2, #0]
	if (record_time >= max_record_time) {
 801774a:	4b08      	ldr	r3, [pc, #32]	; (801776c <record_data+0x7c>)
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8017752:	4293      	cmp	r3, r2
 8017754:	dd05      	ble.n	8017762 <record_data+0x72>
		record_time = 0;
 8017756:	4b05      	ldr	r3, [pc, #20]	; (801776c <record_data+0x7c>)
 8017758:	2200      	movs	r2, #0
 801775a:	601a      	str	r2, [r3, #0]
		record_rupe_flag = 1;
 801775c:	4b05      	ldr	r3, [pc, #20]	; (8017774 <record_data+0x84>)
 801775e:	2201      	movs	r2, #1
 8017760:	701a      	strb	r2, [r3, #0]
	}

}
 8017762:	bf00      	nop
 8017764:	3710      	adds	r7, #16
 8017766:	46bd      	mov	sp, r7
 8017768:	bc90      	pop	{r4, r7}
 801776a:	4770      	bx	lr
 801776c:	2000f288 	.word	0x2000f288
 8017770:	20003704 	.word	0x20003704
 8017774:	2000f290 	.word	0x2000f290
 8017778:	2000f28c 	.word	0x2000f28c

0801777c <record_print>:

void record_print(void) {
 801777c:	b580      	push	{r7, lr}
 801777e:	b084      	sub	sp, #16
 8017780:	af00      	add	r7, sp, #0
	int a, time_index;
	if (record_rupe_flag == 0) {
 8017782:	4b3a      	ldr	r3, [pc, #232]	; (801786c <record_print+0xf0>)
 8017784:	781b      	ldrb	r3, [r3, #0]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d12e      	bne.n	80177e8 <record_print+0x6c>
		for (a = 0; a <= record_time - 1; a++) {
 801778a:	2300      	movs	r3, #0
 801778c:	60fb      	str	r3, [r7, #12]
 801778e:	e025      	b.n	80177dc <record_print+0x60>

			printf("%d", a);
 8017790:	68f9      	ldr	r1, [r7, #12]
 8017792:	4837      	ldr	r0, [pc, #220]	; (8017870 <record_print+0xf4>)
 8017794:	f009 ff00 	bl	8021598 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8017798:	2300      	movs	r3, #0
 801779a:	607b      	str	r3, [r7, #4]
 801779c:	e015      	b.n	80177ca <record_print+0x4e>
					record_count++) {
				printf(",%f", record_value[record_count][a]);
 801779e:	4935      	ldr	r1, [pc, #212]	; (8017874 <record_print+0xf8>)
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80177a6:	fb03 f202 	mul.w	r2, r3, r2
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	4413      	add	r3, r2
 80177ae:	009b      	lsls	r3, r3, #2
 80177b0:	440b      	add	r3, r1
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	4618      	mov	r0, r3
 80177b6:	f7e8 feef 	bl	8000598 <__aeabi_f2d>
 80177ba:	4602      	mov	r2, r0
 80177bc:	460b      	mov	r3, r1
 80177be:	482e      	ldr	r0, [pc, #184]	; (8017878 <record_print+0xfc>)
 80177c0:	f009 feea 	bl	8021598 <iprintf>
					record_count++) {
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	3301      	adds	r3, #1
 80177c8:	607b      	str	r3, [r7, #4]
			for (int record_count = 0; record_count < max_record_num;
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	2b03      	cmp	r3, #3
 80177ce:	dde6      	ble.n	801779e <record_print+0x22>
			}
			printf("\n");
 80177d0:	200a      	movs	r0, #10
 80177d2:	f009 fef9 	bl	80215c8 <putchar>
		for (a = 0; a <= record_time - 1; a++) {
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	3301      	adds	r3, #1
 80177da:	60fb      	str	r3, [r7, #12]
 80177dc:	4b27      	ldr	r3, [pc, #156]	; (801787c <record_print+0x100>)
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	68fa      	ldr	r2, [r7, #12]
 80177e2:	429a      	cmp	r2, r3
 80177e4:	dbd4      	blt.n	8017790 <record_print+0x14>
			}
			printf("\n");
		}
	}

}
 80177e6:	e03c      	b.n	8017862 <record_print+0xe6>
		for (a = 0; a <= max_record_time - 1; a++) {
 80177e8:	2300      	movs	r3, #0
 80177ea:	60fb      	str	r3, [r7, #12]
 80177ec:	e034      	b.n	8017858 <record_print+0xdc>
			time_index = record_end_point + 1 + a;
 80177ee:	4b24      	ldr	r3, [pc, #144]	; (8017880 <record_print+0x104>)
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	3301      	adds	r3, #1
 80177f4:	68fa      	ldr	r2, [r7, #12]
 80177f6:	4413      	add	r3, r2
 80177f8:	60bb      	str	r3, [r7, #8]
			if (time_index >= max_record_time) {
 80177fa:	68bb      	ldr	r3, [r7, #8]
 80177fc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8017800:	4293      	cmp	r3, r2
 8017802:	dd03      	ble.n	801780c <record_print+0x90>
				time_index -= max_record_time;
 8017804:	68bb      	ldr	r3, [r7, #8]
 8017806:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 801780a:	60bb      	str	r3, [r7, #8]
			printf("%d", a);
 801780c:	68f9      	ldr	r1, [r7, #12]
 801780e:	4818      	ldr	r0, [pc, #96]	; (8017870 <record_print+0xf4>)
 8017810:	f009 fec2 	bl	8021598 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8017814:	2300      	movs	r3, #0
 8017816:	603b      	str	r3, [r7, #0]
 8017818:	e015      	b.n	8017846 <record_print+0xca>
				printf(",%f", record_value[record_count][time_index]);
 801781a:	4916      	ldr	r1, [pc, #88]	; (8017874 <record_print+0xf8>)
 801781c:	683b      	ldr	r3, [r7, #0]
 801781e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8017822:	fb03 f202 	mul.w	r2, r3, r2
 8017826:	68bb      	ldr	r3, [r7, #8]
 8017828:	4413      	add	r3, r2
 801782a:	009b      	lsls	r3, r3, #2
 801782c:	440b      	add	r3, r1
 801782e:	681b      	ldr	r3, [r3, #0]
 8017830:	4618      	mov	r0, r3
 8017832:	f7e8 feb1 	bl	8000598 <__aeabi_f2d>
 8017836:	4602      	mov	r2, r0
 8017838:	460b      	mov	r3, r1
 801783a:	480f      	ldr	r0, [pc, #60]	; (8017878 <record_print+0xfc>)
 801783c:	f009 feac 	bl	8021598 <iprintf>
					record_count++) {
 8017840:	683b      	ldr	r3, [r7, #0]
 8017842:	3301      	adds	r3, #1
 8017844:	603b      	str	r3, [r7, #0]
			for (int record_count = 0; record_count < max_record_num;
 8017846:	683b      	ldr	r3, [r7, #0]
 8017848:	2b03      	cmp	r3, #3
 801784a:	dde6      	ble.n	801781a <record_print+0x9e>
			printf("\n");
 801784c:	200a      	movs	r0, #10
 801784e:	f009 febb 	bl	80215c8 <putchar>
		for (a = 0; a <= max_record_time - 1; a++) {
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	3301      	adds	r3, #1
 8017856:	60fb      	str	r3, [r7, #12]
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 801785e:	4293      	cmp	r3, r2
 8017860:	ddc5      	ble.n	80177ee <record_print+0x72>
}
 8017862:	bf00      	nop
 8017864:	3710      	adds	r7, #16
 8017866:	46bd      	mov	sp, r7
 8017868:	bd80      	pop	{r7, pc}
 801786a:	bf00      	nop
 801786c:	2000f290 	.word	0x2000f290
 8017870:	0802521c 	.word	0x0802521c
 8017874:	20003704 	.word	0x20003704
 8017878:	08025220 	.word	0x08025220
 801787c:	2000f288 	.word	0x2000f288
 8017880:	2000f28c 	.word	0x2000f28c

08017884 <interrupt_record>:

void interrupt_record(void) {
 8017884:	b580      	push	{r7, lr}
 8017886:	b084      	sub	sp, #16
 8017888:	af00      	add	r7, sp, #0

	float r_data[4];

	if (record_mode == 1) {
 801788a:	4baf      	ldr	r3, [pc, #700]	; (8017b48 <interrupt_record+0x2c4>)
 801788c:	781b      	ldrb	r3, [r3, #0]
 801788e:	2b01      	cmp	r3, #1
 8017890:	d110      	bne.n	80178b4 <interrupt_record+0x30>
			r_data[0] = E_speedR;
 8017892:	4bae      	ldr	r3, [pc, #696]	; (8017b4c <interrupt_record+0x2c8>)
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	603b      	str	r3, [r7, #0]
			r_data[1] = E_speedL;
 8017898:	4bad      	ldr	r3, [pc, #692]	; (8017b50 <interrupt_record+0x2cc>)
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceR;
 801789e:	4bad      	ldr	r3, [pc, #692]	; (8017b54 <interrupt_record+0x2d0>)
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	60bb      	str	r3, [r7, #8]
			r_data[3] = E_distanceL;
 80178a4:	4bac      	ldr	r3, [pc, #688]	; (8017b58 <interrupt_record+0x2d4>)
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80178aa:	463b      	mov	r3, r7
 80178ac:	2104      	movs	r1, #4
 80178ae:	4618      	mov	r0, r3
 80178b0:	f7ff ff1e 	bl	80176f0 <record_data>
		}
	if (record_mode == 2) {
 80178b4:	4ba4      	ldr	r3, [pc, #656]	; (8017b48 <interrupt_record+0x2c4>)
 80178b6:	781b      	ldrb	r3, [r3, #0]
 80178b8:	2b02      	cmp	r3, #2
 80178ba:	d11b      	bne.n	80178f4 <interrupt_record+0x70>
		r_data[0] = turning.velocity;
 80178bc:	4ba7      	ldr	r3, [pc, #668]	; (8017b5c <interrupt_record+0x2d8>)
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 80178c2:	4ba7      	ldr	r3, [pc, #668]	; (8017b60 <interrupt_record+0x2dc>)
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	607b      	str	r3, [r7, #4]
		r_data[2] = straight.velocity;
 80178c8:	4ba6      	ldr	r3, [pc, #664]	; (8017b64 <interrupt_record+0x2e0>)
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	60bb      	str	r3, [r7, #8]
		r_data[3] = (fusion_speedR + fusion_speedL) / 2;
 80178ce:	4ba6      	ldr	r3, [pc, #664]	; (8017b68 <interrupt_record+0x2e4>)
 80178d0:	ed93 7a00 	vldr	s14, [r3]
 80178d4:	4ba5      	ldr	r3, [pc, #660]	; (8017b6c <interrupt_record+0x2e8>)
 80178d6:	edd3 7a00 	vldr	s15, [r3]
 80178da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80178de:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80178e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80178e6:	edc7 7a03 	vstr	s15, [r7, #12]
				record_data(r_data, 4);
 80178ea:	463b      	mov	r3, r7
 80178ec:	2104      	movs	r1, #4
 80178ee:	4618      	mov	r0, r3
 80178f0:	f7ff fefe 	bl	80176f0 <record_data>
		}
	if (record_mode == 3) {
 80178f4:	4b94      	ldr	r3, [pc, #592]	; (8017b48 <interrupt_record+0x2c4>)
 80178f6:	781b      	ldrb	r3, [r3, #0]
 80178f8:	2b03      	cmp	r3, #3
 80178fa:	d126      	bne.n	801794a <interrupt_record+0xc6>
			r_data[0] = straight.velocity;
 80178fc:	4b99      	ldr	r3, [pc, #612]	; (8017b64 <interrupt_record+0x2e0>)
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	603b      	str	r3, [r7, #0]
			r_data[1] = straight.displacement;
 8017902:	4b98      	ldr	r3, [pc, #608]	; (8017b64 <interrupt_record+0x2e0>)
 8017904:	689b      	ldr	r3, [r3, #8]
 8017906:	607b      	str	r3, [r7, #4]
			r_data[2] = (fusion_speedR + fusion_speedL) / 2;
 8017908:	4b97      	ldr	r3, [pc, #604]	; (8017b68 <interrupt_record+0x2e4>)
 801790a:	ed93 7a00 	vldr	s14, [r3]
 801790e:	4b97      	ldr	r3, [pc, #604]	; (8017b6c <interrupt_record+0x2e8>)
 8017910:	edd3 7a00 	vldr	s15, [r3]
 8017914:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017918:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801791c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017920:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 8017924:	4b92      	ldr	r3, [pc, #584]	; (8017b70 <interrupt_record+0x2ec>)
 8017926:	ed93 7a00 	vldr	s14, [r3]
 801792a:	4b92      	ldr	r3, [pc, #584]	; (8017b74 <interrupt_record+0x2f0>)
 801792c:	edd3 7a00 	vldr	s15, [r3]
 8017930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017934:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017938:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801793c:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8017940:	463b      	mov	r3, r7
 8017942:	2104      	movs	r1, #4
 8017944:	4618      	mov	r0, r3
 8017946:	f7ff fed3 	bl	80176f0 <record_data>
		}
	if (record_mode == 4) { //距離の比較
 801794a:	4b7f      	ldr	r3, [pc, #508]	; (8017b48 <interrupt_record+0x2c4>)
 801794c:	781b      	ldrb	r3, [r3, #0]
 801794e:	2b04      	cmp	r3, #4
 8017950:	d126      	bne.n	80179a0 <interrupt_record+0x11c>
			r_data[0] = straight.displacement;
 8017952:	4b84      	ldr	r3, [pc, #528]	; (8017b64 <interrupt_record+0x2e0>)
 8017954:	689b      	ldr	r3, [r3, #8]
 8017956:	603b      	str	r3, [r7, #0]
			r_data[1] = (E_distanceR + E_distanceL) / 2;
 8017958:	4b7e      	ldr	r3, [pc, #504]	; (8017b54 <interrupt_record+0x2d0>)
 801795a:	ed93 7a00 	vldr	s14, [r3]
 801795e:	4b7e      	ldr	r3, [pc, #504]	; (8017b58 <interrupt_record+0x2d4>)
 8017960:	edd3 7a00 	vldr	s15, [r3]
 8017964:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017968:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801796c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017970:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = gf_distance;
 8017974:	4b80      	ldr	r3, [pc, #512]	; (8017b78 <interrupt_record+0x2f4>)
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	60bb      	str	r3, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 801797a:	4b7d      	ldr	r3, [pc, #500]	; (8017b70 <interrupt_record+0x2ec>)
 801797c:	ed93 7a00 	vldr	s14, [r3]
 8017980:	4b7c      	ldr	r3, [pc, #496]	; (8017b74 <interrupt_record+0x2f0>)
 8017982:	edd3 7a00 	vldr	s15, [r3]
 8017986:	ee37 7a27 	vadd.f32	s14, s14, s15
 801798a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801798e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017992:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8017996:	463b      	mov	r3, r7
 8017998:	2104      	movs	r1, #4
 801799a:	4618      	mov	r0, r3
 801799c:	f7ff fea8 	bl	80176f0 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 80179a0:	4b69      	ldr	r3, [pc, #420]	; (8017b48 <interrupt_record+0x2c4>)
 80179a2:	781b      	ldrb	r3, [r3, #0]
 80179a4:	2b05      	cmp	r3, #5
 80179a6:	d110      	bne.n	80179ca <interrupt_record+0x146>
			r_data[0] = straight.displacement;
 80179a8:	4b6e      	ldr	r3, [pc, #440]	; (8017b64 <interrupt_record+0x2e0>)
 80179aa:	689b      	ldr	r3, [r3, #8]
 80179ac:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 80179ae:	4b69      	ldr	r3, [pc, #420]	; (8017b54 <interrupt_record+0x2d0>)
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 80179b4:	4b68      	ldr	r3, [pc, #416]	; (8017b58 <interrupt_record+0x2d4>)
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 80179ba:	4b6f      	ldr	r3, [pc, #444]	; (8017b78 <interrupt_record+0x2f4>)
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80179c0:	463b      	mov	r3, r7
 80179c2:	2104      	movs	r1, #4
 80179c4:	4618      	mov	r0, r3
 80179c6:	f7ff fe93 	bl	80176f0 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 80179ca:	4b5f      	ldr	r3, [pc, #380]	; (8017b48 <interrupt_record+0x2c4>)
 80179cc:	781b      	ldrb	r3, [r3, #0]
 80179ce:	2b05      	cmp	r3, #5
 80179d0:	d110      	bne.n	80179f4 <interrupt_record+0x170>
			r_data[0] = g_V_L;
 80179d2:	4b6a      	ldr	r3, [pc, #424]	; (8017b7c <interrupt_record+0x2f8>)
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 80179d8:	4b5e      	ldr	r3, [pc, #376]	; (8017b54 <interrupt_record+0x2d0>)
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 80179de:	4b5e      	ldr	r3, [pc, #376]	; (8017b58 <interrupt_record+0x2d4>)
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 80179e4:	4b64      	ldr	r3, [pc, #400]	; (8017b78 <interrupt_record+0x2f4>)
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80179ea:	463b      	mov	r3, r7
 80179ec:	2104      	movs	r1, #4
 80179ee:	4618      	mov	r0, r3
 80179f0:	f7ff fe7e 	bl	80176f0 <record_data>
		}
	if (record_mode == 6) { //距離の比較
 80179f4:	4b54      	ldr	r3, [pc, #336]	; (8017b48 <interrupt_record+0x2c4>)
 80179f6:	781b      	ldrb	r3, [r3, #0]
 80179f8:	2b06      	cmp	r3, #6
 80179fa:	d110      	bne.n	8017a1e <interrupt_record+0x19a>
				r_data[0] = straight.velocity;
 80179fc:	4b59      	ldr	r3, [pc, #356]	; (8017b64 <interrupt_record+0x2e0>)
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	603b      	str	r3, [r7, #0]
				r_data[1] = E_lpf_speedL;
 8017a02:	4b5f      	ldr	r3, [pc, #380]	; (8017b80 <interrupt_record+0x2fc>)
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	607b      	str	r3, [r7, #4]
				r_data[2] = E_lpf_speedR;
 8017a08:	4b5e      	ldr	r3, [pc, #376]	; (8017b84 <interrupt_record+0x300>)
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_speed;
 8017a0e:	4b5e      	ldr	r3, [pc, #376]	; (8017b88 <interrupt_record+0x304>)
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8017a14:	463b      	mov	r3, r7
 8017a16:	2104      	movs	r1, #4
 8017a18:	4618      	mov	r0, r3
 8017a1a:	f7ff fe69 	bl	80176f0 <record_data>
			}
	if (record_mode == 7) {
 8017a1e:	4b4a      	ldr	r3, [pc, #296]	; (8017b48 <interrupt_record+0x2c4>)
 8017a20:	781b      	ldrb	r3, [r3, #0]
 8017a22:	2b07      	cmp	r3, #7
 8017a24:	d125      	bne.n	8017a72 <interrupt_record+0x1ee>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 8017a26:	4b59      	ldr	r3, [pc, #356]	; (8017b8c <interrupt_record+0x308>)
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	ee07 3a90 	vmov	s15, r3
 8017a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a32:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff[SENSOR_LEFT];
 8017a36:	4b56      	ldr	r3, [pc, #344]	; (8017b90 <interrupt_record+0x30c>)
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	ee07 3a90 	vmov	s15, r3
 8017a3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a42:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_RIGHT][0];
 8017a46:	4b51      	ldr	r3, [pc, #324]	; (8017b8c <interrupt_record+0x308>)
 8017a48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8017a4c:	ee07 3a90 	vmov	s15, r3
 8017a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a54:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff[SENSOR_RIGHT];
 8017a58:	4b4d      	ldr	r3, [pc, #308]	; (8017b90 <interrupt_record+0x30c>)
 8017a5a:	691b      	ldr	r3, [r3, #16]
 8017a5c:	ee07 3a90 	vmov	s15, r3
 8017a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a64:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8017a68:	463b      	mov	r3, r7
 8017a6a:	2104      	movs	r1, #4
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	f7ff fe3f 	bl	80176f0 <record_data>
		}
	if (record_mode == 8) {
 8017a72:	4b35      	ldr	r3, [pc, #212]	; (8017b48 <interrupt_record+0x2c4>)
 8017a74:	781b      	ldrb	r3, [r3, #0]
 8017a76:	2b08      	cmp	r3, #8
 8017a78:	d125      	bne.n	8017ac6 <interrupt_record+0x242>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8017a7a:	4b44      	ldr	r3, [pc, #272]	; (8017b8c <interrupt_record+0x308>)
 8017a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a7e:	ee07 3a90 	vmov	s15, r3
 8017a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a86:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_LEFT];
 8017a8a:	4b42      	ldr	r3, [pc, #264]	; (8017b94 <interrupt_record+0x310>)
 8017a8c:	685b      	ldr	r3, [r3, #4]
 8017a8e:	ee07 3a90 	vmov	s15, r3
 8017a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a96:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8017a9a:	4b3c      	ldr	r3, [pc, #240]	; (8017b8c <interrupt_record+0x308>)
 8017a9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017aa0:	ee07 3a90 	vmov	s15, r3
 8017aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017aa8:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT];
 8017aac:	4b39      	ldr	r3, [pc, #228]	; (8017b94 <interrupt_record+0x310>)
 8017aae:	68db      	ldr	r3, [r3, #12]
 8017ab0:	ee07 3a90 	vmov	s15, r3
 8017ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ab8:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8017abc:	463b      	mov	r3, r7
 8017abe:	2104      	movs	r1, #4
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	f7ff fe15 	bl	80176f0 <record_data>
		}
	if (record_mode == 9) { //90
 8017ac6:	4b20      	ldr	r3, [pc, #128]	; (8017b48 <interrupt_record+0x2c4>)
 8017ac8:	781b      	ldrb	r3, [r3, #0]
 8017aca:	2b09      	cmp	r3, #9
 8017acc:	d11b      	bne.n	8017b06 <interrupt_record+0x282>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 8017ace:	4b2f      	ldr	r3, [pc, #188]	; (8017b8c <interrupt_record+0x308>)
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	ee07 3a90 	vmov	s15, r3
 8017ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ada:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_RIGHT][0];
 8017ade:	4b2b      	ldr	r3, [pc, #172]	; (8017b8c <interrupt_record+0x308>)
 8017ae0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8017ae4:	ee07 3a90 	vmov	s15, r3
 8017ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017aec:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 8017af0:	4b29      	ldr	r3, [pc, #164]	; (8017b98 <interrupt_record+0x314>)
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 8017af6:	4b29      	ldr	r3, [pc, #164]	; (8017b9c <interrupt_record+0x318>)
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8017afc:	463b      	mov	r3, r7
 8017afe:	2104      	movs	r1, #4
 8017b00:	4618      	mov	r0, r3
 8017b02:	f7ff fdf5 	bl	80176f0 <record_data>
		}
	if (record_mode == 10) { //90
 8017b06:	4b10      	ldr	r3, [pc, #64]	; (8017b48 <interrupt_record+0x2c4>)
 8017b08:	781b      	ldrb	r3, [r3, #0]
 8017b0a:	2b0a      	cmp	r3, #10
 8017b0c:	d148      	bne.n	8017ba0 <interrupt_record+0x31c>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8017b0e:	4b1f      	ldr	r3, [pc, #124]	; (8017b8c <interrupt_record+0x308>)
 8017b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b12:	ee07 3a90 	vmov	s15, r3
 8017b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b1a:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8017b1e:	4b1b      	ldr	r3, [pc, #108]	; (8017b8c <interrupt_record+0x308>)
 8017b20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017b24:	ee07 3a90 	vmov	s15, r3
 8017b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b2c:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 8017b30:	4b19      	ldr	r3, [pc, #100]	; (8017b98 <interrupt_record+0x314>)
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 8017b36:	4b19      	ldr	r3, [pc, #100]	; (8017b9c <interrupt_record+0x318>)
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8017b3c:	463b      	mov	r3, r7
 8017b3e:	2104      	movs	r1, #4
 8017b40:	4618      	mov	r0, r3
 8017b42:	f7ff fdd5 	bl	80176f0 <record_data>
 8017b46:	e02b      	b.n	8017ba0 <interrupt_record+0x31c>
 8017b48:	2000f284 	.word	0x2000f284
 8017b4c:	2000022c 	.word	0x2000022c
 8017b50:	20000228 	.word	0x20000228
 8017b54:	20000224 	.word	0x20000224
 8017b58:	20000220 	.word	0x20000220
 8017b5c:	200004e8 	.word	0x200004e8
 8017b60:	2000026c 	.word	0x2000026c
 8017b64:	200004dc 	.word	0x200004dc
 8017b68:	2000025c 	.word	0x2000025c
 8017b6c:	20000258 	.word	0x20000258
 8017b70:	20000254 	.word	0x20000254
 8017b74:	20000250 	.word	0x20000250
 8017b78:	20000280 	.word	0x20000280
 8017b7c:	20000538 	.word	0x20000538
 8017b80:	20000238 	.word	0x20000238
 8017b84:	2000023c 	.word	0x2000023c
 8017b88:	2000027c 	.word	0x2000027c
 8017b8c:	200002bc 	.word	0x200002bc
 8017b90:	2000044c 	.word	0x2000044c
 8017b94:	20000460 	.word	0x20000460
 8017b98:	200005ec 	.word	0x200005ec
 8017b9c:	200005e8 	.word	0x200005e8
		}
	if (record_mode == 11) { //距離の比較
 8017ba0:	4b16      	ldr	r3, [pc, #88]	; (8017bfc <interrupt_record+0x378>)
 8017ba2:	781b      	ldrb	r3, [r3, #0]
 8017ba4:	2b0b      	cmp	r3, #11
 8017ba6:	d110      	bne.n	8017bca <interrupt_record+0x346>
				r_data[0] = E_speedL;
 8017ba8:	4b15      	ldr	r3, [pc, #84]	; (8017c00 <interrupt_record+0x37c>)
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	603b      	str	r3, [r7, #0]
				r_data[1] = encoder_L;
 8017bae:	4b15      	ldr	r3, [pc, #84]	; (8017c04 <interrupt_record+0x380>)
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	607b      	str	r3, [r7, #4]
				r_data[2] = E_speedR;
 8017bb4:	4b14      	ldr	r3, [pc, #80]	; (8017c08 <interrupt_record+0x384>)
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	60bb      	str	r3, [r7, #8]
				r_data[3] = encoder_R;
 8017bba:	4b14      	ldr	r3, [pc, #80]	; (8017c0c <interrupt_record+0x388>)
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8017bc0:	463b      	mov	r3, r7
 8017bc2:	2104      	movs	r1, #4
 8017bc4:	4618      	mov	r0, r3
 8017bc6:	f7ff fd93 	bl	80176f0 <record_data>
			}
	if (record_mode == 12) {
 8017bca:	4b0c      	ldr	r3, [pc, #48]	; (8017bfc <interrupt_record+0x378>)
 8017bcc:	781b      	ldrb	r3, [r3, #0]
 8017bce:	2b0c      	cmp	r3, #12
 8017bd0:	d110      	bne.n	8017bf4 <interrupt_record+0x370>
		r_data[0] = turning.velocity;
 8017bd2:	4b0f      	ldr	r3, [pc, #60]	; (8017c10 <interrupt_record+0x38c>)
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 8017bd8:	4b0e      	ldr	r3, [pc, #56]	; (8017c14 <interrupt_record+0x390>)
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	607b      	str	r3, [r7, #4]
		r_data[2] = g_V_L;
 8017bde:	4b0e      	ldr	r3, [pc, #56]	; (8017c18 <interrupt_record+0x394>)
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	60bb      	str	r3, [r7, #8]
		r_data[3] = g_V_R;
 8017be4:	4b0d      	ldr	r3, [pc, #52]	; (8017c1c <interrupt_record+0x398>)
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8017bea:	463b      	mov	r3, r7
 8017bec:	2104      	movs	r1, #4
 8017bee:	4618      	mov	r0, r3
 8017bf0:	f7ff fd7e 	bl	80176f0 <record_data>
		r_data[3] = g_V_L;
		record_data(r_data, 4);
	}
*/

}
 8017bf4:	bf00      	nop
 8017bf6:	3710      	adds	r7, #16
 8017bf8:	46bd      	mov	sp, r7
 8017bfa:	bd80      	pop	{r7, pc}
 8017bfc:	2000f284 	.word	0x2000f284
 8017c00:	20000228 	.word	0x20000228
 8017c04:	200006e8 	.word	0x200006e8
 8017c08:	2000022c 	.word	0x2000022c
 8017c0c:	200006e4 	.word	0x200006e4
 8017c10:	200004e8 	.word	0x200004e8
 8017c14:	2000026c 	.word	0x2000026c
 8017c18:	20000538 	.word	0x20000538
 8017c1c:	2000053c 	.word	0x2000053c

08017c20 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8017c20:	b580      	push	{r7, lr}
 8017c22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8017c24:	4b1b      	ldr	r3, [pc, #108]	; (8017c94 <MX_SPI1_Init+0x74>)
 8017c26:	4a1c      	ldr	r2, [pc, #112]	; (8017c98 <MX_SPI1_Init+0x78>)
 8017c28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8017c2a:	4b1a      	ldr	r3, [pc, #104]	; (8017c94 <MX_SPI1_Init+0x74>)
 8017c2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017c30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8017c32:	4b18      	ldr	r3, [pc, #96]	; (8017c94 <MX_SPI1_Init+0x74>)
 8017c34:	2200      	movs	r2, #0
 8017c36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8017c38:	4b16      	ldr	r3, [pc, #88]	; (8017c94 <MX_SPI1_Init+0x74>)
 8017c3a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8017c3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017c40:	4b14      	ldr	r3, [pc, #80]	; (8017c94 <MX_SPI1_Init+0x74>)
 8017c42:	2200      	movs	r2, #0
 8017c44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8017c46:	4b13      	ldr	r3, [pc, #76]	; (8017c94 <MX_SPI1_Init+0x74>)
 8017c48:	2200      	movs	r2, #0
 8017c4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8017c4c:	4b11      	ldr	r3, [pc, #68]	; (8017c94 <MX_SPI1_Init+0x74>)
 8017c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017c52:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8017c54:	4b0f      	ldr	r3, [pc, #60]	; (8017c94 <MX_SPI1_Init+0x74>)
 8017c56:	2210      	movs	r2, #16
 8017c58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017c5a:	4b0e      	ldr	r3, [pc, #56]	; (8017c94 <MX_SPI1_Init+0x74>)
 8017c5c:	2200      	movs	r2, #0
 8017c5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8017c60:	4b0c      	ldr	r3, [pc, #48]	; (8017c94 <MX_SPI1_Init+0x74>)
 8017c62:	2200      	movs	r2, #0
 8017c64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017c66:	4b0b      	ldr	r3, [pc, #44]	; (8017c94 <MX_SPI1_Init+0x74>)
 8017c68:	2200      	movs	r2, #0
 8017c6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8017c6c:	4b09      	ldr	r3, [pc, #36]	; (8017c94 <MX_SPI1_Init+0x74>)
 8017c6e:	2207      	movs	r2, #7
 8017c70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8017c72:	4b08      	ldr	r3, [pc, #32]	; (8017c94 <MX_SPI1_Init+0x74>)
 8017c74:	2200      	movs	r2, #0
 8017c76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8017c78:	4b06      	ldr	r3, [pc, #24]	; (8017c94 <MX_SPI1_Init+0x74>)
 8017c7a:	2208      	movs	r2, #8
 8017c7c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8017c7e:	4805      	ldr	r0, [pc, #20]	; (8017c94 <MX_SPI1_Init+0x74>)
 8017c80:	f005 ff2c 	bl	801dadc <HAL_SPI_Init>
 8017c84:	4603      	mov	r3, r0
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d001      	beq.n	8017c8e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8017c8a:	f7f2 fe1e 	bl	800a8ca <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8017c8e:	bf00      	nop
 8017c90:	bd80      	pop	{r7, pc}
 8017c92:	bf00      	nop
 8017c94:	2000f294 	.word	0x2000f294
 8017c98:	40013000 	.word	0x40013000

08017c9c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8017c9c:	b580      	push	{r7, lr}
 8017c9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8017ca0:	4b1b      	ldr	r3, [pc, #108]	; (8017d10 <MX_SPI3_Init+0x74>)
 8017ca2:	4a1c      	ldr	r2, [pc, #112]	; (8017d14 <MX_SPI3_Init+0x78>)
 8017ca4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8017ca6:	4b1a      	ldr	r3, [pc, #104]	; (8017d10 <MX_SPI3_Init+0x74>)
 8017ca8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017cac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8017cae:	4b18      	ldr	r3, [pc, #96]	; (8017d10 <MX_SPI3_Init+0x74>)
 8017cb0:	2200      	movs	r2, #0
 8017cb2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8017cb4:	4b16      	ldr	r3, [pc, #88]	; (8017d10 <MX_SPI3_Init+0x74>)
 8017cb6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8017cba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017cbc:	4b14      	ldr	r3, [pc, #80]	; (8017d10 <MX_SPI3_Init+0x74>)
 8017cbe:	2200      	movs	r2, #0
 8017cc0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8017cc2:	4b13      	ldr	r3, [pc, #76]	; (8017d10 <MX_SPI3_Init+0x74>)
 8017cc4:	2201      	movs	r2, #1
 8017cc6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8017cc8:	4b11      	ldr	r3, [pc, #68]	; (8017d10 <MX_SPI3_Init+0x74>)
 8017cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017cce:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8017cd0:	4b0f      	ldr	r3, [pc, #60]	; (8017d10 <MX_SPI3_Init+0x74>)
 8017cd2:	2208      	movs	r2, #8
 8017cd4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017cd6:	4b0e      	ldr	r3, [pc, #56]	; (8017d10 <MX_SPI3_Init+0x74>)
 8017cd8:	2200      	movs	r2, #0
 8017cda:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8017cdc:	4b0c      	ldr	r3, [pc, #48]	; (8017d10 <MX_SPI3_Init+0x74>)
 8017cde:	2200      	movs	r2, #0
 8017ce0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017ce2:	4b0b      	ldr	r3, [pc, #44]	; (8017d10 <MX_SPI3_Init+0x74>)
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8017ce8:	4b09      	ldr	r3, [pc, #36]	; (8017d10 <MX_SPI3_Init+0x74>)
 8017cea:	2207      	movs	r2, #7
 8017cec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8017cee:	4b08      	ldr	r3, [pc, #32]	; (8017d10 <MX_SPI3_Init+0x74>)
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8017cf4:	4b06      	ldr	r3, [pc, #24]	; (8017d10 <MX_SPI3_Init+0x74>)
 8017cf6:	2200      	movs	r2, #0
 8017cf8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8017cfa:	4805      	ldr	r0, [pc, #20]	; (8017d10 <MX_SPI3_Init+0x74>)
 8017cfc:	f005 feee 	bl	801dadc <HAL_SPI_Init>
 8017d00:	4603      	mov	r3, r0
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d001      	beq.n	8017d0a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8017d06:	f7f2 fde0 	bl	800a8ca <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8017d0a:	bf00      	nop
 8017d0c:	bd80      	pop	{r7, pc}
 8017d0e:	bf00      	nop
 8017d10:	2000f2f8 	.word	0x2000f2f8
 8017d14:	40003c00 	.word	0x40003c00

08017d18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8017d18:	b580      	push	{r7, lr}
 8017d1a:	b08c      	sub	sp, #48	; 0x30
 8017d1c:	af00      	add	r7, sp, #0
 8017d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017d20:	f107 031c 	add.w	r3, r7, #28
 8017d24:	2200      	movs	r2, #0
 8017d26:	601a      	str	r2, [r3, #0]
 8017d28:	605a      	str	r2, [r3, #4]
 8017d2a:	609a      	str	r2, [r3, #8]
 8017d2c:	60da      	str	r2, [r3, #12]
 8017d2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	4a3d      	ldr	r2, [pc, #244]	; (8017e2c <HAL_SPI_MspInit+0x114>)
 8017d36:	4293      	cmp	r3, r2
 8017d38:	d129      	bne.n	8017d8e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8017d3a:	4b3d      	ldr	r3, [pc, #244]	; (8017e30 <HAL_SPI_MspInit+0x118>)
 8017d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017d3e:	4a3c      	ldr	r2, [pc, #240]	; (8017e30 <HAL_SPI_MspInit+0x118>)
 8017d40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017d44:	6613      	str	r3, [r2, #96]	; 0x60
 8017d46:	4b3a      	ldr	r3, [pc, #232]	; (8017e30 <HAL_SPI_MspInit+0x118>)
 8017d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017d4e:	61bb      	str	r3, [r7, #24]
 8017d50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017d52:	4b37      	ldr	r3, [pc, #220]	; (8017e30 <HAL_SPI_MspInit+0x118>)
 8017d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017d56:	4a36      	ldr	r2, [pc, #216]	; (8017e30 <HAL_SPI_MspInit+0x118>)
 8017d58:	f043 0301 	orr.w	r3, r3, #1
 8017d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017d5e:	4b34      	ldr	r3, [pc, #208]	; (8017e30 <HAL_SPI_MspInit+0x118>)
 8017d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017d62:	f003 0301 	and.w	r3, r3, #1
 8017d66:	617b      	str	r3, [r7, #20]
 8017d68:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8017d6a:	23e0      	movs	r3, #224	; 0xe0
 8017d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017d6e:	2302      	movs	r3, #2
 8017d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017d72:	2300      	movs	r3, #0
 8017d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017d76:	2300      	movs	r3, #0
 8017d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8017d7a:	2305      	movs	r3, #5
 8017d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017d7e:	f107 031c 	add.w	r3, r7, #28
 8017d82:	4619      	mov	r1, r3
 8017d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017d88:	f004 fcee 	bl	801c768 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8017d8c:	e049      	b.n	8017e22 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	4a28      	ldr	r2, [pc, #160]	; (8017e34 <HAL_SPI_MspInit+0x11c>)
 8017d94:	4293      	cmp	r3, r2
 8017d96:	d144      	bne.n	8017e22 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8017d98:	4b25      	ldr	r3, [pc, #148]	; (8017e30 <HAL_SPI_MspInit+0x118>)
 8017d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017d9c:	4a24      	ldr	r2, [pc, #144]	; (8017e30 <HAL_SPI_MspInit+0x118>)
 8017d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017da2:	6593      	str	r3, [r2, #88]	; 0x58
 8017da4:	4b22      	ldr	r3, [pc, #136]	; (8017e30 <HAL_SPI_MspInit+0x118>)
 8017da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017dac:	613b      	str	r3, [r7, #16]
 8017dae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8017db0:	4b1f      	ldr	r3, [pc, #124]	; (8017e30 <HAL_SPI_MspInit+0x118>)
 8017db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017db4:	4a1e      	ldr	r2, [pc, #120]	; (8017e30 <HAL_SPI_MspInit+0x118>)
 8017db6:	f043 0304 	orr.w	r3, r3, #4
 8017dba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017dbc:	4b1c      	ldr	r3, [pc, #112]	; (8017e30 <HAL_SPI_MspInit+0x118>)
 8017dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017dc0:	f003 0304 	and.w	r3, r3, #4
 8017dc4:	60fb      	str	r3, [r7, #12]
 8017dc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017dc8:	4b19      	ldr	r3, [pc, #100]	; (8017e30 <HAL_SPI_MspInit+0x118>)
 8017dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017dcc:	4a18      	ldr	r2, [pc, #96]	; (8017e30 <HAL_SPI_MspInit+0x118>)
 8017dce:	f043 0302 	orr.w	r3, r3, #2
 8017dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017dd4:	4b16      	ldr	r3, [pc, #88]	; (8017e30 <HAL_SPI_MspInit+0x118>)
 8017dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017dd8:	f003 0302 	and.w	r3, r3, #2
 8017ddc:	60bb      	str	r3, [r7, #8]
 8017dde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8017de0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8017de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017de6:	2302      	movs	r3, #2
 8017de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017dea:	2300      	movs	r3, #0
 8017dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017dee:	2300      	movs	r3, #0
 8017df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8017df2:	2306      	movs	r3, #6
 8017df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017df6:	f107 031c 	add.w	r3, r7, #28
 8017dfa:	4619      	mov	r1, r3
 8017dfc:	480e      	ldr	r0, [pc, #56]	; (8017e38 <HAL_SPI_MspInit+0x120>)
 8017dfe:	f004 fcb3 	bl	801c768 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8017e02:	2320      	movs	r3, #32
 8017e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017e06:	2302      	movs	r3, #2
 8017e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017e0e:	2300      	movs	r3, #0
 8017e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8017e12:	2306      	movs	r3, #6
 8017e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017e16:	f107 031c 	add.w	r3, r7, #28
 8017e1a:	4619      	mov	r1, r3
 8017e1c:	4807      	ldr	r0, [pc, #28]	; (8017e3c <HAL_SPI_MspInit+0x124>)
 8017e1e:	f004 fca3 	bl	801c768 <HAL_GPIO_Init>
}
 8017e22:	bf00      	nop
 8017e24:	3730      	adds	r7, #48	; 0x30
 8017e26:	46bd      	mov	sp, r7
 8017e28:	bd80      	pop	{r7, pc}
 8017e2a:	bf00      	nop
 8017e2c:	40013000 	.word	0x40013000
 8017e30:	40021000 	.word	0x40021000
 8017e34:	40003c00 	.word	0x40003c00
 8017e38:	48000800 	.word	0x48000800
 8017e3c:	48000400 	.word	0x48000400

08017e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017e40:	b580      	push	{r7, lr}
 8017e42:	b082      	sub	sp, #8
 8017e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017e46:	4b0f      	ldr	r3, [pc, #60]	; (8017e84 <HAL_MspInit+0x44>)
 8017e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017e4a:	4a0e      	ldr	r2, [pc, #56]	; (8017e84 <HAL_MspInit+0x44>)
 8017e4c:	f043 0301 	orr.w	r3, r3, #1
 8017e50:	6613      	str	r3, [r2, #96]	; 0x60
 8017e52:	4b0c      	ldr	r3, [pc, #48]	; (8017e84 <HAL_MspInit+0x44>)
 8017e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017e56:	f003 0301 	and.w	r3, r3, #1
 8017e5a:	607b      	str	r3, [r7, #4]
 8017e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8017e5e:	4b09      	ldr	r3, [pc, #36]	; (8017e84 <HAL_MspInit+0x44>)
 8017e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017e62:	4a08      	ldr	r2, [pc, #32]	; (8017e84 <HAL_MspInit+0x44>)
 8017e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017e68:	6593      	str	r3, [r2, #88]	; 0x58
 8017e6a:	4b06      	ldr	r3, [pc, #24]	; (8017e84 <HAL_MspInit+0x44>)
 8017e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017e72:	603b      	str	r3, [r7, #0]
 8017e74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8017e76:	f004 feb5 	bl	801cbe4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8017e7a:	bf00      	nop
 8017e7c:	3708      	adds	r7, #8
 8017e7e:	46bd      	mov	sp, r7
 8017e80:	bd80      	pop	{r7, pc}
 8017e82:	bf00      	nop
 8017e84:	40021000 	.word	0x40021000

08017e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8017e88:	b480      	push	{r7}
 8017e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8017e8c:	e7fe      	b.n	8017e8c <NMI_Handler+0x4>

08017e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8017e8e:	b480      	push	{r7}
 8017e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8017e92:	e7fe      	b.n	8017e92 <HardFault_Handler+0x4>

08017e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8017e94:	b480      	push	{r7}
 8017e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017e98:	e7fe      	b.n	8017e98 <MemManage_Handler+0x4>

08017e9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8017e9a:	b480      	push	{r7}
 8017e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8017e9e:	e7fe      	b.n	8017e9e <BusFault_Handler+0x4>

08017ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8017ea0:	b480      	push	{r7}
 8017ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8017ea4:	e7fe      	b.n	8017ea4 <UsageFault_Handler+0x4>

08017ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8017ea6:	b480      	push	{r7}
 8017ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8017eaa:	bf00      	nop
 8017eac:	46bd      	mov	sp, r7
 8017eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb2:	4770      	bx	lr

08017eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8017eb4:	b480      	push	{r7}
 8017eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8017eb8:	bf00      	nop
 8017eba:	46bd      	mov	sp, r7
 8017ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec0:	4770      	bx	lr

08017ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8017ec2:	b480      	push	{r7}
 8017ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8017ec6:	bf00      	nop
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ece:	4770      	bx	lr

08017ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8017ed0:	b580      	push	{r7, lr}
 8017ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8017ed4:	f001 fbf0 	bl	80196b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8017ed8:	bf00      	nop
 8017eda:	bd80      	pop	{r7, pc}

08017edc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8017edc:	b580      	push	{r7, lr}
 8017ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8017ee0:	4802      	ldr	r0, [pc, #8]	; (8017eec <DMA1_Channel1_IRQHandler+0x10>)
 8017ee2:	f004 f889 	bl	801bff8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8017ee6:	bf00      	nop
 8017ee8:	bd80      	pop	{r7, pc}
 8017eea:	bf00      	nop
 8017eec:	200007ac 	.word	0x200007ac

08017ef0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8017ef0:	b580      	push	{r7, lr}
 8017ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8017ef4:	4802      	ldr	r0, [pc, #8]	; (8017f00 <ADC1_2_IRQHandler+0x10>)
 8017ef6:	f002 fb8f 	bl	801a618 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
//  pl_callback_getSensor();
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8017efa:	bf00      	nop
 8017efc:	bd80      	pop	{r7, pc}
 8017efe:	bf00      	nop
 8017f00:	20000740 	.word	0x20000740

08017f04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8017f04:	b580      	push	{r7, lr}
 8017f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8017f08:	480d      	ldr	r0, [pc, #52]	; (8017f40 <TIM6_DAC_IRQHandler+0x3c>)
 8017f0a:	f006 ffc7 	bl	801ee9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_timer();
 8017f0e:	f7f0 fddf 	bl	8008ad0 <interrupt_timer>
  interupt_calSensor();
 8017f12:	f7ea f917 	bl	8002144 <interupt_calSensor>
  ICM20602_DataUpdate();
 8017f16:	f7f0 fafd 	bl	8008514 <ICM20602_DataUpdate>
  interrupt_calGyro();
 8017f1a:	f7e9 ff09 	bl	8001d30 <interrupt_calGyro>
  AS5047_DataUpdate();
 8017f1e:	f7ef ffc9 	bl	8007eb4 <AS5047_DataUpdate>
  interupt_calEncoder();
 8017f22:	f7e9 f8b9 	bl	8001098 <interupt_calEncoder>
  interupt_calFusion();
 8017f26:	f7e9 fd0b 	bl	8001940 <interupt_calFusion>
  interrupt_WallCut();
 8017f2a:	f7ee ff2d 	bl	8006d88 <interrupt_WallCut>
  interupt_DriveMotor();
 8017f2e:	f7ea fa7b 	bl	8002428 <interupt_DriveMotor>

  interrupt_FailSafe();
 8017f32:	f7f2 fa1d 	bl	800a370 <interrupt_FailSafe>
  interrupt_record();
 8017f36:	f7ff fca5 	bl	8017884 <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8017f3a:	bf00      	nop
 8017f3c:	bd80      	pop	{r7, pc}
 8017f3e:	bf00      	nop
 8017f40:	2000f360 	.word	0x2000f360

08017f44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8017f44:	b480      	push	{r7}
 8017f46:	af00      	add	r7, sp, #0
	return 1;
 8017f48:	2301      	movs	r3, #1
}
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f52:	4770      	bx	lr

08017f54 <_kill>:

int _kill(int pid, int sig)
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b082      	sub	sp, #8
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	6078      	str	r0, [r7, #4]
 8017f5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8017f5e:	f008 fe71 	bl	8020c44 <__errno>
 8017f62:	4603      	mov	r3, r0
 8017f64:	2216      	movs	r2, #22
 8017f66:	601a      	str	r2, [r3, #0]
	return -1;
 8017f68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	3708      	adds	r7, #8
 8017f70:	46bd      	mov	sp, r7
 8017f72:	bd80      	pop	{r7, pc}

08017f74 <_exit>:

void _exit (int status)
{
 8017f74:	b580      	push	{r7, lr}
 8017f76:	b082      	sub	sp, #8
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8017f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8017f80:	6878      	ldr	r0, [r7, #4]
 8017f82:	f7ff ffe7 	bl	8017f54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8017f86:	e7fe      	b.n	8017f86 <_exit+0x12>

08017f88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8017f88:	b580      	push	{r7, lr}
 8017f8a:	b086      	sub	sp, #24
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	60f8      	str	r0, [r7, #12]
 8017f90:	60b9      	str	r1, [r7, #8]
 8017f92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017f94:	2300      	movs	r3, #0
 8017f96:	617b      	str	r3, [r7, #20]
 8017f98:	e00a      	b.n	8017fb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8017f9a:	f3af 8000 	nop.w
 8017f9e:	4601      	mov	r1, r0
 8017fa0:	68bb      	ldr	r3, [r7, #8]
 8017fa2:	1c5a      	adds	r2, r3, #1
 8017fa4:	60ba      	str	r2, [r7, #8]
 8017fa6:	b2ca      	uxtb	r2, r1
 8017fa8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017faa:	697b      	ldr	r3, [r7, #20]
 8017fac:	3301      	adds	r3, #1
 8017fae:	617b      	str	r3, [r7, #20]
 8017fb0:	697a      	ldr	r2, [r7, #20]
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	429a      	cmp	r2, r3
 8017fb6:	dbf0      	blt.n	8017f9a <_read+0x12>
	}

return len;
 8017fb8:	687b      	ldr	r3, [r7, #4]
}
 8017fba:	4618      	mov	r0, r3
 8017fbc:	3718      	adds	r7, #24
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	bd80      	pop	{r7, pc}
	...

08017fc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8017fc4:	b580      	push	{r7, lr}
 8017fc6:	b086      	sub	sp, #24
 8017fc8:	af00      	add	r7, sp, #0
 8017fca:	60f8      	str	r0, [r7, #12]
 8017fcc:	60b9      	str	r1, [r7, #8]
 8017fce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	617b      	str	r3, [r7, #20]
 8017fd4:	e00a      	b.n	8017fec <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 8017fd6:	68b9      	ldr	r1, [r7, #8]
 8017fd8:	1c4b      	adds	r3, r1, #1
 8017fda:	60bb      	str	r3, [r7, #8]
 8017fdc:	2301      	movs	r3, #1
 8017fde:	2201      	movs	r2, #1
 8017fe0:	4807      	ldr	r0, [pc, #28]	; (8018000 <_write+0x3c>)
 8017fe2:	f007 ffe5 	bl	801ffb0 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017fe6:	697b      	ldr	r3, [r7, #20]
 8017fe8:	3301      	adds	r3, #1
 8017fea:	617b      	str	r3, [r7, #20]
 8017fec:	697a      	ldr	r2, [r7, #20]
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	429a      	cmp	r2, r3
 8017ff2:	dbf0      	blt.n	8017fd6 <_write+0x12>
	}
	return len;
 8017ff4:	687b      	ldr	r3, [r7, #4]
}
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	3718      	adds	r7, #24
 8017ffa:	46bd      	mov	sp, r7
 8017ffc:	bd80      	pop	{r7, pc}
 8017ffe:	bf00      	nop
 8018000:	2000fd3c 	.word	0x2000fd3c

08018004 <_close>:

int _close(int file)
{
 8018004:	b480      	push	{r7}
 8018006:	b083      	sub	sp, #12
 8018008:	af00      	add	r7, sp, #0
 801800a:	6078      	str	r0, [r7, #4]
	return -1;
 801800c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018010:	4618      	mov	r0, r3
 8018012:	370c      	adds	r7, #12
 8018014:	46bd      	mov	sp, r7
 8018016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801801a:	4770      	bx	lr

0801801c <_fstat>:


int _fstat(int file, struct stat *st)
{
 801801c:	b480      	push	{r7}
 801801e:	b083      	sub	sp, #12
 8018020:	af00      	add	r7, sp, #0
 8018022:	6078      	str	r0, [r7, #4]
 8018024:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8018026:	683b      	ldr	r3, [r7, #0]
 8018028:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801802c:	605a      	str	r2, [r3, #4]
	return 0;
 801802e:	2300      	movs	r3, #0
}
 8018030:	4618      	mov	r0, r3
 8018032:	370c      	adds	r7, #12
 8018034:	46bd      	mov	sp, r7
 8018036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803a:	4770      	bx	lr

0801803c <_isatty>:

int _isatty(int file)
{
 801803c:	b480      	push	{r7}
 801803e:	b083      	sub	sp, #12
 8018040:	af00      	add	r7, sp, #0
 8018042:	6078      	str	r0, [r7, #4]
	return 1;
 8018044:	2301      	movs	r3, #1
}
 8018046:	4618      	mov	r0, r3
 8018048:	370c      	adds	r7, #12
 801804a:	46bd      	mov	sp, r7
 801804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018050:	4770      	bx	lr

08018052 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8018052:	b480      	push	{r7}
 8018054:	b085      	sub	sp, #20
 8018056:	af00      	add	r7, sp, #0
 8018058:	60f8      	str	r0, [r7, #12]
 801805a:	60b9      	str	r1, [r7, #8]
 801805c:	607a      	str	r2, [r7, #4]
	return 0;
 801805e:	2300      	movs	r3, #0
}
 8018060:	4618      	mov	r0, r3
 8018062:	3714      	adds	r7, #20
 8018064:	46bd      	mov	sp, r7
 8018066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801806a:	4770      	bx	lr

0801806c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801806c:	b580      	push	{r7, lr}
 801806e:	b086      	sub	sp, #24
 8018070:	af00      	add	r7, sp, #0
 8018072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8018074:	4a14      	ldr	r2, [pc, #80]	; (80180c8 <_sbrk+0x5c>)
 8018076:	4b15      	ldr	r3, [pc, #84]	; (80180cc <_sbrk+0x60>)
 8018078:	1ad3      	subs	r3, r2, r3
 801807a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801807c:	697b      	ldr	r3, [r7, #20]
 801807e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8018080:	4b13      	ldr	r3, [pc, #76]	; (80180d0 <_sbrk+0x64>)
 8018082:	681b      	ldr	r3, [r3, #0]
 8018084:	2b00      	cmp	r3, #0
 8018086:	d102      	bne.n	801808e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8018088:	4b11      	ldr	r3, [pc, #68]	; (80180d0 <_sbrk+0x64>)
 801808a:	4a12      	ldr	r2, [pc, #72]	; (80180d4 <_sbrk+0x68>)
 801808c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801808e:	4b10      	ldr	r3, [pc, #64]	; (80180d0 <_sbrk+0x64>)
 8018090:	681a      	ldr	r2, [r3, #0]
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	4413      	add	r3, r2
 8018096:	693a      	ldr	r2, [r7, #16]
 8018098:	429a      	cmp	r2, r3
 801809a:	d207      	bcs.n	80180ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 801809c:	f008 fdd2 	bl	8020c44 <__errno>
 80180a0:	4603      	mov	r3, r0
 80180a2:	220c      	movs	r2, #12
 80180a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80180a6:	f04f 33ff 	mov.w	r3, #4294967295
 80180aa:	e009      	b.n	80180c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80180ac:	4b08      	ldr	r3, [pc, #32]	; (80180d0 <_sbrk+0x64>)
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80180b2:	4b07      	ldr	r3, [pc, #28]	; (80180d0 <_sbrk+0x64>)
 80180b4:	681a      	ldr	r2, [r3, #0]
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	4413      	add	r3, r2
 80180ba:	4a05      	ldr	r2, [pc, #20]	; (80180d0 <_sbrk+0x64>)
 80180bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80180be:	68fb      	ldr	r3, [r7, #12]
}
 80180c0:	4618      	mov	r0, r3
 80180c2:	3718      	adds	r7, #24
 80180c4:	46bd      	mov	sp, r7
 80180c6:	bd80      	pop	{r7, pc}
 80180c8:	2001c000 	.word	0x2001c000
 80180cc:	00000400 	.word	0x00000400
 80180d0:	2000f35c 	.word	0x2000f35c
 80180d4:	2000fde0 	.word	0x2000fde0

080180d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80180d8:	b480      	push	{r7}
 80180da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80180dc:	4b06      	ldr	r3, [pc, #24]	; (80180f8 <SystemInit+0x20>)
 80180de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80180e2:	4a05      	ldr	r2, [pc, #20]	; (80180f8 <SystemInit+0x20>)
 80180e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80180e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80180ec:	bf00      	nop
 80180ee:	46bd      	mov	sp, r7
 80180f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f4:	4770      	bx	lr
 80180f6:	bf00      	nop
 80180f8:	e000ed00 	.word	0xe000ed00

080180fc <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80180fc:	b580      	push	{r7, lr}
 80180fe:	b084      	sub	sp, #16
 8018100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8018102:	1d3b      	adds	r3, r7, #4
 8018104:	2200      	movs	r2, #0
 8018106:	601a      	str	r2, [r3, #0]
 8018108:	605a      	str	r2, [r3, #4]
 801810a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 801810c:	4b14      	ldr	r3, [pc, #80]	; (8018160 <MX_TIM6_Init+0x64>)
 801810e:	4a15      	ldr	r2, [pc, #84]	; (8018164 <MX_TIM6_Init+0x68>)
 8018110:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 85-1;
 8018112:	4b13      	ldr	r3, [pc, #76]	; (8018160 <MX_TIM6_Init+0x64>)
 8018114:	2254      	movs	r2, #84	; 0x54
 8018116:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8018118:	4b11      	ldr	r3, [pc, #68]	; (8018160 <MX_TIM6_Init+0x64>)
 801811a:	2200      	movs	r2, #0
 801811c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 801811e:	4b10      	ldr	r3, [pc, #64]	; (8018160 <MX_TIM6_Init+0x64>)
 8018120:	f240 32e7 	movw	r2, #999	; 0x3e7
 8018124:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8018126:	4b0e      	ldr	r3, [pc, #56]	; (8018160 <MX_TIM6_Init+0x64>)
 8018128:	2200      	movs	r2, #0
 801812a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801812c:	480c      	ldr	r0, [pc, #48]	; (8018160 <MX_TIM6_Init+0x64>)
 801812e:	f006 fbed 	bl	801e90c <HAL_TIM_Base_Init>
 8018132:	4603      	mov	r3, r0
 8018134:	2b00      	cmp	r3, #0
 8018136:	d001      	beq.n	801813c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8018138:	f7f2 fbc7 	bl	800a8ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801813c:	2300      	movs	r3, #0
 801813e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8018140:	2300      	movs	r3, #0
 8018142:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8018144:	1d3b      	adds	r3, r7, #4
 8018146:	4619      	mov	r1, r3
 8018148:	4805      	ldr	r0, [pc, #20]	; (8018160 <MX_TIM6_Init+0x64>)
 801814a:	f007 fd5b 	bl	801fc04 <HAL_TIMEx_MasterConfigSynchronization>
 801814e:	4603      	mov	r3, r0
 8018150:	2b00      	cmp	r3, #0
 8018152:	d001      	beq.n	8018158 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8018154:	f7f2 fbb9 	bl	800a8ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8018158:	bf00      	nop
 801815a:	3710      	adds	r7, #16
 801815c:	46bd      	mov	sp, r7
 801815e:	bd80      	pop	{r7, pc}
 8018160:	2000f360 	.word	0x2000f360
 8018164:	40001000 	.word	0x40001000

08018168 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8018168:	b580      	push	{r7, lr}
 801816a:	b098      	sub	sp, #96	; 0x60
 801816c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801816e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018172:	2200      	movs	r2, #0
 8018174:	601a      	str	r2, [r3, #0]
 8018176:	605a      	str	r2, [r3, #4]
 8018178:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801817a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801817e:	2200      	movs	r2, #0
 8018180:	601a      	str	r2, [r3, #0]
 8018182:	605a      	str	r2, [r3, #4]
 8018184:	609a      	str	r2, [r3, #8]
 8018186:	60da      	str	r2, [r3, #12]
 8018188:	611a      	str	r2, [r3, #16]
 801818a:	615a      	str	r2, [r3, #20]
 801818c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801818e:	1d3b      	adds	r3, r7, #4
 8018190:	2234      	movs	r2, #52	; 0x34
 8018192:	2100      	movs	r1, #0
 8018194:	4618      	mov	r0, r3
 8018196:	f008 fd8d 	bl	8020cb4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 801819a:	4b41      	ldr	r3, [pc, #260]	; (80182a0 <MX_TIM8_Init+0x138>)
 801819c:	4a41      	ldr	r2, [pc, #260]	; (80182a4 <MX_TIM8_Init+0x13c>)
 801819e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 80181a0:	4b3f      	ldr	r3, [pc, #252]	; (80182a0 <MX_TIM8_Init+0x138>)
 80181a2:	2201      	movs	r2, #1
 80181a4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80181a6:	4b3e      	ldr	r3, [pc, #248]	; (80182a0 <MX_TIM8_Init+0x138>)
 80181a8:	2200      	movs	r2, #0
 80181aa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 80181ac:	4b3c      	ldr	r3, [pc, #240]	; (80182a0 <MX_TIM8_Init+0x138>)
 80181ae:	f240 628f 	movw	r2, #1679	; 0x68f
 80181b2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80181b4:	4b3a      	ldr	r3, [pc, #232]	; (80182a0 <MX_TIM8_Init+0x138>)
 80181b6:	2200      	movs	r2, #0
 80181b8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80181ba:	4b39      	ldr	r3, [pc, #228]	; (80182a0 <MX_TIM8_Init+0x138>)
 80181bc:	2200      	movs	r2, #0
 80181be:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80181c0:	4b37      	ldr	r3, [pc, #220]	; (80182a0 <MX_TIM8_Init+0x138>)
 80181c2:	2200      	movs	r2, #0
 80181c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80181c6:	4836      	ldr	r0, [pc, #216]	; (80182a0 <MX_TIM8_Init+0x138>)
 80181c8:	f006 fc68 	bl	801ea9c <HAL_TIM_PWM_Init>
 80181cc:	4603      	mov	r3, r0
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d001      	beq.n	80181d6 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80181d2:	f7f2 fb7a 	bl	800a8ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80181d6:	2300      	movs	r3, #0
 80181d8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80181da:	2300      	movs	r3, #0
 80181dc:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80181de:	2300      	movs	r3, #0
 80181e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80181e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80181e6:	4619      	mov	r1, r3
 80181e8:	482d      	ldr	r0, [pc, #180]	; (80182a0 <MX_TIM8_Init+0x138>)
 80181ea:	f007 fd0b 	bl	801fc04 <HAL_TIMEx_MasterConfigSynchronization>
 80181ee:	4603      	mov	r3, r0
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d001      	beq.n	80181f8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80181f4:	f7f2 fb69 	bl	800a8ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80181f8:	2360      	movs	r3, #96	; 0x60
 80181fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 419;
 80181fc:	f240 13a3 	movw	r3, #419	; 0x1a3
 8018200:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8018202:	2300      	movs	r3, #0
 8018204:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8018206:	2300      	movs	r3, #0
 8018208:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801820a:	2300      	movs	r3, #0
 801820c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801820e:	2300      	movs	r3, #0
 8018210:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8018212:	2300      	movs	r3, #0
 8018214:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8018216:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801821a:	2200      	movs	r2, #0
 801821c:	4619      	mov	r1, r3
 801821e:	4820      	ldr	r0, [pc, #128]	; (80182a0 <MX_TIM8_Init+0x138>)
 8018220:	f006 ffbc 	bl	801f19c <HAL_TIM_PWM_ConfigChannel>
 8018224:	4603      	mov	r3, r0
 8018226:	2b00      	cmp	r3, #0
 8018228:	d001      	beq.n	801822e <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 801822a:	f7f2 fb4e 	bl	800a8ca <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801822e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018232:	2208      	movs	r2, #8
 8018234:	4619      	mov	r1, r3
 8018236:	481a      	ldr	r0, [pc, #104]	; (80182a0 <MX_TIM8_Init+0x138>)
 8018238:	f006 ffb0 	bl	801f19c <HAL_TIM_PWM_ConfigChannel>
 801823c:	4603      	mov	r3, r0
 801823e:	2b00      	cmp	r3, #0
 8018240:	d001      	beq.n	8018246 <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 8018242:	f7f2 fb42 	bl	800a8ca <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8018246:	2300      	movs	r3, #0
 8018248:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801824a:	2300      	movs	r3, #0
 801824c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801824e:	2300      	movs	r3, #0
 8018250:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8018252:	2300      	movs	r3, #0
 8018254:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8018256:	2300      	movs	r3, #0
 8018258:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801825a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801825e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8018260:	2300      	movs	r3, #0
 8018262:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8018264:	2300      	movs	r3, #0
 8018266:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8018268:	2300      	movs	r3, #0
 801826a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 801826c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018270:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8018272:	2300      	movs	r3, #0
 8018274:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8018276:	2300      	movs	r3, #0
 8018278:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801827a:	2300      	movs	r3, #0
 801827c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 801827e:	1d3b      	adds	r3, r7, #4
 8018280:	4619      	mov	r1, r3
 8018282:	4807      	ldr	r0, [pc, #28]	; (80182a0 <MX_TIM8_Init+0x138>)
 8018284:	f007 fd4c 	bl	801fd20 <HAL_TIMEx_ConfigBreakDeadTime>
 8018288:	4603      	mov	r3, r0
 801828a:	2b00      	cmp	r3, #0
 801828c:	d001      	beq.n	8018292 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 801828e:	f7f2 fb1c 	bl	800a8ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8018292:	4803      	ldr	r0, [pc, #12]	; (80182a0 <MX_TIM8_Init+0x138>)
 8018294:	f000 f8da 	bl	801844c <HAL_TIM_MspPostInit>

}
 8018298:	bf00      	nop
 801829a:	3760      	adds	r7, #96	; 0x60
 801829c:	46bd      	mov	sp, r7
 801829e:	bd80      	pop	{r7, pc}
 80182a0:	2000f3ac 	.word	0x2000f3ac
 80182a4:	40013400 	.word	0x40013400

080182a8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80182a8:	b580      	push	{r7, lr}
 80182aa:	b094      	sub	sp, #80	; 0x50
 80182ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80182ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80182b2:	2200      	movs	r2, #0
 80182b4:	601a      	str	r2, [r3, #0]
 80182b6:	605a      	str	r2, [r3, #4]
 80182b8:	609a      	str	r2, [r3, #8]
 80182ba:	60da      	str	r2, [r3, #12]
 80182bc:	611a      	str	r2, [r3, #16]
 80182be:	615a      	str	r2, [r3, #20]
 80182c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80182c2:	463b      	mov	r3, r7
 80182c4:	2234      	movs	r2, #52	; 0x34
 80182c6:	2100      	movs	r1, #0
 80182c8:	4618      	mov	r0, r3
 80182ca:	f008 fcf3 	bl	8020cb4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80182ce:	4b30      	ldr	r3, [pc, #192]	; (8018390 <MX_TIM16_Init+0xe8>)
 80182d0:	4a30      	ldr	r2, [pc, #192]	; (8018394 <MX_TIM16_Init+0xec>)
 80182d2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 80182d4:	4b2e      	ldr	r3, [pc, #184]	; (8018390 <MX_TIM16_Init+0xe8>)
 80182d6:	2201      	movs	r2, #1
 80182d8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80182da:	4b2d      	ldr	r3, [pc, #180]	; (8018390 <MX_TIM16_Init+0xe8>)
 80182dc:	2200      	movs	r2, #0
 80182de:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 80182e0:	4b2b      	ldr	r3, [pc, #172]	; (8018390 <MX_TIM16_Init+0xe8>)
 80182e2:	2264      	movs	r2, #100	; 0x64
 80182e4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80182e6:	4b2a      	ldr	r3, [pc, #168]	; (8018390 <MX_TIM16_Init+0xe8>)
 80182e8:	2200      	movs	r2, #0
 80182ea:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80182ec:	4b28      	ldr	r3, [pc, #160]	; (8018390 <MX_TIM16_Init+0xe8>)
 80182ee:	2200      	movs	r2, #0
 80182f0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80182f2:	4b27      	ldr	r3, [pc, #156]	; (8018390 <MX_TIM16_Init+0xe8>)
 80182f4:	2200      	movs	r2, #0
 80182f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80182f8:	4825      	ldr	r0, [pc, #148]	; (8018390 <MX_TIM16_Init+0xe8>)
 80182fa:	f006 fb07 	bl	801e90c <HAL_TIM_Base_Init>
 80182fe:	4603      	mov	r3, r0
 8018300:	2b00      	cmp	r3, #0
 8018302:	d001      	beq.n	8018308 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8018304:	f7f2 fae1 	bl	800a8ca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8018308:	4821      	ldr	r0, [pc, #132]	; (8018390 <MX_TIM16_Init+0xe8>)
 801830a:	f006 fbc7 	bl	801ea9c <HAL_TIM_PWM_Init>
 801830e:	4603      	mov	r3, r0
 8018310:	2b00      	cmp	r3, #0
 8018312:	d001      	beq.n	8018318 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8018314:	f7f2 fad9 	bl	800a8ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8018318:	2360      	movs	r3, #96	; 0x60
 801831a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 30;
 801831c:	231e      	movs	r3, #30
 801831e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8018320:	2300      	movs	r3, #0
 8018322:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8018324:	2300      	movs	r3, #0
 8018326:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8018328:	2300      	movs	r3, #0
 801832a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801832c:	2300      	movs	r3, #0
 801832e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8018330:	2300      	movs	r3, #0
 8018332:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8018334:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018338:	2200      	movs	r2, #0
 801833a:	4619      	mov	r1, r3
 801833c:	4814      	ldr	r0, [pc, #80]	; (8018390 <MX_TIM16_Init+0xe8>)
 801833e:	f006 ff2d 	bl	801f19c <HAL_TIM_PWM_ConfigChannel>
 8018342:	4603      	mov	r3, r0
 8018344:	2b00      	cmp	r3, #0
 8018346:	d001      	beq.n	801834c <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8018348:	f7f2 fabf 	bl	800a8ca <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801834c:	2300      	movs	r3, #0
 801834e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8018350:	2300      	movs	r3, #0
 8018352:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8018354:	2300      	movs	r3, #0
 8018356:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8018358:	2300      	movs	r3, #0
 801835a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801835c:	2300      	movs	r3, #0
 801835e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8018360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018364:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8018366:	2300      	movs	r3, #0
 8018368:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801836a:	2300      	movs	r3, #0
 801836c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 801836e:	463b      	mov	r3, r7
 8018370:	4619      	mov	r1, r3
 8018372:	4807      	ldr	r0, [pc, #28]	; (8018390 <MX_TIM16_Init+0xe8>)
 8018374:	f007 fcd4 	bl	801fd20 <HAL_TIMEx_ConfigBreakDeadTime>
 8018378:	4603      	mov	r3, r0
 801837a:	2b00      	cmp	r3, #0
 801837c:	d001      	beq.n	8018382 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 801837e:	f7f2 faa4 	bl	800a8ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8018382:	4803      	ldr	r0, [pc, #12]	; (8018390 <MX_TIM16_Init+0xe8>)
 8018384:	f000 f862 	bl	801844c <HAL_TIM_MspPostInit>

}
 8018388:	bf00      	nop
 801838a:	3750      	adds	r7, #80	; 0x50
 801838c:	46bd      	mov	sp, r7
 801838e:	bd80      	pop	{r7, pc}
 8018390:	2000f3f8 	.word	0x2000f3f8
 8018394:	40014400 	.word	0x40014400

08018398 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8018398:	b580      	push	{r7, lr}
 801839a:	b084      	sub	sp, #16
 801839c:	af00      	add	r7, sp, #0
 801839e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	4a16      	ldr	r2, [pc, #88]	; (8018400 <HAL_TIM_Base_MspInit+0x68>)
 80183a6:	4293      	cmp	r3, r2
 80183a8:	d114      	bne.n	80183d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80183aa:	4b16      	ldr	r3, [pc, #88]	; (8018404 <HAL_TIM_Base_MspInit+0x6c>)
 80183ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80183ae:	4a15      	ldr	r2, [pc, #84]	; (8018404 <HAL_TIM_Base_MspInit+0x6c>)
 80183b0:	f043 0310 	orr.w	r3, r3, #16
 80183b4:	6593      	str	r3, [r2, #88]	; 0x58
 80183b6:	4b13      	ldr	r3, [pc, #76]	; (8018404 <HAL_TIM_Base_MspInit+0x6c>)
 80183b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80183ba:	f003 0310 	and.w	r3, r3, #16
 80183be:	60fb      	str	r3, [r7, #12]
 80183c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80183c2:	2200      	movs	r2, #0
 80183c4:	2103      	movs	r1, #3
 80183c6:	2036      	movs	r0, #54	; 0x36
 80183c8:	f003 fc65 	bl	801bc96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80183cc:	2036      	movs	r0, #54	; 0x36
 80183ce:	f003 fc7c 	bl	801bcca <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80183d2:	e010      	b.n	80183f6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	4a0b      	ldr	r2, [pc, #44]	; (8018408 <HAL_TIM_Base_MspInit+0x70>)
 80183da:	4293      	cmp	r3, r2
 80183dc:	d10b      	bne.n	80183f6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80183de:	4b09      	ldr	r3, [pc, #36]	; (8018404 <HAL_TIM_Base_MspInit+0x6c>)
 80183e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80183e2:	4a08      	ldr	r2, [pc, #32]	; (8018404 <HAL_TIM_Base_MspInit+0x6c>)
 80183e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80183e8:	6613      	str	r3, [r2, #96]	; 0x60
 80183ea:	4b06      	ldr	r3, [pc, #24]	; (8018404 <HAL_TIM_Base_MspInit+0x6c>)
 80183ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80183ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80183f2:	60bb      	str	r3, [r7, #8]
 80183f4:	68bb      	ldr	r3, [r7, #8]
}
 80183f6:	bf00      	nop
 80183f8:	3710      	adds	r7, #16
 80183fa:	46bd      	mov	sp, r7
 80183fc:	bd80      	pop	{r7, pc}
 80183fe:	bf00      	nop
 8018400:	40001000 	.word	0x40001000
 8018404:	40021000 	.word	0x40021000
 8018408:	40014400 	.word	0x40014400

0801840c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 801840c:	b480      	push	{r7}
 801840e:	b085      	sub	sp, #20
 8018410:	af00      	add	r7, sp, #0
 8018412:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	4a0a      	ldr	r2, [pc, #40]	; (8018444 <HAL_TIM_PWM_MspInit+0x38>)
 801841a:	4293      	cmp	r3, r2
 801841c:	d10b      	bne.n	8018436 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 801841e:	4b0a      	ldr	r3, [pc, #40]	; (8018448 <HAL_TIM_PWM_MspInit+0x3c>)
 8018420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018422:	4a09      	ldr	r2, [pc, #36]	; (8018448 <HAL_TIM_PWM_MspInit+0x3c>)
 8018424:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018428:	6613      	str	r3, [r2, #96]	; 0x60
 801842a:	4b07      	ldr	r3, [pc, #28]	; (8018448 <HAL_TIM_PWM_MspInit+0x3c>)
 801842c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801842e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018432:	60fb      	str	r3, [r7, #12]
 8018434:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8018436:	bf00      	nop
 8018438:	3714      	adds	r7, #20
 801843a:	46bd      	mov	sp, r7
 801843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018440:	4770      	bx	lr
 8018442:	bf00      	nop
 8018444:	40013400 	.word	0x40013400
 8018448:	40021000 	.word	0x40021000

0801844c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 801844c:	b580      	push	{r7, lr}
 801844e:	b08a      	sub	sp, #40	; 0x28
 8018450:	af00      	add	r7, sp, #0
 8018452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018454:	f107 0314 	add.w	r3, r7, #20
 8018458:	2200      	movs	r2, #0
 801845a:	601a      	str	r2, [r3, #0]
 801845c:	605a      	str	r2, [r3, #4]
 801845e:	609a      	str	r2, [r3, #8]
 8018460:	60da      	str	r2, [r3, #12]
 8018462:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	4a2b      	ldr	r2, [pc, #172]	; (8018518 <HAL_TIM_MspPostInit+0xcc>)
 801846a:	4293      	cmp	r3, r2
 801846c:	d12d      	bne.n	80184ca <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801846e:	4b2b      	ldr	r3, [pc, #172]	; (801851c <HAL_TIM_MspPostInit+0xd0>)
 8018470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018472:	4a2a      	ldr	r2, [pc, #168]	; (801851c <HAL_TIM_MspPostInit+0xd0>)
 8018474:	f043 0302 	orr.w	r3, r3, #2
 8018478:	64d3      	str	r3, [r2, #76]	; 0x4c
 801847a:	4b28      	ldr	r3, [pc, #160]	; (801851c <HAL_TIM_MspPostInit+0xd0>)
 801847c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801847e:	f003 0302 	and.w	r3, r3, #2
 8018482:	613b      	str	r3, [r7, #16]
 8018484:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 8018486:	2340      	movs	r3, #64	; 0x40
 8018488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801848a:	2302      	movs	r3, #2
 801848c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801848e:	2300      	movs	r3, #0
 8018490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018492:	2300      	movs	r3, #0
 8018494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8018496:	2305      	movs	r3, #5
 8018498:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 801849a:	f107 0314 	add.w	r3, r7, #20
 801849e:	4619      	mov	r1, r3
 80184a0:	481f      	ldr	r0, [pc, #124]	; (8018520 <HAL_TIM_MspPostInit+0xd4>)
 80184a2:	f004 f961 	bl	801c768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 80184a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80184aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80184ac:	2302      	movs	r3, #2
 80184ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80184b0:	2300      	movs	r3, #0
 80184b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80184b4:	2300      	movs	r3, #0
 80184b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80184b8:	230a      	movs	r3, #10
 80184ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80184bc:	f107 0314 	add.w	r3, r7, #20
 80184c0:	4619      	mov	r1, r3
 80184c2:	4817      	ldr	r0, [pc, #92]	; (8018520 <HAL_TIM_MspPostInit+0xd4>)
 80184c4:	f004 f950 	bl	801c768 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80184c8:	e022      	b.n	8018510 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	4a15      	ldr	r2, [pc, #84]	; (8018524 <HAL_TIM_MspPostInit+0xd8>)
 80184d0:	4293      	cmp	r3, r2
 80184d2:	d11d      	bne.n	8018510 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80184d4:	4b11      	ldr	r3, [pc, #68]	; (801851c <HAL_TIM_MspPostInit+0xd0>)
 80184d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80184d8:	4a10      	ldr	r2, [pc, #64]	; (801851c <HAL_TIM_MspPostInit+0xd0>)
 80184da:	f043 0301 	orr.w	r3, r3, #1
 80184de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80184e0:	4b0e      	ldr	r3, [pc, #56]	; (801851c <HAL_TIM_MspPostInit+0xd0>)
 80184e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80184e4:	f003 0301 	and.w	r3, r3, #1
 80184e8:	60fb      	str	r3, [r7, #12]
 80184ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 80184ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80184f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80184f2:	2302      	movs	r3, #2
 80184f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80184f6:	2300      	movs	r3, #0
 80184f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80184fa:	2300      	movs	r3, #0
 80184fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80184fe:	2301      	movs	r3, #1
 8018500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8018502:	f107 0314 	add.w	r3, r7, #20
 8018506:	4619      	mov	r1, r3
 8018508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801850c:	f004 f92c 	bl	801c768 <HAL_GPIO_Init>
}
 8018510:	bf00      	nop
 8018512:	3728      	adds	r7, #40	; 0x28
 8018514:	46bd      	mov	sp, r7
 8018516:	bd80      	pop	{r7, pc}
 8018518:	40013400 	.word	0x40013400
 801851c:	40021000 	.word	0x40021000
 8018520:	48000400 	.word	0x48000400
 8018524:	40014400 	.word	0x40014400

08018528 <get_center_velocity>:
parameter_speed speed1000_shortest_mollifier;

parameter_speed speed1200_shortest_mollifier;
parameter_speed speed1600_shortest_mollifier;

float get_center_velocity(parameter_speed Howspeed, int pass_number) {
 8018528:	b084      	sub	sp, #16
 801852a:	b480      	push	{r7}
 801852c:	b083      	sub	sp, #12
 801852e:	af00      	add	r7, sp, #0
 8018530:	f107 0c10 	add.w	ip, r7, #16
 8018534:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float End_velocity;
	if (pass_number == -2) {
 8018538:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801853c:	f113 0f02 	cmn.w	r3, #2
 8018540:	d102      	bne.n	8018548 <get_center_velocity+0x20>
		End_velocity = Howspeed.slalom_R.g_speed;
 8018542:	69bb      	ldr	r3, [r7, #24]
 8018544:	607b      	str	r3, [r7, #4]
 8018546:	e083      	b.n	8018650 <get_center_velocity+0x128>
	} else if (pass_number == -3) {
 8018548:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801854c:	f113 0f03 	cmn.w	r3, #3
 8018550:	d102      	bne.n	8018558 <get_center_velocity+0x30>
		End_velocity = Howspeed.slalom_L.g_speed;
 8018552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018554:	607b      	str	r3, [r7, #4]
 8018556:	e07b      	b.n	8018650 <get_center_velocity+0x128>
	} else if (pass_number == -4) {
 8018558:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801855c:	f113 0f04 	cmn.w	r3, #4
 8018560:	d102      	bne.n	8018568 <get_center_velocity+0x40>
		End_velocity = Howspeed.turn90_R.g_speed;
 8018562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018564:	607b      	str	r3, [r7, #4]
 8018566:	e073      	b.n	8018650 <get_center_velocity+0x128>
	} else if (pass_number == -5) {
 8018568:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801856c:	f113 0f05 	cmn.w	r3, #5
 8018570:	d102      	bne.n	8018578 <get_center_velocity+0x50>
		End_velocity = Howspeed.turn90_L.g_speed;
 8018572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018574:	607b      	str	r3, [r7, #4]
 8018576:	e06b      	b.n	8018650 <get_center_velocity+0x128>
	} else if (pass_number == -6) {
 8018578:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801857c:	f113 0f06 	cmn.w	r3, #6
 8018580:	d102      	bne.n	8018588 <get_center_velocity+0x60>
		End_velocity = Howspeed.turn180_R.g_speed;
 8018582:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018584:	607b      	str	r3, [r7, #4]
 8018586:	e063      	b.n	8018650 <get_center_velocity+0x128>
	} else if (pass_number == -7) {
 8018588:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801858c:	f113 0f07 	cmn.w	r3, #7
 8018590:	d102      	bne.n	8018598 <get_center_velocity+0x70>
		End_velocity = Howspeed.turn180_L.g_speed;
 8018592:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018594:	607b      	str	r3, [r7, #4]
 8018596:	e05b      	b.n	8018650 <get_center_velocity+0x128>
	} else if (pass_number == -8) {
 8018598:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801859c:	f113 0f08 	cmn.w	r3, #8
 80185a0:	d103      	bne.n	80185aa <get_center_velocity+0x82>
		End_velocity = Howspeed.turn45in_R.g_speed;
 80185a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80185a6:	607b      	str	r3, [r7, #4]
 80185a8:	e052      	b.n	8018650 <get_center_velocity+0x128>
	} else if (pass_number == -9) {
 80185aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80185ae:	f113 0f09 	cmn.w	r3, #9
 80185b2:	d103      	bne.n	80185bc <get_center_velocity+0x94>
		End_velocity = Howspeed.turn45in_L.g_speed;
 80185b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80185b8:	607b      	str	r3, [r7, #4]
 80185ba:	e049      	b.n	8018650 <get_center_velocity+0x128>
	} else if (pass_number == -10) {
 80185bc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80185c0:	f113 0f0a 	cmn.w	r3, #10
 80185c4:	d103      	bne.n	80185ce <get_center_velocity+0xa6>
		End_velocity = Howspeed.turn135in_R.g_speed;
 80185c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80185ca:	607b      	str	r3, [r7, #4]
 80185cc:	e040      	b.n	8018650 <get_center_velocity+0x128>
	} else if (pass_number == -11) {
 80185ce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80185d2:	f113 0f0b 	cmn.w	r3, #11
 80185d6:	d103      	bne.n	80185e0 <get_center_velocity+0xb8>
		End_velocity = Howspeed.turn135in_L.g_speed;
 80185d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80185dc:	607b      	str	r3, [r7, #4]
 80185de:	e037      	b.n	8018650 <get_center_velocity+0x128>
	} else if (pass_number == -12) {
 80185e0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80185e4:	f113 0f0c 	cmn.w	r3, #12
 80185e8:	d103      	bne.n	80185f2 <get_center_velocity+0xca>
		End_velocity = Howspeed.turn45out_R.g_speed;
 80185ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80185ee:	607b      	str	r3, [r7, #4]
 80185f0:	e02e      	b.n	8018650 <get_center_velocity+0x128>
	} else if (pass_number == -13) {
 80185f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80185f6:	f113 0f0d 	cmn.w	r3, #13
 80185fa:	d103      	bne.n	8018604 <get_center_velocity+0xdc>
		End_velocity = Howspeed.turn45out_L.g_speed;
 80185fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018600:	607b      	str	r3, [r7, #4]
 8018602:	e025      	b.n	8018650 <get_center_velocity+0x128>
	} else if (pass_number == -14) {
 8018604:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8018608:	f113 0f0e 	cmn.w	r3, #14
 801860c:	d103      	bne.n	8018616 <get_center_velocity+0xee>
		End_velocity = Howspeed.turn135out_R.g_speed;
 801860e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8018612:	607b      	str	r3, [r7, #4]
 8018614:	e01c      	b.n	8018650 <get_center_velocity+0x128>
	} else if (pass_number == -15) {
 8018616:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801861a:	f113 0f0f 	cmn.w	r3, #15
 801861e:	d103      	bne.n	8018628 <get_center_velocity+0x100>
		End_velocity = Howspeed.turn135out_L.g_speed;
 8018620:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8018624:	607b      	str	r3, [r7, #4]
 8018626:	e013      	b.n	8018650 <get_center_velocity+0x128>
	} else if (pass_number == -16) {
 8018628:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801862c:	f113 0f10 	cmn.w	r3, #16
 8018630:	d103      	bne.n	801863a <get_center_velocity+0x112>
		End_velocity = Howspeed.V90_R.g_speed;
 8018632:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8018636:	607b      	str	r3, [r7, #4]
 8018638:	e00a      	b.n	8018650 <get_center_velocity+0x128>
	} else if (pass_number == -17) {
 801863a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801863e:	f113 0f11 	cmn.w	r3, #17
 8018642:	d103      	bne.n	801864c <get_center_velocity+0x124>
		End_velocity = Howspeed.V90_L.g_speed;
 8018644:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8018648:	607b      	str	r3, [r7, #4]
 801864a:	e001      	b.n	8018650 <get_center_velocity+0x128>
	} else {
		End_velocity = Howspeed.TurnCentervelocity;
 801864c:	697b      	ldr	r3, [r7, #20]
 801864e:	607b      	str	r3, [r7, #4]
	}

	return End_velocity;
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	ee07 3a90 	vmov	s15, r3
}
 8018656:	eeb0 0a67 	vmov.f32	s0, s15
 801865a:	370c      	adds	r7, #12
 801865c:	46bd      	mov	sp, r7
 801865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018662:	b004      	add	sp, #16
 8018664:	4770      	bx	lr
	...

08018668 <input_parameter>:

void input_parameter(void) {
 8018668:	b480      	push	{r7}
 801866a:	af00      	add	r7, sp, #0

	speed300_exploration.SlalomCentervelocity = 300;
 801866c:	4b8f      	ldr	r3, [pc, #572]	; (80188ac <input_parameter+0x244>)
 801866e:	4a90      	ldr	r2, [pc, #576]	; (80188b0 <input_parameter+0x248>)
 8018670:	601a      	str	r2, [r3, #0]
	speed300_exploration.TurnCentervelocity = 300;
 8018672:	4b8e      	ldr	r3, [pc, #568]	; (80188ac <input_parameter+0x244>)
 8018674:	4a8e      	ldr	r2, [pc, #568]	; (80188b0 <input_parameter+0x248>)
 8018676:	605a      	str	r2, [r3, #4]

	speed300_exploration.slalom_R.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8018678:	4b8c      	ldr	r3, [pc, #560]	; (80188ac <input_parameter+0x244>)
 801867a:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_R.g_speed =
 801867c:	4a8b      	ldr	r2, [pc, #556]	; (80188ac <input_parameter+0x244>)
 801867e:	6093      	str	r3, [r2, #8]
	speed300_exploration.slalom_R.t_speed = 980; //550
 8018680:	4b8a      	ldr	r3, [pc, #552]	; (80188ac <input_parameter+0x244>)
 8018682:	4a8c      	ldr	r2, [pc, #560]	; (80188b4 <input_parameter+0x24c>)
 8018684:	615a      	str	r2, [r3, #20]
	speed300_exploration.slalom_R.t_acc = 13000; //10000
 8018686:	4b89      	ldr	r3, [pc, #548]	; (80188ac <input_parameter+0x244>)
 8018688:	4a8b      	ldr	r2, [pc, #556]	; (80188b8 <input_parameter+0x250>)
 801868a:	619a      	str	r2, [r3, #24]
	speed300_exploration.slalom_R.f_ofset = 3; //55;
 801868c:	4b87      	ldr	r3, [pc, #540]	; (80188ac <input_parameter+0x244>)
 801868e:	4a8b      	ldr	r2, [pc, #556]	; (80188bc <input_parameter+0x254>)
 8018690:	60da      	str	r2, [r3, #12]
	speed300_exploration.slalom_R.e_ofset = 24;
 8018692:	4b86      	ldr	r3, [pc, #536]	; (80188ac <input_parameter+0x244>)
 8018694:	4a8a      	ldr	r2, [pc, #552]	; (80188c0 <input_parameter+0x258>)
 8018696:	611a      	str	r2, [r3, #16]

	speed300_exploration.slalom_L.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8018698:	4b84      	ldr	r3, [pc, #528]	; (80188ac <input_parameter+0x244>)
 801869a:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_L.g_speed =
 801869c:	4a83      	ldr	r2, [pc, #524]	; (80188ac <input_parameter+0x244>)
 801869e:	61d3      	str	r3, [r2, #28]
	speed300_exploration.slalom_L.t_speed = 980;
 80186a0:	4b82      	ldr	r3, [pc, #520]	; (80188ac <input_parameter+0x244>)
 80186a2:	4a84      	ldr	r2, [pc, #528]	; (80188b4 <input_parameter+0x24c>)
 80186a4:	629a      	str	r2, [r3, #40]	; 0x28
	speed300_exploration.slalom_L.t_acc = 13000;
 80186a6:	4b81      	ldr	r3, [pc, #516]	; (80188ac <input_parameter+0x244>)
 80186a8:	4a83      	ldr	r2, [pc, #524]	; (80188b8 <input_parameter+0x250>)
 80186aa:	62da      	str	r2, [r3, #44]	; 0x2c
	speed300_exploration.slalom_L.f_ofset = 2; //50;
 80186ac:	4b7f      	ldr	r3, [pc, #508]	; (80188ac <input_parameter+0x244>)
 80186ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80186b2:	621a      	str	r2, [r3, #32]
	speed300_exploration.slalom_L.e_ofset = 24;
 80186b4:	4b7d      	ldr	r3, [pc, #500]	; (80188ac <input_parameter+0x244>)
 80186b6:	4a82      	ldr	r2, [pc, #520]	; (80188c0 <input_parameter+0x258>)
 80186b8:	625a      	str	r2, [r3, #36]	; 0x24



	speed250_exploration.SlalomCentervelocity = 250;
 80186ba:	4b82      	ldr	r3, [pc, #520]	; (80188c4 <input_parameter+0x25c>)
 80186bc:	4a82      	ldr	r2, [pc, #520]	; (80188c8 <input_parameter+0x260>)
 80186be:	601a      	str	r2, [r3, #0]
	speed250_exploration.TurnCentervelocity = 250;
 80186c0:	4b80      	ldr	r3, [pc, #512]	; (80188c4 <input_parameter+0x25c>)
 80186c2:	4a81      	ldr	r2, [pc, #516]	; (80188c8 <input_parameter+0x260>)
 80186c4:	605a      	str	r2, [r3, #4]

	speed250_exploration.slalom_R.g_speed =
			speed250_exploration.SlalomCentervelocity;
 80186c6:	4b7f      	ldr	r3, [pc, #508]	; (80188c4 <input_parameter+0x25c>)
 80186c8:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_R.g_speed =
 80186ca:	4a7e      	ldr	r2, [pc, #504]	; (80188c4 <input_parameter+0x25c>)
 80186cc:	6093      	str	r3, [r2, #8]
	speed250_exploration.slalom_R.t_speed = 830; //550
 80186ce:	4b7d      	ldr	r3, [pc, #500]	; (80188c4 <input_parameter+0x25c>)
 80186d0:	4a7e      	ldr	r2, [pc, #504]	; (80188cc <input_parameter+0x264>)
 80186d2:	615a      	str	r2, [r3, #20]
	speed250_exploration.slalom_R.t_acc = 9000; //10000
 80186d4:	4b7b      	ldr	r3, [pc, #492]	; (80188c4 <input_parameter+0x25c>)
 80186d6:	4a7e      	ldr	r2, [pc, #504]	; (80188d0 <input_parameter+0x268>)
 80186d8:	619a      	str	r2, [r3, #24]
	speed250_exploration.slalom_R.f_ofset = 0.5; //55;
 80186da:	4b7a      	ldr	r3, [pc, #488]	; (80188c4 <input_parameter+0x25c>)
 80186dc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80186e0:	60da      	str	r2, [r3, #12]
	speed250_exploration.slalom_R.e_ofset = 20;
 80186e2:	4b78      	ldr	r3, [pc, #480]	; (80188c4 <input_parameter+0x25c>)
 80186e4:	4a7b      	ldr	r2, [pc, #492]	; (80188d4 <input_parameter+0x26c>)
 80186e6:	611a      	str	r2, [r3, #16]

	speed250_exploration.slalom_L.g_speed =
			speed250_exploration.SlalomCentervelocity;
 80186e8:	4b76      	ldr	r3, [pc, #472]	; (80188c4 <input_parameter+0x25c>)
 80186ea:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_L.g_speed =
 80186ec:	4a75      	ldr	r2, [pc, #468]	; (80188c4 <input_parameter+0x25c>)
 80186ee:	61d3      	str	r3, [r2, #28]
	speed250_exploration.slalom_L.t_speed = 730;
 80186f0:	4b74      	ldr	r3, [pc, #464]	; (80188c4 <input_parameter+0x25c>)
 80186f2:	4a79      	ldr	r2, [pc, #484]	; (80188d8 <input_parameter+0x270>)
 80186f4:	629a      	str	r2, [r3, #40]	; 0x28
	speed250_exploration.slalom_L.t_acc = 9000;
 80186f6:	4b73      	ldr	r3, [pc, #460]	; (80188c4 <input_parameter+0x25c>)
 80186f8:	4a75      	ldr	r2, [pc, #468]	; (80188d0 <input_parameter+0x268>)
 80186fa:	62da      	str	r2, [r3, #44]	; 0x2c
	speed250_exploration.slalom_L.f_ofset = 0.5; //50;
 80186fc:	4b71      	ldr	r3, [pc, #452]	; (80188c4 <input_parameter+0x25c>)
 80186fe:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8018702:	621a      	str	r2, [r3, #32]
	speed250_exploration.slalom_L.e_ofset = 19;
 8018704:	4b6f      	ldr	r3, [pc, #444]	; (80188c4 <input_parameter+0x25c>)
 8018706:	4a75      	ldr	r2, [pc, #468]	; (80188dc <input_parameter+0x274>)
 8018708:	625a      	str	r2, [r3, #36]	; 0x24


	speed300_shortest.SlalomCentervelocity =
			speed300_exploration.SlalomCentervelocity;
 801870a:	4b68      	ldr	r3, [pc, #416]	; (80188ac <input_parameter+0x244>)
 801870c:	681b      	ldr	r3, [r3, #0]
	speed300_shortest.SlalomCentervelocity =
 801870e:	4a74      	ldr	r2, [pc, #464]	; (80188e0 <input_parameter+0x278>)
 8018710:	6013      	str	r3, [r2, #0]
	speed300_shortest.TurnCentervelocity =
			speed300_exploration.TurnCentervelocity + 200;
 8018712:	4b66      	ldr	r3, [pc, #408]	; (80188ac <input_parameter+0x244>)
 8018714:	edd3 7a01 	vldr	s15, [r3, #4]
 8018718:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80188e4 <input_parameter+0x27c>
 801871c:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.TurnCentervelocity =
 8018720:	4b6f      	ldr	r3, [pc, #444]	; (80188e0 <input_parameter+0x278>)
 8018722:	edc3 7a01 	vstr	s15, [r3, #4]

	speed300_shortest.slalom_R.g_speed = speed300_exploration.slalom_R.g_speed;
 8018726:	4b61      	ldr	r3, [pc, #388]	; (80188ac <input_parameter+0x244>)
 8018728:	689b      	ldr	r3, [r3, #8]
 801872a:	4a6d      	ldr	r2, [pc, #436]	; (80188e0 <input_parameter+0x278>)
 801872c:	6093      	str	r3, [r2, #8]
	speed300_shortest.slalom_R.t_speed = speed300_exploration.slalom_R.t_speed;
 801872e:	4b5f      	ldr	r3, [pc, #380]	; (80188ac <input_parameter+0x244>)
 8018730:	695b      	ldr	r3, [r3, #20]
 8018732:	4a6b      	ldr	r2, [pc, #428]	; (80188e0 <input_parameter+0x278>)
 8018734:	6153      	str	r3, [r2, #20]
	speed300_shortest.slalom_R.t_acc = speed300_exploration.slalom_R.t_acc;
 8018736:	4b5d      	ldr	r3, [pc, #372]	; (80188ac <input_parameter+0x244>)
 8018738:	699b      	ldr	r3, [r3, #24]
 801873a:	4a69      	ldr	r2, [pc, #420]	; (80188e0 <input_parameter+0x278>)
 801873c:	6193      	str	r3, [r2, #24]
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 801873e:	4b5b      	ldr	r3, [pc, #364]	; (80188ac <input_parameter+0x244>)
 8018740:	edd3 7a03 	vldr	s15, [r3, #12]
			+ MAZE_OFFSET; //55;
 8018744:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8018748:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 801874c:	4b64      	ldr	r3, [pc, #400]	; (80188e0 <input_parameter+0x278>)
 801874e:	edc3 7a03 	vstr	s15, [r3, #12]
	speed300_shortest.slalom_R.e_ofset = speed300_exploration.slalom_R.e_ofset;
 8018752:	4b56      	ldr	r3, [pc, #344]	; (80188ac <input_parameter+0x244>)
 8018754:	691b      	ldr	r3, [r3, #16]
 8018756:	4a62      	ldr	r2, [pc, #392]	; (80188e0 <input_parameter+0x278>)
 8018758:	6113      	str	r3, [r2, #16]

	speed300_shortest.slalom_L.g_speed = speed300_exploration.slalom_L.g_speed;
 801875a:	4b54      	ldr	r3, [pc, #336]	; (80188ac <input_parameter+0x244>)
 801875c:	69db      	ldr	r3, [r3, #28]
 801875e:	4a60      	ldr	r2, [pc, #384]	; (80188e0 <input_parameter+0x278>)
 8018760:	61d3      	str	r3, [r2, #28]
	speed300_shortest.slalom_L.t_speed = speed300_exploration.slalom_L.t_speed;
 8018762:	4b52      	ldr	r3, [pc, #328]	; (80188ac <input_parameter+0x244>)
 8018764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018766:	4a5e      	ldr	r2, [pc, #376]	; (80188e0 <input_parameter+0x278>)
 8018768:	6293      	str	r3, [r2, #40]	; 0x28
	speed300_shortest.slalom_L.t_acc = speed300_exploration.slalom_L.t_acc;
 801876a:	4b50      	ldr	r3, [pc, #320]	; (80188ac <input_parameter+0x244>)
 801876c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801876e:	4a5c      	ldr	r2, [pc, #368]	; (80188e0 <input_parameter+0x278>)
 8018770:	62d3      	str	r3, [r2, #44]	; 0x2c
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8018772:	4b4e      	ldr	r3, [pc, #312]	; (80188ac <input_parameter+0x244>)
 8018774:	edd3 7a08 	vldr	s15, [r3, #32]
			+ MAZE_OFFSET; //50;
 8018778:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 801877c:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8018780:	4b57      	ldr	r3, [pc, #348]	; (80188e0 <input_parameter+0x278>)
 8018782:	edc3 7a08 	vstr	s15, [r3, #32]
	speed300_shortest.slalom_L.e_ofset = speed300_exploration.slalom_L.e_ofset;
 8018786:	4b49      	ldr	r3, [pc, #292]	; (80188ac <input_parameter+0x244>)
 8018788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801878a:	4a55      	ldr	r2, [pc, #340]	; (80188e0 <input_parameter+0x278>)
 801878c:	6253      	str	r3, [r2, #36]	; 0x24

	speed300_shortest.turn90_R.g_speed = speed300_shortest.TurnCentervelocity;
 801878e:	4b54      	ldr	r3, [pc, #336]	; (80188e0 <input_parameter+0x278>)
 8018790:	685b      	ldr	r3, [r3, #4]
 8018792:	4a53      	ldr	r2, [pc, #332]	; (80188e0 <input_parameter+0x278>)
 8018794:	6313      	str	r3, [r2, #48]	; 0x30
	speed300_shortest.turn90_R.t_speed = 600;
 8018796:	4b52      	ldr	r3, [pc, #328]	; (80188e0 <input_parameter+0x278>)
 8018798:	4a53      	ldr	r2, [pc, #332]	; (80188e8 <input_parameter+0x280>)
 801879a:	63da      	str	r2, [r3, #60]	; 0x3c
	speed300_shortest.turn90_R.t_acc = 10000;
 801879c:	4b50      	ldr	r3, [pc, #320]	; (80188e0 <input_parameter+0x278>)
 801879e:	4a53      	ldr	r2, [pc, #332]	; (80188ec <input_parameter+0x284>)
 80187a0:	641a      	str	r2, [r3, #64]	; 0x40
	speed300_shortest.turn90_R.f_ofset = 76;
 80187a2:	4b4f      	ldr	r3, [pc, #316]	; (80188e0 <input_parameter+0x278>)
 80187a4:	4a52      	ldr	r2, [pc, #328]	; (80188f0 <input_parameter+0x288>)
 80187a6:	635a      	str	r2, [r3, #52]	; 0x34
	speed300_shortest.turn90_R.e_ofset = 107;
 80187a8:	4b4d      	ldr	r3, [pc, #308]	; (80188e0 <input_parameter+0x278>)
 80187aa:	4a52      	ldr	r2, [pc, #328]	; (80188f4 <input_parameter+0x28c>)
 80187ac:	639a      	str	r2, [r3, #56]	; 0x38

	speed300_shortest.turn90_L.g_speed = speed300_shortest.TurnCentervelocity;
 80187ae:	4b4c      	ldr	r3, [pc, #304]	; (80188e0 <input_parameter+0x278>)
 80187b0:	685b      	ldr	r3, [r3, #4]
 80187b2:	4a4b      	ldr	r2, [pc, #300]	; (80188e0 <input_parameter+0x278>)
 80187b4:	6453      	str	r3, [r2, #68]	; 0x44
	speed300_shortest.turn90_L.t_speed = 600;
 80187b6:	4b4a      	ldr	r3, [pc, #296]	; (80188e0 <input_parameter+0x278>)
 80187b8:	4a4b      	ldr	r2, [pc, #300]	; (80188e8 <input_parameter+0x280>)
 80187ba:	651a      	str	r2, [r3, #80]	; 0x50
	speed300_shortest.turn90_L.t_acc = 10000;
 80187bc:	4b48      	ldr	r3, [pc, #288]	; (80188e0 <input_parameter+0x278>)
 80187be:	4a4b      	ldr	r2, [pc, #300]	; (80188ec <input_parameter+0x284>)
 80187c0:	655a      	str	r2, [r3, #84]	; 0x54
	speed300_shortest.turn90_L.f_ofset = 77;
 80187c2:	4b47      	ldr	r3, [pc, #284]	; (80188e0 <input_parameter+0x278>)
 80187c4:	4a4c      	ldr	r2, [pc, #304]	; (80188f8 <input_parameter+0x290>)
 80187c6:	649a      	str	r2, [r3, #72]	; 0x48
	speed300_shortest.turn90_L.e_ofset = 103;
 80187c8:	4b45      	ldr	r3, [pc, #276]	; (80188e0 <input_parameter+0x278>)
 80187ca:	4a4c      	ldr	r2, [pc, #304]	; (80188fc <input_parameter+0x294>)
 80187cc:	64da      	str	r2, [r3, #76]	; 0x4c

	speed300_shortest.turn180_R.g_speed = speed300_shortest.TurnCentervelocity;
 80187ce:	4b44      	ldr	r3, [pc, #272]	; (80188e0 <input_parameter+0x278>)
 80187d0:	685b      	ldr	r3, [r3, #4]
 80187d2:	4a43      	ldr	r2, [pc, #268]	; (80188e0 <input_parameter+0x278>)
 80187d4:	6593      	str	r3, [r2, #88]	; 0x58
	speed300_shortest.turn180_R.t_speed = 430;
 80187d6:	4b42      	ldr	r3, [pc, #264]	; (80188e0 <input_parameter+0x278>)
 80187d8:	4a49      	ldr	r2, [pc, #292]	; (8018900 <input_parameter+0x298>)
 80187da:	665a      	str	r2, [r3, #100]	; 0x64
	speed300_shortest.turn180_R.t_acc = 8000;
 80187dc:	4b40      	ldr	r3, [pc, #256]	; (80188e0 <input_parameter+0x278>)
 80187de:	4a49      	ldr	r2, [pc, #292]	; (8018904 <input_parameter+0x29c>)
 80187e0:	669a      	str	r2, [r3, #104]	; 0x68
	speed300_shortest.turn180_R.f_ofset = 65;
 80187e2:	4b3f      	ldr	r3, [pc, #252]	; (80188e0 <input_parameter+0x278>)
 80187e4:	4a48      	ldr	r2, [pc, #288]	; (8018908 <input_parameter+0x2a0>)
 80187e6:	65da      	str	r2, [r3, #92]	; 0x5c
	speed300_shortest.turn180_R.e_ofset = 80;
 80187e8:	4b3d      	ldr	r3, [pc, #244]	; (80188e0 <input_parameter+0x278>)
 80187ea:	4a48      	ldr	r2, [pc, #288]	; (801890c <input_parameter+0x2a4>)
 80187ec:	661a      	str	r2, [r3, #96]	; 0x60

	speed300_shortest.turn180_L.g_speed = speed300_shortest.TurnCentervelocity;
 80187ee:	4b3c      	ldr	r3, [pc, #240]	; (80188e0 <input_parameter+0x278>)
 80187f0:	685b      	ldr	r3, [r3, #4]
 80187f2:	4a3b      	ldr	r2, [pc, #236]	; (80188e0 <input_parameter+0x278>)
 80187f4:	66d3      	str	r3, [r2, #108]	; 0x6c
	speed300_shortest.turn180_L.t_speed = 450;
 80187f6:	4b3a      	ldr	r3, [pc, #232]	; (80188e0 <input_parameter+0x278>)
 80187f8:	4a45      	ldr	r2, [pc, #276]	; (8018910 <input_parameter+0x2a8>)
 80187fa:	679a      	str	r2, [r3, #120]	; 0x78
	speed300_shortest.turn180_L.t_acc = 8000;
 80187fc:	4b38      	ldr	r3, [pc, #224]	; (80188e0 <input_parameter+0x278>)
 80187fe:	4a41      	ldr	r2, [pc, #260]	; (8018904 <input_parameter+0x29c>)
 8018800:	67da      	str	r2, [r3, #124]	; 0x7c
	speed300_shortest.turn180_L.f_ofset = 60;
 8018802:	4b37      	ldr	r3, [pc, #220]	; (80188e0 <input_parameter+0x278>)
 8018804:	4a43      	ldr	r2, [pc, #268]	; (8018914 <input_parameter+0x2ac>)
 8018806:	671a      	str	r2, [r3, #112]	; 0x70
	speed300_shortest.turn180_L.e_ofset = 71;
 8018808:	4b35      	ldr	r3, [pc, #212]	; (80188e0 <input_parameter+0x278>)
 801880a:	4a43      	ldr	r2, [pc, #268]	; (8018918 <input_parameter+0x2b0>)
 801880c:	675a      	str	r2, [r3, #116]	; 0x74

	speed300_shortest.turn45in_R.g_speed = speed300_shortest.TurnCentervelocity;
 801880e:	4b34      	ldr	r3, [pc, #208]	; (80188e0 <input_parameter+0x278>)
 8018810:	685b      	ldr	r3, [r3, #4]
 8018812:	4a33      	ldr	r2, [pc, #204]	; (80188e0 <input_parameter+0x278>)
 8018814:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	speed300_shortest.turn45in_R.t_speed = 600;
 8018818:	4b31      	ldr	r3, [pc, #196]	; (80188e0 <input_parameter+0x278>)
 801881a:	4a33      	ldr	r2, [pc, #204]	; (80188e8 <input_parameter+0x280>)
 801881c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed300_shortest.turn45in_R.t_acc = 10000;
 8018820:	4b2f      	ldr	r3, [pc, #188]	; (80188e0 <input_parameter+0x278>)
 8018822:	4a32      	ldr	r2, [pc, #200]	; (80188ec <input_parameter+0x284>)
 8018824:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed300_shortest.turn45in_R.f_ofset = 27;
 8018828:	4b2d      	ldr	r3, [pc, #180]	; (80188e0 <input_parameter+0x278>)
 801882a:	4a3c      	ldr	r2, [pc, #240]	; (801891c <input_parameter+0x2b4>)
 801882c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed300_shortest.turn45in_R.e_ofset = 89;
 8018830:	4b2b      	ldr	r3, [pc, #172]	; (80188e0 <input_parameter+0x278>)
 8018832:	4a3b      	ldr	r2, [pc, #236]	; (8018920 <input_parameter+0x2b8>)
 8018834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed300_shortest.turn45in_L.g_speed = speed300_shortest.TurnCentervelocity;
 8018838:	4b29      	ldr	r3, [pc, #164]	; (80188e0 <input_parameter+0x278>)
 801883a:	685b      	ldr	r3, [r3, #4]
 801883c:	4a28      	ldr	r2, [pc, #160]	; (80188e0 <input_parameter+0x278>)
 801883e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	speed300_shortest.turn45in_L.t_speed = 600;
 8018842:	4b27      	ldr	r3, [pc, #156]	; (80188e0 <input_parameter+0x278>)
 8018844:	4a28      	ldr	r2, [pc, #160]	; (80188e8 <input_parameter+0x280>)
 8018846:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed300_shortest.turn45in_L.t_acc = 10000;
 801884a:	4b25      	ldr	r3, [pc, #148]	; (80188e0 <input_parameter+0x278>)
 801884c:	4a27      	ldr	r2, [pc, #156]	; (80188ec <input_parameter+0x284>)
 801884e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed300_shortest.turn45in_L.f_ofset = 33;
 8018852:	4b23      	ldr	r3, [pc, #140]	; (80188e0 <input_parameter+0x278>)
 8018854:	4a33      	ldr	r2, [pc, #204]	; (8018924 <input_parameter+0x2bc>)
 8018856:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed300_shortest.turn45in_L.e_ofset = 90;
 801885a:	4b21      	ldr	r3, [pc, #132]	; (80188e0 <input_parameter+0x278>)
 801885c:	4a32      	ldr	r2, [pc, #200]	; (8018928 <input_parameter+0x2c0>)
 801885e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed300_shortest.turn135in_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8018862:	4b1f      	ldr	r3, [pc, #124]	; (80188e0 <input_parameter+0x278>)
 8018864:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_R.g_speed =
 8018866:	4a1e      	ldr	r2, [pc, #120]	; (80188e0 <input_parameter+0x278>)
 8018868:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	speed300_shortest.turn135in_R.t_speed = 610;
 801886c:	4b1c      	ldr	r3, [pc, #112]	; (80188e0 <input_parameter+0x278>)
 801886e:	4a2f      	ldr	r2, [pc, #188]	; (801892c <input_parameter+0x2c4>)
 8018870:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed300_shortest.turn135in_R.t_acc = 8000;
 8018874:	4b1a      	ldr	r3, [pc, #104]	; (80188e0 <input_parameter+0x278>)
 8018876:	4a23      	ldr	r2, [pc, #140]	; (8018904 <input_parameter+0x29c>)
 8018878:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed300_shortest.turn135in_R.f_ofset = 67;
 801887c:	4b18      	ldr	r3, [pc, #96]	; (80188e0 <input_parameter+0x278>)
 801887e:	4a2c      	ldr	r2, [pc, #176]	; (8018930 <input_parameter+0x2c8>)
 8018880:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed300_shortest.turn135in_R.e_ofset = 73;
 8018884:	4b16      	ldr	r3, [pc, #88]	; (80188e0 <input_parameter+0x278>)
 8018886:	4a2b      	ldr	r2, [pc, #172]	; (8018934 <input_parameter+0x2cc>)
 8018888:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed300_shortest.turn135in_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 801888c:	4b14      	ldr	r3, [pc, #80]	; (80188e0 <input_parameter+0x278>)
 801888e:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_L.g_speed =
 8018890:	4a13      	ldr	r2, [pc, #76]	; (80188e0 <input_parameter+0x278>)
 8018892:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	speed300_shortest.turn135in_L.t_speed = 610;
 8018896:	4b12      	ldr	r3, [pc, #72]	; (80188e0 <input_parameter+0x278>)
 8018898:	4a24      	ldr	r2, [pc, #144]	; (801892c <input_parameter+0x2c4>)
 801889a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed300_shortest.turn135in_L.t_acc = 8000;
 801889e:	4b10      	ldr	r3, [pc, #64]	; (80188e0 <input_parameter+0x278>)
 80188a0:	4a18      	ldr	r2, [pc, #96]	; (8018904 <input_parameter+0x29c>)
 80188a2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed300_shortest.turn135in_L.f_ofset = 67;
 80188a6:	4b0e      	ldr	r3, [pc, #56]	; (80188e0 <input_parameter+0x278>)
 80188a8:	e046      	b.n	8018938 <input_parameter+0x2d0>
 80188aa:	bf00      	nop
 80188ac:	2000f444 	.word	0x2000f444
 80188b0:	43960000 	.word	0x43960000
 80188b4:	44750000 	.word	0x44750000
 80188b8:	464b2000 	.word	0x464b2000
 80188bc:	40400000 	.word	0x40400000
 80188c0:	41c00000 	.word	0x41c00000
 80188c4:	2000f58c 	.word	0x2000f58c
 80188c8:	437a0000 	.word	0x437a0000
 80188cc:	444f8000 	.word	0x444f8000
 80188d0:	460ca000 	.word	0x460ca000
 80188d4:	41a00000 	.word	0x41a00000
 80188d8:	44368000 	.word	0x44368000
 80188dc:	41980000 	.word	0x41980000
 80188e0:	2000f6d4 	.word	0x2000f6d4
 80188e4:	43480000 	.word	0x43480000
 80188e8:	44160000 	.word	0x44160000
 80188ec:	461c4000 	.word	0x461c4000
 80188f0:	42980000 	.word	0x42980000
 80188f4:	42d60000 	.word	0x42d60000
 80188f8:	429a0000 	.word	0x429a0000
 80188fc:	42ce0000 	.word	0x42ce0000
 8018900:	43d70000 	.word	0x43d70000
 8018904:	45fa0000 	.word	0x45fa0000
 8018908:	42820000 	.word	0x42820000
 801890c:	42a00000 	.word	0x42a00000
 8018910:	43e10000 	.word	0x43e10000
 8018914:	42700000 	.word	0x42700000
 8018918:	428e0000 	.word	0x428e0000
 801891c:	41d80000 	.word	0x41d80000
 8018920:	42b20000 	.word	0x42b20000
 8018924:	42040000 	.word	0x42040000
 8018928:	42b40000 	.word	0x42b40000
 801892c:	44188000 	.word	0x44188000
 8018930:	42860000 	.word	0x42860000
 8018934:	42920000 	.word	0x42920000
 8018938:	4a99      	ldr	r2, [pc, #612]	; (8018ba0 <input_parameter+0x538>)
 801893a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed300_shortest.turn135in_L.e_ofset = 73;
 801893e:	4b99      	ldr	r3, [pc, #612]	; (8018ba4 <input_parameter+0x53c>)
 8018940:	4a99      	ldr	r2, [pc, #612]	; (8018ba8 <input_parameter+0x540>)
 8018942:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed300_shortest.turn45out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8018946:	4b97      	ldr	r3, [pc, #604]	; (8018ba4 <input_parameter+0x53c>)
 8018948:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_R.g_speed =
 801894a:	4a96      	ldr	r2, [pc, #600]	; (8018ba4 <input_parameter+0x53c>)
 801894c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	speed300_shortest.turn45out_R.t_speed = 600;
 8018950:	4b94      	ldr	r3, [pc, #592]	; (8018ba4 <input_parameter+0x53c>)
 8018952:	4a96      	ldr	r2, [pc, #600]	; (8018bac <input_parameter+0x544>)
 8018954:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed300_shortest.turn45out_R.t_acc = 10000;
 8018958:	4b92      	ldr	r3, [pc, #584]	; (8018ba4 <input_parameter+0x53c>)
 801895a:	4a95      	ldr	r2, [pc, #596]	; (8018bb0 <input_parameter+0x548>)
 801895c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed300_shortest.turn45out_R.f_ofset = 57;
 8018960:	4b90      	ldr	r3, [pc, #576]	; (8018ba4 <input_parameter+0x53c>)
 8018962:	4a94      	ldr	r2, [pc, #592]	; (8018bb4 <input_parameter+0x54c>)
 8018964:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed300_shortest.turn45out_R.e_ofset = 57;
 8018968:	4b8e      	ldr	r3, [pc, #568]	; (8018ba4 <input_parameter+0x53c>)
 801896a:	4a92      	ldr	r2, [pc, #584]	; (8018bb4 <input_parameter+0x54c>)
 801896c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed300_shortest.turn45out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8018970:	4b8c      	ldr	r3, [pc, #560]	; (8018ba4 <input_parameter+0x53c>)
 8018972:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_L.g_speed =
 8018974:	4a8b      	ldr	r2, [pc, #556]	; (8018ba4 <input_parameter+0x53c>)
 8018976:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	speed300_shortest.turn45out_L.t_speed = 600;
 801897a:	4b8a      	ldr	r3, [pc, #552]	; (8018ba4 <input_parameter+0x53c>)
 801897c:	4a8b      	ldr	r2, [pc, #556]	; (8018bac <input_parameter+0x544>)
 801897e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed300_shortest.turn45out_L.t_acc = 10000;
 8018982:	4b88      	ldr	r3, [pc, #544]	; (8018ba4 <input_parameter+0x53c>)
 8018984:	4a8a      	ldr	r2, [pc, #552]	; (8018bb0 <input_parameter+0x548>)
 8018986:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed300_shortest.turn45out_L.f_ofset = 64;
 801898a:	4b86      	ldr	r3, [pc, #536]	; (8018ba4 <input_parameter+0x53c>)
 801898c:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 8018990:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed300_shortest.turn45out_L.e_ofset = 52;
 8018994:	4b83      	ldr	r3, [pc, #524]	; (8018ba4 <input_parameter+0x53c>)
 8018996:	4a88      	ldr	r2, [pc, #544]	; (8018bb8 <input_parameter+0x550>)
 8018998:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed300_shortest.turn135out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 801899c:	4b81      	ldr	r3, [pc, #516]	; (8018ba4 <input_parameter+0x53c>)
 801899e:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_R.g_speed =
 80189a0:	4a80      	ldr	r2, [pc, #512]	; (8018ba4 <input_parameter+0x53c>)
 80189a2:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	speed300_shortest.turn135out_R.t_speed = 660;
 80189a6:	4b7f      	ldr	r3, [pc, #508]	; (8018ba4 <input_parameter+0x53c>)
 80189a8:	4a84      	ldr	r2, [pc, #528]	; (8018bbc <input_parameter+0x554>)
 80189aa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed300_shortest.turn135out_R.t_acc = 8000;
 80189ae:	4b7d      	ldr	r3, [pc, #500]	; (8018ba4 <input_parameter+0x53c>)
 80189b0:	4a83      	ldr	r2, [pc, #524]	; (8018bc0 <input_parameter+0x558>)
 80189b2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed300_shortest.turn135out_R.f_ofset = 55;
 80189b6:	4b7b      	ldr	r3, [pc, #492]	; (8018ba4 <input_parameter+0x53c>)
 80189b8:	4a82      	ldr	r2, [pc, #520]	; (8018bc4 <input_parameter+0x55c>)
 80189ba:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed300_shortest.turn135out_R.e_ofset = 100;
 80189be:	4b79      	ldr	r3, [pc, #484]	; (8018ba4 <input_parameter+0x53c>)
 80189c0:	4a81      	ldr	r2, [pc, #516]	; (8018bc8 <input_parameter+0x560>)
 80189c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed300_shortest.turn135out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 80189c6:	4b77      	ldr	r3, [pc, #476]	; (8018ba4 <input_parameter+0x53c>)
 80189c8:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_L.g_speed =
 80189ca:	4a76      	ldr	r2, [pc, #472]	; (8018ba4 <input_parameter+0x53c>)
 80189cc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	speed300_shortest.turn135out_L.t_speed = 660;
 80189d0:	4b74      	ldr	r3, [pc, #464]	; (8018ba4 <input_parameter+0x53c>)
 80189d2:	4a7a      	ldr	r2, [pc, #488]	; (8018bbc <input_parameter+0x554>)
 80189d4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed300_shortest.turn135out_L.t_acc = 8000;
 80189d8:	4b72      	ldr	r3, [pc, #456]	; (8018ba4 <input_parameter+0x53c>)
 80189da:	4a79      	ldr	r2, [pc, #484]	; (8018bc0 <input_parameter+0x558>)
 80189dc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed300_shortest.turn135out_L.f_ofset = 55;
 80189e0:	4b70      	ldr	r3, [pc, #448]	; (8018ba4 <input_parameter+0x53c>)
 80189e2:	4a78      	ldr	r2, [pc, #480]	; (8018bc4 <input_parameter+0x55c>)
 80189e4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed300_shortest.turn135out_L.e_ofset = 103;
 80189e8:	4b6e      	ldr	r3, [pc, #440]	; (8018ba4 <input_parameter+0x53c>)
 80189ea:	4a78      	ldr	r2, [pc, #480]	; (8018bcc <input_parameter+0x564>)
 80189ec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed300_shortest.V90_R.g_speed = speed300_shortest.TurnCentervelocity;
 80189f0:	4b6c      	ldr	r3, [pc, #432]	; (8018ba4 <input_parameter+0x53c>)
 80189f2:	685b      	ldr	r3, [r3, #4]
 80189f4:	4a6b      	ldr	r2, [pc, #428]	; (8018ba4 <input_parameter+0x53c>)
 80189f6:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	speed300_shortest.V90_R.t_speed = 700;
 80189fa:	4b6a      	ldr	r3, [pc, #424]	; (8018ba4 <input_parameter+0x53c>)
 80189fc:	4a74      	ldr	r2, [pc, #464]	; (8018bd0 <input_parameter+0x568>)
 80189fe:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed300_shortest.V90_R.t_acc = 11000;
 8018a02:	4b68      	ldr	r3, [pc, #416]	; (8018ba4 <input_parameter+0x53c>)
 8018a04:	4a73      	ldr	r2, [pc, #460]	; (8018bd4 <input_parameter+0x56c>)
 8018a06:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed300_shortest.V90_R.f_ofset = 35;
 8018a0a:	4b66      	ldr	r3, [pc, #408]	; (8018ba4 <input_parameter+0x53c>)
 8018a0c:	4a72      	ldr	r2, [pc, #456]	; (8018bd8 <input_parameter+0x570>)
 8018a0e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed300_shortest.V90_R.e_ofset = 56;
 8018a12:	4b64      	ldr	r3, [pc, #400]	; (8018ba4 <input_parameter+0x53c>)
 8018a14:	4a71      	ldr	r2, [pc, #452]	; (8018bdc <input_parameter+0x574>)
 8018a16:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed300_shortest.V90_L.g_speed = speed300_shortest.TurnCentervelocity;
 8018a1a:	4b62      	ldr	r3, [pc, #392]	; (8018ba4 <input_parameter+0x53c>)
 8018a1c:	685b      	ldr	r3, [r3, #4]
 8018a1e:	4a61      	ldr	r2, [pc, #388]	; (8018ba4 <input_parameter+0x53c>)
 8018a20:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	speed300_shortest.V90_L.t_speed = 700;
 8018a24:	4b5f      	ldr	r3, [pc, #380]	; (8018ba4 <input_parameter+0x53c>)
 8018a26:	4a6a      	ldr	r2, [pc, #424]	; (8018bd0 <input_parameter+0x568>)
 8018a28:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed300_shortest.V90_L.t_acc = 11000;
 8018a2c:	4b5d      	ldr	r3, [pc, #372]	; (8018ba4 <input_parameter+0x53c>)
 8018a2e:	4a69      	ldr	r2, [pc, #420]	; (8018bd4 <input_parameter+0x56c>)
 8018a30:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed300_shortest.V90_L.f_ofset = 32;
 8018a34:	4b5b      	ldr	r3, [pc, #364]	; (8018ba4 <input_parameter+0x53c>)
 8018a36:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8018a3a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed300_shortest.V90_L.e_ofset = 60;
 8018a3e:	4b59      	ldr	r3, [pc, #356]	; (8018ba4 <input_parameter+0x53c>)
 8018a40:	4a67      	ldr	r2, [pc, #412]	; (8018be0 <input_parameter+0x578>)
 8018a42:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



//********************************600********************************************
	speed600_shortest_mollifier.SlalomCentervelocity = 600;
 8018a46:	4b67      	ldr	r3, [pc, #412]	; (8018be4 <input_parameter+0x57c>)
 8018a48:	4a58      	ldr	r2, [pc, #352]	; (8018bac <input_parameter+0x544>)
 8018a4a:	601a      	str	r2, [r3, #0]
	speed600_shortest_mollifier.TurnCentervelocity = 600;
 8018a4c:	4b65      	ldr	r3, [pc, #404]	; (8018be4 <input_parameter+0x57c>)
 8018a4e:	4a57      	ldr	r2, [pc, #348]	; (8018bac <input_parameter+0x544>)
 8018a50:	605a      	str	r2, [r3, #4]

	speed600_shortest_mollifier.slalom_R.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 8018a52:	4b64      	ldr	r3, [pc, #400]	; (8018be4 <input_parameter+0x57c>)
 8018a54:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_R.g_speed =
 8018a56:	4a63      	ldr	r2, [pc, #396]	; (8018be4 <input_parameter+0x57c>)
 8018a58:	6093      	str	r3, [r2, #8]
	speed600_shortest_mollifier.slalom_R.t_speed = 1100;
 8018a5a:	4b62      	ldr	r3, [pc, #392]	; (8018be4 <input_parameter+0x57c>)
 8018a5c:	4a62      	ldr	r2, [pc, #392]	; (8018be8 <input_parameter+0x580>)
 8018a5e:	615a      	str	r2, [r3, #20]
	speed600_shortest_mollifier.slalom_R.t_acc = 60000;
 8018a60:	4b60      	ldr	r3, [pc, #384]	; (8018be4 <input_parameter+0x57c>)
 8018a62:	4a62      	ldr	r2, [pc, #392]	; (8018bec <input_parameter+0x584>)
 8018a64:	619a      	str	r2, [r3, #24]
	speed600_shortest_mollifier.slalom_R.f_ofset = 5;
 8018a66:	4b5f      	ldr	r3, [pc, #380]	; (8018be4 <input_parameter+0x57c>)
 8018a68:	4a61      	ldr	r2, [pc, #388]	; (8018bf0 <input_parameter+0x588>)
 8018a6a:	60da      	str	r2, [r3, #12]
	speed600_shortest_mollifier.slalom_R.e_ofset = 28;
 8018a6c:	4b5d      	ldr	r3, [pc, #372]	; (8018be4 <input_parameter+0x57c>)
 8018a6e:	4a61      	ldr	r2, [pc, #388]	; (8018bf4 <input_parameter+0x58c>)
 8018a70:	611a      	str	r2, [r3, #16]

	speed600_shortest_mollifier.slalom_L.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 8018a72:	4b5c      	ldr	r3, [pc, #368]	; (8018be4 <input_parameter+0x57c>)
 8018a74:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_L.g_speed =
 8018a76:	4a5b      	ldr	r2, [pc, #364]	; (8018be4 <input_parameter+0x57c>)
 8018a78:	61d3      	str	r3, [r2, #28]
	speed600_shortest_mollifier.slalom_L.t_speed = 1100;
 8018a7a:	4b5a      	ldr	r3, [pc, #360]	; (8018be4 <input_parameter+0x57c>)
 8018a7c:	4a5a      	ldr	r2, [pc, #360]	; (8018be8 <input_parameter+0x580>)
 8018a7e:	629a      	str	r2, [r3, #40]	; 0x28
	speed600_shortest_mollifier.slalom_L.t_acc = 60000;
 8018a80:	4b58      	ldr	r3, [pc, #352]	; (8018be4 <input_parameter+0x57c>)
 8018a82:	4a5a      	ldr	r2, [pc, #360]	; (8018bec <input_parameter+0x584>)
 8018a84:	62da      	str	r2, [r3, #44]	; 0x2c
	speed600_shortest_mollifier.slalom_L.f_ofset = 5;
 8018a86:	4b57      	ldr	r3, [pc, #348]	; (8018be4 <input_parameter+0x57c>)
 8018a88:	4a59      	ldr	r2, [pc, #356]	; (8018bf0 <input_parameter+0x588>)
 8018a8a:	621a      	str	r2, [r3, #32]
	speed600_shortest_mollifier.slalom_L.e_ofset = 32;
 8018a8c:	4b55      	ldr	r3, [pc, #340]	; (8018be4 <input_parameter+0x57c>)
 8018a8e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8018a92:	625a      	str	r2, [r3, #36]	; 0x24

	speed600_shortest_mollifier.turn90_R.g_speed = 600;
 8018a94:	4b53      	ldr	r3, [pc, #332]	; (8018be4 <input_parameter+0x57c>)
 8018a96:	4a45      	ldr	r2, [pc, #276]	; (8018bac <input_parameter+0x544>)
 8018a98:	631a      	str	r2, [r3, #48]	; 0x30
	speed600_shortest_mollifier.turn90_R.t_speed = 950;
 8018a9a:	4b52      	ldr	r3, [pc, #328]	; (8018be4 <input_parameter+0x57c>)
 8018a9c:	4a56      	ldr	r2, [pc, #344]	; (8018bf8 <input_parameter+0x590>)
 8018a9e:	63da      	str	r2, [r3, #60]	; 0x3c
	speed600_shortest_mollifier.turn90_R.t_acc = 15000;
 8018aa0:	4b50      	ldr	r3, [pc, #320]	; (8018be4 <input_parameter+0x57c>)
 8018aa2:	4a56      	ldr	r2, [pc, #344]	; (8018bfc <input_parameter+0x594>)
 8018aa4:	641a      	str	r2, [r3, #64]	; 0x40
	speed600_shortest_mollifier.turn90_R.f_ofset = 31;
 8018aa6:	4b4f      	ldr	r3, [pc, #316]	; (8018be4 <input_parameter+0x57c>)
 8018aa8:	4a55      	ldr	r2, [pc, #340]	; (8018c00 <input_parameter+0x598>)
 8018aaa:	635a      	str	r2, [r3, #52]	; 0x34
	speed600_shortest_mollifier.turn90_R.e_ofset = 31;
 8018aac:	4b4d      	ldr	r3, [pc, #308]	; (8018be4 <input_parameter+0x57c>)
 8018aae:	4a54      	ldr	r2, [pc, #336]	; (8018c00 <input_parameter+0x598>)
 8018ab0:	639a      	str	r2, [r3, #56]	; 0x38

	speed600_shortest_mollifier.turn90_L.g_speed = 600;
 8018ab2:	4b4c      	ldr	r3, [pc, #304]	; (8018be4 <input_parameter+0x57c>)
 8018ab4:	4a3d      	ldr	r2, [pc, #244]	; (8018bac <input_parameter+0x544>)
 8018ab6:	645a      	str	r2, [r3, #68]	; 0x44
	speed600_shortest_mollifier.turn90_L.t_speed = 950;
 8018ab8:	4b4a      	ldr	r3, [pc, #296]	; (8018be4 <input_parameter+0x57c>)
 8018aba:	4a4f      	ldr	r2, [pc, #316]	; (8018bf8 <input_parameter+0x590>)
 8018abc:	651a      	str	r2, [r3, #80]	; 0x50
	speed600_shortest_mollifier.turn90_L.t_acc = 15000;
 8018abe:	4b49      	ldr	r3, [pc, #292]	; (8018be4 <input_parameter+0x57c>)
 8018ac0:	4a4e      	ldr	r2, [pc, #312]	; (8018bfc <input_parameter+0x594>)
 8018ac2:	655a      	str	r2, [r3, #84]	; 0x54
	speed600_shortest_mollifier.turn90_L.f_ofset = 31;
 8018ac4:	4b47      	ldr	r3, [pc, #284]	; (8018be4 <input_parameter+0x57c>)
 8018ac6:	4a4e      	ldr	r2, [pc, #312]	; (8018c00 <input_parameter+0x598>)
 8018ac8:	649a      	str	r2, [r3, #72]	; 0x48
	speed600_shortest_mollifier.turn90_L.e_ofset = 35;
 8018aca:	4b46      	ldr	r3, [pc, #280]	; (8018be4 <input_parameter+0x57c>)
 8018acc:	4a42      	ldr	r2, [pc, #264]	; (8018bd8 <input_parameter+0x570>)
 8018ace:	64da      	str	r2, [r3, #76]	; 0x4c

	speed600_shortest_mollifier.turn180_R.g_speed =600;
 8018ad0:	4b44      	ldr	r3, [pc, #272]	; (8018be4 <input_parameter+0x57c>)
 8018ad2:	4a36      	ldr	r2, [pc, #216]	; (8018bac <input_parameter+0x544>)
 8018ad4:	659a      	str	r2, [r3, #88]	; 0x58
	speed600_shortest_mollifier.turn180_R.t_speed = 840;
 8018ad6:	4b43      	ldr	r3, [pc, #268]	; (8018be4 <input_parameter+0x57c>)
 8018ad8:	4a4a      	ldr	r2, [pc, #296]	; (8018c04 <input_parameter+0x59c>)
 8018ada:	665a      	str	r2, [r3, #100]	; 0x64
	speed600_shortest_mollifier.turn180_R.t_acc = 14000;
 8018adc:	4b41      	ldr	r3, [pc, #260]	; (8018be4 <input_parameter+0x57c>)
 8018ade:	4a4a      	ldr	r2, [pc, #296]	; (8018c08 <input_parameter+0x5a0>)
 8018ae0:	669a      	str	r2, [r3, #104]	; 0x68
	speed600_shortest_mollifier.turn180_R.f_ofset = 7;
 8018ae2:	4b40      	ldr	r3, [pc, #256]	; (8018be4 <input_parameter+0x57c>)
 8018ae4:	4a49      	ldr	r2, [pc, #292]	; (8018c0c <input_parameter+0x5a4>)
 8018ae6:	65da      	str	r2, [r3, #92]	; 0x5c
	speed600_shortest_mollifier.turn180_R.e_ofset = 20;
 8018ae8:	4b3e      	ldr	r3, [pc, #248]	; (8018be4 <input_parameter+0x57c>)
 8018aea:	4a49      	ldr	r2, [pc, #292]	; (8018c10 <input_parameter+0x5a8>)
 8018aec:	661a      	str	r2, [r3, #96]	; 0x60

	speed600_shortest_mollifier.turn180_L.g_speed = 600;
 8018aee:	4b3d      	ldr	r3, [pc, #244]	; (8018be4 <input_parameter+0x57c>)
 8018af0:	4a2e      	ldr	r2, [pc, #184]	; (8018bac <input_parameter+0x544>)
 8018af2:	66da      	str	r2, [r3, #108]	; 0x6c
	speed600_shortest_mollifier.turn180_L.t_speed = 820;
 8018af4:	4b3b      	ldr	r3, [pc, #236]	; (8018be4 <input_parameter+0x57c>)
 8018af6:	4a47      	ldr	r2, [pc, #284]	; (8018c14 <input_parameter+0x5ac>)
 8018af8:	679a      	str	r2, [r3, #120]	; 0x78
	speed600_shortest_mollifier.turn180_L.t_acc = 14000;
 8018afa:	4b3a      	ldr	r3, [pc, #232]	; (8018be4 <input_parameter+0x57c>)
 8018afc:	4a42      	ldr	r2, [pc, #264]	; (8018c08 <input_parameter+0x5a0>)
 8018afe:	67da      	str	r2, [r3, #124]	; 0x7c
	speed600_shortest_mollifier.turn180_L.f_ofset = 7;
 8018b00:	4b38      	ldr	r3, [pc, #224]	; (8018be4 <input_parameter+0x57c>)
 8018b02:	4a42      	ldr	r2, [pc, #264]	; (8018c0c <input_parameter+0x5a4>)
 8018b04:	671a      	str	r2, [r3, #112]	; 0x70
	speed600_shortest_mollifier.turn180_L.e_ofset = 18;
 8018b06:	4b37      	ldr	r3, [pc, #220]	; (8018be4 <input_parameter+0x57c>)
 8018b08:	4a43      	ldr	r2, [pc, #268]	; (8018c18 <input_parameter+0x5b0>)
 8018b0a:	675a      	str	r2, [r3, #116]	; 0x74

	speed600_shortest_mollifier.turn45in_R.g_speed = 600;
 8018b0c:	4b35      	ldr	r3, [pc, #212]	; (8018be4 <input_parameter+0x57c>)
 8018b0e:	4a27      	ldr	r2, [pc, #156]	; (8018bac <input_parameter+0x544>)
 8018b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	speed600_shortest_mollifier.turn45in_R.t_speed = 830;
 8018b14:	4b33      	ldr	r3, [pc, #204]	; (8018be4 <input_parameter+0x57c>)
 8018b16:	4a41      	ldr	r2, [pc, #260]	; (8018c1c <input_parameter+0x5b4>)
 8018b18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed600_shortest_mollifier.turn45in_R.t_acc = 12000;
 8018b1c:	4b31      	ldr	r3, [pc, #196]	; (8018be4 <input_parameter+0x57c>)
 8018b1e:	4a40      	ldr	r2, [pc, #256]	; (8018c20 <input_parameter+0x5b8>)
 8018b20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed600_shortest_mollifier.turn45in_R.f_ofset = 13;
 8018b24:	4b2f      	ldr	r3, [pc, #188]	; (8018be4 <input_parameter+0x57c>)
 8018b26:	4a3f      	ldr	r2, [pc, #252]	; (8018c24 <input_parameter+0x5bc>)
 8018b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed600_shortest_mollifier.turn45in_R.e_ofset = 38;
 8018b2c:	4b2d      	ldr	r3, [pc, #180]	; (8018be4 <input_parameter+0x57c>)
 8018b2e:	4a3e      	ldr	r2, [pc, #248]	; (8018c28 <input_parameter+0x5c0>)
 8018b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed600_shortest_mollifier.turn45in_L.g_speed = 600;
 8018b34:	4b2b      	ldr	r3, [pc, #172]	; (8018be4 <input_parameter+0x57c>)
 8018b36:	4a1d      	ldr	r2, [pc, #116]	; (8018bac <input_parameter+0x544>)
 8018b38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	speed600_shortest_mollifier.turn45in_L.t_speed = 898;
 8018b3c:	4b29      	ldr	r3, [pc, #164]	; (8018be4 <input_parameter+0x57c>)
 8018b3e:	4a3b      	ldr	r2, [pc, #236]	; (8018c2c <input_parameter+0x5c4>)
 8018b40:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed600_shortest_mollifier.turn45in_L.t_acc = 12000;
 8018b44:	4b27      	ldr	r3, [pc, #156]	; (8018be4 <input_parameter+0x57c>)
 8018b46:	4a36      	ldr	r2, [pc, #216]	; (8018c20 <input_parameter+0x5b8>)
 8018b48:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed600_shortest_mollifier.turn45in_L.f_ofset = 12;
 8018b4c:	4b25      	ldr	r3, [pc, #148]	; (8018be4 <input_parameter+0x57c>)
 8018b4e:	4a38      	ldr	r2, [pc, #224]	; (8018c30 <input_parameter+0x5c8>)
 8018b50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed600_shortest_mollifier.turn45in_L.e_ofset = 36;
 8018b54:	4b23      	ldr	r3, [pc, #140]	; (8018be4 <input_parameter+0x57c>)
 8018b56:	4a37      	ldr	r2, [pc, #220]	; (8018c34 <input_parameter+0x5cc>)
 8018b58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed600_shortest_mollifier.turn135in_R.g_speed = 600;
 8018b5c:	4b21      	ldr	r3, [pc, #132]	; (8018be4 <input_parameter+0x57c>)
 8018b5e:	4a13      	ldr	r2, [pc, #76]	; (8018bac <input_parameter+0x544>)
 8018b60:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	speed600_shortest_mollifier.turn135in_R.t_speed = 940;
 8018b64:	4b1f      	ldr	r3, [pc, #124]	; (8018be4 <input_parameter+0x57c>)
 8018b66:	4a34      	ldr	r2, [pc, #208]	; (8018c38 <input_parameter+0x5d0>)
 8018b68:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed600_shortest_mollifier.turn135in_R.t_acc = 14000;
 8018b6c:	4b1d      	ldr	r3, [pc, #116]	; (8018be4 <input_parameter+0x57c>)
 8018b6e:	4a26      	ldr	r2, [pc, #152]	; (8018c08 <input_parameter+0x5a0>)
 8018b70:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed600_shortest_mollifier.turn135in_R.f_ofset = 9.5;
 8018b74:	4b1b      	ldr	r3, [pc, #108]	; (8018be4 <input_parameter+0x57c>)
 8018b76:	4a31      	ldr	r2, [pc, #196]	; (8018c3c <input_parameter+0x5d4>)
 8018b78:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed600_shortest_mollifier.turn135in_R.e_ofset = 36;
 8018b7c:	4b19      	ldr	r3, [pc, #100]	; (8018be4 <input_parameter+0x57c>)
 8018b7e:	4a2d      	ldr	r2, [pc, #180]	; (8018c34 <input_parameter+0x5cc>)
 8018b80:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed600_shortest_mollifier.turn135in_L.g_speed = 600;
 8018b84:	4b17      	ldr	r3, [pc, #92]	; (8018be4 <input_parameter+0x57c>)
 8018b86:	4a09      	ldr	r2, [pc, #36]	; (8018bac <input_parameter+0x544>)
 8018b88:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	speed600_shortest_mollifier.turn135in_L.t_speed = 900;
 8018b8c:	4b15      	ldr	r3, [pc, #84]	; (8018be4 <input_parameter+0x57c>)
 8018b8e:	4a2c      	ldr	r2, [pc, #176]	; (8018c40 <input_parameter+0x5d8>)
 8018b90:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed600_shortest_mollifier.turn135in_L.t_acc = 14000;
 8018b94:	4b13      	ldr	r3, [pc, #76]	; (8018be4 <input_parameter+0x57c>)
 8018b96:	4a1c      	ldr	r2, [pc, #112]	; (8018c08 <input_parameter+0x5a0>)
 8018b98:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8018b9c:	e052      	b.n	8018c44 <input_parameter+0x5dc>
 8018b9e:	bf00      	nop
 8018ba0:	42860000 	.word	0x42860000
 8018ba4:	2000f6d4 	.word	0x2000f6d4
 8018ba8:	42920000 	.word	0x42920000
 8018bac:	44160000 	.word	0x44160000
 8018bb0:	461c4000 	.word	0x461c4000
 8018bb4:	42640000 	.word	0x42640000
 8018bb8:	42500000 	.word	0x42500000
 8018bbc:	44250000 	.word	0x44250000
 8018bc0:	45fa0000 	.word	0x45fa0000
 8018bc4:	425c0000 	.word	0x425c0000
 8018bc8:	42c80000 	.word	0x42c80000
 8018bcc:	42ce0000 	.word	0x42ce0000
 8018bd0:	442f0000 	.word	0x442f0000
 8018bd4:	462be000 	.word	0x462be000
 8018bd8:	420c0000 	.word	0x420c0000
 8018bdc:	42600000 	.word	0x42600000
 8018be0:	42700000 	.word	0x42700000
 8018be4:	2000f81c 	.word	0x2000f81c
 8018be8:	44898000 	.word	0x44898000
 8018bec:	476a6000 	.word	0x476a6000
 8018bf0:	40a00000 	.word	0x40a00000
 8018bf4:	41e00000 	.word	0x41e00000
 8018bf8:	446d8000 	.word	0x446d8000
 8018bfc:	466a6000 	.word	0x466a6000
 8018c00:	41f80000 	.word	0x41f80000
 8018c04:	44520000 	.word	0x44520000
 8018c08:	465ac000 	.word	0x465ac000
 8018c0c:	40e00000 	.word	0x40e00000
 8018c10:	41a00000 	.word	0x41a00000
 8018c14:	444d0000 	.word	0x444d0000
 8018c18:	41900000 	.word	0x41900000
 8018c1c:	444f8000 	.word	0x444f8000
 8018c20:	463b8000 	.word	0x463b8000
 8018c24:	41500000 	.word	0x41500000
 8018c28:	42180000 	.word	0x42180000
 8018c2c:	44608000 	.word	0x44608000
 8018c30:	41400000 	.word	0x41400000
 8018c34:	42100000 	.word	0x42100000
 8018c38:	446b0000 	.word	0x446b0000
 8018c3c:	41180000 	.word	0x41180000
 8018c40:	44610000 	.word	0x44610000
	speed600_shortest_mollifier.turn135in_L.f_ofset = 8;
 8018c44:	4b9d      	ldr	r3, [pc, #628]	; (8018ebc <input_parameter+0x854>)
 8018c46:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8018c4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed600_shortest_mollifier.turn135in_L.e_ofset = 34;
 8018c4e:	4b9b      	ldr	r3, [pc, #620]	; (8018ebc <input_parameter+0x854>)
 8018c50:	4a9b      	ldr	r2, [pc, #620]	; (8018ec0 <input_parameter+0x858>)
 8018c52:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed600_shortest_mollifier.turn45out_R.g_speed = 600;
 8018c56:	4b99      	ldr	r3, [pc, #612]	; (8018ebc <input_parameter+0x854>)
 8018c58:	4a9a      	ldr	r2, [pc, #616]	; (8018ec4 <input_parameter+0x85c>)
 8018c5a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	speed600_shortest_mollifier.turn45out_R.t_speed = 720;
 8018c5e:	4b97      	ldr	r3, [pc, #604]	; (8018ebc <input_parameter+0x854>)
 8018c60:	4a99      	ldr	r2, [pc, #612]	; (8018ec8 <input_parameter+0x860>)
 8018c62:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed600_shortest_mollifier.turn45out_R.t_acc = 12000;
 8018c66:	4b95      	ldr	r3, [pc, #596]	; (8018ebc <input_parameter+0x854>)
 8018c68:	4a98      	ldr	r2, [pc, #608]	; (8018ecc <input_parameter+0x864>)
 8018c6a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed600_shortest_mollifier.turn45out_R.f_ofset = 43;
 8018c6e:	4b93      	ldr	r3, [pc, #588]	; (8018ebc <input_parameter+0x854>)
 8018c70:	4a97      	ldr	r2, [pc, #604]	; (8018ed0 <input_parameter+0x868>)
 8018c72:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed600_shortest_mollifier.turn45out_R.e_ofset = 22;
 8018c76:	4b91      	ldr	r3, [pc, #580]	; (8018ebc <input_parameter+0x854>)
 8018c78:	4a96      	ldr	r2, [pc, #600]	; (8018ed4 <input_parameter+0x86c>)
 8018c7a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed600_shortest_mollifier.turn45out_L.g_speed = 600;
 8018c7e:	4b8f      	ldr	r3, [pc, #572]	; (8018ebc <input_parameter+0x854>)
 8018c80:	4a90      	ldr	r2, [pc, #576]	; (8018ec4 <input_parameter+0x85c>)
 8018c82:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	speed600_shortest_mollifier.turn45out_L.t_speed = 750;
 8018c86:	4b8d      	ldr	r3, [pc, #564]	; (8018ebc <input_parameter+0x854>)
 8018c88:	4a93      	ldr	r2, [pc, #588]	; (8018ed8 <input_parameter+0x870>)
 8018c8a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed600_shortest_mollifier.turn45out_L.t_acc = 12000;
 8018c8e:	4b8b      	ldr	r3, [pc, #556]	; (8018ebc <input_parameter+0x854>)
 8018c90:	4a8e      	ldr	r2, [pc, #568]	; (8018ecc <input_parameter+0x864>)
 8018c92:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed600_shortest_mollifier.turn45out_L.f_ofset = 40;
 8018c96:	4b89      	ldr	r3, [pc, #548]	; (8018ebc <input_parameter+0x854>)
 8018c98:	4a90      	ldr	r2, [pc, #576]	; (8018edc <input_parameter+0x874>)
 8018c9a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed600_shortest_mollifier.turn45out_L.e_ofset = 24;
 8018c9e:	4b87      	ldr	r3, [pc, #540]	; (8018ebc <input_parameter+0x854>)
 8018ca0:	4a8f      	ldr	r2, [pc, #572]	; (8018ee0 <input_parameter+0x878>)
 8018ca2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed600_shortest_mollifier.turn135out_R.g_speed = 600;
 8018ca6:	4b85      	ldr	r3, [pc, #532]	; (8018ebc <input_parameter+0x854>)
 8018ca8:	4a86      	ldr	r2, [pc, #536]	; (8018ec4 <input_parameter+0x85c>)
 8018caa:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	speed600_shortest_mollifier.turn135out_R.t_speed = 920;
 8018cae:	4b83      	ldr	r3, [pc, #524]	; (8018ebc <input_parameter+0x854>)
 8018cb0:	4a8c      	ldr	r2, [pc, #560]	; (8018ee4 <input_parameter+0x87c>)
 8018cb2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed600_shortest_mollifier.turn135out_R.t_acc = 15000;
 8018cb6:	4b81      	ldr	r3, [pc, #516]	; (8018ebc <input_parameter+0x854>)
 8018cb8:	4a8b      	ldr	r2, [pc, #556]	; (8018ee8 <input_parameter+0x880>)
 8018cba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed600_shortest_mollifier.turn135out_R.f_ofset = 5;
 8018cbe:	4b7f      	ldr	r3, [pc, #508]	; (8018ebc <input_parameter+0x854>)
 8018cc0:	4a8a      	ldr	r2, [pc, #552]	; (8018eec <input_parameter+0x884>)
 8018cc2:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed600_shortest_mollifier.turn135out_R.e_ofset = 22;
 8018cc6:	4b7d      	ldr	r3, [pc, #500]	; (8018ebc <input_parameter+0x854>)
 8018cc8:	4a82      	ldr	r2, [pc, #520]	; (8018ed4 <input_parameter+0x86c>)
 8018cca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed600_shortest_mollifier.turn135out_L.g_speed = 600;
 8018cce:	4b7b      	ldr	r3, [pc, #492]	; (8018ebc <input_parameter+0x854>)
 8018cd0:	4a7c      	ldr	r2, [pc, #496]	; (8018ec4 <input_parameter+0x85c>)
 8018cd2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	speed600_shortest_mollifier.turn135out_L.t_speed = 890;
 8018cd6:	4b79      	ldr	r3, [pc, #484]	; (8018ebc <input_parameter+0x854>)
 8018cd8:	4a85      	ldr	r2, [pc, #532]	; (8018ef0 <input_parameter+0x888>)
 8018cda:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed600_shortest_mollifier.turn135out_L.t_acc = 14000;
 8018cde:	4b77      	ldr	r3, [pc, #476]	; (8018ebc <input_parameter+0x854>)
 8018ce0:	4a84      	ldr	r2, [pc, #528]	; (8018ef4 <input_parameter+0x88c>)
 8018ce2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed600_shortest_mollifier.turn135out_L.f_ofset = 8;
 8018ce6:	4b75      	ldr	r3, [pc, #468]	; (8018ebc <input_parameter+0x854>)
 8018ce8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8018cec:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed600_shortest_mollifier.turn135out_L.e_ofset = 36;
 8018cf0:	4b72      	ldr	r3, [pc, #456]	; (8018ebc <input_parameter+0x854>)
 8018cf2:	4a81      	ldr	r2, [pc, #516]	; (8018ef8 <input_parameter+0x890>)
 8018cf4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed600_shortest_mollifier.V90_R.g_speed = 600;
 8018cf8:	4b70      	ldr	r3, [pc, #448]	; (8018ebc <input_parameter+0x854>)
 8018cfa:	4a72      	ldr	r2, [pc, #456]	; (8018ec4 <input_parameter+0x85c>)
 8018cfc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	speed600_shortest_mollifier.V90_R.t_speed = 940;
 8018d00:	4b6e      	ldr	r3, [pc, #440]	; (8018ebc <input_parameter+0x854>)
 8018d02:	4a7e      	ldr	r2, [pc, #504]	; (8018efc <input_parameter+0x894>)
 8018d04:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed600_shortest_mollifier.V90_R.t_acc = 15000;
 8018d08:	4b6c      	ldr	r3, [pc, #432]	; (8018ebc <input_parameter+0x854>)
 8018d0a:	4a77      	ldr	r2, [pc, #476]	; (8018ee8 <input_parameter+0x880>)
 8018d0c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed600_shortest_mollifier.V90_R.f_ofset = 17;
 8018d10:	4b6a      	ldr	r3, [pc, #424]	; (8018ebc <input_parameter+0x854>)
 8018d12:	4a7b      	ldr	r2, [pc, #492]	; (8018f00 <input_parameter+0x898>)
 8018d14:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed600_shortest_mollifier.V90_R.e_ofset = 20;
 8018d18:	4b68      	ldr	r3, [pc, #416]	; (8018ebc <input_parameter+0x854>)
 8018d1a:	4a7a      	ldr	r2, [pc, #488]	; (8018f04 <input_parameter+0x89c>)
 8018d1c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed600_shortest_mollifier.V90_L.g_speed = 600;
 8018d20:	4b66      	ldr	r3, [pc, #408]	; (8018ebc <input_parameter+0x854>)
 8018d22:	4a68      	ldr	r2, [pc, #416]	; (8018ec4 <input_parameter+0x85c>)
 8018d24:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	speed600_shortest_mollifier.V90_L.t_speed = 960;
 8018d28:	4b64      	ldr	r3, [pc, #400]	; (8018ebc <input_parameter+0x854>)
 8018d2a:	4a77      	ldr	r2, [pc, #476]	; (8018f08 <input_parameter+0x8a0>)
 8018d2c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed600_shortest_mollifier.V90_L.t_acc = 16000;
 8018d30:	4b62      	ldr	r3, [pc, #392]	; (8018ebc <input_parameter+0x854>)
 8018d32:	4a76      	ldr	r2, [pc, #472]	; (8018f0c <input_parameter+0x8a4>)
 8018d34:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed600_shortest_mollifier.V90_L.f_ofset = 10;
 8018d38:	4b60      	ldr	r3, [pc, #384]	; (8018ebc <input_parameter+0x854>)
 8018d3a:	4a75      	ldr	r2, [pc, #468]	; (8018f10 <input_parameter+0x8a8>)
 8018d3c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed600_shortest_mollifier.V90_L.e_ofset = 20;
 8018d40:	4b5e      	ldr	r3, [pc, #376]	; (8018ebc <input_parameter+0x854>)
 8018d42:	4a70      	ldr	r2, [pc, #448]	; (8018f04 <input_parameter+0x89c>)
 8018d44:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c




	//********************************1000********************************************
		speed1000_shortest_mollifier.SlalomCentervelocity = 1000;
 8018d48:	4b72      	ldr	r3, [pc, #456]	; (8018f14 <input_parameter+0x8ac>)
 8018d4a:	4a73      	ldr	r2, [pc, #460]	; (8018f18 <input_parameter+0x8b0>)
 8018d4c:	601a      	str	r2, [r3, #0]
		speed1000_shortest_mollifier.TurnCentervelocity = 1000;
 8018d4e:	4b71      	ldr	r3, [pc, #452]	; (8018f14 <input_parameter+0x8ac>)
 8018d50:	4a71      	ldr	r2, [pc, #452]	; (8018f18 <input_parameter+0x8b0>)
 8018d52:	605a      	str	r2, [r3, #4]

		speed1000_shortest_mollifier.slalom_R.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 8018d54:	4b6f      	ldr	r3, [pc, #444]	; (8018f14 <input_parameter+0x8ac>)
 8018d56:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_R.g_speed =
 8018d58:	4a6e      	ldr	r2, [pc, #440]	; (8018f14 <input_parameter+0x8ac>)
 8018d5a:	6093      	str	r3, [r2, #8]
		speed1000_shortest_mollifier.slalom_R.t_speed = 1100;
 8018d5c:	4b6d      	ldr	r3, [pc, #436]	; (8018f14 <input_parameter+0x8ac>)
 8018d5e:	4a6f      	ldr	r2, [pc, #444]	; (8018f1c <input_parameter+0x8b4>)
 8018d60:	615a      	str	r2, [r3, #20]
		speed1000_shortest_mollifier.slalom_R.f_ofset = 5;
 8018d62:	4b6c      	ldr	r3, [pc, #432]	; (8018f14 <input_parameter+0x8ac>)
 8018d64:	4a61      	ldr	r2, [pc, #388]	; (8018eec <input_parameter+0x884>)
 8018d66:	60da      	str	r2, [r3, #12]
		speed1000_shortest_mollifier.slalom_R.e_ofset = 28;
 8018d68:	4b6a      	ldr	r3, [pc, #424]	; (8018f14 <input_parameter+0x8ac>)
 8018d6a:	4a6d      	ldr	r2, [pc, #436]	; (8018f20 <input_parameter+0x8b8>)
 8018d6c:	611a      	str	r2, [r3, #16]

		speed1000_shortest_mollifier.slalom_L.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 8018d6e:	4b69      	ldr	r3, [pc, #420]	; (8018f14 <input_parameter+0x8ac>)
 8018d70:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_L.g_speed =
 8018d72:	4a68      	ldr	r2, [pc, #416]	; (8018f14 <input_parameter+0x8ac>)
 8018d74:	61d3      	str	r3, [r2, #28]
		speed1000_shortest_mollifier.slalom_L.t_speed = 1100;
 8018d76:	4b67      	ldr	r3, [pc, #412]	; (8018f14 <input_parameter+0x8ac>)
 8018d78:	4a68      	ldr	r2, [pc, #416]	; (8018f1c <input_parameter+0x8b4>)
 8018d7a:	629a      	str	r2, [r3, #40]	; 0x28
		speed1000_shortest_mollifier.slalom_L.f_ofset = 5;
 8018d7c:	4b65      	ldr	r3, [pc, #404]	; (8018f14 <input_parameter+0x8ac>)
 8018d7e:	4a5b      	ldr	r2, [pc, #364]	; (8018eec <input_parameter+0x884>)
 8018d80:	621a      	str	r2, [r3, #32]
		speed1000_shortest_mollifier.slalom_L.e_ofset = 32;
 8018d82:	4b64      	ldr	r3, [pc, #400]	; (8018f14 <input_parameter+0x8ac>)
 8018d84:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8018d88:	625a      	str	r2, [r3, #36]	; 0x24

		speed1000_shortest_mollifier.turn90_R.g_speed = 1000;
 8018d8a:	4b62      	ldr	r3, [pc, #392]	; (8018f14 <input_parameter+0x8ac>)
 8018d8c:	4a62      	ldr	r2, [pc, #392]	; (8018f18 <input_parameter+0x8b0>)
 8018d8e:	631a      	str	r2, [r3, #48]	; 0x30
		speed1000_shortest_mollifier.turn90_R.t_speed = 1450;
 8018d90:	4b60      	ldr	r3, [pc, #384]	; (8018f14 <input_parameter+0x8ac>)
 8018d92:	4a64      	ldr	r2, [pc, #400]	; (8018f24 <input_parameter+0x8bc>)
 8018d94:	63da      	str	r2, [r3, #60]	; 0x3c
		speed1000_shortest_mollifier.turn90_R.f_ofset = 29;
 8018d96:	4b5f      	ldr	r3, [pc, #380]	; (8018f14 <input_parameter+0x8ac>)
 8018d98:	4a63      	ldr	r2, [pc, #396]	; (8018f28 <input_parameter+0x8c0>)
 8018d9a:	635a      	str	r2, [r3, #52]	; 0x34
		speed1000_shortest_mollifier.turn90_R.e_ofset = 31;
 8018d9c:	4b5d      	ldr	r3, [pc, #372]	; (8018f14 <input_parameter+0x8ac>)
 8018d9e:	4a63      	ldr	r2, [pc, #396]	; (8018f2c <input_parameter+0x8c4>)
 8018da0:	639a      	str	r2, [r3, #56]	; 0x38

		speed1000_shortest_mollifier.turn90_L.g_speed = 1000;
 8018da2:	4b5c      	ldr	r3, [pc, #368]	; (8018f14 <input_parameter+0x8ac>)
 8018da4:	4a5c      	ldr	r2, [pc, #368]	; (8018f18 <input_parameter+0x8b0>)
 8018da6:	645a      	str	r2, [r3, #68]	; 0x44
		speed1000_shortest_mollifier.turn90_L.t_speed = 1450;
 8018da8:	4b5a      	ldr	r3, [pc, #360]	; (8018f14 <input_parameter+0x8ac>)
 8018daa:	4a5e      	ldr	r2, [pc, #376]	; (8018f24 <input_parameter+0x8bc>)
 8018dac:	651a      	str	r2, [r3, #80]	; 0x50
		speed1000_shortest_mollifier.turn90_L.f_ofset = 29;
 8018dae:	4b59      	ldr	r3, [pc, #356]	; (8018f14 <input_parameter+0x8ac>)
 8018db0:	4a5d      	ldr	r2, [pc, #372]	; (8018f28 <input_parameter+0x8c0>)
 8018db2:	649a      	str	r2, [r3, #72]	; 0x48
		speed1000_shortest_mollifier.turn90_L.e_ofset = 35;
 8018db4:	4b57      	ldr	r3, [pc, #348]	; (8018f14 <input_parameter+0x8ac>)
 8018db6:	4a5e      	ldr	r2, [pc, #376]	; (8018f30 <input_parameter+0x8c8>)
 8018db8:	64da      	str	r2, [r3, #76]	; 0x4c

		speed1000_shortest_mollifier.turn180_R.g_speed =1000;
 8018dba:	4b56      	ldr	r3, [pc, #344]	; (8018f14 <input_parameter+0x8ac>)
 8018dbc:	4a56      	ldr	r2, [pc, #344]	; (8018f18 <input_parameter+0x8b0>)
 8018dbe:	659a      	str	r2, [r3, #88]	; 0x58
		speed1000_shortest_mollifier.turn180_R.t_speed = 1400;
 8018dc0:	4b54      	ldr	r3, [pc, #336]	; (8018f14 <input_parameter+0x8ac>)
 8018dc2:	4a5c      	ldr	r2, [pc, #368]	; (8018f34 <input_parameter+0x8cc>)
 8018dc4:	665a      	str	r2, [r3, #100]	; 0x64
		speed1000_shortest_mollifier.turn180_R.f_ofset = 17;
 8018dc6:	4b53      	ldr	r3, [pc, #332]	; (8018f14 <input_parameter+0x8ac>)
 8018dc8:	4a4d      	ldr	r2, [pc, #308]	; (8018f00 <input_parameter+0x898>)
 8018dca:	65da      	str	r2, [r3, #92]	; 0x5c
		speed1000_shortest_mollifier.turn180_R.e_ofset = 20;
 8018dcc:	4b51      	ldr	r3, [pc, #324]	; (8018f14 <input_parameter+0x8ac>)
 8018dce:	4a4d      	ldr	r2, [pc, #308]	; (8018f04 <input_parameter+0x89c>)
 8018dd0:	661a      	str	r2, [r3, #96]	; 0x60

		speed1000_shortest_mollifier.turn180_L.g_speed = 1000;
 8018dd2:	4b50      	ldr	r3, [pc, #320]	; (8018f14 <input_parameter+0x8ac>)
 8018dd4:	4a50      	ldr	r2, [pc, #320]	; (8018f18 <input_parameter+0x8b0>)
 8018dd6:	66da      	str	r2, [r3, #108]	; 0x6c
		speed1000_shortest_mollifier.turn180_L.t_speed = 1400;
 8018dd8:	4b4e      	ldr	r3, [pc, #312]	; (8018f14 <input_parameter+0x8ac>)
 8018dda:	4a56      	ldr	r2, [pc, #344]	; (8018f34 <input_parameter+0x8cc>)
 8018ddc:	679a      	str	r2, [r3, #120]	; 0x78
		speed1000_shortest_mollifier.turn180_L.f_ofset = 17;
 8018dde:	4b4d      	ldr	r3, [pc, #308]	; (8018f14 <input_parameter+0x8ac>)
 8018de0:	4a47      	ldr	r2, [pc, #284]	; (8018f00 <input_parameter+0x898>)
 8018de2:	671a      	str	r2, [r3, #112]	; 0x70
		speed1000_shortest_mollifier.turn180_L.e_ofset = 18;
 8018de4:	4b4b      	ldr	r3, [pc, #300]	; (8018f14 <input_parameter+0x8ac>)
 8018de6:	4a54      	ldr	r2, [pc, #336]	; (8018f38 <input_parameter+0x8d0>)
 8018de8:	675a      	str	r2, [r3, #116]	; 0x74

		speed1000_shortest_mollifier.turn45in_R.g_speed = 1000;
 8018dea:	4b4a      	ldr	r3, [pc, #296]	; (8018f14 <input_parameter+0x8ac>)
 8018dec:	4a4a      	ldr	r2, [pc, #296]	; (8018f18 <input_parameter+0x8b0>)
 8018dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		speed1000_shortest_mollifier.turn45in_R.t_speed = 1300;
 8018df2:	4b48      	ldr	r3, [pc, #288]	; (8018f14 <input_parameter+0x8ac>)
 8018df4:	4a51      	ldr	r2, [pc, #324]	; (8018f3c <input_parameter+0x8d4>)
 8018df6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		speed1000_shortest_mollifier.turn45in_R.f_ofset = 18;
 8018dfa:	4b46      	ldr	r3, [pc, #280]	; (8018f14 <input_parameter+0x8ac>)
 8018dfc:	4a4e      	ldr	r2, [pc, #312]	; (8018f38 <input_parameter+0x8d0>)
 8018dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		speed1000_shortest_mollifier.turn45in_R.e_ofset = 38;
 8018e02:	4b44      	ldr	r3, [pc, #272]	; (8018f14 <input_parameter+0x8ac>)
 8018e04:	4a4e      	ldr	r2, [pc, #312]	; (8018f40 <input_parameter+0x8d8>)
 8018e06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

		speed1000_shortest_mollifier.turn45in_L.g_speed = 1000;
 8018e0a:	4b42      	ldr	r3, [pc, #264]	; (8018f14 <input_parameter+0x8ac>)
 8018e0c:	4a42      	ldr	r2, [pc, #264]	; (8018f18 <input_parameter+0x8b0>)
 8018e0e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		speed1000_shortest_mollifier.turn45in_L.t_speed = 1300;
 8018e12:	4b40      	ldr	r3, [pc, #256]	; (8018f14 <input_parameter+0x8ac>)
 8018e14:	4a49      	ldr	r2, [pc, #292]	; (8018f3c <input_parameter+0x8d4>)
 8018e16:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		speed1000_shortest_mollifier.turn45in_L.f_ofset = 17;
 8018e1a:	4b3e      	ldr	r3, [pc, #248]	; (8018f14 <input_parameter+0x8ac>)
 8018e1c:	4a38      	ldr	r2, [pc, #224]	; (8018f00 <input_parameter+0x898>)
 8018e1e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		speed1000_shortest_mollifier.turn45in_L.e_ofset = 36;
 8018e22:	4b3c      	ldr	r3, [pc, #240]	; (8018f14 <input_parameter+0x8ac>)
 8018e24:	4a34      	ldr	r2, [pc, #208]	; (8018ef8 <input_parameter+0x890>)
 8018e26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		speed1000_shortest_mollifier.turn135in_R.g_speed = 1000;
 8018e2a:	4b3a      	ldr	r3, [pc, #232]	; (8018f14 <input_parameter+0x8ac>)
 8018e2c:	4a3a      	ldr	r2, [pc, #232]	; (8018f18 <input_parameter+0x8b0>)
 8018e2e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		speed1000_shortest_mollifier.turn135in_R.t_speed = 1590;
 8018e32:	4b38      	ldr	r3, [pc, #224]	; (8018f14 <input_parameter+0x8ac>)
 8018e34:	4a43      	ldr	r2, [pc, #268]	; (8018f44 <input_parameter+0x8dc>)
 8018e36:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		speed1000_shortest_mollifier.turn135in_R.f_ofset = 17;
 8018e3a:	4b36      	ldr	r3, [pc, #216]	; (8018f14 <input_parameter+0x8ac>)
 8018e3c:	4a30      	ldr	r2, [pc, #192]	; (8018f00 <input_parameter+0x898>)
 8018e3e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		speed1000_shortest_mollifier.turn135in_R.e_ofset = 15;
 8018e42:	4b34      	ldr	r3, [pc, #208]	; (8018f14 <input_parameter+0x8ac>)
 8018e44:	4a40      	ldr	r2, [pc, #256]	; (8018f48 <input_parameter+0x8e0>)
 8018e46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		speed1000_shortest_mollifier.turn135in_L.g_speed = 1000;
 8018e4a:	4b32      	ldr	r3, [pc, #200]	; (8018f14 <input_parameter+0x8ac>)
 8018e4c:	4a32      	ldr	r2, [pc, #200]	; (8018f18 <input_parameter+0x8b0>)
 8018e4e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		speed1000_shortest_mollifier.turn135in_L.t_speed = 1560;
 8018e52:	4b30      	ldr	r3, [pc, #192]	; (8018f14 <input_parameter+0x8ac>)
 8018e54:	4a3d      	ldr	r2, [pc, #244]	; (8018f4c <input_parameter+0x8e4>)
 8018e56:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		speed1000_shortest_mollifier.turn135in_L.f_ofset = 14;
 8018e5a:	4b2e      	ldr	r3, [pc, #184]	; (8018f14 <input_parameter+0x8ac>)
 8018e5c:	4a3c      	ldr	r2, [pc, #240]	; (8018f50 <input_parameter+0x8e8>)
 8018e5e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		speed1000_shortest_mollifier.turn135in_L.e_ofset = 12;
 8018e62:	4b2c      	ldr	r3, [pc, #176]	; (8018f14 <input_parameter+0x8ac>)
 8018e64:	4a3b      	ldr	r2, [pc, #236]	; (8018f54 <input_parameter+0x8ec>)
 8018e66:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

		speed1000_shortest_mollifier.turn45out_R.g_speed = 1000;
 8018e6a:	4b2a      	ldr	r3, [pc, #168]	; (8018f14 <input_parameter+0x8ac>)
 8018e6c:	4a2a      	ldr	r2, [pc, #168]	; (8018f18 <input_parameter+0x8b0>)
 8018e6e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		speed1000_shortest_mollifier.turn45out_R.t_speed = 1300;
 8018e72:	4b28      	ldr	r3, [pc, #160]	; (8018f14 <input_parameter+0x8ac>)
 8018e74:	4a31      	ldr	r2, [pc, #196]	; (8018f3c <input_parameter+0x8d4>)
 8018e76:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		speed1000_shortest_mollifier.turn45out_R.f_ofset = 38;
 8018e7a:	4b26      	ldr	r3, [pc, #152]	; (8018f14 <input_parameter+0x8ac>)
 8018e7c:	4a30      	ldr	r2, [pc, #192]	; (8018f40 <input_parameter+0x8d8>)
 8018e7e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		speed1000_shortest_mollifier.turn45out_R.e_ofset = 22;
 8018e82:	4b24      	ldr	r3, [pc, #144]	; (8018f14 <input_parameter+0x8ac>)
 8018e84:	4a13      	ldr	r2, [pc, #76]	; (8018ed4 <input_parameter+0x86c>)
 8018e86:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

		speed1000_shortest_mollifier.turn45out_L.g_speed = 1000;
 8018e8a:	4b22      	ldr	r3, [pc, #136]	; (8018f14 <input_parameter+0x8ac>)
 8018e8c:	4a22      	ldr	r2, [pc, #136]	; (8018f18 <input_parameter+0x8b0>)
 8018e8e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		speed1000_shortest_mollifier.turn45out_L.t_speed = 1300;
 8018e92:	4b20      	ldr	r3, [pc, #128]	; (8018f14 <input_parameter+0x8ac>)
 8018e94:	4a29      	ldr	r2, [pc, #164]	; (8018f3c <input_parameter+0x8d4>)
 8018e96:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		speed1000_shortest_mollifier.turn45out_L.f_ofset = 30;
 8018e9a:	4b1e      	ldr	r3, [pc, #120]	; (8018f14 <input_parameter+0x8ac>)
 8018e9c:	4a2e      	ldr	r2, [pc, #184]	; (8018f58 <input_parameter+0x8f0>)
 8018e9e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		speed1000_shortest_mollifier.turn45out_L.e_ofset = 24;
 8018ea2:	4b1c      	ldr	r3, [pc, #112]	; (8018f14 <input_parameter+0x8ac>)
 8018ea4:	4a0e      	ldr	r2, [pc, #56]	; (8018ee0 <input_parameter+0x878>)
 8018ea6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

		speed1000_shortest_mollifier.turn135out_R.g_speed = 1000;
 8018eaa:	4b1a      	ldr	r3, [pc, #104]	; (8018f14 <input_parameter+0x8ac>)
 8018eac:	4a1a      	ldr	r2, [pc, #104]	; (8018f18 <input_parameter+0x8b0>)
 8018eae:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
		speed1000_shortest_mollifier.turn135out_R.t_speed = 1660;
 8018eb2:	4b18      	ldr	r3, [pc, #96]	; (8018f14 <input_parameter+0x8ac>)
 8018eb4:	4a29      	ldr	r2, [pc, #164]	; (8018f5c <input_parameter+0x8f4>)
 8018eb6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8018eba:	e051      	b.n	8018f60 <input_parameter+0x8f8>
 8018ebc:	2000f81c 	.word	0x2000f81c
 8018ec0:	42080000 	.word	0x42080000
 8018ec4:	44160000 	.word	0x44160000
 8018ec8:	44340000 	.word	0x44340000
 8018ecc:	463b8000 	.word	0x463b8000
 8018ed0:	422c0000 	.word	0x422c0000
 8018ed4:	41b00000 	.word	0x41b00000
 8018ed8:	443b8000 	.word	0x443b8000
 8018edc:	42200000 	.word	0x42200000
 8018ee0:	41c00000 	.word	0x41c00000
 8018ee4:	44660000 	.word	0x44660000
 8018ee8:	466a6000 	.word	0x466a6000
 8018eec:	40a00000 	.word	0x40a00000
 8018ef0:	445e8000 	.word	0x445e8000
 8018ef4:	465ac000 	.word	0x465ac000
 8018ef8:	42100000 	.word	0x42100000
 8018efc:	446b0000 	.word	0x446b0000
 8018f00:	41880000 	.word	0x41880000
 8018f04:	41a00000 	.word	0x41a00000
 8018f08:	44700000 	.word	0x44700000
 8018f0c:	467a0000 	.word	0x467a0000
 8018f10:	41200000 	.word	0x41200000
 8018f14:	2000f964 	.word	0x2000f964
 8018f18:	447a0000 	.word	0x447a0000
 8018f1c:	44898000 	.word	0x44898000
 8018f20:	41e00000 	.word	0x41e00000
 8018f24:	44b54000 	.word	0x44b54000
 8018f28:	41e80000 	.word	0x41e80000
 8018f2c:	41f80000 	.word	0x41f80000
 8018f30:	420c0000 	.word	0x420c0000
 8018f34:	44af0000 	.word	0x44af0000
 8018f38:	41900000 	.word	0x41900000
 8018f3c:	44a28000 	.word	0x44a28000
 8018f40:	42180000 	.word	0x42180000
 8018f44:	44c6c000 	.word	0x44c6c000
 8018f48:	41700000 	.word	0x41700000
 8018f4c:	44c30000 	.word	0x44c30000
 8018f50:	41600000 	.word	0x41600000
 8018f54:	41400000 	.word	0x41400000
 8018f58:	41f00000 	.word	0x41f00000
 8018f5c:	44cf8000 	.word	0x44cf8000
		speed1000_shortest_mollifier.turn135out_R.f_ofset = 16;
 8018f60:	4b9e      	ldr	r3, [pc, #632]	; (80191dc <input_parameter+0xb74>)
 8018f62:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8018f66:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		speed1000_shortest_mollifier.turn135out_R.e_ofset = 22;
 8018f6a:	4b9c      	ldr	r3, [pc, #624]	; (80191dc <input_parameter+0xb74>)
 8018f6c:	4a9c      	ldr	r2, [pc, #624]	; (80191e0 <input_parameter+0xb78>)
 8018f6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		speed1000_shortest_mollifier.turn135out_L.g_speed = 1000;
 8018f72:	4b9a      	ldr	r3, [pc, #616]	; (80191dc <input_parameter+0xb74>)
 8018f74:	4a9b      	ldr	r2, [pc, #620]	; (80191e4 <input_parameter+0xb7c>)
 8018f76:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		speed1000_shortest_mollifier.turn135out_L.t_speed = 1660;
 8018f7a:	4b98      	ldr	r3, [pc, #608]	; (80191dc <input_parameter+0xb74>)
 8018f7c:	4a9a      	ldr	r2, [pc, #616]	; (80191e8 <input_parameter+0xb80>)
 8018f7e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		speed1000_shortest_mollifier.turn135out_L.f_ofset = 10;
 8018f82:	4b96      	ldr	r3, [pc, #600]	; (80191dc <input_parameter+0xb74>)
 8018f84:	4a99      	ldr	r2, [pc, #612]	; (80191ec <input_parameter+0xb84>)
 8018f86:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		speed1000_shortest_mollifier.turn135out_L.e_ofset = 30;
 8018f8a:	4b94      	ldr	r3, [pc, #592]	; (80191dc <input_parameter+0xb74>)
 8018f8c:	4a98      	ldr	r2, [pc, #608]	; (80191f0 <input_parameter+0xb88>)
 8018f8e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		speed1000_shortest_mollifier.V90_R.g_speed = 1000;
 8018f92:	4b92      	ldr	r3, [pc, #584]	; (80191dc <input_parameter+0xb74>)
 8018f94:	4a93      	ldr	r2, [pc, #588]	; (80191e4 <input_parameter+0xb7c>)
 8018f96:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		speed1000_shortest_mollifier.V90_R.t_speed = 1750;
 8018f9a:	4b90      	ldr	r3, [pc, #576]	; (80191dc <input_parameter+0xb74>)
 8018f9c:	4a95      	ldr	r2, [pc, #596]	; (80191f4 <input_parameter+0xb8c>)
 8018f9e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		speed1000_shortest_mollifier.V90_R.f_ofset = 16.5;
 8018fa2:	4b8e      	ldr	r3, [pc, #568]	; (80191dc <input_parameter+0xb74>)
 8018fa4:	4a94      	ldr	r2, [pc, #592]	; (80191f8 <input_parameter+0xb90>)
 8018fa6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		speed1000_shortest_mollifier.V90_R.e_ofset = 21;
 8018faa:	4b8c      	ldr	r3, [pc, #560]	; (80191dc <input_parameter+0xb74>)
 8018fac:	4a93      	ldr	r2, [pc, #588]	; (80191fc <input_parameter+0xb94>)
 8018fae:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

		speed1000_shortest_mollifier.V90_L.g_speed = 1000;
 8018fb2:	4b8a      	ldr	r3, [pc, #552]	; (80191dc <input_parameter+0xb74>)
 8018fb4:	4a8b      	ldr	r2, [pc, #556]	; (80191e4 <input_parameter+0xb7c>)
 8018fb6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		speed1000_shortest_mollifier.V90_L.t_speed = 1750;
 8018fba:	4b88      	ldr	r3, [pc, #544]	; (80191dc <input_parameter+0xb74>)
 8018fbc:	4a8d      	ldr	r2, [pc, #564]	; (80191f4 <input_parameter+0xb8c>)
 8018fbe:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		speed1000_shortest_mollifier.V90_L.f_ofset = 14;
 8018fc2:	4b86      	ldr	r3, [pc, #536]	; (80191dc <input_parameter+0xb74>)
 8018fc4:	4a8e      	ldr	r2, [pc, #568]	; (8019200 <input_parameter+0xb98>)
 8018fc6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		speed1000_shortest_mollifier.V90_L.e_ofset = 21;
 8018fca:	4b84      	ldr	r3, [pc, #528]	; (80191dc <input_parameter+0xb74>)
 8018fcc:	4a8b      	ldr	r2, [pc, #556]	; (80191fc <input_parameter+0xb94>)
 8018fce:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


		//********************************1200********************************************
			speed1200_shortest_mollifier.SlalomCentervelocity = 1200;
 8018fd2:	4b8c      	ldr	r3, [pc, #560]	; (8019204 <input_parameter+0xb9c>)
 8018fd4:	4a8c      	ldr	r2, [pc, #560]	; (8019208 <input_parameter+0xba0>)
 8018fd6:	601a      	str	r2, [r3, #0]
			speed1200_shortest_mollifier.TurnCentervelocity = 1200;
 8018fd8:	4b8a      	ldr	r3, [pc, #552]	; (8019204 <input_parameter+0xb9c>)
 8018fda:	4a8b      	ldr	r2, [pc, #556]	; (8019208 <input_parameter+0xba0>)
 8018fdc:	605a      	str	r2, [r3, #4]

			speed1200_shortest_mollifier.slalom_R.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 8018fde:	4b89      	ldr	r3, [pc, #548]	; (8019204 <input_parameter+0xb9c>)
 8018fe0:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_R.g_speed =
 8018fe2:	4a88      	ldr	r2, [pc, #544]	; (8019204 <input_parameter+0xb9c>)
 8018fe4:	6093      	str	r3, [r2, #8]
			speed1200_shortest_mollifier.slalom_R.t_speed = 1100;
 8018fe6:	4b87      	ldr	r3, [pc, #540]	; (8019204 <input_parameter+0xb9c>)
 8018fe8:	4a88      	ldr	r2, [pc, #544]	; (801920c <input_parameter+0xba4>)
 8018fea:	615a      	str	r2, [r3, #20]
			speed1200_shortest_mollifier.slalom_R.f_ofset = 5;
 8018fec:	4b85      	ldr	r3, [pc, #532]	; (8019204 <input_parameter+0xb9c>)
 8018fee:	4a88      	ldr	r2, [pc, #544]	; (8019210 <input_parameter+0xba8>)
 8018ff0:	60da      	str	r2, [r3, #12]
			speed1200_shortest_mollifier.slalom_R.e_ofset = 28;
 8018ff2:	4b84      	ldr	r3, [pc, #528]	; (8019204 <input_parameter+0xb9c>)
 8018ff4:	4a87      	ldr	r2, [pc, #540]	; (8019214 <input_parameter+0xbac>)
 8018ff6:	611a      	str	r2, [r3, #16]

			speed1200_shortest_mollifier.slalom_L.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 8018ff8:	4b82      	ldr	r3, [pc, #520]	; (8019204 <input_parameter+0xb9c>)
 8018ffa:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_L.g_speed =
 8018ffc:	4a81      	ldr	r2, [pc, #516]	; (8019204 <input_parameter+0xb9c>)
 8018ffe:	61d3      	str	r3, [r2, #28]
			speed1200_shortest_mollifier.slalom_L.t_speed = 1100;
 8019000:	4b80      	ldr	r3, [pc, #512]	; (8019204 <input_parameter+0xb9c>)
 8019002:	4a82      	ldr	r2, [pc, #520]	; (801920c <input_parameter+0xba4>)
 8019004:	629a      	str	r2, [r3, #40]	; 0x28
			speed1200_shortest_mollifier.slalom_L.f_ofset = 5;
 8019006:	4b7f      	ldr	r3, [pc, #508]	; (8019204 <input_parameter+0xb9c>)
 8019008:	4a81      	ldr	r2, [pc, #516]	; (8019210 <input_parameter+0xba8>)
 801900a:	621a      	str	r2, [r3, #32]
			speed1200_shortest_mollifier.slalom_L.e_ofset = 32;
 801900c:	4b7d      	ldr	r3, [pc, #500]	; (8019204 <input_parameter+0xb9c>)
 801900e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8019012:	625a      	str	r2, [r3, #36]	; 0x24

			speed1200_shortest_mollifier.turn90_R.g_speed = 1200;
 8019014:	4b7b      	ldr	r3, [pc, #492]	; (8019204 <input_parameter+0xb9c>)
 8019016:	4a7c      	ldr	r2, [pc, #496]	; (8019208 <input_parameter+0xba0>)
 8019018:	631a      	str	r2, [r3, #48]	; 0x30
			speed1200_shortest_mollifier.turn90_R.t_speed = 1510;
 801901a:	4b7a      	ldr	r3, [pc, #488]	; (8019204 <input_parameter+0xb9c>)
 801901c:	4a7e      	ldr	r2, [pc, #504]	; (8019218 <input_parameter+0xbb0>)
 801901e:	63da      	str	r2, [r3, #60]	; 0x3c
			speed1200_shortest_mollifier.turn90_R.f_ofset = 21;
 8019020:	4b78      	ldr	r3, [pc, #480]	; (8019204 <input_parameter+0xb9c>)
 8019022:	4a76      	ldr	r2, [pc, #472]	; (80191fc <input_parameter+0xb94>)
 8019024:	635a      	str	r2, [r3, #52]	; 0x34
			speed1200_shortest_mollifier.turn90_R.e_ofset = 20;
 8019026:	4b77      	ldr	r3, [pc, #476]	; (8019204 <input_parameter+0xb9c>)
 8019028:	4a7c      	ldr	r2, [pc, #496]	; (801921c <input_parameter+0xbb4>)
 801902a:	639a      	str	r2, [r3, #56]	; 0x38

			speed1200_shortest_mollifier.turn90_L.g_speed = 1200;
 801902c:	4b75      	ldr	r3, [pc, #468]	; (8019204 <input_parameter+0xb9c>)
 801902e:	4a76      	ldr	r2, [pc, #472]	; (8019208 <input_parameter+0xba0>)
 8019030:	645a      	str	r2, [r3, #68]	; 0x44
			speed1200_shortest_mollifier.turn90_L.t_speed = 1510;
 8019032:	4b74      	ldr	r3, [pc, #464]	; (8019204 <input_parameter+0xb9c>)
 8019034:	4a78      	ldr	r2, [pc, #480]	; (8019218 <input_parameter+0xbb0>)
 8019036:	651a      	str	r2, [r3, #80]	; 0x50
			speed1200_shortest_mollifier.turn90_L.f_ofset = 20;
 8019038:	4b72      	ldr	r3, [pc, #456]	; (8019204 <input_parameter+0xb9c>)
 801903a:	4a78      	ldr	r2, [pc, #480]	; (801921c <input_parameter+0xbb4>)
 801903c:	649a      	str	r2, [r3, #72]	; 0x48
			speed1200_shortest_mollifier.turn90_L.e_ofset = 25;
 801903e:	4b71      	ldr	r3, [pc, #452]	; (8019204 <input_parameter+0xb9c>)
 8019040:	4a77      	ldr	r2, [pc, #476]	; (8019220 <input_parameter+0xbb8>)
 8019042:	64da      	str	r2, [r3, #76]	; 0x4c

			speed1200_shortest_mollifier.turn180_R.g_speed =1200;
 8019044:	4b6f      	ldr	r3, [pc, #444]	; (8019204 <input_parameter+0xb9c>)
 8019046:	4a70      	ldr	r2, [pc, #448]	; (8019208 <input_parameter+0xba0>)
 8019048:	659a      	str	r2, [r3, #88]	; 0x58
			speed1200_shortest_mollifier.turn180_R.t_speed = 1650;
 801904a:	4b6e      	ldr	r3, [pc, #440]	; (8019204 <input_parameter+0xb9c>)
 801904c:	4a75      	ldr	r2, [pc, #468]	; (8019224 <input_parameter+0xbbc>)
 801904e:	665a      	str	r2, [r3, #100]	; 0x64
			speed1200_shortest_mollifier.turn180_R.f_ofset = 17;
 8019050:	4b6c      	ldr	r3, [pc, #432]	; (8019204 <input_parameter+0xb9c>)
 8019052:	4a75      	ldr	r2, [pc, #468]	; (8019228 <input_parameter+0xbc0>)
 8019054:	65da      	str	r2, [r3, #92]	; 0x5c
			speed1200_shortest_mollifier.turn180_R.e_ofset = 20;
 8019056:	4b6b      	ldr	r3, [pc, #428]	; (8019204 <input_parameter+0xb9c>)
 8019058:	4a70      	ldr	r2, [pc, #448]	; (801921c <input_parameter+0xbb4>)
 801905a:	661a      	str	r2, [r3, #96]	; 0x60

			speed1200_shortest_mollifier.turn180_L.g_speed = 1200;
 801905c:	4b69      	ldr	r3, [pc, #420]	; (8019204 <input_parameter+0xb9c>)
 801905e:	4a6a      	ldr	r2, [pc, #424]	; (8019208 <input_parameter+0xba0>)
 8019060:	66da      	str	r2, [r3, #108]	; 0x6c
			speed1200_shortest_mollifier.turn180_L.t_speed = 1650;
 8019062:	4b68      	ldr	r3, [pc, #416]	; (8019204 <input_parameter+0xb9c>)
 8019064:	4a6f      	ldr	r2, [pc, #444]	; (8019224 <input_parameter+0xbbc>)
 8019066:	679a      	str	r2, [r3, #120]	; 0x78
			speed1200_shortest_mollifier.turn180_L.f_ofset = 15;
 8019068:	4b66      	ldr	r3, [pc, #408]	; (8019204 <input_parameter+0xb9c>)
 801906a:	4a70      	ldr	r2, [pc, #448]	; (801922c <input_parameter+0xbc4>)
 801906c:	671a      	str	r2, [r3, #112]	; 0x70
			speed1200_shortest_mollifier.turn180_L.e_ofset = 8;
 801906e:	4b65      	ldr	r3, [pc, #404]	; (8019204 <input_parameter+0xb9c>)
 8019070:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8019074:	675a      	str	r2, [r3, #116]	; 0x74

			speed1200_shortest_mollifier.turn45in_R.g_speed = 1200;
 8019076:	4b63      	ldr	r3, [pc, #396]	; (8019204 <input_parameter+0xb9c>)
 8019078:	4a63      	ldr	r2, [pc, #396]	; (8019208 <input_parameter+0xba0>)
 801907a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			speed1200_shortest_mollifier.turn45in_R.t_speed = 1550;
 801907e:	4b61      	ldr	r3, [pc, #388]	; (8019204 <input_parameter+0xb9c>)
 8019080:	4a6b      	ldr	r2, [pc, #428]	; (8019230 <input_parameter+0xbc8>)
 8019082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			speed1200_shortest_mollifier.turn45in_R.f_ofset = 8;
 8019086:	4b5f      	ldr	r3, [pc, #380]	; (8019204 <input_parameter+0xb9c>)
 8019088:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801908c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			speed1200_shortest_mollifier.turn45in_R.e_ofset = 39;
 8019090:	4b5c      	ldr	r3, [pc, #368]	; (8019204 <input_parameter+0xb9c>)
 8019092:	4a68      	ldr	r2, [pc, #416]	; (8019234 <input_parameter+0xbcc>)
 8019094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

			speed1200_shortest_mollifier.turn45in_L.g_speed = 1200;
 8019098:	4b5a      	ldr	r3, [pc, #360]	; (8019204 <input_parameter+0xb9c>)
 801909a:	4a5b      	ldr	r2, [pc, #364]	; (8019208 <input_parameter+0xba0>)
 801909c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			speed1200_shortest_mollifier.turn45in_L.t_speed = 1550;
 80190a0:	4b58      	ldr	r3, [pc, #352]	; (8019204 <input_parameter+0xb9c>)
 80190a2:	4a63      	ldr	r2, [pc, #396]	; (8019230 <input_parameter+0xbc8>)
 80190a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			speed1200_shortest_mollifier.turn45in_L.f_ofset = 16;
 80190a8:	4b56      	ldr	r3, [pc, #344]	; (8019204 <input_parameter+0xb9c>)
 80190aa:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80190ae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			speed1200_shortest_mollifier.turn45in_L.e_ofset = 39;
 80190b2:	4b54      	ldr	r3, [pc, #336]	; (8019204 <input_parameter+0xb9c>)
 80190b4:	4a5f      	ldr	r2, [pc, #380]	; (8019234 <input_parameter+0xbcc>)
 80190b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

			speed1200_shortest_mollifier.turn135in_R.g_speed = 1200;
 80190ba:	4b52      	ldr	r3, [pc, #328]	; (8019204 <input_parameter+0xb9c>)
 80190bc:	4a52      	ldr	r2, [pc, #328]	; (8019208 <input_parameter+0xba0>)
 80190be:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			speed1200_shortest_mollifier.turn135in_R.t_speed = 1850;
 80190c2:	4b50      	ldr	r3, [pc, #320]	; (8019204 <input_parameter+0xb9c>)
 80190c4:	4a5c      	ldr	r2, [pc, #368]	; (8019238 <input_parameter+0xbd0>)
 80190c6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			speed1200_shortest_mollifier.turn135in_R.f_ofset = 16;
 80190ca:	4b4e      	ldr	r3, [pc, #312]	; (8019204 <input_parameter+0xb9c>)
 80190cc:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80190d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			speed1200_shortest_mollifier.turn135in_R.e_ofset = 22;
 80190d4:	4b4b      	ldr	r3, [pc, #300]	; (8019204 <input_parameter+0xb9c>)
 80190d6:	4a42      	ldr	r2, [pc, #264]	; (80191e0 <input_parameter+0xb78>)
 80190d8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

			speed1200_shortest_mollifier.turn135in_L.g_speed = 1200;
 80190dc:	4b49      	ldr	r3, [pc, #292]	; (8019204 <input_parameter+0xb9c>)
 80190de:	4a4a      	ldr	r2, [pc, #296]	; (8019208 <input_parameter+0xba0>)
 80190e0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			speed1200_shortest_mollifier.turn135in_L.t_speed = 1850;
 80190e4:	4b47      	ldr	r3, [pc, #284]	; (8019204 <input_parameter+0xb9c>)
 80190e6:	4a54      	ldr	r2, [pc, #336]	; (8019238 <input_parameter+0xbd0>)
 80190e8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
			speed1200_shortest_mollifier.turn135in_L.f_ofset = 15;
 80190ec:	4b45      	ldr	r3, [pc, #276]	; (8019204 <input_parameter+0xb9c>)
 80190ee:	4a4f      	ldr	r2, [pc, #316]	; (801922c <input_parameter+0xbc4>)
 80190f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			speed1200_shortest_mollifier.turn135in_L.e_ofset = 20;
 80190f4:	4b43      	ldr	r3, [pc, #268]	; (8019204 <input_parameter+0xb9c>)
 80190f6:	4a49      	ldr	r2, [pc, #292]	; (801921c <input_parameter+0xbb4>)
 80190f8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

			speed1200_shortest_mollifier.turn45out_R.g_speed = 1200;
 80190fc:	4b41      	ldr	r3, [pc, #260]	; (8019204 <input_parameter+0xb9c>)
 80190fe:	4a42      	ldr	r2, [pc, #264]	; (8019208 <input_parameter+0xba0>)
 8019100:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
			speed1200_shortest_mollifier.turn45out_R.t_speed = 1400;
 8019104:	4b3f      	ldr	r3, [pc, #252]	; (8019204 <input_parameter+0xb9c>)
 8019106:	4a4d      	ldr	r2, [pc, #308]	; (801923c <input_parameter+0xbd4>)
 8019108:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			speed1200_shortest_mollifier.turn45out_R.f_ofset = 33;
 801910c:	4b3d      	ldr	r3, [pc, #244]	; (8019204 <input_parameter+0xb9c>)
 801910e:	4a4c      	ldr	r2, [pc, #304]	; (8019240 <input_parameter+0xbd8>)
 8019110:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			speed1200_shortest_mollifier.turn45out_R.e_ofset = 16;
 8019114:	4b3b      	ldr	r3, [pc, #236]	; (8019204 <input_parameter+0xb9c>)
 8019116:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 801911a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

			speed1200_shortest_mollifier.turn45out_L.g_speed = 1200;
 801911e:	4b39      	ldr	r3, [pc, #228]	; (8019204 <input_parameter+0xb9c>)
 8019120:	4a39      	ldr	r2, [pc, #228]	; (8019208 <input_parameter+0xba0>)
 8019122:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			speed1200_shortest_mollifier.turn45out_L.t_speed = 1400;
 8019126:	4b37      	ldr	r3, [pc, #220]	; (8019204 <input_parameter+0xb9c>)
 8019128:	4a44      	ldr	r2, [pc, #272]	; (801923c <input_parameter+0xbd4>)
 801912a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
			speed1200_shortest_mollifier.turn45out_L.f_ofset = 24;
 801912e:	4b35      	ldr	r3, [pc, #212]	; (8019204 <input_parameter+0xb9c>)
 8019130:	4a44      	ldr	r2, [pc, #272]	; (8019244 <input_parameter+0xbdc>)
 8019132:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
			speed1200_shortest_mollifier.turn45out_L.e_ofset = 16;
 8019136:	4b33      	ldr	r3, [pc, #204]	; (8019204 <input_parameter+0xb9c>)
 8019138:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 801913c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

			speed1200_shortest_mollifier.turn135out_R.g_speed = 1200;
 8019140:	4b30      	ldr	r3, [pc, #192]	; (8019204 <input_parameter+0xb9c>)
 8019142:	4a31      	ldr	r2, [pc, #196]	; (8019208 <input_parameter+0xba0>)
 8019144:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
			speed1200_shortest_mollifier.turn135out_R.t_speed = 1850;
 8019148:	4b2e      	ldr	r3, [pc, #184]	; (8019204 <input_parameter+0xb9c>)
 801914a:	4a3b      	ldr	r2, [pc, #236]	; (8019238 <input_parameter+0xbd0>)
 801914c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			speed1200_shortest_mollifier.turn135out_R.f_ofset = 8;
 8019150:	4b2c      	ldr	r3, [pc, #176]	; (8019204 <input_parameter+0xb9c>)
 8019152:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8019156:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			speed1200_shortest_mollifier.turn135out_R.e_ofset = 30;
 801915a:	4b2a      	ldr	r3, [pc, #168]	; (8019204 <input_parameter+0xb9c>)
 801915c:	4a24      	ldr	r2, [pc, #144]	; (80191f0 <input_parameter+0xb88>)
 801915e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

			speed1200_shortest_mollifier.turn135out_L.g_speed = 1200;
 8019162:	4b28      	ldr	r3, [pc, #160]	; (8019204 <input_parameter+0xb9c>)
 8019164:	4a28      	ldr	r2, [pc, #160]	; (8019208 <input_parameter+0xba0>)
 8019166:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			speed1200_shortest_mollifier.turn135out_L.t_speed = 1850;
 801916a:	4b26      	ldr	r3, [pc, #152]	; (8019204 <input_parameter+0xb9c>)
 801916c:	4a32      	ldr	r2, [pc, #200]	; (8019238 <input_parameter+0xbd0>)
 801916e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			speed1200_shortest_mollifier.turn135out_L.f_ofset = 10;
 8019172:	4b24      	ldr	r3, [pc, #144]	; (8019204 <input_parameter+0xb9c>)
 8019174:	4a1d      	ldr	r2, [pc, #116]	; (80191ec <input_parameter+0xb84>)
 8019176:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			speed1200_shortest_mollifier.turn135out_L.e_ofset = 30;
 801917a:	4b22      	ldr	r3, [pc, #136]	; (8019204 <input_parameter+0xb9c>)
 801917c:	4a1c      	ldr	r2, [pc, #112]	; (80191f0 <input_parameter+0xb88>)
 801917e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

			speed1200_shortest_mollifier.V90_R.g_speed = 1200;
 8019182:	4b20      	ldr	r3, [pc, #128]	; (8019204 <input_parameter+0xb9c>)
 8019184:	4a20      	ldr	r2, [pc, #128]	; (8019208 <input_parameter+0xba0>)
 8019186:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			speed1200_shortest_mollifier.V90_R.t_speed = 1950;
 801918a:	4b1e      	ldr	r3, [pc, #120]	; (8019204 <input_parameter+0xb9c>)
 801918c:	4a2e      	ldr	r2, [pc, #184]	; (8019248 <input_parameter+0xbe0>)
 801918e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			speed1200_shortest_mollifier.V90_R.f_ofset = 14;
 8019192:	4b1c      	ldr	r3, [pc, #112]	; (8019204 <input_parameter+0xb9c>)
 8019194:	4a1a      	ldr	r2, [pc, #104]	; (8019200 <input_parameter+0xb98>)
 8019196:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			speed1200_shortest_mollifier.V90_R.e_ofset = 25;
 801919a:	4b1a      	ldr	r3, [pc, #104]	; (8019204 <input_parameter+0xb9c>)
 801919c:	4a20      	ldr	r2, [pc, #128]	; (8019220 <input_parameter+0xbb8>)
 801919e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

			speed1200_shortest_mollifier.V90_L.g_speed = 1200;
 80191a2:	4b18      	ldr	r3, [pc, #96]	; (8019204 <input_parameter+0xb9c>)
 80191a4:	4a18      	ldr	r2, [pc, #96]	; (8019208 <input_parameter+0xba0>)
 80191a6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
			speed1200_shortest_mollifier.V90_L.t_speed = 1950;
 80191aa:	4b16      	ldr	r3, [pc, #88]	; (8019204 <input_parameter+0xb9c>)
 80191ac:	4a26      	ldr	r2, [pc, #152]	; (8019248 <input_parameter+0xbe0>)
 80191ae:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			speed1200_shortest_mollifier.V90_L.f_ofset = 8.5;
 80191b2:	4b14      	ldr	r3, [pc, #80]	; (8019204 <input_parameter+0xb9c>)
 80191b4:	4a25      	ldr	r2, [pc, #148]	; (801924c <input_parameter+0xbe4>)
 80191b6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
			speed1200_shortest_mollifier.V90_L.e_ofset = 25;
 80191ba:	4b12      	ldr	r3, [pc, #72]	; (8019204 <input_parameter+0xb9c>)
 80191bc:	4a18      	ldr	r2, [pc, #96]	; (8019220 <input_parameter+0xbb8>)
 80191be:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

//********************************1600********************************************
				speed1600_shortest_mollifier.SlalomCentervelocity = 1500;
 80191c2:	4b23      	ldr	r3, [pc, #140]	; (8019250 <input_parameter+0xbe8>)
 80191c4:	4a23      	ldr	r2, [pc, #140]	; (8019254 <input_parameter+0xbec>)
 80191c6:	601a      	str	r2, [r3, #0]
				speed1600_shortest_mollifier.TurnCentervelocity = 1500;
 80191c8:	4b21      	ldr	r3, [pc, #132]	; (8019250 <input_parameter+0xbe8>)
 80191ca:	4a22      	ldr	r2, [pc, #136]	; (8019254 <input_parameter+0xbec>)
 80191cc:	605a      	str	r2, [r3, #4]

				speed1600_shortest_mollifier.turn90_R.g_speed = 1500;
 80191ce:	4b20      	ldr	r3, [pc, #128]	; (8019250 <input_parameter+0xbe8>)
 80191d0:	4a20      	ldr	r2, [pc, #128]	; (8019254 <input_parameter+0xbec>)
 80191d2:	631a      	str	r2, [r3, #48]	; 0x30
				speed1600_shortest_mollifier.turn90_R.t_speed = 1830;
 80191d4:	4b1e      	ldr	r3, [pc, #120]	; (8019250 <input_parameter+0xbe8>)
 80191d6:	4a20      	ldr	r2, [pc, #128]	; (8019258 <input_parameter+0xbf0>)
 80191d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80191da:	e03f      	b.n	801925c <input_parameter+0xbf4>
 80191dc:	2000f964 	.word	0x2000f964
 80191e0:	41b00000 	.word	0x41b00000
 80191e4:	447a0000 	.word	0x447a0000
 80191e8:	44cf8000 	.word	0x44cf8000
 80191ec:	41200000 	.word	0x41200000
 80191f0:	41f00000 	.word	0x41f00000
 80191f4:	44dac000 	.word	0x44dac000
 80191f8:	41840000 	.word	0x41840000
 80191fc:	41a80000 	.word	0x41a80000
 8019200:	41600000 	.word	0x41600000
 8019204:	2000faac 	.word	0x2000faac
 8019208:	44960000 	.word	0x44960000
 801920c:	44898000 	.word	0x44898000
 8019210:	40a00000 	.word	0x40a00000
 8019214:	41e00000 	.word	0x41e00000
 8019218:	44bcc000 	.word	0x44bcc000
 801921c:	41a00000 	.word	0x41a00000
 8019220:	41c80000 	.word	0x41c80000
 8019224:	44ce4000 	.word	0x44ce4000
 8019228:	41880000 	.word	0x41880000
 801922c:	41700000 	.word	0x41700000
 8019230:	44c1c000 	.word	0x44c1c000
 8019234:	421c0000 	.word	0x421c0000
 8019238:	44e74000 	.word	0x44e74000
 801923c:	44af0000 	.word	0x44af0000
 8019240:	42040000 	.word	0x42040000
 8019244:	41c00000 	.word	0x41c00000
 8019248:	44f3c000 	.word	0x44f3c000
 801924c:	41080000 	.word	0x41080000
 8019250:	2000fbf4 	.word	0x2000fbf4
 8019254:	44bb8000 	.word	0x44bb8000
 8019258:	44e4c000 	.word	0x44e4c000
				speed1600_shortest_mollifier.turn90_R.f_ofset = 17;
 801925c:	4b67      	ldr	r3, [pc, #412]	; (80193fc <input_parameter+0xd94>)
 801925e:	4a68      	ldr	r2, [pc, #416]	; (8019400 <input_parameter+0xd98>)
 8019260:	635a      	str	r2, [r3, #52]	; 0x34
				speed1600_shortest_mollifier.turn90_R.e_ofset = 31;
 8019262:	4b66      	ldr	r3, [pc, #408]	; (80193fc <input_parameter+0xd94>)
 8019264:	4a67      	ldr	r2, [pc, #412]	; (8019404 <input_parameter+0xd9c>)
 8019266:	639a      	str	r2, [r3, #56]	; 0x38

				speed1600_shortest_mollifier.turn90_L.g_speed = 1500;
 8019268:	4b64      	ldr	r3, [pc, #400]	; (80193fc <input_parameter+0xd94>)
 801926a:	4a67      	ldr	r2, [pc, #412]	; (8019408 <input_parameter+0xda0>)
 801926c:	645a      	str	r2, [r3, #68]	; 0x44
				speed1600_shortest_mollifier.turn90_L.t_speed = 1830;
 801926e:	4b63      	ldr	r3, [pc, #396]	; (80193fc <input_parameter+0xd94>)
 8019270:	4a66      	ldr	r2, [pc, #408]	; (801940c <input_parameter+0xda4>)
 8019272:	651a      	str	r2, [r3, #80]	; 0x50
				speed1600_shortest_mollifier.turn90_L.f_ofset = 15;
 8019274:	4b61      	ldr	r3, [pc, #388]	; (80193fc <input_parameter+0xd94>)
 8019276:	4a66      	ldr	r2, [pc, #408]	; (8019410 <input_parameter+0xda8>)
 8019278:	649a      	str	r2, [r3, #72]	; 0x48
				speed1600_shortest_mollifier.turn90_L.e_ofset = 35;
 801927a:	4b60      	ldr	r3, [pc, #384]	; (80193fc <input_parameter+0xd94>)
 801927c:	4a65      	ldr	r2, [pc, #404]	; (8019414 <input_parameter+0xdac>)
 801927e:	64da      	str	r2, [r3, #76]	; 0x4c

				speed1600_shortest_mollifier.turn180_R.g_speed =1500;
 8019280:	4b5e      	ldr	r3, [pc, #376]	; (80193fc <input_parameter+0xd94>)
 8019282:	4a61      	ldr	r2, [pc, #388]	; (8019408 <input_parameter+0xda0>)
 8019284:	659a      	str	r2, [r3, #88]	; 0x58
				speed1600_shortest_mollifier.turn180_R.t_speed = 2000;
 8019286:	4b5d      	ldr	r3, [pc, #372]	; (80193fc <input_parameter+0xd94>)
 8019288:	4a63      	ldr	r2, [pc, #396]	; (8019418 <input_parameter+0xdb0>)
 801928a:	665a      	str	r2, [r3, #100]	; 0x64
				speed1600_shortest_mollifier.turn180_R.f_ofset = 10;
 801928c:	4b5b      	ldr	r3, [pc, #364]	; (80193fc <input_parameter+0xd94>)
 801928e:	4a63      	ldr	r2, [pc, #396]	; (801941c <input_parameter+0xdb4>)
 8019290:	65da      	str	r2, [r3, #92]	; 0x5c
				speed1600_shortest_mollifier.turn180_R.e_ofset = 20;
 8019292:	4b5a      	ldr	r3, [pc, #360]	; (80193fc <input_parameter+0xd94>)
 8019294:	4a62      	ldr	r2, [pc, #392]	; (8019420 <input_parameter+0xdb8>)
 8019296:	661a      	str	r2, [r3, #96]	; 0x60

				speed1600_shortest_mollifier.turn180_L.g_speed = 1500;
 8019298:	4b58      	ldr	r3, [pc, #352]	; (80193fc <input_parameter+0xd94>)
 801929a:	4a5b      	ldr	r2, [pc, #364]	; (8019408 <input_parameter+0xda0>)
 801929c:	66da      	str	r2, [r3, #108]	; 0x6c
				speed1600_shortest_mollifier.turn180_L.t_speed = 2000;
 801929e:	4b57      	ldr	r3, [pc, #348]	; (80193fc <input_parameter+0xd94>)
 80192a0:	4a5d      	ldr	r2, [pc, #372]	; (8019418 <input_parameter+0xdb0>)
 80192a2:	679a      	str	r2, [r3, #120]	; 0x78
				speed1600_shortest_mollifier.turn180_L.f_ofset = 10;
 80192a4:	4b55      	ldr	r3, [pc, #340]	; (80193fc <input_parameter+0xd94>)
 80192a6:	4a5d      	ldr	r2, [pc, #372]	; (801941c <input_parameter+0xdb4>)
 80192a8:	671a      	str	r2, [r3, #112]	; 0x70
				speed1600_shortest_mollifier.turn180_L.e_ofset = 18;
 80192aa:	4b54      	ldr	r3, [pc, #336]	; (80193fc <input_parameter+0xd94>)
 80192ac:	4a5d      	ldr	r2, [pc, #372]	; (8019424 <input_parameter+0xdbc>)
 80192ae:	675a      	str	r2, [r3, #116]	; 0x74

				speed1600_shortest_mollifier.turn45in_R.g_speed = 1500;
 80192b0:	4b52      	ldr	r3, [pc, #328]	; (80193fc <input_parameter+0xd94>)
 80192b2:	4a55      	ldr	r2, [pc, #340]	; (8019408 <input_parameter+0xda0>)
 80192b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				speed1600_shortest_mollifier.turn45in_R.t_speed = 1850;
 80192b8:	4b50      	ldr	r3, [pc, #320]	; (80193fc <input_parameter+0xd94>)
 80192ba:	4a5b      	ldr	r2, [pc, #364]	; (8019428 <input_parameter+0xdc0>)
 80192bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				speed1600_shortest_mollifier.turn45in_R.f_ofset = 12;
 80192c0:	4b4e      	ldr	r3, [pc, #312]	; (80193fc <input_parameter+0xd94>)
 80192c2:	4a5a      	ldr	r2, [pc, #360]	; (801942c <input_parameter+0xdc4>)
 80192c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				speed1600_shortest_mollifier.turn45in_R.e_ofset = 38;
 80192c8:	4b4c      	ldr	r3, [pc, #304]	; (80193fc <input_parameter+0xd94>)
 80192ca:	4a59      	ldr	r2, [pc, #356]	; (8019430 <input_parameter+0xdc8>)
 80192cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

				speed1600_shortest_mollifier.turn45in_L.g_speed = 1500;
 80192d0:	4b4a      	ldr	r3, [pc, #296]	; (80193fc <input_parameter+0xd94>)
 80192d2:	4a4d      	ldr	r2, [pc, #308]	; (8019408 <input_parameter+0xda0>)
 80192d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
				speed1600_shortest_mollifier.turn45in_L.t_speed = 1850;
 80192d8:	4b48      	ldr	r3, [pc, #288]	; (80193fc <input_parameter+0xd94>)
 80192da:	4a53      	ldr	r2, [pc, #332]	; (8019428 <input_parameter+0xdc0>)
 80192dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				speed1600_shortest_mollifier.turn45in_L.f_ofset = 12;
 80192e0:	4b46      	ldr	r3, [pc, #280]	; (80193fc <input_parameter+0xd94>)
 80192e2:	4a52      	ldr	r2, [pc, #328]	; (801942c <input_parameter+0xdc4>)
 80192e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				speed1600_shortest_mollifier.turn45in_L.e_ofset = 36;
 80192e8:	4b44      	ldr	r3, [pc, #272]	; (80193fc <input_parameter+0xd94>)
 80192ea:	4a52      	ldr	r2, [pc, #328]	; (8019434 <input_parameter+0xdcc>)
 80192ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

				speed1600_shortest_mollifier.turn135in_R.g_speed = 1500;
 80192f0:	4b42      	ldr	r3, [pc, #264]	; (80193fc <input_parameter+0xd94>)
 80192f2:	4a45      	ldr	r2, [pc, #276]	; (8019408 <input_parameter+0xda0>)
 80192f4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
				speed1600_shortest_mollifier.turn135in_R.t_speed = 2100;
 80192f8:	4b40      	ldr	r3, [pc, #256]	; (80193fc <input_parameter+0xd94>)
 80192fa:	4a4f      	ldr	r2, [pc, #316]	; (8019438 <input_parameter+0xdd0>)
 80192fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				speed1600_shortest_mollifier.turn135in_R.f_ofset = 13;
 8019300:	4b3e      	ldr	r3, [pc, #248]	; (80193fc <input_parameter+0xd94>)
 8019302:	4a4e      	ldr	r2, [pc, #312]	; (801943c <input_parameter+0xdd4>)
 8019304:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				speed1600_shortest_mollifier.turn135in_R.e_ofset = 36;
 8019308:	4b3c      	ldr	r3, [pc, #240]	; (80193fc <input_parameter+0xd94>)
 801930a:	4a4a      	ldr	r2, [pc, #296]	; (8019434 <input_parameter+0xdcc>)
 801930c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				speed1600_shortest_mollifier.turn135in_L.g_speed = 1500;
 8019310:	4b3a      	ldr	r3, [pc, #232]	; (80193fc <input_parameter+0xd94>)
 8019312:	4a3d      	ldr	r2, [pc, #244]	; (8019408 <input_parameter+0xda0>)
 8019314:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
				speed1600_shortest_mollifier.turn135in_L.t_speed = 2100;
 8019318:	4b38      	ldr	r3, [pc, #224]	; (80193fc <input_parameter+0xd94>)
 801931a:	4a47      	ldr	r2, [pc, #284]	; (8019438 <input_parameter+0xdd0>)
 801931c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
				speed1600_shortest_mollifier.turn135in_L.f_ofset = 13;
 8019320:	4b36      	ldr	r3, [pc, #216]	; (80193fc <input_parameter+0xd94>)
 8019322:	4a46      	ldr	r2, [pc, #280]	; (801943c <input_parameter+0xdd4>)
 8019324:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
				speed1600_shortest_mollifier.turn135in_L.e_ofset = 34;
 8019328:	4b34      	ldr	r3, [pc, #208]	; (80193fc <input_parameter+0xd94>)
 801932a:	4a45      	ldr	r2, [pc, #276]	; (8019440 <input_parameter+0xdd8>)
 801932c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				speed1600_shortest_mollifier.turn45out_R.g_speed = 1500;
 8019330:	4b32      	ldr	r3, [pc, #200]	; (80193fc <input_parameter+0xd94>)
 8019332:	4a35      	ldr	r2, [pc, #212]	; (8019408 <input_parameter+0xda0>)
 8019334:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
				speed1600_shortest_mollifier.turn45out_R.t_speed = 1800;
 8019338:	4b30      	ldr	r3, [pc, #192]	; (80193fc <input_parameter+0xd94>)
 801933a:	4a42      	ldr	r2, [pc, #264]	; (8019444 <input_parameter+0xddc>)
 801933c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
				speed1600_shortest_mollifier.turn45out_R.f_ofset = 21;
 8019340:	4b2e      	ldr	r3, [pc, #184]	; (80193fc <input_parameter+0xd94>)
 8019342:	4a41      	ldr	r2, [pc, #260]	; (8019448 <input_parameter+0xde0>)
 8019344:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
				speed1600_shortest_mollifier.turn45out_R.e_ofset = 22;
 8019348:	4b2c      	ldr	r3, [pc, #176]	; (80193fc <input_parameter+0xd94>)
 801934a:	4a40      	ldr	r2, [pc, #256]	; (801944c <input_parameter+0xde4>)
 801934c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

				speed1600_shortest_mollifier.turn45out_L.g_speed = 1500;
 8019350:	4b2a      	ldr	r3, [pc, #168]	; (80193fc <input_parameter+0xd94>)
 8019352:	4a2d      	ldr	r2, [pc, #180]	; (8019408 <input_parameter+0xda0>)
 8019354:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				speed1600_shortest_mollifier.turn45out_L.t_speed = 1800;
 8019358:	4b28      	ldr	r3, [pc, #160]	; (80193fc <input_parameter+0xd94>)
 801935a:	4a3a      	ldr	r2, [pc, #232]	; (8019444 <input_parameter+0xddc>)
 801935c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
				speed1600_shortest_mollifier.turn45out_L.f_ofset = 18;
 8019360:	4b26      	ldr	r3, [pc, #152]	; (80193fc <input_parameter+0xd94>)
 8019362:	4a30      	ldr	r2, [pc, #192]	; (8019424 <input_parameter+0xdbc>)
 8019364:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
				speed1600_shortest_mollifier.turn45out_L.e_ofset = 24;
 8019368:	4b24      	ldr	r3, [pc, #144]	; (80193fc <input_parameter+0xd94>)
 801936a:	4a39      	ldr	r2, [pc, #228]	; (8019450 <input_parameter+0xde8>)
 801936c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

				speed1600_shortest_mollifier.turn135out_R.g_speed = 1500;
 8019370:	4b22      	ldr	r3, [pc, #136]	; (80193fc <input_parameter+0xd94>)
 8019372:	4a25      	ldr	r2, [pc, #148]	; (8019408 <input_parameter+0xda0>)
 8019374:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
				speed1600_shortest_mollifier.turn135out_R.t_speed = 2200;
 8019378:	4b20      	ldr	r3, [pc, #128]	; (80193fc <input_parameter+0xd94>)
 801937a:	4a36      	ldr	r2, [pc, #216]	; (8019454 <input_parameter+0xdec>)
 801937c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
				speed1600_shortest_mollifier.turn135out_R.f_ofset = 7;
 8019380:	4b1e      	ldr	r3, [pc, #120]	; (80193fc <input_parameter+0xd94>)
 8019382:	4a35      	ldr	r2, [pc, #212]	; (8019458 <input_parameter+0xdf0>)
 8019384:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
				speed1600_shortest_mollifier.turn135out_R.e_ofset = 22;
 8019388:	4b1c      	ldr	r3, [pc, #112]	; (80193fc <input_parameter+0xd94>)
 801938a:	4a30      	ldr	r2, [pc, #192]	; (801944c <input_parameter+0xde4>)
 801938c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

				speed1600_shortest_mollifier.turn135out_L.g_speed = 1500;
 8019390:	4b1a      	ldr	r3, [pc, #104]	; (80193fc <input_parameter+0xd94>)
 8019392:	4a1d      	ldr	r2, [pc, #116]	; (8019408 <input_parameter+0xda0>)
 8019394:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
				speed1600_shortest_mollifier.turn135out_L.t_speed = 2200;
 8019398:	4b18      	ldr	r3, [pc, #96]	; (80193fc <input_parameter+0xd94>)
 801939a:	4a2e      	ldr	r2, [pc, #184]	; (8019454 <input_parameter+0xdec>)
 801939c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				speed1600_shortest_mollifier.turn135out_L.f_ofset = 7;
 80193a0:	4b16      	ldr	r3, [pc, #88]	; (80193fc <input_parameter+0xd94>)
 80193a2:	4a2d      	ldr	r2, [pc, #180]	; (8019458 <input_parameter+0xdf0>)
 80193a4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
				speed1600_shortest_mollifier.turn135out_L.e_ofset = 30;
 80193a8:	4b14      	ldr	r3, [pc, #80]	; (80193fc <input_parameter+0xd94>)
 80193aa:	4a2c      	ldr	r2, [pc, #176]	; (801945c <input_parameter+0xdf4>)
 80193ac:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

				speed1600_shortest_mollifier.V90_R.g_speed = 1500;
 80193b0:	4b12      	ldr	r3, [pc, #72]	; (80193fc <input_parameter+0xd94>)
 80193b2:	4a15      	ldr	r2, [pc, #84]	; (8019408 <input_parameter+0xda0>)
 80193b4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				speed1600_shortest_mollifier.V90_R.t_speed = 2150;
 80193b8:	4b10      	ldr	r3, [pc, #64]	; (80193fc <input_parameter+0xd94>)
 80193ba:	4a29      	ldr	r2, [pc, #164]	; (8019460 <input_parameter+0xdf8>)
 80193bc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
				speed1600_shortest_mollifier.V90_R.f_ofset = 3;
 80193c0:	4b0e      	ldr	r3, [pc, #56]	; (80193fc <input_parameter+0xd94>)
 80193c2:	4a28      	ldr	r2, [pc, #160]	; (8019464 <input_parameter+0xdfc>)
 80193c4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
				speed1600_shortest_mollifier.V90_R.e_ofset = 20;
 80193c8:	4b0c      	ldr	r3, [pc, #48]	; (80193fc <input_parameter+0xd94>)
 80193ca:	4a15      	ldr	r2, [pc, #84]	; (8019420 <input_parameter+0xdb8>)
 80193cc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

				speed1600_shortest_mollifier.V90_L.g_speed = 1500;
 80193d0:	4b0a      	ldr	r3, [pc, #40]	; (80193fc <input_parameter+0xd94>)
 80193d2:	4a0d      	ldr	r2, [pc, #52]	; (8019408 <input_parameter+0xda0>)
 80193d4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
				speed1600_shortest_mollifier.V90_L.t_speed = 2150;
 80193d8:	4b08      	ldr	r3, [pc, #32]	; (80193fc <input_parameter+0xd94>)
 80193da:	4a21      	ldr	r2, [pc, #132]	; (8019460 <input_parameter+0xdf8>)
 80193dc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				speed1600_shortest_mollifier.V90_L.f_ofset = 3;
 80193e0:	4b06      	ldr	r3, [pc, #24]	; (80193fc <input_parameter+0xd94>)
 80193e2:	4a20      	ldr	r2, [pc, #128]	; (8019464 <input_parameter+0xdfc>)
 80193e4:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
				speed1600_shortest_mollifier.V90_L.e_ofset = 20;
 80193e8:	4b04      	ldr	r3, [pc, #16]	; (80193fc <input_parameter+0xd94>)
 80193ea:	4a0d      	ldr	r2, [pc, #52]	; (8019420 <input_parameter+0xdb8>)
 80193ec:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


}
 80193f0:	bf00      	nop
 80193f2:	46bd      	mov	sp, r7
 80193f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f8:	4770      	bx	lr
 80193fa:	bf00      	nop
 80193fc:	2000fbf4 	.word	0x2000fbf4
 8019400:	41880000 	.word	0x41880000
 8019404:	41f80000 	.word	0x41f80000
 8019408:	44bb8000 	.word	0x44bb8000
 801940c:	44e4c000 	.word	0x44e4c000
 8019410:	41700000 	.word	0x41700000
 8019414:	420c0000 	.word	0x420c0000
 8019418:	44fa0000 	.word	0x44fa0000
 801941c:	41200000 	.word	0x41200000
 8019420:	41a00000 	.word	0x41a00000
 8019424:	41900000 	.word	0x41900000
 8019428:	44e74000 	.word	0x44e74000
 801942c:	41400000 	.word	0x41400000
 8019430:	42180000 	.word	0x42180000
 8019434:	42100000 	.word	0x42100000
 8019438:	45034000 	.word	0x45034000
 801943c:	41500000 	.word	0x41500000
 8019440:	42080000 	.word	0x42080000
 8019444:	44e10000 	.word	0x44e10000
 8019448:	41a80000 	.word	0x41a80000
 801944c:	41b00000 	.word	0x41b00000
 8019450:	41c00000 	.word	0x41c00000
 8019454:	45098000 	.word	0x45098000
 8019458:	40e00000 	.word	0x40e00000
 801945c:	41f00000 	.word	0x41f00000
 8019460:	45066000 	.word	0x45066000
 8019464:	40400000 	.word	0x40400000

08019468 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8019468:	b580      	push	{r7, lr}
 801946a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 801946c:	4b22      	ldr	r3, [pc, #136]	; (80194f8 <MX_USART1_UART_Init+0x90>)
 801946e:	4a23      	ldr	r2, [pc, #140]	; (80194fc <MX_USART1_UART_Init+0x94>)
 8019470:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8019472:	4b21      	ldr	r3, [pc, #132]	; (80194f8 <MX_USART1_UART_Init+0x90>)
 8019474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8019478:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801947a:	4b1f      	ldr	r3, [pc, #124]	; (80194f8 <MX_USART1_UART_Init+0x90>)
 801947c:	2200      	movs	r2, #0
 801947e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8019480:	4b1d      	ldr	r3, [pc, #116]	; (80194f8 <MX_USART1_UART_Init+0x90>)
 8019482:	2200      	movs	r2, #0
 8019484:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8019486:	4b1c      	ldr	r3, [pc, #112]	; (80194f8 <MX_USART1_UART_Init+0x90>)
 8019488:	2200      	movs	r2, #0
 801948a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801948c:	4b1a      	ldr	r3, [pc, #104]	; (80194f8 <MX_USART1_UART_Init+0x90>)
 801948e:	220c      	movs	r2, #12
 8019490:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8019492:	4b19      	ldr	r3, [pc, #100]	; (80194f8 <MX_USART1_UART_Init+0x90>)
 8019494:	2200      	movs	r2, #0
 8019496:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8019498:	4b17      	ldr	r3, [pc, #92]	; (80194f8 <MX_USART1_UART_Init+0x90>)
 801949a:	2200      	movs	r2, #0
 801949c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801949e:	4b16      	ldr	r3, [pc, #88]	; (80194f8 <MX_USART1_UART_Init+0x90>)
 80194a0:	2200      	movs	r2, #0
 80194a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80194a4:	4b14      	ldr	r3, [pc, #80]	; (80194f8 <MX_USART1_UART_Init+0x90>)
 80194a6:	2200      	movs	r2, #0
 80194a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80194aa:	4b13      	ldr	r3, [pc, #76]	; (80194f8 <MX_USART1_UART_Init+0x90>)
 80194ac:	2200      	movs	r2, #0
 80194ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80194b0:	4811      	ldr	r0, [pc, #68]	; (80194f8 <MX_USART1_UART_Init+0x90>)
 80194b2:	f006 fd2d 	bl	801ff10 <HAL_UART_Init>
 80194b6:	4603      	mov	r3, r0
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d001      	beq.n	80194c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80194bc:	f7f1 fa05 	bl	800a8ca <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80194c0:	2100      	movs	r1, #0
 80194c2:	480d      	ldr	r0, [pc, #52]	; (80194f8 <MX_USART1_UART_Init+0x90>)
 80194c4:	f007 faf4 	bl	8020ab0 <HAL_UARTEx_SetTxFifoThreshold>
 80194c8:	4603      	mov	r3, r0
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d001      	beq.n	80194d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80194ce:	f7f1 f9fc 	bl	800a8ca <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80194d2:	2100      	movs	r1, #0
 80194d4:	4808      	ldr	r0, [pc, #32]	; (80194f8 <MX_USART1_UART_Init+0x90>)
 80194d6:	f007 fb29 	bl	8020b2c <HAL_UARTEx_SetRxFifoThreshold>
 80194da:	4603      	mov	r3, r0
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d001      	beq.n	80194e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80194e0:	f7f1 f9f3 	bl	800a8ca <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80194e4:	4804      	ldr	r0, [pc, #16]	; (80194f8 <MX_USART1_UART_Init+0x90>)
 80194e6:	f007 faaa 	bl	8020a3e <HAL_UARTEx_DisableFifoMode>
 80194ea:	4603      	mov	r3, r0
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d001      	beq.n	80194f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80194f0:	f7f1 f9eb 	bl	800a8ca <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80194f4:	bf00      	nop
 80194f6:	bd80      	pop	{r7, pc}
 80194f8:	2000fd3c 	.word	0x2000fd3c
 80194fc:	40013800 	.word	0x40013800

08019500 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8019500:	b580      	push	{r7, lr}
 8019502:	b09e      	sub	sp, #120	; 0x78
 8019504:	af00      	add	r7, sp, #0
 8019506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019508:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801950c:	2200      	movs	r2, #0
 801950e:	601a      	str	r2, [r3, #0]
 8019510:	605a      	str	r2, [r3, #4]
 8019512:	609a      	str	r2, [r3, #8]
 8019514:	60da      	str	r2, [r3, #12]
 8019516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8019518:	f107 0314 	add.w	r3, r7, #20
 801951c:	2250      	movs	r2, #80	; 0x50
 801951e:	2100      	movs	r1, #0
 8019520:	4618      	mov	r0, r3
 8019522:	f007 fbc7 	bl	8020cb4 <memset>
  if(uartHandle->Instance==USART1)
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	4a1f      	ldr	r2, [pc, #124]	; (80195a8 <HAL_UART_MspInit+0xa8>)
 801952c:	4293      	cmp	r3, r2
 801952e:	d137      	bne.n	80195a0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8019530:	2301      	movs	r3, #1
 8019532:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8019534:	2300      	movs	r3, #0
 8019536:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8019538:	f107 0314 	add.w	r3, r7, #20
 801953c:	4618      	mov	r0, r3
 801953e:	f004 f891 	bl	801d664 <HAL_RCCEx_PeriphCLKConfig>
 8019542:	4603      	mov	r3, r0
 8019544:	2b00      	cmp	r3, #0
 8019546:	d001      	beq.n	801954c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8019548:	f7f1 f9bf 	bl	800a8ca <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 801954c:	4b17      	ldr	r3, [pc, #92]	; (80195ac <HAL_UART_MspInit+0xac>)
 801954e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019550:	4a16      	ldr	r2, [pc, #88]	; (80195ac <HAL_UART_MspInit+0xac>)
 8019552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019556:	6613      	str	r3, [r2, #96]	; 0x60
 8019558:	4b14      	ldr	r3, [pc, #80]	; (80195ac <HAL_UART_MspInit+0xac>)
 801955a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801955c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019560:	613b      	str	r3, [r7, #16]
 8019562:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019564:	4b11      	ldr	r3, [pc, #68]	; (80195ac <HAL_UART_MspInit+0xac>)
 8019566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019568:	4a10      	ldr	r2, [pc, #64]	; (80195ac <HAL_UART_MspInit+0xac>)
 801956a:	f043 0301 	orr.w	r3, r3, #1
 801956e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8019570:	4b0e      	ldr	r3, [pc, #56]	; (80195ac <HAL_UART_MspInit+0xac>)
 8019572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019574:	f003 0301 	and.w	r3, r3, #1
 8019578:	60fb      	str	r3, [r7, #12]
 801957a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801957c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8019580:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019582:	2302      	movs	r3, #2
 8019584:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019586:	2300      	movs	r3, #0
 8019588:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801958a:	2300      	movs	r3, #0
 801958c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801958e:	2307      	movs	r3, #7
 8019590:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019592:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8019596:	4619      	mov	r1, r3
 8019598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801959c:	f003 f8e4 	bl	801c768 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80195a0:	bf00      	nop
 80195a2:	3778      	adds	r7, #120	; 0x78
 80195a4:	46bd      	mov	sp, r7
 80195a6:	bd80      	pop	{r7, pc}
 80195a8:	40013800 	.word	0x40013800
 80195ac:	40021000 	.word	0x40021000

080195b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80195b0:	480d      	ldr	r0, [pc, #52]	; (80195e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80195b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80195b4:	480d      	ldr	r0, [pc, #52]	; (80195ec <LoopForever+0x6>)
  ldr r1, =_edata
 80195b6:	490e      	ldr	r1, [pc, #56]	; (80195f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80195b8:	4a0e      	ldr	r2, [pc, #56]	; (80195f4 <LoopForever+0xe>)
  movs r3, #0
 80195ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80195bc:	e002      	b.n	80195c4 <LoopCopyDataInit>

080195be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80195be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80195c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80195c2:	3304      	adds	r3, #4

080195c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80195c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80195c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80195c8:	d3f9      	bcc.n	80195be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80195ca:	4a0b      	ldr	r2, [pc, #44]	; (80195f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80195cc:	4c0b      	ldr	r4, [pc, #44]	; (80195fc <LoopForever+0x16>)
  movs r3, #0
 80195ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80195d0:	e001      	b.n	80195d6 <LoopFillZerobss>

080195d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80195d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80195d4:	3204      	adds	r2, #4

080195d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80195d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80195d8:	d3fb      	bcc.n	80195d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80195da:	f7fe fd7d 	bl	80180d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80195de:	f007 fb37 	bl	8020c50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80195e2:	f7f1 f875 	bl	800a6d0 <main>

080195e6 <LoopForever>:

LoopForever:
    b LoopForever
 80195e6:	e7fe      	b.n	80195e6 <LoopForever>
  ldr   r0, =_estack
 80195e8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80195ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80195f0:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80195f4:	08025858 	.word	0x08025858
  ldr r2, =_sbss
 80195f8:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80195fc:	2000fde0 	.word	0x2000fde0

08019600 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8019600:	e7fe      	b.n	8019600 <ADC3_IRQHandler>
	...

08019604 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8019604:	b580      	push	{r7, lr}
 8019606:	b082      	sub	sp, #8
 8019608:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801960a:	2300      	movs	r3, #0
 801960c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801960e:	4b0c      	ldr	r3, [pc, #48]	; (8019640 <HAL_Init+0x3c>)
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	4a0b      	ldr	r2, [pc, #44]	; (8019640 <HAL_Init+0x3c>)
 8019614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019618:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801961a:	2003      	movs	r0, #3
 801961c:	f002 fb30 	bl	801bc80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8019620:	2000      	movs	r0, #0
 8019622:	f000 f80f 	bl	8019644 <HAL_InitTick>
 8019626:	4603      	mov	r3, r0
 8019628:	2b00      	cmp	r3, #0
 801962a:	d002      	beq.n	8019632 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 801962c:	2301      	movs	r3, #1
 801962e:	71fb      	strb	r3, [r7, #7]
 8019630:	e001      	b.n	8019636 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8019632:	f7fe fc05 	bl	8017e40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8019636:	79fb      	ldrb	r3, [r7, #7]

}
 8019638:	4618      	mov	r0, r3
 801963a:	3708      	adds	r7, #8
 801963c:	46bd      	mov	sp, r7
 801963e:	bd80      	pop	{r7, pc}
 8019640:	40022000 	.word	0x40022000

08019644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8019644:	b580      	push	{r7, lr}
 8019646:	b084      	sub	sp, #16
 8019648:	af00      	add	r7, sp, #0
 801964a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 801964c:	2300      	movs	r3, #0
 801964e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8019650:	4b16      	ldr	r3, [pc, #88]	; (80196ac <HAL_InitTick+0x68>)
 8019652:	681b      	ldr	r3, [r3, #0]
 8019654:	2b00      	cmp	r3, #0
 8019656:	d022      	beq.n	801969e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8019658:	4b15      	ldr	r3, [pc, #84]	; (80196b0 <HAL_InitTick+0x6c>)
 801965a:	681a      	ldr	r2, [r3, #0]
 801965c:	4b13      	ldr	r3, [pc, #76]	; (80196ac <HAL_InitTick+0x68>)
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8019664:	fbb1 f3f3 	udiv	r3, r1, r3
 8019668:	fbb2 f3f3 	udiv	r3, r2, r3
 801966c:	4618      	mov	r0, r3
 801966e:	f002 fb3a 	bl	801bce6 <HAL_SYSTICK_Config>
 8019672:	4603      	mov	r3, r0
 8019674:	2b00      	cmp	r3, #0
 8019676:	d10f      	bne.n	8019698 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	2b0f      	cmp	r3, #15
 801967c:	d809      	bhi.n	8019692 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801967e:	2200      	movs	r2, #0
 8019680:	6879      	ldr	r1, [r7, #4]
 8019682:	f04f 30ff 	mov.w	r0, #4294967295
 8019686:	f002 fb06 	bl	801bc96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801968a:	4a0a      	ldr	r2, [pc, #40]	; (80196b4 <HAL_InitTick+0x70>)
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	6013      	str	r3, [r2, #0]
 8019690:	e007      	b.n	80196a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8019692:	2301      	movs	r3, #1
 8019694:	73fb      	strb	r3, [r7, #15]
 8019696:	e004      	b.n	80196a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8019698:	2301      	movs	r3, #1
 801969a:	73fb      	strb	r3, [r7, #15]
 801969c:	e001      	b.n	80196a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 801969e:	2301      	movs	r3, #1
 80196a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80196a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80196a4:	4618      	mov	r0, r3
 80196a6:	3710      	adds	r7, #16
 80196a8:	46bd      	mov	sp, r7
 80196aa:	bd80      	pop	{r7, pc}
 80196ac:	20000008 	.word	0x20000008
 80196b0:	20000000 	.word	0x20000000
 80196b4:	20000004 	.word	0x20000004

080196b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80196b8:	b480      	push	{r7}
 80196ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80196bc:	4b05      	ldr	r3, [pc, #20]	; (80196d4 <HAL_IncTick+0x1c>)
 80196be:	681a      	ldr	r2, [r3, #0]
 80196c0:	4b05      	ldr	r3, [pc, #20]	; (80196d8 <HAL_IncTick+0x20>)
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	4413      	add	r3, r2
 80196c6:	4a03      	ldr	r2, [pc, #12]	; (80196d4 <HAL_IncTick+0x1c>)
 80196c8:	6013      	str	r3, [r2, #0]
}
 80196ca:	bf00      	nop
 80196cc:	46bd      	mov	sp, r7
 80196ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196d2:	4770      	bx	lr
 80196d4:	2000fdcc 	.word	0x2000fdcc
 80196d8:	20000008 	.word	0x20000008

080196dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80196dc:	b480      	push	{r7}
 80196de:	af00      	add	r7, sp, #0
  return uwTick;
 80196e0:	4b03      	ldr	r3, [pc, #12]	; (80196f0 <HAL_GetTick+0x14>)
 80196e2:	681b      	ldr	r3, [r3, #0]
}
 80196e4:	4618      	mov	r0, r3
 80196e6:	46bd      	mov	sp, r7
 80196e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ec:	4770      	bx	lr
 80196ee:	bf00      	nop
 80196f0:	2000fdcc 	.word	0x2000fdcc

080196f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80196f4:	b580      	push	{r7, lr}
 80196f6:	b084      	sub	sp, #16
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80196fc:	f7ff ffee 	bl	80196dc <HAL_GetTick>
 8019700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	f1b3 3fff 	cmp.w	r3, #4294967295
 801970c:	d004      	beq.n	8019718 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 801970e:	4b09      	ldr	r3, [pc, #36]	; (8019734 <HAL_Delay+0x40>)
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	68fa      	ldr	r2, [r7, #12]
 8019714:	4413      	add	r3, r2
 8019716:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8019718:	bf00      	nop
 801971a:	f7ff ffdf 	bl	80196dc <HAL_GetTick>
 801971e:	4602      	mov	r2, r0
 8019720:	68bb      	ldr	r3, [r7, #8]
 8019722:	1ad3      	subs	r3, r2, r3
 8019724:	68fa      	ldr	r2, [r7, #12]
 8019726:	429a      	cmp	r2, r3
 8019728:	d8f7      	bhi.n	801971a <HAL_Delay+0x26>
  {
  }
}
 801972a:	bf00      	nop
 801972c:	bf00      	nop
 801972e:	3710      	adds	r7, #16
 8019730:	46bd      	mov	sp, r7
 8019732:	bd80      	pop	{r7, pc}
 8019734:	20000008 	.word	0x20000008

08019738 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8019738:	b480      	push	{r7}
 801973a:	b083      	sub	sp, #12
 801973c:	af00      	add	r7, sp, #0
 801973e:	6078      	str	r0, [r7, #4]
 8019740:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	689b      	ldr	r3, [r3, #8]
 8019746:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 801974a:	683b      	ldr	r3, [r7, #0]
 801974c:	431a      	orrs	r2, r3
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	609a      	str	r2, [r3, #8]
}
 8019752:	bf00      	nop
 8019754:	370c      	adds	r7, #12
 8019756:	46bd      	mov	sp, r7
 8019758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801975c:	4770      	bx	lr

0801975e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 801975e:	b480      	push	{r7}
 8019760:	b083      	sub	sp, #12
 8019762:	af00      	add	r7, sp, #0
 8019764:	6078      	str	r0, [r7, #4]
 8019766:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	689b      	ldr	r3, [r3, #8]
 801976c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8019770:	683b      	ldr	r3, [r7, #0]
 8019772:	431a      	orrs	r2, r3
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	609a      	str	r2, [r3, #8]
}
 8019778:	bf00      	nop
 801977a:	370c      	adds	r7, #12
 801977c:	46bd      	mov	sp, r7
 801977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019782:	4770      	bx	lr

08019784 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8019784:	b480      	push	{r7}
 8019786:	b083      	sub	sp, #12
 8019788:	af00      	add	r7, sp, #0
 801978a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	689b      	ldr	r3, [r3, #8]
 8019790:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8019794:	4618      	mov	r0, r3
 8019796:	370c      	adds	r7, #12
 8019798:	46bd      	mov	sp, r7
 801979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801979e:	4770      	bx	lr

080197a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80197a0:	b480      	push	{r7}
 80197a2:	b087      	sub	sp, #28
 80197a4:	af00      	add	r7, sp, #0
 80197a6:	60f8      	str	r0, [r7, #12]
 80197a8:	60b9      	str	r1, [r7, #8]
 80197aa:	607a      	str	r2, [r7, #4]
 80197ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	3360      	adds	r3, #96	; 0x60
 80197b2:	461a      	mov	r2, r3
 80197b4:	68bb      	ldr	r3, [r7, #8]
 80197b6:	009b      	lsls	r3, r3, #2
 80197b8:	4413      	add	r3, r2
 80197ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80197bc:	697b      	ldr	r3, [r7, #20]
 80197be:	681a      	ldr	r2, [r3, #0]
 80197c0:	4b08      	ldr	r3, [pc, #32]	; (80197e4 <LL_ADC_SetOffset+0x44>)
 80197c2:	4013      	ands	r3, r2
 80197c4:	687a      	ldr	r2, [r7, #4]
 80197c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80197ca:	683a      	ldr	r2, [r7, #0]
 80197cc:	430a      	orrs	r2, r1
 80197ce:	4313      	orrs	r3, r2
 80197d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80197d4:	697b      	ldr	r3, [r7, #20]
 80197d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80197d8:	bf00      	nop
 80197da:	371c      	adds	r7, #28
 80197dc:	46bd      	mov	sp, r7
 80197de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197e2:	4770      	bx	lr
 80197e4:	03fff000 	.word	0x03fff000

080197e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80197e8:	b480      	push	{r7}
 80197ea:	b085      	sub	sp, #20
 80197ec:	af00      	add	r7, sp, #0
 80197ee:	6078      	str	r0, [r7, #4]
 80197f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	3360      	adds	r3, #96	; 0x60
 80197f6:	461a      	mov	r2, r3
 80197f8:	683b      	ldr	r3, [r7, #0]
 80197fa:	009b      	lsls	r3, r3, #2
 80197fc:	4413      	add	r3, r2
 80197fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8019808:	4618      	mov	r0, r3
 801980a:	3714      	adds	r7, #20
 801980c:	46bd      	mov	sp, r7
 801980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019812:	4770      	bx	lr

08019814 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8019814:	b480      	push	{r7}
 8019816:	b087      	sub	sp, #28
 8019818:	af00      	add	r7, sp, #0
 801981a:	60f8      	str	r0, [r7, #12]
 801981c:	60b9      	str	r1, [r7, #8]
 801981e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8019820:	68fb      	ldr	r3, [r7, #12]
 8019822:	3360      	adds	r3, #96	; 0x60
 8019824:	461a      	mov	r2, r3
 8019826:	68bb      	ldr	r3, [r7, #8]
 8019828:	009b      	lsls	r3, r3, #2
 801982a:	4413      	add	r3, r2
 801982c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801982e:	697b      	ldr	r3, [r7, #20]
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	431a      	orrs	r2, r3
 801983a:	697b      	ldr	r3, [r7, #20]
 801983c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 801983e:	bf00      	nop
 8019840:	371c      	adds	r7, #28
 8019842:	46bd      	mov	sp, r7
 8019844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019848:	4770      	bx	lr

0801984a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 801984a:	b480      	push	{r7}
 801984c:	b087      	sub	sp, #28
 801984e:	af00      	add	r7, sp, #0
 8019850:	60f8      	str	r0, [r7, #12]
 8019852:	60b9      	str	r1, [r7, #8]
 8019854:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8019856:	68fb      	ldr	r3, [r7, #12]
 8019858:	3360      	adds	r3, #96	; 0x60
 801985a:	461a      	mov	r2, r3
 801985c:	68bb      	ldr	r3, [r7, #8]
 801985e:	009b      	lsls	r3, r3, #2
 8019860:	4413      	add	r3, r2
 8019862:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8019864:	697b      	ldr	r3, [r7, #20]
 8019866:	681b      	ldr	r3, [r3, #0]
 8019868:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	431a      	orrs	r2, r3
 8019870:	697b      	ldr	r3, [r7, #20]
 8019872:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8019874:	bf00      	nop
 8019876:	371c      	adds	r7, #28
 8019878:	46bd      	mov	sp, r7
 801987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801987e:	4770      	bx	lr

08019880 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8019880:	b480      	push	{r7}
 8019882:	b087      	sub	sp, #28
 8019884:	af00      	add	r7, sp, #0
 8019886:	60f8      	str	r0, [r7, #12]
 8019888:	60b9      	str	r1, [r7, #8]
 801988a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801988c:	68fb      	ldr	r3, [r7, #12]
 801988e:	3360      	adds	r3, #96	; 0x60
 8019890:	461a      	mov	r2, r3
 8019892:	68bb      	ldr	r3, [r7, #8]
 8019894:	009b      	lsls	r3, r3, #2
 8019896:	4413      	add	r3, r2
 8019898:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801989a:	697b      	ldr	r3, [r7, #20]
 801989c:	681b      	ldr	r3, [r3, #0]
 801989e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	431a      	orrs	r2, r3
 80198a6:	697b      	ldr	r3, [r7, #20]
 80198a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80198aa:	bf00      	nop
 80198ac:	371c      	adds	r7, #28
 80198ae:	46bd      	mov	sp, r7
 80198b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198b4:	4770      	bx	lr

080198b6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80198b6:	b480      	push	{r7}
 80198b8:	b083      	sub	sp, #12
 80198ba:	af00      	add	r7, sp, #0
 80198bc:	6078      	str	r0, [r7, #4]
 80198be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	695b      	ldr	r3, [r3, #20]
 80198c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80198c8:	683b      	ldr	r3, [r7, #0]
 80198ca:	431a      	orrs	r2, r3
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	615a      	str	r2, [r3, #20]
}
 80198d0:	bf00      	nop
 80198d2:	370c      	adds	r7, #12
 80198d4:	46bd      	mov	sp, r7
 80198d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198da:	4770      	bx	lr

080198dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80198dc:	b480      	push	{r7}
 80198de:	b083      	sub	sp, #12
 80198e0:	af00      	add	r7, sp, #0
 80198e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	68db      	ldr	r3, [r3, #12]
 80198e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	d101      	bne.n	80198f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80198f0:	2301      	movs	r3, #1
 80198f2:	e000      	b.n	80198f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80198f4:	2300      	movs	r3, #0
}
 80198f6:	4618      	mov	r0, r3
 80198f8:	370c      	adds	r7, #12
 80198fa:	46bd      	mov	sp, r7
 80198fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019900:	4770      	bx	lr

08019902 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8019902:	b480      	push	{r7}
 8019904:	b087      	sub	sp, #28
 8019906:	af00      	add	r7, sp, #0
 8019908:	60f8      	str	r0, [r7, #12]
 801990a:	60b9      	str	r1, [r7, #8]
 801990c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	3330      	adds	r3, #48	; 0x30
 8019912:	461a      	mov	r2, r3
 8019914:	68bb      	ldr	r3, [r7, #8]
 8019916:	0a1b      	lsrs	r3, r3, #8
 8019918:	009b      	lsls	r3, r3, #2
 801991a:	f003 030c 	and.w	r3, r3, #12
 801991e:	4413      	add	r3, r2
 8019920:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8019922:	697b      	ldr	r3, [r7, #20]
 8019924:	681a      	ldr	r2, [r3, #0]
 8019926:	68bb      	ldr	r3, [r7, #8]
 8019928:	f003 031f 	and.w	r3, r3, #31
 801992c:	211f      	movs	r1, #31
 801992e:	fa01 f303 	lsl.w	r3, r1, r3
 8019932:	43db      	mvns	r3, r3
 8019934:	401a      	ands	r2, r3
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	0e9b      	lsrs	r3, r3, #26
 801993a:	f003 011f 	and.w	r1, r3, #31
 801993e:	68bb      	ldr	r3, [r7, #8]
 8019940:	f003 031f 	and.w	r3, r3, #31
 8019944:	fa01 f303 	lsl.w	r3, r1, r3
 8019948:	431a      	orrs	r2, r3
 801994a:	697b      	ldr	r3, [r7, #20]
 801994c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 801994e:	bf00      	nop
 8019950:	371c      	adds	r7, #28
 8019952:	46bd      	mov	sp, r7
 8019954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019958:	4770      	bx	lr

0801995a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 801995a:	b480      	push	{r7}
 801995c:	b083      	sub	sp, #12
 801995e:	af00      	add	r7, sp, #0
 8019960:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019966:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 801996a:	2b00      	cmp	r3, #0
 801996c:	d101      	bne.n	8019972 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 801996e:	2301      	movs	r3, #1
 8019970:	e000      	b.n	8019974 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8019972:	2300      	movs	r3, #0
}
 8019974:	4618      	mov	r0, r3
 8019976:	370c      	adds	r7, #12
 8019978:	46bd      	mov	sp, r7
 801997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801997e:	4770      	bx	lr

08019980 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8019980:	b480      	push	{r7}
 8019982:	b087      	sub	sp, #28
 8019984:	af00      	add	r7, sp, #0
 8019986:	60f8      	str	r0, [r7, #12]
 8019988:	60b9      	str	r1, [r7, #8]
 801998a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 801998c:	68fb      	ldr	r3, [r7, #12]
 801998e:	3314      	adds	r3, #20
 8019990:	461a      	mov	r2, r3
 8019992:	68bb      	ldr	r3, [r7, #8]
 8019994:	0e5b      	lsrs	r3, r3, #25
 8019996:	009b      	lsls	r3, r3, #2
 8019998:	f003 0304 	and.w	r3, r3, #4
 801999c:	4413      	add	r3, r2
 801999e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80199a0:	697b      	ldr	r3, [r7, #20]
 80199a2:	681a      	ldr	r2, [r3, #0]
 80199a4:	68bb      	ldr	r3, [r7, #8]
 80199a6:	0d1b      	lsrs	r3, r3, #20
 80199a8:	f003 031f 	and.w	r3, r3, #31
 80199ac:	2107      	movs	r1, #7
 80199ae:	fa01 f303 	lsl.w	r3, r1, r3
 80199b2:	43db      	mvns	r3, r3
 80199b4:	401a      	ands	r2, r3
 80199b6:	68bb      	ldr	r3, [r7, #8]
 80199b8:	0d1b      	lsrs	r3, r3, #20
 80199ba:	f003 031f 	and.w	r3, r3, #31
 80199be:	6879      	ldr	r1, [r7, #4]
 80199c0:	fa01 f303 	lsl.w	r3, r1, r3
 80199c4:	431a      	orrs	r2, r3
 80199c6:	697b      	ldr	r3, [r7, #20]
 80199c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80199ca:	bf00      	nop
 80199cc:	371c      	adds	r7, #28
 80199ce:	46bd      	mov	sp, r7
 80199d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199d4:	4770      	bx	lr
	...

080199d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80199d8:	b480      	push	{r7}
 80199da:	b085      	sub	sp, #20
 80199dc:	af00      	add	r7, sp, #0
 80199de:	60f8      	str	r0, [r7, #12]
 80199e0:	60b9      	str	r1, [r7, #8]
 80199e2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	4a0f      	ldr	r2, [pc, #60]	; (8019a24 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80199e8:	4293      	cmp	r3, r2
 80199ea:	d10a      	bne.n	8019a02 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80199ec:	68fb      	ldr	r3, [r7, #12]
 80199ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80199f2:	68bb      	ldr	r3, [r7, #8]
 80199f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80199f8:	431a      	orrs	r2, r3
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8019a00:	e00a      	b.n	8019a18 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8019a02:	68fb      	ldr	r3, [r7, #12]
 8019a04:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8019a08:	68bb      	ldr	r3, [r7, #8]
 8019a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019a0e:	43db      	mvns	r3, r3
 8019a10:	401a      	ands	r2, r3
 8019a12:	68fb      	ldr	r3, [r7, #12]
 8019a14:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8019a18:	bf00      	nop
 8019a1a:	3714      	adds	r7, #20
 8019a1c:	46bd      	mov	sp, r7
 8019a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a22:	4770      	bx	lr
 8019a24:	407f0000 	.word	0x407f0000

08019a28 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8019a28:	b480      	push	{r7}
 8019a2a:	b083      	sub	sp, #12
 8019a2c:	af00      	add	r7, sp, #0
 8019a2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	689b      	ldr	r3, [r3, #8]
 8019a34:	f003 031f 	and.w	r3, r3, #31
}
 8019a38:	4618      	mov	r0, r3
 8019a3a:	370c      	adds	r7, #12
 8019a3c:	46bd      	mov	sp, r7
 8019a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a42:	4770      	bx	lr

08019a44 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8019a44:	b480      	push	{r7}
 8019a46:	b083      	sub	sp, #12
 8019a48:	af00      	add	r7, sp, #0
 8019a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	689b      	ldr	r3, [r3, #8]
 8019a50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8019a54:	4618      	mov	r0, r3
 8019a56:	370c      	adds	r7, #12
 8019a58:	46bd      	mov	sp, r7
 8019a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a5e:	4770      	bx	lr

08019a60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8019a60:	b480      	push	{r7}
 8019a62:	b083      	sub	sp, #12
 8019a64:	af00      	add	r7, sp, #0
 8019a66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	689b      	ldr	r3, [r3, #8]
 8019a6c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8019a70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019a74:	687a      	ldr	r2, [r7, #4]
 8019a76:	6093      	str	r3, [r2, #8]
}
 8019a78:	bf00      	nop
 8019a7a:	370c      	adds	r7, #12
 8019a7c:	46bd      	mov	sp, r7
 8019a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a82:	4770      	bx	lr

08019a84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8019a84:	b480      	push	{r7}
 8019a86:	b083      	sub	sp, #12
 8019a88:	af00      	add	r7, sp, #0
 8019a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	689b      	ldr	r3, [r3, #8]
 8019a90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8019a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8019a98:	d101      	bne.n	8019a9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8019a9a:	2301      	movs	r3, #1
 8019a9c:	e000      	b.n	8019aa0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8019a9e:	2300      	movs	r3, #0
}
 8019aa0:	4618      	mov	r0, r3
 8019aa2:	370c      	adds	r7, #12
 8019aa4:	46bd      	mov	sp, r7
 8019aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aaa:	4770      	bx	lr

08019aac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8019aac:	b480      	push	{r7}
 8019aae:	b083      	sub	sp, #12
 8019ab0:	af00      	add	r7, sp, #0
 8019ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	689b      	ldr	r3, [r3, #8]
 8019ab8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8019abc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019ac0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8019ac8:	bf00      	nop
 8019aca:	370c      	adds	r7, #12
 8019acc:	46bd      	mov	sp, r7
 8019ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ad2:	4770      	bx	lr

08019ad4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8019ad4:	b480      	push	{r7}
 8019ad6:	b083      	sub	sp, #12
 8019ad8:	af00      	add	r7, sp, #0
 8019ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	689b      	ldr	r3, [r3, #8]
 8019ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019ae4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8019ae8:	d101      	bne.n	8019aee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8019aea:	2301      	movs	r3, #1
 8019aec:	e000      	b.n	8019af0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8019aee:	2300      	movs	r3, #0
}
 8019af0:	4618      	mov	r0, r3
 8019af2:	370c      	adds	r7, #12
 8019af4:	46bd      	mov	sp, r7
 8019af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019afa:	4770      	bx	lr

08019afc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8019afc:	b480      	push	{r7}
 8019afe:	b083      	sub	sp, #12
 8019b00:	af00      	add	r7, sp, #0
 8019b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	689b      	ldr	r3, [r3, #8]
 8019b08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019b0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019b10:	f043 0201 	orr.w	r2, r3, #1
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8019b18:	bf00      	nop
 8019b1a:	370c      	adds	r7, #12
 8019b1c:	46bd      	mov	sp, r7
 8019b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b22:	4770      	bx	lr

08019b24 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8019b24:	b480      	push	{r7}
 8019b26:	b083      	sub	sp, #12
 8019b28:	af00      	add	r7, sp, #0
 8019b2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	689b      	ldr	r3, [r3, #8]
 8019b30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019b34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019b38:	f043 0202 	orr.w	r2, r3, #2
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8019b40:	bf00      	nop
 8019b42:	370c      	adds	r7, #12
 8019b44:	46bd      	mov	sp, r7
 8019b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b4a:	4770      	bx	lr

08019b4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8019b4c:	b480      	push	{r7}
 8019b4e:	b083      	sub	sp, #12
 8019b50:	af00      	add	r7, sp, #0
 8019b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	689b      	ldr	r3, [r3, #8]
 8019b58:	f003 0301 	and.w	r3, r3, #1
 8019b5c:	2b01      	cmp	r3, #1
 8019b5e:	d101      	bne.n	8019b64 <LL_ADC_IsEnabled+0x18>
 8019b60:	2301      	movs	r3, #1
 8019b62:	e000      	b.n	8019b66 <LL_ADC_IsEnabled+0x1a>
 8019b64:	2300      	movs	r3, #0
}
 8019b66:	4618      	mov	r0, r3
 8019b68:	370c      	adds	r7, #12
 8019b6a:	46bd      	mov	sp, r7
 8019b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b70:	4770      	bx	lr

08019b72 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8019b72:	b480      	push	{r7}
 8019b74:	b083      	sub	sp, #12
 8019b76:	af00      	add	r7, sp, #0
 8019b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	689b      	ldr	r3, [r3, #8]
 8019b7e:	f003 0302 	and.w	r3, r3, #2
 8019b82:	2b02      	cmp	r3, #2
 8019b84:	d101      	bne.n	8019b8a <LL_ADC_IsDisableOngoing+0x18>
 8019b86:	2301      	movs	r3, #1
 8019b88:	e000      	b.n	8019b8c <LL_ADC_IsDisableOngoing+0x1a>
 8019b8a:	2300      	movs	r3, #0
}
 8019b8c:	4618      	mov	r0, r3
 8019b8e:	370c      	adds	r7, #12
 8019b90:	46bd      	mov	sp, r7
 8019b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b96:	4770      	bx	lr

08019b98 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8019b98:	b480      	push	{r7}
 8019b9a:	b083      	sub	sp, #12
 8019b9c:	af00      	add	r7, sp, #0
 8019b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	689b      	ldr	r3, [r3, #8]
 8019ba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019ba8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019bac:	f043 0204 	orr.w	r2, r3, #4
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8019bb4:	bf00      	nop
 8019bb6:	370c      	adds	r7, #12
 8019bb8:	46bd      	mov	sp, r7
 8019bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bbe:	4770      	bx	lr

08019bc0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8019bc0:	b480      	push	{r7}
 8019bc2:	b083      	sub	sp, #12
 8019bc4:	af00      	add	r7, sp, #0
 8019bc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	689b      	ldr	r3, [r3, #8]
 8019bcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019bd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019bd4:	f043 0210 	orr.w	r2, r3, #16
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8019bdc:	bf00      	nop
 8019bde:	370c      	adds	r7, #12
 8019be0:	46bd      	mov	sp, r7
 8019be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019be6:	4770      	bx	lr

08019be8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8019be8:	b480      	push	{r7}
 8019bea:	b083      	sub	sp, #12
 8019bec:	af00      	add	r7, sp, #0
 8019bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	689b      	ldr	r3, [r3, #8]
 8019bf4:	f003 0304 	and.w	r3, r3, #4
 8019bf8:	2b04      	cmp	r3, #4
 8019bfa:	d101      	bne.n	8019c00 <LL_ADC_REG_IsConversionOngoing+0x18>
 8019bfc:	2301      	movs	r3, #1
 8019bfe:	e000      	b.n	8019c02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8019c00:	2300      	movs	r3, #0
}
 8019c02:	4618      	mov	r0, r3
 8019c04:	370c      	adds	r7, #12
 8019c06:	46bd      	mov	sp, r7
 8019c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c0c:	4770      	bx	lr

08019c0e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8019c0e:	b480      	push	{r7}
 8019c10:	b083      	sub	sp, #12
 8019c12:	af00      	add	r7, sp, #0
 8019c14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	689b      	ldr	r3, [r3, #8]
 8019c1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019c1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019c22:	f043 0220 	orr.w	r2, r3, #32
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8019c2a:	bf00      	nop
 8019c2c:	370c      	adds	r7, #12
 8019c2e:	46bd      	mov	sp, r7
 8019c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c34:	4770      	bx	lr

08019c36 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8019c36:	b480      	push	{r7}
 8019c38:	b083      	sub	sp, #12
 8019c3a:	af00      	add	r7, sp, #0
 8019c3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	689b      	ldr	r3, [r3, #8]
 8019c42:	f003 0308 	and.w	r3, r3, #8
 8019c46:	2b08      	cmp	r3, #8
 8019c48:	d101      	bne.n	8019c4e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8019c4a:	2301      	movs	r3, #1
 8019c4c:	e000      	b.n	8019c50 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8019c4e:	2300      	movs	r3, #0
}
 8019c50:	4618      	mov	r0, r3
 8019c52:	370c      	adds	r7, #12
 8019c54:	46bd      	mov	sp, r7
 8019c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c5a:	4770      	bx	lr

08019c5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8019c5c:	b590      	push	{r4, r7, lr}
 8019c5e:	b089      	sub	sp, #36	; 0x24
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8019c64:	2300      	movs	r3, #0
 8019c66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8019c68:	2300      	movs	r3, #0
 8019c6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d101      	bne.n	8019c76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8019c72:	2301      	movs	r3, #1
 8019c74:	e1a1      	b.n	8019fba <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	695b      	ldr	r3, [r3, #20]
 8019c7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d109      	bne.n	8019c98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8019c84:	6878      	ldr	r0, [r7, #4]
 8019c86:	f7ef f8c7 	bl	8008e18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	2200      	movs	r2, #0
 8019c8e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	2200      	movs	r2, #0
 8019c94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	4618      	mov	r0, r3
 8019c9e:	f7ff fef1 	bl	8019a84 <LL_ADC_IsDeepPowerDownEnabled>
 8019ca2:	4603      	mov	r3, r0
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d004      	beq.n	8019cb2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	681b      	ldr	r3, [r3, #0]
 8019cac:	4618      	mov	r0, r3
 8019cae:	f7ff fed7 	bl	8019a60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	4618      	mov	r0, r3
 8019cb8:	f7ff ff0c 	bl	8019ad4 <LL_ADC_IsInternalRegulatorEnabled>
 8019cbc:	4603      	mov	r3, r0
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d115      	bne.n	8019cee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	4618      	mov	r0, r3
 8019cc8:	f7ff fef0 	bl	8019aac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8019ccc:	4b9a      	ldr	r3, [pc, #616]	; (8019f38 <HAL_ADC_Init+0x2dc>)
 8019cce:	681b      	ldr	r3, [r3, #0]
 8019cd0:	099b      	lsrs	r3, r3, #6
 8019cd2:	4a9a      	ldr	r2, [pc, #616]	; (8019f3c <HAL_ADC_Init+0x2e0>)
 8019cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8019cd8:	099b      	lsrs	r3, r3, #6
 8019cda:	3301      	adds	r3, #1
 8019cdc:	005b      	lsls	r3, r3, #1
 8019cde:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8019ce0:	e002      	b.n	8019ce8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8019ce2:	68bb      	ldr	r3, [r7, #8]
 8019ce4:	3b01      	subs	r3, #1
 8019ce6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8019ce8:	68bb      	ldr	r3, [r7, #8]
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d1f9      	bne.n	8019ce2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	f7ff feee 	bl	8019ad4 <LL_ADC_IsInternalRegulatorEnabled>
 8019cf8:	4603      	mov	r3, r0
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d10d      	bne.n	8019d1a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019d02:	f043 0210 	orr.w	r2, r3, #16
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019d0e:	f043 0201 	orr.w	r2, r3, #1
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8019d16:	2301      	movs	r3, #1
 8019d18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	4618      	mov	r0, r3
 8019d20:	f7ff ff62 	bl	8019be8 <LL_ADC_REG_IsConversionOngoing>
 8019d24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019d2a:	f003 0310 	and.w	r3, r3, #16
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	f040 813a 	bne.w	8019fa8 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8019d34:	697b      	ldr	r3, [r7, #20]
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	f040 8136 	bne.w	8019fa8 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019d40:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8019d44:	f043 0202 	orr.w	r2, r3, #2
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	4618      	mov	r0, r3
 8019d52:	f7ff fefb 	bl	8019b4c <LL_ADC_IsEnabled>
 8019d56:	4603      	mov	r3, r0
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d137      	bne.n	8019dcc <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019d64:	d004      	beq.n	8019d70 <HAL_ADC_Init+0x114>
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	4a75      	ldr	r2, [pc, #468]	; (8019f40 <HAL_ADC_Init+0x2e4>)
 8019d6c:	4293      	cmp	r3, r2
 8019d6e:	d10f      	bne.n	8019d90 <HAL_ADC_Init+0x134>
 8019d70:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8019d74:	f7ff feea 	bl	8019b4c <LL_ADC_IsEnabled>
 8019d78:	4604      	mov	r4, r0
 8019d7a:	4871      	ldr	r0, [pc, #452]	; (8019f40 <HAL_ADC_Init+0x2e4>)
 8019d7c:	f7ff fee6 	bl	8019b4c <LL_ADC_IsEnabled>
 8019d80:	4603      	mov	r3, r0
 8019d82:	4323      	orrs	r3, r4
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	bf0c      	ite	eq
 8019d88:	2301      	moveq	r3, #1
 8019d8a:	2300      	movne	r3, #0
 8019d8c:	b2db      	uxtb	r3, r3
 8019d8e:	e008      	b.n	8019da2 <HAL_ADC_Init+0x146>
 8019d90:	486c      	ldr	r0, [pc, #432]	; (8019f44 <HAL_ADC_Init+0x2e8>)
 8019d92:	f7ff fedb 	bl	8019b4c <LL_ADC_IsEnabled>
 8019d96:	4603      	mov	r3, r0
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	bf0c      	ite	eq
 8019d9c:	2301      	moveq	r3, #1
 8019d9e:	2300      	movne	r3, #0
 8019da0:	b2db      	uxtb	r3, r3
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d012      	beq.n	8019dcc <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019dae:	d004      	beq.n	8019dba <HAL_ADC_Init+0x15e>
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	4a62      	ldr	r2, [pc, #392]	; (8019f40 <HAL_ADC_Init+0x2e4>)
 8019db6:	4293      	cmp	r3, r2
 8019db8:	d101      	bne.n	8019dbe <HAL_ADC_Init+0x162>
 8019dba:	4a63      	ldr	r2, [pc, #396]	; (8019f48 <HAL_ADC_Init+0x2ec>)
 8019dbc:	e000      	b.n	8019dc0 <HAL_ADC_Init+0x164>
 8019dbe:	4a63      	ldr	r2, [pc, #396]	; (8019f4c <HAL_ADC_Init+0x2f0>)
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	685b      	ldr	r3, [r3, #4]
 8019dc4:	4619      	mov	r1, r3
 8019dc6:	4610      	mov	r0, r2
 8019dc8:	f7ff fcb6 	bl	8019738 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	7f5b      	ldrb	r3, [r3, #29]
 8019dd0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8019dd6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8019ddc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8019de2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019dea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8019dec:	4313      	orrs	r3, r2
 8019dee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019df6:	2b01      	cmp	r3, #1
 8019df8:	d106      	bne.n	8019e08 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019dfe:	3b01      	subs	r3, #1
 8019e00:	045b      	lsls	r3, r3, #17
 8019e02:	69ba      	ldr	r2, [r7, #24]
 8019e04:	4313      	orrs	r3, r2
 8019e06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d009      	beq.n	8019e24 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e14:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019e1c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8019e1e:	69ba      	ldr	r2, [r7, #24]
 8019e20:	4313      	orrs	r3, r2
 8019e22:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	68da      	ldr	r2, [r3, #12]
 8019e2a:	4b49      	ldr	r3, [pc, #292]	; (8019f50 <HAL_ADC_Init+0x2f4>)
 8019e2c:	4013      	ands	r3, r2
 8019e2e:	687a      	ldr	r2, [r7, #4]
 8019e30:	6812      	ldr	r2, [r2, #0]
 8019e32:	69b9      	ldr	r1, [r7, #24]
 8019e34:	430b      	orrs	r3, r1
 8019e36:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	691b      	ldr	r3, [r3, #16]
 8019e3e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	681b      	ldr	r3, [r3, #0]
 8019e4a:	430a      	orrs	r2, r1
 8019e4c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	4618      	mov	r0, r3
 8019e54:	f7ff fec8 	bl	8019be8 <LL_ADC_REG_IsConversionOngoing>
 8019e58:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	4618      	mov	r0, r3
 8019e60:	f7ff fee9 	bl	8019c36 <LL_ADC_INJ_IsConversionOngoing>
 8019e64:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8019e66:	693b      	ldr	r3, [r7, #16]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d17b      	bne.n	8019f64 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8019e6c:	68fb      	ldr	r3, [r7, #12]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d178      	bne.n	8019f64 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8019e76:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019e7e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8019e80:	4313      	orrs	r3, r2
 8019e82:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	68db      	ldr	r3, [r3, #12]
 8019e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8019e8e:	f023 0302 	bic.w	r3, r3, #2
 8019e92:	687a      	ldr	r2, [r7, #4]
 8019e94:	6812      	ldr	r2, [r2, #0]
 8019e96:	69b9      	ldr	r1, [r7, #24]
 8019e98:	430b      	orrs	r3, r1
 8019e9a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	691b      	ldr	r3, [r3, #16]
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d017      	beq.n	8019ed4 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	691a      	ldr	r2, [r3, #16]
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8019eb2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019ebc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8019ec0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019ec4:	687a      	ldr	r2, [r7, #4]
 8019ec6:	6911      	ldr	r1, [r2, #16]
 8019ec8:	687a      	ldr	r2, [r7, #4]
 8019eca:	6812      	ldr	r2, [r2, #0]
 8019ecc:	430b      	orrs	r3, r1
 8019ece:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8019ed2:	e013      	b.n	8019efc <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	691a      	ldr	r2, [r3, #16]
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	681b      	ldr	r3, [r3, #0]
 8019ede:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8019ee2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019eec:	687a      	ldr	r2, [r7, #4]
 8019eee:	6812      	ldr	r2, [r2, #0]
 8019ef0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8019ef4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019ef8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019f02:	2b01      	cmp	r3, #1
 8019f04:	d126      	bne.n	8019f54 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	691b      	ldr	r3, [r3, #16]
 8019f0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8019f10:	f023 0304 	bic.w	r3, r3, #4
 8019f14:	687a      	ldr	r2, [r7, #4]
 8019f16:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8019f18:	687a      	ldr	r2, [r7, #4]
 8019f1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8019f1c:	4311      	orrs	r1, r2
 8019f1e:	687a      	ldr	r2, [r7, #4]
 8019f20:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8019f22:	4311      	orrs	r1, r2
 8019f24:	687a      	ldr	r2, [r7, #4]
 8019f26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8019f28:	430a      	orrs	r2, r1
 8019f2a:	431a      	orrs	r2, r3
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	681b      	ldr	r3, [r3, #0]
 8019f30:	f042 0201 	orr.w	r2, r2, #1
 8019f34:	611a      	str	r2, [r3, #16]
 8019f36:	e015      	b.n	8019f64 <HAL_ADC_Init+0x308>
 8019f38:	20000000 	.word	0x20000000
 8019f3c:	053e2d63 	.word	0x053e2d63
 8019f40:	50000100 	.word	0x50000100
 8019f44:	50000400 	.word	0x50000400
 8019f48:	50000300 	.word	0x50000300
 8019f4c:	50000700 	.word	0x50000700
 8019f50:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	691a      	ldr	r2, [r3, #16]
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	681b      	ldr	r3, [r3, #0]
 8019f5e:	f022 0201 	bic.w	r2, r2, #1
 8019f62:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	695b      	ldr	r3, [r3, #20]
 8019f68:	2b01      	cmp	r3, #1
 8019f6a:	d10c      	bne.n	8019f86 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	681b      	ldr	r3, [r3, #0]
 8019f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f72:	f023 010f 	bic.w	r1, r3, #15
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	6a1b      	ldr	r3, [r3, #32]
 8019f7a:	1e5a      	subs	r2, r3, #1
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	681b      	ldr	r3, [r3, #0]
 8019f80:	430a      	orrs	r2, r1
 8019f82:	631a      	str	r2, [r3, #48]	; 0x30
 8019f84:	e007      	b.n	8019f96 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	f022 020f 	bic.w	r2, r2, #15
 8019f94:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f9a:	f023 0303 	bic.w	r3, r3, #3
 8019f9e:	f043 0201 	orr.w	r2, r3, #1
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	65da      	str	r2, [r3, #92]	; 0x5c
 8019fa6:	e007      	b.n	8019fb8 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019fac:	f043 0210 	orr.w	r2, r3, #16
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8019fb4:	2301      	movs	r3, #1
 8019fb6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8019fb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8019fba:	4618      	mov	r0, r3
 8019fbc:	3724      	adds	r7, #36	; 0x24
 8019fbe:	46bd      	mov	sp, r7
 8019fc0:	bd90      	pop	{r4, r7, pc}
 8019fc2:	bf00      	nop

08019fc4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8019fc4:	b580      	push	{r7, lr}
 8019fc6:	b086      	sub	sp, #24
 8019fc8:	af00      	add	r7, sp, #0
 8019fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019fd4:	d004      	beq.n	8019fe0 <HAL_ADC_Start+0x1c>
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	4a5c      	ldr	r2, [pc, #368]	; (801a14c <HAL_ADC_Start+0x188>)
 8019fdc:	4293      	cmp	r3, r2
 8019fde:	d101      	bne.n	8019fe4 <HAL_ADC_Start+0x20>
 8019fe0:	4b5b      	ldr	r3, [pc, #364]	; (801a150 <HAL_ADC_Start+0x18c>)
 8019fe2:	e000      	b.n	8019fe6 <HAL_ADC_Start+0x22>
 8019fe4:	4b5b      	ldr	r3, [pc, #364]	; (801a154 <HAL_ADC_Start+0x190>)
 8019fe6:	4618      	mov	r0, r3
 8019fe8:	f7ff fd1e 	bl	8019a28 <LL_ADC_GetMultimode>
 8019fec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	f7ff fdf8 	bl	8019be8 <LL_ADC_REG_IsConversionOngoing>
 8019ff8:	4603      	mov	r3, r0
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	f040 809f 	bne.w	801a13e <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801a006:	2b01      	cmp	r3, #1
 801a008:	d101      	bne.n	801a00e <HAL_ADC_Start+0x4a>
 801a00a:	2302      	movs	r3, #2
 801a00c:	e09a      	b.n	801a144 <HAL_ADC_Start+0x180>
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	2201      	movs	r2, #1
 801a012:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 801a016:	6878      	ldr	r0, [r7, #4]
 801a018:	f001 fa3e 	bl	801b498 <ADC_Enable>
 801a01c:	4603      	mov	r3, r0
 801a01e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 801a020:	7dfb      	ldrb	r3, [r7, #23]
 801a022:	2b00      	cmp	r3, #0
 801a024:	f040 8086 	bne.w	801a134 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a02c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801a030:	f023 0301 	bic.w	r3, r3, #1
 801a034:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	4a42      	ldr	r2, [pc, #264]	; (801a14c <HAL_ADC_Start+0x188>)
 801a042:	4293      	cmp	r3, r2
 801a044:	d002      	beq.n	801a04c <HAL_ADC_Start+0x88>
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	e001      	b.n	801a050 <HAL_ADC_Start+0x8c>
 801a04c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a050:	687a      	ldr	r2, [r7, #4]
 801a052:	6812      	ldr	r2, [r2, #0]
 801a054:	4293      	cmp	r3, r2
 801a056:	d002      	beq.n	801a05e <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a058:	693b      	ldr	r3, [r7, #16]
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d105      	bne.n	801a06a <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a062:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a06e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a076:	d106      	bne.n	801a086 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a07c:	f023 0206 	bic.w	r2, r3, #6
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	661a      	str	r2, [r3, #96]	; 0x60
 801a084:	e002      	b.n	801a08c <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	2200      	movs	r2, #0
 801a08a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	221c      	movs	r2, #28
 801a092:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	2200      	movs	r2, #0
 801a098:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	4a2a      	ldr	r2, [pc, #168]	; (801a14c <HAL_ADC_Start+0x188>)
 801a0a2:	4293      	cmp	r3, r2
 801a0a4:	d002      	beq.n	801a0ac <HAL_ADC_Start+0xe8>
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	e001      	b.n	801a0b0 <HAL_ADC_Start+0xec>
 801a0ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a0b0:	687a      	ldr	r2, [r7, #4]
 801a0b2:	6812      	ldr	r2, [r2, #0]
 801a0b4:	4293      	cmp	r3, r2
 801a0b6:	d008      	beq.n	801a0ca <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a0b8:	693b      	ldr	r3, [r7, #16]
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	d005      	beq.n	801a0ca <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801a0be:	693b      	ldr	r3, [r7, #16]
 801a0c0:	2b05      	cmp	r3, #5
 801a0c2:	d002      	beq.n	801a0ca <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801a0c4:	693b      	ldr	r3, [r7, #16]
 801a0c6:	2b09      	cmp	r3, #9
 801a0c8:	d114      	bne.n	801a0f4 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	68db      	ldr	r3, [r3, #12]
 801a0d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d007      	beq.n	801a0e8 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a0dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801a0e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	681b      	ldr	r3, [r3, #0]
 801a0ec:	4618      	mov	r0, r3
 801a0ee:	f7ff fd53 	bl	8019b98 <LL_ADC_REG_StartConversion>
 801a0f2:	e026      	b.n	801a142 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a0f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	4a11      	ldr	r2, [pc, #68]	; (801a14c <HAL_ADC_Start+0x188>)
 801a106:	4293      	cmp	r3, r2
 801a108:	d002      	beq.n	801a110 <HAL_ADC_Start+0x14c>
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	e001      	b.n	801a114 <HAL_ADC_Start+0x150>
 801a110:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a114:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 801a116:	68fb      	ldr	r3, [r7, #12]
 801a118:	68db      	ldr	r3, [r3, #12]
 801a11a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a11e:	2b00      	cmp	r3, #0
 801a120:	d00f      	beq.n	801a142 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a126:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801a12a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	65da      	str	r2, [r3, #92]	; 0x5c
 801a132:	e006      	b.n	801a142 <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	2200      	movs	r2, #0
 801a138:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 801a13c:	e001      	b.n	801a142 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801a13e:	2302      	movs	r3, #2
 801a140:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 801a142:	7dfb      	ldrb	r3, [r7, #23]
}
 801a144:	4618      	mov	r0, r3
 801a146:	3718      	adds	r7, #24
 801a148:	46bd      	mov	sp, r7
 801a14a:	bd80      	pop	{r7, pc}
 801a14c:	50000100 	.word	0x50000100
 801a150:	50000300 	.word	0x50000300
 801a154:	50000700 	.word	0x50000700

0801a158 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 801a158:	b580      	push	{r7, lr}
 801a15a:	b084      	sub	sp, #16
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801a166:	2b01      	cmp	r3, #1
 801a168:	d101      	bne.n	801a16e <HAL_ADC_Stop+0x16>
 801a16a:	2302      	movs	r3, #2
 801a16c:	e023      	b.n	801a1b6 <HAL_ADC_Stop+0x5e>
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	2201      	movs	r2, #1
 801a172:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 801a176:	2103      	movs	r1, #3
 801a178:	6878      	ldr	r0, [r7, #4]
 801a17a:	f001 f8d1 	bl	801b320 <ADC_ConversionStop>
 801a17e:	4603      	mov	r3, r0
 801a180:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 801a182:	7bfb      	ldrb	r3, [r7, #15]
 801a184:	2b00      	cmp	r3, #0
 801a186:	d111      	bne.n	801a1ac <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 801a188:	6878      	ldr	r0, [r7, #4]
 801a18a:	f001 f9e7 	bl	801b55c <ADC_Disable>
 801a18e:	4603      	mov	r3, r0
 801a190:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 801a192:	7bfb      	ldrb	r3, [r7, #15]
 801a194:	2b00      	cmp	r3, #0
 801a196:	d109      	bne.n	801a1ac <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a19c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801a1a0:	f023 0301 	bic.w	r3, r3, #1
 801a1a4:	f043 0201 	orr.w	r2, r3, #1
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	2200      	movs	r2, #0
 801a1b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801a1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 801a1b6:	4618      	mov	r0, r3
 801a1b8:	3710      	adds	r7, #16
 801a1ba:	46bd      	mov	sp, r7
 801a1bc:	bd80      	pop	{r7, pc}
	...

0801a1c0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 801a1c0:	b580      	push	{r7, lr}
 801a1c2:	b088      	sub	sp, #32
 801a1c4:	af00      	add	r7, sp, #0
 801a1c6:	6078      	str	r0, [r7, #4]
 801a1c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a1d2:	d004      	beq.n	801a1de <HAL_ADC_PollForConversion+0x1e>
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	4a70      	ldr	r2, [pc, #448]	; (801a39c <HAL_ADC_PollForConversion+0x1dc>)
 801a1da:	4293      	cmp	r3, r2
 801a1dc:	d101      	bne.n	801a1e2 <HAL_ADC_PollForConversion+0x22>
 801a1de:	4b70      	ldr	r3, [pc, #448]	; (801a3a0 <HAL_ADC_PollForConversion+0x1e0>)
 801a1e0:	e000      	b.n	801a1e4 <HAL_ADC_PollForConversion+0x24>
 801a1e2:	4b70      	ldr	r3, [pc, #448]	; (801a3a4 <HAL_ADC_PollForConversion+0x1e4>)
 801a1e4:	4618      	mov	r0, r3
 801a1e6:	f7ff fc1f 	bl	8019a28 <LL_ADC_GetMultimode>
 801a1ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	699b      	ldr	r3, [r3, #24]
 801a1f0:	2b08      	cmp	r3, #8
 801a1f2:	d102      	bne.n	801a1fa <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 801a1f4:	2308      	movs	r3, #8
 801a1f6:	61fb      	str	r3, [r7, #28]
 801a1f8:	e037      	b.n	801a26a <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a1fa:	697b      	ldr	r3, [r7, #20]
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d005      	beq.n	801a20c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801a200:	697b      	ldr	r3, [r7, #20]
 801a202:	2b05      	cmp	r3, #5
 801a204:	d002      	beq.n	801a20c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801a206:	697b      	ldr	r3, [r7, #20]
 801a208:	2b09      	cmp	r3, #9
 801a20a:	d111      	bne.n	801a230 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	681b      	ldr	r3, [r3, #0]
 801a210:	68db      	ldr	r3, [r3, #12]
 801a212:	f003 0301 	and.w	r3, r3, #1
 801a216:	2b00      	cmp	r3, #0
 801a218:	d007      	beq.n	801a22a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a21e:	f043 0220 	orr.w	r2, r3, #32
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 801a226:	2301      	movs	r3, #1
 801a228:	e0b3      	b.n	801a392 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801a22a:	2304      	movs	r3, #4
 801a22c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 801a22e:	e01c      	b.n	801a26a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	681b      	ldr	r3, [r3, #0]
 801a234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a238:	d004      	beq.n	801a244 <HAL_ADC_PollForConversion+0x84>
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	4a57      	ldr	r2, [pc, #348]	; (801a39c <HAL_ADC_PollForConversion+0x1dc>)
 801a240:	4293      	cmp	r3, r2
 801a242:	d101      	bne.n	801a248 <HAL_ADC_PollForConversion+0x88>
 801a244:	4b56      	ldr	r3, [pc, #344]	; (801a3a0 <HAL_ADC_PollForConversion+0x1e0>)
 801a246:	e000      	b.n	801a24a <HAL_ADC_PollForConversion+0x8a>
 801a248:	4b56      	ldr	r3, [pc, #344]	; (801a3a4 <HAL_ADC_PollForConversion+0x1e4>)
 801a24a:	4618      	mov	r0, r3
 801a24c:	f7ff fbfa 	bl	8019a44 <LL_ADC_GetMultiDMATransfer>
 801a250:	4603      	mov	r3, r0
 801a252:	2b00      	cmp	r3, #0
 801a254:	d007      	beq.n	801a266 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a25a:	f043 0220 	orr.w	r2, r3, #32
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 801a262:	2301      	movs	r3, #1
 801a264:	e095      	b.n	801a392 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801a266:	2304      	movs	r3, #4
 801a268:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 801a26a:	f7ff fa37 	bl	80196dc <HAL_GetTick>
 801a26e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801a270:	e021      	b.n	801a2b6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 801a272:	683b      	ldr	r3, [r7, #0]
 801a274:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a278:	d01d      	beq.n	801a2b6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 801a27a:	f7ff fa2f 	bl	80196dc <HAL_GetTick>
 801a27e:	4602      	mov	r2, r0
 801a280:	693b      	ldr	r3, [r7, #16]
 801a282:	1ad3      	subs	r3, r2, r3
 801a284:	683a      	ldr	r2, [r7, #0]
 801a286:	429a      	cmp	r2, r3
 801a288:	d302      	bcc.n	801a290 <HAL_ADC_PollForConversion+0xd0>
 801a28a:	683b      	ldr	r3, [r7, #0]
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d112      	bne.n	801a2b6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	681a      	ldr	r2, [r3, #0]
 801a296:	69fb      	ldr	r3, [r7, #28]
 801a298:	4013      	ands	r3, r2
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d10b      	bne.n	801a2b6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a2a2:	f043 0204 	orr.w	r2, r3, #4
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	2200      	movs	r2, #0
 801a2ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 801a2b2:	2303      	movs	r3, #3
 801a2b4:	e06d      	b.n	801a392 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	681a      	ldr	r2, [r3, #0]
 801a2bc:	69fb      	ldr	r3, [r7, #28]
 801a2be:	4013      	ands	r3, r2
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	d0d6      	beq.n	801a272 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a2c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	f7ff fb01 	bl	80198dc <LL_ADC_REG_IsTriggerSourceSWStart>
 801a2da:	4603      	mov	r3, r0
 801a2dc:	2b00      	cmp	r3, #0
 801a2de:	d01c      	beq.n	801a31a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	7f5b      	ldrb	r3, [r3, #29]
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d118      	bne.n	801a31a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	681b      	ldr	r3, [r3, #0]
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	f003 0308 	and.w	r3, r3, #8
 801a2f2:	2b08      	cmp	r3, #8
 801a2f4:	d111      	bne.n	801a31a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a2fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d105      	bne.n	801a31a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a312:	f043 0201 	orr.w	r2, r3, #1
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	4a1f      	ldr	r2, [pc, #124]	; (801a39c <HAL_ADC_PollForConversion+0x1dc>)
 801a320:	4293      	cmp	r3, r2
 801a322:	d002      	beq.n	801a32a <HAL_ADC_PollForConversion+0x16a>
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	e001      	b.n	801a32e <HAL_ADC_PollForConversion+0x16e>
 801a32a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a32e:	687a      	ldr	r2, [r7, #4]
 801a330:	6812      	ldr	r2, [r2, #0]
 801a332:	4293      	cmp	r3, r2
 801a334:	d008      	beq.n	801a348 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a336:	697b      	ldr	r3, [r7, #20]
 801a338:	2b00      	cmp	r3, #0
 801a33a:	d005      	beq.n	801a348 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801a33c:	697b      	ldr	r3, [r7, #20]
 801a33e:	2b05      	cmp	r3, #5
 801a340:	d002      	beq.n	801a348 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801a342:	697b      	ldr	r3, [r7, #20]
 801a344:	2b09      	cmp	r3, #9
 801a346:	d104      	bne.n	801a352 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	68db      	ldr	r3, [r3, #12]
 801a34e:	61bb      	str	r3, [r7, #24]
 801a350:	e00d      	b.n	801a36e <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	4a11      	ldr	r2, [pc, #68]	; (801a39c <HAL_ADC_PollForConversion+0x1dc>)
 801a358:	4293      	cmp	r3, r2
 801a35a:	d002      	beq.n	801a362 <HAL_ADC_PollForConversion+0x1a2>
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	e001      	b.n	801a366 <HAL_ADC_PollForConversion+0x1a6>
 801a362:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a366:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801a368:	68fb      	ldr	r3, [r7, #12]
 801a36a:	68db      	ldr	r3, [r3, #12]
 801a36c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 801a36e:	69fb      	ldr	r3, [r7, #28]
 801a370:	2b08      	cmp	r3, #8
 801a372:	d104      	bne.n	801a37e <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	2208      	movs	r2, #8
 801a37a:	601a      	str	r2, [r3, #0]
 801a37c:	e008      	b.n	801a390 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 801a37e:	69bb      	ldr	r3, [r7, #24]
 801a380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a384:	2b00      	cmp	r3, #0
 801a386:	d103      	bne.n	801a390 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	681b      	ldr	r3, [r3, #0]
 801a38c:	220c      	movs	r2, #12
 801a38e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 801a390:	2300      	movs	r3, #0
}
 801a392:	4618      	mov	r0, r3
 801a394:	3720      	adds	r7, #32
 801a396:	46bd      	mov	sp, r7
 801a398:	bd80      	pop	{r7, pc}
 801a39a:	bf00      	nop
 801a39c:	50000100 	.word	0x50000100
 801a3a0:	50000300 	.word	0x50000300
 801a3a4:	50000700 	.word	0x50000700

0801a3a8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 801a3a8:	b580      	push	{r7, lr}
 801a3aa:	b086      	sub	sp, #24
 801a3ac:	af00      	add	r7, sp, #0
 801a3ae:	60f8      	str	r0, [r7, #12]
 801a3b0:	60b9      	str	r1, [r7, #8]
 801a3b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	681b      	ldr	r3, [r3, #0]
 801a3b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a3bc:	d004      	beq.n	801a3c8 <HAL_ADC_Start_DMA+0x20>
 801a3be:	68fb      	ldr	r3, [r7, #12]
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	4a57      	ldr	r2, [pc, #348]	; (801a520 <HAL_ADC_Start_DMA+0x178>)
 801a3c4:	4293      	cmp	r3, r2
 801a3c6:	d101      	bne.n	801a3cc <HAL_ADC_Start_DMA+0x24>
 801a3c8:	4b56      	ldr	r3, [pc, #344]	; (801a524 <HAL_ADC_Start_DMA+0x17c>)
 801a3ca:	e000      	b.n	801a3ce <HAL_ADC_Start_DMA+0x26>
 801a3cc:	4b56      	ldr	r3, [pc, #344]	; (801a528 <HAL_ADC_Start_DMA+0x180>)
 801a3ce:	4618      	mov	r0, r3
 801a3d0:	f7ff fb2a 	bl	8019a28 <LL_ADC_GetMultimode>
 801a3d4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801a3d6:	68fb      	ldr	r3, [r7, #12]
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	4618      	mov	r0, r3
 801a3dc:	f7ff fc04 	bl	8019be8 <LL_ADC_REG_IsConversionOngoing>
 801a3e0:	4603      	mov	r3, r0
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	f040 8094 	bne.w	801a510 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 801a3e8:	68fb      	ldr	r3, [r7, #12]
 801a3ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801a3ee:	2b01      	cmp	r3, #1
 801a3f0:	d101      	bne.n	801a3f6 <HAL_ADC_Start_DMA+0x4e>
 801a3f2:	2302      	movs	r3, #2
 801a3f4:	e08f      	b.n	801a516 <HAL_ADC_Start_DMA+0x16e>
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	2201      	movs	r2, #1
 801a3fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	4a4a      	ldr	r2, [pc, #296]	; (801a52c <HAL_ADC_Start_DMA+0x184>)
 801a404:	4293      	cmp	r3, r2
 801a406:	d008      	beq.n	801a41a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a408:	693b      	ldr	r3, [r7, #16]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d005      	beq.n	801a41a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801a40e:	693b      	ldr	r3, [r7, #16]
 801a410:	2b05      	cmp	r3, #5
 801a412:	d002      	beq.n	801a41a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801a414:	693b      	ldr	r3, [r7, #16]
 801a416:	2b09      	cmp	r3, #9
 801a418:	d173      	bne.n	801a502 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 801a41a:	68f8      	ldr	r0, [r7, #12]
 801a41c:	f001 f83c 	bl	801b498 <ADC_Enable>
 801a420:	4603      	mov	r3, r0
 801a422:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 801a424:	7dfb      	ldrb	r3, [r7, #23]
 801a426:	2b00      	cmp	r3, #0
 801a428:	d166      	bne.n	801a4f8 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 801a42a:	68fb      	ldr	r3, [r7, #12]
 801a42c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a42e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801a432:	f023 0301 	bic.w	r3, r3, #1
 801a436:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801a43a:	68fb      	ldr	r3, [r7, #12]
 801a43c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801a43e:	68fb      	ldr	r3, [r7, #12]
 801a440:	681b      	ldr	r3, [r3, #0]
 801a442:	4a37      	ldr	r2, [pc, #220]	; (801a520 <HAL_ADC_Start_DMA+0x178>)
 801a444:	4293      	cmp	r3, r2
 801a446:	d002      	beq.n	801a44e <HAL_ADC_Start_DMA+0xa6>
 801a448:	68fb      	ldr	r3, [r7, #12]
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	e001      	b.n	801a452 <HAL_ADC_Start_DMA+0xaa>
 801a44e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a452:	68fa      	ldr	r2, [r7, #12]
 801a454:	6812      	ldr	r2, [r2, #0]
 801a456:	4293      	cmp	r3, r2
 801a458:	d002      	beq.n	801a460 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a45a:	693b      	ldr	r3, [r7, #16]
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	d105      	bne.n	801a46c <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 801a460:	68fb      	ldr	r3, [r7, #12]
 801a462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a464:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801a468:	68fb      	ldr	r3, [r7, #12]
 801a46a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a474:	2b00      	cmp	r3, #0
 801a476:	d006      	beq.n	801a486 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 801a478:	68fb      	ldr	r3, [r7, #12]
 801a47a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a47c:	f023 0206 	bic.w	r2, r3, #6
 801a480:	68fb      	ldr	r3, [r7, #12]
 801a482:	661a      	str	r2, [r3, #96]	; 0x60
 801a484:	e002      	b.n	801a48c <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 801a486:	68fb      	ldr	r3, [r7, #12]
 801a488:	2200      	movs	r2, #0
 801a48a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801a48c:	68fb      	ldr	r3, [r7, #12]
 801a48e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a490:	4a27      	ldr	r2, [pc, #156]	; (801a530 <HAL_ADC_Start_DMA+0x188>)
 801a492:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801a494:	68fb      	ldr	r3, [r7, #12]
 801a496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a498:	4a26      	ldr	r2, [pc, #152]	; (801a534 <HAL_ADC_Start_DMA+0x18c>)
 801a49a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801a49c:	68fb      	ldr	r3, [r7, #12]
 801a49e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a4a0:	4a25      	ldr	r2, [pc, #148]	; (801a538 <HAL_ADC_Start_DMA+0x190>)
 801a4a2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801a4a4:	68fb      	ldr	r3, [r7, #12]
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	221c      	movs	r2, #28
 801a4aa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 801a4ac:	68fb      	ldr	r3, [r7, #12]
 801a4ae:	2200      	movs	r2, #0
 801a4b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801a4b4:	68fb      	ldr	r3, [r7, #12]
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	685a      	ldr	r2, [r3, #4]
 801a4ba:	68fb      	ldr	r3, [r7, #12]
 801a4bc:	681b      	ldr	r3, [r3, #0]
 801a4be:	f042 0210 	orr.w	r2, r2, #16
 801a4c2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 801a4c4:	68fb      	ldr	r3, [r7, #12]
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	68da      	ldr	r2, [r3, #12]
 801a4ca:	68fb      	ldr	r3, [r7, #12]
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	f042 0201 	orr.w	r2, r2, #1
 801a4d2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	3340      	adds	r3, #64	; 0x40
 801a4de:	4619      	mov	r1, r3
 801a4e0:	68ba      	ldr	r2, [r7, #8]
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	f001 fcb4 	bl	801be50 <HAL_DMA_Start_IT>
 801a4e8:	4603      	mov	r3, r0
 801a4ea:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 801a4ec:	68fb      	ldr	r3, [r7, #12]
 801a4ee:	681b      	ldr	r3, [r3, #0]
 801a4f0:	4618      	mov	r0, r3
 801a4f2:	f7ff fb51 	bl	8019b98 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 801a4f6:	e00d      	b.n	801a514 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801a4f8:	68fb      	ldr	r3, [r7, #12]
 801a4fa:	2200      	movs	r2, #0
 801a4fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 801a500:	e008      	b.n	801a514 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 801a502:	2301      	movs	r3, #1
 801a504:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801a506:	68fb      	ldr	r3, [r7, #12]
 801a508:	2200      	movs	r2, #0
 801a50a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 801a50e:	e001      	b.n	801a514 <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801a510:	2302      	movs	r3, #2
 801a512:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 801a514:	7dfb      	ldrb	r3, [r7, #23]
}
 801a516:	4618      	mov	r0, r3
 801a518:	3718      	adds	r7, #24
 801a51a:	46bd      	mov	sp, r7
 801a51c:	bd80      	pop	{r7, pc}
 801a51e:	bf00      	nop
 801a520:	50000100 	.word	0x50000100
 801a524:	50000300 	.word	0x50000300
 801a528:	50000700 	.word	0x50000700
 801a52c:	50000400 	.word	0x50000400
 801a530:	0801b61b 	.word	0x0801b61b
 801a534:	0801b6f3 	.word	0x0801b6f3
 801a538:	0801b70f 	.word	0x0801b70f

0801a53c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 801a53c:	b580      	push	{r7, lr}
 801a53e:	b084      	sub	sp, #16
 801a540:	af00      	add	r7, sp, #0
 801a542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801a54a:	2b01      	cmp	r3, #1
 801a54c:	d101      	bne.n	801a552 <HAL_ADC_Stop_DMA+0x16>
 801a54e:	2302      	movs	r3, #2
 801a550:	e051      	b.n	801a5f6 <HAL_ADC_Stop_DMA+0xba>
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	2201      	movs	r2, #1
 801a556:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 801a55a:	2103      	movs	r1, #3
 801a55c:	6878      	ldr	r0, [r7, #4]
 801a55e:	f000 fedf 	bl	801b320 <ADC_ConversionStop>
 801a562:	4603      	mov	r3, r0
 801a564:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 801a566:	7bfb      	ldrb	r3, [r7, #15]
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d13f      	bne.n	801a5ec <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	68da      	ldr	r2, [r3, #12]
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	f022 0201 	bic.w	r2, r2, #1
 801a57a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a580:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801a584:	b2db      	uxtb	r3, r3
 801a586:	2b02      	cmp	r3, #2
 801a588:	d10f      	bne.n	801a5aa <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a58e:	4618      	mov	r0, r3
 801a590:	f001 fcd9 	bl	801bf46 <HAL_DMA_Abort>
 801a594:	4603      	mov	r3, r0
 801a596:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 801a598:	7bfb      	ldrb	r3, [r7, #15]
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d005      	beq.n	801a5aa <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a5a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	681b      	ldr	r3, [r3, #0]
 801a5ae:	685a      	ldr	r2, [r3, #4]
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	f022 0210 	bic.w	r2, r2, #16
 801a5b8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 801a5ba:	7bfb      	ldrb	r3, [r7, #15]
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d105      	bne.n	801a5cc <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 801a5c0:	6878      	ldr	r0, [r7, #4]
 801a5c2:	f000 ffcb 	bl	801b55c <ADC_Disable>
 801a5c6:	4603      	mov	r3, r0
 801a5c8:	73fb      	strb	r3, [r7, #15]
 801a5ca:	e002      	b.n	801a5d2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 801a5cc:	6878      	ldr	r0, [r7, #4]
 801a5ce:	f000 ffc5 	bl	801b55c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 801a5d2:	7bfb      	ldrb	r3, [r7, #15]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d109      	bne.n	801a5ec <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a5dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801a5e0:	f023 0301 	bic.w	r3, r3, #1
 801a5e4:	f043 0201 	orr.w	r2, r3, #1
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	2200      	movs	r2, #0
 801a5f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801a5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 801a5f6:	4618      	mov	r0, r3
 801a5f8:	3710      	adds	r7, #16
 801a5fa:	46bd      	mov	sp, r7
 801a5fc:	bd80      	pop	{r7, pc}

0801a5fe <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 801a5fe:	b480      	push	{r7}
 801a600:	b083      	sub	sp, #12
 801a602:	af00      	add	r7, sp, #0
 801a604:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 801a60c:	4618      	mov	r0, r3
 801a60e:	370c      	adds	r7, #12
 801a610:	46bd      	mov	sp, r7
 801a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a616:	4770      	bx	lr

0801a618 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 801a618:	b580      	push	{r7, lr}
 801a61a:	b08a      	sub	sp, #40	; 0x28
 801a61c:	af00      	add	r7, sp, #0
 801a61e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 801a620:	2300      	movs	r3, #0
 801a622:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	681b      	ldr	r3, [r3, #0]
 801a62a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	685b      	ldr	r3, [r3, #4]
 801a632:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a63c:	d004      	beq.n	801a648 <HAL_ADC_IRQHandler+0x30>
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	4a87      	ldr	r2, [pc, #540]	; (801a860 <HAL_ADC_IRQHandler+0x248>)
 801a644:	4293      	cmp	r3, r2
 801a646:	d101      	bne.n	801a64c <HAL_ADC_IRQHandler+0x34>
 801a648:	4b86      	ldr	r3, [pc, #536]	; (801a864 <HAL_ADC_IRQHandler+0x24c>)
 801a64a:	e000      	b.n	801a64e <HAL_ADC_IRQHandler+0x36>
 801a64c:	4b86      	ldr	r3, [pc, #536]	; (801a868 <HAL_ADC_IRQHandler+0x250>)
 801a64e:	4618      	mov	r0, r3
 801a650:	f7ff f9ea 	bl	8019a28 <LL_ADC_GetMultimode>
 801a654:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 801a656:	69fb      	ldr	r3, [r7, #28]
 801a658:	f003 0302 	and.w	r3, r3, #2
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	d017      	beq.n	801a690 <HAL_ADC_IRQHandler+0x78>
 801a660:	69bb      	ldr	r3, [r7, #24]
 801a662:	f003 0302 	and.w	r3, r3, #2
 801a666:	2b00      	cmp	r3, #0
 801a668:	d012      	beq.n	801a690 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a66e:	f003 0310 	and.w	r3, r3, #16
 801a672:	2b00      	cmp	r3, #0
 801a674:	d105      	bne.n	801a682 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a67a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 801a682:	6878      	ldr	r0, [r7, #4]
 801a684:	f001 f93a 	bl	801b8fc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	2202      	movs	r2, #2
 801a68e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 801a690:	69fb      	ldr	r3, [r7, #28]
 801a692:	f003 0304 	and.w	r3, r3, #4
 801a696:	2b00      	cmp	r3, #0
 801a698:	d004      	beq.n	801a6a4 <HAL_ADC_IRQHandler+0x8c>
 801a69a:	69bb      	ldr	r3, [r7, #24]
 801a69c:	f003 0304 	and.w	r3, r3, #4
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	d10a      	bne.n	801a6ba <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 801a6a4:	69fb      	ldr	r3, [r7, #28]
 801a6a6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	f000 8085 	beq.w	801a7ba <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 801a6b0:	69bb      	ldr	r3, [r7, #24]
 801a6b2:	f003 0308 	and.w	r3, r3, #8
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d07f      	beq.n	801a7ba <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a6be:	f003 0310 	and.w	r3, r3, #16
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d105      	bne.n	801a6d2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a6ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	4618      	mov	r0, r3
 801a6d8:	f7ff f900 	bl	80198dc <LL_ADC_REG_IsTriggerSourceSWStart>
 801a6dc:	4603      	mov	r3, r0
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	d064      	beq.n	801a7ac <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	681b      	ldr	r3, [r3, #0]
 801a6e6:	4a5e      	ldr	r2, [pc, #376]	; (801a860 <HAL_ADC_IRQHandler+0x248>)
 801a6e8:	4293      	cmp	r3, r2
 801a6ea:	d002      	beq.n	801a6f2 <HAL_ADC_IRQHandler+0xda>
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	681b      	ldr	r3, [r3, #0]
 801a6f0:	e001      	b.n	801a6f6 <HAL_ADC_IRQHandler+0xde>
 801a6f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a6f6:	687a      	ldr	r2, [r7, #4]
 801a6f8:	6812      	ldr	r2, [r2, #0]
 801a6fa:	4293      	cmp	r3, r2
 801a6fc:	d008      	beq.n	801a710 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a6fe:	697b      	ldr	r3, [r7, #20]
 801a700:	2b00      	cmp	r3, #0
 801a702:	d005      	beq.n	801a710 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801a704:	697b      	ldr	r3, [r7, #20]
 801a706:	2b05      	cmp	r3, #5
 801a708:	d002      	beq.n	801a710 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801a70a:	697b      	ldr	r3, [r7, #20]
 801a70c:	2b09      	cmp	r3, #9
 801a70e:	d104      	bne.n	801a71a <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	681b      	ldr	r3, [r3, #0]
 801a714:	68db      	ldr	r3, [r3, #12]
 801a716:	623b      	str	r3, [r7, #32]
 801a718:	e00d      	b.n	801a736 <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	4a50      	ldr	r2, [pc, #320]	; (801a860 <HAL_ADC_IRQHandler+0x248>)
 801a720:	4293      	cmp	r3, r2
 801a722:	d002      	beq.n	801a72a <HAL_ADC_IRQHandler+0x112>
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	681b      	ldr	r3, [r3, #0]
 801a728:	e001      	b.n	801a72e <HAL_ADC_IRQHandler+0x116>
 801a72a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a72e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801a730:	693b      	ldr	r3, [r7, #16]
 801a732:	68db      	ldr	r3, [r3, #12]
 801a734:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 801a736:	6a3b      	ldr	r3, [r7, #32]
 801a738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d135      	bne.n	801a7ac <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	681b      	ldr	r3, [r3, #0]
 801a744:	681b      	ldr	r3, [r3, #0]
 801a746:	f003 0308 	and.w	r3, r3, #8
 801a74a:	2b08      	cmp	r3, #8
 801a74c:	d12e      	bne.n	801a7ac <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	4618      	mov	r0, r3
 801a754:	f7ff fa48 	bl	8019be8 <LL_ADC_REG_IsConversionOngoing>
 801a758:	4603      	mov	r3, r0
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d11a      	bne.n	801a794 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	685a      	ldr	r2, [r3, #4]
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	681b      	ldr	r3, [r3, #0]
 801a768:	f022 020c 	bic.w	r2, r2, #12
 801a76c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a772:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a77e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a782:	2b00      	cmp	r3, #0
 801a784:	d112      	bne.n	801a7ac <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a78a:	f043 0201 	orr.w	r2, r3, #1
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	65da      	str	r2, [r3, #92]	; 0x5c
 801a792:	e00b      	b.n	801a7ac <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a798:	f043 0210 	orr.w	r2, r3, #16
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a7a4:	f043 0201 	orr.w	r2, r3, #1
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801a7ac:	6878      	ldr	r0, [r7, #4]
 801a7ae:	f7ee fbdb 	bl	8008f68 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	220c      	movs	r2, #12
 801a7b8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 801a7ba:	69fb      	ldr	r3, [r7, #28]
 801a7bc:	f003 0320 	and.w	r3, r3, #32
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	d004      	beq.n	801a7ce <HAL_ADC_IRQHandler+0x1b6>
 801a7c4:	69bb      	ldr	r3, [r7, #24]
 801a7c6:	f003 0320 	and.w	r3, r3, #32
 801a7ca:	2b00      	cmp	r3, #0
 801a7cc:	d10b      	bne.n	801a7e6 <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 801a7ce:	69fb      	ldr	r3, [r7, #28]
 801a7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	f000 80a1 	beq.w	801a91c <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 801a7da:	69bb      	ldr	r3, [r7, #24]
 801a7dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a7e0:	2b00      	cmp	r3, #0
 801a7e2:	f000 809b 	beq.w	801a91c <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a7ea:	f003 0310 	and.w	r3, r3, #16
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d105      	bne.n	801a7fe <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a7f6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	4618      	mov	r0, r3
 801a804:	f7ff f8a9 	bl	801995a <LL_ADC_INJ_IsTriggerSourceSWStart>
 801a808:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	4618      	mov	r0, r3
 801a810:	f7ff f864 	bl	80198dc <LL_ADC_REG_IsTriggerSourceSWStart>
 801a814:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	681b      	ldr	r3, [r3, #0]
 801a81a:	4a11      	ldr	r2, [pc, #68]	; (801a860 <HAL_ADC_IRQHandler+0x248>)
 801a81c:	4293      	cmp	r3, r2
 801a81e:	d002      	beq.n	801a826 <HAL_ADC_IRQHandler+0x20e>
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	e001      	b.n	801a82a <HAL_ADC_IRQHandler+0x212>
 801a826:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a82a:	687a      	ldr	r2, [r7, #4]
 801a82c:	6812      	ldr	r2, [r2, #0]
 801a82e:	4293      	cmp	r3, r2
 801a830:	d008      	beq.n	801a844 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a832:	697b      	ldr	r3, [r7, #20]
 801a834:	2b00      	cmp	r3, #0
 801a836:	d005      	beq.n	801a844 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 801a838:	697b      	ldr	r3, [r7, #20]
 801a83a:	2b06      	cmp	r3, #6
 801a83c:	d002      	beq.n	801a844 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 801a83e:	697b      	ldr	r3, [r7, #20]
 801a840:	2b07      	cmp	r3, #7
 801a842:	d104      	bne.n	801a84e <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	68db      	ldr	r3, [r3, #12]
 801a84a:	623b      	str	r3, [r7, #32]
 801a84c:	e014      	b.n	801a878 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	681b      	ldr	r3, [r3, #0]
 801a852:	4a03      	ldr	r2, [pc, #12]	; (801a860 <HAL_ADC_IRQHandler+0x248>)
 801a854:	4293      	cmp	r3, r2
 801a856:	d009      	beq.n	801a86c <HAL_ADC_IRQHandler+0x254>
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	681b      	ldr	r3, [r3, #0]
 801a85c:	e008      	b.n	801a870 <HAL_ADC_IRQHandler+0x258>
 801a85e:	bf00      	nop
 801a860:	50000100 	.word	0x50000100
 801a864:	50000300 	.word	0x50000300
 801a868:	50000700 	.word	0x50000700
 801a86c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a870:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801a872:	693b      	ldr	r3, [r7, #16]
 801a874:	68db      	ldr	r3, [r3, #12]
 801a876:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 801a878:	68fb      	ldr	r3, [r7, #12]
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	d047      	beq.n	801a90e <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 801a87e:	6a3b      	ldr	r3, [r7, #32]
 801a880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a884:	2b00      	cmp	r3, #0
 801a886:	d007      	beq.n	801a898 <HAL_ADC_IRQHandler+0x280>
 801a888:	68bb      	ldr	r3, [r7, #8]
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d03f      	beq.n	801a90e <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 801a88e:	6a3b      	ldr	r3, [r7, #32]
 801a890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 801a894:	2b00      	cmp	r3, #0
 801a896:	d13a      	bne.n	801a90e <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a8a2:	2b40      	cmp	r3, #64	; 0x40
 801a8a4:	d133      	bne.n	801a90e <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 801a8a6:	6a3b      	ldr	r3, [r7, #32]
 801a8a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d12e      	bne.n	801a90e <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	4618      	mov	r0, r3
 801a8b6:	f7ff f9be 	bl	8019c36 <LL_ADC_INJ_IsConversionOngoing>
 801a8ba:	4603      	mov	r3, r0
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	d11a      	bne.n	801a8f6 <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	681b      	ldr	r3, [r3, #0]
 801a8c4:	685a      	ldr	r2, [r3, #4]
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a8ce:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a8e4:	2b00      	cmp	r3, #0
 801a8e6:	d112      	bne.n	801a90e <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8ec:	f043 0201 	orr.w	r2, r3, #1
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	65da      	str	r2, [r3, #92]	; 0x5c
 801a8f4:	e00b      	b.n	801a90e <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8fa:	f043 0210 	orr.w	r2, r3, #16
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a906:	f043 0201 	orr.w	r2, r3, #1
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 801a90e:	6878      	ldr	r0, [r7, #4]
 801a910:	f000 ffcc 	bl	801b8ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	2260      	movs	r2, #96	; 0x60
 801a91a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 801a91c:	69fb      	ldr	r3, [r7, #28]
 801a91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a922:	2b00      	cmp	r3, #0
 801a924:	d011      	beq.n	801a94a <HAL_ADC_IRQHandler+0x332>
 801a926:	69bb      	ldr	r3, [r7, #24]
 801a928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d00c      	beq.n	801a94a <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a934:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 801a93c:	6878      	ldr	r0, [r7, #4]
 801a93e:	f000 f8af 	bl	801aaa0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	681b      	ldr	r3, [r3, #0]
 801a946:	2280      	movs	r2, #128	; 0x80
 801a948:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 801a94a:	69fb      	ldr	r3, [r7, #28]
 801a94c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a950:	2b00      	cmp	r3, #0
 801a952:	d012      	beq.n	801a97a <HAL_ADC_IRQHandler+0x362>
 801a954:	69bb      	ldr	r3, [r7, #24]
 801a956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d00d      	beq.n	801a97a <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a962:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 801a96a:	6878      	ldr	r0, [r7, #4]
 801a96c:	f000 ffb2 	bl	801b8d4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	681b      	ldr	r3, [r3, #0]
 801a974:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a978:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 801a97a:	69fb      	ldr	r3, [r7, #28]
 801a97c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a980:	2b00      	cmp	r3, #0
 801a982:	d012      	beq.n	801a9aa <HAL_ADC_IRQHandler+0x392>
 801a984:	69bb      	ldr	r3, [r7, #24]
 801a986:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	d00d      	beq.n	801a9aa <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a992:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 801a99a:	6878      	ldr	r0, [r7, #4]
 801a99c:	f000 ffa4 	bl	801b8e8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a9a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 801a9aa:	69fb      	ldr	r3, [r7, #28]
 801a9ac:	f003 0310 	and.w	r3, r3, #16
 801a9b0:	2b00      	cmp	r3, #0
 801a9b2:	d043      	beq.n	801aa3c <HAL_ADC_IRQHandler+0x424>
 801a9b4:	69bb      	ldr	r3, [r7, #24]
 801a9b6:	f003 0310 	and.w	r3, r3, #16
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d03e      	beq.n	801aa3c <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d102      	bne.n	801a9cc <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 801a9c6:	2301      	movs	r3, #1
 801a9c8:	627b      	str	r3, [r7, #36]	; 0x24
 801a9ca:	e021      	b.n	801aa10 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 801a9cc:	697b      	ldr	r3, [r7, #20]
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	d015      	beq.n	801a9fe <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a9da:	d004      	beq.n	801a9e6 <HAL_ADC_IRQHandler+0x3ce>
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	681b      	ldr	r3, [r3, #0]
 801a9e0:	4a27      	ldr	r2, [pc, #156]	; (801aa80 <HAL_ADC_IRQHandler+0x468>)
 801a9e2:	4293      	cmp	r3, r2
 801a9e4:	d101      	bne.n	801a9ea <HAL_ADC_IRQHandler+0x3d2>
 801a9e6:	4b27      	ldr	r3, [pc, #156]	; (801aa84 <HAL_ADC_IRQHandler+0x46c>)
 801a9e8:	e000      	b.n	801a9ec <HAL_ADC_IRQHandler+0x3d4>
 801a9ea:	4b27      	ldr	r3, [pc, #156]	; (801aa88 <HAL_ADC_IRQHandler+0x470>)
 801a9ec:	4618      	mov	r0, r3
 801a9ee:	f7ff f829 	bl	8019a44 <LL_ADC_GetMultiDMATransfer>
 801a9f2:	4603      	mov	r3, r0
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d00b      	beq.n	801aa10 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 801a9f8:	2301      	movs	r3, #1
 801a9fa:	627b      	str	r3, [r7, #36]	; 0x24
 801a9fc:	e008      	b.n	801aa10 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	681b      	ldr	r3, [r3, #0]
 801aa02:	68db      	ldr	r3, [r3, #12]
 801aa04:	f003 0301 	and.w	r3, r3, #1
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	d001      	beq.n	801aa10 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 801aa0c:	2301      	movs	r3, #1
 801aa0e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 801aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa12:	2b01      	cmp	r3, #1
 801aa14:	d10e      	bne.n	801aa34 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa1a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aa26:	f043 0202 	orr.w	r2, r3, #2
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 801aa2e:	6878      	ldr	r0, [r7, #4]
 801aa30:	f000 f840 	bl	801aab4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	2210      	movs	r2, #16
 801aa3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 801aa3c:	69fb      	ldr	r3, [r7, #28]
 801aa3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801aa42:	2b00      	cmp	r3, #0
 801aa44:	d018      	beq.n	801aa78 <HAL_ADC_IRQHandler+0x460>
 801aa46:	69bb      	ldr	r3, [r7, #24]
 801aa48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801aa4c:	2b00      	cmp	r3, #0
 801aa4e:	d013      	beq.n	801aa78 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa54:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aa60:	f043 0208 	orr.w	r2, r3, #8
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801aa70:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 801aa72:	6878      	ldr	r0, [r7, #4]
 801aa74:	f000 ff24 	bl	801b8c0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 801aa78:	bf00      	nop
 801aa7a:	3728      	adds	r7, #40	; 0x28
 801aa7c:	46bd      	mov	sp, r7
 801aa7e:	bd80      	pop	{r7, pc}
 801aa80:	50000100 	.word	0x50000100
 801aa84:	50000300 	.word	0x50000300
 801aa88:	50000700 	.word	0x50000700

0801aa8c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 801aa8c:	b480      	push	{r7}
 801aa8e:	b083      	sub	sp, #12
 801aa90:	af00      	add	r7, sp, #0
 801aa92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 801aa94:	bf00      	nop
 801aa96:	370c      	adds	r7, #12
 801aa98:	46bd      	mov	sp, r7
 801aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa9e:	4770      	bx	lr

0801aaa0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 801aaa0:	b480      	push	{r7}
 801aaa2:	b083      	sub	sp, #12
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 801aaa8:	bf00      	nop
 801aaaa:	370c      	adds	r7, #12
 801aaac:	46bd      	mov	sp, r7
 801aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aab2:	4770      	bx	lr

0801aab4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801aab4:	b480      	push	{r7}
 801aab6:	b083      	sub	sp, #12
 801aab8:	af00      	add	r7, sp, #0
 801aaba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 801aabc:	bf00      	nop
 801aabe:	370c      	adds	r7, #12
 801aac0:	46bd      	mov	sp, r7
 801aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aac6:	4770      	bx	lr

0801aac8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 801aac8:	b580      	push	{r7, lr}
 801aaca:	b0b6      	sub	sp, #216	; 0xd8
 801aacc:	af00      	add	r7, sp, #0
 801aace:	6078      	str	r0, [r7, #4]
 801aad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801aad2:	2300      	movs	r3, #0
 801aad4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 801aad8:	2300      	movs	r3, #0
 801aada:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801aae2:	2b01      	cmp	r3, #1
 801aae4:	d102      	bne.n	801aaec <HAL_ADC_ConfigChannel+0x24>
 801aae6:	2302      	movs	r3, #2
 801aae8:	f000 bc04 	b.w	801b2f4 <HAL_ADC_ConfigChannel+0x82c>
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	2201      	movs	r2, #1
 801aaf0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	681b      	ldr	r3, [r3, #0]
 801aaf8:	4618      	mov	r0, r3
 801aafa:	f7ff f875 	bl	8019be8 <LL_ADC_REG_IsConversionOngoing>
 801aafe:	4603      	mov	r3, r0
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	f040 83e8 	bne.w	801b2d6 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	6818      	ldr	r0, [r3, #0]
 801ab0a:	683b      	ldr	r3, [r7, #0]
 801ab0c:	6859      	ldr	r1, [r3, #4]
 801ab0e:	683b      	ldr	r3, [r7, #0]
 801ab10:	681b      	ldr	r3, [r3, #0]
 801ab12:	461a      	mov	r2, r3
 801ab14:	f7fe fef5 	bl	8019902 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	4618      	mov	r0, r3
 801ab1e:	f7ff f863 	bl	8019be8 <LL_ADC_REG_IsConversionOngoing>
 801ab22:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	681b      	ldr	r3, [r3, #0]
 801ab2a:	4618      	mov	r0, r3
 801ab2c:	f7ff f883 	bl	8019c36 <LL_ADC_INJ_IsConversionOngoing>
 801ab30:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801ab34:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	f040 81d9 	bne.w	801aef0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801ab3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	f040 81d4 	bne.w	801aef0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 801ab48:	683b      	ldr	r3, [r7, #0]
 801ab4a:	689b      	ldr	r3, [r3, #8]
 801ab4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ab50:	d10f      	bne.n	801ab72 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	6818      	ldr	r0, [r3, #0]
 801ab56:	683b      	ldr	r3, [r7, #0]
 801ab58:	681b      	ldr	r3, [r3, #0]
 801ab5a:	2200      	movs	r2, #0
 801ab5c:	4619      	mov	r1, r3
 801ab5e:	f7fe ff0f 	bl	8019980 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	681b      	ldr	r3, [r3, #0]
 801ab66:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801ab6a:	4618      	mov	r0, r3
 801ab6c:	f7fe fea3 	bl	80198b6 <LL_ADC_SetSamplingTimeCommonConfig>
 801ab70:	e00e      	b.n	801ab90 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	6818      	ldr	r0, [r3, #0]
 801ab76:	683b      	ldr	r3, [r7, #0]
 801ab78:	6819      	ldr	r1, [r3, #0]
 801ab7a:	683b      	ldr	r3, [r7, #0]
 801ab7c:	689b      	ldr	r3, [r3, #8]
 801ab7e:	461a      	mov	r2, r3
 801ab80:	f7fe fefe 	bl	8019980 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	2100      	movs	r1, #0
 801ab8a:	4618      	mov	r0, r3
 801ab8c:	f7fe fe93 	bl	80198b6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 801ab90:	683b      	ldr	r3, [r7, #0]
 801ab92:	695a      	ldr	r2, [r3, #20]
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	681b      	ldr	r3, [r3, #0]
 801ab98:	68db      	ldr	r3, [r3, #12]
 801ab9a:	08db      	lsrs	r3, r3, #3
 801ab9c:	f003 0303 	and.w	r3, r3, #3
 801aba0:	005b      	lsls	r3, r3, #1
 801aba2:	fa02 f303 	lsl.w	r3, r2, r3
 801aba6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 801abaa:	683b      	ldr	r3, [r7, #0]
 801abac:	691b      	ldr	r3, [r3, #16]
 801abae:	2b04      	cmp	r3, #4
 801abb0:	d022      	beq.n	801abf8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	6818      	ldr	r0, [r3, #0]
 801abb6:	683b      	ldr	r3, [r7, #0]
 801abb8:	6919      	ldr	r1, [r3, #16]
 801abba:	683b      	ldr	r3, [r7, #0]
 801abbc:	681a      	ldr	r2, [r3, #0]
 801abbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801abc2:	f7fe fded 	bl	80197a0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	6818      	ldr	r0, [r3, #0]
 801abca:	683b      	ldr	r3, [r7, #0]
 801abcc:	6919      	ldr	r1, [r3, #16]
 801abce:	683b      	ldr	r3, [r7, #0]
 801abd0:	699b      	ldr	r3, [r3, #24]
 801abd2:	461a      	mov	r2, r3
 801abd4:	f7fe fe39 	bl	801984a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	6818      	ldr	r0, [r3, #0]
 801abdc:	683b      	ldr	r3, [r7, #0]
 801abde:	6919      	ldr	r1, [r3, #16]
 801abe0:	683b      	ldr	r3, [r7, #0]
 801abe2:	7f1b      	ldrb	r3, [r3, #28]
 801abe4:	2b01      	cmp	r3, #1
 801abe6:	d102      	bne.n	801abee <HAL_ADC_ConfigChannel+0x126>
 801abe8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801abec:	e000      	b.n	801abf0 <HAL_ADC_ConfigChannel+0x128>
 801abee:	2300      	movs	r3, #0
 801abf0:	461a      	mov	r2, r3
 801abf2:	f7fe fe45 	bl	8019880 <LL_ADC_SetOffsetSaturation>
 801abf6:	e17b      	b.n	801aef0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	681b      	ldr	r3, [r3, #0]
 801abfc:	2100      	movs	r1, #0
 801abfe:	4618      	mov	r0, r3
 801ac00:	f7fe fdf2 	bl	80197e8 <LL_ADC_GetOffsetChannel>
 801ac04:	4603      	mov	r3, r0
 801ac06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d10a      	bne.n	801ac24 <HAL_ADC_ConfigChannel+0x15c>
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	681b      	ldr	r3, [r3, #0]
 801ac12:	2100      	movs	r1, #0
 801ac14:	4618      	mov	r0, r3
 801ac16:	f7fe fde7 	bl	80197e8 <LL_ADC_GetOffsetChannel>
 801ac1a:	4603      	mov	r3, r0
 801ac1c:	0e9b      	lsrs	r3, r3, #26
 801ac1e:	f003 021f 	and.w	r2, r3, #31
 801ac22:	e01e      	b.n	801ac62 <HAL_ADC_ConfigChannel+0x19a>
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	681b      	ldr	r3, [r3, #0]
 801ac28:	2100      	movs	r1, #0
 801ac2a:	4618      	mov	r0, r3
 801ac2c:	f7fe fddc 	bl	80197e8 <LL_ADC_GetOffsetChannel>
 801ac30:	4603      	mov	r3, r0
 801ac32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ac36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801ac3a:	fa93 f3a3 	rbit	r3, r3
 801ac3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 801ac42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801ac46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 801ac4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	d101      	bne.n	801ac56 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 801ac52:	2320      	movs	r3, #32
 801ac54:	e004      	b.n	801ac60 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 801ac56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ac5a:	fab3 f383 	clz	r3, r3
 801ac5e:	b2db      	uxtb	r3, r3
 801ac60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801ac62:	683b      	ldr	r3, [r7, #0]
 801ac64:	681b      	ldr	r3, [r3, #0]
 801ac66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d105      	bne.n	801ac7a <HAL_ADC_ConfigChannel+0x1b2>
 801ac6e:	683b      	ldr	r3, [r7, #0]
 801ac70:	681b      	ldr	r3, [r3, #0]
 801ac72:	0e9b      	lsrs	r3, r3, #26
 801ac74:	f003 031f 	and.w	r3, r3, #31
 801ac78:	e018      	b.n	801acac <HAL_ADC_ConfigChannel+0x1e4>
 801ac7a:	683b      	ldr	r3, [r7, #0]
 801ac7c:	681b      	ldr	r3, [r3, #0]
 801ac7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ac82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801ac86:	fa93 f3a3 	rbit	r3, r3
 801ac8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 801ac8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ac92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 801ac96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d101      	bne.n	801aca2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 801ac9e:	2320      	movs	r3, #32
 801aca0:	e004      	b.n	801acac <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 801aca2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801aca6:	fab3 f383 	clz	r3, r3
 801acaa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801acac:	429a      	cmp	r2, r3
 801acae:	d106      	bne.n	801acbe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	2200      	movs	r2, #0
 801acb6:	2100      	movs	r1, #0
 801acb8:	4618      	mov	r0, r3
 801acba:	f7fe fdab 	bl	8019814 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	681b      	ldr	r3, [r3, #0]
 801acc2:	2101      	movs	r1, #1
 801acc4:	4618      	mov	r0, r3
 801acc6:	f7fe fd8f 	bl	80197e8 <LL_ADC_GetOffsetChannel>
 801acca:	4603      	mov	r3, r0
 801accc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d10a      	bne.n	801acea <HAL_ADC_ConfigChannel+0x222>
 801acd4:	687b      	ldr	r3, [r7, #4]
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	2101      	movs	r1, #1
 801acda:	4618      	mov	r0, r3
 801acdc:	f7fe fd84 	bl	80197e8 <LL_ADC_GetOffsetChannel>
 801ace0:	4603      	mov	r3, r0
 801ace2:	0e9b      	lsrs	r3, r3, #26
 801ace4:	f003 021f 	and.w	r2, r3, #31
 801ace8:	e01e      	b.n	801ad28 <HAL_ADC_ConfigChannel+0x260>
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	2101      	movs	r1, #1
 801acf0:	4618      	mov	r0, r3
 801acf2:	f7fe fd79 	bl	80197e8 <LL_ADC_GetOffsetChannel>
 801acf6:	4603      	mov	r3, r0
 801acf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801acfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801ad00:	fa93 f3a3 	rbit	r3, r3
 801ad04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 801ad08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ad0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 801ad10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	d101      	bne.n	801ad1c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 801ad18:	2320      	movs	r3, #32
 801ad1a:	e004      	b.n	801ad26 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 801ad1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801ad20:	fab3 f383 	clz	r3, r3
 801ad24:	b2db      	uxtb	r3, r3
 801ad26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801ad28:	683b      	ldr	r3, [r7, #0]
 801ad2a:	681b      	ldr	r3, [r3, #0]
 801ad2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d105      	bne.n	801ad40 <HAL_ADC_ConfigChannel+0x278>
 801ad34:	683b      	ldr	r3, [r7, #0]
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	0e9b      	lsrs	r3, r3, #26
 801ad3a:	f003 031f 	and.w	r3, r3, #31
 801ad3e:	e018      	b.n	801ad72 <HAL_ADC_ConfigChannel+0x2aa>
 801ad40:	683b      	ldr	r3, [r7, #0]
 801ad42:	681b      	ldr	r3, [r3, #0]
 801ad44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ad48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801ad4c:	fa93 f3a3 	rbit	r3, r3
 801ad50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 801ad54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ad58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 801ad5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	d101      	bne.n	801ad68 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 801ad64:	2320      	movs	r3, #32
 801ad66:	e004      	b.n	801ad72 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 801ad68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ad6c:	fab3 f383 	clz	r3, r3
 801ad70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801ad72:	429a      	cmp	r2, r3
 801ad74:	d106      	bne.n	801ad84 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	2200      	movs	r2, #0
 801ad7c:	2101      	movs	r1, #1
 801ad7e:	4618      	mov	r0, r3
 801ad80:	f7fe fd48 	bl	8019814 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	681b      	ldr	r3, [r3, #0]
 801ad88:	2102      	movs	r1, #2
 801ad8a:	4618      	mov	r0, r3
 801ad8c:	f7fe fd2c 	bl	80197e8 <LL_ADC_GetOffsetChannel>
 801ad90:	4603      	mov	r3, r0
 801ad92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ad96:	2b00      	cmp	r3, #0
 801ad98:	d10a      	bne.n	801adb0 <HAL_ADC_ConfigChannel+0x2e8>
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	2102      	movs	r1, #2
 801ada0:	4618      	mov	r0, r3
 801ada2:	f7fe fd21 	bl	80197e8 <LL_ADC_GetOffsetChannel>
 801ada6:	4603      	mov	r3, r0
 801ada8:	0e9b      	lsrs	r3, r3, #26
 801adaa:	f003 021f 	and.w	r2, r3, #31
 801adae:	e01e      	b.n	801adee <HAL_ADC_ConfigChannel+0x326>
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	681b      	ldr	r3, [r3, #0]
 801adb4:	2102      	movs	r1, #2
 801adb6:	4618      	mov	r0, r3
 801adb8:	f7fe fd16 	bl	80197e8 <LL_ADC_GetOffsetChannel>
 801adbc:	4603      	mov	r3, r0
 801adbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801adc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801adc6:	fa93 f3a3 	rbit	r3, r3
 801adca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 801adce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801add2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 801add6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801adda:	2b00      	cmp	r3, #0
 801addc:	d101      	bne.n	801ade2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 801adde:	2320      	movs	r3, #32
 801ade0:	e004      	b.n	801adec <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 801ade2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801ade6:	fab3 f383 	clz	r3, r3
 801adea:	b2db      	uxtb	r3, r3
 801adec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801adee:	683b      	ldr	r3, [r7, #0]
 801adf0:	681b      	ldr	r3, [r3, #0]
 801adf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d105      	bne.n	801ae06 <HAL_ADC_ConfigChannel+0x33e>
 801adfa:	683b      	ldr	r3, [r7, #0]
 801adfc:	681b      	ldr	r3, [r3, #0]
 801adfe:	0e9b      	lsrs	r3, r3, #26
 801ae00:	f003 031f 	and.w	r3, r3, #31
 801ae04:	e016      	b.n	801ae34 <HAL_ADC_ConfigChannel+0x36c>
 801ae06:	683b      	ldr	r3, [r7, #0]
 801ae08:	681b      	ldr	r3, [r3, #0]
 801ae0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ae0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ae12:	fa93 f3a3 	rbit	r3, r3
 801ae16:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 801ae18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ae1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 801ae1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	d101      	bne.n	801ae2a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 801ae26:	2320      	movs	r3, #32
 801ae28:	e004      	b.n	801ae34 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 801ae2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801ae2e:	fab3 f383 	clz	r3, r3
 801ae32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801ae34:	429a      	cmp	r2, r3
 801ae36:	d106      	bne.n	801ae46 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	681b      	ldr	r3, [r3, #0]
 801ae3c:	2200      	movs	r2, #0
 801ae3e:	2102      	movs	r1, #2
 801ae40:	4618      	mov	r0, r3
 801ae42:	f7fe fce7 	bl	8019814 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	2103      	movs	r1, #3
 801ae4c:	4618      	mov	r0, r3
 801ae4e:	f7fe fccb 	bl	80197e8 <LL_ADC_GetOffsetChannel>
 801ae52:	4603      	mov	r3, r0
 801ae54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	d10a      	bne.n	801ae72 <HAL_ADC_ConfigChannel+0x3aa>
 801ae5c:	687b      	ldr	r3, [r7, #4]
 801ae5e:	681b      	ldr	r3, [r3, #0]
 801ae60:	2103      	movs	r1, #3
 801ae62:	4618      	mov	r0, r3
 801ae64:	f7fe fcc0 	bl	80197e8 <LL_ADC_GetOffsetChannel>
 801ae68:	4603      	mov	r3, r0
 801ae6a:	0e9b      	lsrs	r3, r3, #26
 801ae6c:	f003 021f 	and.w	r2, r3, #31
 801ae70:	e017      	b.n	801aea2 <HAL_ADC_ConfigChannel+0x3da>
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	681b      	ldr	r3, [r3, #0]
 801ae76:	2103      	movs	r1, #3
 801ae78:	4618      	mov	r0, r3
 801ae7a:	f7fe fcb5 	bl	80197e8 <LL_ADC_GetOffsetChannel>
 801ae7e:	4603      	mov	r3, r0
 801ae80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ae82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ae84:	fa93 f3a3 	rbit	r3, r3
 801ae88:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 801ae8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ae8c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 801ae8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ae90:	2b00      	cmp	r3, #0
 801ae92:	d101      	bne.n	801ae98 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 801ae94:	2320      	movs	r3, #32
 801ae96:	e003      	b.n	801aea0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 801ae98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ae9a:	fab3 f383 	clz	r3, r3
 801ae9e:	b2db      	uxtb	r3, r3
 801aea0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801aea2:	683b      	ldr	r3, [r7, #0]
 801aea4:	681b      	ldr	r3, [r3, #0]
 801aea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	d105      	bne.n	801aeba <HAL_ADC_ConfigChannel+0x3f2>
 801aeae:	683b      	ldr	r3, [r7, #0]
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	0e9b      	lsrs	r3, r3, #26
 801aeb4:	f003 031f 	and.w	r3, r3, #31
 801aeb8:	e011      	b.n	801aede <HAL_ADC_ConfigChannel+0x416>
 801aeba:	683b      	ldr	r3, [r7, #0]
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801aec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801aec2:	fa93 f3a3 	rbit	r3, r3
 801aec6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 801aec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801aeca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 801aecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d101      	bne.n	801aed6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 801aed2:	2320      	movs	r3, #32
 801aed4:	e003      	b.n	801aede <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 801aed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801aed8:	fab3 f383 	clz	r3, r3
 801aedc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801aede:	429a      	cmp	r2, r3
 801aee0:	d106      	bne.n	801aef0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	681b      	ldr	r3, [r3, #0]
 801aee6:	2200      	movs	r2, #0
 801aee8:	2103      	movs	r1, #3
 801aeea:	4618      	mov	r0, r3
 801aeec:	f7fe fc92 	bl	8019814 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	4618      	mov	r0, r3
 801aef6:	f7fe fe29 	bl	8019b4c <LL_ADC_IsEnabled>
 801aefa:	4603      	mov	r3, r0
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	f040 813d 	bne.w	801b17c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	6818      	ldr	r0, [r3, #0]
 801af06:	683b      	ldr	r3, [r7, #0]
 801af08:	6819      	ldr	r1, [r3, #0]
 801af0a:	683b      	ldr	r3, [r7, #0]
 801af0c:	68db      	ldr	r3, [r3, #12]
 801af0e:	461a      	mov	r2, r3
 801af10:	f7fe fd62 	bl	80199d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801af14:	683b      	ldr	r3, [r7, #0]
 801af16:	68db      	ldr	r3, [r3, #12]
 801af18:	4aa2      	ldr	r2, [pc, #648]	; (801b1a4 <HAL_ADC_ConfigChannel+0x6dc>)
 801af1a:	4293      	cmp	r3, r2
 801af1c:	f040 812e 	bne.w	801b17c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801af24:	683b      	ldr	r3, [r7, #0]
 801af26:	681b      	ldr	r3, [r3, #0]
 801af28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d10b      	bne.n	801af48 <HAL_ADC_ConfigChannel+0x480>
 801af30:	683b      	ldr	r3, [r7, #0]
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	0e9b      	lsrs	r3, r3, #26
 801af36:	3301      	adds	r3, #1
 801af38:	f003 031f 	and.w	r3, r3, #31
 801af3c:	2b09      	cmp	r3, #9
 801af3e:	bf94      	ite	ls
 801af40:	2301      	movls	r3, #1
 801af42:	2300      	movhi	r3, #0
 801af44:	b2db      	uxtb	r3, r3
 801af46:	e019      	b.n	801af7c <HAL_ADC_ConfigChannel+0x4b4>
 801af48:	683b      	ldr	r3, [r7, #0]
 801af4a:	681b      	ldr	r3, [r3, #0]
 801af4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801af4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801af50:	fa93 f3a3 	rbit	r3, r3
 801af54:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 801af56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801af58:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 801af5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d101      	bne.n	801af64 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 801af60:	2320      	movs	r3, #32
 801af62:	e003      	b.n	801af6c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 801af64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801af66:	fab3 f383 	clz	r3, r3
 801af6a:	b2db      	uxtb	r3, r3
 801af6c:	3301      	adds	r3, #1
 801af6e:	f003 031f 	and.w	r3, r3, #31
 801af72:	2b09      	cmp	r3, #9
 801af74:	bf94      	ite	ls
 801af76:	2301      	movls	r3, #1
 801af78:	2300      	movhi	r3, #0
 801af7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801af7c:	2b00      	cmp	r3, #0
 801af7e:	d079      	beq.n	801b074 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801af80:	683b      	ldr	r3, [r7, #0]
 801af82:	681b      	ldr	r3, [r3, #0]
 801af84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801af88:	2b00      	cmp	r3, #0
 801af8a:	d107      	bne.n	801af9c <HAL_ADC_ConfigChannel+0x4d4>
 801af8c:	683b      	ldr	r3, [r7, #0]
 801af8e:	681b      	ldr	r3, [r3, #0]
 801af90:	0e9b      	lsrs	r3, r3, #26
 801af92:	3301      	adds	r3, #1
 801af94:	069b      	lsls	r3, r3, #26
 801af96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801af9a:	e015      	b.n	801afc8 <HAL_ADC_ConfigChannel+0x500>
 801af9c:	683b      	ldr	r3, [r7, #0]
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801afa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801afa4:	fa93 f3a3 	rbit	r3, r3
 801afa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 801afaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801afac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 801afae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801afb0:	2b00      	cmp	r3, #0
 801afb2:	d101      	bne.n	801afb8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 801afb4:	2320      	movs	r3, #32
 801afb6:	e003      	b.n	801afc0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 801afb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801afba:	fab3 f383 	clz	r3, r3
 801afbe:	b2db      	uxtb	r3, r3
 801afc0:	3301      	adds	r3, #1
 801afc2:	069b      	lsls	r3, r3, #26
 801afc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801afc8:	683b      	ldr	r3, [r7, #0]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801afd0:	2b00      	cmp	r3, #0
 801afd2:	d109      	bne.n	801afe8 <HAL_ADC_ConfigChannel+0x520>
 801afd4:	683b      	ldr	r3, [r7, #0]
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	0e9b      	lsrs	r3, r3, #26
 801afda:	3301      	adds	r3, #1
 801afdc:	f003 031f 	and.w	r3, r3, #31
 801afe0:	2101      	movs	r1, #1
 801afe2:	fa01 f303 	lsl.w	r3, r1, r3
 801afe6:	e017      	b.n	801b018 <HAL_ADC_ConfigChannel+0x550>
 801afe8:	683b      	ldr	r3, [r7, #0]
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801afee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aff0:	fa93 f3a3 	rbit	r3, r3
 801aff4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 801aff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aff8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 801affa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801affc:	2b00      	cmp	r3, #0
 801affe:	d101      	bne.n	801b004 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 801b000:	2320      	movs	r3, #32
 801b002:	e003      	b.n	801b00c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 801b004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b006:	fab3 f383 	clz	r3, r3
 801b00a:	b2db      	uxtb	r3, r3
 801b00c:	3301      	adds	r3, #1
 801b00e:	f003 031f 	and.w	r3, r3, #31
 801b012:	2101      	movs	r1, #1
 801b014:	fa01 f303 	lsl.w	r3, r1, r3
 801b018:	ea42 0103 	orr.w	r1, r2, r3
 801b01c:	683b      	ldr	r3, [r7, #0]
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b024:	2b00      	cmp	r3, #0
 801b026:	d10a      	bne.n	801b03e <HAL_ADC_ConfigChannel+0x576>
 801b028:	683b      	ldr	r3, [r7, #0]
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	0e9b      	lsrs	r3, r3, #26
 801b02e:	3301      	adds	r3, #1
 801b030:	f003 021f 	and.w	r2, r3, #31
 801b034:	4613      	mov	r3, r2
 801b036:	005b      	lsls	r3, r3, #1
 801b038:	4413      	add	r3, r2
 801b03a:	051b      	lsls	r3, r3, #20
 801b03c:	e018      	b.n	801b070 <HAL_ADC_ConfigChannel+0x5a8>
 801b03e:	683b      	ldr	r3, [r7, #0]
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b046:	fa93 f3a3 	rbit	r3, r3
 801b04a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 801b04c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b04e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 801b050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b052:	2b00      	cmp	r3, #0
 801b054:	d101      	bne.n	801b05a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 801b056:	2320      	movs	r3, #32
 801b058:	e003      	b.n	801b062 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 801b05a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b05c:	fab3 f383 	clz	r3, r3
 801b060:	b2db      	uxtb	r3, r3
 801b062:	3301      	adds	r3, #1
 801b064:	f003 021f 	and.w	r2, r3, #31
 801b068:	4613      	mov	r3, r2
 801b06a:	005b      	lsls	r3, r3, #1
 801b06c:	4413      	add	r3, r2
 801b06e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801b070:	430b      	orrs	r3, r1
 801b072:	e07e      	b.n	801b172 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801b074:	683b      	ldr	r3, [r7, #0]
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d107      	bne.n	801b090 <HAL_ADC_ConfigChannel+0x5c8>
 801b080:	683b      	ldr	r3, [r7, #0]
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	0e9b      	lsrs	r3, r3, #26
 801b086:	3301      	adds	r3, #1
 801b088:	069b      	lsls	r3, r3, #26
 801b08a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801b08e:	e015      	b.n	801b0bc <HAL_ADC_ConfigChannel+0x5f4>
 801b090:	683b      	ldr	r3, [r7, #0]
 801b092:	681b      	ldr	r3, [r3, #0]
 801b094:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b098:	fa93 f3a3 	rbit	r3, r3
 801b09c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801b09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0a0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 801b0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	d101      	bne.n	801b0ac <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 801b0a8:	2320      	movs	r3, #32
 801b0aa:	e003      	b.n	801b0b4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 801b0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0ae:	fab3 f383 	clz	r3, r3
 801b0b2:	b2db      	uxtb	r3, r3
 801b0b4:	3301      	adds	r3, #1
 801b0b6:	069b      	lsls	r3, r3, #26
 801b0b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801b0bc:	683b      	ldr	r3, [r7, #0]
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d109      	bne.n	801b0dc <HAL_ADC_ConfigChannel+0x614>
 801b0c8:	683b      	ldr	r3, [r7, #0]
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	0e9b      	lsrs	r3, r3, #26
 801b0ce:	3301      	adds	r3, #1
 801b0d0:	f003 031f 	and.w	r3, r3, #31
 801b0d4:	2101      	movs	r1, #1
 801b0d6:	fa01 f303 	lsl.w	r3, r1, r3
 801b0da:	e017      	b.n	801b10c <HAL_ADC_ConfigChannel+0x644>
 801b0dc:	683b      	ldr	r3, [r7, #0]
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b0e2:	6a3b      	ldr	r3, [r7, #32]
 801b0e4:	fa93 f3a3 	rbit	r3, r3
 801b0e8:	61fb      	str	r3, [r7, #28]
  return result;
 801b0ea:	69fb      	ldr	r3, [r7, #28]
 801b0ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801b0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0f0:	2b00      	cmp	r3, #0
 801b0f2:	d101      	bne.n	801b0f8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 801b0f4:	2320      	movs	r3, #32
 801b0f6:	e003      	b.n	801b100 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 801b0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0fa:	fab3 f383 	clz	r3, r3
 801b0fe:	b2db      	uxtb	r3, r3
 801b100:	3301      	adds	r3, #1
 801b102:	f003 031f 	and.w	r3, r3, #31
 801b106:	2101      	movs	r1, #1
 801b108:	fa01 f303 	lsl.w	r3, r1, r3
 801b10c:	ea42 0103 	orr.w	r1, r2, r3
 801b110:	683b      	ldr	r3, [r7, #0]
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b118:	2b00      	cmp	r3, #0
 801b11a:	d10d      	bne.n	801b138 <HAL_ADC_ConfigChannel+0x670>
 801b11c:	683b      	ldr	r3, [r7, #0]
 801b11e:	681b      	ldr	r3, [r3, #0]
 801b120:	0e9b      	lsrs	r3, r3, #26
 801b122:	3301      	adds	r3, #1
 801b124:	f003 021f 	and.w	r2, r3, #31
 801b128:	4613      	mov	r3, r2
 801b12a:	005b      	lsls	r3, r3, #1
 801b12c:	4413      	add	r3, r2
 801b12e:	3b1e      	subs	r3, #30
 801b130:	051b      	lsls	r3, r3, #20
 801b132:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801b136:	e01b      	b.n	801b170 <HAL_ADC_ConfigChannel+0x6a8>
 801b138:	683b      	ldr	r3, [r7, #0]
 801b13a:	681b      	ldr	r3, [r3, #0]
 801b13c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b13e:	697b      	ldr	r3, [r7, #20]
 801b140:	fa93 f3a3 	rbit	r3, r3
 801b144:	613b      	str	r3, [r7, #16]
  return result;
 801b146:	693b      	ldr	r3, [r7, #16]
 801b148:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801b14a:	69bb      	ldr	r3, [r7, #24]
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d101      	bne.n	801b154 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 801b150:	2320      	movs	r3, #32
 801b152:	e003      	b.n	801b15c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 801b154:	69bb      	ldr	r3, [r7, #24]
 801b156:	fab3 f383 	clz	r3, r3
 801b15a:	b2db      	uxtb	r3, r3
 801b15c:	3301      	adds	r3, #1
 801b15e:	f003 021f 	and.w	r2, r3, #31
 801b162:	4613      	mov	r3, r2
 801b164:	005b      	lsls	r3, r3, #1
 801b166:	4413      	add	r3, r2
 801b168:	3b1e      	subs	r3, #30
 801b16a:	051b      	lsls	r3, r3, #20
 801b16c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801b170:	430b      	orrs	r3, r1
 801b172:	683a      	ldr	r2, [r7, #0]
 801b174:	6892      	ldr	r2, [r2, #8]
 801b176:	4619      	mov	r1, r3
 801b178:	f7fe fc02 	bl	8019980 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801b17c:	683b      	ldr	r3, [r7, #0]
 801b17e:	681a      	ldr	r2, [r3, #0]
 801b180:	4b09      	ldr	r3, [pc, #36]	; (801b1a8 <HAL_ADC_ConfigChannel+0x6e0>)
 801b182:	4013      	ands	r3, r2
 801b184:	2b00      	cmp	r3, #0
 801b186:	f000 80af 	beq.w	801b2e8 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	681b      	ldr	r3, [r3, #0]
 801b18e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b192:	d004      	beq.n	801b19e <HAL_ADC_ConfigChannel+0x6d6>
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	681b      	ldr	r3, [r3, #0]
 801b198:	4a04      	ldr	r2, [pc, #16]	; (801b1ac <HAL_ADC_ConfigChannel+0x6e4>)
 801b19a:	4293      	cmp	r3, r2
 801b19c:	d10a      	bne.n	801b1b4 <HAL_ADC_ConfigChannel+0x6ec>
 801b19e:	4b04      	ldr	r3, [pc, #16]	; (801b1b0 <HAL_ADC_ConfigChannel+0x6e8>)
 801b1a0:	e009      	b.n	801b1b6 <HAL_ADC_ConfigChannel+0x6ee>
 801b1a2:	bf00      	nop
 801b1a4:	407f0000 	.word	0x407f0000
 801b1a8:	80080000 	.word	0x80080000
 801b1ac:	50000100 	.word	0x50000100
 801b1b0:	50000300 	.word	0x50000300
 801b1b4:	4b51      	ldr	r3, [pc, #324]	; (801b2fc <HAL_ADC_ConfigChannel+0x834>)
 801b1b6:	4618      	mov	r0, r3
 801b1b8:	f7fe fae4 	bl	8019784 <LL_ADC_GetCommonPathInternalCh>
 801b1bc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 801b1c0:	683b      	ldr	r3, [r7, #0]
 801b1c2:	681b      	ldr	r3, [r3, #0]
 801b1c4:	4a4e      	ldr	r2, [pc, #312]	; (801b300 <HAL_ADC_ConfigChannel+0x838>)
 801b1c6:	4293      	cmp	r3, r2
 801b1c8:	d004      	beq.n	801b1d4 <HAL_ADC_ConfigChannel+0x70c>
 801b1ca:	683b      	ldr	r3, [r7, #0]
 801b1cc:	681b      	ldr	r3, [r3, #0]
 801b1ce:	4a4d      	ldr	r2, [pc, #308]	; (801b304 <HAL_ADC_ConfigChannel+0x83c>)
 801b1d0:	4293      	cmp	r3, r2
 801b1d2:	d134      	bne.n	801b23e <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 801b1d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b1d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	d12e      	bne.n	801b23e <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	681b      	ldr	r3, [r3, #0]
 801b1e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b1e8:	d17e      	bne.n	801b2e8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	681b      	ldr	r3, [r3, #0]
 801b1ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b1f2:	d004      	beq.n	801b1fe <HAL_ADC_ConfigChannel+0x736>
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	681b      	ldr	r3, [r3, #0]
 801b1f8:	4a43      	ldr	r2, [pc, #268]	; (801b308 <HAL_ADC_ConfigChannel+0x840>)
 801b1fa:	4293      	cmp	r3, r2
 801b1fc:	d101      	bne.n	801b202 <HAL_ADC_ConfigChannel+0x73a>
 801b1fe:	4a43      	ldr	r2, [pc, #268]	; (801b30c <HAL_ADC_ConfigChannel+0x844>)
 801b200:	e000      	b.n	801b204 <HAL_ADC_ConfigChannel+0x73c>
 801b202:	4a3e      	ldr	r2, [pc, #248]	; (801b2fc <HAL_ADC_ConfigChannel+0x834>)
 801b204:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b208:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801b20c:	4619      	mov	r1, r3
 801b20e:	4610      	mov	r0, r2
 801b210:	f7fe faa5 	bl	801975e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801b214:	4b3e      	ldr	r3, [pc, #248]	; (801b310 <HAL_ADC_ConfigChannel+0x848>)
 801b216:	681b      	ldr	r3, [r3, #0]
 801b218:	099b      	lsrs	r3, r3, #6
 801b21a:	4a3e      	ldr	r2, [pc, #248]	; (801b314 <HAL_ADC_ConfigChannel+0x84c>)
 801b21c:	fba2 2303 	umull	r2, r3, r2, r3
 801b220:	099b      	lsrs	r3, r3, #6
 801b222:	1c5a      	adds	r2, r3, #1
 801b224:	4613      	mov	r3, r2
 801b226:	005b      	lsls	r3, r3, #1
 801b228:	4413      	add	r3, r2
 801b22a:	009b      	lsls	r3, r3, #2
 801b22c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801b22e:	e002      	b.n	801b236 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 801b230:	68fb      	ldr	r3, [r7, #12]
 801b232:	3b01      	subs	r3, #1
 801b234:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801b236:	68fb      	ldr	r3, [r7, #12]
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d1f9      	bne.n	801b230 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801b23c:	e054      	b.n	801b2e8 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801b23e:	683b      	ldr	r3, [r7, #0]
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	4a35      	ldr	r2, [pc, #212]	; (801b318 <HAL_ADC_ConfigChannel+0x850>)
 801b244:	4293      	cmp	r3, r2
 801b246:	d120      	bne.n	801b28a <HAL_ADC_ConfigChannel+0x7c2>
 801b248:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b24c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801b250:	2b00      	cmp	r3, #0
 801b252:	d11a      	bne.n	801b28a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	681b      	ldr	r3, [r3, #0]
 801b258:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b25c:	d144      	bne.n	801b2e8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	681b      	ldr	r3, [r3, #0]
 801b262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b266:	d004      	beq.n	801b272 <HAL_ADC_ConfigChannel+0x7aa>
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	681b      	ldr	r3, [r3, #0]
 801b26c:	4a26      	ldr	r2, [pc, #152]	; (801b308 <HAL_ADC_ConfigChannel+0x840>)
 801b26e:	4293      	cmp	r3, r2
 801b270:	d101      	bne.n	801b276 <HAL_ADC_ConfigChannel+0x7ae>
 801b272:	4a26      	ldr	r2, [pc, #152]	; (801b30c <HAL_ADC_ConfigChannel+0x844>)
 801b274:	e000      	b.n	801b278 <HAL_ADC_ConfigChannel+0x7b0>
 801b276:	4a21      	ldr	r2, [pc, #132]	; (801b2fc <HAL_ADC_ConfigChannel+0x834>)
 801b278:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b27c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b280:	4619      	mov	r1, r3
 801b282:	4610      	mov	r0, r2
 801b284:	f7fe fa6b 	bl	801975e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801b288:	e02e      	b.n	801b2e8 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 801b28a:	683b      	ldr	r3, [r7, #0]
 801b28c:	681b      	ldr	r3, [r3, #0]
 801b28e:	4a23      	ldr	r2, [pc, #140]	; (801b31c <HAL_ADC_ConfigChannel+0x854>)
 801b290:	4293      	cmp	r3, r2
 801b292:	d129      	bne.n	801b2e8 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801b294:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	d123      	bne.n	801b2e8 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	4a18      	ldr	r2, [pc, #96]	; (801b308 <HAL_ADC_ConfigChannel+0x840>)
 801b2a6:	4293      	cmp	r3, r2
 801b2a8:	d01e      	beq.n	801b2e8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	681b      	ldr	r3, [r3, #0]
 801b2ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b2b2:	d004      	beq.n	801b2be <HAL_ADC_ConfigChannel+0x7f6>
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	681b      	ldr	r3, [r3, #0]
 801b2b8:	4a13      	ldr	r2, [pc, #76]	; (801b308 <HAL_ADC_ConfigChannel+0x840>)
 801b2ba:	4293      	cmp	r3, r2
 801b2bc:	d101      	bne.n	801b2c2 <HAL_ADC_ConfigChannel+0x7fa>
 801b2be:	4a13      	ldr	r2, [pc, #76]	; (801b30c <HAL_ADC_ConfigChannel+0x844>)
 801b2c0:	e000      	b.n	801b2c4 <HAL_ADC_ConfigChannel+0x7fc>
 801b2c2:	4a0e      	ldr	r2, [pc, #56]	; (801b2fc <HAL_ADC_ConfigChannel+0x834>)
 801b2c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b2c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801b2cc:	4619      	mov	r1, r3
 801b2ce:	4610      	mov	r0, r2
 801b2d0:	f7fe fa45 	bl	801975e <LL_ADC_SetCommonPathInternalCh>
 801b2d4:	e008      	b.n	801b2e8 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b2da:	f043 0220 	orr.w	r2, r3, #32
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801b2e2:	2301      	movs	r3, #1
 801b2e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	2200      	movs	r2, #0
 801b2ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801b2f0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 801b2f4:	4618      	mov	r0, r3
 801b2f6:	37d8      	adds	r7, #216	; 0xd8
 801b2f8:	46bd      	mov	sp, r7
 801b2fa:	bd80      	pop	{r7, pc}
 801b2fc:	50000700 	.word	0x50000700
 801b300:	c3210000 	.word	0xc3210000
 801b304:	90c00010 	.word	0x90c00010
 801b308:	50000100 	.word	0x50000100
 801b30c:	50000300 	.word	0x50000300
 801b310:	20000000 	.word	0x20000000
 801b314:	053e2d63 	.word	0x053e2d63
 801b318:	c7520000 	.word	0xc7520000
 801b31c:	cb840000 	.word	0xcb840000

0801b320 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 801b320:	b580      	push	{r7, lr}
 801b322:	b088      	sub	sp, #32
 801b324:	af00      	add	r7, sp, #0
 801b326:	6078      	str	r0, [r7, #4]
 801b328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 801b32a:	2300      	movs	r3, #0
 801b32c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 801b32e:	683b      	ldr	r3, [r7, #0]
 801b330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	681b      	ldr	r3, [r3, #0]
 801b336:	4618      	mov	r0, r3
 801b338:	f7fe fc56 	bl	8019be8 <LL_ADC_REG_IsConversionOngoing>
 801b33c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	4618      	mov	r0, r3
 801b344:	f7fe fc77 	bl	8019c36 <LL_ADC_INJ_IsConversionOngoing>
 801b348:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 801b34a:	693b      	ldr	r3, [r7, #16]
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	d103      	bne.n	801b358 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 801b350:	68fb      	ldr	r3, [r7, #12]
 801b352:	2b00      	cmp	r3, #0
 801b354:	f000 8098 	beq.w	801b488 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	68db      	ldr	r3, [r3, #12]
 801b35e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b362:	2b00      	cmp	r3, #0
 801b364:	d02a      	beq.n	801b3bc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	7f5b      	ldrb	r3, [r3, #29]
 801b36a:	2b01      	cmp	r3, #1
 801b36c:	d126      	bne.n	801b3bc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	7f1b      	ldrb	r3, [r3, #28]
 801b372:	2b01      	cmp	r3, #1
 801b374:	d122      	bne.n	801b3bc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 801b376:	2301      	movs	r3, #1
 801b378:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801b37a:	e014      	b.n	801b3a6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 801b37c:	69fb      	ldr	r3, [r7, #28]
 801b37e:	4a45      	ldr	r2, [pc, #276]	; (801b494 <ADC_ConversionStop+0x174>)
 801b380:	4293      	cmp	r3, r2
 801b382:	d90d      	bls.n	801b3a0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b388:	f043 0210 	orr.w	r2, r3, #16
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b394:	f043 0201 	orr.w	r2, r3, #1
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801b39c:	2301      	movs	r3, #1
 801b39e:	e074      	b.n	801b48a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 801b3a0:	69fb      	ldr	r3, [r7, #28]
 801b3a2:	3301      	adds	r3, #1
 801b3a4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	681b      	ldr	r3, [r3, #0]
 801b3aa:	681b      	ldr	r3, [r3, #0]
 801b3ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b3b0:	2b40      	cmp	r3, #64	; 0x40
 801b3b2:	d1e3      	bne.n	801b37c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	2240      	movs	r2, #64	; 0x40
 801b3ba:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 801b3bc:	69bb      	ldr	r3, [r7, #24]
 801b3be:	2b02      	cmp	r3, #2
 801b3c0:	d014      	beq.n	801b3ec <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	681b      	ldr	r3, [r3, #0]
 801b3c6:	4618      	mov	r0, r3
 801b3c8:	f7fe fc0e 	bl	8019be8 <LL_ADC_REG_IsConversionOngoing>
 801b3cc:	4603      	mov	r3, r0
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d00c      	beq.n	801b3ec <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	4618      	mov	r0, r3
 801b3d8:	f7fe fbcb 	bl	8019b72 <LL_ADC_IsDisableOngoing>
 801b3dc:	4603      	mov	r3, r0
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d104      	bne.n	801b3ec <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	681b      	ldr	r3, [r3, #0]
 801b3e6:	4618      	mov	r0, r3
 801b3e8:	f7fe fbea 	bl	8019bc0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 801b3ec:	69bb      	ldr	r3, [r7, #24]
 801b3ee:	2b01      	cmp	r3, #1
 801b3f0:	d014      	beq.n	801b41c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	681b      	ldr	r3, [r3, #0]
 801b3f6:	4618      	mov	r0, r3
 801b3f8:	f7fe fc1d 	bl	8019c36 <LL_ADC_INJ_IsConversionOngoing>
 801b3fc:	4603      	mov	r3, r0
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d00c      	beq.n	801b41c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	681b      	ldr	r3, [r3, #0]
 801b406:	4618      	mov	r0, r3
 801b408:	f7fe fbb3 	bl	8019b72 <LL_ADC_IsDisableOngoing>
 801b40c:	4603      	mov	r3, r0
 801b40e:	2b00      	cmp	r3, #0
 801b410:	d104      	bne.n	801b41c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	681b      	ldr	r3, [r3, #0]
 801b416:	4618      	mov	r0, r3
 801b418:	f7fe fbf9 	bl	8019c0e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 801b41c:	69bb      	ldr	r3, [r7, #24]
 801b41e:	2b02      	cmp	r3, #2
 801b420:	d005      	beq.n	801b42e <ADC_ConversionStop+0x10e>
 801b422:	69bb      	ldr	r3, [r7, #24]
 801b424:	2b03      	cmp	r3, #3
 801b426:	d105      	bne.n	801b434 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 801b428:	230c      	movs	r3, #12
 801b42a:	617b      	str	r3, [r7, #20]
        break;
 801b42c:	e005      	b.n	801b43a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 801b42e:	2308      	movs	r3, #8
 801b430:	617b      	str	r3, [r7, #20]
        break;
 801b432:	e002      	b.n	801b43a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 801b434:	2304      	movs	r3, #4
 801b436:	617b      	str	r3, [r7, #20]
        break;
 801b438:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 801b43a:	f7fe f94f 	bl	80196dc <HAL_GetTick>
 801b43e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801b440:	e01b      	b.n	801b47a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 801b442:	f7fe f94b 	bl	80196dc <HAL_GetTick>
 801b446:	4602      	mov	r2, r0
 801b448:	68bb      	ldr	r3, [r7, #8]
 801b44a:	1ad3      	subs	r3, r2, r3
 801b44c:	2b05      	cmp	r3, #5
 801b44e:	d914      	bls.n	801b47a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	681b      	ldr	r3, [r3, #0]
 801b454:	689a      	ldr	r2, [r3, #8]
 801b456:	697b      	ldr	r3, [r7, #20]
 801b458:	4013      	ands	r3, r2
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	d00d      	beq.n	801b47a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b462:	f043 0210 	orr.w	r2, r3, #16
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b46e:	f043 0201 	orr.w	r2, r3, #1
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801b476:	2301      	movs	r3, #1
 801b478:	e007      	b.n	801b48a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	689a      	ldr	r2, [r3, #8]
 801b480:	697b      	ldr	r3, [r7, #20]
 801b482:	4013      	ands	r3, r2
 801b484:	2b00      	cmp	r3, #0
 801b486:	d1dc      	bne.n	801b442 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 801b488:	2300      	movs	r3, #0
}
 801b48a:	4618      	mov	r0, r3
 801b48c:	3720      	adds	r7, #32
 801b48e:	46bd      	mov	sp, r7
 801b490:	bd80      	pop	{r7, pc}
 801b492:	bf00      	nop
 801b494:	a33fffff 	.word	0xa33fffff

0801b498 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 801b498:	b580      	push	{r7, lr}
 801b49a:	b084      	sub	sp, #16
 801b49c:	af00      	add	r7, sp, #0
 801b49e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	681b      	ldr	r3, [r3, #0]
 801b4a4:	4618      	mov	r0, r3
 801b4a6:	f7fe fb51 	bl	8019b4c <LL_ADC_IsEnabled>
 801b4aa:	4603      	mov	r3, r0
 801b4ac:	2b00      	cmp	r3, #0
 801b4ae:	d14d      	bne.n	801b54c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	681b      	ldr	r3, [r3, #0]
 801b4b4:	689a      	ldr	r2, [r3, #8]
 801b4b6:	4b28      	ldr	r3, [pc, #160]	; (801b558 <ADC_Enable+0xc0>)
 801b4b8:	4013      	ands	r3, r2
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	d00d      	beq.n	801b4da <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b4c2:	f043 0210 	orr.w	r2, r3, #16
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b4ca:	687b      	ldr	r3, [r7, #4]
 801b4cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b4ce:	f043 0201 	orr.w	r2, r3, #1
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 801b4d6:	2301      	movs	r3, #1
 801b4d8:	e039      	b.n	801b54e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	681b      	ldr	r3, [r3, #0]
 801b4de:	4618      	mov	r0, r3
 801b4e0:	f7fe fb0c 	bl	8019afc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 801b4e4:	f7fe f8fa 	bl	80196dc <HAL_GetTick>
 801b4e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801b4ea:	e028      	b.n	801b53e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	4618      	mov	r0, r3
 801b4f2:	f7fe fb2b 	bl	8019b4c <LL_ADC_IsEnabled>
 801b4f6:	4603      	mov	r3, r0
 801b4f8:	2b00      	cmp	r3, #0
 801b4fa:	d104      	bne.n	801b506 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	681b      	ldr	r3, [r3, #0]
 801b500:	4618      	mov	r0, r3
 801b502:	f7fe fafb 	bl	8019afc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801b506:	f7fe f8e9 	bl	80196dc <HAL_GetTick>
 801b50a:	4602      	mov	r2, r0
 801b50c:	68fb      	ldr	r3, [r7, #12]
 801b50e:	1ad3      	subs	r3, r2, r3
 801b510:	2b02      	cmp	r3, #2
 801b512:	d914      	bls.n	801b53e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	681b      	ldr	r3, [r3, #0]
 801b518:	681b      	ldr	r3, [r3, #0]
 801b51a:	f003 0301 	and.w	r3, r3, #1
 801b51e:	2b01      	cmp	r3, #1
 801b520:	d00d      	beq.n	801b53e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b526:	f043 0210 	orr.w	r2, r3, #16
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b532:	f043 0201 	orr.w	r2, r3, #1
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801b53a:	2301      	movs	r3, #1
 801b53c:	e007      	b.n	801b54e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	f003 0301 	and.w	r3, r3, #1
 801b548:	2b01      	cmp	r3, #1
 801b54a:	d1cf      	bne.n	801b4ec <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801b54c:	2300      	movs	r3, #0
}
 801b54e:	4618      	mov	r0, r3
 801b550:	3710      	adds	r7, #16
 801b552:	46bd      	mov	sp, r7
 801b554:	bd80      	pop	{r7, pc}
 801b556:	bf00      	nop
 801b558:	8000003f 	.word	0x8000003f

0801b55c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 801b55c:	b580      	push	{r7, lr}
 801b55e:	b084      	sub	sp, #16
 801b560:	af00      	add	r7, sp, #0
 801b562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	4618      	mov	r0, r3
 801b56a:	f7fe fb02 	bl	8019b72 <LL_ADC_IsDisableOngoing>
 801b56e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	681b      	ldr	r3, [r3, #0]
 801b574:	4618      	mov	r0, r3
 801b576:	f7fe fae9 	bl	8019b4c <LL_ADC_IsEnabled>
 801b57a:	4603      	mov	r3, r0
 801b57c:	2b00      	cmp	r3, #0
 801b57e:	d047      	beq.n	801b610 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 801b580:	68fb      	ldr	r3, [r7, #12]
 801b582:	2b00      	cmp	r3, #0
 801b584:	d144      	bne.n	801b610 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	681b      	ldr	r3, [r3, #0]
 801b58a:	689b      	ldr	r3, [r3, #8]
 801b58c:	f003 030d 	and.w	r3, r3, #13
 801b590:	2b01      	cmp	r3, #1
 801b592:	d10c      	bne.n	801b5ae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	4618      	mov	r0, r3
 801b59a:	f7fe fac3 	bl	8019b24 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	681b      	ldr	r3, [r3, #0]
 801b5a2:	2203      	movs	r2, #3
 801b5a4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 801b5a6:	f7fe f899 	bl	80196dc <HAL_GetTick>
 801b5aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801b5ac:	e029      	b.n	801b602 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b5b2:	f043 0210 	orr.w	r2, r3, #16
 801b5b6:	687b      	ldr	r3, [r7, #4]
 801b5b8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b5be:	f043 0201 	orr.w	r2, r3, #1
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 801b5c6:	2301      	movs	r3, #1
 801b5c8:	e023      	b.n	801b612 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801b5ca:	f7fe f887 	bl	80196dc <HAL_GetTick>
 801b5ce:	4602      	mov	r2, r0
 801b5d0:	68bb      	ldr	r3, [r7, #8]
 801b5d2:	1ad3      	subs	r3, r2, r3
 801b5d4:	2b02      	cmp	r3, #2
 801b5d6:	d914      	bls.n	801b602 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	681b      	ldr	r3, [r3, #0]
 801b5dc:	689b      	ldr	r3, [r3, #8]
 801b5de:	f003 0301 	and.w	r3, r3, #1
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	d00d      	beq.n	801b602 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b5ea:	f043 0210 	orr.w	r2, r3, #16
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b5f6:	f043 0201 	orr.w	r2, r3, #1
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801b5fe:	2301      	movs	r3, #1
 801b600:	e007      	b.n	801b612 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	681b      	ldr	r3, [r3, #0]
 801b606:	689b      	ldr	r3, [r3, #8]
 801b608:	f003 0301 	and.w	r3, r3, #1
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	d1dc      	bne.n	801b5ca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801b610:	2300      	movs	r3, #0
}
 801b612:	4618      	mov	r0, r3
 801b614:	3710      	adds	r7, #16
 801b616:	46bd      	mov	sp, r7
 801b618:	bd80      	pop	{r7, pc}

0801b61a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 801b61a:	b580      	push	{r7, lr}
 801b61c:	b084      	sub	sp, #16
 801b61e:	af00      	add	r7, sp, #0
 801b620:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b626:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 801b628:	68fb      	ldr	r3, [r7, #12]
 801b62a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b62c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801b630:	2b00      	cmp	r3, #0
 801b632:	d14b      	bne.n	801b6cc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801b634:	68fb      	ldr	r3, [r7, #12]
 801b636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b638:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801b63c:	68fb      	ldr	r3, [r7, #12]
 801b63e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 801b640:	68fb      	ldr	r3, [r7, #12]
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	681b      	ldr	r3, [r3, #0]
 801b646:	f003 0308 	and.w	r3, r3, #8
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d021      	beq.n	801b692 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801b64e:	68fb      	ldr	r3, [r7, #12]
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	4618      	mov	r0, r3
 801b654:	f7fe f942 	bl	80198dc <LL_ADC_REG_IsTriggerSourceSWStart>
 801b658:	4603      	mov	r3, r0
 801b65a:	2b00      	cmp	r3, #0
 801b65c:	d032      	beq.n	801b6c4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 801b65e:	68fb      	ldr	r3, [r7, #12]
 801b660:	681b      	ldr	r3, [r3, #0]
 801b662:	68db      	ldr	r3, [r3, #12]
 801b664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b668:	2b00      	cmp	r3, #0
 801b66a:	d12b      	bne.n	801b6c4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801b66c:	68fb      	ldr	r3, [r7, #12]
 801b66e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b670:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b674:	68fb      	ldr	r3, [r7, #12]
 801b676:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801b678:	68fb      	ldr	r3, [r7, #12]
 801b67a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b67c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b680:	2b00      	cmp	r3, #0
 801b682:	d11f      	bne.n	801b6c4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801b684:	68fb      	ldr	r3, [r7, #12]
 801b686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b688:	f043 0201 	orr.w	r2, r3, #1
 801b68c:	68fb      	ldr	r3, [r7, #12]
 801b68e:	65da      	str	r2, [r3, #92]	; 0x5c
 801b690:	e018      	b.n	801b6c4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 801b692:	68fb      	ldr	r3, [r7, #12]
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	68db      	ldr	r3, [r3, #12]
 801b698:	f003 0302 	and.w	r3, r3, #2
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d111      	bne.n	801b6c4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801b6a0:	68fb      	ldr	r3, [r7, #12]
 801b6a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b6a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b6a8:	68fb      	ldr	r3, [r7, #12]
 801b6aa:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801b6ac:	68fb      	ldr	r3, [r7, #12]
 801b6ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b6b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d105      	bne.n	801b6c4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801b6b8:	68fb      	ldr	r3, [r7, #12]
 801b6ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b6bc:	f043 0201 	orr.w	r2, r3, #1
 801b6c0:	68fb      	ldr	r3, [r7, #12]
 801b6c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801b6c4:	68f8      	ldr	r0, [r7, #12]
 801b6c6:	f7ed fc4f 	bl	8008f68 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801b6ca:	e00e      	b.n	801b6ea <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801b6cc:	68fb      	ldr	r3, [r7, #12]
 801b6ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b6d0:	f003 0310 	and.w	r3, r3, #16
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	d003      	beq.n	801b6e0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 801b6d8:	68f8      	ldr	r0, [r7, #12]
 801b6da:	f7ff f9eb 	bl	801aab4 <HAL_ADC_ErrorCallback>
}
 801b6de:	e004      	b.n	801b6ea <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801b6e0:	68fb      	ldr	r3, [r7, #12]
 801b6e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b6e6:	6878      	ldr	r0, [r7, #4]
 801b6e8:	4798      	blx	r3
}
 801b6ea:	bf00      	nop
 801b6ec:	3710      	adds	r7, #16
 801b6ee:	46bd      	mov	sp, r7
 801b6f0:	bd80      	pop	{r7, pc}

0801b6f2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 801b6f2:	b580      	push	{r7, lr}
 801b6f4:	b084      	sub	sp, #16
 801b6f6:	af00      	add	r7, sp, #0
 801b6f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b6fe:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801b700:	68f8      	ldr	r0, [r7, #12]
 801b702:	f7ff f9c3 	bl	801aa8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801b706:	bf00      	nop
 801b708:	3710      	adds	r7, #16
 801b70a:	46bd      	mov	sp, r7
 801b70c:	bd80      	pop	{r7, pc}

0801b70e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 801b70e:	b580      	push	{r7, lr}
 801b710:	b084      	sub	sp, #16
 801b712:	af00      	add	r7, sp, #0
 801b714:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b71a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801b71c:	68fb      	ldr	r3, [r7, #12]
 801b71e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b720:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801b724:	68fb      	ldr	r3, [r7, #12]
 801b726:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 801b728:	68fb      	ldr	r3, [r7, #12]
 801b72a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b72c:	f043 0204 	orr.w	r2, r3, #4
 801b730:	68fb      	ldr	r3, [r7, #12]
 801b732:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801b734:	68f8      	ldr	r0, [r7, #12]
 801b736:	f7ff f9bd 	bl	801aab4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801b73a:	bf00      	nop
 801b73c:	3710      	adds	r7, #16
 801b73e:	46bd      	mov	sp, r7
 801b740:	bd80      	pop	{r7, pc}

0801b742 <LL_ADC_IsEnabled>:
{
 801b742:	b480      	push	{r7}
 801b744:	b083      	sub	sp, #12
 801b746:	af00      	add	r7, sp, #0
 801b748:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801b74a:	687b      	ldr	r3, [r7, #4]
 801b74c:	689b      	ldr	r3, [r3, #8]
 801b74e:	f003 0301 	and.w	r3, r3, #1
 801b752:	2b01      	cmp	r3, #1
 801b754:	d101      	bne.n	801b75a <LL_ADC_IsEnabled+0x18>
 801b756:	2301      	movs	r3, #1
 801b758:	e000      	b.n	801b75c <LL_ADC_IsEnabled+0x1a>
 801b75a:	2300      	movs	r3, #0
}
 801b75c:	4618      	mov	r0, r3
 801b75e:	370c      	adds	r7, #12
 801b760:	46bd      	mov	sp, r7
 801b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b766:	4770      	bx	lr

0801b768 <LL_ADC_StartCalibration>:
{
 801b768:	b480      	push	{r7}
 801b76a:	b083      	sub	sp, #12
 801b76c:	af00      	add	r7, sp, #0
 801b76e:	6078      	str	r0, [r7, #4]
 801b770:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	689b      	ldr	r3, [r3, #8]
 801b776:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801b77a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801b77e:	683a      	ldr	r2, [r7, #0]
 801b780:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801b784:	4313      	orrs	r3, r2
 801b786:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	609a      	str	r2, [r3, #8]
}
 801b78e:	bf00      	nop
 801b790:	370c      	adds	r7, #12
 801b792:	46bd      	mov	sp, r7
 801b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b798:	4770      	bx	lr

0801b79a <LL_ADC_IsCalibrationOnGoing>:
{
 801b79a:	b480      	push	{r7}
 801b79c:	b083      	sub	sp, #12
 801b79e:	af00      	add	r7, sp, #0
 801b7a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	689b      	ldr	r3, [r3, #8]
 801b7a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b7aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b7ae:	d101      	bne.n	801b7b4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 801b7b0:	2301      	movs	r3, #1
 801b7b2:	e000      	b.n	801b7b6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 801b7b4:	2300      	movs	r3, #0
}
 801b7b6:	4618      	mov	r0, r3
 801b7b8:	370c      	adds	r7, #12
 801b7ba:	46bd      	mov	sp, r7
 801b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7c0:	4770      	bx	lr

0801b7c2 <LL_ADC_REG_IsConversionOngoing>:
{
 801b7c2:	b480      	push	{r7}
 801b7c4:	b083      	sub	sp, #12
 801b7c6:	af00      	add	r7, sp, #0
 801b7c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	689b      	ldr	r3, [r3, #8]
 801b7ce:	f003 0304 	and.w	r3, r3, #4
 801b7d2:	2b04      	cmp	r3, #4
 801b7d4:	d101      	bne.n	801b7da <LL_ADC_REG_IsConversionOngoing+0x18>
 801b7d6:	2301      	movs	r3, #1
 801b7d8:	e000      	b.n	801b7dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 801b7da:	2300      	movs	r3, #0
}
 801b7dc:	4618      	mov	r0, r3
 801b7de:	370c      	adds	r7, #12
 801b7e0:	46bd      	mov	sp, r7
 801b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7e6:	4770      	bx	lr

0801b7e8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 801b7e8:	b580      	push	{r7, lr}
 801b7ea:	b084      	sub	sp, #16
 801b7ec:	af00      	add	r7, sp, #0
 801b7ee:	6078      	str	r0, [r7, #4]
 801b7f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 801b7f2:	2300      	movs	r3, #0
 801b7f4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801b7fc:	2b01      	cmp	r3, #1
 801b7fe:	d101      	bne.n	801b804 <HAL_ADCEx_Calibration_Start+0x1c>
 801b800:	2302      	movs	r3, #2
 801b802:	e04d      	b.n	801b8a0 <HAL_ADCEx_Calibration_Start+0xb8>
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	2201      	movs	r2, #1
 801b808:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 801b80c:	6878      	ldr	r0, [r7, #4]
 801b80e:	f7ff fea5 	bl	801b55c <ADC_Disable>
 801b812:	4603      	mov	r3, r0
 801b814:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 801b816:	7bfb      	ldrb	r3, [r7, #15]
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d136      	bne.n	801b88a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b820:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801b824:	f023 0302 	bic.w	r3, r3, #2
 801b828:	f043 0202 	orr.w	r2, r3, #2
 801b82c:	687b      	ldr	r3, [r7, #4]
 801b82e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	681b      	ldr	r3, [r3, #0]
 801b834:	6839      	ldr	r1, [r7, #0]
 801b836:	4618      	mov	r0, r3
 801b838:	f7ff ff96 	bl	801b768 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801b83c:	e014      	b.n	801b868 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 801b83e:	68bb      	ldr	r3, [r7, #8]
 801b840:	3301      	adds	r3, #1
 801b842:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 801b844:	68bb      	ldr	r3, [r7, #8]
 801b846:	4a18      	ldr	r2, [pc, #96]	; (801b8a8 <HAL_ADCEx_Calibration_Start+0xc0>)
 801b848:	4293      	cmp	r3, r2
 801b84a:	d90d      	bls.n	801b868 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 801b84c:	687b      	ldr	r3, [r7, #4]
 801b84e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b850:	f023 0312 	bic.w	r3, r3, #18
 801b854:	f043 0210 	orr.w	r2, r3, #16
 801b858:	687b      	ldr	r3, [r7, #4]
 801b85a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	2200      	movs	r2, #0
 801b860:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 801b864:	2301      	movs	r3, #1
 801b866:	e01b      	b.n	801b8a0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	681b      	ldr	r3, [r3, #0]
 801b86c:	4618      	mov	r0, r3
 801b86e:	f7ff ff94 	bl	801b79a <LL_ADC_IsCalibrationOnGoing>
 801b872:	4603      	mov	r3, r0
 801b874:	2b00      	cmp	r3, #0
 801b876:	d1e2      	bne.n	801b83e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b87c:	f023 0303 	bic.w	r3, r3, #3
 801b880:	f043 0201 	orr.w	r2, r3, #1
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	65da      	str	r2, [r3, #92]	; 0x5c
 801b888:	e005      	b.n	801b896 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b88e:	f043 0210 	orr.w	r2, r3, #16
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	2200      	movs	r2, #0
 801b89a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801b89e:	7bfb      	ldrb	r3, [r7, #15]
}
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	3710      	adds	r7, #16
 801b8a4:	46bd      	mov	sp, r7
 801b8a6:	bd80      	pop	{r7, pc}
 801b8a8:	0004de01 	.word	0x0004de01

0801b8ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 801b8ac:	b480      	push	{r7}
 801b8ae:	b083      	sub	sp, #12
 801b8b0:	af00      	add	r7, sp, #0
 801b8b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 801b8b4:	bf00      	nop
 801b8b6:	370c      	adds	r7, #12
 801b8b8:	46bd      	mov	sp, r7
 801b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8be:	4770      	bx	lr

0801b8c0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 801b8c0:	b480      	push	{r7}
 801b8c2:	b083      	sub	sp, #12
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 801b8c8:	bf00      	nop
 801b8ca:	370c      	adds	r7, #12
 801b8cc:	46bd      	mov	sp, r7
 801b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8d2:	4770      	bx	lr

0801b8d4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 801b8d4:	b480      	push	{r7}
 801b8d6:	b083      	sub	sp, #12
 801b8d8:	af00      	add	r7, sp, #0
 801b8da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 801b8dc:	bf00      	nop
 801b8de:	370c      	adds	r7, #12
 801b8e0:	46bd      	mov	sp, r7
 801b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8e6:	4770      	bx	lr

0801b8e8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 801b8e8:	b480      	push	{r7}
 801b8ea:	b083      	sub	sp, #12
 801b8ec:	af00      	add	r7, sp, #0
 801b8ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 801b8f0:	bf00      	nop
 801b8f2:	370c      	adds	r7, #12
 801b8f4:	46bd      	mov	sp, r7
 801b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8fa:	4770      	bx	lr

0801b8fc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 801b8fc:	b480      	push	{r7}
 801b8fe:	b083      	sub	sp, #12
 801b900:	af00      	add	r7, sp, #0
 801b902:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 801b904:	bf00      	nop
 801b906:	370c      	adds	r7, #12
 801b908:	46bd      	mov	sp, r7
 801b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b90e:	4770      	bx	lr

0801b910 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 801b910:	b590      	push	{r4, r7, lr}
 801b912:	b0a1      	sub	sp, #132	; 0x84
 801b914:	af00      	add	r7, sp, #0
 801b916:	6078      	str	r0, [r7, #4]
 801b918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801b91a:	2300      	movs	r3, #0
 801b91c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801b926:	2b01      	cmp	r3, #1
 801b928:	d101      	bne.n	801b92e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 801b92a:	2302      	movs	r3, #2
 801b92c:	e0cb      	b.n	801bac6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	2201      	movs	r2, #1
 801b932:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 801b936:	2300      	movs	r3, #0
 801b938:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 801b93a:	2300      	movs	r3, #0
 801b93c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	681b      	ldr	r3, [r3, #0]
 801b942:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b946:	d102      	bne.n	801b94e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 801b948:	4b61      	ldr	r3, [pc, #388]	; (801bad0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b94a:	60bb      	str	r3, [r7, #8]
 801b94c:	e001      	b.n	801b952 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 801b94e:	2300      	movs	r3, #0
 801b950:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 801b952:	68bb      	ldr	r3, [r7, #8]
 801b954:	2b00      	cmp	r3, #0
 801b956:	d10b      	bne.n	801b970 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b95c:	f043 0220 	orr.w	r2, r3, #32
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	2200      	movs	r2, #0
 801b968:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 801b96c:	2301      	movs	r3, #1
 801b96e:	e0aa      	b.n	801bac6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 801b970:	68bb      	ldr	r3, [r7, #8]
 801b972:	4618      	mov	r0, r3
 801b974:	f7ff ff25 	bl	801b7c2 <LL_ADC_REG_IsConversionOngoing>
 801b978:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801b97a:	687b      	ldr	r3, [r7, #4]
 801b97c:	681b      	ldr	r3, [r3, #0]
 801b97e:	4618      	mov	r0, r3
 801b980:	f7ff ff1f 	bl	801b7c2 <LL_ADC_REG_IsConversionOngoing>
 801b984:	4603      	mov	r3, r0
 801b986:	2b00      	cmp	r3, #0
 801b988:	f040 808c 	bne.w	801baa4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 801b98c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b98e:	2b00      	cmp	r3, #0
 801b990:	f040 8088 	bne.w	801baa4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	681b      	ldr	r3, [r3, #0]
 801b998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b99c:	d004      	beq.n	801b9a8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	681b      	ldr	r3, [r3, #0]
 801b9a2:	4a4b      	ldr	r2, [pc, #300]	; (801bad0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b9a4:	4293      	cmp	r3, r2
 801b9a6:	d101      	bne.n	801b9ac <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 801b9a8:	4b4a      	ldr	r3, [pc, #296]	; (801bad4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 801b9aa:	e000      	b.n	801b9ae <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 801b9ac:	4b4a      	ldr	r3, [pc, #296]	; (801bad8 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 801b9ae:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801b9b0:	683b      	ldr	r3, [r7, #0]
 801b9b2:	681b      	ldr	r3, [r3, #0]
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	d041      	beq.n	801ba3c <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 801b9b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b9ba:	689b      	ldr	r3, [r3, #8]
 801b9bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b9c0:	683b      	ldr	r3, [r7, #0]
 801b9c2:	6859      	ldr	r1, [r3, #4]
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b9ca:	035b      	lsls	r3, r3, #13
 801b9cc:	430b      	orrs	r3, r1
 801b9ce:	431a      	orrs	r2, r3
 801b9d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b9d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	681b      	ldr	r3, [r3, #0]
 801b9d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b9dc:	d004      	beq.n	801b9e8 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	681b      	ldr	r3, [r3, #0]
 801b9e2:	4a3b      	ldr	r2, [pc, #236]	; (801bad0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b9e4:	4293      	cmp	r3, r2
 801b9e6:	d10f      	bne.n	801ba08 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 801b9e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801b9ec:	f7ff fea9 	bl	801b742 <LL_ADC_IsEnabled>
 801b9f0:	4604      	mov	r4, r0
 801b9f2:	4837      	ldr	r0, [pc, #220]	; (801bad0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b9f4:	f7ff fea5 	bl	801b742 <LL_ADC_IsEnabled>
 801b9f8:	4603      	mov	r3, r0
 801b9fa:	4323      	orrs	r3, r4
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	bf0c      	ite	eq
 801ba00:	2301      	moveq	r3, #1
 801ba02:	2300      	movne	r3, #0
 801ba04:	b2db      	uxtb	r3, r3
 801ba06:	e008      	b.n	801ba1a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 801ba08:	4834      	ldr	r0, [pc, #208]	; (801badc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801ba0a:	f7ff fe9a 	bl	801b742 <LL_ADC_IsEnabled>
 801ba0e:	4603      	mov	r3, r0
 801ba10:	2b00      	cmp	r3, #0
 801ba12:	bf0c      	ite	eq
 801ba14:	2301      	moveq	r3, #1
 801ba16:	2300      	movne	r3, #0
 801ba18:	b2db      	uxtb	r3, r3
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d04c      	beq.n	801bab8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 801ba1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ba20:	689b      	ldr	r3, [r3, #8]
 801ba22:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801ba26:	f023 030f 	bic.w	r3, r3, #15
 801ba2a:	683a      	ldr	r2, [r7, #0]
 801ba2c:	6811      	ldr	r1, [r2, #0]
 801ba2e:	683a      	ldr	r2, [r7, #0]
 801ba30:	6892      	ldr	r2, [r2, #8]
 801ba32:	430a      	orrs	r2, r1
 801ba34:	431a      	orrs	r2, r3
 801ba36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ba38:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801ba3a:	e03d      	b.n	801bab8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 801ba3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ba3e:	689b      	ldr	r3, [r3, #8]
 801ba40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801ba44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ba46:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	681b      	ldr	r3, [r3, #0]
 801ba4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ba50:	d004      	beq.n	801ba5c <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	681b      	ldr	r3, [r3, #0]
 801ba56:	4a1e      	ldr	r2, [pc, #120]	; (801bad0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801ba58:	4293      	cmp	r3, r2
 801ba5a:	d10f      	bne.n	801ba7c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 801ba5c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801ba60:	f7ff fe6f 	bl	801b742 <LL_ADC_IsEnabled>
 801ba64:	4604      	mov	r4, r0
 801ba66:	481a      	ldr	r0, [pc, #104]	; (801bad0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801ba68:	f7ff fe6b 	bl	801b742 <LL_ADC_IsEnabled>
 801ba6c:	4603      	mov	r3, r0
 801ba6e:	4323      	orrs	r3, r4
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	bf0c      	ite	eq
 801ba74:	2301      	moveq	r3, #1
 801ba76:	2300      	movne	r3, #0
 801ba78:	b2db      	uxtb	r3, r3
 801ba7a:	e008      	b.n	801ba8e <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 801ba7c:	4817      	ldr	r0, [pc, #92]	; (801badc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801ba7e:	f7ff fe60 	bl	801b742 <LL_ADC_IsEnabled>
 801ba82:	4603      	mov	r3, r0
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	bf0c      	ite	eq
 801ba88:	2301      	moveq	r3, #1
 801ba8a:	2300      	movne	r3, #0
 801ba8c:	b2db      	uxtb	r3, r3
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	d012      	beq.n	801bab8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 801ba92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ba94:	689b      	ldr	r3, [r3, #8]
 801ba96:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801ba9a:	f023 030f 	bic.w	r3, r3, #15
 801ba9e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801baa0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801baa2:	e009      	b.n	801bab8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801baa4:	687b      	ldr	r3, [r7, #4]
 801baa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801baa8:	f043 0220 	orr.w	r2, r3, #32
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801bab0:	2301      	movs	r3, #1
 801bab2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801bab6:	e000      	b.n	801baba <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801bab8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	2200      	movs	r2, #0
 801babe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801bac2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801bac6:	4618      	mov	r0, r3
 801bac8:	3784      	adds	r7, #132	; 0x84
 801baca:	46bd      	mov	sp, r7
 801bacc:	bd90      	pop	{r4, r7, pc}
 801bace:	bf00      	nop
 801bad0:	50000100 	.word	0x50000100
 801bad4:	50000300 	.word	0x50000300
 801bad8:	50000700 	.word	0x50000700
 801badc:	50000400 	.word	0x50000400

0801bae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801bae0:	b480      	push	{r7}
 801bae2:	b085      	sub	sp, #20
 801bae4:	af00      	add	r7, sp, #0
 801bae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801bae8:	687b      	ldr	r3, [r7, #4]
 801baea:	f003 0307 	and.w	r3, r3, #7
 801baee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801baf0:	4b0c      	ldr	r3, [pc, #48]	; (801bb24 <__NVIC_SetPriorityGrouping+0x44>)
 801baf2:	68db      	ldr	r3, [r3, #12]
 801baf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801baf6:	68ba      	ldr	r2, [r7, #8]
 801baf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801bafc:	4013      	ands	r3, r2
 801bafe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801bb00:	68fb      	ldr	r3, [r7, #12]
 801bb02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801bb04:	68bb      	ldr	r3, [r7, #8]
 801bb06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801bb08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801bb0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bb10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801bb12:	4a04      	ldr	r2, [pc, #16]	; (801bb24 <__NVIC_SetPriorityGrouping+0x44>)
 801bb14:	68bb      	ldr	r3, [r7, #8]
 801bb16:	60d3      	str	r3, [r2, #12]
}
 801bb18:	bf00      	nop
 801bb1a:	3714      	adds	r7, #20
 801bb1c:	46bd      	mov	sp, r7
 801bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb22:	4770      	bx	lr
 801bb24:	e000ed00 	.word	0xe000ed00

0801bb28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801bb28:	b480      	push	{r7}
 801bb2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801bb2c:	4b04      	ldr	r3, [pc, #16]	; (801bb40 <__NVIC_GetPriorityGrouping+0x18>)
 801bb2e:	68db      	ldr	r3, [r3, #12]
 801bb30:	0a1b      	lsrs	r3, r3, #8
 801bb32:	f003 0307 	and.w	r3, r3, #7
}
 801bb36:	4618      	mov	r0, r3
 801bb38:	46bd      	mov	sp, r7
 801bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb3e:	4770      	bx	lr
 801bb40:	e000ed00 	.word	0xe000ed00

0801bb44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801bb44:	b480      	push	{r7}
 801bb46:	b083      	sub	sp, #12
 801bb48:	af00      	add	r7, sp, #0
 801bb4a:	4603      	mov	r3, r0
 801bb4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801bb4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	db0b      	blt.n	801bb6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801bb56:	79fb      	ldrb	r3, [r7, #7]
 801bb58:	f003 021f 	and.w	r2, r3, #31
 801bb5c:	4907      	ldr	r1, [pc, #28]	; (801bb7c <__NVIC_EnableIRQ+0x38>)
 801bb5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bb62:	095b      	lsrs	r3, r3, #5
 801bb64:	2001      	movs	r0, #1
 801bb66:	fa00 f202 	lsl.w	r2, r0, r2
 801bb6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801bb6e:	bf00      	nop
 801bb70:	370c      	adds	r7, #12
 801bb72:	46bd      	mov	sp, r7
 801bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb78:	4770      	bx	lr
 801bb7a:	bf00      	nop
 801bb7c:	e000e100 	.word	0xe000e100

0801bb80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801bb80:	b480      	push	{r7}
 801bb82:	b083      	sub	sp, #12
 801bb84:	af00      	add	r7, sp, #0
 801bb86:	4603      	mov	r3, r0
 801bb88:	6039      	str	r1, [r7, #0]
 801bb8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801bb8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	db0a      	blt.n	801bbaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801bb94:	683b      	ldr	r3, [r7, #0]
 801bb96:	b2da      	uxtb	r2, r3
 801bb98:	490c      	ldr	r1, [pc, #48]	; (801bbcc <__NVIC_SetPriority+0x4c>)
 801bb9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bb9e:	0112      	lsls	r2, r2, #4
 801bba0:	b2d2      	uxtb	r2, r2
 801bba2:	440b      	add	r3, r1
 801bba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801bba8:	e00a      	b.n	801bbc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801bbaa:	683b      	ldr	r3, [r7, #0]
 801bbac:	b2da      	uxtb	r2, r3
 801bbae:	4908      	ldr	r1, [pc, #32]	; (801bbd0 <__NVIC_SetPriority+0x50>)
 801bbb0:	79fb      	ldrb	r3, [r7, #7]
 801bbb2:	f003 030f 	and.w	r3, r3, #15
 801bbb6:	3b04      	subs	r3, #4
 801bbb8:	0112      	lsls	r2, r2, #4
 801bbba:	b2d2      	uxtb	r2, r2
 801bbbc:	440b      	add	r3, r1
 801bbbe:	761a      	strb	r2, [r3, #24]
}
 801bbc0:	bf00      	nop
 801bbc2:	370c      	adds	r7, #12
 801bbc4:	46bd      	mov	sp, r7
 801bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbca:	4770      	bx	lr
 801bbcc:	e000e100 	.word	0xe000e100
 801bbd0:	e000ed00 	.word	0xe000ed00

0801bbd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801bbd4:	b480      	push	{r7}
 801bbd6:	b089      	sub	sp, #36	; 0x24
 801bbd8:	af00      	add	r7, sp, #0
 801bbda:	60f8      	str	r0, [r7, #12]
 801bbdc:	60b9      	str	r1, [r7, #8]
 801bbde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801bbe0:	68fb      	ldr	r3, [r7, #12]
 801bbe2:	f003 0307 	and.w	r3, r3, #7
 801bbe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801bbe8:	69fb      	ldr	r3, [r7, #28]
 801bbea:	f1c3 0307 	rsb	r3, r3, #7
 801bbee:	2b04      	cmp	r3, #4
 801bbf0:	bf28      	it	cs
 801bbf2:	2304      	movcs	r3, #4
 801bbf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801bbf6:	69fb      	ldr	r3, [r7, #28]
 801bbf8:	3304      	adds	r3, #4
 801bbfa:	2b06      	cmp	r3, #6
 801bbfc:	d902      	bls.n	801bc04 <NVIC_EncodePriority+0x30>
 801bbfe:	69fb      	ldr	r3, [r7, #28]
 801bc00:	3b03      	subs	r3, #3
 801bc02:	e000      	b.n	801bc06 <NVIC_EncodePriority+0x32>
 801bc04:	2300      	movs	r3, #0
 801bc06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801bc08:	f04f 32ff 	mov.w	r2, #4294967295
 801bc0c:	69bb      	ldr	r3, [r7, #24]
 801bc0e:	fa02 f303 	lsl.w	r3, r2, r3
 801bc12:	43da      	mvns	r2, r3
 801bc14:	68bb      	ldr	r3, [r7, #8]
 801bc16:	401a      	ands	r2, r3
 801bc18:	697b      	ldr	r3, [r7, #20]
 801bc1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801bc1c:	f04f 31ff 	mov.w	r1, #4294967295
 801bc20:	697b      	ldr	r3, [r7, #20]
 801bc22:	fa01 f303 	lsl.w	r3, r1, r3
 801bc26:	43d9      	mvns	r1, r3
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801bc2c:	4313      	orrs	r3, r2
         );
}
 801bc2e:	4618      	mov	r0, r3
 801bc30:	3724      	adds	r7, #36	; 0x24
 801bc32:	46bd      	mov	sp, r7
 801bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc38:	4770      	bx	lr
	...

0801bc3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801bc3c:	b580      	push	{r7, lr}
 801bc3e:	b082      	sub	sp, #8
 801bc40:	af00      	add	r7, sp, #0
 801bc42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	3b01      	subs	r3, #1
 801bc48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801bc4c:	d301      	bcc.n	801bc52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801bc4e:	2301      	movs	r3, #1
 801bc50:	e00f      	b.n	801bc72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801bc52:	4a0a      	ldr	r2, [pc, #40]	; (801bc7c <SysTick_Config+0x40>)
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	3b01      	subs	r3, #1
 801bc58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801bc5a:	210f      	movs	r1, #15
 801bc5c:	f04f 30ff 	mov.w	r0, #4294967295
 801bc60:	f7ff ff8e 	bl	801bb80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801bc64:	4b05      	ldr	r3, [pc, #20]	; (801bc7c <SysTick_Config+0x40>)
 801bc66:	2200      	movs	r2, #0
 801bc68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801bc6a:	4b04      	ldr	r3, [pc, #16]	; (801bc7c <SysTick_Config+0x40>)
 801bc6c:	2207      	movs	r2, #7
 801bc6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801bc70:	2300      	movs	r3, #0
}
 801bc72:	4618      	mov	r0, r3
 801bc74:	3708      	adds	r7, #8
 801bc76:	46bd      	mov	sp, r7
 801bc78:	bd80      	pop	{r7, pc}
 801bc7a:	bf00      	nop
 801bc7c:	e000e010 	.word	0xe000e010

0801bc80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801bc80:	b580      	push	{r7, lr}
 801bc82:	b082      	sub	sp, #8
 801bc84:	af00      	add	r7, sp, #0
 801bc86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801bc88:	6878      	ldr	r0, [r7, #4]
 801bc8a:	f7ff ff29 	bl	801bae0 <__NVIC_SetPriorityGrouping>
}
 801bc8e:	bf00      	nop
 801bc90:	3708      	adds	r7, #8
 801bc92:	46bd      	mov	sp, r7
 801bc94:	bd80      	pop	{r7, pc}

0801bc96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801bc96:	b580      	push	{r7, lr}
 801bc98:	b086      	sub	sp, #24
 801bc9a:	af00      	add	r7, sp, #0
 801bc9c:	4603      	mov	r3, r0
 801bc9e:	60b9      	str	r1, [r7, #8]
 801bca0:	607a      	str	r2, [r7, #4]
 801bca2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801bca4:	f7ff ff40 	bl	801bb28 <__NVIC_GetPriorityGrouping>
 801bca8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801bcaa:	687a      	ldr	r2, [r7, #4]
 801bcac:	68b9      	ldr	r1, [r7, #8]
 801bcae:	6978      	ldr	r0, [r7, #20]
 801bcb0:	f7ff ff90 	bl	801bbd4 <NVIC_EncodePriority>
 801bcb4:	4602      	mov	r2, r0
 801bcb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bcba:	4611      	mov	r1, r2
 801bcbc:	4618      	mov	r0, r3
 801bcbe:	f7ff ff5f 	bl	801bb80 <__NVIC_SetPriority>
}
 801bcc2:	bf00      	nop
 801bcc4:	3718      	adds	r7, #24
 801bcc6:	46bd      	mov	sp, r7
 801bcc8:	bd80      	pop	{r7, pc}

0801bcca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801bcca:	b580      	push	{r7, lr}
 801bccc:	b082      	sub	sp, #8
 801bcce:	af00      	add	r7, sp, #0
 801bcd0:	4603      	mov	r3, r0
 801bcd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801bcd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bcd8:	4618      	mov	r0, r3
 801bcda:	f7ff ff33 	bl	801bb44 <__NVIC_EnableIRQ>
}
 801bcde:	bf00      	nop
 801bce0:	3708      	adds	r7, #8
 801bce2:	46bd      	mov	sp, r7
 801bce4:	bd80      	pop	{r7, pc}

0801bce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801bce6:	b580      	push	{r7, lr}
 801bce8:	b082      	sub	sp, #8
 801bcea:	af00      	add	r7, sp, #0
 801bcec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801bcee:	6878      	ldr	r0, [r7, #4]
 801bcf0:	f7ff ffa4 	bl	801bc3c <SysTick_Config>
 801bcf4:	4603      	mov	r3, r0
}
 801bcf6:	4618      	mov	r0, r3
 801bcf8:	3708      	adds	r7, #8
 801bcfa:	46bd      	mov	sp, r7
 801bcfc:	bd80      	pop	{r7, pc}
	...

0801bd00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801bd00:	b580      	push	{r7, lr}
 801bd02:	b084      	sub	sp, #16
 801bd04:	af00      	add	r7, sp, #0
 801bd06:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	d101      	bne.n	801bd12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801bd0e:	2301      	movs	r3, #1
 801bd10:	e08d      	b.n	801be2e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	681b      	ldr	r3, [r3, #0]
 801bd16:	461a      	mov	r2, r3
 801bd18:	4b47      	ldr	r3, [pc, #284]	; (801be38 <HAL_DMA_Init+0x138>)
 801bd1a:	429a      	cmp	r2, r3
 801bd1c:	d80f      	bhi.n	801bd3e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801bd1e:	687b      	ldr	r3, [r7, #4]
 801bd20:	681b      	ldr	r3, [r3, #0]
 801bd22:	461a      	mov	r2, r3
 801bd24:	4b45      	ldr	r3, [pc, #276]	; (801be3c <HAL_DMA_Init+0x13c>)
 801bd26:	4413      	add	r3, r2
 801bd28:	4a45      	ldr	r2, [pc, #276]	; (801be40 <HAL_DMA_Init+0x140>)
 801bd2a:	fba2 2303 	umull	r2, r3, r2, r3
 801bd2e:	091b      	lsrs	r3, r3, #4
 801bd30:	009a      	lsls	r2, r3, #2
 801bd32:	687b      	ldr	r3, [r7, #4]
 801bd34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	4a42      	ldr	r2, [pc, #264]	; (801be44 <HAL_DMA_Init+0x144>)
 801bd3a:	641a      	str	r2, [r3, #64]	; 0x40
 801bd3c:	e00e      	b.n	801bd5c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	681b      	ldr	r3, [r3, #0]
 801bd42:	461a      	mov	r2, r3
 801bd44:	4b40      	ldr	r3, [pc, #256]	; (801be48 <HAL_DMA_Init+0x148>)
 801bd46:	4413      	add	r3, r2
 801bd48:	4a3d      	ldr	r2, [pc, #244]	; (801be40 <HAL_DMA_Init+0x140>)
 801bd4a:	fba2 2303 	umull	r2, r3, r2, r3
 801bd4e:	091b      	lsrs	r3, r3, #4
 801bd50:	009a      	lsls	r2, r3, #2
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	4a3c      	ldr	r2, [pc, #240]	; (801be4c <HAL_DMA_Init+0x14c>)
 801bd5a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	2202      	movs	r2, #2
 801bd60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	681b      	ldr	r3, [r3, #0]
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801bd6c:	68fb      	ldr	r3, [r7, #12]
 801bd6e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801bd72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bd76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801bd80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	691b      	ldr	r3, [r3, #16]
 801bd86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801bd8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	699b      	ldr	r3, [r3, #24]
 801bd92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801bd98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	6a1b      	ldr	r3, [r3, #32]
 801bd9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801bda0:	68fa      	ldr	r2, [r7, #12]
 801bda2:	4313      	orrs	r3, r2
 801bda4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	681b      	ldr	r3, [r3, #0]
 801bdaa:	68fa      	ldr	r2, [r7, #12]
 801bdac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801bdae:	6878      	ldr	r0, [r7, #4]
 801bdb0:	f000 fa10 	bl	801c1d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	689b      	ldr	r3, [r3, #8]
 801bdb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801bdbc:	d102      	bne.n	801bdc4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	2200      	movs	r2, #0
 801bdc2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	685a      	ldr	r2, [r3, #4]
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bdcc:	b2d2      	uxtb	r2, r2
 801bdce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bdd4:	687a      	ldr	r2, [r7, #4]
 801bdd6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801bdd8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	685b      	ldr	r3, [r3, #4]
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	d010      	beq.n	801be04 <HAL_DMA_Init+0x104>
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	685b      	ldr	r3, [r3, #4]
 801bde6:	2b04      	cmp	r3, #4
 801bde8:	d80c      	bhi.n	801be04 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801bdea:	6878      	ldr	r0, [r7, #4]
 801bdec:	f000 fa30 	bl	801c250 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bdf4:	2200      	movs	r2, #0
 801bdf6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bdfc:	687a      	ldr	r2, [r7, #4]
 801bdfe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801be00:	605a      	str	r2, [r3, #4]
 801be02:	e008      	b.n	801be16 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	2200      	movs	r2, #0
 801be08:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	2200      	movs	r2, #0
 801be0e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	2200      	movs	r2, #0
 801be14:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801be16:	687b      	ldr	r3, [r7, #4]
 801be18:	2200      	movs	r2, #0
 801be1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	2201      	movs	r2, #1
 801be20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	2200      	movs	r2, #0
 801be28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801be2c:	2300      	movs	r3, #0
}
 801be2e:	4618      	mov	r0, r3
 801be30:	3710      	adds	r7, #16
 801be32:	46bd      	mov	sp, r7
 801be34:	bd80      	pop	{r7, pc}
 801be36:	bf00      	nop
 801be38:	40020407 	.word	0x40020407
 801be3c:	bffdfff8 	.word	0xbffdfff8
 801be40:	cccccccd 	.word	0xcccccccd
 801be44:	40020000 	.word	0x40020000
 801be48:	bffdfbf8 	.word	0xbffdfbf8
 801be4c:	40020400 	.word	0x40020400

0801be50 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 801be50:	b580      	push	{r7, lr}
 801be52:	b086      	sub	sp, #24
 801be54:	af00      	add	r7, sp, #0
 801be56:	60f8      	str	r0, [r7, #12]
 801be58:	60b9      	str	r1, [r7, #8]
 801be5a:	607a      	str	r2, [r7, #4]
 801be5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801be5e:	2300      	movs	r3, #0
 801be60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801be62:	68fb      	ldr	r3, [r7, #12]
 801be64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801be68:	2b01      	cmp	r3, #1
 801be6a:	d101      	bne.n	801be70 <HAL_DMA_Start_IT+0x20>
 801be6c:	2302      	movs	r3, #2
 801be6e:	e066      	b.n	801bf3e <HAL_DMA_Start_IT+0xee>
 801be70:	68fb      	ldr	r3, [r7, #12]
 801be72:	2201      	movs	r2, #1
 801be74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 801be78:	68fb      	ldr	r3, [r7, #12]
 801be7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801be7e:	b2db      	uxtb	r3, r3
 801be80:	2b01      	cmp	r3, #1
 801be82:	d155      	bne.n	801bf30 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801be84:	68fb      	ldr	r3, [r7, #12]
 801be86:	2202      	movs	r2, #2
 801be88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801be8c:	68fb      	ldr	r3, [r7, #12]
 801be8e:	2200      	movs	r2, #0
 801be90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801be92:	68fb      	ldr	r3, [r7, #12]
 801be94:	681b      	ldr	r3, [r3, #0]
 801be96:	681a      	ldr	r2, [r3, #0]
 801be98:	68fb      	ldr	r3, [r7, #12]
 801be9a:	681b      	ldr	r3, [r3, #0]
 801be9c:	f022 0201 	bic.w	r2, r2, #1
 801bea0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801bea2:	683b      	ldr	r3, [r7, #0]
 801bea4:	687a      	ldr	r2, [r7, #4]
 801bea6:	68b9      	ldr	r1, [r7, #8]
 801bea8:	68f8      	ldr	r0, [r7, #12]
 801beaa:	f000 f954 	bl	801c156 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 801beae:	68fb      	ldr	r3, [r7, #12]
 801beb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	d008      	beq.n	801bec8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801beb6:	68fb      	ldr	r3, [r7, #12]
 801beb8:	681b      	ldr	r3, [r3, #0]
 801beba:	681a      	ldr	r2, [r3, #0]
 801bebc:	68fb      	ldr	r3, [r7, #12]
 801bebe:	681b      	ldr	r3, [r3, #0]
 801bec0:	f042 020e 	orr.w	r2, r2, #14
 801bec4:	601a      	str	r2, [r3, #0]
 801bec6:	e00f      	b.n	801bee8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801bec8:	68fb      	ldr	r3, [r7, #12]
 801beca:	681b      	ldr	r3, [r3, #0]
 801becc:	681a      	ldr	r2, [r3, #0]
 801bece:	68fb      	ldr	r3, [r7, #12]
 801bed0:	681b      	ldr	r3, [r3, #0]
 801bed2:	f022 0204 	bic.w	r2, r2, #4
 801bed6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801bed8:	68fb      	ldr	r3, [r7, #12]
 801beda:	681b      	ldr	r3, [r3, #0]
 801bedc:	681a      	ldr	r2, [r3, #0]
 801bede:	68fb      	ldr	r3, [r7, #12]
 801bee0:	681b      	ldr	r3, [r3, #0]
 801bee2:	f042 020a 	orr.w	r2, r2, #10
 801bee6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801bee8:	68fb      	ldr	r3, [r7, #12]
 801beea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801beec:	681b      	ldr	r3, [r3, #0]
 801beee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	d007      	beq.n	801bf06 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801bef6:	68fb      	ldr	r3, [r7, #12]
 801bef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801befa:	681a      	ldr	r2, [r3, #0]
 801befc:	68fb      	ldr	r3, [r7, #12]
 801befe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bf00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801bf04:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 801bf06:	68fb      	ldr	r3, [r7, #12]
 801bf08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bf0a:	2b00      	cmp	r3, #0
 801bf0c:	d007      	beq.n	801bf1e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801bf0e:	68fb      	ldr	r3, [r7, #12]
 801bf10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bf12:	681a      	ldr	r2, [r3, #0]
 801bf14:	68fb      	ldr	r3, [r7, #12]
 801bf16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bf18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801bf1c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801bf1e:	68fb      	ldr	r3, [r7, #12]
 801bf20:	681b      	ldr	r3, [r3, #0]
 801bf22:	681a      	ldr	r2, [r3, #0]
 801bf24:	68fb      	ldr	r3, [r7, #12]
 801bf26:	681b      	ldr	r3, [r3, #0]
 801bf28:	f042 0201 	orr.w	r2, r2, #1
 801bf2c:	601a      	str	r2, [r3, #0]
 801bf2e:	e005      	b.n	801bf3c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801bf30:	68fb      	ldr	r3, [r7, #12]
 801bf32:	2200      	movs	r2, #0
 801bf34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801bf38:	2302      	movs	r3, #2
 801bf3a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801bf3c:	7dfb      	ldrb	r3, [r7, #23]
}
 801bf3e:	4618      	mov	r0, r3
 801bf40:	3718      	adds	r7, #24
 801bf42:	46bd      	mov	sp, r7
 801bf44:	bd80      	pop	{r7, pc}

0801bf46 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801bf46:	b480      	push	{r7}
 801bf48:	b085      	sub	sp, #20
 801bf4a:	af00      	add	r7, sp, #0
 801bf4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801bf4e:	2300      	movs	r3, #0
 801bf50:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801bf58:	b2db      	uxtb	r3, r3
 801bf5a:	2b02      	cmp	r3, #2
 801bf5c:	d005      	beq.n	801bf6a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	2204      	movs	r2, #4
 801bf62:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 801bf64:	2301      	movs	r3, #1
 801bf66:	73fb      	strb	r3, [r7, #15]
 801bf68:	e037      	b.n	801bfda <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801bf6a:	687b      	ldr	r3, [r7, #4]
 801bf6c:	681b      	ldr	r3, [r3, #0]
 801bf6e:	681a      	ldr	r2, [r3, #0]
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	681b      	ldr	r3, [r3, #0]
 801bf74:	f022 020e 	bic.w	r2, r2, #14
 801bf78:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bf7e:	681a      	ldr	r2, [r3, #0]
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bf84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801bf88:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	681b      	ldr	r3, [r3, #0]
 801bf8e:	681a      	ldr	r2, [r3, #0]
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	681b      	ldr	r3, [r3, #0]
 801bf94:	f022 0201 	bic.w	r2, r2, #1
 801bf98:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bf9e:	f003 021f 	and.w	r2, r3, #31
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bfa6:	2101      	movs	r1, #1
 801bfa8:	fa01 f202 	lsl.w	r2, r1, r2
 801bfac:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bfb2:	687a      	ldr	r2, [r7, #4]
 801bfb4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801bfb6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	d00c      	beq.n	801bfda <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bfc4:	681a      	ldr	r2, [r3, #0]
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bfca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801bfce:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bfd4:	687a      	ldr	r2, [r7, #4]
 801bfd6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801bfd8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	2201      	movs	r2, #1
 801bfde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	2200      	movs	r2, #0
 801bfe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 801bfea:	7bfb      	ldrb	r3, [r7, #15]
}
 801bfec:	4618      	mov	r0, r3
 801bfee:	3714      	adds	r7, #20
 801bff0:	46bd      	mov	sp, r7
 801bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bff6:	4770      	bx	lr

0801bff8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801bff8:	b580      	push	{r7, lr}
 801bffa:	b084      	sub	sp, #16
 801bffc:	af00      	add	r7, sp, #0
 801bffe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801c000:	687b      	ldr	r3, [r7, #4]
 801c002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c004:	681b      	ldr	r3, [r3, #0]
 801c006:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	681b      	ldr	r3, [r3, #0]
 801c00c:	681b      	ldr	r3, [r3, #0]
 801c00e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 801c010:	687b      	ldr	r3, [r7, #4]
 801c012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c014:	f003 031f 	and.w	r3, r3, #31
 801c018:	2204      	movs	r2, #4
 801c01a:	409a      	lsls	r2, r3
 801c01c:	68fb      	ldr	r3, [r7, #12]
 801c01e:	4013      	ands	r3, r2
 801c020:	2b00      	cmp	r3, #0
 801c022:	d026      	beq.n	801c072 <HAL_DMA_IRQHandler+0x7a>
 801c024:	68bb      	ldr	r3, [r7, #8]
 801c026:	f003 0304 	and.w	r3, r3, #4
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	d021      	beq.n	801c072 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801c02e:	687b      	ldr	r3, [r7, #4]
 801c030:	681b      	ldr	r3, [r3, #0]
 801c032:	681b      	ldr	r3, [r3, #0]
 801c034:	f003 0320 	and.w	r3, r3, #32
 801c038:	2b00      	cmp	r3, #0
 801c03a:	d107      	bne.n	801c04c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801c03c:	687b      	ldr	r3, [r7, #4]
 801c03e:	681b      	ldr	r3, [r3, #0]
 801c040:	681a      	ldr	r2, [r3, #0]
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	681b      	ldr	r3, [r3, #0]
 801c046:	f022 0204 	bic.w	r2, r2, #4
 801c04a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 801c04c:	687b      	ldr	r3, [r7, #4]
 801c04e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c050:	f003 021f 	and.w	r2, r3, #31
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c058:	2104      	movs	r1, #4
 801c05a:	fa01 f202 	lsl.w	r2, r1, r2
 801c05e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c064:	2b00      	cmp	r3, #0
 801c066:	d071      	beq.n	801c14c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c06c:	6878      	ldr	r0, [r7, #4]
 801c06e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801c070:	e06c      	b.n	801c14c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c076:	f003 031f 	and.w	r3, r3, #31
 801c07a:	2202      	movs	r2, #2
 801c07c:	409a      	lsls	r2, r3
 801c07e:	68fb      	ldr	r3, [r7, #12]
 801c080:	4013      	ands	r3, r2
 801c082:	2b00      	cmp	r3, #0
 801c084:	d02e      	beq.n	801c0e4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 801c086:	68bb      	ldr	r3, [r7, #8]
 801c088:	f003 0302 	and.w	r3, r3, #2
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d029      	beq.n	801c0e4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	681b      	ldr	r3, [r3, #0]
 801c094:	681b      	ldr	r3, [r3, #0]
 801c096:	f003 0320 	and.w	r3, r3, #32
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	d10b      	bne.n	801c0b6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	681b      	ldr	r3, [r3, #0]
 801c0a2:	681a      	ldr	r2, [r3, #0]
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	681b      	ldr	r3, [r3, #0]
 801c0a8:	f022 020a 	bic.w	r2, r2, #10
 801c0ac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	2201      	movs	r2, #1
 801c0b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c0ba:	f003 021f 	and.w	r2, r3, #31
 801c0be:	687b      	ldr	r3, [r7, #4]
 801c0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c0c2:	2102      	movs	r1, #2
 801c0c4:	fa01 f202 	lsl.w	r2, r1, r2
 801c0c8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	2200      	movs	r2, #0
 801c0ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	d038      	beq.n	801c14c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801c0da:	687b      	ldr	r3, [r7, #4]
 801c0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0de:	6878      	ldr	r0, [r7, #4]
 801c0e0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801c0e2:	e033      	b.n	801c14c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c0e8:	f003 031f 	and.w	r3, r3, #31
 801c0ec:	2208      	movs	r2, #8
 801c0ee:	409a      	lsls	r2, r3
 801c0f0:	68fb      	ldr	r3, [r7, #12]
 801c0f2:	4013      	ands	r3, r2
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d02a      	beq.n	801c14e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 801c0f8:	68bb      	ldr	r3, [r7, #8]
 801c0fa:	f003 0308 	and.w	r3, r3, #8
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d025      	beq.n	801c14e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	681b      	ldr	r3, [r3, #0]
 801c106:	681a      	ldr	r2, [r3, #0]
 801c108:	687b      	ldr	r3, [r7, #4]
 801c10a:	681b      	ldr	r3, [r3, #0]
 801c10c:	f022 020e 	bic.w	r2, r2, #14
 801c110:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c116:	f003 021f 	and.w	r2, r3, #31
 801c11a:	687b      	ldr	r3, [r7, #4]
 801c11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c11e:	2101      	movs	r1, #1
 801c120:	fa01 f202 	lsl.w	r2, r1, r2
 801c124:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	2201      	movs	r2, #1
 801c12a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	2201      	movs	r2, #1
 801c130:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	2200      	movs	r2, #0
 801c138:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c140:	2b00      	cmp	r3, #0
 801c142:	d004      	beq.n	801c14e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c148:	6878      	ldr	r0, [r7, #4]
 801c14a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801c14c:	bf00      	nop
 801c14e:	bf00      	nop
}
 801c150:	3710      	adds	r7, #16
 801c152:	46bd      	mov	sp, r7
 801c154:	bd80      	pop	{r7, pc}

0801c156 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801c156:	b480      	push	{r7}
 801c158:	b085      	sub	sp, #20
 801c15a:	af00      	add	r7, sp, #0
 801c15c:	60f8      	str	r0, [r7, #12]
 801c15e:	60b9      	str	r1, [r7, #8]
 801c160:	607a      	str	r2, [r7, #4]
 801c162:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801c164:	68fb      	ldr	r3, [r7, #12]
 801c166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c168:	68fa      	ldr	r2, [r7, #12]
 801c16a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801c16c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801c16e:	68fb      	ldr	r3, [r7, #12]
 801c170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c172:	2b00      	cmp	r3, #0
 801c174:	d004      	beq.n	801c180 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801c176:	68fb      	ldr	r3, [r7, #12]
 801c178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c17a:	68fa      	ldr	r2, [r7, #12]
 801c17c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801c17e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801c180:	68fb      	ldr	r3, [r7, #12]
 801c182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c184:	f003 021f 	and.w	r2, r3, #31
 801c188:	68fb      	ldr	r3, [r7, #12]
 801c18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c18c:	2101      	movs	r1, #1
 801c18e:	fa01 f202 	lsl.w	r2, r1, r2
 801c192:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801c194:	68fb      	ldr	r3, [r7, #12]
 801c196:	681b      	ldr	r3, [r3, #0]
 801c198:	683a      	ldr	r2, [r7, #0]
 801c19a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801c19c:	68fb      	ldr	r3, [r7, #12]
 801c19e:	689b      	ldr	r3, [r3, #8]
 801c1a0:	2b10      	cmp	r3, #16
 801c1a2:	d108      	bne.n	801c1b6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801c1a4:	68fb      	ldr	r3, [r7, #12]
 801c1a6:	681b      	ldr	r3, [r3, #0]
 801c1a8:	687a      	ldr	r2, [r7, #4]
 801c1aa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801c1ac:	68fb      	ldr	r3, [r7, #12]
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	68ba      	ldr	r2, [r7, #8]
 801c1b2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801c1b4:	e007      	b.n	801c1c6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 801c1b6:	68fb      	ldr	r3, [r7, #12]
 801c1b8:	681b      	ldr	r3, [r3, #0]
 801c1ba:	68ba      	ldr	r2, [r7, #8]
 801c1bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801c1be:	68fb      	ldr	r3, [r7, #12]
 801c1c0:	681b      	ldr	r3, [r3, #0]
 801c1c2:	687a      	ldr	r2, [r7, #4]
 801c1c4:	60da      	str	r2, [r3, #12]
}
 801c1c6:	bf00      	nop
 801c1c8:	3714      	adds	r7, #20
 801c1ca:	46bd      	mov	sp, r7
 801c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1d0:	4770      	bx	lr
	...

0801c1d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801c1d4:	b480      	push	{r7}
 801c1d6:	b087      	sub	sp, #28
 801c1d8:	af00      	add	r7, sp, #0
 801c1da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	681b      	ldr	r3, [r3, #0]
 801c1e0:	461a      	mov	r2, r3
 801c1e2:	4b16      	ldr	r3, [pc, #88]	; (801c23c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 801c1e4:	429a      	cmp	r2, r3
 801c1e6:	d802      	bhi.n	801c1ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 801c1e8:	4b15      	ldr	r3, [pc, #84]	; (801c240 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801c1ea:	617b      	str	r3, [r7, #20]
 801c1ec:	e001      	b.n	801c1f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 801c1ee:	4b15      	ldr	r3, [pc, #84]	; (801c244 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 801c1f0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 801c1f2:	697b      	ldr	r3, [r7, #20]
 801c1f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801c1f6:	687b      	ldr	r3, [r7, #4]
 801c1f8:	681b      	ldr	r3, [r3, #0]
 801c1fa:	b2db      	uxtb	r3, r3
 801c1fc:	3b08      	subs	r3, #8
 801c1fe:	4a12      	ldr	r2, [pc, #72]	; (801c248 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 801c200:	fba2 2303 	umull	r2, r3, r2, r3
 801c204:	091b      	lsrs	r3, r3, #4
 801c206:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c20c:	089b      	lsrs	r3, r3, #2
 801c20e:	009a      	lsls	r2, r3, #2
 801c210:	693b      	ldr	r3, [r7, #16]
 801c212:	4413      	add	r3, r2
 801c214:	461a      	mov	r2, r3
 801c216:	687b      	ldr	r3, [r7, #4]
 801c218:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	4a0b      	ldr	r2, [pc, #44]	; (801c24c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 801c21e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801c220:	68fb      	ldr	r3, [r7, #12]
 801c222:	f003 031f 	and.w	r3, r3, #31
 801c226:	2201      	movs	r2, #1
 801c228:	409a      	lsls	r2, r3
 801c22a:	687b      	ldr	r3, [r7, #4]
 801c22c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801c22e:	bf00      	nop
 801c230:	371c      	adds	r7, #28
 801c232:	46bd      	mov	sp, r7
 801c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c238:	4770      	bx	lr
 801c23a:	bf00      	nop
 801c23c:	40020407 	.word	0x40020407
 801c240:	40020800 	.word	0x40020800
 801c244:	40020820 	.word	0x40020820
 801c248:	cccccccd 	.word	0xcccccccd
 801c24c:	40020880 	.word	0x40020880

0801c250 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801c250:	b480      	push	{r7}
 801c252:	b085      	sub	sp, #20
 801c254:	af00      	add	r7, sp, #0
 801c256:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	685b      	ldr	r3, [r3, #4]
 801c25c:	b2db      	uxtb	r3, r3
 801c25e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801c260:	68fa      	ldr	r2, [r7, #12]
 801c262:	4b0b      	ldr	r3, [pc, #44]	; (801c290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 801c264:	4413      	add	r3, r2
 801c266:	009b      	lsls	r3, r3, #2
 801c268:	461a      	mov	r2, r3
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	4a08      	ldr	r2, [pc, #32]	; (801c294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801c272:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 801c274:	68fb      	ldr	r3, [r7, #12]
 801c276:	3b01      	subs	r3, #1
 801c278:	f003 031f 	and.w	r3, r3, #31
 801c27c:	2201      	movs	r2, #1
 801c27e:	409a      	lsls	r2, r3
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801c284:	bf00      	nop
 801c286:	3714      	adds	r7, #20
 801c288:	46bd      	mov	sp, r7
 801c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c28e:	4770      	bx	lr
 801c290:	1000823f 	.word	0x1000823f
 801c294:	40020940 	.word	0x40020940

0801c298 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801c298:	b580      	push	{r7, lr}
 801c29a:	b086      	sub	sp, #24
 801c29c:	af00      	add	r7, sp, #0
 801c29e:	60f8      	str	r0, [r7, #12]
 801c2a0:	60b9      	str	r1, [r7, #8]
 801c2a2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 801c2a6:	2300      	movs	r3, #0
 801c2a8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801c2aa:	4b24      	ldr	r3, [pc, #144]	; (801c33c <HAL_FLASH_Program+0xa4>)
 801c2ac:	781b      	ldrb	r3, [r3, #0]
 801c2ae:	2b01      	cmp	r3, #1
 801c2b0:	d101      	bne.n	801c2b6 <HAL_FLASH_Program+0x1e>
 801c2b2:	2302      	movs	r3, #2
 801c2b4:	e03e      	b.n	801c334 <HAL_FLASH_Program+0x9c>
 801c2b6:	4b21      	ldr	r3, [pc, #132]	; (801c33c <HAL_FLASH_Program+0xa4>)
 801c2b8:	2201      	movs	r2, #1
 801c2ba:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801c2bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801c2c0:	f000 f87c 	bl	801c3bc <FLASH_WaitForLastOperation>
 801c2c4:	4603      	mov	r3, r0
 801c2c6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 801c2c8:	7dfb      	ldrb	r3, [r7, #23]
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	d12e      	bne.n	801c32c <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801c2ce:	4b1b      	ldr	r3, [pc, #108]	; (801c33c <HAL_FLASH_Program+0xa4>)
 801c2d0:	2200      	movs	r2, #0
 801c2d2:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 801c2d4:	68fb      	ldr	r3, [r7, #12]
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	d107      	bne.n	801c2ea <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801c2da:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c2de:	68b8      	ldr	r0, [r7, #8]
 801c2e0:	f000 f8c0 	bl	801c464 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 801c2e4:	2301      	movs	r3, #1
 801c2e6:	613b      	str	r3, [r7, #16]
 801c2e8:	e010      	b.n	801c30c <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801c2ea:	68fb      	ldr	r3, [r7, #12]
 801c2ec:	2b01      	cmp	r3, #1
 801c2ee:	d002      	beq.n	801c2f6 <HAL_FLASH_Program+0x5e>
 801c2f0:	68fb      	ldr	r3, [r7, #12]
 801c2f2:	2b02      	cmp	r3, #2
 801c2f4:	d10a      	bne.n	801c30c <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801c2f6:	683b      	ldr	r3, [r7, #0]
 801c2f8:	4619      	mov	r1, r3
 801c2fa:	68b8      	ldr	r0, [r7, #8]
 801c2fc:	f000 f8d8 	bl	801c4b0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 801c300:	68fb      	ldr	r3, [r7, #12]
 801c302:	2b02      	cmp	r3, #2
 801c304:	d102      	bne.n	801c30c <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 801c306:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801c30a:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801c30c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801c310:	f000 f854 	bl	801c3bc <FLASH_WaitForLastOperation>
 801c314:	4603      	mov	r3, r0
 801c316:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801c318:	693b      	ldr	r3, [r7, #16]
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	d006      	beq.n	801c32c <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 801c31e:	4b08      	ldr	r3, [pc, #32]	; (801c340 <HAL_FLASH_Program+0xa8>)
 801c320:	695a      	ldr	r2, [r3, #20]
 801c322:	693b      	ldr	r3, [r7, #16]
 801c324:	43db      	mvns	r3, r3
 801c326:	4906      	ldr	r1, [pc, #24]	; (801c340 <HAL_FLASH_Program+0xa8>)
 801c328:	4013      	ands	r3, r2
 801c32a:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801c32c:	4b03      	ldr	r3, [pc, #12]	; (801c33c <HAL_FLASH_Program+0xa4>)
 801c32e:	2200      	movs	r2, #0
 801c330:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 801c332:	7dfb      	ldrb	r3, [r7, #23]
}
 801c334:	4618      	mov	r0, r3
 801c336:	3718      	adds	r7, #24
 801c338:	46bd      	mov	sp, r7
 801c33a:	bd80      	pop	{r7, pc}
 801c33c:	2000000c 	.word	0x2000000c
 801c340:	40022000 	.word	0x40022000

0801c344 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801c344:	b480      	push	{r7}
 801c346:	b083      	sub	sp, #12
 801c348:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801c34a:	2300      	movs	r3, #0
 801c34c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801c34e:	4b0b      	ldr	r3, [pc, #44]	; (801c37c <HAL_FLASH_Unlock+0x38>)
 801c350:	695b      	ldr	r3, [r3, #20]
 801c352:	2b00      	cmp	r3, #0
 801c354:	da0b      	bge.n	801c36e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801c356:	4b09      	ldr	r3, [pc, #36]	; (801c37c <HAL_FLASH_Unlock+0x38>)
 801c358:	4a09      	ldr	r2, [pc, #36]	; (801c380 <HAL_FLASH_Unlock+0x3c>)
 801c35a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801c35c:	4b07      	ldr	r3, [pc, #28]	; (801c37c <HAL_FLASH_Unlock+0x38>)
 801c35e:	4a09      	ldr	r2, [pc, #36]	; (801c384 <HAL_FLASH_Unlock+0x40>)
 801c360:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801c362:	4b06      	ldr	r3, [pc, #24]	; (801c37c <HAL_FLASH_Unlock+0x38>)
 801c364:	695b      	ldr	r3, [r3, #20]
 801c366:	2b00      	cmp	r3, #0
 801c368:	da01      	bge.n	801c36e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801c36a:	2301      	movs	r3, #1
 801c36c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801c36e:	79fb      	ldrb	r3, [r7, #7]
}
 801c370:	4618      	mov	r0, r3
 801c372:	370c      	adds	r7, #12
 801c374:	46bd      	mov	sp, r7
 801c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c37a:	4770      	bx	lr
 801c37c:	40022000 	.word	0x40022000
 801c380:	45670123 	.word	0x45670123
 801c384:	cdef89ab 	.word	0xcdef89ab

0801c388 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801c388:	b480      	push	{r7}
 801c38a:	b083      	sub	sp, #12
 801c38c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 801c38e:	2301      	movs	r3, #1
 801c390:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801c392:	4b09      	ldr	r3, [pc, #36]	; (801c3b8 <HAL_FLASH_Lock+0x30>)
 801c394:	695b      	ldr	r3, [r3, #20]
 801c396:	4a08      	ldr	r2, [pc, #32]	; (801c3b8 <HAL_FLASH_Lock+0x30>)
 801c398:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801c39c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801c39e:	4b06      	ldr	r3, [pc, #24]	; (801c3b8 <HAL_FLASH_Lock+0x30>)
 801c3a0:	695b      	ldr	r3, [r3, #20]
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	da01      	bge.n	801c3aa <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 801c3a6:	2300      	movs	r3, #0
 801c3a8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801c3aa:	79fb      	ldrb	r3, [r7, #7]
}
 801c3ac:	4618      	mov	r0, r3
 801c3ae:	370c      	adds	r7, #12
 801c3b0:	46bd      	mov	sp, r7
 801c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3b6:	4770      	bx	lr
 801c3b8:	40022000 	.word	0x40022000

0801c3bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801c3bc:	b580      	push	{r7, lr}
 801c3be:	b084      	sub	sp, #16
 801c3c0:	af00      	add	r7, sp, #0
 801c3c2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 801c3c4:	f7fd f98a 	bl	80196dc <HAL_GetTick>
 801c3c8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801c3ca:	e009      	b.n	801c3e0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 801c3cc:	f7fd f986 	bl	80196dc <HAL_GetTick>
 801c3d0:	4602      	mov	r2, r0
 801c3d2:	68fb      	ldr	r3, [r7, #12]
 801c3d4:	1ad3      	subs	r3, r2, r3
 801c3d6:	687a      	ldr	r2, [r7, #4]
 801c3d8:	429a      	cmp	r2, r3
 801c3da:	d201      	bcs.n	801c3e0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 801c3dc:	2303      	movs	r3, #3
 801c3de:	e038      	b.n	801c452 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801c3e0:	4b1e      	ldr	r3, [pc, #120]	; (801c45c <FLASH_WaitForLastOperation+0xa0>)
 801c3e2:	691b      	ldr	r3, [r3, #16]
 801c3e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801c3e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c3ec:	d0ee      	beq.n	801c3cc <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 801c3ee:	4b1b      	ldr	r3, [pc, #108]	; (801c45c <FLASH_WaitForLastOperation+0xa0>)
 801c3f0:	691a      	ldr	r2, [r3, #16]
 801c3f2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 801c3f6:	4013      	ands	r3, r2
 801c3f8:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 801c3fa:	68bb      	ldr	r3, [r7, #8]
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d01e      	beq.n	801c43e <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 801c400:	4b17      	ldr	r3, [pc, #92]	; (801c460 <FLASH_WaitForLastOperation+0xa4>)
 801c402:	685a      	ldr	r2, [r3, #4]
 801c404:	68bb      	ldr	r3, [r7, #8]
 801c406:	4313      	orrs	r3, r2
 801c408:	4a15      	ldr	r2, [pc, #84]	; (801c460 <FLASH_WaitForLastOperation+0xa4>)
 801c40a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 801c40c:	68bb      	ldr	r3, [r7, #8]
 801c40e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801c412:	2b00      	cmp	r3, #0
 801c414:	d007      	beq.n	801c426 <FLASH_WaitForLastOperation+0x6a>
 801c416:	4b11      	ldr	r3, [pc, #68]	; (801c45c <FLASH_WaitForLastOperation+0xa0>)
 801c418:	699a      	ldr	r2, [r3, #24]
 801c41a:	68bb      	ldr	r3, [r7, #8]
 801c41c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801c420:	490e      	ldr	r1, [pc, #56]	; (801c45c <FLASH_WaitForLastOperation+0xa0>)
 801c422:	4313      	orrs	r3, r2
 801c424:	618b      	str	r3, [r1, #24]
 801c426:	68bb      	ldr	r3, [r7, #8]
 801c428:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	d004      	beq.n	801c43a <FLASH_WaitForLastOperation+0x7e>
 801c430:	4a0a      	ldr	r2, [pc, #40]	; (801c45c <FLASH_WaitForLastOperation+0xa0>)
 801c432:	68bb      	ldr	r3, [r7, #8]
 801c434:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801c438:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 801c43a:	2301      	movs	r3, #1
 801c43c:	e009      	b.n	801c452 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801c43e:	4b07      	ldr	r3, [pc, #28]	; (801c45c <FLASH_WaitForLastOperation+0xa0>)
 801c440:	691b      	ldr	r3, [r3, #16]
 801c442:	f003 0301 	and.w	r3, r3, #1
 801c446:	2b01      	cmp	r3, #1
 801c448:	d102      	bne.n	801c450 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801c44a:	4b04      	ldr	r3, [pc, #16]	; (801c45c <FLASH_WaitForLastOperation+0xa0>)
 801c44c:	2201      	movs	r2, #1
 801c44e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 801c450:	2300      	movs	r3, #0
}
 801c452:	4618      	mov	r0, r3
 801c454:	3710      	adds	r7, #16
 801c456:	46bd      	mov	sp, r7
 801c458:	bd80      	pop	{r7, pc}
 801c45a:	bf00      	nop
 801c45c:	40022000 	.word	0x40022000
 801c460:	2000000c 	.word	0x2000000c

0801c464 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801c464:	b480      	push	{r7}
 801c466:	b085      	sub	sp, #20
 801c468:	af00      	add	r7, sp, #0
 801c46a:	60f8      	str	r0, [r7, #12]
 801c46c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 801c470:	4b0e      	ldr	r3, [pc, #56]	; (801c4ac <FLASH_Program_DoubleWord+0x48>)
 801c472:	695b      	ldr	r3, [r3, #20]
 801c474:	4a0d      	ldr	r2, [pc, #52]	; (801c4ac <FLASH_Program_DoubleWord+0x48>)
 801c476:	f043 0301 	orr.w	r3, r3, #1
 801c47a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	683a      	ldr	r2, [r7, #0]
 801c480:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801c482:	f3bf 8f6f 	isb	sy
}
 801c486:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 801c488:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c48c:	f04f 0200 	mov.w	r2, #0
 801c490:	f04f 0300 	mov.w	r3, #0
 801c494:	000a      	movs	r2, r1
 801c496:	2300      	movs	r3, #0
 801c498:	68f9      	ldr	r1, [r7, #12]
 801c49a:	3104      	adds	r1, #4
 801c49c:	4613      	mov	r3, r2
 801c49e:	600b      	str	r3, [r1, #0]
}
 801c4a0:	bf00      	nop
 801c4a2:	3714      	adds	r7, #20
 801c4a4:	46bd      	mov	sp, r7
 801c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4aa:	4770      	bx	lr
 801c4ac:	40022000 	.word	0x40022000

0801c4b0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 801c4b0:	b480      	push	{r7}
 801c4b2:	b089      	sub	sp, #36	; 0x24
 801c4b4:	af00      	add	r7, sp, #0
 801c4b6:	6078      	str	r0, [r7, #4]
 801c4b8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 801c4ba:	2340      	movs	r3, #64	; 0x40
 801c4bc:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 801c4c2:	683b      	ldr	r3, [r7, #0]
 801c4c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801c4c6:	4b14      	ldr	r3, [pc, #80]	; (801c518 <FLASH_Program_Fast+0x68>)
 801c4c8:	695b      	ldr	r3, [r3, #20]
 801c4ca:	4a13      	ldr	r2, [pc, #76]	; (801c518 <FLASH_Program_Fast+0x68>)
 801c4cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801c4d0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4d2:	f3ef 8310 	mrs	r3, PRIMASK
 801c4d6:	60fb      	str	r3, [r7, #12]
  return(result);
 801c4d8:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 801c4da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c4dc:	b672      	cpsid	i
}
 801c4de:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 801c4e0:	697b      	ldr	r3, [r7, #20]
 801c4e2:	681a      	ldr	r2, [r3, #0]
 801c4e4:	69bb      	ldr	r3, [r7, #24]
 801c4e6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 801c4e8:	69bb      	ldr	r3, [r7, #24]
 801c4ea:	3304      	adds	r3, #4
 801c4ec:	61bb      	str	r3, [r7, #24]
    src_addr++;
 801c4ee:	697b      	ldr	r3, [r7, #20]
 801c4f0:	3304      	adds	r3, #4
 801c4f2:	617b      	str	r3, [r7, #20]
    row_index--;
 801c4f4:	7ffb      	ldrb	r3, [r7, #31]
 801c4f6:	3b01      	subs	r3, #1
 801c4f8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 801c4fa:	7ffb      	ldrb	r3, [r7, #31]
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d1ef      	bne.n	801c4e0 <FLASH_Program_Fast+0x30>
 801c500:	693b      	ldr	r3, [r7, #16]
 801c502:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c504:	68bb      	ldr	r3, [r7, #8]
 801c506:	f383 8810 	msr	PRIMASK, r3
}
 801c50a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801c50c:	bf00      	nop
 801c50e:	3724      	adds	r7, #36	; 0x24
 801c510:	46bd      	mov	sp, r7
 801c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c516:	4770      	bx	lr
 801c518:	40022000 	.word	0x40022000

0801c51c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801c51c:	b580      	push	{r7, lr}
 801c51e:	b084      	sub	sp, #16
 801c520:	af00      	add	r7, sp, #0
 801c522:	6078      	str	r0, [r7, #4]
 801c524:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801c526:	4b48      	ldr	r3, [pc, #288]	; (801c648 <HAL_FLASHEx_Erase+0x12c>)
 801c528:	781b      	ldrb	r3, [r3, #0]
 801c52a:	2b01      	cmp	r3, #1
 801c52c:	d101      	bne.n	801c532 <HAL_FLASHEx_Erase+0x16>
 801c52e:	2302      	movs	r3, #2
 801c530:	e085      	b.n	801c63e <HAL_FLASHEx_Erase+0x122>
 801c532:	4b45      	ldr	r3, [pc, #276]	; (801c648 <HAL_FLASHEx_Erase+0x12c>)
 801c534:	2201      	movs	r2, #1
 801c536:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801c538:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801c53c:	f7ff ff3e 	bl	801c3bc <FLASH_WaitForLastOperation>
 801c540:	4603      	mov	r3, r0
 801c542:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801c544:	7bfb      	ldrb	r3, [r7, #15]
 801c546:	2b00      	cmp	r3, #0
 801c548:	d175      	bne.n	801c636 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801c54a:	4b3f      	ldr	r3, [pc, #252]	; (801c648 <HAL_FLASHEx_Erase+0x12c>)
 801c54c:	2200      	movs	r2, #0
 801c54e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 801c550:	4b3e      	ldr	r3, [pc, #248]	; (801c64c <HAL_FLASHEx_Erase+0x130>)
 801c552:	681b      	ldr	r3, [r3, #0]
 801c554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d013      	beq.n	801c584 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801c55c:	4b3b      	ldr	r3, [pc, #236]	; (801c64c <HAL_FLASHEx_Erase+0x130>)
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c564:	2b00      	cmp	r3, #0
 801c566:	d009      	beq.n	801c57c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 801c568:	4b38      	ldr	r3, [pc, #224]	; (801c64c <HAL_FLASHEx_Erase+0x130>)
 801c56a:	681b      	ldr	r3, [r3, #0]
 801c56c:	4a37      	ldr	r2, [pc, #220]	; (801c64c <HAL_FLASHEx_Erase+0x130>)
 801c56e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801c572:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 801c574:	4b34      	ldr	r3, [pc, #208]	; (801c648 <HAL_FLASHEx_Erase+0x12c>)
 801c576:	2203      	movs	r2, #3
 801c578:	771a      	strb	r2, [r3, #28]
 801c57a:	e016      	b.n	801c5aa <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 801c57c:	4b32      	ldr	r3, [pc, #200]	; (801c648 <HAL_FLASHEx_Erase+0x12c>)
 801c57e:	2201      	movs	r2, #1
 801c580:	771a      	strb	r2, [r3, #28]
 801c582:	e012      	b.n	801c5aa <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801c584:	4b31      	ldr	r3, [pc, #196]	; (801c64c <HAL_FLASHEx_Erase+0x130>)
 801c586:	681b      	ldr	r3, [r3, #0]
 801c588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	d009      	beq.n	801c5a4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801c590:	4b2e      	ldr	r3, [pc, #184]	; (801c64c <HAL_FLASHEx_Erase+0x130>)
 801c592:	681b      	ldr	r3, [r3, #0]
 801c594:	4a2d      	ldr	r2, [pc, #180]	; (801c64c <HAL_FLASHEx_Erase+0x130>)
 801c596:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801c59a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801c59c:	4b2a      	ldr	r3, [pc, #168]	; (801c648 <HAL_FLASHEx_Erase+0x12c>)
 801c59e:	2202      	movs	r2, #2
 801c5a0:	771a      	strb	r2, [r3, #28]
 801c5a2:	e002      	b.n	801c5aa <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801c5a4:	4b28      	ldr	r3, [pc, #160]	; (801c648 <HAL_FLASHEx_Erase+0x12c>)
 801c5a6:	2200      	movs	r2, #0
 801c5a8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801c5aa:	687b      	ldr	r3, [r7, #4]
 801c5ac:	681b      	ldr	r3, [r3, #0]
 801c5ae:	2b01      	cmp	r3, #1
 801c5b0:	d111      	bne.n	801c5d6 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	685b      	ldr	r3, [r3, #4]
 801c5b6:	4618      	mov	r0, r3
 801c5b8:	f000 f84a 	bl	801c650 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801c5bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801c5c0:	f7ff fefc 	bl	801c3bc <FLASH_WaitForLastOperation>
 801c5c4:	4603      	mov	r3, r0
 801c5c6:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 801c5c8:	4b20      	ldr	r3, [pc, #128]	; (801c64c <HAL_FLASHEx_Erase+0x130>)
 801c5ca:	695b      	ldr	r3, [r3, #20]
 801c5cc:	4a1f      	ldr	r2, [pc, #124]	; (801c64c <HAL_FLASHEx_Erase+0x130>)
 801c5ce:	f023 0304 	bic.w	r3, r3, #4
 801c5d2:	6153      	str	r3, [r2, #20]
 801c5d4:	e02d      	b.n	801c632 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801c5d6:	683b      	ldr	r3, [r7, #0]
 801c5d8:	f04f 32ff 	mov.w	r2, #4294967295
 801c5dc:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801c5de:	687b      	ldr	r3, [r7, #4]
 801c5e0:	689b      	ldr	r3, [r3, #8]
 801c5e2:	60bb      	str	r3, [r7, #8]
 801c5e4:	e01d      	b.n	801c622 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 801c5e6:	687b      	ldr	r3, [r7, #4]
 801c5e8:	685b      	ldr	r3, [r3, #4]
 801c5ea:	4619      	mov	r1, r3
 801c5ec:	68b8      	ldr	r0, [r7, #8]
 801c5ee:	f000 f84d 	bl	801c68c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801c5f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801c5f6:	f7ff fee1 	bl	801c3bc <FLASH_WaitForLastOperation>
 801c5fa:	4603      	mov	r3, r0
 801c5fc:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 801c5fe:	4b13      	ldr	r3, [pc, #76]	; (801c64c <HAL_FLASHEx_Erase+0x130>)
 801c600:	695b      	ldr	r3, [r3, #20]
 801c602:	4a12      	ldr	r2, [pc, #72]	; (801c64c <HAL_FLASHEx_Erase+0x130>)
 801c604:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801c608:	f023 0302 	bic.w	r3, r3, #2
 801c60c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 801c60e:	7bfb      	ldrb	r3, [r7, #15]
 801c610:	2b00      	cmp	r3, #0
 801c612:	d003      	beq.n	801c61c <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 801c614:	683b      	ldr	r3, [r7, #0]
 801c616:	68ba      	ldr	r2, [r7, #8]
 801c618:	601a      	str	r2, [r3, #0]
          break;
 801c61a:	e00a      	b.n	801c632 <HAL_FLASHEx_Erase+0x116>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801c61c:	68bb      	ldr	r3, [r7, #8]
 801c61e:	3301      	adds	r3, #1
 801c620:	60bb      	str	r3, [r7, #8]
 801c622:	687b      	ldr	r3, [r7, #4]
 801c624:	689a      	ldr	r2, [r3, #8]
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	68db      	ldr	r3, [r3, #12]
 801c62a:	4413      	add	r3, r2
 801c62c:	68ba      	ldr	r2, [r7, #8]
 801c62e:	429a      	cmp	r2, r3
 801c630:	d3d9      	bcc.n	801c5e6 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801c632:	f000 f84f 	bl	801c6d4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801c636:	4b04      	ldr	r3, [pc, #16]	; (801c648 <HAL_FLASHEx_Erase+0x12c>)
 801c638:	2200      	movs	r2, #0
 801c63a:	701a      	strb	r2, [r3, #0]

  return status;
 801c63c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c63e:	4618      	mov	r0, r3
 801c640:	3710      	adds	r7, #16
 801c642:	46bd      	mov	sp, r7
 801c644:	bd80      	pop	{r7, pc}
 801c646:	bf00      	nop
 801c648:	2000000c 	.word	0x2000000c
 801c64c:	40022000 	.word	0x40022000

0801c650 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 801c650:	b480      	push	{r7}
 801c652:	b083      	sub	sp, #12
 801c654:	af00      	add	r7, sp, #0
 801c656:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	f003 0301 	and.w	r3, r3, #1
 801c65e:	2b00      	cmp	r3, #0
 801c660:	d005      	beq.n	801c66e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 801c662:	4b09      	ldr	r3, [pc, #36]	; (801c688 <FLASH_MassErase+0x38>)
 801c664:	695b      	ldr	r3, [r3, #20]
 801c666:	4a08      	ldr	r2, [pc, #32]	; (801c688 <FLASH_MassErase+0x38>)
 801c668:	f043 0304 	orr.w	r3, r3, #4
 801c66c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801c66e:	4b06      	ldr	r3, [pc, #24]	; (801c688 <FLASH_MassErase+0x38>)
 801c670:	695b      	ldr	r3, [r3, #20]
 801c672:	4a05      	ldr	r2, [pc, #20]	; (801c688 <FLASH_MassErase+0x38>)
 801c674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c678:	6153      	str	r3, [r2, #20]
}
 801c67a:	bf00      	nop
 801c67c:	370c      	adds	r7, #12
 801c67e:	46bd      	mov	sp, r7
 801c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c684:	4770      	bx	lr
 801c686:	bf00      	nop
 801c688:	40022000 	.word	0x40022000

0801c68c <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 801c68c:	b480      	push	{r7}
 801c68e:	b083      	sub	sp, #12
 801c690:	af00      	add	r7, sp, #0
 801c692:	6078      	str	r0, [r7, #4]
 801c694:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 801c696:	4b0e      	ldr	r3, [pc, #56]	; (801c6d0 <FLASH_PageErase+0x44>)
 801c698:	695b      	ldr	r3, [r3, #20]
 801c69a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801c69e:	687b      	ldr	r3, [r7, #4]
 801c6a0:	00db      	lsls	r3, r3, #3
 801c6a2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801c6a6:	490a      	ldr	r1, [pc, #40]	; (801c6d0 <FLASH_PageErase+0x44>)
 801c6a8:	4313      	orrs	r3, r2
 801c6aa:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 801c6ac:	4b08      	ldr	r3, [pc, #32]	; (801c6d0 <FLASH_PageErase+0x44>)
 801c6ae:	695b      	ldr	r3, [r3, #20]
 801c6b0:	4a07      	ldr	r2, [pc, #28]	; (801c6d0 <FLASH_PageErase+0x44>)
 801c6b2:	f043 0302 	orr.w	r3, r3, #2
 801c6b6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801c6b8:	4b05      	ldr	r3, [pc, #20]	; (801c6d0 <FLASH_PageErase+0x44>)
 801c6ba:	695b      	ldr	r3, [r3, #20]
 801c6bc:	4a04      	ldr	r2, [pc, #16]	; (801c6d0 <FLASH_PageErase+0x44>)
 801c6be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c6c2:	6153      	str	r3, [r2, #20]
}
 801c6c4:	bf00      	nop
 801c6c6:	370c      	adds	r7, #12
 801c6c8:	46bd      	mov	sp, r7
 801c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6ce:	4770      	bx	lr
 801c6d0:	40022000 	.word	0x40022000

0801c6d4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801c6d4:	b480      	push	{r7}
 801c6d6:	b083      	sub	sp, #12
 801c6d8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 801c6da:	4b21      	ldr	r3, [pc, #132]	; (801c760 <FLASH_FlushCaches+0x8c>)
 801c6dc:	7f1b      	ldrb	r3, [r3, #28]
 801c6de:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 801c6e0:	79fb      	ldrb	r3, [r7, #7]
 801c6e2:	2b01      	cmp	r3, #1
 801c6e4:	d002      	beq.n	801c6ec <FLASH_FlushCaches+0x18>
 801c6e6:	79fb      	ldrb	r3, [r7, #7]
 801c6e8:	2b03      	cmp	r3, #3
 801c6ea:	d117      	bne.n	801c71c <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801c6ec:	4b1d      	ldr	r3, [pc, #116]	; (801c764 <FLASH_FlushCaches+0x90>)
 801c6ee:	681b      	ldr	r3, [r3, #0]
 801c6f0:	4a1c      	ldr	r2, [pc, #112]	; (801c764 <FLASH_FlushCaches+0x90>)
 801c6f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801c6f6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801c6f8:	4b1a      	ldr	r3, [pc, #104]	; (801c764 <FLASH_FlushCaches+0x90>)
 801c6fa:	681b      	ldr	r3, [r3, #0]
 801c6fc:	4a19      	ldr	r2, [pc, #100]	; (801c764 <FLASH_FlushCaches+0x90>)
 801c6fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801c702:	6013      	str	r3, [r2, #0]
 801c704:	4b17      	ldr	r3, [pc, #92]	; (801c764 <FLASH_FlushCaches+0x90>)
 801c706:	681b      	ldr	r3, [r3, #0]
 801c708:	4a16      	ldr	r2, [pc, #88]	; (801c764 <FLASH_FlushCaches+0x90>)
 801c70a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c70e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801c710:	4b14      	ldr	r3, [pc, #80]	; (801c764 <FLASH_FlushCaches+0x90>)
 801c712:	681b      	ldr	r3, [r3, #0]
 801c714:	4a13      	ldr	r2, [pc, #76]	; (801c764 <FLASH_FlushCaches+0x90>)
 801c716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801c71a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 801c71c:	79fb      	ldrb	r3, [r7, #7]
 801c71e:	2b02      	cmp	r3, #2
 801c720:	d002      	beq.n	801c728 <FLASH_FlushCaches+0x54>
 801c722:	79fb      	ldrb	r3, [r7, #7]
 801c724:	2b03      	cmp	r3, #3
 801c726:	d111      	bne.n	801c74c <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801c728:	4b0e      	ldr	r3, [pc, #56]	; (801c764 <FLASH_FlushCaches+0x90>)
 801c72a:	681b      	ldr	r3, [r3, #0]
 801c72c:	4a0d      	ldr	r2, [pc, #52]	; (801c764 <FLASH_FlushCaches+0x90>)
 801c72e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801c732:	6013      	str	r3, [r2, #0]
 801c734:	4b0b      	ldr	r3, [pc, #44]	; (801c764 <FLASH_FlushCaches+0x90>)
 801c736:	681b      	ldr	r3, [r3, #0]
 801c738:	4a0a      	ldr	r2, [pc, #40]	; (801c764 <FLASH_FlushCaches+0x90>)
 801c73a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c73e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801c740:	4b08      	ldr	r3, [pc, #32]	; (801c764 <FLASH_FlushCaches+0x90>)
 801c742:	681b      	ldr	r3, [r3, #0]
 801c744:	4a07      	ldr	r2, [pc, #28]	; (801c764 <FLASH_FlushCaches+0x90>)
 801c746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801c74a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801c74c:	4b04      	ldr	r3, [pc, #16]	; (801c760 <FLASH_FlushCaches+0x8c>)
 801c74e:	2200      	movs	r2, #0
 801c750:	771a      	strb	r2, [r3, #28]
}
 801c752:	bf00      	nop
 801c754:	370c      	adds	r7, #12
 801c756:	46bd      	mov	sp, r7
 801c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c75c:	4770      	bx	lr
 801c75e:	bf00      	nop
 801c760:	2000000c 	.word	0x2000000c
 801c764:	40022000 	.word	0x40022000

0801c768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801c768:	b480      	push	{r7}
 801c76a:	b087      	sub	sp, #28
 801c76c:	af00      	add	r7, sp, #0
 801c76e:	6078      	str	r0, [r7, #4]
 801c770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801c772:	2300      	movs	r3, #0
 801c774:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 801c776:	e15a      	b.n	801ca2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801c778:	683b      	ldr	r3, [r7, #0]
 801c77a:	681a      	ldr	r2, [r3, #0]
 801c77c:	2101      	movs	r1, #1
 801c77e:	697b      	ldr	r3, [r7, #20]
 801c780:	fa01 f303 	lsl.w	r3, r1, r3
 801c784:	4013      	ands	r3, r2
 801c786:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	f000 814c 	beq.w	801ca28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801c790:	683b      	ldr	r3, [r7, #0]
 801c792:	685b      	ldr	r3, [r3, #4]
 801c794:	f003 0303 	and.w	r3, r3, #3
 801c798:	2b01      	cmp	r3, #1
 801c79a:	d005      	beq.n	801c7a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801c79c:	683b      	ldr	r3, [r7, #0]
 801c79e:	685b      	ldr	r3, [r3, #4]
 801c7a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801c7a4:	2b02      	cmp	r3, #2
 801c7a6:	d130      	bne.n	801c80a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	689b      	ldr	r3, [r3, #8]
 801c7ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801c7ae:	697b      	ldr	r3, [r7, #20]
 801c7b0:	005b      	lsls	r3, r3, #1
 801c7b2:	2203      	movs	r2, #3
 801c7b4:	fa02 f303 	lsl.w	r3, r2, r3
 801c7b8:	43db      	mvns	r3, r3
 801c7ba:	693a      	ldr	r2, [r7, #16]
 801c7bc:	4013      	ands	r3, r2
 801c7be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801c7c0:	683b      	ldr	r3, [r7, #0]
 801c7c2:	68da      	ldr	r2, [r3, #12]
 801c7c4:	697b      	ldr	r3, [r7, #20]
 801c7c6:	005b      	lsls	r3, r3, #1
 801c7c8:	fa02 f303 	lsl.w	r3, r2, r3
 801c7cc:	693a      	ldr	r2, [r7, #16]
 801c7ce:	4313      	orrs	r3, r2
 801c7d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801c7d2:	687b      	ldr	r3, [r7, #4]
 801c7d4:	693a      	ldr	r2, [r7, #16]
 801c7d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801c7d8:	687b      	ldr	r3, [r7, #4]
 801c7da:	685b      	ldr	r3, [r3, #4]
 801c7dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801c7de:	2201      	movs	r2, #1
 801c7e0:	697b      	ldr	r3, [r7, #20]
 801c7e2:	fa02 f303 	lsl.w	r3, r2, r3
 801c7e6:	43db      	mvns	r3, r3
 801c7e8:	693a      	ldr	r2, [r7, #16]
 801c7ea:	4013      	ands	r3, r2
 801c7ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801c7ee:	683b      	ldr	r3, [r7, #0]
 801c7f0:	685b      	ldr	r3, [r3, #4]
 801c7f2:	091b      	lsrs	r3, r3, #4
 801c7f4:	f003 0201 	and.w	r2, r3, #1
 801c7f8:	697b      	ldr	r3, [r7, #20]
 801c7fa:	fa02 f303 	lsl.w	r3, r2, r3
 801c7fe:	693a      	ldr	r2, [r7, #16]
 801c800:	4313      	orrs	r3, r2
 801c802:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	693a      	ldr	r2, [r7, #16]
 801c808:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801c80a:	683b      	ldr	r3, [r7, #0]
 801c80c:	685b      	ldr	r3, [r3, #4]
 801c80e:	f003 0303 	and.w	r3, r3, #3
 801c812:	2b03      	cmp	r3, #3
 801c814:	d017      	beq.n	801c846 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	68db      	ldr	r3, [r3, #12]
 801c81a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801c81c:	697b      	ldr	r3, [r7, #20]
 801c81e:	005b      	lsls	r3, r3, #1
 801c820:	2203      	movs	r2, #3
 801c822:	fa02 f303 	lsl.w	r3, r2, r3
 801c826:	43db      	mvns	r3, r3
 801c828:	693a      	ldr	r2, [r7, #16]
 801c82a:	4013      	ands	r3, r2
 801c82c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801c82e:	683b      	ldr	r3, [r7, #0]
 801c830:	689a      	ldr	r2, [r3, #8]
 801c832:	697b      	ldr	r3, [r7, #20]
 801c834:	005b      	lsls	r3, r3, #1
 801c836:	fa02 f303 	lsl.w	r3, r2, r3
 801c83a:	693a      	ldr	r2, [r7, #16]
 801c83c:	4313      	orrs	r3, r2
 801c83e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801c840:	687b      	ldr	r3, [r7, #4]
 801c842:	693a      	ldr	r2, [r7, #16]
 801c844:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801c846:	683b      	ldr	r3, [r7, #0]
 801c848:	685b      	ldr	r3, [r3, #4]
 801c84a:	f003 0303 	and.w	r3, r3, #3
 801c84e:	2b02      	cmp	r3, #2
 801c850:	d123      	bne.n	801c89a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801c852:	697b      	ldr	r3, [r7, #20]
 801c854:	08da      	lsrs	r2, r3, #3
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	3208      	adds	r2, #8
 801c85a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c85e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801c860:	697b      	ldr	r3, [r7, #20]
 801c862:	f003 0307 	and.w	r3, r3, #7
 801c866:	009b      	lsls	r3, r3, #2
 801c868:	220f      	movs	r2, #15
 801c86a:	fa02 f303 	lsl.w	r3, r2, r3
 801c86e:	43db      	mvns	r3, r3
 801c870:	693a      	ldr	r2, [r7, #16]
 801c872:	4013      	ands	r3, r2
 801c874:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801c876:	683b      	ldr	r3, [r7, #0]
 801c878:	691a      	ldr	r2, [r3, #16]
 801c87a:	697b      	ldr	r3, [r7, #20]
 801c87c:	f003 0307 	and.w	r3, r3, #7
 801c880:	009b      	lsls	r3, r3, #2
 801c882:	fa02 f303 	lsl.w	r3, r2, r3
 801c886:	693a      	ldr	r2, [r7, #16]
 801c888:	4313      	orrs	r3, r2
 801c88a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801c88c:	697b      	ldr	r3, [r7, #20]
 801c88e:	08da      	lsrs	r2, r3, #3
 801c890:	687b      	ldr	r3, [r7, #4]
 801c892:	3208      	adds	r2, #8
 801c894:	6939      	ldr	r1, [r7, #16]
 801c896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801c89a:	687b      	ldr	r3, [r7, #4]
 801c89c:	681b      	ldr	r3, [r3, #0]
 801c89e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801c8a0:	697b      	ldr	r3, [r7, #20]
 801c8a2:	005b      	lsls	r3, r3, #1
 801c8a4:	2203      	movs	r2, #3
 801c8a6:	fa02 f303 	lsl.w	r3, r2, r3
 801c8aa:	43db      	mvns	r3, r3
 801c8ac:	693a      	ldr	r2, [r7, #16]
 801c8ae:	4013      	ands	r3, r2
 801c8b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801c8b2:	683b      	ldr	r3, [r7, #0]
 801c8b4:	685b      	ldr	r3, [r3, #4]
 801c8b6:	f003 0203 	and.w	r2, r3, #3
 801c8ba:	697b      	ldr	r3, [r7, #20]
 801c8bc:	005b      	lsls	r3, r3, #1
 801c8be:	fa02 f303 	lsl.w	r3, r2, r3
 801c8c2:	693a      	ldr	r2, [r7, #16]
 801c8c4:	4313      	orrs	r3, r2
 801c8c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	693a      	ldr	r2, [r7, #16]
 801c8cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801c8ce:	683b      	ldr	r3, [r7, #0]
 801c8d0:	685b      	ldr	r3, [r3, #4]
 801c8d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	f000 80a6 	beq.w	801ca28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c8dc:	4b5b      	ldr	r3, [pc, #364]	; (801ca4c <HAL_GPIO_Init+0x2e4>)
 801c8de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c8e0:	4a5a      	ldr	r2, [pc, #360]	; (801ca4c <HAL_GPIO_Init+0x2e4>)
 801c8e2:	f043 0301 	orr.w	r3, r3, #1
 801c8e6:	6613      	str	r3, [r2, #96]	; 0x60
 801c8e8:	4b58      	ldr	r3, [pc, #352]	; (801ca4c <HAL_GPIO_Init+0x2e4>)
 801c8ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c8ec:	f003 0301 	and.w	r3, r3, #1
 801c8f0:	60bb      	str	r3, [r7, #8]
 801c8f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 801c8f4:	4a56      	ldr	r2, [pc, #344]	; (801ca50 <HAL_GPIO_Init+0x2e8>)
 801c8f6:	697b      	ldr	r3, [r7, #20]
 801c8f8:	089b      	lsrs	r3, r3, #2
 801c8fa:	3302      	adds	r3, #2
 801c8fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c900:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801c902:	697b      	ldr	r3, [r7, #20]
 801c904:	f003 0303 	and.w	r3, r3, #3
 801c908:	009b      	lsls	r3, r3, #2
 801c90a:	220f      	movs	r2, #15
 801c90c:	fa02 f303 	lsl.w	r3, r2, r3
 801c910:	43db      	mvns	r3, r3
 801c912:	693a      	ldr	r2, [r7, #16]
 801c914:	4013      	ands	r3, r2
 801c916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801c91e:	d01f      	beq.n	801c960 <HAL_GPIO_Init+0x1f8>
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	4a4c      	ldr	r2, [pc, #304]	; (801ca54 <HAL_GPIO_Init+0x2ec>)
 801c924:	4293      	cmp	r3, r2
 801c926:	d019      	beq.n	801c95c <HAL_GPIO_Init+0x1f4>
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	4a4b      	ldr	r2, [pc, #300]	; (801ca58 <HAL_GPIO_Init+0x2f0>)
 801c92c:	4293      	cmp	r3, r2
 801c92e:	d013      	beq.n	801c958 <HAL_GPIO_Init+0x1f0>
 801c930:	687b      	ldr	r3, [r7, #4]
 801c932:	4a4a      	ldr	r2, [pc, #296]	; (801ca5c <HAL_GPIO_Init+0x2f4>)
 801c934:	4293      	cmp	r3, r2
 801c936:	d00d      	beq.n	801c954 <HAL_GPIO_Init+0x1ec>
 801c938:	687b      	ldr	r3, [r7, #4]
 801c93a:	4a49      	ldr	r2, [pc, #292]	; (801ca60 <HAL_GPIO_Init+0x2f8>)
 801c93c:	4293      	cmp	r3, r2
 801c93e:	d007      	beq.n	801c950 <HAL_GPIO_Init+0x1e8>
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	4a48      	ldr	r2, [pc, #288]	; (801ca64 <HAL_GPIO_Init+0x2fc>)
 801c944:	4293      	cmp	r3, r2
 801c946:	d101      	bne.n	801c94c <HAL_GPIO_Init+0x1e4>
 801c948:	2305      	movs	r3, #5
 801c94a:	e00a      	b.n	801c962 <HAL_GPIO_Init+0x1fa>
 801c94c:	2306      	movs	r3, #6
 801c94e:	e008      	b.n	801c962 <HAL_GPIO_Init+0x1fa>
 801c950:	2304      	movs	r3, #4
 801c952:	e006      	b.n	801c962 <HAL_GPIO_Init+0x1fa>
 801c954:	2303      	movs	r3, #3
 801c956:	e004      	b.n	801c962 <HAL_GPIO_Init+0x1fa>
 801c958:	2302      	movs	r3, #2
 801c95a:	e002      	b.n	801c962 <HAL_GPIO_Init+0x1fa>
 801c95c:	2301      	movs	r3, #1
 801c95e:	e000      	b.n	801c962 <HAL_GPIO_Init+0x1fa>
 801c960:	2300      	movs	r3, #0
 801c962:	697a      	ldr	r2, [r7, #20]
 801c964:	f002 0203 	and.w	r2, r2, #3
 801c968:	0092      	lsls	r2, r2, #2
 801c96a:	4093      	lsls	r3, r2
 801c96c:	693a      	ldr	r2, [r7, #16]
 801c96e:	4313      	orrs	r3, r2
 801c970:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801c972:	4937      	ldr	r1, [pc, #220]	; (801ca50 <HAL_GPIO_Init+0x2e8>)
 801c974:	697b      	ldr	r3, [r7, #20]
 801c976:	089b      	lsrs	r3, r3, #2
 801c978:	3302      	adds	r3, #2
 801c97a:	693a      	ldr	r2, [r7, #16]
 801c97c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801c980:	4b39      	ldr	r3, [pc, #228]	; (801ca68 <HAL_GPIO_Init+0x300>)
 801c982:	689b      	ldr	r3, [r3, #8]
 801c984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c986:	68fb      	ldr	r3, [r7, #12]
 801c988:	43db      	mvns	r3, r3
 801c98a:	693a      	ldr	r2, [r7, #16]
 801c98c:	4013      	ands	r3, r2
 801c98e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801c990:	683b      	ldr	r3, [r7, #0]
 801c992:	685b      	ldr	r3, [r3, #4]
 801c994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801c998:	2b00      	cmp	r3, #0
 801c99a:	d003      	beq.n	801c9a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 801c99c:	693a      	ldr	r2, [r7, #16]
 801c99e:	68fb      	ldr	r3, [r7, #12]
 801c9a0:	4313      	orrs	r3, r2
 801c9a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801c9a4:	4a30      	ldr	r2, [pc, #192]	; (801ca68 <HAL_GPIO_Init+0x300>)
 801c9a6:	693b      	ldr	r3, [r7, #16]
 801c9a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801c9aa:	4b2f      	ldr	r3, [pc, #188]	; (801ca68 <HAL_GPIO_Init+0x300>)
 801c9ac:	68db      	ldr	r3, [r3, #12]
 801c9ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c9b0:	68fb      	ldr	r3, [r7, #12]
 801c9b2:	43db      	mvns	r3, r3
 801c9b4:	693a      	ldr	r2, [r7, #16]
 801c9b6:	4013      	ands	r3, r2
 801c9b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801c9ba:	683b      	ldr	r3, [r7, #0]
 801c9bc:	685b      	ldr	r3, [r3, #4]
 801c9be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801c9c2:	2b00      	cmp	r3, #0
 801c9c4:	d003      	beq.n	801c9ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 801c9c6:	693a      	ldr	r2, [r7, #16]
 801c9c8:	68fb      	ldr	r3, [r7, #12]
 801c9ca:	4313      	orrs	r3, r2
 801c9cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801c9ce:	4a26      	ldr	r2, [pc, #152]	; (801ca68 <HAL_GPIO_Init+0x300>)
 801c9d0:	693b      	ldr	r3, [r7, #16]
 801c9d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 801c9d4:	4b24      	ldr	r3, [pc, #144]	; (801ca68 <HAL_GPIO_Init+0x300>)
 801c9d6:	685b      	ldr	r3, [r3, #4]
 801c9d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c9da:	68fb      	ldr	r3, [r7, #12]
 801c9dc:	43db      	mvns	r3, r3
 801c9de:	693a      	ldr	r2, [r7, #16]
 801c9e0:	4013      	ands	r3, r2
 801c9e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801c9e4:	683b      	ldr	r3, [r7, #0]
 801c9e6:	685b      	ldr	r3, [r3, #4]
 801c9e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c9ec:	2b00      	cmp	r3, #0
 801c9ee:	d003      	beq.n	801c9f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 801c9f0:	693a      	ldr	r2, [r7, #16]
 801c9f2:	68fb      	ldr	r3, [r7, #12]
 801c9f4:	4313      	orrs	r3, r2
 801c9f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801c9f8:	4a1b      	ldr	r2, [pc, #108]	; (801ca68 <HAL_GPIO_Init+0x300>)
 801c9fa:	693b      	ldr	r3, [r7, #16]
 801c9fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801c9fe:	4b1a      	ldr	r3, [pc, #104]	; (801ca68 <HAL_GPIO_Init+0x300>)
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801ca04:	68fb      	ldr	r3, [r7, #12]
 801ca06:	43db      	mvns	r3, r3
 801ca08:	693a      	ldr	r2, [r7, #16]
 801ca0a:	4013      	ands	r3, r2
 801ca0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801ca0e:	683b      	ldr	r3, [r7, #0]
 801ca10:	685b      	ldr	r3, [r3, #4]
 801ca12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	d003      	beq.n	801ca22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 801ca1a:	693a      	ldr	r2, [r7, #16]
 801ca1c:	68fb      	ldr	r3, [r7, #12]
 801ca1e:	4313      	orrs	r3, r2
 801ca20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801ca22:	4a11      	ldr	r2, [pc, #68]	; (801ca68 <HAL_GPIO_Init+0x300>)
 801ca24:	693b      	ldr	r3, [r7, #16]
 801ca26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801ca28:	697b      	ldr	r3, [r7, #20]
 801ca2a:	3301      	adds	r3, #1
 801ca2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 801ca2e:	683b      	ldr	r3, [r7, #0]
 801ca30:	681a      	ldr	r2, [r3, #0]
 801ca32:	697b      	ldr	r3, [r7, #20]
 801ca34:	fa22 f303 	lsr.w	r3, r2, r3
 801ca38:	2b00      	cmp	r3, #0
 801ca3a:	f47f ae9d 	bne.w	801c778 <HAL_GPIO_Init+0x10>
  }
}
 801ca3e:	bf00      	nop
 801ca40:	bf00      	nop
 801ca42:	371c      	adds	r7, #28
 801ca44:	46bd      	mov	sp, r7
 801ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca4a:	4770      	bx	lr
 801ca4c:	40021000 	.word	0x40021000
 801ca50:	40010000 	.word	0x40010000
 801ca54:	48000400 	.word	0x48000400
 801ca58:	48000800 	.word	0x48000800
 801ca5c:	48000c00 	.word	0x48000c00
 801ca60:	48001000 	.word	0x48001000
 801ca64:	48001400 	.word	0x48001400
 801ca68:	40010400 	.word	0x40010400

0801ca6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801ca6c:	b480      	push	{r7}
 801ca6e:	b083      	sub	sp, #12
 801ca70:	af00      	add	r7, sp, #0
 801ca72:	6078      	str	r0, [r7, #4]
 801ca74:	460b      	mov	r3, r1
 801ca76:	807b      	strh	r3, [r7, #2]
 801ca78:	4613      	mov	r3, r2
 801ca7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801ca7c:	787b      	ldrb	r3, [r7, #1]
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	d003      	beq.n	801ca8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801ca82:	887a      	ldrh	r2, [r7, #2]
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801ca88:	e002      	b.n	801ca90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801ca8a:	887a      	ldrh	r2, [r7, #2]
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 801ca90:	bf00      	nop
 801ca92:	370c      	adds	r7, #12
 801ca94:	46bd      	mov	sp, r7
 801ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca9a:	4770      	bx	lr

0801ca9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801ca9c:	b480      	push	{r7}
 801ca9e:	b085      	sub	sp, #20
 801caa0:	af00      	add	r7, sp, #0
 801caa2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	d141      	bne.n	801cb2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801caaa:	4b4b      	ldr	r3, [pc, #300]	; (801cbd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801caac:	681b      	ldr	r3, [r3, #0]
 801caae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801cab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cab6:	d131      	bne.n	801cb1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801cab8:	4b47      	ldr	r3, [pc, #284]	; (801cbd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801caba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cabe:	4a46      	ldr	r2, [pc, #280]	; (801cbd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801cac4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801cac8:	4b43      	ldr	r3, [pc, #268]	; (801cbd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801caca:	681b      	ldr	r3, [r3, #0]
 801cacc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801cad0:	4a41      	ldr	r2, [pc, #260]	; (801cbd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801cad6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801cad8:	4b40      	ldr	r3, [pc, #256]	; (801cbdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 801cada:	681b      	ldr	r3, [r3, #0]
 801cadc:	2232      	movs	r2, #50	; 0x32
 801cade:	fb02 f303 	mul.w	r3, r2, r3
 801cae2:	4a3f      	ldr	r2, [pc, #252]	; (801cbe0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801cae4:	fba2 2303 	umull	r2, r3, r2, r3
 801cae8:	0c9b      	lsrs	r3, r3, #18
 801caea:	3301      	adds	r3, #1
 801caec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801caee:	e002      	b.n	801caf6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 801caf0:	68fb      	ldr	r3, [r7, #12]
 801caf2:	3b01      	subs	r3, #1
 801caf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801caf6:	4b38      	ldr	r3, [pc, #224]	; (801cbd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801caf8:	695b      	ldr	r3, [r3, #20]
 801cafa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cafe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cb02:	d102      	bne.n	801cb0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 801cb04:	68fb      	ldr	r3, [r7, #12]
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d1f2      	bne.n	801caf0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801cb0a:	4b33      	ldr	r3, [pc, #204]	; (801cbd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb0c:	695b      	ldr	r3, [r3, #20]
 801cb0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cb12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cb16:	d158      	bne.n	801cbca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801cb18:	2303      	movs	r3, #3
 801cb1a:	e057      	b.n	801cbcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801cb1c:	4b2e      	ldr	r3, [pc, #184]	; (801cbd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cb22:	4a2d      	ldr	r2, [pc, #180]	; (801cbd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801cb28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801cb2c:	e04d      	b.n	801cbca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cb34:	d141      	bne.n	801cbba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801cb36:	4b28      	ldr	r3, [pc, #160]	; (801cbd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb38:	681b      	ldr	r3, [r3, #0]
 801cb3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801cb3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cb42:	d131      	bne.n	801cba8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801cb44:	4b24      	ldr	r3, [pc, #144]	; (801cbd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cb4a:	4a23      	ldr	r2, [pc, #140]	; (801cbd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801cb50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801cb54:	4b20      	ldr	r3, [pc, #128]	; (801cbd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb56:	681b      	ldr	r3, [r3, #0]
 801cb58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801cb5c:	4a1e      	ldr	r2, [pc, #120]	; (801cbd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801cb62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801cb64:	4b1d      	ldr	r3, [pc, #116]	; (801cbdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 801cb66:	681b      	ldr	r3, [r3, #0]
 801cb68:	2232      	movs	r2, #50	; 0x32
 801cb6a:	fb02 f303 	mul.w	r3, r2, r3
 801cb6e:	4a1c      	ldr	r2, [pc, #112]	; (801cbe0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801cb70:	fba2 2303 	umull	r2, r3, r2, r3
 801cb74:	0c9b      	lsrs	r3, r3, #18
 801cb76:	3301      	adds	r3, #1
 801cb78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801cb7a:	e002      	b.n	801cb82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 801cb7c:	68fb      	ldr	r3, [r7, #12]
 801cb7e:	3b01      	subs	r3, #1
 801cb80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801cb82:	4b15      	ldr	r3, [pc, #84]	; (801cbd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb84:	695b      	ldr	r3, [r3, #20]
 801cb86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cb8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cb8e:	d102      	bne.n	801cb96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 801cb90:	68fb      	ldr	r3, [r7, #12]
 801cb92:	2b00      	cmp	r3, #0
 801cb94:	d1f2      	bne.n	801cb7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801cb96:	4b10      	ldr	r3, [pc, #64]	; (801cbd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb98:	695b      	ldr	r3, [r3, #20]
 801cb9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cb9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cba2:	d112      	bne.n	801cbca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801cba4:	2303      	movs	r3, #3
 801cba6:	e011      	b.n	801cbcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801cba8:	4b0b      	ldr	r3, [pc, #44]	; (801cbd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cbaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cbae:	4a0a      	ldr	r2, [pc, #40]	; (801cbd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cbb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801cbb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801cbb8:	e007      	b.n	801cbca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801cbba:	4b07      	ldr	r3, [pc, #28]	; (801cbd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cbbc:	681b      	ldr	r3, [r3, #0]
 801cbbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801cbc2:	4a05      	ldr	r2, [pc, #20]	; (801cbd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cbc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801cbc8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 801cbca:	2300      	movs	r3, #0
}
 801cbcc:	4618      	mov	r0, r3
 801cbce:	3714      	adds	r7, #20
 801cbd0:	46bd      	mov	sp, r7
 801cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbd6:	4770      	bx	lr
 801cbd8:	40007000 	.word	0x40007000
 801cbdc:	20000000 	.word	0x20000000
 801cbe0:	431bde83 	.word	0x431bde83

0801cbe4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 801cbe4:	b480      	push	{r7}
 801cbe6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 801cbe8:	4b05      	ldr	r3, [pc, #20]	; (801cc00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801cbea:	689b      	ldr	r3, [r3, #8]
 801cbec:	4a04      	ldr	r2, [pc, #16]	; (801cc00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801cbee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801cbf2:	6093      	str	r3, [r2, #8]
}
 801cbf4:	bf00      	nop
 801cbf6:	46bd      	mov	sp, r7
 801cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbfc:	4770      	bx	lr
 801cbfe:	bf00      	nop
 801cc00:	40007000 	.word	0x40007000

0801cc04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801cc04:	b580      	push	{r7, lr}
 801cc06:	b088      	sub	sp, #32
 801cc08:	af00      	add	r7, sp, #0
 801cc0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	2b00      	cmp	r3, #0
 801cc10:	d101      	bne.n	801cc16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801cc12:	2301      	movs	r3, #1
 801cc14:	e306      	b.n	801d224 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	681b      	ldr	r3, [r3, #0]
 801cc1a:	f003 0301 	and.w	r3, r3, #1
 801cc1e:	2b00      	cmp	r3, #0
 801cc20:	d075      	beq.n	801cd0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801cc22:	4b97      	ldr	r3, [pc, #604]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cc24:	689b      	ldr	r3, [r3, #8]
 801cc26:	f003 030c 	and.w	r3, r3, #12
 801cc2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801cc2c:	4b94      	ldr	r3, [pc, #592]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cc2e:	68db      	ldr	r3, [r3, #12]
 801cc30:	f003 0303 	and.w	r3, r3, #3
 801cc34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 801cc36:	69bb      	ldr	r3, [r7, #24]
 801cc38:	2b0c      	cmp	r3, #12
 801cc3a:	d102      	bne.n	801cc42 <HAL_RCC_OscConfig+0x3e>
 801cc3c:	697b      	ldr	r3, [r7, #20]
 801cc3e:	2b03      	cmp	r3, #3
 801cc40:	d002      	beq.n	801cc48 <HAL_RCC_OscConfig+0x44>
 801cc42:	69bb      	ldr	r3, [r7, #24]
 801cc44:	2b08      	cmp	r3, #8
 801cc46:	d10b      	bne.n	801cc60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801cc48:	4b8d      	ldr	r3, [pc, #564]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cc4a:	681b      	ldr	r3, [r3, #0]
 801cc4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801cc50:	2b00      	cmp	r3, #0
 801cc52:	d05b      	beq.n	801cd0c <HAL_RCC_OscConfig+0x108>
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	685b      	ldr	r3, [r3, #4]
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	d157      	bne.n	801cd0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801cc5c:	2301      	movs	r3, #1
 801cc5e:	e2e1      	b.n	801d224 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801cc60:	687b      	ldr	r3, [r7, #4]
 801cc62:	685b      	ldr	r3, [r3, #4]
 801cc64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cc68:	d106      	bne.n	801cc78 <HAL_RCC_OscConfig+0x74>
 801cc6a:	4b85      	ldr	r3, [pc, #532]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cc6c:	681b      	ldr	r3, [r3, #0]
 801cc6e:	4a84      	ldr	r2, [pc, #528]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cc70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cc74:	6013      	str	r3, [r2, #0]
 801cc76:	e01d      	b.n	801ccb4 <HAL_RCC_OscConfig+0xb0>
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	685b      	ldr	r3, [r3, #4]
 801cc7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801cc80:	d10c      	bne.n	801cc9c <HAL_RCC_OscConfig+0x98>
 801cc82:	4b7f      	ldr	r3, [pc, #508]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cc84:	681b      	ldr	r3, [r3, #0]
 801cc86:	4a7e      	ldr	r2, [pc, #504]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cc88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801cc8c:	6013      	str	r3, [r2, #0]
 801cc8e:	4b7c      	ldr	r3, [pc, #496]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cc90:	681b      	ldr	r3, [r3, #0]
 801cc92:	4a7b      	ldr	r2, [pc, #492]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cc94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cc98:	6013      	str	r3, [r2, #0]
 801cc9a:	e00b      	b.n	801ccb4 <HAL_RCC_OscConfig+0xb0>
 801cc9c:	4b78      	ldr	r3, [pc, #480]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cc9e:	681b      	ldr	r3, [r3, #0]
 801cca0:	4a77      	ldr	r2, [pc, #476]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801cca6:	6013      	str	r3, [r2, #0]
 801cca8:	4b75      	ldr	r3, [pc, #468]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801ccaa:	681b      	ldr	r3, [r3, #0]
 801ccac:	4a74      	ldr	r2, [pc, #464]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801ccae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801ccb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	685b      	ldr	r3, [r3, #4]
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d013      	beq.n	801cce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ccbc:	f7fc fd0e 	bl	80196dc <HAL_GetTick>
 801ccc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801ccc2:	e008      	b.n	801ccd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801ccc4:	f7fc fd0a 	bl	80196dc <HAL_GetTick>
 801ccc8:	4602      	mov	r2, r0
 801ccca:	693b      	ldr	r3, [r7, #16]
 801cccc:	1ad3      	subs	r3, r2, r3
 801ccce:	2b64      	cmp	r3, #100	; 0x64
 801ccd0:	d901      	bls.n	801ccd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801ccd2:	2303      	movs	r3, #3
 801ccd4:	e2a6      	b.n	801d224 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801ccd6:	4b6a      	ldr	r3, [pc, #424]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801ccd8:	681b      	ldr	r3, [r3, #0]
 801ccda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ccde:	2b00      	cmp	r3, #0
 801cce0:	d0f0      	beq.n	801ccc4 <HAL_RCC_OscConfig+0xc0>
 801cce2:	e014      	b.n	801cd0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cce4:	f7fc fcfa 	bl	80196dc <HAL_GetTick>
 801cce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801ccea:	e008      	b.n	801ccfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801ccec:	f7fc fcf6 	bl	80196dc <HAL_GetTick>
 801ccf0:	4602      	mov	r2, r0
 801ccf2:	693b      	ldr	r3, [r7, #16]
 801ccf4:	1ad3      	subs	r3, r2, r3
 801ccf6:	2b64      	cmp	r3, #100	; 0x64
 801ccf8:	d901      	bls.n	801ccfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801ccfa:	2303      	movs	r3, #3
 801ccfc:	e292      	b.n	801d224 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801ccfe:	4b60      	ldr	r3, [pc, #384]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cd00:	681b      	ldr	r3, [r3, #0]
 801cd02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801cd06:	2b00      	cmp	r3, #0
 801cd08:	d1f0      	bne.n	801ccec <HAL_RCC_OscConfig+0xe8>
 801cd0a:	e000      	b.n	801cd0e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801cd0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	681b      	ldr	r3, [r3, #0]
 801cd12:	f003 0302 	and.w	r3, r3, #2
 801cd16:	2b00      	cmp	r3, #0
 801cd18:	d075      	beq.n	801ce06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801cd1a:	4b59      	ldr	r3, [pc, #356]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cd1c:	689b      	ldr	r3, [r3, #8]
 801cd1e:	f003 030c 	and.w	r3, r3, #12
 801cd22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801cd24:	4b56      	ldr	r3, [pc, #344]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cd26:	68db      	ldr	r3, [r3, #12]
 801cd28:	f003 0303 	and.w	r3, r3, #3
 801cd2c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 801cd2e:	69bb      	ldr	r3, [r7, #24]
 801cd30:	2b0c      	cmp	r3, #12
 801cd32:	d102      	bne.n	801cd3a <HAL_RCC_OscConfig+0x136>
 801cd34:	697b      	ldr	r3, [r7, #20]
 801cd36:	2b02      	cmp	r3, #2
 801cd38:	d002      	beq.n	801cd40 <HAL_RCC_OscConfig+0x13c>
 801cd3a:	69bb      	ldr	r3, [r7, #24]
 801cd3c:	2b04      	cmp	r3, #4
 801cd3e:	d11f      	bne.n	801cd80 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801cd40:	4b4f      	ldr	r3, [pc, #316]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cd42:	681b      	ldr	r3, [r3, #0]
 801cd44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d005      	beq.n	801cd58 <HAL_RCC_OscConfig+0x154>
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	68db      	ldr	r3, [r3, #12]
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	d101      	bne.n	801cd58 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 801cd54:	2301      	movs	r3, #1
 801cd56:	e265      	b.n	801d224 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801cd58:	4b49      	ldr	r3, [pc, #292]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cd5a:	685b      	ldr	r3, [r3, #4]
 801cd5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	691b      	ldr	r3, [r3, #16]
 801cd64:	061b      	lsls	r3, r3, #24
 801cd66:	4946      	ldr	r1, [pc, #280]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cd68:	4313      	orrs	r3, r2
 801cd6a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801cd6c:	4b45      	ldr	r3, [pc, #276]	; (801ce84 <HAL_RCC_OscConfig+0x280>)
 801cd6e:	681b      	ldr	r3, [r3, #0]
 801cd70:	4618      	mov	r0, r3
 801cd72:	f7fc fc67 	bl	8019644 <HAL_InitTick>
 801cd76:	4603      	mov	r3, r0
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	d043      	beq.n	801ce04 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 801cd7c:	2301      	movs	r3, #1
 801cd7e:	e251      	b.n	801d224 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	68db      	ldr	r3, [r3, #12]
 801cd84:	2b00      	cmp	r3, #0
 801cd86:	d023      	beq.n	801cdd0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801cd88:	4b3d      	ldr	r3, [pc, #244]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cd8a:	681b      	ldr	r3, [r3, #0]
 801cd8c:	4a3c      	ldr	r2, [pc, #240]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cd8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801cd92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cd94:	f7fc fca2 	bl	80196dc <HAL_GetTick>
 801cd98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801cd9a:	e008      	b.n	801cdae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801cd9c:	f7fc fc9e 	bl	80196dc <HAL_GetTick>
 801cda0:	4602      	mov	r2, r0
 801cda2:	693b      	ldr	r3, [r7, #16]
 801cda4:	1ad3      	subs	r3, r2, r3
 801cda6:	2b02      	cmp	r3, #2
 801cda8:	d901      	bls.n	801cdae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801cdaa:	2303      	movs	r3, #3
 801cdac:	e23a      	b.n	801d224 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801cdae:	4b34      	ldr	r3, [pc, #208]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cdb0:	681b      	ldr	r3, [r3, #0]
 801cdb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	d0f0      	beq.n	801cd9c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801cdba:	4b31      	ldr	r3, [pc, #196]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cdbc:	685b      	ldr	r3, [r3, #4]
 801cdbe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	691b      	ldr	r3, [r3, #16]
 801cdc6:	061b      	lsls	r3, r3, #24
 801cdc8:	492d      	ldr	r1, [pc, #180]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cdca:	4313      	orrs	r3, r2
 801cdcc:	604b      	str	r3, [r1, #4]
 801cdce:	e01a      	b.n	801ce06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801cdd0:	4b2b      	ldr	r3, [pc, #172]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cdd2:	681b      	ldr	r3, [r3, #0]
 801cdd4:	4a2a      	ldr	r2, [pc, #168]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cdd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801cdda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cddc:	f7fc fc7e 	bl	80196dc <HAL_GetTick>
 801cde0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801cde2:	e008      	b.n	801cdf6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801cde4:	f7fc fc7a 	bl	80196dc <HAL_GetTick>
 801cde8:	4602      	mov	r2, r0
 801cdea:	693b      	ldr	r3, [r7, #16]
 801cdec:	1ad3      	subs	r3, r2, r3
 801cdee:	2b02      	cmp	r3, #2
 801cdf0:	d901      	bls.n	801cdf6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 801cdf2:	2303      	movs	r3, #3
 801cdf4:	e216      	b.n	801d224 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801cdf6:	4b22      	ldr	r3, [pc, #136]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801cdf8:	681b      	ldr	r3, [r3, #0]
 801cdfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d1f0      	bne.n	801cde4 <HAL_RCC_OscConfig+0x1e0>
 801ce02:	e000      	b.n	801ce06 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801ce04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801ce06:	687b      	ldr	r3, [r7, #4]
 801ce08:	681b      	ldr	r3, [r3, #0]
 801ce0a:	f003 0308 	and.w	r3, r3, #8
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	d041      	beq.n	801ce96 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801ce12:	687b      	ldr	r3, [r7, #4]
 801ce14:	695b      	ldr	r3, [r3, #20]
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	d01c      	beq.n	801ce54 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801ce1a:	4b19      	ldr	r3, [pc, #100]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801ce1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ce20:	4a17      	ldr	r2, [pc, #92]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801ce22:	f043 0301 	orr.w	r3, r3, #1
 801ce26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ce2a:	f7fc fc57 	bl	80196dc <HAL_GetTick>
 801ce2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801ce30:	e008      	b.n	801ce44 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801ce32:	f7fc fc53 	bl	80196dc <HAL_GetTick>
 801ce36:	4602      	mov	r2, r0
 801ce38:	693b      	ldr	r3, [r7, #16]
 801ce3a:	1ad3      	subs	r3, r2, r3
 801ce3c:	2b02      	cmp	r3, #2
 801ce3e:	d901      	bls.n	801ce44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801ce40:	2303      	movs	r3, #3
 801ce42:	e1ef      	b.n	801d224 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801ce44:	4b0e      	ldr	r3, [pc, #56]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801ce46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ce4a:	f003 0302 	and.w	r3, r3, #2
 801ce4e:	2b00      	cmp	r3, #0
 801ce50:	d0ef      	beq.n	801ce32 <HAL_RCC_OscConfig+0x22e>
 801ce52:	e020      	b.n	801ce96 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801ce54:	4b0a      	ldr	r3, [pc, #40]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801ce56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ce5a:	4a09      	ldr	r2, [pc, #36]	; (801ce80 <HAL_RCC_OscConfig+0x27c>)
 801ce5c:	f023 0301 	bic.w	r3, r3, #1
 801ce60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ce64:	f7fc fc3a 	bl	80196dc <HAL_GetTick>
 801ce68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801ce6a:	e00d      	b.n	801ce88 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801ce6c:	f7fc fc36 	bl	80196dc <HAL_GetTick>
 801ce70:	4602      	mov	r2, r0
 801ce72:	693b      	ldr	r3, [r7, #16]
 801ce74:	1ad3      	subs	r3, r2, r3
 801ce76:	2b02      	cmp	r3, #2
 801ce78:	d906      	bls.n	801ce88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801ce7a:	2303      	movs	r3, #3
 801ce7c:	e1d2      	b.n	801d224 <HAL_RCC_OscConfig+0x620>
 801ce7e:	bf00      	nop
 801ce80:	40021000 	.word	0x40021000
 801ce84:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801ce88:	4b8c      	ldr	r3, [pc, #560]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801ce8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ce8e:	f003 0302 	and.w	r3, r3, #2
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	d1ea      	bne.n	801ce6c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	681b      	ldr	r3, [r3, #0]
 801ce9a:	f003 0304 	and.w	r3, r3, #4
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	f000 80a6 	beq.w	801cff0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 801cea4:	2300      	movs	r3, #0
 801cea6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801cea8:	4b84      	ldr	r3, [pc, #528]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801ceaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ceac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ceb0:	2b00      	cmp	r3, #0
 801ceb2:	d101      	bne.n	801ceb8 <HAL_RCC_OscConfig+0x2b4>
 801ceb4:	2301      	movs	r3, #1
 801ceb6:	e000      	b.n	801ceba <HAL_RCC_OscConfig+0x2b6>
 801ceb8:	2300      	movs	r3, #0
 801ceba:	2b00      	cmp	r3, #0
 801cebc:	d00d      	beq.n	801ceda <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801cebe:	4b7f      	ldr	r3, [pc, #508]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801cec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cec2:	4a7e      	ldr	r2, [pc, #504]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801cec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801cec8:	6593      	str	r3, [r2, #88]	; 0x58
 801ceca:	4b7c      	ldr	r3, [pc, #496]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801cecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ced2:	60fb      	str	r3, [r7, #12]
 801ced4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 801ced6:	2301      	movs	r3, #1
 801ced8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801ceda:	4b79      	ldr	r3, [pc, #484]	; (801d0c0 <HAL_RCC_OscConfig+0x4bc>)
 801cedc:	681b      	ldr	r3, [r3, #0]
 801cede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d118      	bne.n	801cf18 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801cee6:	4b76      	ldr	r3, [pc, #472]	; (801d0c0 <HAL_RCC_OscConfig+0x4bc>)
 801cee8:	681b      	ldr	r3, [r3, #0]
 801ceea:	4a75      	ldr	r2, [pc, #468]	; (801d0c0 <HAL_RCC_OscConfig+0x4bc>)
 801ceec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801cef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801cef2:	f7fc fbf3 	bl	80196dc <HAL_GetTick>
 801cef6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801cef8:	e008      	b.n	801cf0c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801cefa:	f7fc fbef 	bl	80196dc <HAL_GetTick>
 801cefe:	4602      	mov	r2, r0
 801cf00:	693b      	ldr	r3, [r7, #16]
 801cf02:	1ad3      	subs	r3, r2, r3
 801cf04:	2b02      	cmp	r3, #2
 801cf06:	d901      	bls.n	801cf0c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 801cf08:	2303      	movs	r3, #3
 801cf0a:	e18b      	b.n	801d224 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801cf0c:	4b6c      	ldr	r3, [pc, #432]	; (801d0c0 <HAL_RCC_OscConfig+0x4bc>)
 801cf0e:	681b      	ldr	r3, [r3, #0]
 801cf10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	d0f0      	beq.n	801cefa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	689b      	ldr	r3, [r3, #8]
 801cf1c:	2b01      	cmp	r3, #1
 801cf1e:	d108      	bne.n	801cf32 <HAL_RCC_OscConfig+0x32e>
 801cf20:	4b66      	ldr	r3, [pc, #408]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801cf22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cf26:	4a65      	ldr	r2, [pc, #404]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801cf28:	f043 0301 	orr.w	r3, r3, #1
 801cf2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801cf30:	e024      	b.n	801cf7c <HAL_RCC_OscConfig+0x378>
 801cf32:	687b      	ldr	r3, [r7, #4]
 801cf34:	689b      	ldr	r3, [r3, #8]
 801cf36:	2b05      	cmp	r3, #5
 801cf38:	d110      	bne.n	801cf5c <HAL_RCC_OscConfig+0x358>
 801cf3a:	4b60      	ldr	r3, [pc, #384]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801cf3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cf40:	4a5e      	ldr	r2, [pc, #376]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801cf42:	f043 0304 	orr.w	r3, r3, #4
 801cf46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801cf4a:	4b5c      	ldr	r3, [pc, #368]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801cf4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cf50:	4a5a      	ldr	r2, [pc, #360]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801cf52:	f043 0301 	orr.w	r3, r3, #1
 801cf56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801cf5a:	e00f      	b.n	801cf7c <HAL_RCC_OscConfig+0x378>
 801cf5c:	4b57      	ldr	r3, [pc, #348]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801cf5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cf62:	4a56      	ldr	r2, [pc, #344]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801cf64:	f023 0301 	bic.w	r3, r3, #1
 801cf68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801cf6c:	4b53      	ldr	r3, [pc, #332]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801cf6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cf72:	4a52      	ldr	r2, [pc, #328]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801cf74:	f023 0304 	bic.w	r3, r3, #4
 801cf78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801cf7c:	687b      	ldr	r3, [r7, #4]
 801cf7e:	689b      	ldr	r3, [r3, #8]
 801cf80:	2b00      	cmp	r3, #0
 801cf82:	d016      	beq.n	801cfb2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cf84:	f7fc fbaa 	bl	80196dc <HAL_GetTick>
 801cf88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801cf8a:	e00a      	b.n	801cfa2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cf8c:	f7fc fba6 	bl	80196dc <HAL_GetTick>
 801cf90:	4602      	mov	r2, r0
 801cf92:	693b      	ldr	r3, [r7, #16]
 801cf94:	1ad3      	subs	r3, r2, r3
 801cf96:	f241 3288 	movw	r2, #5000	; 0x1388
 801cf9a:	4293      	cmp	r3, r2
 801cf9c:	d901      	bls.n	801cfa2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 801cf9e:	2303      	movs	r3, #3
 801cfa0:	e140      	b.n	801d224 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801cfa2:	4b46      	ldr	r3, [pc, #280]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801cfa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cfa8:	f003 0302 	and.w	r3, r3, #2
 801cfac:	2b00      	cmp	r3, #0
 801cfae:	d0ed      	beq.n	801cf8c <HAL_RCC_OscConfig+0x388>
 801cfb0:	e015      	b.n	801cfde <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cfb2:	f7fc fb93 	bl	80196dc <HAL_GetTick>
 801cfb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801cfb8:	e00a      	b.n	801cfd0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cfba:	f7fc fb8f 	bl	80196dc <HAL_GetTick>
 801cfbe:	4602      	mov	r2, r0
 801cfc0:	693b      	ldr	r3, [r7, #16]
 801cfc2:	1ad3      	subs	r3, r2, r3
 801cfc4:	f241 3288 	movw	r2, #5000	; 0x1388
 801cfc8:	4293      	cmp	r3, r2
 801cfca:	d901      	bls.n	801cfd0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 801cfcc:	2303      	movs	r3, #3
 801cfce:	e129      	b.n	801d224 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801cfd0:	4b3a      	ldr	r3, [pc, #232]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801cfd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cfd6:	f003 0302 	and.w	r3, r3, #2
 801cfda:	2b00      	cmp	r3, #0
 801cfdc:	d1ed      	bne.n	801cfba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801cfde:	7ffb      	ldrb	r3, [r7, #31]
 801cfe0:	2b01      	cmp	r3, #1
 801cfe2:	d105      	bne.n	801cff0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801cfe4:	4b35      	ldr	r3, [pc, #212]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801cfe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cfe8:	4a34      	ldr	r2, [pc, #208]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801cfea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801cfee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801cff0:	687b      	ldr	r3, [r7, #4]
 801cff2:	681b      	ldr	r3, [r3, #0]
 801cff4:	f003 0320 	and.w	r3, r3, #32
 801cff8:	2b00      	cmp	r3, #0
 801cffa:	d03c      	beq.n	801d076 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801cffc:	687b      	ldr	r3, [r7, #4]
 801cffe:	699b      	ldr	r3, [r3, #24]
 801d000:	2b00      	cmp	r3, #0
 801d002:	d01c      	beq.n	801d03e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801d004:	4b2d      	ldr	r3, [pc, #180]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801d006:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801d00a:	4a2c      	ldr	r2, [pc, #176]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801d00c:	f043 0301 	orr.w	r3, r3, #1
 801d010:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d014:	f7fc fb62 	bl	80196dc <HAL_GetTick>
 801d018:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801d01a:	e008      	b.n	801d02e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801d01c:	f7fc fb5e 	bl	80196dc <HAL_GetTick>
 801d020:	4602      	mov	r2, r0
 801d022:	693b      	ldr	r3, [r7, #16]
 801d024:	1ad3      	subs	r3, r2, r3
 801d026:	2b02      	cmp	r3, #2
 801d028:	d901      	bls.n	801d02e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 801d02a:	2303      	movs	r3, #3
 801d02c:	e0fa      	b.n	801d224 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801d02e:	4b23      	ldr	r3, [pc, #140]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801d030:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801d034:	f003 0302 	and.w	r3, r3, #2
 801d038:	2b00      	cmp	r3, #0
 801d03a:	d0ef      	beq.n	801d01c <HAL_RCC_OscConfig+0x418>
 801d03c:	e01b      	b.n	801d076 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801d03e:	4b1f      	ldr	r3, [pc, #124]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801d040:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801d044:	4a1d      	ldr	r2, [pc, #116]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801d046:	f023 0301 	bic.w	r3, r3, #1
 801d04a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d04e:	f7fc fb45 	bl	80196dc <HAL_GetTick>
 801d052:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801d054:	e008      	b.n	801d068 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801d056:	f7fc fb41 	bl	80196dc <HAL_GetTick>
 801d05a:	4602      	mov	r2, r0
 801d05c:	693b      	ldr	r3, [r7, #16]
 801d05e:	1ad3      	subs	r3, r2, r3
 801d060:	2b02      	cmp	r3, #2
 801d062:	d901      	bls.n	801d068 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 801d064:	2303      	movs	r3, #3
 801d066:	e0dd      	b.n	801d224 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801d068:	4b14      	ldr	r3, [pc, #80]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801d06a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801d06e:	f003 0302 	and.w	r3, r3, #2
 801d072:	2b00      	cmp	r3, #0
 801d074:	d1ef      	bne.n	801d056 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801d076:	687b      	ldr	r3, [r7, #4]
 801d078:	69db      	ldr	r3, [r3, #28]
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	f000 80d1 	beq.w	801d222 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801d080:	4b0e      	ldr	r3, [pc, #56]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801d082:	689b      	ldr	r3, [r3, #8]
 801d084:	f003 030c 	and.w	r3, r3, #12
 801d088:	2b0c      	cmp	r3, #12
 801d08a:	f000 808b 	beq.w	801d1a4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	69db      	ldr	r3, [r3, #28]
 801d092:	2b02      	cmp	r3, #2
 801d094:	d15e      	bne.n	801d154 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d096:	4b09      	ldr	r3, [pc, #36]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801d098:	681b      	ldr	r3, [r3, #0]
 801d09a:	4a08      	ldr	r2, [pc, #32]	; (801d0bc <HAL_RCC_OscConfig+0x4b8>)
 801d09c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801d0a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d0a2:	f7fc fb1b 	bl	80196dc <HAL_GetTick>
 801d0a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801d0a8:	e00c      	b.n	801d0c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d0aa:	f7fc fb17 	bl	80196dc <HAL_GetTick>
 801d0ae:	4602      	mov	r2, r0
 801d0b0:	693b      	ldr	r3, [r7, #16]
 801d0b2:	1ad3      	subs	r3, r2, r3
 801d0b4:	2b02      	cmp	r3, #2
 801d0b6:	d905      	bls.n	801d0c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 801d0b8:	2303      	movs	r3, #3
 801d0ba:	e0b3      	b.n	801d224 <HAL_RCC_OscConfig+0x620>
 801d0bc:	40021000 	.word	0x40021000
 801d0c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801d0c4:	4b59      	ldr	r3, [pc, #356]	; (801d22c <HAL_RCC_OscConfig+0x628>)
 801d0c6:	681b      	ldr	r3, [r3, #0]
 801d0c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	d1ec      	bne.n	801d0aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801d0d0:	4b56      	ldr	r3, [pc, #344]	; (801d22c <HAL_RCC_OscConfig+0x628>)
 801d0d2:	68da      	ldr	r2, [r3, #12]
 801d0d4:	4b56      	ldr	r3, [pc, #344]	; (801d230 <HAL_RCC_OscConfig+0x62c>)
 801d0d6:	4013      	ands	r3, r2
 801d0d8:	687a      	ldr	r2, [r7, #4]
 801d0da:	6a11      	ldr	r1, [r2, #32]
 801d0dc:	687a      	ldr	r2, [r7, #4]
 801d0de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801d0e0:	3a01      	subs	r2, #1
 801d0e2:	0112      	lsls	r2, r2, #4
 801d0e4:	4311      	orrs	r1, r2
 801d0e6:	687a      	ldr	r2, [r7, #4]
 801d0e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801d0ea:	0212      	lsls	r2, r2, #8
 801d0ec:	4311      	orrs	r1, r2
 801d0ee:	687a      	ldr	r2, [r7, #4]
 801d0f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801d0f2:	0852      	lsrs	r2, r2, #1
 801d0f4:	3a01      	subs	r2, #1
 801d0f6:	0552      	lsls	r2, r2, #21
 801d0f8:	4311      	orrs	r1, r2
 801d0fa:	687a      	ldr	r2, [r7, #4]
 801d0fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801d0fe:	0852      	lsrs	r2, r2, #1
 801d100:	3a01      	subs	r2, #1
 801d102:	0652      	lsls	r2, r2, #25
 801d104:	4311      	orrs	r1, r2
 801d106:	687a      	ldr	r2, [r7, #4]
 801d108:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801d10a:	06d2      	lsls	r2, r2, #27
 801d10c:	430a      	orrs	r2, r1
 801d10e:	4947      	ldr	r1, [pc, #284]	; (801d22c <HAL_RCC_OscConfig+0x628>)
 801d110:	4313      	orrs	r3, r2
 801d112:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801d114:	4b45      	ldr	r3, [pc, #276]	; (801d22c <HAL_RCC_OscConfig+0x628>)
 801d116:	681b      	ldr	r3, [r3, #0]
 801d118:	4a44      	ldr	r2, [pc, #272]	; (801d22c <HAL_RCC_OscConfig+0x628>)
 801d11a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801d11e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801d120:	4b42      	ldr	r3, [pc, #264]	; (801d22c <HAL_RCC_OscConfig+0x628>)
 801d122:	68db      	ldr	r3, [r3, #12]
 801d124:	4a41      	ldr	r2, [pc, #260]	; (801d22c <HAL_RCC_OscConfig+0x628>)
 801d126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801d12a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d12c:	f7fc fad6 	bl	80196dc <HAL_GetTick>
 801d130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801d132:	e008      	b.n	801d146 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d134:	f7fc fad2 	bl	80196dc <HAL_GetTick>
 801d138:	4602      	mov	r2, r0
 801d13a:	693b      	ldr	r3, [r7, #16]
 801d13c:	1ad3      	subs	r3, r2, r3
 801d13e:	2b02      	cmp	r3, #2
 801d140:	d901      	bls.n	801d146 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 801d142:	2303      	movs	r3, #3
 801d144:	e06e      	b.n	801d224 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801d146:	4b39      	ldr	r3, [pc, #228]	; (801d22c <HAL_RCC_OscConfig+0x628>)
 801d148:	681b      	ldr	r3, [r3, #0]
 801d14a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d0f0      	beq.n	801d134 <HAL_RCC_OscConfig+0x530>
 801d152:	e066      	b.n	801d222 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d154:	4b35      	ldr	r3, [pc, #212]	; (801d22c <HAL_RCC_OscConfig+0x628>)
 801d156:	681b      	ldr	r3, [r3, #0]
 801d158:	4a34      	ldr	r2, [pc, #208]	; (801d22c <HAL_RCC_OscConfig+0x628>)
 801d15a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801d15e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 801d160:	4b32      	ldr	r3, [pc, #200]	; (801d22c <HAL_RCC_OscConfig+0x628>)
 801d162:	68db      	ldr	r3, [r3, #12]
 801d164:	4a31      	ldr	r2, [pc, #196]	; (801d22c <HAL_RCC_OscConfig+0x628>)
 801d166:	f023 0303 	bic.w	r3, r3, #3
 801d16a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 801d16c:	4b2f      	ldr	r3, [pc, #188]	; (801d22c <HAL_RCC_OscConfig+0x628>)
 801d16e:	68db      	ldr	r3, [r3, #12]
 801d170:	4a2e      	ldr	r2, [pc, #184]	; (801d22c <HAL_RCC_OscConfig+0x628>)
 801d172:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 801d176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d17a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d17c:	f7fc faae 	bl	80196dc <HAL_GetTick>
 801d180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801d182:	e008      	b.n	801d196 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d184:	f7fc faaa 	bl	80196dc <HAL_GetTick>
 801d188:	4602      	mov	r2, r0
 801d18a:	693b      	ldr	r3, [r7, #16]
 801d18c:	1ad3      	subs	r3, r2, r3
 801d18e:	2b02      	cmp	r3, #2
 801d190:	d901      	bls.n	801d196 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 801d192:	2303      	movs	r3, #3
 801d194:	e046      	b.n	801d224 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801d196:	4b25      	ldr	r3, [pc, #148]	; (801d22c <HAL_RCC_OscConfig+0x628>)
 801d198:	681b      	ldr	r3, [r3, #0]
 801d19a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	d1f0      	bne.n	801d184 <HAL_RCC_OscConfig+0x580>
 801d1a2:	e03e      	b.n	801d222 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	69db      	ldr	r3, [r3, #28]
 801d1a8:	2b01      	cmp	r3, #1
 801d1aa:	d101      	bne.n	801d1b0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 801d1ac:	2301      	movs	r3, #1
 801d1ae:	e039      	b.n	801d224 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 801d1b0:	4b1e      	ldr	r3, [pc, #120]	; (801d22c <HAL_RCC_OscConfig+0x628>)
 801d1b2:	68db      	ldr	r3, [r3, #12]
 801d1b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d1b6:	697b      	ldr	r3, [r7, #20]
 801d1b8:	f003 0203 	and.w	r2, r3, #3
 801d1bc:	687b      	ldr	r3, [r7, #4]
 801d1be:	6a1b      	ldr	r3, [r3, #32]
 801d1c0:	429a      	cmp	r2, r3
 801d1c2:	d12c      	bne.n	801d21e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801d1c4:	697b      	ldr	r3, [r7, #20]
 801d1c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801d1ca:	687b      	ldr	r3, [r7, #4]
 801d1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1ce:	3b01      	subs	r3, #1
 801d1d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d1d2:	429a      	cmp	r2, r3
 801d1d4:	d123      	bne.n	801d21e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801d1d6:	697b      	ldr	r3, [r7, #20]
 801d1d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d1e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801d1e2:	429a      	cmp	r2, r3
 801d1e4:	d11b      	bne.n	801d21e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801d1e6:	697b      	ldr	r3, [r7, #20]
 801d1e8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801d1ec:	687b      	ldr	r3, [r7, #4]
 801d1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d1f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801d1f2:	429a      	cmp	r2, r3
 801d1f4:	d113      	bne.n	801d21e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801d1f6:	697b      	ldr	r3, [r7, #20]
 801d1f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d200:	085b      	lsrs	r3, r3, #1
 801d202:	3b01      	subs	r3, #1
 801d204:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801d206:	429a      	cmp	r2, r3
 801d208:	d109      	bne.n	801d21e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801d20a:	697b      	ldr	r3, [r7, #20]
 801d20c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801d210:	687b      	ldr	r3, [r7, #4]
 801d212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d214:	085b      	lsrs	r3, r3, #1
 801d216:	3b01      	subs	r3, #1
 801d218:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801d21a:	429a      	cmp	r2, r3
 801d21c:	d001      	beq.n	801d222 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 801d21e:	2301      	movs	r3, #1
 801d220:	e000      	b.n	801d224 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 801d222:	2300      	movs	r3, #0
}
 801d224:	4618      	mov	r0, r3
 801d226:	3720      	adds	r7, #32
 801d228:	46bd      	mov	sp, r7
 801d22a:	bd80      	pop	{r7, pc}
 801d22c:	40021000 	.word	0x40021000
 801d230:	019f800c 	.word	0x019f800c

0801d234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801d234:	b580      	push	{r7, lr}
 801d236:	b086      	sub	sp, #24
 801d238:	af00      	add	r7, sp, #0
 801d23a:	6078      	str	r0, [r7, #4]
 801d23c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801d23e:	2300      	movs	r3, #0
 801d240:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	2b00      	cmp	r3, #0
 801d246:	d101      	bne.n	801d24c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801d248:	2301      	movs	r3, #1
 801d24a:	e11e      	b.n	801d48a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801d24c:	4b91      	ldr	r3, [pc, #580]	; (801d494 <HAL_RCC_ClockConfig+0x260>)
 801d24e:	681b      	ldr	r3, [r3, #0]
 801d250:	f003 030f 	and.w	r3, r3, #15
 801d254:	683a      	ldr	r2, [r7, #0]
 801d256:	429a      	cmp	r2, r3
 801d258:	d910      	bls.n	801d27c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d25a:	4b8e      	ldr	r3, [pc, #568]	; (801d494 <HAL_RCC_ClockConfig+0x260>)
 801d25c:	681b      	ldr	r3, [r3, #0]
 801d25e:	f023 020f 	bic.w	r2, r3, #15
 801d262:	498c      	ldr	r1, [pc, #560]	; (801d494 <HAL_RCC_ClockConfig+0x260>)
 801d264:	683b      	ldr	r3, [r7, #0]
 801d266:	4313      	orrs	r3, r2
 801d268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d26a:	4b8a      	ldr	r3, [pc, #552]	; (801d494 <HAL_RCC_ClockConfig+0x260>)
 801d26c:	681b      	ldr	r3, [r3, #0]
 801d26e:	f003 030f 	and.w	r3, r3, #15
 801d272:	683a      	ldr	r2, [r7, #0]
 801d274:	429a      	cmp	r2, r3
 801d276:	d001      	beq.n	801d27c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801d278:	2301      	movs	r3, #1
 801d27a:	e106      	b.n	801d48a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801d27c:	687b      	ldr	r3, [r7, #4]
 801d27e:	681b      	ldr	r3, [r3, #0]
 801d280:	f003 0301 	and.w	r3, r3, #1
 801d284:	2b00      	cmp	r3, #0
 801d286:	d073      	beq.n	801d370 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	685b      	ldr	r3, [r3, #4]
 801d28c:	2b03      	cmp	r3, #3
 801d28e:	d129      	bne.n	801d2e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801d290:	4b81      	ldr	r3, [pc, #516]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d298:	2b00      	cmp	r3, #0
 801d29a:	d101      	bne.n	801d2a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 801d29c:	2301      	movs	r3, #1
 801d29e:	e0f4      	b.n	801d48a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 801d2a0:	f000 f99c 	bl	801d5dc <RCC_GetSysClockFreqFromPLLSource>
 801d2a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 801d2a6:	693b      	ldr	r3, [r7, #16]
 801d2a8:	4a7c      	ldr	r2, [pc, #496]	; (801d49c <HAL_RCC_ClockConfig+0x268>)
 801d2aa:	4293      	cmp	r3, r2
 801d2ac:	d93f      	bls.n	801d32e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801d2ae:	4b7a      	ldr	r3, [pc, #488]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d2b0:	689b      	ldr	r3, [r3, #8]
 801d2b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	d009      	beq.n	801d2ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801d2ba:	687b      	ldr	r3, [r7, #4]
 801d2bc:	681b      	ldr	r3, [r3, #0]
 801d2be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801d2c2:	2b00      	cmp	r3, #0
 801d2c4:	d033      	beq.n	801d32e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 801d2c6:	687b      	ldr	r3, [r7, #4]
 801d2c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	d12f      	bne.n	801d32e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801d2ce:	4b72      	ldr	r3, [pc, #456]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d2d0:	689b      	ldr	r3, [r3, #8]
 801d2d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801d2d6:	4a70      	ldr	r2, [pc, #448]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d2d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d2dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801d2de:	2380      	movs	r3, #128	; 0x80
 801d2e0:	617b      	str	r3, [r7, #20]
 801d2e2:	e024      	b.n	801d32e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	685b      	ldr	r3, [r3, #4]
 801d2e8:	2b02      	cmp	r3, #2
 801d2ea:	d107      	bne.n	801d2fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801d2ec:	4b6a      	ldr	r3, [pc, #424]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d2ee:	681b      	ldr	r3, [r3, #0]
 801d2f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	d109      	bne.n	801d30c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801d2f8:	2301      	movs	r3, #1
 801d2fa:	e0c6      	b.n	801d48a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801d2fc:	4b66      	ldr	r3, [pc, #408]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d2fe:	681b      	ldr	r3, [r3, #0]
 801d300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d304:	2b00      	cmp	r3, #0
 801d306:	d101      	bne.n	801d30c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801d308:	2301      	movs	r3, #1
 801d30a:	e0be      	b.n	801d48a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 801d30c:	f000 f8ce 	bl	801d4ac <HAL_RCC_GetSysClockFreq>
 801d310:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 801d312:	693b      	ldr	r3, [r7, #16]
 801d314:	4a61      	ldr	r2, [pc, #388]	; (801d49c <HAL_RCC_ClockConfig+0x268>)
 801d316:	4293      	cmp	r3, r2
 801d318:	d909      	bls.n	801d32e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801d31a:	4b5f      	ldr	r3, [pc, #380]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d31c:	689b      	ldr	r3, [r3, #8]
 801d31e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801d322:	4a5d      	ldr	r2, [pc, #372]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d328:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 801d32a:	2380      	movs	r3, #128	; 0x80
 801d32c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801d32e:	4b5a      	ldr	r3, [pc, #360]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d330:	689b      	ldr	r3, [r3, #8]
 801d332:	f023 0203 	bic.w	r2, r3, #3
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	685b      	ldr	r3, [r3, #4]
 801d33a:	4957      	ldr	r1, [pc, #348]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d33c:	4313      	orrs	r3, r2
 801d33e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d340:	f7fc f9cc 	bl	80196dc <HAL_GetTick>
 801d344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d346:	e00a      	b.n	801d35e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801d348:	f7fc f9c8 	bl	80196dc <HAL_GetTick>
 801d34c:	4602      	mov	r2, r0
 801d34e:	68fb      	ldr	r3, [r7, #12]
 801d350:	1ad3      	subs	r3, r2, r3
 801d352:	f241 3288 	movw	r2, #5000	; 0x1388
 801d356:	4293      	cmp	r3, r2
 801d358:	d901      	bls.n	801d35e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 801d35a:	2303      	movs	r3, #3
 801d35c:	e095      	b.n	801d48a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d35e:	4b4e      	ldr	r3, [pc, #312]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d360:	689b      	ldr	r3, [r3, #8]
 801d362:	f003 020c 	and.w	r2, r3, #12
 801d366:	687b      	ldr	r3, [r7, #4]
 801d368:	685b      	ldr	r3, [r3, #4]
 801d36a:	009b      	lsls	r3, r3, #2
 801d36c:	429a      	cmp	r2, r3
 801d36e:	d1eb      	bne.n	801d348 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	681b      	ldr	r3, [r3, #0]
 801d374:	f003 0302 	and.w	r3, r3, #2
 801d378:	2b00      	cmp	r3, #0
 801d37a:	d023      	beq.n	801d3c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	681b      	ldr	r3, [r3, #0]
 801d380:	f003 0304 	and.w	r3, r3, #4
 801d384:	2b00      	cmp	r3, #0
 801d386:	d005      	beq.n	801d394 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801d388:	4b43      	ldr	r3, [pc, #268]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d38a:	689b      	ldr	r3, [r3, #8]
 801d38c:	4a42      	ldr	r2, [pc, #264]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d38e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801d392:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	f003 0308 	and.w	r3, r3, #8
 801d39c:	2b00      	cmp	r3, #0
 801d39e:	d007      	beq.n	801d3b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 801d3a0:	4b3d      	ldr	r3, [pc, #244]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d3a2:	689b      	ldr	r3, [r3, #8]
 801d3a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801d3a8:	4a3b      	ldr	r2, [pc, #236]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d3aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801d3ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d3b0:	4b39      	ldr	r3, [pc, #228]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d3b2:	689b      	ldr	r3, [r3, #8]
 801d3b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801d3b8:	687b      	ldr	r3, [r7, #4]
 801d3ba:	689b      	ldr	r3, [r3, #8]
 801d3bc:	4936      	ldr	r1, [pc, #216]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d3be:	4313      	orrs	r3, r2
 801d3c0:	608b      	str	r3, [r1, #8]
 801d3c2:	e008      	b.n	801d3d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 801d3c4:	697b      	ldr	r3, [r7, #20]
 801d3c6:	2b80      	cmp	r3, #128	; 0x80
 801d3c8:	d105      	bne.n	801d3d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801d3ca:	4b33      	ldr	r3, [pc, #204]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d3cc:	689b      	ldr	r3, [r3, #8]
 801d3ce:	4a32      	ldr	r2, [pc, #200]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d3d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801d3d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801d3d6:	4b2f      	ldr	r3, [pc, #188]	; (801d494 <HAL_RCC_ClockConfig+0x260>)
 801d3d8:	681b      	ldr	r3, [r3, #0]
 801d3da:	f003 030f 	and.w	r3, r3, #15
 801d3de:	683a      	ldr	r2, [r7, #0]
 801d3e0:	429a      	cmp	r2, r3
 801d3e2:	d21d      	bcs.n	801d420 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d3e4:	4b2b      	ldr	r3, [pc, #172]	; (801d494 <HAL_RCC_ClockConfig+0x260>)
 801d3e6:	681b      	ldr	r3, [r3, #0]
 801d3e8:	f023 020f 	bic.w	r2, r3, #15
 801d3ec:	4929      	ldr	r1, [pc, #164]	; (801d494 <HAL_RCC_ClockConfig+0x260>)
 801d3ee:	683b      	ldr	r3, [r7, #0]
 801d3f0:	4313      	orrs	r3, r2
 801d3f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801d3f4:	f7fc f972 	bl	80196dc <HAL_GetTick>
 801d3f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d3fa:	e00a      	b.n	801d412 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801d3fc:	f7fc f96e 	bl	80196dc <HAL_GetTick>
 801d400:	4602      	mov	r2, r0
 801d402:	68fb      	ldr	r3, [r7, #12]
 801d404:	1ad3      	subs	r3, r2, r3
 801d406:	f241 3288 	movw	r2, #5000	; 0x1388
 801d40a:	4293      	cmp	r3, r2
 801d40c:	d901      	bls.n	801d412 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 801d40e:	2303      	movs	r3, #3
 801d410:	e03b      	b.n	801d48a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d412:	4b20      	ldr	r3, [pc, #128]	; (801d494 <HAL_RCC_ClockConfig+0x260>)
 801d414:	681b      	ldr	r3, [r3, #0]
 801d416:	f003 030f 	and.w	r3, r3, #15
 801d41a:	683a      	ldr	r2, [r7, #0]
 801d41c:	429a      	cmp	r2, r3
 801d41e:	d1ed      	bne.n	801d3fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d420:	687b      	ldr	r3, [r7, #4]
 801d422:	681b      	ldr	r3, [r3, #0]
 801d424:	f003 0304 	and.w	r3, r3, #4
 801d428:	2b00      	cmp	r3, #0
 801d42a:	d008      	beq.n	801d43e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801d42c:	4b1a      	ldr	r3, [pc, #104]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d42e:	689b      	ldr	r3, [r3, #8]
 801d430:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801d434:	687b      	ldr	r3, [r7, #4]
 801d436:	68db      	ldr	r3, [r3, #12]
 801d438:	4917      	ldr	r1, [pc, #92]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d43a:	4313      	orrs	r3, r2
 801d43c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d43e:	687b      	ldr	r3, [r7, #4]
 801d440:	681b      	ldr	r3, [r3, #0]
 801d442:	f003 0308 	and.w	r3, r3, #8
 801d446:	2b00      	cmp	r3, #0
 801d448:	d009      	beq.n	801d45e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801d44a:	4b13      	ldr	r3, [pc, #76]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d44c:	689b      	ldr	r3, [r3, #8]
 801d44e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801d452:	687b      	ldr	r3, [r7, #4]
 801d454:	691b      	ldr	r3, [r3, #16]
 801d456:	00db      	lsls	r3, r3, #3
 801d458:	490f      	ldr	r1, [pc, #60]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d45a:	4313      	orrs	r3, r2
 801d45c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801d45e:	f000 f825 	bl	801d4ac <HAL_RCC_GetSysClockFreq>
 801d462:	4602      	mov	r2, r0
 801d464:	4b0c      	ldr	r3, [pc, #48]	; (801d498 <HAL_RCC_ClockConfig+0x264>)
 801d466:	689b      	ldr	r3, [r3, #8]
 801d468:	091b      	lsrs	r3, r3, #4
 801d46a:	f003 030f 	and.w	r3, r3, #15
 801d46e:	490c      	ldr	r1, [pc, #48]	; (801d4a0 <HAL_RCC_ClockConfig+0x26c>)
 801d470:	5ccb      	ldrb	r3, [r1, r3]
 801d472:	f003 031f 	and.w	r3, r3, #31
 801d476:	fa22 f303 	lsr.w	r3, r2, r3
 801d47a:	4a0a      	ldr	r2, [pc, #40]	; (801d4a4 <HAL_RCC_ClockConfig+0x270>)
 801d47c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 801d47e:	4b0a      	ldr	r3, [pc, #40]	; (801d4a8 <HAL_RCC_ClockConfig+0x274>)
 801d480:	681b      	ldr	r3, [r3, #0]
 801d482:	4618      	mov	r0, r3
 801d484:	f7fc f8de 	bl	8019644 <HAL_InitTick>
 801d488:	4603      	mov	r3, r0
}
 801d48a:	4618      	mov	r0, r3
 801d48c:	3718      	adds	r7, #24
 801d48e:	46bd      	mov	sp, r7
 801d490:	bd80      	pop	{r7, pc}
 801d492:	bf00      	nop
 801d494:	40022000 	.word	0x40022000
 801d498:	40021000 	.word	0x40021000
 801d49c:	04c4b400 	.word	0x04c4b400
 801d4a0:	08025224 	.word	0x08025224
 801d4a4:	20000000 	.word	0x20000000
 801d4a8:	20000004 	.word	0x20000004

0801d4ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801d4ac:	b480      	push	{r7}
 801d4ae:	b087      	sub	sp, #28
 801d4b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 801d4b2:	4b2c      	ldr	r3, [pc, #176]	; (801d564 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d4b4:	689b      	ldr	r3, [r3, #8]
 801d4b6:	f003 030c 	and.w	r3, r3, #12
 801d4ba:	2b04      	cmp	r3, #4
 801d4bc:	d102      	bne.n	801d4c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801d4be:	4b2a      	ldr	r3, [pc, #168]	; (801d568 <HAL_RCC_GetSysClockFreq+0xbc>)
 801d4c0:	613b      	str	r3, [r7, #16]
 801d4c2:	e047      	b.n	801d554 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 801d4c4:	4b27      	ldr	r3, [pc, #156]	; (801d564 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d4c6:	689b      	ldr	r3, [r3, #8]
 801d4c8:	f003 030c 	and.w	r3, r3, #12
 801d4cc:	2b08      	cmp	r3, #8
 801d4ce:	d102      	bne.n	801d4d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801d4d0:	4b25      	ldr	r3, [pc, #148]	; (801d568 <HAL_RCC_GetSysClockFreq+0xbc>)
 801d4d2:	613b      	str	r3, [r7, #16]
 801d4d4:	e03e      	b.n	801d554 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 801d4d6:	4b23      	ldr	r3, [pc, #140]	; (801d564 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d4d8:	689b      	ldr	r3, [r3, #8]
 801d4da:	f003 030c 	and.w	r3, r3, #12
 801d4de:	2b0c      	cmp	r3, #12
 801d4e0:	d136      	bne.n	801d550 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801d4e2:	4b20      	ldr	r3, [pc, #128]	; (801d564 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d4e4:	68db      	ldr	r3, [r3, #12]
 801d4e6:	f003 0303 	and.w	r3, r3, #3
 801d4ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801d4ec:	4b1d      	ldr	r3, [pc, #116]	; (801d564 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d4ee:	68db      	ldr	r3, [r3, #12]
 801d4f0:	091b      	lsrs	r3, r3, #4
 801d4f2:	f003 030f 	and.w	r3, r3, #15
 801d4f6:	3301      	adds	r3, #1
 801d4f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801d4fa:	68fb      	ldr	r3, [r7, #12]
 801d4fc:	2b03      	cmp	r3, #3
 801d4fe:	d10c      	bne.n	801d51a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801d500:	4a19      	ldr	r2, [pc, #100]	; (801d568 <HAL_RCC_GetSysClockFreq+0xbc>)
 801d502:	68bb      	ldr	r3, [r7, #8]
 801d504:	fbb2 f3f3 	udiv	r3, r2, r3
 801d508:	4a16      	ldr	r2, [pc, #88]	; (801d564 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d50a:	68d2      	ldr	r2, [r2, #12]
 801d50c:	0a12      	lsrs	r2, r2, #8
 801d50e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801d512:	fb02 f303 	mul.w	r3, r2, r3
 801d516:	617b      	str	r3, [r7, #20]
      break;
 801d518:	e00c      	b.n	801d534 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801d51a:	4a13      	ldr	r2, [pc, #76]	; (801d568 <HAL_RCC_GetSysClockFreq+0xbc>)
 801d51c:	68bb      	ldr	r3, [r7, #8]
 801d51e:	fbb2 f3f3 	udiv	r3, r2, r3
 801d522:	4a10      	ldr	r2, [pc, #64]	; (801d564 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d524:	68d2      	ldr	r2, [r2, #12]
 801d526:	0a12      	lsrs	r2, r2, #8
 801d528:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801d52c:	fb02 f303 	mul.w	r3, r2, r3
 801d530:	617b      	str	r3, [r7, #20]
      break;
 801d532:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801d534:	4b0b      	ldr	r3, [pc, #44]	; (801d564 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d536:	68db      	ldr	r3, [r3, #12]
 801d538:	0e5b      	lsrs	r3, r3, #25
 801d53a:	f003 0303 	and.w	r3, r3, #3
 801d53e:	3301      	adds	r3, #1
 801d540:	005b      	lsls	r3, r3, #1
 801d542:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 801d544:	697a      	ldr	r2, [r7, #20]
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	fbb2 f3f3 	udiv	r3, r2, r3
 801d54c:	613b      	str	r3, [r7, #16]
 801d54e:	e001      	b.n	801d554 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 801d550:	2300      	movs	r3, #0
 801d552:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 801d554:	693b      	ldr	r3, [r7, #16]
}
 801d556:	4618      	mov	r0, r3
 801d558:	371c      	adds	r7, #28
 801d55a:	46bd      	mov	sp, r7
 801d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d560:	4770      	bx	lr
 801d562:	bf00      	nop
 801d564:	40021000 	.word	0x40021000
 801d568:	00f42400 	.word	0x00f42400

0801d56c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801d56c:	b480      	push	{r7}
 801d56e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801d570:	4b03      	ldr	r3, [pc, #12]	; (801d580 <HAL_RCC_GetHCLKFreq+0x14>)
 801d572:	681b      	ldr	r3, [r3, #0]
}
 801d574:	4618      	mov	r0, r3
 801d576:	46bd      	mov	sp, r7
 801d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d57c:	4770      	bx	lr
 801d57e:	bf00      	nop
 801d580:	20000000 	.word	0x20000000

0801d584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801d584:	b580      	push	{r7, lr}
 801d586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801d588:	f7ff fff0 	bl	801d56c <HAL_RCC_GetHCLKFreq>
 801d58c:	4602      	mov	r2, r0
 801d58e:	4b06      	ldr	r3, [pc, #24]	; (801d5a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 801d590:	689b      	ldr	r3, [r3, #8]
 801d592:	0a1b      	lsrs	r3, r3, #8
 801d594:	f003 0307 	and.w	r3, r3, #7
 801d598:	4904      	ldr	r1, [pc, #16]	; (801d5ac <HAL_RCC_GetPCLK1Freq+0x28>)
 801d59a:	5ccb      	ldrb	r3, [r1, r3]
 801d59c:	f003 031f 	and.w	r3, r3, #31
 801d5a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 801d5a4:	4618      	mov	r0, r3
 801d5a6:	bd80      	pop	{r7, pc}
 801d5a8:	40021000 	.word	0x40021000
 801d5ac:	08025234 	.word	0x08025234

0801d5b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801d5b0:	b580      	push	{r7, lr}
 801d5b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801d5b4:	f7ff ffda 	bl	801d56c <HAL_RCC_GetHCLKFreq>
 801d5b8:	4602      	mov	r2, r0
 801d5ba:	4b06      	ldr	r3, [pc, #24]	; (801d5d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 801d5bc:	689b      	ldr	r3, [r3, #8]
 801d5be:	0adb      	lsrs	r3, r3, #11
 801d5c0:	f003 0307 	and.w	r3, r3, #7
 801d5c4:	4904      	ldr	r1, [pc, #16]	; (801d5d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 801d5c6:	5ccb      	ldrb	r3, [r1, r3]
 801d5c8:	f003 031f 	and.w	r3, r3, #31
 801d5cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 801d5d0:	4618      	mov	r0, r3
 801d5d2:	bd80      	pop	{r7, pc}
 801d5d4:	40021000 	.word	0x40021000
 801d5d8:	08025234 	.word	0x08025234

0801d5dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 801d5dc:	b480      	push	{r7}
 801d5de:	b087      	sub	sp, #28
 801d5e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801d5e2:	4b1e      	ldr	r3, [pc, #120]	; (801d65c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801d5e4:	68db      	ldr	r3, [r3, #12]
 801d5e6:	f003 0303 	and.w	r3, r3, #3
 801d5ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801d5ec:	4b1b      	ldr	r3, [pc, #108]	; (801d65c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801d5ee:	68db      	ldr	r3, [r3, #12]
 801d5f0:	091b      	lsrs	r3, r3, #4
 801d5f2:	f003 030f 	and.w	r3, r3, #15
 801d5f6:	3301      	adds	r3, #1
 801d5f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 801d5fa:	693b      	ldr	r3, [r7, #16]
 801d5fc:	2b03      	cmp	r3, #3
 801d5fe:	d10c      	bne.n	801d61a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801d600:	4a17      	ldr	r2, [pc, #92]	; (801d660 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801d602:	68fb      	ldr	r3, [r7, #12]
 801d604:	fbb2 f3f3 	udiv	r3, r2, r3
 801d608:	4a14      	ldr	r2, [pc, #80]	; (801d65c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801d60a:	68d2      	ldr	r2, [r2, #12]
 801d60c:	0a12      	lsrs	r2, r2, #8
 801d60e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801d612:	fb02 f303 	mul.w	r3, r2, r3
 801d616:	617b      	str	r3, [r7, #20]
    break;
 801d618:	e00c      	b.n	801d634 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801d61a:	4a11      	ldr	r2, [pc, #68]	; (801d660 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801d61c:	68fb      	ldr	r3, [r7, #12]
 801d61e:	fbb2 f3f3 	udiv	r3, r2, r3
 801d622:	4a0e      	ldr	r2, [pc, #56]	; (801d65c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801d624:	68d2      	ldr	r2, [r2, #12]
 801d626:	0a12      	lsrs	r2, r2, #8
 801d628:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801d62c:	fb02 f303 	mul.w	r3, r2, r3
 801d630:	617b      	str	r3, [r7, #20]
    break;
 801d632:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801d634:	4b09      	ldr	r3, [pc, #36]	; (801d65c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801d636:	68db      	ldr	r3, [r3, #12]
 801d638:	0e5b      	lsrs	r3, r3, #25
 801d63a:	f003 0303 	and.w	r3, r3, #3
 801d63e:	3301      	adds	r3, #1
 801d640:	005b      	lsls	r3, r3, #1
 801d642:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 801d644:	697a      	ldr	r2, [r7, #20]
 801d646:	68bb      	ldr	r3, [r7, #8]
 801d648:	fbb2 f3f3 	udiv	r3, r2, r3
 801d64c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 801d64e:	687b      	ldr	r3, [r7, #4]
}
 801d650:	4618      	mov	r0, r3
 801d652:	371c      	adds	r7, #28
 801d654:	46bd      	mov	sp, r7
 801d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d65a:	4770      	bx	lr
 801d65c:	40021000 	.word	0x40021000
 801d660:	00f42400 	.word	0x00f42400

0801d664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801d664:	b580      	push	{r7, lr}
 801d666:	b086      	sub	sp, #24
 801d668:	af00      	add	r7, sp, #0
 801d66a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801d66c:	2300      	movs	r3, #0
 801d66e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801d670:	2300      	movs	r3, #0
 801d672:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801d674:	687b      	ldr	r3, [r7, #4]
 801d676:	681b      	ldr	r3, [r3, #0]
 801d678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801d67c:	2b00      	cmp	r3, #0
 801d67e:	f000 8098 	beq.w	801d7b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801d682:	2300      	movs	r3, #0
 801d684:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801d686:	4b43      	ldr	r3, [pc, #268]	; (801d794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d68a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d68e:	2b00      	cmp	r3, #0
 801d690:	d10d      	bne.n	801d6ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801d692:	4b40      	ldr	r3, [pc, #256]	; (801d794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d696:	4a3f      	ldr	r2, [pc, #252]	; (801d794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d69c:	6593      	str	r3, [r2, #88]	; 0x58
 801d69e:	4b3d      	ldr	r3, [pc, #244]	; (801d794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d6a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d6a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d6a6:	60bb      	str	r3, [r7, #8]
 801d6a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801d6aa:	2301      	movs	r3, #1
 801d6ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801d6ae:	4b3a      	ldr	r3, [pc, #232]	; (801d798 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801d6b0:	681b      	ldr	r3, [r3, #0]
 801d6b2:	4a39      	ldr	r2, [pc, #228]	; (801d798 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801d6b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d6b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801d6ba:	f7fc f80f 	bl	80196dc <HAL_GetTick>
 801d6be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d6c0:	e009      	b.n	801d6d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d6c2:	f7fc f80b 	bl	80196dc <HAL_GetTick>
 801d6c6:	4602      	mov	r2, r0
 801d6c8:	68fb      	ldr	r3, [r7, #12]
 801d6ca:	1ad3      	subs	r3, r2, r3
 801d6cc:	2b02      	cmp	r3, #2
 801d6ce:	d902      	bls.n	801d6d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 801d6d0:	2303      	movs	r3, #3
 801d6d2:	74fb      	strb	r3, [r7, #19]
        break;
 801d6d4:	e005      	b.n	801d6e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d6d6:	4b30      	ldr	r3, [pc, #192]	; (801d798 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801d6d8:	681b      	ldr	r3, [r3, #0]
 801d6da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d6de:	2b00      	cmp	r3, #0
 801d6e0:	d0ef      	beq.n	801d6c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 801d6e2:	7cfb      	ldrb	r3, [r7, #19]
 801d6e4:	2b00      	cmp	r3, #0
 801d6e6:	d159      	bne.n	801d79c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801d6e8:	4b2a      	ldr	r3, [pc, #168]	; (801d794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d6ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d6ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d6f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801d6f4:	697b      	ldr	r3, [r7, #20]
 801d6f6:	2b00      	cmp	r3, #0
 801d6f8:	d01e      	beq.n	801d738 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801d6fa:	687b      	ldr	r3, [r7, #4]
 801d6fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d6fe:	697a      	ldr	r2, [r7, #20]
 801d700:	429a      	cmp	r2, r3
 801d702:	d019      	beq.n	801d738 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801d704:	4b23      	ldr	r3, [pc, #140]	; (801d794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d70a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d70e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801d710:	4b20      	ldr	r3, [pc, #128]	; (801d794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d716:	4a1f      	ldr	r2, [pc, #124]	; (801d794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d71c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801d720:	4b1c      	ldr	r3, [pc, #112]	; (801d794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d726:	4a1b      	ldr	r2, [pc, #108]	; (801d794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d72c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801d730:	4a18      	ldr	r2, [pc, #96]	; (801d794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d732:	697b      	ldr	r3, [r7, #20]
 801d734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801d738:	697b      	ldr	r3, [r7, #20]
 801d73a:	f003 0301 	and.w	r3, r3, #1
 801d73e:	2b00      	cmp	r3, #0
 801d740:	d016      	beq.n	801d770 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d742:	f7fb ffcb 	bl	80196dc <HAL_GetTick>
 801d746:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801d748:	e00b      	b.n	801d762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d74a:	f7fb ffc7 	bl	80196dc <HAL_GetTick>
 801d74e:	4602      	mov	r2, r0
 801d750:	68fb      	ldr	r3, [r7, #12]
 801d752:	1ad3      	subs	r3, r2, r3
 801d754:	f241 3288 	movw	r2, #5000	; 0x1388
 801d758:	4293      	cmp	r3, r2
 801d75a:	d902      	bls.n	801d762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 801d75c:	2303      	movs	r3, #3
 801d75e:	74fb      	strb	r3, [r7, #19]
            break;
 801d760:	e006      	b.n	801d770 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801d762:	4b0c      	ldr	r3, [pc, #48]	; (801d794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d768:	f003 0302 	and.w	r3, r3, #2
 801d76c:	2b00      	cmp	r3, #0
 801d76e:	d0ec      	beq.n	801d74a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 801d770:	7cfb      	ldrb	r3, [r7, #19]
 801d772:	2b00      	cmp	r3, #0
 801d774:	d10b      	bne.n	801d78e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801d776:	4b07      	ldr	r3, [pc, #28]	; (801d794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d77c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801d780:	687b      	ldr	r3, [r7, #4]
 801d782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d784:	4903      	ldr	r1, [pc, #12]	; (801d794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d786:	4313      	orrs	r3, r2
 801d788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801d78c:	e008      	b.n	801d7a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801d78e:	7cfb      	ldrb	r3, [r7, #19]
 801d790:	74bb      	strb	r3, [r7, #18]
 801d792:	e005      	b.n	801d7a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 801d794:	40021000 	.word	0x40021000
 801d798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d79c:	7cfb      	ldrb	r3, [r7, #19]
 801d79e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801d7a0:	7c7b      	ldrb	r3, [r7, #17]
 801d7a2:	2b01      	cmp	r3, #1
 801d7a4:	d105      	bne.n	801d7b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801d7a6:	4ba7      	ldr	r3, [pc, #668]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d7a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d7aa:	4aa6      	ldr	r2, [pc, #664]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d7ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d7b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801d7b2:	687b      	ldr	r3, [r7, #4]
 801d7b4:	681b      	ldr	r3, [r3, #0]
 801d7b6:	f003 0301 	and.w	r3, r3, #1
 801d7ba:	2b00      	cmp	r3, #0
 801d7bc:	d00a      	beq.n	801d7d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801d7be:	4ba1      	ldr	r3, [pc, #644]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d7c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d7c4:	f023 0203 	bic.w	r2, r3, #3
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	685b      	ldr	r3, [r3, #4]
 801d7cc:	499d      	ldr	r1, [pc, #628]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d7ce:	4313      	orrs	r3, r2
 801d7d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801d7d4:	687b      	ldr	r3, [r7, #4]
 801d7d6:	681b      	ldr	r3, [r3, #0]
 801d7d8:	f003 0302 	and.w	r3, r3, #2
 801d7dc:	2b00      	cmp	r3, #0
 801d7de:	d00a      	beq.n	801d7f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801d7e0:	4b98      	ldr	r3, [pc, #608]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d7e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d7e6:	f023 020c 	bic.w	r2, r3, #12
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	689b      	ldr	r3, [r3, #8]
 801d7ee:	4995      	ldr	r1, [pc, #596]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d7f0:	4313      	orrs	r3, r2
 801d7f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801d7f6:	687b      	ldr	r3, [r7, #4]
 801d7f8:	681b      	ldr	r3, [r3, #0]
 801d7fa:	f003 0304 	and.w	r3, r3, #4
 801d7fe:	2b00      	cmp	r3, #0
 801d800:	d00a      	beq.n	801d818 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801d802:	4b90      	ldr	r3, [pc, #576]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d808:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	68db      	ldr	r3, [r3, #12]
 801d810:	498c      	ldr	r1, [pc, #560]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d812:	4313      	orrs	r3, r2
 801d814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	681b      	ldr	r3, [r3, #0]
 801d81c:	f003 0308 	and.w	r3, r3, #8
 801d820:	2b00      	cmp	r3, #0
 801d822:	d00a      	beq.n	801d83a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801d824:	4b87      	ldr	r3, [pc, #540]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d82a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	691b      	ldr	r3, [r3, #16]
 801d832:	4984      	ldr	r1, [pc, #528]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d834:	4313      	orrs	r3, r2
 801d836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801d83a:	687b      	ldr	r3, [r7, #4]
 801d83c:	681b      	ldr	r3, [r3, #0]
 801d83e:	f003 0310 	and.w	r3, r3, #16
 801d842:	2b00      	cmp	r3, #0
 801d844:	d00a      	beq.n	801d85c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801d846:	4b7f      	ldr	r3, [pc, #508]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d84c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801d850:	687b      	ldr	r3, [r7, #4]
 801d852:	695b      	ldr	r3, [r3, #20]
 801d854:	497b      	ldr	r1, [pc, #492]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d856:	4313      	orrs	r3, r2
 801d858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801d85c:	687b      	ldr	r3, [r7, #4]
 801d85e:	681b      	ldr	r3, [r3, #0]
 801d860:	f003 0320 	and.w	r3, r3, #32
 801d864:	2b00      	cmp	r3, #0
 801d866:	d00a      	beq.n	801d87e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801d868:	4b76      	ldr	r3, [pc, #472]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d86a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d86e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	699b      	ldr	r3, [r3, #24]
 801d876:	4973      	ldr	r1, [pc, #460]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d878:	4313      	orrs	r3, r2
 801d87a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	681b      	ldr	r3, [r3, #0]
 801d882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d886:	2b00      	cmp	r3, #0
 801d888:	d00a      	beq.n	801d8a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801d88a:	4b6e      	ldr	r3, [pc, #440]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d88c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d890:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801d894:	687b      	ldr	r3, [r7, #4]
 801d896:	69db      	ldr	r3, [r3, #28]
 801d898:	496a      	ldr	r1, [pc, #424]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d89a:	4313      	orrs	r3, r2
 801d89c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	681b      	ldr	r3, [r3, #0]
 801d8a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d8a8:	2b00      	cmp	r3, #0
 801d8aa:	d00a      	beq.n	801d8c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801d8ac:	4b65      	ldr	r3, [pc, #404]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d8ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d8b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801d8b6:	687b      	ldr	r3, [r7, #4]
 801d8b8:	6a1b      	ldr	r3, [r3, #32]
 801d8ba:	4962      	ldr	r1, [pc, #392]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d8bc:	4313      	orrs	r3, r2
 801d8be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801d8c2:	687b      	ldr	r3, [r7, #4]
 801d8c4:	681b      	ldr	r3, [r3, #0]
 801d8c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	d00a      	beq.n	801d8e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801d8ce:	4b5d      	ldr	r3, [pc, #372]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d8d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d8d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d8dc:	4959      	ldr	r1, [pc, #356]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d8de:	4313      	orrs	r3, r2
 801d8e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801d8e4:	687b      	ldr	r3, [r7, #4]
 801d8e6:	681b      	ldr	r3, [r3, #0]
 801d8e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d8ec:	2b00      	cmp	r3, #0
 801d8ee:	d00a      	beq.n	801d906 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801d8f0:	4b54      	ldr	r3, [pc, #336]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d8f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d8f6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801d8fa:	687b      	ldr	r3, [r7, #4]
 801d8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d8fe:	4951      	ldr	r1, [pc, #324]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d900:	4313      	orrs	r3, r2
 801d902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801d906:	687b      	ldr	r3, [r7, #4]
 801d908:	681b      	ldr	r3, [r3, #0]
 801d90a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d90e:	2b00      	cmp	r3, #0
 801d910:	d015      	beq.n	801d93e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801d912:	4b4c      	ldr	r3, [pc, #304]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d918:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801d91c:	687b      	ldr	r3, [r7, #4]
 801d91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d920:	4948      	ldr	r1, [pc, #288]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d922:	4313      	orrs	r3, r2
 801d924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 801d928:	687b      	ldr	r3, [r7, #4]
 801d92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d92c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d930:	d105      	bne.n	801d93e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d932:	4b44      	ldr	r3, [pc, #272]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d934:	68db      	ldr	r3, [r3, #12]
 801d936:	4a43      	ldr	r2, [pc, #268]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d938:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d93c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 801d93e:	687b      	ldr	r3, [r7, #4]
 801d940:	681b      	ldr	r3, [r3, #0]
 801d942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d946:	2b00      	cmp	r3, #0
 801d948:	d015      	beq.n	801d976 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801d94a:	4b3e      	ldr	r3, [pc, #248]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d94c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d950:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801d954:	687b      	ldr	r3, [r7, #4]
 801d956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d958:	493a      	ldr	r1, [pc, #232]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d95a:	4313      	orrs	r3, r2
 801d95c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 801d960:	687b      	ldr	r3, [r7, #4]
 801d962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d964:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d968:	d105      	bne.n	801d976 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d96a:	4b36      	ldr	r3, [pc, #216]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d96c:	68db      	ldr	r3, [r3, #12]
 801d96e:	4a35      	ldr	r2, [pc, #212]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d970:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d974:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801d976:	687b      	ldr	r3, [r7, #4]
 801d978:	681b      	ldr	r3, [r3, #0]
 801d97a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801d97e:	2b00      	cmp	r3, #0
 801d980:	d015      	beq.n	801d9ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801d982:	4b30      	ldr	r3, [pc, #192]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d988:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801d98c:	687b      	ldr	r3, [r7, #4]
 801d98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d990:	492c      	ldr	r1, [pc, #176]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d992:	4313      	orrs	r3, r2
 801d994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 801d998:	687b      	ldr	r3, [r7, #4]
 801d99a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d99c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801d9a0:	d105      	bne.n	801d9ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d9a2:	4b28      	ldr	r3, [pc, #160]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d9a4:	68db      	ldr	r3, [r3, #12]
 801d9a6:	4a27      	ldr	r2, [pc, #156]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d9a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d9ac:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801d9ae:	687b      	ldr	r3, [r7, #4]
 801d9b0:	681b      	ldr	r3, [r3, #0]
 801d9b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d9b6:	2b00      	cmp	r3, #0
 801d9b8:	d015      	beq.n	801d9e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801d9ba:	4b22      	ldr	r3, [pc, #136]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d9bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d9c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801d9c4:	687b      	ldr	r3, [r7, #4]
 801d9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d9c8:	491e      	ldr	r1, [pc, #120]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d9ca:	4313      	orrs	r3, r2
 801d9cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801d9d0:	687b      	ldr	r3, [r7, #4]
 801d9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d9d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d9d8:	d105      	bne.n	801d9e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d9da:	4b1a      	ldr	r3, [pc, #104]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d9dc:	68db      	ldr	r3, [r3, #12]
 801d9de:	4a19      	ldr	r2, [pc, #100]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d9e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d9e4:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801d9e6:	687b      	ldr	r3, [r7, #4]
 801d9e8:	681b      	ldr	r3, [r3, #0]
 801d9ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d9ee:	2b00      	cmp	r3, #0
 801d9f0:	d015      	beq.n	801da1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801d9f2:	4b14      	ldr	r3, [pc, #80]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d9f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d9f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801d9fc:	687b      	ldr	r3, [r7, #4]
 801d9fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801da00:	4910      	ldr	r1, [pc, #64]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801da02:	4313      	orrs	r3, r2
 801da04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801da08:	687b      	ldr	r3, [r7, #4]
 801da0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801da0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801da10:	d105      	bne.n	801da1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801da12:	4b0c      	ldr	r3, [pc, #48]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801da14:	68db      	ldr	r3, [r3, #12]
 801da16:	4a0b      	ldr	r2, [pc, #44]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801da18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801da1c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 801da1e:	687b      	ldr	r3, [r7, #4]
 801da20:	681b      	ldr	r3, [r3, #0]
 801da22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801da26:	2b00      	cmp	r3, #0
 801da28:	d018      	beq.n	801da5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 801da2a:	4b06      	ldr	r3, [pc, #24]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801da2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801da30:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801da34:	687b      	ldr	r3, [r7, #4]
 801da36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801da38:	4902      	ldr	r1, [pc, #8]	; (801da44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801da3a:	4313      	orrs	r3, r2
 801da3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 801da40:	687b      	ldr	r3, [r7, #4]
 801da42:	e001      	b.n	801da48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801da44:	40021000 	.word	0x40021000
 801da48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801da4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801da4e:	d105      	bne.n	801da5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801da50:	4b21      	ldr	r3, [pc, #132]	; (801dad8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da52:	68db      	ldr	r3, [r3, #12]
 801da54:	4a20      	ldr	r2, [pc, #128]	; (801dad8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801da5a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	681b      	ldr	r3, [r3, #0]
 801da60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801da64:	2b00      	cmp	r3, #0
 801da66:	d015      	beq.n	801da94 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 801da68:	4b1b      	ldr	r3, [pc, #108]	; (801dad8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801da6e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801da76:	4918      	ldr	r1, [pc, #96]	; (801dad8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da78:	4313      	orrs	r3, r2
 801da7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 801da7e:	687b      	ldr	r3, [r7, #4]
 801da80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801da82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801da86:	d105      	bne.n	801da94 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801da88:	4b13      	ldr	r3, [pc, #76]	; (801dad8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da8a:	68db      	ldr	r3, [r3, #12]
 801da8c:	4a12      	ldr	r2, [pc, #72]	; (801dad8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801da92:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801da94:	687b      	ldr	r3, [r7, #4]
 801da96:	681b      	ldr	r3, [r3, #0]
 801da98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801da9c:	2b00      	cmp	r3, #0
 801da9e:	d015      	beq.n	801dacc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801daa0:	4b0d      	ldr	r3, [pc, #52]	; (801dad8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801daa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801daa6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801daaa:	687b      	ldr	r3, [r7, #4]
 801daac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801daae:	490a      	ldr	r1, [pc, #40]	; (801dad8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801dab0:	4313      	orrs	r3, r2
 801dab2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 801dab6:	687b      	ldr	r3, [r7, #4]
 801dab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801daba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801dabe:	d105      	bne.n	801dacc <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801dac0:	4b05      	ldr	r3, [pc, #20]	; (801dad8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801dac2:	68db      	ldr	r3, [r3, #12]
 801dac4:	4a04      	ldr	r2, [pc, #16]	; (801dad8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801dac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801daca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 801dacc:	7cbb      	ldrb	r3, [r7, #18]
}
 801dace:	4618      	mov	r0, r3
 801dad0:	3718      	adds	r7, #24
 801dad2:	46bd      	mov	sp, r7
 801dad4:	bd80      	pop	{r7, pc}
 801dad6:	bf00      	nop
 801dad8:	40021000 	.word	0x40021000

0801dadc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801dadc:	b580      	push	{r7, lr}
 801dade:	b084      	sub	sp, #16
 801dae0:	af00      	add	r7, sp, #0
 801dae2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801dae4:	687b      	ldr	r3, [r7, #4]
 801dae6:	2b00      	cmp	r3, #0
 801dae8:	d101      	bne.n	801daee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801daea:	2301      	movs	r3, #1
 801daec:	e09d      	b.n	801dc2a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801daee:	687b      	ldr	r3, [r7, #4]
 801daf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801daf2:	2b00      	cmp	r3, #0
 801daf4:	d108      	bne.n	801db08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801daf6:	687b      	ldr	r3, [r7, #4]
 801daf8:	685b      	ldr	r3, [r3, #4]
 801dafa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801dafe:	d009      	beq.n	801db14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801db00:	687b      	ldr	r3, [r7, #4]
 801db02:	2200      	movs	r2, #0
 801db04:	61da      	str	r2, [r3, #28]
 801db06:	e005      	b.n	801db14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801db08:	687b      	ldr	r3, [r7, #4]
 801db0a:	2200      	movs	r2, #0
 801db0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801db0e:	687b      	ldr	r3, [r7, #4]
 801db10:	2200      	movs	r2, #0
 801db12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	2200      	movs	r2, #0
 801db18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801db1a:	687b      	ldr	r3, [r7, #4]
 801db1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801db20:	b2db      	uxtb	r3, r3
 801db22:	2b00      	cmp	r3, #0
 801db24:	d106      	bne.n	801db34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801db26:	687b      	ldr	r3, [r7, #4]
 801db28:	2200      	movs	r2, #0
 801db2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801db2e:	6878      	ldr	r0, [r7, #4]
 801db30:	f7fa f8f2 	bl	8017d18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	2202      	movs	r2, #2
 801db38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801db3c:	687b      	ldr	r3, [r7, #4]
 801db3e:	681b      	ldr	r3, [r3, #0]
 801db40:	681a      	ldr	r2, [r3, #0]
 801db42:	687b      	ldr	r3, [r7, #4]
 801db44:	681b      	ldr	r3, [r3, #0]
 801db46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801db4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801db4c:	687b      	ldr	r3, [r7, #4]
 801db4e:	68db      	ldr	r3, [r3, #12]
 801db50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801db54:	d902      	bls.n	801db5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801db56:	2300      	movs	r3, #0
 801db58:	60fb      	str	r3, [r7, #12]
 801db5a:	e002      	b.n	801db62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801db5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801db60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801db62:	687b      	ldr	r3, [r7, #4]
 801db64:	68db      	ldr	r3, [r3, #12]
 801db66:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801db6a:	d007      	beq.n	801db7c <HAL_SPI_Init+0xa0>
 801db6c:	687b      	ldr	r3, [r7, #4]
 801db6e:	68db      	ldr	r3, [r3, #12]
 801db70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801db74:	d002      	beq.n	801db7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801db76:	687b      	ldr	r3, [r7, #4]
 801db78:	2200      	movs	r2, #0
 801db7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801db7c:	687b      	ldr	r3, [r7, #4]
 801db7e:	685b      	ldr	r3, [r3, #4]
 801db80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801db84:	687b      	ldr	r3, [r7, #4]
 801db86:	689b      	ldr	r3, [r3, #8]
 801db88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801db8c:	431a      	orrs	r2, r3
 801db8e:	687b      	ldr	r3, [r7, #4]
 801db90:	691b      	ldr	r3, [r3, #16]
 801db92:	f003 0302 	and.w	r3, r3, #2
 801db96:	431a      	orrs	r2, r3
 801db98:	687b      	ldr	r3, [r7, #4]
 801db9a:	695b      	ldr	r3, [r3, #20]
 801db9c:	f003 0301 	and.w	r3, r3, #1
 801dba0:	431a      	orrs	r2, r3
 801dba2:	687b      	ldr	r3, [r7, #4]
 801dba4:	699b      	ldr	r3, [r3, #24]
 801dba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801dbaa:	431a      	orrs	r2, r3
 801dbac:	687b      	ldr	r3, [r7, #4]
 801dbae:	69db      	ldr	r3, [r3, #28]
 801dbb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801dbb4:	431a      	orrs	r2, r3
 801dbb6:	687b      	ldr	r3, [r7, #4]
 801dbb8:	6a1b      	ldr	r3, [r3, #32]
 801dbba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801dbbe:	ea42 0103 	orr.w	r1, r2, r3
 801dbc2:	687b      	ldr	r3, [r7, #4]
 801dbc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dbc6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	681b      	ldr	r3, [r3, #0]
 801dbce:	430a      	orrs	r2, r1
 801dbd0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801dbd2:	687b      	ldr	r3, [r7, #4]
 801dbd4:	699b      	ldr	r3, [r3, #24]
 801dbd6:	0c1b      	lsrs	r3, r3, #16
 801dbd8:	f003 0204 	and.w	r2, r3, #4
 801dbdc:	687b      	ldr	r3, [r7, #4]
 801dbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dbe0:	f003 0310 	and.w	r3, r3, #16
 801dbe4:	431a      	orrs	r2, r3
 801dbe6:	687b      	ldr	r3, [r7, #4]
 801dbe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dbea:	f003 0308 	and.w	r3, r3, #8
 801dbee:	431a      	orrs	r2, r3
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	68db      	ldr	r3, [r3, #12]
 801dbf4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801dbf8:	ea42 0103 	orr.w	r1, r2, r3
 801dbfc:	68fb      	ldr	r3, [r7, #12]
 801dbfe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	681b      	ldr	r3, [r3, #0]
 801dc06:	430a      	orrs	r2, r1
 801dc08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801dc0a:	687b      	ldr	r3, [r7, #4]
 801dc0c:	681b      	ldr	r3, [r3, #0]
 801dc0e:	69da      	ldr	r2, [r3, #28]
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	681b      	ldr	r3, [r3, #0]
 801dc14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801dc18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801dc1a:	687b      	ldr	r3, [r7, #4]
 801dc1c:	2200      	movs	r2, #0
 801dc1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	2201      	movs	r2, #1
 801dc24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801dc28:	2300      	movs	r3, #0
}
 801dc2a:	4618      	mov	r0, r3
 801dc2c:	3710      	adds	r7, #16
 801dc2e:	46bd      	mov	sp, r7
 801dc30:	bd80      	pop	{r7, pc}

0801dc32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801dc32:	b580      	push	{r7, lr}
 801dc34:	b088      	sub	sp, #32
 801dc36:	af00      	add	r7, sp, #0
 801dc38:	60f8      	str	r0, [r7, #12]
 801dc3a:	60b9      	str	r1, [r7, #8]
 801dc3c:	603b      	str	r3, [r7, #0]
 801dc3e:	4613      	mov	r3, r2
 801dc40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801dc42:	2300      	movs	r3, #0
 801dc44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801dc46:	68fb      	ldr	r3, [r7, #12]
 801dc48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801dc4c:	2b01      	cmp	r3, #1
 801dc4e:	d101      	bne.n	801dc54 <HAL_SPI_Transmit+0x22>
 801dc50:	2302      	movs	r3, #2
 801dc52:	e158      	b.n	801df06 <HAL_SPI_Transmit+0x2d4>
 801dc54:	68fb      	ldr	r3, [r7, #12]
 801dc56:	2201      	movs	r2, #1
 801dc58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801dc5c:	f7fb fd3e 	bl	80196dc <HAL_GetTick>
 801dc60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801dc62:	88fb      	ldrh	r3, [r7, #6]
 801dc64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801dc66:	68fb      	ldr	r3, [r7, #12]
 801dc68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801dc6c:	b2db      	uxtb	r3, r3
 801dc6e:	2b01      	cmp	r3, #1
 801dc70:	d002      	beq.n	801dc78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801dc72:	2302      	movs	r3, #2
 801dc74:	77fb      	strb	r3, [r7, #31]
    goto error;
 801dc76:	e13d      	b.n	801def4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801dc78:	68bb      	ldr	r3, [r7, #8]
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	d002      	beq.n	801dc84 <HAL_SPI_Transmit+0x52>
 801dc7e:	88fb      	ldrh	r3, [r7, #6]
 801dc80:	2b00      	cmp	r3, #0
 801dc82:	d102      	bne.n	801dc8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801dc84:	2301      	movs	r3, #1
 801dc86:	77fb      	strb	r3, [r7, #31]
    goto error;
 801dc88:	e134      	b.n	801def4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801dc8a:	68fb      	ldr	r3, [r7, #12]
 801dc8c:	2203      	movs	r2, #3
 801dc8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801dc92:	68fb      	ldr	r3, [r7, #12]
 801dc94:	2200      	movs	r2, #0
 801dc96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801dc98:	68fb      	ldr	r3, [r7, #12]
 801dc9a:	68ba      	ldr	r2, [r7, #8]
 801dc9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801dc9e:	68fb      	ldr	r3, [r7, #12]
 801dca0:	88fa      	ldrh	r2, [r7, #6]
 801dca2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801dca4:	68fb      	ldr	r3, [r7, #12]
 801dca6:	88fa      	ldrh	r2, [r7, #6]
 801dca8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801dcaa:	68fb      	ldr	r3, [r7, #12]
 801dcac:	2200      	movs	r2, #0
 801dcae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801dcb0:	68fb      	ldr	r3, [r7, #12]
 801dcb2:	2200      	movs	r2, #0
 801dcb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801dcb8:	68fb      	ldr	r3, [r7, #12]
 801dcba:	2200      	movs	r2, #0
 801dcbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801dcc0:	68fb      	ldr	r3, [r7, #12]
 801dcc2:	2200      	movs	r2, #0
 801dcc4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801dcc6:	68fb      	ldr	r3, [r7, #12]
 801dcc8:	2200      	movs	r2, #0
 801dcca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801dccc:	68fb      	ldr	r3, [r7, #12]
 801dcce:	689b      	ldr	r3, [r3, #8]
 801dcd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dcd4:	d10f      	bne.n	801dcf6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801dcd6:	68fb      	ldr	r3, [r7, #12]
 801dcd8:	681b      	ldr	r3, [r3, #0]
 801dcda:	681a      	ldr	r2, [r3, #0]
 801dcdc:	68fb      	ldr	r3, [r7, #12]
 801dcde:	681b      	ldr	r3, [r3, #0]
 801dce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801dce4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801dce6:	68fb      	ldr	r3, [r7, #12]
 801dce8:	681b      	ldr	r3, [r3, #0]
 801dcea:	681a      	ldr	r2, [r3, #0]
 801dcec:	68fb      	ldr	r3, [r7, #12]
 801dcee:	681b      	ldr	r3, [r3, #0]
 801dcf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801dcf4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801dcf6:	68fb      	ldr	r3, [r7, #12]
 801dcf8:	681b      	ldr	r3, [r3, #0]
 801dcfa:	681b      	ldr	r3, [r3, #0]
 801dcfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801dd00:	2b40      	cmp	r3, #64	; 0x40
 801dd02:	d007      	beq.n	801dd14 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801dd04:	68fb      	ldr	r3, [r7, #12]
 801dd06:	681b      	ldr	r3, [r3, #0]
 801dd08:	681a      	ldr	r2, [r3, #0]
 801dd0a:	68fb      	ldr	r3, [r7, #12]
 801dd0c:	681b      	ldr	r3, [r3, #0]
 801dd0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801dd12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801dd14:	68fb      	ldr	r3, [r7, #12]
 801dd16:	68db      	ldr	r3, [r3, #12]
 801dd18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801dd1c:	d94b      	bls.n	801ddb6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801dd1e:	68fb      	ldr	r3, [r7, #12]
 801dd20:	685b      	ldr	r3, [r3, #4]
 801dd22:	2b00      	cmp	r3, #0
 801dd24:	d002      	beq.n	801dd2c <HAL_SPI_Transmit+0xfa>
 801dd26:	8afb      	ldrh	r3, [r7, #22]
 801dd28:	2b01      	cmp	r3, #1
 801dd2a:	d13e      	bne.n	801ddaa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801dd2c:	68fb      	ldr	r3, [r7, #12]
 801dd2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd30:	881a      	ldrh	r2, [r3, #0]
 801dd32:	68fb      	ldr	r3, [r7, #12]
 801dd34:	681b      	ldr	r3, [r3, #0]
 801dd36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801dd38:	68fb      	ldr	r3, [r7, #12]
 801dd3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd3c:	1c9a      	adds	r2, r3, #2
 801dd3e:	68fb      	ldr	r3, [r7, #12]
 801dd40:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801dd42:	68fb      	ldr	r3, [r7, #12]
 801dd44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dd46:	b29b      	uxth	r3, r3
 801dd48:	3b01      	subs	r3, #1
 801dd4a:	b29a      	uxth	r2, r3
 801dd4c:	68fb      	ldr	r3, [r7, #12]
 801dd4e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801dd50:	e02b      	b.n	801ddaa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801dd52:	68fb      	ldr	r3, [r7, #12]
 801dd54:	681b      	ldr	r3, [r3, #0]
 801dd56:	689b      	ldr	r3, [r3, #8]
 801dd58:	f003 0302 	and.w	r3, r3, #2
 801dd5c:	2b02      	cmp	r3, #2
 801dd5e:	d112      	bne.n	801dd86 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801dd60:	68fb      	ldr	r3, [r7, #12]
 801dd62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd64:	881a      	ldrh	r2, [r3, #0]
 801dd66:	68fb      	ldr	r3, [r7, #12]
 801dd68:	681b      	ldr	r3, [r3, #0]
 801dd6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801dd6c:	68fb      	ldr	r3, [r7, #12]
 801dd6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd70:	1c9a      	adds	r2, r3, #2
 801dd72:	68fb      	ldr	r3, [r7, #12]
 801dd74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801dd76:	68fb      	ldr	r3, [r7, #12]
 801dd78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dd7a:	b29b      	uxth	r3, r3
 801dd7c:	3b01      	subs	r3, #1
 801dd7e:	b29a      	uxth	r2, r3
 801dd80:	68fb      	ldr	r3, [r7, #12]
 801dd82:	87da      	strh	r2, [r3, #62]	; 0x3e
 801dd84:	e011      	b.n	801ddaa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801dd86:	f7fb fca9 	bl	80196dc <HAL_GetTick>
 801dd8a:	4602      	mov	r2, r0
 801dd8c:	69bb      	ldr	r3, [r7, #24]
 801dd8e:	1ad3      	subs	r3, r2, r3
 801dd90:	683a      	ldr	r2, [r7, #0]
 801dd92:	429a      	cmp	r2, r3
 801dd94:	d803      	bhi.n	801dd9e <HAL_SPI_Transmit+0x16c>
 801dd96:	683b      	ldr	r3, [r7, #0]
 801dd98:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dd9c:	d102      	bne.n	801dda4 <HAL_SPI_Transmit+0x172>
 801dd9e:	683b      	ldr	r3, [r7, #0]
 801dda0:	2b00      	cmp	r3, #0
 801dda2:	d102      	bne.n	801ddaa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801dda4:	2303      	movs	r3, #3
 801dda6:	77fb      	strb	r3, [r7, #31]
          goto error;
 801dda8:	e0a4      	b.n	801def4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801ddaa:	68fb      	ldr	r3, [r7, #12]
 801ddac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ddae:	b29b      	uxth	r3, r3
 801ddb0:	2b00      	cmp	r3, #0
 801ddb2:	d1ce      	bne.n	801dd52 <HAL_SPI_Transmit+0x120>
 801ddb4:	e07c      	b.n	801deb0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801ddb6:	68fb      	ldr	r3, [r7, #12]
 801ddb8:	685b      	ldr	r3, [r3, #4]
 801ddba:	2b00      	cmp	r3, #0
 801ddbc:	d002      	beq.n	801ddc4 <HAL_SPI_Transmit+0x192>
 801ddbe:	8afb      	ldrh	r3, [r7, #22]
 801ddc0:	2b01      	cmp	r3, #1
 801ddc2:	d170      	bne.n	801dea6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801ddc4:	68fb      	ldr	r3, [r7, #12]
 801ddc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ddc8:	b29b      	uxth	r3, r3
 801ddca:	2b01      	cmp	r3, #1
 801ddcc:	d912      	bls.n	801ddf4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801ddce:	68fb      	ldr	r3, [r7, #12]
 801ddd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ddd2:	881a      	ldrh	r2, [r3, #0]
 801ddd4:	68fb      	ldr	r3, [r7, #12]
 801ddd6:	681b      	ldr	r3, [r3, #0]
 801ddd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801ddda:	68fb      	ldr	r3, [r7, #12]
 801dddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ddde:	1c9a      	adds	r2, r3, #2
 801dde0:	68fb      	ldr	r3, [r7, #12]
 801dde2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801dde4:	68fb      	ldr	r3, [r7, #12]
 801dde6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dde8:	b29b      	uxth	r3, r3
 801ddea:	3b02      	subs	r3, #2
 801ddec:	b29a      	uxth	r2, r3
 801ddee:	68fb      	ldr	r3, [r7, #12]
 801ddf0:	87da      	strh	r2, [r3, #62]	; 0x3e
 801ddf2:	e058      	b.n	801dea6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801ddf4:	68fb      	ldr	r3, [r7, #12]
 801ddf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ddf8:	68fb      	ldr	r3, [r7, #12]
 801ddfa:	681b      	ldr	r3, [r3, #0]
 801ddfc:	330c      	adds	r3, #12
 801ddfe:	7812      	ldrb	r2, [r2, #0]
 801de00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801de02:	68fb      	ldr	r3, [r7, #12]
 801de04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de06:	1c5a      	adds	r2, r3, #1
 801de08:	68fb      	ldr	r3, [r7, #12]
 801de0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801de0c:	68fb      	ldr	r3, [r7, #12]
 801de0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801de10:	b29b      	uxth	r3, r3
 801de12:	3b01      	subs	r3, #1
 801de14:	b29a      	uxth	r2, r3
 801de16:	68fb      	ldr	r3, [r7, #12]
 801de18:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801de1a:	e044      	b.n	801dea6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801de1c:	68fb      	ldr	r3, [r7, #12]
 801de1e:	681b      	ldr	r3, [r3, #0]
 801de20:	689b      	ldr	r3, [r3, #8]
 801de22:	f003 0302 	and.w	r3, r3, #2
 801de26:	2b02      	cmp	r3, #2
 801de28:	d12b      	bne.n	801de82 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801de2a:	68fb      	ldr	r3, [r7, #12]
 801de2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801de2e:	b29b      	uxth	r3, r3
 801de30:	2b01      	cmp	r3, #1
 801de32:	d912      	bls.n	801de5a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801de34:	68fb      	ldr	r3, [r7, #12]
 801de36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de38:	881a      	ldrh	r2, [r3, #0]
 801de3a:	68fb      	ldr	r3, [r7, #12]
 801de3c:	681b      	ldr	r3, [r3, #0]
 801de3e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801de40:	68fb      	ldr	r3, [r7, #12]
 801de42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de44:	1c9a      	adds	r2, r3, #2
 801de46:	68fb      	ldr	r3, [r7, #12]
 801de48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801de4a:	68fb      	ldr	r3, [r7, #12]
 801de4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801de4e:	b29b      	uxth	r3, r3
 801de50:	3b02      	subs	r3, #2
 801de52:	b29a      	uxth	r2, r3
 801de54:	68fb      	ldr	r3, [r7, #12]
 801de56:	87da      	strh	r2, [r3, #62]	; 0x3e
 801de58:	e025      	b.n	801dea6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801de5a:	68fb      	ldr	r3, [r7, #12]
 801de5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801de5e:	68fb      	ldr	r3, [r7, #12]
 801de60:	681b      	ldr	r3, [r3, #0]
 801de62:	330c      	adds	r3, #12
 801de64:	7812      	ldrb	r2, [r2, #0]
 801de66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801de68:	68fb      	ldr	r3, [r7, #12]
 801de6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de6c:	1c5a      	adds	r2, r3, #1
 801de6e:	68fb      	ldr	r3, [r7, #12]
 801de70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801de72:	68fb      	ldr	r3, [r7, #12]
 801de74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801de76:	b29b      	uxth	r3, r3
 801de78:	3b01      	subs	r3, #1
 801de7a:	b29a      	uxth	r2, r3
 801de7c:	68fb      	ldr	r3, [r7, #12]
 801de7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 801de80:	e011      	b.n	801dea6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801de82:	f7fb fc2b 	bl	80196dc <HAL_GetTick>
 801de86:	4602      	mov	r2, r0
 801de88:	69bb      	ldr	r3, [r7, #24]
 801de8a:	1ad3      	subs	r3, r2, r3
 801de8c:	683a      	ldr	r2, [r7, #0]
 801de8e:	429a      	cmp	r2, r3
 801de90:	d803      	bhi.n	801de9a <HAL_SPI_Transmit+0x268>
 801de92:	683b      	ldr	r3, [r7, #0]
 801de94:	f1b3 3fff 	cmp.w	r3, #4294967295
 801de98:	d102      	bne.n	801dea0 <HAL_SPI_Transmit+0x26e>
 801de9a:	683b      	ldr	r3, [r7, #0]
 801de9c:	2b00      	cmp	r3, #0
 801de9e:	d102      	bne.n	801dea6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801dea0:	2303      	movs	r3, #3
 801dea2:	77fb      	strb	r3, [r7, #31]
          goto error;
 801dea4:	e026      	b.n	801def4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801dea6:	68fb      	ldr	r3, [r7, #12]
 801dea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801deaa:	b29b      	uxth	r3, r3
 801deac:	2b00      	cmp	r3, #0
 801deae:	d1b5      	bne.n	801de1c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801deb0:	69ba      	ldr	r2, [r7, #24]
 801deb2:	6839      	ldr	r1, [r7, #0]
 801deb4:	68f8      	ldr	r0, [r7, #12]
 801deb6:	f000 fce3 	bl	801e880 <SPI_EndRxTxTransaction>
 801deba:	4603      	mov	r3, r0
 801debc:	2b00      	cmp	r3, #0
 801debe:	d002      	beq.n	801dec6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801dec0:	68fb      	ldr	r3, [r7, #12]
 801dec2:	2220      	movs	r2, #32
 801dec4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801dec6:	68fb      	ldr	r3, [r7, #12]
 801dec8:	689b      	ldr	r3, [r3, #8]
 801deca:	2b00      	cmp	r3, #0
 801decc:	d10a      	bne.n	801dee4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801dece:	2300      	movs	r3, #0
 801ded0:	613b      	str	r3, [r7, #16]
 801ded2:	68fb      	ldr	r3, [r7, #12]
 801ded4:	681b      	ldr	r3, [r3, #0]
 801ded6:	68db      	ldr	r3, [r3, #12]
 801ded8:	613b      	str	r3, [r7, #16]
 801deda:	68fb      	ldr	r3, [r7, #12]
 801dedc:	681b      	ldr	r3, [r3, #0]
 801dede:	689b      	ldr	r3, [r3, #8]
 801dee0:	613b      	str	r3, [r7, #16]
 801dee2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801dee4:	68fb      	ldr	r3, [r7, #12]
 801dee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dee8:	2b00      	cmp	r3, #0
 801deea:	d002      	beq.n	801def2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801deec:	2301      	movs	r3, #1
 801deee:	77fb      	strb	r3, [r7, #31]
 801def0:	e000      	b.n	801def4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 801def2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801def4:	68fb      	ldr	r3, [r7, #12]
 801def6:	2201      	movs	r2, #1
 801def8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801defc:	68fb      	ldr	r3, [r7, #12]
 801defe:	2200      	movs	r2, #0
 801df00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801df04:	7ffb      	ldrb	r3, [r7, #31]
}
 801df06:	4618      	mov	r0, r3
 801df08:	3720      	adds	r7, #32
 801df0a:	46bd      	mov	sp, r7
 801df0c:	bd80      	pop	{r7, pc}

0801df0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801df0e:	b580      	push	{r7, lr}
 801df10:	b088      	sub	sp, #32
 801df12:	af02      	add	r7, sp, #8
 801df14:	60f8      	str	r0, [r7, #12]
 801df16:	60b9      	str	r1, [r7, #8]
 801df18:	603b      	str	r3, [r7, #0]
 801df1a:	4613      	mov	r3, r2
 801df1c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801df1e:	2300      	movs	r3, #0
 801df20:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801df22:	68fb      	ldr	r3, [r7, #12]
 801df24:	685b      	ldr	r3, [r3, #4]
 801df26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801df2a:	d112      	bne.n	801df52 <HAL_SPI_Receive+0x44>
 801df2c:	68fb      	ldr	r3, [r7, #12]
 801df2e:	689b      	ldr	r3, [r3, #8]
 801df30:	2b00      	cmp	r3, #0
 801df32:	d10e      	bne.n	801df52 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801df34:	68fb      	ldr	r3, [r7, #12]
 801df36:	2204      	movs	r2, #4
 801df38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801df3c:	88fa      	ldrh	r2, [r7, #6]
 801df3e:	683b      	ldr	r3, [r7, #0]
 801df40:	9300      	str	r3, [sp, #0]
 801df42:	4613      	mov	r3, r2
 801df44:	68ba      	ldr	r2, [r7, #8]
 801df46:	68b9      	ldr	r1, [r7, #8]
 801df48:	68f8      	ldr	r0, [r7, #12]
 801df4a:	f000 f910 	bl	801e16e <HAL_SPI_TransmitReceive>
 801df4e:	4603      	mov	r3, r0
 801df50:	e109      	b.n	801e166 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801df52:	68fb      	ldr	r3, [r7, #12]
 801df54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801df58:	2b01      	cmp	r3, #1
 801df5a:	d101      	bne.n	801df60 <HAL_SPI_Receive+0x52>
 801df5c:	2302      	movs	r3, #2
 801df5e:	e102      	b.n	801e166 <HAL_SPI_Receive+0x258>
 801df60:	68fb      	ldr	r3, [r7, #12]
 801df62:	2201      	movs	r2, #1
 801df64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801df68:	f7fb fbb8 	bl	80196dc <HAL_GetTick>
 801df6c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801df6e:	68fb      	ldr	r3, [r7, #12]
 801df70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801df74:	b2db      	uxtb	r3, r3
 801df76:	2b01      	cmp	r3, #1
 801df78:	d002      	beq.n	801df80 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801df7a:	2302      	movs	r3, #2
 801df7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801df7e:	e0e9      	b.n	801e154 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801df80:	68bb      	ldr	r3, [r7, #8]
 801df82:	2b00      	cmp	r3, #0
 801df84:	d002      	beq.n	801df8c <HAL_SPI_Receive+0x7e>
 801df86:	88fb      	ldrh	r3, [r7, #6]
 801df88:	2b00      	cmp	r3, #0
 801df8a:	d102      	bne.n	801df92 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801df8c:	2301      	movs	r3, #1
 801df8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 801df90:	e0e0      	b.n	801e154 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801df92:	68fb      	ldr	r3, [r7, #12]
 801df94:	2204      	movs	r2, #4
 801df96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801df9a:	68fb      	ldr	r3, [r7, #12]
 801df9c:	2200      	movs	r2, #0
 801df9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801dfa0:	68fb      	ldr	r3, [r7, #12]
 801dfa2:	68ba      	ldr	r2, [r7, #8]
 801dfa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801dfa6:	68fb      	ldr	r3, [r7, #12]
 801dfa8:	88fa      	ldrh	r2, [r7, #6]
 801dfaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801dfae:	68fb      	ldr	r3, [r7, #12]
 801dfb0:	88fa      	ldrh	r2, [r7, #6]
 801dfb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801dfb6:	68fb      	ldr	r3, [r7, #12]
 801dfb8:	2200      	movs	r2, #0
 801dfba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801dfbc:	68fb      	ldr	r3, [r7, #12]
 801dfbe:	2200      	movs	r2, #0
 801dfc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801dfc2:	68fb      	ldr	r3, [r7, #12]
 801dfc4:	2200      	movs	r2, #0
 801dfc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801dfc8:	68fb      	ldr	r3, [r7, #12]
 801dfca:	2200      	movs	r2, #0
 801dfcc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801dfce:	68fb      	ldr	r3, [r7, #12]
 801dfd0:	2200      	movs	r2, #0
 801dfd2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801dfd4:	68fb      	ldr	r3, [r7, #12]
 801dfd6:	68db      	ldr	r3, [r3, #12]
 801dfd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801dfdc:	d908      	bls.n	801dff0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801dfde:	68fb      	ldr	r3, [r7, #12]
 801dfe0:	681b      	ldr	r3, [r3, #0]
 801dfe2:	685a      	ldr	r2, [r3, #4]
 801dfe4:	68fb      	ldr	r3, [r7, #12]
 801dfe6:	681b      	ldr	r3, [r3, #0]
 801dfe8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801dfec:	605a      	str	r2, [r3, #4]
 801dfee:	e007      	b.n	801e000 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801dff0:	68fb      	ldr	r3, [r7, #12]
 801dff2:	681b      	ldr	r3, [r3, #0]
 801dff4:	685a      	ldr	r2, [r3, #4]
 801dff6:	68fb      	ldr	r3, [r7, #12]
 801dff8:	681b      	ldr	r3, [r3, #0]
 801dffa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801dffe:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e000:	68fb      	ldr	r3, [r7, #12]
 801e002:	689b      	ldr	r3, [r3, #8]
 801e004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e008:	d10f      	bne.n	801e02a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801e00a:	68fb      	ldr	r3, [r7, #12]
 801e00c:	681b      	ldr	r3, [r3, #0]
 801e00e:	681a      	ldr	r2, [r3, #0]
 801e010:	68fb      	ldr	r3, [r7, #12]
 801e012:	681b      	ldr	r3, [r3, #0]
 801e014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e018:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801e01a:	68fb      	ldr	r3, [r7, #12]
 801e01c:	681b      	ldr	r3, [r3, #0]
 801e01e:	681a      	ldr	r2, [r3, #0]
 801e020:	68fb      	ldr	r3, [r7, #12]
 801e022:	681b      	ldr	r3, [r3, #0]
 801e024:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801e028:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801e02a:	68fb      	ldr	r3, [r7, #12]
 801e02c:	681b      	ldr	r3, [r3, #0]
 801e02e:	681b      	ldr	r3, [r3, #0]
 801e030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e034:	2b40      	cmp	r3, #64	; 0x40
 801e036:	d007      	beq.n	801e048 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801e038:	68fb      	ldr	r3, [r7, #12]
 801e03a:	681b      	ldr	r3, [r3, #0]
 801e03c:	681a      	ldr	r2, [r3, #0]
 801e03e:	68fb      	ldr	r3, [r7, #12]
 801e040:	681b      	ldr	r3, [r3, #0]
 801e042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801e046:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801e048:	68fb      	ldr	r3, [r7, #12]
 801e04a:	68db      	ldr	r3, [r3, #12]
 801e04c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e050:	d867      	bhi.n	801e122 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801e052:	e030      	b.n	801e0b6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801e054:	68fb      	ldr	r3, [r7, #12]
 801e056:	681b      	ldr	r3, [r3, #0]
 801e058:	689b      	ldr	r3, [r3, #8]
 801e05a:	f003 0301 	and.w	r3, r3, #1
 801e05e:	2b01      	cmp	r3, #1
 801e060:	d117      	bne.n	801e092 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801e062:	68fb      	ldr	r3, [r7, #12]
 801e064:	681b      	ldr	r3, [r3, #0]
 801e066:	f103 020c 	add.w	r2, r3, #12
 801e06a:	68fb      	ldr	r3, [r7, #12]
 801e06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e06e:	7812      	ldrb	r2, [r2, #0]
 801e070:	b2d2      	uxtb	r2, r2
 801e072:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801e074:	68fb      	ldr	r3, [r7, #12]
 801e076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e078:	1c5a      	adds	r2, r3, #1
 801e07a:	68fb      	ldr	r3, [r7, #12]
 801e07c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801e07e:	68fb      	ldr	r3, [r7, #12]
 801e080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e084:	b29b      	uxth	r3, r3
 801e086:	3b01      	subs	r3, #1
 801e088:	b29a      	uxth	r2, r3
 801e08a:	68fb      	ldr	r3, [r7, #12]
 801e08c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801e090:	e011      	b.n	801e0b6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e092:	f7fb fb23 	bl	80196dc <HAL_GetTick>
 801e096:	4602      	mov	r2, r0
 801e098:	693b      	ldr	r3, [r7, #16]
 801e09a:	1ad3      	subs	r3, r2, r3
 801e09c:	683a      	ldr	r2, [r7, #0]
 801e09e:	429a      	cmp	r2, r3
 801e0a0:	d803      	bhi.n	801e0aa <HAL_SPI_Receive+0x19c>
 801e0a2:	683b      	ldr	r3, [r7, #0]
 801e0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e0a8:	d102      	bne.n	801e0b0 <HAL_SPI_Receive+0x1a2>
 801e0aa:	683b      	ldr	r3, [r7, #0]
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	d102      	bne.n	801e0b6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801e0b0:	2303      	movs	r3, #3
 801e0b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 801e0b4:	e04e      	b.n	801e154 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801e0b6:	68fb      	ldr	r3, [r7, #12]
 801e0b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e0bc:	b29b      	uxth	r3, r3
 801e0be:	2b00      	cmp	r3, #0
 801e0c0:	d1c8      	bne.n	801e054 <HAL_SPI_Receive+0x146>
 801e0c2:	e034      	b.n	801e12e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801e0c4:	68fb      	ldr	r3, [r7, #12]
 801e0c6:	681b      	ldr	r3, [r3, #0]
 801e0c8:	689b      	ldr	r3, [r3, #8]
 801e0ca:	f003 0301 	and.w	r3, r3, #1
 801e0ce:	2b01      	cmp	r3, #1
 801e0d0:	d115      	bne.n	801e0fe <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801e0d2:	68fb      	ldr	r3, [r7, #12]
 801e0d4:	681b      	ldr	r3, [r3, #0]
 801e0d6:	68da      	ldr	r2, [r3, #12]
 801e0d8:	68fb      	ldr	r3, [r7, #12]
 801e0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e0dc:	b292      	uxth	r2, r2
 801e0de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801e0e0:	68fb      	ldr	r3, [r7, #12]
 801e0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e0e4:	1c9a      	adds	r2, r3, #2
 801e0e6:	68fb      	ldr	r3, [r7, #12]
 801e0e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801e0ea:	68fb      	ldr	r3, [r7, #12]
 801e0ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e0f0:	b29b      	uxth	r3, r3
 801e0f2:	3b01      	subs	r3, #1
 801e0f4:	b29a      	uxth	r2, r3
 801e0f6:	68fb      	ldr	r3, [r7, #12]
 801e0f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801e0fc:	e011      	b.n	801e122 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e0fe:	f7fb faed 	bl	80196dc <HAL_GetTick>
 801e102:	4602      	mov	r2, r0
 801e104:	693b      	ldr	r3, [r7, #16]
 801e106:	1ad3      	subs	r3, r2, r3
 801e108:	683a      	ldr	r2, [r7, #0]
 801e10a:	429a      	cmp	r2, r3
 801e10c:	d803      	bhi.n	801e116 <HAL_SPI_Receive+0x208>
 801e10e:	683b      	ldr	r3, [r7, #0]
 801e110:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e114:	d102      	bne.n	801e11c <HAL_SPI_Receive+0x20e>
 801e116:	683b      	ldr	r3, [r7, #0]
 801e118:	2b00      	cmp	r3, #0
 801e11a:	d102      	bne.n	801e122 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801e11c:	2303      	movs	r3, #3
 801e11e:	75fb      	strb	r3, [r7, #23]
          goto error;
 801e120:	e018      	b.n	801e154 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801e122:	68fb      	ldr	r3, [r7, #12]
 801e124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e128:	b29b      	uxth	r3, r3
 801e12a:	2b00      	cmp	r3, #0
 801e12c:	d1ca      	bne.n	801e0c4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801e12e:	693a      	ldr	r2, [r7, #16]
 801e130:	6839      	ldr	r1, [r7, #0]
 801e132:	68f8      	ldr	r0, [r7, #12]
 801e134:	f000 fb4c 	bl	801e7d0 <SPI_EndRxTransaction>
 801e138:	4603      	mov	r3, r0
 801e13a:	2b00      	cmp	r3, #0
 801e13c:	d002      	beq.n	801e144 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801e13e:	68fb      	ldr	r3, [r7, #12]
 801e140:	2220      	movs	r2, #32
 801e142:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801e144:	68fb      	ldr	r3, [r7, #12]
 801e146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e148:	2b00      	cmp	r3, #0
 801e14a:	d002      	beq.n	801e152 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801e14c:	2301      	movs	r3, #1
 801e14e:	75fb      	strb	r3, [r7, #23]
 801e150:	e000      	b.n	801e154 <HAL_SPI_Receive+0x246>
  }

error :
 801e152:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801e154:	68fb      	ldr	r3, [r7, #12]
 801e156:	2201      	movs	r2, #1
 801e158:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801e15c:	68fb      	ldr	r3, [r7, #12]
 801e15e:	2200      	movs	r2, #0
 801e160:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801e164:	7dfb      	ldrb	r3, [r7, #23]
}
 801e166:	4618      	mov	r0, r3
 801e168:	3718      	adds	r7, #24
 801e16a:	46bd      	mov	sp, r7
 801e16c:	bd80      	pop	{r7, pc}

0801e16e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801e16e:	b580      	push	{r7, lr}
 801e170:	b08a      	sub	sp, #40	; 0x28
 801e172:	af00      	add	r7, sp, #0
 801e174:	60f8      	str	r0, [r7, #12]
 801e176:	60b9      	str	r1, [r7, #8]
 801e178:	607a      	str	r2, [r7, #4]
 801e17a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801e17c:	2301      	movs	r3, #1
 801e17e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801e180:	2300      	movs	r3, #0
 801e182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801e186:	68fb      	ldr	r3, [r7, #12]
 801e188:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801e18c:	2b01      	cmp	r3, #1
 801e18e:	d101      	bne.n	801e194 <HAL_SPI_TransmitReceive+0x26>
 801e190:	2302      	movs	r3, #2
 801e192:	e1fb      	b.n	801e58c <HAL_SPI_TransmitReceive+0x41e>
 801e194:	68fb      	ldr	r3, [r7, #12]
 801e196:	2201      	movs	r2, #1
 801e198:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801e19c:	f7fb fa9e 	bl	80196dc <HAL_GetTick>
 801e1a0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801e1a2:	68fb      	ldr	r3, [r7, #12]
 801e1a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e1a8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801e1aa:	68fb      	ldr	r3, [r7, #12]
 801e1ac:	685b      	ldr	r3, [r3, #4]
 801e1ae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801e1b0:	887b      	ldrh	r3, [r7, #2]
 801e1b2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801e1b4:	887b      	ldrh	r3, [r7, #2]
 801e1b6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801e1b8:	7efb      	ldrb	r3, [r7, #27]
 801e1ba:	2b01      	cmp	r3, #1
 801e1bc:	d00e      	beq.n	801e1dc <HAL_SPI_TransmitReceive+0x6e>
 801e1be:	697b      	ldr	r3, [r7, #20]
 801e1c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e1c4:	d106      	bne.n	801e1d4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801e1c6:	68fb      	ldr	r3, [r7, #12]
 801e1c8:	689b      	ldr	r3, [r3, #8]
 801e1ca:	2b00      	cmp	r3, #0
 801e1cc:	d102      	bne.n	801e1d4 <HAL_SPI_TransmitReceive+0x66>
 801e1ce:	7efb      	ldrb	r3, [r7, #27]
 801e1d0:	2b04      	cmp	r3, #4
 801e1d2:	d003      	beq.n	801e1dc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801e1d4:	2302      	movs	r3, #2
 801e1d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801e1da:	e1cd      	b.n	801e578 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801e1dc:	68bb      	ldr	r3, [r7, #8]
 801e1de:	2b00      	cmp	r3, #0
 801e1e0:	d005      	beq.n	801e1ee <HAL_SPI_TransmitReceive+0x80>
 801e1e2:	687b      	ldr	r3, [r7, #4]
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d002      	beq.n	801e1ee <HAL_SPI_TransmitReceive+0x80>
 801e1e8:	887b      	ldrh	r3, [r7, #2]
 801e1ea:	2b00      	cmp	r3, #0
 801e1ec:	d103      	bne.n	801e1f6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801e1ee:	2301      	movs	r3, #1
 801e1f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801e1f4:	e1c0      	b.n	801e578 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801e1f6:	68fb      	ldr	r3, [r7, #12]
 801e1f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e1fc:	b2db      	uxtb	r3, r3
 801e1fe:	2b04      	cmp	r3, #4
 801e200:	d003      	beq.n	801e20a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801e202:	68fb      	ldr	r3, [r7, #12]
 801e204:	2205      	movs	r2, #5
 801e206:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801e20a:	68fb      	ldr	r3, [r7, #12]
 801e20c:	2200      	movs	r2, #0
 801e20e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801e210:	68fb      	ldr	r3, [r7, #12]
 801e212:	687a      	ldr	r2, [r7, #4]
 801e214:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801e216:	68fb      	ldr	r3, [r7, #12]
 801e218:	887a      	ldrh	r2, [r7, #2]
 801e21a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801e21e:	68fb      	ldr	r3, [r7, #12]
 801e220:	887a      	ldrh	r2, [r7, #2]
 801e222:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801e226:	68fb      	ldr	r3, [r7, #12]
 801e228:	68ba      	ldr	r2, [r7, #8]
 801e22a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801e22c:	68fb      	ldr	r3, [r7, #12]
 801e22e:	887a      	ldrh	r2, [r7, #2]
 801e230:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801e232:	68fb      	ldr	r3, [r7, #12]
 801e234:	887a      	ldrh	r2, [r7, #2]
 801e236:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801e238:	68fb      	ldr	r3, [r7, #12]
 801e23a:	2200      	movs	r2, #0
 801e23c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801e23e:	68fb      	ldr	r3, [r7, #12]
 801e240:	2200      	movs	r2, #0
 801e242:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801e244:	68fb      	ldr	r3, [r7, #12]
 801e246:	68db      	ldr	r3, [r3, #12]
 801e248:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e24c:	d802      	bhi.n	801e254 <HAL_SPI_TransmitReceive+0xe6>
 801e24e:	8a3b      	ldrh	r3, [r7, #16]
 801e250:	2b01      	cmp	r3, #1
 801e252:	d908      	bls.n	801e266 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e254:	68fb      	ldr	r3, [r7, #12]
 801e256:	681b      	ldr	r3, [r3, #0]
 801e258:	685a      	ldr	r2, [r3, #4]
 801e25a:	68fb      	ldr	r3, [r7, #12]
 801e25c:	681b      	ldr	r3, [r3, #0]
 801e25e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801e262:	605a      	str	r2, [r3, #4]
 801e264:	e007      	b.n	801e276 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e266:	68fb      	ldr	r3, [r7, #12]
 801e268:	681b      	ldr	r3, [r3, #0]
 801e26a:	685a      	ldr	r2, [r3, #4]
 801e26c:	68fb      	ldr	r3, [r7, #12]
 801e26e:	681b      	ldr	r3, [r3, #0]
 801e270:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e274:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801e276:	68fb      	ldr	r3, [r7, #12]
 801e278:	681b      	ldr	r3, [r3, #0]
 801e27a:	681b      	ldr	r3, [r3, #0]
 801e27c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e280:	2b40      	cmp	r3, #64	; 0x40
 801e282:	d007      	beq.n	801e294 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801e284:	68fb      	ldr	r3, [r7, #12]
 801e286:	681b      	ldr	r3, [r3, #0]
 801e288:	681a      	ldr	r2, [r3, #0]
 801e28a:	68fb      	ldr	r3, [r7, #12]
 801e28c:	681b      	ldr	r3, [r3, #0]
 801e28e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801e292:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801e294:	68fb      	ldr	r3, [r7, #12]
 801e296:	68db      	ldr	r3, [r3, #12]
 801e298:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e29c:	d97c      	bls.n	801e398 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e29e:	68fb      	ldr	r3, [r7, #12]
 801e2a0:	685b      	ldr	r3, [r3, #4]
 801e2a2:	2b00      	cmp	r3, #0
 801e2a4:	d002      	beq.n	801e2ac <HAL_SPI_TransmitReceive+0x13e>
 801e2a6:	8a7b      	ldrh	r3, [r7, #18]
 801e2a8:	2b01      	cmp	r3, #1
 801e2aa:	d169      	bne.n	801e380 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e2ac:	68fb      	ldr	r3, [r7, #12]
 801e2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e2b0:	881a      	ldrh	r2, [r3, #0]
 801e2b2:	68fb      	ldr	r3, [r7, #12]
 801e2b4:	681b      	ldr	r3, [r3, #0]
 801e2b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801e2b8:	68fb      	ldr	r3, [r7, #12]
 801e2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e2bc:	1c9a      	adds	r2, r3, #2
 801e2be:	68fb      	ldr	r3, [r7, #12]
 801e2c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801e2c2:	68fb      	ldr	r3, [r7, #12]
 801e2c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e2c6:	b29b      	uxth	r3, r3
 801e2c8:	3b01      	subs	r3, #1
 801e2ca:	b29a      	uxth	r2, r3
 801e2cc:	68fb      	ldr	r3, [r7, #12]
 801e2ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e2d0:	e056      	b.n	801e380 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801e2d2:	68fb      	ldr	r3, [r7, #12]
 801e2d4:	681b      	ldr	r3, [r3, #0]
 801e2d6:	689b      	ldr	r3, [r3, #8]
 801e2d8:	f003 0302 	and.w	r3, r3, #2
 801e2dc:	2b02      	cmp	r3, #2
 801e2de:	d11b      	bne.n	801e318 <HAL_SPI_TransmitReceive+0x1aa>
 801e2e0:	68fb      	ldr	r3, [r7, #12]
 801e2e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e2e4:	b29b      	uxth	r3, r3
 801e2e6:	2b00      	cmp	r3, #0
 801e2e8:	d016      	beq.n	801e318 <HAL_SPI_TransmitReceive+0x1aa>
 801e2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e2ec:	2b01      	cmp	r3, #1
 801e2ee:	d113      	bne.n	801e318 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e2f0:	68fb      	ldr	r3, [r7, #12]
 801e2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e2f4:	881a      	ldrh	r2, [r3, #0]
 801e2f6:	68fb      	ldr	r3, [r7, #12]
 801e2f8:	681b      	ldr	r3, [r3, #0]
 801e2fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e2fc:	68fb      	ldr	r3, [r7, #12]
 801e2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e300:	1c9a      	adds	r2, r3, #2
 801e302:	68fb      	ldr	r3, [r7, #12]
 801e304:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801e306:	68fb      	ldr	r3, [r7, #12]
 801e308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e30a:	b29b      	uxth	r3, r3
 801e30c:	3b01      	subs	r3, #1
 801e30e:	b29a      	uxth	r2, r3
 801e310:	68fb      	ldr	r3, [r7, #12]
 801e312:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801e314:	2300      	movs	r3, #0
 801e316:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801e318:	68fb      	ldr	r3, [r7, #12]
 801e31a:	681b      	ldr	r3, [r3, #0]
 801e31c:	689b      	ldr	r3, [r3, #8]
 801e31e:	f003 0301 	and.w	r3, r3, #1
 801e322:	2b01      	cmp	r3, #1
 801e324:	d11c      	bne.n	801e360 <HAL_SPI_TransmitReceive+0x1f2>
 801e326:	68fb      	ldr	r3, [r7, #12]
 801e328:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e32c:	b29b      	uxth	r3, r3
 801e32e:	2b00      	cmp	r3, #0
 801e330:	d016      	beq.n	801e360 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801e332:	68fb      	ldr	r3, [r7, #12]
 801e334:	681b      	ldr	r3, [r3, #0]
 801e336:	68da      	ldr	r2, [r3, #12]
 801e338:	68fb      	ldr	r3, [r7, #12]
 801e33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e33c:	b292      	uxth	r2, r2
 801e33e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801e340:	68fb      	ldr	r3, [r7, #12]
 801e342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e344:	1c9a      	adds	r2, r3, #2
 801e346:	68fb      	ldr	r3, [r7, #12]
 801e348:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801e34a:	68fb      	ldr	r3, [r7, #12]
 801e34c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e350:	b29b      	uxth	r3, r3
 801e352:	3b01      	subs	r3, #1
 801e354:	b29a      	uxth	r2, r3
 801e356:	68fb      	ldr	r3, [r7, #12]
 801e358:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801e35c:	2301      	movs	r3, #1
 801e35e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801e360:	f7fb f9bc 	bl	80196dc <HAL_GetTick>
 801e364:	4602      	mov	r2, r0
 801e366:	69fb      	ldr	r3, [r7, #28]
 801e368:	1ad3      	subs	r3, r2, r3
 801e36a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e36c:	429a      	cmp	r2, r3
 801e36e:	d807      	bhi.n	801e380 <HAL_SPI_TransmitReceive+0x212>
 801e370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e372:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e376:	d003      	beq.n	801e380 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801e378:	2303      	movs	r3, #3
 801e37a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801e37e:	e0fb      	b.n	801e578 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e380:	68fb      	ldr	r3, [r7, #12]
 801e382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e384:	b29b      	uxth	r3, r3
 801e386:	2b00      	cmp	r3, #0
 801e388:	d1a3      	bne.n	801e2d2 <HAL_SPI_TransmitReceive+0x164>
 801e38a:	68fb      	ldr	r3, [r7, #12]
 801e38c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e390:	b29b      	uxth	r3, r3
 801e392:	2b00      	cmp	r3, #0
 801e394:	d19d      	bne.n	801e2d2 <HAL_SPI_TransmitReceive+0x164>
 801e396:	e0df      	b.n	801e558 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e398:	68fb      	ldr	r3, [r7, #12]
 801e39a:	685b      	ldr	r3, [r3, #4]
 801e39c:	2b00      	cmp	r3, #0
 801e39e:	d003      	beq.n	801e3a8 <HAL_SPI_TransmitReceive+0x23a>
 801e3a0:	8a7b      	ldrh	r3, [r7, #18]
 801e3a2:	2b01      	cmp	r3, #1
 801e3a4:	f040 80cb 	bne.w	801e53e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801e3a8:	68fb      	ldr	r3, [r7, #12]
 801e3aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e3ac:	b29b      	uxth	r3, r3
 801e3ae:	2b01      	cmp	r3, #1
 801e3b0:	d912      	bls.n	801e3d8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e3b2:	68fb      	ldr	r3, [r7, #12]
 801e3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e3b6:	881a      	ldrh	r2, [r3, #0]
 801e3b8:	68fb      	ldr	r3, [r7, #12]
 801e3ba:	681b      	ldr	r3, [r3, #0]
 801e3bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e3be:	68fb      	ldr	r3, [r7, #12]
 801e3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e3c2:	1c9a      	adds	r2, r3, #2
 801e3c4:	68fb      	ldr	r3, [r7, #12]
 801e3c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801e3c8:	68fb      	ldr	r3, [r7, #12]
 801e3ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e3cc:	b29b      	uxth	r3, r3
 801e3ce:	3b02      	subs	r3, #2
 801e3d0:	b29a      	uxth	r2, r3
 801e3d2:	68fb      	ldr	r3, [r7, #12]
 801e3d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e3d6:	e0b2      	b.n	801e53e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801e3d8:	68fb      	ldr	r3, [r7, #12]
 801e3da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e3dc:	68fb      	ldr	r3, [r7, #12]
 801e3de:	681b      	ldr	r3, [r3, #0]
 801e3e0:	330c      	adds	r3, #12
 801e3e2:	7812      	ldrb	r2, [r2, #0]
 801e3e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801e3e6:	68fb      	ldr	r3, [r7, #12]
 801e3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e3ea:	1c5a      	adds	r2, r3, #1
 801e3ec:	68fb      	ldr	r3, [r7, #12]
 801e3ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801e3f0:	68fb      	ldr	r3, [r7, #12]
 801e3f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e3f4:	b29b      	uxth	r3, r3
 801e3f6:	3b01      	subs	r3, #1
 801e3f8:	b29a      	uxth	r2, r3
 801e3fa:	68fb      	ldr	r3, [r7, #12]
 801e3fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e3fe:	e09e      	b.n	801e53e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801e400:	68fb      	ldr	r3, [r7, #12]
 801e402:	681b      	ldr	r3, [r3, #0]
 801e404:	689b      	ldr	r3, [r3, #8]
 801e406:	f003 0302 	and.w	r3, r3, #2
 801e40a:	2b02      	cmp	r3, #2
 801e40c:	d134      	bne.n	801e478 <HAL_SPI_TransmitReceive+0x30a>
 801e40e:	68fb      	ldr	r3, [r7, #12]
 801e410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e412:	b29b      	uxth	r3, r3
 801e414:	2b00      	cmp	r3, #0
 801e416:	d02f      	beq.n	801e478 <HAL_SPI_TransmitReceive+0x30a>
 801e418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e41a:	2b01      	cmp	r3, #1
 801e41c:	d12c      	bne.n	801e478 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801e41e:	68fb      	ldr	r3, [r7, #12]
 801e420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e422:	b29b      	uxth	r3, r3
 801e424:	2b01      	cmp	r3, #1
 801e426:	d912      	bls.n	801e44e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e428:	68fb      	ldr	r3, [r7, #12]
 801e42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e42c:	881a      	ldrh	r2, [r3, #0]
 801e42e:	68fb      	ldr	r3, [r7, #12]
 801e430:	681b      	ldr	r3, [r3, #0]
 801e432:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801e434:	68fb      	ldr	r3, [r7, #12]
 801e436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e438:	1c9a      	adds	r2, r3, #2
 801e43a:	68fb      	ldr	r3, [r7, #12]
 801e43c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801e43e:	68fb      	ldr	r3, [r7, #12]
 801e440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e442:	b29b      	uxth	r3, r3
 801e444:	3b02      	subs	r3, #2
 801e446:	b29a      	uxth	r2, r3
 801e448:	68fb      	ldr	r3, [r7, #12]
 801e44a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e44c:	e012      	b.n	801e474 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801e44e:	68fb      	ldr	r3, [r7, #12]
 801e450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e452:	68fb      	ldr	r3, [r7, #12]
 801e454:	681b      	ldr	r3, [r3, #0]
 801e456:	330c      	adds	r3, #12
 801e458:	7812      	ldrb	r2, [r2, #0]
 801e45a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801e45c:	68fb      	ldr	r3, [r7, #12]
 801e45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e460:	1c5a      	adds	r2, r3, #1
 801e462:	68fb      	ldr	r3, [r7, #12]
 801e464:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801e466:	68fb      	ldr	r3, [r7, #12]
 801e468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e46a:	b29b      	uxth	r3, r3
 801e46c:	3b01      	subs	r3, #1
 801e46e:	b29a      	uxth	r2, r3
 801e470:	68fb      	ldr	r3, [r7, #12]
 801e472:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801e474:	2300      	movs	r3, #0
 801e476:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801e478:	68fb      	ldr	r3, [r7, #12]
 801e47a:	681b      	ldr	r3, [r3, #0]
 801e47c:	689b      	ldr	r3, [r3, #8]
 801e47e:	f003 0301 	and.w	r3, r3, #1
 801e482:	2b01      	cmp	r3, #1
 801e484:	d148      	bne.n	801e518 <HAL_SPI_TransmitReceive+0x3aa>
 801e486:	68fb      	ldr	r3, [r7, #12]
 801e488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e48c:	b29b      	uxth	r3, r3
 801e48e:	2b00      	cmp	r3, #0
 801e490:	d042      	beq.n	801e518 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801e492:	68fb      	ldr	r3, [r7, #12]
 801e494:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e498:	b29b      	uxth	r3, r3
 801e49a:	2b01      	cmp	r3, #1
 801e49c:	d923      	bls.n	801e4e6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801e49e:	68fb      	ldr	r3, [r7, #12]
 801e4a0:	681b      	ldr	r3, [r3, #0]
 801e4a2:	68da      	ldr	r2, [r3, #12]
 801e4a4:	68fb      	ldr	r3, [r7, #12]
 801e4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e4a8:	b292      	uxth	r2, r2
 801e4aa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801e4ac:	68fb      	ldr	r3, [r7, #12]
 801e4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e4b0:	1c9a      	adds	r2, r3, #2
 801e4b2:	68fb      	ldr	r3, [r7, #12]
 801e4b4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801e4b6:	68fb      	ldr	r3, [r7, #12]
 801e4b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e4bc:	b29b      	uxth	r3, r3
 801e4be:	3b02      	subs	r3, #2
 801e4c0:	b29a      	uxth	r2, r3
 801e4c2:	68fb      	ldr	r3, [r7, #12]
 801e4c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801e4c8:	68fb      	ldr	r3, [r7, #12]
 801e4ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e4ce:	b29b      	uxth	r3, r3
 801e4d0:	2b01      	cmp	r3, #1
 801e4d2:	d81f      	bhi.n	801e514 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e4d4:	68fb      	ldr	r3, [r7, #12]
 801e4d6:	681b      	ldr	r3, [r3, #0]
 801e4d8:	685a      	ldr	r2, [r3, #4]
 801e4da:	68fb      	ldr	r3, [r7, #12]
 801e4dc:	681b      	ldr	r3, [r3, #0]
 801e4de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e4e2:	605a      	str	r2, [r3, #4]
 801e4e4:	e016      	b.n	801e514 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801e4e6:	68fb      	ldr	r3, [r7, #12]
 801e4e8:	681b      	ldr	r3, [r3, #0]
 801e4ea:	f103 020c 	add.w	r2, r3, #12
 801e4ee:	68fb      	ldr	r3, [r7, #12]
 801e4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e4f2:	7812      	ldrb	r2, [r2, #0]
 801e4f4:	b2d2      	uxtb	r2, r2
 801e4f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801e4f8:	68fb      	ldr	r3, [r7, #12]
 801e4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e4fc:	1c5a      	adds	r2, r3, #1
 801e4fe:	68fb      	ldr	r3, [r7, #12]
 801e500:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801e502:	68fb      	ldr	r3, [r7, #12]
 801e504:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e508:	b29b      	uxth	r3, r3
 801e50a:	3b01      	subs	r3, #1
 801e50c:	b29a      	uxth	r2, r3
 801e50e:	68fb      	ldr	r3, [r7, #12]
 801e510:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801e514:	2301      	movs	r3, #1
 801e516:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801e518:	f7fb f8e0 	bl	80196dc <HAL_GetTick>
 801e51c:	4602      	mov	r2, r0
 801e51e:	69fb      	ldr	r3, [r7, #28]
 801e520:	1ad3      	subs	r3, r2, r3
 801e522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e524:	429a      	cmp	r2, r3
 801e526:	d803      	bhi.n	801e530 <HAL_SPI_TransmitReceive+0x3c2>
 801e528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e52e:	d102      	bne.n	801e536 <HAL_SPI_TransmitReceive+0x3c8>
 801e530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e532:	2b00      	cmp	r3, #0
 801e534:	d103      	bne.n	801e53e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801e536:	2303      	movs	r3, #3
 801e538:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801e53c:	e01c      	b.n	801e578 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e53e:	68fb      	ldr	r3, [r7, #12]
 801e540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e542:	b29b      	uxth	r3, r3
 801e544:	2b00      	cmp	r3, #0
 801e546:	f47f af5b 	bne.w	801e400 <HAL_SPI_TransmitReceive+0x292>
 801e54a:	68fb      	ldr	r3, [r7, #12]
 801e54c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e550:	b29b      	uxth	r3, r3
 801e552:	2b00      	cmp	r3, #0
 801e554:	f47f af54 	bne.w	801e400 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801e558:	69fa      	ldr	r2, [r7, #28]
 801e55a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e55c:	68f8      	ldr	r0, [r7, #12]
 801e55e:	f000 f98f 	bl	801e880 <SPI_EndRxTxTransaction>
 801e562:	4603      	mov	r3, r0
 801e564:	2b00      	cmp	r3, #0
 801e566:	d006      	beq.n	801e576 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801e568:	2301      	movs	r3, #1
 801e56a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801e56e:	68fb      	ldr	r3, [r7, #12]
 801e570:	2220      	movs	r2, #32
 801e572:	661a      	str	r2, [r3, #96]	; 0x60
 801e574:	e000      	b.n	801e578 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801e576:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801e578:	68fb      	ldr	r3, [r7, #12]
 801e57a:	2201      	movs	r2, #1
 801e57c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801e580:	68fb      	ldr	r3, [r7, #12]
 801e582:	2200      	movs	r2, #0
 801e584:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801e588:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801e58c:	4618      	mov	r0, r3
 801e58e:	3728      	adds	r7, #40	; 0x28
 801e590:	46bd      	mov	sp, r7
 801e592:	bd80      	pop	{r7, pc}

0801e594 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801e594:	b580      	push	{r7, lr}
 801e596:	b088      	sub	sp, #32
 801e598:	af00      	add	r7, sp, #0
 801e59a:	60f8      	str	r0, [r7, #12]
 801e59c:	60b9      	str	r1, [r7, #8]
 801e59e:	603b      	str	r3, [r7, #0]
 801e5a0:	4613      	mov	r3, r2
 801e5a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801e5a4:	f7fb f89a 	bl	80196dc <HAL_GetTick>
 801e5a8:	4602      	mov	r2, r0
 801e5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e5ac:	1a9b      	subs	r3, r3, r2
 801e5ae:	683a      	ldr	r2, [r7, #0]
 801e5b0:	4413      	add	r3, r2
 801e5b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801e5b4:	f7fb f892 	bl	80196dc <HAL_GetTick>
 801e5b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801e5ba:	4b39      	ldr	r3, [pc, #228]	; (801e6a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801e5bc:	681b      	ldr	r3, [r3, #0]
 801e5be:	015b      	lsls	r3, r3, #5
 801e5c0:	0d1b      	lsrs	r3, r3, #20
 801e5c2:	69fa      	ldr	r2, [r7, #28]
 801e5c4:	fb02 f303 	mul.w	r3, r2, r3
 801e5c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801e5ca:	e054      	b.n	801e676 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801e5cc:	683b      	ldr	r3, [r7, #0]
 801e5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e5d2:	d050      	beq.n	801e676 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801e5d4:	f7fb f882 	bl	80196dc <HAL_GetTick>
 801e5d8:	4602      	mov	r2, r0
 801e5da:	69bb      	ldr	r3, [r7, #24]
 801e5dc:	1ad3      	subs	r3, r2, r3
 801e5de:	69fa      	ldr	r2, [r7, #28]
 801e5e0:	429a      	cmp	r2, r3
 801e5e2:	d902      	bls.n	801e5ea <SPI_WaitFlagStateUntilTimeout+0x56>
 801e5e4:	69fb      	ldr	r3, [r7, #28]
 801e5e6:	2b00      	cmp	r3, #0
 801e5e8:	d13d      	bne.n	801e666 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801e5ea:	68fb      	ldr	r3, [r7, #12]
 801e5ec:	681b      	ldr	r3, [r3, #0]
 801e5ee:	685a      	ldr	r2, [r3, #4]
 801e5f0:	68fb      	ldr	r3, [r7, #12]
 801e5f2:	681b      	ldr	r3, [r3, #0]
 801e5f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801e5f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e5fa:	68fb      	ldr	r3, [r7, #12]
 801e5fc:	685b      	ldr	r3, [r3, #4]
 801e5fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e602:	d111      	bne.n	801e628 <SPI_WaitFlagStateUntilTimeout+0x94>
 801e604:	68fb      	ldr	r3, [r7, #12]
 801e606:	689b      	ldr	r3, [r3, #8]
 801e608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e60c:	d004      	beq.n	801e618 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e60e:	68fb      	ldr	r3, [r7, #12]
 801e610:	689b      	ldr	r3, [r3, #8]
 801e612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e616:	d107      	bne.n	801e628 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801e618:	68fb      	ldr	r3, [r7, #12]
 801e61a:	681b      	ldr	r3, [r3, #0]
 801e61c:	681a      	ldr	r2, [r3, #0]
 801e61e:	68fb      	ldr	r3, [r7, #12]
 801e620:	681b      	ldr	r3, [r3, #0]
 801e622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e626:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801e628:	68fb      	ldr	r3, [r7, #12]
 801e62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e62c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e630:	d10f      	bne.n	801e652 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801e632:	68fb      	ldr	r3, [r7, #12]
 801e634:	681b      	ldr	r3, [r3, #0]
 801e636:	681a      	ldr	r2, [r3, #0]
 801e638:	68fb      	ldr	r3, [r7, #12]
 801e63a:	681b      	ldr	r3, [r3, #0]
 801e63c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801e640:	601a      	str	r2, [r3, #0]
 801e642:	68fb      	ldr	r3, [r7, #12]
 801e644:	681b      	ldr	r3, [r3, #0]
 801e646:	681a      	ldr	r2, [r3, #0]
 801e648:	68fb      	ldr	r3, [r7, #12]
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801e650:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801e652:	68fb      	ldr	r3, [r7, #12]
 801e654:	2201      	movs	r2, #1
 801e656:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801e65a:	68fb      	ldr	r3, [r7, #12]
 801e65c:	2200      	movs	r2, #0
 801e65e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801e662:	2303      	movs	r3, #3
 801e664:	e017      	b.n	801e696 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801e666:	697b      	ldr	r3, [r7, #20]
 801e668:	2b00      	cmp	r3, #0
 801e66a:	d101      	bne.n	801e670 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801e66c:	2300      	movs	r3, #0
 801e66e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801e670:	697b      	ldr	r3, [r7, #20]
 801e672:	3b01      	subs	r3, #1
 801e674:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801e676:	68fb      	ldr	r3, [r7, #12]
 801e678:	681b      	ldr	r3, [r3, #0]
 801e67a:	689a      	ldr	r2, [r3, #8]
 801e67c:	68bb      	ldr	r3, [r7, #8]
 801e67e:	4013      	ands	r3, r2
 801e680:	68ba      	ldr	r2, [r7, #8]
 801e682:	429a      	cmp	r2, r3
 801e684:	bf0c      	ite	eq
 801e686:	2301      	moveq	r3, #1
 801e688:	2300      	movne	r3, #0
 801e68a:	b2db      	uxtb	r3, r3
 801e68c:	461a      	mov	r2, r3
 801e68e:	79fb      	ldrb	r3, [r7, #7]
 801e690:	429a      	cmp	r2, r3
 801e692:	d19b      	bne.n	801e5cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801e694:	2300      	movs	r3, #0
}
 801e696:	4618      	mov	r0, r3
 801e698:	3720      	adds	r7, #32
 801e69a:	46bd      	mov	sp, r7
 801e69c:	bd80      	pop	{r7, pc}
 801e69e:	bf00      	nop
 801e6a0:	20000000 	.word	0x20000000

0801e6a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801e6a4:	b580      	push	{r7, lr}
 801e6a6:	b08a      	sub	sp, #40	; 0x28
 801e6a8:	af00      	add	r7, sp, #0
 801e6aa:	60f8      	str	r0, [r7, #12]
 801e6ac:	60b9      	str	r1, [r7, #8]
 801e6ae:	607a      	str	r2, [r7, #4]
 801e6b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801e6b2:	2300      	movs	r3, #0
 801e6b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801e6b6:	f7fb f811 	bl	80196dc <HAL_GetTick>
 801e6ba:	4602      	mov	r2, r0
 801e6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e6be:	1a9b      	subs	r3, r3, r2
 801e6c0:	683a      	ldr	r2, [r7, #0]
 801e6c2:	4413      	add	r3, r2
 801e6c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801e6c6:	f7fb f809 	bl	80196dc <HAL_GetTick>
 801e6ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801e6cc:	68fb      	ldr	r3, [r7, #12]
 801e6ce:	681b      	ldr	r3, [r3, #0]
 801e6d0:	330c      	adds	r3, #12
 801e6d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801e6d4:	4b3d      	ldr	r3, [pc, #244]	; (801e7cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 801e6d6:	681a      	ldr	r2, [r3, #0]
 801e6d8:	4613      	mov	r3, r2
 801e6da:	009b      	lsls	r3, r3, #2
 801e6dc:	4413      	add	r3, r2
 801e6de:	00da      	lsls	r2, r3, #3
 801e6e0:	1ad3      	subs	r3, r2, r3
 801e6e2:	0d1b      	lsrs	r3, r3, #20
 801e6e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e6e6:	fb02 f303 	mul.w	r3, r2, r3
 801e6ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801e6ec:	e060      	b.n	801e7b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801e6ee:	68bb      	ldr	r3, [r7, #8]
 801e6f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801e6f4:	d107      	bne.n	801e706 <SPI_WaitFifoStateUntilTimeout+0x62>
 801e6f6:	687b      	ldr	r3, [r7, #4]
 801e6f8:	2b00      	cmp	r3, #0
 801e6fa:	d104      	bne.n	801e706 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801e6fc:	69fb      	ldr	r3, [r7, #28]
 801e6fe:	781b      	ldrb	r3, [r3, #0]
 801e700:	b2db      	uxtb	r3, r3
 801e702:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801e704:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801e706:	683b      	ldr	r3, [r7, #0]
 801e708:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e70c:	d050      	beq.n	801e7b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801e70e:	f7fa ffe5 	bl	80196dc <HAL_GetTick>
 801e712:	4602      	mov	r2, r0
 801e714:	6a3b      	ldr	r3, [r7, #32]
 801e716:	1ad3      	subs	r3, r2, r3
 801e718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e71a:	429a      	cmp	r2, r3
 801e71c:	d902      	bls.n	801e724 <SPI_WaitFifoStateUntilTimeout+0x80>
 801e71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e720:	2b00      	cmp	r3, #0
 801e722:	d13d      	bne.n	801e7a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801e724:	68fb      	ldr	r3, [r7, #12]
 801e726:	681b      	ldr	r3, [r3, #0]
 801e728:	685a      	ldr	r2, [r3, #4]
 801e72a:	68fb      	ldr	r3, [r7, #12]
 801e72c:	681b      	ldr	r3, [r3, #0]
 801e72e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801e732:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e734:	68fb      	ldr	r3, [r7, #12]
 801e736:	685b      	ldr	r3, [r3, #4]
 801e738:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e73c:	d111      	bne.n	801e762 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801e73e:	68fb      	ldr	r3, [r7, #12]
 801e740:	689b      	ldr	r3, [r3, #8]
 801e742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e746:	d004      	beq.n	801e752 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e748:	68fb      	ldr	r3, [r7, #12]
 801e74a:	689b      	ldr	r3, [r3, #8]
 801e74c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e750:	d107      	bne.n	801e762 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801e752:	68fb      	ldr	r3, [r7, #12]
 801e754:	681b      	ldr	r3, [r3, #0]
 801e756:	681a      	ldr	r2, [r3, #0]
 801e758:	68fb      	ldr	r3, [r7, #12]
 801e75a:	681b      	ldr	r3, [r3, #0]
 801e75c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e760:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801e762:	68fb      	ldr	r3, [r7, #12]
 801e764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e76a:	d10f      	bne.n	801e78c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801e76c:	68fb      	ldr	r3, [r7, #12]
 801e76e:	681b      	ldr	r3, [r3, #0]
 801e770:	681a      	ldr	r2, [r3, #0]
 801e772:	68fb      	ldr	r3, [r7, #12]
 801e774:	681b      	ldr	r3, [r3, #0]
 801e776:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801e77a:	601a      	str	r2, [r3, #0]
 801e77c:	68fb      	ldr	r3, [r7, #12]
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	681a      	ldr	r2, [r3, #0]
 801e782:	68fb      	ldr	r3, [r7, #12]
 801e784:	681b      	ldr	r3, [r3, #0]
 801e786:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801e78a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801e78c:	68fb      	ldr	r3, [r7, #12]
 801e78e:	2201      	movs	r2, #1
 801e790:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801e794:	68fb      	ldr	r3, [r7, #12]
 801e796:	2200      	movs	r2, #0
 801e798:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801e79c:	2303      	movs	r3, #3
 801e79e:	e010      	b.n	801e7c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801e7a0:	69bb      	ldr	r3, [r7, #24]
 801e7a2:	2b00      	cmp	r3, #0
 801e7a4:	d101      	bne.n	801e7aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801e7a6:	2300      	movs	r3, #0
 801e7a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801e7aa:	69bb      	ldr	r3, [r7, #24]
 801e7ac:	3b01      	subs	r3, #1
 801e7ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801e7b0:	68fb      	ldr	r3, [r7, #12]
 801e7b2:	681b      	ldr	r3, [r3, #0]
 801e7b4:	689a      	ldr	r2, [r3, #8]
 801e7b6:	68bb      	ldr	r3, [r7, #8]
 801e7b8:	4013      	ands	r3, r2
 801e7ba:	687a      	ldr	r2, [r7, #4]
 801e7bc:	429a      	cmp	r2, r3
 801e7be:	d196      	bne.n	801e6ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801e7c0:	2300      	movs	r3, #0
}
 801e7c2:	4618      	mov	r0, r3
 801e7c4:	3728      	adds	r7, #40	; 0x28
 801e7c6:	46bd      	mov	sp, r7
 801e7c8:	bd80      	pop	{r7, pc}
 801e7ca:	bf00      	nop
 801e7cc:	20000000 	.word	0x20000000

0801e7d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801e7d0:	b580      	push	{r7, lr}
 801e7d2:	b086      	sub	sp, #24
 801e7d4:	af02      	add	r7, sp, #8
 801e7d6:	60f8      	str	r0, [r7, #12]
 801e7d8:	60b9      	str	r1, [r7, #8]
 801e7da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e7dc:	68fb      	ldr	r3, [r7, #12]
 801e7de:	685b      	ldr	r3, [r3, #4]
 801e7e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e7e4:	d111      	bne.n	801e80a <SPI_EndRxTransaction+0x3a>
 801e7e6:	68fb      	ldr	r3, [r7, #12]
 801e7e8:	689b      	ldr	r3, [r3, #8]
 801e7ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e7ee:	d004      	beq.n	801e7fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e7f0:	68fb      	ldr	r3, [r7, #12]
 801e7f2:	689b      	ldr	r3, [r3, #8]
 801e7f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e7f8:	d107      	bne.n	801e80a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801e7fa:	68fb      	ldr	r3, [r7, #12]
 801e7fc:	681b      	ldr	r3, [r3, #0]
 801e7fe:	681a      	ldr	r2, [r3, #0]
 801e800:	68fb      	ldr	r3, [r7, #12]
 801e802:	681b      	ldr	r3, [r3, #0]
 801e804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e808:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801e80a:	687b      	ldr	r3, [r7, #4]
 801e80c:	9300      	str	r3, [sp, #0]
 801e80e:	68bb      	ldr	r3, [r7, #8]
 801e810:	2200      	movs	r2, #0
 801e812:	2180      	movs	r1, #128	; 0x80
 801e814:	68f8      	ldr	r0, [r7, #12]
 801e816:	f7ff febd 	bl	801e594 <SPI_WaitFlagStateUntilTimeout>
 801e81a:	4603      	mov	r3, r0
 801e81c:	2b00      	cmp	r3, #0
 801e81e:	d007      	beq.n	801e830 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e820:	68fb      	ldr	r3, [r7, #12]
 801e822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e824:	f043 0220 	orr.w	r2, r3, #32
 801e828:	68fb      	ldr	r3, [r7, #12]
 801e82a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801e82c:	2303      	movs	r3, #3
 801e82e:	e023      	b.n	801e878 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e830:	68fb      	ldr	r3, [r7, #12]
 801e832:	685b      	ldr	r3, [r3, #4]
 801e834:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e838:	d11d      	bne.n	801e876 <SPI_EndRxTransaction+0xa6>
 801e83a:	68fb      	ldr	r3, [r7, #12]
 801e83c:	689b      	ldr	r3, [r3, #8]
 801e83e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e842:	d004      	beq.n	801e84e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e844:	68fb      	ldr	r3, [r7, #12]
 801e846:	689b      	ldr	r3, [r3, #8]
 801e848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e84c:	d113      	bne.n	801e876 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801e84e:	687b      	ldr	r3, [r7, #4]
 801e850:	9300      	str	r3, [sp, #0]
 801e852:	68bb      	ldr	r3, [r7, #8]
 801e854:	2200      	movs	r2, #0
 801e856:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801e85a:	68f8      	ldr	r0, [r7, #12]
 801e85c:	f7ff ff22 	bl	801e6a4 <SPI_WaitFifoStateUntilTimeout>
 801e860:	4603      	mov	r3, r0
 801e862:	2b00      	cmp	r3, #0
 801e864:	d007      	beq.n	801e876 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e866:	68fb      	ldr	r3, [r7, #12]
 801e868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e86a:	f043 0220 	orr.w	r2, r3, #32
 801e86e:	68fb      	ldr	r3, [r7, #12]
 801e870:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801e872:	2303      	movs	r3, #3
 801e874:	e000      	b.n	801e878 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801e876:	2300      	movs	r3, #0
}
 801e878:	4618      	mov	r0, r3
 801e87a:	3710      	adds	r7, #16
 801e87c:	46bd      	mov	sp, r7
 801e87e:	bd80      	pop	{r7, pc}

0801e880 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801e880:	b580      	push	{r7, lr}
 801e882:	b086      	sub	sp, #24
 801e884:	af02      	add	r7, sp, #8
 801e886:	60f8      	str	r0, [r7, #12]
 801e888:	60b9      	str	r1, [r7, #8]
 801e88a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801e88c:	687b      	ldr	r3, [r7, #4]
 801e88e:	9300      	str	r3, [sp, #0]
 801e890:	68bb      	ldr	r3, [r7, #8]
 801e892:	2200      	movs	r2, #0
 801e894:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801e898:	68f8      	ldr	r0, [r7, #12]
 801e89a:	f7ff ff03 	bl	801e6a4 <SPI_WaitFifoStateUntilTimeout>
 801e89e:	4603      	mov	r3, r0
 801e8a0:	2b00      	cmp	r3, #0
 801e8a2:	d007      	beq.n	801e8b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e8a4:	68fb      	ldr	r3, [r7, #12]
 801e8a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e8a8:	f043 0220 	orr.w	r2, r3, #32
 801e8ac:	68fb      	ldr	r3, [r7, #12]
 801e8ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801e8b0:	2303      	movs	r3, #3
 801e8b2:	e027      	b.n	801e904 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801e8b4:	687b      	ldr	r3, [r7, #4]
 801e8b6:	9300      	str	r3, [sp, #0]
 801e8b8:	68bb      	ldr	r3, [r7, #8]
 801e8ba:	2200      	movs	r2, #0
 801e8bc:	2180      	movs	r1, #128	; 0x80
 801e8be:	68f8      	ldr	r0, [r7, #12]
 801e8c0:	f7ff fe68 	bl	801e594 <SPI_WaitFlagStateUntilTimeout>
 801e8c4:	4603      	mov	r3, r0
 801e8c6:	2b00      	cmp	r3, #0
 801e8c8:	d007      	beq.n	801e8da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e8ca:	68fb      	ldr	r3, [r7, #12]
 801e8cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e8ce:	f043 0220 	orr.w	r2, r3, #32
 801e8d2:	68fb      	ldr	r3, [r7, #12]
 801e8d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801e8d6:	2303      	movs	r3, #3
 801e8d8:	e014      	b.n	801e904 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801e8da:	687b      	ldr	r3, [r7, #4]
 801e8dc:	9300      	str	r3, [sp, #0]
 801e8de:	68bb      	ldr	r3, [r7, #8]
 801e8e0:	2200      	movs	r2, #0
 801e8e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801e8e6:	68f8      	ldr	r0, [r7, #12]
 801e8e8:	f7ff fedc 	bl	801e6a4 <SPI_WaitFifoStateUntilTimeout>
 801e8ec:	4603      	mov	r3, r0
 801e8ee:	2b00      	cmp	r3, #0
 801e8f0:	d007      	beq.n	801e902 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e8f2:	68fb      	ldr	r3, [r7, #12]
 801e8f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e8f6:	f043 0220 	orr.w	r2, r3, #32
 801e8fa:	68fb      	ldr	r3, [r7, #12]
 801e8fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801e8fe:	2303      	movs	r3, #3
 801e900:	e000      	b.n	801e904 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801e902:	2300      	movs	r3, #0
}
 801e904:	4618      	mov	r0, r3
 801e906:	3710      	adds	r7, #16
 801e908:	46bd      	mov	sp, r7
 801e90a:	bd80      	pop	{r7, pc}

0801e90c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801e90c:	b580      	push	{r7, lr}
 801e90e:	b082      	sub	sp, #8
 801e910:	af00      	add	r7, sp, #0
 801e912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e914:	687b      	ldr	r3, [r7, #4]
 801e916:	2b00      	cmp	r3, #0
 801e918:	d101      	bne.n	801e91e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801e91a:	2301      	movs	r3, #1
 801e91c:	e049      	b.n	801e9b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e91e:	687b      	ldr	r3, [r7, #4]
 801e920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e924:	b2db      	uxtb	r3, r3
 801e926:	2b00      	cmp	r3, #0
 801e928:	d106      	bne.n	801e938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801e92a:	687b      	ldr	r3, [r7, #4]
 801e92c:	2200      	movs	r2, #0
 801e92e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801e932:	6878      	ldr	r0, [r7, #4]
 801e934:	f7f9 fd30 	bl	8018398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e938:	687b      	ldr	r3, [r7, #4]
 801e93a:	2202      	movs	r2, #2
 801e93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801e940:	687b      	ldr	r3, [r7, #4]
 801e942:	681a      	ldr	r2, [r3, #0]
 801e944:	687b      	ldr	r3, [r7, #4]
 801e946:	3304      	adds	r3, #4
 801e948:	4619      	mov	r1, r3
 801e94a:	4610      	mov	r0, r2
 801e94c:	f000 fd6c 	bl	801f428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801e950:	687b      	ldr	r3, [r7, #4]
 801e952:	2201      	movs	r2, #1
 801e954:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e958:	687b      	ldr	r3, [r7, #4]
 801e95a:	2201      	movs	r2, #1
 801e95c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e960:	687b      	ldr	r3, [r7, #4]
 801e962:	2201      	movs	r2, #1
 801e964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e968:	687b      	ldr	r3, [r7, #4]
 801e96a:	2201      	movs	r2, #1
 801e96c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e970:	687b      	ldr	r3, [r7, #4]
 801e972:	2201      	movs	r2, #1
 801e974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e978:	687b      	ldr	r3, [r7, #4]
 801e97a:	2201      	movs	r2, #1
 801e97c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e980:	687b      	ldr	r3, [r7, #4]
 801e982:	2201      	movs	r2, #1
 801e984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e988:	687b      	ldr	r3, [r7, #4]
 801e98a:	2201      	movs	r2, #1
 801e98c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e990:	687b      	ldr	r3, [r7, #4]
 801e992:	2201      	movs	r2, #1
 801e994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e998:	687b      	ldr	r3, [r7, #4]
 801e99a:	2201      	movs	r2, #1
 801e99c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801e9a0:	687b      	ldr	r3, [r7, #4]
 801e9a2:	2201      	movs	r2, #1
 801e9a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	2201      	movs	r2, #1
 801e9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801e9b0:	2300      	movs	r3, #0
}
 801e9b2:	4618      	mov	r0, r3
 801e9b4:	3708      	adds	r7, #8
 801e9b6:	46bd      	mov	sp, r7
 801e9b8:	bd80      	pop	{r7, pc}
	...

0801e9bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801e9bc:	b480      	push	{r7}
 801e9be:	b085      	sub	sp, #20
 801e9c0:	af00      	add	r7, sp, #0
 801e9c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801e9c4:	687b      	ldr	r3, [r7, #4]
 801e9c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e9ca:	b2db      	uxtb	r3, r3
 801e9cc:	2b01      	cmp	r3, #1
 801e9ce:	d001      	beq.n	801e9d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801e9d0:	2301      	movs	r3, #1
 801e9d2:	e04f      	b.n	801ea74 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e9d4:	687b      	ldr	r3, [r7, #4]
 801e9d6:	2202      	movs	r2, #2
 801e9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801e9dc:	687b      	ldr	r3, [r7, #4]
 801e9de:	681b      	ldr	r3, [r3, #0]
 801e9e0:	68da      	ldr	r2, [r3, #12]
 801e9e2:	687b      	ldr	r3, [r7, #4]
 801e9e4:	681b      	ldr	r3, [r3, #0]
 801e9e6:	f042 0201 	orr.w	r2, r2, #1
 801e9ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e9ec:	687b      	ldr	r3, [r7, #4]
 801e9ee:	681b      	ldr	r3, [r3, #0]
 801e9f0:	4a23      	ldr	r2, [pc, #140]	; (801ea80 <HAL_TIM_Base_Start_IT+0xc4>)
 801e9f2:	4293      	cmp	r3, r2
 801e9f4:	d01d      	beq.n	801ea32 <HAL_TIM_Base_Start_IT+0x76>
 801e9f6:	687b      	ldr	r3, [r7, #4]
 801e9f8:	681b      	ldr	r3, [r3, #0]
 801e9fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e9fe:	d018      	beq.n	801ea32 <HAL_TIM_Base_Start_IT+0x76>
 801ea00:	687b      	ldr	r3, [r7, #4]
 801ea02:	681b      	ldr	r3, [r3, #0]
 801ea04:	4a1f      	ldr	r2, [pc, #124]	; (801ea84 <HAL_TIM_Base_Start_IT+0xc8>)
 801ea06:	4293      	cmp	r3, r2
 801ea08:	d013      	beq.n	801ea32 <HAL_TIM_Base_Start_IT+0x76>
 801ea0a:	687b      	ldr	r3, [r7, #4]
 801ea0c:	681b      	ldr	r3, [r3, #0]
 801ea0e:	4a1e      	ldr	r2, [pc, #120]	; (801ea88 <HAL_TIM_Base_Start_IT+0xcc>)
 801ea10:	4293      	cmp	r3, r2
 801ea12:	d00e      	beq.n	801ea32 <HAL_TIM_Base_Start_IT+0x76>
 801ea14:	687b      	ldr	r3, [r7, #4]
 801ea16:	681b      	ldr	r3, [r3, #0]
 801ea18:	4a1c      	ldr	r2, [pc, #112]	; (801ea8c <HAL_TIM_Base_Start_IT+0xd0>)
 801ea1a:	4293      	cmp	r3, r2
 801ea1c:	d009      	beq.n	801ea32 <HAL_TIM_Base_Start_IT+0x76>
 801ea1e:	687b      	ldr	r3, [r7, #4]
 801ea20:	681b      	ldr	r3, [r3, #0]
 801ea22:	4a1b      	ldr	r2, [pc, #108]	; (801ea90 <HAL_TIM_Base_Start_IT+0xd4>)
 801ea24:	4293      	cmp	r3, r2
 801ea26:	d004      	beq.n	801ea32 <HAL_TIM_Base_Start_IT+0x76>
 801ea28:	687b      	ldr	r3, [r7, #4]
 801ea2a:	681b      	ldr	r3, [r3, #0]
 801ea2c:	4a19      	ldr	r2, [pc, #100]	; (801ea94 <HAL_TIM_Base_Start_IT+0xd8>)
 801ea2e:	4293      	cmp	r3, r2
 801ea30:	d115      	bne.n	801ea5e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ea32:	687b      	ldr	r3, [r7, #4]
 801ea34:	681b      	ldr	r3, [r3, #0]
 801ea36:	689a      	ldr	r2, [r3, #8]
 801ea38:	4b17      	ldr	r3, [pc, #92]	; (801ea98 <HAL_TIM_Base_Start_IT+0xdc>)
 801ea3a:	4013      	ands	r3, r2
 801ea3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ea3e:	68fb      	ldr	r3, [r7, #12]
 801ea40:	2b06      	cmp	r3, #6
 801ea42:	d015      	beq.n	801ea70 <HAL_TIM_Base_Start_IT+0xb4>
 801ea44:	68fb      	ldr	r3, [r7, #12]
 801ea46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ea4a:	d011      	beq.n	801ea70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801ea4c:	687b      	ldr	r3, [r7, #4]
 801ea4e:	681b      	ldr	r3, [r3, #0]
 801ea50:	681a      	ldr	r2, [r3, #0]
 801ea52:	687b      	ldr	r3, [r7, #4]
 801ea54:	681b      	ldr	r3, [r3, #0]
 801ea56:	f042 0201 	orr.w	r2, r2, #1
 801ea5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ea5c:	e008      	b.n	801ea70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ea5e:	687b      	ldr	r3, [r7, #4]
 801ea60:	681b      	ldr	r3, [r3, #0]
 801ea62:	681a      	ldr	r2, [r3, #0]
 801ea64:	687b      	ldr	r3, [r7, #4]
 801ea66:	681b      	ldr	r3, [r3, #0]
 801ea68:	f042 0201 	orr.w	r2, r2, #1
 801ea6c:	601a      	str	r2, [r3, #0]
 801ea6e:	e000      	b.n	801ea72 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ea70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801ea72:	2300      	movs	r3, #0
}
 801ea74:	4618      	mov	r0, r3
 801ea76:	3714      	adds	r7, #20
 801ea78:	46bd      	mov	sp, r7
 801ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea7e:	4770      	bx	lr
 801ea80:	40012c00 	.word	0x40012c00
 801ea84:	40000400 	.word	0x40000400
 801ea88:	40000800 	.word	0x40000800
 801ea8c:	40013400 	.word	0x40013400
 801ea90:	40014000 	.word	0x40014000
 801ea94:	40015000 	.word	0x40015000
 801ea98:	00010007 	.word	0x00010007

0801ea9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801ea9c:	b580      	push	{r7, lr}
 801ea9e:	b082      	sub	sp, #8
 801eaa0:	af00      	add	r7, sp, #0
 801eaa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801eaa4:	687b      	ldr	r3, [r7, #4]
 801eaa6:	2b00      	cmp	r3, #0
 801eaa8:	d101      	bne.n	801eaae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801eaaa:	2301      	movs	r3, #1
 801eaac:	e049      	b.n	801eb42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801eaae:	687b      	ldr	r3, [r7, #4]
 801eab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801eab4:	b2db      	uxtb	r3, r3
 801eab6:	2b00      	cmp	r3, #0
 801eab8:	d106      	bne.n	801eac8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801eaba:	687b      	ldr	r3, [r7, #4]
 801eabc:	2200      	movs	r2, #0
 801eabe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801eac2:	6878      	ldr	r0, [r7, #4]
 801eac4:	f7f9 fca2 	bl	801840c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801eac8:	687b      	ldr	r3, [r7, #4]
 801eaca:	2202      	movs	r2, #2
 801eacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ead0:	687b      	ldr	r3, [r7, #4]
 801ead2:	681a      	ldr	r2, [r3, #0]
 801ead4:	687b      	ldr	r3, [r7, #4]
 801ead6:	3304      	adds	r3, #4
 801ead8:	4619      	mov	r1, r3
 801eada:	4610      	mov	r0, r2
 801eadc:	f000 fca4 	bl	801f428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801eae0:	687b      	ldr	r3, [r7, #4]
 801eae2:	2201      	movs	r2, #1
 801eae4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801eae8:	687b      	ldr	r3, [r7, #4]
 801eaea:	2201      	movs	r2, #1
 801eaec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801eaf0:	687b      	ldr	r3, [r7, #4]
 801eaf2:	2201      	movs	r2, #1
 801eaf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801eaf8:	687b      	ldr	r3, [r7, #4]
 801eafa:	2201      	movs	r2, #1
 801eafc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801eb00:	687b      	ldr	r3, [r7, #4]
 801eb02:	2201      	movs	r2, #1
 801eb04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801eb08:	687b      	ldr	r3, [r7, #4]
 801eb0a:	2201      	movs	r2, #1
 801eb0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801eb10:	687b      	ldr	r3, [r7, #4]
 801eb12:	2201      	movs	r2, #1
 801eb14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801eb18:	687b      	ldr	r3, [r7, #4]
 801eb1a:	2201      	movs	r2, #1
 801eb1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801eb20:	687b      	ldr	r3, [r7, #4]
 801eb22:	2201      	movs	r2, #1
 801eb24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801eb28:	687b      	ldr	r3, [r7, #4]
 801eb2a:	2201      	movs	r2, #1
 801eb2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801eb30:	687b      	ldr	r3, [r7, #4]
 801eb32:	2201      	movs	r2, #1
 801eb34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801eb38:	687b      	ldr	r3, [r7, #4]
 801eb3a:	2201      	movs	r2, #1
 801eb3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801eb40:	2300      	movs	r3, #0
}
 801eb42:	4618      	mov	r0, r3
 801eb44:	3708      	adds	r7, #8
 801eb46:	46bd      	mov	sp, r7
 801eb48:	bd80      	pop	{r7, pc}
	...

0801eb4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801eb4c:	b580      	push	{r7, lr}
 801eb4e:	b084      	sub	sp, #16
 801eb50:	af00      	add	r7, sp, #0
 801eb52:	6078      	str	r0, [r7, #4]
 801eb54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801eb56:	683b      	ldr	r3, [r7, #0]
 801eb58:	2b00      	cmp	r3, #0
 801eb5a:	d109      	bne.n	801eb70 <HAL_TIM_PWM_Start+0x24>
 801eb5c:	687b      	ldr	r3, [r7, #4]
 801eb5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801eb62:	b2db      	uxtb	r3, r3
 801eb64:	2b01      	cmp	r3, #1
 801eb66:	bf14      	ite	ne
 801eb68:	2301      	movne	r3, #1
 801eb6a:	2300      	moveq	r3, #0
 801eb6c:	b2db      	uxtb	r3, r3
 801eb6e:	e03c      	b.n	801ebea <HAL_TIM_PWM_Start+0x9e>
 801eb70:	683b      	ldr	r3, [r7, #0]
 801eb72:	2b04      	cmp	r3, #4
 801eb74:	d109      	bne.n	801eb8a <HAL_TIM_PWM_Start+0x3e>
 801eb76:	687b      	ldr	r3, [r7, #4]
 801eb78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801eb7c:	b2db      	uxtb	r3, r3
 801eb7e:	2b01      	cmp	r3, #1
 801eb80:	bf14      	ite	ne
 801eb82:	2301      	movne	r3, #1
 801eb84:	2300      	moveq	r3, #0
 801eb86:	b2db      	uxtb	r3, r3
 801eb88:	e02f      	b.n	801ebea <HAL_TIM_PWM_Start+0x9e>
 801eb8a:	683b      	ldr	r3, [r7, #0]
 801eb8c:	2b08      	cmp	r3, #8
 801eb8e:	d109      	bne.n	801eba4 <HAL_TIM_PWM_Start+0x58>
 801eb90:	687b      	ldr	r3, [r7, #4]
 801eb92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801eb96:	b2db      	uxtb	r3, r3
 801eb98:	2b01      	cmp	r3, #1
 801eb9a:	bf14      	ite	ne
 801eb9c:	2301      	movne	r3, #1
 801eb9e:	2300      	moveq	r3, #0
 801eba0:	b2db      	uxtb	r3, r3
 801eba2:	e022      	b.n	801ebea <HAL_TIM_PWM_Start+0x9e>
 801eba4:	683b      	ldr	r3, [r7, #0]
 801eba6:	2b0c      	cmp	r3, #12
 801eba8:	d109      	bne.n	801ebbe <HAL_TIM_PWM_Start+0x72>
 801ebaa:	687b      	ldr	r3, [r7, #4]
 801ebac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801ebb0:	b2db      	uxtb	r3, r3
 801ebb2:	2b01      	cmp	r3, #1
 801ebb4:	bf14      	ite	ne
 801ebb6:	2301      	movne	r3, #1
 801ebb8:	2300      	moveq	r3, #0
 801ebba:	b2db      	uxtb	r3, r3
 801ebbc:	e015      	b.n	801ebea <HAL_TIM_PWM_Start+0x9e>
 801ebbe:	683b      	ldr	r3, [r7, #0]
 801ebc0:	2b10      	cmp	r3, #16
 801ebc2:	d109      	bne.n	801ebd8 <HAL_TIM_PWM_Start+0x8c>
 801ebc4:	687b      	ldr	r3, [r7, #4]
 801ebc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ebca:	b2db      	uxtb	r3, r3
 801ebcc:	2b01      	cmp	r3, #1
 801ebce:	bf14      	ite	ne
 801ebd0:	2301      	movne	r3, #1
 801ebd2:	2300      	moveq	r3, #0
 801ebd4:	b2db      	uxtb	r3, r3
 801ebd6:	e008      	b.n	801ebea <HAL_TIM_PWM_Start+0x9e>
 801ebd8:	687b      	ldr	r3, [r7, #4]
 801ebda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ebde:	b2db      	uxtb	r3, r3
 801ebe0:	2b01      	cmp	r3, #1
 801ebe2:	bf14      	ite	ne
 801ebe4:	2301      	movne	r3, #1
 801ebe6:	2300      	moveq	r3, #0
 801ebe8:	b2db      	uxtb	r3, r3
 801ebea:	2b00      	cmp	r3, #0
 801ebec:	d001      	beq.n	801ebf2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801ebee:	2301      	movs	r3, #1
 801ebf0:	e0a1      	b.n	801ed36 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ebf2:	683b      	ldr	r3, [r7, #0]
 801ebf4:	2b00      	cmp	r3, #0
 801ebf6:	d104      	bne.n	801ec02 <HAL_TIM_PWM_Start+0xb6>
 801ebf8:	687b      	ldr	r3, [r7, #4]
 801ebfa:	2202      	movs	r2, #2
 801ebfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ec00:	e023      	b.n	801ec4a <HAL_TIM_PWM_Start+0xfe>
 801ec02:	683b      	ldr	r3, [r7, #0]
 801ec04:	2b04      	cmp	r3, #4
 801ec06:	d104      	bne.n	801ec12 <HAL_TIM_PWM_Start+0xc6>
 801ec08:	687b      	ldr	r3, [r7, #4]
 801ec0a:	2202      	movs	r2, #2
 801ec0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ec10:	e01b      	b.n	801ec4a <HAL_TIM_PWM_Start+0xfe>
 801ec12:	683b      	ldr	r3, [r7, #0]
 801ec14:	2b08      	cmp	r3, #8
 801ec16:	d104      	bne.n	801ec22 <HAL_TIM_PWM_Start+0xd6>
 801ec18:	687b      	ldr	r3, [r7, #4]
 801ec1a:	2202      	movs	r2, #2
 801ec1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ec20:	e013      	b.n	801ec4a <HAL_TIM_PWM_Start+0xfe>
 801ec22:	683b      	ldr	r3, [r7, #0]
 801ec24:	2b0c      	cmp	r3, #12
 801ec26:	d104      	bne.n	801ec32 <HAL_TIM_PWM_Start+0xe6>
 801ec28:	687b      	ldr	r3, [r7, #4]
 801ec2a:	2202      	movs	r2, #2
 801ec2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ec30:	e00b      	b.n	801ec4a <HAL_TIM_PWM_Start+0xfe>
 801ec32:	683b      	ldr	r3, [r7, #0]
 801ec34:	2b10      	cmp	r3, #16
 801ec36:	d104      	bne.n	801ec42 <HAL_TIM_PWM_Start+0xf6>
 801ec38:	687b      	ldr	r3, [r7, #4]
 801ec3a:	2202      	movs	r2, #2
 801ec3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ec40:	e003      	b.n	801ec4a <HAL_TIM_PWM_Start+0xfe>
 801ec42:	687b      	ldr	r3, [r7, #4]
 801ec44:	2202      	movs	r2, #2
 801ec46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ec4a:	687b      	ldr	r3, [r7, #4]
 801ec4c:	681b      	ldr	r3, [r3, #0]
 801ec4e:	2201      	movs	r2, #1
 801ec50:	6839      	ldr	r1, [r7, #0]
 801ec52:	4618      	mov	r0, r3
 801ec54:	f000 ffb0 	bl	801fbb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801ec58:	687b      	ldr	r3, [r7, #4]
 801ec5a:	681b      	ldr	r3, [r3, #0]
 801ec5c:	4a38      	ldr	r2, [pc, #224]	; (801ed40 <HAL_TIM_PWM_Start+0x1f4>)
 801ec5e:	4293      	cmp	r3, r2
 801ec60:	d018      	beq.n	801ec94 <HAL_TIM_PWM_Start+0x148>
 801ec62:	687b      	ldr	r3, [r7, #4]
 801ec64:	681b      	ldr	r3, [r3, #0]
 801ec66:	4a37      	ldr	r2, [pc, #220]	; (801ed44 <HAL_TIM_PWM_Start+0x1f8>)
 801ec68:	4293      	cmp	r3, r2
 801ec6a:	d013      	beq.n	801ec94 <HAL_TIM_PWM_Start+0x148>
 801ec6c:	687b      	ldr	r3, [r7, #4]
 801ec6e:	681b      	ldr	r3, [r3, #0]
 801ec70:	4a35      	ldr	r2, [pc, #212]	; (801ed48 <HAL_TIM_PWM_Start+0x1fc>)
 801ec72:	4293      	cmp	r3, r2
 801ec74:	d00e      	beq.n	801ec94 <HAL_TIM_PWM_Start+0x148>
 801ec76:	687b      	ldr	r3, [r7, #4]
 801ec78:	681b      	ldr	r3, [r3, #0]
 801ec7a:	4a34      	ldr	r2, [pc, #208]	; (801ed4c <HAL_TIM_PWM_Start+0x200>)
 801ec7c:	4293      	cmp	r3, r2
 801ec7e:	d009      	beq.n	801ec94 <HAL_TIM_PWM_Start+0x148>
 801ec80:	687b      	ldr	r3, [r7, #4]
 801ec82:	681b      	ldr	r3, [r3, #0]
 801ec84:	4a32      	ldr	r2, [pc, #200]	; (801ed50 <HAL_TIM_PWM_Start+0x204>)
 801ec86:	4293      	cmp	r3, r2
 801ec88:	d004      	beq.n	801ec94 <HAL_TIM_PWM_Start+0x148>
 801ec8a:	687b      	ldr	r3, [r7, #4]
 801ec8c:	681b      	ldr	r3, [r3, #0]
 801ec8e:	4a31      	ldr	r2, [pc, #196]	; (801ed54 <HAL_TIM_PWM_Start+0x208>)
 801ec90:	4293      	cmp	r3, r2
 801ec92:	d101      	bne.n	801ec98 <HAL_TIM_PWM_Start+0x14c>
 801ec94:	2301      	movs	r3, #1
 801ec96:	e000      	b.n	801ec9a <HAL_TIM_PWM_Start+0x14e>
 801ec98:	2300      	movs	r3, #0
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	d007      	beq.n	801ecae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801ec9e:	687b      	ldr	r3, [r7, #4]
 801eca0:	681b      	ldr	r3, [r3, #0]
 801eca2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801eca4:	687b      	ldr	r3, [r7, #4]
 801eca6:	681b      	ldr	r3, [r3, #0]
 801eca8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801ecac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ecae:	687b      	ldr	r3, [r7, #4]
 801ecb0:	681b      	ldr	r3, [r3, #0]
 801ecb2:	4a23      	ldr	r2, [pc, #140]	; (801ed40 <HAL_TIM_PWM_Start+0x1f4>)
 801ecb4:	4293      	cmp	r3, r2
 801ecb6:	d01d      	beq.n	801ecf4 <HAL_TIM_PWM_Start+0x1a8>
 801ecb8:	687b      	ldr	r3, [r7, #4]
 801ecba:	681b      	ldr	r3, [r3, #0]
 801ecbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ecc0:	d018      	beq.n	801ecf4 <HAL_TIM_PWM_Start+0x1a8>
 801ecc2:	687b      	ldr	r3, [r7, #4]
 801ecc4:	681b      	ldr	r3, [r3, #0]
 801ecc6:	4a24      	ldr	r2, [pc, #144]	; (801ed58 <HAL_TIM_PWM_Start+0x20c>)
 801ecc8:	4293      	cmp	r3, r2
 801ecca:	d013      	beq.n	801ecf4 <HAL_TIM_PWM_Start+0x1a8>
 801eccc:	687b      	ldr	r3, [r7, #4]
 801ecce:	681b      	ldr	r3, [r3, #0]
 801ecd0:	4a22      	ldr	r2, [pc, #136]	; (801ed5c <HAL_TIM_PWM_Start+0x210>)
 801ecd2:	4293      	cmp	r3, r2
 801ecd4:	d00e      	beq.n	801ecf4 <HAL_TIM_PWM_Start+0x1a8>
 801ecd6:	687b      	ldr	r3, [r7, #4]
 801ecd8:	681b      	ldr	r3, [r3, #0]
 801ecda:	4a1a      	ldr	r2, [pc, #104]	; (801ed44 <HAL_TIM_PWM_Start+0x1f8>)
 801ecdc:	4293      	cmp	r3, r2
 801ecde:	d009      	beq.n	801ecf4 <HAL_TIM_PWM_Start+0x1a8>
 801ece0:	687b      	ldr	r3, [r7, #4]
 801ece2:	681b      	ldr	r3, [r3, #0]
 801ece4:	4a18      	ldr	r2, [pc, #96]	; (801ed48 <HAL_TIM_PWM_Start+0x1fc>)
 801ece6:	4293      	cmp	r3, r2
 801ece8:	d004      	beq.n	801ecf4 <HAL_TIM_PWM_Start+0x1a8>
 801ecea:	687b      	ldr	r3, [r7, #4]
 801ecec:	681b      	ldr	r3, [r3, #0]
 801ecee:	4a19      	ldr	r2, [pc, #100]	; (801ed54 <HAL_TIM_PWM_Start+0x208>)
 801ecf0:	4293      	cmp	r3, r2
 801ecf2:	d115      	bne.n	801ed20 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ecf4:	687b      	ldr	r3, [r7, #4]
 801ecf6:	681b      	ldr	r3, [r3, #0]
 801ecf8:	689a      	ldr	r2, [r3, #8]
 801ecfa:	4b19      	ldr	r3, [pc, #100]	; (801ed60 <HAL_TIM_PWM_Start+0x214>)
 801ecfc:	4013      	ands	r3, r2
 801ecfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ed00:	68fb      	ldr	r3, [r7, #12]
 801ed02:	2b06      	cmp	r3, #6
 801ed04:	d015      	beq.n	801ed32 <HAL_TIM_PWM_Start+0x1e6>
 801ed06:	68fb      	ldr	r3, [r7, #12]
 801ed08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ed0c:	d011      	beq.n	801ed32 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 801ed0e:	687b      	ldr	r3, [r7, #4]
 801ed10:	681b      	ldr	r3, [r3, #0]
 801ed12:	681a      	ldr	r2, [r3, #0]
 801ed14:	687b      	ldr	r3, [r7, #4]
 801ed16:	681b      	ldr	r3, [r3, #0]
 801ed18:	f042 0201 	orr.w	r2, r2, #1
 801ed1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ed1e:	e008      	b.n	801ed32 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	681b      	ldr	r3, [r3, #0]
 801ed24:	681a      	ldr	r2, [r3, #0]
 801ed26:	687b      	ldr	r3, [r7, #4]
 801ed28:	681b      	ldr	r3, [r3, #0]
 801ed2a:	f042 0201 	orr.w	r2, r2, #1
 801ed2e:	601a      	str	r2, [r3, #0]
 801ed30:	e000      	b.n	801ed34 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ed32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801ed34:	2300      	movs	r3, #0
}
 801ed36:	4618      	mov	r0, r3
 801ed38:	3710      	adds	r7, #16
 801ed3a:	46bd      	mov	sp, r7
 801ed3c:	bd80      	pop	{r7, pc}
 801ed3e:	bf00      	nop
 801ed40:	40012c00 	.word	0x40012c00
 801ed44:	40013400 	.word	0x40013400
 801ed48:	40014000 	.word	0x40014000
 801ed4c:	40014400 	.word	0x40014400
 801ed50:	40014800 	.word	0x40014800
 801ed54:	40015000 	.word	0x40015000
 801ed58:	40000400 	.word	0x40000400
 801ed5c:	40000800 	.word	0x40000800
 801ed60:	00010007 	.word	0x00010007

0801ed64 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ed64:	b580      	push	{r7, lr}
 801ed66:	b082      	sub	sp, #8
 801ed68:	af00      	add	r7, sp, #0
 801ed6a:	6078      	str	r0, [r7, #4]
 801ed6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801ed6e:	687b      	ldr	r3, [r7, #4]
 801ed70:	681b      	ldr	r3, [r3, #0]
 801ed72:	2200      	movs	r2, #0
 801ed74:	6839      	ldr	r1, [r7, #0]
 801ed76:	4618      	mov	r0, r3
 801ed78:	f000 ff1e 	bl	801fbb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801ed7c:	687b      	ldr	r3, [r7, #4]
 801ed7e:	681b      	ldr	r3, [r3, #0]
 801ed80:	4a40      	ldr	r2, [pc, #256]	; (801ee84 <HAL_TIM_PWM_Stop+0x120>)
 801ed82:	4293      	cmp	r3, r2
 801ed84:	d018      	beq.n	801edb8 <HAL_TIM_PWM_Stop+0x54>
 801ed86:	687b      	ldr	r3, [r7, #4]
 801ed88:	681b      	ldr	r3, [r3, #0]
 801ed8a:	4a3f      	ldr	r2, [pc, #252]	; (801ee88 <HAL_TIM_PWM_Stop+0x124>)
 801ed8c:	4293      	cmp	r3, r2
 801ed8e:	d013      	beq.n	801edb8 <HAL_TIM_PWM_Stop+0x54>
 801ed90:	687b      	ldr	r3, [r7, #4]
 801ed92:	681b      	ldr	r3, [r3, #0]
 801ed94:	4a3d      	ldr	r2, [pc, #244]	; (801ee8c <HAL_TIM_PWM_Stop+0x128>)
 801ed96:	4293      	cmp	r3, r2
 801ed98:	d00e      	beq.n	801edb8 <HAL_TIM_PWM_Stop+0x54>
 801ed9a:	687b      	ldr	r3, [r7, #4]
 801ed9c:	681b      	ldr	r3, [r3, #0]
 801ed9e:	4a3c      	ldr	r2, [pc, #240]	; (801ee90 <HAL_TIM_PWM_Stop+0x12c>)
 801eda0:	4293      	cmp	r3, r2
 801eda2:	d009      	beq.n	801edb8 <HAL_TIM_PWM_Stop+0x54>
 801eda4:	687b      	ldr	r3, [r7, #4]
 801eda6:	681b      	ldr	r3, [r3, #0]
 801eda8:	4a3a      	ldr	r2, [pc, #232]	; (801ee94 <HAL_TIM_PWM_Stop+0x130>)
 801edaa:	4293      	cmp	r3, r2
 801edac:	d004      	beq.n	801edb8 <HAL_TIM_PWM_Stop+0x54>
 801edae:	687b      	ldr	r3, [r7, #4]
 801edb0:	681b      	ldr	r3, [r3, #0]
 801edb2:	4a39      	ldr	r2, [pc, #228]	; (801ee98 <HAL_TIM_PWM_Stop+0x134>)
 801edb4:	4293      	cmp	r3, r2
 801edb6:	d101      	bne.n	801edbc <HAL_TIM_PWM_Stop+0x58>
 801edb8:	2301      	movs	r3, #1
 801edba:	e000      	b.n	801edbe <HAL_TIM_PWM_Stop+0x5a>
 801edbc:	2300      	movs	r3, #0
 801edbe:	2b00      	cmp	r3, #0
 801edc0:	d017      	beq.n	801edf2 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801edc2:	687b      	ldr	r3, [r7, #4]
 801edc4:	681b      	ldr	r3, [r3, #0]
 801edc6:	6a1a      	ldr	r2, [r3, #32]
 801edc8:	f241 1311 	movw	r3, #4369	; 0x1111
 801edcc:	4013      	ands	r3, r2
 801edce:	2b00      	cmp	r3, #0
 801edd0:	d10f      	bne.n	801edf2 <HAL_TIM_PWM_Stop+0x8e>
 801edd2:	687b      	ldr	r3, [r7, #4]
 801edd4:	681b      	ldr	r3, [r3, #0]
 801edd6:	6a1a      	ldr	r2, [r3, #32]
 801edd8:	f244 4344 	movw	r3, #17476	; 0x4444
 801eddc:	4013      	ands	r3, r2
 801edde:	2b00      	cmp	r3, #0
 801ede0:	d107      	bne.n	801edf2 <HAL_TIM_PWM_Stop+0x8e>
 801ede2:	687b      	ldr	r3, [r7, #4]
 801ede4:	681b      	ldr	r3, [r3, #0]
 801ede6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	681b      	ldr	r3, [r3, #0]
 801edec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801edf0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801edf2:	687b      	ldr	r3, [r7, #4]
 801edf4:	681b      	ldr	r3, [r3, #0]
 801edf6:	6a1a      	ldr	r2, [r3, #32]
 801edf8:	f241 1311 	movw	r3, #4369	; 0x1111
 801edfc:	4013      	ands	r3, r2
 801edfe:	2b00      	cmp	r3, #0
 801ee00:	d10f      	bne.n	801ee22 <HAL_TIM_PWM_Stop+0xbe>
 801ee02:	687b      	ldr	r3, [r7, #4]
 801ee04:	681b      	ldr	r3, [r3, #0]
 801ee06:	6a1a      	ldr	r2, [r3, #32]
 801ee08:	f244 4344 	movw	r3, #17476	; 0x4444
 801ee0c:	4013      	ands	r3, r2
 801ee0e:	2b00      	cmp	r3, #0
 801ee10:	d107      	bne.n	801ee22 <HAL_TIM_PWM_Stop+0xbe>
 801ee12:	687b      	ldr	r3, [r7, #4]
 801ee14:	681b      	ldr	r3, [r3, #0]
 801ee16:	681a      	ldr	r2, [r3, #0]
 801ee18:	687b      	ldr	r3, [r7, #4]
 801ee1a:	681b      	ldr	r3, [r3, #0]
 801ee1c:	f022 0201 	bic.w	r2, r2, #1
 801ee20:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801ee22:	683b      	ldr	r3, [r7, #0]
 801ee24:	2b00      	cmp	r3, #0
 801ee26:	d104      	bne.n	801ee32 <HAL_TIM_PWM_Stop+0xce>
 801ee28:	687b      	ldr	r3, [r7, #4]
 801ee2a:	2201      	movs	r2, #1
 801ee2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ee30:	e023      	b.n	801ee7a <HAL_TIM_PWM_Stop+0x116>
 801ee32:	683b      	ldr	r3, [r7, #0]
 801ee34:	2b04      	cmp	r3, #4
 801ee36:	d104      	bne.n	801ee42 <HAL_TIM_PWM_Stop+0xde>
 801ee38:	687b      	ldr	r3, [r7, #4]
 801ee3a:	2201      	movs	r2, #1
 801ee3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ee40:	e01b      	b.n	801ee7a <HAL_TIM_PWM_Stop+0x116>
 801ee42:	683b      	ldr	r3, [r7, #0]
 801ee44:	2b08      	cmp	r3, #8
 801ee46:	d104      	bne.n	801ee52 <HAL_TIM_PWM_Stop+0xee>
 801ee48:	687b      	ldr	r3, [r7, #4]
 801ee4a:	2201      	movs	r2, #1
 801ee4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ee50:	e013      	b.n	801ee7a <HAL_TIM_PWM_Stop+0x116>
 801ee52:	683b      	ldr	r3, [r7, #0]
 801ee54:	2b0c      	cmp	r3, #12
 801ee56:	d104      	bne.n	801ee62 <HAL_TIM_PWM_Stop+0xfe>
 801ee58:	687b      	ldr	r3, [r7, #4]
 801ee5a:	2201      	movs	r2, #1
 801ee5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ee60:	e00b      	b.n	801ee7a <HAL_TIM_PWM_Stop+0x116>
 801ee62:	683b      	ldr	r3, [r7, #0]
 801ee64:	2b10      	cmp	r3, #16
 801ee66:	d104      	bne.n	801ee72 <HAL_TIM_PWM_Stop+0x10e>
 801ee68:	687b      	ldr	r3, [r7, #4]
 801ee6a:	2201      	movs	r2, #1
 801ee6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ee70:	e003      	b.n	801ee7a <HAL_TIM_PWM_Stop+0x116>
 801ee72:	687b      	ldr	r3, [r7, #4]
 801ee74:	2201      	movs	r2, #1
 801ee76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 801ee7a:	2300      	movs	r3, #0
}
 801ee7c:	4618      	mov	r0, r3
 801ee7e:	3708      	adds	r7, #8
 801ee80:	46bd      	mov	sp, r7
 801ee82:	bd80      	pop	{r7, pc}
 801ee84:	40012c00 	.word	0x40012c00
 801ee88:	40013400 	.word	0x40013400
 801ee8c:	40014000 	.word	0x40014000
 801ee90:	40014400 	.word	0x40014400
 801ee94:	40014800 	.word	0x40014800
 801ee98:	40015000 	.word	0x40015000

0801ee9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801ee9c:	b580      	push	{r7, lr}
 801ee9e:	b082      	sub	sp, #8
 801eea0:	af00      	add	r7, sp, #0
 801eea2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801eea4:	687b      	ldr	r3, [r7, #4]
 801eea6:	681b      	ldr	r3, [r3, #0]
 801eea8:	691b      	ldr	r3, [r3, #16]
 801eeaa:	f003 0302 	and.w	r3, r3, #2
 801eeae:	2b02      	cmp	r3, #2
 801eeb0:	d122      	bne.n	801eef8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801eeb2:	687b      	ldr	r3, [r7, #4]
 801eeb4:	681b      	ldr	r3, [r3, #0]
 801eeb6:	68db      	ldr	r3, [r3, #12]
 801eeb8:	f003 0302 	and.w	r3, r3, #2
 801eebc:	2b02      	cmp	r3, #2
 801eebe:	d11b      	bne.n	801eef8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801eec0:	687b      	ldr	r3, [r7, #4]
 801eec2:	681b      	ldr	r3, [r3, #0]
 801eec4:	f06f 0202 	mvn.w	r2, #2
 801eec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801eeca:	687b      	ldr	r3, [r7, #4]
 801eecc:	2201      	movs	r2, #1
 801eece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801eed0:	687b      	ldr	r3, [r7, #4]
 801eed2:	681b      	ldr	r3, [r3, #0]
 801eed4:	699b      	ldr	r3, [r3, #24]
 801eed6:	f003 0303 	and.w	r3, r3, #3
 801eeda:	2b00      	cmp	r3, #0
 801eedc:	d003      	beq.n	801eee6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801eede:	6878      	ldr	r0, [r7, #4]
 801eee0:	f000 fa84 	bl	801f3ec <HAL_TIM_IC_CaptureCallback>
 801eee4:	e005      	b.n	801eef2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801eee6:	6878      	ldr	r0, [r7, #4]
 801eee8:	f000 fa76 	bl	801f3d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801eeec:	6878      	ldr	r0, [r7, #4]
 801eeee:	f000 fa87 	bl	801f400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801eef2:	687b      	ldr	r3, [r7, #4]
 801eef4:	2200      	movs	r2, #0
 801eef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801eef8:	687b      	ldr	r3, [r7, #4]
 801eefa:	681b      	ldr	r3, [r3, #0]
 801eefc:	691b      	ldr	r3, [r3, #16]
 801eefe:	f003 0304 	and.w	r3, r3, #4
 801ef02:	2b04      	cmp	r3, #4
 801ef04:	d122      	bne.n	801ef4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801ef06:	687b      	ldr	r3, [r7, #4]
 801ef08:	681b      	ldr	r3, [r3, #0]
 801ef0a:	68db      	ldr	r3, [r3, #12]
 801ef0c:	f003 0304 	and.w	r3, r3, #4
 801ef10:	2b04      	cmp	r3, #4
 801ef12:	d11b      	bne.n	801ef4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801ef14:	687b      	ldr	r3, [r7, #4]
 801ef16:	681b      	ldr	r3, [r3, #0]
 801ef18:	f06f 0204 	mvn.w	r2, #4
 801ef1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801ef1e:	687b      	ldr	r3, [r7, #4]
 801ef20:	2202      	movs	r2, #2
 801ef22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801ef24:	687b      	ldr	r3, [r7, #4]
 801ef26:	681b      	ldr	r3, [r3, #0]
 801ef28:	699b      	ldr	r3, [r3, #24]
 801ef2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ef2e:	2b00      	cmp	r3, #0
 801ef30:	d003      	beq.n	801ef3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ef32:	6878      	ldr	r0, [r7, #4]
 801ef34:	f000 fa5a 	bl	801f3ec <HAL_TIM_IC_CaptureCallback>
 801ef38:	e005      	b.n	801ef46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ef3a:	6878      	ldr	r0, [r7, #4]
 801ef3c:	f000 fa4c 	bl	801f3d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ef40:	6878      	ldr	r0, [r7, #4]
 801ef42:	f000 fa5d 	bl	801f400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ef46:	687b      	ldr	r3, [r7, #4]
 801ef48:	2200      	movs	r2, #0
 801ef4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801ef4c:	687b      	ldr	r3, [r7, #4]
 801ef4e:	681b      	ldr	r3, [r3, #0]
 801ef50:	691b      	ldr	r3, [r3, #16]
 801ef52:	f003 0308 	and.w	r3, r3, #8
 801ef56:	2b08      	cmp	r3, #8
 801ef58:	d122      	bne.n	801efa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801ef5a:	687b      	ldr	r3, [r7, #4]
 801ef5c:	681b      	ldr	r3, [r3, #0]
 801ef5e:	68db      	ldr	r3, [r3, #12]
 801ef60:	f003 0308 	and.w	r3, r3, #8
 801ef64:	2b08      	cmp	r3, #8
 801ef66:	d11b      	bne.n	801efa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801ef68:	687b      	ldr	r3, [r7, #4]
 801ef6a:	681b      	ldr	r3, [r3, #0]
 801ef6c:	f06f 0208 	mvn.w	r2, #8
 801ef70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801ef72:	687b      	ldr	r3, [r7, #4]
 801ef74:	2204      	movs	r2, #4
 801ef76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801ef78:	687b      	ldr	r3, [r7, #4]
 801ef7a:	681b      	ldr	r3, [r3, #0]
 801ef7c:	69db      	ldr	r3, [r3, #28]
 801ef7e:	f003 0303 	and.w	r3, r3, #3
 801ef82:	2b00      	cmp	r3, #0
 801ef84:	d003      	beq.n	801ef8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ef86:	6878      	ldr	r0, [r7, #4]
 801ef88:	f000 fa30 	bl	801f3ec <HAL_TIM_IC_CaptureCallback>
 801ef8c:	e005      	b.n	801ef9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ef8e:	6878      	ldr	r0, [r7, #4]
 801ef90:	f000 fa22 	bl	801f3d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ef94:	6878      	ldr	r0, [r7, #4]
 801ef96:	f000 fa33 	bl	801f400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ef9a:	687b      	ldr	r3, [r7, #4]
 801ef9c:	2200      	movs	r2, #0
 801ef9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801efa0:	687b      	ldr	r3, [r7, #4]
 801efa2:	681b      	ldr	r3, [r3, #0]
 801efa4:	691b      	ldr	r3, [r3, #16]
 801efa6:	f003 0310 	and.w	r3, r3, #16
 801efaa:	2b10      	cmp	r3, #16
 801efac:	d122      	bne.n	801eff4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801efae:	687b      	ldr	r3, [r7, #4]
 801efb0:	681b      	ldr	r3, [r3, #0]
 801efb2:	68db      	ldr	r3, [r3, #12]
 801efb4:	f003 0310 	and.w	r3, r3, #16
 801efb8:	2b10      	cmp	r3, #16
 801efba:	d11b      	bne.n	801eff4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801efbc:	687b      	ldr	r3, [r7, #4]
 801efbe:	681b      	ldr	r3, [r3, #0]
 801efc0:	f06f 0210 	mvn.w	r2, #16
 801efc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801efc6:	687b      	ldr	r3, [r7, #4]
 801efc8:	2208      	movs	r2, #8
 801efca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801efcc:	687b      	ldr	r3, [r7, #4]
 801efce:	681b      	ldr	r3, [r3, #0]
 801efd0:	69db      	ldr	r3, [r3, #28]
 801efd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801efd6:	2b00      	cmp	r3, #0
 801efd8:	d003      	beq.n	801efe2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801efda:	6878      	ldr	r0, [r7, #4]
 801efdc:	f000 fa06 	bl	801f3ec <HAL_TIM_IC_CaptureCallback>
 801efe0:	e005      	b.n	801efee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801efe2:	6878      	ldr	r0, [r7, #4]
 801efe4:	f000 f9f8 	bl	801f3d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801efe8:	6878      	ldr	r0, [r7, #4]
 801efea:	f000 fa09 	bl	801f400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801efee:	687b      	ldr	r3, [r7, #4]
 801eff0:	2200      	movs	r2, #0
 801eff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	681b      	ldr	r3, [r3, #0]
 801eff8:	691b      	ldr	r3, [r3, #16]
 801effa:	f003 0301 	and.w	r3, r3, #1
 801effe:	2b01      	cmp	r3, #1
 801f000:	d10e      	bne.n	801f020 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801f002:	687b      	ldr	r3, [r7, #4]
 801f004:	681b      	ldr	r3, [r3, #0]
 801f006:	68db      	ldr	r3, [r3, #12]
 801f008:	f003 0301 	and.w	r3, r3, #1
 801f00c:	2b01      	cmp	r3, #1
 801f00e:	d107      	bne.n	801f020 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801f010:	687b      	ldr	r3, [r7, #4]
 801f012:	681b      	ldr	r3, [r3, #0]
 801f014:	f06f 0201 	mvn.w	r2, #1
 801f018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801f01a:	6878      	ldr	r0, [r7, #4]
 801f01c:	f000 f9d2 	bl	801f3c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	681b      	ldr	r3, [r3, #0]
 801f024:	691b      	ldr	r3, [r3, #16]
 801f026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f02a:	2b80      	cmp	r3, #128	; 0x80
 801f02c:	d10e      	bne.n	801f04c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f02e:	687b      	ldr	r3, [r7, #4]
 801f030:	681b      	ldr	r3, [r3, #0]
 801f032:	68db      	ldr	r3, [r3, #12]
 801f034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f038:	2b80      	cmp	r3, #128	; 0x80
 801f03a:	d107      	bne.n	801f04c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801f03c:	687b      	ldr	r3, [r7, #4]
 801f03e:	681b      	ldr	r3, [r3, #0]
 801f040:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801f044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801f046:	6878      	ldr	r0, [r7, #4]
 801f048:	f000 ff26 	bl	801fe98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801f04c:	687b      	ldr	r3, [r7, #4]
 801f04e:	681b      	ldr	r3, [r3, #0]
 801f050:	691b      	ldr	r3, [r3, #16]
 801f052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f05a:	d10e      	bne.n	801f07a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f05c:	687b      	ldr	r3, [r7, #4]
 801f05e:	681b      	ldr	r3, [r3, #0]
 801f060:	68db      	ldr	r3, [r3, #12]
 801f062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f066:	2b80      	cmp	r3, #128	; 0x80
 801f068:	d107      	bne.n	801f07a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801f06a:	687b      	ldr	r3, [r7, #4]
 801f06c:	681b      	ldr	r3, [r3, #0]
 801f06e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801f072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801f074:	6878      	ldr	r0, [r7, #4]
 801f076:	f000 ff19 	bl	801feac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801f07a:	687b      	ldr	r3, [r7, #4]
 801f07c:	681b      	ldr	r3, [r3, #0]
 801f07e:	691b      	ldr	r3, [r3, #16]
 801f080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f084:	2b40      	cmp	r3, #64	; 0x40
 801f086:	d10e      	bne.n	801f0a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801f088:	687b      	ldr	r3, [r7, #4]
 801f08a:	681b      	ldr	r3, [r3, #0]
 801f08c:	68db      	ldr	r3, [r3, #12]
 801f08e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f092:	2b40      	cmp	r3, #64	; 0x40
 801f094:	d107      	bne.n	801f0a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801f096:	687b      	ldr	r3, [r7, #4]
 801f098:	681b      	ldr	r3, [r3, #0]
 801f09a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801f09e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801f0a0:	6878      	ldr	r0, [r7, #4]
 801f0a2:	f000 f9b7 	bl	801f414 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801f0a6:	687b      	ldr	r3, [r7, #4]
 801f0a8:	681b      	ldr	r3, [r3, #0]
 801f0aa:	691b      	ldr	r3, [r3, #16]
 801f0ac:	f003 0320 	and.w	r3, r3, #32
 801f0b0:	2b20      	cmp	r3, #32
 801f0b2:	d10e      	bne.n	801f0d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801f0b4:	687b      	ldr	r3, [r7, #4]
 801f0b6:	681b      	ldr	r3, [r3, #0]
 801f0b8:	68db      	ldr	r3, [r3, #12]
 801f0ba:	f003 0320 	and.w	r3, r3, #32
 801f0be:	2b20      	cmp	r3, #32
 801f0c0:	d107      	bne.n	801f0d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801f0c2:	687b      	ldr	r3, [r7, #4]
 801f0c4:	681b      	ldr	r3, [r3, #0]
 801f0c6:	f06f 0220 	mvn.w	r2, #32
 801f0ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801f0cc:	6878      	ldr	r0, [r7, #4]
 801f0ce:	f000 fed9 	bl	801fe84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 801f0d2:	687b      	ldr	r3, [r7, #4]
 801f0d4:	681b      	ldr	r3, [r3, #0]
 801f0d6:	691b      	ldr	r3, [r3, #16]
 801f0d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801f0dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f0e0:	d10f      	bne.n	801f102 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 801f0e2:	687b      	ldr	r3, [r7, #4]
 801f0e4:	681b      	ldr	r3, [r3, #0]
 801f0e6:	68db      	ldr	r3, [r3, #12]
 801f0e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801f0ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f0f0:	d107      	bne.n	801f102 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 801f0f2:	687b      	ldr	r3, [r7, #4]
 801f0f4:	681b      	ldr	r3, [r3, #0]
 801f0f6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 801f0fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 801f0fc:	6878      	ldr	r0, [r7, #4]
 801f0fe:	f000 fedf 	bl	801fec0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 801f102:	687b      	ldr	r3, [r7, #4]
 801f104:	681b      	ldr	r3, [r3, #0]
 801f106:	691b      	ldr	r3, [r3, #16]
 801f108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801f10c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801f110:	d10f      	bne.n	801f132 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 801f112:	687b      	ldr	r3, [r7, #4]
 801f114:	681b      	ldr	r3, [r3, #0]
 801f116:	68db      	ldr	r3, [r3, #12]
 801f118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801f11c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801f120:	d107      	bne.n	801f132 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 801f122:	687b      	ldr	r3, [r7, #4]
 801f124:	681b      	ldr	r3, [r3, #0]
 801f126:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 801f12a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 801f12c:	6878      	ldr	r0, [r7, #4]
 801f12e:	f000 fed1 	bl	801fed4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 801f132:	687b      	ldr	r3, [r7, #4]
 801f134:	681b      	ldr	r3, [r3, #0]
 801f136:	691b      	ldr	r3, [r3, #16]
 801f138:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f13c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801f140:	d10f      	bne.n	801f162 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 801f142:	687b      	ldr	r3, [r7, #4]
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	68db      	ldr	r3, [r3, #12]
 801f148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f14c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801f150:	d107      	bne.n	801f162 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 801f152:	687b      	ldr	r3, [r7, #4]
 801f154:	681b      	ldr	r3, [r3, #0]
 801f156:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 801f15a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 801f15c:	6878      	ldr	r0, [r7, #4]
 801f15e:	f000 fec3 	bl	801fee8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 801f162:	687b      	ldr	r3, [r7, #4]
 801f164:	681b      	ldr	r3, [r3, #0]
 801f166:	691b      	ldr	r3, [r3, #16]
 801f168:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801f16c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801f170:	d10f      	bne.n	801f192 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 801f172:	687b      	ldr	r3, [r7, #4]
 801f174:	681b      	ldr	r3, [r3, #0]
 801f176:	68db      	ldr	r3, [r3, #12]
 801f178:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801f17c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801f180:	d107      	bne.n	801f192 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 801f182:	687b      	ldr	r3, [r7, #4]
 801f184:	681b      	ldr	r3, [r3, #0]
 801f186:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 801f18a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 801f18c:	6878      	ldr	r0, [r7, #4]
 801f18e:	f000 feb5 	bl	801fefc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801f192:	bf00      	nop
 801f194:	3708      	adds	r7, #8
 801f196:	46bd      	mov	sp, r7
 801f198:	bd80      	pop	{r7, pc}
	...

0801f19c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801f19c:	b580      	push	{r7, lr}
 801f19e:	b086      	sub	sp, #24
 801f1a0:	af00      	add	r7, sp, #0
 801f1a2:	60f8      	str	r0, [r7, #12]
 801f1a4:	60b9      	str	r1, [r7, #8]
 801f1a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f1a8:	2300      	movs	r3, #0
 801f1aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801f1ac:	68fb      	ldr	r3, [r7, #12]
 801f1ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f1b2:	2b01      	cmp	r3, #1
 801f1b4:	d101      	bne.n	801f1ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 801f1b6:	2302      	movs	r3, #2
 801f1b8:	e0ff      	b.n	801f3ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 801f1ba:	68fb      	ldr	r3, [r7, #12]
 801f1bc:	2201      	movs	r2, #1
 801f1be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801f1c2:	687b      	ldr	r3, [r7, #4]
 801f1c4:	2b14      	cmp	r3, #20
 801f1c6:	f200 80f0 	bhi.w	801f3aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 801f1ca:	a201      	add	r2, pc, #4	; (adr r2, 801f1d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801f1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f1d0:	0801f225 	.word	0x0801f225
 801f1d4:	0801f3ab 	.word	0x0801f3ab
 801f1d8:	0801f3ab 	.word	0x0801f3ab
 801f1dc:	0801f3ab 	.word	0x0801f3ab
 801f1e0:	0801f265 	.word	0x0801f265
 801f1e4:	0801f3ab 	.word	0x0801f3ab
 801f1e8:	0801f3ab 	.word	0x0801f3ab
 801f1ec:	0801f3ab 	.word	0x0801f3ab
 801f1f0:	0801f2a7 	.word	0x0801f2a7
 801f1f4:	0801f3ab 	.word	0x0801f3ab
 801f1f8:	0801f3ab 	.word	0x0801f3ab
 801f1fc:	0801f3ab 	.word	0x0801f3ab
 801f200:	0801f2e7 	.word	0x0801f2e7
 801f204:	0801f3ab 	.word	0x0801f3ab
 801f208:	0801f3ab 	.word	0x0801f3ab
 801f20c:	0801f3ab 	.word	0x0801f3ab
 801f210:	0801f329 	.word	0x0801f329
 801f214:	0801f3ab 	.word	0x0801f3ab
 801f218:	0801f3ab 	.word	0x0801f3ab
 801f21c:	0801f3ab 	.word	0x0801f3ab
 801f220:	0801f369 	.word	0x0801f369
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801f224:	68fb      	ldr	r3, [r7, #12]
 801f226:	681b      	ldr	r3, [r3, #0]
 801f228:	68b9      	ldr	r1, [r7, #8]
 801f22a:	4618      	mov	r0, r3
 801f22c:	f000 f99a 	bl	801f564 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801f230:	68fb      	ldr	r3, [r7, #12]
 801f232:	681b      	ldr	r3, [r3, #0]
 801f234:	699a      	ldr	r2, [r3, #24]
 801f236:	68fb      	ldr	r3, [r7, #12]
 801f238:	681b      	ldr	r3, [r3, #0]
 801f23a:	f042 0208 	orr.w	r2, r2, #8
 801f23e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801f240:	68fb      	ldr	r3, [r7, #12]
 801f242:	681b      	ldr	r3, [r3, #0]
 801f244:	699a      	ldr	r2, [r3, #24]
 801f246:	68fb      	ldr	r3, [r7, #12]
 801f248:	681b      	ldr	r3, [r3, #0]
 801f24a:	f022 0204 	bic.w	r2, r2, #4
 801f24e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801f250:	68fb      	ldr	r3, [r7, #12]
 801f252:	681b      	ldr	r3, [r3, #0]
 801f254:	6999      	ldr	r1, [r3, #24]
 801f256:	68bb      	ldr	r3, [r7, #8]
 801f258:	691a      	ldr	r2, [r3, #16]
 801f25a:	68fb      	ldr	r3, [r7, #12]
 801f25c:	681b      	ldr	r3, [r3, #0]
 801f25e:	430a      	orrs	r2, r1
 801f260:	619a      	str	r2, [r3, #24]
      break;
 801f262:	e0a5      	b.n	801f3b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801f264:	68fb      	ldr	r3, [r7, #12]
 801f266:	681b      	ldr	r3, [r3, #0]
 801f268:	68b9      	ldr	r1, [r7, #8]
 801f26a:	4618      	mov	r0, r3
 801f26c:	f000 fa14 	bl	801f698 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801f270:	68fb      	ldr	r3, [r7, #12]
 801f272:	681b      	ldr	r3, [r3, #0]
 801f274:	699a      	ldr	r2, [r3, #24]
 801f276:	68fb      	ldr	r3, [r7, #12]
 801f278:	681b      	ldr	r3, [r3, #0]
 801f27a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f27e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801f280:	68fb      	ldr	r3, [r7, #12]
 801f282:	681b      	ldr	r3, [r3, #0]
 801f284:	699a      	ldr	r2, [r3, #24]
 801f286:	68fb      	ldr	r3, [r7, #12]
 801f288:	681b      	ldr	r3, [r3, #0]
 801f28a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f28e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801f290:	68fb      	ldr	r3, [r7, #12]
 801f292:	681b      	ldr	r3, [r3, #0]
 801f294:	6999      	ldr	r1, [r3, #24]
 801f296:	68bb      	ldr	r3, [r7, #8]
 801f298:	691b      	ldr	r3, [r3, #16]
 801f29a:	021a      	lsls	r2, r3, #8
 801f29c:	68fb      	ldr	r3, [r7, #12]
 801f29e:	681b      	ldr	r3, [r3, #0]
 801f2a0:	430a      	orrs	r2, r1
 801f2a2:	619a      	str	r2, [r3, #24]
      break;
 801f2a4:	e084      	b.n	801f3b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801f2a6:	68fb      	ldr	r3, [r7, #12]
 801f2a8:	681b      	ldr	r3, [r3, #0]
 801f2aa:	68b9      	ldr	r1, [r7, #8]
 801f2ac:	4618      	mov	r0, r3
 801f2ae:	f000 fa87 	bl	801f7c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801f2b2:	68fb      	ldr	r3, [r7, #12]
 801f2b4:	681b      	ldr	r3, [r3, #0]
 801f2b6:	69da      	ldr	r2, [r3, #28]
 801f2b8:	68fb      	ldr	r3, [r7, #12]
 801f2ba:	681b      	ldr	r3, [r3, #0]
 801f2bc:	f042 0208 	orr.w	r2, r2, #8
 801f2c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801f2c2:	68fb      	ldr	r3, [r7, #12]
 801f2c4:	681b      	ldr	r3, [r3, #0]
 801f2c6:	69da      	ldr	r2, [r3, #28]
 801f2c8:	68fb      	ldr	r3, [r7, #12]
 801f2ca:	681b      	ldr	r3, [r3, #0]
 801f2cc:	f022 0204 	bic.w	r2, r2, #4
 801f2d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801f2d2:	68fb      	ldr	r3, [r7, #12]
 801f2d4:	681b      	ldr	r3, [r3, #0]
 801f2d6:	69d9      	ldr	r1, [r3, #28]
 801f2d8:	68bb      	ldr	r3, [r7, #8]
 801f2da:	691a      	ldr	r2, [r3, #16]
 801f2dc:	68fb      	ldr	r3, [r7, #12]
 801f2de:	681b      	ldr	r3, [r3, #0]
 801f2e0:	430a      	orrs	r2, r1
 801f2e2:	61da      	str	r2, [r3, #28]
      break;
 801f2e4:	e064      	b.n	801f3b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801f2e6:	68fb      	ldr	r3, [r7, #12]
 801f2e8:	681b      	ldr	r3, [r3, #0]
 801f2ea:	68b9      	ldr	r1, [r7, #8]
 801f2ec:	4618      	mov	r0, r3
 801f2ee:	f000 faf9 	bl	801f8e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801f2f2:	68fb      	ldr	r3, [r7, #12]
 801f2f4:	681b      	ldr	r3, [r3, #0]
 801f2f6:	69da      	ldr	r2, [r3, #28]
 801f2f8:	68fb      	ldr	r3, [r7, #12]
 801f2fa:	681b      	ldr	r3, [r3, #0]
 801f2fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801f302:	68fb      	ldr	r3, [r7, #12]
 801f304:	681b      	ldr	r3, [r3, #0]
 801f306:	69da      	ldr	r2, [r3, #28]
 801f308:	68fb      	ldr	r3, [r7, #12]
 801f30a:	681b      	ldr	r3, [r3, #0]
 801f30c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801f312:	68fb      	ldr	r3, [r7, #12]
 801f314:	681b      	ldr	r3, [r3, #0]
 801f316:	69d9      	ldr	r1, [r3, #28]
 801f318:	68bb      	ldr	r3, [r7, #8]
 801f31a:	691b      	ldr	r3, [r3, #16]
 801f31c:	021a      	lsls	r2, r3, #8
 801f31e:	68fb      	ldr	r3, [r7, #12]
 801f320:	681b      	ldr	r3, [r3, #0]
 801f322:	430a      	orrs	r2, r1
 801f324:	61da      	str	r2, [r3, #28]
      break;
 801f326:	e043      	b.n	801f3b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801f328:	68fb      	ldr	r3, [r7, #12]
 801f32a:	681b      	ldr	r3, [r3, #0]
 801f32c:	68b9      	ldr	r1, [r7, #8]
 801f32e:	4618      	mov	r0, r3
 801f330:	f000 fb6c 	bl	801fa0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801f334:	68fb      	ldr	r3, [r7, #12]
 801f336:	681b      	ldr	r3, [r3, #0]
 801f338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f33a:	68fb      	ldr	r3, [r7, #12]
 801f33c:	681b      	ldr	r3, [r3, #0]
 801f33e:	f042 0208 	orr.w	r2, r2, #8
 801f342:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801f344:	68fb      	ldr	r3, [r7, #12]
 801f346:	681b      	ldr	r3, [r3, #0]
 801f348:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f34a:	68fb      	ldr	r3, [r7, #12]
 801f34c:	681b      	ldr	r3, [r3, #0]
 801f34e:	f022 0204 	bic.w	r2, r2, #4
 801f352:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801f354:	68fb      	ldr	r3, [r7, #12]
 801f356:	681b      	ldr	r3, [r3, #0]
 801f358:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801f35a:	68bb      	ldr	r3, [r7, #8]
 801f35c:	691a      	ldr	r2, [r3, #16]
 801f35e:	68fb      	ldr	r3, [r7, #12]
 801f360:	681b      	ldr	r3, [r3, #0]
 801f362:	430a      	orrs	r2, r1
 801f364:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801f366:	e023      	b.n	801f3b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801f368:	68fb      	ldr	r3, [r7, #12]
 801f36a:	681b      	ldr	r3, [r3, #0]
 801f36c:	68b9      	ldr	r1, [r7, #8]
 801f36e:	4618      	mov	r0, r3
 801f370:	f000 fbb6 	bl	801fae0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801f374:	68fb      	ldr	r3, [r7, #12]
 801f376:	681b      	ldr	r3, [r3, #0]
 801f378:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f37a:	68fb      	ldr	r3, [r7, #12]
 801f37c:	681b      	ldr	r3, [r3, #0]
 801f37e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f382:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801f384:	68fb      	ldr	r3, [r7, #12]
 801f386:	681b      	ldr	r3, [r3, #0]
 801f388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f38a:	68fb      	ldr	r3, [r7, #12]
 801f38c:	681b      	ldr	r3, [r3, #0]
 801f38e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f392:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801f394:	68fb      	ldr	r3, [r7, #12]
 801f396:	681b      	ldr	r3, [r3, #0]
 801f398:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801f39a:	68bb      	ldr	r3, [r7, #8]
 801f39c:	691b      	ldr	r3, [r3, #16]
 801f39e:	021a      	lsls	r2, r3, #8
 801f3a0:	68fb      	ldr	r3, [r7, #12]
 801f3a2:	681b      	ldr	r3, [r3, #0]
 801f3a4:	430a      	orrs	r2, r1
 801f3a6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801f3a8:	e002      	b.n	801f3b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801f3aa:	2301      	movs	r3, #1
 801f3ac:	75fb      	strb	r3, [r7, #23]
      break;
 801f3ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801f3b0:	68fb      	ldr	r3, [r7, #12]
 801f3b2:	2200      	movs	r2, #0
 801f3b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801f3b8:	7dfb      	ldrb	r3, [r7, #23]
}
 801f3ba:	4618      	mov	r0, r3
 801f3bc:	3718      	adds	r7, #24
 801f3be:	46bd      	mov	sp, r7
 801f3c0:	bd80      	pop	{r7, pc}
 801f3c2:	bf00      	nop

0801f3c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801f3c4:	b480      	push	{r7}
 801f3c6:	b083      	sub	sp, #12
 801f3c8:	af00      	add	r7, sp, #0
 801f3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801f3cc:	bf00      	nop
 801f3ce:	370c      	adds	r7, #12
 801f3d0:	46bd      	mov	sp, r7
 801f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3d6:	4770      	bx	lr

0801f3d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801f3d8:	b480      	push	{r7}
 801f3da:	b083      	sub	sp, #12
 801f3dc:	af00      	add	r7, sp, #0
 801f3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801f3e0:	bf00      	nop
 801f3e2:	370c      	adds	r7, #12
 801f3e4:	46bd      	mov	sp, r7
 801f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3ea:	4770      	bx	lr

0801f3ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801f3ec:	b480      	push	{r7}
 801f3ee:	b083      	sub	sp, #12
 801f3f0:	af00      	add	r7, sp, #0
 801f3f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801f3f4:	bf00      	nop
 801f3f6:	370c      	adds	r7, #12
 801f3f8:	46bd      	mov	sp, r7
 801f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3fe:	4770      	bx	lr

0801f400 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801f400:	b480      	push	{r7}
 801f402:	b083      	sub	sp, #12
 801f404:	af00      	add	r7, sp, #0
 801f406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801f408:	bf00      	nop
 801f40a:	370c      	adds	r7, #12
 801f40c:	46bd      	mov	sp, r7
 801f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f412:	4770      	bx	lr

0801f414 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801f414:	b480      	push	{r7}
 801f416:	b083      	sub	sp, #12
 801f418:	af00      	add	r7, sp, #0
 801f41a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801f41c:	bf00      	nop
 801f41e:	370c      	adds	r7, #12
 801f420:	46bd      	mov	sp, r7
 801f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f426:	4770      	bx	lr

0801f428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801f428:	b480      	push	{r7}
 801f42a:	b085      	sub	sp, #20
 801f42c:	af00      	add	r7, sp, #0
 801f42e:	6078      	str	r0, [r7, #4]
 801f430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801f432:	687b      	ldr	r3, [r7, #4]
 801f434:	681b      	ldr	r3, [r3, #0]
 801f436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801f438:	687b      	ldr	r3, [r7, #4]
 801f43a:	4a42      	ldr	r2, [pc, #264]	; (801f544 <TIM_Base_SetConfig+0x11c>)
 801f43c:	4293      	cmp	r3, r2
 801f43e:	d013      	beq.n	801f468 <TIM_Base_SetConfig+0x40>
 801f440:	687b      	ldr	r3, [r7, #4]
 801f442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f446:	d00f      	beq.n	801f468 <TIM_Base_SetConfig+0x40>
 801f448:	687b      	ldr	r3, [r7, #4]
 801f44a:	4a3f      	ldr	r2, [pc, #252]	; (801f548 <TIM_Base_SetConfig+0x120>)
 801f44c:	4293      	cmp	r3, r2
 801f44e:	d00b      	beq.n	801f468 <TIM_Base_SetConfig+0x40>
 801f450:	687b      	ldr	r3, [r7, #4]
 801f452:	4a3e      	ldr	r2, [pc, #248]	; (801f54c <TIM_Base_SetConfig+0x124>)
 801f454:	4293      	cmp	r3, r2
 801f456:	d007      	beq.n	801f468 <TIM_Base_SetConfig+0x40>
 801f458:	687b      	ldr	r3, [r7, #4]
 801f45a:	4a3d      	ldr	r2, [pc, #244]	; (801f550 <TIM_Base_SetConfig+0x128>)
 801f45c:	4293      	cmp	r3, r2
 801f45e:	d003      	beq.n	801f468 <TIM_Base_SetConfig+0x40>
 801f460:	687b      	ldr	r3, [r7, #4]
 801f462:	4a3c      	ldr	r2, [pc, #240]	; (801f554 <TIM_Base_SetConfig+0x12c>)
 801f464:	4293      	cmp	r3, r2
 801f466:	d108      	bne.n	801f47a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801f468:	68fb      	ldr	r3, [r7, #12]
 801f46a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f46e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801f470:	683b      	ldr	r3, [r7, #0]
 801f472:	685b      	ldr	r3, [r3, #4]
 801f474:	68fa      	ldr	r2, [r7, #12]
 801f476:	4313      	orrs	r3, r2
 801f478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801f47a:	687b      	ldr	r3, [r7, #4]
 801f47c:	4a31      	ldr	r2, [pc, #196]	; (801f544 <TIM_Base_SetConfig+0x11c>)
 801f47e:	4293      	cmp	r3, r2
 801f480:	d01f      	beq.n	801f4c2 <TIM_Base_SetConfig+0x9a>
 801f482:	687b      	ldr	r3, [r7, #4]
 801f484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f488:	d01b      	beq.n	801f4c2 <TIM_Base_SetConfig+0x9a>
 801f48a:	687b      	ldr	r3, [r7, #4]
 801f48c:	4a2e      	ldr	r2, [pc, #184]	; (801f548 <TIM_Base_SetConfig+0x120>)
 801f48e:	4293      	cmp	r3, r2
 801f490:	d017      	beq.n	801f4c2 <TIM_Base_SetConfig+0x9a>
 801f492:	687b      	ldr	r3, [r7, #4]
 801f494:	4a2d      	ldr	r2, [pc, #180]	; (801f54c <TIM_Base_SetConfig+0x124>)
 801f496:	4293      	cmp	r3, r2
 801f498:	d013      	beq.n	801f4c2 <TIM_Base_SetConfig+0x9a>
 801f49a:	687b      	ldr	r3, [r7, #4]
 801f49c:	4a2c      	ldr	r2, [pc, #176]	; (801f550 <TIM_Base_SetConfig+0x128>)
 801f49e:	4293      	cmp	r3, r2
 801f4a0:	d00f      	beq.n	801f4c2 <TIM_Base_SetConfig+0x9a>
 801f4a2:	687b      	ldr	r3, [r7, #4]
 801f4a4:	4a2c      	ldr	r2, [pc, #176]	; (801f558 <TIM_Base_SetConfig+0x130>)
 801f4a6:	4293      	cmp	r3, r2
 801f4a8:	d00b      	beq.n	801f4c2 <TIM_Base_SetConfig+0x9a>
 801f4aa:	687b      	ldr	r3, [r7, #4]
 801f4ac:	4a2b      	ldr	r2, [pc, #172]	; (801f55c <TIM_Base_SetConfig+0x134>)
 801f4ae:	4293      	cmp	r3, r2
 801f4b0:	d007      	beq.n	801f4c2 <TIM_Base_SetConfig+0x9a>
 801f4b2:	687b      	ldr	r3, [r7, #4]
 801f4b4:	4a2a      	ldr	r2, [pc, #168]	; (801f560 <TIM_Base_SetConfig+0x138>)
 801f4b6:	4293      	cmp	r3, r2
 801f4b8:	d003      	beq.n	801f4c2 <TIM_Base_SetConfig+0x9a>
 801f4ba:	687b      	ldr	r3, [r7, #4]
 801f4bc:	4a25      	ldr	r2, [pc, #148]	; (801f554 <TIM_Base_SetConfig+0x12c>)
 801f4be:	4293      	cmp	r3, r2
 801f4c0:	d108      	bne.n	801f4d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801f4c2:	68fb      	ldr	r3, [r7, #12]
 801f4c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801f4c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801f4ca:	683b      	ldr	r3, [r7, #0]
 801f4cc:	68db      	ldr	r3, [r3, #12]
 801f4ce:	68fa      	ldr	r2, [r7, #12]
 801f4d0:	4313      	orrs	r3, r2
 801f4d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801f4d4:	68fb      	ldr	r3, [r7, #12]
 801f4d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801f4da:	683b      	ldr	r3, [r7, #0]
 801f4dc:	695b      	ldr	r3, [r3, #20]
 801f4de:	4313      	orrs	r3, r2
 801f4e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801f4e2:	687b      	ldr	r3, [r7, #4]
 801f4e4:	68fa      	ldr	r2, [r7, #12]
 801f4e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801f4e8:	683b      	ldr	r3, [r7, #0]
 801f4ea:	689a      	ldr	r2, [r3, #8]
 801f4ec:	687b      	ldr	r3, [r7, #4]
 801f4ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801f4f0:	683b      	ldr	r3, [r7, #0]
 801f4f2:	681a      	ldr	r2, [r3, #0]
 801f4f4:	687b      	ldr	r3, [r7, #4]
 801f4f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801f4f8:	687b      	ldr	r3, [r7, #4]
 801f4fa:	4a12      	ldr	r2, [pc, #72]	; (801f544 <TIM_Base_SetConfig+0x11c>)
 801f4fc:	4293      	cmp	r3, r2
 801f4fe:	d013      	beq.n	801f528 <TIM_Base_SetConfig+0x100>
 801f500:	687b      	ldr	r3, [r7, #4]
 801f502:	4a13      	ldr	r2, [pc, #76]	; (801f550 <TIM_Base_SetConfig+0x128>)
 801f504:	4293      	cmp	r3, r2
 801f506:	d00f      	beq.n	801f528 <TIM_Base_SetConfig+0x100>
 801f508:	687b      	ldr	r3, [r7, #4]
 801f50a:	4a13      	ldr	r2, [pc, #76]	; (801f558 <TIM_Base_SetConfig+0x130>)
 801f50c:	4293      	cmp	r3, r2
 801f50e:	d00b      	beq.n	801f528 <TIM_Base_SetConfig+0x100>
 801f510:	687b      	ldr	r3, [r7, #4]
 801f512:	4a12      	ldr	r2, [pc, #72]	; (801f55c <TIM_Base_SetConfig+0x134>)
 801f514:	4293      	cmp	r3, r2
 801f516:	d007      	beq.n	801f528 <TIM_Base_SetConfig+0x100>
 801f518:	687b      	ldr	r3, [r7, #4]
 801f51a:	4a11      	ldr	r2, [pc, #68]	; (801f560 <TIM_Base_SetConfig+0x138>)
 801f51c:	4293      	cmp	r3, r2
 801f51e:	d003      	beq.n	801f528 <TIM_Base_SetConfig+0x100>
 801f520:	687b      	ldr	r3, [r7, #4]
 801f522:	4a0c      	ldr	r2, [pc, #48]	; (801f554 <TIM_Base_SetConfig+0x12c>)
 801f524:	4293      	cmp	r3, r2
 801f526:	d103      	bne.n	801f530 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801f528:	683b      	ldr	r3, [r7, #0]
 801f52a:	691a      	ldr	r2, [r3, #16]
 801f52c:	687b      	ldr	r3, [r7, #4]
 801f52e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801f530:	687b      	ldr	r3, [r7, #4]
 801f532:	2201      	movs	r2, #1
 801f534:	615a      	str	r2, [r3, #20]
}
 801f536:	bf00      	nop
 801f538:	3714      	adds	r7, #20
 801f53a:	46bd      	mov	sp, r7
 801f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f540:	4770      	bx	lr
 801f542:	bf00      	nop
 801f544:	40012c00 	.word	0x40012c00
 801f548:	40000400 	.word	0x40000400
 801f54c:	40000800 	.word	0x40000800
 801f550:	40013400 	.word	0x40013400
 801f554:	40015000 	.word	0x40015000
 801f558:	40014000 	.word	0x40014000
 801f55c:	40014400 	.word	0x40014400
 801f560:	40014800 	.word	0x40014800

0801f564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801f564:	b480      	push	{r7}
 801f566:	b087      	sub	sp, #28
 801f568:	af00      	add	r7, sp, #0
 801f56a:	6078      	str	r0, [r7, #4]
 801f56c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801f56e:	687b      	ldr	r3, [r7, #4]
 801f570:	6a1b      	ldr	r3, [r3, #32]
 801f572:	f023 0201 	bic.w	r2, r3, #1
 801f576:	687b      	ldr	r3, [r7, #4]
 801f578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f57a:	687b      	ldr	r3, [r7, #4]
 801f57c:	6a1b      	ldr	r3, [r3, #32]
 801f57e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f580:	687b      	ldr	r3, [r7, #4]
 801f582:	685b      	ldr	r3, [r3, #4]
 801f584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801f586:	687b      	ldr	r3, [r7, #4]
 801f588:	699b      	ldr	r3, [r3, #24]
 801f58a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801f58c:	68fb      	ldr	r3, [r7, #12]
 801f58e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801f598:	68fb      	ldr	r3, [r7, #12]
 801f59a:	f023 0303 	bic.w	r3, r3, #3
 801f59e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801f5a0:	683b      	ldr	r3, [r7, #0]
 801f5a2:	681b      	ldr	r3, [r3, #0]
 801f5a4:	68fa      	ldr	r2, [r7, #12]
 801f5a6:	4313      	orrs	r3, r2
 801f5a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801f5aa:	697b      	ldr	r3, [r7, #20]
 801f5ac:	f023 0302 	bic.w	r3, r3, #2
 801f5b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801f5b2:	683b      	ldr	r3, [r7, #0]
 801f5b4:	689b      	ldr	r3, [r3, #8]
 801f5b6:	697a      	ldr	r2, [r7, #20]
 801f5b8:	4313      	orrs	r3, r2
 801f5ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801f5bc:	687b      	ldr	r3, [r7, #4]
 801f5be:	4a30      	ldr	r2, [pc, #192]	; (801f680 <TIM_OC1_SetConfig+0x11c>)
 801f5c0:	4293      	cmp	r3, r2
 801f5c2:	d013      	beq.n	801f5ec <TIM_OC1_SetConfig+0x88>
 801f5c4:	687b      	ldr	r3, [r7, #4]
 801f5c6:	4a2f      	ldr	r2, [pc, #188]	; (801f684 <TIM_OC1_SetConfig+0x120>)
 801f5c8:	4293      	cmp	r3, r2
 801f5ca:	d00f      	beq.n	801f5ec <TIM_OC1_SetConfig+0x88>
 801f5cc:	687b      	ldr	r3, [r7, #4]
 801f5ce:	4a2e      	ldr	r2, [pc, #184]	; (801f688 <TIM_OC1_SetConfig+0x124>)
 801f5d0:	4293      	cmp	r3, r2
 801f5d2:	d00b      	beq.n	801f5ec <TIM_OC1_SetConfig+0x88>
 801f5d4:	687b      	ldr	r3, [r7, #4]
 801f5d6:	4a2d      	ldr	r2, [pc, #180]	; (801f68c <TIM_OC1_SetConfig+0x128>)
 801f5d8:	4293      	cmp	r3, r2
 801f5da:	d007      	beq.n	801f5ec <TIM_OC1_SetConfig+0x88>
 801f5dc:	687b      	ldr	r3, [r7, #4]
 801f5de:	4a2c      	ldr	r2, [pc, #176]	; (801f690 <TIM_OC1_SetConfig+0x12c>)
 801f5e0:	4293      	cmp	r3, r2
 801f5e2:	d003      	beq.n	801f5ec <TIM_OC1_SetConfig+0x88>
 801f5e4:	687b      	ldr	r3, [r7, #4]
 801f5e6:	4a2b      	ldr	r2, [pc, #172]	; (801f694 <TIM_OC1_SetConfig+0x130>)
 801f5e8:	4293      	cmp	r3, r2
 801f5ea:	d10c      	bne.n	801f606 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801f5ec:	697b      	ldr	r3, [r7, #20]
 801f5ee:	f023 0308 	bic.w	r3, r3, #8
 801f5f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801f5f4:	683b      	ldr	r3, [r7, #0]
 801f5f6:	68db      	ldr	r3, [r3, #12]
 801f5f8:	697a      	ldr	r2, [r7, #20]
 801f5fa:	4313      	orrs	r3, r2
 801f5fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801f5fe:	697b      	ldr	r3, [r7, #20]
 801f600:	f023 0304 	bic.w	r3, r3, #4
 801f604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f606:	687b      	ldr	r3, [r7, #4]
 801f608:	4a1d      	ldr	r2, [pc, #116]	; (801f680 <TIM_OC1_SetConfig+0x11c>)
 801f60a:	4293      	cmp	r3, r2
 801f60c:	d013      	beq.n	801f636 <TIM_OC1_SetConfig+0xd2>
 801f60e:	687b      	ldr	r3, [r7, #4]
 801f610:	4a1c      	ldr	r2, [pc, #112]	; (801f684 <TIM_OC1_SetConfig+0x120>)
 801f612:	4293      	cmp	r3, r2
 801f614:	d00f      	beq.n	801f636 <TIM_OC1_SetConfig+0xd2>
 801f616:	687b      	ldr	r3, [r7, #4]
 801f618:	4a1b      	ldr	r2, [pc, #108]	; (801f688 <TIM_OC1_SetConfig+0x124>)
 801f61a:	4293      	cmp	r3, r2
 801f61c:	d00b      	beq.n	801f636 <TIM_OC1_SetConfig+0xd2>
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	4a1a      	ldr	r2, [pc, #104]	; (801f68c <TIM_OC1_SetConfig+0x128>)
 801f622:	4293      	cmp	r3, r2
 801f624:	d007      	beq.n	801f636 <TIM_OC1_SetConfig+0xd2>
 801f626:	687b      	ldr	r3, [r7, #4]
 801f628:	4a19      	ldr	r2, [pc, #100]	; (801f690 <TIM_OC1_SetConfig+0x12c>)
 801f62a:	4293      	cmp	r3, r2
 801f62c:	d003      	beq.n	801f636 <TIM_OC1_SetConfig+0xd2>
 801f62e:	687b      	ldr	r3, [r7, #4]
 801f630:	4a18      	ldr	r2, [pc, #96]	; (801f694 <TIM_OC1_SetConfig+0x130>)
 801f632:	4293      	cmp	r3, r2
 801f634:	d111      	bne.n	801f65a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801f636:	693b      	ldr	r3, [r7, #16]
 801f638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801f63c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801f63e:	693b      	ldr	r3, [r7, #16]
 801f640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801f644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801f646:	683b      	ldr	r3, [r7, #0]
 801f648:	695b      	ldr	r3, [r3, #20]
 801f64a:	693a      	ldr	r2, [r7, #16]
 801f64c:	4313      	orrs	r3, r2
 801f64e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801f650:	683b      	ldr	r3, [r7, #0]
 801f652:	699b      	ldr	r3, [r3, #24]
 801f654:	693a      	ldr	r2, [r7, #16]
 801f656:	4313      	orrs	r3, r2
 801f658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	693a      	ldr	r2, [r7, #16]
 801f65e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801f660:	687b      	ldr	r3, [r7, #4]
 801f662:	68fa      	ldr	r2, [r7, #12]
 801f664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801f666:	683b      	ldr	r3, [r7, #0]
 801f668:	685a      	ldr	r2, [r3, #4]
 801f66a:	687b      	ldr	r3, [r7, #4]
 801f66c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f66e:	687b      	ldr	r3, [r7, #4]
 801f670:	697a      	ldr	r2, [r7, #20]
 801f672:	621a      	str	r2, [r3, #32]
}
 801f674:	bf00      	nop
 801f676:	371c      	adds	r7, #28
 801f678:	46bd      	mov	sp, r7
 801f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f67e:	4770      	bx	lr
 801f680:	40012c00 	.word	0x40012c00
 801f684:	40013400 	.word	0x40013400
 801f688:	40014000 	.word	0x40014000
 801f68c:	40014400 	.word	0x40014400
 801f690:	40014800 	.word	0x40014800
 801f694:	40015000 	.word	0x40015000

0801f698 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801f698:	b480      	push	{r7}
 801f69a:	b087      	sub	sp, #28
 801f69c:	af00      	add	r7, sp, #0
 801f69e:	6078      	str	r0, [r7, #4]
 801f6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801f6a2:	687b      	ldr	r3, [r7, #4]
 801f6a4:	6a1b      	ldr	r3, [r3, #32]
 801f6a6:	f023 0210 	bic.w	r2, r3, #16
 801f6aa:	687b      	ldr	r3, [r7, #4]
 801f6ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f6ae:	687b      	ldr	r3, [r7, #4]
 801f6b0:	6a1b      	ldr	r3, [r3, #32]
 801f6b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f6b4:	687b      	ldr	r3, [r7, #4]
 801f6b6:	685b      	ldr	r3, [r3, #4]
 801f6b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801f6ba:	687b      	ldr	r3, [r7, #4]
 801f6bc:	699b      	ldr	r3, [r3, #24]
 801f6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801f6c0:	68fb      	ldr	r3, [r7, #12]
 801f6c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801f6c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801f6ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801f6cc:	68fb      	ldr	r3, [r7, #12]
 801f6ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801f6d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801f6d4:	683b      	ldr	r3, [r7, #0]
 801f6d6:	681b      	ldr	r3, [r3, #0]
 801f6d8:	021b      	lsls	r3, r3, #8
 801f6da:	68fa      	ldr	r2, [r7, #12]
 801f6dc:	4313      	orrs	r3, r2
 801f6de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801f6e0:	697b      	ldr	r3, [r7, #20]
 801f6e2:	f023 0320 	bic.w	r3, r3, #32
 801f6e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801f6e8:	683b      	ldr	r3, [r7, #0]
 801f6ea:	689b      	ldr	r3, [r3, #8]
 801f6ec:	011b      	lsls	r3, r3, #4
 801f6ee:	697a      	ldr	r2, [r7, #20]
 801f6f0:	4313      	orrs	r3, r2
 801f6f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801f6f4:	687b      	ldr	r3, [r7, #4]
 801f6f6:	4a2c      	ldr	r2, [pc, #176]	; (801f7a8 <TIM_OC2_SetConfig+0x110>)
 801f6f8:	4293      	cmp	r3, r2
 801f6fa:	d007      	beq.n	801f70c <TIM_OC2_SetConfig+0x74>
 801f6fc:	687b      	ldr	r3, [r7, #4]
 801f6fe:	4a2b      	ldr	r2, [pc, #172]	; (801f7ac <TIM_OC2_SetConfig+0x114>)
 801f700:	4293      	cmp	r3, r2
 801f702:	d003      	beq.n	801f70c <TIM_OC2_SetConfig+0x74>
 801f704:	687b      	ldr	r3, [r7, #4]
 801f706:	4a2a      	ldr	r2, [pc, #168]	; (801f7b0 <TIM_OC2_SetConfig+0x118>)
 801f708:	4293      	cmp	r3, r2
 801f70a:	d10d      	bne.n	801f728 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801f70c:	697b      	ldr	r3, [r7, #20]
 801f70e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801f712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801f714:	683b      	ldr	r3, [r7, #0]
 801f716:	68db      	ldr	r3, [r3, #12]
 801f718:	011b      	lsls	r3, r3, #4
 801f71a:	697a      	ldr	r2, [r7, #20]
 801f71c:	4313      	orrs	r3, r2
 801f71e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801f720:	697b      	ldr	r3, [r7, #20]
 801f722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801f726:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f728:	687b      	ldr	r3, [r7, #4]
 801f72a:	4a1f      	ldr	r2, [pc, #124]	; (801f7a8 <TIM_OC2_SetConfig+0x110>)
 801f72c:	4293      	cmp	r3, r2
 801f72e:	d013      	beq.n	801f758 <TIM_OC2_SetConfig+0xc0>
 801f730:	687b      	ldr	r3, [r7, #4]
 801f732:	4a1e      	ldr	r2, [pc, #120]	; (801f7ac <TIM_OC2_SetConfig+0x114>)
 801f734:	4293      	cmp	r3, r2
 801f736:	d00f      	beq.n	801f758 <TIM_OC2_SetConfig+0xc0>
 801f738:	687b      	ldr	r3, [r7, #4]
 801f73a:	4a1e      	ldr	r2, [pc, #120]	; (801f7b4 <TIM_OC2_SetConfig+0x11c>)
 801f73c:	4293      	cmp	r3, r2
 801f73e:	d00b      	beq.n	801f758 <TIM_OC2_SetConfig+0xc0>
 801f740:	687b      	ldr	r3, [r7, #4]
 801f742:	4a1d      	ldr	r2, [pc, #116]	; (801f7b8 <TIM_OC2_SetConfig+0x120>)
 801f744:	4293      	cmp	r3, r2
 801f746:	d007      	beq.n	801f758 <TIM_OC2_SetConfig+0xc0>
 801f748:	687b      	ldr	r3, [r7, #4]
 801f74a:	4a1c      	ldr	r2, [pc, #112]	; (801f7bc <TIM_OC2_SetConfig+0x124>)
 801f74c:	4293      	cmp	r3, r2
 801f74e:	d003      	beq.n	801f758 <TIM_OC2_SetConfig+0xc0>
 801f750:	687b      	ldr	r3, [r7, #4]
 801f752:	4a17      	ldr	r2, [pc, #92]	; (801f7b0 <TIM_OC2_SetConfig+0x118>)
 801f754:	4293      	cmp	r3, r2
 801f756:	d113      	bne.n	801f780 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801f758:	693b      	ldr	r3, [r7, #16]
 801f75a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801f75e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801f760:	693b      	ldr	r3, [r7, #16]
 801f762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801f766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801f768:	683b      	ldr	r3, [r7, #0]
 801f76a:	695b      	ldr	r3, [r3, #20]
 801f76c:	009b      	lsls	r3, r3, #2
 801f76e:	693a      	ldr	r2, [r7, #16]
 801f770:	4313      	orrs	r3, r2
 801f772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801f774:	683b      	ldr	r3, [r7, #0]
 801f776:	699b      	ldr	r3, [r3, #24]
 801f778:	009b      	lsls	r3, r3, #2
 801f77a:	693a      	ldr	r2, [r7, #16]
 801f77c:	4313      	orrs	r3, r2
 801f77e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f780:	687b      	ldr	r3, [r7, #4]
 801f782:	693a      	ldr	r2, [r7, #16]
 801f784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801f786:	687b      	ldr	r3, [r7, #4]
 801f788:	68fa      	ldr	r2, [r7, #12]
 801f78a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801f78c:	683b      	ldr	r3, [r7, #0]
 801f78e:	685a      	ldr	r2, [r3, #4]
 801f790:	687b      	ldr	r3, [r7, #4]
 801f792:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f794:	687b      	ldr	r3, [r7, #4]
 801f796:	697a      	ldr	r2, [r7, #20]
 801f798:	621a      	str	r2, [r3, #32]
}
 801f79a:	bf00      	nop
 801f79c:	371c      	adds	r7, #28
 801f79e:	46bd      	mov	sp, r7
 801f7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7a4:	4770      	bx	lr
 801f7a6:	bf00      	nop
 801f7a8:	40012c00 	.word	0x40012c00
 801f7ac:	40013400 	.word	0x40013400
 801f7b0:	40015000 	.word	0x40015000
 801f7b4:	40014000 	.word	0x40014000
 801f7b8:	40014400 	.word	0x40014400
 801f7bc:	40014800 	.word	0x40014800

0801f7c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801f7c0:	b480      	push	{r7}
 801f7c2:	b087      	sub	sp, #28
 801f7c4:	af00      	add	r7, sp, #0
 801f7c6:	6078      	str	r0, [r7, #4]
 801f7c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801f7ca:	687b      	ldr	r3, [r7, #4]
 801f7cc:	6a1b      	ldr	r3, [r3, #32]
 801f7ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801f7d2:	687b      	ldr	r3, [r7, #4]
 801f7d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f7d6:	687b      	ldr	r3, [r7, #4]
 801f7d8:	6a1b      	ldr	r3, [r3, #32]
 801f7da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f7dc:	687b      	ldr	r3, [r7, #4]
 801f7de:	685b      	ldr	r3, [r3, #4]
 801f7e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801f7e2:	687b      	ldr	r3, [r7, #4]
 801f7e4:	69db      	ldr	r3, [r3, #28]
 801f7e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801f7e8:	68fb      	ldr	r3, [r7, #12]
 801f7ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f7ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f7f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801f7f4:	68fb      	ldr	r3, [r7, #12]
 801f7f6:	f023 0303 	bic.w	r3, r3, #3
 801f7fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801f7fc:	683b      	ldr	r3, [r7, #0]
 801f7fe:	681b      	ldr	r3, [r3, #0]
 801f800:	68fa      	ldr	r2, [r7, #12]
 801f802:	4313      	orrs	r3, r2
 801f804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801f806:	697b      	ldr	r3, [r7, #20]
 801f808:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801f80c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801f80e:	683b      	ldr	r3, [r7, #0]
 801f810:	689b      	ldr	r3, [r3, #8]
 801f812:	021b      	lsls	r3, r3, #8
 801f814:	697a      	ldr	r2, [r7, #20]
 801f816:	4313      	orrs	r3, r2
 801f818:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801f81a:	687b      	ldr	r3, [r7, #4]
 801f81c:	4a2b      	ldr	r2, [pc, #172]	; (801f8cc <TIM_OC3_SetConfig+0x10c>)
 801f81e:	4293      	cmp	r3, r2
 801f820:	d007      	beq.n	801f832 <TIM_OC3_SetConfig+0x72>
 801f822:	687b      	ldr	r3, [r7, #4]
 801f824:	4a2a      	ldr	r2, [pc, #168]	; (801f8d0 <TIM_OC3_SetConfig+0x110>)
 801f826:	4293      	cmp	r3, r2
 801f828:	d003      	beq.n	801f832 <TIM_OC3_SetConfig+0x72>
 801f82a:	687b      	ldr	r3, [r7, #4]
 801f82c:	4a29      	ldr	r2, [pc, #164]	; (801f8d4 <TIM_OC3_SetConfig+0x114>)
 801f82e:	4293      	cmp	r3, r2
 801f830:	d10d      	bne.n	801f84e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801f832:	697b      	ldr	r3, [r7, #20]
 801f834:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801f838:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801f83a:	683b      	ldr	r3, [r7, #0]
 801f83c:	68db      	ldr	r3, [r3, #12]
 801f83e:	021b      	lsls	r3, r3, #8
 801f840:	697a      	ldr	r2, [r7, #20]
 801f842:	4313      	orrs	r3, r2
 801f844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801f846:	697b      	ldr	r3, [r7, #20]
 801f848:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801f84c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f84e:	687b      	ldr	r3, [r7, #4]
 801f850:	4a1e      	ldr	r2, [pc, #120]	; (801f8cc <TIM_OC3_SetConfig+0x10c>)
 801f852:	4293      	cmp	r3, r2
 801f854:	d013      	beq.n	801f87e <TIM_OC3_SetConfig+0xbe>
 801f856:	687b      	ldr	r3, [r7, #4]
 801f858:	4a1d      	ldr	r2, [pc, #116]	; (801f8d0 <TIM_OC3_SetConfig+0x110>)
 801f85a:	4293      	cmp	r3, r2
 801f85c:	d00f      	beq.n	801f87e <TIM_OC3_SetConfig+0xbe>
 801f85e:	687b      	ldr	r3, [r7, #4]
 801f860:	4a1d      	ldr	r2, [pc, #116]	; (801f8d8 <TIM_OC3_SetConfig+0x118>)
 801f862:	4293      	cmp	r3, r2
 801f864:	d00b      	beq.n	801f87e <TIM_OC3_SetConfig+0xbe>
 801f866:	687b      	ldr	r3, [r7, #4]
 801f868:	4a1c      	ldr	r2, [pc, #112]	; (801f8dc <TIM_OC3_SetConfig+0x11c>)
 801f86a:	4293      	cmp	r3, r2
 801f86c:	d007      	beq.n	801f87e <TIM_OC3_SetConfig+0xbe>
 801f86e:	687b      	ldr	r3, [r7, #4]
 801f870:	4a1b      	ldr	r2, [pc, #108]	; (801f8e0 <TIM_OC3_SetConfig+0x120>)
 801f872:	4293      	cmp	r3, r2
 801f874:	d003      	beq.n	801f87e <TIM_OC3_SetConfig+0xbe>
 801f876:	687b      	ldr	r3, [r7, #4]
 801f878:	4a16      	ldr	r2, [pc, #88]	; (801f8d4 <TIM_OC3_SetConfig+0x114>)
 801f87a:	4293      	cmp	r3, r2
 801f87c:	d113      	bne.n	801f8a6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801f87e:	693b      	ldr	r3, [r7, #16]
 801f880:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801f886:	693b      	ldr	r3, [r7, #16]
 801f888:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801f88c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801f88e:	683b      	ldr	r3, [r7, #0]
 801f890:	695b      	ldr	r3, [r3, #20]
 801f892:	011b      	lsls	r3, r3, #4
 801f894:	693a      	ldr	r2, [r7, #16]
 801f896:	4313      	orrs	r3, r2
 801f898:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801f89a:	683b      	ldr	r3, [r7, #0]
 801f89c:	699b      	ldr	r3, [r3, #24]
 801f89e:	011b      	lsls	r3, r3, #4
 801f8a0:	693a      	ldr	r2, [r7, #16]
 801f8a2:	4313      	orrs	r3, r2
 801f8a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f8a6:	687b      	ldr	r3, [r7, #4]
 801f8a8:	693a      	ldr	r2, [r7, #16]
 801f8aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801f8ac:	687b      	ldr	r3, [r7, #4]
 801f8ae:	68fa      	ldr	r2, [r7, #12]
 801f8b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801f8b2:	683b      	ldr	r3, [r7, #0]
 801f8b4:	685a      	ldr	r2, [r3, #4]
 801f8b6:	687b      	ldr	r3, [r7, #4]
 801f8b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f8ba:	687b      	ldr	r3, [r7, #4]
 801f8bc:	697a      	ldr	r2, [r7, #20]
 801f8be:	621a      	str	r2, [r3, #32]
}
 801f8c0:	bf00      	nop
 801f8c2:	371c      	adds	r7, #28
 801f8c4:	46bd      	mov	sp, r7
 801f8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8ca:	4770      	bx	lr
 801f8cc:	40012c00 	.word	0x40012c00
 801f8d0:	40013400 	.word	0x40013400
 801f8d4:	40015000 	.word	0x40015000
 801f8d8:	40014000 	.word	0x40014000
 801f8dc:	40014400 	.word	0x40014400
 801f8e0:	40014800 	.word	0x40014800

0801f8e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801f8e4:	b480      	push	{r7}
 801f8e6:	b087      	sub	sp, #28
 801f8e8:	af00      	add	r7, sp, #0
 801f8ea:	6078      	str	r0, [r7, #4]
 801f8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801f8ee:	687b      	ldr	r3, [r7, #4]
 801f8f0:	6a1b      	ldr	r3, [r3, #32]
 801f8f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801f8f6:	687b      	ldr	r3, [r7, #4]
 801f8f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f8fa:	687b      	ldr	r3, [r7, #4]
 801f8fc:	6a1b      	ldr	r3, [r3, #32]
 801f8fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f900:	687b      	ldr	r3, [r7, #4]
 801f902:	685b      	ldr	r3, [r3, #4]
 801f904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801f906:	687b      	ldr	r3, [r7, #4]
 801f908:	69db      	ldr	r3, [r3, #28]
 801f90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801f90c:	68fb      	ldr	r3, [r7, #12]
 801f90e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801f912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801f916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801f918:	68fb      	ldr	r3, [r7, #12]
 801f91a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801f91e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801f920:	683b      	ldr	r3, [r7, #0]
 801f922:	681b      	ldr	r3, [r3, #0]
 801f924:	021b      	lsls	r3, r3, #8
 801f926:	68fa      	ldr	r2, [r7, #12]
 801f928:	4313      	orrs	r3, r2
 801f92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801f92c:	697b      	ldr	r3, [r7, #20]
 801f92e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801f932:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801f934:	683b      	ldr	r3, [r7, #0]
 801f936:	689b      	ldr	r3, [r3, #8]
 801f938:	031b      	lsls	r3, r3, #12
 801f93a:	697a      	ldr	r2, [r7, #20]
 801f93c:	4313      	orrs	r3, r2
 801f93e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 801f940:	687b      	ldr	r3, [r7, #4]
 801f942:	4a2c      	ldr	r2, [pc, #176]	; (801f9f4 <TIM_OC4_SetConfig+0x110>)
 801f944:	4293      	cmp	r3, r2
 801f946:	d007      	beq.n	801f958 <TIM_OC4_SetConfig+0x74>
 801f948:	687b      	ldr	r3, [r7, #4]
 801f94a:	4a2b      	ldr	r2, [pc, #172]	; (801f9f8 <TIM_OC4_SetConfig+0x114>)
 801f94c:	4293      	cmp	r3, r2
 801f94e:	d003      	beq.n	801f958 <TIM_OC4_SetConfig+0x74>
 801f950:	687b      	ldr	r3, [r7, #4]
 801f952:	4a2a      	ldr	r2, [pc, #168]	; (801f9fc <TIM_OC4_SetConfig+0x118>)
 801f954:	4293      	cmp	r3, r2
 801f956:	d10d      	bne.n	801f974 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 801f958:	697b      	ldr	r3, [r7, #20]
 801f95a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801f95e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 801f960:	683b      	ldr	r3, [r7, #0]
 801f962:	68db      	ldr	r3, [r3, #12]
 801f964:	031b      	lsls	r3, r3, #12
 801f966:	697a      	ldr	r2, [r7, #20]
 801f968:	4313      	orrs	r3, r2
 801f96a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 801f96c:	697b      	ldr	r3, [r7, #20]
 801f96e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801f972:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f974:	687b      	ldr	r3, [r7, #4]
 801f976:	4a1f      	ldr	r2, [pc, #124]	; (801f9f4 <TIM_OC4_SetConfig+0x110>)
 801f978:	4293      	cmp	r3, r2
 801f97a:	d013      	beq.n	801f9a4 <TIM_OC4_SetConfig+0xc0>
 801f97c:	687b      	ldr	r3, [r7, #4]
 801f97e:	4a1e      	ldr	r2, [pc, #120]	; (801f9f8 <TIM_OC4_SetConfig+0x114>)
 801f980:	4293      	cmp	r3, r2
 801f982:	d00f      	beq.n	801f9a4 <TIM_OC4_SetConfig+0xc0>
 801f984:	687b      	ldr	r3, [r7, #4]
 801f986:	4a1e      	ldr	r2, [pc, #120]	; (801fa00 <TIM_OC4_SetConfig+0x11c>)
 801f988:	4293      	cmp	r3, r2
 801f98a:	d00b      	beq.n	801f9a4 <TIM_OC4_SetConfig+0xc0>
 801f98c:	687b      	ldr	r3, [r7, #4]
 801f98e:	4a1d      	ldr	r2, [pc, #116]	; (801fa04 <TIM_OC4_SetConfig+0x120>)
 801f990:	4293      	cmp	r3, r2
 801f992:	d007      	beq.n	801f9a4 <TIM_OC4_SetConfig+0xc0>
 801f994:	687b      	ldr	r3, [r7, #4]
 801f996:	4a1c      	ldr	r2, [pc, #112]	; (801fa08 <TIM_OC4_SetConfig+0x124>)
 801f998:	4293      	cmp	r3, r2
 801f99a:	d003      	beq.n	801f9a4 <TIM_OC4_SetConfig+0xc0>
 801f99c:	687b      	ldr	r3, [r7, #4]
 801f99e:	4a17      	ldr	r2, [pc, #92]	; (801f9fc <TIM_OC4_SetConfig+0x118>)
 801f9a0:	4293      	cmp	r3, r2
 801f9a2:	d113      	bne.n	801f9cc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801f9a4:	693b      	ldr	r3, [r7, #16]
 801f9a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801f9aa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 801f9ac:	693b      	ldr	r3, [r7, #16]
 801f9ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801f9b2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801f9b4:	683b      	ldr	r3, [r7, #0]
 801f9b6:	695b      	ldr	r3, [r3, #20]
 801f9b8:	019b      	lsls	r3, r3, #6
 801f9ba:	693a      	ldr	r2, [r7, #16]
 801f9bc:	4313      	orrs	r3, r2
 801f9be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 801f9c0:	683b      	ldr	r3, [r7, #0]
 801f9c2:	699b      	ldr	r3, [r3, #24]
 801f9c4:	019b      	lsls	r3, r3, #6
 801f9c6:	693a      	ldr	r2, [r7, #16]
 801f9c8:	4313      	orrs	r3, r2
 801f9ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f9cc:	687b      	ldr	r3, [r7, #4]
 801f9ce:	693a      	ldr	r2, [r7, #16]
 801f9d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801f9d2:	687b      	ldr	r3, [r7, #4]
 801f9d4:	68fa      	ldr	r2, [r7, #12]
 801f9d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801f9d8:	683b      	ldr	r3, [r7, #0]
 801f9da:	685a      	ldr	r2, [r3, #4]
 801f9dc:	687b      	ldr	r3, [r7, #4]
 801f9de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f9e0:	687b      	ldr	r3, [r7, #4]
 801f9e2:	697a      	ldr	r2, [r7, #20]
 801f9e4:	621a      	str	r2, [r3, #32]
}
 801f9e6:	bf00      	nop
 801f9e8:	371c      	adds	r7, #28
 801f9ea:	46bd      	mov	sp, r7
 801f9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9f0:	4770      	bx	lr
 801f9f2:	bf00      	nop
 801f9f4:	40012c00 	.word	0x40012c00
 801f9f8:	40013400 	.word	0x40013400
 801f9fc:	40015000 	.word	0x40015000
 801fa00:	40014000 	.word	0x40014000
 801fa04:	40014400 	.word	0x40014400
 801fa08:	40014800 	.word	0x40014800

0801fa0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801fa0c:	b480      	push	{r7}
 801fa0e:	b087      	sub	sp, #28
 801fa10:	af00      	add	r7, sp, #0
 801fa12:	6078      	str	r0, [r7, #4]
 801fa14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801fa16:	687b      	ldr	r3, [r7, #4]
 801fa18:	6a1b      	ldr	r3, [r3, #32]
 801fa1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801fa1e:	687b      	ldr	r3, [r7, #4]
 801fa20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fa22:	687b      	ldr	r3, [r7, #4]
 801fa24:	6a1b      	ldr	r3, [r3, #32]
 801fa26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fa28:	687b      	ldr	r3, [r7, #4]
 801fa2a:	685b      	ldr	r3, [r3, #4]
 801fa2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801fa2e:	687b      	ldr	r3, [r7, #4]
 801fa30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fa32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801fa34:	68fb      	ldr	r3, [r7, #12]
 801fa36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801fa3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801fa3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801fa40:	683b      	ldr	r3, [r7, #0]
 801fa42:	681b      	ldr	r3, [r3, #0]
 801fa44:	68fa      	ldr	r2, [r7, #12]
 801fa46:	4313      	orrs	r3, r2
 801fa48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801fa4a:	693b      	ldr	r3, [r7, #16]
 801fa4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801fa50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801fa52:	683b      	ldr	r3, [r7, #0]
 801fa54:	689b      	ldr	r3, [r3, #8]
 801fa56:	041b      	lsls	r3, r3, #16
 801fa58:	693a      	ldr	r2, [r7, #16]
 801fa5a:	4313      	orrs	r3, r2
 801fa5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fa5e:	687b      	ldr	r3, [r7, #4]
 801fa60:	4a19      	ldr	r2, [pc, #100]	; (801fac8 <TIM_OC5_SetConfig+0xbc>)
 801fa62:	4293      	cmp	r3, r2
 801fa64:	d013      	beq.n	801fa8e <TIM_OC5_SetConfig+0x82>
 801fa66:	687b      	ldr	r3, [r7, #4]
 801fa68:	4a18      	ldr	r2, [pc, #96]	; (801facc <TIM_OC5_SetConfig+0xc0>)
 801fa6a:	4293      	cmp	r3, r2
 801fa6c:	d00f      	beq.n	801fa8e <TIM_OC5_SetConfig+0x82>
 801fa6e:	687b      	ldr	r3, [r7, #4]
 801fa70:	4a17      	ldr	r2, [pc, #92]	; (801fad0 <TIM_OC5_SetConfig+0xc4>)
 801fa72:	4293      	cmp	r3, r2
 801fa74:	d00b      	beq.n	801fa8e <TIM_OC5_SetConfig+0x82>
 801fa76:	687b      	ldr	r3, [r7, #4]
 801fa78:	4a16      	ldr	r2, [pc, #88]	; (801fad4 <TIM_OC5_SetConfig+0xc8>)
 801fa7a:	4293      	cmp	r3, r2
 801fa7c:	d007      	beq.n	801fa8e <TIM_OC5_SetConfig+0x82>
 801fa7e:	687b      	ldr	r3, [r7, #4]
 801fa80:	4a15      	ldr	r2, [pc, #84]	; (801fad8 <TIM_OC5_SetConfig+0xcc>)
 801fa82:	4293      	cmp	r3, r2
 801fa84:	d003      	beq.n	801fa8e <TIM_OC5_SetConfig+0x82>
 801fa86:	687b      	ldr	r3, [r7, #4]
 801fa88:	4a14      	ldr	r2, [pc, #80]	; (801fadc <TIM_OC5_SetConfig+0xd0>)
 801fa8a:	4293      	cmp	r3, r2
 801fa8c:	d109      	bne.n	801faa2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801fa8e:	697b      	ldr	r3, [r7, #20]
 801fa90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801fa94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801fa96:	683b      	ldr	r3, [r7, #0]
 801fa98:	695b      	ldr	r3, [r3, #20]
 801fa9a:	021b      	lsls	r3, r3, #8
 801fa9c:	697a      	ldr	r2, [r7, #20]
 801fa9e:	4313      	orrs	r3, r2
 801faa0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801faa2:	687b      	ldr	r3, [r7, #4]
 801faa4:	697a      	ldr	r2, [r7, #20]
 801faa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801faa8:	687b      	ldr	r3, [r7, #4]
 801faaa:	68fa      	ldr	r2, [r7, #12]
 801faac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801faae:	683b      	ldr	r3, [r7, #0]
 801fab0:	685a      	ldr	r2, [r3, #4]
 801fab2:	687b      	ldr	r3, [r7, #4]
 801fab4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fab6:	687b      	ldr	r3, [r7, #4]
 801fab8:	693a      	ldr	r2, [r7, #16]
 801faba:	621a      	str	r2, [r3, #32]
}
 801fabc:	bf00      	nop
 801fabe:	371c      	adds	r7, #28
 801fac0:	46bd      	mov	sp, r7
 801fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fac6:	4770      	bx	lr
 801fac8:	40012c00 	.word	0x40012c00
 801facc:	40013400 	.word	0x40013400
 801fad0:	40014000 	.word	0x40014000
 801fad4:	40014400 	.word	0x40014400
 801fad8:	40014800 	.word	0x40014800
 801fadc:	40015000 	.word	0x40015000

0801fae0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801fae0:	b480      	push	{r7}
 801fae2:	b087      	sub	sp, #28
 801fae4:	af00      	add	r7, sp, #0
 801fae6:	6078      	str	r0, [r7, #4]
 801fae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801faea:	687b      	ldr	r3, [r7, #4]
 801faec:	6a1b      	ldr	r3, [r3, #32]
 801faee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801faf2:	687b      	ldr	r3, [r7, #4]
 801faf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801faf6:	687b      	ldr	r3, [r7, #4]
 801faf8:	6a1b      	ldr	r3, [r3, #32]
 801fafa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fafc:	687b      	ldr	r3, [r7, #4]
 801fafe:	685b      	ldr	r3, [r3, #4]
 801fb00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801fb02:	687b      	ldr	r3, [r7, #4]
 801fb04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fb06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801fb08:	68fb      	ldr	r3, [r7, #12]
 801fb0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801fb0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801fb12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801fb14:	683b      	ldr	r3, [r7, #0]
 801fb16:	681b      	ldr	r3, [r3, #0]
 801fb18:	021b      	lsls	r3, r3, #8
 801fb1a:	68fa      	ldr	r2, [r7, #12]
 801fb1c:	4313      	orrs	r3, r2
 801fb1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801fb20:	693b      	ldr	r3, [r7, #16]
 801fb22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801fb26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801fb28:	683b      	ldr	r3, [r7, #0]
 801fb2a:	689b      	ldr	r3, [r3, #8]
 801fb2c:	051b      	lsls	r3, r3, #20
 801fb2e:	693a      	ldr	r2, [r7, #16]
 801fb30:	4313      	orrs	r3, r2
 801fb32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fb34:	687b      	ldr	r3, [r7, #4]
 801fb36:	4a1a      	ldr	r2, [pc, #104]	; (801fba0 <TIM_OC6_SetConfig+0xc0>)
 801fb38:	4293      	cmp	r3, r2
 801fb3a:	d013      	beq.n	801fb64 <TIM_OC6_SetConfig+0x84>
 801fb3c:	687b      	ldr	r3, [r7, #4]
 801fb3e:	4a19      	ldr	r2, [pc, #100]	; (801fba4 <TIM_OC6_SetConfig+0xc4>)
 801fb40:	4293      	cmp	r3, r2
 801fb42:	d00f      	beq.n	801fb64 <TIM_OC6_SetConfig+0x84>
 801fb44:	687b      	ldr	r3, [r7, #4]
 801fb46:	4a18      	ldr	r2, [pc, #96]	; (801fba8 <TIM_OC6_SetConfig+0xc8>)
 801fb48:	4293      	cmp	r3, r2
 801fb4a:	d00b      	beq.n	801fb64 <TIM_OC6_SetConfig+0x84>
 801fb4c:	687b      	ldr	r3, [r7, #4]
 801fb4e:	4a17      	ldr	r2, [pc, #92]	; (801fbac <TIM_OC6_SetConfig+0xcc>)
 801fb50:	4293      	cmp	r3, r2
 801fb52:	d007      	beq.n	801fb64 <TIM_OC6_SetConfig+0x84>
 801fb54:	687b      	ldr	r3, [r7, #4]
 801fb56:	4a16      	ldr	r2, [pc, #88]	; (801fbb0 <TIM_OC6_SetConfig+0xd0>)
 801fb58:	4293      	cmp	r3, r2
 801fb5a:	d003      	beq.n	801fb64 <TIM_OC6_SetConfig+0x84>
 801fb5c:	687b      	ldr	r3, [r7, #4]
 801fb5e:	4a15      	ldr	r2, [pc, #84]	; (801fbb4 <TIM_OC6_SetConfig+0xd4>)
 801fb60:	4293      	cmp	r3, r2
 801fb62:	d109      	bne.n	801fb78 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801fb64:	697b      	ldr	r3, [r7, #20]
 801fb66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801fb6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801fb6c:	683b      	ldr	r3, [r7, #0]
 801fb6e:	695b      	ldr	r3, [r3, #20]
 801fb70:	029b      	lsls	r3, r3, #10
 801fb72:	697a      	ldr	r2, [r7, #20]
 801fb74:	4313      	orrs	r3, r2
 801fb76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fb78:	687b      	ldr	r3, [r7, #4]
 801fb7a:	697a      	ldr	r2, [r7, #20]
 801fb7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801fb7e:	687b      	ldr	r3, [r7, #4]
 801fb80:	68fa      	ldr	r2, [r7, #12]
 801fb82:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801fb84:	683b      	ldr	r3, [r7, #0]
 801fb86:	685a      	ldr	r2, [r3, #4]
 801fb88:	687b      	ldr	r3, [r7, #4]
 801fb8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fb8c:	687b      	ldr	r3, [r7, #4]
 801fb8e:	693a      	ldr	r2, [r7, #16]
 801fb90:	621a      	str	r2, [r3, #32]
}
 801fb92:	bf00      	nop
 801fb94:	371c      	adds	r7, #28
 801fb96:	46bd      	mov	sp, r7
 801fb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb9c:	4770      	bx	lr
 801fb9e:	bf00      	nop
 801fba0:	40012c00 	.word	0x40012c00
 801fba4:	40013400 	.word	0x40013400
 801fba8:	40014000 	.word	0x40014000
 801fbac:	40014400 	.word	0x40014400
 801fbb0:	40014800 	.word	0x40014800
 801fbb4:	40015000 	.word	0x40015000

0801fbb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801fbb8:	b480      	push	{r7}
 801fbba:	b087      	sub	sp, #28
 801fbbc:	af00      	add	r7, sp, #0
 801fbbe:	60f8      	str	r0, [r7, #12]
 801fbc0:	60b9      	str	r1, [r7, #8]
 801fbc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801fbc4:	68bb      	ldr	r3, [r7, #8]
 801fbc6:	f003 031f 	and.w	r3, r3, #31
 801fbca:	2201      	movs	r2, #1
 801fbcc:	fa02 f303 	lsl.w	r3, r2, r3
 801fbd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801fbd2:	68fb      	ldr	r3, [r7, #12]
 801fbd4:	6a1a      	ldr	r2, [r3, #32]
 801fbd6:	697b      	ldr	r3, [r7, #20]
 801fbd8:	43db      	mvns	r3, r3
 801fbda:	401a      	ands	r2, r3
 801fbdc:	68fb      	ldr	r3, [r7, #12]
 801fbde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801fbe0:	68fb      	ldr	r3, [r7, #12]
 801fbe2:	6a1a      	ldr	r2, [r3, #32]
 801fbe4:	68bb      	ldr	r3, [r7, #8]
 801fbe6:	f003 031f 	and.w	r3, r3, #31
 801fbea:	6879      	ldr	r1, [r7, #4]
 801fbec:	fa01 f303 	lsl.w	r3, r1, r3
 801fbf0:	431a      	orrs	r2, r3
 801fbf2:	68fb      	ldr	r3, [r7, #12]
 801fbf4:	621a      	str	r2, [r3, #32]
}
 801fbf6:	bf00      	nop
 801fbf8:	371c      	adds	r7, #28
 801fbfa:	46bd      	mov	sp, r7
 801fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc00:	4770      	bx	lr
	...

0801fc04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801fc04:	b480      	push	{r7}
 801fc06:	b085      	sub	sp, #20
 801fc08:	af00      	add	r7, sp, #0
 801fc0a:	6078      	str	r0, [r7, #4]
 801fc0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801fc0e:	687b      	ldr	r3, [r7, #4]
 801fc10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801fc14:	2b01      	cmp	r3, #1
 801fc16:	d101      	bne.n	801fc1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801fc18:	2302      	movs	r3, #2
 801fc1a:	e06f      	b.n	801fcfc <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 801fc1c:	687b      	ldr	r3, [r7, #4]
 801fc1e:	2201      	movs	r2, #1
 801fc20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fc24:	687b      	ldr	r3, [r7, #4]
 801fc26:	2202      	movs	r2, #2
 801fc28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801fc2c:	687b      	ldr	r3, [r7, #4]
 801fc2e:	681b      	ldr	r3, [r3, #0]
 801fc30:	685b      	ldr	r3, [r3, #4]
 801fc32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801fc34:	687b      	ldr	r3, [r7, #4]
 801fc36:	681b      	ldr	r3, [r3, #0]
 801fc38:	689b      	ldr	r3, [r3, #8]
 801fc3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801fc3c:	687b      	ldr	r3, [r7, #4]
 801fc3e:	681b      	ldr	r3, [r3, #0]
 801fc40:	4a31      	ldr	r2, [pc, #196]	; (801fd08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801fc42:	4293      	cmp	r3, r2
 801fc44:	d009      	beq.n	801fc5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801fc46:	687b      	ldr	r3, [r7, #4]
 801fc48:	681b      	ldr	r3, [r3, #0]
 801fc4a:	4a30      	ldr	r2, [pc, #192]	; (801fd0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801fc4c:	4293      	cmp	r3, r2
 801fc4e:	d004      	beq.n	801fc5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801fc50:	687b      	ldr	r3, [r7, #4]
 801fc52:	681b      	ldr	r3, [r3, #0]
 801fc54:	4a2e      	ldr	r2, [pc, #184]	; (801fd10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801fc56:	4293      	cmp	r3, r2
 801fc58:	d108      	bne.n	801fc6c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801fc5a:	68fb      	ldr	r3, [r7, #12]
 801fc5c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801fc60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801fc62:	683b      	ldr	r3, [r7, #0]
 801fc64:	685b      	ldr	r3, [r3, #4]
 801fc66:	68fa      	ldr	r2, [r7, #12]
 801fc68:	4313      	orrs	r3, r2
 801fc6a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801fc6c:	68fb      	ldr	r3, [r7, #12]
 801fc6e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 801fc72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801fc76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801fc78:	683b      	ldr	r3, [r7, #0]
 801fc7a:	681b      	ldr	r3, [r3, #0]
 801fc7c:	68fa      	ldr	r2, [r7, #12]
 801fc7e:	4313      	orrs	r3, r2
 801fc80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801fc82:	687b      	ldr	r3, [r7, #4]
 801fc84:	681b      	ldr	r3, [r3, #0]
 801fc86:	68fa      	ldr	r2, [r7, #12]
 801fc88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801fc8a:	687b      	ldr	r3, [r7, #4]
 801fc8c:	681b      	ldr	r3, [r3, #0]
 801fc8e:	4a1e      	ldr	r2, [pc, #120]	; (801fd08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801fc90:	4293      	cmp	r3, r2
 801fc92:	d01d      	beq.n	801fcd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801fc94:	687b      	ldr	r3, [r7, #4]
 801fc96:	681b      	ldr	r3, [r3, #0]
 801fc98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fc9c:	d018      	beq.n	801fcd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801fc9e:	687b      	ldr	r3, [r7, #4]
 801fca0:	681b      	ldr	r3, [r3, #0]
 801fca2:	4a1c      	ldr	r2, [pc, #112]	; (801fd14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801fca4:	4293      	cmp	r3, r2
 801fca6:	d013      	beq.n	801fcd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801fca8:	687b      	ldr	r3, [r7, #4]
 801fcaa:	681b      	ldr	r3, [r3, #0]
 801fcac:	4a1a      	ldr	r2, [pc, #104]	; (801fd18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801fcae:	4293      	cmp	r3, r2
 801fcb0:	d00e      	beq.n	801fcd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801fcb2:	687b      	ldr	r3, [r7, #4]
 801fcb4:	681b      	ldr	r3, [r3, #0]
 801fcb6:	4a15      	ldr	r2, [pc, #84]	; (801fd0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801fcb8:	4293      	cmp	r3, r2
 801fcba:	d009      	beq.n	801fcd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801fcbc:	687b      	ldr	r3, [r7, #4]
 801fcbe:	681b      	ldr	r3, [r3, #0]
 801fcc0:	4a16      	ldr	r2, [pc, #88]	; (801fd1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801fcc2:	4293      	cmp	r3, r2
 801fcc4:	d004      	beq.n	801fcd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801fcc6:	687b      	ldr	r3, [r7, #4]
 801fcc8:	681b      	ldr	r3, [r3, #0]
 801fcca:	4a11      	ldr	r2, [pc, #68]	; (801fd10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801fccc:	4293      	cmp	r3, r2
 801fcce:	d10c      	bne.n	801fcea <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801fcd0:	68bb      	ldr	r3, [r7, #8]
 801fcd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801fcd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801fcd8:	683b      	ldr	r3, [r7, #0]
 801fcda:	689b      	ldr	r3, [r3, #8]
 801fcdc:	68ba      	ldr	r2, [r7, #8]
 801fcde:	4313      	orrs	r3, r2
 801fce0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801fce2:	687b      	ldr	r3, [r7, #4]
 801fce4:	681b      	ldr	r3, [r3, #0]
 801fce6:	68ba      	ldr	r2, [r7, #8]
 801fce8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801fcea:	687b      	ldr	r3, [r7, #4]
 801fcec:	2201      	movs	r2, #1
 801fcee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801fcf2:	687b      	ldr	r3, [r7, #4]
 801fcf4:	2200      	movs	r2, #0
 801fcf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801fcfa:	2300      	movs	r3, #0
}
 801fcfc:	4618      	mov	r0, r3
 801fcfe:	3714      	adds	r7, #20
 801fd00:	46bd      	mov	sp, r7
 801fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd06:	4770      	bx	lr
 801fd08:	40012c00 	.word	0x40012c00
 801fd0c:	40013400 	.word	0x40013400
 801fd10:	40015000 	.word	0x40015000
 801fd14:	40000400 	.word	0x40000400
 801fd18:	40000800 	.word	0x40000800
 801fd1c:	40014000 	.word	0x40014000

0801fd20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801fd20:	b480      	push	{r7}
 801fd22:	b085      	sub	sp, #20
 801fd24:	af00      	add	r7, sp, #0
 801fd26:	6078      	str	r0, [r7, #4]
 801fd28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801fd2a:	2300      	movs	r3, #0
 801fd2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801fd2e:	687b      	ldr	r3, [r7, #4]
 801fd30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801fd34:	2b01      	cmp	r3, #1
 801fd36:	d101      	bne.n	801fd3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801fd38:	2302      	movs	r3, #2
 801fd3a:	e096      	b.n	801fe6a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 801fd3c:	687b      	ldr	r3, [r7, #4]
 801fd3e:	2201      	movs	r2, #1
 801fd40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801fd44:	68fb      	ldr	r3, [r7, #12]
 801fd46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801fd4a:	683b      	ldr	r3, [r7, #0]
 801fd4c:	68db      	ldr	r3, [r3, #12]
 801fd4e:	4313      	orrs	r3, r2
 801fd50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801fd52:	68fb      	ldr	r3, [r7, #12]
 801fd54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801fd58:	683b      	ldr	r3, [r7, #0]
 801fd5a:	689b      	ldr	r3, [r3, #8]
 801fd5c:	4313      	orrs	r3, r2
 801fd5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801fd60:	68fb      	ldr	r3, [r7, #12]
 801fd62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801fd66:	683b      	ldr	r3, [r7, #0]
 801fd68:	685b      	ldr	r3, [r3, #4]
 801fd6a:	4313      	orrs	r3, r2
 801fd6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801fd6e:	68fb      	ldr	r3, [r7, #12]
 801fd70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801fd74:	683b      	ldr	r3, [r7, #0]
 801fd76:	681b      	ldr	r3, [r3, #0]
 801fd78:	4313      	orrs	r3, r2
 801fd7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801fd7c:	68fb      	ldr	r3, [r7, #12]
 801fd7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801fd82:	683b      	ldr	r3, [r7, #0]
 801fd84:	691b      	ldr	r3, [r3, #16]
 801fd86:	4313      	orrs	r3, r2
 801fd88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801fd8a:	68fb      	ldr	r3, [r7, #12]
 801fd8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801fd90:	683b      	ldr	r3, [r7, #0]
 801fd92:	695b      	ldr	r3, [r3, #20]
 801fd94:	4313      	orrs	r3, r2
 801fd96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801fd98:	68fb      	ldr	r3, [r7, #12]
 801fd9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801fd9e:	683b      	ldr	r3, [r7, #0]
 801fda0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fda2:	4313      	orrs	r3, r2
 801fda4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801fda6:	68fb      	ldr	r3, [r7, #12]
 801fda8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801fdac:	683b      	ldr	r3, [r7, #0]
 801fdae:	699b      	ldr	r3, [r3, #24]
 801fdb0:	041b      	lsls	r3, r3, #16
 801fdb2:	4313      	orrs	r3, r2
 801fdb4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801fdb6:	687b      	ldr	r3, [r7, #4]
 801fdb8:	681b      	ldr	r3, [r3, #0]
 801fdba:	4a2f      	ldr	r2, [pc, #188]	; (801fe78 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801fdbc:	4293      	cmp	r3, r2
 801fdbe:	d009      	beq.n	801fdd4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801fdc0:	687b      	ldr	r3, [r7, #4]
 801fdc2:	681b      	ldr	r3, [r3, #0]
 801fdc4:	4a2d      	ldr	r2, [pc, #180]	; (801fe7c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801fdc6:	4293      	cmp	r3, r2
 801fdc8:	d004      	beq.n	801fdd4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801fdca:	687b      	ldr	r3, [r7, #4]
 801fdcc:	681b      	ldr	r3, [r3, #0]
 801fdce:	4a2c      	ldr	r2, [pc, #176]	; (801fe80 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801fdd0:	4293      	cmp	r3, r2
 801fdd2:	d106      	bne.n	801fde2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801fdd4:	68fb      	ldr	r3, [r7, #12]
 801fdd6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801fdda:	683b      	ldr	r3, [r7, #0]
 801fddc:	69db      	ldr	r3, [r3, #28]
 801fdde:	4313      	orrs	r3, r2
 801fde0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801fde2:	687b      	ldr	r3, [r7, #4]
 801fde4:	681b      	ldr	r3, [r3, #0]
 801fde6:	4a24      	ldr	r2, [pc, #144]	; (801fe78 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801fde8:	4293      	cmp	r3, r2
 801fdea:	d009      	beq.n	801fe00 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801fdec:	687b      	ldr	r3, [r7, #4]
 801fdee:	681b      	ldr	r3, [r3, #0]
 801fdf0:	4a22      	ldr	r2, [pc, #136]	; (801fe7c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801fdf2:	4293      	cmp	r3, r2
 801fdf4:	d004      	beq.n	801fe00 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801fdf6:	687b      	ldr	r3, [r7, #4]
 801fdf8:	681b      	ldr	r3, [r3, #0]
 801fdfa:	4a21      	ldr	r2, [pc, #132]	; (801fe80 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801fdfc:	4293      	cmp	r3, r2
 801fdfe:	d12b      	bne.n	801fe58 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801fe00:	68fb      	ldr	r3, [r7, #12]
 801fe02:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801fe06:	683b      	ldr	r3, [r7, #0]
 801fe08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe0a:	051b      	lsls	r3, r3, #20
 801fe0c:	4313      	orrs	r3, r2
 801fe0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801fe10:	68fb      	ldr	r3, [r7, #12]
 801fe12:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801fe16:	683b      	ldr	r3, [r7, #0]
 801fe18:	6a1b      	ldr	r3, [r3, #32]
 801fe1a:	4313      	orrs	r3, r2
 801fe1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801fe1e:	68fb      	ldr	r3, [r7, #12]
 801fe20:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801fe24:	683b      	ldr	r3, [r7, #0]
 801fe26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fe28:	4313      	orrs	r3, r2
 801fe2a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801fe2c:	687b      	ldr	r3, [r7, #4]
 801fe2e:	681b      	ldr	r3, [r3, #0]
 801fe30:	4a11      	ldr	r2, [pc, #68]	; (801fe78 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801fe32:	4293      	cmp	r3, r2
 801fe34:	d009      	beq.n	801fe4a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801fe36:	687b      	ldr	r3, [r7, #4]
 801fe38:	681b      	ldr	r3, [r3, #0]
 801fe3a:	4a10      	ldr	r2, [pc, #64]	; (801fe7c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801fe3c:	4293      	cmp	r3, r2
 801fe3e:	d004      	beq.n	801fe4a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801fe40:	687b      	ldr	r3, [r7, #4]
 801fe42:	681b      	ldr	r3, [r3, #0]
 801fe44:	4a0e      	ldr	r2, [pc, #56]	; (801fe80 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801fe46:	4293      	cmp	r3, r2
 801fe48:	d106      	bne.n	801fe58 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801fe4a:	68fb      	ldr	r3, [r7, #12]
 801fe4c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801fe50:	683b      	ldr	r3, [r7, #0]
 801fe52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe54:	4313      	orrs	r3, r2
 801fe56:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801fe58:	687b      	ldr	r3, [r7, #4]
 801fe5a:	681b      	ldr	r3, [r3, #0]
 801fe5c:	68fa      	ldr	r2, [r7, #12]
 801fe5e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801fe60:	687b      	ldr	r3, [r7, #4]
 801fe62:	2200      	movs	r2, #0
 801fe64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801fe68:	2300      	movs	r3, #0
}
 801fe6a:	4618      	mov	r0, r3
 801fe6c:	3714      	adds	r7, #20
 801fe6e:	46bd      	mov	sp, r7
 801fe70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe74:	4770      	bx	lr
 801fe76:	bf00      	nop
 801fe78:	40012c00 	.word	0x40012c00
 801fe7c:	40013400 	.word	0x40013400
 801fe80:	40015000 	.word	0x40015000

0801fe84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801fe84:	b480      	push	{r7}
 801fe86:	b083      	sub	sp, #12
 801fe88:	af00      	add	r7, sp, #0
 801fe8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801fe8c:	bf00      	nop
 801fe8e:	370c      	adds	r7, #12
 801fe90:	46bd      	mov	sp, r7
 801fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe96:	4770      	bx	lr

0801fe98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801fe98:	b480      	push	{r7}
 801fe9a:	b083      	sub	sp, #12
 801fe9c:	af00      	add	r7, sp, #0
 801fe9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801fea0:	bf00      	nop
 801fea2:	370c      	adds	r7, #12
 801fea4:	46bd      	mov	sp, r7
 801fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801feaa:	4770      	bx	lr

0801feac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801feac:	b480      	push	{r7}
 801feae:	b083      	sub	sp, #12
 801feb0:	af00      	add	r7, sp, #0
 801feb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801feb4:	bf00      	nop
 801feb6:	370c      	adds	r7, #12
 801feb8:	46bd      	mov	sp, r7
 801feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801febe:	4770      	bx	lr

0801fec0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 801fec0:	b480      	push	{r7}
 801fec2:	b083      	sub	sp, #12
 801fec4:	af00      	add	r7, sp, #0
 801fec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 801fec8:	bf00      	nop
 801feca:	370c      	adds	r7, #12
 801fecc:	46bd      	mov	sp, r7
 801fece:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fed2:	4770      	bx	lr

0801fed4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 801fed4:	b480      	push	{r7}
 801fed6:	b083      	sub	sp, #12
 801fed8:	af00      	add	r7, sp, #0
 801feda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 801fedc:	bf00      	nop
 801fede:	370c      	adds	r7, #12
 801fee0:	46bd      	mov	sp, r7
 801fee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fee6:	4770      	bx	lr

0801fee8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 801fee8:	b480      	push	{r7}
 801feea:	b083      	sub	sp, #12
 801feec:	af00      	add	r7, sp, #0
 801feee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 801fef0:	bf00      	nop
 801fef2:	370c      	adds	r7, #12
 801fef4:	46bd      	mov	sp, r7
 801fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fefa:	4770      	bx	lr

0801fefc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 801fefc:	b480      	push	{r7}
 801fefe:	b083      	sub	sp, #12
 801ff00:	af00      	add	r7, sp, #0
 801ff02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 801ff04:	bf00      	nop
 801ff06:	370c      	adds	r7, #12
 801ff08:	46bd      	mov	sp, r7
 801ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff0e:	4770      	bx	lr

0801ff10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801ff10:	b580      	push	{r7, lr}
 801ff12:	b082      	sub	sp, #8
 801ff14:	af00      	add	r7, sp, #0
 801ff16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801ff18:	687b      	ldr	r3, [r7, #4]
 801ff1a:	2b00      	cmp	r3, #0
 801ff1c:	d101      	bne.n	801ff22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801ff1e:	2301      	movs	r3, #1
 801ff20:	e042      	b.n	801ffa8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801ff22:	687b      	ldr	r3, [r7, #4]
 801ff24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ff28:	2b00      	cmp	r3, #0
 801ff2a:	d106      	bne.n	801ff3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801ff2c:	687b      	ldr	r3, [r7, #4]
 801ff2e:	2200      	movs	r2, #0
 801ff30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801ff34:	6878      	ldr	r0, [r7, #4]
 801ff36:	f7f9 fae3 	bl	8019500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801ff3a:	687b      	ldr	r3, [r7, #4]
 801ff3c:	2224      	movs	r2, #36	; 0x24
 801ff3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801ff42:	687b      	ldr	r3, [r7, #4]
 801ff44:	681b      	ldr	r3, [r3, #0]
 801ff46:	681a      	ldr	r2, [r3, #0]
 801ff48:	687b      	ldr	r3, [r7, #4]
 801ff4a:	681b      	ldr	r3, [r3, #0]
 801ff4c:	f022 0201 	bic.w	r2, r2, #1
 801ff50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801ff52:	6878      	ldr	r0, [r7, #4]
 801ff54:	f000 f8c2 	bl	80200dc <UART_SetConfig>
 801ff58:	4603      	mov	r3, r0
 801ff5a:	2b01      	cmp	r3, #1
 801ff5c:	d101      	bne.n	801ff62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801ff5e:	2301      	movs	r3, #1
 801ff60:	e022      	b.n	801ffa8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801ff62:	687b      	ldr	r3, [r7, #4]
 801ff64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ff66:	2b00      	cmp	r3, #0
 801ff68:	d002      	beq.n	801ff70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801ff6a:	6878      	ldr	r0, [r7, #4]
 801ff6c:	f000 fbb2 	bl	80206d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801ff70:	687b      	ldr	r3, [r7, #4]
 801ff72:	681b      	ldr	r3, [r3, #0]
 801ff74:	685a      	ldr	r2, [r3, #4]
 801ff76:	687b      	ldr	r3, [r7, #4]
 801ff78:	681b      	ldr	r3, [r3, #0]
 801ff7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801ff7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801ff80:	687b      	ldr	r3, [r7, #4]
 801ff82:	681b      	ldr	r3, [r3, #0]
 801ff84:	689a      	ldr	r2, [r3, #8]
 801ff86:	687b      	ldr	r3, [r7, #4]
 801ff88:	681b      	ldr	r3, [r3, #0]
 801ff8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801ff8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801ff90:	687b      	ldr	r3, [r7, #4]
 801ff92:	681b      	ldr	r3, [r3, #0]
 801ff94:	681a      	ldr	r2, [r3, #0]
 801ff96:	687b      	ldr	r3, [r7, #4]
 801ff98:	681b      	ldr	r3, [r3, #0]
 801ff9a:	f042 0201 	orr.w	r2, r2, #1
 801ff9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801ffa0:	6878      	ldr	r0, [r7, #4]
 801ffa2:	f000 fc39 	bl	8020818 <UART_CheckIdleState>
 801ffa6:	4603      	mov	r3, r0
}
 801ffa8:	4618      	mov	r0, r3
 801ffaa:	3708      	adds	r7, #8
 801ffac:	46bd      	mov	sp, r7
 801ffae:	bd80      	pop	{r7, pc}

0801ffb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801ffb0:	b580      	push	{r7, lr}
 801ffb2:	b08a      	sub	sp, #40	; 0x28
 801ffb4:	af02      	add	r7, sp, #8
 801ffb6:	60f8      	str	r0, [r7, #12]
 801ffb8:	60b9      	str	r1, [r7, #8]
 801ffba:	603b      	str	r3, [r7, #0]
 801ffbc:	4613      	mov	r3, r2
 801ffbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801ffc0:	68fb      	ldr	r3, [r7, #12]
 801ffc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ffc6:	2b20      	cmp	r3, #32
 801ffc8:	f040 8083 	bne.w	80200d2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 801ffcc:	68bb      	ldr	r3, [r7, #8]
 801ffce:	2b00      	cmp	r3, #0
 801ffd0:	d002      	beq.n	801ffd8 <HAL_UART_Transmit+0x28>
 801ffd2:	88fb      	ldrh	r3, [r7, #6]
 801ffd4:	2b00      	cmp	r3, #0
 801ffd6:	d101      	bne.n	801ffdc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801ffd8:	2301      	movs	r3, #1
 801ffda:	e07b      	b.n	80200d4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 801ffdc:	68fb      	ldr	r3, [r7, #12]
 801ffde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801ffe2:	2b01      	cmp	r3, #1
 801ffe4:	d101      	bne.n	801ffea <HAL_UART_Transmit+0x3a>
 801ffe6:	2302      	movs	r3, #2
 801ffe8:	e074      	b.n	80200d4 <HAL_UART_Transmit+0x124>
 801ffea:	68fb      	ldr	r3, [r7, #12]
 801ffec:	2201      	movs	r2, #1
 801ffee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801fff2:	68fb      	ldr	r3, [r7, #12]
 801fff4:	2200      	movs	r2, #0
 801fff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801fffa:	68fb      	ldr	r3, [r7, #12]
 801fffc:	2221      	movs	r2, #33	; 0x21
 801fffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8020002:	f7f9 fb6b 	bl	80196dc <HAL_GetTick>
 8020006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8020008:	68fb      	ldr	r3, [r7, #12]
 802000a:	88fa      	ldrh	r2, [r7, #6]
 802000c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8020010:	68fb      	ldr	r3, [r7, #12]
 8020012:	88fa      	ldrh	r2, [r7, #6]
 8020014:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8020018:	68fb      	ldr	r3, [r7, #12]
 802001a:	689b      	ldr	r3, [r3, #8]
 802001c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020020:	d108      	bne.n	8020034 <HAL_UART_Transmit+0x84>
 8020022:	68fb      	ldr	r3, [r7, #12]
 8020024:	691b      	ldr	r3, [r3, #16]
 8020026:	2b00      	cmp	r3, #0
 8020028:	d104      	bne.n	8020034 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 802002a:	2300      	movs	r3, #0
 802002c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 802002e:	68bb      	ldr	r3, [r7, #8]
 8020030:	61bb      	str	r3, [r7, #24]
 8020032:	e003      	b.n	802003c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8020034:	68bb      	ldr	r3, [r7, #8]
 8020036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8020038:	2300      	movs	r3, #0
 802003a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 802003c:	68fb      	ldr	r3, [r7, #12]
 802003e:	2200      	movs	r2, #0
 8020040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8020044:	e02c      	b.n	80200a0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8020046:	683b      	ldr	r3, [r7, #0]
 8020048:	9300      	str	r3, [sp, #0]
 802004a:	697b      	ldr	r3, [r7, #20]
 802004c:	2200      	movs	r2, #0
 802004e:	2180      	movs	r1, #128	; 0x80
 8020050:	68f8      	ldr	r0, [r7, #12]
 8020052:	f000 fc2c 	bl	80208ae <UART_WaitOnFlagUntilTimeout>
 8020056:	4603      	mov	r3, r0
 8020058:	2b00      	cmp	r3, #0
 802005a:	d001      	beq.n	8020060 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 802005c:	2303      	movs	r3, #3
 802005e:	e039      	b.n	80200d4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8020060:	69fb      	ldr	r3, [r7, #28]
 8020062:	2b00      	cmp	r3, #0
 8020064:	d10b      	bne.n	802007e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8020066:	69bb      	ldr	r3, [r7, #24]
 8020068:	881b      	ldrh	r3, [r3, #0]
 802006a:	461a      	mov	r2, r3
 802006c:	68fb      	ldr	r3, [r7, #12]
 802006e:	681b      	ldr	r3, [r3, #0]
 8020070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8020074:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8020076:	69bb      	ldr	r3, [r7, #24]
 8020078:	3302      	adds	r3, #2
 802007a:	61bb      	str	r3, [r7, #24]
 802007c:	e007      	b.n	802008e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 802007e:	69fb      	ldr	r3, [r7, #28]
 8020080:	781a      	ldrb	r2, [r3, #0]
 8020082:	68fb      	ldr	r3, [r7, #12]
 8020084:	681b      	ldr	r3, [r3, #0]
 8020086:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8020088:	69fb      	ldr	r3, [r7, #28]
 802008a:	3301      	adds	r3, #1
 802008c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 802008e:	68fb      	ldr	r3, [r7, #12]
 8020090:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8020094:	b29b      	uxth	r3, r3
 8020096:	3b01      	subs	r3, #1
 8020098:	b29a      	uxth	r2, r3
 802009a:	68fb      	ldr	r3, [r7, #12]
 802009c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80200a0:	68fb      	ldr	r3, [r7, #12]
 80200a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80200a6:	b29b      	uxth	r3, r3
 80200a8:	2b00      	cmp	r3, #0
 80200aa:	d1cc      	bne.n	8020046 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80200ac:	683b      	ldr	r3, [r7, #0]
 80200ae:	9300      	str	r3, [sp, #0]
 80200b0:	697b      	ldr	r3, [r7, #20]
 80200b2:	2200      	movs	r2, #0
 80200b4:	2140      	movs	r1, #64	; 0x40
 80200b6:	68f8      	ldr	r0, [r7, #12]
 80200b8:	f000 fbf9 	bl	80208ae <UART_WaitOnFlagUntilTimeout>
 80200bc:	4603      	mov	r3, r0
 80200be:	2b00      	cmp	r3, #0
 80200c0:	d001      	beq.n	80200c6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80200c2:	2303      	movs	r3, #3
 80200c4:	e006      	b.n	80200d4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80200c6:	68fb      	ldr	r3, [r7, #12]
 80200c8:	2220      	movs	r2, #32
 80200ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80200ce:	2300      	movs	r3, #0
 80200d0:	e000      	b.n	80200d4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80200d2:	2302      	movs	r3, #2
  }
}
 80200d4:	4618      	mov	r0, r3
 80200d6:	3720      	adds	r7, #32
 80200d8:	46bd      	mov	sp, r7
 80200da:	bd80      	pop	{r7, pc}

080200dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80200dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80200e0:	b08c      	sub	sp, #48	; 0x30
 80200e2:	af00      	add	r7, sp, #0
 80200e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80200e6:	2300      	movs	r3, #0
 80200e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80200ec:	697b      	ldr	r3, [r7, #20]
 80200ee:	689a      	ldr	r2, [r3, #8]
 80200f0:	697b      	ldr	r3, [r7, #20]
 80200f2:	691b      	ldr	r3, [r3, #16]
 80200f4:	431a      	orrs	r2, r3
 80200f6:	697b      	ldr	r3, [r7, #20]
 80200f8:	695b      	ldr	r3, [r3, #20]
 80200fa:	431a      	orrs	r2, r3
 80200fc:	697b      	ldr	r3, [r7, #20]
 80200fe:	69db      	ldr	r3, [r3, #28]
 8020100:	4313      	orrs	r3, r2
 8020102:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8020104:	697b      	ldr	r3, [r7, #20]
 8020106:	681b      	ldr	r3, [r3, #0]
 8020108:	681a      	ldr	r2, [r3, #0]
 802010a:	4baa      	ldr	r3, [pc, #680]	; (80203b4 <UART_SetConfig+0x2d8>)
 802010c:	4013      	ands	r3, r2
 802010e:	697a      	ldr	r2, [r7, #20]
 8020110:	6812      	ldr	r2, [r2, #0]
 8020112:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020114:	430b      	orrs	r3, r1
 8020116:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8020118:	697b      	ldr	r3, [r7, #20]
 802011a:	681b      	ldr	r3, [r3, #0]
 802011c:	685b      	ldr	r3, [r3, #4]
 802011e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8020122:	697b      	ldr	r3, [r7, #20]
 8020124:	68da      	ldr	r2, [r3, #12]
 8020126:	697b      	ldr	r3, [r7, #20]
 8020128:	681b      	ldr	r3, [r3, #0]
 802012a:	430a      	orrs	r2, r1
 802012c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 802012e:	697b      	ldr	r3, [r7, #20]
 8020130:	699b      	ldr	r3, [r3, #24]
 8020132:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8020134:	697b      	ldr	r3, [r7, #20]
 8020136:	681b      	ldr	r3, [r3, #0]
 8020138:	4a9f      	ldr	r2, [pc, #636]	; (80203b8 <UART_SetConfig+0x2dc>)
 802013a:	4293      	cmp	r3, r2
 802013c:	d004      	beq.n	8020148 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 802013e:	697b      	ldr	r3, [r7, #20]
 8020140:	6a1b      	ldr	r3, [r3, #32]
 8020142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020144:	4313      	orrs	r3, r2
 8020146:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8020148:	697b      	ldr	r3, [r7, #20]
 802014a:	681b      	ldr	r3, [r3, #0]
 802014c:	689b      	ldr	r3, [r3, #8]
 802014e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8020152:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8020156:	697a      	ldr	r2, [r7, #20]
 8020158:	6812      	ldr	r2, [r2, #0]
 802015a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802015c:	430b      	orrs	r3, r1
 802015e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8020160:	697b      	ldr	r3, [r7, #20]
 8020162:	681b      	ldr	r3, [r3, #0]
 8020164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020166:	f023 010f 	bic.w	r1, r3, #15
 802016a:	697b      	ldr	r3, [r7, #20]
 802016c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802016e:	697b      	ldr	r3, [r7, #20]
 8020170:	681b      	ldr	r3, [r3, #0]
 8020172:	430a      	orrs	r2, r1
 8020174:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8020176:	697b      	ldr	r3, [r7, #20]
 8020178:	681b      	ldr	r3, [r3, #0]
 802017a:	4a90      	ldr	r2, [pc, #576]	; (80203bc <UART_SetConfig+0x2e0>)
 802017c:	4293      	cmp	r3, r2
 802017e:	d125      	bne.n	80201cc <UART_SetConfig+0xf0>
 8020180:	4b8f      	ldr	r3, [pc, #572]	; (80203c0 <UART_SetConfig+0x2e4>)
 8020182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020186:	f003 0303 	and.w	r3, r3, #3
 802018a:	2b03      	cmp	r3, #3
 802018c:	d81a      	bhi.n	80201c4 <UART_SetConfig+0xe8>
 802018e:	a201      	add	r2, pc, #4	; (adr r2, 8020194 <UART_SetConfig+0xb8>)
 8020190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020194:	080201a5 	.word	0x080201a5
 8020198:	080201b5 	.word	0x080201b5
 802019c:	080201ad 	.word	0x080201ad
 80201a0:	080201bd 	.word	0x080201bd
 80201a4:	2301      	movs	r3, #1
 80201a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80201aa:	e116      	b.n	80203da <UART_SetConfig+0x2fe>
 80201ac:	2302      	movs	r3, #2
 80201ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80201b2:	e112      	b.n	80203da <UART_SetConfig+0x2fe>
 80201b4:	2304      	movs	r3, #4
 80201b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80201ba:	e10e      	b.n	80203da <UART_SetConfig+0x2fe>
 80201bc:	2308      	movs	r3, #8
 80201be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80201c2:	e10a      	b.n	80203da <UART_SetConfig+0x2fe>
 80201c4:	2310      	movs	r3, #16
 80201c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80201ca:	e106      	b.n	80203da <UART_SetConfig+0x2fe>
 80201cc:	697b      	ldr	r3, [r7, #20]
 80201ce:	681b      	ldr	r3, [r3, #0]
 80201d0:	4a7c      	ldr	r2, [pc, #496]	; (80203c4 <UART_SetConfig+0x2e8>)
 80201d2:	4293      	cmp	r3, r2
 80201d4:	d138      	bne.n	8020248 <UART_SetConfig+0x16c>
 80201d6:	4b7a      	ldr	r3, [pc, #488]	; (80203c0 <UART_SetConfig+0x2e4>)
 80201d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80201dc:	f003 030c 	and.w	r3, r3, #12
 80201e0:	2b0c      	cmp	r3, #12
 80201e2:	d82d      	bhi.n	8020240 <UART_SetConfig+0x164>
 80201e4:	a201      	add	r2, pc, #4	; (adr r2, 80201ec <UART_SetConfig+0x110>)
 80201e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80201ea:	bf00      	nop
 80201ec:	08020221 	.word	0x08020221
 80201f0:	08020241 	.word	0x08020241
 80201f4:	08020241 	.word	0x08020241
 80201f8:	08020241 	.word	0x08020241
 80201fc:	08020231 	.word	0x08020231
 8020200:	08020241 	.word	0x08020241
 8020204:	08020241 	.word	0x08020241
 8020208:	08020241 	.word	0x08020241
 802020c:	08020229 	.word	0x08020229
 8020210:	08020241 	.word	0x08020241
 8020214:	08020241 	.word	0x08020241
 8020218:	08020241 	.word	0x08020241
 802021c:	08020239 	.word	0x08020239
 8020220:	2300      	movs	r3, #0
 8020222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020226:	e0d8      	b.n	80203da <UART_SetConfig+0x2fe>
 8020228:	2302      	movs	r3, #2
 802022a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802022e:	e0d4      	b.n	80203da <UART_SetConfig+0x2fe>
 8020230:	2304      	movs	r3, #4
 8020232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020236:	e0d0      	b.n	80203da <UART_SetConfig+0x2fe>
 8020238:	2308      	movs	r3, #8
 802023a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802023e:	e0cc      	b.n	80203da <UART_SetConfig+0x2fe>
 8020240:	2310      	movs	r3, #16
 8020242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020246:	e0c8      	b.n	80203da <UART_SetConfig+0x2fe>
 8020248:	697b      	ldr	r3, [r7, #20]
 802024a:	681b      	ldr	r3, [r3, #0]
 802024c:	4a5e      	ldr	r2, [pc, #376]	; (80203c8 <UART_SetConfig+0x2ec>)
 802024e:	4293      	cmp	r3, r2
 8020250:	d125      	bne.n	802029e <UART_SetConfig+0x1c2>
 8020252:	4b5b      	ldr	r3, [pc, #364]	; (80203c0 <UART_SetConfig+0x2e4>)
 8020254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020258:	f003 0330 	and.w	r3, r3, #48	; 0x30
 802025c:	2b30      	cmp	r3, #48	; 0x30
 802025e:	d016      	beq.n	802028e <UART_SetConfig+0x1b2>
 8020260:	2b30      	cmp	r3, #48	; 0x30
 8020262:	d818      	bhi.n	8020296 <UART_SetConfig+0x1ba>
 8020264:	2b20      	cmp	r3, #32
 8020266:	d00a      	beq.n	802027e <UART_SetConfig+0x1a2>
 8020268:	2b20      	cmp	r3, #32
 802026a:	d814      	bhi.n	8020296 <UART_SetConfig+0x1ba>
 802026c:	2b00      	cmp	r3, #0
 802026e:	d002      	beq.n	8020276 <UART_SetConfig+0x19a>
 8020270:	2b10      	cmp	r3, #16
 8020272:	d008      	beq.n	8020286 <UART_SetConfig+0x1aa>
 8020274:	e00f      	b.n	8020296 <UART_SetConfig+0x1ba>
 8020276:	2300      	movs	r3, #0
 8020278:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802027c:	e0ad      	b.n	80203da <UART_SetConfig+0x2fe>
 802027e:	2302      	movs	r3, #2
 8020280:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020284:	e0a9      	b.n	80203da <UART_SetConfig+0x2fe>
 8020286:	2304      	movs	r3, #4
 8020288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802028c:	e0a5      	b.n	80203da <UART_SetConfig+0x2fe>
 802028e:	2308      	movs	r3, #8
 8020290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020294:	e0a1      	b.n	80203da <UART_SetConfig+0x2fe>
 8020296:	2310      	movs	r3, #16
 8020298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802029c:	e09d      	b.n	80203da <UART_SetConfig+0x2fe>
 802029e:	697b      	ldr	r3, [r7, #20]
 80202a0:	681b      	ldr	r3, [r3, #0]
 80202a2:	4a4a      	ldr	r2, [pc, #296]	; (80203cc <UART_SetConfig+0x2f0>)
 80202a4:	4293      	cmp	r3, r2
 80202a6:	d125      	bne.n	80202f4 <UART_SetConfig+0x218>
 80202a8:	4b45      	ldr	r3, [pc, #276]	; (80203c0 <UART_SetConfig+0x2e4>)
 80202aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80202ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80202b2:	2bc0      	cmp	r3, #192	; 0xc0
 80202b4:	d016      	beq.n	80202e4 <UART_SetConfig+0x208>
 80202b6:	2bc0      	cmp	r3, #192	; 0xc0
 80202b8:	d818      	bhi.n	80202ec <UART_SetConfig+0x210>
 80202ba:	2b80      	cmp	r3, #128	; 0x80
 80202bc:	d00a      	beq.n	80202d4 <UART_SetConfig+0x1f8>
 80202be:	2b80      	cmp	r3, #128	; 0x80
 80202c0:	d814      	bhi.n	80202ec <UART_SetConfig+0x210>
 80202c2:	2b00      	cmp	r3, #0
 80202c4:	d002      	beq.n	80202cc <UART_SetConfig+0x1f0>
 80202c6:	2b40      	cmp	r3, #64	; 0x40
 80202c8:	d008      	beq.n	80202dc <UART_SetConfig+0x200>
 80202ca:	e00f      	b.n	80202ec <UART_SetConfig+0x210>
 80202cc:	2300      	movs	r3, #0
 80202ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80202d2:	e082      	b.n	80203da <UART_SetConfig+0x2fe>
 80202d4:	2302      	movs	r3, #2
 80202d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80202da:	e07e      	b.n	80203da <UART_SetConfig+0x2fe>
 80202dc:	2304      	movs	r3, #4
 80202de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80202e2:	e07a      	b.n	80203da <UART_SetConfig+0x2fe>
 80202e4:	2308      	movs	r3, #8
 80202e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80202ea:	e076      	b.n	80203da <UART_SetConfig+0x2fe>
 80202ec:	2310      	movs	r3, #16
 80202ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80202f2:	e072      	b.n	80203da <UART_SetConfig+0x2fe>
 80202f4:	697b      	ldr	r3, [r7, #20]
 80202f6:	681b      	ldr	r3, [r3, #0]
 80202f8:	4a35      	ldr	r2, [pc, #212]	; (80203d0 <UART_SetConfig+0x2f4>)
 80202fa:	4293      	cmp	r3, r2
 80202fc:	d12a      	bne.n	8020354 <UART_SetConfig+0x278>
 80202fe:	4b30      	ldr	r3, [pc, #192]	; (80203c0 <UART_SetConfig+0x2e4>)
 8020300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8020308:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802030c:	d01a      	beq.n	8020344 <UART_SetConfig+0x268>
 802030e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8020312:	d81b      	bhi.n	802034c <UART_SetConfig+0x270>
 8020314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020318:	d00c      	beq.n	8020334 <UART_SetConfig+0x258>
 802031a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802031e:	d815      	bhi.n	802034c <UART_SetConfig+0x270>
 8020320:	2b00      	cmp	r3, #0
 8020322:	d003      	beq.n	802032c <UART_SetConfig+0x250>
 8020324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020328:	d008      	beq.n	802033c <UART_SetConfig+0x260>
 802032a:	e00f      	b.n	802034c <UART_SetConfig+0x270>
 802032c:	2300      	movs	r3, #0
 802032e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020332:	e052      	b.n	80203da <UART_SetConfig+0x2fe>
 8020334:	2302      	movs	r3, #2
 8020336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802033a:	e04e      	b.n	80203da <UART_SetConfig+0x2fe>
 802033c:	2304      	movs	r3, #4
 802033e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020342:	e04a      	b.n	80203da <UART_SetConfig+0x2fe>
 8020344:	2308      	movs	r3, #8
 8020346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802034a:	e046      	b.n	80203da <UART_SetConfig+0x2fe>
 802034c:	2310      	movs	r3, #16
 802034e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020352:	e042      	b.n	80203da <UART_SetConfig+0x2fe>
 8020354:	697b      	ldr	r3, [r7, #20]
 8020356:	681b      	ldr	r3, [r3, #0]
 8020358:	4a17      	ldr	r2, [pc, #92]	; (80203b8 <UART_SetConfig+0x2dc>)
 802035a:	4293      	cmp	r3, r2
 802035c:	d13a      	bne.n	80203d4 <UART_SetConfig+0x2f8>
 802035e:	4b18      	ldr	r3, [pc, #96]	; (80203c0 <UART_SetConfig+0x2e4>)
 8020360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020364:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8020368:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 802036c:	d01a      	beq.n	80203a4 <UART_SetConfig+0x2c8>
 802036e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8020372:	d81b      	bhi.n	80203ac <UART_SetConfig+0x2d0>
 8020374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8020378:	d00c      	beq.n	8020394 <UART_SetConfig+0x2b8>
 802037a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802037e:	d815      	bhi.n	80203ac <UART_SetConfig+0x2d0>
 8020380:	2b00      	cmp	r3, #0
 8020382:	d003      	beq.n	802038c <UART_SetConfig+0x2b0>
 8020384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020388:	d008      	beq.n	802039c <UART_SetConfig+0x2c0>
 802038a:	e00f      	b.n	80203ac <UART_SetConfig+0x2d0>
 802038c:	2300      	movs	r3, #0
 802038e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020392:	e022      	b.n	80203da <UART_SetConfig+0x2fe>
 8020394:	2302      	movs	r3, #2
 8020396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802039a:	e01e      	b.n	80203da <UART_SetConfig+0x2fe>
 802039c:	2304      	movs	r3, #4
 802039e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80203a2:	e01a      	b.n	80203da <UART_SetConfig+0x2fe>
 80203a4:	2308      	movs	r3, #8
 80203a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80203aa:	e016      	b.n	80203da <UART_SetConfig+0x2fe>
 80203ac:	2310      	movs	r3, #16
 80203ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80203b2:	e012      	b.n	80203da <UART_SetConfig+0x2fe>
 80203b4:	cfff69f3 	.word	0xcfff69f3
 80203b8:	40008000 	.word	0x40008000
 80203bc:	40013800 	.word	0x40013800
 80203c0:	40021000 	.word	0x40021000
 80203c4:	40004400 	.word	0x40004400
 80203c8:	40004800 	.word	0x40004800
 80203cc:	40004c00 	.word	0x40004c00
 80203d0:	40005000 	.word	0x40005000
 80203d4:	2310      	movs	r3, #16
 80203d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80203da:	697b      	ldr	r3, [r7, #20]
 80203dc:	681b      	ldr	r3, [r3, #0]
 80203de:	4aae      	ldr	r2, [pc, #696]	; (8020698 <UART_SetConfig+0x5bc>)
 80203e0:	4293      	cmp	r3, r2
 80203e2:	f040 8097 	bne.w	8020514 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80203e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80203ea:	2b08      	cmp	r3, #8
 80203ec:	d823      	bhi.n	8020436 <UART_SetConfig+0x35a>
 80203ee:	a201      	add	r2, pc, #4	; (adr r2, 80203f4 <UART_SetConfig+0x318>)
 80203f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80203f4:	08020419 	.word	0x08020419
 80203f8:	08020437 	.word	0x08020437
 80203fc:	08020421 	.word	0x08020421
 8020400:	08020437 	.word	0x08020437
 8020404:	08020427 	.word	0x08020427
 8020408:	08020437 	.word	0x08020437
 802040c:	08020437 	.word	0x08020437
 8020410:	08020437 	.word	0x08020437
 8020414:	0802042f 	.word	0x0802042f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8020418:	f7fd f8b4 	bl	801d584 <HAL_RCC_GetPCLK1Freq>
 802041c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802041e:	e010      	b.n	8020442 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8020420:	4b9e      	ldr	r3, [pc, #632]	; (802069c <UART_SetConfig+0x5c0>)
 8020422:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8020424:	e00d      	b.n	8020442 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8020426:	f7fd f841 	bl	801d4ac <HAL_RCC_GetSysClockFreq>
 802042a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802042c:	e009      	b.n	8020442 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802042e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8020432:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8020434:	e005      	b.n	8020442 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8020436:	2300      	movs	r3, #0
 8020438:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 802043a:	2301      	movs	r3, #1
 802043c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8020440:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8020442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020444:	2b00      	cmp	r3, #0
 8020446:	f000 8130 	beq.w	80206aa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 802044a:	697b      	ldr	r3, [r7, #20]
 802044c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802044e:	4a94      	ldr	r2, [pc, #592]	; (80206a0 <UART_SetConfig+0x5c4>)
 8020450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020454:	461a      	mov	r2, r3
 8020456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020458:	fbb3 f3f2 	udiv	r3, r3, r2
 802045c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802045e:	697b      	ldr	r3, [r7, #20]
 8020460:	685a      	ldr	r2, [r3, #4]
 8020462:	4613      	mov	r3, r2
 8020464:	005b      	lsls	r3, r3, #1
 8020466:	4413      	add	r3, r2
 8020468:	69ba      	ldr	r2, [r7, #24]
 802046a:	429a      	cmp	r2, r3
 802046c:	d305      	bcc.n	802047a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 802046e:	697b      	ldr	r3, [r7, #20]
 8020470:	685b      	ldr	r3, [r3, #4]
 8020472:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8020474:	69ba      	ldr	r2, [r7, #24]
 8020476:	429a      	cmp	r2, r3
 8020478:	d903      	bls.n	8020482 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 802047a:	2301      	movs	r3, #1
 802047c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8020480:	e113      	b.n	80206aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020484:	2200      	movs	r2, #0
 8020486:	60bb      	str	r3, [r7, #8]
 8020488:	60fa      	str	r2, [r7, #12]
 802048a:	697b      	ldr	r3, [r7, #20]
 802048c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802048e:	4a84      	ldr	r2, [pc, #528]	; (80206a0 <UART_SetConfig+0x5c4>)
 8020490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020494:	b29b      	uxth	r3, r3
 8020496:	2200      	movs	r2, #0
 8020498:	603b      	str	r3, [r7, #0]
 802049a:	607a      	str	r2, [r7, #4]
 802049c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80204a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80204a4:	f7e0 fbf8 	bl	8000c98 <__aeabi_uldivmod>
 80204a8:	4602      	mov	r2, r0
 80204aa:	460b      	mov	r3, r1
 80204ac:	4610      	mov	r0, r2
 80204ae:	4619      	mov	r1, r3
 80204b0:	f04f 0200 	mov.w	r2, #0
 80204b4:	f04f 0300 	mov.w	r3, #0
 80204b8:	020b      	lsls	r3, r1, #8
 80204ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80204be:	0202      	lsls	r2, r0, #8
 80204c0:	6979      	ldr	r1, [r7, #20]
 80204c2:	6849      	ldr	r1, [r1, #4]
 80204c4:	0849      	lsrs	r1, r1, #1
 80204c6:	2000      	movs	r0, #0
 80204c8:	460c      	mov	r4, r1
 80204ca:	4605      	mov	r5, r0
 80204cc:	eb12 0804 	adds.w	r8, r2, r4
 80204d0:	eb43 0905 	adc.w	r9, r3, r5
 80204d4:	697b      	ldr	r3, [r7, #20]
 80204d6:	685b      	ldr	r3, [r3, #4]
 80204d8:	2200      	movs	r2, #0
 80204da:	469a      	mov	sl, r3
 80204dc:	4693      	mov	fp, r2
 80204de:	4652      	mov	r2, sl
 80204e0:	465b      	mov	r3, fp
 80204e2:	4640      	mov	r0, r8
 80204e4:	4649      	mov	r1, r9
 80204e6:	f7e0 fbd7 	bl	8000c98 <__aeabi_uldivmod>
 80204ea:	4602      	mov	r2, r0
 80204ec:	460b      	mov	r3, r1
 80204ee:	4613      	mov	r3, r2
 80204f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80204f2:	6a3b      	ldr	r3, [r7, #32]
 80204f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80204f8:	d308      	bcc.n	802050c <UART_SetConfig+0x430>
 80204fa:	6a3b      	ldr	r3, [r7, #32]
 80204fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8020500:	d204      	bcs.n	802050c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8020502:	697b      	ldr	r3, [r7, #20]
 8020504:	681b      	ldr	r3, [r3, #0]
 8020506:	6a3a      	ldr	r2, [r7, #32]
 8020508:	60da      	str	r2, [r3, #12]
 802050a:	e0ce      	b.n	80206aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 802050c:	2301      	movs	r3, #1
 802050e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8020512:	e0ca      	b.n	80206aa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8020514:	697b      	ldr	r3, [r7, #20]
 8020516:	69db      	ldr	r3, [r3, #28]
 8020518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802051c:	d166      	bne.n	80205ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 802051e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8020522:	2b08      	cmp	r3, #8
 8020524:	d827      	bhi.n	8020576 <UART_SetConfig+0x49a>
 8020526:	a201      	add	r2, pc, #4	; (adr r2, 802052c <UART_SetConfig+0x450>)
 8020528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802052c:	08020551 	.word	0x08020551
 8020530:	08020559 	.word	0x08020559
 8020534:	08020561 	.word	0x08020561
 8020538:	08020577 	.word	0x08020577
 802053c:	08020567 	.word	0x08020567
 8020540:	08020577 	.word	0x08020577
 8020544:	08020577 	.word	0x08020577
 8020548:	08020577 	.word	0x08020577
 802054c:	0802056f 	.word	0x0802056f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8020550:	f7fd f818 	bl	801d584 <HAL_RCC_GetPCLK1Freq>
 8020554:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8020556:	e014      	b.n	8020582 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8020558:	f7fd f82a 	bl	801d5b0 <HAL_RCC_GetPCLK2Freq>
 802055c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802055e:	e010      	b.n	8020582 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8020560:	4b4e      	ldr	r3, [pc, #312]	; (802069c <UART_SetConfig+0x5c0>)
 8020562:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8020564:	e00d      	b.n	8020582 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8020566:	f7fc ffa1 	bl	801d4ac <HAL_RCC_GetSysClockFreq>
 802056a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802056c:	e009      	b.n	8020582 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802056e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8020572:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8020574:	e005      	b.n	8020582 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8020576:	2300      	movs	r3, #0
 8020578:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 802057a:	2301      	movs	r3, #1
 802057c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8020580:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8020582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020584:	2b00      	cmp	r3, #0
 8020586:	f000 8090 	beq.w	80206aa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802058a:	697b      	ldr	r3, [r7, #20]
 802058c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802058e:	4a44      	ldr	r2, [pc, #272]	; (80206a0 <UART_SetConfig+0x5c4>)
 8020590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020594:	461a      	mov	r2, r3
 8020596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020598:	fbb3 f3f2 	udiv	r3, r3, r2
 802059c:	005a      	lsls	r2, r3, #1
 802059e:	697b      	ldr	r3, [r7, #20]
 80205a0:	685b      	ldr	r3, [r3, #4]
 80205a2:	085b      	lsrs	r3, r3, #1
 80205a4:	441a      	add	r2, r3
 80205a6:	697b      	ldr	r3, [r7, #20]
 80205a8:	685b      	ldr	r3, [r3, #4]
 80205aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80205ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80205b0:	6a3b      	ldr	r3, [r7, #32]
 80205b2:	2b0f      	cmp	r3, #15
 80205b4:	d916      	bls.n	80205e4 <UART_SetConfig+0x508>
 80205b6:	6a3b      	ldr	r3, [r7, #32]
 80205b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80205bc:	d212      	bcs.n	80205e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80205be:	6a3b      	ldr	r3, [r7, #32]
 80205c0:	b29b      	uxth	r3, r3
 80205c2:	f023 030f 	bic.w	r3, r3, #15
 80205c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80205c8:	6a3b      	ldr	r3, [r7, #32]
 80205ca:	085b      	lsrs	r3, r3, #1
 80205cc:	b29b      	uxth	r3, r3
 80205ce:	f003 0307 	and.w	r3, r3, #7
 80205d2:	b29a      	uxth	r2, r3
 80205d4:	8bfb      	ldrh	r3, [r7, #30]
 80205d6:	4313      	orrs	r3, r2
 80205d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80205da:	697b      	ldr	r3, [r7, #20]
 80205dc:	681b      	ldr	r3, [r3, #0]
 80205de:	8bfa      	ldrh	r2, [r7, #30]
 80205e0:	60da      	str	r2, [r3, #12]
 80205e2:	e062      	b.n	80206aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80205e4:	2301      	movs	r3, #1
 80205e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80205ea:	e05e      	b.n	80206aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80205ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80205f0:	2b08      	cmp	r3, #8
 80205f2:	d828      	bhi.n	8020646 <UART_SetConfig+0x56a>
 80205f4:	a201      	add	r2, pc, #4	; (adr r2, 80205fc <UART_SetConfig+0x520>)
 80205f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80205fa:	bf00      	nop
 80205fc:	08020621 	.word	0x08020621
 8020600:	08020629 	.word	0x08020629
 8020604:	08020631 	.word	0x08020631
 8020608:	08020647 	.word	0x08020647
 802060c:	08020637 	.word	0x08020637
 8020610:	08020647 	.word	0x08020647
 8020614:	08020647 	.word	0x08020647
 8020618:	08020647 	.word	0x08020647
 802061c:	0802063f 	.word	0x0802063f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8020620:	f7fc ffb0 	bl	801d584 <HAL_RCC_GetPCLK1Freq>
 8020624:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8020626:	e014      	b.n	8020652 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8020628:	f7fc ffc2 	bl	801d5b0 <HAL_RCC_GetPCLK2Freq>
 802062c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802062e:	e010      	b.n	8020652 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8020630:	4b1a      	ldr	r3, [pc, #104]	; (802069c <UART_SetConfig+0x5c0>)
 8020632:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8020634:	e00d      	b.n	8020652 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8020636:	f7fc ff39 	bl	801d4ac <HAL_RCC_GetSysClockFreq>
 802063a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802063c:	e009      	b.n	8020652 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802063e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8020642:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8020644:	e005      	b.n	8020652 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8020646:	2300      	movs	r3, #0
 8020648:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 802064a:	2301      	movs	r3, #1
 802064c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8020650:	bf00      	nop
    }

    if (pclk != 0U)
 8020652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020654:	2b00      	cmp	r3, #0
 8020656:	d028      	beq.n	80206aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020658:	697b      	ldr	r3, [r7, #20]
 802065a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802065c:	4a10      	ldr	r2, [pc, #64]	; (80206a0 <UART_SetConfig+0x5c4>)
 802065e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020662:	461a      	mov	r2, r3
 8020664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020666:	fbb3 f2f2 	udiv	r2, r3, r2
 802066a:	697b      	ldr	r3, [r7, #20]
 802066c:	685b      	ldr	r3, [r3, #4]
 802066e:	085b      	lsrs	r3, r3, #1
 8020670:	441a      	add	r2, r3
 8020672:	697b      	ldr	r3, [r7, #20]
 8020674:	685b      	ldr	r3, [r3, #4]
 8020676:	fbb2 f3f3 	udiv	r3, r2, r3
 802067a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802067c:	6a3b      	ldr	r3, [r7, #32]
 802067e:	2b0f      	cmp	r3, #15
 8020680:	d910      	bls.n	80206a4 <UART_SetConfig+0x5c8>
 8020682:	6a3b      	ldr	r3, [r7, #32]
 8020684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020688:	d20c      	bcs.n	80206a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 802068a:	6a3b      	ldr	r3, [r7, #32]
 802068c:	b29a      	uxth	r2, r3
 802068e:	697b      	ldr	r3, [r7, #20]
 8020690:	681b      	ldr	r3, [r3, #0]
 8020692:	60da      	str	r2, [r3, #12]
 8020694:	e009      	b.n	80206aa <UART_SetConfig+0x5ce>
 8020696:	bf00      	nop
 8020698:	40008000 	.word	0x40008000
 802069c:	00f42400 	.word	0x00f42400
 80206a0:	0802523c 	.word	0x0802523c
      }
      else
      {
        ret = HAL_ERROR;
 80206a4:	2301      	movs	r3, #1
 80206a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80206aa:	697b      	ldr	r3, [r7, #20]
 80206ac:	2201      	movs	r2, #1
 80206ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80206b2:	697b      	ldr	r3, [r7, #20]
 80206b4:	2201      	movs	r2, #1
 80206b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80206ba:	697b      	ldr	r3, [r7, #20]
 80206bc:	2200      	movs	r2, #0
 80206be:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80206c0:	697b      	ldr	r3, [r7, #20]
 80206c2:	2200      	movs	r2, #0
 80206c4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80206c6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80206ca:	4618      	mov	r0, r3
 80206cc:	3730      	adds	r7, #48	; 0x30
 80206ce:	46bd      	mov	sp, r7
 80206d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080206d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80206d4:	b480      	push	{r7}
 80206d6:	b083      	sub	sp, #12
 80206d8:	af00      	add	r7, sp, #0
 80206da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80206dc:	687b      	ldr	r3, [r7, #4]
 80206de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80206e0:	f003 0301 	and.w	r3, r3, #1
 80206e4:	2b00      	cmp	r3, #0
 80206e6:	d00a      	beq.n	80206fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80206e8:	687b      	ldr	r3, [r7, #4]
 80206ea:	681b      	ldr	r3, [r3, #0]
 80206ec:	685b      	ldr	r3, [r3, #4]
 80206ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80206f2:	687b      	ldr	r3, [r7, #4]
 80206f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80206f6:	687b      	ldr	r3, [r7, #4]
 80206f8:	681b      	ldr	r3, [r3, #0]
 80206fa:	430a      	orrs	r2, r1
 80206fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80206fe:	687b      	ldr	r3, [r7, #4]
 8020700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020702:	f003 0302 	and.w	r3, r3, #2
 8020706:	2b00      	cmp	r3, #0
 8020708:	d00a      	beq.n	8020720 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 802070a:	687b      	ldr	r3, [r7, #4]
 802070c:	681b      	ldr	r3, [r3, #0]
 802070e:	685b      	ldr	r3, [r3, #4]
 8020710:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8020714:	687b      	ldr	r3, [r7, #4]
 8020716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020718:	687b      	ldr	r3, [r7, #4]
 802071a:	681b      	ldr	r3, [r3, #0]
 802071c:	430a      	orrs	r2, r1
 802071e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8020720:	687b      	ldr	r3, [r7, #4]
 8020722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020724:	f003 0304 	and.w	r3, r3, #4
 8020728:	2b00      	cmp	r3, #0
 802072a:	d00a      	beq.n	8020742 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 802072c:	687b      	ldr	r3, [r7, #4]
 802072e:	681b      	ldr	r3, [r3, #0]
 8020730:	685b      	ldr	r3, [r3, #4]
 8020732:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8020736:	687b      	ldr	r3, [r7, #4]
 8020738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802073a:	687b      	ldr	r3, [r7, #4]
 802073c:	681b      	ldr	r3, [r3, #0]
 802073e:	430a      	orrs	r2, r1
 8020740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8020742:	687b      	ldr	r3, [r7, #4]
 8020744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020746:	f003 0308 	and.w	r3, r3, #8
 802074a:	2b00      	cmp	r3, #0
 802074c:	d00a      	beq.n	8020764 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 802074e:	687b      	ldr	r3, [r7, #4]
 8020750:	681b      	ldr	r3, [r3, #0]
 8020752:	685b      	ldr	r3, [r3, #4]
 8020754:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8020758:	687b      	ldr	r3, [r7, #4]
 802075a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802075c:	687b      	ldr	r3, [r7, #4]
 802075e:	681b      	ldr	r3, [r3, #0]
 8020760:	430a      	orrs	r2, r1
 8020762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8020764:	687b      	ldr	r3, [r7, #4]
 8020766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020768:	f003 0310 	and.w	r3, r3, #16
 802076c:	2b00      	cmp	r3, #0
 802076e:	d00a      	beq.n	8020786 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8020770:	687b      	ldr	r3, [r7, #4]
 8020772:	681b      	ldr	r3, [r3, #0]
 8020774:	689b      	ldr	r3, [r3, #8]
 8020776:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 802077a:	687b      	ldr	r3, [r7, #4]
 802077c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802077e:	687b      	ldr	r3, [r7, #4]
 8020780:	681b      	ldr	r3, [r3, #0]
 8020782:	430a      	orrs	r2, r1
 8020784:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8020786:	687b      	ldr	r3, [r7, #4]
 8020788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802078a:	f003 0320 	and.w	r3, r3, #32
 802078e:	2b00      	cmp	r3, #0
 8020790:	d00a      	beq.n	80207a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8020792:	687b      	ldr	r3, [r7, #4]
 8020794:	681b      	ldr	r3, [r3, #0]
 8020796:	689b      	ldr	r3, [r3, #8]
 8020798:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 802079c:	687b      	ldr	r3, [r7, #4]
 802079e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80207a0:	687b      	ldr	r3, [r7, #4]
 80207a2:	681b      	ldr	r3, [r3, #0]
 80207a4:	430a      	orrs	r2, r1
 80207a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80207a8:	687b      	ldr	r3, [r7, #4]
 80207aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80207ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80207b0:	2b00      	cmp	r3, #0
 80207b2:	d01a      	beq.n	80207ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80207b4:	687b      	ldr	r3, [r7, #4]
 80207b6:	681b      	ldr	r3, [r3, #0]
 80207b8:	685b      	ldr	r3, [r3, #4]
 80207ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80207be:	687b      	ldr	r3, [r7, #4]
 80207c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80207c2:	687b      	ldr	r3, [r7, #4]
 80207c4:	681b      	ldr	r3, [r3, #0]
 80207c6:	430a      	orrs	r2, r1
 80207c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80207ca:	687b      	ldr	r3, [r7, #4]
 80207cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80207ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80207d2:	d10a      	bne.n	80207ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80207d4:	687b      	ldr	r3, [r7, #4]
 80207d6:	681b      	ldr	r3, [r3, #0]
 80207d8:	685b      	ldr	r3, [r3, #4]
 80207da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80207de:	687b      	ldr	r3, [r7, #4]
 80207e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80207e2:	687b      	ldr	r3, [r7, #4]
 80207e4:	681b      	ldr	r3, [r3, #0]
 80207e6:	430a      	orrs	r2, r1
 80207e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80207ea:	687b      	ldr	r3, [r7, #4]
 80207ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80207ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	d00a      	beq.n	802080c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80207f6:	687b      	ldr	r3, [r7, #4]
 80207f8:	681b      	ldr	r3, [r3, #0]
 80207fa:	685b      	ldr	r3, [r3, #4]
 80207fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8020800:	687b      	ldr	r3, [r7, #4]
 8020802:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8020804:	687b      	ldr	r3, [r7, #4]
 8020806:	681b      	ldr	r3, [r3, #0]
 8020808:	430a      	orrs	r2, r1
 802080a:	605a      	str	r2, [r3, #4]
  }
}
 802080c:	bf00      	nop
 802080e:	370c      	adds	r7, #12
 8020810:	46bd      	mov	sp, r7
 8020812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020816:	4770      	bx	lr

08020818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8020818:	b580      	push	{r7, lr}
 802081a:	b086      	sub	sp, #24
 802081c:	af02      	add	r7, sp, #8
 802081e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020820:	687b      	ldr	r3, [r7, #4]
 8020822:	2200      	movs	r2, #0
 8020824:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8020828:	f7f8 ff58 	bl	80196dc <HAL_GetTick>
 802082c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 802082e:	687b      	ldr	r3, [r7, #4]
 8020830:	681b      	ldr	r3, [r3, #0]
 8020832:	681b      	ldr	r3, [r3, #0]
 8020834:	f003 0308 	and.w	r3, r3, #8
 8020838:	2b08      	cmp	r3, #8
 802083a:	d10e      	bne.n	802085a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802083c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8020840:	9300      	str	r3, [sp, #0]
 8020842:	68fb      	ldr	r3, [r7, #12]
 8020844:	2200      	movs	r2, #0
 8020846:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802084a:	6878      	ldr	r0, [r7, #4]
 802084c:	f000 f82f 	bl	80208ae <UART_WaitOnFlagUntilTimeout>
 8020850:	4603      	mov	r3, r0
 8020852:	2b00      	cmp	r3, #0
 8020854:	d001      	beq.n	802085a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8020856:	2303      	movs	r3, #3
 8020858:	e025      	b.n	80208a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 802085a:	687b      	ldr	r3, [r7, #4]
 802085c:	681b      	ldr	r3, [r3, #0]
 802085e:	681b      	ldr	r3, [r3, #0]
 8020860:	f003 0304 	and.w	r3, r3, #4
 8020864:	2b04      	cmp	r3, #4
 8020866:	d10e      	bne.n	8020886 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8020868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 802086c:	9300      	str	r3, [sp, #0]
 802086e:	68fb      	ldr	r3, [r7, #12]
 8020870:	2200      	movs	r2, #0
 8020872:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8020876:	6878      	ldr	r0, [r7, #4]
 8020878:	f000 f819 	bl	80208ae <UART_WaitOnFlagUntilTimeout>
 802087c:	4603      	mov	r3, r0
 802087e:	2b00      	cmp	r3, #0
 8020880:	d001      	beq.n	8020886 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8020882:	2303      	movs	r3, #3
 8020884:	e00f      	b.n	80208a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8020886:	687b      	ldr	r3, [r7, #4]
 8020888:	2220      	movs	r2, #32
 802088a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 802088e:	687b      	ldr	r3, [r7, #4]
 8020890:	2220      	movs	r2, #32
 8020892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020896:	687b      	ldr	r3, [r7, #4]
 8020898:	2200      	movs	r2, #0
 802089a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 802089c:	687b      	ldr	r3, [r7, #4]
 802089e:	2200      	movs	r2, #0
 80208a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80208a4:	2300      	movs	r3, #0
}
 80208a6:	4618      	mov	r0, r3
 80208a8:	3710      	adds	r7, #16
 80208aa:	46bd      	mov	sp, r7
 80208ac:	bd80      	pop	{r7, pc}

080208ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80208ae:	b580      	push	{r7, lr}
 80208b0:	b09c      	sub	sp, #112	; 0x70
 80208b2:	af00      	add	r7, sp, #0
 80208b4:	60f8      	str	r0, [r7, #12]
 80208b6:	60b9      	str	r1, [r7, #8]
 80208b8:	603b      	str	r3, [r7, #0]
 80208ba:	4613      	mov	r3, r2
 80208bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80208be:	e0a9      	b.n	8020a14 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80208c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80208c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80208c6:	f000 80a5 	beq.w	8020a14 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80208ca:	f7f8 ff07 	bl	80196dc <HAL_GetTick>
 80208ce:	4602      	mov	r2, r0
 80208d0:	683b      	ldr	r3, [r7, #0]
 80208d2:	1ad3      	subs	r3, r2, r3
 80208d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80208d6:	429a      	cmp	r2, r3
 80208d8:	d302      	bcc.n	80208e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80208da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80208dc:	2b00      	cmp	r3, #0
 80208de:	d140      	bne.n	8020962 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80208e0:	68fb      	ldr	r3, [r7, #12]
 80208e2:	681b      	ldr	r3, [r3, #0]
 80208e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80208e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80208e8:	e853 3f00 	ldrex	r3, [r3]
 80208ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80208ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80208f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80208f4:	667b      	str	r3, [r7, #100]	; 0x64
 80208f6:	68fb      	ldr	r3, [r7, #12]
 80208f8:	681b      	ldr	r3, [r3, #0]
 80208fa:	461a      	mov	r2, r3
 80208fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80208fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8020900:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020902:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8020904:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8020906:	e841 2300 	strex	r3, r2, [r1]
 802090a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 802090c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802090e:	2b00      	cmp	r3, #0
 8020910:	d1e6      	bne.n	80208e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020912:	68fb      	ldr	r3, [r7, #12]
 8020914:	681b      	ldr	r3, [r3, #0]
 8020916:	3308      	adds	r3, #8
 8020918:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802091a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802091c:	e853 3f00 	ldrex	r3, [r3]
 8020920:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8020922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020924:	f023 0301 	bic.w	r3, r3, #1
 8020928:	663b      	str	r3, [r7, #96]	; 0x60
 802092a:	68fb      	ldr	r3, [r7, #12]
 802092c:	681b      	ldr	r3, [r3, #0]
 802092e:	3308      	adds	r3, #8
 8020930:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8020932:	64ba      	str	r2, [r7, #72]	; 0x48
 8020934:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020936:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8020938:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802093a:	e841 2300 	strex	r3, r2, [r1]
 802093e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8020940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020942:	2b00      	cmp	r3, #0
 8020944:	d1e5      	bne.n	8020912 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8020946:	68fb      	ldr	r3, [r7, #12]
 8020948:	2220      	movs	r2, #32
 802094a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 802094e:	68fb      	ldr	r3, [r7, #12]
 8020950:	2220      	movs	r2, #32
 8020952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8020956:	68fb      	ldr	r3, [r7, #12]
 8020958:	2200      	movs	r2, #0
 802095a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 802095e:	2303      	movs	r3, #3
 8020960:	e069      	b.n	8020a36 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8020962:	68fb      	ldr	r3, [r7, #12]
 8020964:	681b      	ldr	r3, [r3, #0]
 8020966:	681b      	ldr	r3, [r3, #0]
 8020968:	f003 0304 	and.w	r3, r3, #4
 802096c:	2b00      	cmp	r3, #0
 802096e:	d051      	beq.n	8020a14 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8020970:	68fb      	ldr	r3, [r7, #12]
 8020972:	681b      	ldr	r3, [r3, #0]
 8020974:	69db      	ldr	r3, [r3, #28]
 8020976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802097a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802097e:	d149      	bne.n	8020a14 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8020980:	68fb      	ldr	r3, [r7, #12]
 8020982:	681b      	ldr	r3, [r3, #0]
 8020984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020988:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 802098a:	68fb      	ldr	r3, [r7, #12]
 802098c:	681b      	ldr	r3, [r3, #0]
 802098e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020992:	e853 3f00 	ldrex	r3, [r3]
 8020996:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8020998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802099a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802099e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80209a0:	68fb      	ldr	r3, [r7, #12]
 80209a2:	681b      	ldr	r3, [r3, #0]
 80209a4:	461a      	mov	r2, r3
 80209a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80209a8:	637b      	str	r3, [r7, #52]	; 0x34
 80209aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80209ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80209ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80209b0:	e841 2300 	strex	r3, r2, [r1]
 80209b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80209b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209b8:	2b00      	cmp	r3, #0
 80209ba:	d1e6      	bne.n	802098a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80209bc:	68fb      	ldr	r3, [r7, #12]
 80209be:	681b      	ldr	r3, [r3, #0]
 80209c0:	3308      	adds	r3, #8
 80209c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80209c4:	697b      	ldr	r3, [r7, #20]
 80209c6:	e853 3f00 	ldrex	r3, [r3]
 80209ca:	613b      	str	r3, [r7, #16]
   return(result);
 80209cc:	693b      	ldr	r3, [r7, #16]
 80209ce:	f023 0301 	bic.w	r3, r3, #1
 80209d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80209d4:	68fb      	ldr	r3, [r7, #12]
 80209d6:	681b      	ldr	r3, [r3, #0]
 80209d8:	3308      	adds	r3, #8
 80209da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80209dc:	623a      	str	r2, [r7, #32]
 80209de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80209e0:	69f9      	ldr	r1, [r7, #28]
 80209e2:	6a3a      	ldr	r2, [r7, #32]
 80209e4:	e841 2300 	strex	r3, r2, [r1]
 80209e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80209ea:	69bb      	ldr	r3, [r7, #24]
 80209ec:	2b00      	cmp	r3, #0
 80209ee:	d1e5      	bne.n	80209bc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80209f0:	68fb      	ldr	r3, [r7, #12]
 80209f2:	2220      	movs	r2, #32
 80209f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80209f8:	68fb      	ldr	r3, [r7, #12]
 80209fa:	2220      	movs	r2, #32
 80209fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8020a00:	68fb      	ldr	r3, [r7, #12]
 8020a02:	2220      	movs	r2, #32
 8020a04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8020a08:	68fb      	ldr	r3, [r7, #12]
 8020a0a:	2200      	movs	r2, #0
 8020a0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8020a10:	2303      	movs	r3, #3
 8020a12:	e010      	b.n	8020a36 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8020a14:	68fb      	ldr	r3, [r7, #12]
 8020a16:	681b      	ldr	r3, [r3, #0]
 8020a18:	69da      	ldr	r2, [r3, #28]
 8020a1a:	68bb      	ldr	r3, [r7, #8]
 8020a1c:	4013      	ands	r3, r2
 8020a1e:	68ba      	ldr	r2, [r7, #8]
 8020a20:	429a      	cmp	r2, r3
 8020a22:	bf0c      	ite	eq
 8020a24:	2301      	moveq	r3, #1
 8020a26:	2300      	movne	r3, #0
 8020a28:	b2db      	uxtb	r3, r3
 8020a2a:	461a      	mov	r2, r3
 8020a2c:	79fb      	ldrb	r3, [r7, #7]
 8020a2e:	429a      	cmp	r2, r3
 8020a30:	f43f af46 	beq.w	80208c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8020a34:	2300      	movs	r3, #0
}
 8020a36:	4618      	mov	r0, r3
 8020a38:	3770      	adds	r7, #112	; 0x70
 8020a3a:	46bd      	mov	sp, r7
 8020a3c:	bd80      	pop	{r7, pc}

08020a3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8020a3e:	b480      	push	{r7}
 8020a40:	b085      	sub	sp, #20
 8020a42:	af00      	add	r7, sp, #0
 8020a44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8020a46:	687b      	ldr	r3, [r7, #4]
 8020a48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8020a4c:	2b01      	cmp	r3, #1
 8020a4e:	d101      	bne.n	8020a54 <HAL_UARTEx_DisableFifoMode+0x16>
 8020a50:	2302      	movs	r3, #2
 8020a52:	e027      	b.n	8020aa4 <HAL_UARTEx_DisableFifoMode+0x66>
 8020a54:	687b      	ldr	r3, [r7, #4]
 8020a56:	2201      	movs	r2, #1
 8020a58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8020a5c:	687b      	ldr	r3, [r7, #4]
 8020a5e:	2224      	movs	r2, #36	; 0x24
 8020a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8020a64:	687b      	ldr	r3, [r7, #4]
 8020a66:	681b      	ldr	r3, [r3, #0]
 8020a68:	681b      	ldr	r3, [r3, #0]
 8020a6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020a6c:	687b      	ldr	r3, [r7, #4]
 8020a6e:	681b      	ldr	r3, [r3, #0]
 8020a70:	681a      	ldr	r2, [r3, #0]
 8020a72:	687b      	ldr	r3, [r7, #4]
 8020a74:	681b      	ldr	r3, [r3, #0]
 8020a76:	f022 0201 	bic.w	r2, r2, #1
 8020a7a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8020a7c:	68fb      	ldr	r3, [r7, #12]
 8020a7e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8020a82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8020a84:	687b      	ldr	r3, [r7, #4]
 8020a86:	2200      	movs	r2, #0
 8020a88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020a8a:	687b      	ldr	r3, [r7, #4]
 8020a8c:	681b      	ldr	r3, [r3, #0]
 8020a8e:	68fa      	ldr	r2, [r7, #12]
 8020a90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020a92:	687b      	ldr	r3, [r7, #4]
 8020a94:	2220      	movs	r2, #32
 8020a96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020a9a:	687b      	ldr	r3, [r7, #4]
 8020a9c:	2200      	movs	r2, #0
 8020a9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8020aa2:	2300      	movs	r3, #0
}
 8020aa4:	4618      	mov	r0, r3
 8020aa6:	3714      	adds	r7, #20
 8020aa8:	46bd      	mov	sp, r7
 8020aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020aae:	4770      	bx	lr

08020ab0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8020ab0:	b580      	push	{r7, lr}
 8020ab2:	b084      	sub	sp, #16
 8020ab4:	af00      	add	r7, sp, #0
 8020ab6:	6078      	str	r0, [r7, #4]
 8020ab8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8020aba:	687b      	ldr	r3, [r7, #4]
 8020abc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8020ac0:	2b01      	cmp	r3, #1
 8020ac2:	d101      	bne.n	8020ac8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8020ac4:	2302      	movs	r3, #2
 8020ac6:	e02d      	b.n	8020b24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8020ac8:	687b      	ldr	r3, [r7, #4]
 8020aca:	2201      	movs	r2, #1
 8020acc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8020ad0:	687b      	ldr	r3, [r7, #4]
 8020ad2:	2224      	movs	r2, #36	; 0x24
 8020ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8020ad8:	687b      	ldr	r3, [r7, #4]
 8020ada:	681b      	ldr	r3, [r3, #0]
 8020adc:	681b      	ldr	r3, [r3, #0]
 8020ade:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020ae0:	687b      	ldr	r3, [r7, #4]
 8020ae2:	681b      	ldr	r3, [r3, #0]
 8020ae4:	681a      	ldr	r2, [r3, #0]
 8020ae6:	687b      	ldr	r3, [r7, #4]
 8020ae8:	681b      	ldr	r3, [r3, #0]
 8020aea:	f022 0201 	bic.w	r2, r2, #1
 8020aee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8020af0:	687b      	ldr	r3, [r7, #4]
 8020af2:	681b      	ldr	r3, [r3, #0]
 8020af4:	689b      	ldr	r3, [r3, #8]
 8020af6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8020afa:	687b      	ldr	r3, [r7, #4]
 8020afc:	681b      	ldr	r3, [r3, #0]
 8020afe:	683a      	ldr	r2, [r7, #0]
 8020b00:	430a      	orrs	r2, r1
 8020b02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8020b04:	6878      	ldr	r0, [r7, #4]
 8020b06:	f000 f84f 	bl	8020ba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020b0a:	687b      	ldr	r3, [r7, #4]
 8020b0c:	681b      	ldr	r3, [r3, #0]
 8020b0e:	68fa      	ldr	r2, [r7, #12]
 8020b10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020b12:	687b      	ldr	r3, [r7, #4]
 8020b14:	2220      	movs	r2, #32
 8020b16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020b1a:	687b      	ldr	r3, [r7, #4]
 8020b1c:	2200      	movs	r2, #0
 8020b1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8020b22:	2300      	movs	r3, #0
}
 8020b24:	4618      	mov	r0, r3
 8020b26:	3710      	adds	r7, #16
 8020b28:	46bd      	mov	sp, r7
 8020b2a:	bd80      	pop	{r7, pc}

08020b2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8020b2c:	b580      	push	{r7, lr}
 8020b2e:	b084      	sub	sp, #16
 8020b30:	af00      	add	r7, sp, #0
 8020b32:	6078      	str	r0, [r7, #4]
 8020b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8020b36:	687b      	ldr	r3, [r7, #4]
 8020b38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8020b3c:	2b01      	cmp	r3, #1
 8020b3e:	d101      	bne.n	8020b44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8020b40:	2302      	movs	r3, #2
 8020b42:	e02d      	b.n	8020ba0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8020b44:	687b      	ldr	r3, [r7, #4]
 8020b46:	2201      	movs	r2, #1
 8020b48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8020b4c:	687b      	ldr	r3, [r7, #4]
 8020b4e:	2224      	movs	r2, #36	; 0x24
 8020b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8020b54:	687b      	ldr	r3, [r7, #4]
 8020b56:	681b      	ldr	r3, [r3, #0]
 8020b58:	681b      	ldr	r3, [r3, #0]
 8020b5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020b5c:	687b      	ldr	r3, [r7, #4]
 8020b5e:	681b      	ldr	r3, [r3, #0]
 8020b60:	681a      	ldr	r2, [r3, #0]
 8020b62:	687b      	ldr	r3, [r7, #4]
 8020b64:	681b      	ldr	r3, [r3, #0]
 8020b66:	f022 0201 	bic.w	r2, r2, #1
 8020b6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8020b6c:	687b      	ldr	r3, [r7, #4]
 8020b6e:	681b      	ldr	r3, [r3, #0]
 8020b70:	689b      	ldr	r3, [r3, #8]
 8020b72:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8020b76:	687b      	ldr	r3, [r7, #4]
 8020b78:	681b      	ldr	r3, [r3, #0]
 8020b7a:	683a      	ldr	r2, [r7, #0]
 8020b7c:	430a      	orrs	r2, r1
 8020b7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8020b80:	6878      	ldr	r0, [r7, #4]
 8020b82:	f000 f811 	bl	8020ba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020b86:	687b      	ldr	r3, [r7, #4]
 8020b88:	681b      	ldr	r3, [r3, #0]
 8020b8a:	68fa      	ldr	r2, [r7, #12]
 8020b8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020b8e:	687b      	ldr	r3, [r7, #4]
 8020b90:	2220      	movs	r2, #32
 8020b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020b96:	687b      	ldr	r3, [r7, #4]
 8020b98:	2200      	movs	r2, #0
 8020b9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8020b9e:	2300      	movs	r3, #0
}
 8020ba0:	4618      	mov	r0, r3
 8020ba2:	3710      	adds	r7, #16
 8020ba4:	46bd      	mov	sp, r7
 8020ba6:	bd80      	pop	{r7, pc}

08020ba8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8020ba8:	b480      	push	{r7}
 8020baa:	b085      	sub	sp, #20
 8020bac:	af00      	add	r7, sp, #0
 8020bae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8020bb0:	687b      	ldr	r3, [r7, #4]
 8020bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8020bb4:	2b00      	cmp	r3, #0
 8020bb6:	d108      	bne.n	8020bca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8020bb8:	687b      	ldr	r3, [r7, #4]
 8020bba:	2201      	movs	r2, #1
 8020bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8020bc0:	687b      	ldr	r3, [r7, #4]
 8020bc2:	2201      	movs	r2, #1
 8020bc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8020bc8:	e031      	b.n	8020c2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8020bca:	2308      	movs	r3, #8
 8020bcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8020bce:	2308      	movs	r3, #8
 8020bd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8020bd2:	687b      	ldr	r3, [r7, #4]
 8020bd4:	681b      	ldr	r3, [r3, #0]
 8020bd6:	689b      	ldr	r3, [r3, #8]
 8020bd8:	0e5b      	lsrs	r3, r3, #25
 8020bda:	b2db      	uxtb	r3, r3
 8020bdc:	f003 0307 	and.w	r3, r3, #7
 8020be0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8020be2:	687b      	ldr	r3, [r7, #4]
 8020be4:	681b      	ldr	r3, [r3, #0]
 8020be6:	689b      	ldr	r3, [r3, #8]
 8020be8:	0f5b      	lsrs	r3, r3, #29
 8020bea:	b2db      	uxtb	r3, r3
 8020bec:	f003 0307 	and.w	r3, r3, #7
 8020bf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8020bf2:	7bbb      	ldrb	r3, [r7, #14]
 8020bf4:	7b3a      	ldrb	r2, [r7, #12]
 8020bf6:	4911      	ldr	r1, [pc, #68]	; (8020c3c <UARTEx_SetNbDataToProcess+0x94>)
 8020bf8:	5c8a      	ldrb	r2, [r1, r2]
 8020bfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8020bfe:	7b3a      	ldrb	r2, [r7, #12]
 8020c00:	490f      	ldr	r1, [pc, #60]	; (8020c40 <UARTEx_SetNbDataToProcess+0x98>)
 8020c02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8020c04:	fb93 f3f2 	sdiv	r3, r3, r2
 8020c08:	b29a      	uxth	r2, r3
 8020c0a:	687b      	ldr	r3, [r7, #4]
 8020c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8020c10:	7bfb      	ldrb	r3, [r7, #15]
 8020c12:	7b7a      	ldrb	r2, [r7, #13]
 8020c14:	4909      	ldr	r1, [pc, #36]	; (8020c3c <UARTEx_SetNbDataToProcess+0x94>)
 8020c16:	5c8a      	ldrb	r2, [r1, r2]
 8020c18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8020c1c:	7b7a      	ldrb	r2, [r7, #13]
 8020c1e:	4908      	ldr	r1, [pc, #32]	; (8020c40 <UARTEx_SetNbDataToProcess+0x98>)
 8020c20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8020c22:	fb93 f3f2 	sdiv	r3, r3, r2
 8020c26:	b29a      	uxth	r2, r3
 8020c28:	687b      	ldr	r3, [r7, #4]
 8020c2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8020c2e:	bf00      	nop
 8020c30:	3714      	adds	r7, #20
 8020c32:	46bd      	mov	sp, r7
 8020c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c38:	4770      	bx	lr
 8020c3a:	bf00      	nop
 8020c3c:	08025254 	.word	0x08025254
 8020c40:	0802525c 	.word	0x0802525c

08020c44 <__errno>:
 8020c44:	4b01      	ldr	r3, [pc, #4]	; (8020c4c <__errno+0x8>)
 8020c46:	6818      	ldr	r0, [r3, #0]
 8020c48:	4770      	bx	lr
 8020c4a:	bf00      	nop
 8020c4c:	2000002c 	.word	0x2000002c

08020c50 <__libc_init_array>:
 8020c50:	b570      	push	{r4, r5, r6, lr}
 8020c52:	4d0d      	ldr	r5, [pc, #52]	; (8020c88 <__libc_init_array+0x38>)
 8020c54:	4c0d      	ldr	r4, [pc, #52]	; (8020c8c <__libc_init_array+0x3c>)
 8020c56:	1b64      	subs	r4, r4, r5
 8020c58:	10a4      	asrs	r4, r4, #2
 8020c5a:	2600      	movs	r6, #0
 8020c5c:	42a6      	cmp	r6, r4
 8020c5e:	d109      	bne.n	8020c74 <__libc_init_array+0x24>
 8020c60:	4d0b      	ldr	r5, [pc, #44]	; (8020c90 <__libc_init_array+0x40>)
 8020c62:	4c0c      	ldr	r4, [pc, #48]	; (8020c94 <__libc_init_array+0x44>)
 8020c64:	f004 f94a 	bl	8024efc <_init>
 8020c68:	1b64      	subs	r4, r4, r5
 8020c6a:	10a4      	asrs	r4, r4, #2
 8020c6c:	2600      	movs	r6, #0
 8020c6e:	42a6      	cmp	r6, r4
 8020c70:	d105      	bne.n	8020c7e <__libc_init_array+0x2e>
 8020c72:	bd70      	pop	{r4, r5, r6, pc}
 8020c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8020c78:	4798      	blx	r3
 8020c7a:	3601      	adds	r6, #1
 8020c7c:	e7ee      	b.n	8020c5c <__libc_init_array+0xc>
 8020c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8020c82:	4798      	blx	r3
 8020c84:	3601      	adds	r6, #1
 8020c86:	e7f2      	b.n	8020c6e <__libc_init_array+0x1e>
 8020c88:	08025850 	.word	0x08025850
 8020c8c:	08025850 	.word	0x08025850
 8020c90:	08025850 	.word	0x08025850
 8020c94:	08025854 	.word	0x08025854

08020c98 <memcpy>:
 8020c98:	440a      	add	r2, r1
 8020c9a:	4291      	cmp	r1, r2
 8020c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8020ca0:	d100      	bne.n	8020ca4 <memcpy+0xc>
 8020ca2:	4770      	bx	lr
 8020ca4:	b510      	push	{r4, lr}
 8020ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020caa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020cae:	4291      	cmp	r1, r2
 8020cb0:	d1f9      	bne.n	8020ca6 <memcpy+0xe>
 8020cb2:	bd10      	pop	{r4, pc}

08020cb4 <memset>:
 8020cb4:	4402      	add	r2, r0
 8020cb6:	4603      	mov	r3, r0
 8020cb8:	4293      	cmp	r3, r2
 8020cba:	d100      	bne.n	8020cbe <memset+0xa>
 8020cbc:	4770      	bx	lr
 8020cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8020cc2:	e7f9      	b.n	8020cb8 <memset+0x4>

08020cc4 <__cvt>:
 8020cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020cc8:	ec55 4b10 	vmov	r4, r5, d0
 8020ccc:	2d00      	cmp	r5, #0
 8020cce:	460e      	mov	r6, r1
 8020cd0:	4619      	mov	r1, r3
 8020cd2:	462b      	mov	r3, r5
 8020cd4:	bfbb      	ittet	lt
 8020cd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8020cda:	461d      	movlt	r5, r3
 8020cdc:	2300      	movge	r3, #0
 8020cde:	232d      	movlt	r3, #45	; 0x2d
 8020ce0:	700b      	strb	r3, [r1, #0]
 8020ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020ce4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8020ce8:	4691      	mov	r9, r2
 8020cea:	f023 0820 	bic.w	r8, r3, #32
 8020cee:	bfbc      	itt	lt
 8020cf0:	4622      	movlt	r2, r4
 8020cf2:	4614      	movlt	r4, r2
 8020cf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8020cf8:	d005      	beq.n	8020d06 <__cvt+0x42>
 8020cfa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8020cfe:	d100      	bne.n	8020d02 <__cvt+0x3e>
 8020d00:	3601      	adds	r6, #1
 8020d02:	2102      	movs	r1, #2
 8020d04:	e000      	b.n	8020d08 <__cvt+0x44>
 8020d06:	2103      	movs	r1, #3
 8020d08:	ab03      	add	r3, sp, #12
 8020d0a:	9301      	str	r3, [sp, #4]
 8020d0c:	ab02      	add	r3, sp, #8
 8020d0e:	9300      	str	r3, [sp, #0]
 8020d10:	ec45 4b10 	vmov	d0, r4, r5
 8020d14:	4653      	mov	r3, sl
 8020d16:	4632      	mov	r2, r6
 8020d18:	f000 fe2e 	bl	8021978 <_dtoa_r>
 8020d1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8020d20:	4607      	mov	r7, r0
 8020d22:	d102      	bne.n	8020d2a <__cvt+0x66>
 8020d24:	f019 0f01 	tst.w	r9, #1
 8020d28:	d022      	beq.n	8020d70 <__cvt+0xac>
 8020d2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8020d2e:	eb07 0906 	add.w	r9, r7, r6
 8020d32:	d110      	bne.n	8020d56 <__cvt+0x92>
 8020d34:	783b      	ldrb	r3, [r7, #0]
 8020d36:	2b30      	cmp	r3, #48	; 0x30
 8020d38:	d10a      	bne.n	8020d50 <__cvt+0x8c>
 8020d3a:	2200      	movs	r2, #0
 8020d3c:	2300      	movs	r3, #0
 8020d3e:	4620      	mov	r0, r4
 8020d40:	4629      	mov	r1, r5
 8020d42:	f7df fee9 	bl	8000b18 <__aeabi_dcmpeq>
 8020d46:	b918      	cbnz	r0, 8020d50 <__cvt+0x8c>
 8020d48:	f1c6 0601 	rsb	r6, r6, #1
 8020d4c:	f8ca 6000 	str.w	r6, [sl]
 8020d50:	f8da 3000 	ldr.w	r3, [sl]
 8020d54:	4499      	add	r9, r3
 8020d56:	2200      	movs	r2, #0
 8020d58:	2300      	movs	r3, #0
 8020d5a:	4620      	mov	r0, r4
 8020d5c:	4629      	mov	r1, r5
 8020d5e:	f7df fedb 	bl	8000b18 <__aeabi_dcmpeq>
 8020d62:	b108      	cbz	r0, 8020d68 <__cvt+0xa4>
 8020d64:	f8cd 900c 	str.w	r9, [sp, #12]
 8020d68:	2230      	movs	r2, #48	; 0x30
 8020d6a:	9b03      	ldr	r3, [sp, #12]
 8020d6c:	454b      	cmp	r3, r9
 8020d6e:	d307      	bcc.n	8020d80 <__cvt+0xbc>
 8020d70:	9b03      	ldr	r3, [sp, #12]
 8020d72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020d74:	1bdb      	subs	r3, r3, r7
 8020d76:	4638      	mov	r0, r7
 8020d78:	6013      	str	r3, [r2, #0]
 8020d7a:	b004      	add	sp, #16
 8020d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020d80:	1c59      	adds	r1, r3, #1
 8020d82:	9103      	str	r1, [sp, #12]
 8020d84:	701a      	strb	r2, [r3, #0]
 8020d86:	e7f0      	b.n	8020d6a <__cvt+0xa6>

08020d88 <__exponent>:
 8020d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020d8a:	4603      	mov	r3, r0
 8020d8c:	2900      	cmp	r1, #0
 8020d8e:	bfb8      	it	lt
 8020d90:	4249      	neglt	r1, r1
 8020d92:	f803 2b02 	strb.w	r2, [r3], #2
 8020d96:	bfb4      	ite	lt
 8020d98:	222d      	movlt	r2, #45	; 0x2d
 8020d9a:	222b      	movge	r2, #43	; 0x2b
 8020d9c:	2909      	cmp	r1, #9
 8020d9e:	7042      	strb	r2, [r0, #1]
 8020da0:	dd2a      	ble.n	8020df8 <__exponent+0x70>
 8020da2:	f10d 0407 	add.w	r4, sp, #7
 8020da6:	46a4      	mov	ip, r4
 8020da8:	270a      	movs	r7, #10
 8020daa:	46a6      	mov	lr, r4
 8020dac:	460a      	mov	r2, r1
 8020dae:	fb91 f6f7 	sdiv	r6, r1, r7
 8020db2:	fb07 1516 	mls	r5, r7, r6, r1
 8020db6:	3530      	adds	r5, #48	; 0x30
 8020db8:	2a63      	cmp	r2, #99	; 0x63
 8020dba:	f104 34ff 	add.w	r4, r4, #4294967295
 8020dbe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8020dc2:	4631      	mov	r1, r6
 8020dc4:	dcf1      	bgt.n	8020daa <__exponent+0x22>
 8020dc6:	3130      	adds	r1, #48	; 0x30
 8020dc8:	f1ae 0502 	sub.w	r5, lr, #2
 8020dcc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8020dd0:	1c44      	adds	r4, r0, #1
 8020dd2:	4629      	mov	r1, r5
 8020dd4:	4561      	cmp	r1, ip
 8020dd6:	d30a      	bcc.n	8020dee <__exponent+0x66>
 8020dd8:	f10d 0209 	add.w	r2, sp, #9
 8020ddc:	eba2 020e 	sub.w	r2, r2, lr
 8020de0:	4565      	cmp	r5, ip
 8020de2:	bf88      	it	hi
 8020de4:	2200      	movhi	r2, #0
 8020de6:	4413      	add	r3, r2
 8020de8:	1a18      	subs	r0, r3, r0
 8020dea:	b003      	add	sp, #12
 8020dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020dee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020df2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8020df6:	e7ed      	b.n	8020dd4 <__exponent+0x4c>
 8020df8:	2330      	movs	r3, #48	; 0x30
 8020dfa:	3130      	adds	r1, #48	; 0x30
 8020dfc:	7083      	strb	r3, [r0, #2]
 8020dfe:	70c1      	strb	r1, [r0, #3]
 8020e00:	1d03      	adds	r3, r0, #4
 8020e02:	e7f1      	b.n	8020de8 <__exponent+0x60>

08020e04 <_printf_float>:
 8020e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e08:	ed2d 8b02 	vpush	{d8}
 8020e0c:	b08d      	sub	sp, #52	; 0x34
 8020e0e:	460c      	mov	r4, r1
 8020e10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8020e14:	4616      	mov	r6, r2
 8020e16:	461f      	mov	r7, r3
 8020e18:	4605      	mov	r5, r0
 8020e1a:	f001 fd53 	bl	80228c4 <_localeconv_r>
 8020e1e:	f8d0 a000 	ldr.w	sl, [r0]
 8020e22:	4650      	mov	r0, sl
 8020e24:	f7df f9fc 	bl	8000220 <strlen>
 8020e28:	2300      	movs	r3, #0
 8020e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8020e2c:	6823      	ldr	r3, [r4, #0]
 8020e2e:	9305      	str	r3, [sp, #20]
 8020e30:	f8d8 3000 	ldr.w	r3, [r8]
 8020e34:	f894 b018 	ldrb.w	fp, [r4, #24]
 8020e38:	3307      	adds	r3, #7
 8020e3a:	f023 0307 	bic.w	r3, r3, #7
 8020e3e:	f103 0208 	add.w	r2, r3, #8
 8020e42:	f8c8 2000 	str.w	r2, [r8]
 8020e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8020e4e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8020e52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8020e56:	9307      	str	r3, [sp, #28]
 8020e58:	f8cd 8018 	str.w	r8, [sp, #24]
 8020e5c:	ee08 0a10 	vmov	s16, r0
 8020e60:	4b9f      	ldr	r3, [pc, #636]	; (80210e0 <_printf_float+0x2dc>)
 8020e62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020e66:	f04f 32ff 	mov.w	r2, #4294967295
 8020e6a:	f7df fe87 	bl	8000b7c <__aeabi_dcmpun>
 8020e6e:	bb88      	cbnz	r0, 8020ed4 <_printf_float+0xd0>
 8020e70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020e74:	4b9a      	ldr	r3, [pc, #616]	; (80210e0 <_printf_float+0x2dc>)
 8020e76:	f04f 32ff 	mov.w	r2, #4294967295
 8020e7a:	f7df fe61 	bl	8000b40 <__aeabi_dcmple>
 8020e7e:	bb48      	cbnz	r0, 8020ed4 <_printf_float+0xd0>
 8020e80:	2200      	movs	r2, #0
 8020e82:	2300      	movs	r3, #0
 8020e84:	4640      	mov	r0, r8
 8020e86:	4649      	mov	r1, r9
 8020e88:	f7df fe50 	bl	8000b2c <__aeabi_dcmplt>
 8020e8c:	b110      	cbz	r0, 8020e94 <_printf_float+0x90>
 8020e8e:	232d      	movs	r3, #45	; 0x2d
 8020e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020e94:	4b93      	ldr	r3, [pc, #588]	; (80210e4 <_printf_float+0x2e0>)
 8020e96:	4894      	ldr	r0, [pc, #592]	; (80210e8 <_printf_float+0x2e4>)
 8020e98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8020e9c:	bf94      	ite	ls
 8020e9e:	4698      	movls	r8, r3
 8020ea0:	4680      	movhi	r8, r0
 8020ea2:	2303      	movs	r3, #3
 8020ea4:	6123      	str	r3, [r4, #16]
 8020ea6:	9b05      	ldr	r3, [sp, #20]
 8020ea8:	f023 0204 	bic.w	r2, r3, #4
 8020eac:	6022      	str	r2, [r4, #0]
 8020eae:	f04f 0900 	mov.w	r9, #0
 8020eb2:	9700      	str	r7, [sp, #0]
 8020eb4:	4633      	mov	r3, r6
 8020eb6:	aa0b      	add	r2, sp, #44	; 0x2c
 8020eb8:	4621      	mov	r1, r4
 8020eba:	4628      	mov	r0, r5
 8020ebc:	f000 f9d8 	bl	8021270 <_printf_common>
 8020ec0:	3001      	adds	r0, #1
 8020ec2:	f040 8090 	bne.w	8020fe6 <_printf_float+0x1e2>
 8020ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8020eca:	b00d      	add	sp, #52	; 0x34
 8020ecc:	ecbd 8b02 	vpop	{d8}
 8020ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ed4:	4642      	mov	r2, r8
 8020ed6:	464b      	mov	r3, r9
 8020ed8:	4640      	mov	r0, r8
 8020eda:	4649      	mov	r1, r9
 8020edc:	f7df fe4e 	bl	8000b7c <__aeabi_dcmpun>
 8020ee0:	b140      	cbz	r0, 8020ef4 <_printf_float+0xf0>
 8020ee2:	464b      	mov	r3, r9
 8020ee4:	2b00      	cmp	r3, #0
 8020ee6:	bfbc      	itt	lt
 8020ee8:	232d      	movlt	r3, #45	; 0x2d
 8020eea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8020eee:	487f      	ldr	r0, [pc, #508]	; (80210ec <_printf_float+0x2e8>)
 8020ef0:	4b7f      	ldr	r3, [pc, #508]	; (80210f0 <_printf_float+0x2ec>)
 8020ef2:	e7d1      	b.n	8020e98 <_printf_float+0x94>
 8020ef4:	6863      	ldr	r3, [r4, #4]
 8020ef6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8020efa:	9206      	str	r2, [sp, #24]
 8020efc:	1c5a      	adds	r2, r3, #1
 8020efe:	d13f      	bne.n	8020f80 <_printf_float+0x17c>
 8020f00:	2306      	movs	r3, #6
 8020f02:	6063      	str	r3, [r4, #4]
 8020f04:	9b05      	ldr	r3, [sp, #20]
 8020f06:	6861      	ldr	r1, [r4, #4]
 8020f08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8020f0c:	2300      	movs	r3, #0
 8020f0e:	9303      	str	r3, [sp, #12]
 8020f10:	ab0a      	add	r3, sp, #40	; 0x28
 8020f12:	e9cd b301 	strd	fp, r3, [sp, #4]
 8020f16:	ab09      	add	r3, sp, #36	; 0x24
 8020f18:	ec49 8b10 	vmov	d0, r8, r9
 8020f1c:	9300      	str	r3, [sp, #0]
 8020f1e:	6022      	str	r2, [r4, #0]
 8020f20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8020f24:	4628      	mov	r0, r5
 8020f26:	f7ff fecd 	bl	8020cc4 <__cvt>
 8020f2a:	9b06      	ldr	r3, [sp, #24]
 8020f2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020f2e:	2b47      	cmp	r3, #71	; 0x47
 8020f30:	4680      	mov	r8, r0
 8020f32:	d108      	bne.n	8020f46 <_printf_float+0x142>
 8020f34:	1cc8      	adds	r0, r1, #3
 8020f36:	db02      	blt.n	8020f3e <_printf_float+0x13a>
 8020f38:	6863      	ldr	r3, [r4, #4]
 8020f3a:	4299      	cmp	r1, r3
 8020f3c:	dd41      	ble.n	8020fc2 <_printf_float+0x1be>
 8020f3e:	f1ab 0b02 	sub.w	fp, fp, #2
 8020f42:	fa5f fb8b 	uxtb.w	fp, fp
 8020f46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8020f4a:	d820      	bhi.n	8020f8e <_printf_float+0x18a>
 8020f4c:	3901      	subs	r1, #1
 8020f4e:	465a      	mov	r2, fp
 8020f50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8020f54:	9109      	str	r1, [sp, #36]	; 0x24
 8020f56:	f7ff ff17 	bl	8020d88 <__exponent>
 8020f5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020f5c:	1813      	adds	r3, r2, r0
 8020f5e:	2a01      	cmp	r2, #1
 8020f60:	4681      	mov	r9, r0
 8020f62:	6123      	str	r3, [r4, #16]
 8020f64:	dc02      	bgt.n	8020f6c <_printf_float+0x168>
 8020f66:	6822      	ldr	r2, [r4, #0]
 8020f68:	07d2      	lsls	r2, r2, #31
 8020f6a:	d501      	bpl.n	8020f70 <_printf_float+0x16c>
 8020f6c:	3301      	adds	r3, #1
 8020f6e:	6123      	str	r3, [r4, #16]
 8020f70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8020f74:	2b00      	cmp	r3, #0
 8020f76:	d09c      	beq.n	8020eb2 <_printf_float+0xae>
 8020f78:	232d      	movs	r3, #45	; 0x2d
 8020f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020f7e:	e798      	b.n	8020eb2 <_printf_float+0xae>
 8020f80:	9a06      	ldr	r2, [sp, #24]
 8020f82:	2a47      	cmp	r2, #71	; 0x47
 8020f84:	d1be      	bne.n	8020f04 <_printf_float+0x100>
 8020f86:	2b00      	cmp	r3, #0
 8020f88:	d1bc      	bne.n	8020f04 <_printf_float+0x100>
 8020f8a:	2301      	movs	r3, #1
 8020f8c:	e7b9      	b.n	8020f02 <_printf_float+0xfe>
 8020f8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8020f92:	d118      	bne.n	8020fc6 <_printf_float+0x1c2>
 8020f94:	2900      	cmp	r1, #0
 8020f96:	6863      	ldr	r3, [r4, #4]
 8020f98:	dd0b      	ble.n	8020fb2 <_printf_float+0x1ae>
 8020f9a:	6121      	str	r1, [r4, #16]
 8020f9c:	b913      	cbnz	r3, 8020fa4 <_printf_float+0x1a0>
 8020f9e:	6822      	ldr	r2, [r4, #0]
 8020fa0:	07d0      	lsls	r0, r2, #31
 8020fa2:	d502      	bpl.n	8020faa <_printf_float+0x1a6>
 8020fa4:	3301      	adds	r3, #1
 8020fa6:	440b      	add	r3, r1
 8020fa8:	6123      	str	r3, [r4, #16]
 8020faa:	65a1      	str	r1, [r4, #88]	; 0x58
 8020fac:	f04f 0900 	mov.w	r9, #0
 8020fb0:	e7de      	b.n	8020f70 <_printf_float+0x16c>
 8020fb2:	b913      	cbnz	r3, 8020fba <_printf_float+0x1b6>
 8020fb4:	6822      	ldr	r2, [r4, #0]
 8020fb6:	07d2      	lsls	r2, r2, #31
 8020fb8:	d501      	bpl.n	8020fbe <_printf_float+0x1ba>
 8020fba:	3302      	adds	r3, #2
 8020fbc:	e7f4      	b.n	8020fa8 <_printf_float+0x1a4>
 8020fbe:	2301      	movs	r3, #1
 8020fc0:	e7f2      	b.n	8020fa8 <_printf_float+0x1a4>
 8020fc2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8020fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020fc8:	4299      	cmp	r1, r3
 8020fca:	db05      	blt.n	8020fd8 <_printf_float+0x1d4>
 8020fcc:	6823      	ldr	r3, [r4, #0]
 8020fce:	6121      	str	r1, [r4, #16]
 8020fd0:	07d8      	lsls	r0, r3, #31
 8020fd2:	d5ea      	bpl.n	8020faa <_printf_float+0x1a6>
 8020fd4:	1c4b      	adds	r3, r1, #1
 8020fd6:	e7e7      	b.n	8020fa8 <_printf_float+0x1a4>
 8020fd8:	2900      	cmp	r1, #0
 8020fda:	bfd4      	ite	le
 8020fdc:	f1c1 0202 	rsble	r2, r1, #2
 8020fe0:	2201      	movgt	r2, #1
 8020fe2:	4413      	add	r3, r2
 8020fe4:	e7e0      	b.n	8020fa8 <_printf_float+0x1a4>
 8020fe6:	6823      	ldr	r3, [r4, #0]
 8020fe8:	055a      	lsls	r2, r3, #21
 8020fea:	d407      	bmi.n	8020ffc <_printf_float+0x1f8>
 8020fec:	6923      	ldr	r3, [r4, #16]
 8020fee:	4642      	mov	r2, r8
 8020ff0:	4631      	mov	r1, r6
 8020ff2:	4628      	mov	r0, r5
 8020ff4:	47b8      	blx	r7
 8020ff6:	3001      	adds	r0, #1
 8020ff8:	d12c      	bne.n	8021054 <_printf_float+0x250>
 8020ffa:	e764      	b.n	8020ec6 <_printf_float+0xc2>
 8020ffc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8021000:	f240 80e0 	bls.w	80211c4 <_printf_float+0x3c0>
 8021004:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8021008:	2200      	movs	r2, #0
 802100a:	2300      	movs	r3, #0
 802100c:	f7df fd84 	bl	8000b18 <__aeabi_dcmpeq>
 8021010:	2800      	cmp	r0, #0
 8021012:	d034      	beq.n	802107e <_printf_float+0x27a>
 8021014:	4a37      	ldr	r2, [pc, #220]	; (80210f4 <_printf_float+0x2f0>)
 8021016:	2301      	movs	r3, #1
 8021018:	4631      	mov	r1, r6
 802101a:	4628      	mov	r0, r5
 802101c:	47b8      	blx	r7
 802101e:	3001      	adds	r0, #1
 8021020:	f43f af51 	beq.w	8020ec6 <_printf_float+0xc2>
 8021024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8021028:	429a      	cmp	r2, r3
 802102a:	db02      	blt.n	8021032 <_printf_float+0x22e>
 802102c:	6823      	ldr	r3, [r4, #0]
 802102e:	07d8      	lsls	r0, r3, #31
 8021030:	d510      	bpl.n	8021054 <_printf_float+0x250>
 8021032:	ee18 3a10 	vmov	r3, s16
 8021036:	4652      	mov	r2, sl
 8021038:	4631      	mov	r1, r6
 802103a:	4628      	mov	r0, r5
 802103c:	47b8      	blx	r7
 802103e:	3001      	adds	r0, #1
 8021040:	f43f af41 	beq.w	8020ec6 <_printf_float+0xc2>
 8021044:	f04f 0800 	mov.w	r8, #0
 8021048:	f104 091a 	add.w	r9, r4, #26
 802104c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802104e:	3b01      	subs	r3, #1
 8021050:	4543      	cmp	r3, r8
 8021052:	dc09      	bgt.n	8021068 <_printf_float+0x264>
 8021054:	6823      	ldr	r3, [r4, #0]
 8021056:	079b      	lsls	r3, r3, #30
 8021058:	f100 8105 	bmi.w	8021266 <_printf_float+0x462>
 802105c:	68e0      	ldr	r0, [r4, #12]
 802105e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021060:	4298      	cmp	r0, r3
 8021062:	bfb8      	it	lt
 8021064:	4618      	movlt	r0, r3
 8021066:	e730      	b.n	8020eca <_printf_float+0xc6>
 8021068:	2301      	movs	r3, #1
 802106a:	464a      	mov	r2, r9
 802106c:	4631      	mov	r1, r6
 802106e:	4628      	mov	r0, r5
 8021070:	47b8      	blx	r7
 8021072:	3001      	adds	r0, #1
 8021074:	f43f af27 	beq.w	8020ec6 <_printf_float+0xc2>
 8021078:	f108 0801 	add.w	r8, r8, #1
 802107c:	e7e6      	b.n	802104c <_printf_float+0x248>
 802107e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021080:	2b00      	cmp	r3, #0
 8021082:	dc39      	bgt.n	80210f8 <_printf_float+0x2f4>
 8021084:	4a1b      	ldr	r2, [pc, #108]	; (80210f4 <_printf_float+0x2f0>)
 8021086:	2301      	movs	r3, #1
 8021088:	4631      	mov	r1, r6
 802108a:	4628      	mov	r0, r5
 802108c:	47b8      	blx	r7
 802108e:	3001      	adds	r0, #1
 8021090:	f43f af19 	beq.w	8020ec6 <_printf_float+0xc2>
 8021094:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8021098:	4313      	orrs	r3, r2
 802109a:	d102      	bne.n	80210a2 <_printf_float+0x29e>
 802109c:	6823      	ldr	r3, [r4, #0]
 802109e:	07d9      	lsls	r1, r3, #31
 80210a0:	d5d8      	bpl.n	8021054 <_printf_float+0x250>
 80210a2:	ee18 3a10 	vmov	r3, s16
 80210a6:	4652      	mov	r2, sl
 80210a8:	4631      	mov	r1, r6
 80210aa:	4628      	mov	r0, r5
 80210ac:	47b8      	blx	r7
 80210ae:	3001      	adds	r0, #1
 80210b0:	f43f af09 	beq.w	8020ec6 <_printf_float+0xc2>
 80210b4:	f04f 0900 	mov.w	r9, #0
 80210b8:	f104 0a1a 	add.w	sl, r4, #26
 80210bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80210be:	425b      	negs	r3, r3
 80210c0:	454b      	cmp	r3, r9
 80210c2:	dc01      	bgt.n	80210c8 <_printf_float+0x2c4>
 80210c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80210c6:	e792      	b.n	8020fee <_printf_float+0x1ea>
 80210c8:	2301      	movs	r3, #1
 80210ca:	4652      	mov	r2, sl
 80210cc:	4631      	mov	r1, r6
 80210ce:	4628      	mov	r0, r5
 80210d0:	47b8      	blx	r7
 80210d2:	3001      	adds	r0, #1
 80210d4:	f43f aef7 	beq.w	8020ec6 <_printf_float+0xc2>
 80210d8:	f109 0901 	add.w	r9, r9, #1
 80210dc:	e7ee      	b.n	80210bc <_printf_float+0x2b8>
 80210de:	bf00      	nop
 80210e0:	7fefffff 	.word	0x7fefffff
 80210e4:	08025268 	.word	0x08025268
 80210e8:	0802526c 	.word	0x0802526c
 80210ec:	08025274 	.word	0x08025274
 80210f0:	08025270 	.word	0x08025270
 80210f4:	08025278 	.word	0x08025278
 80210f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80210fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80210fc:	429a      	cmp	r2, r3
 80210fe:	bfa8      	it	ge
 8021100:	461a      	movge	r2, r3
 8021102:	2a00      	cmp	r2, #0
 8021104:	4691      	mov	r9, r2
 8021106:	dc37      	bgt.n	8021178 <_printf_float+0x374>
 8021108:	f04f 0b00 	mov.w	fp, #0
 802110c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8021110:	f104 021a 	add.w	r2, r4, #26
 8021114:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8021116:	9305      	str	r3, [sp, #20]
 8021118:	eba3 0309 	sub.w	r3, r3, r9
 802111c:	455b      	cmp	r3, fp
 802111e:	dc33      	bgt.n	8021188 <_printf_float+0x384>
 8021120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8021124:	429a      	cmp	r2, r3
 8021126:	db3b      	blt.n	80211a0 <_printf_float+0x39c>
 8021128:	6823      	ldr	r3, [r4, #0]
 802112a:	07da      	lsls	r2, r3, #31
 802112c:	d438      	bmi.n	80211a0 <_printf_float+0x39c>
 802112e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021130:	9a05      	ldr	r2, [sp, #20]
 8021132:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021134:	1a9a      	subs	r2, r3, r2
 8021136:	eba3 0901 	sub.w	r9, r3, r1
 802113a:	4591      	cmp	r9, r2
 802113c:	bfa8      	it	ge
 802113e:	4691      	movge	r9, r2
 8021140:	f1b9 0f00 	cmp.w	r9, #0
 8021144:	dc35      	bgt.n	80211b2 <_printf_float+0x3ae>
 8021146:	f04f 0800 	mov.w	r8, #0
 802114a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802114e:	f104 0a1a 	add.w	sl, r4, #26
 8021152:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8021156:	1a9b      	subs	r3, r3, r2
 8021158:	eba3 0309 	sub.w	r3, r3, r9
 802115c:	4543      	cmp	r3, r8
 802115e:	f77f af79 	ble.w	8021054 <_printf_float+0x250>
 8021162:	2301      	movs	r3, #1
 8021164:	4652      	mov	r2, sl
 8021166:	4631      	mov	r1, r6
 8021168:	4628      	mov	r0, r5
 802116a:	47b8      	blx	r7
 802116c:	3001      	adds	r0, #1
 802116e:	f43f aeaa 	beq.w	8020ec6 <_printf_float+0xc2>
 8021172:	f108 0801 	add.w	r8, r8, #1
 8021176:	e7ec      	b.n	8021152 <_printf_float+0x34e>
 8021178:	4613      	mov	r3, r2
 802117a:	4631      	mov	r1, r6
 802117c:	4642      	mov	r2, r8
 802117e:	4628      	mov	r0, r5
 8021180:	47b8      	blx	r7
 8021182:	3001      	adds	r0, #1
 8021184:	d1c0      	bne.n	8021108 <_printf_float+0x304>
 8021186:	e69e      	b.n	8020ec6 <_printf_float+0xc2>
 8021188:	2301      	movs	r3, #1
 802118a:	4631      	mov	r1, r6
 802118c:	4628      	mov	r0, r5
 802118e:	9205      	str	r2, [sp, #20]
 8021190:	47b8      	blx	r7
 8021192:	3001      	adds	r0, #1
 8021194:	f43f ae97 	beq.w	8020ec6 <_printf_float+0xc2>
 8021198:	9a05      	ldr	r2, [sp, #20]
 802119a:	f10b 0b01 	add.w	fp, fp, #1
 802119e:	e7b9      	b.n	8021114 <_printf_float+0x310>
 80211a0:	ee18 3a10 	vmov	r3, s16
 80211a4:	4652      	mov	r2, sl
 80211a6:	4631      	mov	r1, r6
 80211a8:	4628      	mov	r0, r5
 80211aa:	47b8      	blx	r7
 80211ac:	3001      	adds	r0, #1
 80211ae:	d1be      	bne.n	802112e <_printf_float+0x32a>
 80211b0:	e689      	b.n	8020ec6 <_printf_float+0xc2>
 80211b2:	9a05      	ldr	r2, [sp, #20]
 80211b4:	464b      	mov	r3, r9
 80211b6:	4442      	add	r2, r8
 80211b8:	4631      	mov	r1, r6
 80211ba:	4628      	mov	r0, r5
 80211bc:	47b8      	blx	r7
 80211be:	3001      	adds	r0, #1
 80211c0:	d1c1      	bne.n	8021146 <_printf_float+0x342>
 80211c2:	e680      	b.n	8020ec6 <_printf_float+0xc2>
 80211c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80211c6:	2a01      	cmp	r2, #1
 80211c8:	dc01      	bgt.n	80211ce <_printf_float+0x3ca>
 80211ca:	07db      	lsls	r3, r3, #31
 80211cc:	d538      	bpl.n	8021240 <_printf_float+0x43c>
 80211ce:	2301      	movs	r3, #1
 80211d0:	4642      	mov	r2, r8
 80211d2:	4631      	mov	r1, r6
 80211d4:	4628      	mov	r0, r5
 80211d6:	47b8      	blx	r7
 80211d8:	3001      	adds	r0, #1
 80211da:	f43f ae74 	beq.w	8020ec6 <_printf_float+0xc2>
 80211de:	ee18 3a10 	vmov	r3, s16
 80211e2:	4652      	mov	r2, sl
 80211e4:	4631      	mov	r1, r6
 80211e6:	4628      	mov	r0, r5
 80211e8:	47b8      	blx	r7
 80211ea:	3001      	adds	r0, #1
 80211ec:	f43f ae6b 	beq.w	8020ec6 <_printf_float+0xc2>
 80211f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80211f4:	2200      	movs	r2, #0
 80211f6:	2300      	movs	r3, #0
 80211f8:	f7df fc8e 	bl	8000b18 <__aeabi_dcmpeq>
 80211fc:	b9d8      	cbnz	r0, 8021236 <_printf_float+0x432>
 80211fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021200:	f108 0201 	add.w	r2, r8, #1
 8021204:	3b01      	subs	r3, #1
 8021206:	4631      	mov	r1, r6
 8021208:	4628      	mov	r0, r5
 802120a:	47b8      	blx	r7
 802120c:	3001      	adds	r0, #1
 802120e:	d10e      	bne.n	802122e <_printf_float+0x42a>
 8021210:	e659      	b.n	8020ec6 <_printf_float+0xc2>
 8021212:	2301      	movs	r3, #1
 8021214:	4652      	mov	r2, sl
 8021216:	4631      	mov	r1, r6
 8021218:	4628      	mov	r0, r5
 802121a:	47b8      	blx	r7
 802121c:	3001      	adds	r0, #1
 802121e:	f43f ae52 	beq.w	8020ec6 <_printf_float+0xc2>
 8021222:	f108 0801 	add.w	r8, r8, #1
 8021226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021228:	3b01      	subs	r3, #1
 802122a:	4543      	cmp	r3, r8
 802122c:	dcf1      	bgt.n	8021212 <_printf_float+0x40e>
 802122e:	464b      	mov	r3, r9
 8021230:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8021234:	e6dc      	b.n	8020ff0 <_printf_float+0x1ec>
 8021236:	f04f 0800 	mov.w	r8, #0
 802123a:	f104 0a1a 	add.w	sl, r4, #26
 802123e:	e7f2      	b.n	8021226 <_printf_float+0x422>
 8021240:	2301      	movs	r3, #1
 8021242:	4642      	mov	r2, r8
 8021244:	e7df      	b.n	8021206 <_printf_float+0x402>
 8021246:	2301      	movs	r3, #1
 8021248:	464a      	mov	r2, r9
 802124a:	4631      	mov	r1, r6
 802124c:	4628      	mov	r0, r5
 802124e:	47b8      	blx	r7
 8021250:	3001      	adds	r0, #1
 8021252:	f43f ae38 	beq.w	8020ec6 <_printf_float+0xc2>
 8021256:	f108 0801 	add.w	r8, r8, #1
 802125a:	68e3      	ldr	r3, [r4, #12]
 802125c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802125e:	1a5b      	subs	r3, r3, r1
 8021260:	4543      	cmp	r3, r8
 8021262:	dcf0      	bgt.n	8021246 <_printf_float+0x442>
 8021264:	e6fa      	b.n	802105c <_printf_float+0x258>
 8021266:	f04f 0800 	mov.w	r8, #0
 802126a:	f104 0919 	add.w	r9, r4, #25
 802126e:	e7f4      	b.n	802125a <_printf_float+0x456>

08021270 <_printf_common>:
 8021270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021274:	4616      	mov	r6, r2
 8021276:	4699      	mov	r9, r3
 8021278:	688a      	ldr	r2, [r1, #8]
 802127a:	690b      	ldr	r3, [r1, #16]
 802127c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8021280:	4293      	cmp	r3, r2
 8021282:	bfb8      	it	lt
 8021284:	4613      	movlt	r3, r2
 8021286:	6033      	str	r3, [r6, #0]
 8021288:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802128c:	4607      	mov	r7, r0
 802128e:	460c      	mov	r4, r1
 8021290:	b10a      	cbz	r2, 8021296 <_printf_common+0x26>
 8021292:	3301      	adds	r3, #1
 8021294:	6033      	str	r3, [r6, #0]
 8021296:	6823      	ldr	r3, [r4, #0]
 8021298:	0699      	lsls	r1, r3, #26
 802129a:	bf42      	ittt	mi
 802129c:	6833      	ldrmi	r3, [r6, #0]
 802129e:	3302      	addmi	r3, #2
 80212a0:	6033      	strmi	r3, [r6, #0]
 80212a2:	6825      	ldr	r5, [r4, #0]
 80212a4:	f015 0506 	ands.w	r5, r5, #6
 80212a8:	d106      	bne.n	80212b8 <_printf_common+0x48>
 80212aa:	f104 0a19 	add.w	sl, r4, #25
 80212ae:	68e3      	ldr	r3, [r4, #12]
 80212b0:	6832      	ldr	r2, [r6, #0]
 80212b2:	1a9b      	subs	r3, r3, r2
 80212b4:	42ab      	cmp	r3, r5
 80212b6:	dc26      	bgt.n	8021306 <_printf_common+0x96>
 80212b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80212bc:	1e13      	subs	r3, r2, #0
 80212be:	6822      	ldr	r2, [r4, #0]
 80212c0:	bf18      	it	ne
 80212c2:	2301      	movne	r3, #1
 80212c4:	0692      	lsls	r2, r2, #26
 80212c6:	d42b      	bmi.n	8021320 <_printf_common+0xb0>
 80212c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80212cc:	4649      	mov	r1, r9
 80212ce:	4638      	mov	r0, r7
 80212d0:	47c0      	blx	r8
 80212d2:	3001      	adds	r0, #1
 80212d4:	d01e      	beq.n	8021314 <_printf_common+0xa4>
 80212d6:	6823      	ldr	r3, [r4, #0]
 80212d8:	68e5      	ldr	r5, [r4, #12]
 80212da:	6832      	ldr	r2, [r6, #0]
 80212dc:	f003 0306 	and.w	r3, r3, #6
 80212e0:	2b04      	cmp	r3, #4
 80212e2:	bf08      	it	eq
 80212e4:	1aad      	subeq	r5, r5, r2
 80212e6:	68a3      	ldr	r3, [r4, #8]
 80212e8:	6922      	ldr	r2, [r4, #16]
 80212ea:	bf0c      	ite	eq
 80212ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80212f0:	2500      	movne	r5, #0
 80212f2:	4293      	cmp	r3, r2
 80212f4:	bfc4      	itt	gt
 80212f6:	1a9b      	subgt	r3, r3, r2
 80212f8:	18ed      	addgt	r5, r5, r3
 80212fa:	2600      	movs	r6, #0
 80212fc:	341a      	adds	r4, #26
 80212fe:	42b5      	cmp	r5, r6
 8021300:	d11a      	bne.n	8021338 <_printf_common+0xc8>
 8021302:	2000      	movs	r0, #0
 8021304:	e008      	b.n	8021318 <_printf_common+0xa8>
 8021306:	2301      	movs	r3, #1
 8021308:	4652      	mov	r2, sl
 802130a:	4649      	mov	r1, r9
 802130c:	4638      	mov	r0, r7
 802130e:	47c0      	blx	r8
 8021310:	3001      	adds	r0, #1
 8021312:	d103      	bne.n	802131c <_printf_common+0xac>
 8021314:	f04f 30ff 	mov.w	r0, #4294967295
 8021318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802131c:	3501      	adds	r5, #1
 802131e:	e7c6      	b.n	80212ae <_printf_common+0x3e>
 8021320:	18e1      	adds	r1, r4, r3
 8021322:	1c5a      	adds	r2, r3, #1
 8021324:	2030      	movs	r0, #48	; 0x30
 8021326:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802132a:	4422      	add	r2, r4
 802132c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8021330:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8021334:	3302      	adds	r3, #2
 8021336:	e7c7      	b.n	80212c8 <_printf_common+0x58>
 8021338:	2301      	movs	r3, #1
 802133a:	4622      	mov	r2, r4
 802133c:	4649      	mov	r1, r9
 802133e:	4638      	mov	r0, r7
 8021340:	47c0      	blx	r8
 8021342:	3001      	adds	r0, #1
 8021344:	d0e6      	beq.n	8021314 <_printf_common+0xa4>
 8021346:	3601      	adds	r6, #1
 8021348:	e7d9      	b.n	80212fe <_printf_common+0x8e>
	...

0802134c <_printf_i>:
 802134c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021350:	7e0f      	ldrb	r7, [r1, #24]
 8021352:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021354:	2f78      	cmp	r7, #120	; 0x78
 8021356:	4691      	mov	r9, r2
 8021358:	4680      	mov	r8, r0
 802135a:	460c      	mov	r4, r1
 802135c:	469a      	mov	sl, r3
 802135e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8021362:	d807      	bhi.n	8021374 <_printf_i+0x28>
 8021364:	2f62      	cmp	r7, #98	; 0x62
 8021366:	d80a      	bhi.n	802137e <_printf_i+0x32>
 8021368:	2f00      	cmp	r7, #0
 802136a:	f000 80d8 	beq.w	802151e <_printf_i+0x1d2>
 802136e:	2f58      	cmp	r7, #88	; 0x58
 8021370:	f000 80a3 	beq.w	80214ba <_printf_i+0x16e>
 8021374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8021378:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802137c:	e03a      	b.n	80213f4 <_printf_i+0xa8>
 802137e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8021382:	2b15      	cmp	r3, #21
 8021384:	d8f6      	bhi.n	8021374 <_printf_i+0x28>
 8021386:	a101      	add	r1, pc, #4	; (adr r1, 802138c <_printf_i+0x40>)
 8021388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802138c:	080213e5 	.word	0x080213e5
 8021390:	080213f9 	.word	0x080213f9
 8021394:	08021375 	.word	0x08021375
 8021398:	08021375 	.word	0x08021375
 802139c:	08021375 	.word	0x08021375
 80213a0:	08021375 	.word	0x08021375
 80213a4:	080213f9 	.word	0x080213f9
 80213a8:	08021375 	.word	0x08021375
 80213ac:	08021375 	.word	0x08021375
 80213b0:	08021375 	.word	0x08021375
 80213b4:	08021375 	.word	0x08021375
 80213b8:	08021505 	.word	0x08021505
 80213bc:	08021429 	.word	0x08021429
 80213c0:	080214e7 	.word	0x080214e7
 80213c4:	08021375 	.word	0x08021375
 80213c8:	08021375 	.word	0x08021375
 80213cc:	08021527 	.word	0x08021527
 80213d0:	08021375 	.word	0x08021375
 80213d4:	08021429 	.word	0x08021429
 80213d8:	08021375 	.word	0x08021375
 80213dc:	08021375 	.word	0x08021375
 80213e0:	080214ef 	.word	0x080214ef
 80213e4:	682b      	ldr	r3, [r5, #0]
 80213e6:	1d1a      	adds	r2, r3, #4
 80213e8:	681b      	ldr	r3, [r3, #0]
 80213ea:	602a      	str	r2, [r5, #0]
 80213ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80213f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80213f4:	2301      	movs	r3, #1
 80213f6:	e0a3      	b.n	8021540 <_printf_i+0x1f4>
 80213f8:	6820      	ldr	r0, [r4, #0]
 80213fa:	6829      	ldr	r1, [r5, #0]
 80213fc:	0606      	lsls	r6, r0, #24
 80213fe:	f101 0304 	add.w	r3, r1, #4
 8021402:	d50a      	bpl.n	802141a <_printf_i+0xce>
 8021404:	680e      	ldr	r6, [r1, #0]
 8021406:	602b      	str	r3, [r5, #0]
 8021408:	2e00      	cmp	r6, #0
 802140a:	da03      	bge.n	8021414 <_printf_i+0xc8>
 802140c:	232d      	movs	r3, #45	; 0x2d
 802140e:	4276      	negs	r6, r6
 8021410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021414:	485e      	ldr	r0, [pc, #376]	; (8021590 <_printf_i+0x244>)
 8021416:	230a      	movs	r3, #10
 8021418:	e019      	b.n	802144e <_printf_i+0x102>
 802141a:	680e      	ldr	r6, [r1, #0]
 802141c:	602b      	str	r3, [r5, #0]
 802141e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8021422:	bf18      	it	ne
 8021424:	b236      	sxthne	r6, r6
 8021426:	e7ef      	b.n	8021408 <_printf_i+0xbc>
 8021428:	682b      	ldr	r3, [r5, #0]
 802142a:	6820      	ldr	r0, [r4, #0]
 802142c:	1d19      	adds	r1, r3, #4
 802142e:	6029      	str	r1, [r5, #0]
 8021430:	0601      	lsls	r1, r0, #24
 8021432:	d501      	bpl.n	8021438 <_printf_i+0xec>
 8021434:	681e      	ldr	r6, [r3, #0]
 8021436:	e002      	b.n	802143e <_printf_i+0xf2>
 8021438:	0646      	lsls	r6, r0, #25
 802143a:	d5fb      	bpl.n	8021434 <_printf_i+0xe8>
 802143c:	881e      	ldrh	r6, [r3, #0]
 802143e:	4854      	ldr	r0, [pc, #336]	; (8021590 <_printf_i+0x244>)
 8021440:	2f6f      	cmp	r7, #111	; 0x6f
 8021442:	bf0c      	ite	eq
 8021444:	2308      	moveq	r3, #8
 8021446:	230a      	movne	r3, #10
 8021448:	2100      	movs	r1, #0
 802144a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802144e:	6865      	ldr	r5, [r4, #4]
 8021450:	60a5      	str	r5, [r4, #8]
 8021452:	2d00      	cmp	r5, #0
 8021454:	bfa2      	ittt	ge
 8021456:	6821      	ldrge	r1, [r4, #0]
 8021458:	f021 0104 	bicge.w	r1, r1, #4
 802145c:	6021      	strge	r1, [r4, #0]
 802145e:	b90e      	cbnz	r6, 8021464 <_printf_i+0x118>
 8021460:	2d00      	cmp	r5, #0
 8021462:	d04d      	beq.n	8021500 <_printf_i+0x1b4>
 8021464:	4615      	mov	r5, r2
 8021466:	fbb6 f1f3 	udiv	r1, r6, r3
 802146a:	fb03 6711 	mls	r7, r3, r1, r6
 802146e:	5dc7      	ldrb	r7, [r0, r7]
 8021470:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8021474:	4637      	mov	r7, r6
 8021476:	42bb      	cmp	r3, r7
 8021478:	460e      	mov	r6, r1
 802147a:	d9f4      	bls.n	8021466 <_printf_i+0x11a>
 802147c:	2b08      	cmp	r3, #8
 802147e:	d10b      	bne.n	8021498 <_printf_i+0x14c>
 8021480:	6823      	ldr	r3, [r4, #0]
 8021482:	07de      	lsls	r6, r3, #31
 8021484:	d508      	bpl.n	8021498 <_printf_i+0x14c>
 8021486:	6923      	ldr	r3, [r4, #16]
 8021488:	6861      	ldr	r1, [r4, #4]
 802148a:	4299      	cmp	r1, r3
 802148c:	bfde      	ittt	le
 802148e:	2330      	movle	r3, #48	; 0x30
 8021490:	f805 3c01 	strble.w	r3, [r5, #-1]
 8021494:	f105 35ff 	addle.w	r5, r5, #4294967295
 8021498:	1b52      	subs	r2, r2, r5
 802149a:	6122      	str	r2, [r4, #16]
 802149c:	f8cd a000 	str.w	sl, [sp]
 80214a0:	464b      	mov	r3, r9
 80214a2:	aa03      	add	r2, sp, #12
 80214a4:	4621      	mov	r1, r4
 80214a6:	4640      	mov	r0, r8
 80214a8:	f7ff fee2 	bl	8021270 <_printf_common>
 80214ac:	3001      	adds	r0, #1
 80214ae:	d14c      	bne.n	802154a <_printf_i+0x1fe>
 80214b0:	f04f 30ff 	mov.w	r0, #4294967295
 80214b4:	b004      	add	sp, #16
 80214b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80214ba:	4835      	ldr	r0, [pc, #212]	; (8021590 <_printf_i+0x244>)
 80214bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80214c0:	6829      	ldr	r1, [r5, #0]
 80214c2:	6823      	ldr	r3, [r4, #0]
 80214c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80214c8:	6029      	str	r1, [r5, #0]
 80214ca:	061d      	lsls	r5, r3, #24
 80214cc:	d514      	bpl.n	80214f8 <_printf_i+0x1ac>
 80214ce:	07df      	lsls	r7, r3, #31
 80214d0:	bf44      	itt	mi
 80214d2:	f043 0320 	orrmi.w	r3, r3, #32
 80214d6:	6023      	strmi	r3, [r4, #0]
 80214d8:	b91e      	cbnz	r6, 80214e2 <_printf_i+0x196>
 80214da:	6823      	ldr	r3, [r4, #0]
 80214dc:	f023 0320 	bic.w	r3, r3, #32
 80214e0:	6023      	str	r3, [r4, #0]
 80214e2:	2310      	movs	r3, #16
 80214e4:	e7b0      	b.n	8021448 <_printf_i+0xfc>
 80214e6:	6823      	ldr	r3, [r4, #0]
 80214e8:	f043 0320 	orr.w	r3, r3, #32
 80214ec:	6023      	str	r3, [r4, #0]
 80214ee:	2378      	movs	r3, #120	; 0x78
 80214f0:	4828      	ldr	r0, [pc, #160]	; (8021594 <_printf_i+0x248>)
 80214f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80214f6:	e7e3      	b.n	80214c0 <_printf_i+0x174>
 80214f8:	0659      	lsls	r1, r3, #25
 80214fa:	bf48      	it	mi
 80214fc:	b2b6      	uxthmi	r6, r6
 80214fe:	e7e6      	b.n	80214ce <_printf_i+0x182>
 8021500:	4615      	mov	r5, r2
 8021502:	e7bb      	b.n	802147c <_printf_i+0x130>
 8021504:	682b      	ldr	r3, [r5, #0]
 8021506:	6826      	ldr	r6, [r4, #0]
 8021508:	6961      	ldr	r1, [r4, #20]
 802150a:	1d18      	adds	r0, r3, #4
 802150c:	6028      	str	r0, [r5, #0]
 802150e:	0635      	lsls	r5, r6, #24
 8021510:	681b      	ldr	r3, [r3, #0]
 8021512:	d501      	bpl.n	8021518 <_printf_i+0x1cc>
 8021514:	6019      	str	r1, [r3, #0]
 8021516:	e002      	b.n	802151e <_printf_i+0x1d2>
 8021518:	0670      	lsls	r0, r6, #25
 802151a:	d5fb      	bpl.n	8021514 <_printf_i+0x1c8>
 802151c:	8019      	strh	r1, [r3, #0]
 802151e:	2300      	movs	r3, #0
 8021520:	6123      	str	r3, [r4, #16]
 8021522:	4615      	mov	r5, r2
 8021524:	e7ba      	b.n	802149c <_printf_i+0x150>
 8021526:	682b      	ldr	r3, [r5, #0]
 8021528:	1d1a      	adds	r2, r3, #4
 802152a:	602a      	str	r2, [r5, #0]
 802152c:	681d      	ldr	r5, [r3, #0]
 802152e:	6862      	ldr	r2, [r4, #4]
 8021530:	2100      	movs	r1, #0
 8021532:	4628      	mov	r0, r5
 8021534:	f7de fe7c 	bl	8000230 <memchr>
 8021538:	b108      	cbz	r0, 802153e <_printf_i+0x1f2>
 802153a:	1b40      	subs	r0, r0, r5
 802153c:	6060      	str	r0, [r4, #4]
 802153e:	6863      	ldr	r3, [r4, #4]
 8021540:	6123      	str	r3, [r4, #16]
 8021542:	2300      	movs	r3, #0
 8021544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021548:	e7a8      	b.n	802149c <_printf_i+0x150>
 802154a:	6923      	ldr	r3, [r4, #16]
 802154c:	462a      	mov	r2, r5
 802154e:	4649      	mov	r1, r9
 8021550:	4640      	mov	r0, r8
 8021552:	47d0      	blx	sl
 8021554:	3001      	adds	r0, #1
 8021556:	d0ab      	beq.n	80214b0 <_printf_i+0x164>
 8021558:	6823      	ldr	r3, [r4, #0]
 802155a:	079b      	lsls	r3, r3, #30
 802155c:	d413      	bmi.n	8021586 <_printf_i+0x23a>
 802155e:	68e0      	ldr	r0, [r4, #12]
 8021560:	9b03      	ldr	r3, [sp, #12]
 8021562:	4298      	cmp	r0, r3
 8021564:	bfb8      	it	lt
 8021566:	4618      	movlt	r0, r3
 8021568:	e7a4      	b.n	80214b4 <_printf_i+0x168>
 802156a:	2301      	movs	r3, #1
 802156c:	4632      	mov	r2, r6
 802156e:	4649      	mov	r1, r9
 8021570:	4640      	mov	r0, r8
 8021572:	47d0      	blx	sl
 8021574:	3001      	adds	r0, #1
 8021576:	d09b      	beq.n	80214b0 <_printf_i+0x164>
 8021578:	3501      	adds	r5, #1
 802157a:	68e3      	ldr	r3, [r4, #12]
 802157c:	9903      	ldr	r1, [sp, #12]
 802157e:	1a5b      	subs	r3, r3, r1
 8021580:	42ab      	cmp	r3, r5
 8021582:	dcf2      	bgt.n	802156a <_printf_i+0x21e>
 8021584:	e7eb      	b.n	802155e <_printf_i+0x212>
 8021586:	2500      	movs	r5, #0
 8021588:	f104 0619 	add.w	r6, r4, #25
 802158c:	e7f5      	b.n	802157a <_printf_i+0x22e>
 802158e:	bf00      	nop
 8021590:	0802527a 	.word	0x0802527a
 8021594:	0802528b 	.word	0x0802528b

08021598 <iprintf>:
 8021598:	b40f      	push	{r0, r1, r2, r3}
 802159a:	4b0a      	ldr	r3, [pc, #40]	; (80215c4 <iprintf+0x2c>)
 802159c:	b513      	push	{r0, r1, r4, lr}
 802159e:	681c      	ldr	r4, [r3, #0]
 80215a0:	b124      	cbz	r4, 80215ac <iprintf+0x14>
 80215a2:	69a3      	ldr	r3, [r4, #24]
 80215a4:	b913      	cbnz	r3, 80215ac <iprintf+0x14>
 80215a6:	4620      	mov	r0, r4
 80215a8:	f001 f8ee 	bl	8022788 <__sinit>
 80215ac:	ab05      	add	r3, sp, #20
 80215ae:	9a04      	ldr	r2, [sp, #16]
 80215b0:	68a1      	ldr	r1, [r4, #8]
 80215b2:	9301      	str	r3, [sp, #4]
 80215b4:	4620      	mov	r0, r4
 80215b6:	f001 fe9d 	bl	80232f4 <_vfiprintf_r>
 80215ba:	b002      	add	sp, #8
 80215bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80215c0:	b004      	add	sp, #16
 80215c2:	4770      	bx	lr
 80215c4:	2000002c 	.word	0x2000002c

080215c8 <putchar>:
 80215c8:	4b09      	ldr	r3, [pc, #36]	; (80215f0 <putchar+0x28>)
 80215ca:	b513      	push	{r0, r1, r4, lr}
 80215cc:	681c      	ldr	r4, [r3, #0]
 80215ce:	4601      	mov	r1, r0
 80215d0:	b134      	cbz	r4, 80215e0 <putchar+0x18>
 80215d2:	69a3      	ldr	r3, [r4, #24]
 80215d4:	b923      	cbnz	r3, 80215e0 <putchar+0x18>
 80215d6:	9001      	str	r0, [sp, #4]
 80215d8:	4620      	mov	r0, r4
 80215da:	f001 f8d5 	bl	8022788 <__sinit>
 80215de:	9901      	ldr	r1, [sp, #4]
 80215e0:	68a2      	ldr	r2, [r4, #8]
 80215e2:	4620      	mov	r0, r4
 80215e4:	b002      	add	sp, #8
 80215e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80215ea:	f001 bfb3 	b.w	8023554 <_putc_r>
 80215ee:	bf00      	nop
 80215f0:	2000002c 	.word	0x2000002c

080215f4 <_puts_r>:
 80215f4:	b570      	push	{r4, r5, r6, lr}
 80215f6:	460e      	mov	r6, r1
 80215f8:	4605      	mov	r5, r0
 80215fa:	b118      	cbz	r0, 8021604 <_puts_r+0x10>
 80215fc:	6983      	ldr	r3, [r0, #24]
 80215fe:	b90b      	cbnz	r3, 8021604 <_puts_r+0x10>
 8021600:	f001 f8c2 	bl	8022788 <__sinit>
 8021604:	69ab      	ldr	r3, [r5, #24]
 8021606:	68ac      	ldr	r4, [r5, #8]
 8021608:	b913      	cbnz	r3, 8021610 <_puts_r+0x1c>
 802160a:	4628      	mov	r0, r5
 802160c:	f001 f8bc 	bl	8022788 <__sinit>
 8021610:	4b2c      	ldr	r3, [pc, #176]	; (80216c4 <_puts_r+0xd0>)
 8021612:	429c      	cmp	r4, r3
 8021614:	d120      	bne.n	8021658 <_puts_r+0x64>
 8021616:	686c      	ldr	r4, [r5, #4]
 8021618:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802161a:	07db      	lsls	r3, r3, #31
 802161c:	d405      	bmi.n	802162a <_puts_r+0x36>
 802161e:	89a3      	ldrh	r3, [r4, #12]
 8021620:	0598      	lsls	r0, r3, #22
 8021622:	d402      	bmi.n	802162a <_puts_r+0x36>
 8021624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021626:	f001 f952 	bl	80228ce <__retarget_lock_acquire_recursive>
 802162a:	89a3      	ldrh	r3, [r4, #12]
 802162c:	0719      	lsls	r1, r3, #28
 802162e:	d51d      	bpl.n	802166c <_puts_r+0x78>
 8021630:	6923      	ldr	r3, [r4, #16]
 8021632:	b1db      	cbz	r3, 802166c <_puts_r+0x78>
 8021634:	3e01      	subs	r6, #1
 8021636:	68a3      	ldr	r3, [r4, #8]
 8021638:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802163c:	3b01      	subs	r3, #1
 802163e:	60a3      	str	r3, [r4, #8]
 8021640:	bb39      	cbnz	r1, 8021692 <_puts_r+0x9e>
 8021642:	2b00      	cmp	r3, #0
 8021644:	da38      	bge.n	80216b8 <_puts_r+0xc4>
 8021646:	4622      	mov	r2, r4
 8021648:	210a      	movs	r1, #10
 802164a:	4628      	mov	r0, r5
 802164c:	f000 f848 	bl	80216e0 <__swbuf_r>
 8021650:	3001      	adds	r0, #1
 8021652:	d011      	beq.n	8021678 <_puts_r+0x84>
 8021654:	250a      	movs	r5, #10
 8021656:	e011      	b.n	802167c <_puts_r+0x88>
 8021658:	4b1b      	ldr	r3, [pc, #108]	; (80216c8 <_puts_r+0xd4>)
 802165a:	429c      	cmp	r4, r3
 802165c:	d101      	bne.n	8021662 <_puts_r+0x6e>
 802165e:	68ac      	ldr	r4, [r5, #8]
 8021660:	e7da      	b.n	8021618 <_puts_r+0x24>
 8021662:	4b1a      	ldr	r3, [pc, #104]	; (80216cc <_puts_r+0xd8>)
 8021664:	429c      	cmp	r4, r3
 8021666:	bf08      	it	eq
 8021668:	68ec      	ldreq	r4, [r5, #12]
 802166a:	e7d5      	b.n	8021618 <_puts_r+0x24>
 802166c:	4621      	mov	r1, r4
 802166e:	4628      	mov	r0, r5
 8021670:	f000 f888 	bl	8021784 <__swsetup_r>
 8021674:	2800      	cmp	r0, #0
 8021676:	d0dd      	beq.n	8021634 <_puts_r+0x40>
 8021678:	f04f 35ff 	mov.w	r5, #4294967295
 802167c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802167e:	07da      	lsls	r2, r3, #31
 8021680:	d405      	bmi.n	802168e <_puts_r+0x9a>
 8021682:	89a3      	ldrh	r3, [r4, #12]
 8021684:	059b      	lsls	r3, r3, #22
 8021686:	d402      	bmi.n	802168e <_puts_r+0x9a>
 8021688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802168a:	f001 f921 	bl	80228d0 <__retarget_lock_release_recursive>
 802168e:	4628      	mov	r0, r5
 8021690:	bd70      	pop	{r4, r5, r6, pc}
 8021692:	2b00      	cmp	r3, #0
 8021694:	da04      	bge.n	80216a0 <_puts_r+0xac>
 8021696:	69a2      	ldr	r2, [r4, #24]
 8021698:	429a      	cmp	r2, r3
 802169a:	dc06      	bgt.n	80216aa <_puts_r+0xb6>
 802169c:	290a      	cmp	r1, #10
 802169e:	d004      	beq.n	80216aa <_puts_r+0xb6>
 80216a0:	6823      	ldr	r3, [r4, #0]
 80216a2:	1c5a      	adds	r2, r3, #1
 80216a4:	6022      	str	r2, [r4, #0]
 80216a6:	7019      	strb	r1, [r3, #0]
 80216a8:	e7c5      	b.n	8021636 <_puts_r+0x42>
 80216aa:	4622      	mov	r2, r4
 80216ac:	4628      	mov	r0, r5
 80216ae:	f000 f817 	bl	80216e0 <__swbuf_r>
 80216b2:	3001      	adds	r0, #1
 80216b4:	d1bf      	bne.n	8021636 <_puts_r+0x42>
 80216b6:	e7df      	b.n	8021678 <_puts_r+0x84>
 80216b8:	6823      	ldr	r3, [r4, #0]
 80216ba:	250a      	movs	r5, #10
 80216bc:	1c5a      	adds	r2, r3, #1
 80216be:	6022      	str	r2, [r4, #0]
 80216c0:	701d      	strb	r5, [r3, #0]
 80216c2:	e7db      	b.n	802167c <_puts_r+0x88>
 80216c4:	0802534c 	.word	0x0802534c
 80216c8:	0802536c 	.word	0x0802536c
 80216cc:	0802532c 	.word	0x0802532c

080216d0 <puts>:
 80216d0:	4b02      	ldr	r3, [pc, #8]	; (80216dc <puts+0xc>)
 80216d2:	4601      	mov	r1, r0
 80216d4:	6818      	ldr	r0, [r3, #0]
 80216d6:	f7ff bf8d 	b.w	80215f4 <_puts_r>
 80216da:	bf00      	nop
 80216dc:	2000002c 	.word	0x2000002c

080216e0 <__swbuf_r>:
 80216e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80216e2:	460e      	mov	r6, r1
 80216e4:	4614      	mov	r4, r2
 80216e6:	4605      	mov	r5, r0
 80216e8:	b118      	cbz	r0, 80216f2 <__swbuf_r+0x12>
 80216ea:	6983      	ldr	r3, [r0, #24]
 80216ec:	b90b      	cbnz	r3, 80216f2 <__swbuf_r+0x12>
 80216ee:	f001 f84b 	bl	8022788 <__sinit>
 80216f2:	4b21      	ldr	r3, [pc, #132]	; (8021778 <__swbuf_r+0x98>)
 80216f4:	429c      	cmp	r4, r3
 80216f6:	d12b      	bne.n	8021750 <__swbuf_r+0x70>
 80216f8:	686c      	ldr	r4, [r5, #4]
 80216fa:	69a3      	ldr	r3, [r4, #24]
 80216fc:	60a3      	str	r3, [r4, #8]
 80216fe:	89a3      	ldrh	r3, [r4, #12]
 8021700:	071a      	lsls	r2, r3, #28
 8021702:	d52f      	bpl.n	8021764 <__swbuf_r+0x84>
 8021704:	6923      	ldr	r3, [r4, #16]
 8021706:	b36b      	cbz	r3, 8021764 <__swbuf_r+0x84>
 8021708:	6923      	ldr	r3, [r4, #16]
 802170a:	6820      	ldr	r0, [r4, #0]
 802170c:	1ac0      	subs	r0, r0, r3
 802170e:	6963      	ldr	r3, [r4, #20]
 8021710:	b2f6      	uxtb	r6, r6
 8021712:	4283      	cmp	r3, r0
 8021714:	4637      	mov	r7, r6
 8021716:	dc04      	bgt.n	8021722 <__swbuf_r+0x42>
 8021718:	4621      	mov	r1, r4
 802171a:	4628      	mov	r0, r5
 802171c:	f000 ffa0 	bl	8022660 <_fflush_r>
 8021720:	bb30      	cbnz	r0, 8021770 <__swbuf_r+0x90>
 8021722:	68a3      	ldr	r3, [r4, #8]
 8021724:	3b01      	subs	r3, #1
 8021726:	60a3      	str	r3, [r4, #8]
 8021728:	6823      	ldr	r3, [r4, #0]
 802172a:	1c5a      	adds	r2, r3, #1
 802172c:	6022      	str	r2, [r4, #0]
 802172e:	701e      	strb	r6, [r3, #0]
 8021730:	6963      	ldr	r3, [r4, #20]
 8021732:	3001      	adds	r0, #1
 8021734:	4283      	cmp	r3, r0
 8021736:	d004      	beq.n	8021742 <__swbuf_r+0x62>
 8021738:	89a3      	ldrh	r3, [r4, #12]
 802173a:	07db      	lsls	r3, r3, #31
 802173c:	d506      	bpl.n	802174c <__swbuf_r+0x6c>
 802173e:	2e0a      	cmp	r6, #10
 8021740:	d104      	bne.n	802174c <__swbuf_r+0x6c>
 8021742:	4621      	mov	r1, r4
 8021744:	4628      	mov	r0, r5
 8021746:	f000 ff8b 	bl	8022660 <_fflush_r>
 802174a:	b988      	cbnz	r0, 8021770 <__swbuf_r+0x90>
 802174c:	4638      	mov	r0, r7
 802174e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021750:	4b0a      	ldr	r3, [pc, #40]	; (802177c <__swbuf_r+0x9c>)
 8021752:	429c      	cmp	r4, r3
 8021754:	d101      	bne.n	802175a <__swbuf_r+0x7a>
 8021756:	68ac      	ldr	r4, [r5, #8]
 8021758:	e7cf      	b.n	80216fa <__swbuf_r+0x1a>
 802175a:	4b09      	ldr	r3, [pc, #36]	; (8021780 <__swbuf_r+0xa0>)
 802175c:	429c      	cmp	r4, r3
 802175e:	bf08      	it	eq
 8021760:	68ec      	ldreq	r4, [r5, #12]
 8021762:	e7ca      	b.n	80216fa <__swbuf_r+0x1a>
 8021764:	4621      	mov	r1, r4
 8021766:	4628      	mov	r0, r5
 8021768:	f000 f80c 	bl	8021784 <__swsetup_r>
 802176c:	2800      	cmp	r0, #0
 802176e:	d0cb      	beq.n	8021708 <__swbuf_r+0x28>
 8021770:	f04f 37ff 	mov.w	r7, #4294967295
 8021774:	e7ea      	b.n	802174c <__swbuf_r+0x6c>
 8021776:	bf00      	nop
 8021778:	0802534c 	.word	0x0802534c
 802177c:	0802536c 	.word	0x0802536c
 8021780:	0802532c 	.word	0x0802532c

08021784 <__swsetup_r>:
 8021784:	4b32      	ldr	r3, [pc, #200]	; (8021850 <__swsetup_r+0xcc>)
 8021786:	b570      	push	{r4, r5, r6, lr}
 8021788:	681d      	ldr	r5, [r3, #0]
 802178a:	4606      	mov	r6, r0
 802178c:	460c      	mov	r4, r1
 802178e:	b125      	cbz	r5, 802179a <__swsetup_r+0x16>
 8021790:	69ab      	ldr	r3, [r5, #24]
 8021792:	b913      	cbnz	r3, 802179a <__swsetup_r+0x16>
 8021794:	4628      	mov	r0, r5
 8021796:	f000 fff7 	bl	8022788 <__sinit>
 802179a:	4b2e      	ldr	r3, [pc, #184]	; (8021854 <__swsetup_r+0xd0>)
 802179c:	429c      	cmp	r4, r3
 802179e:	d10f      	bne.n	80217c0 <__swsetup_r+0x3c>
 80217a0:	686c      	ldr	r4, [r5, #4]
 80217a2:	89a3      	ldrh	r3, [r4, #12]
 80217a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80217a8:	0719      	lsls	r1, r3, #28
 80217aa:	d42c      	bmi.n	8021806 <__swsetup_r+0x82>
 80217ac:	06dd      	lsls	r5, r3, #27
 80217ae:	d411      	bmi.n	80217d4 <__swsetup_r+0x50>
 80217b0:	2309      	movs	r3, #9
 80217b2:	6033      	str	r3, [r6, #0]
 80217b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80217b8:	81a3      	strh	r3, [r4, #12]
 80217ba:	f04f 30ff 	mov.w	r0, #4294967295
 80217be:	e03e      	b.n	802183e <__swsetup_r+0xba>
 80217c0:	4b25      	ldr	r3, [pc, #148]	; (8021858 <__swsetup_r+0xd4>)
 80217c2:	429c      	cmp	r4, r3
 80217c4:	d101      	bne.n	80217ca <__swsetup_r+0x46>
 80217c6:	68ac      	ldr	r4, [r5, #8]
 80217c8:	e7eb      	b.n	80217a2 <__swsetup_r+0x1e>
 80217ca:	4b24      	ldr	r3, [pc, #144]	; (802185c <__swsetup_r+0xd8>)
 80217cc:	429c      	cmp	r4, r3
 80217ce:	bf08      	it	eq
 80217d0:	68ec      	ldreq	r4, [r5, #12]
 80217d2:	e7e6      	b.n	80217a2 <__swsetup_r+0x1e>
 80217d4:	0758      	lsls	r0, r3, #29
 80217d6:	d512      	bpl.n	80217fe <__swsetup_r+0x7a>
 80217d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80217da:	b141      	cbz	r1, 80217ee <__swsetup_r+0x6a>
 80217dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80217e0:	4299      	cmp	r1, r3
 80217e2:	d002      	beq.n	80217ea <__swsetup_r+0x66>
 80217e4:	4630      	mov	r0, r6
 80217e6:	f001 fc7b 	bl	80230e0 <_free_r>
 80217ea:	2300      	movs	r3, #0
 80217ec:	6363      	str	r3, [r4, #52]	; 0x34
 80217ee:	89a3      	ldrh	r3, [r4, #12]
 80217f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80217f4:	81a3      	strh	r3, [r4, #12]
 80217f6:	2300      	movs	r3, #0
 80217f8:	6063      	str	r3, [r4, #4]
 80217fa:	6923      	ldr	r3, [r4, #16]
 80217fc:	6023      	str	r3, [r4, #0]
 80217fe:	89a3      	ldrh	r3, [r4, #12]
 8021800:	f043 0308 	orr.w	r3, r3, #8
 8021804:	81a3      	strh	r3, [r4, #12]
 8021806:	6923      	ldr	r3, [r4, #16]
 8021808:	b94b      	cbnz	r3, 802181e <__swsetup_r+0x9a>
 802180a:	89a3      	ldrh	r3, [r4, #12]
 802180c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021814:	d003      	beq.n	802181e <__swsetup_r+0x9a>
 8021816:	4621      	mov	r1, r4
 8021818:	4630      	mov	r0, r6
 802181a:	f001 f87f 	bl	802291c <__smakebuf_r>
 802181e:	89a0      	ldrh	r0, [r4, #12]
 8021820:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021824:	f010 0301 	ands.w	r3, r0, #1
 8021828:	d00a      	beq.n	8021840 <__swsetup_r+0xbc>
 802182a:	2300      	movs	r3, #0
 802182c:	60a3      	str	r3, [r4, #8]
 802182e:	6963      	ldr	r3, [r4, #20]
 8021830:	425b      	negs	r3, r3
 8021832:	61a3      	str	r3, [r4, #24]
 8021834:	6923      	ldr	r3, [r4, #16]
 8021836:	b943      	cbnz	r3, 802184a <__swsetup_r+0xc6>
 8021838:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802183c:	d1ba      	bne.n	80217b4 <__swsetup_r+0x30>
 802183e:	bd70      	pop	{r4, r5, r6, pc}
 8021840:	0781      	lsls	r1, r0, #30
 8021842:	bf58      	it	pl
 8021844:	6963      	ldrpl	r3, [r4, #20]
 8021846:	60a3      	str	r3, [r4, #8]
 8021848:	e7f4      	b.n	8021834 <__swsetup_r+0xb0>
 802184a:	2000      	movs	r0, #0
 802184c:	e7f7      	b.n	802183e <__swsetup_r+0xba>
 802184e:	bf00      	nop
 8021850:	2000002c 	.word	0x2000002c
 8021854:	0802534c 	.word	0x0802534c
 8021858:	0802536c 	.word	0x0802536c
 802185c:	0802532c 	.word	0x0802532c

08021860 <quorem>:
 8021860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021864:	6903      	ldr	r3, [r0, #16]
 8021866:	690c      	ldr	r4, [r1, #16]
 8021868:	42a3      	cmp	r3, r4
 802186a:	4607      	mov	r7, r0
 802186c:	f2c0 8081 	blt.w	8021972 <quorem+0x112>
 8021870:	3c01      	subs	r4, #1
 8021872:	f101 0814 	add.w	r8, r1, #20
 8021876:	f100 0514 	add.w	r5, r0, #20
 802187a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802187e:	9301      	str	r3, [sp, #4]
 8021880:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8021884:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021888:	3301      	adds	r3, #1
 802188a:	429a      	cmp	r2, r3
 802188c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8021890:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8021894:	fbb2 f6f3 	udiv	r6, r2, r3
 8021898:	d331      	bcc.n	80218fe <quorem+0x9e>
 802189a:	f04f 0e00 	mov.w	lr, #0
 802189e:	4640      	mov	r0, r8
 80218a0:	46ac      	mov	ip, r5
 80218a2:	46f2      	mov	sl, lr
 80218a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80218a8:	b293      	uxth	r3, r2
 80218aa:	fb06 e303 	mla	r3, r6, r3, lr
 80218ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80218b2:	b29b      	uxth	r3, r3
 80218b4:	ebaa 0303 	sub.w	r3, sl, r3
 80218b8:	f8dc a000 	ldr.w	sl, [ip]
 80218bc:	0c12      	lsrs	r2, r2, #16
 80218be:	fa13 f38a 	uxtah	r3, r3, sl
 80218c2:	fb06 e202 	mla	r2, r6, r2, lr
 80218c6:	9300      	str	r3, [sp, #0]
 80218c8:	9b00      	ldr	r3, [sp, #0]
 80218ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80218ce:	b292      	uxth	r2, r2
 80218d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80218d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80218d8:	f8bd 3000 	ldrh.w	r3, [sp]
 80218dc:	4581      	cmp	r9, r0
 80218de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80218e2:	f84c 3b04 	str.w	r3, [ip], #4
 80218e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80218ea:	d2db      	bcs.n	80218a4 <quorem+0x44>
 80218ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80218f0:	b92b      	cbnz	r3, 80218fe <quorem+0x9e>
 80218f2:	9b01      	ldr	r3, [sp, #4]
 80218f4:	3b04      	subs	r3, #4
 80218f6:	429d      	cmp	r5, r3
 80218f8:	461a      	mov	r2, r3
 80218fa:	d32e      	bcc.n	802195a <quorem+0xfa>
 80218fc:	613c      	str	r4, [r7, #16]
 80218fe:	4638      	mov	r0, r7
 8021900:	f001 fad6 	bl	8022eb0 <__mcmp>
 8021904:	2800      	cmp	r0, #0
 8021906:	db24      	blt.n	8021952 <quorem+0xf2>
 8021908:	3601      	adds	r6, #1
 802190a:	4628      	mov	r0, r5
 802190c:	f04f 0c00 	mov.w	ip, #0
 8021910:	f858 2b04 	ldr.w	r2, [r8], #4
 8021914:	f8d0 e000 	ldr.w	lr, [r0]
 8021918:	b293      	uxth	r3, r2
 802191a:	ebac 0303 	sub.w	r3, ip, r3
 802191e:	0c12      	lsrs	r2, r2, #16
 8021920:	fa13 f38e 	uxtah	r3, r3, lr
 8021924:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8021928:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802192c:	b29b      	uxth	r3, r3
 802192e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021932:	45c1      	cmp	r9, r8
 8021934:	f840 3b04 	str.w	r3, [r0], #4
 8021938:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802193c:	d2e8      	bcs.n	8021910 <quorem+0xb0>
 802193e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021942:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021946:	b922      	cbnz	r2, 8021952 <quorem+0xf2>
 8021948:	3b04      	subs	r3, #4
 802194a:	429d      	cmp	r5, r3
 802194c:	461a      	mov	r2, r3
 802194e:	d30a      	bcc.n	8021966 <quorem+0x106>
 8021950:	613c      	str	r4, [r7, #16]
 8021952:	4630      	mov	r0, r6
 8021954:	b003      	add	sp, #12
 8021956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802195a:	6812      	ldr	r2, [r2, #0]
 802195c:	3b04      	subs	r3, #4
 802195e:	2a00      	cmp	r2, #0
 8021960:	d1cc      	bne.n	80218fc <quorem+0x9c>
 8021962:	3c01      	subs	r4, #1
 8021964:	e7c7      	b.n	80218f6 <quorem+0x96>
 8021966:	6812      	ldr	r2, [r2, #0]
 8021968:	3b04      	subs	r3, #4
 802196a:	2a00      	cmp	r2, #0
 802196c:	d1f0      	bne.n	8021950 <quorem+0xf0>
 802196e:	3c01      	subs	r4, #1
 8021970:	e7eb      	b.n	802194a <quorem+0xea>
 8021972:	2000      	movs	r0, #0
 8021974:	e7ee      	b.n	8021954 <quorem+0xf4>
	...

08021978 <_dtoa_r>:
 8021978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802197c:	ed2d 8b04 	vpush	{d8-d9}
 8021980:	ec57 6b10 	vmov	r6, r7, d0
 8021984:	b093      	sub	sp, #76	; 0x4c
 8021986:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8021988:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802198c:	9106      	str	r1, [sp, #24]
 802198e:	ee10 aa10 	vmov	sl, s0
 8021992:	4604      	mov	r4, r0
 8021994:	9209      	str	r2, [sp, #36]	; 0x24
 8021996:	930c      	str	r3, [sp, #48]	; 0x30
 8021998:	46bb      	mov	fp, r7
 802199a:	b975      	cbnz	r5, 80219ba <_dtoa_r+0x42>
 802199c:	2010      	movs	r0, #16
 802199e:	f000 fffd 	bl	802299c <malloc>
 80219a2:	4602      	mov	r2, r0
 80219a4:	6260      	str	r0, [r4, #36]	; 0x24
 80219a6:	b920      	cbnz	r0, 80219b2 <_dtoa_r+0x3a>
 80219a8:	4ba7      	ldr	r3, [pc, #668]	; (8021c48 <_dtoa_r+0x2d0>)
 80219aa:	21ea      	movs	r1, #234	; 0xea
 80219ac:	48a7      	ldr	r0, [pc, #668]	; (8021c4c <_dtoa_r+0x2d4>)
 80219ae:	f001 fe7f 	bl	80236b0 <__assert_func>
 80219b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80219b6:	6005      	str	r5, [r0, #0]
 80219b8:	60c5      	str	r5, [r0, #12]
 80219ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80219bc:	6819      	ldr	r1, [r3, #0]
 80219be:	b151      	cbz	r1, 80219d6 <_dtoa_r+0x5e>
 80219c0:	685a      	ldr	r2, [r3, #4]
 80219c2:	604a      	str	r2, [r1, #4]
 80219c4:	2301      	movs	r3, #1
 80219c6:	4093      	lsls	r3, r2
 80219c8:	608b      	str	r3, [r1, #8]
 80219ca:	4620      	mov	r0, r4
 80219cc:	f001 f82e 	bl	8022a2c <_Bfree>
 80219d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80219d2:	2200      	movs	r2, #0
 80219d4:	601a      	str	r2, [r3, #0]
 80219d6:	1e3b      	subs	r3, r7, #0
 80219d8:	bfaa      	itet	ge
 80219da:	2300      	movge	r3, #0
 80219dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80219e0:	f8c8 3000 	strge.w	r3, [r8]
 80219e4:	4b9a      	ldr	r3, [pc, #616]	; (8021c50 <_dtoa_r+0x2d8>)
 80219e6:	bfbc      	itt	lt
 80219e8:	2201      	movlt	r2, #1
 80219ea:	f8c8 2000 	strlt.w	r2, [r8]
 80219ee:	ea33 030b 	bics.w	r3, r3, fp
 80219f2:	d11b      	bne.n	8021a2c <_dtoa_r+0xb4>
 80219f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80219f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80219fa:	6013      	str	r3, [r2, #0]
 80219fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8021a00:	4333      	orrs	r3, r6
 8021a02:	f000 8592 	beq.w	802252a <_dtoa_r+0xbb2>
 8021a06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021a08:	b963      	cbnz	r3, 8021a24 <_dtoa_r+0xac>
 8021a0a:	4b92      	ldr	r3, [pc, #584]	; (8021c54 <_dtoa_r+0x2dc>)
 8021a0c:	e022      	b.n	8021a54 <_dtoa_r+0xdc>
 8021a0e:	4b92      	ldr	r3, [pc, #584]	; (8021c58 <_dtoa_r+0x2e0>)
 8021a10:	9301      	str	r3, [sp, #4]
 8021a12:	3308      	adds	r3, #8
 8021a14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021a16:	6013      	str	r3, [r2, #0]
 8021a18:	9801      	ldr	r0, [sp, #4]
 8021a1a:	b013      	add	sp, #76	; 0x4c
 8021a1c:	ecbd 8b04 	vpop	{d8-d9}
 8021a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a24:	4b8b      	ldr	r3, [pc, #556]	; (8021c54 <_dtoa_r+0x2dc>)
 8021a26:	9301      	str	r3, [sp, #4]
 8021a28:	3303      	adds	r3, #3
 8021a2a:	e7f3      	b.n	8021a14 <_dtoa_r+0x9c>
 8021a2c:	2200      	movs	r2, #0
 8021a2e:	2300      	movs	r3, #0
 8021a30:	4650      	mov	r0, sl
 8021a32:	4659      	mov	r1, fp
 8021a34:	f7df f870 	bl	8000b18 <__aeabi_dcmpeq>
 8021a38:	ec4b ab19 	vmov	d9, sl, fp
 8021a3c:	4680      	mov	r8, r0
 8021a3e:	b158      	cbz	r0, 8021a58 <_dtoa_r+0xe0>
 8021a40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021a42:	2301      	movs	r3, #1
 8021a44:	6013      	str	r3, [r2, #0]
 8021a46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	f000 856b 	beq.w	8022524 <_dtoa_r+0xbac>
 8021a4e:	4883      	ldr	r0, [pc, #524]	; (8021c5c <_dtoa_r+0x2e4>)
 8021a50:	6018      	str	r0, [r3, #0]
 8021a52:	1e43      	subs	r3, r0, #1
 8021a54:	9301      	str	r3, [sp, #4]
 8021a56:	e7df      	b.n	8021a18 <_dtoa_r+0xa0>
 8021a58:	ec4b ab10 	vmov	d0, sl, fp
 8021a5c:	aa10      	add	r2, sp, #64	; 0x40
 8021a5e:	a911      	add	r1, sp, #68	; 0x44
 8021a60:	4620      	mov	r0, r4
 8021a62:	f001 facb 	bl	8022ffc <__d2b>
 8021a66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8021a6a:	ee08 0a10 	vmov	s16, r0
 8021a6e:	2d00      	cmp	r5, #0
 8021a70:	f000 8084 	beq.w	8021b7c <_dtoa_r+0x204>
 8021a74:	ee19 3a90 	vmov	r3, s19
 8021a78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021a7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8021a80:	4656      	mov	r6, sl
 8021a82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8021a86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8021a8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8021a8e:	4b74      	ldr	r3, [pc, #464]	; (8021c60 <_dtoa_r+0x2e8>)
 8021a90:	2200      	movs	r2, #0
 8021a92:	4630      	mov	r0, r6
 8021a94:	4639      	mov	r1, r7
 8021a96:	f7de fc1f 	bl	80002d8 <__aeabi_dsub>
 8021a9a:	a365      	add	r3, pc, #404	; (adr r3, 8021c30 <_dtoa_r+0x2b8>)
 8021a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021aa0:	f7de fdd2 	bl	8000648 <__aeabi_dmul>
 8021aa4:	a364      	add	r3, pc, #400	; (adr r3, 8021c38 <_dtoa_r+0x2c0>)
 8021aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021aaa:	f7de fc17 	bl	80002dc <__adddf3>
 8021aae:	4606      	mov	r6, r0
 8021ab0:	4628      	mov	r0, r5
 8021ab2:	460f      	mov	r7, r1
 8021ab4:	f7de fd5e 	bl	8000574 <__aeabi_i2d>
 8021ab8:	a361      	add	r3, pc, #388	; (adr r3, 8021c40 <_dtoa_r+0x2c8>)
 8021aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021abe:	f7de fdc3 	bl	8000648 <__aeabi_dmul>
 8021ac2:	4602      	mov	r2, r0
 8021ac4:	460b      	mov	r3, r1
 8021ac6:	4630      	mov	r0, r6
 8021ac8:	4639      	mov	r1, r7
 8021aca:	f7de fc07 	bl	80002dc <__adddf3>
 8021ace:	4606      	mov	r6, r0
 8021ad0:	460f      	mov	r7, r1
 8021ad2:	f7df f869 	bl	8000ba8 <__aeabi_d2iz>
 8021ad6:	2200      	movs	r2, #0
 8021ad8:	9000      	str	r0, [sp, #0]
 8021ada:	2300      	movs	r3, #0
 8021adc:	4630      	mov	r0, r6
 8021ade:	4639      	mov	r1, r7
 8021ae0:	f7df f824 	bl	8000b2c <__aeabi_dcmplt>
 8021ae4:	b150      	cbz	r0, 8021afc <_dtoa_r+0x184>
 8021ae6:	9800      	ldr	r0, [sp, #0]
 8021ae8:	f7de fd44 	bl	8000574 <__aeabi_i2d>
 8021aec:	4632      	mov	r2, r6
 8021aee:	463b      	mov	r3, r7
 8021af0:	f7df f812 	bl	8000b18 <__aeabi_dcmpeq>
 8021af4:	b910      	cbnz	r0, 8021afc <_dtoa_r+0x184>
 8021af6:	9b00      	ldr	r3, [sp, #0]
 8021af8:	3b01      	subs	r3, #1
 8021afa:	9300      	str	r3, [sp, #0]
 8021afc:	9b00      	ldr	r3, [sp, #0]
 8021afe:	2b16      	cmp	r3, #22
 8021b00:	d85a      	bhi.n	8021bb8 <_dtoa_r+0x240>
 8021b02:	9a00      	ldr	r2, [sp, #0]
 8021b04:	4b57      	ldr	r3, [pc, #348]	; (8021c64 <_dtoa_r+0x2ec>)
 8021b06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b0e:	ec51 0b19 	vmov	r0, r1, d9
 8021b12:	f7df f80b 	bl	8000b2c <__aeabi_dcmplt>
 8021b16:	2800      	cmp	r0, #0
 8021b18:	d050      	beq.n	8021bbc <_dtoa_r+0x244>
 8021b1a:	9b00      	ldr	r3, [sp, #0]
 8021b1c:	3b01      	subs	r3, #1
 8021b1e:	9300      	str	r3, [sp, #0]
 8021b20:	2300      	movs	r3, #0
 8021b22:	930b      	str	r3, [sp, #44]	; 0x2c
 8021b24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021b26:	1b5d      	subs	r5, r3, r5
 8021b28:	1e6b      	subs	r3, r5, #1
 8021b2a:	9305      	str	r3, [sp, #20]
 8021b2c:	bf45      	ittet	mi
 8021b2e:	f1c5 0301 	rsbmi	r3, r5, #1
 8021b32:	9304      	strmi	r3, [sp, #16]
 8021b34:	2300      	movpl	r3, #0
 8021b36:	2300      	movmi	r3, #0
 8021b38:	bf4c      	ite	mi
 8021b3a:	9305      	strmi	r3, [sp, #20]
 8021b3c:	9304      	strpl	r3, [sp, #16]
 8021b3e:	9b00      	ldr	r3, [sp, #0]
 8021b40:	2b00      	cmp	r3, #0
 8021b42:	db3d      	blt.n	8021bc0 <_dtoa_r+0x248>
 8021b44:	9b05      	ldr	r3, [sp, #20]
 8021b46:	9a00      	ldr	r2, [sp, #0]
 8021b48:	920a      	str	r2, [sp, #40]	; 0x28
 8021b4a:	4413      	add	r3, r2
 8021b4c:	9305      	str	r3, [sp, #20]
 8021b4e:	2300      	movs	r3, #0
 8021b50:	9307      	str	r3, [sp, #28]
 8021b52:	9b06      	ldr	r3, [sp, #24]
 8021b54:	2b09      	cmp	r3, #9
 8021b56:	f200 8089 	bhi.w	8021c6c <_dtoa_r+0x2f4>
 8021b5a:	2b05      	cmp	r3, #5
 8021b5c:	bfc4      	itt	gt
 8021b5e:	3b04      	subgt	r3, #4
 8021b60:	9306      	strgt	r3, [sp, #24]
 8021b62:	9b06      	ldr	r3, [sp, #24]
 8021b64:	f1a3 0302 	sub.w	r3, r3, #2
 8021b68:	bfcc      	ite	gt
 8021b6a:	2500      	movgt	r5, #0
 8021b6c:	2501      	movle	r5, #1
 8021b6e:	2b03      	cmp	r3, #3
 8021b70:	f200 8087 	bhi.w	8021c82 <_dtoa_r+0x30a>
 8021b74:	e8df f003 	tbb	[pc, r3]
 8021b78:	59383a2d 	.word	0x59383a2d
 8021b7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8021b80:	441d      	add	r5, r3
 8021b82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8021b86:	2b20      	cmp	r3, #32
 8021b88:	bfc1      	itttt	gt
 8021b8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8021b8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8021b92:	fa0b f303 	lslgt.w	r3, fp, r3
 8021b96:	fa26 f000 	lsrgt.w	r0, r6, r0
 8021b9a:	bfda      	itte	le
 8021b9c:	f1c3 0320 	rsble	r3, r3, #32
 8021ba0:	fa06 f003 	lslle.w	r0, r6, r3
 8021ba4:	4318      	orrgt	r0, r3
 8021ba6:	f7de fcd5 	bl	8000554 <__aeabi_ui2d>
 8021baa:	2301      	movs	r3, #1
 8021bac:	4606      	mov	r6, r0
 8021bae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8021bb2:	3d01      	subs	r5, #1
 8021bb4:	930e      	str	r3, [sp, #56]	; 0x38
 8021bb6:	e76a      	b.n	8021a8e <_dtoa_r+0x116>
 8021bb8:	2301      	movs	r3, #1
 8021bba:	e7b2      	b.n	8021b22 <_dtoa_r+0x1aa>
 8021bbc:	900b      	str	r0, [sp, #44]	; 0x2c
 8021bbe:	e7b1      	b.n	8021b24 <_dtoa_r+0x1ac>
 8021bc0:	9b04      	ldr	r3, [sp, #16]
 8021bc2:	9a00      	ldr	r2, [sp, #0]
 8021bc4:	1a9b      	subs	r3, r3, r2
 8021bc6:	9304      	str	r3, [sp, #16]
 8021bc8:	4253      	negs	r3, r2
 8021bca:	9307      	str	r3, [sp, #28]
 8021bcc:	2300      	movs	r3, #0
 8021bce:	930a      	str	r3, [sp, #40]	; 0x28
 8021bd0:	e7bf      	b.n	8021b52 <_dtoa_r+0x1da>
 8021bd2:	2300      	movs	r3, #0
 8021bd4:	9308      	str	r3, [sp, #32]
 8021bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021bd8:	2b00      	cmp	r3, #0
 8021bda:	dc55      	bgt.n	8021c88 <_dtoa_r+0x310>
 8021bdc:	2301      	movs	r3, #1
 8021bde:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8021be2:	461a      	mov	r2, r3
 8021be4:	9209      	str	r2, [sp, #36]	; 0x24
 8021be6:	e00c      	b.n	8021c02 <_dtoa_r+0x28a>
 8021be8:	2301      	movs	r3, #1
 8021bea:	e7f3      	b.n	8021bd4 <_dtoa_r+0x25c>
 8021bec:	2300      	movs	r3, #0
 8021bee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021bf0:	9308      	str	r3, [sp, #32]
 8021bf2:	9b00      	ldr	r3, [sp, #0]
 8021bf4:	4413      	add	r3, r2
 8021bf6:	9302      	str	r3, [sp, #8]
 8021bf8:	3301      	adds	r3, #1
 8021bfa:	2b01      	cmp	r3, #1
 8021bfc:	9303      	str	r3, [sp, #12]
 8021bfe:	bfb8      	it	lt
 8021c00:	2301      	movlt	r3, #1
 8021c02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8021c04:	2200      	movs	r2, #0
 8021c06:	6042      	str	r2, [r0, #4]
 8021c08:	2204      	movs	r2, #4
 8021c0a:	f102 0614 	add.w	r6, r2, #20
 8021c0e:	429e      	cmp	r6, r3
 8021c10:	6841      	ldr	r1, [r0, #4]
 8021c12:	d93d      	bls.n	8021c90 <_dtoa_r+0x318>
 8021c14:	4620      	mov	r0, r4
 8021c16:	f000 fec9 	bl	80229ac <_Balloc>
 8021c1a:	9001      	str	r0, [sp, #4]
 8021c1c:	2800      	cmp	r0, #0
 8021c1e:	d13b      	bne.n	8021c98 <_dtoa_r+0x320>
 8021c20:	4b11      	ldr	r3, [pc, #68]	; (8021c68 <_dtoa_r+0x2f0>)
 8021c22:	4602      	mov	r2, r0
 8021c24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8021c28:	e6c0      	b.n	80219ac <_dtoa_r+0x34>
 8021c2a:	2301      	movs	r3, #1
 8021c2c:	e7df      	b.n	8021bee <_dtoa_r+0x276>
 8021c2e:	bf00      	nop
 8021c30:	636f4361 	.word	0x636f4361
 8021c34:	3fd287a7 	.word	0x3fd287a7
 8021c38:	8b60c8b3 	.word	0x8b60c8b3
 8021c3c:	3fc68a28 	.word	0x3fc68a28
 8021c40:	509f79fb 	.word	0x509f79fb
 8021c44:	3fd34413 	.word	0x3fd34413
 8021c48:	080252a9 	.word	0x080252a9
 8021c4c:	080252c0 	.word	0x080252c0
 8021c50:	7ff00000 	.word	0x7ff00000
 8021c54:	080252a5 	.word	0x080252a5
 8021c58:	0802529c 	.word	0x0802529c
 8021c5c:	08025279 	.word	0x08025279
 8021c60:	3ff80000 	.word	0x3ff80000
 8021c64:	08025410 	.word	0x08025410
 8021c68:	0802531b 	.word	0x0802531b
 8021c6c:	2501      	movs	r5, #1
 8021c6e:	2300      	movs	r3, #0
 8021c70:	9306      	str	r3, [sp, #24]
 8021c72:	9508      	str	r5, [sp, #32]
 8021c74:	f04f 33ff 	mov.w	r3, #4294967295
 8021c78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8021c7c:	2200      	movs	r2, #0
 8021c7e:	2312      	movs	r3, #18
 8021c80:	e7b0      	b.n	8021be4 <_dtoa_r+0x26c>
 8021c82:	2301      	movs	r3, #1
 8021c84:	9308      	str	r3, [sp, #32]
 8021c86:	e7f5      	b.n	8021c74 <_dtoa_r+0x2fc>
 8021c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8021c8e:	e7b8      	b.n	8021c02 <_dtoa_r+0x28a>
 8021c90:	3101      	adds	r1, #1
 8021c92:	6041      	str	r1, [r0, #4]
 8021c94:	0052      	lsls	r2, r2, #1
 8021c96:	e7b8      	b.n	8021c0a <_dtoa_r+0x292>
 8021c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021c9a:	9a01      	ldr	r2, [sp, #4]
 8021c9c:	601a      	str	r2, [r3, #0]
 8021c9e:	9b03      	ldr	r3, [sp, #12]
 8021ca0:	2b0e      	cmp	r3, #14
 8021ca2:	f200 809d 	bhi.w	8021de0 <_dtoa_r+0x468>
 8021ca6:	2d00      	cmp	r5, #0
 8021ca8:	f000 809a 	beq.w	8021de0 <_dtoa_r+0x468>
 8021cac:	9b00      	ldr	r3, [sp, #0]
 8021cae:	2b00      	cmp	r3, #0
 8021cb0:	dd32      	ble.n	8021d18 <_dtoa_r+0x3a0>
 8021cb2:	4ab7      	ldr	r2, [pc, #732]	; (8021f90 <_dtoa_r+0x618>)
 8021cb4:	f003 030f 	and.w	r3, r3, #15
 8021cb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8021cbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021cc0:	9b00      	ldr	r3, [sp, #0]
 8021cc2:	05d8      	lsls	r0, r3, #23
 8021cc4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8021cc8:	d516      	bpl.n	8021cf8 <_dtoa_r+0x380>
 8021cca:	4bb2      	ldr	r3, [pc, #712]	; (8021f94 <_dtoa_r+0x61c>)
 8021ccc:	ec51 0b19 	vmov	r0, r1, d9
 8021cd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8021cd4:	f7de fde2 	bl	800089c <__aeabi_ddiv>
 8021cd8:	f007 070f 	and.w	r7, r7, #15
 8021cdc:	4682      	mov	sl, r0
 8021cde:	468b      	mov	fp, r1
 8021ce0:	2503      	movs	r5, #3
 8021ce2:	4eac      	ldr	r6, [pc, #688]	; (8021f94 <_dtoa_r+0x61c>)
 8021ce4:	b957      	cbnz	r7, 8021cfc <_dtoa_r+0x384>
 8021ce6:	4642      	mov	r2, r8
 8021ce8:	464b      	mov	r3, r9
 8021cea:	4650      	mov	r0, sl
 8021cec:	4659      	mov	r1, fp
 8021cee:	f7de fdd5 	bl	800089c <__aeabi_ddiv>
 8021cf2:	4682      	mov	sl, r0
 8021cf4:	468b      	mov	fp, r1
 8021cf6:	e028      	b.n	8021d4a <_dtoa_r+0x3d2>
 8021cf8:	2502      	movs	r5, #2
 8021cfa:	e7f2      	b.n	8021ce2 <_dtoa_r+0x36a>
 8021cfc:	07f9      	lsls	r1, r7, #31
 8021cfe:	d508      	bpl.n	8021d12 <_dtoa_r+0x39a>
 8021d00:	4640      	mov	r0, r8
 8021d02:	4649      	mov	r1, r9
 8021d04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8021d08:	f7de fc9e 	bl	8000648 <__aeabi_dmul>
 8021d0c:	3501      	adds	r5, #1
 8021d0e:	4680      	mov	r8, r0
 8021d10:	4689      	mov	r9, r1
 8021d12:	107f      	asrs	r7, r7, #1
 8021d14:	3608      	adds	r6, #8
 8021d16:	e7e5      	b.n	8021ce4 <_dtoa_r+0x36c>
 8021d18:	f000 809b 	beq.w	8021e52 <_dtoa_r+0x4da>
 8021d1c:	9b00      	ldr	r3, [sp, #0]
 8021d1e:	4f9d      	ldr	r7, [pc, #628]	; (8021f94 <_dtoa_r+0x61c>)
 8021d20:	425e      	negs	r6, r3
 8021d22:	4b9b      	ldr	r3, [pc, #620]	; (8021f90 <_dtoa_r+0x618>)
 8021d24:	f006 020f 	and.w	r2, r6, #15
 8021d28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d30:	ec51 0b19 	vmov	r0, r1, d9
 8021d34:	f7de fc88 	bl	8000648 <__aeabi_dmul>
 8021d38:	1136      	asrs	r6, r6, #4
 8021d3a:	4682      	mov	sl, r0
 8021d3c:	468b      	mov	fp, r1
 8021d3e:	2300      	movs	r3, #0
 8021d40:	2502      	movs	r5, #2
 8021d42:	2e00      	cmp	r6, #0
 8021d44:	d17a      	bne.n	8021e3c <_dtoa_r+0x4c4>
 8021d46:	2b00      	cmp	r3, #0
 8021d48:	d1d3      	bne.n	8021cf2 <_dtoa_r+0x37a>
 8021d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021d4c:	2b00      	cmp	r3, #0
 8021d4e:	f000 8082 	beq.w	8021e56 <_dtoa_r+0x4de>
 8021d52:	4b91      	ldr	r3, [pc, #580]	; (8021f98 <_dtoa_r+0x620>)
 8021d54:	2200      	movs	r2, #0
 8021d56:	4650      	mov	r0, sl
 8021d58:	4659      	mov	r1, fp
 8021d5a:	f7de fee7 	bl	8000b2c <__aeabi_dcmplt>
 8021d5e:	2800      	cmp	r0, #0
 8021d60:	d079      	beq.n	8021e56 <_dtoa_r+0x4de>
 8021d62:	9b03      	ldr	r3, [sp, #12]
 8021d64:	2b00      	cmp	r3, #0
 8021d66:	d076      	beq.n	8021e56 <_dtoa_r+0x4de>
 8021d68:	9b02      	ldr	r3, [sp, #8]
 8021d6a:	2b00      	cmp	r3, #0
 8021d6c:	dd36      	ble.n	8021ddc <_dtoa_r+0x464>
 8021d6e:	9b00      	ldr	r3, [sp, #0]
 8021d70:	4650      	mov	r0, sl
 8021d72:	4659      	mov	r1, fp
 8021d74:	1e5f      	subs	r7, r3, #1
 8021d76:	2200      	movs	r2, #0
 8021d78:	4b88      	ldr	r3, [pc, #544]	; (8021f9c <_dtoa_r+0x624>)
 8021d7a:	f7de fc65 	bl	8000648 <__aeabi_dmul>
 8021d7e:	9e02      	ldr	r6, [sp, #8]
 8021d80:	4682      	mov	sl, r0
 8021d82:	468b      	mov	fp, r1
 8021d84:	3501      	adds	r5, #1
 8021d86:	4628      	mov	r0, r5
 8021d88:	f7de fbf4 	bl	8000574 <__aeabi_i2d>
 8021d8c:	4652      	mov	r2, sl
 8021d8e:	465b      	mov	r3, fp
 8021d90:	f7de fc5a 	bl	8000648 <__aeabi_dmul>
 8021d94:	4b82      	ldr	r3, [pc, #520]	; (8021fa0 <_dtoa_r+0x628>)
 8021d96:	2200      	movs	r2, #0
 8021d98:	f7de faa0 	bl	80002dc <__adddf3>
 8021d9c:	46d0      	mov	r8, sl
 8021d9e:	46d9      	mov	r9, fp
 8021da0:	4682      	mov	sl, r0
 8021da2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8021da6:	2e00      	cmp	r6, #0
 8021da8:	d158      	bne.n	8021e5c <_dtoa_r+0x4e4>
 8021daa:	4b7e      	ldr	r3, [pc, #504]	; (8021fa4 <_dtoa_r+0x62c>)
 8021dac:	2200      	movs	r2, #0
 8021dae:	4640      	mov	r0, r8
 8021db0:	4649      	mov	r1, r9
 8021db2:	f7de fa91 	bl	80002d8 <__aeabi_dsub>
 8021db6:	4652      	mov	r2, sl
 8021db8:	465b      	mov	r3, fp
 8021dba:	4680      	mov	r8, r0
 8021dbc:	4689      	mov	r9, r1
 8021dbe:	f7de fed3 	bl	8000b68 <__aeabi_dcmpgt>
 8021dc2:	2800      	cmp	r0, #0
 8021dc4:	f040 8295 	bne.w	80222f2 <_dtoa_r+0x97a>
 8021dc8:	4652      	mov	r2, sl
 8021dca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8021dce:	4640      	mov	r0, r8
 8021dd0:	4649      	mov	r1, r9
 8021dd2:	f7de feab 	bl	8000b2c <__aeabi_dcmplt>
 8021dd6:	2800      	cmp	r0, #0
 8021dd8:	f040 8289 	bne.w	80222ee <_dtoa_r+0x976>
 8021ddc:	ec5b ab19 	vmov	sl, fp, d9
 8021de0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021de2:	2b00      	cmp	r3, #0
 8021de4:	f2c0 8148 	blt.w	8022078 <_dtoa_r+0x700>
 8021de8:	9a00      	ldr	r2, [sp, #0]
 8021dea:	2a0e      	cmp	r2, #14
 8021dec:	f300 8144 	bgt.w	8022078 <_dtoa_r+0x700>
 8021df0:	4b67      	ldr	r3, [pc, #412]	; (8021f90 <_dtoa_r+0x618>)
 8021df2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021df6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021dfc:	2b00      	cmp	r3, #0
 8021dfe:	f280 80d5 	bge.w	8021fac <_dtoa_r+0x634>
 8021e02:	9b03      	ldr	r3, [sp, #12]
 8021e04:	2b00      	cmp	r3, #0
 8021e06:	f300 80d1 	bgt.w	8021fac <_dtoa_r+0x634>
 8021e0a:	f040 826f 	bne.w	80222ec <_dtoa_r+0x974>
 8021e0e:	4b65      	ldr	r3, [pc, #404]	; (8021fa4 <_dtoa_r+0x62c>)
 8021e10:	2200      	movs	r2, #0
 8021e12:	4640      	mov	r0, r8
 8021e14:	4649      	mov	r1, r9
 8021e16:	f7de fc17 	bl	8000648 <__aeabi_dmul>
 8021e1a:	4652      	mov	r2, sl
 8021e1c:	465b      	mov	r3, fp
 8021e1e:	f7de fe99 	bl	8000b54 <__aeabi_dcmpge>
 8021e22:	9e03      	ldr	r6, [sp, #12]
 8021e24:	4637      	mov	r7, r6
 8021e26:	2800      	cmp	r0, #0
 8021e28:	f040 8245 	bne.w	80222b6 <_dtoa_r+0x93e>
 8021e2c:	9d01      	ldr	r5, [sp, #4]
 8021e2e:	2331      	movs	r3, #49	; 0x31
 8021e30:	f805 3b01 	strb.w	r3, [r5], #1
 8021e34:	9b00      	ldr	r3, [sp, #0]
 8021e36:	3301      	adds	r3, #1
 8021e38:	9300      	str	r3, [sp, #0]
 8021e3a:	e240      	b.n	80222be <_dtoa_r+0x946>
 8021e3c:	07f2      	lsls	r2, r6, #31
 8021e3e:	d505      	bpl.n	8021e4c <_dtoa_r+0x4d4>
 8021e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021e44:	f7de fc00 	bl	8000648 <__aeabi_dmul>
 8021e48:	3501      	adds	r5, #1
 8021e4a:	2301      	movs	r3, #1
 8021e4c:	1076      	asrs	r6, r6, #1
 8021e4e:	3708      	adds	r7, #8
 8021e50:	e777      	b.n	8021d42 <_dtoa_r+0x3ca>
 8021e52:	2502      	movs	r5, #2
 8021e54:	e779      	b.n	8021d4a <_dtoa_r+0x3d2>
 8021e56:	9f00      	ldr	r7, [sp, #0]
 8021e58:	9e03      	ldr	r6, [sp, #12]
 8021e5a:	e794      	b.n	8021d86 <_dtoa_r+0x40e>
 8021e5c:	9901      	ldr	r1, [sp, #4]
 8021e5e:	4b4c      	ldr	r3, [pc, #304]	; (8021f90 <_dtoa_r+0x618>)
 8021e60:	4431      	add	r1, r6
 8021e62:	910d      	str	r1, [sp, #52]	; 0x34
 8021e64:	9908      	ldr	r1, [sp, #32]
 8021e66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8021e6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8021e6e:	2900      	cmp	r1, #0
 8021e70:	d043      	beq.n	8021efa <_dtoa_r+0x582>
 8021e72:	494d      	ldr	r1, [pc, #308]	; (8021fa8 <_dtoa_r+0x630>)
 8021e74:	2000      	movs	r0, #0
 8021e76:	f7de fd11 	bl	800089c <__aeabi_ddiv>
 8021e7a:	4652      	mov	r2, sl
 8021e7c:	465b      	mov	r3, fp
 8021e7e:	f7de fa2b 	bl	80002d8 <__aeabi_dsub>
 8021e82:	9d01      	ldr	r5, [sp, #4]
 8021e84:	4682      	mov	sl, r0
 8021e86:	468b      	mov	fp, r1
 8021e88:	4649      	mov	r1, r9
 8021e8a:	4640      	mov	r0, r8
 8021e8c:	f7de fe8c 	bl	8000ba8 <__aeabi_d2iz>
 8021e90:	4606      	mov	r6, r0
 8021e92:	f7de fb6f 	bl	8000574 <__aeabi_i2d>
 8021e96:	4602      	mov	r2, r0
 8021e98:	460b      	mov	r3, r1
 8021e9a:	4640      	mov	r0, r8
 8021e9c:	4649      	mov	r1, r9
 8021e9e:	f7de fa1b 	bl	80002d8 <__aeabi_dsub>
 8021ea2:	3630      	adds	r6, #48	; 0x30
 8021ea4:	f805 6b01 	strb.w	r6, [r5], #1
 8021ea8:	4652      	mov	r2, sl
 8021eaa:	465b      	mov	r3, fp
 8021eac:	4680      	mov	r8, r0
 8021eae:	4689      	mov	r9, r1
 8021eb0:	f7de fe3c 	bl	8000b2c <__aeabi_dcmplt>
 8021eb4:	2800      	cmp	r0, #0
 8021eb6:	d163      	bne.n	8021f80 <_dtoa_r+0x608>
 8021eb8:	4642      	mov	r2, r8
 8021eba:	464b      	mov	r3, r9
 8021ebc:	4936      	ldr	r1, [pc, #216]	; (8021f98 <_dtoa_r+0x620>)
 8021ebe:	2000      	movs	r0, #0
 8021ec0:	f7de fa0a 	bl	80002d8 <__aeabi_dsub>
 8021ec4:	4652      	mov	r2, sl
 8021ec6:	465b      	mov	r3, fp
 8021ec8:	f7de fe30 	bl	8000b2c <__aeabi_dcmplt>
 8021ecc:	2800      	cmp	r0, #0
 8021ece:	f040 80b5 	bne.w	802203c <_dtoa_r+0x6c4>
 8021ed2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021ed4:	429d      	cmp	r5, r3
 8021ed6:	d081      	beq.n	8021ddc <_dtoa_r+0x464>
 8021ed8:	4b30      	ldr	r3, [pc, #192]	; (8021f9c <_dtoa_r+0x624>)
 8021eda:	2200      	movs	r2, #0
 8021edc:	4650      	mov	r0, sl
 8021ede:	4659      	mov	r1, fp
 8021ee0:	f7de fbb2 	bl	8000648 <__aeabi_dmul>
 8021ee4:	4b2d      	ldr	r3, [pc, #180]	; (8021f9c <_dtoa_r+0x624>)
 8021ee6:	4682      	mov	sl, r0
 8021ee8:	468b      	mov	fp, r1
 8021eea:	4640      	mov	r0, r8
 8021eec:	4649      	mov	r1, r9
 8021eee:	2200      	movs	r2, #0
 8021ef0:	f7de fbaa 	bl	8000648 <__aeabi_dmul>
 8021ef4:	4680      	mov	r8, r0
 8021ef6:	4689      	mov	r9, r1
 8021ef8:	e7c6      	b.n	8021e88 <_dtoa_r+0x510>
 8021efa:	4650      	mov	r0, sl
 8021efc:	4659      	mov	r1, fp
 8021efe:	f7de fba3 	bl	8000648 <__aeabi_dmul>
 8021f02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021f04:	9d01      	ldr	r5, [sp, #4]
 8021f06:	930f      	str	r3, [sp, #60]	; 0x3c
 8021f08:	4682      	mov	sl, r0
 8021f0a:	468b      	mov	fp, r1
 8021f0c:	4649      	mov	r1, r9
 8021f0e:	4640      	mov	r0, r8
 8021f10:	f7de fe4a 	bl	8000ba8 <__aeabi_d2iz>
 8021f14:	4606      	mov	r6, r0
 8021f16:	f7de fb2d 	bl	8000574 <__aeabi_i2d>
 8021f1a:	3630      	adds	r6, #48	; 0x30
 8021f1c:	4602      	mov	r2, r0
 8021f1e:	460b      	mov	r3, r1
 8021f20:	4640      	mov	r0, r8
 8021f22:	4649      	mov	r1, r9
 8021f24:	f7de f9d8 	bl	80002d8 <__aeabi_dsub>
 8021f28:	f805 6b01 	strb.w	r6, [r5], #1
 8021f2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021f2e:	429d      	cmp	r5, r3
 8021f30:	4680      	mov	r8, r0
 8021f32:	4689      	mov	r9, r1
 8021f34:	f04f 0200 	mov.w	r2, #0
 8021f38:	d124      	bne.n	8021f84 <_dtoa_r+0x60c>
 8021f3a:	4b1b      	ldr	r3, [pc, #108]	; (8021fa8 <_dtoa_r+0x630>)
 8021f3c:	4650      	mov	r0, sl
 8021f3e:	4659      	mov	r1, fp
 8021f40:	f7de f9cc 	bl	80002dc <__adddf3>
 8021f44:	4602      	mov	r2, r0
 8021f46:	460b      	mov	r3, r1
 8021f48:	4640      	mov	r0, r8
 8021f4a:	4649      	mov	r1, r9
 8021f4c:	f7de fe0c 	bl	8000b68 <__aeabi_dcmpgt>
 8021f50:	2800      	cmp	r0, #0
 8021f52:	d173      	bne.n	802203c <_dtoa_r+0x6c4>
 8021f54:	4652      	mov	r2, sl
 8021f56:	465b      	mov	r3, fp
 8021f58:	4913      	ldr	r1, [pc, #76]	; (8021fa8 <_dtoa_r+0x630>)
 8021f5a:	2000      	movs	r0, #0
 8021f5c:	f7de f9bc 	bl	80002d8 <__aeabi_dsub>
 8021f60:	4602      	mov	r2, r0
 8021f62:	460b      	mov	r3, r1
 8021f64:	4640      	mov	r0, r8
 8021f66:	4649      	mov	r1, r9
 8021f68:	f7de fde0 	bl	8000b2c <__aeabi_dcmplt>
 8021f6c:	2800      	cmp	r0, #0
 8021f6e:	f43f af35 	beq.w	8021ddc <_dtoa_r+0x464>
 8021f72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021f74:	1e6b      	subs	r3, r5, #1
 8021f76:	930f      	str	r3, [sp, #60]	; 0x3c
 8021f78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021f7c:	2b30      	cmp	r3, #48	; 0x30
 8021f7e:	d0f8      	beq.n	8021f72 <_dtoa_r+0x5fa>
 8021f80:	9700      	str	r7, [sp, #0]
 8021f82:	e049      	b.n	8022018 <_dtoa_r+0x6a0>
 8021f84:	4b05      	ldr	r3, [pc, #20]	; (8021f9c <_dtoa_r+0x624>)
 8021f86:	f7de fb5f 	bl	8000648 <__aeabi_dmul>
 8021f8a:	4680      	mov	r8, r0
 8021f8c:	4689      	mov	r9, r1
 8021f8e:	e7bd      	b.n	8021f0c <_dtoa_r+0x594>
 8021f90:	08025410 	.word	0x08025410
 8021f94:	080253e8 	.word	0x080253e8
 8021f98:	3ff00000 	.word	0x3ff00000
 8021f9c:	40240000 	.word	0x40240000
 8021fa0:	401c0000 	.word	0x401c0000
 8021fa4:	40140000 	.word	0x40140000
 8021fa8:	3fe00000 	.word	0x3fe00000
 8021fac:	9d01      	ldr	r5, [sp, #4]
 8021fae:	4656      	mov	r6, sl
 8021fb0:	465f      	mov	r7, fp
 8021fb2:	4642      	mov	r2, r8
 8021fb4:	464b      	mov	r3, r9
 8021fb6:	4630      	mov	r0, r6
 8021fb8:	4639      	mov	r1, r7
 8021fba:	f7de fc6f 	bl	800089c <__aeabi_ddiv>
 8021fbe:	f7de fdf3 	bl	8000ba8 <__aeabi_d2iz>
 8021fc2:	4682      	mov	sl, r0
 8021fc4:	f7de fad6 	bl	8000574 <__aeabi_i2d>
 8021fc8:	4642      	mov	r2, r8
 8021fca:	464b      	mov	r3, r9
 8021fcc:	f7de fb3c 	bl	8000648 <__aeabi_dmul>
 8021fd0:	4602      	mov	r2, r0
 8021fd2:	460b      	mov	r3, r1
 8021fd4:	4630      	mov	r0, r6
 8021fd6:	4639      	mov	r1, r7
 8021fd8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8021fdc:	f7de f97c 	bl	80002d8 <__aeabi_dsub>
 8021fe0:	f805 6b01 	strb.w	r6, [r5], #1
 8021fe4:	9e01      	ldr	r6, [sp, #4]
 8021fe6:	9f03      	ldr	r7, [sp, #12]
 8021fe8:	1bae      	subs	r6, r5, r6
 8021fea:	42b7      	cmp	r7, r6
 8021fec:	4602      	mov	r2, r0
 8021fee:	460b      	mov	r3, r1
 8021ff0:	d135      	bne.n	802205e <_dtoa_r+0x6e6>
 8021ff2:	f7de f973 	bl	80002dc <__adddf3>
 8021ff6:	4642      	mov	r2, r8
 8021ff8:	464b      	mov	r3, r9
 8021ffa:	4606      	mov	r6, r0
 8021ffc:	460f      	mov	r7, r1
 8021ffe:	f7de fdb3 	bl	8000b68 <__aeabi_dcmpgt>
 8022002:	b9d0      	cbnz	r0, 802203a <_dtoa_r+0x6c2>
 8022004:	4642      	mov	r2, r8
 8022006:	464b      	mov	r3, r9
 8022008:	4630      	mov	r0, r6
 802200a:	4639      	mov	r1, r7
 802200c:	f7de fd84 	bl	8000b18 <__aeabi_dcmpeq>
 8022010:	b110      	cbz	r0, 8022018 <_dtoa_r+0x6a0>
 8022012:	f01a 0f01 	tst.w	sl, #1
 8022016:	d110      	bne.n	802203a <_dtoa_r+0x6c2>
 8022018:	4620      	mov	r0, r4
 802201a:	ee18 1a10 	vmov	r1, s16
 802201e:	f000 fd05 	bl	8022a2c <_Bfree>
 8022022:	2300      	movs	r3, #0
 8022024:	9800      	ldr	r0, [sp, #0]
 8022026:	702b      	strb	r3, [r5, #0]
 8022028:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802202a:	3001      	adds	r0, #1
 802202c:	6018      	str	r0, [r3, #0]
 802202e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022030:	2b00      	cmp	r3, #0
 8022032:	f43f acf1 	beq.w	8021a18 <_dtoa_r+0xa0>
 8022036:	601d      	str	r5, [r3, #0]
 8022038:	e4ee      	b.n	8021a18 <_dtoa_r+0xa0>
 802203a:	9f00      	ldr	r7, [sp, #0]
 802203c:	462b      	mov	r3, r5
 802203e:	461d      	mov	r5, r3
 8022040:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022044:	2a39      	cmp	r2, #57	; 0x39
 8022046:	d106      	bne.n	8022056 <_dtoa_r+0x6de>
 8022048:	9a01      	ldr	r2, [sp, #4]
 802204a:	429a      	cmp	r2, r3
 802204c:	d1f7      	bne.n	802203e <_dtoa_r+0x6c6>
 802204e:	9901      	ldr	r1, [sp, #4]
 8022050:	2230      	movs	r2, #48	; 0x30
 8022052:	3701      	adds	r7, #1
 8022054:	700a      	strb	r2, [r1, #0]
 8022056:	781a      	ldrb	r2, [r3, #0]
 8022058:	3201      	adds	r2, #1
 802205a:	701a      	strb	r2, [r3, #0]
 802205c:	e790      	b.n	8021f80 <_dtoa_r+0x608>
 802205e:	4ba6      	ldr	r3, [pc, #664]	; (80222f8 <_dtoa_r+0x980>)
 8022060:	2200      	movs	r2, #0
 8022062:	f7de faf1 	bl	8000648 <__aeabi_dmul>
 8022066:	2200      	movs	r2, #0
 8022068:	2300      	movs	r3, #0
 802206a:	4606      	mov	r6, r0
 802206c:	460f      	mov	r7, r1
 802206e:	f7de fd53 	bl	8000b18 <__aeabi_dcmpeq>
 8022072:	2800      	cmp	r0, #0
 8022074:	d09d      	beq.n	8021fb2 <_dtoa_r+0x63a>
 8022076:	e7cf      	b.n	8022018 <_dtoa_r+0x6a0>
 8022078:	9a08      	ldr	r2, [sp, #32]
 802207a:	2a00      	cmp	r2, #0
 802207c:	f000 80d7 	beq.w	802222e <_dtoa_r+0x8b6>
 8022080:	9a06      	ldr	r2, [sp, #24]
 8022082:	2a01      	cmp	r2, #1
 8022084:	f300 80ba 	bgt.w	80221fc <_dtoa_r+0x884>
 8022088:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802208a:	2a00      	cmp	r2, #0
 802208c:	f000 80b2 	beq.w	80221f4 <_dtoa_r+0x87c>
 8022090:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8022094:	9e07      	ldr	r6, [sp, #28]
 8022096:	9d04      	ldr	r5, [sp, #16]
 8022098:	9a04      	ldr	r2, [sp, #16]
 802209a:	441a      	add	r2, r3
 802209c:	9204      	str	r2, [sp, #16]
 802209e:	9a05      	ldr	r2, [sp, #20]
 80220a0:	2101      	movs	r1, #1
 80220a2:	441a      	add	r2, r3
 80220a4:	4620      	mov	r0, r4
 80220a6:	9205      	str	r2, [sp, #20]
 80220a8:	f000 fd78 	bl	8022b9c <__i2b>
 80220ac:	4607      	mov	r7, r0
 80220ae:	2d00      	cmp	r5, #0
 80220b0:	dd0c      	ble.n	80220cc <_dtoa_r+0x754>
 80220b2:	9b05      	ldr	r3, [sp, #20]
 80220b4:	2b00      	cmp	r3, #0
 80220b6:	dd09      	ble.n	80220cc <_dtoa_r+0x754>
 80220b8:	42ab      	cmp	r3, r5
 80220ba:	9a04      	ldr	r2, [sp, #16]
 80220bc:	bfa8      	it	ge
 80220be:	462b      	movge	r3, r5
 80220c0:	1ad2      	subs	r2, r2, r3
 80220c2:	9204      	str	r2, [sp, #16]
 80220c4:	9a05      	ldr	r2, [sp, #20]
 80220c6:	1aed      	subs	r5, r5, r3
 80220c8:	1ad3      	subs	r3, r2, r3
 80220ca:	9305      	str	r3, [sp, #20]
 80220cc:	9b07      	ldr	r3, [sp, #28]
 80220ce:	b31b      	cbz	r3, 8022118 <_dtoa_r+0x7a0>
 80220d0:	9b08      	ldr	r3, [sp, #32]
 80220d2:	2b00      	cmp	r3, #0
 80220d4:	f000 80af 	beq.w	8022236 <_dtoa_r+0x8be>
 80220d8:	2e00      	cmp	r6, #0
 80220da:	dd13      	ble.n	8022104 <_dtoa_r+0x78c>
 80220dc:	4639      	mov	r1, r7
 80220de:	4632      	mov	r2, r6
 80220e0:	4620      	mov	r0, r4
 80220e2:	f000 fe1b 	bl	8022d1c <__pow5mult>
 80220e6:	ee18 2a10 	vmov	r2, s16
 80220ea:	4601      	mov	r1, r0
 80220ec:	4607      	mov	r7, r0
 80220ee:	4620      	mov	r0, r4
 80220f0:	f000 fd6a 	bl	8022bc8 <__multiply>
 80220f4:	ee18 1a10 	vmov	r1, s16
 80220f8:	4680      	mov	r8, r0
 80220fa:	4620      	mov	r0, r4
 80220fc:	f000 fc96 	bl	8022a2c <_Bfree>
 8022100:	ee08 8a10 	vmov	s16, r8
 8022104:	9b07      	ldr	r3, [sp, #28]
 8022106:	1b9a      	subs	r2, r3, r6
 8022108:	d006      	beq.n	8022118 <_dtoa_r+0x7a0>
 802210a:	ee18 1a10 	vmov	r1, s16
 802210e:	4620      	mov	r0, r4
 8022110:	f000 fe04 	bl	8022d1c <__pow5mult>
 8022114:	ee08 0a10 	vmov	s16, r0
 8022118:	2101      	movs	r1, #1
 802211a:	4620      	mov	r0, r4
 802211c:	f000 fd3e 	bl	8022b9c <__i2b>
 8022120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022122:	2b00      	cmp	r3, #0
 8022124:	4606      	mov	r6, r0
 8022126:	f340 8088 	ble.w	802223a <_dtoa_r+0x8c2>
 802212a:	461a      	mov	r2, r3
 802212c:	4601      	mov	r1, r0
 802212e:	4620      	mov	r0, r4
 8022130:	f000 fdf4 	bl	8022d1c <__pow5mult>
 8022134:	9b06      	ldr	r3, [sp, #24]
 8022136:	2b01      	cmp	r3, #1
 8022138:	4606      	mov	r6, r0
 802213a:	f340 8081 	ble.w	8022240 <_dtoa_r+0x8c8>
 802213e:	f04f 0800 	mov.w	r8, #0
 8022142:	6933      	ldr	r3, [r6, #16]
 8022144:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8022148:	6918      	ldr	r0, [r3, #16]
 802214a:	f000 fcd7 	bl	8022afc <__hi0bits>
 802214e:	f1c0 0020 	rsb	r0, r0, #32
 8022152:	9b05      	ldr	r3, [sp, #20]
 8022154:	4418      	add	r0, r3
 8022156:	f010 001f 	ands.w	r0, r0, #31
 802215a:	f000 8092 	beq.w	8022282 <_dtoa_r+0x90a>
 802215e:	f1c0 0320 	rsb	r3, r0, #32
 8022162:	2b04      	cmp	r3, #4
 8022164:	f340 808a 	ble.w	802227c <_dtoa_r+0x904>
 8022168:	f1c0 001c 	rsb	r0, r0, #28
 802216c:	9b04      	ldr	r3, [sp, #16]
 802216e:	4403      	add	r3, r0
 8022170:	9304      	str	r3, [sp, #16]
 8022172:	9b05      	ldr	r3, [sp, #20]
 8022174:	4403      	add	r3, r0
 8022176:	4405      	add	r5, r0
 8022178:	9305      	str	r3, [sp, #20]
 802217a:	9b04      	ldr	r3, [sp, #16]
 802217c:	2b00      	cmp	r3, #0
 802217e:	dd07      	ble.n	8022190 <_dtoa_r+0x818>
 8022180:	ee18 1a10 	vmov	r1, s16
 8022184:	461a      	mov	r2, r3
 8022186:	4620      	mov	r0, r4
 8022188:	f000 fe22 	bl	8022dd0 <__lshift>
 802218c:	ee08 0a10 	vmov	s16, r0
 8022190:	9b05      	ldr	r3, [sp, #20]
 8022192:	2b00      	cmp	r3, #0
 8022194:	dd05      	ble.n	80221a2 <_dtoa_r+0x82a>
 8022196:	4631      	mov	r1, r6
 8022198:	461a      	mov	r2, r3
 802219a:	4620      	mov	r0, r4
 802219c:	f000 fe18 	bl	8022dd0 <__lshift>
 80221a0:	4606      	mov	r6, r0
 80221a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80221a4:	2b00      	cmp	r3, #0
 80221a6:	d06e      	beq.n	8022286 <_dtoa_r+0x90e>
 80221a8:	ee18 0a10 	vmov	r0, s16
 80221ac:	4631      	mov	r1, r6
 80221ae:	f000 fe7f 	bl	8022eb0 <__mcmp>
 80221b2:	2800      	cmp	r0, #0
 80221b4:	da67      	bge.n	8022286 <_dtoa_r+0x90e>
 80221b6:	9b00      	ldr	r3, [sp, #0]
 80221b8:	3b01      	subs	r3, #1
 80221ba:	ee18 1a10 	vmov	r1, s16
 80221be:	9300      	str	r3, [sp, #0]
 80221c0:	220a      	movs	r2, #10
 80221c2:	2300      	movs	r3, #0
 80221c4:	4620      	mov	r0, r4
 80221c6:	f000 fc53 	bl	8022a70 <__multadd>
 80221ca:	9b08      	ldr	r3, [sp, #32]
 80221cc:	ee08 0a10 	vmov	s16, r0
 80221d0:	2b00      	cmp	r3, #0
 80221d2:	f000 81b1 	beq.w	8022538 <_dtoa_r+0xbc0>
 80221d6:	2300      	movs	r3, #0
 80221d8:	4639      	mov	r1, r7
 80221da:	220a      	movs	r2, #10
 80221dc:	4620      	mov	r0, r4
 80221de:	f000 fc47 	bl	8022a70 <__multadd>
 80221e2:	9b02      	ldr	r3, [sp, #8]
 80221e4:	2b00      	cmp	r3, #0
 80221e6:	4607      	mov	r7, r0
 80221e8:	f300 808e 	bgt.w	8022308 <_dtoa_r+0x990>
 80221ec:	9b06      	ldr	r3, [sp, #24]
 80221ee:	2b02      	cmp	r3, #2
 80221f0:	dc51      	bgt.n	8022296 <_dtoa_r+0x91e>
 80221f2:	e089      	b.n	8022308 <_dtoa_r+0x990>
 80221f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80221f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80221fa:	e74b      	b.n	8022094 <_dtoa_r+0x71c>
 80221fc:	9b03      	ldr	r3, [sp, #12]
 80221fe:	1e5e      	subs	r6, r3, #1
 8022200:	9b07      	ldr	r3, [sp, #28]
 8022202:	42b3      	cmp	r3, r6
 8022204:	bfbf      	itttt	lt
 8022206:	9b07      	ldrlt	r3, [sp, #28]
 8022208:	9607      	strlt	r6, [sp, #28]
 802220a:	1af2      	sublt	r2, r6, r3
 802220c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 802220e:	bfb6      	itet	lt
 8022210:	189b      	addlt	r3, r3, r2
 8022212:	1b9e      	subge	r6, r3, r6
 8022214:	930a      	strlt	r3, [sp, #40]	; 0x28
 8022216:	9b03      	ldr	r3, [sp, #12]
 8022218:	bfb8      	it	lt
 802221a:	2600      	movlt	r6, #0
 802221c:	2b00      	cmp	r3, #0
 802221e:	bfb7      	itett	lt
 8022220:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8022224:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8022228:	1a9d      	sublt	r5, r3, r2
 802222a:	2300      	movlt	r3, #0
 802222c:	e734      	b.n	8022098 <_dtoa_r+0x720>
 802222e:	9e07      	ldr	r6, [sp, #28]
 8022230:	9d04      	ldr	r5, [sp, #16]
 8022232:	9f08      	ldr	r7, [sp, #32]
 8022234:	e73b      	b.n	80220ae <_dtoa_r+0x736>
 8022236:	9a07      	ldr	r2, [sp, #28]
 8022238:	e767      	b.n	802210a <_dtoa_r+0x792>
 802223a:	9b06      	ldr	r3, [sp, #24]
 802223c:	2b01      	cmp	r3, #1
 802223e:	dc18      	bgt.n	8022272 <_dtoa_r+0x8fa>
 8022240:	f1ba 0f00 	cmp.w	sl, #0
 8022244:	d115      	bne.n	8022272 <_dtoa_r+0x8fa>
 8022246:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802224a:	b993      	cbnz	r3, 8022272 <_dtoa_r+0x8fa>
 802224c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8022250:	0d1b      	lsrs	r3, r3, #20
 8022252:	051b      	lsls	r3, r3, #20
 8022254:	b183      	cbz	r3, 8022278 <_dtoa_r+0x900>
 8022256:	9b04      	ldr	r3, [sp, #16]
 8022258:	3301      	adds	r3, #1
 802225a:	9304      	str	r3, [sp, #16]
 802225c:	9b05      	ldr	r3, [sp, #20]
 802225e:	3301      	adds	r3, #1
 8022260:	9305      	str	r3, [sp, #20]
 8022262:	f04f 0801 	mov.w	r8, #1
 8022266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022268:	2b00      	cmp	r3, #0
 802226a:	f47f af6a 	bne.w	8022142 <_dtoa_r+0x7ca>
 802226e:	2001      	movs	r0, #1
 8022270:	e76f      	b.n	8022152 <_dtoa_r+0x7da>
 8022272:	f04f 0800 	mov.w	r8, #0
 8022276:	e7f6      	b.n	8022266 <_dtoa_r+0x8ee>
 8022278:	4698      	mov	r8, r3
 802227a:	e7f4      	b.n	8022266 <_dtoa_r+0x8ee>
 802227c:	f43f af7d 	beq.w	802217a <_dtoa_r+0x802>
 8022280:	4618      	mov	r0, r3
 8022282:	301c      	adds	r0, #28
 8022284:	e772      	b.n	802216c <_dtoa_r+0x7f4>
 8022286:	9b03      	ldr	r3, [sp, #12]
 8022288:	2b00      	cmp	r3, #0
 802228a:	dc37      	bgt.n	80222fc <_dtoa_r+0x984>
 802228c:	9b06      	ldr	r3, [sp, #24]
 802228e:	2b02      	cmp	r3, #2
 8022290:	dd34      	ble.n	80222fc <_dtoa_r+0x984>
 8022292:	9b03      	ldr	r3, [sp, #12]
 8022294:	9302      	str	r3, [sp, #8]
 8022296:	9b02      	ldr	r3, [sp, #8]
 8022298:	b96b      	cbnz	r3, 80222b6 <_dtoa_r+0x93e>
 802229a:	4631      	mov	r1, r6
 802229c:	2205      	movs	r2, #5
 802229e:	4620      	mov	r0, r4
 80222a0:	f000 fbe6 	bl	8022a70 <__multadd>
 80222a4:	4601      	mov	r1, r0
 80222a6:	4606      	mov	r6, r0
 80222a8:	ee18 0a10 	vmov	r0, s16
 80222ac:	f000 fe00 	bl	8022eb0 <__mcmp>
 80222b0:	2800      	cmp	r0, #0
 80222b2:	f73f adbb 	bgt.w	8021e2c <_dtoa_r+0x4b4>
 80222b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80222b8:	9d01      	ldr	r5, [sp, #4]
 80222ba:	43db      	mvns	r3, r3
 80222bc:	9300      	str	r3, [sp, #0]
 80222be:	f04f 0800 	mov.w	r8, #0
 80222c2:	4631      	mov	r1, r6
 80222c4:	4620      	mov	r0, r4
 80222c6:	f000 fbb1 	bl	8022a2c <_Bfree>
 80222ca:	2f00      	cmp	r7, #0
 80222cc:	f43f aea4 	beq.w	8022018 <_dtoa_r+0x6a0>
 80222d0:	f1b8 0f00 	cmp.w	r8, #0
 80222d4:	d005      	beq.n	80222e2 <_dtoa_r+0x96a>
 80222d6:	45b8      	cmp	r8, r7
 80222d8:	d003      	beq.n	80222e2 <_dtoa_r+0x96a>
 80222da:	4641      	mov	r1, r8
 80222dc:	4620      	mov	r0, r4
 80222de:	f000 fba5 	bl	8022a2c <_Bfree>
 80222e2:	4639      	mov	r1, r7
 80222e4:	4620      	mov	r0, r4
 80222e6:	f000 fba1 	bl	8022a2c <_Bfree>
 80222ea:	e695      	b.n	8022018 <_dtoa_r+0x6a0>
 80222ec:	2600      	movs	r6, #0
 80222ee:	4637      	mov	r7, r6
 80222f0:	e7e1      	b.n	80222b6 <_dtoa_r+0x93e>
 80222f2:	9700      	str	r7, [sp, #0]
 80222f4:	4637      	mov	r7, r6
 80222f6:	e599      	b.n	8021e2c <_dtoa_r+0x4b4>
 80222f8:	40240000 	.word	0x40240000
 80222fc:	9b08      	ldr	r3, [sp, #32]
 80222fe:	2b00      	cmp	r3, #0
 8022300:	f000 80ca 	beq.w	8022498 <_dtoa_r+0xb20>
 8022304:	9b03      	ldr	r3, [sp, #12]
 8022306:	9302      	str	r3, [sp, #8]
 8022308:	2d00      	cmp	r5, #0
 802230a:	dd05      	ble.n	8022318 <_dtoa_r+0x9a0>
 802230c:	4639      	mov	r1, r7
 802230e:	462a      	mov	r2, r5
 8022310:	4620      	mov	r0, r4
 8022312:	f000 fd5d 	bl	8022dd0 <__lshift>
 8022316:	4607      	mov	r7, r0
 8022318:	f1b8 0f00 	cmp.w	r8, #0
 802231c:	d05b      	beq.n	80223d6 <_dtoa_r+0xa5e>
 802231e:	6879      	ldr	r1, [r7, #4]
 8022320:	4620      	mov	r0, r4
 8022322:	f000 fb43 	bl	80229ac <_Balloc>
 8022326:	4605      	mov	r5, r0
 8022328:	b928      	cbnz	r0, 8022336 <_dtoa_r+0x9be>
 802232a:	4b87      	ldr	r3, [pc, #540]	; (8022548 <_dtoa_r+0xbd0>)
 802232c:	4602      	mov	r2, r0
 802232e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8022332:	f7ff bb3b 	b.w	80219ac <_dtoa_r+0x34>
 8022336:	693a      	ldr	r2, [r7, #16]
 8022338:	3202      	adds	r2, #2
 802233a:	0092      	lsls	r2, r2, #2
 802233c:	f107 010c 	add.w	r1, r7, #12
 8022340:	300c      	adds	r0, #12
 8022342:	f7fe fca9 	bl	8020c98 <memcpy>
 8022346:	2201      	movs	r2, #1
 8022348:	4629      	mov	r1, r5
 802234a:	4620      	mov	r0, r4
 802234c:	f000 fd40 	bl	8022dd0 <__lshift>
 8022350:	9b01      	ldr	r3, [sp, #4]
 8022352:	f103 0901 	add.w	r9, r3, #1
 8022356:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 802235a:	4413      	add	r3, r2
 802235c:	9305      	str	r3, [sp, #20]
 802235e:	f00a 0301 	and.w	r3, sl, #1
 8022362:	46b8      	mov	r8, r7
 8022364:	9304      	str	r3, [sp, #16]
 8022366:	4607      	mov	r7, r0
 8022368:	4631      	mov	r1, r6
 802236a:	ee18 0a10 	vmov	r0, s16
 802236e:	f7ff fa77 	bl	8021860 <quorem>
 8022372:	4641      	mov	r1, r8
 8022374:	9002      	str	r0, [sp, #8]
 8022376:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802237a:	ee18 0a10 	vmov	r0, s16
 802237e:	f000 fd97 	bl	8022eb0 <__mcmp>
 8022382:	463a      	mov	r2, r7
 8022384:	9003      	str	r0, [sp, #12]
 8022386:	4631      	mov	r1, r6
 8022388:	4620      	mov	r0, r4
 802238a:	f000 fdad 	bl	8022ee8 <__mdiff>
 802238e:	68c2      	ldr	r2, [r0, #12]
 8022390:	f109 3bff 	add.w	fp, r9, #4294967295
 8022394:	4605      	mov	r5, r0
 8022396:	bb02      	cbnz	r2, 80223da <_dtoa_r+0xa62>
 8022398:	4601      	mov	r1, r0
 802239a:	ee18 0a10 	vmov	r0, s16
 802239e:	f000 fd87 	bl	8022eb0 <__mcmp>
 80223a2:	4602      	mov	r2, r0
 80223a4:	4629      	mov	r1, r5
 80223a6:	4620      	mov	r0, r4
 80223a8:	9207      	str	r2, [sp, #28]
 80223aa:	f000 fb3f 	bl	8022a2c <_Bfree>
 80223ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80223b2:	ea43 0102 	orr.w	r1, r3, r2
 80223b6:	9b04      	ldr	r3, [sp, #16]
 80223b8:	430b      	orrs	r3, r1
 80223ba:	464d      	mov	r5, r9
 80223bc:	d10f      	bne.n	80223de <_dtoa_r+0xa66>
 80223be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80223c2:	d02a      	beq.n	802241a <_dtoa_r+0xaa2>
 80223c4:	9b03      	ldr	r3, [sp, #12]
 80223c6:	2b00      	cmp	r3, #0
 80223c8:	dd02      	ble.n	80223d0 <_dtoa_r+0xa58>
 80223ca:	9b02      	ldr	r3, [sp, #8]
 80223cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80223d0:	f88b a000 	strb.w	sl, [fp]
 80223d4:	e775      	b.n	80222c2 <_dtoa_r+0x94a>
 80223d6:	4638      	mov	r0, r7
 80223d8:	e7ba      	b.n	8022350 <_dtoa_r+0x9d8>
 80223da:	2201      	movs	r2, #1
 80223dc:	e7e2      	b.n	80223a4 <_dtoa_r+0xa2c>
 80223de:	9b03      	ldr	r3, [sp, #12]
 80223e0:	2b00      	cmp	r3, #0
 80223e2:	db04      	blt.n	80223ee <_dtoa_r+0xa76>
 80223e4:	9906      	ldr	r1, [sp, #24]
 80223e6:	430b      	orrs	r3, r1
 80223e8:	9904      	ldr	r1, [sp, #16]
 80223ea:	430b      	orrs	r3, r1
 80223ec:	d122      	bne.n	8022434 <_dtoa_r+0xabc>
 80223ee:	2a00      	cmp	r2, #0
 80223f0:	ddee      	ble.n	80223d0 <_dtoa_r+0xa58>
 80223f2:	ee18 1a10 	vmov	r1, s16
 80223f6:	2201      	movs	r2, #1
 80223f8:	4620      	mov	r0, r4
 80223fa:	f000 fce9 	bl	8022dd0 <__lshift>
 80223fe:	4631      	mov	r1, r6
 8022400:	ee08 0a10 	vmov	s16, r0
 8022404:	f000 fd54 	bl	8022eb0 <__mcmp>
 8022408:	2800      	cmp	r0, #0
 802240a:	dc03      	bgt.n	8022414 <_dtoa_r+0xa9c>
 802240c:	d1e0      	bne.n	80223d0 <_dtoa_r+0xa58>
 802240e:	f01a 0f01 	tst.w	sl, #1
 8022412:	d0dd      	beq.n	80223d0 <_dtoa_r+0xa58>
 8022414:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8022418:	d1d7      	bne.n	80223ca <_dtoa_r+0xa52>
 802241a:	2339      	movs	r3, #57	; 0x39
 802241c:	f88b 3000 	strb.w	r3, [fp]
 8022420:	462b      	mov	r3, r5
 8022422:	461d      	mov	r5, r3
 8022424:	3b01      	subs	r3, #1
 8022426:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802242a:	2a39      	cmp	r2, #57	; 0x39
 802242c:	d071      	beq.n	8022512 <_dtoa_r+0xb9a>
 802242e:	3201      	adds	r2, #1
 8022430:	701a      	strb	r2, [r3, #0]
 8022432:	e746      	b.n	80222c2 <_dtoa_r+0x94a>
 8022434:	2a00      	cmp	r2, #0
 8022436:	dd07      	ble.n	8022448 <_dtoa_r+0xad0>
 8022438:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802243c:	d0ed      	beq.n	802241a <_dtoa_r+0xaa2>
 802243e:	f10a 0301 	add.w	r3, sl, #1
 8022442:	f88b 3000 	strb.w	r3, [fp]
 8022446:	e73c      	b.n	80222c2 <_dtoa_r+0x94a>
 8022448:	9b05      	ldr	r3, [sp, #20]
 802244a:	f809 ac01 	strb.w	sl, [r9, #-1]
 802244e:	4599      	cmp	r9, r3
 8022450:	d047      	beq.n	80224e2 <_dtoa_r+0xb6a>
 8022452:	ee18 1a10 	vmov	r1, s16
 8022456:	2300      	movs	r3, #0
 8022458:	220a      	movs	r2, #10
 802245a:	4620      	mov	r0, r4
 802245c:	f000 fb08 	bl	8022a70 <__multadd>
 8022460:	45b8      	cmp	r8, r7
 8022462:	ee08 0a10 	vmov	s16, r0
 8022466:	f04f 0300 	mov.w	r3, #0
 802246a:	f04f 020a 	mov.w	r2, #10
 802246e:	4641      	mov	r1, r8
 8022470:	4620      	mov	r0, r4
 8022472:	d106      	bne.n	8022482 <_dtoa_r+0xb0a>
 8022474:	f000 fafc 	bl	8022a70 <__multadd>
 8022478:	4680      	mov	r8, r0
 802247a:	4607      	mov	r7, r0
 802247c:	f109 0901 	add.w	r9, r9, #1
 8022480:	e772      	b.n	8022368 <_dtoa_r+0x9f0>
 8022482:	f000 faf5 	bl	8022a70 <__multadd>
 8022486:	4639      	mov	r1, r7
 8022488:	4680      	mov	r8, r0
 802248a:	2300      	movs	r3, #0
 802248c:	220a      	movs	r2, #10
 802248e:	4620      	mov	r0, r4
 8022490:	f000 faee 	bl	8022a70 <__multadd>
 8022494:	4607      	mov	r7, r0
 8022496:	e7f1      	b.n	802247c <_dtoa_r+0xb04>
 8022498:	9b03      	ldr	r3, [sp, #12]
 802249a:	9302      	str	r3, [sp, #8]
 802249c:	9d01      	ldr	r5, [sp, #4]
 802249e:	ee18 0a10 	vmov	r0, s16
 80224a2:	4631      	mov	r1, r6
 80224a4:	f7ff f9dc 	bl	8021860 <quorem>
 80224a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80224ac:	9b01      	ldr	r3, [sp, #4]
 80224ae:	f805 ab01 	strb.w	sl, [r5], #1
 80224b2:	1aea      	subs	r2, r5, r3
 80224b4:	9b02      	ldr	r3, [sp, #8]
 80224b6:	4293      	cmp	r3, r2
 80224b8:	dd09      	ble.n	80224ce <_dtoa_r+0xb56>
 80224ba:	ee18 1a10 	vmov	r1, s16
 80224be:	2300      	movs	r3, #0
 80224c0:	220a      	movs	r2, #10
 80224c2:	4620      	mov	r0, r4
 80224c4:	f000 fad4 	bl	8022a70 <__multadd>
 80224c8:	ee08 0a10 	vmov	s16, r0
 80224cc:	e7e7      	b.n	802249e <_dtoa_r+0xb26>
 80224ce:	9b02      	ldr	r3, [sp, #8]
 80224d0:	2b00      	cmp	r3, #0
 80224d2:	bfc8      	it	gt
 80224d4:	461d      	movgt	r5, r3
 80224d6:	9b01      	ldr	r3, [sp, #4]
 80224d8:	bfd8      	it	le
 80224da:	2501      	movle	r5, #1
 80224dc:	441d      	add	r5, r3
 80224de:	f04f 0800 	mov.w	r8, #0
 80224e2:	ee18 1a10 	vmov	r1, s16
 80224e6:	2201      	movs	r2, #1
 80224e8:	4620      	mov	r0, r4
 80224ea:	f000 fc71 	bl	8022dd0 <__lshift>
 80224ee:	4631      	mov	r1, r6
 80224f0:	ee08 0a10 	vmov	s16, r0
 80224f4:	f000 fcdc 	bl	8022eb0 <__mcmp>
 80224f8:	2800      	cmp	r0, #0
 80224fa:	dc91      	bgt.n	8022420 <_dtoa_r+0xaa8>
 80224fc:	d102      	bne.n	8022504 <_dtoa_r+0xb8c>
 80224fe:	f01a 0f01 	tst.w	sl, #1
 8022502:	d18d      	bne.n	8022420 <_dtoa_r+0xaa8>
 8022504:	462b      	mov	r3, r5
 8022506:	461d      	mov	r5, r3
 8022508:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802250c:	2a30      	cmp	r2, #48	; 0x30
 802250e:	d0fa      	beq.n	8022506 <_dtoa_r+0xb8e>
 8022510:	e6d7      	b.n	80222c2 <_dtoa_r+0x94a>
 8022512:	9a01      	ldr	r2, [sp, #4]
 8022514:	429a      	cmp	r2, r3
 8022516:	d184      	bne.n	8022422 <_dtoa_r+0xaaa>
 8022518:	9b00      	ldr	r3, [sp, #0]
 802251a:	3301      	adds	r3, #1
 802251c:	9300      	str	r3, [sp, #0]
 802251e:	2331      	movs	r3, #49	; 0x31
 8022520:	7013      	strb	r3, [r2, #0]
 8022522:	e6ce      	b.n	80222c2 <_dtoa_r+0x94a>
 8022524:	4b09      	ldr	r3, [pc, #36]	; (802254c <_dtoa_r+0xbd4>)
 8022526:	f7ff ba95 	b.w	8021a54 <_dtoa_r+0xdc>
 802252a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802252c:	2b00      	cmp	r3, #0
 802252e:	f47f aa6e 	bne.w	8021a0e <_dtoa_r+0x96>
 8022532:	4b07      	ldr	r3, [pc, #28]	; (8022550 <_dtoa_r+0xbd8>)
 8022534:	f7ff ba8e 	b.w	8021a54 <_dtoa_r+0xdc>
 8022538:	9b02      	ldr	r3, [sp, #8]
 802253a:	2b00      	cmp	r3, #0
 802253c:	dcae      	bgt.n	802249c <_dtoa_r+0xb24>
 802253e:	9b06      	ldr	r3, [sp, #24]
 8022540:	2b02      	cmp	r3, #2
 8022542:	f73f aea8 	bgt.w	8022296 <_dtoa_r+0x91e>
 8022546:	e7a9      	b.n	802249c <_dtoa_r+0xb24>
 8022548:	0802531b 	.word	0x0802531b
 802254c:	08025278 	.word	0x08025278
 8022550:	0802529c 	.word	0x0802529c

08022554 <__sflush_r>:
 8022554:	898a      	ldrh	r2, [r1, #12]
 8022556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802255a:	4605      	mov	r5, r0
 802255c:	0710      	lsls	r0, r2, #28
 802255e:	460c      	mov	r4, r1
 8022560:	d458      	bmi.n	8022614 <__sflush_r+0xc0>
 8022562:	684b      	ldr	r3, [r1, #4]
 8022564:	2b00      	cmp	r3, #0
 8022566:	dc05      	bgt.n	8022574 <__sflush_r+0x20>
 8022568:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802256a:	2b00      	cmp	r3, #0
 802256c:	dc02      	bgt.n	8022574 <__sflush_r+0x20>
 802256e:	2000      	movs	r0, #0
 8022570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022576:	2e00      	cmp	r6, #0
 8022578:	d0f9      	beq.n	802256e <__sflush_r+0x1a>
 802257a:	2300      	movs	r3, #0
 802257c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022580:	682f      	ldr	r7, [r5, #0]
 8022582:	602b      	str	r3, [r5, #0]
 8022584:	d032      	beq.n	80225ec <__sflush_r+0x98>
 8022586:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022588:	89a3      	ldrh	r3, [r4, #12]
 802258a:	075a      	lsls	r2, r3, #29
 802258c:	d505      	bpl.n	802259a <__sflush_r+0x46>
 802258e:	6863      	ldr	r3, [r4, #4]
 8022590:	1ac0      	subs	r0, r0, r3
 8022592:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022594:	b10b      	cbz	r3, 802259a <__sflush_r+0x46>
 8022596:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022598:	1ac0      	subs	r0, r0, r3
 802259a:	2300      	movs	r3, #0
 802259c:	4602      	mov	r2, r0
 802259e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80225a0:	6a21      	ldr	r1, [r4, #32]
 80225a2:	4628      	mov	r0, r5
 80225a4:	47b0      	blx	r6
 80225a6:	1c43      	adds	r3, r0, #1
 80225a8:	89a3      	ldrh	r3, [r4, #12]
 80225aa:	d106      	bne.n	80225ba <__sflush_r+0x66>
 80225ac:	6829      	ldr	r1, [r5, #0]
 80225ae:	291d      	cmp	r1, #29
 80225b0:	d82c      	bhi.n	802260c <__sflush_r+0xb8>
 80225b2:	4a2a      	ldr	r2, [pc, #168]	; (802265c <__sflush_r+0x108>)
 80225b4:	40ca      	lsrs	r2, r1
 80225b6:	07d6      	lsls	r6, r2, #31
 80225b8:	d528      	bpl.n	802260c <__sflush_r+0xb8>
 80225ba:	2200      	movs	r2, #0
 80225bc:	6062      	str	r2, [r4, #4]
 80225be:	04d9      	lsls	r1, r3, #19
 80225c0:	6922      	ldr	r2, [r4, #16]
 80225c2:	6022      	str	r2, [r4, #0]
 80225c4:	d504      	bpl.n	80225d0 <__sflush_r+0x7c>
 80225c6:	1c42      	adds	r2, r0, #1
 80225c8:	d101      	bne.n	80225ce <__sflush_r+0x7a>
 80225ca:	682b      	ldr	r3, [r5, #0]
 80225cc:	b903      	cbnz	r3, 80225d0 <__sflush_r+0x7c>
 80225ce:	6560      	str	r0, [r4, #84]	; 0x54
 80225d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80225d2:	602f      	str	r7, [r5, #0]
 80225d4:	2900      	cmp	r1, #0
 80225d6:	d0ca      	beq.n	802256e <__sflush_r+0x1a>
 80225d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80225dc:	4299      	cmp	r1, r3
 80225de:	d002      	beq.n	80225e6 <__sflush_r+0x92>
 80225e0:	4628      	mov	r0, r5
 80225e2:	f000 fd7d 	bl	80230e0 <_free_r>
 80225e6:	2000      	movs	r0, #0
 80225e8:	6360      	str	r0, [r4, #52]	; 0x34
 80225ea:	e7c1      	b.n	8022570 <__sflush_r+0x1c>
 80225ec:	6a21      	ldr	r1, [r4, #32]
 80225ee:	2301      	movs	r3, #1
 80225f0:	4628      	mov	r0, r5
 80225f2:	47b0      	blx	r6
 80225f4:	1c41      	adds	r1, r0, #1
 80225f6:	d1c7      	bne.n	8022588 <__sflush_r+0x34>
 80225f8:	682b      	ldr	r3, [r5, #0]
 80225fa:	2b00      	cmp	r3, #0
 80225fc:	d0c4      	beq.n	8022588 <__sflush_r+0x34>
 80225fe:	2b1d      	cmp	r3, #29
 8022600:	d001      	beq.n	8022606 <__sflush_r+0xb2>
 8022602:	2b16      	cmp	r3, #22
 8022604:	d101      	bne.n	802260a <__sflush_r+0xb6>
 8022606:	602f      	str	r7, [r5, #0]
 8022608:	e7b1      	b.n	802256e <__sflush_r+0x1a>
 802260a:	89a3      	ldrh	r3, [r4, #12]
 802260c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022610:	81a3      	strh	r3, [r4, #12]
 8022612:	e7ad      	b.n	8022570 <__sflush_r+0x1c>
 8022614:	690f      	ldr	r7, [r1, #16]
 8022616:	2f00      	cmp	r7, #0
 8022618:	d0a9      	beq.n	802256e <__sflush_r+0x1a>
 802261a:	0793      	lsls	r3, r2, #30
 802261c:	680e      	ldr	r6, [r1, #0]
 802261e:	bf08      	it	eq
 8022620:	694b      	ldreq	r3, [r1, #20]
 8022622:	600f      	str	r7, [r1, #0]
 8022624:	bf18      	it	ne
 8022626:	2300      	movne	r3, #0
 8022628:	eba6 0807 	sub.w	r8, r6, r7
 802262c:	608b      	str	r3, [r1, #8]
 802262e:	f1b8 0f00 	cmp.w	r8, #0
 8022632:	dd9c      	ble.n	802256e <__sflush_r+0x1a>
 8022634:	6a21      	ldr	r1, [r4, #32]
 8022636:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022638:	4643      	mov	r3, r8
 802263a:	463a      	mov	r2, r7
 802263c:	4628      	mov	r0, r5
 802263e:	47b0      	blx	r6
 8022640:	2800      	cmp	r0, #0
 8022642:	dc06      	bgt.n	8022652 <__sflush_r+0xfe>
 8022644:	89a3      	ldrh	r3, [r4, #12]
 8022646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802264a:	81a3      	strh	r3, [r4, #12]
 802264c:	f04f 30ff 	mov.w	r0, #4294967295
 8022650:	e78e      	b.n	8022570 <__sflush_r+0x1c>
 8022652:	4407      	add	r7, r0
 8022654:	eba8 0800 	sub.w	r8, r8, r0
 8022658:	e7e9      	b.n	802262e <__sflush_r+0xda>
 802265a:	bf00      	nop
 802265c:	20400001 	.word	0x20400001

08022660 <_fflush_r>:
 8022660:	b538      	push	{r3, r4, r5, lr}
 8022662:	690b      	ldr	r3, [r1, #16]
 8022664:	4605      	mov	r5, r0
 8022666:	460c      	mov	r4, r1
 8022668:	b913      	cbnz	r3, 8022670 <_fflush_r+0x10>
 802266a:	2500      	movs	r5, #0
 802266c:	4628      	mov	r0, r5
 802266e:	bd38      	pop	{r3, r4, r5, pc}
 8022670:	b118      	cbz	r0, 802267a <_fflush_r+0x1a>
 8022672:	6983      	ldr	r3, [r0, #24]
 8022674:	b90b      	cbnz	r3, 802267a <_fflush_r+0x1a>
 8022676:	f000 f887 	bl	8022788 <__sinit>
 802267a:	4b14      	ldr	r3, [pc, #80]	; (80226cc <_fflush_r+0x6c>)
 802267c:	429c      	cmp	r4, r3
 802267e:	d11b      	bne.n	80226b8 <_fflush_r+0x58>
 8022680:	686c      	ldr	r4, [r5, #4]
 8022682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022686:	2b00      	cmp	r3, #0
 8022688:	d0ef      	beq.n	802266a <_fflush_r+0xa>
 802268a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802268c:	07d0      	lsls	r0, r2, #31
 802268e:	d404      	bmi.n	802269a <_fflush_r+0x3a>
 8022690:	0599      	lsls	r1, r3, #22
 8022692:	d402      	bmi.n	802269a <_fflush_r+0x3a>
 8022694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022696:	f000 f91a 	bl	80228ce <__retarget_lock_acquire_recursive>
 802269a:	4628      	mov	r0, r5
 802269c:	4621      	mov	r1, r4
 802269e:	f7ff ff59 	bl	8022554 <__sflush_r>
 80226a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80226a4:	07da      	lsls	r2, r3, #31
 80226a6:	4605      	mov	r5, r0
 80226a8:	d4e0      	bmi.n	802266c <_fflush_r+0xc>
 80226aa:	89a3      	ldrh	r3, [r4, #12]
 80226ac:	059b      	lsls	r3, r3, #22
 80226ae:	d4dd      	bmi.n	802266c <_fflush_r+0xc>
 80226b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80226b2:	f000 f90d 	bl	80228d0 <__retarget_lock_release_recursive>
 80226b6:	e7d9      	b.n	802266c <_fflush_r+0xc>
 80226b8:	4b05      	ldr	r3, [pc, #20]	; (80226d0 <_fflush_r+0x70>)
 80226ba:	429c      	cmp	r4, r3
 80226bc:	d101      	bne.n	80226c2 <_fflush_r+0x62>
 80226be:	68ac      	ldr	r4, [r5, #8]
 80226c0:	e7df      	b.n	8022682 <_fflush_r+0x22>
 80226c2:	4b04      	ldr	r3, [pc, #16]	; (80226d4 <_fflush_r+0x74>)
 80226c4:	429c      	cmp	r4, r3
 80226c6:	bf08      	it	eq
 80226c8:	68ec      	ldreq	r4, [r5, #12]
 80226ca:	e7da      	b.n	8022682 <_fflush_r+0x22>
 80226cc:	0802534c 	.word	0x0802534c
 80226d0:	0802536c 	.word	0x0802536c
 80226d4:	0802532c 	.word	0x0802532c

080226d8 <std>:
 80226d8:	2300      	movs	r3, #0
 80226da:	b510      	push	{r4, lr}
 80226dc:	4604      	mov	r4, r0
 80226de:	e9c0 3300 	strd	r3, r3, [r0]
 80226e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80226e6:	6083      	str	r3, [r0, #8]
 80226e8:	8181      	strh	r1, [r0, #12]
 80226ea:	6643      	str	r3, [r0, #100]	; 0x64
 80226ec:	81c2      	strh	r2, [r0, #14]
 80226ee:	6183      	str	r3, [r0, #24]
 80226f0:	4619      	mov	r1, r3
 80226f2:	2208      	movs	r2, #8
 80226f4:	305c      	adds	r0, #92	; 0x5c
 80226f6:	f7fe fadd 	bl	8020cb4 <memset>
 80226fa:	4b05      	ldr	r3, [pc, #20]	; (8022710 <std+0x38>)
 80226fc:	6263      	str	r3, [r4, #36]	; 0x24
 80226fe:	4b05      	ldr	r3, [pc, #20]	; (8022714 <std+0x3c>)
 8022700:	62a3      	str	r3, [r4, #40]	; 0x28
 8022702:	4b05      	ldr	r3, [pc, #20]	; (8022718 <std+0x40>)
 8022704:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022706:	4b05      	ldr	r3, [pc, #20]	; (802271c <std+0x44>)
 8022708:	6224      	str	r4, [r4, #32]
 802270a:	6323      	str	r3, [r4, #48]	; 0x30
 802270c:	bd10      	pop	{r4, pc}
 802270e:	bf00      	nop
 8022710:	08023605 	.word	0x08023605
 8022714:	08023627 	.word	0x08023627
 8022718:	0802365f 	.word	0x0802365f
 802271c:	08023683 	.word	0x08023683

08022720 <_cleanup_r>:
 8022720:	4901      	ldr	r1, [pc, #4]	; (8022728 <_cleanup_r+0x8>)
 8022722:	f000 b8af 	b.w	8022884 <_fwalk_reent>
 8022726:	bf00      	nop
 8022728:	08022661 	.word	0x08022661

0802272c <__sfmoreglue>:
 802272c:	b570      	push	{r4, r5, r6, lr}
 802272e:	2268      	movs	r2, #104	; 0x68
 8022730:	1e4d      	subs	r5, r1, #1
 8022732:	4355      	muls	r5, r2
 8022734:	460e      	mov	r6, r1
 8022736:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802273a:	f000 fd3d 	bl	80231b8 <_malloc_r>
 802273e:	4604      	mov	r4, r0
 8022740:	b140      	cbz	r0, 8022754 <__sfmoreglue+0x28>
 8022742:	2100      	movs	r1, #0
 8022744:	e9c0 1600 	strd	r1, r6, [r0]
 8022748:	300c      	adds	r0, #12
 802274a:	60a0      	str	r0, [r4, #8]
 802274c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022750:	f7fe fab0 	bl	8020cb4 <memset>
 8022754:	4620      	mov	r0, r4
 8022756:	bd70      	pop	{r4, r5, r6, pc}

08022758 <__sfp_lock_acquire>:
 8022758:	4801      	ldr	r0, [pc, #4]	; (8022760 <__sfp_lock_acquire+0x8>)
 802275a:	f000 b8b8 	b.w	80228ce <__retarget_lock_acquire_recursive>
 802275e:	bf00      	nop
 8022760:	2000fdd1 	.word	0x2000fdd1

08022764 <__sfp_lock_release>:
 8022764:	4801      	ldr	r0, [pc, #4]	; (802276c <__sfp_lock_release+0x8>)
 8022766:	f000 b8b3 	b.w	80228d0 <__retarget_lock_release_recursive>
 802276a:	bf00      	nop
 802276c:	2000fdd1 	.word	0x2000fdd1

08022770 <__sinit_lock_acquire>:
 8022770:	4801      	ldr	r0, [pc, #4]	; (8022778 <__sinit_lock_acquire+0x8>)
 8022772:	f000 b8ac 	b.w	80228ce <__retarget_lock_acquire_recursive>
 8022776:	bf00      	nop
 8022778:	2000fdd2 	.word	0x2000fdd2

0802277c <__sinit_lock_release>:
 802277c:	4801      	ldr	r0, [pc, #4]	; (8022784 <__sinit_lock_release+0x8>)
 802277e:	f000 b8a7 	b.w	80228d0 <__retarget_lock_release_recursive>
 8022782:	bf00      	nop
 8022784:	2000fdd2 	.word	0x2000fdd2

08022788 <__sinit>:
 8022788:	b510      	push	{r4, lr}
 802278a:	4604      	mov	r4, r0
 802278c:	f7ff fff0 	bl	8022770 <__sinit_lock_acquire>
 8022790:	69a3      	ldr	r3, [r4, #24]
 8022792:	b11b      	cbz	r3, 802279c <__sinit+0x14>
 8022794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022798:	f7ff bff0 	b.w	802277c <__sinit_lock_release>
 802279c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80227a0:	6523      	str	r3, [r4, #80]	; 0x50
 80227a2:	4b13      	ldr	r3, [pc, #76]	; (80227f0 <__sinit+0x68>)
 80227a4:	4a13      	ldr	r2, [pc, #76]	; (80227f4 <__sinit+0x6c>)
 80227a6:	681b      	ldr	r3, [r3, #0]
 80227a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80227aa:	42a3      	cmp	r3, r4
 80227ac:	bf04      	itt	eq
 80227ae:	2301      	moveq	r3, #1
 80227b0:	61a3      	streq	r3, [r4, #24]
 80227b2:	4620      	mov	r0, r4
 80227b4:	f000 f820 	bl	80227f8 <__sfp>
 80227b8:	6060      	str	r0, [r4, #4]
 80227ba:	4620      	mov	r0, r4
 80227bc:	f000 f81c 	bl	80227f8 <__sfp>
 80227c0:	60a0      	str	r0, [r4, #8]
 80227c2:	4620      	mov	r0, r4
 80227c4:	f000 f818 	bl	80227f8 <__sfp>
 80227c8:	2200      	movs	r2, #0
 80227ca:	60e0      	str	r0, [r4, #12]
 80227cc:	2104      	movs	r1, #4
 80227ce:	6860      	ldr	r0, [r4, #4]
 80227d0:	f7ff ff82 	bl	80226d8 <std>
 80227d4:	68a0      	ldr	r0, [r4, #8]
 80227d6:	2201      	movs	r2, #1
 80227d8:	2109      	movs	r1, #9
 80227da:	f7ff ff7d 	bl	80226d8 <std>
 80227de:	68e0      	ldr	r0, [r4, #12]
 80227e0:	2202      	movs	r2, #2
 80227e2:	2112      	movs	r1, #18
 80227e4:	f7ff ff78 	bl	80226d8 <std>
 80227e8:	2301      	movs	r3, #1
 80227ea:	61a3      	str	r3, [r4, #24]
 80227ec:	e7d2      	b.n	8022794 <__sinit+0xc>
 80227ee:	bf00      	nop
 80227f0:	08025264 	.word	0x08025264
 80227f4:	08022721 	.word	0x08022721

080227f8 <__sfp>:
 80227f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80227fa:	4607      	mov	r7, r0
 80227fc:	f7ff ffac 	bl	8022758 <__sfp_lock_acquire>
 8022800:	4b1e      	ldr	r3, [pc, #120]	; (802287c <__sfp+0x84>)
 8022802:	681e      	ldr	r6, [r3, #0]
 8022804:	69b3      	ldr	r3, [r6, #24]
 8022806:	b913      	cbnz	r3, 802280e <__sfp+0x16>
 8022808:	4630      	mov	r0, r6
 802280a:	f7ff ffbd 	bl	8022788 <__sinit>
 802280e:	3648      	adds	r6, #72	; 0x48
 8022810:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022814:	3b01      	subs	r3, #1
 8022816:	d503      	bpl.n	8022820 <__sfp+0x28>
 8022818:	6833      	ldr	r3, [r6, #0]
 802281a:	b30b      	cbz	r3, 8022860 <__sfp+0x68>
 802281c:	6836      	ldr	r6, [r6, #0]
 802281e:	e7f7      	b.n	8022810 <__sfp+0x18>
 8022820:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022824:	b9d5      	cbnz	r5, 802285c <__sfp+0x64>
 8022826:	4b16      	ldr	r3, [pc, #88]	; (8022880 <__sfp+0x88>)
 8022828:	60e3      	str	r3, [r4, #12]
 802282a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802282e:	6665      	str	r5, [r4, #100]	; 0x64
 8022830:	f000 f84c 	bl	80228cc <__retarget_lock_init_recursive>
 8022834:	f7ff ff96 	bl	8022764 <__sfp_lock_release>
 8022838:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802283c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8022840:	6025      	str	r5, [r4, #0]
 8022842:	61a5      	str	r5, [r4, #24]
 8022844:	2208      	movs	r2, #8
 8022846:	4629      	mov	r1, r5
 8022848:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802284c:	f7fe fa32 	bl	8020cb4 <memset>
 8022850:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8022854:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8022858:	4620      	mov	r0, r4
 802285a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802285c:	3468      	adds	r4, #104	; 0x68
 802285e:	e7d9      	b.n	8022814 <__sfp+0x1c>
 8022860:	2104      	movs	r1, #4
 8022862:	4638      	mov	r0, r7
 8022864:	f7ff ff62 	bl	802272c <__sfmoreglue>
 8022868:	4604      	mov	r4, r0
 802286a:	6030      	str	r0, [r6, #0]
 802286c:	2800      	cmp	r0, #0
 802286e:	d1d5      	bne.n	802281c <__sfp+0x24>
 8022870:	f7ff ff78 	bl	8022764 <__sfp_lock_release>
 8022874:	230c      	movs	r3, #12
 8022876:	603b      	str	r3, [r7, #0]
 8022878:	e7ee      	b.n	8022858 <__sfp+0x60>
 802287a:	bf00      	nop
 802287c:	08025264 	.word	0x08025264
 8022880:	ffff0001 	.word	0xffff0001

08022884 <_fwalk_reent>:
 8022884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022888:	4606      	mov	r6, r0
 802288a:	4688      	mov	r8, r1
 802288c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8022890:	2700      	movs	r7, #0
 8022892:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022896:	f1b9 0901 	subs.w	r9, r9, #1
 802289a:	d505      	bpl.n	80228a8 <_fwalk_reent+0x24>
 802289c:	6824      	ldr	r4, [r4, #0]
 802289e:	2c00      	cmp	r4, #0
 80228a0:	d1f7      	bne.n	8022892 <_fwalk_reent+0xe>
 80228a2:	4638      	mov	r0, r7
 80228a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80228a8:	89ab      	ldrh	r3, [r5, #12]
 80228aa:	2b01      	cmp	r3, #1
 80228ac:	d907      	bls.n	80228be <_fwalk_reent+0x3a>
 80228ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80228b2:	3301      	adds	r3, #1
 80228b4:	d003      	beq.n	80228be <_fwalk_reent+0x3a>
 80228b6:	4629      	mov	r1, r5
 80228b8:	4630      	mov	r0, r6
 80228ba:	47c0      	blx	r8
 80228bc:	4307      	orrs	r7, r0
 80228be:	3568      	adds	r5, #104	; 0x68
 80228c0:	e7e9      	b.n	8022896 <_fwalk_reent+0x12>
	...

080228c4 <_localeconv_r>:
 80228c4:	4800      	ldr	r0, [pc, #0]	; (80228c8 <_localeconv_r+0x4>)
 80228c6:	4770      	bx	lr
 80228c8:	20000180 	.word	0x20000180

080228cc <__retarget_lock_init_recursive>:
 80228cc:	4770      	bx	lr

080228ce <__retarget_lock_acquire_recursive>:
 80228ce:	4770      	bx	lr

080228d0 <__retarget_lock_release_recursive>:
 80228d0:	4770      	bx	lr

080228d2 <__swhatbuf_r>:
 80228d2:	b570      	push	{r4, r5, r6, lr}
 80228d4:	460e      	mov	r6, r1
 80228d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80228da:	2900      	cmp	r1, #0
 80228dc:	b096      	sub	sp, #88	; 0x58
 80228de:	4614      	mov	r4, r2
 80228e0:	461d      	mov	r5, r3
 80228e2:	da08      	bge.n	80228f6 <__swhatbuf_r+0x24>
 80228e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80228e8:	2200      	movs	r2, #0
 80228ea:	602a      	str	r2, [r5, #0]
 80228ec:	061a      	lsls	r2, r3, #24
 80228ee:	d410      	bmi.n	8022912 <__swhatbuf_r+0x40>
 80228f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80228f4:	e00e      	b.n	8022914 <__swhatbuf_r+0x42>
 80228f6:	466a      	mov	r2, sp
 80228f8:	f000 ff1a 	bl	8023730 <_fstat_r>
 80228fc:	2800      	cmp	r0, #0
 80228fe:	dbf1      	blt.n	80228e4 <__swhatbuf_r+0x12>
 8022900:	9a01      	ldr	r2, [sp, #4]
 8022902:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022906:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802290a:	425a      	negs	r2, r3
 802290c:	415a      	adcs	r2, r3
 802290e:	602a      	str	r2, [r5, #0]
 8022910:	e7ee      	b.n	80228f0 <__swhatbuf_r+0x1e>
 8022912:	2340      	movs	r3, #64	; 0x40
 8022914:	2000      	movs	r0, #0
 8022916:	6023      	str	r3, [r4, #0]
 8022918:	b016      	add	sp, #88	; 0x58
 802291a:	bd70      	pop	{r4, r5, r6, pc}

0802291c <__smakebuf_r>:
 802291c:	898b      	ldrh	r3, [r1, #12]
 802291e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022920:	079d      	lsls	r5, r3, #30
 8022922:	4606      	mov	r6, r0
 8022924:	460c      	mov	r4, r1
 8022926:	d507      	bpl.n	8022938 <__smakebuf_r+0x1c>
 8022928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802292c:	6023      	str	r3, [r4, #0]
 802292e:	6123      	str	r3, [r4, #16]
 8022930:	2301      	movs	r3, #1
 8022932:	6163      	str	r3, [r4, #20]
 8022934:	b002      	add	sp, #8
 8022936:	bd70      	pop	{r4, r5, r6, pc}
 8022938:	ab01      	add	r3, sp, #4
 802293a:	466a      	mov	r2, sp
 802293c:	f7ff ffc9 	bl	80228d2 <__swhatbuf_r>
 8022940:	9900      	ldr	r1, [sp, #0]
 8022942:	4605      	mov	r5, r0
 8022944:	4630      	mov	r0, r6
 8022946:	f000 fc37 	bl	80231b8 <_malloc_r>
 802294a:	b948      	cbnz	r0, 8022960 <__smakebuf_r+0x44>
 802294c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022950:	059a      	lsls	r2, r3, #22
 8022952:	d4ef      	bmi.n	8022934 <__smakebuf_r+0x18>
 8022954:	f023 0303 	bic.w	r3, r3, #3
 8022958:	f043 0302 	orr.w	r3, r3, #2
 802295c:	81a3      	strh	r3, [r4, #12]
 802295e:	e7e3      	b.n	8022928 <__smakebuf_r+0xc>
 8022960:	4b0d      	ldr	r3, [pc, #52]	; (8022998 <__smakebuf_r+0x7c>)
 8022962:	62b3      	str	r3, [r6, #40]	; 0x28
 8022964:	89a3      	ldrh	r3, [r4, #12]
 8022966:	6020      	str	r0, [r4, #0]
 8022968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802296c:	81a3      	strh	r3, [r4, #12]
 802296e:	9b00      	ldr	r3, [sp, #0]
 8022970:	6163      	str	r3, [r4, #20]
 8022972:	9b01      	ldr	r3, [sp, #4]
 8022974:	6120      	str	r0, [r4, #16]
 8022976:	b15b      	cbz	r3, 8022990 <__smakebuf_r+0x74>
 8022978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802297c:	4630      	mov	r0, r6
 802297e:	f000 fee9 	bl	8023754 <_isatty_r>
 8022982:	b128      	cbz	r0, 8022990 <__smakebuf_r+0x74>
 8022984:	89a3      	ldrh	r3, [r4, #12]
 8022986:	f023 0303 	bic.w	r3, r3, #3
 802298a:	f043 0301 	orr.w	r3, r3, #1
 802298e:	81a3      	strh	r3, [r4, #12]
 8022990:	89a0      	ldrh	r0, [r4, #12]
 8022992:	4305      	orrs	r5, r0
 8022994:	81a5      	strh	r5, [r4, #12]
 8022996:	e7cd      	b.n	8022934 <__smakebuf_r+0x18>
 8022998:	08022721 	.word	0x08022721

0802299c <malloc>:
 802299c:	4b02      	ldr	r3, [pc, #8]	; (80229a8 <malloc+0xc>)
 802299e:	4601      	mov	r1, r0
 80229a0:	6818      	ldr	r0, [r3, #0]
 80229a2:	f000 bc09 	b.w	80231b8 <_malloc_r>
 80229a6:	bf00      	nop
 80229a8:	2000002c 	.word	0x2000002c

080229ac <_Balloc>:
 80229ac:	b570      	push	{r4, r5, r6, lr}
 80229ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80229b0:	4604      	mov	r4, r0
 80229b2:	460d      	mov	r5, r1
 80229b4:	b976      	cbnz	r6, 80229d4 <_Balloc+0x28>
 80229b6:	2010      	movs	r0, #16
 80229b8:	f7ff fff0 	bl	802299c <malloc>
 80229bc:	4602      	mov	r2, r0
 80229be:	6260      	str	r0, [r4, #36]	; 0x24
 80229c0:	b920      	cbnz	r0, 80229cc <_Balloc+0x20>
 80229c2:	4b18      	ldr	r3, [pc, #96]	; (8022a24 <_Balloc+0x78>)
 80229c4:	4818      	ldr	r0, [pc, #96]	; (8022a28 <_Balloc+0x7c>)
 80229c6:	2166      	movs	r1, #102	; 0x66
 80229c8:	f000 fe72 	bl	80236b0 <__assert_func>
 80229cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80229d0:	6006      	str	r6, [r0, #0]
 80229d2:	60c6      	str	r6, [r0, #12]
 80229d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80229d6:	68f3      	ldr	r3, [r6, #12]
 80229d8:	b183      	cbz	r3, 80229fc <_Balloc+0x50>
 80229da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80229dc:	68db      	ldr	r3, [r3, #12]
 80229de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80229e2:	b9b8      	cbnz	r0, 8022a14 <_Balloc+0x68>
 80229e4:	2101      	movs	r1, #1
 80229e6:	fa01 f605 	lsl.w	r6, r1, r5
 80229ea:	1d72      	adds	r2, r6, #5
 80229ec:	0092      	lsls	r2, r2, #2
 80229ee:	4620      	mov	r0, r4
 80229f0:	f000 fb60 	bl	80230b4 <_calloc_r>
 80229f4:	b160      	cbz	r0, 8022a10 <_Balloc+0x64>
 80229f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80229fa:	e00e      	b.n	8022a1a <_Balloc+0x6e>
 80229fc:	2221      	movs	r2, #33	; 0x21
 80229fe:	2104      	movs	r1, #4
 8022a00:	4620      	mov	r0, r4
 8022a02:	f000 fb57 	bl	80230b4 <_calloc_r>
 8022a06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022a08:	60f0      	str	r0, [r6, #12]
 8022a0a:	68db      	ldr	r3, [r3, #12]
 8022a0c:	2b00      	cmp	r3, #0
 8022a0e:	d1e4      	bne.n	80229da <_Balloc+0x2e>
 8022a10:	2000      	movs	r0, #0
 8022a12:	bd70      	pop	{r4, r5, r6, pc}
 8022a14:	6802      	ldr	r2, [r0, #0]
 8022a16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8022a1a:	2300      	movs	r3, #0
 8022a1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8022a20:	e7f7      	b.n	8022a12 <_Balloc+0x66>
 8022a22:	bf00      	nop
 8022a24:	080252a9 	.word	0x080252a9
 8022a28:	0802538c 	.word	0x0802538c

08022a2c <_Bfree>:
 8022a2c:	b570      	push	{r4, r5, r6, lr}
 8022a2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8022a30:	4605      	mov	r5, r0
 8022a32:	460c      	mov	r4, r1
 8022a34:	b976      	cbnz	r6, 8022a54 <_Bfree+0x28>
 8022a36:	2010      	movs	r0, #16
 8022a38:	f7ff ffb0 	bl	802299c <malloc>
 8022a3c:	4602      	mov	r2, r0
 8022a3e:	6268      	str	r0, [r5, #36]	; 0x24
 8022a40:	b920      	cbnz	r0, 8022a4c <_Bfree+0x20>
 8022a42:	4b09      	ldr	r3, [pc, #36]	; (8022a68 <_Bfree+0x3c>)
 8022a44:	4809      	ldr	r0, [pc, #36]	; (8022a6c <_Bfree+0x40>)
 8022a46:	218a      	movs	r1, #138	; 0x8a
 8022a48:	f000 fe32 	bl	80236b0 <__assert_func>
 8022a4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022a50:	6006      	str	r6, [r0, #0]
 8022a52:	60c6      	str	r6, [r0, #12]
 8022a54:	b13c      	cbz	r4, 8022a66 <_Bfree+0x3a>
 8022a56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8022a58:	6862      	ldr	r2, [r4, #4]
 8022a5a:	68db      	ldr	r3, [r3, #12]
 8022a5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8022a60:	6021      	str	r1, [r4, #0]
 8022a62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8022a66:	bd70      	pop	{r4, r5, r6, pc}
 8022a68:	080252a9 	.word	0x080252a9
 8022a6c:	0802538c 	.word	0x0802538c

08022a70 <__multadd>:
 8022a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a74:	690d      	ldr	r5, [r1, #16]
 8022a76:	4607      	mov	r7, r0
 8022a78:	460c      	mov	r4, r1
 8022a7a:	461e      	mov	r6, r3
 8022a7c:	f101 0c14 	add.w	ip, r1, #20
 8022a80:	2000      	movs	r0, #0
 8022a82:	f8dc 3000 	ldr.w	r3, [ip]
 8022a86:	b299      	uxth	r1, r3
 8022a88:	fb02 6101 	mla	r1, r2, r1, r6
 8022a8c:	0c1e      	lsrs	r6, r3, #16
 8022a8e:	0c0b      	lsrs	r3, r1, #16
 8022a90:	fb02 3306 	mla	r3, r2, r6, r3
 8022a94:	b289      	uxth	r1, r1
 8022a96:	3001      	adds	r0, #1
 8022a98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8022a9c:	4285      	cmp	r5, r0
 8022a9e:	f84c 1b04 	str.w	r1, [ip], #4
 8022aa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8022aa6:	dcec      	bgt.n	8022a82 <__multadd+0x12>
 8022aa8:	b30e      	cbz	r6, 8022aee <__multadd+0x7e>
 8022aaa:	68a3      	ldr	r3, [r4, #8]
 8022aac:	42ab      	cmp	r3, r5
 8022aae:	dc19      	bgt.n	8022ae4 <__multadd+0x74>
 8022ab0:	6861      	ldr	r1, [r4, #4]
 8022ab2:	4638      	mov	r0, r7
 8022ab4:	3101      	adds	r1, #1
 8022ab6:	f7ff ff79 	bl	80229ac <_Balloc>
 8022aba:	4680      	mov	r8, r0
 8022abc:	b928      	cbnz	r0, 8022aca <__multadd+0x5a>
 8022abe:	4602      	mov	r2, r0
 8022ac0:	4b0c      	ldr	r3, [pc, #48]	; (8022af4 <__multadd+0x84>)
 8022ac2:	480d      	ldr	r0, [pc, #52]	; (8022af8 <__multadd+0x88>)
 8022ac4:	21b5      	movs	r1, #181	; 0xb5
 8022ac6:	f000 fdf3 	bl	80236b0 <__assert_func>
 8022aca:	6922      	ldr	r2, [r4, #16]
 8022acc:	3202      	adds	r2, #2
 8022ace:	f104 010c 	add.w	r1, r4, #12
 8022ad2:	0092      	lsls	r2, r2, #2
 8022ad4:	300c      	adds	r0, #12
 8022ad6:	f7fe f8df 	bl	8020c98 <memcpy>
 8022ada:	4621      	mov	r1, r4
 8022adc:	4638      	mov	r0, r7
 8022ade:	f7ff ffa5 	bl	8022a2c <_Bfree>
 8022ae2:	4644      	mov	r4, r8
 8022ae4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8022ae8:	3501      	adds	r5, #1
 8022aea:	615e      	str	r6, [r3, #20]
 8022aec:	6125      	str	r5, [r4, #16]
 8022aee:	4620      	mov	r0, r4
 8022af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022af4:	0802531b 	.word	0x0802531b
 8022af8:	0802538c 	.word	0x0802538c

08022afc <__hi0bits>:
 8022afc:	0c03      	lsrs	r3, r0, #16
 8022afe:	041b      	lsls	r3, r3, #16
 8022b00:	b9d3      	cbnz	r3, 8022b38 <__hi0bits+0x3c>
 8022b02:	0400      	lsls	r0, r0, #16
 8022b04:	2310      	movs	r3, #16
 8022b06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8022b0a:	bf04      	itt	eq
 8022b0c:	0200      	lsleq	r0, r0, #8
 8022b0e:	3308      	addeq	r3, #8
 8022b10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8022b14:	bf04      	itt	eq
 8022b16:	0100      	lsleq	r0, r0, #4
 8022b18:	3304      	addeq	r3, #4
 8022b1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8022b1e:	bf04      	itt	eq
 8022b20:	0080      	lsleq	r0, r0, #2
 8022b22:	3302      	addeq	r3, #2
 8022b24:	2800      	cmp	r0, #0
 8022b26:	db05      	blt.n	8022b34 <__hi0bits+0x38>
 8022b28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8022b2c:	f103 0301 	add.w	r3, r3, #1
 8022b30:	bf08      	it	eq
 8022b32:	2320      	moveq	r3, #32
 8022b34:	4618      	mov	r0, r3
 8022b36:	4770      	bx	lr
 8022b38:	2300      	movs	r3, #0
 8022b3a:	e7e4      	b.n	8022b06 <__hi0bits+0xa>

08022b3c <__lo0bits>:
 8022b3c:	6803      	ldr	r3, [r0, #0]
 8022b3e:	f013 0207 	ands.w	r2, r3, #7
 8022b42:	4601      	mov	r1, r0
 8022b44:	d00b      	beq.n	8022b5e <__lo0bits+0x22>
 8022b46:	07da      	lsls	r2, r3, #31
 8022b48:	d423      	bmi.n	8022b92 <__lo0bits+0x56>
 8022b4a:	0798      	lsls	r0, r3, #30
 8022b4c:	bf49      	itett	mi
 8022b4e:	085b      	lsrmi	r3, r3, #1
 8022b50:	089b      	lsrpl	r3, r3, #2
 8022b52:	2001      	movmi	r0, #1
 8022b54:	600b      	strmi	r3, [r1, #0]
 8022b56:	bf5c      	itt	pl
 8022b58:	600b      	strpl	r3, [r1, #0]
 8022b5a:	2002      	movpl	r0, #2
 8022b5c:	4770      	bx	lr
 8022b5e:	b298      	uxth	r0, r3
 8022b60:	b9a8      	cbnz	r0, 8022b8e <__lo0bits+0x52>
 8022b62:	0c1b      	lsrs	r3, r3, #16
 8022b64:	2010      	movs	r0, #16
 8022b66:	b2da      	uxtb	r2, r3
 8022b68:	b90a      	cbnz	r2, 8022b6e <__lo0bits+0x32>
 8022b6a:	3008      	adds	r0, #8
 8022b6c:	0a1b      	lsrs	r3, r3, #8
 8022b6e:	071a      	lsls	r2, r3, #28
 8022b70:	bf04      	itt	eq
 8022b72:	091b      	lsreq	r3, r3, #4
 8022b74:	3004      	addeq	r0, #4
 8022b76:	079a      	lsls	r2, r3, #30
 8022b78:	bf04      	itt	eq
 8022b7a:	089b      	lsreq	r3, r3, #2
 8022b7c:	3002      	addeq	r0, #2
 8022b7e:	07da      	lsls	r2, r3, #31
 8022b80:	d403      	bmi.n	8022b8a <__lo0bits+0x4e>
 8022b82:	085b      	lsrs	r3, r3, #1
 8022b84:	f100 0001 	add.w	r0, r0, #1
 8022b88:	d005      	beq.n	8022b96 <__lo0bits+0x5a>
 8022b8a:	600b      	str	r3, [r1, #0]
 8022b8c:	4770      	bx	lr
 8022b8e:	4610      	mov	r0, r2
 8022b90:	e7e9      	b.n	8022b66 <__lo0bits+0x2a>
 8022b92:	2000      	movs	r0, #0
 8022b94:	4770      	bx	lr
 8022b96:	2020      	movs	r0, #32
 8022b98:	4770      	bx	lr
	...

08022b9c <__i2b>:
 8022b9c:	b510      	push	{r4, lr}
 8022b9e:	460c      	mov	r4, r1
 8022ba0:	2101      	movs	r1, #1
 8022ba2:	f7ff ff03 	bl	80229ac <_Balloc>
 8022ba6:	4602      	mov	r2, r0
 8022ba8:	b928      	cbnz	r0, 8022bb6 <__i2b+0x1a>
 8022baa:	4b05      	ldr	r3, [pc, #20]	; (8022bc0 <__i2b+0x24>)
 8022bac:	4805      	ldr	r0, [pc, #20]	; (8022bc4 <__i2b+0x28>)
 8022bae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8022bb2:	f000 fd7d 	bl	80236b0 <__assert_func>
 8022bb6:	2301      	movs	r3, #1
 8022bb8:	6144      	str	r4, [r0, #20]
 8022bba:	6103      	str	r3, [r0, #16]
 8022bbc:	bd10      	pop	{r4, pc}
 8022bbe:	bf00      	nop
 8022bc0:	0802531b 	.word	0x0802531b
 8022bc4:	0802538c 	.word	0x0802538c

08022bc8 <__multiply>:
 8022bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bcc:	4691      	mov	r9, r2
 8022bce:	690a      	ldr	r2, [r1, #16]
 8022bd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8022bd4:	429a      	cmp	r2, r3
 8022bd6:	bfb8      	it	lt
 8022bd8:	460b      	movlt	r3, r1
 8022bda:	460c      	mov	r4, r1
 8022bdc:	bfbc      	itt	lt
 8022bde:	464c      	movlt	r4, r9
 8022be0:	4699      	movlt	r9, r3
 8022be2:	6927      	ldr	r7, [r4, #16]
 8022be4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8022be8:	68a3      	ldr	r3, [r4, #8]
 8022bea:	6861      	ldr	r1, [r4, #4]
 8022bec:	eb07 060a 	add.w	r6, r7, sl
 8022bf0:	42b3      	cmp	r3, r6
 8022bf2:	b085      	sub	sp, #20
 8022bf4:	bfb8      	it	lt
 8022bf6:	3101      	addlt	r1, #1
 8022bf8:	f7ff fed8 	bl	80229ac <_Balloc>
 8022bfc:	b930      	cbnz	r0, 8022c0c <__multiply+0x44>
 8022bfe:	4602      	mov	r2, r0
 8022c00:	4b44      	ldr	r3, [pc, #272]	; (8022d14 <__multiply+0x14c>)
 8022c02:	4845      	ldr	r0, [pc, #276]	; (8022d18 <__multiply+0x150>)
 8022c04:	f240 115d 	movw	r1, #349	; 0x15d
 8022c08:	f000 fd52 	bl	80236b0 <__assert_func>
 8022c0c:	f100 0514 	add.w	r5, r0, #20
 8022c10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8022c14:	462b      	mov	r3, r5
 8022c16:	2200      	movs	r2, #0
 8022c18:	4543      	cmp	r3, r8
 8022c1a:	d321      	bcc.n	8022c60 <__multiply+0x98>
 8022c1c:	f104 0314 	add.w	r3, r4, #20
 8022c20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8022c24:	f109 0314 	add.w	r3, r9, #20
 8022c28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8022c2c:	9202      	str	r2, [sp, #8]
 8022c2e:	1b3a      	subs	r2, r7, r4
 8022c30:	3a15      	subs	r2, #21
 8022c32:	f022 0203 	bic.w	r2, r2, #3
 8022c36:	3204      	adds	r2, #4
 8022c38:	f104 0115 	add.w	r1, r4, #21
 8022c3c:	428f      	cmp	r7, r1
 8022c3e:	bf38      	it	cc
 8022c40:	2204      	movcc	r2, #4
 8022c42:	9201      	str	r2, [sp, #4]
 8022c44:	9a02      	ldr	r2, [sp, #8]
 8022c46:	9303      	str	r3, [sp, #12]
 8022c48:	429a      	cmp	r2, r3
 8022c4a:	d80c      	bhi.n	8022c66 <__multiply+0x9e>
 8022c4c:	2e00      	cmp	r6, #0
 8022c4e:	dd03      	ble.n	8022c58 <__multiply+0x90>
 8022c50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8022c54:	2b00      	cmp	r3, #0
 8022c56:	d05a      	beq.n	8022d0e <__multiply+0x146>
 8022c58:	6106      	str	r6, [r0, #16]
 8022c5a:	b005      	add	sp, #20
 8022c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c60:	f843 2b04 	str.w	r2, [r3], #4
 8022c64:	e7d8      	b.n	8022c18 <__multiply+0x50>
 8022c66:	f8b3 a000 	ldrh.w	sl, [r3]
 8022c6a:	f1ba 0f00 	cmp.w	sl, #0
 8022c6e:	d024      	beq.n	8022cba <__multiply+0xf2>
 8022c70:	f104 0e14 	add.w	lr, r4, #20
 8022c74:	46a9      	mov	r9, r5
 8022c76:	f04f 0c00 	mov.w	ip, #0
 8022c7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8022c7e:	f8d9 1000 	ldr.w	r1, [r9]
 8022c82:	fa1f fb82 	uxth.w	fp, r2
 8022c86:	b289      	uxth	r1, r1
 8022c88:	fb0a 110b 	mla	r1, sl, fp, r1
 8022c8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8022c90:	f8d9 2000 	ldr.w	r2, [r9]
 8022c94:	4461      	add	r1, ip
 8022c96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8022c9a:	fb0a c20b 	mla	r2, sl, fp, ip
 8022c9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8022ca2:	b289      	uxth	r1, r1
 8022ca4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8022ca8:	4577      	cmp	r7, lr
 8022caa:	f849 1b04 	str.w	r1, [r9], #4
 8022cae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8022cb2:	d8e2      	bhi.n	8022c7a <__multiply+0xb2>
 8022cb4:	9a01      	ldr	r2, [sp, #4]
 8022cb6:	f845 c002 	str.w	ip, [r5, r2]
 8022cba:	9a03      	ldr	r2, [sp, #12]
 8022cbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8022cc0:	3304      	adds	r3, #4
 8022cc2:	f1b9 0f00 	cmp.w	r9, #0
 8022cc6:	d020      	beq.n	8022d0a <__multiply+0x142>
 8022cc8:	6829      	ldr	r1, [r5, #0]
 8022cca:	f104 0c14 	add.w	ip, r4, #20
 8022cce:	46ae      	mov	lr, r5
 8022cd0:	f04f 0a00 	mov.w	sl, #0
 8022cd4:	f8bc b000 	ldrh.w	fp, [ip]
 8022cd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8022cdc:	fb09 220b 	mla	r2, r9, fp, r2
 8022ce0:	4492      	add	sl, r2
 8022ce2:	b289      	uxth	r1, r1
 8022ce4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8022ce8:	f84e 1b04 	str.w	r1, [lr], #4
 8022cec:	f85c 2b04 	ldr.w	r2, [ip], #4
 8022cf0:	f8be 1000 	ldrh.w	r1, [lr]
 8022cf4:	0c12      	lsrs	r2, r2, #16
 8022cf6:	fb09 1102 	mla	r1, r9, r2, r1
 8022cfa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8022cfe:	4567      	cmp	r7, ip
 8022d00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8022d04:	d8e6      	bhi.n	8022cd4 <__multiply+0x10c>
 8022d06:	9a01      	ldr	r2, [sp, #4]
 8022d08:	50a9      	str	r1, [r5, r2]
 8022d0a:	3504      	adds	r5, #4
 8022d0c:	e79a      	b.n	8022c44 <__multiply+0x7c>
 8022d0e:	3e01      	subs	r6, #1
 8022d10:	e79c      	b.n	8022c4c <__multiply+0x84>
 8022d12:	bf00      	nop
 8022d14:	0802531b 	.word	0x0802531b
 8022d18:	0802538c 	.word	0x0802538c

08022d1c <__pow5mult>:
 8022d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022d20:	4615      	mov	r5, r2
 8022d22:	f012 0203 	ands.w	r2, r2, #3
 8022d26:	4606      	mov	r6, r0
 8022d28:	460f      	mov	r7, r1
 8022d2a:	d007      	beq.n	8022d3c <__pow5mult+0x20>
 8022d2c:	4c25      	ldr	r4, [pc, #148]	; (8022dc4 <__pow5mult+0xa8>)
 8022d2e:	3a01      	subs	r2, #1
 8022d30:	2300      	movs	r3, #0
 8022d32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022d36:	f7ff fe9b 	bl	8022a70 <__multadd>
 8022d3a:	4607      	mov	r7, r0
 8022d3c:	10ad      	asrs	r5, r5, #2
 8022d3e:	d03d      	beq.n	8022dbc <__pow5mult+0xa0>
 8022d40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8022d42:	b97c      	cbnz	r4, 8022d64 <__pow5mult+0x48>
 8022d44:	2010      	movs	r0, #16
 8022d46:	f7ff fe29 	bl	802299c <malloc>
 8022d4a:	4602      	mov	r2, r0
 8022d4c:	6270      	str	r0, [r6, #36]	; 0x24
 8022d4e:	b928      	cbnz	r0, 8022d5c <__pow5mult+0x40>
 8022d50:	4b1d      	ldr	r3, [pc, #116]	; (8022dc8 <__pow5mult+0xac>)
 8022d52:	481e      	ldr	r0, [pc, #120]	; (8022dcc <__pow5mult+0xb0>)
 8022d54:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8022d58:	f000 fcaa 	bl	80236b0 <__assert_func>
 8022d5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8022d60:	6004      	str	r4, [r0, #0]
 8022d62:	60c4      	str	r4, [r0, #12]
 8022d64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8022d68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022d6c:	b94c      	cbnz	r4, 8022d82 <__pow5mult+0x66>
 8022d6e:	f240 2171 	movw	r1, #625	; 0x271
 8022d72:	4630      	mov	r0, r6
 8022d74:	f7ff ff12 	bl	8022b9c <__i2b>
 8022d78:	2300      	movs	r3, #0
 8022d7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8022d7e:	4604      	mov	r4, r0
 8022d80:	6003      	str	r3, [r0, #0]
 8022d82:	f04f 0900 	mov.w	r9, #0
 8022d86:	07eb      	lsls	r3, r5, #31
 8022d88:	d50a      	bpl.n	8022da0 <__pow5mult+0x84>
 8022d8a:	4639      	mov	r1, r7
 8022d8c:	4622      	mov	r2, r4
 8022d8e:	4630      	mov	r0, r6
 8022d90:	f7ff ff1a 	bl	8022bc8 <__multiply>
 8022d94:	4639      	mov	r1, r7
 8022d96:	4680      	mov	r8, r0
 8022d98:	4630      	mov	r0, r6
 8022d9a:	f7ff fe47 	bl	8022a2c <_Bfree>
 8022d9e:	4647      	mov	r7, r8
 8022da0:	106d      	asrs	r5, r5, #1
 8022da2:	d00b      	beq.n	8022dbc <__pow5mult+0xa0>
 8022da4:	6820      	ldr	r0, [r4, #0]
 8022da6:	b938      	cbnz	r0, 8022db8 <__pow5mult+0x9c>
 8022da8:	4622      	mov	r2, r4
 8022daa:	4621      	mov	r1, r4
 8022dac:	4630      	mov	r0, r6
 8022dae:	f7ff ff0b 	bl	8022bc8 <__multiply>
 8022db2:	6020      	str	r0, [r4, #0]
 8022db4:	f8c0 9000 	str.w	r9, [r0]
 8022db8:	4604      	mov	r4, r0
 8022dba:	e7e4      	b.n	8022d86 <__pow5mult+0x6a>
 8022dbc:	4638      	mov	r0, r7
 8022dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022dc2:	bf00      	nop
 8022dc4:	080254d8 	.word	0x080254d8
 8022dc8:	080252a9 	.word	0x080252a9
 8022dcc:	0802538c 	.word	0x0802538c

08022dd0 <__lshift>:
 8022dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022dd4:	460c      	mov	r4, r1
 8022dd6:	6849      	ldr	r1, [r1, #4]
 8022dd8:	6923      	ldr	r3, [r4, #16]
 8022dda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8022dde:	68a3      	ldr	r3, [r4, #8]
 8022de0:	4607      	mov	r7, r0
 8022de2:	4691      	mov	r9, r2
 8022de4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022de8:	f108 0601 	add.w	r6, r8, #1
 8022dec:	42b3      	cmp	r3, r6
 8022dee:	db0b      	blt.n	8022e08 <__lshift+0x38>
 8022df0:	4638      	mov	r0, r7
 8022df2:	f7ff fddb 	bl	80229ac <_Balloc>
 8022df6:	4605      	mov	r5, r0
 8022df8:	b948      	cbnz	r0, 8022e0e <__lshift+0x3e>
 8022dfa:	4602      	mov	r2, r0
 8022dfc:	4b2a      	ldr	r3, [pc, #168]	; (8022ea8 <__lshift+0xd8>)
 8022dfe:	482b      	ldr	r0, [pc, #172]	; (8022eac <__lshift+0xdc>)
 8022e00:	f240 11d9 	movw	r1, #473	; 0x1d9
 8022e04:	f000 fc54 	bl	80236b0 <__assert_func>
 8022e08:	3101      	adds	r1, #1
 8022e0a:	005b      	lsls	r3, r3, #1
 8022e0c:	e7ee      	b.n	8022dec <__lshift+0x1c>
 8022e0e:	2300      	movs	r3, #0
 8022e10:	f100 0114 	add.w	r1, r0, #20
 8022e14:	f100 0210 	add.w	r2, r0, #16
 8022e18:	4618      	mov	r0, r3
 8022e1a:	4553      	cmp	r3, sl
 8022e1c:	db37      	blt.n	8022e8e <__lshift+0xbe>
 8022e1e:	6920      	ldr	r0, [r4, #16]
 8022e20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8022e24:	f104 0314 	add.w	r3, r4, #20
 8022e28:	f019 091f 	ands.w	r9, r9, #31
 8022e2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8022e30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8022e34:	d02f      	beq.n	8022e96 <__lshift+0xc6>
 8022e36:	f1c9 0e20 	rsb	lr, r9, #32
 8022e3a:	468a      	mov	sl, r1
 8022e3c:	f04f 0c00 	mov.w	ip, #0
 8022e40:	681a      	ldr	r2, [r3, #0]
 8022e42:	fa02 f209 	lsl.w	r2, r2, r9
 8022e46:	ea42 020c 	orr.w	r2, r2, ip
 8022e4a:	f84a 2b04 	str.w	r2, [sl], #4
 8022e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022e52:	4298      	cmp	r0, r3
 8022e54:	fa22 fc0e 	lsr.w	ip, r2, lr
 8022e58:	d8f2      	bhi.n	8022e40 <__lshift+0x70>
 8022e5a:	1b03      	subs	r3, r0, r4
 8022e5c:	3b15      	subs	r3, #21
 8022e5e:	f023 0303 	bic.w	r3, r3, #3
 8022e62:	3304      	adds	r3, #4
 8022e64:	f104 0215 	add.w	r2, r4, #21
 8022e68:	4290      	cmp	r0, r2
 8022e6a:	bf38      	it	cc
 8022e6c:	2304      	movcc	r3, #4
 8022e6e:	f841 c003 	str.w	ip, [r1, r3]
 8022e72:	f1bc 0f00 	cmp.w	ip, #0
 8022e76:	d001      	beq.n	8022e7c <__lshift+0xac>
 8022e78:	f108 0602 	add.w	r6, r8, #2
 8022e7c:	3e01      	subs	r6, #1
 8022e7e:	4638      	mov	r0, r7
 8022e80:	612e      	str	r6, [r5, #16]
 8022e82:	4621      	mov	r1, r4
 8022e84:	f7ff fdd2 	bl	8022a2c <_Bfree>
 8022e88:	4628      	mov	r0, r5
 8022e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8022e92:	3301      	adds	r3, #1
 8022e94:	e7c1      	b.n	8022e1a <__lshift+0x4a>
 8022e96:	3904      	subs	r1, #4
 8022e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8022e9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8022ea0:	4298      	cmp	r0, r3
 8022ea2:	d8f9      	bhi.n	8022e98 <__lshift+0xc8>
 8022ea4:	e7ea      	b.n	8022e7c <__lshift+0xac>
 8022ea6:	bf00      	nop
 8022ea8:	0802531b 	.word	0x0802531b
 8022eac:	0802538c 	.word	0x0802538c

08022eb0 <__mcmp>:
 8022eb0:	b530      	push	{r4, r5, lr}
 8022eb2:	6902      	ldr	r2, [r0, #16]
 8022eb4:	690c      	ldr	r4, [r1, #16]
 8022eb6:	1b12      	subs	r2, r2, r4
 8022eb8:	d10e      	bne.n	8022ed8 <__mcmp+0x28>
 8022eba:	f100 0314 	add.w	r3, r0, #20
 8022ebe:	3114      	adds	r1, #20
 8022ec0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8022ec4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022ec8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022ecc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8022ed0:	42a5      	cmp	r5, r4
 8022ed2:	d003      	beq.n	8022edc <__mcmp+0x2c>
 8022ed4:	d305      	bcc.n	8022ee2 <__mcmp+0x32>
 8022ed6:	2201      	movs	r2, #1
 8022ed8:	4610      	mov	r0, r2
 8022eda:	bd30      	pop	{r4, r5, pc}
 8022edc:	4283      	cmp	r3, r0
 8022ede:	d3f3      	bcc.n	8022ec8 <__mcmp+0x18>
 8022ee0:	e7fa      	b.n	8022ed8 <__mcmp+0x28>
 8022ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8022ee6:	e7f7      	b.n	8022ed8 <__mcmp+0x28>

08022ee8 <__mdiff>:
 8022ee8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022eec:	460c      	mov	r4, r1
 8022eee:	4606      	mov	r6, r0
 8022ef0:	4611      	mov	r1, r2
 8022ef2:	4620      	mov	r0, r4
 8022ef4:	4690      	mov	r8, r2
 8022ef6:	f7ff ffdb 	bl	8022eb0 <__mcmp>
 8022efa:	1e05      	subs	r5, r0, #0
 8022efc:	d110      	bne.n	8022f20 <__mdiff+0x38>
 8022efe:	4629      	mov	r1, r5
 8022f00:	4630      	mov	r0, r6
 8022f02:	f7ff fd53 	bl	80229ac <_Balloc>
 8022f06:	b930      	cbnz	r0, 8022f16 <__mdiff+0x2e>
 8022f08:	4b3a      	ldr	r3, [pc, #232]	; (8022ff4 <__mdiff+0x10c>)
 8022f0a:	4602      	mov	r2, r0
 8022f0c:	f240 2132 	movw	r1, #562	; 0x232
 8022f10:	4839      	ldr	r0, [pc, #228]	; (8022ff8 <__mdiff+0x110>)
 8022f12:	f000 fbcd 	bl	80236b0 <__assert_func>
 8022f16:	2301      	movs	r3, #1
 8022f18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8022f1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f20:	bfa4      	itt	ge
 8022f22:	4643      	movge	r3, r8
 8022f24:	46a0      	movge	r8, r4
 8022f26:	4630      	mov	r0, r6
 8022f28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022f2c:	bfa6      	itte	ge
 8022f2e:	461c      	movge	r4, r3
 8022f30:	2500      	movge	r5, #0
 8022f32:	2501      	movlt	r5, #1
 8022f34:	f7ff fd3a 	bl	80229ac <_Balloc>
 8022f38:	b920      	cbnz	r0, 8022f44 <__mdiff+0x5c>
 8022f3a:	4b2e      	ldr	r3, [pc, #184]	; (8022ff4 <__mdiff+0x10c>)
 8022f3c:	4602      	mov	r2, r0
 8022f3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8022f42:	e7e5      	b.n	8022f10 <__mdiff+0x28>
 8022f44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8022f48:	6926      	ldr	r6, [r4, #16]
 8022f4a:	60c5      	str	r5, [r0, #12]
 8022f4c:	f104 0914 	add.w	r9, r4, #20
 8022f50:	f108 0514 	add.w	r5, r8, #20
 8022f54:	f100 0e14 	add.w	lr, r0, #20
 8022f58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8022f5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8022f60:	f108 0210 	add.w	r2, r8, #16
 8022f64:	46f2      	mov	sl, lr
 8022f66:	2100      	movs	r1, #0
 8022f68:	f859 3b04 	ldr.w	r3, [r9], #4
 8022f6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8022f70:	fa1f f883 	uxth.w	r8, r3
 8022f74:	fa11 f18b 	uxtah	r1, r1, fp
 8022f78:	0c1b      	lsrs	r3, r3, #16
 8022f7a:	eba1 0808 	sub.w	r8, r1, r8
 8022f7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8022f82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8022f86:	fa1f f888 	uxth.w	r8, r8
 8022f8a:	1419      	asrs	r1, r3, #16
 8022f8c:	454e      	cmp	r6, r9
 8022f8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8022f92:	f84a 3b04 	str.w	r3, [sl], #4
 8022f96:	d8e7      	bhi.n	8022f68 <__mdiff+0x80>
 8022f98:	1b33      	subs	r3, r6, r4
 8022f9a:	3b15      	subs	r3, #21
 8022f9c:	f023 0303 	bic.w	r3, r3, #3
 8022fa0:	3304      	adds	r3, #4
 8022fa2:	3415      	adds	r4, #21
 8022fa4:	42a6      	cmp	r6, r4
 8022fa6:	bf38      	it	cc
 8022fa8:	2304      	movcc	r3, #4
 8022faa:	441d      	add	r5, r3
 8022fac:	4473      	add	r3, lr
 8022fae:	469e      	mov	lr, r3
 8022fb0:	462e      	mov	r6, r5
 8022fb2:	4566      	cmp	r6, ip
 8022fb4:	d30e      	bcc.n	8022fd4 <__mdiff+0xec>
 8022fb6:	f10c 0203 	add.w	r2, ip, #3
 8022fba:	1b52      	subs	r2, r2, r5
 8022fbc:	f022 0203 	bic.w	r2, r2, #3
 8022fc0:	3d03      	subs	r5, #3
 8022fc2:	45ac      	cmp	ip, r5
 8022fc4:	bf38      	it	cc
 8022fc6:	2200      	movcc	r2, #0
 8022fc8:	441a      	add	r2, r3
 8022fca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8022fce:	b17b      	cbz	r3, 8022ff0 <__mdiff+0x108>
 8022fd0:	6107      	str	r7, [r0, #16]
 8022fd2:	e7a3      	b.n	8022f1c <__mdiff+0x34>
 8022fd4:	f856 8b04 	ldr.w	r8, [r6], #4
 8022fd8:	fa11 f288 	uxtah	r2, r1, r8
 8022fdc:	1414      	asrs	r4, r2, #16
 8022fde:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8022fe2:	b292      	uxth	r2, r2
 8022fe4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8022fe8:	f84e 2b04 	str.w	r2, [lr], #4
 8022fec:	1421      	asrs	r1, r4, #16
 8022fee:	e7e0      	b.n	8022fb2 <__mdiff+0xca>
 8022ff0:	3f01      	subs	r7, #1
 8022ff2:	e7ea      	b.n	8022fca <__mdiff+0xe2>
 8022ff4:	0802531b 	.word	0x0802531b
 8022ff8:	0802538c 	.word	0x0802538c

08022ffc <__d2b>:
 8022ffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8023000:	4689      	mov	r9, r1
 8023002:	2101      	movs	r1, #1
 8023004:	ec57 6b10 	vmov	r6, r7, d0
 8023008:	4690      	mov	r8, r2
 802300a:	f7ff fccf 	bl	80229ac <_Balloc>
 802300e:	4604      	mov	r4, r0
 8023010:	b930      	cbnz	r0, 8023020 <__d2b+0x24>
 8023012:	4602      	mov	r2, r0
 8023014:	4b25      	ldr	r3, [pc, #148]	; (80230ac <__d2b+0xb0>)
 8023016:	4826      	ldr	r0, [pc, #152]	; (80230b0 <__d2b+0xb4>)
 8023018:	f240 310a 	movw	r1, #778	; 0x30a
 802301c:	f000 fb48 	bl	80236b0 <__assert_func>
 8023020:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8023024:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8023028:	bb35      	cbnz	r5, 8023078 <__d2b+0x7c>
 802302a:	2e00      	cmp	r6, #0
 802302c:	9301      	str	r3, [sp, #4]
 802302e:	d028      	beq.n	8023082 <__d2b+0x86>
 8023030:	4668      	mov	r0, sp
 8023032:	9600      	str	r6, [sp, #0]
 8023034:	f7ff fd82 	bl	8022b3c <__lo0bits>
 8023038:	9900      	ldr	r1, [sp, #0]
 802303a:	b300      	cbz	r0, 802307e <__d2b+0x82>
 802303c:	9a01      	ldr	r2, [sp, #4]
 802303e:	f1c0 0320 	rsb	r3, r0, #32
 8023042:	fa02 f303 	lsl.w	r3, r2, r3
 8023046:	430b      	orrs	r3, r1
 8023048:	40c2      	lsrs	r2, r0
 802304a:	6163      	str	r3, [r4, #20]
 802304c:	9201      	str	r2, [sp, #4]
 802304e:	9b01      	ldr	r3, [sp, #4]
 8023050:	61a3      	str	r3, [r4, #24]
 8023052:	2b00      	cmp	r3, #0
 8023054:	bf14      	ite	ne
 8023056:	2202      	movne	r2, #2
 8023058:	2201      	moveq	r2, #1
 802305a:	6122      	str	r2, [r4, #16]
 802305c:	b1d5      	cbz	r5, 8023094 <__d2b+0x98>
 802305e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8023062:	4405      	add	r5, r0
 8023064:	f8c9 5000 	str.w	r5, [r9]
 8023068:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802306c:	f8c8 0000 	str.w	r0, [r8]
 8023070:	4620      	mov	r0, r4
 8023072:	b003      	add	sp, #12
 8023074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802307c:	e7d5      	b.n	802302a <__d2b+0x2e>
 802307e:	6161      	str	r1, [r4, #20]
 8023080:	e7e5      	b.n	802304e <__d2b+0x52>
 8023082:	a801      	add	r0, sp, #4
 8023084:	f7ff fd5a 	bl	8022b3c <__lo0bits>
 8023088:	9b01      	ldr	r3, [sp, #4]
 802308a:	6163      	str	r3, [r4, #20]
 802308c:	2201      	movs	r2, #1
 802308e:	6122      	str	r2, [r4, #16]
 8023090:	3020      	adds	r0, #32
 8023092:	e7e3      	b.n	802305c <__d2b+0x60>
 8023094:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8023098:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802309c:	f8c9 0000 	str.w	r0, [r9]
 80230a0:	6918      	ldr	r0, [r3, #16]
 80230a2:	f7ff fd2b 	bl	8022afc <__hi0bits>
 80230a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80230aa:	e7df      	b.n	802306c <__d2b+0x70>
 80230ac:	0802531b 	.word	0x0802531b
 80230b0:	0802538c 	.word	0x0802538c

080230b4 <_calloc_r>:
 80230b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80230b6:	fba1 2402 	umull	r2, r4, r1, r2
 80230ba:	b94c      	cbnz	r4, 80230d0 <_calloc_r+0x1c>
 80230bc:	4611      	mov	r1, r2
 80230be:	9201      	str	r2, [sp, #4]
 80230c0:	f000 f87a 	bl	80231b8 <_malloc_r>
 80230c4:	9a01      	ldr	r2, [sp, #4]
 80230c6:	4605      	mov	r5, r0
 80230c8:	b930      	cbnz	r0, 80230d8 <_calloc_r+0x24>
 80230ca:	4628      	mov	r0, r5
 80230cc:	b003      	add	sp, #12
 80230ce:	bd30      	pop	{r4, r5, pc}
 80230d0:	220c      	movs	r2, #12
 80230d2:	6002      	str	r2, [r0, #0]
 80230d4:	2500      	movs	r5, #0
 80230d6:	e7f8      	b.n	80230ca <_calloc_r+0x16>
 80230d8:	4621      	mov	r1, r4
 80230da:	f7fd fdeb 	bl	8020cb4 <memset>
 80230de:	e7f4      	b.n	80230ca <_calloc_r+0x16>

080230e0 <_free_r>:
 80230e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80230e2:	2900      	cmp	r1, #0
 80230e4:	d044      	beq.n	8023170 <_free_r+0x90>
 80230e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80230ea:	9001      	str	r0, [sp, #4]
 80230ec:	2b00      	cmp	r3, #0
 80230ee:	f1a1 0404 	sub.w	r4, r1, #4
 80230f2:	bfb8      	it	lt
 80230f4:	18e4      	addlt	r4, r4, r3
 80230f6:	f000 fb61 	bl	80237bc <__malloc_lock>
 80230fa:	4a1e      	ldr	r2, [pc, #120]	; (8023174 <_free_r+0x94>)
 80230fc:	9801      	ldr	r0, [sp, #4]
 80230fe:	6813      	ldr	r3, [r2, #0]
 8023100:	b933      	cbnz	r3, 8023110 <_free_r+0x30>
 8023102:	6063      	str	r3, [r4, #4]
 8023104:	6014      	str	r4, [r2, #0]
 8023106:	b003      	add	sp, #12
 8023108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802310c:	f000 bb5c 	b.w	80237c8 <__malloc_unlock>
 8023110:	42a3      	cmp	r3, r4
 8023112:	d908      	bls.n	8023126 <_free_r+0x46>
 8023114:	6825      	ldr	r5, [r4, #0]
 8023116:	1961      	adds	r1, r4, r5
 8023118:	428b      	cmp	r3, r1
 802311a:	bf01      	itttt	eq
 802311c:	6819      	ldreq	r1, [r3, #0]
 802311e:	685b      	ldreq	r3, [r3, #4]
 8023120:	1949      	addeq	r1, r1, r5
 8023122:	6021      	streq	r1, [r4, #0]
 8023124:	e7ed      	b.n	8023102 <_free_r+0x22>
 8023126:	461a      	mov	r2, r3
 8023128:	685b      	ldr	r3, [r3, #4]
 802312a:	b10b      	cbz	r3, 8023130 <_free_r+0x50>
 802312c:	42a3      	cmp	r3, r4
 802312e:	d9fa      	bls.n	8023126 <_free_r+0x46>
 8023130:	6811      	ldr	r1, [r2, #0]
 8023132:	1855      	adds	r5, r2, r1
 8023134:	42a5      	cmp	r5, r4
 8023136:	d10b      	bne.n	8023150 <_free_r+0x70>
 8023138:	6824      	ldr	r4, [r4, #0]
 802313a:	4421      	add	r1, r4
 802313c:	1854      	adds	r4, r2, r1
 802313e:	42a3      	cmp	r3, r4
 8023140:	6011      	str	r1, [r2, #0]
 8023142:	d1e0      	bne.n	8023106 <_free_r+0x26>
 8023144:	681c      	ldr	r4, [r3, #0]
 8023146:	685b      	ldr	r3, [r3, #4]
 8023148:	6053      	str	r3, [r2, #4]
 802314a:	4421      	add	r1, r4
 802314c:	6011      	str	r1, [r2, #0]
 802314e:	e7da      	b.n	8023106 <_free_r+0x26>
 8023150:	d902      	bls.n	8023158 <_free_r+0x78>
 8023152:	230c      	movs	r3, #12
 8023154:	6003      	str	r3, [r0, #0]
 8023156:	e7d6      	b.n	8023106 <_free_r+0x26>
 8023158:	6825      	ldr	r5, [r4, #0]
 802315a:	1961      	adds	r1, r4, r5
 802315c:	428b      	cmp	r3, r1
 802315e:	bf04      	itt	eq
 8023160:	6819      	ldreq	r1, [r3, #0]
 8023162:	685b      	ldreq	r3, [r3, #4]
 8023164:	6063      	str	r3, [r4, #4]
 8023166:	bf04      	itt	eq
 8023168:	1949      	addeq	r1, r1, r5
 802316a:	6021      	streq	r1, [r4, #0]
 802316c:	6054      	str	r4, [r2, #4]
 802316e:	e7ca      	b.n	8023106 <_free_r+0x26>
 8023170:	b003      	add	sp, #12
 8023172:	bd30      	pop	{r4, r5, pc}
 8023174:	2000fdd4 	.word	0x2000fdd4

08023178 <sbrk_aligned>:
 8023178:	b570      	push	{r4, r5, r6, lr}
 802317a:	4e0e      	ldr	r6, [pc, #56]	; (80231b4 <sbrk_aligned+0x3c>)
 802317c:	460c      	mov	r4, r1
 802317e:	6831      	ldr	r1, [r6, #0]
 8023180:	4605      	mov	r5, r0
 8023182:	b911      	cbnz	r1, 802318a <sbrk_aligned+0x12>
 8023184:	f000 fa2e 	bl	80235e4 <_sbrk_r>
 8023188:	6030      	str	r0, [r6, #0]
 802318a:	4621      	mov	r1, r4
 802318c:	4628      	mov	r0, r5
 802318e:	f000 fa29 	bl	80235e4 <_sbrk_r>
 8023192:	1c43      	adds	r3, r0, #1
 8023194:	d00a      	beq.n	80231ac <sbrk_aligned+0x34>
 8023196:	1cc4      	adds	r4, r0, #3
 8023198:	f024 0403 	bic.w	r4, r4, #3
 802319c:	42a0      	cmp	r0, r4
 802319e:	d007      	beq.n	80231b0 <sbrk_aligned+0x38>
 80231a0:	1a21      	subs	r1, r4, r0
 80231a2:	4628      	mov	r0, r5
 80231a4:	f000 fa1e 	bl	80235e4 <_sbrk_r>
 80231a8:	3001      	adds	r0, #1
 80231aa:	d101      	bne.n	80231b0 <sbrk_aligned+0x38>
 80231ac:	f04f 34ff 	mov.w	r4, #4294967295
 80231b0:	4620      	mov	r0, r4
 80231b2:	bd70      	pop	{r4, r5, r6, pc}
 80231b4:	2000fdd8 	.word	0x2000fdd8

080231b8 <_malloc_r>:
 80231b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80231bc:	1ccd      	adds	r5, r1, #3
 80231be:	f025 0503 	bic.w	r5, r5, #3
 80231c2:	3508      	adds	r5, #8
 80231c4:	2d0c      	cmp	r5, #12
 80231c6:	bf38      	it	cc
 80231c8:	250c      	movcc	r5, #12
 80231ca:	2d00      	cmp	r5, #0
 80231cc:	4607      	mov	r7, r0
 80231ce:	db01      	blt.n	80231d4 <_malloc_r+0x1c>
 80231d0:	42a9      	cmp	r1, r5
 80231d2:	d905      	bls.n	80231e0 <_malloc_r+0x28>
 80231d4:	230c      	movs	r3, #12
 80231d6:	603b      	str	r3, [r7, #0]
 80231d8:	2600      	movs	r6, #0
 80231da:	4630      	mov	r0, r6
 80231dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80231e0:	4e2e      	ldr	r6, [pc, #184]	; (802329c <_malloc_r+0xe4>)
 80231e2:	f000 faeb 	bl	80237bc <__malloc_lock>
 80231e6:	6833      	ldr	r3, [r6, #0]
 80231e8:	461c      	mov	r4, r3
 80231ea:	bb34      	cbnz	r4, 802323a <_malloc_r+0x82>
 80231ec:	4629      	mov	r1, r5
 80231ee:	4638      	mov	r0, r7
 80231f0:	f7ff ffc2 	bl	8023178 <sbrk_aligned>
 80231f4:	1c43      	adds	r3, r0, #1
 80231f6:	4604      	mov	r4, r0
 80231f8:	d14d      	bne.n	8023296 <_malloc_r+0xde>
 80231fa:	6834      	ldr	r4, [r6, #0]
 80231fc:	4626      	mov	r6, r4
 80231fe:	2e00      	cmp	r6, #0
 8023200:	d140      	bne.n	8023284 <_malloc_r+0xcc>
 8023202:	6823      	ldr	r3, [r4, #0]
 8023204:	4631      	mov	r1, r6
 8023206:	4638      	mov	r0, r7
 8023208:	eb04 0803 	add.w	r8, r4, r3
 802320c:	f000 f9ea 	bl	80235e4 <_sbrk_r>
 8023210:	4580      	cmp	r8, r0
 8023212:	d13a      	bne.n	802328a <_malloc_r+0xd2>
 8023214:	6821      	ldr	r1, [r4, #0]
 8023216:	3503      	adds	r5, #3
 8023218:	1a6d      	subs	r5, r5, r1
 802321a:	f025 0503 	bic.w	r5, r5, #3
 802321e:	3508      	adds	r5, #8
 8023220:	2d0c      	cmp	r5, #12
 8023222:	bf38      	it	cc
 8023224:	250c      	movcc	r5, #12
 8023226:	4629      	mov	r1, r5
 8023228:	4638      	mov	r0, r7
 802322a:	f7ff ffa5 	bl	8023178 <sbrk_aligned>
 802322e:	3001      	adds	r0, #1
 8023230:	d02b      	beq.n	802328a <_malloc_r+0xd2>
 8023232:	6823      	ldr	r3, [r4, #0]
 8023234:	442b      	add	r3, r5
 8023236:	6023      	str	r3, [r4, #0]
 8023238:	e00e      	b.n	8023258 <_malloc_r+0xa0>
 802323a:	6822      	ldr	r2, [r4, #0]
 802323c:	1b52      	subs	r2, r2, r5
 802323e:	d41e      	bmi.n	802327e <_malloc_r+0xc6>
 8023240:	2a0b      	cmp	r2, #11
 8023242:	d916      	bls.n	8023272 <_malloc_r+0xba>
 8023244:	1961      	adds	r1, r4, r5
 8023246:	42a3      	cmp	r3, r4
 8023248:	6025      	str	r5, [r4, #0]
 802324a:	bf18      	it	ne
 802324c:	6059      	strne	r1, [r3, #4]
 802324e:	6863      	ldr	r3, [r4, #4]
 8023250:	bf08      	it	eq
 8023252:	6031      	streq	r1, [r6, #0]
 8023254:	5162      	str	r2, [r4, r5]
 8023256:	604b      	str	r3, [r1, #4]
 8023258:	4638      	mov	r0, r7
 802325a:	f104 060b 	add.w	r6, r4, #11
 802325e:	f000 fab3 	bl	80237c8 <__malloc_unlock>
 8023262:	f026 0607 	bic.w	r6, r6, #7
 8023266:	1d23      	adds	r3, r4, #4
 8023268:	1af2      	subs	r2, r6, r3
 802326a:	d0b6      	beq.n	80231da <_malloc_r+0x22>
 802326c:	1b9b      	subs	r3, r3, r6
 802326e:	50a3      	str	r3, [r4, r2]
 8023270:	e7b3      	b.n	80231da <_malloc_r+0x22>
 8023272:	6862      	ldr	r2, [r4, #4]
 8023274:	42a3      	cmp	r3, r4
 8023276:	bf0c      	ite	eq
 8023278:	6032      	streq	r2, [r6, #0]
 802327a:	605a      	strne	r2, [r3, #4]
 802327c:	e7ec      	b.n	8023258 <_malloc_r+0xa0>
 802327e:	4623      	mov	r3, r4
 8023280:	6864      	ldr	r4, [r4, #4]
 8023282:	e7b2      	b.n	80231ea <_malloc_r+0x32>
 8023284:	4634      	mov	r4, r6
 8023286:	6876      	ldr	r6, [r6, #4]
 8023288:	e7b9      	b.n	80231fe <_malloc_r+0x46>
 802328a:	230c      	movs	r3, #12
 802328c:	603b      	str	r3, [r7, #0]
 802328e:	4638      	mov	r0, r7
 8023290:	f000 fa9a 	bl	80237c8 <__malloc_unlock>
 8023294:	e7a1      	b.n	80231da <_malloc_r+0x22>
 8023296:	6025      	str	r5, [r4, #0]
 8023298:	e7de      	b.n	8023258 <_malloc_r+0xa0>
 802329a:	bf00      	nop
 802329c:	2000fdd4 	.word	0x2000fdd4

080232a0 <__sfputc_r>:
 80232a0:	6893      	ldr	r3, [r2, #8]
 80232a2:	3b01      	subs	r3, #1
 80232a4:	2b00      	cmp	r3, #0
 80232a6:	b410      	push	{r4}
 80232a8:	6093      	str	r3, [r2, #8]
 80232aa:	da08      	bge.n	80232be <__sfputc_r+0x1e>
 80232ac:	6994      	ldr	r4, [r2, #24]
 80232ae:	42a3      	cmp	r3, r4
 80232b0:	db01      	blt.n	80232b6 <__sfputc_r+0x16>
 80232b2:	290a      	cmp	r1, #10
 80232b4:	d103      	bne.n	80232be <__sfputc_r+0x1e>
 80232b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80232ba:	f7fe ba11 	b.w	80216e0 <__swbuf_r>
 80232be:	6813      	ldr	r3, [r2, #0]
 80232c0:	1c58      	adds	r0, r3, #1
 80232c2:	6010      	str	r0, [r2, #0]
 80232c4:	7019      	strb	r1, [r3, #0]
 80232c6:	4608      	mov	r0, r1
 80232c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80232cc:	4770      	bx	lr

080232ce <__sfputs_r>:
 80232ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80232d0:	4606      	mov	r6, r0
 80232d2:	460f      	mov	r7, r1
 80232d4:	4614      	mov	r4, r2
 80232d6:	18d5      	adds	r5, r2, r3
 80232d8:	42ac      	cmp	r4, r5
 80232da:	d101      	bne.n	80232e0 <__sfputs_r+0x12>
 80232dc:	2000      	movs	r0, #0
 80232de:	e007      	b.n	80232f0 <__sfputs_r+0x22>
 80232e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80232e4:	463a      	mov	r2, r7
 80232e6:	4630      	mov	r0, r6
 80232e8:	f7ff ffda 	bl	80232a0 <__sfputc_r>
 80232ec:	1c43      	adds	r3, r0, #1
 80232ee:	d1f3      	bne.n	80232d8 <__sfputs_r+0xa>
 80232f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080232f4 <_vfiprintf_r>:
 80232f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232f8:	460d      	mov	r5, r1
 80232fa:	b09d      	sub	sp, #116	; 0x74
 80232fc:	4614      	mov	r4, r2
 80232fe:	4698      	mov	r8, r3
 8023300:	4606      	mov	r6, r0
 8023302:	b118      	cbz	r0, 802330c <_vfiprintf_r+0x18>
 8023304:	6983      	ldr	r3, [r0, #24]
 8023306:	b90b      	cbnz	r3, 802330c <_vfiprintf_r+0x18>
 8023308:	f7ff fa3e 	bl	8022788 <__sinit>
 802330c:	4b89      	ldr	r3, [pc, #548]	; (8023534 <_vfiprintf_r+0x240>)
 802330e:	429d      	cmp	r5, r3
 8023310:	d11b      	bne.n	802334a <_vfiprintf_r+0x56>
 8023312:	6875      	ldr	r5, [r6, #4]
 8023314:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023316:	07d9      	lsls	r1, r3, #31
 8023318:	d405      	bmi.n	8023326 <_vfiprintf_r+0x32>
 802331a:	89ab      	ldrh	r3, [r5, #12]
 802331c:	059a      	lsls	r2, r3, #22
 802331e:	d402      	bmi.n	8023326 <_vfiprintf_r+0x32>
 8023320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023322:	f7ff fad4 	bl	80228ce <__retarget_lock_acquire_recursive>
 8023326:	89ab      	ldrh	r3, [r5, #12]
 8023328:	071b      	lsls	r3, r3, #28
 802332a:	d501      	bpl.n	8023330 <_vfiprintf_r+0x3c>
 802332c:	692b      	ldr	r3, [r5, #16]
 802332e:	b9eb      	cbnz	r3, 802336c <_vfiprintf_r+0x78>
 8023330:	4629      	mov	r1, r5
 8023332:	4630      	mov	r0, r6
 8023334:	f7fe fa26 	bl	8021784 <__swsetup_r>
 8023338:	b1c0      	cbz	r0, 802336c <_vfiprintf_r+0x78>
 802333a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802333c:	07dc      	lsls	r4, r3, #31
 802333e:	d50e      	bpl.n	802335e <_vfiprintf_r+0x6a>
 8023340:	f04f 30ff 	mov.w	r0, #4294967295
 8023344:	b01d      	add	sp, #116	; 0x74
 8023346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802334a:	4b7b      	ldr	r3, [pc, #492]	; (8023538 <_vfiprintf_r+0x244>)
 802334c:	429d      	cmp	r5, r3
 802334e:	d101      	bne.n	8023354 <_vfiprintf_r+0x60>
 8023350:	68b5      	ldr	r5, [r6, #8]
 8023352:	e7df      	b.n	8023314 <_vfiprintf_r+0x20>
 8023354:	4b79      	ldr	r3, [pc, #484]	; (802353c <_vfiprintf_r+0x248>)
 8023356:	429d      	cmp	r5, r3
 8023358:	bf08      	it	eq
 802335a:	68f5      	ldreq	r5, [r6, #12]
 802335c:	e7da      	b.n	8023314 <_vfiprintf_r+0x20>
 802335e:	89ab      	ldrh	r3, [r5, #12]
 8023360:	0598      	lsls	r0, r3, #22
 8023362:	d4ed      	bmi.n	8023340 <_vfiprintf_r+0x4c>
 8023364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023366:	f7ff fab3 	bl	80228d0 <__retarget_lock_release_recursive>
 802336a:	e7e9      	b.n	8023340 <_vfiprintf_r+0x4c>
 802336c:	2300      	movs	r3, #0
 802336e:	9309      	str	r3, [sp, #36]	; 0x24
 8023370:	2320      	movs	r3, #32
 8023372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023376:	f8cd 800c 	str.w	r8, [sp, #12]
 802337a:	2330      	movs	r3, #48	; 0x30
 802337c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023540 <_vfiprintf_r+0x24c>
 8023380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023384:	f04f 0901 	mov.w	r9, #1
 8023388:	4623      	mov	r3, r4
 802338a:	469a      	mov	sl, r3
 802338c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023390:	b10a      	cbz	r2, 8023396 <_vfiprintf_r+0xa2>
 8023392:	2a25      	cmp	r2, #37	; 0x25
 8023394:	d1f9      	bne.n	802338a <_vfiprintf_r+0x96>
 8023396:	ebba 0b04 	subs.w	fp, sl, r4
 802339a:	d00b      	beq.n	80233b4 <_vfiprintf_r+0xc0>
 802339c:	465b      	mov	r3, fp
 802339e:	4622      	mov	r2, r4
 80233a0:	4629      	mov	r1, r5
 80233a2:	4630      	mov	r0, r6
 80233a4:	f7ff ff93 	bl	80232ce <__sfputs_r>
 80233a8:	3001      	adds	r0, #1
 80233aa:	f000 80aa 	beq.w	8023502 <_vfiprintf_r+0x20e>
 80233ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80233b0:	445a      	add	r2, fp
 80233b2:	9209      	str	r2, [sp, #36]	; 0x24
 80233b4:	f89a 3000 	ldrb.w	r3, [sl]
 80233b8:	2b00      	cmp	r3, #0
 80233ba:	f000 80a2 	beq.w	8023502 <_vfiprintf_r+0x20e>
 80233be:	2300      	movs	r3, #0
 80233c0:	f04f 32ff 	mov.w	r2, #4294967295
 80233c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80233c8:	f10a 0a01 	add.w	sl, sl, #1
 80233cc:	9304      	str	r3, [sp, #16]
 80233ce:	9307      	str	r3, [sp, #28]
 80233d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80233d4:	931a      	str	r3, [sp, #104]	; 0x68
 80233d6:	4654      	mov	r4, sl
 80233d8:	2205      	movs	r2, #5
 80233da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80233de:	4858      	ldr	r0, [pc, #352]	; (8023540 <_vfiprintf_r+0x24c>)
 80233e0:	f7dc ff26 	bl	8000230 <memchr>
 80233e4:	9a04      	ldr	r2, [sp, #16]
 80233e6:	b9d8      	cbnz	r0, 8023420 <_vfiprintf_r+0x12c>
 80233e8:	06d1      	lsls	r1, r2, #27
 80233ea:	bf44      	itt	mi
 80233ec:	2320      	movmi	r3, #32
 80233ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80233f2:	0713      	lsls	r3, r2, #28
 80233f4:	bf44      	itt	mi
 80233f6:	232b      	movmi	r3, #43	; 0x2b
 80233f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80233fc:	f89a 3000 	ldrb.w	r3, [sl]
 8023400:	2b2a      	cmp	r3, #42	; 0x2a
 8023402:	d015      	beq.n	8023430 <_vfiprintf_r+0x13c>
 8023404:	9a07      	ldr	r2, [sp, #28]
 8023406:	4654      	mov	r4, sl
 8023408:	2000      	movs	r0, #0
 802340a:	f04f 0c0a 	mov.w	ip, #10
 802340e:	4621      	mov	r1, r4
 8023410:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023414:	3b30      	subs	r3, #48	; 0x30
 8023416:	2b09      	cmp	r3, #9
 8023418:	d94e      	bls.n	80234b8 <_vfiprintf_r+0x1c4>
 802341a:	b1b0      	cbz	r0, 802344a <_vfiprintf_r+0x156>
 802341c:	9207      	str	r2, [sp, #28]
 802341e:	e014      	b.n	802344a <_vfiprintf_r+0x156>
 8023420:	eba0 0308 	sub.w	r3, r0, r8
 8023424:	fa09 f303 	lsl.w	r3, r9, r3
 8023428:	4313      	orrs	r3, r2
 802342a:	9304      	str	r3, [sp, #16]
 802342c:	46a2      	mov	sl, r4
 802342e:	e7d2      	b.n	80233d6 <_vfiprintf_r+0xe2>
 8023430:	9b03      	ldr	r3, [sp, #12]
 8023432:	1d19      	adds	r1, r3, #4
 8023434:	681b      	ldr	r3, [r3, #0]
 8023436:	9103      	str	r1, [sp, #12]
 8023438:	2b00      	cmp	r3, #0
 802343a:	bfbb      	ittet	lt
 802343c:	425b      	neglt	r3, r3
 802343e:	f042 0202 	orrlt.w	r2, r2, #2
 8023442:	9307      	strge	r3, [sp, #28]
 8023444:	9307      	strlt	r3, [sp, #28]
 8023446:	bfb8      	it	lt
 8023448:	9204      	strlt	r2, [sp, #16]
 802344a:	7823      	ldrb	r3, [r4, #0]
 802344c:	2b2e      	cmp	r3, #46	; 0x2e
 802344e:	d10c      	bne.n	802346a <_vfiprintf_r+0x176>
 8023450:	7863      	ldrb	r3, [r4, #1]
 8023452:	2b2a      	cmp	r3, #42	; 0x2a
 8023454:	d135      	bne.n	80234c2 <_vfiprintf_r+0x1ce>
 8023456:	9b03      	ldr	r3, [sp, #12]
 8023458:	1d1a      	adds	r2, r3, #4
 802345a:	681b      	ldr	r3, [r3, #0]
 802345c:	9203      	str	r2, [sp, #12]
 802345e:	2b00      	cmp	r3, #0
 8023460:	bfb8      	it	lt
 8023462:	f04f 33ff 	movlt.w	r3, #4294967295
 8023466:	3402      	adds	r4, #2
 8023468:	9305      	str	r3, [sp, #20]
 802346a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023550 <_vfiprintf_r+0x25c>
 802346e:	7821      	ldrb	r1, [r4, #0]
 8023470:	2203      	movs	r2, #3
 8023472:	4650      	mov	r0, sl
 8023474:	f7dc fedc 	bl	8000230 <memchr>
 8023478:	b140      	cbz	r0, 802348c <_vfiprintf_r+0x198>
 802347a:	2340      	movs	r3, #64	; 0x40
 802347c:	eba0 000a 	sub.w	r0, r0, sl
 8023480:	fa03 f000 	lsl.w	r0, r3, r0
 8023484:	9b04      	ldr	r3, [sp, #16]
 8023486:	4303      	orrs	r3, r0
 8023488:	3401      	adds	r4, #1
 802348a:	9304      	str	r3, [sp, #16]
 802348c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023490:	482c      	ldr	r0, [pc, #176]	; (8023544 <_vfiprintf_r+0x250>)
 8023492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023496:	2206      	movs	r2, #6
 8023498:	f7dc feca 	bl	8000230 <memchr>
 802349c:	2800      	cmp	r0, #0
 802349e:	d03f      	beq.n	8023520 <_vfiprintf_r+0x22c>
 80234a0:	4b29      	ldr	r3, [pc, #164]	; (8023548 <_vfiprintf_r+0x254>)
 80234a2:	bb1b      	cbnz	r3, 80234ec <_vfiprintf_r+0x1f8>
 80234a4:	9b03      	ldr	r3, [sp, #12]
 80234a6:	3307      	adds	r3, #7
 80234a8:	f023 0307 	bic.w	r3, r3, #7
 80234ac:	3308      	adds	r3, #8
 80234ae:	9303      	str	r3, [sp, #12]
 80234b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80234b2:	443b      	add	r3, r7
 80234b4:	9309      	str	r3, [sp, #36]	; 0x24
 80234b6:	e767      	b.n	8023388 <_vfiprintf_r+0x94>
 80234b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80234bc:	460c      	mov	r4, r1
 80234be:	2001      	movs	r0, #1
 80234c0:	e7a5      	b.n	802340e <_vfiprintf_r+0x11a>
 80234c2:	2300      	movs	r3, #0
 80234c4:	3401      	adds	r4, #1
 80234c6:	9305      	str	r3, [sp, #20]
 80234c8:	4619      	mov	r1, r3
 80234ca:	f04f 0c0a 	mov.w	ip, #10
 80234ce:	4620      	mov	r0, r4
 80234d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80234d4:	3a30      	subs	r2, #48	; 0x30
 80234d6:	2a09      	cmp	r2, #9
 80234d8:	d903      	bls.n	80234e2 <_vfiprintf_r+0x1ee>
 80234da:	2b00      	cmp	r3, #0
 80234dc:	d0c5      	beq.n	802346a <_vfiprintf_r+0x176>
 80234de:	9105      	str	r1, [sp, #20]
 80234e0:	e7c3      	b.n	802346a <_vfiprintf_r+0x176>
 80234e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80234e6:	4604      	mov	r4, r0
 80234e8:	2301      	movs	r3, #1
 80234ea:	e7f0      	b.n	80234ce <_vfiprintf_r+0x1da>
 80234ec:	ab03      	add	r3, sp, #12
 80234ee:	9300      	str	r3, [sp, #0]
 80234f0:	462a      	mov	r2, r5
 80234f2:	4b16      	ldr	r3, [pc, #88]	; (802354c <_vfiprintf_r+0x258>)
 80234f4:	a904      	add	r1, sp, #16
 80234f6:	4630      	mov	r0, r6
 80234f8:	f7fd fc84 	bl	8020e04 <_printf_float>
 80234fc:	4607      	mov	r7, r0
 80234fe:	1c78      	adds	r0, r7, #1
 8023500:	d1d6      	bne.n	80234b0 <_vfiprintf_r+0x1bc>
 8023502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023504:	07d9      	lsls	r1, r3, #31
 8023506:	d405      	bmi.n	8023514 <_vfiprintf_r+0x220>
 8023508:	89ab      	ldrh	r3, [r5, #12]
 802350a:	059a      	lsls	r2, r3, #22
 802350c:	d402      	bmi.n	8023514 <_vfiprintf_r+0x220>
 802350e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023510:	f7ff f9de 	bl	80228d0 <__retarget_lock_release_recursive>
 8023514:	89ab      	ldrh	r3, [r5, #12]
 8023516:	065b      	lsls	r3, r3, #25
 8023518:	f53f af12 	bmi.w	8023340 <_vfiprintf_r+0x4c>
 802351c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802351e:	e711      	b.n	8023344 <_vfiprintf_r+0x50>
 8023520:	ab03      	add	r3, sp, #12
 8023522:	9300      	str	r3, [sp, #0]
 8023524:	462a      	mov	r2, r5
 8023526:	4b09      	ldr	r3, [pc, #36]	; (802354c <_vfiprintf_r+0x258>)
 8023528:	a904      	add	r1, sp, #16
 802352a:	4630      	mov	r0, r6
 802352c:	f7fd ff0e 	bl	802134c <_printf_i>
 8023530:	e7e4      	b.n	80234fc <_vfiprintf_r+0x208>
 8023532:	bf00      	nop
 8023534:	0802534c 	.word	0x0802534c
 8023538:	0802536c 	.word	0x0802536c
 802353c:	0802532c 	.word	0x0802532c
 8023540:	080254e4 	.word	0x080254e4
 8023544:	080254ee 	.word	0x080254ee
 8023548:	08020e05 	.word	0x08020e05
 802354c:	080232cf 	.word	0x080232cf
 8023550:	080254ea 	.word	0x080254ea

08023554 <_putc_r>:
 8023554:	b570      	push	{r4, r5, r6, lr}
 8023556:	460d      	mov	r5, r1
 8023558:	4614      	mov	r4, r2
 802355a:	4606      	mov	r6, r0
 802355c:	b118      	cbz	r0, 8023566 <_putc_r+0x12>
 802355e:	6983      	ldr	r3, [r0, #24]
 8023560:	b90b      	cbnz	r3, 8023566 <_putc_r+0x12>
 8023562:	f7ff f911 	bl	8022788 <__sinit>
 8023566:	4b1c      	ldr	r3, [pc, #112]	; (80235d8 <_putc_r+0x84>)
 8023568:	429c      	cmp	r4, r3
 802356a:	d124      	bne.n	80235b6 <_putc_r+0x62>
 802356c:	6874      	ldr	r4, [r6, #4]
 802356e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023570:	07d8      	lsls	r0, r3, #31
 8023572:	d405      	bmi.n	8023580 <_putc_r+0x2c>
 8023574:	89a3      	ldrh	r3, [r4, #12]
 8023576:	0599      	lsls	r1, r3, #22
 8023578:	d402      	bmi.n	8023580 <_putc_r+0x2c>
 802357a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802357c:	f7ff f9a7 	bl	80228ce <__retarget_lock_acquire_recursive>
 8023580:	68a3      	ldr	r3, [r4, #8]
 8023582:	3b01      	subs	r3, #1
 8023584:	2b00      	cmp	r3, #0
 8023586:	60a3      	str	r3, [r4, #8]
 8023588:	da05      	bge.n	8023596 <_putc_r+0x42>
 802358a:	69a2      	ldr	r2, [r4, #24]
 802358c:	4293      	cmp	r3, r2
 802358e:	db1c      	blt.n	80235ca <_putc_r+0x76>
 8023590:	b2eb      	uxtb	r3, r5
 8023592:	2b0a      	cmp	r3, #10
 8023594:	d019      	beq.n	80235ca <_putc_r+0x76>
 8023596:	6823      	ldr	r3, [r4, #0]
 8023598:	1c5a      	adds	r2, r3, #1
 802359a:	6022      	str	r2, [r4, #0]
 802359c:	701d      	strb	r5, [r3, #0]
 802359e:	b2ed      	uxtb	r5, r5
 80235a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80235a2:	07da      	lsls	r2, r3, #31
 80235a4:	d405      	bmi.n	80235b2 <_putc_r+0x5e>
 80235a6:	89a3      	ldrh	r3, [r4, #12]
 80235a8:	059b      	lsls	r3, r3, #22
 80235aa:	d402      	bmi.n	80235b2 <_putc_r+0x5e>
 80235ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80235ae:	f7ff f98f 	bl	80228d0 <__retarget_lock_release_recursive>
 80235b2:	4628      	mov	r0, r5
 80235b4:	bd70      	pop	{r4, r5, r6, pc}
 80235b6:	4b09      	ldr	r3, [pc, #36]	; (80235dc <_putc_r+0x88>)
 80235b8:	429c      	cmp	r4, r3
 80235ba:	d101      	bne.n	80235c0 <_putc_r+0x6c>
 80235bc:	68b4      	ldr	r4, [r6, #8]
 80235be:	e7d6      	b.n	802356e <_putc_r+0x1a>
 80235c0:	4b07      	ldr	r3, [pc, #28]	; (80235e0 <_putc_r+0x8c>)
 80235c2:	429c      	cmp	r4, r3
 80235c4:	bf08      	it	eq
 80235c6:	68f4      	ldreq	r4, [r6, #12]
 80235c8:	e7d1      	b.n	802356e <_putc_r+0x1a>
 80235ca:	4629      	mov	r1, r5
 80235cc:	4622      	mov	r2, r4
 80235ce:	4630      	mov	r0, r6
 80235d0:	f7fe f886 	bl	80216e0 <__swbuf_r>
 80235d4:	4605      	mov	r5, r0
 80235d6:	e7e3      	b.n	80235a0 <_putc_r+0x4c>
 80235d8:	0802534c 	.word	0x0802534c
 80235dc:	0802536c 	.word	0x0802536c
 80235e0:	0802532c 	.word	0x0802532c

080235e4 <_sbrk_r>:
 80235e4:	b538      	push	{r3, r4, r5, lr}
 80235e6:	4d06      	ldr	r5, [pc, #24]	; (8023600 <_sbrk_r+0x1c>)
 80235e8:	2300      	movs	r3, #0
 80235ea:	4604      	mov	r4, r0
 80235ec:	4608      	mov	r0, r1
 80235ee:	602b      	str	r3, [r5, #0]
 80235f0:	f7f4 fd3c 	bl	801806c <_sbrk>
 80235f4:	1c43      	adds	r3, r0, #1
 80235f6:	d102      	bne.n	80235fe <_sbrk_r+0x1a>
 80235f8:	682b      	ldr	r3, [r5, #0]
 80235fa:	b103      	cbz	r3, 80235fe <_sbrk_r+0x1a>
 80235fc:	6023      	str	r3, [r4, #0]
 80235fe:	bd38      	pop	{r3, r4, r5, pc}
 8023600:	2000fddc 	.word	0x2000fddc

08023604 <__sread>:
 8023604:	b510      	push	{r4, lr}
 8023606:	460c      	mov	r4, r1
 8023608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802360c:	f000 f8e2 	bl	80237d4 <_read_r>
 8023610:	2800      	cmp	r0, #0
 8023612:	bfab      	itete	ge
 8023614:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023616:	89a3      	ldrhlt	r3, [r4, #12]
 8023618:	181b      	addge	r3, r3, r0
 802361a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802361e:	bfac      	ite	ge
 8023620:	6563      	strge	r3, [r4, #84]	; 0x54
 8023622:	81a3      	strhlt	r3, [r4, #12]
 8023624:	bd10      	pop	{r4, pc}

08023626 <__swrite>:
 8023626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802362a:	461f      	mov	r7, r3
 802362c:	898b      	ldrh	r3, [r1, #12]
 802362e:	05db      	lsls	r3, r3, #23
 8023630:	4605      	mov	r5, r0
 8023632:	460c      	mov	r4, r1
 8023634:	4616      	mov	r6, r2
 8023636:	d505      	bpl.n	8023644 <__swrite+0x1e>
 8023638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802363c:	2302      	movs	r3, #2
 802363e:	2200      	movs	r2, #0
 8023640:	f000 f898 	bl	8023774 <_lseek_r>
 8023644:	89a3      	ldrh	r3, [r4, #12]
 8023646:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802364a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802364e:	81a3      	strh	r3, [r4, #12]
 8023650:	4632      	mov	r2, r6
 8023652:	463b      	mov	r3, r7
 8023654:	4628      	mov	r0, r5
 8023656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802365a:	f000 b817 	b.w	802368c <_write_r>

0802365e <__sseek>:
 802365e:	b510      	push	{r4, lr}
 8023660:	460c      	mov	r4, r1
 8023662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023666:	f000 f885 	bl	8023774 <_lseek_r>
 802366a:	1c43      	adds	r3, r0, #1
 802366c:	89a3      	ldrh	r3, [r4, #12]
 802366e:	bf15      	itete	ne
 8023670:	6560      	strne	r0, [r4, #84]	; 0x54
 8023672:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023676:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802367a:	81a3      	strheq	r3, [r4, #12]
 802367c:	bf18      	it	ne
 802367e:	81a3      	strhne	r3, [r4, #12]
 8023680:	bd10      	pop	{r4, pc}

08023682 <__sclose>:
 8023682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023686:	f000 b831 	b.w	80236ec <_close_r>
	...

0802368c <_write_r>:
 802368c:	b538      	push	{r3, r4, r5, lr}
 802368e:	4d07      	ldr	r5, [pc, #28]	; (80236ac <_write_r+0x20>)
 8023690:	4604      	mov	r4, r0
 8023692:	4608      	mov	r0, r1
 8023694:	4611      	mov	r1, r2
 8023696:	2200      	movs	r2, #0
 8023698:	602a      	str	r2, [r5, #0]
 802369a:	461a      	mov	r2, r3
 802369c:	f7f4 fc92 	bl	8017fc4 <_write>
 80236a0:	1c43      	adds	r3, r0, #1
 80236a2:	d102      	bne.n	80236aa <_write_r+0x1e>
 80236a4:	682b      	ldr	r3, [r5, #0]
 80236a6:	b103      	cbz	r3, 80236aa <_write_r+0x1e>
 80236a8:	6023      	str	r3, [r4, #0]
 80236aa:	bd38      	pop	{r3, r4, r5, pc}
 80236ac:	2000fddc 	.word	0x2000fddc

080236b0 <__assert_func>:
 80236b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80236b2:	4614      	mov	r4, r2
 80236b4:	461a      	mov	r2, r3
 80236b6:	4b09      	ldr	r3, [pc, #36]	; (80236dc <__assert_func+0x2c>)
 80236b8:	681b      	ldr	r3, [r3, #0]
 80236ba:	4605      	mov	r5, r0
 80236bc:	68d8      	ldr	r0, [r3, #12]
 80236be:	b14c      	cbz	r4, 80236d4 <__assert_func+0x24>
 80236c0:	4b07      	ldr	r3, [pc, #28]	; (80236e0 <__assert_func+0x30>)
 80236c2:	9100      	str	r1, [sp, #0]
 80236c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80236c8:	4906      	ldr	r1, [pc, #24]	; (80236e4 <__assert_func+0x34>)
 80236ca:	462b      	mov	r3, r5
 80236cc:	f000 f81e 	bl	802370c <fiprintf>
 80236d0:	f000 f89f 	bl	8023812 <abort>
 80236d4:	4b04      	ldr	r3, [pc, #16]	; (80236e8 <__assert_func+0x38>)
 80236d6:	461c      	mov	r4, r3
 80236d8:	e7f3      	b.n	80236c2 <__assert_func+0x12>
 80236da:	bf00      	nop
 80236dc:	2000002c 	.word	0x2000002c
 80236e0:	080254f5 	.word	0x080254f5
 80236e4:	08025502 	.word	0x08025502
 80236e8:	08025530 	.word	0x08025530

080236ec <_close_r>:
 80236ec:	b538      	push	{r3, r4, r5, lr}
 80236ee:	4d06      	ldr	r5, [pc, #24]	; (8023708 <_close_r+0x1c>)
 80236f0:	2300      	movs	r3, #0
 80236f2:	4604      	mov	r4, r0
 80236f4:	4608      	mov	r0, r1
 80236f6:	602b      	str	r3, [r5, #0]
 80236f8:	f7f4 fc84 	bl	8018004 <_close>
 80236fc:	1c43      	adds	r3, r0, #1
 80236fe:	d102      	bne.n	8023706 <_close_r+0x1a>
 8023700:	682b      	ldr	r3, [r5, #0]
 8023702:	b103      	cbz	r3, 8023706 <_close_r+0x1a>
 8023704:	6023      	str	r3, [r4, #0]
 8023706:	bd38      	pop	{r3, r4, r5, pc}
 8023708:	2000fddc 	.word	0x2000fddc

0802370c <fiprintf>:
 802370c:	b40e      	push	{r1, r2, r3}
 802370e:	b503      	push	{r0, r1, lr}
 8023710:	4601      	mov	r1, r0
 8023712:	ab03      	add	r3, sp, #12
 8023714:	4805      	ldr	r0, [pc, #20]	; (802372c <fiprintf+0x20>)
 8023716:	f853 2b04 	ldr.w	r2, [r3], #4
 802371a:	6800      	ldr	r0, [r0, #0]
 802371c:	9301      	str	r3, [sp, #4]
 802371e:	f7ff fde9 	bl	80232f4 <_vfiprintf_r>
 8023722:	b002      	add	sp, #8
 8023724:	f85d eb04 	ldr.w	lr, [sp], #4
 8023728:	b003      	add	sp, #12
 802372a:	4770      	bx	lr
 802372c:	2000002c 	.word	0x2000002c

08023730 <_fstat_r>:
 8023730:	b538      	push	{r3, r4, r5, lr}
 8023732:	4d07      	ldr	r5, [pc, #28]	; (8023750 <_fstat_r+0x20>)
 8023734:	2300      	movs	r3, #0
 8023736:	4604      	mov	r4, r0
 8023738:	4608      	mov	r0, r1
 802373a:	4611      	mov	r1, r2
 802373c:	602b      	str	r3, [r5, #0]
 802373e:	f7f4 fc6d 	bl	801801c <_fstat>
 8023742:	1c43      	adds	r3, r0, #1
 8023744:	d102      	bne.n	802374c <_fstat_r+0x1c>
 8023746:	682b      	ldr	r3, [r5, #0]
 8023748:	b103      	cbz	r3, 802374c <_fstat_r+0x1c>
 802374a:	6023      	str	r3, [r4, #0]
 802374c:	bd38      	pop	{r3, r4, r5, pc}
 802374e:	bf00      	nop
 8023750:	2000fddc 	.word	0x2000fddc

08023754 <_isatty_r>:
 8023754:	b538      	push	{r3, r4, r5, lr}
 8023756:	4d06      	ldr	r5, [pc, #24]	; (8023770 <_isatty_r+0x1c>)
 8023758:	2300      	movs	r3, #0
 802375a:	4604      	mov	r4, r0
 802375c:	4608      	mov	r0, r1
 802375e:	602b      	str	r3, [r5, #0]
 8023760:	f7f4 fc6c 	bl	801803c <_isatty>
 8023764:	1c43      	adds	r3, r0, #1
 8023766:	d102      	bne.n	802376e <_isatty_r+0x1a>
 8023768:	682b      	ldr	r3, [r5, #0]
 802376a:	b103      	cbz	r3, 802376e <_isatty_r+0x1a>
 802376c:	6023      	str	r3, [r4, #0]
 802376e:	bd38      	pop	{r3, r4, r5, pc}
 8023770:	2000fddc 	.word	0x2000fddc

08023774 <_lseek_r>:
 8023774:	b538      	push	{r3, r4, r5, lr}
 8023776:	4d07      	ldr	r5, [pc, #28]	; (8023794 <_lseek_r+0x20>)
 8023778:	4604      	mov	r4, r0
 802377a:	4608      	mov	r0, r1
 802377c:	4611      	mov	r1, r2
 802377e:	2200      	movs	r2, #0
 8023780:	602a      	str	r2, [r5, #0]
 8023782:	461a      	mov	r2, r3
 8023784:	f7f4 fc65 	bl	8018052 <_lseek>
 8023788:	1c43      	adds	r3, r0, #1
 802378a:	d102      	bne.n	8023792 <_lseek_r+0x1e>
 802378c:	682b      	ldr	r3, [r5, #0]
 802378e:	b103      	cbz	r3, 8023792 <_lseek_r+0x1e>
 8023790:	6023      	str	r3, [r4, #0]
 8023792:	bd38      	pop	{r3, r4, r5, pc}
 8023794:	2000fddc 	.word	0x2000fddc

08023798 <__ascii_mbtowc>:
 8023798:	b082      	sub	sp, #8
 802379a:	b901      	cbnz	r1, 802379e <__ascii_mbtowc+0x6>
 802379c:	a901      	add	r1, sp, #4
 802379e:	b142      	cbz	r2, 80237b2 <__ascii_mbtowc+0x1a>
 80237a0:	b14b      	cbz	r3, 80237b6 <__ascii_mbtowc+0x1e>
 80237a2:	7813      	ldrb	r3, [r2, #0]
 80237a4:	600b      	str	r3, [r1, #0]
 80237a6:	7812      	ldrb	r2, [r2, #0]
 80237a8:	1e10      	subs	r0, r2, #0
 80237aa:	bf18      	it	ne
 80237ac:	2001      	movne	r0, #1
 80237ae:	b002      	add	sp, #8
 80237b0:	4770      	bx	lr
 80237b2:	4610      	mov	r0, r2
 80237b4:	e7fb      	b.n	80237ae <__ascii_mbtowc+0x16>
 80237b6:	f06f 0001 	mvn.w	r0, #1
 80237ba:	e7f8      	b.n	80237ae <__ascii_mbtowc+0x16>

080237bc <__malloc_lock>:
 80237bc:	4801      	ldr	r0, [pc, #4]	; (80237c4 <__malloc_lock+0x8>)
 80237be:	f7ff b886 	b.w	80228ce <__retarget_lock_acquire_recursive>
 80237c2:	bf00      	nop
 80237c4:	2000fdd0 	.word	0x2000fdd0

080237c8 <__malloc_unlock>:
 80237c8:	4801      	ldr	r0, [pc, #4]	; (80237d0 <__malloc_unlock+0x8>)
 80237ca:	f7ff b881 	b.w	80228d0 <__retarget_lock_release_recursive>
 80237ce:	bf00      	nop
 80237d0:	2000fdd0 	.word	0x2000fdd0

080237d4 <_read_r>:
 80237d4:	b538      	push	{r3, r4, r5, lr}
 80237d6:	4d07      	ldr	r5, [pc, #28]	; (80237f4 <_read_r+0x20>)
 80237d8:	4604      	mov	r4, r0
 80237da:	4608      	mov	r0, r1
 80237dc:	4611      	mov	r1, r2
 80237de:	2200      	movs	r2, #0
 80237e0:	602a      	str	r2, [r5, #0]
 80237e2:	461a      	mov	r2, r3
 80237e4:	f7f4 fbd0 	bl	8017f88 <_read>
 80237e8:	1c43      	adds	r3, r0, #1
 80237ea:	d102      	bne.n	80237f2 <_read_r+0x1e>
 80237ec:	682b      	ldr	r3, [r5, #0]
 80237ee:	b103      	cbz	r3, 80237f2 <_read_r+0x1e>
 80237f0:	6023      	str	r3, [r4, #0]
 80237f2:	bd38      	pop	{r3, r4, r5, pc}
 80237f4:	2000fddc 	.word	0x2000fddc

080237f8 <__ascii_wctomb>:
 80237f8:	b149      	cbz	r1, 802380e <__ascii_wctomb+0x16>
 80237fa:	2aff      	cmp	r2, #255	; 0xff
 80237fc:	bf85      	ittet	hi
 80237fe:	238a      	movhi	r3, #138	; 0x8a
 8023800:	6003      	strhi	r3, [r0, #0]
 8023802:	700a      	strbls	r2, [r1, #0]
 8023804:	f04f 30ff 	movhi.w	r0, #4294967295
 8023808:	bf98      	it	ls
 802380a:	2001      	movls	r0, #1
 802380c:	4770      	bx	lr
 802380e:	4608      	mov	r0, r1
 8023810:	4770      	bx	lr

08023812 <abort>:
 8023812:	b508      	push	{r3, lr}
 8023814:	2006      	movs	r0, #6
 8023816:	f000 f82b 	bl	8023870 <raise>
 802381a:	2001      	movs	r0, #1
 802381c:	f7f4 fbaa 	bl	8017f74 <_exit>

08023820 <_raise_r>:
 8023820:	291f      	cmp	r1, #31
 8023822:	b538      	push	{r3, r4, r5, lr}
 8023824:	4604      	mov	r4, r0
 8023826:	460d      	mov	r5, r1
 8023828:	d904      	bls.n	8023834 <_raise_r+0x14>
 802382a:	2316      	movs	r3, #22
 802382c:	6003      	str	r3, [r0, #0]
 802382e:	f04f 30ff 	mov.w	r0, #4294967295
 8023832:	bd38      	pop	{r3, r4, r5, pc}
 8023834:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023836:	b112      	cbz	r2, 802383e <_raise_r+0x1e>
 8023838:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802383c:	b94b      	cbnz	r3, 8023852 <_raise_r+0x32>
 802383e:	4620      	mov	r0, r4
 8023840:	f000 f830 	bl	80238a4 <_getpid_r>
 8023844:	462a      	mov	r2, r5
 8023846:	4601      	mov	r1, r0
 8023848:	4620      	mov	r0, r4
 802384a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802384e:	f000 b817 	b.w	8023880 <_kill_r>
 8023852:	2b01      	cmp	r3, #1
 8023854:	d00a      	beq.n	802386c <_raise_r+0x4c>
 8023856:	1c59      	adds	r1, r3, #1
 8023858:	d103      	bne.n	8023862 <_raise_r+0x42>
 802385a:	2316      	movs	r3, #22
 802385c:	6003      	str	r3, [r0, #0]
 802385e:	2001      	movs	r0, #1
 8023860:	e7e7      	b.n	8023832 <_raise_r+0x12>
 8023862:	2400      	movs	r4, #0
 8023864:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023868:	4628      	mov	r0, r5
 802386a:	4798      	blx	r3
 802386c:	2000      	movs	r0, #0
 802386e:	e7e0      	b.n	8023832 <_raise_r+0x12>

08023870 <raise>:
 8023870:	4b02      	ldr	r3, [pc, #8]	; (802387c <raise+0xc>)
 8023872:	4601      	mov	r1, r0
 8023874:	6818      	ldr	r0, [r3, #0]
 8023876:	f7ff bfd3 	b.w	8023820 <_raise_r>
 802387a:	bf00      	nop
 802387c:	2000002c 	.word	0x2000002c

08023880 <_kill_r>:
 8023880:	b538      	push	{r3, r4, r5, lr}
 8023882:	4d07      	ldr	r5, [pc, #28]	; (80238a0 <_kill_r+0x20>)
 8023884:	2300      	movs	r3, #0
 8023886:	4604      	mov	r4, r0
 8023888:	4608      	mov	r0, r1
 802388a:	4611      	mov	r1, r2
 802388c:	602b      	str	r3, [r5, #0]
 802388e:	f7f4 fb61 	bl	8017f54 <_kill>
 8023892:	1c43      	adds	r3, r0, #1
 8023894:	d102      	bne.n	802389c <_kill_r+0x1c>
 8023896:	682b      	ldr	r3, [r5, #0]
 8023898:	b103      	cbz	r3, 802389c <_kill_r+0x1c>
 802389a:	6023      	str	r3, [r4, #0]
 802389c:	bd38      	pop	{r3, r4, r5, pc}
 802389e:	bf00      	nop
 80238a0:	2000fddc 	.word	0x2000fddc

080238a4 <_getpid_r>:
 80238a4:	f7f4 bb4e 	b.w	8017f44 <_getpid>

080238a8 <ceil>:
 80238a8:	ec51 0b10 	vmov	r0, r1, d0
 80238ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80238b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80238b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80238b8:	2e13      	cmp	r6, #19
 80238ba:	ee10 5a10 	vmov	r5, s0
 80238be:	ee10 8a10 	vmov	r8, s0
 80238c2:	460c      	mov	r4, r1
 80238c4:	dc30      	bgt.n	8023928 <ceil+0x80>
 80238c6:	2e00      	cmp	r6, #0
 80238c8:	da12      	bge.n	80238f0 <ceil+0x48>
 80238ca:	a335      	add	r3, pc, #212	; (adr r3, 80239a0 <ceil+0xf8>)
 80238cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238d0:	f7dc fd04 	bl	80002dc <__adddf3>
 80238d4:	2200      	movs	r2, #0
 80238d6:	2300      	movs	r3, #0
 80238d8:	f7dd f946 	bl	8000b68 <__aeabi_dcmpgt>
 80238dc:	b128      	cbz	r0, 80238ea <ceil+0x42>
 80238de:	2c00      	cmp	r4, #0
 80238e0:	db55      	blt.n	802398e <ceil+0xe6>
 80238e2:	432c      	orrs	r4, r5
 80238e4:	d057      	beq.n	8023996 <ceil+0xee>
 80238e6:	4c30      	ldr	r4, [pc, #192]	; (80239a8 <ceil+0x100>)
 80238e8:	2500      	movs	r5, #0
 80238ea:	4621      	mov	r1, r4
 80238ec:	4628      	mov	r0, r5
 80238ee:	e025      	b.n	802393c <ceil+0x94>
 80238f0:	4f2e      	ldr	r7, [pc, #184]	; (80239ac <ceil+0x104>)
 80238f2:	4137      	asrs	r7, r6
 80238f4:	ea01 0307 	and.w	r3, r1, r7
 80238f8:	4303      	orrs	r3, r0
 80238fa:	d01f      	beq.n	802393c <ceil+0x94>
 80238fc:	a328      	add	r3, pc, #160	; (adr r3, 80239a0 <ceil+0xf8>)
 80238fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023902:	f7dc fceb 	bl	80002dc <__adddf3>
 8023906:	2200      	movs	r2, #0
 8023908:	2300      	movs	r3, #0
 802390a:	f7dd f92d 	bl	8000b68 <__aeabi_dcmpgt>
 802390e:	2800      	cmp	r0, #0
 8023910:	d0eb      	beq.n	80238ea <ceil+0x42>
 8023912:	2c00      	cmp	r4, #0
 8023914:	bfc2      	ittt	gt
 8023916:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 802391a:	fa43 f606 	asrgt.w	r6, r3, r6
 802391e:	19a4      	addgt	r4, r4, r6
 8023920:	ea24 0407 	bic.w	r4, r4, r7
 8023924:	2500      	movs	r5, #0
 8023926:	e7e0      	b.n	80238ea <ceil+0x42>
 8023928:	2e33      	cmp	r6, #51	; 0x33
 802392a:	dd0b      	ble.n	8023944 <ceil+0x9c>
 802392c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8023930:	d104      	bne.n	802393c <ceil+0x94>
 8023932:	ee10 2a10 	vmov	r2, s0
 8023936:	460b      	mov	r3, r1
 8023938:	f7dc fcd0 	bl	80002dc <__adddf3>
 802393c:	ec41 0b10 	vmov	d0, r0, r1
 8023940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023944:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8023948:	f04f 33ff 	mov.w	r3, #4294967295
 802394c:	fa23 f707 	lsr.w	r7, r3, r7
 8023950:	4207      	tst	r7, r0
 8023952:	d0f3      	beq.n	802393c <ceil+0x94>
 8023954:	a312      	add	r3, pc, #72	; (adr r3, 80239a0 <ceil+0xf8>)
 8023956:	e9d3 2300 	ldrd	r2, r3, [r3]
 802395a:	f7dc fcbf 	bl	80002dc <__adddf3>
 802395e:	2200      	movs	r2, #0
 8023960:	2300      	movs	r3, #0
 8023962:	f7dd f901 	bl	8000b68 <__aeabi_dcmpgt>
 8023966:	2800      	cmp	r0, #0
 8023968:	d0bf      	beq.n	80238ea <ceil+0x42>
 802396a:	2c00      	cmp	r4, #0
 802396c:	dd02      	ble.n	8023974 <ceil+0xcc>
 802396e:	2e14      	cmp	r6, #20
 8023970:	d103      	bne.n	802397a <ceil+0xd2>
 8023972:	3401      	adds	r4, #1
 8023974:	ea25 0507 	bic.w	r5, r5, r7
 8023978:	e7b7      	b.n	80238ea <ceil+0x42>
 802397a:	2301      	movs	r3, #1
 802397c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8023980:	fa03 f606 	lsl.w	r6, r3, r6
 8023984:	4435      	add	r5, r6
 8023986:	4545      	cmp	r5, r8
 8023988:	bf38      	it	cc
 802398a:	18e4      	addcc	r4, r4, r3
 802398c:	e7f2      	b.n	8023974 <ceil+0xcc>
 802398e:	2500      	movs	r5, #0
 8023990:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8023994:	e7a9      	b.n	80238ea <ceil+0x42>
 8023996:	4625      	mov	r5, r4
 8023998:	e7a7      	b.n	80238ea <ceil+0x42>
 802399a:	bf00      	nop
 802399c:	f3af 8000 	nop.w
 80239a0:	8800759c 	.word	0x8800759c
 80239a4:	7e37e43c 	.word	0x7e37e43c
 80239a8:	3ff00000 	.word	0x3ff00000
 80239ac:	000fffff 	.word	0x000fffff

080239b0 <cos>:
 80239b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80239b2:	ec53 2b10 	vmov	r2, r3, d0
 80239b6:	4826      	ldr	r0, [pc, #152]	; (8023a50 <cos+0xa0>)
 80239b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80239bc:	4281      	cmp	r1, r0
 80239be:	dc06      	bgt.n	80239ce <cos+0x1e>
 80239c0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8023a48 <cos+0x98>
 80239c4:	b005      	add	sp, #20
 80239c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80239ca:	f000 bc75 	b.w	80242b8 <__kernel_cos>
 80239ce:	4821      	ldr	r0, [pc, #132]	; (8023a54 <cos+0xa4>)
 80239d0:	4281      	cmp	r1, r0
 80239d2:	dd09      	ble.n	80239e8 <cos+0x38>
 80239d4:	ee10 0a10 	vmov	r0, s0
 80239d8:	4619      	mov	r1, r3
 80239da:	f7dc fc7d 	bl	80002d8 <__aeabi_dsub>
 80239de:	ec41 0b10 	vmov	d0, r0, r1
 80239e2:	b005      	add	sp, #20
 80239e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80239e8:	4668      	mov	r0, sp
 80239ea:	f000 fa59 	bl	8023ea0 <__ieee754_rem_pio2>
 80239ee:	f000 0003 	and.w	r0, r0, #3
 80239f2:	2801      	cmp	r0, #1
 80239f4:	d00b      	beq.n	8023a0e <cos+0x5e>
 80239f6:	2802      	cmp	r0, #2
 80239f8:	d016      	beq.n	8023a28 <cos+0x78>
 80239fa:	b9e0      	cbnz	r0, 8023a36 <cos+0x86>
 80239fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023a00:	ed9d 0b00 	vldr	d0, [sp]
 8023a04:	f000 fc58 	bl	80242b8 <__kernel_cos>
 8023a08:	ec51 0b10 	vmov	r0, r1, d0
 8023a0c:	e7e7      	b.n	80239de <cos+0x2e>
 8023a0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023a12:	ed9d 0b00 	vldr	d0, [sp]
 8023a16:	f001 f867 	bl	8024ae8 <__kernel_sin>
 8023a1a:	ec53 2b10 	vmov	r2, r3, d0
 8023a1e:	ee10 0a10 	vmov	r0, s0
 8023a22:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8023a26:	e7da      	b.n	80239de <cos+0x2e>
 8023a28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023a2c:	ed9d 0b00 	vldr	d0, [sp]
 8023a30:	f000 fc42 	bl	80242b8 <__kernel_cos>
 8023a34:	e7f1      	b.n	8023a1a <cos+0x6a>
 8023a36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023a3a:	ed9d 0b00 	vldr	d0, [sp]
 8023a3e:	2001      	movs	r0, #1
 8023a40:	f001 f852 	bl	8024ae8 <__kernel_sin>
 8023a44:	e7e0      	b.n	8023a08 <cos+0x58>
 8023a46:	bf00      	nop
	...
 8023a50:	3fe921fb 	.word	0x3fe921fb
 8023a54:	7fefffff 	.word	0x7fefffff

08023a58 <sin>:
 8023a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023a5a:	ec53 2b10 	vmov	r2, r3, d0
 8023a5e:	4828      	ldr	r0, [pc, #160]	; (8023b00 <sin+0xa8>)
 8023a60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8023a64:	4281      	cmp	r1, r0
 8023a66:	dc07      	bgt.n	8023a78 <sin+0x20>
 8023a68:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8023af8 <sin+0xa0>
 8023a6c:	2000      	movs	r0, #0
 8023a6e:	b005      	add	sp, #20
 8023a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8023a74:	f001 b838 	b.w	8024ae8 <__kernel_sin>
 8023a78:	4822      	ldr	r0, [pc, #136]	; (8023b04 <sin+0xac>)
 8023a7a:	4281      	cmp	r1, r0
 8023a7c:	dd09      	ble.n	8023a92 <sin+0x3a>
 8023a7e:	ee10 0a10 	vmov	r0, s0
 8023a82:	4619      	mov	r1, r3
 8023a84:	f7dc fc28 	bl	80002d8 <__aeabi_dsub>
 8023a88:	ec41 0b10 	vmov	d0, r0, r1
 8023a8c:	b005      	add	sp, #20
 8023a8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8023a92:	4668      	mov	r0, sp
 8023a94:	f000 fa04 	bl	8023ea0 <__ieee754_rem_pio2>
 8023a98:	f000 0003 	and.w	r0, r0, #3
 8023a9c:	2801      	cmp	r0, #1
 8023a9e:	d00c      	beq.n	8023aba <sin+0x62>
 8023aa0:	2802      	cmp	r0, #2
 8023aa2:	d011      	beq.n	8023ac8 <sin+0x70>
 8023aa4:	b9f0      	cbnz	r0, 8023ae4 <sin+0x8c>
 8023aa6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023aaa:	ed9d 0b00 	vldr	d0, [sp]
 8023aae:	2001      	movs	r0, #1
 8023ab0:	f001 f81a 	bl	8024ae8 <__kernel_sin>
 8023ab4:	ec51 0b10 	vmov	r0, r1, d0
 8023ab8:	e7e6      	b.n	8023a88 <sin+0x30>
 8023aba:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023abe:	ed9d 0b00 	vldr	d0, [sp]
 8023ac2:	f000 fbf9 	bl	80242b8 <__kernel_cos>
 8023ac6:	e7f5      	b.n	8023ab4 <sin+0x5c>
 8023ac8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023acc:	ed9d 0b00 	vldr	d0, [sp]
 8023ad0:	2001      	movs	r0, #1
 8023ad2:	f001 f809 	bl	8024ae8 <__kernel_sin>
 8023ad6:	ec53 2b10 	vmov	r2, r3, d0
 8023ada:	ee10 0a10 	vmov	r0, s0
 8023ade:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8023ae2:	e7d1      	b.n	8023a88 <sin+0x30>
 8023ae4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023ae8:	ed9d 0b00 	vldr	d0, [sp]
 8023aec:	f000 fbe4 	bl	80242b8 <__kernel_cos>
 8023af0:	e7f1      	b.n	8023ad6 <sin+0x7e>
 8023af2:	bf00      	nop
 8023af4:	f3af 8000 	nop.w
	...
 8023b00:	3fe921fb 	.word	0x3fe921fb
 8023b04:	7fefffff 	.word	0x7fefffff

08023b08 <exp>:
 8023b08:	b538      	push	{r3, r4, r5, lr}
 8023b0a:	ed2d 8b02 	vpush	{d8}
 8023b0e:	ec55 4b10 	vmov	r4, r5, d0
 8023b12:	f000 f841 	bl	8023b98 <__ieee754_exp>
 8023b16:	eeb0 8a40 	vmov.f32	s16, s0
 8023b1a:	eef0 8a60 	vmov.f32	s17, s1
 8023b1e:	ec45 4b10 	vmov	d0, r4, r5
 8023b22:	f001 f8d8 	bl	8024cd6 <finite>
 8023b26:	b168      	cbz	r0, 8023b44 <exp+0x3c>
 8023b28:	a317      	add	r3, pc, #92	; (adr r3, 8023b88 <exp+0x80>)
 8023b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b2e:	4620      	mov	r0, r4
 8023b30:	4629      	mov	r1, r5
 8023b32:	f7dd f819 	bl	8000b68 <__aeabi_dcmpgt>
 8023b36:	b160      	cbz	r0, 8023b52 <exp+0x4a>
 8023b38:	f7fd f884 	bl	8020c44 <__errno>
 8023b3c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8023b78 <exp+0x70>
 8023b40:	2322      	movs	r3, #34	; 0x22
 8023b42:	6003      	str	r3, [r0, #0]
 8023b44:	eeb0 0a48 	vmov.f32	s0, s16
 8023b48:	eef0 0a68 	vmov.f32	s1, s17
 8023b4c:	ecbd 8b02 	vpop	{d8}
 8023b50:	bd38      	pop	{r3, r4, r5, pc}
 8023b52:	a30f      	add	r3, pc, #60	; (adr r3, 8023b90 <exp+0x88>)
 8023b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b58:	4620      	mov	r0, r4
 8023b5a:	4629      	mov	r1, r5
 8023b5c:	f7dc ffe6 	bl	8000b2c <__aeabi_dcmplt>
 8023b60:	2800      	cmp	r0, #0
 8023b62:	d0ef      	beq.n	8023b44 <exp+0x3c>
 8023b64:	f7fd f86e 	bl	8020c44 <__errno>
 8023b68:	2322      	movs	r3, #34	; 0x22
 8023b6a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8023b80 <exp+0x78>
 8023b6e:	6003      	str	r3, [r0, #0]
 8023b70:	e7e8      	b.n	8023b44 <exp+0x3c>
 8023b72:	bf00      	nop
 8023b74:	f3af 8000 	nop.w
 8023b78:	00000000 	.word	0x00000000
 8023b7c:	7ff00000 	.word	0x7ff00000
	...
 8023b88:	fefa39ef 	.word	0xfefa39ef
 8023b8c:	40862e42 	.word	0x40862e42
 8023b90:	d52d3051 	.word	0xd52d3051
 8023b94:	c0874910 	.word	0xc0874910

08023b98 <__ieee754_exp>:
 8023b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023b9c:	ec55 4b10 	vmov	r4, r5, d0
 8023ba0:	49b5      	ldr	r1, [pc, #724]	; (8023e78 <__ieee754_exp+0x2e0>)
 8023ba2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8023ba6:	428b      	cmp	r3, r1
 8023ba8:	ed2d 8b04 	vpush	{d8-d9}
 8023bac:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8023bb0:	d93d      	bls.n	8023c2e <__ieee754_exp+0x96>
 8023bb2:	49b2      	ldr	r1, [pc, #712]	; (8023e7c <__ieee754_exp+0x2e4>)
 8023bb4:	428b      	cmp	r3, r1
 8023bb6:	d918      	bls.n	8023bea <__ieee754_exp+0x52>
 8023bb8:	ee10 3a10 	vmov	r3, s0
 8023bbc:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8023bc0:	4313      	orrs	r3, r2
 8023bc2:	d009      	beq.n	8023bd8 <__ieee754_exp+0x40>
 8023bc4:	ee10 2a10 	vmov	r2, s0
 8023bc8:	462b      	mov	r3, r5
 8023bca:	4620      	mov	r0, r4
 8023bcc:	4629      	mov	r1, r5
 8023bce:	f7dc fb85 	bl	80002dc <__adddf3>
 8023bd2:	4604      	mov	r4, r0
 8023bd4:	460d      	mov	r5, r1
 8023bd6:	e002      	b.n	8023bde <__ieee754_exp+0x46>
 8023bd8:	b10e      	cbz	r6, 8023bde <__ieee754_exp+0x46>
 8023bda:	2400      	movs	r4, #0
 8023bdc:	2500      	movs	r5, #0
 8023bde:	ecbd 8b04 	vpop	{d8-d9}
 8023be2:	ec45 4b10 	vmov	d0, r4, r5
 8023be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023bea:	a38d      	add	r3, pc, #564	; (adr r3, 8023e20 <__ieee754_exp+0x288>)
 8023bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bf0:	ee10 0a10 	vmov	r0, s0
 8023bf4:	4629      	mov	r1, r5
 8023bf6:	f7dc ffb7 	bl	8000b68 <__aeabi_dcmpgt>
 8023bfa:	4607      	mov	r7, r0
 8023bfc:	b130      	cbz	r0, 8023c0c <__ieee754_exp+0x74>
 8023bfe:	ecbd 8b04 	vpop	{d8-d9}
 8023c02:	2000      	movs	r0, #0
 8023c04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023c08:	f001 b853 	b.w	8024cb2 <__math_oflow>
 8023c0c:	a386      	add	r3, pc, #536	; (adr r3, 8023e28 <__ieee754_exp+0x290>)
 8023c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c12:	4620      	mov	r0, r4
 8023c14:	4629      	mov	r1, r5
 8023c16:	f7dc ff89 	bl	8000b2c <__aeabi_dcmplt>
 8023c1a:	2800      	cmp	r0, #0
 8023c1c:	f000 808b 	beq.w	8023d36 <__ieee754_exp+0x19e>
 8023c20:	ecbd 8b04 	vpop	{d8-d9}
 8023c24:	4638      	mov	r0, r7
 8023c26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023c2a:	f001 b839 	b.w	8024ca0 <__math_uflow>
 8023c2e:	4a94      	ldr	r2, [pc, #592]	; (8023e80 <__ieee754_exp+0x2e8>)
 8023c30:	4293      	cmp	r3, r2
 8023c32:	f240 80ac 	bls.w	8023d8e <__ieee754_exp+0x1f6>
 8023c36:	4a93      	ldr	r2, [pc, #588]	; (8023e84 <__ieee754_exp+0x2ec>)
 8023c38:	4293      	cmp	r3, r2
 8023c3a:	d87c      	bhi.n	8023d36 <__ieee754_exp+0x19e>
 8023c3c:	4b92      	ldr	r3, [pc, #584]	; (8023e88 <__ieee754_exp+0x2f0>)
 8023c3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8023c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c46:	ee10 0a10 	vmov	r0, s0
 8023c4a:	4629      	mov	r1, r5
 8023c4c:	f7dc fb44 	bl	80002d8 <__aeabi_dsub>
 8023c50:	4b8e      	ldr	r3, [pc, #568]	; (8023e8c <__ieee754_exp+0x2f4>)
 8023c52:	00f7      	lsls	r7, r6, #3
 8023c54:	443b      	add	r3, r7
 8023c56:	ed93 7b00 	vldr	d7, [r3]
 8023c5a:	f1c6 0a01 	rsb	sl, r6, #1
 8023c5e:	4680      	mov	r8, r0
 8023c60:	4689      	mov	r9, r1
 8023c62:	ebaa 0a06 	sub.w	sl, sl, r6
 8023c66:	eeb0 8a47 	vmov.f32	s16, s14
 8023c6a:	eef0 8a67 	vmov.f32	s17, s15
 8023c6e:	ec53 2b18 	vmov	r2, r3, d8
 8023c72:	4640      	mov	r0, r8
 8023c74:	4649      	mov	r1, r9
 8023c76:	f7dc fb2f 	bl	80002d8 <__aeabi_dsub>
 8023c7a:	4604      	mov	r4, r0
 8023c7c:	460d      	mov	r5, r1
 8023c7e:	4622      	mov	r2, r4
 8023c80:	462b      	mov	r3, r5
 8023c82:	4620      	mov	r0, r4
 8023c84:	4629      	mov	r1, r5
 8023c86:	f7dc fcdf 	bl	8000648 <__aeabi_dmul>
 8023c8a:	a369      	add	r3, pc, #420	; (adr r3, 8023e30 <__ieee754_exp+0x298>)
 8023c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c90:	4606      	mov	r6, r0
 8023c92:	460f      	mov	r7, r1
 8023c94:	f7dc fcd8 	bl	8000648 <__aeabi_dmul>
 8023c98:	a367      	add	r3, pc, #412	; (adr r3, 8023e38 <__ieee754_exp+0x2a0>)
 8023c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c9e:	f7dc fb1b 	bl	80002d8 <__aeabi_dsub>
 8023ca2:	4632      	mov	r2, r6
 8023ca4:	463b      	mov	r3, r7
 8023ca6:	f7dc fccf 	bl	8000648 <__aeabi_dmul>
 8023caa:	a365      	add	r3, pc, #404	; (adr r3, 8023e40 <__ieee754_exp+0x2a8>)
 8023cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cb0:	f7dc fb14 	bl	80002dc <__adddf3>
 8023cb4:	4632      	mov	r2, r6
 8023cb6:	463b      	mov	r3, r7
 8023cb8:	f7dc fcc6 	bl	8000648 <__aeabi_dmul>
 8023cbc:	a362      	add	r3, pc, #392	; (adr r3, 8023e48 <__ieee754_exp+0x2b0>)
 8023cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cc2:	f7dc fb09 	bl	80002d8 <__aeabi_dsub>
 8023cc6:	4632      	mov	r2, r6
 8023cc8:	463b      	mov	r3, r7
 8023cca:	f7dc fcbd 	bl	8000648 <__aeabi_dmul>
 8023cce:	a360      	add	r3, pc, #384	; (adr r3, 8023e50 <__ieee754_exp+0x2b8>)
 8023cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cd4:	f7dc fb02 	bl	80002dc <__adddf3>
 8023cd8:	4632      	mov	r2, r6
 8023cda:	463b      	mov	r3, r7
 8023cdc:	f7dc fcb4 	bl	8000648 <__aeabi_dmul>
 8023ce0:	4602      	mov	r2, r0
 8023ce2:	460b      	mov	r3, r1
 8023ce4:	4620      	mov	r0, r4
 8023ce6:	4629      	mov	r1, r5
 8023ce8:	f7dc faf6 	bl	80002d8 <__aeabi_dsub>
 8023cec:	4602      	mov	r2, r0
 8023cee:	460b      	mov	r3, r1
 8023cf0:	4606      	mov	r6, r0
 8023cf2:	460f      	mov	r7, r1
 8023cf4:	4620      	mov	r0, r4
 8023cf6:	4629      	mov	r1, r5
 8023cf8:	f7dc fca6 	bl	8000648 <__aeabi_dmul>
 8023cfc:	ec41 0b19 	vmov	d9, r0, r1
 8023d00:	f1ba 0f00 	cmp.w	sl, #0
 8023d04:	d15d      	bne.n	8023dc2 <__ieee754_exp+0x22a>
 8023d06:	2200      	movs	r2, #0
 8023d08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8023d0c:	4630      	mov	r0, r6
 8023d0e:	4639      	mov	r1, r7
 8023d10:	f7dc fae2 	bl	80002d8 <__aeabi_dsub>
 8023d14:	4602      	mov	r2, r0
 8023d16:	460b      	mov	r3, r1
 8023d18:	ec51 0b19 	vmov	r0, r1, d9
 8023d1c:	f7dc fdbe 	bl	800089c <__aeabi_ddiv>
 8023d20:	4622      	mov	r2, r4
 8023d22:	462b      	mov	r3, r5
 8023d24:	f7dc fad8 	bl	80002d8 <__aeabi_dsub>
 8023d28:	4602      	mov	r2, r0
 8023d2a:	460b      	mov	r3, r1
 8023d2c:	2000      	movs	r0, #0
 8023d2e:	4958      	ldr	r1, [pc, #352]	; (8023e90 <__ieee754_exp+0x2f8>)
 8023d30:	f7dc fad2 	bl	80002d8 <__aeabi_dsub>
 8023d34:	e74d      	b.n	8023bd2 <__ieee754_exp+0x3a>
 8023d36:	4857      	ldr	r0, [pc, #348]	; (8023e94 <__ieee754_exp+0x2fc>)
 8023d38:	a347      	add	r3, pc, #284	; (adr r3, 8023e58 <__ieee754_exp+0x2c0>)
 8023d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d3e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8023d42:	4629      	mov	r1, r5
 8023d44:	4620      	mov	r0, r4
 8023d46:	f7dc fc7f 	bl	8000648 <__aeabi_dmul>
 8023d4a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8023d4e:	f7dc fac5 	bl	80002dc <__adddf3>
 8023d52:	f7dc ff29 	bl	8000ba8 <__aeabi_d2iz>
 8023d56:	4682      	mov	sl, r0
 8023d58:	f7dc fc0c 	bl	8000574 <__aeabi_i2d>
 8023d5c:	a340      	add	r3, pc, #256	; (adr r3, 8023e60 <__ieee754_exp+0x2c8>)
 8023d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d62:	4606      	mov	r6, r0
 8023d64:	460f      	mov	r7, r1
 8023d66:	f7dc fc6f 	bl	8000648 <__aeabi_dmul>
 8023d6a:	4602      	mov	r2, r0
 8023d6c:	460b      	mov	r3, r1
 8023d6e:	4620      	mov	r0, r4
 8023d70:	4629      	mov	r1, r5
 8023d72:	f7dc fab1 	bl	80002d8 <__aeabi_dsub>
 8023d76:	a33c      	add	r3, pc, #240	; (adr r3, 8023e68 <__ieee754_exp+0x2d0>)
 8023d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d7c:	4680      	mov	r8, r0
 8023d7e:	4689      	mov	r9, r1
 8023d80:	4630      	mov	r0, r6
 8023d82:	4639      	mov	r1, r7
 8023d84:	f7dc fc60 	bl	8000648 <__aeabi_dmul>
 8023d88:	ec41 0b18 	vmov	d8, r0, r1
 8023d8c:	e76f      	b.n	8023c6e <__ieee754_exp+0xd6>
 8023d8e:	4a42      	ldr	r2, [pc, #264]	; (8023e98 <__ieee754_exp+0x300>)
 8023d90:	4293      	cmp	r3, r2
 8023d92:	d811      	bhi.n	8023db8 <__ieee754_exp+0x220>
 8023d94:	a336      	add	r3, pc, #216	; (adr r3, 8023e70 <__ieee754_exp+0x2d8>)
 8023d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d9a:	ee10 0a10 	vmov	r0, s0
 8023d9e:	4629      	mov	r1, r5
 8023da0:	f7dc fa9c 	bl	80002dc <__adddf3>
 8023da4:	4b3a      	ldr	r3, [pc, #232]	; (8023e90 <__ieee754_exp+0x2f8>)
 8023da6:	2200      	movs	r2, #0
 8023da8:	f7dc fede 	bl	8000b68 <__aeabi_dcmpgt>
 8023dac:	b138      	cbz	r0, 8023dbe <__ieee754_exp+0x226>
 8023dae:	4b38      	ldr	r3, [pc, #224]	; (8023e90 <__ieee754_exp+0x2f8>)
 8023db0:	2200      	movs	r2, #0
 8023db2:	4620      	mov	r0, r4
 8023db4:	4629      	mov	r1, r5
 8023db6:	e70a      	b.n	8023bce <__ieee754_exp+0x36>
 8023db8:	f04f 0a00 	mov.w	sl, #0
 8023dbc:	e75f      	b.n	8023c7e <__ieee754_exp+0xe6>
 8023dbe:	4682      	mov	sl, r0
 8023dc0:	e75d      	b.n	8023c7e <__ieee754_exp+0xe6>
 8023dc2:	4632      	mov	r2, r6
 8023dc4:	463b      	mov	r3, r7
 8023dc6:	2000      	movs	r0, #0
 8023dc8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8023dcc:	f7dc fa84 	bl	80002d8 <__aeabi_dsub>
 8023dd0:	4602      	mov	r2, r0
 8023dd2:	460b      	mov	r3, r1
 8023dd4:	ec51 0b19 	vmov	r0, r1, d9
 8023dd8:	f7dc fd60 	bl	800089c <__aeabi_ddiv>
 8023ddc:	4602      	mov	r2, r0
 8023dde:	460b      	mov	r3, r1
 8023de0:	ec51 0b18 	vmov	r0, r1, d8
 8023de4:	f7dc fa78 	bl	80002d8 <__aeabi_dsub>
 8023de8:	4642      	mov	r2, r8
 8023dea:	464b      	mov	r3, r9
 8023dec:	f7dc fa74 	bl	80002d8 <__aeabi_dsub>
 8023df0:	4602      	mov	r2, r0
 8023df2:	460b      	mov	r3, r1
 8023df4:	2000      	movs	r0, #0
 8023df6:	4926      	ldr	r1, [pc, #152]	; (8023e90 <__ieee754_exp+0x2f8>)
 8023df8:	f7dc fa6e 	bl	80002d8 <__aeabi_dsub>
 8023dfc:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8023e00:	4592      	cmp	sl, r2
 8023e02:	db02      	blt.n	8023e0a <__ieee754_exp+0x272>
 8023e04:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8023e08:	e6e3      	b.n	8023bd2 <__ieee754_exp+0x3a>
 8023e0a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8023e0e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8023e12:	2200      	movs	r2, #0
 8023e14:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8023e18:	f7dc fc16 	bl	8000648 <__aeabi_dmul>
 8023e1c:	e6d9      	b.n	8023bd2 <__ieee754_exp+0x3a>
 8023e1e:	bf00      	nop
 8023e20:	fefa39ef 	.word	0xfefa39ef
 8023e24:	40862e42 	.word	0x40862e42
 8023e28:	d52d3051 	.word	0xd52d3051
 8023e2c:	c0874910 	.word	0xc0874910
 8023e30:	72bea4d0 	.word	0x72bea4d0
 8023e34:	3e663769 	.word	0x3e663769
 8023e38:	c5d26bf1 	.word	0xc5d26bf1
 8023e3c:	3ebbbd41 	.word	0x3ebbbd41
 8023e40:	af25de2c 	.word	0xaf25de2c
 8023e44:	3f11566a 	.word	0x3f11566a
 8023e48:	16bebd93 	.word	0x16bebd93
 8023e4c:	3f66c16c 	.word	0x3f66c16c
 8023e50:	5555553e 	.word	0x5555553e
 8023e54:	3fc55555 	.word	0x3fc55555
 8023e58:	652b82fe 	.word	0x652b82fe
 8023e5c:	3ff71547 	.word	0x3ff71547
 8023e60:	fee00000 	.word	0xfee00000
 8023e64:	3fe62e42 	.word	0x3fe62e42
 8023e68:	35793c76 	.word	0x35793c76
 8023e6c:	3dea39ef 	.word	0x3dea39ef
 8023e70:	8800759c 	.word	0x8800759c
 8023e74:	7e37e43c 	.word	0x7e37e43c
 8023e78:	40862e41 	.word	0x40862e41
 8023e7c:	7fefffff 	.word	0x7fefffff
 8023e80:	3fd62e42 	.word	0x3fd62e42
 8023e84:	3ff0a2b1 	.word	0x3ff0a2b1
 8023e88:	08025650 	.word	0x08025650
 8023e8c:	08025660 	.word	0x08025660
 8023e90:	3ff00000 	.word	0x3ff00000
 8023e94:	08025640 	.word	0x08025640
 8023e98:	3defffff 	.word	0x3defffff
 8023e9c:	00000000 	.word	0x00000000

08023ea0 <__ieee754_rem_pio2>:
 8023ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ea4:	ed2d 8b02 	vpush	{d8}
 8023ea8:	ec55 4b10 	vmov	r4, r5, d0
 8023eac:	4bca      	ldr	r3, [pc, #808]	; (80241d8 <__ieee754_rem_pio2+0x338>)
 8023eae:	b08b      	sub	sp, #44	; 0x2c
 8023eb0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8023eb4:	4598      	cmp	r8, r3
 8023eb6:	4682      	mov	sl, r0
 8023eb8:	9502      	str	r5, [sp, #8]
 8023eba:	dc08      	bgt.n	8023ece <__ieee754_rem_pio2+0x2e>
 8023ebc:	2200      	movs	r2, #0
 8023ebe:	2300      	movs	r3, #0
 8023ec0:	ed80 0b00 	vstr	d0, [r0]
 8023ec4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8023ec8:	f04f 0b00 	mov.w	fp, #0
 8023ecc:	e028      	b.n	8023f20 <__ieee754_rem_pio2+0x80>
 8023ece:	4bc3      	ldr	r3, [pc, #780]	; (80241dc <__ieee754_rem_pio2+0x33c>)
 8023ed0:	4598      	cmp	r8, r3
 8023ed2:	dc78      	bgt.n	8023fc6 <__ieee754_rem_pio2+0x126>
 8023ed4:	9b02      	ldr	r3, [sp, #8]
 8023ed6:	4ec2      	ldr	r6, [pc, #776]	; (80241e0 <__ieee754_rem_pio2+0x340>)
 8023ed8:	2b00      	cmp	r3, #0
 8023eda:	ee10 0a10 	vmov	r0, s0
 8023ede:	a3b0      	add	r3, pc, #704	; (adr r3, 80241a0 <__ieee754_rem_pio2+0x300>)
 8023ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ee4:	4629      	mov	r1, r5
 8023ee6:	dd39      	ble.n	8023f5c <__ieee754_rem_pio2+0xbc>
 8023ee8:	f7dc f9f6 	bl	80002d8 <__aeabi_dsub>
 8023eec:	45b0      	cmp	r8, r6
 8023eee:	4604      	mov	r4, r0
 8023ef0:	460d      	mov	r5, r1
 8023ef2:	d01b      	beq.n	8023f2c <__ieee754_rem_pio2+0x8c>
 8023ef4:	a3ac      	add	r3, pc, #688	; (adr r3, 80241a8 <__ieee754_rem_pio2+0x308>)
 8023ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023efa:	f7dc f9ed 	bl	80002d8 <__aeabi_dsub>
 8023efe:	4602      	mov	r2, r0
 8023f00:	460b      	mov	r3, r1
 8023f02:	e9ca 2300 	strd	r2, r3, [sl]
 8023f06:	4620      	mov	r0, r4
 8023f08:	4629      	mov	r1, r5
 8023f0a:	f7dc f9e5 	bl	80002d8 <__aeabi_dsub>
 8023f0e:	a3a6      	add	r3, pc, #664	; (adr r3, 80241a8 <__ieee754_rem_pio2+0x308>)
 8023f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f14:	f7dc f9e0 	bl	80002d8 <__aeabi_dsub>
 8023f18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023f1c:	f04f 0b01 	mov.w	fp, #1
 8023f20:	4658      	mov	r0, fp
 8023f22:	b00b      	add	sp, #44	; 0x2c
 8023f24:	ecbd 8b02 	vpop	{d8}
 8023f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f2c:	a3a0      	add	r3, pc, #640	; (adr r3, 80241b0 <__ieee754_rem_pio2+0x310>)
 8023f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f32:	f7dc f9d1 	bl	80002d8 <__aeabi_dsub>
 8023f36:	a3a0      	add	r3, pc, #640	; (adr r3, 80241b8 <__ieee754_rem_pio2+0x318>)
 8023f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f3c:	4604      	mov	r4, r0
 8023f3e:	460d      	mov	r5, r1
 8023f40:	f7dc f9ca 	bl	80002d8 <__aeabi_dsub>
 8023f44:	4602      	mov	r2, r0
 8023f46:	460b      	mov	r3, r1
 8023f48:	e9ca 2300 	strd	r2, r3, [sl]
 8023f4c:	4620      	mov	r0, r4
 8023f4e:	4629      	mov	r1, r5
 8023f50:	f7dc f9c2 	bl	80002d8 <__aeabi_dsub>
 8023f54:	a398      	add	r3, pc, #608	; (adr r3, 80241b8 <__ieee754_rem_pio2+0x318>)
 8023f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f5a:	e7db      	b.n	8023f14 <__ieee754_rem_pio2+0x74>
 8023f5c:	f7dc f9be 	bl	80002dc <__adddf3>
 8023f60:	45b0      	cmp	r8, r6
 8023f62:	4604      	mov	r4, r0
 8023f64:	460d      	mov	r5, r1
 8023f66:	d016      	beq.n	8023f96 <__ieee754_rem_pio2+0xf6>
 8023f68:	a38f      	add	r3, pc, #572	; (adr r3, 80241a8 <__ieee754_rem_pio2+0x308>)
 8023f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f6e:	f7dc f9b5 	bl	80002dc <__adddf3>
 8023f72:	4602      	mov	r2, r0
 8023f74:	460b      	mov	r3, r1
 8023f76:	e9ca 2300 	strd	r2, r3, [sl]
 8023f7a:	4620      	mov	r0, r4
 8023f7c:	4629      	mov	r1, r5
 8023f7e:	f7dc f9ab 	bl	80002d8 <__aeabi_dsub>
 8023f82:	a389      	add	r3, pc, #548	; (adr r3, 80241a8 <__ieee754_rem_pio2+0x308>)
 8023f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f88:	f7dc f9a8 	bl	80002dc <__adddf3>
 8023f8c:	f04f 3bff 	mov.w	fp, #4294967295
 8023f90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023f94:	e7c4      	b.n	8023f20 <__ieee754_rem_pio2+0x80>
 8023f96:	a386      	add	r3, pc, #536	; (adr r3, 80241b0 <__ieee754_rem_pio2+0x310>)
 8023f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f9c:	f7dc f99e 	bl	80002dc <__adddf3>
 8023fa0:	a385      	add	r3, pc, #532	; (adr r3, 80241b8 <__ieee754_rem_pio2+0x318>)
 8023fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fa6:	4604      	mov	r4, r0
 8023fa8:	460d      	mov	r5, r1
 8023faa:	f7dc f997 	bl	80002dc <__adddf3>
 8023fae:	4602      	mov	r2, r0
 8023fb0:	460b      	mov	r3, r1
 8023fb2:	e9ca 2300 	strd	r2, r3, [sl]
 8023fb6:	4620      	mov	r0, r4
 8023fb8:	4629      	mov	r1, r5
 8023fba:	f7dc f98d 	bl	80002d8 <__aeabi_dsub>
 8023fbe:	a37e      	add	r3, pc, #504	; (adr r3, 80241b8 <__ieee754_rem_pio2+0x318>)
 8023fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fc4:	e7e0      	b.n	8023f88 <__ieee754_rem_pio2+0xe8>
 8023fc6:	4b87      	ldr	r3, [pc, #540]	; (80241e4 <__ieee754_rem_pio2+0x344>)
 8023fc8:	4598      	cmp	r8, r3
 8023fca:	f300 80d9 	bgt.w	8024180 <__ieee754_rem_pio2+0x2e0>
 8023fce:	f000 fe79 	bl	8024cc4 <fabs>
 8023fd2:	ec55 4b10 	vmov	r4, r5, d0
 8023fd6:	ee10 0a10 	vmov	r0, s0
 8023fda:	a379      	add	r3, pc, #484	; (adr r3, 80241c0 <__ieee754_rem_pio2+0x320>)
 8023fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fe0:	4629      	mov	r1, r5
 8023fe2:	f7dc fb31 	bl	8000648 <__aeabi_dmul>
 8023fe6:	4b80      	ldr	r3, [pc, #512]	; (80241e8 <__ieee754_rem_pio2+0x348>)
 8023fe8:	2200      	movs	r2, #0
 8023fea:	f7dc f977 	bl	80002dc <__adddf3>
 8023fee:	f7dc fddb 	bl	8000ba8 <__aeabi_d2iz>
 8023ff2:	4683      	mov	fp, r0
 8023ff4:	f7dc fabe 	bl	8000574 <__aeabi_i2d>
 8023ff8:	4602      	mov	r2, r0
 8023ffa:	460b      	mov	r3, r1
 8023ffc:	ec43 2b18 	vmov	d8, r2, r3
 8024000:	a367      	add	r3, pc, #412	; (adr r3, 80241a0 <__ieee754_rem_pio2+0x300>)
 8024002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024006:	f7dc fb1f 	bl	8000648 <__aeabi_dmul>
 802400a:	4602      	mov	r2, r0
 802400c:	460b      	mov	r3, r1
 802400e:	4620      	mov	r0, r4
 8024010:	4629      	mov	r1, r5
 8024012:	f7dc f961 	bl	80002d8 <__aeabi_dsub>
 8024016:	a364      	add	r3, pc, #400	; (adr r3, 80241a8 <__ieee754_rem_pio2+0x308>)
 8024018:	e9d3 2300 	ldrd	r2, r3, [r3]
 802401c:	4606      	mov	r6, r0
 802401e:	460f      	mov	r7, r1
 8024020:	ec51 0b18 	vmov	r0, r1, d8
 8024024:	f7dc fb10 	bl	8000648 <__aeabi_dmul>
 8024028:	f1bb 0f1f 	cmp.w	fp, #31
 802402c:	4604      	mov	r4, r0
 802402e:	460d      	mov	r5, r1
 8024030:	dc0d      	bgt.n	802404e <__ieee754_rem_pio2+0x1ae>
 8024032:	4b6e      	ldr	r3, [pc, #440]	; (80241ec <__ieee754_rem_pio2+0x34c>)
 8024034:	f10b 32ff 	add.w	r2, fp, #4294967295
 8024038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802403c:	4543      	cmp	r3, r8
 802403e:	d006      	beq.n	802404e <__ieee754_rem_pio2+0x1ae>
 8024040:	4622      	mov	r2, r4
 8024042:	462b      	mov	r3, r5
 8024044:	4630      	mov	r0, r6
 8024046:	4639      	mov	r1, r7
 8024048:	f7dc f946 	bl	80002d8 <__aeabi_dsub>
 802404c:	e00f      	b.n	802406e <__ieee754_rem_pio2+0x1ce>
 802404e:	462b      	mov	r3, r5
 8024050:	4622      	mov	r2, r4
 8024052:	4630      	mov	r0, r6
 8024054:	4639      	mov	r1, r7
 8024056:	f7dc f93f 	bl	80002d8 <__aeabi_dsub>
 802405a:	ea4f 5328 	mov.w	r3, r8, asr #20
 802405e:	9303      	str	r3, [sp, #12]
 8024060:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8024064:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8024068:	f1b8 0f10 	cmp.w	r8, #16
 802406c:	dc02      	bgt.n	8024074 <__ieee754_rem_pio2+0x1d4>
 802406e:	e9ca 0100 	strd	r0, r1, [sl]
 8024072:	e039      	b.n	80240e8 <__ieee754_rem_pio2+0x248>
 8024074:	a34e      	add	r3, pc, #312	; (adr r3, 80241b0 <__ieee754_rem_pio2+0x310>)
 8024076:	e9d3 2300 	ldrd	r2, r3, [r3]
 802407a:	ec51 0b18 	vmov	r0, r1, d8
 802407e:	f7dc fae3 	bl	8000648 <__aeabi_dmul>
 8024082:	4604      	mov	r4, r0
 8024084:	460d      	mov	r5, r1
 8024086:	4602      	mov	r2, r0
 8024088:	460b      	mov	r3, r1
 802408a:	4630      	mov	r0, r6
 802408c:	4639      	mov	r1, r7
 802408e:	f7dc f923 	bl	80002d8 <__aeabi_dsub>
 8024092:	4602      	mov	r2, r0
 8024094:	460b      	mov	r3, r1
 8024096:	4680      	mov	r8, r0
 8024098:	4689      	mov	r9, r1
 802409a:	4630      	mov	r0, r6
 802409c:	4639      	mov	r1, r7
 802409e:	f7dc f91b 	bl	80002d8 <__aeabi_dsub>
 80240a2:	4622      	mov	r2, r4
 80240a4:	462b      	mov	r3, r5
 80240a6:	f7dc f917 	bl	80002d8 <__aeabi_dsub>
 80240aa:	a343      	add	r3, pc, #268	; (adr r3, 80241b8 <__ieee754_rem_pio2+0x318>)
 80240ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240b0:	4604      	mov	r4, r0
 80240b2:	460d      	mov	r5, r1
 80240b4:	ec51 0b18 	vmov	r0, r1, d8
 80240b8:	f7dc fac6 	bl	8000648 <__aeabi_dmul>
 80240bc:	4622      	mov	r2, r4
 80240be:	462b      	mov	r3, r5
 80240c0:	f7dc f90a 	bl	80002d8 <__aeabi_dsub>
 80240c4:	4602      	mov	r2, r0
 80240c6:	460b      	mov	r3, r1
 80240c8:	4604      	mov	r4, r0
 80240ca:	460d      	mov	r5, r1
 80240cc:	4640      	mov	r0, r8
 80240ce:	4649      	mov	r1, r9
 80240d0:	f7dc f902 	bl	80002d8 <__aeabi_dsub>
 80240d4:	9a03      	ldr	r2, [sp, #12]
 80240d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80240da:	1ad3      	subs	r3, r2, r3
 80240dc:	2b31      	cmp	r3, #49	; 0x31
 80240de:	dc24      	bgt.n	802412a <__ieee754_rem_pio2+0x28a>
 80240e0:	e9ca 0100 	strd	r0, r1, [sl]
 80240e4:	4646      	mov	r6, r8
 80240e6:	464f      	mov	r7, r9
 80240e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80240ec:	4630      	mov	r0, r6
 80240ee:	4642      	mov	r2, r8
 80240f0:	464b      	mov	r3, r9
 80240f2:	4639      	mov	r1, r7
 80240f4:	f7dc f8f0 	bl	80002d8 <__aeabi_dsub>
 80240f8:	462b      	mov	r3, r5
 80240fa:	4622      	mov	r2, r4
 80240fc:	f7dc f8ec 	bl	80002d8 <__aeabi_dsub>
 8024100:	9b02      	ldr	r3, [sp, #8]
 8024102:	2b00      	cmp	r3, #0
 8024104:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8024108:	f6bf af0a 	bge.w	8023f20 <__ieee754_rem_pio2+0x80>
 802410c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8024110:	f8ca 3004 	str.w	r3, [sl, #4]
 8024114:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024118:	f8ca 8000 	str.w	r8, [sl]
 802411c:	f8ca 0008 	str.w	r0, [sl, #8]
 8024120:	f8ca 300c 	str.w	r3, [sl, #12]
 8024124:	f1cb 0b00 	rsb	fp, fp, #0
 8024128:	e6fa      	b.n	8023f20 <__ieee754_rem_pio2+0x80>
 802412a:	a327      	add	r3, pc, #156	; (adr r3, 80241c8 <__ieee754_rem_pio2+0x328>)
 802412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024130:	ec51 0b18 	vmov	r0, r1, d8
 8024134:	f7dc fa88 	bl	8000648 <__aeabi_dmul>
 8024138:	4604      	mov	r4, r0
 802413a:	460d      	mov	r5, r1
 802413c:	4602      	mov	r2, r0
 802413e:	460b      	mov	r3, r1
 8024140:	4640      	mov	r0, r8
 8024142:	4649      	mov	r1, r9
 8024144:	f7dc f8c8 	bl	80002d8 <__aeabi_dsub>
 8024148:	4602      	mov	r2, r0
 802414a:	460b      	mov	r3, r1
 802414c:	4606      	mov	r6, r0
 802414e:	460f      	mov	r7, r1
 8024150:	4640      	mov	r0, r8
 8024152:	4649      	mov	r1, r9
 8024154:	f7dc f8c0 	bl	80002d8 <__aeabi_dsub>
 8024158:	4622      	mov	r2, r4
 802415a:	462b      	mov	r3, r5
 802415c:	f7dc f8bc 	bl	80002d8 <__aeabi_dsub>
 8024160:	a31b      	add	r3, pc, #108	; (adr r3, 80241d0 <__ieee754_rem_pio2+0x330>)
 8024162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024166:	4604      	mov	r4, r0
 8024168:	460d      	mov	r5, r1
 802416a:	ec51 0b18 	vmov	r0, r1, d8
 802416e:	f7dc fa6b 	bl	8000648 <__aeabi_dmul>
 8024172:	4622      	mov	r2, r4
 8024174:	462b      	mov	r3, r5
 8024176:	f7dc f8af 	bl	80002d8 <__aeabi_dsub>
 802417a:	4604      	mov	r4, r0
 802417c:	460d      	mov	r5, r1
 802417e:	e75f      	b.n	8024040 <__ieee754_rem_pio2+0x1a0>
 8024180:	4b1b      	ldr	r3, [pc, #108]	; (80241f0 <__ieee754_rem_pio2+0x350>)
 8024182:	4598      	cmp	r8, r3
 8024184:	dd36      	ble.n	80241f4 <__ieee754_rem_pio2+0x354>
 8024186:	ee10 2a10 	vmov	r2, s0
 802418a:	462b      	mov	r3, r5
 802418c:	4620      	mov	r0, r4
 802418e:	4629      	mov	r1, r5
 8024190:	f7dc f8a2 	bl	80002d8 <__aeabi_dsub>
 8024194:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8024198:	e9ca 0100 	strd	r0, r1, [sl]
 802419c:	e694      	b.n	8023ec8 <__ieee754_rem_pio2+0x28>
 802419e:	bf00      	nop
 80241a0:	54400000 	.word	0x54400000
 80241a4:	3ff921fb 	.word	0x3ff921fb
 80241a8:	1a626331 	.word	0x1a626331
 80241ac:	3dd0b461 	.word	0x3dd0b461
 80241b0:	1a600000 	.word	0x1a600000
 80241b4:	3dd0b461 	.word	0x3dd0b461
 80241b8:	2e037073 	.word	0x2e037073
 80241bc:	3ba3198a 	.word	0x3ba3198a
 80241c0:	6dc9c883 	.word	0x6dc9c883
 80241c4:	3fe45f30 	.word	0x3fe45f30
 80241c8:	2e000000 	.word	0x2e000000
 80241cc:	3ba3198a 	.word	0x3ba3198a
 80241d0:	252049c1 	.word	0x252049c1
 80241d4:	397b839a 	.word	0x397b839a
 80241d8:	3fe921fb 	.word	0x3fe921fb
 80241dc:	4002d97b 	.word	0x4002d97b
 80241e0:	3ff921fb 	.word	0x3ff921fb
 80241e4:	413921fb 	.word	0x413921fb
 80241e8:	3fe00000 	.word	0x3fe00000
 80241ec:	08025670 	.word	0x08025670
 80241f0:	7fefffff 	.word	0x7fefffff
 80241f4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80241f8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80241fc:	ee10 0a10 	vmov	r0, s0
 8024200:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8024204:	ee10 6a10 	vmov	r6, s0
 8024208:	460f      	mov	r7, r1
 802420a:	f7dc fccd 	bl	8000ba8 <__aeabi_d2iz>
 802420e:	f7dc f9b1 	bl	8000574 <__aeabi_i2d>
 8024212:	4602      	mov	r2, r0
 8024214:	460b      	mov	r3, r1
 8024216:	4630      	mov	r0, r6
 8024218:	4639      	mov	r1, r7
 802421a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802421e:	f7dc f85b 	bl	80002d8 <__aeabi_dsub>
 8024222:	4b23      	ldr	r3, [pc, #140]	; (80242b0 <__ieee754_rem_pio2+0x410>)
 8024224:	2200      	movs	r2, #0
 8024226:	f7dc fa0f 	bl	8000648 <__aeabi_dmul>
 802422a:	460f      	mov	r7, r1
 802422c:	4606      	mov	r6, r0
 802422e:	f7dc fcbb 	bl	8000ba8 <__aeabi_d2iz>
 8024232:	f7dc f99f 	bl	8000574 <__aeabi_i2d>
 8024236:	4602      	mov	r2, r0
 8024238:	460b      	mov	r3, r1
 802423a:	4630      	mov	r0, r6
 802423c:	4639      	mov	r1, r7
 802423e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8024242:	f7dc f849 	bl	80002d8 <__aeabi_dsub>
 8024246:	4b1a      	ldr	r3, [pc, #104]	; (80242b0 <__ieee754_rem_pio2+0x410>)
 8024248:	2200      	movs	r2, #0
 802424a:	f7dc f9fd 	bl	8000648 <__aeabi_dmul>
 802424e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8024252:	ad04      	add	r5, sp, #16
 8024254:	f04f 0803 	mov.w	r8, #3
 8024258:	46a9      	mov	r9, r5
 802425a:	2600      	movs	r6, #0
 802425c:	2700      	movs	r7, #0
 802425e:	4632      	mov	r2, r6
 8024260:	463b      	mov	r3, r7
 8024262:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8024266:	46c3      	mov	fp, r8
 8024268:	3d08      	subs	r5, #8
 802426a:	f108 38ff 	add.w	r8, r8, #4294967295
 802426e:	f7dc fc53 	bl	8000b18 <__aeabi_dcmpeq>
 8024272:	2800      	cmp	r0, #0
 8024274:	d1f3      	bne.n	802425e <__ieee754_rem_pio2+0x3be>
 8024276:	4b0f      	ldr	r3, [pc, #60]	; (80242b4 <__ieee754_rem_pio2+0x414>)
 8024278:	9301      	str	r3, [sp, #4]
 802427a:	2302      	movs	r3, #2
 802427c:	9300      	str	r3, [sp, #0]
 802427e:	4622      	mov	r2, r4
 8024280:	465b      	mov	r3, fp
 8024282:	4651      	mov	r1, sl
 8024284:	4648      	mov	r0, r9
 8024286:	f000 f8df 	bl	8024448 <__kernel_rem_pio2>
 802428a:	9b02      	ldr	r3, [sp, #8]
 802428c:	2b00      	cmp	r3, #0
 802428e:	4683      	mov	fp, r0
 8024290:	f6bf ae46 	bge.w	8023f20 <__ieee754_rem_pio2+0x80>
 8024294:	e9da 2100 	ldrd	r2, r1, [sl]
 8024298:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802429c:	e9ca 2300 	strd	r2, r3, [sl]
 80242a0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80242a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80242a8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80242ac:	e73a      	b.n	8024124 <__ieee754_rem_pio2+0x284>
 80242ae:	bf00      	nop
 80242b0:	41700000 	.word	0x41700000
 80242b4:	080256f0 	.word	0x080256f0

080242b8 <__kernel_cos>:
 80242b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80242bc:	ec57 6b10 	vmov	r6, r7, d0
 80242c0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80242c4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80242c8:	ed8d 1b00 	vstr	d1, [sp]
 80242cc:	da07      	bge.n	80242de <__kernel_cos+0x26>
 80242ce:	ee10 0a10 	vmov	r0, s0
 80242d2:	4639      	mov	r1, r7
 80242d4:	f7dc fc68 	bl	8000ba8 <__aeabi_d2iz>
 80242d8:	2800      	cmp	r0, #0
 80242da:	f000 8088 	beq.w	80243ee <__kernel_cos+0x136>
 80242de:	4632      	mov	r2, r6
 80242e0:	463b      	mov	r3, r7
 80242e2:	4630      	mov	r0, r6
 80242e4:	4639      	mov	r1, r7
 80242e6:	f7dc f9af 	bl	8000648 <__aeabi_dmul>
 80242ea:	4b51      	ldr	r3, [pc, #324]	; (8024430 <__kernel_cos+0x178>)
 80242ec:	2200      	movs	r2, #0
 80242ee:	4604      	mov	r4, r0
 80242f0:	460d      	mov	r5, r1
 80242f2:	f7dc f9a9 	bl	8000648 <__aeabi_dmul>
 80242f6:	a340      	add	r3, pc, #256	; (adr r3, 80243f8 <__kernel_cos+0x140>)
 80242f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242fc:	4682      	mov	sl, r0
 80242fe:	468b      	mov	fp, r1
 8024300:	4620      	mov	r0, r4
 8024302:	4629      	mov	r1, r5
 8024304:	f7dc f9a0 	bl	8000648 <__aeabi_dmul>
 8024308:	a33d      	add	r3, pc, #244	; (adr r3, 8024400 <__kernel_cos+0x148>)
 802430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802430e:	f7db ffe5 	bl	80002dc <__adddf3>
 8024312:	4622      	mov	r2, r4
 8024314:	462b      	mov	r3, r5
 8024316:	f7dc f997 	bl	8000648 <__aeabi_dmul>
 802431a:	a33b      	add	r3, pc, #236	; (adr r3, 8024408 <__kernel_cos+0x150>)
 802431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024320:	f7db ffda 	bl	80002d8 <__aeabi_dsub>
 8024324:	4622      	mov	r2, r4
 8024326:	462b      	mov	r3, r5
 8024328:	f7dc f98e 	bl	8000648 <__aeabi_dmul>
 802432c:	a338      	add	r3, pc, #224	; (adr r3, 8024410 <__kernel_cos+0x158>)
 802432e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024332:	f7db ffd3 	bl	80002dc <__adddf3>
 8024336:	4622      	mov	r2, r4
 8024338:	462b      	mov	r3, r5
 802433a:	f7dc f985 	bl	8000648 <__aeabi_dmul>
 802433e:	a336      	add	r3, pc, #216	; (adr r3, 8024418 <__kernel_cos+0x160>)
 8024340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024344:	f7db ffc8 	bl	80002d8 <__aeabi_dsub>
 8024348:	4622      	mov	r2, r4
 802434a:	462b      	mov	r3, r5
 802434c:	f7dc f97c 	bl	8000648 <__aeabi_dmul>
 8024350:	a333      	add	r3, pc, #204	; (adr r3, 8024420 <__kernel_cos+0x168>)
 8024352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024356:	f7db ffc1 	bl	80002dc <__adddf3>
 802435a:	4622      	mov	r2, r4
 802435c:	462b      	mov	r3, r5
 802435e:	f7dc f973 	bl	8000648 <__aeabi_dmul>
 8024362:	4622      	mov	r2, r4
 8024364:	462b      	mov	r3, r5
 8024366:	f7dc f96f 	bl	8000648 <__aeabi_dmul>
 802436a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802436e:	4604      	mov	r4, r0
 8024370:	460d      	mov	r5, r1
 8024372:	4630      	mov	r0, r6
 8024374:	4639      	mov	r1, r7
 8024376:	f7dc f967 	bl	8000648 <__aeabi_dmul>
 802437a:	460b      	mov	r3, r1
 802437c:	4602      	mov	r2, r0
 802437e:	4629      	mov	r1, r5
 8024380:	4620      	mov	r0, r4
 8024382:	f7db ffa9 	bl	80002d8 <__aeabi_dsub>
 8024386:	4b2b      	ldr	r3, [pc, #172]	; (8024434 <__kernel_cos+0x17c>)
 8024388:	4598      	cmp	r8, r3
 802438a:	4606      	mov	r6, r0
 802438c:	460f      	mov	r7, r1
 802438e:	dc10      	bgt.n	80243b2 <__kernel_cos+0xfa>
 8024390:	4602      	mov	r2, r0
 8024392:	460b      	mov	r3, r1
 8024394:	4650      	mov	r0, sl
 8024396:	4659      	mov	r1, fp
 8024398:	f7db ff9e 	bl	80002d8 <__aeabi_dsub>
 802439c:	460b      	mov	r3, r1
 802439e:	4926      	ldr	r1, [pc, #152]	; (8024438 <__kernel_cos+0x180>)
 80243a0:	4602      	mov	r2, r0
 80243a2:	2000      	movs	r0, #0
 80243a4:	f7db ff98 	bl	80002d8 <__aeabi_dsub>
 80243a8:	ec41 0b10 	vmov	d0, r0, r1
 80243ac:	b003      	add	sp, #12
 80243ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243b2:	4b22      	ldr	r3, [pc, #136]	; (802443c <__kernel_cos+0x184>)
 80243b4:	4920      	ldr	r1, [pc, #128]	; (8024438 <__kernel_cos+0x180>)
 80243b6:	4598      	cmp	r8, r3
 80243b8:	bfcc      	ite	gt
 80243ba:	4d21      	ldrgt	r5, [pc, #132]	; (8024440 <__kernel_cos+0x188>)
 80243bc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80243c0:	2400      	movs	r4, #0
 80243c2:	4622      	mov	r2, r4
 80243c4:	462b      	mov	r3, r5
 80243c6:	2000      	movs	r0, #0
 80243c8:	f7db ff86 	bl	80002d8 <__aeabi_dsub>
 80243cc:	4622      	mov	r2, r4
 80243ce:	4680      	mov	r8, r0
 80243d0:	4689      	mov	r9, r1
 80243d2:	462b      	mov	r3, r5
 80243d4:	4650      	mov	r0, sl
 80243d6:	4659      	mov	r1, fp
 80243d8:	f7db ff7e 	bl	80002d8 <__aeabi_dsub>
 80243dc:	4632      	mov	r2, r6
 80243de:	463b      	mov	r3, r7
 80243e0:	f7db ff7a 	bl	80002d8 <__aeabi_dsub>
 80243e4:	4602      	mov	r2, r0
 80243e6:	460b      	mov	r3, r1
 80243e8:	4640      	mov	r0, r8
 80243ea:	4649      	mov	r1, r9
 80243ec:	e7da      	b.n	80243a4 <__kernel_cos+0xec>
 80243ee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8024428 <__kernel_cos+0x170>
 80243f2:	e7db      	b.n	80243ac <__kernel_cos+0xf4>
 80243f4:	f3af 8000 	nop.w
 80243f8:	be8838d4 	.word	0xbe8838d4
 80243fc:	bda8fae9 	.word	0xbda8fae9
 8024400:	bdb4b1c4 	.word	0xbdb4b1c4
 8024404:	3e21ee9e 	.word	0x3e21ee9e
 8024408:	809c52ad 	.word	0x809c52ad
 802440c:	3e927e4f 	.word	0x3e927e4f
 8024410:	19cb1590 	.word	0x19cb1590
 8024414:	3efa01a0 	.word	0x3efa01a0
 8024418:	16c15177 	.word	0x16c15177
 802441c:	3f56c16c 	.word	0x3f56c16c
 8024420:	5555554c 	.word	0x5555554c
 8024424:	3fa55555 	.word	0x3fa55555
 8024428:	00000000 	.word	0x00000000
 802442c:	3ff00000 	.word	0x3ff00000
 8024430:	3fe00000 	.word	0x3fe00000
 8024434:	3fd33332 	.word	0x3fd33332
 8024438:	3ff00000 	.word	0x3ff00000
 802443c:	3fe90000 	.word	0x3fe90000
 8024440:	3fd20000 	.word	0x3fd20000
 8024444:	00000000 	.word	0x00000000

08024448 <__kernel_rem_pio2>:
 8024448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802444c:	ed2d 8b02 	vpush	{d8}
 8024450:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8024454:	f112 0f14 	cmn.w	r2, #20
 8024458:	9308      	str	r3, [sp, #32]
 802445a:	9101      	str	r1, [sp, #4]
 802445c:	4bc4      	ldr	r3, [pc, #784]	; (8024770 <__kernel_rem_pio2+0x328>)
 802445e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8024460:	900b      	str	r0, [sp, #44]	; 0x2c
 8024462:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8024466:	9302      	str	r3, [sp, #8]
 8024468:	9b08      	ldr	r3, [sp, #32]
 802446a:	f103 33ff 	add.w	r3, r3, #4294967295
 802446e:	bfa8      	it	ge
 8024470:	1ed4      	subge	r4, r2, #3
 8024472:	9306      	str	r3, [sp, #24]
 8024474:	bfb2      	itee	lt
 8024476:	2400      	movlt	r4, #0
 8024478:	2318      	movge	r3, #24
 802447a:	fb94 f4f3 	sdivge	r4, r4, r3
 802447e:	f06f 0317 	mvn.w	r3, #23
 8024482:	fb04 3303 	mla	r3, r4, r3, r3
 8024486:	eb03 0a02 	add.w	sl, r3, r2
 802448a:	9b02      	ldr	r3, [sp, #8]
 802448c:	9a06      	ldr	r2, [sp, #24]
 802448e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8024760 <__kernel_rem_pio2+0x318>
 8024492:	eb03 0802 	add.w	r8, r3, r2
 8024496:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8024498:	1aa7      	subs	r7, r4, r2
 802449a:	ae22      	add	r6, sp, #136	; 0x88
 802449c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80244a0:	2500      	movs	r5, #0
 80244a2:	4545      	cmp	r5, r8
 80244a4:	dd13      	ble.n	80244ce <__kernel_rem_pio2+0x86>
 80244a6:	9b08      	ldr	r3, [sp, #32]
 80244a8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8024760 <__kernel_rem_pio2+0x318>
 80244ac:	aa22      	add	r2, sp, #136	; 0x88
 80244ae:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80244b2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80244b6:	f04f 0800 	mov.w	r8, #0
 80244ba:	9b02      	ldr	r3, [sp, #8]
 80244bc:	4598      	cmp	r8, r3
 80244be:	dc2f      	bgt.n	8024520 <__kernel_rem_pio2+0xd8>
 80244c0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80244c4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80244c8:	462f      	mov	r7, r5
 80244ca:	2600      	movs	r6, #0
 80244cc:	e01b      	b.n	8024506 <__kernel_rem_pio2+0xbe>
 80244ce:	42ef      	cmn	r7, r5
 80244d0:	d407      	bmi.n	80244e2 <__kernel_rem_pio2+0x9a>
 80244d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80244d6:	f7dc f84d 	bl	8000574 <__aeabi_i2d>
 80244da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80244de:	3501      	adds	r5, #1
 80244e0:	e7df      	b.n	80244a2 <__kernel_rem_pio2+0x5a>
 80244e2:	ec51 0b18 	vmov	r0, r1, d8
 80244e6:	e7f8      	b.n	80244da <__kernel_rem_pio2+0x92>
 80244e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80244ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80244f0:	f7dc f8aa 	bl	8000648 <__aeabi_dmul>
 80244f4:	4602      	mov	r2, r0
 80244f6:	460b      	mov	r3, r1
 80244f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80244fc:	f7db feee 	bl	80002dc <__adddf3>
 8024500:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024504:	3601      	adds	r6, #1
 8024506:	9b06      	ldr	r3, [sp, #24]
 8024508:	429e      	cmp	r6, r3
 802450a:	f1a7 0708 	sub.w	r7, r7, #8
 802450e:	ddeb      	ble.n	80244e8 <__kernel_rem_pio2+0xa0>
 8024510:	ed9d 7b04 	vldr	d7, [sp, #16]
 8024514:	f108 0801 	add.w	r8, r8, #1
 8024518:	ecab 7b02 	vstmia	fp!, {d7}
 802451c:	3508      	adds	r5, #8
 802451e:	e7cc      	b.n	80244ba <__kernel_rem_pio2+0x72>
 8024520:	9b02      	ldr	r3, [sp, #8]
 8024522:	aa0e      	add	r2, sp, #56	; 0x38
 8024524:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8024528:	930d      	str	r3, [sp, #52]	; 0x34
 802452a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 802452c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8024530:	9c02      	ldr	r4, [sp, #8]
 8024532:	930c      	str	r3, [sp, #48]	; 0x30
 8024534:	00e3      	lsls	r3, r4, #3
 8024536:	930a      	str	r3, [sp, #40]	; 0x28
 8024538:	ab9a      	add	r3, sp, #616	; 0x268
 802453a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802453e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8024542:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8024546:	ab72      	add	r3, sp, #456	; 0x1c8
 8024548:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 802454c:	46c3      	mov	fp, r8
 802454e:	46a1      	mov	r9, r4
 8024550:	f1b9 0f00 	cmp.w	r9, #0
 8024554:	f1a5 0508 	sub.w	r5, r5, #8
 8024558:	dc77      	bgt.n	802464a <__kernel_rem_pio2+0x202>
 802455a:	ec47 6b10 	vmov	d0, r6, r7
 802455e:	4650      	mov	r0, sl
 8024560:	f000 fc46 	bl	8024df0 <scalbn>
 8024564:	ec57 6b10 	vmov	r6, r7, d0
 8024568:	2200      	movs	r2, #0
 802456a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 802456e:	ee10 0a10 	vmov	r0, s0
 8024572:	4639      	mov	r1, r7
 8024574:	f7dc f868 	bl	8000648 <__aeabi_dmul>
 8024578:	ec41 0b10 	vmov	d0, r0, r1
 802457c:	f000 fbb8 	bl	8024cf0 <floor>
 8024580:	4b7c      	ldr	r3, [pc, #496]	; (8024774 <__kernel_rem_pio2+0x32c>)
 8024582:	ec51 0b10 	vmov	r0, r1, d0
 8024586:	2200      	movs	r2, #0
 8024588:	f7dc f85e 	bl	8000648 <__aeabi_dmul>
 802458c:	4602      	mov	r2, r0
 802458e:	460b      	mov	r3, r1
 8024590:	4630      	mov	r0, r6
 8024592:	4639      	mov	r1, r7
 8024594:	f7db fea0 	bl	80002d8 <__aeabi_dsub>
 8024598:	460f      	mov	r7, r1
 802459a:	4606      	mov	r6, r0
 802459c:	f7dc fb04 	bl	8000ba8 <__aeabi_d2iz>
 80245a0:	9004      	str	r0, [sp, #16]
 80245a2:	f7db ffe7 	bl	8000574 <__aeabi_i2d>
 80245a6:	4602      	mov	r2, r0
 80245a8:	460b      	mov	r3, r1
 80245aa:	4630      	mov	r0, r6
 80245ac:	4639      	mov	r1, r7
 80245ae:	f7db fe93 	bl	80002d8 <__aeabi_dsub>
 80245b2:	f1ba 0f00 	cmp.w	sl, #0
 80245b6:	4606      	mov	r6, r0
 80245b8:	460f      	mov	r7, r1
 80245ba:	dd6d      	ble.n	8024698 <__kernel_rem_pio2+0x250>
 80245bc:	1e62      	subs	r2, r4, #1
 80245be:	ab0e      	add	r3, sp, #56	; 0x38
 80245c0:	9d04      	ldr	r5, [sp, #16]
 80245c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80245c6:	f1ca 0118 	rsb	r1, sl, #24
 80245ca:	fa40 f301 	asr.w	r3, r0, r1
 80245ce:	441d      	add	r5, r3
 80245d0:	408b      	lsls	r3, r1
 80245d2:	1ac0      	subs	r0, r0, r3
 80245d4:	ab0e      	add	r3, sp, #56	; 0x38
 80245d6:	9504      	str	r5, [sp, #16]
 80245d8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80245dc:	f1ca 0317 	rsb	r3, sl, #23
 80245e0:	fa40 fb03 	asr.w	fp, r0, r3
 80245e4:	f1bb 0f00 	cmp.w	fp, #0
 80245e8:	dd65      	ble.n	80246b6 <__kernel_rem_pio2+0x26e>
 80245ea:	9b04      	ldr	r3, [sp, #16]
 80245ec:	2200      	movs	r2, #0
 80245ee:	3301      	adds	r3, #1
 80245f0:	9304      	str	r3, [sp, #16]
 80245f2:	4615      	mov	r5, r2
 80245f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80245f8:	4294      	cmp	r4, r2
 80245fa:	f300 809c 	bgt.w	8024736 <__kernel_rem_pio2+0x2ee>
 80245fe:	f1ba 0f00 	cmp.w	sl, #0
 8024602:	dd07      	ble.n	8024614 <__kernel_rem_pio2+0x1cc>
 8024604:	f1ba 0f01 	cmp.w	sl, #1
 8024608:	f000 80c0 	beq.w	802478c <__kernel_rem_pio2+0x344>
 802460c:	f1ba 0f02 	cmp.w	sl, #2
 8024610:	f000 80c6 	beq.w	80247a0 <__kernel_rem_pio2+0x358>
 8024614:	f1bb 0f02 	cmp.w	fp, #2
 8024618:	d14d      	bne.n	80246b6 <__kernel_rem_pio2+0x26e>
 802461a:	4632      	mov	r2, r6
 802461c:	463b      	mov	r3, r7
 802461e:	4956      	ldr	r1, [pc, #344]	; (8024778 <__kernel_rem_pio2+0x330>)
 8024620:	2000      	movs	r0, #0
 8024622:	f7db fe59 	bl	80002d8 <__aeabi_dsub>
 8024626:	4606      	mov	r6, r0
 8024628:	460f      	mov	r7, r1
 802462a:	2d00      	cmp	r5, #0
 802462c:	d043      	beq.n	80246b6 <__kernel_rem_pio2+0x26e>
 802462e:	4650      	mov	r0, sl
 8024630:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8024768 <__kernel_rem_pio2+0x320>
 8024634:	f000 fbdc 	bl	8024df0 <scalbn>
 8024638:	4630      	mov	r0, r6
 802463a:	4639      	mov	r1, r7
 802463c:	ec53 2b10 	vmov	r2, r3, d0
 8024640:	f7db fe4a 	bl	80002d8 <__aeabi_dsub>
 8024644:	4606      	mov	r6, r0
 8024646:	460f      	mov	r7, r1
 8024648:	e035      	b.n	80246b6 <__kernel_rem_pio2+0x26e>
 802464a:	4b4c      	ldr	r3, [pc, #304]	; (802477c <__kernel_rem_pio2+0x334>)
 802464c:	2200      	movs	r2, #0
 802464e:	4630      	mov	r0, r6
 8024650:	4639      	mov	r1, r7
 8024652:	f7db fff9 	bl	8000648 <__aeabi_dmul>
 8024656:	f7dc faa7 	bl	8000ba8 <__aeabi_d2iz>
 802465a:	f7db ff8b 	bl	8000574 <__aeabi_i2d>
 802465e:	4602      	mov	r2, r0
 8024660:	460b      	mov	r3, r1
 8024662:	ec43 2b18 	vmov	d8, r2, r3
 8024666:	4b46      	ldr	r3, [pc, #280]	; (8024780 <__kernel_rem_pio2+0x338>)
 8024668:	2200      	movs	r2, #0
 802466a:	f7db ffed 	bl	8000648 <__aeabi_dmul>
 802466e:	4602      	mov	r2, r0
 8024670:	460b      	mov	r3, r1
 8024672:	4630      	mov	r0, r6
 8024674:	4639      	mov	r1, r7
 8024676:	f7db fe2f 	bl	80002d8 <__aeabi_dsub>
 802467a:	f7dc fa95 	bl	8000ba8 <__aeabi_d2iz>
 802467e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8024682:	f84b 0b04 	str.w	r0, [fp], #4
 8024686:	ec51 0b18 	vmov	r0, r1, d8
 802468a:	f7db fe27 	bl	80002dc <__adddf3>
 802468e:	f109 39ff 	add.w	r9, r9, #4294967295
 8024692:	4606      	mov	r6, r0
 8024694:	460f      	mov	r7, r1
 8024696:	e75b      	b.n	8024550 <__kernel_rem_pio2+0x108>
 8024698:	d106      	bne.n	80246a8 <__kernel_rem_pio2+0x260>
 802469a:	1e63      	subs	r3, r4, #1
 802469c:	aa0e      	add	r2, sp, #56	; 0x38
 802469e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80246a2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80246a6:	e79d      	b.n	80245e4 <__kernel_rem_pio2+0x19c>
 80246a8:	4b36      	ldr	r3, [pc, #216]	; (8024784 <__kernel_rem_pio2+0x33c>)
 80246aa:	2200      	movs	r2, #0
 80246ac:	f7dc fa52 	bl	8000b54 <__aeabi_dcmpge>
 80246b0:	2800      	cmp	r0, #0
 80246b2:	d13d      	bne.n	8024730 <__kernel_rem_pio2+0x2e8>
 80246b4:	4683      	mov	fp, r0
 80246b6:	2200      	movs	r2, #0
 80246b8:	2300      	movs	r3, #0
 80246ba:	4630      	mov	r0, r6
 80246bc:	4639      	mov	r1, r7
 80246be:	f7dc fa2b 	bl	8000b18 <__aeabi_dcmpeq>
 80246c2:	2800      	cmp	r0, #0
 80246c4:	f000 80c0 	beq.w	8024848 <__kernel_rem_pio2+0x400>
 80246c8:	1e65      	subs	r5, r4, #1
 80246ca:	462b      	mov	r3, r5
 80246cc:	2200      	movs	r2, #0
 80246ce:	9902      	ldr	r1, [sp, #8]
 80246d0:	428b      	cmp	r3, r1
 80246d2:	da6c      	bge.n	80247ae <__kernel_rem_pio2+0x366>
 80246d4:	2a00      	cmp	r2, #0
 80246d6:	f000 8089 	beq.w	80247ec <__kernel_rem_pio2+0x3a4>
 80246da:	ab0e      	add	r3, sp, #56	; 0x38
 80246dc:	f1aa 0a18 	sub.w	sl, sl, #24
 80246e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80246e4:	2b00      	cmp	r3, #0
 80246e6:	f000 80ad 	beq.w	8024844 <__kernel_rem_pio2+0x3fc>
 80246ea:	4650      	mov	r0, sl
 80246ec:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8024768 <__kernel_rem_pio2+0x320>
 80246f0:	f000 fb7e 	bl	8024df0 <scalbn>
 80246f4:	ab9a      	add	r3, sp, #616	; 0x268
 80246f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80246fa:	ec57 6b10 	vmov	r6, r7, d0
 80246fe:	00ec      	lsls	r4, r5, #3
 8024700:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8024704:	46aa      	mov	sl, r5
 8024706:	f1ba 0f00 	cmp.w	sl, #0
 802470a:	f280 80d6 	bge.w	80248ba <__kernel_rem_pio2+0x472>
 802470e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8024760 <__kernel_rem_pio2+0x318>
 8024712:	462e      	mov	r6, r5
 8024714:	2e00      	cmp	r6, #0
 8024716:	f2c0 8104 	blt.w	8024922 <__kernel_rem_pio2+0x4da>
 802471a:	ab72      	add	r3, sp, #456	; 0x1c8
 802471c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8024720:	f8df a064 	ldr.w	sl, [pc, #100]	; 8024788 <__kernel_rem_pio2+0x340>
 8024724:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8024728:	f04f 0800 	mov.w	r8, #0
 802472c:	1baf      	subs	r7, r5, r6
 802472e:	e0ea      	b.n	8024906 <__kernel_rem_pio2+0x4be>
 8024730:	f04f 0b02 	mov.w	fp, #2
 8024734:	e759      	b.n	80245ea <__kernel_rem_pio2+0x1a2>
 8024736:	f8d8 3000 	ldr.w	r3, [r8]
 802473a:	b955      	cbnz	r5, 8024752 <__kernel_rem_pio2+0x30a>
 802473c:	b123      	cbz	r3, 8024748 <__kernel_rem_pio2+0x300>
 802473e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8024742:	f8c8 3000 	str.w	r3, [r8]
 8024746:	2301      	movs	r3, #1
 8024748:	3201      	adds	r2, #1
 802474a:	f108 0804 	add.w	r8, r8, #4
 802474e:	461d      	mov	r5, r3
 8024750:	e752      	b.n	80245f8 <__kernel_rem_pio2+0x1b0>
 8024752:	1acb      	subs	r3, r1, r3
 8024754:	f8c8 3000 	str.w	r3, [r8]
 8024758:	462b      	mov	r3, r5
 802475a:	e7f5      	b.n	8024748 <__kernel_rem_pio2+0x300>
 802475c:	f3af 8000 	nop.w
	...
 802476c:	3ff00000 	.word	0x3ff00000
 8024770:	08025838 	.word	0x08025838
 8024774:	40200000 	.word	0x40200000
 8024778:	3ff00000 	.word	0x3ff00000
 802477c:	3e700000 	.word	0x3e700000
 8024780:	41700000 	.word	0x41700000
 8024784:	3fe00000 	.word	0x3fe00000
 8024788:	080257f8 	.word	0x080257f8
 802478c:	1e62      	subs	r2, r4, #1
 802478e:	ab0e      	add	r3, sp, #56	; 0x38
 8024790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024794:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8024798:	a90e      	add	r1, sp, #56	; 0x38
 802479a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 802479e:	e739      	b.n	8024614 <__kernel_rem_pio2+0x1cc>
 80247a0:	1e62      	subs	r2, r4, #1
 80247a2:	ab0e      	add	r3, sp, #56	; 0x38
 80247a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80247a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80247ac:	e7f4      	b.n	8024798 <__kernel_rem_pio2+0x350>
 80247ae:	a90e      	add	r1, sp, #56	; 0x38
 80247b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80247b4:	3b01      	subs	r3, #1
 80247b6:	430a      	orrs	r2, r1
 80247b8:	e789      	b.n	80246ce <__kernel_rem_pio2+0x286>
 80247ba:	3301      	adds	r3, #1
 80247bc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80247c0:	2900      	cmp	r1, #0
 80247c2:	d0fa      	beq.n	80247ba <__kernel_rem_pio2+0x372>
 80247c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80247c6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80247ca:	446a      	add	r2, sp
 80247cc:	3a98      	subs	r2, #152	; 0x98
 80247ce:	920a      	str	r2, [sp, #40]	; 0x28
 80247d0:	9a08      	ldr	r2, [sp, #32]
 80247d2:	18e3      	adds	r3, r4, r3
 80247d4:	18a5      	adds	r5, r4, r2
 80247d6:	aa22      	add	r2, sp, #136	; 0x88
 80247d8:	f104 0801 	add.w	r8, r4, #1
 80247dc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80247e0:	9304      	str	r3, [sp, #16]
 80247e2:	9b04      	ldr	r3, [sp, #16]
 80247e4:	4543      	cmp	r3, r8
 80247e6:	da04      	bge.n	80247f2 <__kernel_rem_pio2+0x3aa>
 80247e8:	461c      	mov	r4, r3
 80247ea:	e6a3      	b.n	8024534 <__kernel_rem_pio2+0xec>
 80247ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80247ee:	2301      	movs	r3, #1
 80247f0:	e7e4      	b.n	80247bc <__kernel_rem_pio2+0x374>
 80247f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80247f4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80247f8:	f7db febc 	bl	8000574 <__aeabi_i2d>
 80247fc:	e8e5 0102 	strd	r0, r1, [r5], #8
 8024800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024802:	46ab      	mov	fp, r5
 8024804:	461c      	mov	r4, r3
 8024806:	f04f 0900 	mov.w	r9, #0
 802480a:	2600      	movs	r6, #0
 802480c:	2700      	movs	r7, #0
 802480e:	9b06      	ldr	r3, [sp, #24]
 8024810:	4599      	cmp	r9, r3
 8024812:	dd06      	ble.n	8024822 <__kernel_rem_pio2+0x3da>
 8024814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024816:	e8e3 6702 	strd	r6, r7, [r3], #8
 802481a:	f108 0801 	add.w	r8, r8, #1
 802481e:	930a      	str	r3, [sp, #40]	; 0x28
 8024820:	e7df      	b.n	80247e2 <__kernel_rem_pio2+0x39a>
 8024822:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8024826:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 802482a:	f7db ff0d 	bl	8000648 <__aeabi_dmul>
 802482e:	4602      	mov	r2, r0
 8024830:	460b      	mov	r3, r1
 8024832:	4630      	mov	r0, r6
 8024834:	4639      	mov	r1, r7
 8024836:	f7db fd51 	bl	80002dc <__adddf3>
 802483a:	f109 0901 	add.w	r9, r9, #1
 802483e:	4606      	mov	r6, r0
 8024840:	460f      	mov	r7, r1
 8024842:	e7e4      	b.n	802480e <__kernel_rem_pio2+0x3c6>
 8024844:	3d01      	subs	r5, #1
 8024846:	e748      	b.n	80246da <__kernel_rem_pio2+0x292>
 8024848:	ec47 6b10 	vmov	d0, r6, r7
 802484c:	f1ca 0000 	rsb	r0, sl, #0
 8024850:	f000 face 	bl	8024df0 <scalbn>
 8024854:	ec57 6b10 	vmov	r6, r7, d0
 8024858:	4ba0      	ldr	r3, [pc, #640]	; (8024adc <__kernel_rem_pio2+0x694>)
 802485a:	ee10 0a10 	vmov	r0, s0
 802485e:	2200      	movs	r2, #0
 8024860:	4639      	mov	r1, r7
 8024862:	f7dc f977 	bl	8000b54 <__aeabi_dcmpge>
 8024866:	b1f8      	cbz	r0, 80248a8 <__kernel_rem_pio2+0x460>
 8024868:	4b9d      	ldr	r3, [pc, #628]	; (8024ae0 <__kernel_rem_pio2+0x698>)
 802486a:	2200      	movs	r2, #0
 802486c:	4630      	mov	r0, r6
 802486e:	4639      	mov	r1, r7
 8024870:	f7db feea 	bl	8000648 <__aeabi_dmul>
 8024874:	f7dc f998 	bl	8000ba8 <__aeabi_d2iz>
 8024878:	4680      	mov	r8, r0
 802487a:	f7db fe7b 	bl	8000574 <__aeabi_i2d>
 802487e:	4b97      	ldr	r3, [pc, #604]	; (8024adc <__kernel_rem_pio2+0x694>)
 8024880:	2200      	movs	r2, #0
 8024882:	f7db fee1 	bl	8000648 <__aeabi_dmul>
 8024886:	460b      	mov	r3, r1
 8024888:	4602      	mov	r2, r0
 802488a:	4639      	mov	r1, r7
 802488c:	4630      	mov	r0, r6
 802488e:	f7db fd23 	bl	80002d8 <__aeabi_dsub>
 8024892:	f7dc f989 	bl	8000ba8 <__aeabi_d2iz>
 8024896:	1c65      	adds	r5, r4, #1
 8024898:	ab0e      	add	r3, sp, #56	; 0x38
 802489a:	f10a 0a18 	add.w	sl, sl, #24
 802489e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80248a2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80248a6:	e720      	b.n	80246ea <__kernel_rem_pio2+0x2a2>
 80248a8:	4630      	mov	r0, r6
 80248aa:	4639      	mov	r1, r7
 80248ac:	f7dc f97c 	bl	8000ba8 <__aeabi_d2iz>
 80248b0:	ab0e      	add	r3, sp, #56	; 0x38
 80248b2:	4625      	mov	r5, r4
 80248b4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80248b8:	e717      	b.n	80246ea <__kernel_rem_pio2+0x2a2>
 80248ba:	ab0e      	add	r3, sp, #56	; 0x38
 80248bc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80248c0:	f7db fe58 	bl	8000574 <__aeabi_i2d>
 80248c4:	4632      	mov	r2, r6
 80248c6:	463b      	mov	r3, r7
 80248c8:	f7db febe 	bl	8000648 <__aeabi_dmul>
 80248cc:	4b84      	ldr	r3, [pc, #528]	; (8024ae0 <__kernel_rem_pio2+0x698>)
 80248ce:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80248d2:	2200      	movs	r2, #0
 80248d4:	4630      	mov	r0, r6
 80248d6:	4639      	mov	r1, r7
 80248d8:	f7db feb6 	bl	8000648 <__aeabi_dmul>
 80248dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80248e0:	4606      	mov	r6, r0
 80248e2:	460f      	mov	r7, r1
 80248e4:	e70f      	b.n	8024706 <__kernel_rem_pio2+0x2be>
 80248e6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80248ea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80248ee:	f7db feab 	bl	8000648 <__aeabi_dmul>
 80248f2:	4602      	mov	r2, r0
 80248f4:	460b      	mov	r3, r1
 80248f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80248fa:	f7db fcef 	bl	80002dc <__adddf3>
 80248fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8024902:	f108 0801 	add.w	r8, r8, #1
 8024906:	9b02      	ldr	r3, [sp, #8]
 8024908:	4598      	cmp	r8, r3
 802490a:	dc01      	bgt.n	8024910 <__kernel_rem_pio2+0x4c8>
 802490c:	45b8      	cmp	r8, r7
 802490e:	ddea      	ble.n	80248e6 <__kernel_rem_pio2+0x49e>
 8024910:	ed9d 7b06 	vldr	d7, [sp, #24]
 8024914:	ab4a      	add	r3, sp, #296	; 0x128
 8024916:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 802491a:	ed87 7b00 	vstr	d7, [r7]
 802491e:	3e01      	subs	r6, #1
 8024920:	e6f8      	b.n	8024714 <__kernel_rem_pio2+0x2cc>
 8024922:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8024924:	2b02      	cmp	r3, #2
 8024926:	dc0b      	bgt.n	8024940 <__kernel_rem_pio2+0x4f8>
 8024928:	2b00      	cmp	r3, #0
 802492a:	dc35      	bgt.n	8024998 <__kernel_rem_pio2+0x550>
 802492c:	d059      	beq.n	80249e2 <__kernel_rem_pio2+0x59a>
 802492e:	9b04      	ldr	r3, [sp, #16]
 8024930:	f003 0007 	and.w	r0, r3, #7
 8024934:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8024938:	ecbd 8b02 	vpop	{d8}
 802493c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024940:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8024942:	2b03      	cmp	r3, #3
 8024944:	d1f3      	bne.n	802492e <__kernel_rem_pio2+0x4e6>
 8024946:	ab4a      	add	r3, sp, #296	; 0x128
 8024948:	4423      	add	r3, r4
 802494a:	9306      	str	r3, [sp, #24]
 802494c:	461c      	mov	r4, r3
 802494e:	469a      	mov	sl, r3
 8024950:	9502      	str	r5, [sp, #8]
 8024952:	9b02      	ldr	r3, [sp, #8]
 8024954:	2b00      	cmp	r3, #0
 8024956:	f1aa 0a08 	sub.w	sl, sl, #8
 802495a:	dc6b      	bgt.n	8024a34 <__kernel_rem_pio2+0x5ec>
 802495c:	46aa      	mov	sl, r5
 802495e:	f1ba 0f01 	cmp.w	sl, #1
 8024962:	f1a4 0408 	sub.w	r4, r4, #8
 8024966:	f300 8085 	bgt.w	8024a74 <__kernel_rem_pio2+0x62c>
 802496a:	9c06      	ldr	r4, [sp, #24]
 802496c:	2000      	movs	r0, #0
 802496e:	3408      	adds	r4, #8
 8024970:	2100      	movs	r1, #0
 8024972:	2d01      	cmp	r5, #1
 8024974:	f300 809d 	bgt.w	8024ab2 <__kernel_rem_pio2+0x66a>
 8024978:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 802497c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8024980:	f1bb 0f00 	cmp.w	fp, #0
 8024984:	f040 809b 	bne.w	8024abe <__kernel_rem_pio2+0x676>
 8024988:	9b01      	ldr	r3, [sp, #4]
 802498a:	e9c3 5600 	strd	r5, r6, [r3]
 802498e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8024992:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8024996:	e7ca      	b.n	802492e <__kernel_rem_pio2+0x4e6>
 8024998:	3408      	adds	r4, #8
 802499a:	ab4a      	add	r3, sp, #296	; 0x128
 802499c:	441c      	add	r4, r3
 802499e:	462e      	mov	r6, r5
 80249a0:	2000      	movs	r0, #0
 80249a2:	2100      	movs	r1, #0
 80249a4:	2e00      	cmp	r6, #0
 80249a6:	da36      	bge.n	8024a16 <__kernel_rem_pio2+0x5ce>
 80249a8:	f1bb 0f00 	cmp.w	fp, #0
 80249ac:	d039      	beq.n	8024a22 <__kernel_rem_pio2+0x5da>
 80249ae:	4602      	mov	r2, r0
 80249b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80249b4:	9c01      	ldr	r4, [sp, #4]
 80249b6:	e9c4 2300 	strd	r2, r3, [r4]
 80249ba:	4602      	mov	r2, r0
 80249bc:	460b      	mov	r3, r1
 80249be:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80249c2:	f7db fc89 	bl	80002d8 <__aeabi_dsub>
 80249c6:	ae4c      	add	r6, sp, #304	; 0x130
 80249c8:	2401      	movs	r4, #1
 80249ca:	42a5      	cmp	r5, r4
 80249cc:	da2c      	bge.n	8024a28 <__kernel_rem_pio2+0x5e0>
 80249ce:	f1bb 0f00 	cmp.w	fp, #0
 80249d2:	d002      	beq.n	80249da <__kernel_rem_pio2+0x592>
 80249d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80249d8:	4619      	mov	r1, r3
 80249da:	9b01      	ldr	r3, [sp, #4]
 80249dc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80249e0:	e7a5      	b.n	802492e <__kernel_rem_pio2+0x4e6>
 80249e2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80249e6:	eb0d 0403 	add.w	r4, sp, r3
 80249ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80249ee:	2000      	movs	r0, #0
 80249f0:	2100      	movs	r1, #0
 80249f2:	2d00      	cmp	r5, #0
 80249f4:	da09      	bge.n	8024a0a <__kernel_rem_pio2+0x5c2>
 80249f6:	f1bb 0f00 	cmp.w	fp, #0
 80249fa:	d002      	beq.n	8024a02 <__kernel_rem_pio2+0x5ba>
 80249fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024a00:	4619      	mov	r1, r3
 8024a02:	9b01      	ldr	r3, [sp, #4]
 8024a04:	e9c3 0100 	strd	r0, r1, [r3]
 8024a08:	e791      	b.n	802492e <__kernel_rem_pio2+0x4e6>
 8024a0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8024a0e:	f7db fc65 	bl	80002dc <__adddf3>
 8024a12:	3d01      	subs	r5, #1
 8024a14:	e7ed      	b.n	80249f2 <__kernel_rem_pio2+0x5aa>
 8024a16:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8024a1a:	f7db fc5f 	bl	80002dc <__adddf3>
 8024a1e:	3e01      	subs	r6, #1
 8024a20:	e7c0      	b.n	80249a4 <__kernel_rem_pio2+0x55c>
 8024a22:	4602      	mov	r2, r0
 8024a24:	460b      	mov	r3, r1
 8024a26:	e7c5      	b.n	80249b4 <__kernel_rem_pio2+0x56c>
 8024a28:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8024a2c:	f7db fc56 	bl	80002dc <__adddf3>
 8024a30:	3401      	adds	r4, #1
 8024a32:	e7ca      	b.n	80249ca <__kernel_rem_pio2+0x582>
 8024a34:	e9da 8900 	ldrd	r8, r9, [sl]
 8024a38:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8024a3c:	9b02      	ldr	r3, [sp, #8]
 8024a3e:	3b01      	subs	r3, #1
 8024a40:	9302      	str	r3, [sp, #8]
 8024a42:	4632      	mov	r2, r6
 8024a44:	463b      	mov	r3, r7
 8024a46:	4640      	mov	r0, r8
 8024a48:	4649      	mov	r1, r9
 8024a4a:	f7db fc47 	bl	80002dc <__adddf3>
 8024a4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8024a52:	4602      	mov	r2, r0
 8024a54:	460b      	mov	r3, r1
 8024a56:	4640      	mov	r0, r8
 8024a58:	4649      	mov	r1, r9
 8024a5a:	f7db fc3d 	bl	80002d8 <__aeabi_dsub>
 8024a5e:	4632      	mov	r2, r6
 8024a60:	463b      	mov	r3, r7
 8024a62:	f7db fc3b 	bl	80002dc <__adddf3>
 8024a66:	ed9d 7b08 	vldr	d7, [sp, #32]
 8024a6a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8024a6e:	ed8a 7b00 	vstr	d7, [sl]
 8024a72:	e76e      	b.n	8024952 <__kernel_rem_pio2+0x50a>
 8024a74:	e9d4 8900 	ldrd	r8, r9, [r4]
 8024a78:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8024a7c:	4640      	mov	r0, r8
 8024a7e:	4632      	mov	r2, r6
 8024a80:	463b      	mov	r3, r7
 8024a82:	4649      	mov	r1, r9
 8024a84:	f7db fc2a 	bl	80002dc <__adddf3>
 8024a88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024a8c:	4602      	mov	r2, r0
 8024a8e:	460b      	mov	r3, r1
 8024a90:	4640      	mov	r0, r8
 8024a92:	4649      	mov	r1, r9
 8024a94:	f7db fc20 	bl	80002d8 <__aeabi_dsub>
 8024a98:	4632      	mov	r2, r6
 8024a9a:	463b      	mov	r3, r7
 8024a9c:	f7db fc1e 	bl	80002dc <__adddf3>
 8024aa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024aa4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8024aa8:	ed84 7b00 	vstr	d7, [r4]
 8024aac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024ab0:	e755      	b.n	802495e <__kernel_rem_pio2+0x516>
 8024ab2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8024ab6:	f7db fc11 	bl	80002dc <__adddf3>
 8024aba:	3d01      	subs	r5, #1
 8024abc:	e759      	b.n	8024972 <__kernel_rem_pio2+0x52a>
 8024abe:	9b01      	ldr	r3, [sp, #4]
 8024ac0:	9a01      	ldr	r2, [sp, #4]
 8024ac2:	601d      	str	r5, [r3, #0]
 8024ac4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8024ac8:	605c      	str	r4, [r3, #4]
 8024aca:	609f      	str	r7, [r3, #8]
 8024acc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8024ad0:	60d3      	str	r3, [r2, #12]
 8024ad2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024ad6:	6110      	str	r0, [r2, #16]
 8024ad8:	6153      	str	r3, [r2, #20]
 8024ada:	e728      	b.n	802492e <__kernel_rem_pio2+0x4e6>
 8024adc:	41700000 	.word	0x41700000
 8024ae0:	3e700000 	.word	0x3e700000
 8024ae4:	00000000 	.word	0x00000000

08024ae8 <__kernel_sin>:
 8024ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024aec:	ed2d 8b04 	vpush	{d8-d9}
 8024af0:	eeb0 8a41 	vmov.f32	s16, s2
 8024af4:	eef0 8a61 	vmov.f32	s17, s3
 8024af8:	ec55 4b10 	vmov	r4, r5, d0
 8024afc:	b083      	sub	sp, #12
 8024afe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8024b02:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8024b06:	9001      	str	r0, [sp, #4]
 8024b08:	da06      	bge.n	8024b18 <__kernel_sin+0x30>
 8024b0a:	ee10 0a10 	vmov	r0, s0
 8024b0e:	4629      	mov	r1, r5
 8024b10:	f7dc f84a 	bl	8000ba8 <__aeabi_d2iz>
 8024b14:	2800      	cmp	r0, #0
 8024b16:	d051      	beq.n	8024bbc <__kernel_sin+0xd4>
 8024b18:	4622      	mov	r2, r4
 8024b1a:	462b      	mov	r3, r5
 8024b1c:	4620      	mov	r0, r4
 8024b1e:	4629      	mov	r1, r5
 8024b20:	f7db fd92 	bl	8000648 <__aeabi_dmul>
 8024b24:	4682      	mov	sl, r0
 8024b26:	468b      	mov	fp, r1
 8024b28:	4602      	mov	r2, r0
 8024b2a:	460b      	mov	r3, r1
 8024b2c:	4620      	mov	r0, r4
 8024b2e:	4629      	mov	r1, r5
 8024b30:	f7db fd8a 	bl	8000648 <__aeabi_dmul>
 8024b34:	a341      	add	r3, pc, #260	; (adr r3, 8024c3c <__kernel_sin+0x154>)
 8024b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b3a:	4680      	mov	r8, r0
 8024b3c:	4689      	mov	r9, r1
 8024b3e:	4650      	mov	r0, sl
 8024b40:	4659      	mov	r1, fp
 8024b42:	f7db fd81 	bl	8000648 <__aeabi_dmul>
 8024b46:	a33f      	add	r3, pc, #252	; (adr r3, 8024c44 <__kernel_sin+0x15c>)
 8024b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b4c:	f7db fbc4 	bl	80002d8 <__aeabi_dsub>
 8024b50:	4652      	mov	r2, sl
 8024b52:	465b      	mov	r3, fp
 8024b54:	f7db fd78 	bl	8000648 <__aeabi_dmul>
 8024b58:	a33c      	add	r3, pc, #240	; (adr r3, 8024c4c <__kernel_sin+0x164>)
 8024b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b5e:	f7db fbbd 	bl	80002dc <__adddf3>
 8024b62:	4652      	mov	r2, sl
 8024b64:	465b      	mov	r3, fp
 8024b66:	f7db fd6f 	bl	8000648 <__aeabi_dmul>
 8024b6a:	a33a      	add	r3, pc, #232	; (adr r3, 8024c54 <__kernel_sin+0x16c>)
 8024b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b70:	f7db fbb2 	bl	80002d8 <__aeabi_dsub>
 8024b74:	4652      	mov	r2, sl
 8024b76:	465b      	mov	r3, fp
 8024b78:	f7db fd66 	bl	8000648 <__aeabi_dmul>
 8024b7c:	a337      	add	r3, pc, #220	; (adr r3, 8024c5c <__kernel_sin+0x174>)
 8024b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b82:	f7db fbab 	bl	80002dc <__adddf3>
 8024b86:	9b01      	ldr	r3, [sp, #4]
 8024b88:	4606      	mov	r6, r0
 8024b8a:	460f      	mov	r7, r1
 8024b8c:	b9eb      	cbnz	r3, 8024bca <__kernel_sin+0xe2>
 8024b8e:	4602      	mov	r2, r0
 8024b90:	460b      	mov	r3, r1
 8024b92:	4650      	mov	r0, sl
 8024b94:	4659      	mov	r1, fp
 8024b96:	f7db fd57 	bl	8000648 <__aeabi_dmul>
 8024b9a:	a325      	add	r3, pc, #148	; (adr r3, 8024c30 <__kernel_sin+0x148>)
 8024b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ba0:	f7db fb9a 	bl	80002d8 <__aeabi_dsub>
 8024ba4:	4642      	mov	r2, r8
 8024ba6:	464b      	mov	r3, r9
 8024ba8:	f7db fd4e 	bl	8000648 <__aeabi_dmul>
 8024bac:	4602      	mov	r2, r0
 8024bae:	460b      	mov	r3, r1
 8024bb0:	4620      	mov	r0, r4
 8024bb2:	4629      	mov	r1, r5
 8024bb4:	f7db fb92 	bl	80002dc <__adddf3>
 8024bb8:	4604      	mov	r4, r0
 8024bba:	460d      	mov	r5, r1
 8024bbc:	ec45 4b10 	vmov	d0, r4, r5
 8024bc0:	b003      	add	sp, #12
 8024bc2:	ecbd 8b04 	vpop	{d8-d9}
 8024bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024bca:	4b1b      	ldr	r3, [pc, #108]	; (8024c38 <__kernel_sin+0x150>)
 8024bcc:	ec51 0b18 	vmov	r0, r1, d8
 8024bd0:	2200      	movs	r2, #0
 8024bd2:	f7db fd39 	bl	8000648 <__aeabi_dmul>
 8024bd6:	4632      	mov	r2, r6
 8024bd8:	ec41 0b19 	vmov	d9, r0, r1
 8024bdc:	463b      	mov	r3, r7
 8024bde:	4640      	mov	r0, r8
 8024be0:	4649      	mov	r1, r9
 8024be2:	f7db fd31 	bl	8000648 <__aeabi_dmul>
 8024be6:	4602      	mov	r2, r0
 8024be8:	460b      	mov	r3, r1
 8024bea:	ec51 0b19 	vmov	r0, r1, d9
 8024bee:	f7db fb73 	bl	80002d8 <__aeabi_dsub>
 8024bf2:	4652      	mov	r2, sl
 8024bf4:	465b      	mov	r3, fp
 8024bf6:	f7db fd27 	bl	8000648 <__aeabi_dmul>
 8024bfa:	ec53 2b18 	vmov	r2, r3, d8
 8024bfe:	f7db fb6b 	bl	80002d8 <__aeabi_dsub>
 8024c02:	a30b      	add	r3, pc, #44	; (adr r3, 8024c30 <__kernel_sin+0x148>)
 8024c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c08:	4606      	mov	r6, r0
 8024c0a:	460f      	mov	r7, r1
 8024c0c:	4640      	mov	r0, r8
 8024c0e:	4649      	mov	r1, r9
 8024c10:	f7db fd1a 	bl	8000648 <__aeabi_dmul>
 8024c14:	4602      	mov	r2, r0
 8024c16:	460b      	mov	r3, r1
 8024c18:	4630      	mov	r0, r6
 8024c1a:	4639      	mov	r1, r7
 8024c1c:	f7db fb5e 	bl	80002dc <__adddf3>
 8024c20:	4602      	mov	r2, r0
 8024c22:	460b      	mov	r3, r1
 8024c24:	4620      	mov	r0, r4
 8024c26:	4629      	mov	r1, r5
 8024c28:	f7db fb56 	bl	80002d8 <__aeabi_dsub>
 8024c2c:	e7c4      	b.n	8024bb8 <__kernel_sin+0xd0>
 8024c2e:	bf00      	nop
 8024c30:	55555549 	.word	0x55555549
 8024c34:	3fc55555 	.word	0x3fc55555
 8024c38:	3fe00000 	.word	0x3fe00000
 8024c3c:	5acfd57c 	.word	0x5acfd57c
 8024c40:	3de5d93a 	.word	0x3de5d93a
 8024c44:	8a2b9ceb 	.word	0x8a2b9ceb
 8024c48:	3e5ae5e6 	.word	0x3e5ae5e6
 8024c4c:	57b1fe7d 	.word	0x57b1fe7d
 8024c50:	3ec71de3 	.word	0x3ec71de3
 8024c54:	19c161d5 	.word	0x19c161d5
 8024c58:	3f2a01a0 	.word	0x3f2a01a0
 8024c5c:	1110f8a6 	.word	0x1110f8a6
 8024c60:	3f811111 	.word	0x3f811111

08024c64 <with_errno>:
 8024c64:	b570      	push	{r4, r5, r6, lr}
 8024c66:	4604      	mov	r4, r0
 8024c68:	460d      	mov	r5, r1
 8024c6a:	4616      	mov	r6, r2
 8024c6c:	f7fb ffea 	bl	8020c44 <__errno>
 8024c70:	4629      	mov	r1, r5
 8024c72:	6006      	str	r6, [r0, #0]
 8024c74:	4620      	mov	r0, r4
 8024c76:	bd70      	pop	{r4, r5, r6, pc}

08024c78 <xflow>:
 8024c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024c7a:	4614      	mov	r4, r2
 8024c7c:	461d      	mov	r5, r3
 8024c7e:	b108      	cbz	r0, 8024c84 <xflow+0xc>
 8024c80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8024c84:	e9cd 2300 	strd	r2, r3, [sp]
 8024c88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024c8c:	4620      	mov	r0, r4
 8024c8e:	4629      	mov	r1, r5
 8024c90:	f7db fcda 	bl	8000648 <__aeabi_dmul>
 8024c94:	2222      	movs	r2, #34	; 0x22
 8024c96:	b003      	add	sp, #12
 8024c98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024c9c:	f7ff bfe2 	b.w	8024c64 <with_errno>

08024ca0 <__math_uflow>:
 8024ca0:	b508      	push	{r3, lr}
 8024ca2:	2200      	movs	r2, #0
 8024ca4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8024ca8:	f7ff ffe6 	bl	8024c78 <xflow>
 8024cac:	ec41 0b10 	vmov	d0, r0, r1
 8024cb0:	bd08      	pop	{r3, pc}

08024cb2 <__math_oflow>:
 8024cb2:	b508      	push	{r3, lr}
 8024cb4:	2200      	movs	r2, #0
 8024cb6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8024cba:	f7ff ffdd 	bl	8024c78 <xflow>
 8024cbe:	ec41 0b10 	vmov	d0, r0, r1
 8024cc2:	bd08      	pop	{r3, pc}

08024cc4 <fabs>:
 8024cc4:	ec51 0b10 	vmov	r0, r1, d0
 8024cc8:	ee10 2a10 	vmov	r2, s0
 8024ccc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8024cd0:	ec43 2b10 	vmov	d0, r2, r3
 8024cd4:	4770      	bx	lr

08024cd6 <finite>:
 8024cd6:	b082      	sub	sp, #8
 8024cd8:	ed8d 0b00 	vstr	d0, [sp]
 8024cdc:	9801      	ldr	r0, [sp, #4]
 8024cde:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8024ce2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8024ce6:	0fc0      	lsrs	r0, r0, #31
 8024ce8:	b002      	add	sp, #8
 8024cea:	4770      	bx	lr
 8024cec:	0000      	movs	r0, r0
	...

08024cf0 <floor>:
 8024cf0:	ec51 0b10 	vmov	r0, r1, d0
 8024cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024cf8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8024cfc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8024d00:	2e13      	cmp	r6, #19
 8024d02:	ee10 5a10 	vmov	r5, s0
 8024d06:	ee10 8a10 	vmov	r8, s0
 8024d0a:	460c      	mov	r4, r1
 8024d0c:	dc32      	bgt.n	8024d74 <floor+0x84>
 8024d0e:	2e00      	cmp	r6, #0
 8024d10:	da14      	bge.n	8024d3c <floor+0x4c>
 8024d12:	a333      	add	r3, pc, #204	; (adr r3, 8024de0 <floor+0xf0>)
 8024d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d18:	f7db fae0 	bl	80002dc <__adddf3>
 8024d1c:	2200      	movs	r2, #0
 8024d1e:	2300      	movs	r3, #0
 8024d20:	f7db ff22 	bl	8000b68 <__aeabi_dcmpgt>
 8024d24:	b138      	cbz	r0, 8024d36 <floor+0x46>
 8024d26:	2c00      	cmp	r4, #0
 8024d28:	da57      	bge.n	8024dda <floor+0xea>
 8024d2a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8024d2e:	431d      	orrs	r5, r3
 8024d30:	d001      	beq.n	8024d36 <floor+0x46>
 8024d32:	4c2d      	ldr	r4, [pc, #180]	; (8024de8 <floor+0xf8>)
 8024d34:	2500      	movs	r5, #0
 8024d36:	4621      	mov	r1, r4
 8024d38:	4628      	mov	r0, r5
 8024d3a:	e025      	b.n	8024d88 <floor+0x98>
 8024d3c:	4f2b      	ldr	r7, [pc, #172]	; (8024dec <floor+0xfc>)
 8024d3e:	4137      	asrs	r7, r6
 8024d40:	ea01 0307 	and.w	r3, r1, r7
 8024d44:	4303      	orrs	r3, r0
 8024d46:	d01f      	beq.n	8024d88 <floor+0x98>
 8024d48:	a325      	add	r3, pc, #148	; (adr r3, 8024de0 <floor+0xf0>)
 8024d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d4e:	f7db fac5 	bl	80002dc <__adddf3>
 8024d52:	2200      	movs	r2, #0
 8024d54:	2300      	movs	r3, #0
 8024d56:	f7db ff07 	bl	8000b68 <__aeabi_dcmpgt>
 8024d5a:	2800      	cmp	r0, #0
 8024d5c:	d0eb      	beq.n	8024d36 <floor+0x46>
 8024d5e:	2c00      	cmp	r4, #0
 8024d60:	bfbe      	ittt	lt
 8024d62:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8024d66:	fa43 f606 	asrlt.w	r6, r3, r6
 8024d6a:	19a4      	addlt	r4, r4, r6
 8024d6c:	ea24 0407 	bic.w	r4, r4, r7
 8024d70:	2500      	movs	r5, #0
 8024d72:	e7e0      	b.n	8024d36 <floor+0x46>
 8024d74:	2e33      	cmp	r6, #51	; 0x33
 8024d76:	dd0b      	ble.n	8024d90 <floor+0xa0>
 8024d78:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024d7c:	d104      	bne.n	8024d88 <floor+0x98>
 8024d7e:	ee10 2a10 	vmov	r2, s0
 8024d82:	460b      	mov	r3, r1
 8024d84:	f7db faaa 	bl	80002dc <__adddf3>
 8024d88:	ec41 0b10 	vmov	d0, r0, r1
 8024d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024d90:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8024d94:	f04f 33ff 	mov.w	r3, #4294967295
 8024d98:	fa23 f707 	lsr.w	r7, r3, r7
 8024d9c:	4207      	tst	r7, r0
 8024d9e:	d0f3      	beq.n	8024d88 <floor+0x98>
 8024da0:	a30f      	add	r3, pc, #60	; (adr r3, 8024de0 <floor+0xf0>)
 8024da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024da6:	f7db fa99 	bl	80002dc <__adddf3>
 8024daa:	2200      	movs	r2, #0
 8024dac:	2300      	movs	r3, #0
 8024dae:	f7db fedb 	bl	8000b68 <__aeabi_dcmpgt>
 8024db2:	2800      	cmp	r0, #0
 8024db4:	d0bf      	beq.n	8024d36 <floor+0x46>
 8024db6:	2c00      	cmp	r4, #0
 8024db8:	da02      	bge.n	8024dc0 <floor+0xd0>
 8024dba:	2e14      	cmp	r6, #20
 8024dbc:	d103      	bne.n	8024dc6 <floor+0xd6>
 8024dbe:	3401      	adds	r4, #1
 8024dc0:	ea25 0507 	bic.w	r5, r5, r7
 8024dc4:	e7b7      	b.n	8024d36 <floor+0x46>
 8024dc6:	2301      	movs	r3, #1
 8024dc8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8024dcc:	fa03 f606 	lsl.w	r6, r3, r6
 8024dd0:	4435      	add	r5, r6
 8024dd2:	4545      	cmp	r5, r8
 8024dd4:	bf38      	it	cc
 8024dd6:	18e4      	addcc	r4, r4, r3
 8024dd8:	e7f2      	b.n	8024dc0 <floor+0xd0>
 8024dda:	2500      	movs	r5, #0
 8024ddc:	462c      	mov	r4, r5
 8024dde:	e7aa      	b.n	8024d36 <floor+0x46>
 8024de0:	8800759c 	.word	0x8800759c
 8024de4:	7e37e43c 	.word	0x7e37e43c
 8024de8:	bff00000 	.word	0xbff00000
 8024dec:	000fffff 	.word	0x000fffff

08024df0 <scalbn>:
 8024df0:	b570      	push	{r4, r5, r6, lr}
 8024df2:	ec55 4b10 	vmov	r4, r5, d0
 8024df6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8024dfa:	4606      	mov	r6, r0
 8024dfc:	462b      	mov	r3, r5
 8024dfe:	b99a      	cbnz	r2, 8024e28 <scalbn+0x38>
 8024e00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8024e04:	4323      	orrs	r3, r4
 8024e06:	d036      	beq.n	8024e76 <scalbn+0x86>
 8024e08:	4b39      	ldr	r3, [pc, #228]	; (8024ef0 <scalbn+0x100>)
 8024e0a:	4629      	mov	r1, r5
 8024e0c:	ee10 0a10 	vmov	r0, s0
 8024e10:	2200      	movs	r2, #0
 8024e12:	f7db fc19 	bl	8000648 <__aeabi_dmul>
 8024e16:	4b37      	ldr	r3, [pc, #220]	; (8024ef4 <scalbn+0x104>)
 8024e18:	429e      	cmp	r6, r3
 8024e1a:	4604      	mov	r4, r0
 8024e1c:	460d      	mov	r5, r1
 8024e1e:	da10      	bge.n	8024e42 <scalbn+0x52>
 8024e20:	a32b      	add	r3, pc, #172	; (adr r3, 8024ed0 <scalbn+0xe0>)
 8024e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e26:	e03a      	b.n	8024e9e <scalbn+0xae>
 8024e28:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8024e2c:	428a      	cmp	r2, r1
 8024e2e:	d10c      	bne.n	8024e4a <scalbn+0x5a>
 8024e30:	ee10 2a10 	vmov	r2, s0
 8024e34:	4620      	mov	r0, r4
 8024e36:	4629      	mov	r1, r5
 8024e38:	f7db fa50 	bl	80002dc <__adddf3>
 8024e3c:	4604      	mov	r4, r0
 8024e3e:	460d      	mov	r5, r1
 8024e40:	e019      	b.n	8024e76 <scalbn+0x86>
 8024e42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8024e46:	460b      	mov	r3, r1
 8024e48:	3a36      	subs	r2, #54	; 0x36
 8024e4a:	4432      	add	r2, r6
 8024e4c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8024e50:	428a      	cmp	r2, r1
 8024e52:	dd08      	ble.n	8024e66 <scalbn+0x76>
 8024e54:	2d00      	cmp	r5, #0
 8024e56:	a120      	add	r1, pc, #128	; (adr r1, 8024ed8 <scalbn+0xe8>)
 8024e58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024e5c:	da1c      	bge.n	8024e98 <scalbn+0xa8>
 8024e5e:	a120      	add	r1, pc, #128	; (adr r1, 8024ee0 <scalbn+0xf0>)
 8024e60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024e64:	e018      	b.n	8024e98 <scalbn+0xa8>
 8024e66:	2a00      	cmp	r2, #0
 8024e68:	dd08      	ble.n	8024e7c <scalbn+0x8c>
 8024e6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024e6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024e72:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8024e76:	ec45 4b10 	vmov	d0, r4, r5
 8024e7a:	bd70      	pop	{r4, r5, r6, pc}
 8024e7c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8024e80:	da19      	bge.n	8024eb6 <scalbn+0xc6>
 8024e82:	f24c 3350 	movw	r3, #50000	; 0xc350
 8024e86:	429e      	cmp	r6, r3
 8024e88:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8024e8c:	dd0a      	ble.n	8024ea4 <scalbn+0xb4>
 8024e8e:	a112      	add	r1, pc, #72	; (adr r1, 8024ed8 <scalbn+0xe8>)
 8024e90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024e94:	2b00      	cmp	r3, #0
 8024e96:	d1e2      	bne.n	8024e5e <scalbn+0x6e>
 8024e98:	a30f      	add	r3, pc, #60	; (adr r3, 8024ed8 <scalbn+0xe8>)
 8024e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e9e:	f7db fbd3 	bl	8000648 <__aeabi_dmul>
 8024ea2:	e7cb      	b.n	8024e3c <scalbn+0x4c>
 8024ea4:	a10a      	add	r1, pc, #40	; (adr r1, 8024ed0 <scalbn+0xe0>)
 8024ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024eaa:	2b00      	cmp	r3, #0
 8024eac:	d0b8      	beq.n	8024e20 <scalbn+0x30>
 8024eae:	a10e      	add	r1, pc, #56	; (adr r1, 8024ee8 <scalbn+0xf8>)
 8024eb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024eb4:	e7b4      	b.n	8024e20 <scalbn+0x30>
 8024eb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024eba:	3236      	adds	r2, #54	; 0x36
 8024ebc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024ec0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8024ec4:	4620      	mov	r0, r4
 8024ec6:	4b0c      	ldr	r3, [pc, #48]	; (8024ef8 <scalbn+0x108>)
 8024ec8:	2200      	movs	r2, #0
 8024eca:	e7e8      	b.n	8024e9e <scalbn+0xae>
 8024ecc:	f3af 8000 	nop.w
 8024ed0:	c2f8f359 	.word	0xc2f8f359
 8024ed4:	01a56e1f 	.word	0x01a56e1f
 8024ed8:	8800759c 	.word	0x8800759c
 8024edc:	7e37e43c 	.word	0x7e37e43c
 8024ee0:	8800759c 	.word	0x8800759c
 8024ee4:	fe37e43c 	.word	0xfe37e43c
 8024ee8:	c2f8f359 	.word	0xc2f8f359
 8024eec:	81a56e1f 	.word	0x81a56e1f
 8024ef0:	43500000 	.word	0x43500000
 8024ef4:	ffff3cb0 	.word	0xffff3cb0
 8024ef8:	3c900000 	.word	0x3c900000

08024efc <_init>:
 8024efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024efe:	bf00      	nop
 8024f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024f02:	bc08      	pop	{r3}
 8024f04:	469e      	mov	lr, r3
 8024f06:	4770      	bx	lr

08024f08 <_fini>:
 8024f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024f0a:	bf00      	nop
 8024f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024f0e:	bc08      	pop	{r3}
 8024f10:	469e      	mov	lr, r3
 8024f12:	4770      	bx	lr
