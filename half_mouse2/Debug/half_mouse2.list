
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a2c4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  0801a4a8  0801a4a8  0002a4a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aa50  0801aa50  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801aa50  0801aa50  0002aa50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aa58  0801aa58  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801aa58  0801aa58  0002aa58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aa5c  0801aa5c  0002aa5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801aa60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c930  200001dc  0801ac3c  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000cb0c  0801ac3c  0003cb0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023cdb  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053ba  00000000  00000000  00053ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  000592a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a50  00000000  00000000  0005afa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002755b  00000000  00000000  0005c9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b453  00000000  00000000  00083f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea216  00000000  00000000  000af39e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001995b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bb4  00000000  00000000  00199604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801a48c 	.word	0x0801a48c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0801a48c 	.word	0x0801a48c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <reset_distance>:
float fusion_speedL,fusion_speedR;
float straight_alpha;
//float E_speedR0,E_speedL0;
//float E_accelerationR,E_accelerationL;

void reset_distance(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	E_distanceL = 0;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <reset_distance+0x54>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	E_distanceR = 0;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <reset_distance+0x58>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	E_lpf_distanceL = 0;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <reset_distance+0x5c>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	E_lpf_distanceR = 0;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <reset_distance+0x60>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	G_hpf_distanceL = 0;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <reset_distance+0x64>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	G_hpf_distanceR = 0;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <reset_distance+0x68>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	fusion_distanceL=0;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <reset_distance+0x6c>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <reset_distance+0x70>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <reset_distance+0x74>)
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <reset_distance+0x78>)
 8000fe4:	601a      	str	r2, [r3, #0]

}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000200 	.word	0x20000200
 8000ff4:	20000204 	.word	0x20000204
 8000ff8:	20000210 	.word	0x20000210
 8000ffc:	20000214 	.word	0x20000214
 8001000:	20000220 	.word	0x20000220
 8001004:	20000224 	.word	0x20000224
 8001008:	20000230 	.word	0x20000230
 800100c:	20000234 	.word	0x20000234
 8001010:	20000240 	.word	0x20000240
 8001014:	3f266666 	.word	0x3f266666

08001018 <reset_speed>:

void reset_speed(void) {
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

	G_hpf_speedL=0;
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <reset_speed+0x34>)
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
	G_hpf_speedR=0;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <reset_speed+0x38>)
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
	fusion_speedL=0;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <reset_speed+0x3c>)
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
	fusion_speedR=0;
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <reset_speed+0x40>)
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <reset_speed+0x44>)
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <reset_speed+0x48>)
 8001040:	601a      	str	r2, [r3, #0]

}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	20000228 	.word	0x20000228
 8001050:	2000022c 	.word	0x2000022c
 8001054:	20000238 	.word	0x20000238
 8001058:	2000023c 	.word	0x2000023c
 800105c:	20000240 	.word	0x20000240
 8001060:	3f266666 	.word	0x3f266666
 8001064:	00000000 	.word	0x00000000

08001068 <interupt_calEncoder>:

void interupt_calEncoder(void) {
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	float angle_R,angle_L;
	angle_R=encoder_R-encoder_R0;
 800106e:	4bd0      	ldr	r3, [pc, #832]	; (80013b0 <interupt_calEncoder+0x348>)
 8001070:	ed93 7a00 	vldr	s14, [r3]
 8001074:	4bcf      	ldr	r3, [pc, #828]	; (80013b4 <interupt_calEncoder+0x34c>)
 8001076:	edd3 7a00 	vldr	s15, [r3]
 800107a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800107e:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R>180){angle_R=angle_R-360;}
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ed9f 7acc 	vldr	s14, [pc, #816]	; 80013b8 <interupt_calEncoder+0x350>
 800108a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001092:	dd07      	ble.n	80010a4 <interupt_calEncoder+0x3c>
 8001094:	edd7 7a01 	vldr	s15, [r7, #4]
 8001098:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 80013bc <interupt_calEncoder+0x354>
 800109c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010a0:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R<-180){angle_R=angle_R+360;}
 80010a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a8:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 80013c0 <interupt_calEncoder+0x358>
 80010ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b4:	d507      	bpl.n	80010c6 <interupt_calEncoder+0x5e>
 80010b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ba:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 80013bc <interupt_calEncoder+0x354>
 80010be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010c2:	edc7 7a01 	vstr	s15, [r7, #4]
	angle_L=-(encoder_L-encoder_L0);
 80010c6:	4bbf      	ldr	r3, [pc, #764]	; (80013c4 <interupt_calEncoder+0x35c>)
 80010c8:	ed93 7a00 	vldr	s14, [r3]
 80010cc:	4bbe      	ldr	r3, [pc, #760]	; (80013c8 <interupt_calEncoder+0x360>)
 80010ce:	edd3 7a00 	vldr	s15, [r3]
 80010d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d6:	eef1 7a67 	vneg.f32	s15, s15
 80010da:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L>180){angle_L=angle_L-360;}
 80010de:	edd7 7a00 	vldr	s15, [r7]
 80010e2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80013b8 <interupt_calEncoder+0x350>
 80010e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	dd07      	ble.n	8001100 <interupt_calEncoder+0x98>
 80010f0:	edd7 7a00 	vldr	s15, [r7]
 80010f4:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80013bc <interupt_calEncoder+0x354>
 80010f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010fc:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L<-180){angle_L=angle_L+360;}
 8001100:	edd7 7a00 	vldr	s15, [r7]
 8001104:	ed9f 7aae 	vldr	s14, [pc, #696]	; 80013c0 <interupt_calEncoder+0x358>
 8001108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001110:	d507      	bpl.n	8001122 <interupt_calEncoder+0xba>
 8001112:	edd7 7a00 	vldr	s15, [r7]
 8001116:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80013bc <interupt_calEncoder+0x354>
 800111a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800111e:	edc7 7a00 	vstr	s15, [r7]

	//E_speedR0 = E_speedR;
	//E_speedL0 = E_speedL;
	//one_countL = pl_count_encoderL();
	//one_countR = pl_count_encoderR();
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME;
 8001122:	6838      	ldr	r0, [r7, #0]
 8001124:	f7ff fa38 	bl	8000598 <__aeabi_f2d>
 8001128:	a391      	add	r3, pc, #580	; (adr r3, 8001370 <interupt_calEncoder+0x308>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff fa8b 	bl	8000648 <__aeabi_dmul>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4ba3      	ldr	r3, [pc, #652]	; (80013cc <interupt_calEncoder+0x364>)
 8001140:	f7ff fbac 	bl	800089c <__aeabi_ddiv>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	a38a      	add	r3, pc, #552	; (adr r3, 8001378 <interupt_calEncoder+0x310>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff fa79 	bl	8000648 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	a388      	add	r3, pc, #544	; (adr r3, 8001380 <interupt_calEncoder+0x318>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff fa70 	bl	8000648 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	a385      	add	r3, pc, #532	; (adr r3, 8001388 <interupt_calEncoder+0x320>)
 8001172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001176:	f7ff fa67 	bl	8000648 <__aeabi_dmul>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	a383      	add	r3, pc, #524	; (adr r3, 8001390 <interupt_calEncoder+0x328>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fb88 	bl	800089c <__aeabi_ddiv>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b8d      	ldr	r3, [pc, #564]	; (80013d0 <interupt_calEncoder+0x368>)
 800119a:	f7ff fa55 	bl	8000648 <__aeabi_dmul>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	a37c      	add	r3, pc, #496	; (adr r3, 8001398 <interupt_calEncoder+0x330>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7ff fb76 	bl	800089c <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c0:	f7ff fb6c 	bl	800089c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b80      	ldr	r3, [pc, #512]	; (80013d4 <interupt_calEncoder+0x36c>)
 80011d2:	f7ff fa39 	bl	8000648 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	a370      	add	r3, pc, #448	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fb5a 	bl	800089c <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fd02 	bl	8000bf8 <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a78      	ldr	r2, [pc, #480]	; (80013d8 <interupt_calEncoder+0x370>)
 80011f8:	6013      	str	r3, [r2, #0]
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME;
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff f9cc 	bl	8000598 <__aeabi_f2d>
 8001200:	a35b      	add	r3, pc, #364	; (adr r3, 8001370 <interupt_calEncoder+0x308>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7ff fa1f 	bl	8000648 <__aeabi_dmul>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b6d      	ldr	r3, [pc, #436]	; (80013cc <interupt_calEncoder+0x364>)
 8001218:	f7ff fb40 	bl	800089c <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	a354      	add	r3, pc, #336	; (adr r3, 8001378 <interupt_calEncoder+0x310>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff fa0d 	bl	8000648 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	a352      	add	r3, pc, #328	; (adr r3, 8001380 <interupt_calEncoder+0x318>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff fa04 	bl	8000648 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	a34f      	add	r3, pc, #316	; (adr r3, 8001388 <interupt_calEncoder+0x320>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff f9fb 	bl	8000648 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	a34d      	add	r3, pc, #308	; (adr r3, 8001390 <interupt_calEncoder+0x328>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff fb1c 	bl	800089c <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	4b57      	ldr	r3, [pc, #348]	; (80013d0 <interupt_calEncoder+0x368>)
 8001272:	f7ff f9e9 	bl	8000648 <__aeabi_dmul>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	a34a      	add	r3, pc, #296	; (adr r3, 80013a8 <interupt_calEncoder+0x340>)
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	f7ff fb0a 	bl	800089c <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001298:	f7ff fb00 	bl	800089c <__aeabi_ddiv>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b4a      	ldr	r3, [pc, #296]	; (80013d4 <interupt_calEncoder+0x36c>)
 80012aa:	f7ff f9cd 	bl	8000648 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	a33a      	add	r3, pc, #232	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff faee 	bl	800089c <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fc96 	bl	8000bf8 <__aeabi_d2f>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a43      	ldr	r2, [pc, #268]	; (80013dc <interupt_calEncoder+0x374>)
 80012d0:	6013      	str	r3, [r2, #0]
	E_distanceL += E_speedL * INTERRUPT_TIME;
 80012d2:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <interupt_calEncoder+0x378>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f95e 	bl	8000598 <__aeabi_f2d>
 80012dc:	4604      	mov	r4, r0
 80012de:	460d      	mov	r5, r1
 80012e0:	4b3d      	ldr	r3, [pc, #244]	; (80013d8 <interupt_calEncoder+0x370>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f957 	bl	8000598 <__aeabi_f2d>
 80012ea:	a32d      	add	r3, pc, #180	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7ff f9aa 	bl	8000648 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4620      	mov	r0, r4
 80012fa:	4629      	mov	r1, r5
 80012fc:	f7fe ffee 	bl	80002dc <__adddf3>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fc76 	bl	8000bf8 <__aeabi_d2f>
 800130c:	4603      	mov	r3, r0
 800130e:	4a34      	ldr	r2, [pc, #208]	; (80013e0 <interupt_calEncoder+0x378>)
 8001310:	6013      	str	r3, [r2, #0]
	E_distanceR += E_speedR * INTERRUPT_TIME;
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <interupt_calEncoder+0x37c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f93e 	bl	8000598 <__aeabi_f2d>
 800131c:	4604      	mov	r4, r0
 800131e:	460d      	mov	r5, r1
 8001320:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <interupt_calEncoder+0x374>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f937 	bl	8000598 <__aeabi_f2d>
 800132a:	a31d      	add	r3, pc, #116	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f98a 	bl	8000648 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7fe ffce 	bl	80002dc <__adddf3>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fc56 	bl	8000bf8 <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	4a25      	ldr	r2, [pc, #148]	; (80013e4 <interupt_calEncoder+0x37c>)
 8001350:	6013      	str	r3, [r2, #0]

	encoder_L0=encoder_L;
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <interupt_calEncoder+0x35c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <interupt_calEncoder+0x360>)
 8001358:	6013      	str	r3, [r2, #0]
	encoder_R0=encoder_R;
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <interupt_calEncoder+0x348>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <interupt_calEncoder+0x34c>)
 8001360:	6013      	str	r3, [r2, #0]

}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bdb0      	pop	{r4, r5, r7, pc}
 800136a:	bf00      	nop
 800136c:	f3af 8000 	nop.w
 8001370:	54411744 	.word	0x54411744
 8001374:	400921fb 	.word	0x400921fb
 8001378:	4e70a65b 	.word	0x4e70a65b
 800137c:	3f882f36 	.word	0x3f882f36
 8001380:	a858793e 	.word	0xa858793e
 8001384:	3ff1cd35 	.word	0x3ff1cd35
 8001388:	00000000 	.word	0x00000000
 800138c:	4078c000 	.word	0x4078c000
 8001390:	147ae148 	.word	0x147ae148
 8001394:	4078fbae 	.word	0x4078fbae
 8001398:	0a3d70a4 	.word	0x0a3d70a4
 800139c:	4078efd7 	.word	0x4078efd7
 80013a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013a4:	3f50624d 	.word	0x3f50624d
 80013a8:	5c28f5c3 	.word	0x5c28f5c3
 80013ac:	40792a8f 	.word	0x40792a8f
 80013b0:	200006b8 	.word	0x200006b8
 80013b4:	200001f8 	.word	0x200001f8
 80013b8:	43340000 	.word	0x43340000
 80013bc:	43b40000 	.word	0x43b40000
 80013c0:	c3340000 	.word	0xc3340000
 80013c4:	200006bc 	.word	0x200006bc
 80013c8:	200001fc 	.word	0x200001fc
 80013cc:	40668000 	.word	0x40668000
 80013d0:	40790000 	.word	0x40790000
 80013d4:	408f4000 	.word	0x408f4000
 80013d8:	20000208 	.word	0x20000208
 80013dc:	2000020c 	.word	0x2000020c
 80013e0:	20000200 	.word	0x20000200
 80013e4:	20000204 	.word	0x20000204

080013e8 <interupt_calFusion>:


void interupt_calFusion(void) {
 80013e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013ec:	af00      	add	r7, sp, #0


	E_lpf_speedL = straight_alpha * E_lpf_speedL + (1 - straight_alpha) * E_speedL;
 80013ee:	4bca      	ldr	r3, [pc, #808]	; (8001718 <interupt_calFusion+0x330>)
 80013f0:	ed93 7a00 	vldr	s14, [r3]
 80013f4:	4bc9      	ldr	r3, [pc, #804]	; (800171c <interupt_calFusion+0x334>)
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fe:	4bc6      	ldr	r3, [pc, #792]	; (8001718 <interupt_calFusion+0x330>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001408:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800140c:	4bc4      	ldr	r3, [pc, #784]	; (8001720 <interupt_calFusion+0x338>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141a:	4bc0      	ldr	r3, [pc, #768]	; (800171c <interupt_calFusion+0x334>)
 800141c:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_speedR = straight_alpha * E_lpf_speedR + (1 - straight_alpha) * E_speedR;
 8001420:	4bbd      	ldr	r3, [pc, #756]	; (8001718 <interupt_calFusion+0x330>)
 8001422:	ed93 7a00 	vldr	s14, [r3]
 8001426:	4bbf      	ldr	r3, [pc, #764]	; (8001724 <interupt_calFusion+0x33c>)
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001430:	4bb9      	ldr	r3, [pc, #740]	; (8001718 <interupt_calFusion+0x330>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800143a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800143e:	4bba      	ldr	r3, [pc, #744]	; (8001728 <interupt_calFusion+0x340>)
 8001440:	edd3 7a00 	vldr	s15, [r3]
 8001444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144c:	4bb5      	ldr	r3, [pc, #724]	; (8001724 <interupt_calFusion+0x33c>)
 800144e:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_distanceL += E_lpf_speedL * INTERRUPT_TIME;
 8001452:	4bb6      	ldr	r3, [pc, #728]	; (800172c <interupt_calFusion+0x344>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f89e 	bl	8000598 <__aeabi_f2d>
 800145c:	4604      	mov	r4, r0
 800145e:	460d      	mov	r5, r1
 8001460:	4bae      	ldr	r3, [pc, #696]	; (800171c <interupt_calFusion+0x334>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f897 	bl	8000598 <__aeabi_f2d>
 800146a:	a3a9      	add	r3, pc, #676	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff f8ea 	bl	8000648 <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4620      	mov	r0, r4
 800147a:	4629      	mov	r1, r5
 800147c:	f7fe ff2e 	bl	80002dc <__adddf3>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fbb6 	bl	8000bf8 <__aeabi_d2f>
 800148c:	4603      	mov	r3, r0
 800148e:	4aa7      	ldr	r2, [pc, #668]	; (800172c <interupt_calFusion+0x344>)
 8001490:	6013      	str	r3, [r2, #0]
	E_lpf_distanceR += E_lpf_speedR * INTERRUPT_TIME;
 8001492:	4ba7      	ldr	r3, [pc, #668]	; (8001730 <interupt_calFusion+0x348>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f87e 	bl	8000598 <__aeabi_f2d>
 800149c:	4604      	mov	r4, r0
 800149e:	460d      	mov	r5, r1
 80014a0:	4ba0      	ldr	r3, [pc, #640]	; (8001724 <interupt_calFusion+0x33c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f877 	bl	8000598 <__aeabi_f2d>
 80014aa:	a399      	add	r3, pc, #612	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f8ca 	bl	8000648 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4620      	mov	r0, r4
 80014ba:	4629      	mov	r1, r5
 80014bc:	f7fe ff0e 	bl	80002dc <__adddf3>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fb96 	bl	8000bf8 <__aeabi_d2f>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a98      	ldr	r2, [pc, #608]	; (8001730 <interupt_calFusion+0x348>)
 80014d0:	6013      	str	r3, [r2, #0]


	G_hpf_speedL = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
 80014d2:	4b91      	ldr	r3, [pc, #580]	; (8001718 <interupt_calFusion+0x330>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f85e 	bl	8000598 <__aeabi_f2d>
 80014dc:	4604      	mov	r4, r0
 80014de:	460d      	mov	r5, r1
 80014e0:	4b94      	ldr	r3, [pc, #592]	; (8001734 <interupt_calFusion+0x34c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f857 	bl	8000598 <__aeabi_f2d>
 80014ea:	4680      	mov	r8, r0
 80014ec:	4689      	mov	r9, r1
 80014ee:	4b92      	ldr	r3, [pc, #584]	; (8001738 <interupt_calFusion+0x350>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f850 	bl	8000598 <__aeabi_f2d>
 80014f8:	a385      	add	r3, pc, #532	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	f7ff f8a3 	bl	8000648 <__aeabi_dmul>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4640      	mov	r0, r8
 8001508:	4649      	mov	r1, r9
 800150a:	f7fe fee7 	bl	80002dc <__adddf3>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4620      	mov	r0, r4
 8001514:	4629      	mov	r1, r5
 8001516:	f7ff f897 	bl	8000648 <__aeabi_dmul>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fb69 	bl	8000bf8 <__aeabi_d2f>
 8001526:	4603      	mov	r3, r0
 8001528:	4a82      	ldr	r2, [pc, #520]	; (8001734 <interupt_calFusion+0x34c>)
 800152a:	6013      	str	r3, [r2, #0]
	G_hpf_speedR = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
 800152c:	4b7a      	ldr	r3, [pc, #488]	; (8001718 <interupt_calFusion+0x330>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f831 	bl	8000598 <__aeabi_f2d>
 8001536:	4604      	mov	r4, r0
 8001538:	460d      	mov	r5, r1
 800153a:	4b7e      	ldr	r3, [pc, #504]	; (8001734 <interupt_calFusion+0x34c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f82a 	bl	8000598 <__aeabi_f2d>
 8001544:	4680      	mov	r8, r0
 8001546:	4689      	mov	r9, r1
 8001548:	4b7b      	ldr	r3, [pc, #492]	; (8001738 <interupt_calFusion+0x350>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f823 	bl	8000598 <__aeabi_f2d>
 8001552:	a36f      	add	r3, pc, #444	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff f876 	bl	8000648 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4640      	mov	r0, r8
 8001562:	4649      	mov	r1, r9
 8001564:	f7fe feba 	bl	80002dc <__adddf3>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4620      	mov	r0, r4
 800156e:	4629      	mov	r1, r5
 8001570:	f7ff f86a 	bl	8000648 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f7ff fb3c 	bl	8000bf8 <__aeabi_d2f>
 8001580:	4603      	mov	r3, r0
 8001582:	4a6e      	ldr	r2, [pc, #440]	; (800173c <interupt_calFusion+0x354>)
 8001584:	6013      	str	r3, [r2, #0]
	G_hpf_distanceL += G_hpf_speedL * INTERRUPT_TIME;
 8001586:	4b6e      	ldr	r3, [pc, #440]	; (8001740 <interupt_calFusion+0x358>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff f804 	bl	8000598 <__aeabi_f2d>
 8001590:	4604      	mov	r4, r0
 8001592:	460d      	mov	r5, r1
 8001594:	4b67      	ldr	r3, [pc, #412]	; (8001734 <interupt_calFusion+0x34c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fffd 	bl	8000598 <__aeabi_f2d>
 800159e:	a35c      	add	r3, pc, #368	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7ff f850 	bl	8000648 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4620      	mov	r0, r4
 80015ae:	4629      	mov	r1, r5
 80015b0:	f7fe fe94 	bl	80002dc <__adddf3>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff fb1c 	bl	8000bf8 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a5f      	ldr	r2, [pc, #380]	; (8001740 <interupt_calFusion+0x358>)
 80015c4:	6013      	str	r3, [r2, #0]
	G_hpf_distanceR += G_hpf_speedR * INTERRUPT_TIME;
 80015c6:	4b5f      	ldr	r3, [pc, #380]	; (8001744 <interupt_calFusion+0x35c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffe4 	bl	8000598 <__aeabi_f2d>
 80015d0:	4604      	mov	r4, r0
 80015d2:	460d      	mov	r5, r1
 80015d4:	4b59      	ldr	r3, [pc, #356]	; (800173c <interupt_calFusion+0x354>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffdd 	bl	8000598 <__aeabi_f2d>
 80015de:	a34c      	add	r3, pc, #304	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7ff f830 	bl	8000648 <__aeabi_dmul>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4620      	mov	r0, r4
 80015ee:	4629      	mov	r1, r5
 80015f0:	f7fe fe74 	bl	80002dc <__adddf3>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff fafc 	bl	8000bf8 <__aeabi_d2f>
 8001600:	4603      	mov	r3, r0
 8001602:	4a50      	ldr	r2, [pc, #320]	; (8001744 <interupt_calFusion+0x35c>)
 8001604:	6013      	str	r3, [r2, #0]


	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedL;
 8001606:	4b44      	ldr	r3, [pc, #272]	; (8001718 <interupt_calFusion+0x330>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ffc4 	bl	8000598 <__aeabi_f2d>
 8001610:	4604      	mov	r4, r0
 8001612:	460d      	mov	r5, r1
 8001614:	4b4c      	ldr	r3, [pc, #304]	; (8001748 <interupt_calFusion+0x360>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ffbd 	bl	8000598 <__aeabi_f2d>
 800161e:	4680      	mov	r8, r0
 8001620:	4689      	mov	r9, r1
 8001622:	4b45      	ldr	r3, [pc, #276]	; (8001738 <interupt_calFusion+0x350>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ffb6 	bl	8000598 <__aeabi_f2d>
 800162c:	a338      	add	r3, pc, #224	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7ff f809 	bl	8000648 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4640      	mov	r0, r8
 800163c:	4649      	mov	r1, r9
 800163e:	f7fe fe4d 	bl	80002dc <__adddf3>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4620      	mov	r0, r4
 8001648:	4629      	mov	r1, r5
 800164a:	f7fe fffd 	bl	8000648 <__aeabi_dmul>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4614      	mov	r4, r2
 8001654:	461d      	mov	r5, r3
 8001656:	4b30      	ldr	r3, [pc, #192]	; (8001718 <interupt_calFusion+0x330>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001660:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001664:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <interupt_calFusion+0x338>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166e:	ee17 0a90 	vmov	r0, s15
 8001672:	f7fe ff91 	bl	8000598 <__aeabi_f2d>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7fe fe2d 	bl	80002dc <__adddf3>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff fab5 	bl	8000bf8 <__aeabi_d2f>
 800168e:	4603      	mov	r3, r0
 8001690:	4a2d      	ldr	r2, [pc, #180]	; (8001748 <interupt_calFusion+0x360>)
 8001692:	6013      	str	r3, [r2, #0]
	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedR;
 8001694:	4b20      	ldr	r3, [pc, #128]	; (8001718 <interupt_calFusion+0x330>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe ff7d 	bl	8000598 <__aeabi_f2d>
 800169e:	4604      	mov	r4, r0
 80016a0:	460d      	mov	r5, r1
 80016a2:	4b29      	ldr	r3, [pc, #164]	; (8001748 <interupt_calFusion+0x360>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe ff76 	bl	8000598 <__aeabi_f2d>
 80016ac:	4680      	mov	r8, r0
 80016ae:	4689      	mov	r9, r1
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <interupt_calFusion+0x350>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe ff6f 	bl	8000598 <__aeabi_f2d>
 80016ba:	a315      	add	r3, pc, #84	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	f7fe ffc2 	bl	8000648 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4640      	mov	r0, r8
 80016ca:	4649      	mov	r1, r9
 80016cc:	f7fe fe06 	bl	80002dc <__adddf3>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe ffb6 	bl	8000648 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4614      	mov	r4, r2
 80016e2:	461d      	mov	r5, r3
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <interupt_calFusion+0x330>)
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <interupt_calFusion+0x340>)
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fc:	ee17 0a90 	vmov	r0, s15
 8001700:	f7fe ff4a 	bl	8000598 <__aeabi_f2d>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	e01e      	b.n	800174c <interupt_calFusion+0x364>
 800170e:	bf00      	nop
 8001710:	d2f1a9fc 	.word	0xd2f1a9fc
 8001714:	3f50624d 	.word	0x3f50624d
 8001718:	20000240 	.word	0x20000240
 800171c:	20000218 	.word	0x20000218
 8001720:	20000208 	.word	0x20000208
 8001724:	2000021c 	.word	0x2000021c
 8001728:	2000020c 	.word	0x2000020c
 800172c:	20000210 	.word	0x20000210
 8001730:	20000214 	.word	0x20000214
 8001734:	20000228 	.word	0x20000228
 8001738:	20000260 	.word	0x20000260
 800173c:	2000022c 	.word	0x2000022c
 8001740:	20000220 	.word	0x20000220
 8001744:	20000224 	.word	0x20000224
 8001748:	20000238 	.word	0x20000238
 800174c:	f7fe fdc6 	bl	80002dc <__adddf3>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f7ff fa4e 	bl	8000bf8 <__aeabi_d2f>
 800175c:	4603      	mov	r3, r0
 800175e:	4a24      	ldr	r2, [pc, #144]	; (80017f0 <interupt_calFusion+0x408>)
 8001760:	6013      	str	r3, [r2, #0]
	fusion_distanceL += fusion_speedL * INTERRUPT_TIME;
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <interupt_calFusion+0x40c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe ff16 	bl	8000598 <__aeabi_f2d>
 800176c:	4604      	mov	r4, r0
 800176e:	460d      	mov	r5, r1
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <interupt_calFusion+0x410>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe ff0f 	bl	8000598 <__aeabi_f2d>
 800177a:	a31b      	add	r3, pc, #108	; (adr r3, 80017e8 <interupt_calFusion+0x400>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	f7fe ff62 	bl	8000648 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4620      	mov	r0, r4
 800178a:	4629      	mov	r1, r5
 800178c:	f7fe fda6 	bl	80002dc <__adddf3>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff fa2e 	bl	8000bf8 <__aeabi_d2f>
 800179c:	4603      	mov	r3, r0
 800179e:	4a15      	ldr	r2, [pc, #84]	; (80017f4 <interupt_calFusion+0x40c>)
 80017a0:	6013      	str	r3, [r2, #0]
	fusion_distanceR += fusion_speedR * INTERRUPT_TIME;
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <interupt_calFusion+0x414>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fef6 	bl	8000598 <__aeabi_f2d>
 80017ac:	4604      	mov	r4, r0
 80017ae:	460d      	mov	r5, r1
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <interupt_calFusion+0x408>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe feef 	bl	8000598 <__aeabi_f2d>
 80017ba:	a30b      	add	r3, pc, #44	; (adr r3, 80017e8 <interupt_calFusion+0x400>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	f7fe ff42 	bl	8000648 <__aeabi_dmul>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4620      	mov	r0, r4
 80017ca:	4629      	mov	r1, r5
 80017cc:	f7fe fd86 	bl	80002dc <__adddf3>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff fa0e 	bl	8000bf8 <__aeabi_d2f>
 80017dc:	4603      	mov	r3, r0
 80017de:	4a07      	ldr	r2, [pc, #28]	; (80017fc <interupt_calFusion+0x414>)
 80017e0:	6013      	str	r3, [r2, #0]

}
 80017e2:	bf00      	nop
 80017e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017ec:	3f50624d 	.word	0x3f50624d
 80017f0:	2000023c 	.word	0x2000023c
 80017f4:	20000230 	.word	0x20000230
 80017f8:	20000238 	.word	0x20000238
 80017fc:	20000234 	.word	0x20000234

08001800 <reset_gyro>:
float accelY_offset;

float angle_speed_ave[10];


void reset_gyro(void) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
	int s = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
	angle = 0;
 800180a:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <reset_gyro+0xfc>)
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
	omegaZ_offset=0;
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <reset_gyro+0x100>)
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

	for (s = 1; s <= 1000; s++) {
 800181a:	2301      	movs	r3, #1
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	e026      	b.n	800186e <reset_gyro+0x6e>
		//ICM20602_DataUpdate();
		omegaZ_offset += gyro.omega_z;
 8001820:	4b38      	ldr	r3, [pc, #224]	; (8001904 <reset_gyro+0x104>)
 8001822:	ed93 7a02 	vldr	s14, [r3, #8]
 8001826:	4b36      	ldr	r3, [pc, #216]	; (8001900 <reset_gyro+0x100>)
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001830:	4b33      	ldr	r3, [pc, #204]	; (8001900 <reset_gyro+0x100>)
 8001832:	edc3 7a00 	vstr	s15, [r3]
		omegaX_offset += gyro.omega_x;
 8001836:	4b33      	ldr	r3, [pc, #204]	; (8001904 <reset_gyro+0x104>)
 8001838:	ed93 7a00 	vldr	s14, [r3]
 800183c:	4b32      	ldr	r3, [pc, #200]	; (8001908 <reset_gyro+0x108>)
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001846:	4b30      	ldr	r3, [pc, #192]	; (8001908 <reset_gyro+0x108>)
 8001848:	edc3 7a00 	vstr	s15, [r3]
		accelY_offset += gyro.accel_y;
 800184c:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <reset_gyro+0x104>)
 800184e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001852:	4b2e      	ldr	r3, [pc, #184]	; (800190c <reset_gyro+0x10c>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <reset_gyro+0x10c>)
 800185e:	edc3 7a00 	vstr	s15, [r3]
		wait_ms_NoReset(1);
 8001862:	2001      	movs	r0, #1
 8001864:	f006 fb14 	bl	8007e90 <wait_ms_NoReset>
	for (s = 1; s <= 1000; s++) {
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3301      	adds	r3, #1
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001874:	ddd4      	ble.n	8001820 <reset_gyro+0x20>
	}
	omegaZ_offset = omegaZ_offset / 1000;
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <reset_gyro+0x100>)
 8001878:	ed93 7a00 	vldr	s14, [r3]
 800187c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001910 <reset_gyro+0x110>
 8001880:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <reset_gyro+0x100>)
 8001886:	edc3 7a00 	vstr	s15, [r3]
	omegaX_offset = omegaX_offset / 1000;
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <reset_gyro+0x108>)
 800188c:	ed93 7a00 	vldr	s14, [r3]
 8001890:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001910 <reset_gyro+0x110>
 8001894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <reset_gyro+0x108>)
 800189a:	edc3 7a00 	vstr	s15, [r3]
	accelY_offset = accelY_offset / 1000;
 800189e:	4b1b      	ldr	r3, [pc, #108]	; (800190c <reset_gyro+0x10c>)
 80018a0:	ed93 7a00 	vldr	s14, [r3]
 80018a4:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001910 <reset_gyro+0x110>
 80018a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <reset_gyro+0x10c>)
 80018ae:	edc3 7a00 	vstr	s15, [r3]
	//オフセットする文
	//printf("%f,%f\n",gyro.omega_z,omegaZ_offset);

	angle = 0;
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <reset_gyro+0xfc>)
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
	anglex = 0;
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <reset_gyro+0x114>)
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
	gf_speed = 0;
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <reset_gyro+0x118>)
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
	gf_distance = 0;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <reset_gyro+0x11c>)
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	e009      	b.n	80018ec <reset_gyro+0xec>
		angle_speed_ave[s] = 0;
 80018d8:	4a11      	ldr	r2, [pc, #68]	; (8001920 <reset_gyro+0x120>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3301      	adds	r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b09      	cmp	r3, #9
 80018f0:	ddf2      	ble.n	80018d8 <reset_gyro+0xd8>
	}
}
 80018f2:	bf00      	nop
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000244 	.word	0x20000244
 8001900:	20000268 	.word	0x20000268
 8001904:	200006c4 	.word	0x200006c4
 8001908:	20000264 	.word	0x20000264
 800190c:	2000026c 	.word	0x2000026c
 8001910:	447a0000 	.word	0x447a0000
 8001914:	2000024c 	.word	0x2000024c
 8001918:	20000258 	.word	0x20000258
 800191c:	2000025c 	.word	0x2000025c
 8001920:	20000270 	.word	0x20000270
 8001924:	00000000 	.word	0x00000000

08001928 <interrupt_calGyro>:

void interrupt_calGyro(void) {
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
	int j = 9;
 800192e:	2309      	movs	r3, #9
 8001930:	607b      	str	r3, [r7, #4]
	//angle_speed0 = angle_speed;

	for (j = 9; j >= 1; j--) {
 8001932:	2309      	movs	r3, #9
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	e00d      	b.n	8001954 <interrupt_calGyro+0x2c>
		angle_speed_ave[j] = angle_speed_ave[j - 1];
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	4aa6      	ldr	r2, [pc, #664]	; (8001bd8 <interrupt_calGyro+0x2b0>)
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	49a4      	ldr	r1, [pc, #656]	; (8001bd8 <interrupt_calGyro+0x2b0>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	601a      	str	r2, [r3, #0]
	for (j = 9; j >= 1; j--) {
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3b01      	subs	r3, #1
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	dcee      	bgt.n	8001938 <interrupt_calGyro+0x10>
	}
	angle_speed_ave[0] = (gyro.omega_z - omegaZ_offset)*GYRO_COEFFICIENT;//*0.9525321206299 ;//* 90 / 96*3690/3600*(3600-17)/3600;
 800195a:	4ba0      	ldr	r3, [pc, #640]	; (8001bdc <interrupt_calGyro+0x2b4>)
 800195c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001960:	4b9f      	ldr	r3, [pc, #636]	; (8001be0 <interrupt_calGyro+0x2b8>)
 8001962:	edd3 7a00 	vldr	s15, [r3]
 8001966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196a:	ee17 0a90 	vmov	r0, s15
 800196e:	f7fe fe13 	bl	8000598 <__aeabi_f2d>
 8001972:	a387      	add	r3, pc, #540	; (adr r3, 8001b90 <interrupt_calGyro+0x268>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe fe66 	bl	8000648 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	a384      	add	r3, pc, #528	; (adr r3, 8001b98 <interrupt_calGyro+0x270>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe fe5d 	bl	8000648 <__aeabi_dmul>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	a382      	add	r3, pc, #520	; (adr r3, 8001ba0 <interrupt_calGyro+0x278>)
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	f7fe ff7e 	bl	800089c <__aeabi_ddiv>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4610      	mov	r0, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	f7ff f926 	bl	8000bf8 <__aeabi_d2f>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4a8a      	ldr	r2, [pc, #552]	; (8001bd8 <interrupt_calGyro+0x2b0>)
 80019b0:	6013      	str	r3, [r2, #0]

	/*angle_speed = ((angle_speed_ave[0] + angle_speed_ave[1] + angle_speed_ave[2]
			+ angle_speed_ave[3] + angle_speed_ave[4] + angle_speed_ave[5]
			+ angle_speed_ave[6] + angle_speed_ave[7] + angle_speed_ave[8]
			+ angle_speed_ave[9]) / 10);*/
	angle_speed = angle_speed_ave[0];
 80019b2:	4b89      	ldr	r3, [pc, #548]	; (8001bd8 <interrupt_calGyro+0x2b0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a8b      	ldr	r2, [pc, #556]	; (8001be4 <interrupt_calGyro+0x2bc>)
 80019b8:	6013      	str	r3, [r2, #0]
	//angle_speed=(gyro.omega_z-omegaZ_offset)*90/94;//deg/sec
	angle_speedx=gyro.omega_x;
 80019ba:	4b88      	ldr	r3, [pc, #544]	; (8001bdc <interrupt_calGyro+0x2b4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a8a      	ldr	r2, [pc, #552]	; (8001be8 <interrupt_calGyro+0x2c0>)
 80019c0:	6013      	str	r3, [r2, #0]
	angle_speedx_set=(gyro.omega_x - omegaX_offset);
 80019c2:	4b86      	ldr	r3, [pc, #536]	; (8001bdc <interrupt_calGyro+0x2b4>)
 80019c4:	ed93 7a00 	vldr	s14, [r3]
 80019c8:	4b88      	ldr	r3, [pc, #544]	; (8001bec <interrupt_calGyro+0x2c4>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d2:	4b87      	ldr	r3, [pc, #540]	; (8001bf0 <interrupt_calGyro+0x2c8>)
 80019d4:	edc3 7a00 	vstr	s15, [r3]
	angle += 0.001 * angle_speed; //deg
 80019d8:	4b86      	ldr	r3, [pc, #536]	; (8001bf4 <interrupt_calGyro+0x2cc>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fddb 	bl	8000598 <__aeabi_f2d>
 80019e2:	4604      	mov	r4, r0
 80019e4:	460d      	mov	r5, r1
 80019e6:	4b7f      	ldr	r3, [pc, #508]	; (8001be4 <interrupt_calGyro+0x2bc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fdd4 	bl	8000598 <__aeabi_f2d>
 80019f0:	a36d      	add	r3, pc, #436	; (adr r3, 8001ba8 <interrupt_calGyro+0x280>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe fe27 	bl	8000648 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4620      	mov	r0, r4
 8001a00:	4629      	mov	r1, r5
 8001a02:	f7fe fc6b 	bl	80002dc <__adddf3>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f7ff f8f3 	bl	8000bf8 <__aeabi_d2f>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4a77      	ldr	r2, [pc, #476]	; (8001bf4 <interrupt_calGyro+0x2cc>)
 8001a16:	6013      	str	r3, [r2, #0]
	anglex += 0.001 * (gyro.omega_x - omegaX_offset); //deg
 8001a18:	4b77      	ldr	r3, [pc, #476]	; (8001bf8 <interrupt_calGyro+0x2d0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fdbb 	bl	8000598 <__aeabi_f2d>
 8001a22:	4604      	mov	r4, r0
 8001a24:	460d      	mov	r5, r1
 8001a26:	4b6d      	ldr	r3, [pc, #436]	; (8001bdc <interrupt_calGyro+0x2b4>)
 8001a28:	ed93 7a00 	vldr	s14, [r3]
 8001a2c:	4b6f      	ldr	r3, [pc, #444]	; (8001bec <interrupt_calGyro+0x2c4>)
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a36:	ee17 0a90 	vmov	r0, s15
 8001a3a:	f7fe fdad 	bl	8000598 <__aeabi_f2d>
 8001a3e:	a35a      	add	r3, pc, #360	; (adr r3, 8001ba8 <interrupt_calGyro+0x280>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fe00 	bl	8000648 <__aeabi_dmul>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	4629      	mov	r1, r5
 8001a50:	f7fe fc44 	bl	80002dc <__adddf3>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f7ff f8cc 	bl	8000bf8 <__aeabi_d2f>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4a65      	ldr	r2, [pc, #404]	; (8001bf8 <interrupt_calGyro+0x2d0>)
 8001a64:	6013      	str	r3, [r2, #0]
	//angle_acceleration = (angle_speed - angle_speed0) * 1000; //deg/sec^2
//+0.12*0.02*angle_speed*angle_speed
	gf_accel = (gyro.accel_y - accelY_offset)*ACCEL_COEFFICIENT*1000*GRAVITATION;
 8001a66:	4b5d      	ldr	r3, [pc, #372]	; (8001bdc <interrupt_calGyro+0x2b4>)
 8001a68:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a6c:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <interrupt_calGyro+0x2d4>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a76:	ee17 0a90 	vmov	r0, s15
 8001a7a:	f7fe fd8d 	bl	8000598 <__aeabi_f2d>
 8001a7e:	a34c      	add	r3, pc, #304	; (adr r3, 8001bb0 <interrupt_calGyro+0x288>)
 8001a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a84:	f7fe fde0 	bl	8000648 <__aeabi_dmul>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	a349      	add	r3, pc, #292	; (adr r3, 8001bb8 <interrupt_calGyro+0x290>)
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	f7fe fdd7 	bl	8000648 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	a347      	add	r3, pc, #284	; (adr r3, 8001bc0 <interrupt_calGyro+0x298>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	f7fe fef8 	bl	800089c <__aeabi_ddiv>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b51      	ldr	r3, [pc, #324]	; (8001c00 <interrupt_calGyro+0x2d8>)
 8001aba:	f7fe fdc5 	bl	8000648 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	a340      	add	r3, pc, #256	; (adr r3, 8001bc8 <interrupt_calGyro+0x2a0>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fee6 	bl	800089c <__aeabi_ddiv>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	4b49      	ldr	r3, [pc, #292]	; (8001c04 <interrupt_calGyro+0x2dc>)
 8001ade:	f7fe fdb3 	bl	8000648 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	a339      	add	r3, pc, #228	; (adr r3, 8001bd0 <interrupt_calGyro+0x2a8>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	f7fe fdaa 	bl	8000648 <__aeabi_dmul>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7ff f87c 	bl	8000bf8 <__aeabi_d2f>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a41      	ldr	r2, [pc, #260]	; (8001c08 <interrupt_calGyro+0x2e0>)
 8001b04:	6013      	str	r3, [r2, #0]
	gf_speed += gf_accel * INTERRUPT_TIME;
 8001b06:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <interrupt_calGyro+0x2e4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd44 	bl	8000598 <__aeabi_f2d>
 8001b10:	4604      	mov	r4, r0
 8001b12:	460d      	mov	r5, r1
 8001b14:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <interrupt_calGyro+0x2e0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fd3d 	bl	8000598 <__aeabi_f2d>
 8001b1e:	a322      	add	r3, pc, #136	; (adr r3, 8001ba8 <interrupt_calGyro+0x280>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fd90 	bl	8000648 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7fe fbd4 	bl	80002dc <__adddf3>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7ff f85c 	bl	8000bf8 <__aeabi_d2f>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a32      	ldr	r2, [pc, #200]	; (8001c0c <interrupt_calGyro+0x2e4>)
 8001b44:	6013      	str	r3, [r2, #0]
	gf_distance += gf_speed * INTERRUPT_TIME;
 8001b46:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <interrupt_calGyro+0x2e8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fd24 	bl	8000598 <__aeabi_f2d>
 8001b50:	4604      	mov	r4, r0
 8001b52:	460d      	mov	r5, r1
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <interrupt_calGyro+0x2e4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fd1d 	bl	8000598 <__aeabi_f2d>
 8001b5e:	a312      	add	r3, pc, #72	; (adr r3, 8001ba8 <interrupt_calGyro+0x280>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	f7fe fd70 	bl	8000648 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fbb4 	bl	80002dc <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f83c 	bl	8000bf8 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a23      	ldr	r2, [pc, #140]	; (8001c10 <interrupt_calGyro+0x2e8>)
 8001b84:	6013      	str	r3, [r2, #0]




}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	70a3d70a 	.word	0x70a3d70a
 8001b94:	3fef0a3d 	.word	0x3fef0a3d
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	40acd400 	.word	0x40acd400
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	40ac2000 	.word	0x40ac2000
 8001ba8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bac:	3f50624d 	.word	0x3f50624d
 8001bb0:	0fcf80dc 	.word	0x0fcf80dc
 8001bb4:	3ff0a423 	.word	0x3ff0a423
 8001bb8:	00000000 	.word	0x00000000
 8001bbc:	4078c000 	.word	0x4078c000
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	4077d000 	.word	0x4077d000
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	407a7000 	.word	0x407a7000
 8001bd0:	3a92a305 	.word	0x3a92a305
 8001bd4:	40239d01 	.word	0x40239d01
 8001bd8:	20000270 	.word	0x20000270
 8001bdc:	200006c4 	.word	0x200006c4
 8001be0:	20000268 	.word	0x20000268
 8001be4:	20000248 	.word	0x20000248
 8001be8:	20000250 	.word	0x20000250
 8001bec:	20000264 	.word	0x20000264
 8001bf0:	20000254 	.word	0x20000254
 8001bf4:	20000244 	.word	0x20000244
 8001bf8:	2000024c 	.word	0x2000024c
 8001bfc:	2000026c 	.word	0x2000026c
 8001c00:	40790000 	.word	0x40790000
 8001c04:	408f4000 	.word	0x408f4000
 8001c08:	20000260 	.word	0x20000260
 8001c0c:	20000258 	.word	0x20000258
 8001c10:	2000025c 	.word	0x2000025c
 8001c14:	00000000 	.word	0x00000000

08001c18 <battcheak>:
/*******************************************************************/
/*	バッテリーの確認				(battcheak)	*/
/*******************************************************************/
/*	バッテリーの残電圧のチェックし、小さい場合は機能の停止を行う．	．						*/
/*******************************************************************/
void battcheak(void){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
int i;
	for(i = 0;i <= 20-1;i++){
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	e00f      	b.n	8001c44 <battcheak+0x2c>
		g_V_battery[i]=pl_getbatt();
 8001c24:	f005 ff04 	bl	8007a30 <pl_getbatt>
 8001c28:	eef0 7a40 	vmov.f32	s15, s0
 8001c2c:	4a34      	ldr	r2, [pc, #208]	; (8001d00 <battcheak+0xe8>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	edc3 7a00 	vstr	s15, [r3]
		wait_ms(10);
 8001c38:	200a      	movs	r0, #10
 8001c3a:	f006 f8e5 	bl	8007e08 <wait_ms>
	for(i = 0;i <= 20-1;i++){
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3301      	adds	r3, #1
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b13      	cmp	r3, #19
 8001c48:	ddec      	ble.n	8001c24 <battcheak+0xc>
	}

	g_V_battery_mean=0;
 8001c4a:	4b2e      	ldr	r3, [pc, #184]	; (8001d04 <battcheak+0xec>)
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
	for(i = 0;i <= 20-1;i++){
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	e010      	b.n	8001c7a <battcheak+0x62>
	g_V_battery_mean+=g_V_battery[i];
 8001c58:	4a29      	ldr	r2, [pc, #164]	; (8001d00 <battcheak+0xe8>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	ed93 7a00 	vldr	s14, [r3]
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <battcheak+0xec>)
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6e:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <battcheak+0xec>)
 8001c70:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0;i <= 20-1;i++){
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3301      	adds	r3, #1
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b13      	cmp	r3, #19
 8001c7e:	ddeb      	ble.n	8001c58 <battcheak+0x40>
	}
	g_V_battery_mean/=20;
 8001c80:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <battcheak+0xec>)
 8001c82:	ed93 7a00 	vldr	s14, [r3]
 8001c86:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001c8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <battcheak+0xec>)
 8001c90:	edc3 7a00 	vstr	s15, [r3]
	printf("BATT=%f\n",g_V_battery_mean);
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <battcheak+0xec>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fc7d 	bl	8000598 <__aeabi_f2d>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4819      	ldr	r0, [pc, #100]	; (8001d08 <battcheak+0xf0>)
 8001ca4:	f016 f8d8 	bl	8017e58 <iprintf>
	//printf("%f",g_V_battery_mean);
	if(g_V_battery_mean <= BATTLIMIT){
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <battcheak+0xec>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc73 	bl	8000598 <__aeabi_f2d>
 8001cb2:	a311      	add	r3, pc, #68	; (adr r3, 8001cf8 <battcheak+0xe0>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe ff42 	bl	8000b40 <__aeabi_dcmple>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d100      	bne.n	8001cc4 <battcheak+0xac>
		pl_r_blue_LED(OFF);
		pl_l_blue_LED(OFF);
		wait_ms(500);
		}
	}
}
 8001cc2:	e014      	b.n	8001cee <battcheak+0xd6>
		pl_r_blue_LED(ON);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f005 fb33 	bl	8007330 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f005 fb42 	bl	8007354 <pl_l_blue_LED>
		wait_ms(500);
 8001cd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cd4:	f006 f898 	bl	8007e08 <wait_ms>
		pl_r_blue_LED(OFF);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f005 fb29 	bl	8007330 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f005 fb38 	bl	8007354 <pl_l_blue_LED>
		wait_ms(500);
 8001ce4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ce8:	f006 f88e 	bl	8007e08 <wait_ms>
		pl_r_blue_LED(ON);
 8001cec:	e7ea      	b.n	8001cc4 <battcheak+0xac>
}
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	f3af 8000 	nop.w
 8001cf8:	9999999a 	.word	0x9999999a
 8001cfc:	400d9999 	.word	0x400d9999
 8001d00:	20000464 	.word	0x20000464
 8001d04:	200004b4 	.word	0x200004b4
 8001d08:	0801a4a8 	.word	0x0801a4a8

08001d0c <interupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interupt_calSensor(void){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
	int j;

	pl_interupt_getSensor();
 8001d12:	f006 f82b 	bl	8007d6c <pl_interupt_getSensor>

	for (j = 19; j >= 1; j--) {
 8001d16:	2313      	movs	r3, #19
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	e037      	b.n	8001d8c <interupt_calSensor+0x80>
		//g_V_battery[j] = g_V_battery[j - 1];
		g_sensor[0][j] = g_sensor[0][j - 1];
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	4a61      	ldr	r2, [pc, #388]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d26:	4960      	ldr	r1, [pc, #384]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	4a5d      	ldr	r2, [pc, #372]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d34:	3314      	adds	r3, #20
 8001d36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d3a:	495b      	ldr	r1, [pc, #364]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3314      	adds	r3, #20
 8001d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	4a57      	ldr	r2, [pc, #348]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d4a:	3328      	adds	r3, #40	; 0x28
 8001d4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d50:	4955      	ldr	r1, [pc, #340]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3328      	adds	r3, #40	; 0x28
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	4a52      	ldr	r2, [pc, #328]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d60:	333c      	adds	r3, #60	; 0x3c
 8001d62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d66:	4950      	ldr	r1, [pc, #320]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	333c      	adds	r3, #60	; 0x3c
 8001d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	4a4c      	ldr	r2, [pc, #304]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d76:	3350      	adds	r3, #80	; 0x50
 8001d78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d7c:	494a      	ldr	r1, [pc, #296]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3350      	adds	r3, #80	; 0x50
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	dcc4      	bgt.n	8001d1c <interupt_calSensor+0x10>
	}
	//g_V_battery[0] = g_V_batt;
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 8001d92:	4b46      	ldr	r3, [pc, #280]	; (8001eac <interupt_calSensor+0x1a0>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b45      	ldr	r3, [pc, #276]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	4a42      	ldr	r2, [pc, #264]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001da0:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 8001da2:	4b42      	ldr	r3, [pc, #264]	; (8001eac <interupt_calSensor+0x1a0>)
 8001da4:	885b      	ldrh	r3, [r3, #2]
 8001da6:	461a      	mov	r2, r3
 8001da8:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001daa:	885b      	ldrh	r3, [r3, #2]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	4a3e      	ldr	r2, [pc, #248]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001db0:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 8001db2:	4b3e      	ldr	r3, [pc, #248]	; (8001eac <interupt_calSensor+0x1a0>)
 8001db4:	889b      	ldrh	r3, [r3, #4]
 8001db6:	461a      	mov	r2, r3
 8001db8:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001dba:	889b      	ldrh	r3, [r3, #4]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	4a3a      	ldr	r2, [pc, #232]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001dc0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 8001dc4:	4b39      	ldr	r3, [pc, #228]	; (8001eac <interupt_calSensor+0x1a0>)
 8001dc6:	88db      	ldrh	r3, [r3, #6]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001dcc:	88db      	ldrh	r3, [r3, #6]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	4a35      	ldr	r2, [pc, #212]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001dd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 8001dd6:	4b35      	ldr	r3, [pc, #212]	; (8001eac <interupt_calSensor+0x1a0>)
 8001dd8:	891b      	ldrh	r3, [r3, #8]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b34      	ldr	r3, [pc, #208]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001dde:	891b      	ldrh	r3, [r3, #8]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	4a31      	ldr	r2, [pc, #196]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001de4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	for (j = 0; j <= 4; j++) {
 8001de8:	2300      	movs	r3, #0
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	e053      	b.n	8001e96 <interupt_calSensor+0x18a>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 8001dee:	492e      	ldr	r1, [pc, #184]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	440b      	add	r3, r1
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	482a      	ldr	r0, [pc, #168]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	4403      	add	r3, r0
 8001e0c:	332c      	adds	r3, #44	; 0x2c
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	1aca      	subs	r2, r1, r3
 8001e12:	4928      	ldr	r1, [pc, #160]	; (8001eb4 <interupt_calSensor+0x1a8>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][3];
 8001e1a:	4923      	ldr	r1, [pc, #140]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	440b      	add	r3, r1
 8001e28:	6819      	ldr	r1, [r3, #0]
 8001e2a:	481f      	ldr	r0, [pc, #124]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	4403      	add	r3, r0
 8001e38:	330c      	adds	r3, #12
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	1aca      	subs	r2, r1, r3
 8001e3e:	491e      	ldr	r1, [pc, #120]	; (8001eb8 <interupt_calSensor+0x1ac>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 8001e46:	4918      	ldr	r1, [pc, #96]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	440b      	add	r3, r1
 8001e54:	6819      	ldr	r1, [r3, #0]
 8001e56:	4814      	ldr	r0, [pc, #80]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	4403      	add	r3, r0
 8001e64:	3304      	adds	r3, #4
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4419      	add	r1, r3
 8001e6a:	480f      	ldr	r0, [pc, #60]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	4403      	add	r3, r0
 8001e78:	3308      	adds	r3, #8
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	440b      	add	r3, r1
 8001e7e:	4a0f      	ldr	r2, [pc, #60]	; (8001ebc <interupt_calSensor+0x1b0>)
 8001e80:	fb82 1203 	smull	r1, r2, r2, r3
 8001e84:	17db      	asrs	r3, r3, #31
 8001e86:	1ad2      	subs	r2, r2, r3
 8001e88:	490d      	ldr	r1, [pc, #52]	; (8001ec0 <interupt_calSensor+0x1b4>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3301      	adds	r3, #1
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	dda8      	ble.n	8001dee <interupt_calSensor+0xe2>
//	}
//	g_V_battery_mean/=20;



}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000298 	.word	0x20000298
 8001eac:	200006ec 	.word	0x200006ec
 8001eb0:	200006f8 	.word	0x200006f8
 8001eb4:	20000428 	.word	0x20000428
 8001eb8:	2000043c 	.word	0x2000043c
 8001ebc:	55555556 	.word	0x55555556
 8001ec0:	20000450 	.word	0x20000450

08001ec4 <Control_mode_Init>:

uint8_t noGoalPillarMode;

float g_V_L,g_V_R;

void Control_mode_Init(void){
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0

	modeacc = 0;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <Control_mode_Init+0x28>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
	g_MotorEnd_flag=0;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <Control_mode_Init+0x2c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
	mollifier_timer=0;
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <Control_mode_Init+0x30>)
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
	noGoalPillarMode=0;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <Control_mode_Init+0x34>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]

}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	20000508 	.word	0x20000508
 8001ef0:	200007e5 	.word	0x200007e5
 8001ef4:	200007e0 	.word	0x200007e0
 8001ef8:	20000509 	.word	0x20000509

08001efc <get_duty>:


void get_duty(float V_L, float V_R,int *duty_L,int *duty_R) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f06:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
//トルクの方向決定
// BATT_MEANをいつか可変にしたい願望
	if (V_L >= 0) {
 8001f0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1a:	db14      	blt.n	8001f46 <get_duty+0x4a>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f005 fcbd 	bl	800789c <pl_L_DriveMotor_mode>
		*duty_L = (int) (V_L / g_V_battery_mean * MAXMOTOR);
 8001f22:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <get_duty+0x11c>)
 8001f24:	ed93 7a00 	vldr	s14, [r3]
 8001f28:	edd7 6a03 	vldr	s13, [r7, #12]
 8001f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f30:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800201c <get_duty+0x120>
 8001f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f3c:	ee17 2a90 	vmov	r2, s15
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e015      	b.n	8001f72 <get_duty+0x76>
	}
	else{
		pl_L_DriveMotor_mode(MOTOR_BACK);
 8001f46:	2002      	movs	r0, #2
 8001f48:	f005 fca8 	bl	800789c <pl_L_DriveMotor_mode>
	    *duty_L = (int) (-V_L / g_V_battery_mean * MAXMOTOR);
 8001f4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f50:	eef1 6a67 	vneg.f32	s13, s15
 8001f54:	4b30      	ldr	r3, [pc, #192]	; (8002018 <get_duty+0x11c>)
 8001f56:	ed93 7a00 	vldr	s14, [r3]
 8001f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f5e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800201c <get_duty+0x120>
 8001f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f6a:	ee17 2a90 	vmov	r2, s15
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	601a      	str	r2, [r3, #0]
	}
	if (V_R >= 0) {
 8001f72:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7e:	db14      	blt.n	8001faa <get_duty+0xae>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8001f80:	2001      	movs	r0, #1
 8001f82:	f005 fcb3 	bl	80078ec <pl_R_DriveMotor_mode>
		*duty_R = (int) (V_R / g_V_battery_mean * MAXMOTOR);
 8001f86:	4b24      	ldr	r3, [pc, #144]	; (8002018 <get_duty+0x11c>)
 8001f88:	ed93 7a00 	vldr	s14, [r3]
 8001f8c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f94:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800201c <get_duty+0x120>
 8001f98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fa0:	ee17 2a90 	vmov	r2, s15
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e015      	b.n	8001fd6 <get_duty+0xda>
	}
	else{
		pl_R_DriveMotor_mode(MOTOR_BACK);
 8001faa:	2002      	movs	r0, #2
 8001fac:	f005 fc9e 	bl	80078ec <pl_R_DriveMotor_mode>
	    *duty_R = (int) (-V_R / g_V_battery_mean * MAXMOTOR);
 8001fb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fb4:	eef1 6a67 	vneg.f32	s13, s15
 8001fb8:	4b17      	ldr	r3, [pc, #92]	; (8002018 <get_duty+0x11c>)
 8001fba:	ed93 7a00 	vldr	s14, [r3]
 8001fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fc2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800201c <get_duty+0x120>
 8001fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fce:	ee17 2a90 	vmov	r2, s15
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	601a      	str	r2, [r3, #0]
	}
	*duty_L=*duty_L;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	601a      	str	r2, [r3, #0]
	*duty_R=*duty_R;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	601a      	str	r2, [r3, #0]
	//XX
	if (*duty_L >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f240 628c 	movw	r2, #1676	; 0x68c
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	dd03      	ble.n	8001ffa <get_duty+0xfe>
		*duty_L = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f240 628d 	movw	r2, #1677	; 0x68d
 8001ff8:	601a      	str	r2, [r3, #0]
//		pl_r_blue_LED(ON);
	}
	if (*duty_R >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f240 628c 	movw	r2, #1676	; 0x68c
 8002002:	4293      	cmp	r3, r2
 8002004:	dd03      	ble.n	800200e <get_duty+0x112>
		*duty_R = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	f240 628d 	movw	r2, #1677	; 0x68d
 800200c:	601a      	str	r2, [r3, #0]
//		pl_l_blue_LED(ON);
	}

}
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200004b4 	.word	0x200004b4
 800201c:	44d1e000 	.word	0x44d1e000

08002020 <interupt_DriveMotor>:



void interupt_DriveMotor(void){
 8002020:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002024:	b08c      	sub	sp, #48	; 0x30
 8002026:	af02      	add	r7, sp, #8
	int duty_L=0, duty_R=0;
 8002028:	2300      	movs	r3, #0
 800202a:	61bb      	str	r3, [r7, #24]
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
	float V_L=0, V_R=0;
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
	float PID_all_L,PID_all_R,PID_s,PID_t;
	float PID_w=0;
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
	float feedforward_straight=0,feedforward_turning=0;
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	607b      	str	r3, [r7, #4]



	if (modeacc == 0) {
 800204e:	4bd2      	ldr	r3, [pc, #840]	; (8002398 <interupt_DriveMotor+0x378>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d108      	bne.n	8002068 <interupt_DriveMotor+0x48>
		g_acc_flag=4;
 8002056:	4bd1      	ldr	r3, [pc, #836]	; (800239c <interupt_DriveMotor+0x37c>)
 8002058:	2204      	movs	r2, #4
 800205a:	701a      	strb	r2, [r3, #0]
		g_WallControl_mode=0;
 800205c:	4bd0      	ldr	r3, [pc, #832]	; (80023a0 <interupt_DriveMotor+0x380>)
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 8002062:	4bd0      	ldr	r3, [pc, #832]	; (80023a4 <interupt_DriveMotor+0x384>)
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]

	}
	if (modeacc == 1) {
 8002068:	4bcb      	ldr	r3, [pc, #812]	; (8002398 <interupt_DriveMotor+0x378>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b01      	cmp	r3, #1
 800206e:	f040 828f 	bne.w	8002590 <interupt_DriveMotor+0x570>
		g_wallCut_mode=1;
 8002072:	4bcc      	ldr	r3, [pc, #816]	; (80023a4 <interupt_DriveMotor+0x384>)
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002078:	4bcb      	ldr	r3, [pc, #812]	; (80023a8 <interupt_DriveMotor+0x388>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	3301      	adds	r3, #1
 800207e:	4aca      	ldr	r2, [pc, #808]	; (80023a8 <interupt_DriveMotor+0x388>)
 8002080:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002082:	4bca      	ldr	r3, [pc, #808]	; (80023ac <interupt_DriveMotor+0x38c>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fa86 	bl	8000598 <__aeabi_f2d>
 800208c:	4604      	mov	r4, r0
 800208e:	460d      	mov	r5, r1
 8002090:	4bc6      	ldr	r3, [pc, #792]	; (80023ac <interupt_DriveMotor+0x38c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fa7f 	bl	8000598 <__aeabi_f2d>
 800209a:	a3bb      	add	r3, pc, #748	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	f7fe fad2 	bl	8000648 <__aeabi_dmul>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4690      	mov	r8, r2
 80020aa:	4699      	mov	r9, r3
 80020ac:	4bbf      	ldr	r3, [pc, #764]	; (80023ac <interupt_DriveMotor+0x38c>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fa71 	bl	8000598 <__aeabi_f2d>
 80020b6:	a3b4      	add	r3, pc, #720	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	f7fe fac4 	bl	8000648 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	a3af      	add	r3, pc, #700	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 80020ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ce:	f7fe fabb 	bl	8000648 <__aeabi_dmul>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020e2:	f7fe fbdb 	bl	800089c <__aeabi_ddiv>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4640      	mov	r0, r8
 80020ec:	4649      	mov	r1, r9
 80020ee:	f7fe f8f5 	bl	80002dc <__adddf3>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4620      	mov	r0, r4
 80020f8:	4629      	mov	r1, r5
 80020fa:	f7fe f8ef 	bl	80002dc <__adddf3>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	f7fe fd77 	bl	8000bf8 <__aeabi_d2f>
 800210a:	4603      	mov	r3, r0
 800210c:	4aa7      	ldr	r2, [pc, #668]	; (80023ac <interupt_DriveMotor+0x38c>)
 800210e:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002110:	4ba6      	ldr	r3, [pc, #664]	; (80023ac <interupt_DriveMotor+0x38c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fa3f 	bl	8000598 <__aeabi_f2d>
 800211a:	4604      	mov	r4, r0
 800211c:	460d      	mov	r5, r1
 800211e:	4ba3      	ldr	r3, [pc, #652]	; (80023ac <interupt_DriveMotor+0x38c>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fa38 	bl	8000598 <__aeabi_f2d>
 8002128:	a397      	add	r3, pc, #604	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 800212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212e:	f7fe fa8b 	bl	8000648 <__aeabi_dmul>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4620      	mov	r0, r4
 8002138:	4629      	mov	r1, r5
 800213a:	f7fe f8cf 	bl	80002dc <__adddf3>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	f7fe fd57 	bl	8000bf8 <__aeabi_d2f>
 800214a:	4603      	mov	r3, r0
 800214c:	4a97      	ldr	r2, [pc, #604]	; (80023ac <interupt_DriveMotor+0x38c>)
 800214e:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002150:	4b97      	ldr	r3, [pc, #604]	; (80023b0 <interupt_DriveMotor+0x390>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fa1f 	bl	8000598 <__aeabi_f2d>
 800215a:	4604      	mov	r4, r0
 800215c:	460d      	mov	r5, r1
 800215e:	4b94      	ldr	r3, [pc, #592]	; (80023b0 <interupt_DriveMotor+0x390>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fa18 	bl	8000598 <__aeabi_f2d>
 8002168:	a387      	add	r3, pc, #540	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 800216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216e:	f7fe fa6b 	bl	8000648 <__aeabi_dmul>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4690      	mov	r8, r2
 8002178:	4699      	mov	r9, r3
 800217a:	4b8d      	ldr	r3, [pc, #564]	; (80023b0 <interupt_DriveMotor+0x390>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fa0a 	bl	8000598 <__aeabi_f2d>
 8002184:	a380      	add	r3, pc, #512	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	f7fe fa5d 	bl	8000648 <__aeabi_dmul>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	a37c      	add	r3, pc, #496	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219c:	f7fe fa54 	bl	8000648 <__aeabi_dmul>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021b0:	f7fe fb74 	bl	800089c <__aeabi_ddiv>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4640      	mov	r0, r8
 80021ba:	4649      	mov	r1, r9
 80021bc:	f7fe f88e 	bl	80002dc <__adddf3>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4620      	mov	r0, r4
 80021c6:	4629      	mov	r1, r5
 80021c8:	f7fe f888 	bl	80002dc <__adddf3>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4610      	mov	r0, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	f7fe fd10 	bl	8000bf8 <__aeabi_d2f>
 80021d8:	4603      	mov	r3, r0
 80021da:	4a75      	ldr	r2, [pc, #468]	; (80023b0 <interupt_DriveMotor+0x390>)
 80021dc:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 80021de:	4b74      	ldr	r3, [pc, #464]	; (80023b0 <interupt_DriveMotor+0x390>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f9d8 	bl	8000598 <__aeabi_f2d>
 80021e8:	4604      	mov	r4, r0
 80021ea:	460d      	mov	r5, r1
 80021ec:	4b70      	ldr	r3, [pc, #448]	; (80023b0 <interupt_DriveMotor+0x390>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f9d1 	bl	8000598 <__aeabi_f2d>
 80021f6:	a364      	add	r3, pc, #400	; (adr r3, 8002388 <interupt_DriveMotor+0x368>)
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	f7fe fa24 	bl	8000648 <__aeabi_dmul>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4620      	mov	r0, r4
 8002206:	4629      	mov	r1, r5
 8002208:	f7fe f868 	bl	80002dc <__adddf3>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	f7fe fcf0 	bl	8000bf8 <__aeabi_d2f>
 8002218:	4603      	mov	r3, r0
 800221a:	4a65      	ldr	r2, [pc, #404]	; (80023b0 <interupt_DriveMotor+0x390>)
 800221c:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_straight,&straight);
 800221e:	4b65      	ldr	r3, [pc, #404]	; (80023b4 <interupt_DriveMotor+0x394>)
 8002220:	4a62      	ldr	r2, [pc, #392]	; (80023ac <interupt_DriveMotor+0x38c>)
 8002222:	9201      	str	r2, [sp, #4]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	9200      	str	r2, [sp, #0]
 8002228:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800222a:	f005 ffeb 	bl	8008204 <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 800222e:	4b5f      	ldr	r3, [pc, #380]	; (80023ac <interupt_DriveMotor+0x38c>)
 8002230:	edd3 7a00 	vldr	s15, [r3]
 8002234:	4b5e      	ldr	r3, [pc, #376]	; (80023b0 <interupt_DriveMotor+0x390>)
 8002236:	ed93 7a00 	vldr	s14, [r3]
 800223a:	f107 020c 	add.w	r2, r7, #12
 800223e:	f107 0310 	add.w	r3, r7, #16
 8002242:	eef0 0a47 	vmov.f32	s1, s14
 8002246:	eeb0 0a67 	vmov.f32	s0, s15
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f002 fbf1 	bl	8004a34 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002252:	4b59      	ldr	r3, [pc, #356]	; (80023b8 <interupt_DriveMotor+0x398>)
 8002254:	ed93 7a00 	vldr	s14, [r3]
 8002258:	4b58      	ldr	r3, [pc, #352]	; (80023bc <interupt_DriveMotor+0x39c>)
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002262:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002266:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800226a:	4b50      	ldr	r3, [pc, #320]	; (80023ac <interupt_DriveMotor+0x38c>)
 800226c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002270:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <interupt_DriveMotor+0x3a0>)
 8002272:	edd3 6a00 	vldr	s13, [r3]
 8002276:	4b4e      	ldr	r3, [pc, #312]	; (80023b0 <interupt_DriveMotor+0x390>)
 8002278:	ed93 6a01 	vldr	s12, [r3, #4]
 800227c:	1d3a      	adds	r2, r7, #4
 800227e:	f107 0308 	add.w	r3, r7, #8
 8002282:	eef0 1a46 	vmov.f32	s3, s12
 8002286:	eeb0 1a66 	vmov.f32	s2, s13
 800228a:	4611      	mov	r1, r2
 800228c:	eef0 0a67 	vmov.f32	s1, s15
 8002290:	eeb0 0a47 	vmov.f32	s0, s14
 8002294:	4618      	mov	r0, r3
 8002296:	f002 f927 	bl	80044e8 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 800229a:	f002 fdb5 	bl	8004e08 <calWallConrol>
 800229e:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 80022a2:	ed97 7a04 	vldr	s14, [r7, #16]
 80022a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80022aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80022b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80022ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022be:	edd7 7a01 	vldr	s15, [r7, #4]
 80022c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 80022ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80022ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80022d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80022da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022de:	edd7 7a02 	vldr	s15, [r7, #8]
 80022e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80022ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ee:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80022f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80022f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80022fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fe:	ee17 0a90 	vmov	r0, s15
 8002302:	f7fe f949 	bl	8000598 <__aeabi_f2d>
 8002306:	4604      	mov	r4, r0
 8002308:	460d      	mov	r5, r1
 800230a:	4b2e      	ldr	r3, [pc, #184]	; (80023c4 <interupt_DriveMotor+0x3a4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f942 	bl	8000598 <__aeabi_f2d>
 8002314:	a31e      	add	r3, pc, #120	; (adr r3, 8002390 <interupt_DriveMotor+0x370>)
 8002316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231a:	f7fe f995 	bl	8000648 <__aeabi_dmul>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4620      	mov	r0, r4
 8002324:	4629      	mov	r1, r5
 8002326:	f7fe fc1f 	bl	8000b68 <__aeabi_dcmpgt>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 808d 	beq.w	800244c <interupt_DriveMotor+0x42c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002332:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002334:	f7fe f930 	bl	8000598 <__aeabi_f2d>
 8002338:	4604      	mov	r4, r0
 800233a:	460d      	mov	r5, r1
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <interupt_DriveMotor+0x3a4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f929 	bl	8000598 <__aeabi_f2d>
 8002346:	a312      	add	r3, pc, #72	; (adr r3, 8002390 <interupt_DriveMotor+0x370>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f7fe f97c 	bl	8000648 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4690      	mov	r8, r2
 8002356:	4699      	mov	r9, r3
 8002358:	ed97 7a04 	vldr	s14, [r7, #16]
 800235c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002364:	ee17 0a90 	vmov	r0, s15
 8002368:	f7fe f916 	bl	8000598 <__aeabi_f2d>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4640      	mov	r0, r8
 8002372:	4649      	mov	r1, r9
 8002374:	f7fd ffb0 	bl	80002d8 <__aeabi_dsub>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4620      	mov	r0, r4
 800237e:	4629      	mov	r1, r5
 8002380:	e022      	b.n	80023c8 <interupt_DriveMotor+0x3a8>
 8002382:	bf00      	nop
 8002384:	f3af 8000 	nop.w
 8002388:	d2f1a9fc 	.word	0xd2f1a9fc
 800238c:	3f50624d 	.word	0x3f50624d
 8002390:	d916872b 	.word	0xd916872b
 8002394:	3feff7ce 	.word	0x3feff7ce
 8002398:	20000508 	.word	0x20000508
 800239c:	200007e4 	.word	0x200007e4
 80023a0:	20000570 	.word	0x20000570
 80023a4:	20000572 	.word	0x20000572
 80023a8:	20000504 	.word	0x20000504
 80023ac:	200004b8 	.word	0x200004b8
 80023b0:	200004c4 	.word	0x200004c4
 80023b4:	200004d0 	.word	0x200004d0
 80023b8:	20000218 	.word	0x20000218
 80023bc:	2000021c 	.word	0x2000021c
 80023c0:	20000248 	.word	0x20000248
 80023c4:	200004b4 	.word	0x200004b4
 80023c8:	f7fd ff88 	bl	80002dc <__adddf3>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4610      	mov	r0, r2
 80023d2:	4619      	mov	r1, r3
 80023d4:	f7fe fc10 	bl	8000bf8 <__aeabi_d2f>
 80023d8:	4603      	mov	r3, r0
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80023dc:	6a38      	ldr	r0, [r7, #32]
 80023de:	f7fe f8db 	bl	8000598 <__aeabi_f2d>
 80023e2:	4604      	mov	r4, r0
 80023e4:	460d      	mov	r5, r1
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <interupt_DriveMotor+0x428>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe f8d4 	bl	8000598 <__aeabi_f2d>
 80023f0:	a313      	add	r3, pc, #76	; (adr r3, 8002440 <interupt_DriveMotor+0x420>)
 80023f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f6:	f7fe f927 	bl	8000648 <__aeabi_dmul>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4690      	mov	r8, r2
 8002400:	4699      	mov	r9, r3
 8002402:	ed97 7a04 	vldr	s14, [r7, #16]
 8002406:	edd7 7a02 	vldr	s15, [r7, #8]
 800240a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240e:	ee17 0a90 	vmov	r0, s15
 8002412:	f7fe f8c1 	bl	8000598 <__aeabi_f2d>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4640      	mov	r0, r8
 800241c:	4649      	mov	r1, r9
 800241e:	f7fd ff5b 	bl	80002d8 <__aeabi_dsub>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4620      	mov	r0, r4
 8002428:	4629      	mov	r1, r5
 800242a:	f7fd ff57 	bl	80002dc <__adddf3>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4610      	mov	r0, r2
 8002434:	4619      	mov	r1, r3
 8002436:	f7fe fbdf 	bl	8000bf8 <__aeabi_d2f>
 800243a:	4603      	mov	r3, r0
 800243c:	623b      	str	r3, [r7, #32]
 800243e:	e095      	b.n	800256c <interupt_DriveMotor+0x54c>
 8002440:	d916872b 	.word	0xd916872b
 8002444:	3feff7ce 	.word	0x3feff7ce
 8002448:	200004b4 	.word	0x200004b4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800244c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002450:	edd7 7a02 	vldr	s15, [r7, #8]
 8002454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002458:	ee17 0a90 	vmov	r0, s15
 800245c:	f7fe f89c 	bl	8000598 <__aeabi_f2d>
 8002460:	4604      	mov	r4, r0
 8002462:	460d      	mov	r5, r1
 8002464:	4bce      	ldr	r3, [pc, #824]	; (80027a0 <interupt_DriveMotor+0x780>)
 8002466:	edd3 7a00 	vldr	s15, [r3]
 800246a:	eef1 7a67 	vneg.f32	s15, s15
 800246e:	ee17 3a90 	vmov	r3, s15
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe f890 	bl	8000598 <__aeabi_f2d>
 8002478:	a3c5      	add	r3, pc, #788	; (adr r3, 8002790 <interupt_DriveMotor+0x770>)
 800247a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247e:	f7fe f8e3 	bl	8000648 <__aeabi_dmul>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4620      	mov	r0, r4
 8002488:	4629      	mov	r1, r5
 800248a:	f7fe fb4f 	bl	8000b2c <__aeabi_dcmplt>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d06b      	beq.n	800256c <interupt_DriveMotor+0x54c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002496:	f7fe f87f 	bl	8000598 <__aeabi_f2d>
 800249a:	4604      	mov	r4, r0
 800249c:	460d      	mov	r5, r1
 800249e:	4bc0      	ldr	r3, [pc, #768]	; (80027a0 <interupt_DriveMotor+0x780>)
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	eef1 7a67 	vneg.f32	s15, s15
 80024a8:	ee17 3a90 	vmov	r3, s15
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe f873 	bl	8000598 <__aeabi_f2d>
 80024b2:	a3b7      	add	r3, pc, #732	; (adr r3, 8002790 <interupt_DriveMotor+0x770>)
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	f7fe f8c6 	bl	8000648 <__aeabi_dmul>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4690      	mov	r8, r2
 80024c2:	4699      	mov	r9, r3
 80024c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80024c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80024cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d0:	ee17 0a90 	vmov	r0, s15
 80024d4:	f7fe f860 	bl	8000598 <__aeabi_f2d>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4640      	mov	r0, r8
 80024de:	4649      	mov	r1, r9
 80024e0:	f7fd fefa 	bl	80002d8 <__aeabi_dsub>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4620      	mov	r0, r4
 80024ea:	4629      	mov	r1, r5
 80024ec:	f7fd fef6 	bl	80002dc <__adddf3>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	f7fe fb7e 	bl	8000bf8 <__aeabi_d2f>
 80024fc:	4603      	mov	r3, r0
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002500:	6a38      	ldr	r0, [r7, #32]
 8002502:	f7fe f849 	bl	8000598 <__aeabi_f2d>
 8002506:	4604      	mov	r4, r0
 8002508:	460d      	mov	r5, r1
 800250a:	4ba5      	ldr	r3, [pc, #660]	; (80027a0 <interupt_DriveMotor+0x780>)
 800250c:	edd3 7a00 	vldr	s15, [r3]
 8002510:	eef1 7a67 	vneg.f32	s15, s15
 8002514:	ee17 3a90 	vmov	r3, s15
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe f83d 	bl	8000598 <__aeabi_f2d>
 800251e:	a39c      	add	r3, pc, #624	; (adr r3, 8002790 <interupt_DriveMotor+0x770>)
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	f7fe f890 	bl	8000648 <__aeabi_dmul>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4690      	mov	r8, r2
 800252e:	4699      	mov	r9, r3
 8002530:	ed97 7a04 	vldr	s14, [r7, #16]
 8002534:	edd7 7a02 	vldr	s15, [r7, #8]
 8002538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253c:	ee17 0a90 	vmov	r0, s15
 8002540:	f7fe f82a 	bl	8000598 <__aeabi_f2d>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4640      	mov	r0, r8
 800254a:	4649      	mov	r1, r9
 800254c:	f7fd fec4 	bl	80002d8 <__aeabi_dsub>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4620      	mov	r0, r4
 8002556:	4629      	mov	r1, r5
 8002558:	f7fd fec0 	bl	80002dc <__adddf3>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	f7fe fb48 	bl	8000bf8 <__aeabi_d2f>
 8002568:	4603      	mov	r3, r0
 800256a:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 800256c:	f107 0214 	add.w	r2, r7, #20
 8002570:	f107 0318 	add.w	r3, r7, #24
 8002574:	4611      	mov	r1, r2
 8002576:	4618      	mov	r0, r3
 8002578:	edd7 0a08 	vldr	s1, [r7, #32]
 800257c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002580:	f7ff fcbc 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f005 f9f0 	bl	8007970 <pl_DriveMotor_duty>
	}
	if (modeacc == 2 || modeacc == 4) {//旋回とスラローム
 8002590:	4b84      	ldr	r3, [pc, #528]	; (80027a4 <interupt_DriveMotor+0x784>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d004      	beq.n	80025a2 <interupt_DriveMotor+0x582>
 8002598:	4b82      	ldr	r3, [pc, #520]	; (80027a4 <interupt_DriveMotor+0x784>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b04      	cmp	r3, #4
 800259e:	f040 8287 	bne.w	8002ab0 <interupt_DriveMotor+0xa90>
		g_WallControl_mode=0;
 80025a2:	4b81      	ldr	r3, [pc, #516]	; (80027a8 <interupt_DriveMotor+0x788>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 80025a8:	4b80      	ldr	r3, [pc, #512]	; (80027ac <interupt_DriveMotor+0x78c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80025ae:	4b80      	ldr	r3, [pc, #512]	; (80027b0 <interupt_DriveMotor+0x790>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3301      	adds	r3, #1
 80025b4:	4a7e      	ldr	r2, [pc, #504]	; (80027b0 <interupt_DriveMotor+0x790>)
 80025b6:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <interupt_DriveMotor+0x794>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fd ffeb 	bl	8000598 <__aeabi_f2d>
 80025c2:	4604      	mov	r4, r0
 80025c4:	460d      	mov	r5, r1
 80025c6:	4b7b      	ldr	r3, [pc, #492]	; (80027b4 <interupt_DriveMotor+0x794>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd ffe4 	bl	8000598 <__aeabi_f2d>
 80025d0:	a371      	add	r3, pc, #452	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 80025d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d6:	f7fe f837 	bl	8000648 <__aeabi_dmul>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4690      	mov	r8, r2
 80025e0:	4699      	mov	r9, r3
 80025e2:	4b74      	ldr	r3, [pc, #464]	; (80027b4 <interupt_DriveMotor+0x794>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ffd6 	bl	8000598 <__aeabi_f2d>
 80025ec:	a36a      	add	r3, pc, #424	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	f7fe f829 	bl	8000648 <__aeabi_dmul>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	a366      	add	r3, pc, #408	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fe f820 	bl	8000648 <__aeabi_dmul>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002618:	f7fe f940 	bl	800089c <__aeabi_ddiv>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4640      	mov	r0, r8
 8002622:	4649      	mov	r1, r9
 8002624:	f7fd fe5a 	bl	80002dc <__adddf3>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4620      	mov	r0, r4
 800262e:	4629      	mov	r1, r5
 8002630:	f7fd fe54 	bl	80002dc <__adddf3>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4610      	mov	r0, r2
 800263a:	4619      	mov	r1, r3
 800263c:	f7fe fadc 	bl	8000bf8 <__aeabi_d2f>
 8002640:	4603      	mov	r3, r0
 8002642:	4a5c      	ldr	r2, [pc, #368]	; (80027b4 <interupt_DriveMotor+0x794>)
 8002644:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002646:	4b5b      	ldr	r3, [pc, #364]	; (80027b4 <interupt_DriveMotor+0x794>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd ffa4 	bl	8000598 <__aeabi_f2d>
 8002650:	4604      	mov	r4, r0
 8002652:	460d      	mov	r5, r1
 8002654:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <interupt_DriveMotor+0x794>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4618      	mov	r0, r3
 800265a:	f7fd ff9d 	bl	8000598 <__aeabi_f2d>
 800265e:	a34e      	add	r3, pc, #312	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 8002660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002664:	f7fd fff0 	bl	8000648 <__aeabi_dmul>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4620      	mov	r0, r4
 800266e:	4629      	mov	r1, r5
 8002670:	f7fd fe34 	bl	80002dc <__adddf3>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	f7fe fabc 	bl	8000bf8 <__aeabi_d2f>
 8002680:	4603      	mov	r3, r0
 8002682:	4a4c      	ldr	r2, [pc, #304]	; (80027b4 <interupt_DriveMotor+0x794>)
 8002684:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002686:	4b4c      	ldr	r3, [pc, #304]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd ff84 	bl	8000598 <__aeabi_f2d>
 8002690:	4604      	mov	r4, r0
 8002692:	460d      	mov	r5, r1
 8002694:	4b48      	ldr	r3, [pc, #288]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd ff7d 	bl	8000598 <__aeabi_f2d>
 800269e:	a33e      	add	r3, pc, #248	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 80026a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a4:	f7fd ffd0 	bl	8000648 <__aeabi_dmul>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4690      	mov	r8, r2
 80026ae:	4699      	mov	r9, r3
 80026b0:	4b41      	ldr	r3, [pc, #260]	; (80027b8 <interupt_DriveMotor+0x798>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd ff6f 	bl	8000598 <__aeabi_f2d>
 80026ba:	a337      	add	r3, pc, #220	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 80026bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c0:	f7fd ffc2 	bl	8000648 <__aeabi_dmul>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	a332      	add	r3, pc, #200	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 80026ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d2:	f7fd ffb9 	bl	8000648 <__aeabi_dmul>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4610      	mov	r0, r2
 80026dc:	4619      	mov	r1, r3
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026e6:	f7fe f8d9 	bl	800089c <__aeabi_ddiv>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4640      	mov	r0, r8
 80026f0:	4649      	mov	r1, r9
 80026f2:	f7fd fdf3 	bl	80002dc <__adddf3>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4620      	mov	r0, r4
 80026fc:	4629      	mov	r1, r5
 80026fe:	f7fd fded 	bl	80002dc <__adddf3>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	f7fe fa75 	bl	8000bf8 <__aeabi_d2f>
 800270e:	4603      	mov	r3, r0
 8002710:	4a29      	ldr	r2, [pc, #164]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002712:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002714:	4b28      	ldr	r3, [pc, #160]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7fd ff3d 	bl	8000598 <__aeabi_f2d>
 800271e:	4604      	mov	r4, r0
 8002720:	460d      	mov	r5, r1
 8002722:	4b25      	ldr	r3, [pc, #148]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fd ff36 	bl	8000598 <__aeabi_f2d>
 800272c:	a31a      	add	r3, pc, #104	; (adr r3, 8002798 <interupt_DriveMotor+0x778>)
 800272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002732:	f7fd ff89 	bl	8000648 <__aeabi_dmul>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4620      	mov	r0, r4
 800273c:	4629      	mov	r1, r5
 800273e:	f7fd fdcd 	bl	80002dc <__adddf3>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4610      	mov	r0, r2
 8002748:	4619      	mov	r1, r3
 800274a:	f7fe fa55 	bl	8000bf8 <__aeabi_d2f>
 800274e:	4603      	mov	r3, r0
 8002750:	4a19      	ldr	r2, [pc, #100]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002752:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_turning,&turning);
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <interupt_DriveMotor+0x79c>)
 8002756:	4a18      	ldr	r2, [pc, #96]	; (80027b8 <interupt_DriveMotor+0x798>)
 8002758:	9201      	str	r2, [sp, #4]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	9200      	str	r2, [sp, #0]
 800275e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002760:	f005 fd50 	bl	8008204 <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <interupt_DriveMotor+0x794>)
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <interupt_DriveMotor+0x798>)
 800276c:	ed93 7a00 	vldr	s14, [r3]
 8002770:	f107 020c 	add.w	r2, r7, #12
 8002774:	f107 0310 	add.w	r3, r7, #16
 8002778:	eef0 0a47 	vmov.f32	s1, s14
 800277c:	eeb0 0a67 	vmov.f32	s0, s15
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f002 f956 	bl	8004a34 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002788:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <interupt_DriveMotor+0x7a0>)
 800278a:	ed93 7a00 	vldr	s14, [r3]
 800278e:	e019      	b.n	80027c4 <interupt_DriveMotor+0x7a4>
 8002790:	d916872b 	.word	0xd916872b
 8002794:	3feff7ce 	.word	0x3feff7ce
 8002798:	d2f1a9fc 	.word	0xd2f1a9fc
 800279c:	3f50624d 	.word	0x3f50624d
 80027a0:	200004b4 	.word	0x200004b4
 80027a4:	20000508 	.word	0x20000508
 80027a8:	20000570 	.word	0x20000570
 80027ac:	20000572 	.word	0x20000572
 80027b0:	20000504 	.word	0x20000504
 80027b4:	200004b8 	.word	0x200004b8
 80027b8:	200004c4 	.word	0x200004c4
 80027bc:	200004e4 	.word	0x200004e4
 80027c0:	20000218 	.word	0x20000218
 80027c4:	4b64      	ldr	r3, [pc, #400]	; (8002958 <interupt_DriveMotor+0x938>)
 80027c6:	edd3 7a00 	vldr	s15, [r3]
 80027ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80027d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027d6:	4b61      	ldr	r3, [pc, #388]	; (800295c <interupt_DriveMotor+0x93c>)
 80027d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80027dc:	4b60      	ldr	r3, [pc, #384]	; (8002960 <interupt_DriveMotor+0x940>)
 80027de:	edd3 6a00 	vldr	s13, [r3]
 80027e2:	4b60      	ldr	r3, [pc, #384]	; (8002964 <interupt_DriveMotor+0x944>)
 80027e4:	ed93 6a01 	vldr	s12, [r3, #4]
 80027e8:	1d3a      	adds	r2, r7, #4
 80027ea:	f107 0308 	add.w	r3, r7, #8
 80027ee:	eef0 1a46 	vmov.f32	s3, s12
 80027f2:	eeb0 1a66 	vmov.f32	s2, s13
 80027f6:	4611      	mov	r1, r2
 80027f8:	eef0 0a67 	vmov.f32	s1, s15
 80027fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002800:	4618      	mov	r0, r3
 8002802:	f001 fe71 	bl	80044e8 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002806:	ed97 7a04 	vldr	s14, [r7, #16]
 800280a:	edd7 7a03 	vldr	s15, [r7, #12]
 800280e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002812:	edd7 7a02 	vldr	s15, [r7, #8]
 8002816:	ee37 7a27 	vadd.f32	s14, s14, s15
 800281a:	edd7 7a01 	vldr	s15, [r7, #4]
 800281e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002822:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002826:	ed97 7a04 	vldr	s14, [r7, #16]
 800282a:	edd7 7a03 	vldr	s15, [r7, #12]
 800282e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002832:	edd7 7a02 	vldr	s15, [r7, #8]
 8002836:	ee37 7a27 	vadd.f32	s14, s14, s15
 800283a:	edd7 7a01 	vldr	s15, [r7, #4]
 800283e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002842:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002846:	ed97 7a04 	vldr	s14, [r7, #16]
 800284a:	edd7 7a02 	vldr	s15, [r7, #8]
 800284e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002852:	ee17 0a90 	vmov	r0, s15
 8002856:	f7fd fe9f 	bl	8000598 <__aeabi_f2d>
 800285a:	4604      	mov	r4, r0
 800285c:	460d      	mov	r5, r1
 800285e:	4b42      	ldr	r3, [pc, #264]	; (8002968 <interupt_DriveMotor+0x948>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fd fe98 	bl	8000598 <__aeabi_f2d>
 8002868:	a339      	add	r3, pc, #228	; (adr r3, 8002950 <interupt_DriveMotor+0x930>)
 800286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286e:	f7fd feeb 	bl	8000648 <__aeabi_dmul>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4620      	mov	r0, r4
 8002878:	4629      	mov	r1, r5
 800287a:	f7fe f975 	bl	8000b68 <__aeabi_dcmpgt>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d073      	beq.n	800296c <interupt_DriveMotor+0x94c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002886:	f7fd fe87 	bl	8000598 <__aeabi_f2d>
 800288a:	4604      	mov	r4, r0
 800288c:	460d      	mov	r5, r1
 800288e:	4b36      	ldr	r3, [pc, #216]	; (8002968 <interupt_DriveMotor+0x948>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fe80 	bl	8000598 <__aeabi_f2d>
 8002898:	a32d      	add	r3, pc, #180	; (adr r3, 8002950 <interupt_DriveMotor+0x930>)
 800289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289e:	f7fd fed3 	bl	8000648 <__aeabi_dmul>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4690      	mov	r8, r2
 80028a8:	4699      	mov	r9, r3
 80028aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80028ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80028b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b6:	ee17 0a90 	vmov	r0, s15
 80028ba:	f7fd fe6d 	bl	8000598 <__aeabi_f2d>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4640      	mov	r0, r8
 80028c4:	4649      	mov	r1, r9
 80028c6:	f7fd fd07 	bl	80002d8 <__aeabi_dsub>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4620      	mov	r0, r4
 80028d0:	4629      	mov	r1, r5
 80028d2:	f7fd fd03 	bl	80002dc <__adddf3>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4610      	mov	r0, r2
 80028dc:	4619      	mov	r1, r3
 80028de:	f7fe f98b 	bl	8000bf8 <__aeabi_d2f>
 80028e2:	4603      	mov	r3, r0
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80028e6:	6a38      	ldr	r0, [r7, #32]
 80028e8:	f7fd fe56 	bl	8000598 <__aeabi_f2d>
 80028ec:	4604      	mov	r4, r0
 80028ee:	460d      	mov	r5, r1
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <interupt_DriveMotor+0x948>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fd fe4f 	bl	8000598 <__aeabi_f2d>
 80028fa:	a315      	add	r3, pc, #84	; (adr r3, 8002950 <interupt_DriveMotor+0x930>)
 80028fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002900:	f7fd fea2 	bl	8000648 <__aeabi_dmul>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4690      	mov	r8, r2
 800290a:	4699      	mov	r9, r3
 800290c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002910:	edd7 7a02 	vldr	s15, [r7, #8]
 8002914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002918:	ee17 0a90 	vmov	r0, s15
 800291c:	f7fd fe3c 	bl	8000598 <__aeabi_f2d>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4640      	mov	r0, r8
 8002926:	4649      	mov	r1, r9
 8002928:	f7fd fcd6 	bl	80002d8 <__aeabi_dsub>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4620      	mov	r0, r4
 8002932:	4629      	mov	r1, r5
 8002934:	f7fd fcd2 	bl	80002dc <__adddf3>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	f7fe f95a 	bl	8000bf8 <__aeabi_d2f>
 8002944:	4603      	mov	r3, r0
 8002946:	623b      	str	r3, [r7, #32]
 8002948:	e0a0      	b.n	8002a8c <interupt_DriveMotor+0xa6c>
 800294a:	bf00      	nop
 800294c:	f3af 8000 	nop.w
 8002950:	d916872b 	.word	0xd916872b
 8002954:	3feff7ce 	.word	0x3feff7ce
 8002958:	2000021c 	.word	0x2000021c
 800295c:	200004b8 	.word	0x200004b8
 8002960:	20000248 	.word	0x20000248
 8002964:	200004c4 	.word	0x200004c4
 8002968:	200004b4 	.word	0x200004b4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800296c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002970:	edd7 7a02 	vldr	s15, [r7, #8]
 8002974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002978:	ee17 0a90 	vmov	r0, s15
 800297c:	f7fd fe0c 	bl	8000598 <__aeabi_f2d>
 8002980:	4604      	mov	r4, r0
 8002982:	460d      	mov	r5, r1
 8002984:	4bd6      	ldr	r3, [pc, #856]	; (8002ce0 <interupt_DriveMotor+0xcc0>)
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	eef1 7a67 	vneg.f32	s15, s15
 800298e:	ee17 3a90 	vmov	r3, s15
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd fe00 	bl	8000598 <__aeabi_f2d>
 8002998:	a3cd      	add	r3, pc, #820	; (adr r3, 8002cd0 <interupt_DriveMotor+0xcb0>)
 800299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299e:	f7fd fe53 	bl	8000648 <__aeabi_dmul>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4620      	mov	r0, r4
 80029a8:	4629      	mov	r1, r5
 80029aa:	f7fe f8bf 	bl	8000b2c <__aeabi_dcmplt>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d06b      	beq.n	8002a8c <interupt_DriveMotor+0xa6c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80029b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029b6:	f7fd fdef 	bl	8000598 <__aeabi_f2d>
 80029ba:	4604      	mov	r4, r0
 80029bc:	460d      	mov	r5, r1
 80029be:	4bc8      	ldr	r3, [pc, #800]	; (8002ce0 <interupt_DriveMotor+0xcc0>)
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	eef1 7a67 	vneg.f32	s15, s15
 80029c8:	ee17 3a90 	vmov	r3, s15
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fde3 	bl	8000598 <__aeabi_f2d>
 80029d2:	a3bf      	add	r3, pc, #764	; (adr r3, 8002cd0 <interupt_DriveMotor+0xcb0>)
 80029d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d8:	f7fd fe36 	bl	8000648 <__aeabi_dmul>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4690      	mov	r8, r2
 80029e2:	4699      	mov	r9, r3
 80029e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80029e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f0:	ee17 0a90 	vmov	r0, s15
 80029f4:	f7fd fdd0 	bl	8000598 <__aeabi_f2d>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4640      	mov	r0, r8
 80029fe:	4649      	mov	r1, r9
 8002a00:	f7fd fc6a 	bl	80002d8 <__aeabi_dsub>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4620      	mov	r0, r4
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	f7fd fc66 	bl	80002dc <__adddf3>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4610      	mov	r0, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	f7fe f8ee 	bl	8000bf8 <__aeabi_d2f>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002a20:	6a38      	ldr	r0, [r7, #32]
 8002a22:	f7fd fdb9 	bl	8000598 <__aeabi_f2d>
 8002a26:	4604      	mov	r4, r0
 8002a28:	460d      	mov	r5, r1
 8002a2a:	4bad      	ldr	r3, [pc, #692]	; (8002ce0 <interupt_DriveMotor+0xcc0>)
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	eef1 7a67 	vneg.f32	s15, s15
 8002a34:	ee17 3a90 	vmov	r3, s15
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fd fdad 	bl	8000598 <__aeabi_f2d>
 8002a3e:	a3a4      	add	r3, pc, #656	; (adr r3, 8002cd0 <interupt_DriveMotor+0xcb0>)
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	f7fd fe00 	bl	8000648 <__aeabi_dmul>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4690      	mov	r8, r2
 8002a4e:	4699      	mov	r9, r3
 8002a50:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a54:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a5c:	ee17 0a90 	vmov	r0, s15
 8002a60:	f7fd fd9a 	bl	8000598 <__aeabi_f2d>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4640      	mov	r0, r8
 8002a6a:	4649      	mov	r1, r9
 8002a6c:	f7fd fc34 	bl	80002d8 <__aeabi_dsub>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4620      	mov	r0, r4
 8002a76:	4629      	mov	r1, r5
 8002a78:	f7fd fc30 	bl	80002dc <__adddf3>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	f7fe f8b8 	bl	8000bf8 <__aeabi_d2f>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002a8c:	f107 0214 	add.w	r2, r7, #20
 8002a90:	f107 0318 	add.w	r3, r7, #24
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	edd7 0a08 	vldr	s1, [r7, #32]
 8002a9c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002aa0:	f7ff fa2c 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f004 ff60 	bl	8007970 <pl_DriveMotor_duty>
	}
	if (modeacc == 3) {//宴会芸
 8002ab0:	4b8c      	ldr	r3, [pc, #560]	; (8002ce4 <interupt_DriveMotor+0xcc4>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	f040 8137 	bne.w	8002d28 <interupt_DriveMotor+0xd08>
		g_WallControl_mode=0;
 8002aba:	4b8b      	ldr	r3, [pc, #556]	; (8002ce8 <interupt_DriveMotor+0xcc8>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002ac0:	4b8a      	ldr	r3, [pc, #552]	; (8002cec <interupt_DriveMotor+0xccc>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002ac6:	4b8a      	ldr	r3, [pc, #552]	; (8002cf0 <interupt_DriveMotor+0xcd0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3301      	adds	r3, #1
 8002acc:	4a88      	ldr	r2, [pc, #544]	; (8002cf0 <interupt_DriveMotor+0xcd0>)
 8002ace:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002ad0:	4b88      	ldr	r3, [pc, #544]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fd fd5f 	bl	8000598 <__aeabi_f2d>
 8002ada:	4604      	mov	r4, r0
 8002adc:	460d      	mov	r5, r1
 8002ade:	4b85      	ldr	r3, [pc, #532]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fd fd58 	bl	8000598 <__aeabi_f2d>
 8002ae8:	a37b      	add	r3, pc, #492	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aee:	f7fd fdab 	bl	8000648 <__aeabi_dmul>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4690      	mov	r8, r2
 8002af8:	4699      	mov	r9, r3
 8002afa:	4b7e      	ldr	r3, [pc, #504]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fd fd4a 	bl	8000598 <__aeabi_f2d>
 8002b04:	a374      	add	r3, pc, #464	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0a:	f7fd fd9d 	bl	8000648 <__aeabi_dmul>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	a370      	add	r3, pc, #448	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1c:	f7fd fd94 	bl	8000648 <__aeabi_dmul>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b30:	f7fd feb4 	bl	800089c <__aeabi_ddiv>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4640      	mov	r0, r8
 8002b3a:	4649      	mov	r1, r9
 8002b3c:	f7fd fbce 	bl	80002dc <__adddf3>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4620      	mov	r0, r4
 8002b46:	4629      	mov	r1, r5
 8002b48:	f7fd fbc8 	bl	80002dc <__adddf3>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4610      	mov	r0, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	f7fe f850 	bl	8000bf8 <__aeabi_d2f>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4a66      	ldr	r2, [pc, #408]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002b5c:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002b5e:	4b65      	ldr	r3, [pc, #404]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fd18 	bl	8000598 <__aeabi_f2d>
 8002b68:	4604      	mov	r4, r0
 8002b6a:	460d      	mov	r5, r1
 8002b6c:	4b61      	ldr	r3, [pc, #388]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fd11 	bl	8000598 <__aeabi_f2d>
 8002b76:	a358      	add	r3, pc, #352	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	f7fd fd64 	bl	8000648 <__aeabi_dmul>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4620      	mov	r0, r4
 8002b86:	4629      	mov	r1, r5
 8002b88:	f7fd fba8 	bl	80002dc <__adddf3>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	f7fe f830 	bl	8000bf8 <__aeabi_d2f>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	4a56      	ldr	r2, [pc, #344]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002b9c:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002b9e:	4b56      	ldr	r3, [pc, #344]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fd fcf8 	bl	8000598 <__aeabi_f2d>
 8002ba8:	4604      	mov	r4, r0
 8002baa:	460d      	mov	r5, r1
 8002bac:	4b52      	ldr	r3, [pc, #328]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fd fcf1 	bl	8000598 <__aeabi_f2d>
 8002bb6:	a348      	add	r3, pc, #288	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	f7fd fd44 	bl	8000648 <__aeabi_dmul>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4690      	mov	r8, r2
 8002bc6:	4699      	mov	r9, r3
 8002bc8:	4b4b      	ldr	r3, [pc, #300]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fce3 	bl	8000598 <__aeabi_f2d>
 8002bd2:	a341      	add	r3, pc, #260	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd8:	f7fd fd36 	bl	8000648 <__aeabi_dmul>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4610      	mov	r0, r2
 8002be2:	4619      	mov	r1, r3
 8002be4:	a33c      	add	r3, pc, #240	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bea:	f7fd fd2d 	bl	8000648 <__aeabi_dmul>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bfe:	f7fd fe4d 	bl	800089c <__aeabi_ddiv>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4640      	mov	r0, r8
 8002c08:	4649      	mov	r1, r9
 8002c0a:	f7fd fb67 	bl	80002dc <__adddf3>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4620      	mov	r0, r4
 8002c14:	4629      	mov	r1, r5
 8002c16:	f7fd fb61 	bl	80002dc <__adddf3>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	f7fd ffe9 	bl	8000bf8 <__aeabi_d2f>
 8002c26:	4603      	mov	r3, r0
 8002c28:	4a33      	ldr	r2, [pc, #204]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002c2a:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002c2c:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fd fcb1 	bl	8000598 <__aeabi_f2d>
 8002c36:	4604      	mov	r4, r0
 8002c38:	460d      	mov	r5, r1
 8002c3a:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd fcaa 	bl	8000598 <__aeabi_f2d>
 8002c44:	a324      	add	r3, pc, #144	; (adr r3, 8002cd8 <interupt_DriveMotor+0xcb8>)
 8002c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4a:	f7fd fcfd 	bl	8000648 <__aeabi_dmul>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4620      	mov	r0, r4
 8002c54:	4629      	mov	r1, r5
 8002c56:	f7fd fb41 	bl	80002dc <__adddf3>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4610      	mov	r0, r2
 8002c60:	4619      	mov	r1, r3
 8002c62:	f7fd ffc9 	bl	8000bf8 <__aeabi_d2f>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4a23      	ldr	r2, [pc, #140]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002c6a:	6013      	str	r3, [r2, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002c6c:	4b21      	ldr	r3, [pc, #132]	; (8002cf4 <interupt_DriveMotor+0xcd4>)
 8002c6e:	edd3 7a00 	vldr	s15, [r3]
 8002c72:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <interupt_DriveMotor+0xcd8>)
 8002c74:	ed93 7a00 	vldr	s14, [r3]
 8002c78:	f107 020c 	add.w	r2, r7, #12
 8002c7c:	f107 0310 	add.w	r3, r7, #16
 8002c80:	eef0 0a47 	vmov.f32	s1, s14
 8002c84:	eeb0 0a67 	vmov.f32	s0, s15
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f001 fed2 	bl	8004a34 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002c90:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c94:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ca0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002cb0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cc8:	e018      	b.n	8002cfc <interupt_DriveMotor+0xcdc>
 8002cca:	bf00      	nop
 8002ccc:	f3af 8000 	nop.w
 8002cd0:	d916872b 	.word	0xd916872b
 8002cd4:	3feff7ce 	.word	0x3feff7ce
 8002cd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002cdc:	3f50624d 	.word	0x3f50624d
 8002ce0:	200004b4 	.word	0x200004b4
 8002ce4:	20000508 	.word	0x20000508
 8002ce8:	20000570 	.word	0x20000570
 8002cec:	20000572 	.word	0x20000572
 8002cf0:	20000504 	.word	0x20000504
 8002cf4:	200004b8 	.word	0x200004b8
 8002cf8:	200004c4 	.word	0x200004c4
 8002cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d00:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002d04:	f107 0214 	add.w	r2, r7, #20
 8002d08:	f107 0318 	add.w	r3, r7, #24
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	edd7 0a08 	vldr	s1, [r7, #32]
 8002d14:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002d18:	f7ff f8f0 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f004 fe24 	bl	8007970 <pl_DriveMotor_duty>
	}if (modeacc == 5) {//前壁制御
 8002d28:	4bd3      	ldr	r3, [pc, #844]	; (8003078 <interupt_DriveMotor+0x1058>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b05      	cmp	r3, #5
 8002d2e:	d137      	bne.n	8002da0 <interupt_DriveMotor+0xd80>
		g_WallControl_mode=0;
 8002d30:	4bd2      	ldr	r3, [pc, #840]	; (800307c <interupt_DriveMotor+0x105c>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002d36:	4bd2      	ldr	r3, [pc, #840]	; (8003080 <interupt_DriveMotor+0x1060>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
		//calFrontWallConrol(&PID_frontwall_l,&PID_frontwall_r);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002d3c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d48:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d50:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d58:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002d5c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d60:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d68:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d70:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d78:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002d7c:	f107 0214 	add.w	r2, r7, #20
 8002d80:	f107 0318 	add.w	r3, r7, #24
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	edd7 0a08 	vldr	s1, [r7, #32]
 8002d8c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002d90:	f7ff f8b4 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f004 fde8 	bl	8007970 <pl_DriveMotor_duty>
	}if (modeacc == 6) {//ネイピア加速
 8002da0:	4bb5      	ldr	r3, [pc, #724]	; (8003078 <interupt_DriveMotor+0x1058>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b06      	cmp	r3, #6
 8002da6:	f040 8105 	bne.w	8002fb4 <interupt_DriveMotor+0xf94>
		g_WallControl_mode=0;
 8002daa:	4bb4      	ldr	r3, [pc, #720]	; (800307c <interupt_DriveMotor+0x105c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002db0:	4bb3      	ldr	r3, [pc, #716]	; (8003080 <interupt_DriveMotor+0x1060>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002db6:	4bb3      	ldr	r3, [pc, #716]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fd fbec 	bl	8000598 <__aeabi_f2d>
 8002dc0:	4604      	mov	r4, r0
 8002dc2:	460d      	mov	r5, r1
 8002dc4:	4baf      	ldr	r3, [pc, #700]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fbe5 	bl	8000598 <__aeabi_f2d>
 8002dce:	a3a8      	add	r3, pc, #672	; (adr r3, 8003070 <interupt_DriveMotor+0x1050>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f7fd fc38 	bl	8000648 <__aeabi_dmul>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4690      	mov	r8, r2
 8002dde:	4699      	mov	r9, r3
 8002de0:	4ba8      	ldr	r3, [pc, #672]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fd fbd7 	bl	8000598 <__aeabi_f2d>
 8002dea:	a3a1      	add	r3, pc, #644	; (adr r3, 8003070 <interupt_DriveMotor+0x1050>)
 8002dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df0:	f7fd fc2a 	bl	8000648 <__aeabi_dmul>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	a39c      	add	r3, pc, #624	; (adr r3, 8003070 <interupt_DriveMotor+0x1050>)
 8002dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e02:	f7fd fc21 	bl	8000648 <__aeabi_dmul>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e16:	f7fd fd41 	bl	800089c <__aeabi_ddiv>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4640      	mov	r0, r8
 8002e20:	4649      	mov	r1, r9
 8002e22:	f7fd fa5b 	bl	80002dc <__adddf3>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	f7fd fa55 	bl	80002dc <__adddf3>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f7fd fedd 	bl	8000bf8 <__aeabi_d2f>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4a90      	ldr	r2, [pc, #576]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002e42:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002e44:	4b8f      	ldr	r3, [pc, #572]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fd fba5 	bl	8000598 <__aeabi_f2d>
 8002e4e:	4604      	mov	r4, r0
 8002e50:	460d      	mov	r5, r1
 8002e52:	4b8c      	ldr	r3, [pc, #560]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fb9e 	bl	8000598 <__aeabi_f2d>
 8002e5c:	a384      	add	r3, pc, #528	; (adr r3, 8003070 <interupt_DriveMotor+0x1050>)
 8002e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e62:	f7fd fbf1 	bl	8000648 <__aeabi_dmul>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	f7fd fa35 	bl	80002dc <__adddf3>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4610      	mov	r0, r2
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f7fd febd 	bl	8000bf8 <__aeabi_d2f>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4a80      	ldr	r2, [pc, #512]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002e82:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME;// + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002e84:	4b80      	ldr	r3, [pc, #512]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fd fb85 	bl	8000598 <__aeabi_f2d>
 8002e8e:	4604      	mov	r4, r0
 8002e90:	460d      	mov	r5, r1
 8002e92:	4b7d      	ldr	r3, [pc, #500]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd fb7e 	bl	8000598 <__aeabi_f2d>
 8002e9c:	a374      	add	r3, pc, #464	; (adr r3, 8003070 <interupt_DriveMotor+0x1050>)
 8002e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea2:	f7fd fbd1 	bl	8000648 <__aeabi_dmul>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4620      	mov	r0, r4
 8002eac:	4629      	mov	r1, r5
 8002eae:	f7fd fa15 	bl	80002dc <__adddf3>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f7fd fe9d 	bl	8000bf8 <__aeabi_d2f>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4a71      	ldr	r2, [pc, #452]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002ec2:	6093      	str	r3, [r2, #8]
		cal_mollifier_table(Mollifier_turning,&turning);//角速度と角加速度はここで決定
 8002ec4:	4b71      	ldr	r3, [pc, #452]	; (800308c <interupt_DriveMotor+0x106c>)
 8002ec6:	edd3 6a00 	vldr	s13, [r3]
 8002eca:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ece:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ed2:	486d      	ldr	r0, [pc, #436]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002ed4:	eeb0 0a66 	vmov.f32	s0, s13
 8002ed8:	eef0 0a47 	vmov.f32	s1, s14
 8002edc:	eeb0 1a67 	vmov.f32	s2, s15
 8002ee0:	f005 fcea 	bl	80088b8 <cal_mollifier_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002ee4:	4b67      	ldr	r3, [pc, #412]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002ee6:	edd3 7a00 	vldr	s15, [r3]
 8002eea:	4b67      	ldr	r3, [pc, #412]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002eec:	ed93 7a00 	vldr	s14, [r3]
 8002ef0:	f107 020c 	add.w	r2, r7, #12
 8002ef4:	f107 0310 	add.w	r3, r7, #16
 8002ef8:	eef0 0a47 	vmov.f32	s1, s14
 8002efc:	eeb0 0a67 	vmov.f32	s0, s15
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f001 fd96 	bl	8004a34 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002f08:	4b61      	ldr	r3, [pc, #388]	; (8003090 <interupt_DriveMotor+0x1070>)
 8002f0a:	ed93 7a00 	vldr	s14, [r3]
 8002f0e:	4b61      	ldr	r3, [pc, #388]	; (8003094 <interupt_DriveMotor+0x1074>)
 8002f10:	edd3 7a00 	vldr	s15, [r3]
 8002f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f18:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002f1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f20:	4b58      	ldr	r3, [pc, #352]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002f22:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f26:	4b5c      	ldr	r3, [pc, #368]	; (8003098 <interupt_DriveMotor+0x1078>)
 8002f28:	edd3 6a00 	vldr	s13, [r3]
 8002f2c:	4b56      	ldr	r3, [pc, #344]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002f2e:	ed93 6a01 	vldr	s12, [r3, #4]
 8002f32:	1d3a      	adds	r2, r7, #4
 8002f34:	f107 0308 	add.w	r3, r7, #8
 8002f38:	eef0 1a46 	vmov.f32	s3, s12
 8002f3c:	eeb0 1a66 	vmov.f32	s2, s13
 8002f40:	4611      	mov	r1, r2
 8002f42:	eef0 0a67 	vmov.f32	s1, s15
 8002f46:	eeb0 0a47 	vmov.f32	s0, s14
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f001 facc 	bl	80044e8 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002f50:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f54:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f64:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f6c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002f70:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f74:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f84:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f8c:	edc7 7a08 	vstr	s15, [r7, #32]
//			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
//			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002f90:	f107 0214 	add.w	r2, r7, #20
 8002f94:	f107 0318 	add.w	r3, r7, #24
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	edd7 0a08 	vldr	s1, [r7, #32]
 8002fa0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002fa4:	f7fe ffaa 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f004 fcde 	bl	8007970 <pl_DriveMotor_duty>

	}if (modeacc == 100) {
 8002fb4:	4b30      	ldr	r3, [pc, #192]	; (8003078 <interupt_DriveMotor+0x1058>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b64      	cmp	r3, #100	; 0x64
 8002fba:	d14b      	bne.n	8003054 <interupt_DriveMotor+0x1034>
		straight.velocity = 0;
 8002fbc:	4b31      	ldr	r3, [pc, #196]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
		turning.velocity=0;
 8002fc4:	4b30      	ldr	r3, [pc, #192]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002fcc:	4b2d      	ldr	r3, [pc, #180]	; (8003084 <interupt_DriveMotor+0x1064>)
 8002fce:	edd3 7a00 	vldr	s15, [r3]
 8002fd2:	4b2d      	ldr	r3, [pc, #180]	; (8003088 <interupt_DriveMotor+0x1068>)
 8002fd4:	ed93 7a00 	vldr	s14, [r3]
 8002fd8:	f107 020c 	add.w	r2, r7, #12
 8002fdc:	f107 0310 	add.w	r3, r7, #16
 8002fe0:	eef0 0a47 	vmov.f32	s1, s14
 8002fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f001 fd22 	bl	8004a34 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002ff0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ff4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ff8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ffc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003000:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003004:	edd7 7a01 	vldr	s15, [r7, #4]
 8003008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8003010:	ed97 7a04 	vldr	s14, [r7, #16]
 8003014:	edd7 7a03 	vldr	s15, [r7, #12]
 8003018:	ee37 7a27 	vadd.f32	s14, s14, s15
 800301c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003020:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003024:	edd7 7a01 	vldr	s15, [r7, #4]
 8003028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800302c:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8003030:	f107 0214 	add.w	r2, r7, #20
 8003034:	f107 0318 	add.w	r3, r7, #24
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	edd7 0a08 	vldr	s1, [r7, #32]
 8003040:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003044:	f7fe ff5a 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f004 fc8e 	bl	8007970 <pl_DriveMotor_duty>
	}
		g_V_L=(float)(V_L);//V_L;
 8003054:	4a11      	ldr	r2, [pc, #68]	; (800309c <interupt_DriveMotor+0x107c>)
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	6013      	str	r3, [r2, #0]
		g_V_R=(float)(V_R);//V_R;
 800305a:	4a11      	ldr	r2, [pc, #68]	; (80030a0 <interupt_DriveMotor+0x1080>)
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	6013      	str	r3, [r2, #0]



}
 8003060:	bf00      	nop
 8003062:	3728      	adds	r7, #40	; 0x28
 8003064:	46bd      	mov	sp, r7
 8003066:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800306a:	bf00      	nop
 800306c:	f3af 8000 	nop.w
 8003070:	d2f1a9fc 	.word	0xd2f1a9fc
 8003074:	3f50624d 	.word	0x3f50624d
 8003078:	20000508 	.word	0x20000508
 800307c:	20000570 	.word	0x20000570
 8003080:	20000572 	.word	0x20000572
 8003084:	200004b8 	.word	0x200004b8
 8003088:	200004c4 	.word	0x200004c4
 800308c:	200004f8 	.word	0x200004f8
 8003090:	20000218 	.word	0x20000218
 8003094:	2000021c 	.word	0x2000021c
 8003098:	20000248 	.word	0x20000248
 800309c:	2000050c 	.word	0x2000050c
 80030a0:	20000510 	.word	0x20000510

080030a4 <straight_table2>:



float straight_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE motor_mode) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80030ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80030b2:	ed87 1a03 	vstr	s2, [r7, #12]
 80030b6:	edc7 1a02 	vstr	s3, [r7, #8]
 80030ba:	ed87 2a01 	vstr	s4, [r7, #4]
 80030be:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 80030c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80030c4:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 80030c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80030cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80030d0:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 80030d4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80030d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 80030dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80030e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030e4:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 80030e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80030ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f4:	d505      	bpl.n	8003102 <straight_table2+0x5e>
 80030f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80030fa:	eef1 7a67 	vneg.f32	s15, s15
 80030fe:	edc7 7a01 	vstr	s15, [r7, #4]
	if(noGoalPillarMode==1){
 8003102:	4bb4      	ldr	r3, [pc, #720]	; (80033d4 <straight_table2+0x330>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <straight_table2+0x6a>
		motor_mode.WallCutMode=0;
 800310a:	2300      	movs	r3, #0
 800310c:	70fb      	strb	r3, [r7, #3]
	}


	Trapezoid_straight.displacement = input_displacement;
 800310e:	4ab2      	ldr	r2, [pc, #712]	; (80033d8 <straight_table2+0x334>)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 8003114:	4ab0      	ldr	r2, [pc, #704]	; (80033d8 <straight_table2+0x334>)
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 800311a:	4aaf      	ldr	r2, [pc, #700]	; (80033d8 <straight_table2+0x334>)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8003120:	4aad      	ldr	r2, [pc, #692]	; (80033d8 <straight_table2+0x334>)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 8003126:	4aac      	ldr	r2, [pc, #688]	; (80033d8 <straight_table2+0x334>)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 800312c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003130:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003138:	db03      	blt.n	8003142 <straight_table2+0x9e>
 800313a:	4aa8      	ldr	r2, [pc, #672]	; (80033dc <straight_table2+0x338>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6053      	str	r3, [r2, #4]
 8003140:	e006      	b.n	8003150 <straight_table2+0xac>
	}else{straight.acceleration = -input_acceleration;}
 8003142:	edd7 7a01 	vldr	s15, [r7, #4]
 8003146:	eef1 7a67 	vneg.f32	s15, s15
 800314a:	4ba4      	ldr	r3, [pc, #656]	; (80033dc <straight_table2+0x338>)
 800314c:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8003150:	4aa2      	ldr	r2, [pc, #648]	; (80033dc <straight_table2+0x338>)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 8003156:	4ba1      	ldr	r3, [pc, #644]	; (80033dc <straight_table2+0x338>)
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 800315e:	4ba0      	ldr	r3, [pc, #640]	; (80033e0 <straight_table2+0x33c>)
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 8003166:	4b9e      	ldr	r3, [pc, #632]	; (80033e0 <straight_table2+0x33c>)
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 800316e:	4b9c      	ldr	r3, [pc, #624]	; (80033e0 <straight_table2+0x33c>)
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003176:	4b9b      	ldr	r3, [pc, #620]	; (80033e4 <straight_table2+0x340>)
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 800317c:	4b9a      	ldr	r3, [pc, #616]	; (80033e8 <straight_table2+0x344>)
 800317e:	2201      	movs	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003182:	edd7 7a05 	vldr	s15, [r7, #20]
 8003186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800318a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318e:	dd0e      	ble.n	80031ae <straight_table2+0x10a>
 8003190:	ed97 7a07 	vldr	s14, [r7, #28]
 8003194:	edd7 7a05 	vldr	s15, [r7, #20]
 8003198:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800319c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a0:	dd05      	ble.n	80031ae <straight_table2+0x10a>
 80031a2:	4b91      	ldr	r3, [pc, #580]	; (80033e8 <straight_table2+0x344>)
 80031a4:	2205      	movs	r2, #5
 80031a6:	701a      	strb	r2, [r3, #0]
 80031a8:	4a8c      	ldr	r2, [pc, #560]	; (80033dc <straight_table2+0x338>)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80031ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80031b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ba:	dd14      	ble.n	80031e6 <straight_table2+0x142>
 80031bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80031c0:	eef1 7a67 	vneg.f32	s15, s15
 80031c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80031c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d0:	d509      	bpl.n	80031e6 <straight_table2+0x142>
 80031d2:	4b85      	ldr	r3, [pc, #532]	; (80033e8 <straight_table2+0x344>)
 80031d4:	2206      	movs	r2, #6
 80031d6:	701a      	strb	r2, [r3, #0]
 80031d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80031dc:	eef1 7a67 	vneg.f32	s15, s15
 80031e0:	4b7e      	ldr	r3, [pc, #504]	; (80033dc <straight_table2+0x338>)
 80031e2:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80031e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80031ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f2:	d514      	bpl.n	800321e <straight_table2+0x17a>
 80031f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80031f8:	eef1 7a67 	vneg.f32	s15, s15
 80031fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003200:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003208:	dd09      	ble.n	800321e <straight_table2+0x17a>
 800320a:	4b77      	ldr	r3, [pc, #476]	; (80033e8 <straight_table2+0x344>)
 800320c:	2205      	movs	r2, #5
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	edd7 7a01 	vldr	s15, [r7, #4]
 8003214:	eef1 7a67 	vneg.f32	s15, s15
 8003218:	4b70      	ldr	r3, [pc, #448]	; (80033dc <straight_table2+0x338>)
 800321a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 800321e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003222:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322a:	d50e      	bpl.n	800324a <straight_table2+0x1a6>
 800322c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003230:	edd7 7a05 	vldr	s15, [r7, #20]
 8003234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323c:	d505      	bpl.n	800324a <straight_table2+0x1a6>
 800323e:	4b6a      	ldr	r3, [pc, #424]	; (80033e8 <straight_table2+0x344>)
 8003240:	2206      	movs	r2, #6
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	4a65      	ldr	r2, [pc, #404]	; (80033dc <straight_table2+0x338>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 800324a:	4b68      	ldr	r3, [pc, #416]	; (80033ec <straight_table2+0x348>)
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 8003250:	783a      	ldrb	r2, [r7, #0]
 8003252:	4b67      	ldr	r3, [pc, #412]	; (80033f0 <straight_table2+0x34c>)
 8003254:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 8003256:	f004 fb6f 	bl	8007938 <pl_DriveMotor_start>
	if(motor_mode.WallCutMode==1){
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	2b01      	cmp	r3, #1
 800325e:	f040 80d3 	bne.w	8003408 <straight_table2+0x364>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003262:	4b64      	ldr	r3, [pc, #400]	; (80033f4 <straight_table2+0x350>)
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 800326a:	4b5f      	ldr	r3, [pc, #380]	; (80033e8 <straight_table2+0x344>)
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003270:	4b5a      	ldr	r3, [pc, #360]	; (80033dc <straight_table2+0x338>)
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003278:	bf00      	nop
 800327a:	4b5f      	ldr	r3, [pc, #380]	; (80033f8 <straight_table2+0x354>)
 800327c:	edd3 7a00 	vldr	s15, [r3]
 8003280:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328c:	d409      	bmi.n	80032a2 <straight_table2+0x1fe>
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 800328e:	4b5a      	ldr	r3, [pc, #360]	; (80033f8 <straight_table2+0x354>)
 8003290:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003294:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80033fc <straight_table2+0x358>
 8003298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800329c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a0:	dd18      	ble.n	80032d4 <straight_table2+0x230>
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 80032a2:	4b57      	ldr	r3, [pc, #348]	; (8003400 <straight_table2+0x35c>)
 80032a4:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 80032a8:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80032ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b4:	d409      	bmi.n	80032ca <straight_table2+0x226>
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 80032b6:	4b52      	ldr	r3, [pc, #328]	; (8003400 <straight_table2+0x35c>)
 80032b8:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 80032bc:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80033fc <straight_table2+0x358>
 80032c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c8:	dd04      	ble.n	80032d4 <straight_table2+0x230>
			  front_wall_break_90==0){}
 80032ca:	4b4e      	ldr	r3, [pc, #312]	; (8003404 <straight_table2+0x360>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0d2      	beq.n	800327a <straight_table2+0x1d6>
		straight.displacement=0;
 80032d4:	4b41      	ldr	r3, [pc, #260]	; (80033dc <straight_table2+0x338>)
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80032dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80032e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e8:	db03      	blt.n	80032f2 <straight_table2+0x24e>
 80032ea:	4a3c      	ldr	r2, [pc, #240]	; (80033dc <straight_table2+0x338>)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6053      	str	r3, [r2, #4]
 80032f0:	e006      	b.n	8003300 <straight_table2+0x25c>
			}else{straight.acceleration = -input_acceleration;}
 80032f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80032f6:	eef1 7a67 	vneg.f32	s15, s15
 80032fa:	4b38      	ldr	r3, [pc, #224]	; (80033dc <straight_table2+0x338>)
 80032fc:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003300:	4b39      	ldr	r3, [pc, #228]	; (80033e8 <straight_table2+0x344>)
 8003302:	2201      	movs	r2, #1
 8003304:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003306:	edd7 7a05 	vldr	s15, [r7, #20]
 800330a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800330e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003312:	dd0e      	ble.n	8003332 <straight_table2+0x28e>
 8003314:	ed97 7a07 	vldr	s14, [r7, #28]
 8003318:	edd7 7a05 	vldr	s15, [r7, #20]
 800331c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003324:	dd05      	ble.n	8003332 <straight_table2+0x28e>
 8003326:	4b30      	ldr	r3, [pc, #192]	; (80033e8 <straight_table2+0x344>)
 8003328:	2205      	movs	r2, #5
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	4a2b      	ldr	r2, [pc, #172]	; (80033dc <straight_table2+0x338>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003332:	edd7 7a05 	vldr	s15, [r7, #20]
 8003336:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800333a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333e:	dd14      	ble.n	800336a <straight_table2+0x2c6>
 8003340:	edd7 7a05 	vldr	s15, [r7, #20]
 8003344:	eef1 7a67 	vneg.f32	s15, s15
 8003348:	ed97 7a07 	vldr	s14, [r7, #28]
 800334c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003354:	d509      	bpl.n	800336a <straight_table2+0x2c6>
 8003356:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <straight_table2+0x344>)
 8003358:	2206      	movs	r2, #6
 800335a:	701a      	strb	r2, [r3, #0]
 800335c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003360:	eef1 7a67 	vneg.f32	s15, s15
 8003364:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <straight_table2+0x338>)
 8003366:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800336a:	edd7 7a05 	vldr	s15, [r7, #20]
 800336e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003376:	d514      	bpl.n	80033a2 <straight_table2+0x2fe>
 8003378:	edd7 7a05 	vldr	s15, [r7, #20]
 800337c:	eef1 7a67 	vneg.f32	s15, s15
 8003380:	ed97 7a07 	vldr	s14, [r7, #28]
 8003384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338c:	dd09      	ble.n	80033a2 <straight_table2+0x2fe>
 800338e:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <straight_table2+0x344>)
 8003390:	2205      	movs	r2, #5
 8003392:	701a      	strb	r2, [r3, #0]
 8003394:	edd7 7a01 	vldr	s15, [r7, #4]
 8003398:	eef1 7a67 	vneg.f32	s15, s15
 800339c:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <straight_table2+0x338>)
 800339e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80033a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80033a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ae:	f140 825b 	bpl.w	8003868 <straight_table2+0x7c4>
 80033b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80033b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80033ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c2:	f140 8251 	bpl.w	8003868 <straight_table2+0x7c4>
 80033c6:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <straight_table2+0x344>)
 80033c8:	2206      	movs	r2, #6
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	4a03      	ldr	r2, [pc, #12]	; (80033dc <straight_table2+0x338>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6053      	str	r3, [r2, #4]
 80033d2:	e249      	b.n	8003868 <straight_table2+0x7c4>
 80033d4:	20000509 	.word	0x20000509
 80033d8:	200004d0 	.word	0x200004d0
 80033dc:	200004b8 	.word	0x200004b8
 80033e0:	200004c4 	.word	0x200004c4
 80033e4:	200007e5 	.word	0x200007e5
 80033e8:	200007e4 	.word	0x200007e4
 80033ec:	20000508 	.word	0x20000508
 80033f0:	20000570 	.word	0x20000570
 80033f4:	20000514 	.word	0x20000514
 80033f8:	200005ac 	.word	0x200005ac
 80033fc:	425c0000 	.word	0x425c0000
 8003400:	200005b0 	.word	0x200005b0
 8003404:	200005d2 	.word	0x200005d2
	}else if(motor_mode.WallCutMode==2){
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	2b02      	cmp	r3, #2
 800340c:	f040 80c9 	bne.w	80035a2 <straight_table2+0x4fe>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003410:	4bb8      	ldr	r3, [pc, #736]	; (80036f4 <straight_table2+0x650>)
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003418:	4bb7      	ldr	r3, [pc, #732]	; (80036f8 <straight_table2+0x654>)
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 800341e:	4bb7      	ldr	r3, [pc, #732]	; (80036fc <straight_table2+0x658>)
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 8003426:	bf00      	nop
 8003428:	4bb5      	ldr	r3, [pc, #724]	; (8003700 <straight_table2+0x65c>)
 800342a:	edd3 7a00 	vldr	s15, [r3]
 800342e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003436:	d913      	bls.n	8003460 <straight_table2+0x3bc>
 8003438:	4bb1      	ldr	r3, [pc, #708]	; (8003700 <straight_table2+0x65c>)
 800343a:	edd3 7a00 	vldr	s15, [r3]
 800343e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344a:	d909      	bls.n	8003460 <straight_table2+0x3bc>
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 800344c:	4bac      	ldr	r3, [pc, #688]	; (8003700 <straight_table2+0x65c>)
 800344e:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 8003452:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8003704 <straight_table2+0x660>
 8003456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800345a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345e:	db20      	blt.n	80034a2 <straight_table2+0x3fe>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003460:	4ba9      	ldr	r3, [pc, #676]	; (8003708 <straight_table2+0x664>)
 8003462:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 8003466:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800346a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346e:	d913      	bls.n	8003498 <straight_table2+0x3f4>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003470:	4ba5      	ldr	r3, [pc, #660]	; (8003708 <straight_table2+0x664>)
 8003472:	edd3 7a00 	vldr	s15, [r3]
 8003476:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800347a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800347e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003482:	d909      	bls.n	8003498 <straight_table2+0x3f4>
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 8003484:	4ba0      	ldr	r3, [pc, #640]	; (8003708 <straight_table2+0x664>)
 8003486:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 800348a:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003704 <straight_table2+0x660>
 800348e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003496:	db04      	blt.n	80034a2 <straight_table2+0x3fe>
			  front_wall_break_45==0){}
 8003498:	4b9c      	ldr	r3, [pc, #624]	; (800370c <straight_table2+0x668>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0c2      	beq.n	8003428 <straight_table2+0x384>
//		while((NoWallDisplacementR90<=0 ||
//				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R45) &&
//				(NoWallDisplacementL90<=0 ||
//			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L45) &&
//			  front_wall_break_90==0){}
		straight.displacement=0;
 80034a2:	4b96      	ldr	r3, [pc, #600]	; (80036fc <straight_table2+0x658>)
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80034aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80034ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b6:	db03      	blt.n	80034c0 <straight_table2+0x41c>
 80034b8:	4a90      	ldr	r2, [pc, #576]	; (80036fc <straight_table2+0x658>)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6053      	str	r3, [r2, #4]
 80034be:	e006      	b.n	80034ce <straight_table2+0x42a>
			}else{straight.acceleration = -input_acceleration;}
 80034c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80034c4:	eef1 7a67 	vneg.f32	s15, s15
 80034c8:	4b8c      	ldr	r3, [pc, #560]	; (80036fc <straight_table2+0x658>)
 80034ca:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80034ce:	4b8a      	ldr	r3, [pc, #552]	; (80036f8 <straight_table2+0x654>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80034d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80034d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e0:	dd0e      	ble.n	8003500 <straight_table2+0x45c>
 80034e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80034e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80034ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f2:	dd05      	ble.n	8003500 <straight_table2+0x45c>
 80034f4:	4b80      	ldr	r3, [pc, #512]	; (80036f8 <straight_table2+0x654>)
 80034f6:	2205      	movs	r2, #5
 80034f8:	701a      	strb	r2, [r3, #0]
 80034fa:	4a80      	ldr	r2, [pc, #512]	; (80036fc <straight_table2+0x658>)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003500:	edd7 7a05 	vldr	s15, [r7, #20]
 8003504:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350c:	dd14      	ble.n	8003538 <straight_table2+0x494>
 800350e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003512:	eef1 7a67 	vneg.f32	s15, s15
 8003516:	ed97 7a07 	vldr	s14, [r7, #28]
 800351a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800351e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003522:	d509      	bpl.n	8003538 <straight_table2+0x494>
 8003524:	4b74      	ldr	r3, [pc, #464]	; (80036f8 <straight_table2+0x654>)
 8003526:	2206      	movs	r2, #6
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	edd7 7a01 	vldr	s15, [r7, #4]
 800352e:	eef1 7a67 	vneg.f32	s15, s15
 8003532:	4b72      	ldr	r3, [pc, #456]	; (80036fc <straight_table2+0x658>)
 8003534:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003538:	edd7 7a05 	vldr	s15, [r7, #20]
 800353c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003544:	d514      	bpl.n	8003570 <straight_table2+0x4cc>
 8003546:	edd7 7a05 	vldr	s15, [r7, #20]
 800354a:	eef1 7a67 	vneg.f32	s15, s15
 800354e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355a:	dd09      	ble.n	8003570 <straight_table2+0x4cc>
 800355c:	4b66      	ldr	r3, [pc, #408]	; (80036f8 <straight_table2+0x654>)
 800355e:	2205      	movs	r2, #5
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	edd7 7a01 	vldr	s15, [r7, #4]
 8003566:	eef1 7a67 	vneg.f32	s15, s15
 800356a:	4b64      	ldr	r3, [pc, #400]	; (80036fc <straight_table2+0x658>)
 800356c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003570:	edd7 7a05 	vldr	s15, [r7, #20]
 8003574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357c:	f140 8174 	bpl.w	8003868 <straight_table2+0x7c4>
 8003580:	ed97 7a07 	vldr	s14, [r7, #28]
 8003584:	edd7 7a05 	vldr	s15, [r7, #20]
 8003588:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800358c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003590:	f140 816a 	bpl.w	8003868 <straight_table2+0x7c4>
 8003594:	4b58      	ldr	r3, [pc, #352]	; (80036f8 <straight_table2+0x654>)
 8003596:	2206      	movs	r2, #6
 8003598:	701a      	strb	r2, [r3, #0]
 800359a:	4a58      	ldr	r2, [pc, #352]	; (80036fc <straight_table2+0x658>)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6053      	str	r3, [r2, #4]
 80035a0:	e162      	b.n	8003868 <straight_table2+0x7c4>
	}else if(motor_mode.WallCutMode==3){
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	f040 80b9 	bne.w	800371c <straight_table2+0x678>
		//斜めの右旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 80035aa:	4b52      	ldr	r3, [pc, #328]	; (80036f4 <straight_table2+0x650>)
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80035b2:	4b51      	ldr	r3, [pc, #324]	; (80036f8 <straight_table2+0x654>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80035b8:	4b50      	ldr	r3, [pc, #320]	; (80036fc <straight_table2+0x658>)
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 80035c0:	bf00      	nop
 80035c2:	4b53      	ldr	r3, [pc, #332]	; (8003710 <straight_table2+0x66c>)
 80035c4:	edd3 7a00 	vldr	s15, [r3]
 80035c8:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80035cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d4:	d409      	bmi.n	80035ea <straight_table2+0x546>
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 80035d6:	4b4e      	ldr	r3, [pc, #312]	; (8003710 <straight_table2+0x66c>)
 80035d8:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 80035dc:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003714 <straight_table2+0x670>
 80035e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e8:	dd04      	ble.n	80035f4 <straight_table2+0x550>
				  front_wall_break_45slant==0){}
 80035ea:	4b4b      	ldr	r3, [pc, #300]	; (8003718 <straight_table2+0x674>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	b2db      	uxtb	r3, r3
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0e6      	beq.n	80035c2 <straight_table2+0x51e>
		straight.displacement=0;
 80035f4:	4b41      	ldr	r3, [pc, #260]	; (80036fc <straight_table2+0x658>)
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80035fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003600:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003608:	db03      	blt.n	8003612 <straight_table2+0x56e>
 800360a:	4a3c      	ldr	r2, [pc, #240]	; (80036fc <straight_table2+0x658>)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6053      	str	r3, [r2, #4]
 8003610:	e006      	b.n	8003620 <straight_table2+0x57c>
			}else{straight.acceleration = -input_acceleration;}
 8003612:	edd7 7a01 	vldr	s15, [r7, #4]
 8003616:	eef1 7a67 	vneg.f32	s15, s15
 800361a:	4b38      	ldr	r3, [pc, #224]	; (80036fc <straight_table2+0x658>)
 800361c:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003620:	4b35      	ldr	r3, [pc, #212]	; (80036f8 <straight_table2+0x654>)
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003626:	edd7 7a05 	vldr	s15, [r7, #20]
 800362a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800362e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003632:	dd0e      	ble.n	8003652 <straight_table2+0x5ae>
 8003634:	ed97 7a07 	vldr	s14, [r7, #28]
 8003638:	edd7 7a05 	vldr	s15, [r7, #20]
 800363c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003644:	dd05      	ble.n	8003652 <straight_table2+0x5ae>
 8003646:	4b2c      	ldr	r3, [pc, #176]	; (80036f8 <straight_table2+0x654>)
 8003648:	2205      	movs	r2, #5
 800364a:	701a      	strb	r2, [r3, #0]
 800364c:	4a2b      	ldr	r2, [pc, #172]	; (80036fc <straight_table2+0x658>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003652:	edd7 7a05 	vldr	s15, [r7, #20]
 8003656:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800365a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365e:	dd14      	ble.n	800368a <straight_table2+0x5e6>
 8003660:	edd7 7a05 	vldr	s15, [r7, #20]
 8003664:	eef1 7a67 	vneg.f32	s15, s15
 8003668:	ed97 7a07 	vldr	s14, [r7, #28]
 800366c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003674:	d509      	bpl.n	800368a <straight_table2+0x5e6>
 8003676:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <straight_table2+0x654>)
 8003678:	2206      	movs	r2, #6
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003680:	eef1 7a67 	vneg.f32	s15, s15
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <straight_table2+0x658>)
 8003686:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800368a:	edd7 7a05 	vldr	s15, [r7, #20]
 800368e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003696:	d514      	bpl.n	80036c2 <straight_table2+0x61e>
 8003698:	edd7 7a05 	vldr	s15, [r7, #20]
 800369c:	eef1 7a67 	vneg.f32	s15, s15
 80036a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80036a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ac:	dd09      	ble.n	80036c2 <straight_table2+0x61e>
 80036ae:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <straight_table2+0x654>)
 80036b0:	2205      	movs	r2, #5
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80036b8:	eef1 7a67 	vneg.f32	s15, s15
 80036bc:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <straight_table2+0x658>)
 80036be:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80036c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80036c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ce:	f140 80cb 	bpl.w	8003868 <straight_table2+0x7c4>
 80036d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80036d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80036da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e2:	f140 80c1 	bpl.w	8003868 <straight_table2+0x7c4>
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <straight_table2+0x654>)
 80036e8:	2206      	movs	r2, #6
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	4a03      	ldr	r2, [pc, #12]	; (80036fc <straight_table2+0x658>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6053      	str	r3, [r2, #4]
 80036f2:	e0b9      	b.n	8003868 <straight_table2+0x7c4>
 80036f4:	20000514 	.word	0x20000514
 80036f8:	200007e4 	.word	0x200007e4
 80036fc:	200004b8 	.word	0x200004b8
 8003700:	200005b4 	.word	0x200005b4
 8003704:	42000000 	.word	0x42000000
 8003708:	200005b8 	.word	0x200005b8
 800370c:	200005d3 	.word	0x200005d3
 8003710:	200005c4 	.word	0x200005c4
 8003714:	420c0000 	.word	0x420c0000
 8003718:	200005d4 	.word	0x200005d4
	}else if(motor_mode.WallCutMode==4){
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	2b04      	cmp	r3, #4
 8003720:	f040 80a2 	bne.w	8003868 <straight_table2+0x7c4>
		//斜めの左旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003724:	4ba6      	ldr	r3, [pc, #664]	; (80039c0 <straight_table2+0x91c>)
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 800372c:	4ba5      	ldr	r3, [pc, #660]	; (80039c4 <straight_table2+0x920>)
 800372e:	2200      	movs	r2, #0
 8003730:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003732:	4ba5      	ldr	r3, [pc, #660]	; (80039c8 <straight_table2+0x924>)
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 800373a:	bf00      	nop
 800373c:	4ba3      	ldr	r3, [pc, #652]	; (80039cc <straight_table2+0x928>)
 800373e:	edd3 7a00 	vldr	s15, [r3]
 8003742:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8003746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800374a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374e:	d409      	bmi.n	8003764 <straight_table2+0x6c0>
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8003750:	4b9e      	ldr	r3, [pc, #632]	; (80039cc <straight_table2+0x928>)
 8003752:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8003756:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80039d0 <straight_table2+0x92c>
 800375a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800375e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003762:	dd04      	ble.n	800376e <straight_table2+0x6ca>
				  front_wall_break_45slant==0){}
 8003764:	4b9b      	ldr	r3, [pc, #620]	; (80039d4 <straight_table2+0x930>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0e6      	beq.n	800373c <straight_table2+0x698>
		straight.displacement=0;
 800376e:	4b96      	ldr	r3, [pc, #600]	; (80039c8 <straight_table2+0x924>)
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003776:	edd7 7a02 	vldr	s15, [r7, #8]
 800377a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800377e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003782:	db03      	blt.n	800378c <straight_table2+0x6e8>
 8003784:	4a90      	ldr	r2, [pc, #576]	; (80039c8 <straight_table2+0x924>)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6053      	str	r3, [r2, #4]
 800378a:	e006      	b.n	800379a <straight_table2+0x6f6>
			}else{straight.acceleration = -input_acceleration;}
 800378c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003790:	eef1 7a67 	vneg.f32	s15, s15
 8003794:	4b8c      	ldr	r3, [pc, #560]	; (80039c8 <straight_table2+0x924>)
 8003796:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 800379a:	4b8a      	ldr	r3, [pc, #552]	; (80039c4 <straight_table2+0x920>)
 800379c:	2201      	movs	r2, #1
 800379e:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80037a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80037a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ac:	dd0e      	ble.n	80037cc <straight_table2+0x728>
 80037ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80037b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80037b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037be:	dd05      	ble.n	80037cc <straight_table2+0x728>
 80037c0:	4b80      	ldr	r3, [pc, #512]	; (80039c4 <straight_table2+0x920>)
 80037c2:	2205      	movs	r2, #5
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	4a80      	ldr	r2, [pc, #512]	; (80039c8 <straight_table2+0x924>)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80037cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80037d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d8:	dd14      	ble.n	8003804 <straight_table2+0x760>
 80037da:	edd7 7a05 	vldr	s15, [r7, #20]
 80037de:	eef1 7a67 	vneg.f32	s15, s15
 80037e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80037e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ee:	d509      	bpl.n	8003804 <straight_table2+0x760>
 80037f0:	4b74      	ldr	r3, [pc, #464]	; (80039c4 <straight_table2+0x920>)
 80037f2:	2206      	movs	r2, #6
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80037fa:	eef1 7a67 	vneg.f32	s15, s15
 80037fe:	4b72      	ldr	r3, [pc, #456]	; (80039c8 <straight_table2+0x924>)
 8003800:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003804:	edd7 7a05 	vldr	s15, [r7, #20]
 8003808:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800380c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003810:	d514      	bpl.n	800383c <straight_table2+0x798>
 8003812:	edd7 7a05 	vldr	s15, [r7, #20]
 8003816:	eef1 7a67 	vneg.f32	s15, s15
 800381a:	ed97 7a07 	vldr	s14, [r7, #28]
 800381e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003826:	dd09      	ble.n	800383c <straight_table2+0x798>
 8003828:	4b66      	ldr	r3, [pc, #408]	; (80039c4 <straight_table2+0x920>)
 800382a:	2205      	movs	r2, #5
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003832:	eef1 7a67 	vneg.f32	s15, s15
 8003836:	4b64      	ldr	r3, [pc, #400]	; (80039c8 <straight_table2+0x924>)
 8003838:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 800383c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003840:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003848:	d50e      	bpl.n	8003868 <straight_table2+0x7c4>
 800384a:	ed97 7a07 	vldr	s14, [r7, #28]
 800384e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003852:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385a:	d505      	bpl.n	8003868 <straight_table2+0x7c4>
 800385c:	4b59      	ldr	r3, [pc, #356]	; (80039c4 <straight_table2+0x920>)
 800385e:	2206      	movs	r2, #6
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	4a59      	ldr	r2, [pc, #356]	; (80039c8 <straight_table2+0x924>)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6053      	str	r3, [r2, #4]
	}

	if(motor_mode.calMazeMode==0){
 8003868:	78bb      	ldrb	r3, [r7, #2]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f040 809e 	bne.w	80039ac <straight_table2+0x908>
	while (g_acc_flag!=4){
 8003870:	e074      	b.n	800395c <straight_table2+0x8b8>
		if(motor_mode.WallCutMode==1){
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d120      	bne.n	80038ba <straight_table2+0x816>
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003878:	edd7 7a05 	vldr	s15, [r7, #20]
 800387c:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003880:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003884:	4b54      	ldr	r3, [pc, #336]	; (80039d8 <straight_table2+0x934>)
 8003886:	edd3 7a00 	vldr	s15, [r3]
 800388a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800388e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003892:	d90e      	bls.n	80038b2 <straight_table2+0x80e>
			   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90)){
 8003894:	edd7 7a05 	vldr	s15, [r7, #20]
 8003898:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800389c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038a0:	4b4e      	ldr	r3, [pc, #312]	; (80039dc <straight_table2+0x938>)
 80038a2:	edd3 7a00 	vldr	s15, [r3]
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80038a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ae:	d900      	bls.n	80038b2 <straight_table2+0x80e>
 80038b0:	e054      	b.n	800395c <straight_table2+0x8b8>
				g_acc_flag=4;
 80038b2:	4b44      	ldr	r3, [pc, #272]	; (80039c4 <straight_table2+0x920>)
 80038b4:	2204      	movs	r2, #4
 80038b6:	701a      	strb	r2, [r3, #0]
				break;
 80038b8:	e055      	b.n	8003966 <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==2){
 80038ba:	78fb      	ldrb	r3, [r7, #3]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d121      	bne.n	8003904 <straight_table2+0x860>
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 80038c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80038c4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80038c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038cc:	4b44      	ldr	r3, [pc, #272]	; (80039e0 <straight_table2+0x93c>)
 80038ce:	edd3 7a00 	vldr	s15, [r3]
 80038d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038da:	d900      	bls.n	80038de <straight_table2+0x83a>
 80038dc:	e03e      	b.n	800395c <straight_table2+0x8b8>
			   NoWallDisplacementR45>=input_displacement+CUTPLACE_TO_CENTER_R45 ){
 80038de:	edd7 7a05 	vldr	s15, [r7, #20]
 80038e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80038e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038ea:	4b3e      	ldr	r3, [pc, #248]	; (80039e4 <straight_table2+0x940>)
 80038ec:	edd3 7a00 	vldr	s15, [r3]
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 80038f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f8:	d900      	bls.n	80038fc <straight_table2+0x858>
 80038fa:	e02f      	b.n	800395c <straight_table2+0x8b8>
				g_acc_flag=4;
 80038fc:	4b31      	ldr	r3, [pc, #196]	; (80039c4 <straight_table2+0x920>)
 80038fe:	2204      	movs	r2, #4
 8003900:	701a      	strb	r2, [r3, #0]
				break;
 8003902:	e030      	b.n	8003966 <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==3){
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	2b03      	cmp	r3, #3
 8003908:	d112      	bne.n	8003930 <straight_table2+0x88c>
			if(NoWallDisplacementR45slant2>=input_displacement+CUTPLACE_TO_CENTER_R45_SLANT ){
 800390a:	edd7 7a05 	vldr	s15, [r7, #20]
 800390e:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003912:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003916:	4b34      	ldr	r3, [pc, #208]	; (80039e8 <straight_table2+0x944>)
 8003918:	edd3 7a00 	vldr	s15, [r3]
 800391c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003924:	d900      	bls.n	8003928 <straight_table2+0x884>
 8003926:	e019      	b.n	800395c <straight_table2+0x8b8>
				g_acc_flag=4;
 8003928:	4b26      	ldr	r3, [pc, #152]	; (80039c4 <straight_table2+0x920>)
 800392a:	2204      	movs	r2, #4
 800392c:	701a      	strb	r2, [r3, #0]
				break;
 800392e:	e01a      	b.n	8003966 <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==4){
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	2b04      	cmp	r3, #4
 8003934:	d112      	bne.n	800395c <straight_table2+0x8b8>
			if(NoWallDisplacementL45slant2>=input_displacement+CUTPLACE_TO_CENTER_L45_SLANT){
 8003936:	edd7 7a05 	vldr	s15, [r7, #20]
 800393a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800393e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003942:	4b22      	ldr	r3, [pc, #136]	; (80039cc <straight_table2+0x928>)
 8003944:	edd3 7a00 	vldr	s15, [r3]
 8003948:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800394c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003950:	d900      	bls.n	8003954 <straight_table2+0x8b0>
 8003952:	e003      	b.n	800395c <straight_table2+0x8b8>
				g_acc_flag=4;
 8003954:	4b1b      	ldr	r3, [pc, #108]	; (80039c4 <straight_table2+0x920>)
 8003956:	2204      	movs	r2, #4
 8003958:	701a      	strb	r2, [r3, #0]
				break;
 800395a:	e004      	b.n	8003966 <straight_table2+0x8c2>
	while (g_acc_flag!=4){
 800395c:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <straight_table2+0x920>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b04      	cmp	r3, #4
 8003964:	d185      	bne.n	8003872 <straight_table2+0x7ce>
			}
		}

	}
	if(input_end_velocity==0){//BREAK
 8003966:	edd7 7a03 	vldr	s15, [r7, #12]
 800396a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800396e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003972:	d105      	bne.n	8003980 <straight_table2+0x8dc>
		wait_ms_NoReset(100);
 8003974:	2064      	movs	r0, #100	; 0x64
 8003976:	f004 fa8b 	bl	8007e90 <wait_ms_NoReset>
		modeacc = 0;
 800397a:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <straight_table2+0x948>)
 800397c:	2200      	movs	r2, #0
 800397e:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8003980:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <straight_table2+0x94c>)
 8003982:	ed93 7a00 	vldr	s14, [r3]
 8003986:	edd7 7a05 	vldr	s15, [r7, #20]
 800398a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800398e:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <straight_table2+0x94c>)
 8003990:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8003994:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <straight_table2+0x950>)
 8003996:	ed93 7a00 	vldr	s14, [r3]
 800399a:	edd7 7a05 	vldr	s15, [r7, #20]
 800399e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a2:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <straight_table2+0x950>)
 80039a4:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 80039a8:	f003 ffd4 	bl	8007954 <pl_DriveMotor_stop>

	}

	return straight.velocity;
 80039ac:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <straight_table2+0x924>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	ee07 3a90 	vmov	s15, r3



}
 80039b4:	eeb0 0a67 	vmov.f32	s0, s15
 80039b8:	3720      	adds	r7, #32
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000514 	.word	0x20000514
 80039c4:	200007e4 	.word	0x200007e4
 80039c8:	200004b8 	.word	0x200004b8
 80039cc:	200005c8 	.word	0x200005c8
 80039d0:	420c0000 	.word	0x420c0000
 80039d4:	200005d4 	.word	0x200005d4
 80039d8:	200005b0 	.word	0x200005b0
 80039dc:	200005ac 	.word	0x200005ac
 80039e0:	200005b8 	.word	0x200005b8
 80039e4:	200005b4 	.word	0x200005b4
 80039e8:	200005c4 	.word	0x200005c4
 80039ec:	20000508 	.word	0x20000508
 80039f0:	20000200 	.word	0x20000200
 80039f4:	20000204 	.word	0x20000204

080039f8 <turning_table2>:
	E_distanceR = E_distanceR - input_displacement;
	pl_DriveMotor_stop();//これは必要か？
}

float turning_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	ed87 0a05 	vstr	s0, [r7, #20]
 8003a02:	edc7 0a04 	vstr	s1, [r7, #16]
 8003a06:	ed87 1a03 	vstr	s2, [r7, #12]
 8003a0a:	edc7 1a02 	vstr	s3, [r7, #8]
 8003a0e:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003a12:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a16:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003a1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a22:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003a26:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003a2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003a2e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a36:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003a3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a46:	d505      	bpl.n	8003a54 <turning_table2+0x5c>
 8003a48:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a4c:	eef1 7a67 	vneg.f32	s15, s15
 8003a50:	edc7 7a01 	vstr	s15, [r7, #4]

	Trapezoid_turning.displacement = input_displacement;
 8003a54:	4a65      	ldr	r2, [pc, #404]	; (8003bec <turning_table2+0x1f4>)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003a5a:	4a64      	ldr	r2, [pc, #400]	; (8003bec <turning_table2+0x1f4>)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003a60:	4a62      	ldr	r2, [pc, #392]	; (8003bec <turning_table2+0x1f4>)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003a66:	4a61      	ldr	r2, [pc, #388]	; (8003bec <turning_table2+0x1f4>)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003a6c:	4a5f      	ldr	r2, [pc, #380]	; (8003bec <turning_table2+0x1f4>)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003a72:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7e:	db03      	blt.n	8003a88 <turning_table2+0x90>
 8003a80:	4a5b      	ldr	r2, [pc, #364]	; (8003bf0 <turning_table2+0x1f8>)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6053      	str	r3, [r2, #4]
 8003a86:	e006      	b.n	8003a96 <turning_table2+0x9e>
	}else{turning.acceleration = -input_acceleration;}
 8003a88:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a8c:	eef1 7a67 	vneg.f32	s15, s15
 8003a90:	4b57      	ldr	r3, [pc, #348]	; (8003bf0 <turning_table2+0x1f8>)
 8003a92:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003a96:	4a56      	ldr	r2, [pc, #344]	; (8003bf0 <turning_table2+0x1f8>)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003a9c:	4b54      	ldr	r3, [pc, #336]	; (8003bf0 <turning_table2+0x1f8>)
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003aa4:	4b53      	ldr	r3, [pc, #332]	; (8003bf4 <turning_table2+0x1fc>)
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003aac:	4b51      	ldr	r3, [pc, #324]	; (8003bf4 <turning_table2+0x1fc>)
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003ab4:	4b4f      	ldr	r3, [pc, #316]	; (8003bf4 <turning_table2+0x1fc>)
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003abc:	4b4e      	ldr	r3, [pc, #312]	; (8003bf8 <turning_table2+0x200>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003ac2:	4b4e      	ldr	r3, [pc, #312]	; (8003bfc <turning_table2+0x204>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003ac8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003acc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad4:	dd0e      	ble.n	8003af4 <turning_table2+0xfc>
 8003ad6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ada:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ade:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae6:	dd05      	ble.n	8003af4 <turning_table2+0xfc>
 8003ae8:	4b44      	ldr	r3, [pc, #272]	; (8003bfc <turning_table2+0x204>)
 8003aea:	2205      	movs	r2, #5
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	4a40      	ldr	r2, [pc, #256]	; (8003bf0 <turning_table2+0x1f8>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003af4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b00:	dd14      	ble.n	8003b2c <turning_table2+0x134>
 8003b02:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b06:	eef1 7a67 	vneg.f32	s15, s15
 8003b0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b16:	d509      	bpl.n	8003b2c <turning_table2+0x134>
 8003b18:	4b38      	ldr	r3, [pc, #224]	; (8003bfc <turning_table2+0x204>)
 8003b1a:	2206      	movs	r2, #6
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b22:	eef1 7a67 	vneg.f32	s15, s15
 8003b26:	4b32      	ldr	r3, [pc, #200]	; (8003bf0 <turning_table2+0x1f8>)
 8003b28:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003b2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b38:	d514      	bpl.n	8003b64 <turning_table2+0x16c>
 8003b3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b3e:	eef1 7a67 	vneg.f32	s15, s15
 8003b42:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4e:	dd09      	ble.n	8003b64 <turning_table2+0x16c>
 8003b50:	4b2a      	ldr	r3, [pc, #168]	; (8003bfc <turning_table2+0x204>)
 8003b52:	2205      	movs	r2, #5
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b5a:	eef1 7a67 	vneg.f32	s15, s15
 8003b5e:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <turning_table2+0x1f8>)
 8003b60:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003b64:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b70:	d50e      	bpl.n	8003b90 <turning_table2+0x198>
 8003b72:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b76:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b82:	d505      	bpl.n	8003b90 <turning_table2+0x198>
 8003b84:	4b1d      	ldr	r3, [pc, #116]	; (8003bfc <turning_table2+0x204>)
 8003b86:	2206      	movs	r2, #6
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	4a19      	ldr	r2, [pc, #100]	; (8003bf0 <turning_table2+0x1f8>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8003b90:	4b1b      	ldr	r3, [pc, #108]	; (8003c00 <turning_table2+0x208>)
 8003b92:	2202      	movs	r2, #2
 8003b94:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003b96:	f003 fecf 	bl	8007938 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003b9a:	bf00      	nop
 8003b9c:	4b17      	ldr	r3, [pc, #92]	; (8003bfc <turning_table2+0x204>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d1fa      	bne.n	8003b9c <turning_table2+0x1a4>

	}
	if(input_end_velocity==0){//BREAK
 8003ba6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003baa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb2:	d106      	bne.n	8003bc2 <turning_table2+0x1ca>
		wait_ms_NoReset(300);
 8003bb4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003bb8:	f004 f96a 	bl	8007e90 <wait_ms_NoReset>
		modeacc = 0;
 8003bbc:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <turning_table2+0x208>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 8003bc2:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <turning_table2+0x20c>)
 8003bc4:	ed93 7a00 	vldr	s14, [r3]
 8003bc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <turning_table2+0x20c>)
 8003bd2:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003bd6:	f003 febd 	bl	8007954 <pl_DriveMotor_stop>

	return turning.velocity;
 8003bda:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <turning_table2+0x1f8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	ee07 3a90 	vmov	s15, r3
}
 8003be2:	eeb0 0a67 	vmov.f32	s0, s15
 8003be6:	3720      	adds	r7, #32
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	200004e4 	.word	0x200004e4
 8003bf0:	200004c4 	.word	0x200004c4
 8003bf4:	200004b8 	.word	0x200004b8
 8003bf8:	200007e5 	.word	0x200007e5
 8003bfc:	200007e4 	.word	0x200007e4
 8003c00:	20000508 	.word	0x20000508
 8003c04:	20000244 	.word	0x20000244

08003c08 <slalom_table2>:



float slalom_table2(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003c12:	edc7 0a04 	vstr	s1, [r7, #16]
 8003c16:	ed87 1a03 	vstr	s2, [r7, #12]
 8003c1a:	edc7 1a02 	vstr	s3, [r7, #8]
 8003c1e:	ed87 2a01 	vstr	s4, [r7, #4]
 8003c22:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003c26:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c2a:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003c2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c32:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c36:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003c3a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003c3e:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003c42:	ed97 7a00 	vldr	s14, [r7]
 8003c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c4a:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003c4e:	edd7 7a00 	vldr	s15, [r7]
 8003c52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c5a:	d505      	bpl.n	8003c68 <slalom_table2+0x60>
 8003c5c:	edd7 7a00 	vldr	s15, [r7]
 8003c60:	eef1 7a67 	vneg.f32	s15, s15
 8003c64:	edc7 7a00 	vstr	s15, [r7]

	Trapezoid_turning.displacement = input_displacement;
 8003c68:	4a5e      	ldr	r2, [pc, #376]	; (8003de4 <slalom_table2+0x1dc>)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003c6e:	4a5d      	ldr	r2, [pc, #372]	; (8003de4 <slalom_table2+0x1dc>)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003c74:	4a5b      	ldr	r2, [pc, #364]	; (8003de4 <slalom_table2+0x1dc>)
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003c7a:	4a5a      	ldr	r2, [pc, #360]	; (8003de4 <slalom_table2+0x1dc>)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003c80:	4a58      	ldr	r2, [pc, #352]	; (8003de4 <slalom_table2+0x1dc>)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003c86:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c92:	db03      	blt.n	8003c9c <slalom_table2+0x94>
 8003c94:	4a54      	ldr	r2, [pc, #336]	; (8003de8 <slalom_table2+0x1e0>)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6053      	str	r3, [r2, #4]
 8003c9a:	e006      	b.n	8003caa <slalom_table2+0xa2>
	}else{turning.acceleration = -input_acceleration;}
 8003c9c:	edd7 7a00 	vldr	s15, [r7]
 8003ca0:	eef1 7a67 	vneg.f32	s15, s15
 8003ca4:	4b50      	ldr	r3, [pc, #320]	; (8003de8 <slalom_table2+0x1e0>)
 8003ca6:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003caa:	4a4f      	ldr	r2, [pc, #316]	; (8003de8 <slalom_table2+0x1e0>)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003cb0:	4b4d      	ldr	r3, [pc, #308]	; (8003de8 <slalom_table2+0x1e0>)
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003cb8:	4a4c      	ldr	r2, [pc, #304]	; (8003dec <slalom_table2+0x1e4>)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003cbe:	4b4b      	ldr	r3, [pc, #300]	; (8003dec <slalom_table2+0x1e4>)
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003cc6:	4b49      	ldr	r3, [pc, #292]	; (8003dec <slalom_table2+0x1e4>)
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003cce:	4b48      	ldr	r3, [pc, #288]	; (8003df0 <slalom_table2+0x1e8>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003cd4:	4b47      	ldr	r3, [pc, #284]	; (8003df4 <slalom_table2+0x1ec>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003cda:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce6:	dd0e      	ble.n	8003d06 <slalom_table2+0xfe>
 8003ce8:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cec:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf8:	dd05      	ble.n	8003d06 <slalom_table2+0xfe>
 8003cfa:	4b3e      	ldr	r3, [pc, #248]	; (8003df4 <slalom_table2+0x1ec>)
 8003cfc:	2205      	movs	r2, #5
 8003cfe:	701a      	strb	r2, [r3, #0]
 8003d00:	4a39      	ldr	r2, [pc, #228]	; (8003de8 <slalom_table2+0x1e0>)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003d06:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d12:	dd14      	ble.n	8003d3e <slalom_table2+0x136>
 8003d14:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d18:	eef1 7a67 	vneg.f32	s15, s15
 8003d1c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d28:	d509      	bpl.n	8003d3e <slalom_table2+0x136>
 8003d2a:	4b32      	ldr	r3, [pc, #200]	; (8003df4 <slalom_table2+0x1ec>)
 8003d2c:	2206      	movs	r2, #6
 8003d2e:	701a      	strb	r2, [r3, #0]
 8003d30:	edd7 7a00 	vldr	s15, [r7]
 8003d34:	eef1 7a67 	vneg.f32	s15, s15
 8003d38:	4b2b      	ldr	r3, [pc, #172]	; (8003de8 <slalom_table2+0x1e0>)
 8003d3a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003d3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d4a:	d514      	bpl.n	8003d76 <slalom_table2+0x16e>
 8003d4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d50:	eef1 7a67 	vneg.f32	s15, s15
 8003d54:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d60:	dd09      	ble.n	8003d76 <slalom_table2+0x16e>
 8003d62:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <slalom_table2+0x1ec>)
 8003d64:	2205      	movs	r2, #5
 8003d66:	701a      	strb	r2, [r3, #0]
 8003d68:	edd7 7a00 	vldr	s15, [r7]
 8003d6c:	eef1 7a67 	vneg.f32	s15, s15
 8003d70:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <slalom_table2+0x1e0>)
 8003d72:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003d76:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d82:	d50e      	bpl.n	8003da2 <slalom_table2+0x19a>
 8003d84:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d88:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d94:	d505      	bpl.n	8003da2 <slalom_table2+0x19a>
 8003d96:	4b17      	ldr	r3, [pc, #92]	; (8003df4 <slalom_table2+0x1ec>)
 8003d98:	2206      	movs	r2, #6
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <slalom_table2+0x1e0>)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6053      	str	r3, [r2, #4]
	modeacc = 4;
 8003da2:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <slalom_table2+0x1f0>)
 8003da4:	2204      	movs	r2, #4
 8003da6:	701a      	strb	r2, [r3, #0]
//	enc.sigma_error=0;
	pl_DriveMotor_start();
 8003da8:	f003 fdc6 	bl	8007938 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003dac:	bf00      	nop
 8003dae:	4b11      	ldr	r3, [pc, #68]	; (8003df4 <slalom_table2+0x1ec>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d1fa      	bne.n	8003dae <slalom_table2+0x1a6>

	}
//	modeacc = 0;
//	enc.sigma_error=0;

	angle = angle - input_displacement;
 8003db8:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <slalom_table2+0x1f4>)
 8003dba:	ed93 7a00 	vldr	s14, [r3]
 8003dbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <slalom_table2+0x1f4>)
 8003dc8:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003dcc:	f003 fdc2 	bl	8007954 <pl_DriveMotor_stop>

	return turning.velocity;
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <slalom_table2+0x1e0>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	ee07 3a90 	vmov	s15, r3
}
 8003dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8003ddc:	3720      	adds	r7, #32
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	200004e4 	.word	0x200004e4
 8003de8:	200004c4 	.word	0x200004c4
 8003dec:	200004b8 	.word	0x200004b8
 8003df0:	200007e5 	.word	0x200007e5
 8003df4:	200007e4 	.word	0x200007e4
 8003df8:	20000508 	.word	0x20000508
 8003dfc:	20000244 	.word	0x20000244

08003e00 <no_angle>:

void no_angle(void){
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003e04:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <no_angle+0x78>)
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003e0c:	4b1a      	ldr	r3, [pc, #104]	; (8003e78 <no_angle+0x78>)
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003e14:	4b18      	ldr	r3, [pc, #96]	; (8003e78 <no_angle+0x78>)
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003e1c:	4b17      	ldr	r3, [pc, #92]	; (8003e7c <no_angle+0x7c>)
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003e24:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <no_angle+0x7c>)
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003e2c:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <no_angle+0x7c>)
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	609a      	str	r2, [r3, #8]

	modeacc = 3;
 8003e34:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <no_angle+0x80>)
 8003e36:	2203      	movs	r2, #3
 8003e38:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003e3a:	f003 fd7d 	bl	8007938 <pl_DriveMotor_start>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003e3e:	e002      	b.n	8003e46 <no_angle+0x46>
		HAL_Delay(1);
 8003e40:	2001      	movs	r0, #1
 8003e42:	f00c fb1f 	bl	8010484 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003e46:	4b0f      	ldr	r3, [pc, #60]	; (8003e84 <no_angle+0x84>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e4e:	ddf7      	ble.n	8003e40 <no_angle+0x40>
 8003e50:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <no_angle+0x84>)
 8003e52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e56:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e5a:	ddf1      	ble.n	8003e40 <no_angle+0x40>
 8003e5c:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <no_angle+0x84>)
 8003e5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003e62:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e66:	ddeb      	ble.n	8003e40 <no_angle+0x40>
//		if(record_time >= max_record_time){
//			break;
//		}
	}
	modeacc = 0;
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <no_angle+0x80>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8003e6e:	f003 fd71 	bl	8007954 <pl_DriveMotor_stop>

}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	200004c4 	.word	0x200004c4
 8003e7c:	200004b8 	.word	0x200004b8
 8003e80:	20000508 	.word	0x20000508
 8003e84:	20000298 	.word	0x20000298

08003e88 <mollifier_slalom_table>:


void mollifier_slalom_table(float input_center_velocity,float input_displacement, float input_max_turning_velocity) {
 8003e88:	b5b0      	push	{r4, r5, r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003e92:	edc7 0a02 	vstr	s1, [r7, #8]
 8003e96:	ed87 1a01 	vstr	s2, [r7, #4]

	// 例外処理

	Mollifier_turning.center_velocity = input_center_velocity;
 8003e9a:	4a3d      	ldr	r2, [pc, #244]	; (8003f90 <mollifier_slalom_table+0x108>)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6053      	str	r3, [r2, #4]
	Mollifier_turning.displacement = input_displacement;
 8003ea0:	4a3b      	ldr	r2, [pc, #236]	; (8003f90 <mollifier_slalom_table+0x108>)
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	6013      	str	r3, [r2, #0]
	Mollifier_turning.max_turning_velocity = input_max_turning_velocity;
 8003ea6:	4a3a      	ldr	r2, [pc, #232]	; (8003f90 <mollifier_slalom_table+0x108>)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6093      	str	r3, [r2, #8]


	turning.velocity = 0;
 8003eac:	4b39      	ldr	r3, [pc, #228]	; (8003f94 <mollifier_slalom_table+0x10c>)
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003eb4:	4b37      	ldr	r3, [pc, #220]	; (8003f94 <mollifier_slalom_table+0x10c>)
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003ebc:	4a36      	ldr	r2, [pc, #216]	; (8003f98 <mollifier_slalom_table+0x110>)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003ec2:	4b35      	ldr	r3, [pc, #212]	; (8003f98 <mollifier_slalom_table+0x110>)
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003eca:	4b33      	ldr	r3, [pc, #204]	; (8003f98 <mollifier_slalom_table+0x110>)
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003ed2:	4b32      	ldr	r3, [pc, #200]	; (8003f9c <mollifier_slalom_table+0x114>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003ed8:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <mollifier_slalom_table+0x118>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
	mollifier_timer=-fabs(input_displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input_max_turning_velocity;
 8003ede:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ee2:	eef0 7ae7 	vabs.f32	s15, s15
 8003ee6:	ee17 0a90 	vmov	r0, s15
 8003eea:	f7fc fb55 	bl	8000598 <__aeabi_f2d>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4614      	mov	r4, r2
 8003ef4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003ef8:	a321      	add	r3, pc, #132	; (adr r3, 8003f80 <mollifier_slalom_table+0xf8>)
 8003efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efe:	4620      	mov	r0, r4
 8003f00:	4629      	mov	r1, r5
 8003f02:	f7fc fccb 	bl	800089c <__aeabi_ddiv>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	a31e      	add	r3, pc, #120	; (adr r3, 8003f88 <mollifier_slalom_table+0x100>)
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	f7fc fb98 	bl	8000648 <__aeabi_dmul>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4614      	mov	r4, r2
 8003f1e:	461d      	mov	r5, r3
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7fc fb39 	bl	8000598 <__aeabi_f2d>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	f7fc fcb5 	bl	800089c <__aeabi_ddiv>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4610      	mov	r0, r2
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f7fc fe5d 	bl	8000bf8 <__aeabi_d2f>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4a18      	ldr	r2, [pc, #96]	; (8003fa4 <mollifier_slalom_table+0x11c>)
 8003f42:	6013      	str	r3, [r2, #0]
	modeacc = 6;
 8003f44:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <mollifier_slalom_table+0x120>)
 8003f46:	2206      	movs	r2, #6
 8003f48:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003f4a:	f003 fcf5 	bl	8007938 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003f4e:	bf00      	nop
 8003f50:	4b13      	ldr	r3, [pc, #76]	; (8003fa0 <mollifier_slalom_table+0x118>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d1fa      	bne.n	8003f50 <mollifier_slalom_table+0xc8>

	}
//	modeacc = 0;


	angle = angle - input_displacement;
 8003f5a:	4b14      	ldr	r3, [pc, #80]	; (8003fac <mollifier_slalom_table+0x124>)
 8003f5c:	ed93 7a00 	vldr	s14, [r3]
 8003f60:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f68:	4b10      	ldr	r3, [pc, #64]	; (8003fac <mollifier_slalom_table+0x124>)
 8003f6a:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003f6e:	f003 fcf1 	bl	8007954 <pl_DriveMotor_stop>

}
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bdb0      	pop	{r4, r5, r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	f3af 8000 	nop.w
 8003f80:	f9db22d1 	.word	0xf9db22d1
 8003f84:	3fdc6a7e 	.word	0x3fdc6a7e
 8003f88:	362cef38 	.word	0x362cef38
 8003f8c:	3fd78b56 	.word	0x3fd78b56
 8003f90:	200004f8 	.word	0x200004f8
 8003f94:	200004c4 	.word	0x200004c4
 8003f98:	200004b8 	.word	0x200004b8
 8003f9c:	200007e5 	.word	0x200007e5
 8003fa0:	200007e4 	.word	0x200007e4
 8003fa4:	200007e0 	.word	0x200007e0
 8003fa8:	20000508 	.word	0x20000508
 8003fac:	20000244 	.word	0x20000244

08003fb0 <no_frontwall_straight>:


void no_frontwall_straight(void){
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003fb4:	4b16      	ldr	r3, [pc, #88]	; (8004010 <no_frontwall_straight+0x60>)
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003fbc:	4b14      	ldr	r3, [pc, #80]	; (8004010 <no_frontwall_straight+0x60>)
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003fc4:	4b12      	ldr	r3, [pc, #72]	; (8004010 <no_frontwall_straight+0x60>)
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003fcc:	4b11      	ldr	r3, [pc, #68]	; (8004014 <no_frontwall_straight+0x64>)
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003fd4:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <no_frontwall_straight+0x64>)
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003fdc:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <no_frontwall_straight+0x64>)
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	609a      	str	r2, [r3, #8]

	g_FrontWallControl_mode=1;
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <no_frontwall_straight+0x68>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	701a      	strb	r2, [r3, #0]
	modeacc = 5;
 8003fea:	4b0c      	ldr	r3, [pc, #48]	; (800401c <no_frontwall_straight+0x6c>)
 8003fec:	2205      	movs	r2, #5
 8003fee:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003ff0:	f003 fca2 	bl	8007938 <pl_DriveMotor_start>
	wait_ms_NoReset(150);
 8003ff4:	2096      	movs	r0, #150	; 0x96
 8003ff6:	f003 ff4b 	bl	8007e90 <wait_ms_NoReset>
//		HAL_Delay(1);
////		if(record_time >= max_record_time){
////			break;
////		}
//	}
	g_FrontWallControl_mode=0;
 8003ffa:	4b07      	ldr	r3, [pc, #28]	; (8004018 <no_frontwall_straight+0x68>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]
	modeacc = 0;
 8004000:	4b06      	ldr	r3, [pc, #24]	; (800401c <no_frontwall_straight+0x6c>)
 8004002:	2200      	movs	r2, #0
 8004004:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8004006:	f003 fca5 	bl	8007954 <pl_DriveMotor_stop>

}
 800400a:	bf00      	nop
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	200004c4 	.word	0x200004c4
 8004014:	200004b8 	.word	0x200004b8
 8004018:	20000571 	.word	0x20000571
 800401c:	20000508 	.word	0x20000508

08004020 <straight_table_ff>:




float straight_table_ff(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af00      	add	r7, sp, #0
 8004026:	ed87 0a05 	vstr	s0, [r7, #20]
 800402a:	edc7 0a04 	vstr	s1, [r7, #16]
 800402e:	ed87 1a03 	vstr	s2, [r7, #12]
 8004032:	edc7 1a02 	vstr	s3, [r7, #8]
 8004036:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 800403a:	edd7 7a03 	vldr	s15, [r7, #12]
 800403e:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8004042:	edd7 7a04 	vldr	s15, [r7, #16]
 8004046:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800404a:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 800404e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004052:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8004056:	ed97 7a01 	vldr	s14, [r7, #4]
 800405a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800405e:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8004062:	edd7 7a01 	vldr	s15, [r7, #4]
 8004066:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800406a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406e:	d505      	bpl.n	800407c <straight_table_ff+0x5c>
 8004070:	edd7 7a01 	vldr	s15, [r7, #4]
 8004074:	eef1 7a67 	vneg.f32	s15, s15
 8004078:	edc7 7a01 	vstr	s15, [r7, #4]
	Ksp = 0;//3//P項の制御量直進*****************************************************
 800407c:	4b76      	ldr	r3, [pc, #472]	; (8004258 <straight_table_ff+0x238>)
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
	Ksi = 0;//5//43//I項の制御量直進*****************************************************
 8004084:	4b75      	ldr	r3, [pc, #468]	; (800425c <straight_table_ff+0x23c>)
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
	Ksd = 0;//D項の制御量直進*****************************************************
 800408c:	4b74      	ldr	r3, [pc, #464]	; (8004260 <straight_table_ff+0x240>)
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
	Ktp = 0;//295//P項の制御量旋回*****************************************************
 8004094:	4b73      	ldr	r3, [pc, #460]	; (8004264 <straight_table_ff+0x244>)
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
	Kti = 0;//1//.6//I項の制御量旋回*****************************************************
 800409c:	4b72      	ldr	r3, [pc, #456]	; (8004268 <straight_table_ff+0x248>)
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
//	Ktifun = 0.01;//1//.6//I項の制御量旋回*****************************************************
	Ktd = 0;
 80040a4:	4b71      	ldr	r3, [pc, #452]	; (800426c <straight_table_ff+0x24c>)
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]


	Trapezoid_straight.displacement = input_displacement;
 80040ac:	4a70      	ldr	r2, [pc, #448]	; (8004270 <straight_table_ff+0x250>)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 80040b2:	4a6f      	ldr	r2, [pc, #444]	; (8004270 <straight_table_ff+0x250>)
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 80040b8:	4a6d      	ldr	r2, [pc, #436]	; (8004270 <straight_table_ff+0x250>)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 80040be:	4a6c      	ldr	r2, [pc, #432]	; (8004270 <straight_table_ff+0x250>)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 80040c4:	4a6a      	ldr	r2, [pc, #424]	; (8004270 <straight_table_ff+0x250>)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80040ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80040ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d6:	db03      	blt.n	80040e0 <straight_table_ff+0xc0>
 80040d8:	4a66      	ldr	r2, [pc, #408]	; (8004274 <straight_table_ff+0x254>)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6053      	str	r3, [r2, #4]
 80040de:	e006      	b.n	80040ee <straight_table_ff+0xce>
	}else{straight.acceleration = -input_acceleration;}
 80040e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80040e4:	eef1 7a67 	vneg.f32	s15, s15
 80040e8:	4b62      	ldr	r3, [pc, #392]	; (8004274 <straight_table_ff+0x254>)
 80040ea:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 80040ee:	4a61      	ldr	r2, [pc, #388]	; (8004274 <straight_table_ff+0x254>)
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 80040f4:	4b5f      	ldr	r3, [pc, #380]	; (8004274 <straight_table_ff+0x254>)
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 80040fc:	4b5e      	ldr	r3, [pc, #376]	; (8004278 <straight_table_ff+0x258>)
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 8004104:	4b5c      	ldr	r3, [pc, #368]	; (8004278 <straight_table_ff+0x258>)
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 800410c:	4b5a      	ldr	r3, [pc, #360]	; (8004278 <straight_table_ff+0x258>)
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8004114:	4b59      	ldr	r3, [pc, #356]	; (800427c <straight_table_ff+0x25c>)
 8004116:	2200      	movs	r2, #0
 8004118:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 800411a:	4b59      	ldr	r3, [pc, #356]	; (8004280 <straight_table_ff+0x260>)
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8004120:	edd7 7a05 	vldr	s15, [r7, #20]
 8004124:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800412c:	dd0e      	ble.n	800414c <straight_table_ff+0x12c>
 800412e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004132:	edd7 7a05 	vldr	s15, [r7, #20]
 8004136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800413a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413e:	dd05      	ble.n	800414c <straight_table_ff+0x12c>
 8004140:	4b4f      	ldr	r3, [pc, #316]	; (8004280 <straight_table_ff+0x260>)
 8004142:	2205      	movs	r2, #5
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	4a4b      	ldr	r2, [pc, #300]	; (8004274 <straight_table_ff+0x254>)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800414c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004150:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004158:	dd14      	ble.n	8004184 <straight_table_ff+0x164>
 800415a:	edd7 7a05 	vldr	s15, [r7, #20]
 800415e:	eef1 7a67 	vneg.f32	s15, s15
 8004162:	ed97 7a07 	vldr	s14, [r7, #28]
 8004166:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800416a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800416e:	d509      	bpl.n	8004184 <straight_table_ff+0x164>
 8004170:	4b43      	ldr	r3, [pc, #268]	; (8004280 <straight_table_ff+0x260>)
 8004172:	2206      	movs	r2, #6
 8004174:	701a      	strb	r2, [r3, #0]
 8004176:	edd7 7a01 	vldr	s15, [r7, #4]
 800417a:	eef1 7a67 	vneg.f32	s15, s15
 800417e:	4b3d      	ldr	r3, [pc, #244]	; (8004274 <straight_table_ff+0x254>)
 8004180:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8004184:	edd7 7a05 	vldr	s15, [r7, #20]
 8004188:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800418c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004190:	d514      	bpl.n	80041bc <straight_table_ff+0x19c>
 8004192:	edd7 7a05 	vldr	s15, [r7, #20]
 8004196:	eef1 7a67 	vneg.f32	s15, s15
 800419a:	ed97 7a07 	vldr	s14, [r7, #28]
 800419e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a6:	dd09      	ble.n	80041bc <straight_table_ff+0x19c>
 80041a8:	4b35      	ldr	r3, [pc, #212]	; (8004280 <straight_table_ff+0x260>)
 80041aa:	2205      	movs	r2, #5
 80041ac:	701a      	strb	r2, [r3, #0]
 80041ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80041b2:	eef1 7a67 	vneg.f32	s15, s15
 80041b6:	4b2f      	ldr	r3, [pc, #188]	; (8004274 <straight_table_ff+0x254>)
 80041b8:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80041bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80041c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c8:	d50e      	bpl.n	80041e8 <straight_table_ff+0x1c8>
 80041ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80041ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80041d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041da:	d505      	bpl.n	80041e8 <straight_table_ff+0x1c8>
 80041dc:	4b28      	ldr	r3, [pc, #160]	; (8004280 <straight_table_ff+0x260>)
 80041de:	2206      	movs	r2, #6
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	4a24      	ldr	r2, [pc, #144]	; (8004274 <straight_table_ff+0x254>)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 80041e8:	4b26      	ldr	r3, [pc, #152]	; (8004284 <straight_table_ff+0x264>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 80041ee:	f003 fba3 	bl	8007938 <pl_DriveMotor_start>


	while (g_acc_flag!=4){
 80041f2:	bf00      	nop
 80041f4:	4b22      	ldr	r3, [pc, #136]	; (8004280 <straight_table_ff+0x260>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d1fa      	bne.n	80041f4 <straight_table_ff+0x1d4>


	}
	if(input_end_velocity==0){//BREAK
 80041fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8004202:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420a:	d105      	bne.n	8004218 <straight_table_ff+0x1f8>
		wait_ms_NoReset(100);
 800420c:	2064      	movs	r0, #100	; 0x64
 800420e:	f003 fe3f 	bl	8007e90 <wait_ms_NoReset>
		modeacc = 0;
 8004212:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <straight_table_ff+0x264>)
 8004214:	2200      	movs	r2, #0
 8004216:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8004218:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <straight_table_ff+0x268>)
 800421a:	ed93 7a00 	vldr	s14, [r3]
 800421e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004226:	4b18      	ldr	r3, [pc, #96]	; (8004288 <straight_table_ff+0x268>)
 8004228:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 800422c:	4b17      	ldr	r3, [pc, #92]	; (800428c <straight_table_ff+0x26c>)
 800422e:	ed93 7a00 	vldr	s14, [r3]
 8004232:	edd7 7a05 	vldr	s15, [r7, #20]
 8004236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800423a:	4b14      	ldr	r3, [pc, #80]	; (800428c <straight_table_ff+0x26c>)
 800423c:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8004240:	f003 fb88 	bl	8007954 <pl_DriveMotor_stop>



	return straight.velocity;
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <straight_table_ff+0x254>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	ee07 3a90 	vmov	s15, r3



}
 800424c:	eeb0 0a67 	vmov.f32	s0, s15
 8004250:	3720      	adds	r7, #32
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20000534 	.word	0x20000534
 800425c:	20000538 	.word	0x20000538
 8004260:	2000053c 	.word	0x2000053c
 8004264:	20000540 	.word	0x20000540
 8004268:	20000544 	.word	0x20000544
 800426c:	20000548 	.word	0x20000548
 8004270:	200004d0 	.word	0x200004d0
 8004274:	200004b8 	.word	0x200004b8
 8004278:	200004c4 	.word	0x200004c4
 800427c:	200007e5 	.word	0x200007e5
 8004280:	200007e4 	.word	0x200007e4
 8004284:	20000508 	.word	0x20000508
 8004288:	20000200 	.word	0x20000200
 800428c:	20000204 	.word	0x20000204

08004290 <turning_table_ff>:



float turning_table_ff(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	ed87 0a05 	vstr	s0, [r7, #20]
 800429a:	edc7 0a04 	vstr	s1, [r7, #16]
 800429e:	ed87 1a03 	vstr	s2, [r7, #12]
 80042a2:	edc7 1a02 	vstr	s3, [r7, #8]
 80042a6:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 80042aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80042ae:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 80042b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80042b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80042ba:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 80042be:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80042c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 80042c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80042ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042ce:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 80042d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80042d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042de:	d505      	bpl.n	80042ec <turning_table_ff+0x5c>
 80042e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80042e4:	eef1 7a67 	vneg.f32	s15, s15
 80042e8:	edc7 7a01 	vstr	s15, [r7, #4]

	Ksp = 0;//3//P項の制御量直進*****************************************************
 80042ec:	4b71      	ldr	r3, [pc, #452]	; (80044b4 <turning_table_ff+0x224>)
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
		Ksi = 0;//5//43//I項の制御量直進*****************************************************
 80042f4:	4b70      	ldr	r3, [pc, #448]	; (80044b8 <turning_table_ff+0x228>)
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
		Ksd = 0;//D項の制御量直進*****************************************************
 80042fc:	4b6f      	ldr	r3, [pc, #444]	; (80044bc <turning_table_ff+0x22c>)
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	601a      	str	r2, [r3, #0]
		Ktp = 0;//295//P項の制御量旋回*****************************************************
 8004304:	4b6e      	ldr	r3, [pc, #440]	; (80044c0 <turning_table_ff+0x230>)
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
		Kti = 0;//1//.6//I項の制御量旋回*****************************************************
 800430c:	4b6d      	ldr	r3, [pc, #436]	; (80044c4 <turning_table_ff+0x234>)
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
	//	Ktifun = 0.01;//1//.6//I項の制御量旋回*****************************************************
		Ktd = 0;
 8004314:	4b6c      	ldr	r3, [pc, #432]	; (80044c8 <turning_table_ff+0x238>)
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

	Trapezoid_turning.displacement = input_displacement;
 800431c:	4a6b      	ldr	r2, [pc, #428]	; (80044cc <turning_table_ff+0x23c>)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8004322:	4a6a      	ldr	r2, [pc, #424]	; (80044cc <turning_table_ff+0x23c>)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8004328:	4a68      	ldr	r2, [pc, #416]	; (80044cc <turning_table_ff+0x23c>)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 800432e:	4a67      	ldr	r2, [pc, #412]	; (80044cc <turning_table_ff+0x23c>)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8004334:	4a65      	ldr	r2, [pc, #404]	; (80044cc <turning_table_ff+0x23c>)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 800433a:	edd7 7a02 	vldr	s15, [r7, #8]
 800433e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004346:	db03      	blt.n	8004350 <turning_table_ff+0xc0>
 8004348:	4a61      	ldr	r2, [pc, #388]	; (80044d0 <turning_table_ff+0x240>)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6053      	str	r3, [r2, #4]
 800434e:	e006      	b.n	800435e <turning_table_ff+0xce>
	}else{turning.acceleration = -input_acceleration;}
 8004350:	edd7 7a01 	vldr	s15, [r7, #4]
 8004354:	eef1 7a67 	vneg.f32	s15, s15
 8004358:	4b5d      	ldr	r3, [pc, #372]	; (80044d0 <turning_table_ff+0x240>)
 800435a:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 800435e:	4a5c      	ldr	r2, [pc, #368]	; (80044d0 <turning_table_ff+0x240>)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8004364:	4b5a      	ldr	r3, [pc, #360]	; (80044d0 <turning_table_ff+0x240>)
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 800436c:	4b59      	ldr	r3, [pc, #356]	; (80044d4 <turning_table_ff+0x244>)
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8004374:	4b57      	ldr	r3, [pc, #348]	; (80044d4 <turning_table_ff+0x244>)
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 800437c:	4b55      	ldr	r3, [pc, #340]	; (80044d4 <turning_table_ff+0x244>)
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8004384:	4b54      	ldr	r3, [pc, #336]	; (80044d8 <turning_table_ff+0x248>)
 8004386:	2200      	movs	r2, #0
 8004388:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 800438a:	4b54      	ldr	r3, [pc, #336]	; (80044dc <turning_table_ff+0x24c>)
 800438c:	2201      	movs	r2, #1
 800438e:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8004390:	edd7 7a05 	vldr	s15, [r7, #20]
 8004394:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800439c:	dd0e      	ble.n	80043bc <turning_table_ff+0x12c>
 800439e:	ed97 7a07 	vldr	s14, [r7, #28]
 80043a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80043a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ae:	dd05      	ble.n	80043bc <turning_table_ff+0x12c>
 80043b0:	4b4a      	ldr	r3, [pc, #296]	; (80044dc <turning_table_ff+0x24c>)
 80043b2:	2205      	movs	r2, #5
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	4a46      	ldr	r2, [pc, #280]	; (80044d0 <turning_table_ff+0x240>)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 80043bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80043c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c8:	dd14      	ble.n	80043f4 <turning_table_ff+0x164>
 80043ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80043ce:	eef1 7a67 	vneg.f32	s15, s15
 80043d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80043d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043de:	d509      	bpl.n	80043f4 <turning_table_ff+0x164>
 80043e0:	4b3e      	ldr	r3, [pc, #248]	; (80044dc <turning_table_ff+0x24c>)
 80043e2:	2206      	movs	r2, #6
 80043e4:	701a      	strb	r2, [r3, #0]
 80043e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80043ea:	eef1 7a67 	vneg.f32	s15, s15
 80043ee:	4b38      	ldr	r3, [pc, #224]	; (80044d0 <turning_table_ff+0x240>)
 80043f0:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 80043f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80043f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004400:	d514      	bpl.n	800442c <turning_table_ff+0x19c>
 8004402:	edd7 7a05 	vldr	s15, [r7, #20]
 8004406:	eef1 7a67 	vneg.f32	s15, s15
 800440a:	ed97 7a07 	vldr	s14, [r7, #28]
 800440e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004416:	dd09      	ble.n	800442c <turning_table_ff+0x19c>
 8004418:	4b30      	ldr	r3, [pc, #192]	; (80044dc <turning_table_ff+0x24c>)
 800441a:	2205      	movs	r2, #5
 800441c:	701a      	strb	r2, [r3, #0]
 800441e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004422:	eef1 7a67 	vneg.f32	s15, s15
 8004426:	4b2a      	ldr	r3, [pc, #168]	; (80044d0 <turning_table_ff+0x240>)
 8004428:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 800442c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004430:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004438:	d50e      	bpl.n	8004458 <turning_table_ff+0x1c8>
 800443a:	ed97 7a07 	vldr	s14, [r7, #28]
 800443e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004442:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444a:	d505      	bpl.n	8004458 <turning_table_ff+0x1c8>
 800444c:	4b23      	ldr	r3, [pc, #140]	; (80044dc <turning_table_ff+0x24c>)
 800444e:	2206      	movs	r2, #6
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	4a1f      	ldr	r2, [pc, #124]	; (80044d0 <turning_table_ff+0x240>)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8004458:	4b21      	ldr	r3, [pc, #132]	; (80044e0 <turning_table_ff+0x250>)
 800445a:	2202      	movs	r2, #2
 800445c:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 800445e:	f003 fa6b 	bl	8007938 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8004462:	bf00      	nop
 8004464:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <turning_table_ff+0x24c>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b04      	cmp	r3, #4
 800446c:	d1fa      	bne.n	8004464 <turning_table_ff+0x1d4>

	}
	if(input_end_velocity==0){//BREAK
 800446e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004472:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800447a:	d106      	bne.n	800448a <turning_table_ff+0x1fa>
		wait_ms_NoReset(300);
 800447c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004480:	f003 fd06 	bl	8007e90 <wait_ms_NoReset>
		modeacc = 0;
 8004484:	4b16      	ldr	r3, [pc, #88]	; (80044e0 <turning_table_ff+0x250>)
 8004486:	2200      	movs	r2, #0
 8004488:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 800448a:	4b16      	ldr	r3, [pc, #88]	; (80044e4 <turning_table_ff+0x254>)
 800448c:	ed93 7a00 	vldr	s14, [r3]
 8004490:	edd7 7a05 	vldr	s15, [r7, #20]
 8004494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004498:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <turning_table_ff+0x254>)
 800449a:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 800449e:	f003 fa59 	bl	8007954 <pl_DriveMotor_stop>

	return turning.velocity;
 80044a2:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <turning_table_ff+0x240>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	ee07 3a90 	vmov	s15, r3
}
 80044aa:	eeb0 0a67 	vmov.f32	s0, s15
 80044ae:	3720      	adds	r7, #32
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	20000534 	.word	0x20000534
 80044b8:	20000538 	.word	0x20000538
 80044bc:	2000053c 	.word	0x2000053c
 80044c0:	20000540 	.word	0x20000540
 80044c4:	20000544 	.word	0x20000544
 80044c8:	20000548 	.word	0x20000548
 80044cc:	200004e4 	.word	0x200004e4
 80044d0:	200004c4 	.word	0x200004c4
 80044d4:	200004b8 	.word	0x200004b8
 80044d8:	200007e5 	.word	0x200007e5
 80044dc:	200007e4 	.word	0x200007e4
 80044e0:	20000508 	.word	0x20000508
 80044e4:	20000244 	.word	0x20000244

080044e8 <feedforward_const_accel>:
#include "CL_encoder.h"

void feedforward_const_accel(float *feedforward_straight,
		float straight_velocity, float straight_acceleration,
		float *feedforward_turning, float turning_velocity,
		float turning_acceleration) {
 80044e8:	b5b0      	push	{r4, r5, r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6178      	str	r0, [r7, #20]
 80044f0:	ed87 0a04 	vstr	s0, [r7, #16]
 80044f4:	edc7 0a03 	vstr	s1, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	ed87 1a01 	vstr	s2, [r7, #4]
 80044fe:	edc7 1a00 	vstr	s3, [r7]

	if (straight_velocity >= 0) {
 8004502:	edd7 7a04 	vldr	s15, [r7, #16]
 8004506:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800450a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450e:	db7c      	blt.n	800460a <feedforward_const_accel+0x122>
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f7fc f841 	bl	8000598 <__aeabi_f2d>
 8004516:	a3c8      	add	r3, pc, #800	; (adr r3, 8004838 <feedforward_const_accel+0x350>)
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	f7fc f894 	bl	8000648 <__aeabi_dmul>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4610      	mov	r0, r2
 8004526:	4619      	mov	r1, r3
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	4bc6      	ldr	r3, [pc, #792]	; (8004848 <feedforward_const_accel+0x360>)
 800452e:	f7fc f9b5 	bl	800089c <__aeabi_ddiv>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4610      	mov	r0, r2
 8004538:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 800453a:	a3b5      	add	r3, pc, #724	; (adr r3, 8004810 <feedforward_const_accel+0x328>)
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	f7fc f9ac 	bl	800089c <__aeabi_ddiv>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4610      	mov	r0, r2
 800454a:	4619      	mov	r1, r3
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004554:	f7fc f9a2 	bl	800089c <__aeabi_ddiv>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	a3ad      	add	r3, pc, #692	; (adr r3, 8004818 <feedforward_const_accel+0x330>)
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	f7fb feb9 	bl	80002dc <__adddf3>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4610      	mov	r0, r2
 8004570:	4619      	mov	r1, r3
 8004572:	a3ab      	add	r3, pc, #684	; (adr r3, 8004820 <feedforward_const_accel+0x338>)
 8004574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004578:	f7fc f866 	bl	8000648 <__aeabi_dmul>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4610      	mov	r0, r2
 8004582:	4619      	mov	r1, r3
 8004584:	a3a8      	add	r3, pc, #672	; (adr r3, 8004828 <feedforward_const_accel+0x340>)
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	f7fc f987 	bl	800089c <__aeabi_ddiv>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4614      	mov	r4, r2
 8004594:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004596:	ed97 7a04 	vldr	s14, [r7, #16]
 800459a:	eddf 6aac 	vldr	s13, [pc, #688]	; 800484c <feedforward_const_accel+0x364>
 800459e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045a2:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8004850 <feedforward_const_accel+0x368>
 80045a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045aa:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80045ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80045b2:	ee16 0a90 	vmov	r0, s13
 80045b6:	f7fb ffef 	bl	8000598 <__aeabi_f2d>
 80045ba:	a39d      	add	r3, pc, #628	; (adr r3, 8004830 <feedforward_const_accel+0x348>)
 80045bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c0:	f7fc f842 	bl	8000648 <__aeabi_dmul>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4610      	mov	r0, r2
 80045ca:	4619      	mov	r1, r3
 80045cc:	a390      	add	r3, pc, #576	; (adr r3, 8004810 <feedforward_const_accel+0x328>)
 80045ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d2:	f7fc f963 	bl	800089c <__aeabi_ddiv>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4610      	mov	r0, r2
 80045dc:	4619      	mov	r1, r3
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045e6:	f7fc f959 	bl	800089c <__aeabi_ddiv>
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4620      	mov	r0, r4
 80045f0:	4629      	mov	r1, r5
 80045f2:	f7fb fe73 	bl	80002dc <__adddf3>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	4610      	mov	r0, r2
 80045fc:	4619      	mov	r1, r3
 80045fe:	f7fc fafb 	bl	8000bf8 <__aeabi_d2f>
 8004602:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e07b      	b.n	8004702 <feedforward_const_accel+0x21a>
	} else {
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f7fb ffc4 	bl	8000598 <__aeabi_f2d>
 8004610:	a389      	add	r3, pc, #548	; (adr r3, 8004838 <feedforward_const_accel+0x350>)
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	f7fc f817 	bl	8000648 <__aeabi_dmul>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	4610      	mov	r0, r2
 8004620:	4619      	mov	r1, r3
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	4b88      	ldr	r3, [pc, #544]	; (8004848 <feedforward_const_accel+0x360>)
 8004628:	f7fc f938 	bl	800089c <__aeabi_ddiv>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4610      	mov	r0, r2
 8004632:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 8004634:	a376      	add	r3, pc, #472	; (adr r3, 8004810 <feedforward_const_accel+0x328>)
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	f7fc f92f 	bl	800089c <__aeabi_ddiv>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800464e:	f7fc f925 	bl	800089c <__aeabi_ddiv>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4610      	mov	r0, r2
 8004658:	4619      	mov	r1, r3
 800465a:	a36f      	add	r3, pc, #444	; (adr r3, 8004818 <feedforward_const_accel+0x330>)
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f7fb fe3a 	bl	80002d8 <__aeabi_dsub>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4610      	mov	r0, r2
 800466a:	4619      	mov	r1, r3
 800466c:	a36c      	add	r3, pc, #432	; (adr r3, 8004820 <feedforward_const_accel+0x338>)
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	f7fb ffe9 	bl	8000648 <__aeabi_dmul>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4610      	mov	r0, r2
 800467c:	4619      	mov	r1, r3
 800467e:	a36a      	add	r3, pc, #424	; (adr r3, 8004828 <feedforward_const_accel+0x340>)
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	f7fc f90a 	bl	800089c <__aeabi_ddiv>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4614      	mov	r4, r2
 800468e:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004690:	ed97 7a04 	vldr	s14, [r7, #16]
 8004694:	eddf 6a6d 	vldr	s13, [pc, #436]	; 800484c <feedforward_const_accel+0x364>
 8004698:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800469c:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8004850 <feedforward_const_accel+0x368>
 80046a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046a4:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80046a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80046ac:	ee16 0a90 	vmov	r0, s13
 80046b0:	f7fb ff72 	bl	8000598 <__aeabi_f2d>
 80046b4:	a35e      	add	r3, pc, #376	; (adr r3, 8004830 <feedforward_const_accel+0x348>)
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	f7fb ffc5 	bl	8000648 <__aeabi_dmul>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4610      	mov	r0, r2
 80046c4:	4619      	mov	r1, r3
 80046c6:	a352      	add	r3, pc, #328	; (adr r3, 8004810 <feedforward_const_accel+0x328>)
 80046c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046cc:	f7fc f8e6 	bl	800089c <__aeabi_ddiv>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4610      	mov	r0, r2
 80046d6:	4619      	mov	r1, r3
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80046e0:	f7fc f8dc 	bl	800089c <__aeabi_ddiv>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4620      	mov	r0, r4
 80046ea:	4629      	mov	r1, r5
 80046ec:	f7fb fdf6 	bl	80002dc <__adddf3>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4610      	mov	r0, r2
 80046f6:	4619      	mov	r1, r3
 80046f8:	f7fc fa7e 	bl	8000bf8 <__aeabi_d2f>
 80046fc:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	601a      	str	r2, [r3, #0]
	}
	if (turning_velocity >= 0) {
 8004702:	edd7 7a01 	vldr	s15, [r7, #4]
 8004706:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800470a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470e:	f2c0 80a1 	blt.w	8004854 <feedforward_const_accel+0x36c>
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004712:	6838      	ldr	r0, [r7, #0]
 8004714:	f7fb ff40 	bl	8000598 <__aeabi_f2d>
 8004718:	a349      	add	r3, pc, #292	; (adr r3, 8004840 <feedforward_const_accel+0x358>)
 800471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471e:	f7fb ff93 	bl	8000648 <__aeabi_dmul>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4610      	mov	r0, r2
 8004728:	4619      	mov	r1, r3
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	4b46      	ldr	r3, [pc, #280]	; (8004848 <feedforward_const_accel+0x360>)
 8004730:	f7fc f8b4 	bl	800089c <__aeabi_ddiv>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4610      	mov	r0, r2
 800473a:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 800473c:	a334      	add	r3, pc, #208	; (adr r3, 8004810 <feedforward_const_accel+0x328>)
 800473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004742:	f7fc f8ab 	bl	800089c <__aeabi_ddiv>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4610      	mov	r0, r2
 800474c:	4619      	mov	r1, r3
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004756:	f7fc f8a1 	bl	800089c <__aeabi_ddiv>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4610      	mov	r0, r2
 8004760:	4619      	mov	r1, r3
 8004762:	a32d      	add	r3, pc, #180	; (adr r3, 8004818 <feedforward_const_accel+0x330>)
 8004764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004768:	f7fb fdb8 	bl	80002dc <__adddf3>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4610      	mov	r0, r2
 8004772:	4619      	mov	r1, r3
 8004774:	a32a      	add	r3, pc, #168	; (adr r3, 8004820 <feedforward_const_accel+0x338>)
 8004776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477a:	f7fb ff65 	bl	8000648 <__aeabi_dmul>
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	4610      	mov	r0, r2
 8004784:	4619      	mov	r1, r3
 8004786:	a328      	add	r3, pc, #160	; (adr r3, 8004828 <feedforward_const_accel+0x340>)
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	f7fc f886 	bl	800089c <__aeabi_ddiv>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4614      	mov	r4, r2
 8004796:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004798:	ed97 7a01 	vldr	s14, [r7, #4]
 800479c:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800484c <feedforward_const_accel+0x364>
 80047a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047a4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004850 <feedforward_const_accel+0x368>
 80047a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047ac:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80047b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80047b4:	ee16 0a90 	vmov	r0, s13
 80047b8:	f7fb feee 	bl	8000598 <__aeabi_f2d>
 80047bc:	a31c      	add	r3, pc, #112	; (adr r3, 8004830 <feedforward_const_accel+0x348>)
 80047be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c2:	f7fb ff41 	bl	8000648 <__aeabi_dmul>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4610      	mov	r0, r2
 80047cc:	4619      	mov	r1, r3
 80047ce:	a310      	add	r3, pc, #64	; (adr r3, 8004810 <feedforward_const_accel+0x328>)
 80047d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d4:	f7fc f862 	bl	800089c <__aeabi_ddiv>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4610      	mov	r0, r2
 80047de:	4619      	mov	r1, r3
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047e8:	f7fc f858 	bl	800089c <__aeabi_ddiv>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4620      	mov	r0, r4
 80047f2:	4629      	mov	r1, r5
 80047f4:	f7fb fd72 	bl	80002dc <__adddf3>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4610      	mov	r0, r2
 80047fe:	4619      	mov	r1, r3
 8004800:	f7fc f9fa 	bl	8000bf8 <__aeabi_d2f>
 8004804:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	601a      	str	r2, [r3, #0]
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
	}
	//*feedforward_straight=0;
	//*feedforward_turning =0;

}
 800480a:	e09f      	b.n	800494c <feedforward_const_accel+0x464>
 800480c:	f3af 8000 	nop.w
 8004810:	99e4ac6e 	.word	0x99e4ac6e
 8004814:	3f9a9a29 	.word	0x3f9a9a29
 8004818:	eb1c432d 	.word	0xeb1c432d
 800481c:	3f1a36e2 	.word	0x3f1a36e2
 8004820:	51eb851f 	.word	0x51eb851f
 8004824:	3ff11eb8 	.word	0x3ff11eb8
 8004828:	b7952d23 	.word	0xb7952d23
 800482c:	3f569c23 	.word	0x3f569c23
 8004830:	761b0f50 	.word	0x761b0f50
 8004834:	3f66bf29 	.word	0x3f66bf29
 8004838:	7df8b79b 	.word	0x7df8b79b
 800483c:	3ed5fdfc 	.word	0x3ed5fdfc
 8004840:	1db94e6b 	.word	0x1db94e6b
 8004844:	3eb5cf75 	.word	0x3eb5cf75
 8004848:	408f4000 	.word	0x408f4000
 800484c:	447a0000 	.word	0x447a0000
 8004850:	421c0000 	.word	0x421c0000
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004854:	6838      	ldr	r0, [r7, #0]
 8004856:	f7fb fe9f 	bl	8000598 <__aeabi_f2d>
 800485a:	a34c      	add	r3, pc, #304	; (adr r3, 800498c <feedforward_const_accel+0x4a4>)
 800485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004860:	f7fb fef2 	bl	8000648 <__aeabi_dmul>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4610      	mov	r0, r2
 800486a:	4619      	mov	r1, r3
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	4b43      	ldr	r3, [pc, #268]	; (8004980 <feedforward_const_accel+0x498>)
 8004872:	f7fc f813 	bl	800089c <__aeabi_ddiv>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4610      	mov	r0, r2
 800487c:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 800487e:	a336      	add	r3, pc, #216	; (adr r3, 8004958 <feedforward_const_accel+0x470>)
 8004880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004884:	f7fc f80a 	bl	800089c <__aeabi_ddiv>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4610      	mov	r0, r2
 800488e:	4619      	mov	r1, r3
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004898:	f7fc f800 	bl	800089c <__aeabi_ddiv>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4610      	mov	r0, r2
 80048a2:	4619      	mov	r1, r3
 80048a4:	a32e      	add	r3, pc, #184	; (adr r3, 8004960 <feedforward_const_accel+0x478>)
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	f7fb fd15 	bl	80002d8 <__aeabi_dsub>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	4610      	mov	r0, r2
 80048b4:	4619      	mov	r1, r3
 80048b6:	a32c      	add	r3, pc, #176	; (adr r3, 8004968 <feedforward_const_accel+0x480>)
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	f7fb fec4 	bl	8000648 <__aeabi_dmul>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4610      	mov	r0, r2
 80048c6:	4619      	mov	r1, r3
 80048c8:	a329      	add	r3, pc, #164	; (adr r3, 8004970 <feedforward_const_accel+0x488>)
 80048ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ce:	f7fb ffe5 	bl	800089c <__aeabi_ddiv>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4614      	mov	r4, r2
 80048d8:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80048da:	ed97 7a01 	vldr	s14, [r7, #4]
 80048de:	eddf 6a29 	vldr	s13, [pc, #164]	; 8004984 <feedforward_const_accel+0x49c>
 80048e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048e6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004988 <feedforward_const_accel+0x4a0>
 80048ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048ee:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80048f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80048f6:	ee16 0a90 	vmov	r0, s13
 80048fa:	f7fb fe4d 	bl	8000598 <__aeabi_f2d>
 80048fe:	a31e      	add	r3, pc, #120	; (adr r3, 8004978 <feedforward_const_accel+0x490>)
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	f7fb fea0 	bl	8000648 <__aeabi_dmul>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4610      	mov	r0, r2
 800490e:	4619      	mov	r1, r3
 8004910:	a311      	add	r3, pc, #68	; (adr r3, 8004958 <feedforward_const_accel+0x470>)
 8004912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004916:	f7fb ffc1 	bl	800089c <__aeabi_ddiv>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4610      	mov	r0, r2
 8004920:	4619      	mov	r1, r3
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800492a:	f7fb ffb7 	bl	800089c <__aeabi_ddiv>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4620      	mov	r0, r4
 8004934:	4629      	mov	r1, r5
 8004936:	f7fb fcd1 	bl	80002dc <__adddf3>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	4610      	mov	r0, r2
 8004940:	4619      	mov	r1, r3
 8004942:	f7fc f959 	bl	8000bf8 <__aeabi_d2f>
 8004946:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	601a      	str	r2, [r3, #0]
}
 800494c:	bf00      	nop
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bdb0      	pop	{r4, r5, r7, pc}
 8004954:	f3af 8000 	nop.w
 8004958:	99e4ac6e 	.word	0x99e4ac6e
 800495c:	3f9a9a29 	.word	0x3f9a9a29
 8004960:	eb1c432d 	.word	0xeb1c432d
 8004964:	3f1a36e2 	.word	0x3f1a36e2
 8004968:	51eb851f 	.word	0x51eb851f
 800496c:	3ff11eb8 	.word	0x3ff11eb8
 8004970:	b7952d23 	.word	0xb7952d23
 8004974:	3f569c23 	.word	0x3f569c23
 8004978:	761b0f50 	.word	0x761b0f50
 800497c:	3f66bf29 	.word	0x3f66bf29
 8004980:	408f4000 	.word	0x408f4000
 8004984:	447a0000 	.word	0x447a0000
 8004988:	421c0000 	.word	0x421c0000
 800498c:	1db94e6b 	.word	0x1db94e6b
 8004990:	3eb5cf75 	.word	0x3eb5cf75

08004994 <PID_Init>:
struct PID Gyro;

float Ksp, Ksi, Ksd;
float Ktp, Kti, Ktd;

void PID_Init(void) {
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0

	Ksp = 3.1; //3//P項の制御量直進*****************************************************
 8004998:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <PID_Init+0x44>)
 800499a:	4a10      	ldr	r2, [pc, #64]	; (80049dc <PID_Init+0x48>)
 800499c:	601a      	str	r2, [r3, #0]
	Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
 800499e:	4b10      	ldr	r3, [pc, #64]	; (80049e0 <PID_Init+0x4c>)
 80049a0:	4a10      	ldr	r2, [pc, #64]	; (80049e4 <PID_Init+0x50>)
 80049a2:	601a      	str	r2, [r3, #0]
	Ksd = 0.00; //D項の制御量直進*****************************************************
 80049a4:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <PID_Init+0x54>)
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]
	Ktp = 1.6; //295//P項の制御量旋回*****************************************************
 80049ac:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <PID_Init+0x58>)
 80049ae:	4a10      	ldr	r2, [pc, #64]	; (80049f0 <PID_Init+0x5c>)
 80049b0:	601a      	str	r2, [r3, #0]
	Kti = 0.05; //1//.6//I項の制御量旋回*****************************************************
 80049b2:	4b10      	ldr	r3, [pc, #64]	; (80049f4 <PID_Init+0x60>)
 80049b4:	4a10      	ldr	r2, [pc, #64]	; (80049f8 <PID_Init+0x64>)
 80049b6:	601a      	str	r2, [r3, #0]
	Ktd = 0.002; //205//D項の制御量旋回*****************************************************
 80049b8:	4b10      	ldr	r3, [pc, #64]	; (80049fc <PID_Init+0x68>)
 80049ba:	4a11      	ldr	r2, [pc, #68]	; (8004a00 <PID_Init+0x6c>)
 80049bc:	601a      	str	r2, [r3, #0]
	enc.sigma_error = 0;
 80049be:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <PID_Init+0x70>)
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 80049c6:	4b10      	ldr	r3, [pc, #64]	; (8004a08 <PID_Init+0x74>)
 80049c8:	f04f 0200 	mov.w	r2, #0
 80049cc:	609a      	str	r2, [r3, #8]

}
 80049ce:	bf00      	nop
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	20000534 	.word	0x20000534
 80049dc:	40466666 	.word	0x40466666
 80049e0:	20000538 	.word	0x20000538
 80049e4:	3da3d70a 	.word	0x3da3d70a
 80049e8:	2000053c 	.word	0x2000053c
 80049ec:	20000540 	.word	0x20000540
 80049f0:	3fcccccd 	.word	0x3fcccccd
 80049f4:	20000544 	.word	0x20000544
 80049f8:	3d4ccccd 	.word	0x3d4ccccd
 80049fc:	20000548 	.word	0x20000548
 8004a00:	3b03126f 	.word	0x3b03126f
 8004a04:	20000514 	.word	0x20000514
 8004a08:	20000524 	.word	0x20000524

08004a0c <clear_Ierror>:

void clear_Ierror(void) {
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
	enc.sigma_error = 0;
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <clear_Ierror+0x20>)
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <clear_Ierror+0x24>)
 8004a1a:	f04f 0200 	mov.w	r2, #0
 8004a1e:	609a      	str	r2, [r3, #8]
}
 8004a20:	bf00      	nop
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	20000514 	.word	0x20000514
 8004a30:	20000524 	.word	0x20000524

08004a34 <EncoderGyro_PID>:


void EncoderGyro_PID(float *PID_s, float *PID_t,float straight_velocity,float turning_velocity) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004a42:	edc7 0a00 	vstr	s1, [r7]
	float PID_stra = 0;
 8004a46:	f04f 0300 	mov.w	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]
	float PID_turn = 0;
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	613b      	str	r3, [r7, #16]


	if (straight_velocity == 0) {
 8004a52:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5e:	d101      	bne.n	8004a64 <EncoderGyro_PID+0x30>
		reset_speed();
 8004a60:	f7fc fada 	bl	8001018 <reset_speed>
	}
	//straight.velocity>=2500 && fabs(angle_speed)<100
	if (fabs(angle_speed) < 120 && straight_velocity >= 100) {
 8004a64:	4b6e      	ldr	r3, [pc, #440]	; (8004c20 <EncoderGyro_PID+0x1ec>)
 8004a66:	edd3 7a00 	vldr	s15, [r3]
 8004a6a:	eef0 7ae7 	vabs.f32	s15, s15
 8004a6e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004c24 <EncoderGyro_PID+0x1f0>
 8004a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a7a:	d51c      	bpl.n	8004ab6 <EncoderGyro_PID+0x82>
 8004a7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a80:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004c28 <EncoderGyro_PID+0x1f4>
 8004a84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8c:	db13      	blt.n	8004ab6 <EncoderGyro_PID+0x82>
		enc.error = (straight_velocity - (fusion_speedR + fusion_speedL) / 2);
 8004a8e:	4b67      	ldr	r3, [pc, #412]	; (8004c2c <EncoderGyro_PID+0x1f8>)
 8004a90:	ed93 7a00 	vldr	s14, [r3]
 8004a94:	4b66      	ldr	r3, [pc, #408]	; (8004c30 <EncoderGyro_PID+0x1fc>)
 8004a96:	edd3 7a00 	vldr	s15, [r3]
 8004a9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a9e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004aa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004aa6:	ed97 7a01 	vldr	s14, [r7, #4]
 8004aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004aae:	4b61      	ldr	r3, [pc, #388]	; (8004c34 <EncoderGyro_PID+0x200>)
 8004ab0:	edc3 7a00 	vstr	s15, [r3]
 8004ab4:	e01a      	b.n	8004aec <EncoderGyro_PID+0xb8>
	} else {
		enc.error = (straight_velocity - (E_speedR + E_speedL) / 2);
 8004ab6:	4b60      	ldr	r3, [pc, #384]	; (8004c38 <EncoderGyro_PID+0x204>)
 8004ab8:	ed93 7a00 	vldr	s14, [r3]
 8004abc:	4b5f      	ldr	r3, [pc, #380]	; (8004c3c <EncoderGyro_PID+0x208>)
 8004abe:	edd3 7a00 	vldr	s15, [r3]
 8004ac2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ac6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004aca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ace:	ed97 7a01 	vldr	s14, [r7, #4]
 8004ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ad6:	4b57      	ldr	r3, [pc, #348]	; (8004c34 <EncoderGyro_PID+0x200>)
 8004ad8:	edc3 7a00 	vstr	s15, [r3]
		fusion_speedL = E_speedL;
 8004adc:	4b57      	ldr	r3, [pc, #348]	; (8004c3c <EncoderGyro_PID+0x208>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a53      	ldr	r2, [pc, #332]	; (8004c30 <EncoderGyro_PID+0x1fc>)
 8004ae2:	6013      	str	r3, [r2, #0]
		fusion_speedR = E_speedR;
 8004ae4:	4b54      	ldr	r3, [pc, #336]	; (8004c38 <EncoderGyro_PID+0x204>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a50      	ldr	r2, [pc, #320]	; (8004c2c <EncoderGyro_PID+0x1f8>)
 8004aea:	6013      	str	r3, [r2, #0]
	}
	//enc.error = (straight.velocity - (fusion_speedR + fusion_speedL) / 2);
	enc.delta_error = enc.error - enc.old_error;
 8004aec:	4b51      	ldr	r3, [pc, #324]	; (8004c34 <EncoderGyro_PID+0x200>)
 8004aee:	ed93 7a00 	vldr	s14, [r3]
 8004af2:	4b50      	ldr	r3, [pc, #320]	; (8004c34 <EncoderGyro_PID+0x200>)
 8004af4:	edd3 7a01 	vldr	s15, [r3, #4]
 8004af8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004afc:	4b4d      	ldr	r3, [pc, #308]	; (8004c34 <EncoderGyro_PID+0x200>)
 8004afe:	edc3 7a03 	vstr	s15, [r3, #12]
	enc.old_error = enc.error;
 8004b02:	4b4c      	ldr	r3, [pc, #304]	; (8004c34 <EncoderGyro_PID+0x200>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a4b      	ldr	r2, [pc, #300]	; (8004c34 <EncoderGyro_PID+0x200>)
 8004b08:	6053      	str	r3, [r2, #4]
	enc.sigma_error += enc.error;
 8004b0a:	4b4a      	ldr	r3, [pc, #296]	; (8004c34 <EncoderGyro_PID+0x200>)
 8004b0c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004b10:	4b48      	ldr	r3, [pc, #288]	; (8004c34 <EncoderGyro_PID+0x200>)
 8004b12:	edd3 7a00 	vldr	s15, [r3]
 8004b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b1a:	4b46      	ldr	r3, [pc, #280]	; (8004c34 <EncoderGyro_PID+0x200>)
 8004b1c:	edc3 7a02 	vstr	s15, [r3, #8]
	PID_stra = Ksp * enc.error + Ksi * enc.sigma_error + Ksd * enc.delta_error;
 8004b20:	4b44      	ldr	r3, [pc, #272]	; (8004c34 <EncoderGyro_PID+0x200>)
 8004b22:	ed93 7a00 	vldr	s14, [r3]
 8004b26:	4b46      	ldr	r3, [pc, #280]	; (8004c40 <EncoderGyro_PID+0x20c>)
 8004b28:	edd3 7a00 	vldr	s15, [r3]
 8004b2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b30:	4b40      	ldr	r3, [pc, #256]	; (8004c34 <EncoderGyro_PID+0x200>)
 8004b32:	edd3 6a02 	vldr	s13, [r3, #8]
 8004b36:	4b43      	ldr	r3, [pc, #268]	; (8004c44 <EncoderGyro_PID+0x210>)
 8004b38:	edd3 7a00 	vldr	s15, [r3]
 8004b3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b44:	4b3b      	ldr	r3, [pc, #236]	; (8004c34 <EncoderGyro_PID+0x200>)
 8004b46:	edd3 6a03 	vldr	s13, [r3, #12]
 8004b4a:	4b3f      	ldr	r3, [pc, #252]	; (8004c48 <EncoderGyro_PID+0x214>)
 8004b4c:	edd3 7a00 	vldr	s15, [r3]
 8004b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b58:	edc7 7a05 	vstr	s15, [r7, #20]



//	if ((g_WallControl_mode == 3 || g_WallControl_mode == 1)
//			&& (highspeed_mode == 1)) {
		Gyro.error = (turning_velocity - angle_speed);
 8004b5c:	4b30      	ldr	r3, [pc, #192]	; (8004c20 <EncoderGyro_PID+0x1ec>)
 8004b5e:	edd3 7a00 	vldr	s15, [r3]
 8004b62:	ed97 7a00 	vldr	s14, [r7]
 8004b66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b6a:	4b38      	ldr	r3, [pc, #224]	; (8004c4c <EncoderGyro_PID+0x218>)
 8004b6c:	edc3 7a00 	vstr	s15, [r3]
		Gyro.delta_error = Gyro.error - Gyro.old_error;
 8004b70:	4b36      	ldr	r3, [pc, #216]	; (8004c4c <EncoderGyro_PID+0x218>)
 8004b72:	ed93 7a00 	vldr	s14, [r3]
 8004b76:	4b35      	ldr	r3, [pc, #212]	; (8004c4c <EncoderGyro_PID+0x218>)
 8004b78:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b80:	4b32      	ldr	r3, [pc, #200]	; (8004c4c <EncoderGyro_PID+0x218>)
 8004b82:	edc3 7a03 	vstr	s15, [r3, #12]
		Gyro.old_error = Gyro.error;
 8004b86:	4b31      	ldr	r3, [pc, #196]	; (8004c4c <EncoderGyro_PID+0x218>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a30      	ldr	r2, [pc, #192]	; (8004c4c <EncoderGyro_PID+0x218>)
 8004b8c:	6053      	str	r3, [r2, #4]
		Gyro.sigma_error += Gyro.error;
 8004b8e:	4b2f      	ldr	r3, [pc, #188]	; (8004c4c <EncoderGyro_PID+0x218>)
 8004b90:	ed93 7a02 	vldr	s14, [r3, #8]
 8004b94:	4b2d      	ldr	r3, [pc, #180]	; (8004c4c <EncoderGyro_PID+0x218>)
 8004b96:	edd3 7a00 	vldr	s15, [r3]
 8004b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b9e:	4b2b      	ldr	r3, [pc, #172]	; (8004c4c <EncoderGyro_PID+0x218>)
 8004ba0:	edc3 7a02 	vstr	s15, [r3, #8]
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004ba4:	4b29      	ldr	r3, [pc, #164]	; (8004c4c <EncoderGyro_PID+0x218>)
 8004ba6:	ed93 7a00 	vldr	s14, [r3]
 8004baa:	4b29      	ldr	r3, [pc, #164]	; (8004c50 <EncoderGyro_PID+0x21c>)
 8004bac:	edd3 7a00 	vldr	s15, [r3]
 8004bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bb4:	4b25      	ldr	r3, [pc, #148]	; (8004c4c <EncoderGyro_PID+0x218>)
 8004bb6:	edd3 6a02 	vldr	s13, [r3, #8]
 8004bba:	4b26      	ldr	r3, [pc, #152]	; (8004c54 <EncoderGyro_PID+0x220>)
 8004bbc:	edd3 7a00 	vldr	s15, [r3]
 8004bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bc4:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Ktd * Gyro.delta_error;
 8004bc8:	4b20      	ldr	r3, [pc, #128]	; (8004c4c <EncoderGyro_PID+0x218>)
 8004bca:	edd3 6a03 	vldr	s13, [r3, #12]
 8004bce:	4b22      	ldr	r3, [pc, #136]	; (8004c58 <EncoderGyro_PID+0x224>)
 8004bd0:	edd3 7a00 	vldr	s15, [r3]
 8004bd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bdc:	edc7 7a04 	vstr	s15, [r7, #16]
//
//		*PID_all_R += PID_turn;
//		*PID_all_L -= PID_turn;
//	}

	*PID_s = PID_stra / MAXMOTOR * g_V_battery_mean;
 8004be0:	edd7 7a05 	vldr	s15, [r7, #20]
 8004be4:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8004c5c <EncoderGyro_PID+0x228>
 8004be8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004bec:	4b1c      	ldr	r3, [pc, #112]	; (8004c60 <EncoderGyro_PID+0x22c>)
 8004bee:	edd3 7a00 	vldr	s15, [r3]
 8004bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	edc3 7a00 	vstr	s15, [r3]
	*PID_t = PID_turn / MAXMOTOR * g_V_battery_mean;
 8004bfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c00:	eddf 6a16 	vldr	s13, [pc, #88]	; 8004c5c <EncoderGyro_PID+0x228>
 8004c04:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004c08:	4b15      	ldr	r3, [pc, #84]	; (8004c60 <EncoderGyro_PID+0x22c>)
 8004c0a:	edd3 7a00 	vldr	s15, [r3]
 8004c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	edc3 7a00 	vstr	s15, [r3]

}
 8004c18:	bf00      	nop
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	20000248 	.word	0x20000248
 8004c24:	42f00000 	.word	0x42f00000
 8004c28:	42c80000 	.word	0x42c80000
 8004c2c:	2000023c 	.word	0x2000023c
 8004c30:	20000238 	.word	0x20000238
 8004c34:	20000514 	.word	0x20000514
 8004c38:	2000020c 	.word	0x2000020c
 8004c3c:	20000208 	.word	0x20000208
 8004c40:	20000534 	.word	0x20000534
 8004c44:	20000538 	.word	0x20000538
 8004c48:	2000053c 	.word	0x2000053c
 8004c4c:	20000524 	.word	0x20000524
 8004c50:	20000540 	.word	0x20000540
 8004c54:	20000544 	.word	0x20000544
 8004c58:	20000548 	.word	0x20000548
 8004c5c:	44d1e000 	.word	0x44d1e000
 8004c60:	200004b4 	.word	0x200004b4

08004c64 <init_WallControl>:
float g_CenterSlantR90_diff, g_CenterSlantL90_diff, g_CenterSlantR45_diff,
		g_CenterSlantL45_diff;



void init_WallControl(void) {
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
	g_WallControl_mode = 0;
 8004c68:	4b3f      	ldr	r3, [pc, #252]	; (8004d68 <init_WallControl+0x104>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	701a      	strb	r2, [r3, #0]
	g_FrontWallControl_mode = 0;
 8004c6e:	4b3f      	ldr	r3, [pc, #252]	; (8004d6c <init_WallControl+0x108>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus = 0;
 8004c74:	4b3e      	ldr	r3, [pc, #248]	; (8004d70 <init_WallControl+0x10c>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	701a      	strb	r2, [r3, #0]
	g_wallCut_mode = 0;
 8004c7a:	4b3e      	ldr	r3, [pc, #248]	; (8004d74 <init_WallControl+0x110>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]
	StabilityCount_reset = 0;
 8004c80:	4b3d      	ldr	r3, [pc, #244]	; (8004d78 <init_WallControl+0x114>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	701a      	strb	r2, [r3, #0]
	StabilityCount_L = 0;
 8004c86:	4b3d      	ldr	r3, [pc, #244]	; (8004d7c <init_WallControl+0x118>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	701a      	strb	r2, [r3, #0]
	StabilityCount_R = 0;
 8004c8c:	4b3c      	ldr	r3, [pc, #240]	; (8004d80 <init_WallControl+0x11c>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	701a      	strb	r2, [r3, #0]
	g_sensor_max_l = CENTER_L;
 8004c92:	4b3c      	ldr	r3, [pc, #240]	; (8004d84 <init_WallControl+0x120>)
 8004c94:	4a3c      	ldr	r2, [pc, #240]	; (8004d88 <init_WallControl+0x124>)
 8004c96:	601a      	str	r2, [r3, #0]
	g_sensor_max_r = CENTER_R;
 8004c98:	4b3c      	ldr	r3, [pc, #240]	; (8004d8c <init_WallControl+0x128>)
 8004c9a:	4a3d      	ldr	r2, [pc, #244]	; (8004d90 <init_WallControl+0x12c>)
 8004c9c:	601a      	str	r2, [r3, #0]
	g_skewer_displacement = SKEWER_LIMIT;
 8004c9e:	4b3d      	ldr	r3, [pc, #244]	; (8004d94 <init_WallControl+0x130>)
 8004ca0:	4a3d      	ldr	r2, [pc, #244]	; (8004d98 <init_WallControl+0x134>)
 8004ca2:	601a      	str	r2, [r3, #0]

	NoWallCountL90 = 0;
 8004ca4:	4b3d      	ldr	r3, [pc, #244]	; (8004d9c <init_WallControl+0x138>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	601a      	str	r2, [r3, #0]
	NoWallCountR90 = 0;
 8004caa:	4b3d      	ldr	r3, [pc, #244]	; (8004da0 <init_WallControl+0x13c>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]
	NoWallCountL45 = 0;
 8004cb0:	4b3c      	ldr	r3, [pc, #240]	; (8004da4 <init_WallControl+0x140>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
	NoWallCountR45 = 0;
 8004cb6:	4b3c      	ldr	r3, [pc, #240]	; (8004da8 <init_WallControl+0x144>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
	NoWallCountL45slant = 0;
 8004cbc:	4b3b      	ldr	r3, [pc, #236]	; (8004dac <init_WallControl+0x148>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
	NoWallCountR45slant = 0;
 8004cc2:	4b3b      	ldr	r3, [pc, #236]	; (8004db0 <init_WallControl+0x14c>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]

	NoWallDisplacementL90 = 0;
 8004cc8:	4b3a      	ldr	r3, [pc, #232]	; (8004db4 <init_WallControl+0x150>)
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR90 = 0;
 8004cd0:	4b39      	ldr	r3, [pc, #228]	; (8004db8 <init_WallControl+0x154>)
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8004cd8:	4b38      	ldr	r3, [pc, #224]	; (8004dbc <init_WallControl+0x158>)
 8004cda:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004cde:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8004ce0:	4b37      	ldr	r3, [pc, #220]	; (8004dc0 <init_WallControl+0x15c>)
 8004ce2:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004ce6:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant = 0;
 8004ce8:	4b36      	ldr	r3, [pc, #216]	; (8004dc4 <init_WallControl+0x160>)
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant = 0;
 8004cf0:	4b35      	ldr	r3, [pc, #212]	; (8004dc8 <init_WallControl+0x164>)
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant2 = 0;
 8004cf8:	4b34      	ldr	r3, [pc, #208]	; (8004dcc <init_WallControl+0x168>)
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant2 = 0;
 8004d00:	4b33      	ldr	r3, [pc, #204]	; (8004dd0 <init_WallControl+0x16c>)
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]

	NoWallCountL45_flag = 0;
 8004d08:	4b32      	ldr	r3, [pc, #200]	; (8004dd4 <init_WallControl+0x170>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	701a      	strb	r2, [r3, #0]
	NoWallCountR45_flag = 0;
 8004d0e:	4b32      	ldr	r3, [pc, #200]	; (8004dd8 <init_WallControl+0x174>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	701a      	strb	r2, [r3, #0]
	NoWallCountL45slant_flag = 0;
 8004d14:	4b31      	ldr	r3, [pc, #196]	; (8004ddc <init_WallControl+0x178>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
	NoWallCountR45slant_flag = 0;
 8004d1a:	4b31      	ldr	r3, [pc, #196]	; (8004de0 <init_WallControl+0x17c>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	701a      	strb	r2, [r3, #0]
	slantWallControlL_flag = 0;
 8004d20:	4b30      	ldr	r3, [pc, #192]	; (8004de4 <init_WallControl+0x180>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	701a      	strb	r2, [r3, #0]
	slantWallControlR_flag = 0;
 8004d26:	4b30      	ldr	r3, [pc, #192]	; (8004de8 <init_WallControl+0x184>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	701a      	strb	r2, [r3, #0]

	front_wall_break_90 = 0;
 8004d2c:	4b2f      	ldr	r3, [pc, #188]	; (8004dec <init_WallControl+0x188>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	701a      	strb	r2, [r3, #0]
	front_wall_break_45 = 0;
 8004d32:	4b2f      	ldr	r3, [pc, #188]	; (8004df0 <init_WallControl+0x18c>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	701a      	strb	r2, [r3, #0]
	front_wall_break_45slant = 0;
 8004d38:	4b2e      	ldr	r3, [pc, #184]	; (8004df4 <init_WallControl+0x190>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]

	g_sensor_max_fl = 0;
 8004d3e:	4b2e      	ldr	r3, [pc, #184]	; (8004df8 <init_WallControl+0x194>)
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr = 0;
 8004d46:	4b2d      	ldr	r3, [pc, #180]	; (8004dfc <init_WallControl+0x198>)
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]
	g_sensor_max_fl_slant = 0;
 8004d4e:	4b2c      	ldr	r3, [pc, #176]	; (8004e00 <init_WallControl+0x19c>)
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr_slant = 0;
 8004d56:	4b2b      	ldr	r3, [pc, #172]	; (8004e04 <init_WallControl+0x1a0>)
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
}
 8004d5e:	bf00      	nop
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	20000570 	.word	0x20000570
 8004d6c:	20000571 	.word	0x20000571
 8004d70:	20000573 	.word	0x20000573
 8004d74:	20000572 	.word	0x20000572
 8004d78:	20000575 	.word	0x20000575
 8004d7c:	20000576 	.word	0x20000576
 8004d80:	20000577 	.word	0x20000577
 8004d84:	20000578 	.word	0x20000578
 8004d88:	44c46000 	.word	0x44c46000
 8004d8c:	2000057c 	.word	0x2000057c
 8004d90:	448d4000 	.word	0x448d4000
 8004d94:	20000580 	.word	0x20000580
 8004d98:	420c0000 	.word	0x420c0000
 8004d9c:	20000598 	.word	0x20000598
 8004da0:	20000594 	.word	0x20000594
 8004da4:	200005a0 	.word	0x200005a0
 8004da8:	2000059c 	.word	0x2000059c
 8004dac:	200005a8 	.word	0x200005a8
 8004db0:	200005a4 	.word	0x200005a4
 8004db4:	200005b0 	.word	0x200005b0
 8004db8:	200005ac 	.word	0x200005ac
 8004dbc:	200005b8 	.word	0x200005b8
 8004dc0:	200005b4 	.word	0x200005b4
 8004dc4:	200005c0 	.word	0x200005c0
 8004dc8:	200005bc 	.word	0x200005bc
 8004dcc:	200005c8 	.word	0x200005c8
 8004dd0:	200005c4 	.word	0x200005c4
 8004dd4:	200005cc 	.word	0x200005cc
 8004dd8:	200005cd 	.word	0x200005cd
 8004ddc:	200005ce 	.word	0x200005ce
 8004de0:	200005cf 	.word	0x200005cf
 8004de4:	200005d0 	.word	0x200005d0
 8004de8:	200005d1 	.word	0x200005d1
 8004dec:	200005d2 	.word	0x200005d2
 8004df0:	200005d3 	.word	0x200005d3
 8004df4:	200005d4 	.word	0x200005d4
 8004df8:	200005d8 	.word	0x200005d8
 8004dfc:	200005dc 	.word	0x200005dc
 8004e00:	200005e0 	.word	0x200005e0
 8004e04:	200005e4 	.word	0x200005e4

08004e08 <calWallConrol>:


float calWallConrol(void) {
 8004e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e0c:	b0aa      	sub	sp, #168	; 0xa8
 8004e0e:	af00      	add	r7, sp, #0
	float PID_wall,PID_w;
	float sensor_gain_p, sensor_gain_d;
	float sensorWall_L, sensorWall_R;
	float wallcut_threshold_L, wallcut_threshold_R;

	if (highspeed_mode == 1) {
 8004e10:	4ba1      	ldr	r3, [pc, #644]	; (8005098 <calWallConrol+0x290>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d13d      	bne.n	8004e94 <calWallConrol+0x8c>
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_SHORT_L;
 8004e18:	4ba0      	ldr	r3, [pc, #640]	; (800509c <calWallConrol+0x294>)
 8004e1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_SHORT_R;
 8004e1e:	4ba0      	ldr	r3, [pc, #640]	; (80050a0 <calWallConrol+0x298>)
 8004e20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		if (straight.velocity > 2000) {
 8004e24:	4b9f      	ldr	r3, [pc, #636]	; (80050a4 <calWallConrol+0x29c>)
 8004e26:	edd3 7a00 	vldr	s15, [r3]
 8004e2a:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 80050a8 <calWallConrol+0x2a0>
 8004e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e36:	dd06      	ble.n	8004e46 <calWallConrol+0x3e>
			sensor_gain_p = SENSOR_GAIN_SHORT_P * 2000;
 8004e38:	4b9c      	ldr	r3, [pc, #624]	; (80050ac <calWallConrol+0x2a4>)
 8004e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * 2000;
 8004e3e:	4b9c      	ldr	r3, [pc, #624]	; (80050b0 <calWallConrol+0x2a8>)
 8004e40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e44:	e052      	b.n	8004eec <calWallConrol+0xe4>
		} else {
			sensor_gain_p = SENSOR_GAIN_SHORT_P * straight.velocity;
 8004e46:	4b97      	ldr	r3, [pc, #604]	; (80050a4 <calWallConrol+0x29c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fb fba4 	bl	8000598 <__aeabi_f2d>
 8004e50:	a389      	add	r3, pc, #548	; (adr r3, 8005078 <calWallConrol+0x270>)
 8004e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e56:	f7fb fbf7 	bl	8000648 <__aeabi_dmul>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4619      	mov	r1, r3
 8004e62:	f7fb fec9 	bl	8000bf8 <__aeabi_d2f>
 8004e66:	4603      	mov	r3, r0
 8004e68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * straight.velocity;
 8004e6c:	4b8d      	ldr	r3, [pc, #564]	; (80050a4 <calWallConrol+0x29c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fb fb91 	bl	8000598 <__aeabi_f2d>
 8004e76:	a382      	add	r3, pc, #520	; (adr r3, 8005080 <calWallConrol+0x278>)
 8004e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7c:	f7fb fbe4 	bl	8000648 <__aeabi_dmul>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4610      	mov	r0, r2
 8004e86:	4619      	mov	r1, r3
 8004e88:	f7fb feb6 	bl	8000bf8 <__aeabi_d2f>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e92:	e02b      	b.n	8004eec <calWallConrol+0xe4>
		}
	} else {
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_L;
 8004e94:	4b87      	ldr	r3, [pc, #540]	; (80050b4 <calWallConrol+0x2ac>)
 8004e96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_R;
 8004e9a:	4b87      	ldr	r3, [pc, #540]	; (80050b8 <calWallConrol+0x2b0>)
 8004e9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sensor_gain_p = SENSOR_GAIN_P * straight.velocity;
 8004ea0:	4b80      	ldr	r3, [pc, #512]	; (80050a4 <calWallConrol+0x29c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fb fb77 	bl	8000598 <__aeabi_f2d>
 8004eaa:	a377      	add	r3, pc, #476	; (adr r3, 8005088 <calWallConrol+0x280>)
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	f7fb fbca 	bl	8000648 <__aeabi_dmul>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4610      	mov	r0, r2
 8004eba:	4619      	mov	r1, r3
 8004ebc:	f7fb fe9c 	bl	8000bf8 <__aeabi_d2f>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		sensor_gain_d = SENSOR_GAIN_D * straight.velocity;
 8004ec6:	4b77      	ldr	r3, [pc, #476]	; (80050a4 <calWallConrol+0x29c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fb fb64 	bl	8000598 <__aeabi_f2d>
 8004ed0:	a36f      	add	r3, pc, #444	; (adr r3, 8005090 <calWallConrol+0x288>)
 8004ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed6:	f7fb fbb7 	bl	8000648 <__aeabi_dmul>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4610      	mov	r0, r2
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	f7fb fe89 	bl	8000bf8 <__aeabi_d2f>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	if (g_sensor[SENSOR_LEFT][0] < SENSOR_L_MIN) {
 8004eec:	4b73      	ldr	r3, [pc, #460]	; (80050bc <calWallConrol+0x2b4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f5b3 7f39 	cmp.w	r3, #740	; 0x2e4
 8004ef4:	da03      	bge.n	8004efe <calWallConrol+0xf6>
		sensorWall_L = SENSOR_L_MIN;
 8004ef6:	4b72      	ldr	r3, [pc, #456]	; (80050c0 <calWallConrol+0x2b8>)
 8004ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004efc:	e011      	b.n	8004f22 <calWallConrol+0x11a>
	} else if (g_sensor[SENSOR_LEFT][0] > SENSOR_L_MAX) {
 8004efe:	4b6f      	ldr	r3, [pc, #444]	; (80050bc <calWallConrol+0x2b4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8004f06:	4293      	cmp	r3, r2
 8004f08:	dd03      	ble.n	8004f12 <calWallConrol+0x10a>
		sensorWall_L = SENSOR_L_MAX;
 8004f0a:	4b6e      	ldr	r3, [pc, #440]	; (80050c4 <calWallConrol+0x2bc>)
 8004f0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f10:	e007      	b.n	8004f22 <calWallConrol+0x11a>
	} else {
		sensorWall_L = (float) (g_sensor[SENSOR_LEFT][0]);
 8004f12:	4b6a      	ldr	r3, [pc, #424]	; (80050bc <calWallConrol+0x2b4>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f1e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	}
	if (g_sensor[SENSOR_RIGHT][0] < SENSOR_R_MIN) {
 8004f22:	4b66      	ldr	r3, [pc, #408]	; (80050bc <calWallConrol+0x2b4>)
 8004f24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004f28:	f240 2289 	movw	r2, #649	; 0x289
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	dc03      	bgt.n	8004f38 <calWallConrol+0x130>
		sensorWall_R = SENSOR_R_MIN;
 8004f30:	4b65      	ldr	r3, [pc, #404]	; (80050c8 <calWallConrol+0x2c0>)
 8004f32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f36:	e012      	b.n	8004f5e <calWallConrol+0x156>
	} else if (g_sensor[SENSOR_RIGHT][0] > SENSOR_R_MAX) {
 8004f38:	4b60      	ldr	r3, [pc, #384]	; (80050bc <calWallConrol+0x2b4>)
 8004f3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004f3e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004f42:	dd03      	ble.n	8004f4c <calWallConrol+0x144>
		sensorWall_R = SENSOR_R_MAX;
 8004f44:	4b61      	ldr	r3, [pc, #388]	; (80050cc <calWallConrol+0x2c4>)
 8004f46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f4a:	e008      	b.n	8004f5e <calWallConrol+0x156>
	} else {
		sensorWall_R = (float) (g_sensor[SENSOR_RIGHT][0]);
 8004f4c:	4b5b      	ldr	r3, [pc, #364]	; (80050bc <calWallConrol+0x2b4>)
 8004f4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004f52:	ee07 3a90 	vmov	s15, r3
 8004f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f5a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
//
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;

	PID_wall = 0;
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PID_w = 0;
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	66bb      	str	r3, [r7, #104]	; 0x68
	if (g_WallControl_mode == 0) {
 8004f6c:	4b58      	ldr	r3, [pc, #352]	; (80050d0 <calWallConrol+0x2c8>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d11c      	bne.n	8004fae <calWallConrol+0x1a6>
		g_WallControlStatus = 0;
 8004f74:	4b57      	ldr	r3, [pc, #348]	; (80050d4 <calWallConrol+0x2cc>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	701a      	strb	r2, [r3, #0]
		StabilityCount_reset = 0;
 8004f7a:	4b57      	ldr	r3, [pc, #348]	; (80050d8 <calWallConrol+0x2d0>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
		StabilityCount_L = 0;
 8004f80:	4b56      	ldr	r3, [pc, #344]	; (80050dc <calWallConrol+0x2d4>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
		StabilityCount_R = 0;
 8004f86:	4b56      	ldr	r3, [pc, #344]	; (80050e0 <calWallConrol+0x2d8>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	701a      	strb	r2, [r3, #0]
		g_sensor_max_l = CENTER_L;
 8004f8c:	4b55      	ldr	r3, [pc, #340]	; (80050e4 <calWallConrol+0x2dc>)
 8004f8e:	4a56      	ldr	r2, [pc, #344]	; (80050e8 <calWallConrol+0x2e0>)
 8004f90:	601a      	str	r2, [r3, #0]
		g_sensor_max_r = CENTER_R;
 8004f92:	4b56      	ldr	r3, [pc, #344]	; (80050ec <calWallConrol+0x2e4>)
 8004f94:	4a56      	ldr	r2, [pc, #344]	; (80050f0 <calWallConrol+0x2e8>)
 8004f96:	601a      	str	r2, [r3, #0]
		g_skewer_displacement = SKEWER_LIMIT;
 8004f98:	4b56      	ldr	r3, [pc, #344]	; (80050f4 <calWallConrol+0x2ec>)
 8004f9a:	4a57      	ldr	r2, [pc, #348]	; (80050f8 <calWallConrol+0x2f0>)
 8004f9c:	601a      	str	r2, [r3, #0]
		PID_wall = 0;
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		pl_yellow_LED_off();
 8004fa6:	f002 f89f 	bl	80070e8 <pl_yellow_LED_off>
 8004faa:	f001 ba4a 	b.w	8006442 <calWallConrol+0x163a>

	} else if (g_WallControl_mode == 1) {
 8004fae:	4b48      	ldr	r3, [pc, #288]	; (80050d0 <calWallConrol+0x2c8>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	f040 82ed 	bne.w	8005592 <calWallConrol+0x78a>

		// 左壁の有無の判定
		if (((g_WallControlStatus >> 0) & 1) == 1) {
 8004fb8:	4b46      	ldr	r3, [pc, #280]	; (80050d4 <calWallConrol+0x2cc>)
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 809d 	beq.w	8005100 <calWallConrol+0x2f8>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L
 8004fc6:	4b3d      	ldr	r3, [pc, #244]	; (80050bc <calWallConrol+0x2b4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004fce:	db16      	blt.n	8004ffe <calWallConrol+0x1f6>
					|| fabs(g_sensor_diff[SENSOR_LEFT]) > wallcut_threshold_L) {
 8004fd0:	4b4a      	ldr	r3, [pc, #296]	; (80050fc <calWallConrol+0x2f4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fb facd 	bl	8000574 <__aeabi_i2d>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4690      	mov	r8, r2
 8004fe0:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8004fe4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004fe8:	f7fb fad6 	bl	8000598 <__aeabi_f2d>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4640      	mov	r0, r8
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	f7fb fdb8 	bl	8000b68 <__aeabi_dcmpgt>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d037      	beq.n	800506e <calWallConrol+0x266>
				g_WallControlStatus = g_WallControlStatus - 1;
 8004ffe:	4b35      	ldr	r3, [pc, #212]	; (80050d4 <calWallConrol+0x2cc>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	3b01      	subs	r3, #1
 8005004:	b2da      	uxtb	r2, r3
 8005006:	4b33      	ldr	r3, [pc, #204]	; (80050d4 <calWallConrol+0x2cc>)
 8005008:	701a      	strb	r2, [r3, #0]
				g_sensor_max_l = 0;
 800500a:	4b36      	ldr	r3, [pc, #216]	; (80050e4 <calWallConrol+0x2dc>)
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8005012:	2300      	movs	r3, #0
 8005014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005018:	e021      	b.n	800505e <calWallConrol+0x256>
					if (g_sensor_max_l < (float) (g_sensor[SENSOR_LEFT][i])) {
 800501a:	4a28      	ldr	r2, [pc, #160]	; (80050bc <calWallConrol+0x2b4>)
 800501c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005024:	ee07 3a90 	vmov	s15, r3
 8005028:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800502c:	4b2d      	ldr	r3, [pc, #180]	; (80050e4 <calWallConrol+0x2dc>)
 800502e:	edd3 7a00 	vldr	s15, [r3]
 8005032:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800503a:	dd0b      	ble.n	8005054 <calWallConrol+0x24c>
						g_sensor_max_l = (float) (g_sensor[SENSOR_LEFT][i]);
 800503c:	4a1f      	ldr	r2, [pc, #124]	; (80050bc <calWallConrol+0x2b4>)
 800503e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800504e:	4b25      	ldr	r3, [pc, #148]	; (80050e4 <calWallConrol+0x2dc>)
 8005050:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8005054:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005058:	3301      	adds	r3, #1
 800505a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800505e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005062:	2b13      	cmp	r3, #19
 8005064:	ddd9      	ble.n	800501a <calWallConrol+0x212>
					}
				}
				g_skewer_displacement = 0;
 8005066:	4b23      	ldr	r3, [pc, #140]	; (80050f4 <calWallConrol+0x2ec>)
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_L = 0;
 800506e:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <calWallConrol+0x2d4>)
 8005070:	2200      	movs	r2, #0
 8005072:	701a      	strb	r2, [r3, #0]
 8005074:	e066      	b.n	8005144 <calWallConrol+0x33c>
 8005076:	bf00      	nop
 8005078:	33333333 	.word	0x33333333
 800507c:	3fe33333 	.word	0x3fe33333
 8005080:	9999999a 	.word	0x9999999a
 8005084:	bfa99999 	.word	0xbfa99999
 8005088:	9999999a 	.word	0x9999999a
 800508c:	3fe99999 	.word	0x3fe99999
 8005090:	47ae147b 	.word	0x47ae147b
 8005094:	3f847ae1 	.word	0x3f847ae1
 8005098:	200007e8 	.word	0x200007e8
 800509c:	43340000 	.word	0x43340000
 80050a0:	43020000 	.word	0x43020000
 80050a4:	200004b8 	.word	0x200004b8
 80050a8:	44fa0000 	.word	0x44fa0000
 80050ac:	44960000 	.word	0x44960000
 80050b0:	c2c80000 	.word	0xc2c80000
 80050b4:	431d0000 	.word	0x431d0000
 80050b8:	42dc0000 	.word	0x42dc0000
 80050bc:	20000298 	.word	0x20000298
 80050c0:	44390000 	.word	0x44390000
 80050c4:	450fc000 	.word	0x450fc000
 80050c8:	44228000 	.word	0x44228000
 80050cc:	44e10000 	.word	0x44e10000
 80050d0:	20000570 	.word	0x20000570
 80050d4:	20000573 	.word	0x20000573
 80050d8:	20000575 	.word	0x20000575
 80050dc:	20000576 	.word	0x20000576
 80050e0:	20000577 	.word	0x20000577
 80050e4:	20000578 	.word	0x20000578
 80050e8:	44c46000 	.word	0x44c46000
 80050ec:	2000057c 	.word	0x2000057c
 80050f0:	448d4000 	.word	0x448d4000
 80050f4:	20000580 	.word	0x20000580
 80050f8:	420c0000 	.word	0x420c0000
 80050fc:	20000428 	.word	0x20000428
		} else {
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L
 8005100:	4bbd      	ldr	r3, [pc, #756]	; (80053f8 <calWallConrol+0x5f0>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005108:	dd1c      	ble.n	8005144 <calWallConrol+0x33c>
					&& fabs(g_sensor_diff[SENSOR_LEFT]) < wallcut_threshold_L) {
 800510a:	4bbc      	ldr	r3, [pc, #752]	; (80053fc <calWallConrol+0x5f4>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f7fb fa30 	bl	8000574 <__aeabi_i2d>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	4614      	mov	r4, r2
 800511a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800511e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005122:	f7fb fa39 	bl	8000598 <__aeabi_f2d>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4620      	mov	r0, r4
 800512c:	4629      	mov	r1, r5
 800512e:	f7fb fcfd 	bl	8000b2c <__aeabi_dcmplt>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <calWallConrol+0x33c>
				g_WallControlStatus = g_WallControlStatus + 1;
 8005138:	4bb1      	ldr	r3, [pc, #708]	; (8005400 <calWallConrol+0x5f8>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	3301      	adds	r3, #1
 800513e:	b2da      	uxtb	r2, r3
 8005140:	4baf      	ldr	r3, [pc, #700]	; (8005400 <calWallConrol+0x5f8>)
 8005142:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_L >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 1;
//			}
		}
		// 右壁の有無の判定
		if (((g_WallControlStatus >> 1) & 1) == 1) {
 8005144:	4bae      	ldr	r3, [pc, #696]	; (8005400 <calWallConrol+0x5f8>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	085b      	lsrs	r3, r3, #1
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d05b      	beq.n	800520c <calWallConrol+0x404>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R
 8005154:	4ba8      	ldr	r3, [pc, #672]	; (80053f8 <calWallConrol+0x5f0>)
 8005156:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800515a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800515e:	db17      	blt.n	8005190 <calWallConrol+0x388>
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8005160:	4ba6      	ldr	r3, [pc, #664]	; (80053fc <calWallConrol+0x5f4>)
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	4618      	mov	r0, r3
 8005166:	f7fb fa05 	bl	8000574 <__aeabi_i2d>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	613a      	str	r2, [r7, #16]
 8005170:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005174:	617b      	str	r3, [r7, #20]
							> wallcut_threshold_R) {
 8005176:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800517a:	f7fb fa0d 	bl	8000598 <__aeabi_f2d>
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8005182:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005186:	f7fb fcef 	bl	8000b68 <__aeabi_dcmpgt>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d039      	beq.n	8005204 <calWallConrol+0x3fc>
				g_WallControlStatus = g_WallControlStatus - 2;
 8005190:	4b9b      	ldr	r3, [pc, #620]	; (8005400 <calWallConrol+0x5f8>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	3b02      	subs	r3, #2
 8005196:	b2da      	uxtb	r2, r3
 8005198:	4b99      	ldr	r3, [pc, #612]	; (8005400 <calWallConrol+0x5f8>)
 800519a:	701a      	strb	r2, [r3, #0]
				g_sensor_max_r = 0;
 800519c:	4b99      	ldr	r3, [pc, #612]	; (8005404 <calWallConrol+0x5fc>)
 800519e:	f04f 0200 	mov.w	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 80051a4:	2300      	movs	r3, #0
 80051a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051aa:	e023      	b.n	80051f4 <calWallConrol+0x3ec>
					if (g_sensor_max_r < (float) (g_sensor[SENSOR_RIGHT][i])) {
 80051ac:	4a92      	ldr	r2, [pc, #584]	; (80053f8 <calWallConrol+0x5f0>)
 80051ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051b2:	3350      	adds	r3, #80	; 0x50
 80051b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b8:	ee07 3a90 	vmov	s15, r3
 80051bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051c0:	4b90      	ldr	r3, [pc, #576]	; (8005404 <calWallConrol+0x5fc>)
 80051c2:	edd3 7a00 	vldr	s15, [r3]
 80051c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ce:	dd0c      	ble.n	80051ea <calWallConrol+0x3e2>
						g_sensor_max_r = (float) (g_sensor[SENSOR_RIGHT][i]);
 80051d0:	4a89      	ldr	r2, [pc, #548]	; (80053f8 <calWallConrol+0x5f0>)
 80051d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051d6:	3350      	adds	r3, #80	; 0x50
 80051d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051dc:	ee07 3a90 	vmov	s15, r3
 80051e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051e4:	4b87      	ldr	r3, [pc, #540]	; (8005404 <calWallConrol+0x5fc>)
 80051e6:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80051ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051ee:	3301      	adds	r3, #1
 80051f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051f8:	2b13      	cmp	r3, #19
 80051fa:	ddd7      	ble.n	80051ac <calWallConrol+0x3a4>
					}
				}
				g_skewer_displacement = 0;
 80051fc:	4b82      	ldr	r3, [pc, #520]	; (8005408 <calWallConrol+0x600>)
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_R = 0;
 8005204:	4b81      	ldr	r3, [pc, #516]	; (800540c <calWallConrol+0x604>)
 8005206:	2200      	movs	r2, #0
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	e023      	b.n	8005254 <calWallConrol+0x44c>
		} else {
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R
 800520c:	4b7a      	ldr	r3, [pc, #488]	; (80053f8 <calWallConrol+0x5f0>)
 800520e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005212:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005216:	dd1d      	ble.n	8005254 <calWallConrol+0x44c>
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8005218:	4b78      	ldr	r3, [pc, #480]	; (80053fc <calWallConrol+0x5f4>)
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	4618      	mov	r0, r3
 800521e:	f7fb f9a9 	bl	8000574 <__aeabi_i2d>
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	60ba      	str	r2, [r7, #8]
 8005228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800522c:	60fb      	str	r3, [r7, #12]
							< wallcut_threshold_R) {
 800522e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8005232:	f7fb f9b1 	bl	8000598 <__aeabi_f2d>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 800523a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800523e:	f7fb fc75 	bl	8000b2c <__aeabi_dcmplt>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <calWallConrol+0x44c>
				//StabilityCount_R++;
				g_WallControlStatus = g_WallControlStatus + 2;			//安定消す
 8005248:	4b6d      	ldr	r3, [pc, #436]	; (8005400 <calWallConrol+0x5f8>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	3302      	adds	r3, #2
 800524e:	b2da      	uxtb	r2, r3
 8005250:	4b6b      	ldr	r3, [pc, #428]	; (8005400 <calWallConrol+0x5f8>)
 8005252:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_R >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 2;
//			}
		}

		switch (g_WallControlStatus) {
 8005254:	4b6a      	ldr	r3, [pc, #424]	; (8005400 <calWallConrol+0x5f8>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b03      	cmp	r3, #3
 800525a:	f201 80f2 	bhi.w	8006442 <calWallConrol+0x163a>
 800525e:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <calWallConrol+0x45c>)
 8005260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005264:	08005275 	.word	0x08005275
 8005268:	0800537b 	.word	0x0800537b
 800526c:	08005429 	.word	0x08005429
 8005270:	08005493 	.word	0x08005493
		case 0:			//両壁なし
			g_skewer_displacement += straight.velocity * INTERRUPT_TIME;
 8005274:	4b64      	ldr	r3, [pc, #400]	; (8005408 <calWallConrol+0x600>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4618      	mov	r0, r3
 800527a:	f7fb f98d 	bl	8000598 <__aeabi_f2d>
 800527e:	4604      	mov	r4, r0
 8005280:	460d      	mov	r5, r1
 8005282:	4b63      	ldr	r3, [pc, #396]	; (8005410 <calWallConrol+0x608>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f7fb f986 	bl	8000598 <__aeabi_f2d>
 800528c:	a356      	add	r3, pc, #344	; (adr r3, 80053e8 <calWallConrol+0x5e0>)
 800528e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005292:	f7fb f9d9 	bl	8000648 <__aeabi_dmul>
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	4620      	mov	r0, r4
 800529c:	4629      	mov	r1, r5
 800529e:	f7fb f81d 	bl	80002dc <__adddf3>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4610      	mov	r0, r2
 80052a8:	4619      	mov	r1, r3
 80052aa:	f7fb fca5 	bl	8000bf8 <__aeabi_d2f>
 80052ae:	4603      	mov	r3, r0
 80052b0:	4a55      	ldr	r2, [pc, #340]	; (8005408 <calWallConrol+0x600>)
 80052b2:	6013      	str	r3, [r2, #0]
			if (g_skewer_displacement < SKEWER_LIMIT) {
 80052b4:	4b54      	ldr	r3, [pc, #336]	; (8005408 <calWallConrol+0x600>)
 80052b6:	edd3 7a00 	vldr	s15, [r3]
 80052ba:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005414 <calWallConrol+0x60c>
 80052be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c6:	d52e      	bpl.n	8005326 <calWallConrol+0x51e>
				wall_normal.error = 0.7
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 80052c8:	4b53      	ldr	r3, [pc, #332]	; (8005418 <calWallConrol+0x610>)
 80052ca:	edd3 7a00 	vldr	s15, [r3]
 80052ce:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800541c <calWallConrol+0x614>
 80052d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052d6:	eef1 6a67 	vneg.f32	s13, s15
 80052da:	4b4f      	ldr	r3, [pc, #316]	; (8005418 <calWallConrol+0x610>)
 80052dc:	edd3 7a00 	vldr	s15, [r3]
 80052e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
								+ (g_sensor_max_r - CENTER_R) / g_sensor_max_r);
 80052e4:	4b47      	ldr	r3, [pc, #284]	; (8005404 <calWallConrol+0x5fc>)
 80052e6:	edd3 7a00 	vldr	s15, [r3]
 80052ea:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005424 <calWallConrol+0x61c>
 80052ee:	ee37 6ae6 	vsub.f32	s12, s15, s13
 80052f2:	4b44      	ldr	r3, [pc, #272]	; (8005404 <calWallConrol+0x5fc>)
 80052f4:	edd3 6a00 	vldr	s13, [r3]
 80052f8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80052fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005300:	ee17 0a90 	vmov	r0, s15
 8005304:	f7fb f948 	bl	8000598 <__aeabi_f2d>
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8005308:	a339      	add	r3, pc, #228	; (adr r3, 80053f0 <calWallConrol+0x5e8>)
 800530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530e:	f7fb f99b 	bl	8000648 <__aeabi_dmul>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4610      	mov	r0, r2
 8005318:	4619      	mov	r1, r3
 800531a:	f7fb fc6d 	bl	8000bf8 <__aeabi_d2f>
 800531e:	4603      	mov	r3, r0
				wall_normal.error = 0.7
 8005320:	4a3f      	ldr	r2, [pc, #252]	; (8005420 <calWallConrol+0x618>)
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	e003      	b.n	800532e <calWallConrol+0x526>
			} else {
				wall_normal.error = 0;
 8005326:	4b3e      	ldr	r3, [pc, #248]	; (8005420 <calWallConrol+0x618>)
 8005328:	f04f 0200 	mov.w	r2, #0
 800532c:	601a      	str	r2, [r3, #0]
			}
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 800532e:	4b3c      	ldr	r3, [pc, #240]	; (8005420 <calWallConrol+0x618>)
 8005330:	ed93 7a00 	vldr	s14, [r3]
 8005334:	4b3a      	ldr	r3, [pc, #232]	; (8005420 <calWallConrol+0x618>)
 8005336:	edd3 7a01 	vldr	s15, [r3, #4]
 800533a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800533e:	4b38      	ldr	r3, [pc, #224]	; (8005420 <calWallConrol+0x618>)
 8005340:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005344:	4b36      	ldr	r3, [pc, #216]	; (8005420 <calWallConrol+0x618>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a35      	ldr	r2, [pc, #212]	; (8005420 <calWallConrol+0x618>)
 800534a:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 800534c:	4b34      	ldr	r3, [pc, #208]	; (8005420 <calWallConrol+0x618>)
 800534e:	ed93 7a00 	vldr	s14, [r3]
 8005352:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005356:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 800535a:	4b31      	ldr	r3, [pc, #196]	; (8005420 <calWallConrol+0x618>)
 800535c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005360:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005364:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800536c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_count(0);
 8005370:	2000      	movs	r0, #0
 8005372:	f001 ff2d 	bl	80071d0 <pl_yellow_LED_count>
			break;
 8005376:	f001 b864 	b.w	8006442 <calWallConrol+0x163a>
		case 1:			//左壁のみ
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 800537a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800537e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800541c <calWallConrol+0x614>
 8005382:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005386:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800538a:	ee67 6a87 	vmul.f32	s13, s15, s14
					/ (float) (sensorWall_L));
 800538e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005392:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8005396:	4b22      	ldr	r3, [pc, #136]	; (8005420 <calWallConrol+0x618>)
 8005398:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 800539c:	4b20      	ldr	r3, [pc, #128]	; (8005420 <calWallConrol+0x618>)
 800539e:	ed93 7a00 	vldr	s14, [r3]
 80053a2:	4b1f      	ldr	r3, [pc, #124]	; (8005420 <calWallConrol+0x618>)
 80053a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80053a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053ac:	4b1c      	ldr	r3, [pc, #112]	; (8005420 <calWallConrol+0x618>)
 80053ae:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80053b2:	4b1b      	ldr	r3, [pc, #108]	; (8005420 <calWallConrol+0x618>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1a      	ldr	r2, [pc, #104]	; (8005420 <calWallConrol+0x618>)
 80053b8:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80053ba:	4b19      	ldr	r3, [pc, #100]	; (8005420 <calWallConrol+0x618>)
 80053bc:	ed93 7a00 	vldr	s14, [r3]
 80053c0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80053c4:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80053c8:	4b15      	ldr	r3, [pc, #84]	; (8005420 <calWallConrol+0x618>)
 80053ca:	edd3 6a02 	vldr	s13, [r3, #8]
 80053ce:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80053d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 80053d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053da:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-2 * (float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0]));
			pl_yellow_LED_count(240);
 80053de:	20f0      	movs	r0, #240	; 0xf0
 80053e0:	f001 fef6 	bl	80071d0 <pl_yellow_LED_count>
			break;
 80053e4:	f001 b82d 	b.w	8006442 <calWallConrol+0x163a>
 80053e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80053ec:	3f50624d 	.word	0x3f50624d
 80053f0:	66666666 	.word	0x66666666
 80053f4:	3fe66666 	.word	0x3fe66666
 80053f8:	20000298 	.word	0x20000298
 80053fc:	20000428 	.word	0x20000428
 8005400:	20000573 	.word	0x20000573
 8005404:	2000057c 	.word	0x2000057c
 8005408:	20000580 	.word	0x20000580
 800540c:	20000577 	.word	0x20000577
 8005410:	200004b8 	.word	0x200004b8
 8005414:	420c0000 	.word	0x420c0000
 8005418:	20000578 	.word	0x20000578
 800541c:	44c46000 	.word	0x44c46000
 8005420:	2000054c 	.word	0x2000054c
 8005424:	448d4000 	.word	0x448d4000
		case 2:			//右壁のみ
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005428:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800542c:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8005424 <calWallConrol+0x61c>
 8005430:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005434:	ee77 6aa7 	vadd.f32	s13, s15, s15
					/ (float) (sensorWall_R));
 8005438:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800543c:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005440:	4ba9      	ldr	r3, [pc, #676]	; (80056e8 <calWallConrol+0x8e0>)
 8005442:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005446:	4ba8      	ldr	r3, [pc, #672]	; (80056e8 <calWallConrol+0x8e0>)
 8005448:	ed93 7a00 	vldr	s14, [r3]
 800544c:	4ba6      	ldr	r3, [pc, #664]	; (80056e8 <calWallConrol+0x8e0>)
 800544e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005456:	4ba4      	ldr	r3, [pc, #656]	; (80056e8 <calWallConrol+0x8e0>)
 8005458:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 800545c:	4ba2      	ldr	r3, [pc, #648]	; (80056e8 <calWallConrol+0x8e0>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4aa1      	ldr	r2, [pc, #644]	; (80056e8 <calWallConrol+0x8e0>)
 8005462:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005464:	4ba0      	ldr	r3, [pc, #640]	; (80056e8 <calWallConrol+0x8e0>)
 8005466:	ed93 7a00 	vldr	s14, [r3]
 800546a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800546e:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005472:	4b9d      	ldr	r3, [pc, #628]	; (80056e8 <calWallConrol+0x8e0>)
 8005474:	edd3 6a02 	vldr	s13, [r3, #8]
 8005478:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800547c:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005484:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (2 * (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(15);
 8005488:	200f      	movs	r0, #15
 800548a:	f001 fea1 	bl	80071d0 <pl_yellow_LED_count>
			break;
 800548e:	f000 bfd8 	b.w	8006442 <calWallConrol+0x163a>
		case 3:			//両壁あり
			wall_normal.error =
					(-(float) (sensorWall_L - CENTER_L) / (float) (sensorWall_L)
 8005492:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005496:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80056ec <calWallConrol+0x8e4>
 800549a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800549e:	eef1 6a67 	vneg.f32	s13, s15
 80054a2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80054a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
							+ (float) (sensorWall_R - CENTER_R)
 80054aa:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80054ae:	eddf 6a90 	vldr	s13, [pc, #576]	; 80056f0 <calWallConrol+0x8e8>
 80054b2:	ee37 6ae6 	vsub.f32	s12, s15, s13
									/ (float) (sensorWall_R));
 80054b6:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80054ba:	eec6 7a26 	vdiv.f32	s15, s12, s13
							+ (float) (sensorWall_R - CENTER_R)
 80054be:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_normal.error =
 80054c2:	4b89      	ldr	r3, [pc, #548]	; (80056e8 <calWallConrol+0x8e0>)
 80054c4:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 80054c8:	4b87      	ldr	r3, [pc, #540]	; (80056e8 <calWallConrol+0x8e0>)
 80054ca:	ed93 7a00 	vldr	s14, [r3]
 80054ce:	4b86      	ldr	r3, [pc, #536]	; (80056e8 <calWallConrol+0x8e0>)
 80054d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80054d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054d8:	4b83      	ldr	r3, [pc, #524]	; (80056e8 <calWallConrol+0x8e0>)
 80054da:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80054de:	4b82      	ldr	r3, [pc, #520]	; (80056e8 <calWallConrol+0x8e0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a81      	ldr	r2, [pc, #516]	; (80056e8 <calWallConrol+0x8e0>)
 80054e4:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80054e6:	4b80      	ldr	r3, [pc, #512]	; (80056e8 <calWallConrol+0x8e0>)
 80054e8:	ed93 7a00 	vldr	s14, [r3]
 80054ec:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80054f0:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80054f4:	4b7c      	ldr	r3, [pc, #496]	; (80056e8 <calWallConrol+0x8e0>)
 80054f6:	edd3 6a02 	vldr	s13, [r3, #8]
 80054fa:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80054fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005506:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-(float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0])
//							+ (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(255);
 800550a:	20ff      	movs	r0, #255	; 0xff
 800550c:	f001 fe60 	bl	80071d0 <pl_yellow_LED_count>
			if ((fabs(g_sensor_diff[SENSOR_LEFT]) < 30)
 8005510:	4b78      	ldr	r3, [pc, #480]	; (80056f4 <calWallConrol+0x8ec>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	f7fb f82d 	bl	8000574 <__aeabi_i2d>
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	603a      	str	r2, [r7, #0]
 8005520:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005524:	607b      	str	r3, [r7, #4]
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	4b73      	ldr	r3, [pc, #460]	; (80056f8 <calWallConrol+0x8f0>)
 800552c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005530:	f7fb fafc 	bl	8000b2c <__aeabi_dcmplt>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d01a      	beq.n	8005570 <calWallConrol+0x768>
					&& (fabs(g_sensor_diff[SENSOR_RIGHT]) < 30)) {
 800553a:	4b6e      	ldr	r3, [pc, #440]	; (80056f4 <calWallConrol+0x8ec>)
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	4618      	mov	r0, r3
 8005540:	f7fb f818 	bl	8000574 <__aeabi_i2d>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4692      	mov	sl, r2
 800554a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	4b69      	ldr	r3, [pc, #420]	; (80056f8 <calWallConrol+0x8f0>)
 8005554:	4650      	mov	r0, sl
 8005556:	4659      	mov	r1, fp
 8005558:	f7fb fae8 	bl	8000b2c <__aeabi_dcmplt>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d006      	beq.n	8005570 <calWallConrol+0x768>
				StabilityCount_reset++;
 8005562:	4b66      	ldr	r3, [pc, #408]	; (80056fc <calWallConrol+0x8f4>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	3301      	adds	r3, #1
 8005568:	b2da      	uxtb	r2, r3
 800556a:	4b64      	ldr	r3, [pc, #400]	; (80056fc <calWallConrol+0x8f4>)
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	e002      	b.n	8005576 <calWallConrol+0x76e>
			} else {
				StabilityCount_reset = 0;
 8005570:	4b62      	ldr	r3, [pc, #392]	; (80056fc <calWallConrol+0x8f4>)
 8005572:	2200      	movs	r2, #0
 8005574:	701a      	strb	r2, [r3, #0]
			}
			if (StabilityCount_reset >= 25) {
 8005576:	4b61      	ldr	r3, [pc, #388]	; (80056fc <calWallConrol+0x8f4>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b18      	cmp	r3, #24
 800557c:	f240 8760 	bls.w	8006440 <calWallConrol+0x1638>
				Gyro.sigma_error = 0;
 8005580:	4b5f      	ldr	r3, [pc, #380]	; (8005700 <calWallConrol+0x8f8>)
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	609a      	str	r2, [r3, #8]
				StabilityCount_reset = 0;
 8005588:	4b5c      	ldr	r3, [pc, #368]	; (80056fc <calWallConrol+0x8f4>)
 800558a:	2200      	movs	r2, #0
 800558c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800558e:	f000 bf57 	b.w	8006440 <calWallConrol+0x1638>
		}
//		if (highspeed_mode == 1) {
//			PID_wall = PID_wall * 0.7;
//		}

	} else if (g_WallControl_mode == 2) {
 8005592:	4b5c      	ldr	r3, [pc, #368]	; (8005704 <calWallConrol+0x8fc>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b02      	cmp	r3, #2
 8005598:	f000 8753 	beq.w	8006442 <calWallConrol+0x163a>
// 斜めの制御


	} else if (g_WallControl_mode == 3) {
 800559c:	4b59      	ldr	r3, [pc, #356]	; (8005704 <calWallConrol+0x8fc>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	f040 874e 	bne.w	8006442 <calWallConrol+0x163a>
		//g_WallControlStatus=3;
		float CenterSlantR, CenterSlantL;
		float coefficientR[4];
		float coefficientL[4];
		float sensor_gain_slant90_p, sensor_gain_slant90_d;
		if (straight.velocity > 2000) {
 80055a6:	4b58      	ldr	r3, [pc, #352]	; (8005708 <calWallConrol+0x900>)
 80055a8:	edd3 7a00 	vldr	s15, [r3]
 80055ac:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800570c <calWallConrol+0x904>
 80055b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b8:	dd05      	ble.n	80055c6 <calWallConrol+0x7be>
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * 2000;
 80055ba:	4b55      	ldr	r3, [pc, #340]	; (8005710 <calWallConrol+0x908>)
 80055bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * 2000;
 80055c0:	4b54      	ldr	r3, [pc, #336]	; (8005714 <calWallConrol+0x90c>)
 80055c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055c4:	e024      	b.n	8005610 <calWallConrol+0x808>
		} else {
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * straight.velocity;
 80055c6:	4b50      	ldr	r3, [pc, #320]	; (8005708 <calWallConrol+0x900>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fa ffe4 	bl	8000598 <__aeabi_f2d>
 80055d0:	a341      	add	r3, pc, #260	; (adr r3, 80056d8 <calWallConrol+0x8d0>)
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f7fb f837 	bl	8000648 <__aeabi_dmul>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4610      	mov	r0, r2
 80055e0:	4619      	mov	r1, r3
 80055e2:	f7fb fb09 	bl	8000bf8 <__aeabi_d2f>
 80055e6:	4603      	mov	r3, r0
 80055e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * straight.velocity;
 80055ec:	4b46      	ldr	r3, [pc, #280]	; (8005708 <calWallConrol+0x900>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fa ffd1 	bl	8000598 <__aeabi_f2d>
 80055f6:	a33a      	add	r3, pc, #232	; (adr r3, 80056e0 <calWallConrol+0x8d8>)
 80055f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fc:	f7fb f824 	bl	8000648 <__aeabi_dmul>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4610      	mov	r0, r2
 8005606:	4619      	mov	r1, r3
 8005608:	f7fb faf6 	bl	8000bf8 <__aeabi_d2f>
 800560c:	4603      	mov	r3, r0
 800560e:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if (NoWallDisplacementR45slant > AREAMIN_R0
 8005610:	4b41      	ldr	r3, [pc, #260]	; (8005718 <calWallConrol+0x910>)
 8005612:	edd3 7a00 	vldr	s15, [r3]
 8005616:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800561a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800561e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005622:	dd12      	ble.n	800564a <calWallConrol+0x842>
				&& NoWallDisplacementR45slant <= AREAMAX_R0) {
 8005624:	4b3c      	ldr	r3, [pc, #240]	; (8005718 <calWallConrol+0x910>)
 8005626:	edd3 7a00 	vldr	s15, [r3]
 800562a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800562e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005636:	d808      	bhi.n	800564a <calWallConrol+0x842>
			coefficientR[0] = COEFFICIENT_R0_0;
 8005638:	4b38      	ldr	r3, [pc, #224]	; (800571c <calWallConrol+0x914>)
 800563a:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R0_1;
 800563c:	4b38      	ldr	r3, [pc, #224]	; (8005720 <calWallConrol+0x918>)
 800563e:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R0_2;
 8005640:	4b38      	ldr	r3, [pc, #224]	; (8005724 <calWallConrol+0x91c>)
 8005642:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R0_3;
 8005644:	4b38      	ldr	r3, [pc, #224]	; (8005728 <calWallConrol+0x920>)
 8005646:	657b      	str	r3, [r7, #84]	; 0x54
 8005648:	e0a5      	b.n	8005796 <calWallConrol+0x98e>
		} else if (NoWallDisplacementR45slant > AREAMIN_R1
 800564a:	4b33      	ldr	r3, [pc, #204]	; (8005718 <calWallConrol+0x910>)
 800564c:	edd3 7a00 	vldr	s15, [r3]
 8005650:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800572c <calWallConrol+0x924>
 8005654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800565c:	dd12      	ble.n	8005684 <calWallConrol+0x87c>
				&& NoWallDisplacementR45slant <= AREAMAX_R1) {
 800565e:	4b2e      	ldr	r3, [pc, #184]	; (8005718 <calWallConrol+0x910>)
 8005660:	edd3 7a00 	vldr	s15, [r3]
 8005664:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005730 <calWallConrol+0x928>
 8005668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800566c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005670:	d808      	bhi.n	8005684 <calWallConrol+0x87c>
			coefficientR[0] = COEFFICIENT_R1_0;
 8005672:	4b30      	ldr	r3, [pc, #192]	; (8005734 <calWallConrol+0x92c>)
 8005674:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R1_1;
 8005676:	4b30      	ldr	r3, [pc, #192]	; (8005738 <calWallConrol+0x930>)
 8005678:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R1_2;
 800567a:	4b30      	ldr	r3, [pc, #192]	; (800573c <calWallConrol+0x934>)
 800567c:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R1_3;
 800567e:	4b30      	ldr	r3, [pc, #192]	; (8005740 <calWallConrol+0x938>)
 8005680:	657b      	str	r3, [r7, #84]	; 0x54
 8005682:	e088      	b.n	8005796 <calWallConrol+0x98e>
		} else if (NoWallDisplacementR45slant > AREAMIN_R2
 8005684:	4b24      	ldr	r3, [pc, #144]	; (8005718 <calWallConrol+0x910>)
 8005686:	edd3 7a00 	vldr	s15, [r3]
 800568a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005744 <calWallConrol+0x93c>
 800568e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005696:	dd12      	ble.n	80056be <calWallConrol+0x8b6>
				&& NoWallDisplacementR45slant <= AREAMAX_R2) {
 8005698:	4b1f      	ldr	r3, [pc, #124]	; (8005718 <calWallConrol+0x910>)
 800569a:	edd3 7a00 	vldr	s15, [r3]
 800569e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005748 <calWallConrol+0x940>
 80056a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056aa:	d808      	bhi.n	80056be <calWallConrol+0x8b6>
			coefficientR[0] = COEFFICIENT_R2_0;
 80056ac:	4b27      	ldr	r3, [pc, #156]	; (800574c <calWallConrol+0x944>)
 80056ae:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R2_1;
 80056b0:	4b27      	ldr	r3, [pc, #156]	; (8005750 <calWallConrol+0x948>)
 80056b2:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R2_2;
 80056b4:	4b27      	ldr	r3, [pc, #156]	; (8005754 <calWallConrol+0x94c>)
 80056b6:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R2_3;
 80056b8:	4b27      	ldr	r3, [pc, #156]	; (8005758 <calWallConrol+0x950>)
 80056ba:	657b      	str	r3, [r7, #84]	; 0x54
 80056bc:	e06b      	b.n	8005796 <calWallConrol+0x98e>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R) {
 80056be:	4b27      	ldr	r3, [pc, #156]	; (800575c <calWallConrol+0x954>)
 80056c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80056c4:	2b5a      	cmp	r3, #90	; 0x5a
 80056c6:	dd4d      	ble.n	8005764 <calWallConrol+0x95c>
				g_WallControlStatus = g_WallControlStatus | (1 << 1);
 80056c8:	4b25      	ldr	r3, [pc, #148]	; (8005760 <calWallConrol+0x958>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	f043 0302 	orr.w	r3, r3, #2
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	4b23      	ldr	r3, [pc, #140]	; (8005760 <calWallConrol+0x958>)
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	e04c      	b.n	8005772 <calWallConrol+0x96a>
 80056d8:	66666666 	.word	0x66666666
 80056dc:	3fee6666 	.word	0x3fee6666
 80056e0:	47ae147b 	.word	0x47ae147b
 80056e4:	bfb47ae1 	.word	0xbfb47ae1
 80056e8:	2000054c 	.word	0x2000054c
 80056ec:	44c46000 	.word	0x44c46000
 80056f0:	448d4000 	.word	0x448d4000
 80056f4:	20000428 	.word	0x20000428
 80056f8:	403e0000 	.word	0x403e0000
 80056fc:	20000575 	.word	0x20000575
 8005700:	20000524 	.word	0x20000524
 8005704:	20000570 	.word	0x20000570
 8005708:	200004b8 	.word	0x200004b8
 800570c:	44fa0000 	.word	0x44fa0000
 8005710:	44ed8000 	.word	0x44ed8000
 8005714:	c3200000 	.word	0xc3200000
 8005718:	200005bc 	.word	0x200005bc
 800571c:	44129ffe 	.word	0x44129ffe
 8005720:	40a2c583 	.word	0x40a2c583
 8005724:	3efbe9c3 	.word	0x3efbe9c3
 8005728:	bbad03da 	.word	0xbbad03da
 800572c:	428c0000 	.word	0x428c0000
 8005730:	42f00000 	.word	0x42f00000
 8005734:	45738e20 	.word	0x45738e20
 8005738:	c2ab5142 	.word	0xc2ab5142
 800573c:	3f2f9723 	.word	0x3f2f9723
 8005740:	bafa0014 	.word	0xbafa0014
 8005744:	43480000 	.word	0x43480000
 8005748:	43700000 	.word	0x43700000
 800574c:	c5bb25b2 	.word	0xc5bb25b2
 8005750:	42b29538 	.word	0x42b29538
 8005754:	bee0db0f 	.word	0xbee0db0f
 8005758:	3a42c5e3 	.word	0x3a42c5e3
 800575c:	20000298 	.word	0x20000298
 8005760:	20000573 	.word	0x20000573
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 8005764:	4b79      	ldr	r3, [pc, #484]	; (800594c <calWallConrol+0xb44>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	f023 0302 	bic.w	r3, r3, #2
 800576c:	b2da      	uxtb	r2, r3
 800576e:	4b77      	ldr	r3, [pc, #476]	; (800594c <calWallConrol+0xb44>)
 8005770:	701a      	strb	r2, [r3, #0]
			}
			coefficientR[0] = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005772:	4b77      	ldr	r3, [pc, #476]	; (8005950 <calWallConrol+0xb48>)
 8005774:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005778:	ee07 3a90 	vmov	s15, r3
 800577c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005780:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			coefficientR[1] = 0;
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = 0;
 800578a:	f04f 0300 	mov.w	r3, #0
 800578e:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = 0;
 8005790:	f04f 0300 	mov.w	r3, #0
 8005794:	657b      	str	r3, [r7, #84]	; 0x54
		}

		if (NoWallDisplacementL45slant > AREAMIN_L0
 8005796:	4b6f      	ldr	r3, [pc, #444]	; (8005954 <calWallConrol+0xb4c>)
 8005798:	edd3 7a00 	vldr	s15, [r3]
 800579c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80057a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a8:	dd12      	ble.n	80057d0 <calWallConrol+0x9c8>
				&& NoWallDisplacementL45slant <= AREAMAX_L0) {
 80057aa:	4b6a      	ldr	r3, [pc, #424]	; (8005954 <calWallConrol+0xb4c>)
 80057ac:	edd3 7a00 	vldr	s15, [r3]
 80057b0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80057b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057bc:	d808      	bhi.n	80057d0 <calWallConrol+0x9c8>
			coefficientL[0] = COEFFICIENT_L0_0;
 80057be:	4b66      	ldr	r3, [pc, #408]	; (8005958 <calWallConrol+0xb50>)
 80057c0:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L0_1;
 80057c2:	4b66      	ldr	r3, [pc, #408]	; (800595c <calWallConrol+0xb54>)
 80057c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L0_2;
 80057c6:	4b66      	ldr	r3, [pc, #408]	; (8005960 <calWallConrol+0xb58>)
 80057c8:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L0_3;
 80057ca:	4b66      	ldr	r3, [pc, #408]	; (8005964 <calWallConrol+0xb5c>)
 80057cc:	647b      	str	r3, [r7, #68]	; 0x44
 80057ce:	e05d      	b.n	800588c <calWallConrol+0xa84>
		} else if (NoWallDisplacementL45slant > AREAMIN_L1
 80057d0:	4b60      	ldr	r3, [pc, #384]	; (8005954 <calWallConrol+0xb4c>)
 80057d2:	edd3 7a00 	vldr	s15, [r3]
 80057d6:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005968 <calWallConrol+0xb60>
 80057da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057e2:	dd12      	ble.n	800580a <calWallConrol+0xa02>
				&& NoWallDisplacementL45slant <= AREAMAX_L1) {
 80057e4:	4b5b      	ldr	r3, [pc, #364]	; (8005954 <calWallConrol+0xb4c>)
 80057e6:	edd3 7a00 	vldr	s15, [r3]
 80057ea:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800596c <calWallConrol+0xb64>
 80057ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057f6:	d808      	bhi.n	800580a <calWallConrol+0xa02>
			coefficientL[0] = COEFFICIENT_L1_0;
 80057f8:	4b5d      	ldr	r3, [pc, #372]	; (8005970 <calWallConrol+0xb68>)
 80057fa:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L1_1;
 80057fc:	4b5d      	ldr	r3, [pc, #372]	; (8005974 <calWallConrol+0xb6c>)
 80057fe:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L1_2;
 8005800:	4b5d      	ldr	r3, [pc, #372]	; (8005978 <calWallConrol+0xb70>)
 8005802:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L1_3;
 8005804:	4b5d      	ldr	r3, [pc, #372]	; (800597c <calWallConrol+0xb74>)
 8005806:	647b      	str	r3, [r7, #68]	; 0x44
 8005808:	e040      	b.n	800588c <calWallConrol+0xa84>
		} else if (NoWallDisplacementL45slant > AREAMIN_L2
 800580a:	4b52      	ldr	r3, [pc, #328]	; (8005954 <calWallConrol+0xb4c>)
 800580c:	edd3 7a00 	vldr	s15, [r3]
 8005810:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8005980 <calWallConrol+0xb78>
 8005814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800581c:	dd12      	ble.n	8005844 <calWallConrol+0xa3c>
				&& NoWallDisplacementL45slant <= AREAMAX_L2) {
 800581e:	4b4d      	ldr	r3, [pc, #308]	; (8005954 <calWallConrol+0xb4c>)
 8005820:	edd3 7a00 	vldr	s15, [r3]
 8005824:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8005984 <calWallConrol+0xb7c>
 8005828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800582c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005830:	d808      	bhi.n	8005844 <calWallConrol+0xa3c>
			coefficientL[0] = COEFFICIENT_L2_0;
 8005832:	4b55      	ldr	r3, [pc, #340]	; (8005988 <calWallConrol+0xb80>)
 8005834:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L2_1;
 8005836:	4b55      	ldr	r3, [pc, #340]	; (800598c <calWallConrol+0xb84>)
 8005838:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L2_2;
 800583a:	4b55      	ldr	r3, [pc, #340]	; (8005990 <calWallConrol+0xb88>)
 800583c:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L2_3;
 800583e:	4b55      	ldr	r3, [pc, #340]	; (8005994 <calWallConrol+0xb8c>)
 8005840:	647b      	str	r3, [r7, #68]	; 0x44
 8005842:	e023      	b.n	800588c <calWallConrol+0xa84>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L) {
 8005844:	4b42      	ldr	r3, [pc, #264]	; (8005950 <calWallConrol+0xb48>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b5a      	cmp	r3, #90	; 0x5a
 800584a:	dd07      	ble.n	800585c <calWallConrol+0xa54>
				g_WallControlStatus = g_WallControlStatus | (1 << 0);
 800584c:	4b3f      	ldr	r3, [pc, #252]	; (800594c <calWallConrol+0xb44>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	f043 0301 	orr.w	r3, r3, #1
 8005854:	b2da      	uxtb	r2, r3
 8005856:	4b3d      	ldr	r3, [pc, #244]	; (800594c <calWallConrol+0xb44>)
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	e006      	b.n	800586a <calWallConrol+0xa62>
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 800585c:	4b3b      	ldr	r3, [pc, #236]	; (800594c <calWallConrol+0xb44>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	f023 0301 	bic.w	r3, r3, #1
 8005864:	b2da      	uxtb	r2, r3
 8005866:	4b39      	ldr	r3, [pc, #228]	; (800594c <calWallConrol+0xb44>)
 8005868:	701a      	strb	r2, [r3, #0]
			}
			coefficientL[0] = (float) (g_sensor[SENSOR_LEFT][0]);
 800586a:	4b39      	ldr	r3, [pc, #228]	; (8005950 <calWallConrol+0xb48>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	ee07 3a90 	vmov	s15, r3
 8005872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005876:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			coefficientL[1] = 0;
 800587a:	f04f 0300 	mov.w	r3, #0
 800587e:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = 0;
 8005880:	f04f 0300 	mov.w	r3, #0
 8005884:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = 0;
 8005886:	f04f 0300 	mov.w	r3, #0
 800588a:	647b      	str	r3, [r7, #68]	; 0x44
		}

		CenterSlantR = coefficientR[0]
 800588c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
				+ coefficientR[1] * NoWallDisplacementR45slant
 8005890:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8005894:	4b40      	ldr	r3, [pc, #256]	; (8005998 <calWallConrol+0xb90>)
 8005896:	edd3 7a00 	vldr	s15, [r3]
 800589a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800589e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 80058a2:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80058a6:	4b3c      	ldr	r3, [pc, #240]	; (8005998 <calWallConrol+0xb90>)
 80058a8:	edd3 7a00 	vldr	s15, [r3]
 80058ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80058b0:	4b39      	ldr	r3, [pc, #228]	; (8005998 <calWallConrol+0xb90>)
 80058b2:	edd3 7a00 	vldr	s15, [r3]
 80058b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 80058ba:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[3] * NoWallDisplacementR45slant
 80058be:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80058c2:	4b35      	ldr	r3, [pc, #212]	; (8005998 <calWallConrol+0xb90>)
 80058c4:	edd3 7a00 	vldr	s15, [r3]
 80058c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80058cc:	4b32      	ldr	r3, [pc, #200]	; (8005998 <calWallConrol+0xb90>)
 80058ce:	edd3 7a00 	vldr	s15, [r3]
 80058d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 80058d6:	4b30      	ldr	r3, [pc, #192]	; (8005998 <calWallConrol+0xb90>)
 80058d8:	edd3 7a00 	vldr	s15, [r3]
 80058dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR = coefficientR[0]
 80058e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058e4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		CenterSlantL = coefficientL[0]
 80058e8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
				+ coefficientL[1] * NoWallDisplacementL45slant
 80058ec:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80058f0:	4b18      	ldr	r3, [pc, #96]	; (8005954 <calWallConrol+0xb4c>)
 80058f2:	edd3 7a00 	vldr	s15, [r3]
 80058f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058fa:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 80058fe:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005902:	4b14      	ldr	r3, [pc, #80]	; (8005954 <calWallConrol+0xb4c>)
 8005904:	edd3 7a00 	vldr	s15, [r3]
 8005908:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 800590c:	4b11      	ldr	r3, [pc, #68]	; (8005954 <calWallConrol+0xb4c>)
 800590e:	edd3 7a00 	vldr	s15, [r3]
 8005912:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 8005916:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[3] * NoWallDisplacementL45slant
 800591a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800591e:	4b0d      	ldr	r3, [pc, #52]	; (8005954 <calWallConrol+0xb4c>)
 8005920:	edd3 7a00 	vldr	s15, [r3]
 8005924:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005928:	4b0a      	ldr	r3, [pc, #40]	; (8005954 <calWallConrol+0xb4c>)
 800592a:	edd3 7a00 	vldr	s15, [r3]
 800592e:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8005932:	4b08      	ldr	r3, [pc, #32]	; (8005954 <calWallConrol+0xb4c>)
 8005934:	edd3 7a00 	vldr	s15, [r3]
 8005938:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL = coefficientL[0]
 800593c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005940:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		for (int j = 11; j >= 1; j--) {
 8005944:	230b      	movs	r3, #11
 8005946:	67bb      	str	r3, [r7, #120]	; 0x78
 8005948:	e041      	b.n	80059ce <calWallConrol+0xbc6>
 800594a:	bf00      	nop
 800594c:	20000573 	.word	0x20000573
 8005950:	20000298 	.word	0x20000298
 8005954:	200005c0 	.word	0x200005c0
 8005958:	4397e871 	.word	0x4397e871
 800595c:	40c0cba7 	.word	0x40c0cba7
 8005960:	bdb7434c 	.word	0xbdb7434c
 8005964:	3b3ec2ab 	.word	0x3b3ec2ab
 8005968:	428c0000 	.word	0x428c0000
 800596c:	42f00000 	.word	0x42f00000
 8005970:	45484ed8 	.word	0x45484ed8
 8005974:	c293aa7b 	.word	0xc293aa7b
 8005978:	3f20dbb7 	.word	0x3f20dbb7
 800597c:	baf37bdb 	.word	0xbaf37bdb
 8005980:	43480000 	.word	0x43480000
 8005984:	43700000 	.word	0x43700000
 8005988:	44c15b4c 	.word	0x44c15b4c
 800598c:	c1945e93 	.word	0xc1945e93
 8005990:	3d9b18cf 	.word	0x3d9b18cf
 8005994:	b8baa583 	.word	0xb8baa583
 8005998:	200005bc 	.word	0x200005bc
			g_CenterSlantR90[j] = g_CenterSlantR90[j - 1];
 800599c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800599e:	3b01      	subs	r3, #1
 80059a0:	4a9c      	ldr	r2, [pc, #624]	; (8005c14 <calWallConrol+0xe0c>)
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	499a      	ldr	r1, [pc, #616]	; (8005c14 <calWallConrol+0xe0c>)
 80059aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	440b      	add	r3, r1
 80059b0:	601a      	str	r2, [r3, #0]
			g_CenterSlantL90[j] = g_CenterSlantL90[j - 1];
 80059b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059b4:	3b01      	subs	r3, #1
 80059b6:	4a98      	ldr	r2, [pc, #608]	; (8005c18 <calWallConrol+0xe10>)
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	4996      	ldr	r1, [pc, #600]	; (8005c18 <calWallConrol+0xe10>)
 80059c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	440b      	add	r3, r1
 80059c6:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 80059c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ca:	3b01      	subs	r3, #1
 80059cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80059ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	dce3      	bgt.n	800599c <calWallConrol+0xb94>
		}
		g_CenterSlantR90[0] = CenterSlantR;
 80059d4:	4a8f      	ldr	r2, [pc, #572]	; (8005c14 <calWallConrol+0xe0c>)
 80059d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059d8:	6013      	str	r3, [r2, #0]
		g_CenterSlantL90[0] = CenterSlantL;
 80059da:	4a8f      	ldr	r2, [pc, #572]	; (8005c18 <calWallConrol+0xe10>)
 80059dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059de:	6013      	str	r3, [r2, #0]

		g_CenterSlantR90_diff = g_CenterSlantR90[0] - g_CenterSlantR90[11];
 80059e0:	4b8c      	ldr	r3, [pc, #560]	; (8005c14 <calWallConrol+0xe0c>)
 80059e2:	ed93 7a00 	vldr	s14, [r3]
 80059e6:	4b8b      	ldr	r3, [pc, #556]	; (8005c14 <calWallConrol+0xe0c>)
 80059e8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80059ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059f0:	4b8a      	ldr	r3, [pc, #552]	; (8005c1c <calWallConrol+0xe14>)
 80059f2:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL90_diff = g_CenterSlantL90[0] - g_CenterSlantL90[11];
 80059f6:	4b88      	ldr	r3, [pc, #544]	; (8005c18 <calWallConrol+0xe10>)
 80059f8:	ed93 7a00 	vldr	s14, [r3]
 80059fc:	4b86      	ldr	r3, [pc, #536]	; (8005c18 <calWallConrol+0xe10>)
 80059fe:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a06:	4b86      	ldr	r3, [pc, #536]	; (8005c20 <calWallConrol+0xe18>)
 8005a08:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R
 8005a0c:	4b85      	ldr	r3, [pc, #532]	; (8005c24 <calWallConrol+0xe1c>)
 8005a0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005a12:	2b5a      	cmp	r3, #90	; 0x5a
 8005a14:	dd1a      	ble.n	8005a4c <calWallConrol+0xc44>
				&& fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8005a16:	4b84      	ldr	r3, [pc, #528]	; (8005c28 <calWallConrol+0xe20>)
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a22:	4b7e      	ldr	r3, [pc, #504]	; (8005c1c <calWallConrol+0xe14>)
 8005a24:	edd3 7a00 	vldr	s15, [r3]
 8005a28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a2c:	eef0 7ae7 	vabs.f32	s15, s15
 8005a30:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8005c2c <calWallConrol+0xe24>
 8005a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a3c:	d506      	bpl.n	8005a4c <calWallConrol+0xc44>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8005a3e:	4b7c      	ldr	r3, [pc, #496]	; (8005c30 <calWallConrol+0xe28>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	f043 0302 	orr.w	r3, r3, #2
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	4b79      	ldr	r3, [pc, #484]	; (8005c30 <calWallConrol+0xe28>)
 8005a4a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L
 8005a4c:	4b75      	ldr	r3, [pc, #468]	; (8005c24 <calWallConrol+0xe1c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b5a      	cmp	r3, #90	; 0x5a
 8005a52:	dd1a      	ble.n	8005a8a <calWallConrol+0xc82>
				&& fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 8005a54:	4b74      	ldr	r3, [pc, #464]	; (8005c28 <calWallConrol+0xe20>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	ee07 3a90 	vmov	s15, r3
 8005a5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a60:	4b6f      	ldr	r3, [pc, #444]	; (8005c20 <calWallConrol+0xe18>)
 8005a62:	edd3 7a00 	vldr	s15, [r3]
 8005a66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a6a:	eef0 7ae7 	vabs.f32	s15, s15
 8005a6e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8005c2c <calWallConrol+0xe24>
 8005a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a7a:	d506      	bpl.n	8005a8a <calWallConrol+0xc82>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus | (1 << 0);
 8005a7c:	4b6c      	ldr	r3, [pc, #432]	; (8005c30 <calWallConrol+0xe28>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	f043 0301 	orr.w	r3, r3, #1
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	4b6a      	ldr	r3, [pc, #424]	; (8005c30 <calWallConrol+0xe28>)
 8005a88:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT_R
 8005a8a:	4b66      	ldr	r3, [pc, #408]	; (8005c24 <calWallConrol+0xe1c>)
 8005a8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005a90:	2b59      	cmp	r3, #89	; 0x59
 8005a92:	dd13      	ble.n	8005abc <calWallConrol+0xcb4>
				|| fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8005a94:	4b64      	ldr	r3, [pc, #400]	; (8005c28 <calWallConrol+0xe20>)
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	ee07 3a90 	vmov	s15, r3
 8005a9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005aa0:	4b5e      	ldr	r3, [pc, #376]	; (8005c1c <calWallConrol+0xe14>)
 8005aa2:	edd3 7a00 	vldr	s15, [r3]
 8005aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005aaa:	eef0 7ae7 	vabs.f32	s15, s15
 8005aae:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005c2c <calWallConrol+0xe24>
 8005ab2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aba:	dd06      	ble.n	8005aca <calWallConrol+0xcc2>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 8005abc:	4b5c      	ldr	r3, [pc, #368]	; (8005c30 <calWallConrol+0xe28>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	f023 0302 	bic.w	r3, r3, #2
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	4b5a      	ldr	r3, [pc, #360]	; (8005c30 <calWallConrol+0xe28>)
 8005ac8:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT_L
 8005aca:	4b56      	ldr	r3, [pc, #344]	; (8005c24 <calWallConrol+0xe1c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b59      	cmp	r3, #89	; 0x59
 8005ad0:	dd13      	ble.n	8005afa <calWallConrol+0xcf2>
				|| fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 8005ad2:	4b55      	ldr	r3, [pc, #340]	; (8005c28 <calWallConrol+0xe20>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ade:	4b50      	ldr	r3, [pc, #320]	; (8005c20 <calWallConrol+0xe18>)
 8005ae0:	edd3 7a00 	vldr	s15, [r3]
 8005ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ae8:	eef0 7ae7 	vabs.f32	s15, s15
 8005aec:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005c2c <calWallConrol+0xe24>
 8005af0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af8:	dd06      	ble.n	8005b08 <calWallConrol+0xd00>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 8005afa:	4b4d      	ldr	r3, [pc, #308]	; (8005c30 <calWallConrol+0xe28>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	f023 0301 	bic.w	r3, r3, #1
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	4b4a      	ldr	r3, [pc, #296]	; (8005c30 <calWallConrol+0xe28>)
 8005b06:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus) {
 8005b08:	4b49      	ldr	r3, [pc, #292]	; (8005c30 <calWallConrol+0xe28>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	2b03      	cmp	r3, #3
 8005b0e:	f200 813d 	bhi.w	8005d8c <calWallConrol+0xf84>
 8005b12:	a201      	add	r2, pc, #4	; (adr r2, 8005b18 <calWallConrol+0xd10>)
 8005b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b18:	08005b29 	.word	0x08005b29
 8005b1c:	08005b7d 	.word	0x08005b7d
 8005b20:	08005c41 	.word	0x08005c41
 8005b24:	08005cd7 	.word	0x08005cd7
		case 0:			//両壁なし
			PID_wall = 0;
 8005b28:	f04f 0300 	mov.w	r3, #0
 8005b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			pl_yellow_LED_1(0);
 8005b30:	2000      	movs	r0, #0
 8005b32:	f001 fa91 	bl	8007058 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8005b36:	2000      	movs	r0, #0
 8005b38:	f001 fac4 	bl	80070c4 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005b3c:	4b39      	ldr	r3, [pc, #228]	; (8005c24 <calWallConrol+0xe1c>)
 8005b3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005b42:	ee07 3a90 	vmov	s15, r3
 8005b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b4a:	4b3a      	ldr	r3, [pc, #232]	; (8005c34 <calWallConrol+0xe2c>)
 8005b4c:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8005b50:	4b34      	ldr	r3, [pc, #208]	; (8005c24 <calWallConrol+0xe1c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	ee07 3a90 	vmov	s15, r3
 8005b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b5c:	4b36      	ldr	r3, [pc, #216]	; (8005c38 <calWallConrol+0xe30>)
 8005b5e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = 0;
 8005b62:	4b36      	ldr	r3, [pc, #216]	; (8005c3c <calWallConrol+0xe34>)
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]
			wall_slant90.delta_error = 0;
 8005b6a:	4b34      	ldr	r3, [pc, #208]	; (8005c3c <calWallConrol+0xe34>)
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	609a      	str	r2, [r3, #8]
			wall_slant90.old_error = 0;
 8005b72:	4b32      	ldr	r3, [pc, #200]	; (8005c3c <calWallConrol+0xe34>)
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	605a      	str	r2, [r3, #4]
			break;
 8005b7a:	e107      	b.n	8005d8c <calWallConrol+0xf84>
		case 1:			//左壁のみ
			pl_yellow_LED_1(0);
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	f001 fa6b 	bl	8007058 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8005b82:	2001      	movs	r0, #1
 8005b84:	f001 fa9e 	bl	80070c4 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005b88:	4b26      	ldr	r3, [pc, #152]	; (8005c24 <calWallConrol+0xe1c>)
 8005b8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b96:	4b27      	ldr	r3, [pc, #156]	; (8005c34 <calWallConrol+0xe2c>)
 8005b98:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = CenterSlantL;
 8005b9c:	4a26      	ldr	r2, [pc, #152]	; (8005c38 <calWallConrol+0xe30>)
 8005b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ba0:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005ba2:	4b20      	ldr	r3, [pc, #128]	; (8005c24 <calWallConrol+0xe1c>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	ee07 3a90 	vmov	s15, r3
 8005baa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bae:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bb6:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0]));
 8005bba:	4b1a      	ldr	r3, [pc, #104]	; (8005c24 <calWallConrol+0xe1c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005bca:	4b1c      	ldr	r3, [pc, #112]	; (8005c3c <calWallConrol+0xe34>)
 8005bcc:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005bd0:	4b1a      	ldr	r3, [pc, #104]	; (8005c3c <calWallConrol+0xe34>)
 8005bd2:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005bd6:	4b19      	ldr	r3, [pc, #100]	; (8005c3c <calWallConrol+0xe34>)
 8005bd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8005bdc:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005be0:	4b16      	ldr	r3, [pc, #88]	; (8005c3c <calWallConrol+0xe34>)
 8005be2:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005be6:	4b15      	ldr	r3, [pc, #84]	; (8005c3c <calWallConrol+0xe34>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a14      	ldr	r2, [pc, #80]	; (8005c3c <calWallConrol+0xe34>)
 8005bec:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005bee:	4b13      	ldr	r3, [pc, #76]	; (8005c3c <calWallConrol+0xe34>)
 8005bf0:	ed93 7a00 	vldr	s14, [r3]
 8005bf4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005bfc:	4b0f      	ldr	r3, [pc, #60]	; (8005c3c <calWallConrol+0xe34>)
 8005bfe:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c02:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c0e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005c12:	e0bb      	b.n	8005d8c <calWallConrol+0xf84>
 8005c14:	200005e8 	.word	0x200005e8
 8005c18:	20000618 	.word	0x20000618
 8005c1c:	200006a8 	.word	0x200006a8
 8005c20:	200006ac 	.word	0x200006ac
 8005c24:	20000298 	.word	0x20000298
 8005c28:	20000428 	.word	0x20000428
 8005c2c:	42a00000 	.word	0x42a00000
 8005c30:	20000573 	.word	0x20000573
 8005c34:	2000058c 	.word	0x2000058c
 8005c38:	20000590 	.word	0x20000590
 8005c3c:	20000558 	.word	0x20000558
		case 2:			//右壁のみ
			pl_yellow_LED_1(1);
 8005c40:	2001      	movs	r0, #1
 8005c42:	f001 fa09 	bl	8007058 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8005c46:	2000      	movs	r0, #0
 8005c48:	f001 fa3c 	bl	80070c4 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8005c4c:	4aa4      	ldr	r2, [pc, #656]	; (8005ee0 <calWallConrol+0x10d8>)
 8005c4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c50:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8005c52:	4ba4      	ldr	r3, [pc, #656]	; (8005ee4 <calWallConrol+0x10dc>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c5e:	4ba2      	ldr	r3, [pc, #648]	; (8005ee8 <calWallConrol+0x10e0>)
 8005c60:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005c64:	4b9f      	ldr	r3, [pc, #636]	; (8005ee4 <calWallConrol+0x10dc>)
 8005c66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005c6a:	ee07 3a90 	vmov	s15, r3
 8005c6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c72:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005c76:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR) / (float) (g_sensor[SENSOR_RIGHT][0]));
 8005c7a:	4b9a      	ldr	r3, [pc, #616]	; (8005ee4 <calWallConrol+0x10dc>)
 8005c7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005c80:	ee07 3a90 	vmov	s15, r3
 8005c84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005c8c:	4b97      	ldr	r3, [pc, #604]	; (8005eec <calWallConrol+0x10e4>)
 8005c8e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005c92:	4b96      	ldr	r3, [pc, #600]	; (8005eec <calWallConrol+0x10e4>)
 8005c94:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005c98:	4b94      	ldr	r3, [pc, #592]	; (8005eec <calWallConrol+0x10e4>)
 8005c9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005ca2:	4b92      	ldr	r3, [pc, #584]	; (8005eec <calWallConrol+0x10e4>)
 8005ca4:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005ca8:	4b90      	ldr	r3, [pc, #576]	; (8005eec <calWallConrol+0x10e4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a8f      	ldr	r2, [pc, #572]	; (8005eec <calWallConrol+0x10e4>)
 8005cae:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005cb0:	4b8e      	ldr	r3, [pc, #568]	; (8005eec <calWallConrol+0x10e4>)
 8005cb2:	ed93 7a00 	vldr	s14, [r3]
 8005cb6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005cba:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005cbe:	4b8b      	ldr	r3, [pc, #556]	; (8005eec <calWallConrol+0x10e4>)
 8005cc0:	edd3 6a02 	vldr	s13, [r3, #8]
 8005cc4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005cc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cd0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005cd4:	e05a      	b.n	8005d8c <calWallConrol+0xf84>
		case 3:			//両壁あり
			pl_yellow_LED_1(1);
 8005cd6:	2001      	movs	r0, #1
 8005cd8:	f001 f9be 	bl	8007058 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8005cdc:	2001      	movs	r0, #1
 8005cde:	f001 f9f1 	bl	80070c4 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8005ce2:	4a7f      	ldr	r2, [pc, #508]	; (8005ee0 <calWallConrol+0x10d8>)
 8005ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ce6:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = CenterSlantL;
 8005ce8:	4a7f      	ldr	r2, [pc, #508]	; (8005ee8 <calWallConrol+0x10e0>)
 8005cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cec:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005cee:	4b7d      	ldr	r3, [pc, #500]	; (8005ee4 <calWallConrol+0x10dc>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cfa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d02:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0])
 8005d06:	4b77      	ldr	r3, [pc, #476]	; (8005ee4 <calWallConrol+0x10dc>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005d16:	4b73      	ldr	r3, [pc, #460]	; (8005ee4 <calWallConrol+0x10dc>)
 8005d18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005d1c:	ee07 3a90 	vmov	s15, r3
 8005d20:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005d24:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005d28:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_RIGHT][0]));
 8005d2c:	4b6d      	ldr	r3, [pc, #436]	; (8005ee4 <calWallConrol+0x10dc>)
 8005d2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005d3a:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005d42:	4b6a      	ldr	r3, [pc, #424]	; (8005eec <calWallConrol+0x10e4>)
 8005d44:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005d48:	4b68      	ldr	r3, [pc, #416]	; (8005eec <calWallConrol+0x10e4>)
 8005d4a:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005d4e:	4b67      	ldr	r3, [pc, #412]	; (8005eec <calWallConrol+0x10e4>)
 8005d50:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d54:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005d58:	4b64      	ldr	r3, [pc, #400]	; (8005eec <calWallConrol+0x10e4>)
 8005d5a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005d5e:	4b63      	ldr	r3, [pc, #396]	; (8005eec <calWallConrol+0x10e4>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a62      	ldr	r2, [pc, #392]	; (8005eec <calWallConrol+0x10e4>)
 8005d64:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005d66:	4b61      	ldr	r3, [pc, #388]	; (8005eec <calWallConrol+0x10e4>)
 8005d68:	ed93 7a00 	vldr	s14, [r3]
 8005d6c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005d70:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005d74:	4b5d      	ldr	r3, [pc, #372]	; (8005eec <calWallConrol+0x10e4>)
 8005d76:	edd3 6a02 	vldr	s13, [r3, #8]
 8005d7a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005d7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d86:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005d8a:	bf00      	nop
// 斜め45度
		float CenterSlantR45, CenterSlantL45;
		float coefficientR45[4];
		float coefficientL45[4];
		float sensor_gain_slant45_p, sensor_gain_slant45_d;
		if (straight.velocity > 2000) {
 8005d8c:	4b58      	ldr	r3, [pc, #352]	; (8005ef0 <calWallConrol+0x10e8>)
 8005d8e:	edd3 7a00 	vldr	s15, [r3]
 8005d92:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005ef4 <calWallConrol+0x10ec>
 8005d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d9e:	dd04      	ble.n	8005daa <calWallConrol+0xfa2>
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * 2000;
 8005da0:	4b55      	ldr	r3, [pc, #340]	; (8005ef8 <calWallConrol+0x10f0>)
 8005da2:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * 2000;
 8005da4:	4b55      	ldr	r3, [pc, #340]	; (8005efc <calWallConrol+0x10f4>)
 8005da6:	673b      	str	r3, [r7, #112]	; 0x70
 8005da8:	e023      	b.n	8005df2 <calWallConrol+0xfea>
		} else {
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * straight.velocity;
 8005daa:	4b51      	ldr	r3, [pc, #324]	; (8005ef0 <calWallConrol+0x10e8>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fa fbf2 	bl	8000598 <__aeabi_f2d>
 8005db4:	a346      	add	r3, pc, #280	; (adr r3, 8005ed0 <calWallConrol+0x10c8>)
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	f7fa fc45 	bl	8000648 <__aeabi_dmul>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4610      	mov	r0, r2
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	f7fa ff17 	bl	8000bf8 <__aeabi_d2f>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * straight.velocity;
 8005dce:	4b48      	ldr	r3, [pc, #288]	; (8005ef0 <calWallConrol+0x10e8>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fa fbe0 	bl	8000598 <__aeabi_f2d>
 8005dd8:	a33f      	add	r3, pc, #252	; (adr r3, 8005ed8 <calWallConrol+0x10d0>)
 8005dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dde:	f7fa fc33 	bl	8000648 <__aeabi_dmul>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4610      	mov	r0, r2
 8005de8:	4619      	mov	r1, r3
 8005dea:	f7fa ff05 	bl	8000bf8 <__aeabi_d2f>
 8005dee:	4603      	mov	r3, r0
 8005df0:	673b      	str	r3, [r7, #112]	; 0x70
		}

		if (NoWallDisplacementR45slant > AREAMIN45_R0
 8005df2:	4b43      	ldr	r3, [pc, #268]	; (8005f00 <calWallConrol+0x10f8>)
 8005df4:	edd3 7a00 	vldr	s15, [r3]
 8005df8:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8005f04 <calWallConrol+0x10fc>
 8005dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e04:	dd12      	ble.n	8005e2c <calWallConrol+0x1024>
				&& NoWallDisplacementR45slant <= AREAMAX45_R0) {
 8005e06:	4b3e      	ldr	r3, [pc, #248]	; (8005f00 <calWallConrol+0x10f8>)
 8005e08:	edd3 7a00 	vldr	s15, [r3]
 8005e0c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005f08 <calWallConrol+0x1100>
 8005e10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e18:	d808      	bhi.n	8005e2c <calWallConrol+0x1024>
			coefficientR45[0] = COEFFICIENT45_R0_0;
 8005e1a:	4b3c      	ldr	r3, [pc, #240]	; (8005f0c <calWallConrol+0x1104>)
 8005e1c:	62bb      	str	r3, [r7, #40]	; 0x28
			coefficientR45[1] = COEFFICIENT45_R0_1;
 8005e1e:	4b3c      	ldr	r3, [pc, #240]	; (8005f10 <calWallConrol+0x1108>)
 8005e20:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = COEFFICIENT45_R0_2;
 8005e22:	4b3c      	ldr	r3, [pc, #240]	; (8005f14 <calWallConrol+0x110c>)
 8005e24:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = COEFFICIENT45_R0_3;
 8005e26:	4b3c      	ldr	r3, [pc, #240]	; (8005f18 <calWallConrol+0x1110>)
 8005e28:	637b      	str	r3, [r7, #52]	; 0x34
 8005e2a:	e025      	b.n	8005e78 <calWallConrol+0x1070>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005e2c:	4b2d      	ldr	r3, [pc, #180]	; (8005ee4 <calWallConrol+0x10dc>)
 8005e2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e32:	2b82      	cmp	r3, #130	; 0x82
 8005e34:	dd07      	ble.n	8005e46 <calWallConrol+0x103e>
					> CONTROLWALL_THRESHOLD_SLANT45_R) {
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005e36:	4b39      	ldr	r3, [pc, #228]	; (8005f1c <calWallConrol+0x1114>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	f043 0302 	orr.w	r3, r3, #2
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	4b36      	ldr	r3, [pc, #216]	; (8005f1c <calWallConrol+0x1114>)
 8005e42:	701a      	strb	r2, [r3, #0]
 8005e44:	e006      	b.n	8005e54 <calWallConrol+0x104c>
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005e46:	4b35      	ldr	r3, [pc, #212]	; (8005f1c <calWallConrol+0x1114>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	f023 0302 	bic.w	r3, r3, #2
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	4b32      	ldr	r3, [pc, #200]	; (8005f1c <calWallConrol+0x1114>)
 8005e52:	701a      	strb	r2, [r3, #0]
			}
			coefficientR45[0] = g_sensor[SENSOR_FRONT_RIGHT][0];
 8005e54:	4b23      	ldr	r3, [pc, #140]	; (8005ee4 <calWallConrol+0x10dc>)
 8005e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e62:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			coefficientR45[1] = 0;
 8005e66:	f04f 0300 	mov.w	r3, #0
 8005e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = 0;
 8005e6c:	f04f 0300 	mov.w	r3, #0
 8005e70:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = 0;
 8005e72:	f04f 0300 	mov.w	r3, #0
 8005e76:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (NoWallDisplacementL45slant > AREAMIN45_L0
 8005e78:	4b29      	ldr	r3, [pc, #164]	; (8005f20 <calWallConrol+0x1118>)
 8005e7a:	edd3 7a00 	vldr	s15, [r3]
 8005e7e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005f04 <calWallConrol+0x10fc>
 8005e82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e8a:	dd12      	ble.n	8005eb2 <calWallConrol+0x10aa>
				&& NoWallDisplacementL45slant <= AREAMAX45_L0) {
 8005e8c:	4b24      	ldr	r3, [pc, #144]	; (8005f20 <calWallConrol+0x1118>)
 8005e8e:	edd3 7a00 	vldr	s15, [r3]
 8005e92:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005f08 <calWallConrol+0x1100>
 8005e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e9e:	d808      	bhi.n	8005eb2 <calWallConrol+0x10aa>
			coefficientL45[0] = COEFFICIENT45_L0_0;
 8005ea0:	4b20      	ldr	r3, [pc, #128]	; (8005f24 <calWallConrol+0x111c>)
 8005ea2:	61bb      	str	r3, [r7, #24]
			coefficientL45[1] = COEFFICIENT45_L0_1;
 8005ea4:	4b20      	ldr	r3, [pc, #128]	; (8005f28 <calWallConrol+0x1120>)
 8005ea6:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = COEFFICIENT45_L0_2;
 8005ea8:	4b20      	ldr	r3, [pc, #128]	; (8005f2c <calWallConrol+0x1124>)
 8005eaa:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = COEFFICIENT45_L0_3;
 8005eac:	4b20      	ldr	r3, [pc, #128]	; (8005f30 <calWallConrol+0x1128>)
 8005eae:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb0:	e058      	b.n	8005f64 <calWallConrol+0x115c>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L) {
 8005eb2:	4b0c      	ldr	r3, [pc, #48]	; (8005ee4 <calWallConrol+0x10dc>)
 8005eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb6:	2b82      	cmp	r3, #130	; 0x82
 8005eb8:	dd3c      	ble.n	8005f34 <calWallConrol+0x112c>
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005eba:	4b18      	ldr	r3, [pc, #96]	; (8005f1c <calWallConrol+0x1114>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	f043 0301 	orr.w	r3, r3, #1
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	4b15      	ldr	r3, [pc, #84]	; (8005f1c <calWallConrol+0x1114>)
 8005ec6:	701a      	strb	r2, [r3, #0]
 8005ec8:	e03b      	b.n	8005f42 <calWallConrol+0x113a>
 8005eca:	bf00      	nop
 8005ecc:	f3af 8000 	nop.w
 8005ed0:	9999999a 	.word	0x9999999a
 8005ed4:	3fe99999 	.word	0x3fe99999
 8005ed8:	47ae147b 	.word	0x47ae147b
 8005edc:	bfb47ae1 	.word	0xbfb47ae1
 8005ee0:	2000058c 	.word	0x2000058c
 8005ee4:	20000298 	.word	0x20000298
 8005ee8:	20000590 	.word	0x20000590
 8005eec:	20000558 	.word	0x20000558
 8005ef0:	200004b8 	.word	0x200004b8
 8005ef4:	44fa0000 	.word	0x44fa0000
 8005ef8:	44c80000 	.word	0x44c80000
 8005efc:	c3200000 	.word	0xc3200000
 8005f00:	200005bc 	.word	0x200005bc
 8005f04:	420c0000 	.word	0x420c0000
 8005f08:	43200000 	.word	0x43200000
 8005f0c:	43896a4d 	.word	0x43896a4d
 8005f10:	40ca5bd3 	.word	0x40ca5bd3
 8005f14:	bd6d2c96 	.word	0xbd6d2c96
 8005f18:	39a9de8b 	.word	0x39a9de8b
 8005f1c:	20000574 	.word	0x20000574
 8005f20:	200005c0 	.word	0x200005c0
 8005f24:	4383070e 	.word	0x4383070e
 8005f28:	3ff62494 	.word	0x3ff62494
 8005f2c:	bbc31628 	.word	0xbbc31628
 8005f30:	38eae18b 	.word	0x38eae18b
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005f34:	4bb5      	ldr	r3, [pc, #724]	; (800620c <calWallConrol+0x1404>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	f023 0301 	bic.w	r3, r3, #1
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	4bb3      	ldr	r3, [pc, #716]	; (800620c <calWallConrol+0x1404>)
 8005f40:	701a      	strb	r2, [r3, #0]
			}
			coefficientL45[0] = g_sensor[SENSOR_FRONT_LEFT][0];
 8005f42:	4bb3      	ldr	r3, [pc, #716]	; (8006210 <calWallConrol+0x1408>)
 8005f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f46:	ee07 3a90 	vmov	s15, r3
 8005f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f4e:	edc7 7a06 	vstr	s15, [r7, #24]
			coefficientL45[1] = 0;
 8005f52:	f04f 0300 	mov.w	r3, #0
 8005f56:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = 0;
 8005f58:	f04f 0300 	mov.w	r3, #0
 8005f5c:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = 0;
 8005f5e:	f04f 0300 	mov.w	r3, #0
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24
		}
		CenterSlantR45 = coefficientR45[0]
 8005f64:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
				+ coefficientR45[1] * NoWallDisplacementR45slant
 8005f68:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8005f6c:	4ba9      	ldr	r3, [pc, #676]	; (8006214 <calWallConrol+0x140c>)
 8005f6e:	edd3 7a00 	vldr	s15, [r3]
 8005f72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f76:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005f7a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005f7e:	4ba5      	ldr	r3, [pc, #660]	; (8006214 <calWallConrol+0x140c>)
 8005f80:	edd3 7a00 	vldr	s15, [r3]
 8005f84:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005f88:	4ba2      	ldr	r3, [pc, #648]	; (8006214 <calWallConrol+0x140c>)
 8005f8a:	edd3 7a00 	vldr	s15, [r3]
 8005f8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005f92:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[3] * NoWallDisplacementR45slant
 8005f96:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005f9a:	4b9e      	ldr	r3, [pc, #632]	; (8006214 <calWallConrol+0x140c>)
 8005f9c:	edd3 7a00 	vldr	s15, [r3]
 8005fa0:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005fa4:	4b9b      	ldr	r3, [pc, #620]	; (8006214 <calWallConrol+0x140c>)
 8005fa6:	edd3 7a00 	vldr	s15, [r3]
 8005faa:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 8005fae:	4b99      	ldr	r3, [pc, #612]	; (8006214 <calWallConrol+0x140c>)
 8005fb0:	edd3 7a00 	vldr	s15, [r3]
 8005fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR45 = coefficientR45[0]
 8005fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fbc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		CenterSlantL45 = coefficientL45[0]
 8005fc0:	ed97 7a06 	vldr	s14, [r7, #24]
				+ coefficientL45[1] * NoWallDisplacementL45slant
 8005fc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fc8:	4b93      	ldr	r3, [pc, #588]	; (8006218 <calWallConrol+0x1410>)
 8005fca:	edd3 7a00 	vldr	s15, [r3]
 8005fce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fd2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8005fd6:	edd7 6a08 	vldr	s13, [r7, #32]
 8005fda:	4b8f      	ldr	r3, [pc, #572]	; (8006218 <calWallConrol+0x1410>)
 8005fdc:	edd3 7a00 	vldr	s15, [r3]
 8005fe0:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005fe4:	4b8c      	ldr	r3, [pc, #560]	; (8006218 <calWallConrol+0x1410>)
 8005fe6:	edd3 7a00 	vldr	s15, [r3]
 8005fea:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8005fee:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[3] * NoWallDisplacementL45slant
 8005ff2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005ff6:	4b88      	ldr	r3, [pc, #544]	; (8006218 <calWallConrol+0x1410>)
 8005ff8:	edd3 7a00 	vldr	s15, [r3]
 8005ffc:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8006000:	4b85      	ldr	r3, [pc, #532]	; (8006218 <calWallConrol+0x1410>)
 8006002:	edd3 7a00 	vldr	s15, [r3]
 8006006:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 800600a:	4b83      	ldr	r3, [pc, #524]	; (8006218 <calWallConrol+0x1410>)
 800600c:	edd3 7a00 	vldr	s15, [r3]
 8006010:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL45 = coefficientL45[0]
 8006014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006018:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		for (int j = 11; j >= 1; j--) {
 800601c:	230b      	movs	r3, #11
 800601e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006020:	e018      	b.n	8006054 <calWallConrol+0x124c>
			g_CenterSlantR45[j] = g_CenterSlantR45[j - 1];
 8006022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006024:	3b01      	subs	r3, #1
 8006026:	4a7d      	ldr	r2, [pc, #500]	; (800621c <calWallConrol+0x1414>)
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	497b      	ldr	r1, [pc, #492]	; (800621c <calWallConrol+0x1414>)
 8006030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	440b      	add	r3, r1
 8006036:	601a      	str	r2, [r3, #0]
			g_CenterSlantL45[j] = g_CenterSlantL45[j - 1];
 8006038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800603a:	3b01      	subs	r3, #1
 800603c:	4a78      	ldr	r2, [pc, #480]	; (8006220 <calWallConrol+0x1418>)
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	4976      	ldr	r1, [pc, #472]	; (8006220 <calWallConrol+0x1418>)
 8006046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	440b      	add	r3, r1
 800604c:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 800604e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006050:	3b01      	subs	r3, #1
 8006052:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006056:	2b00      	cmp	r3, #0
 8006058:	dce3      	bgt.n	8006022 <calWallConrol+0x121a>
		}
		g_CenterSlantR45[0] = CenterSlantR45;
 800605a:	4a70      	ldr	r2, [pc, #448]	; (800621c <calWallConrol+0x1414>)
 800605c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800605e:	6013      	str	r3, [r2, #0]
		g_CenterSlantL45[0] = CenterSlantL45;
 8006060:	4a6f      	ldr	r2, [pc, #444]	; (8006220 <calWallConrol+0x1418>)
 8006062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006064:	6013      	str	r3, [r2, #0]

		g_CenterSlantR45_diff = g_CenterSlantR45[0] - g_CenterSlantR45[11];
 8006066:	4b6d      	ldr	r3, [pc, #436]	; (800621c <calWallConrol+0x1414>)
 8006068:	ed93 7a00 	vldr	s14, [r3]
 800606c:	4b6b      	ldr	r3, [pc, #428]	; (800621c <calWallConrol+0x1414>)
 800606e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006072:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006076:	4b6b      	ldr	r3, [pc, #428]	; (8006224 <calWallConrol+0x141c>)
 8006078:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL45_diff = g_CenterSlantL45[0] - g_CenterSlantL45[11];
 800607c:	4b68      	ldr	r3, [pc, #416]	; (8006220 <calWallConrol+0x1418>)
 800607e:	ed93 7a00 	vldr	s14, [r3]
 8006082:	4b67      	ldr	r3, [pc, #412]	; (8006220 <calWallConrol+0x1418>)
 8006084:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800608c:	4b66      	ldr	r3, [pc, #408]	; (8006228 <calWallConrol+0x1420>)
 800608e:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT45_R
 8006092:	4b5f      	ldr	r3, [pc, #380]	; (8006210 <calWallConrol+0x1408>)
 8006094:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006098:	2b82      	cmp	r3, #130	; 0x82
 800609a:	dd1a      	ble.n	80060d2 <calWallConrol+0x12ca>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 800609c:	4b63      	ldr	r3, [pc, #396]	; (800622c <calWallConrol+0x1424>)
 800609e:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 80060a0:	ee07 3a90 	vmov	s15, r3
 80060a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060a8:	4b5e      	ldr	r3, [pc, #376]	; (8006224 <calWallConrol+0x141c>)
 80060aa:	edd3 7a00 	vldr	s15, [r3]
 80060ae:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 80060b2:	eef0 7ae7 	vabs.f32	s15, s15
 80060b6:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8006230 <calWallConrol+0x1428>
 80060ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060c2:	d506      	bpl.n	80060d2 <calWallConrol+0x12ca>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 80060c4:	4b51      	ldr	r3, [pc, #324]	; (800620c <calWallConrol+0x1404>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	f043 0302 	orr.w	r3, r3, #2
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	4b4f      	ldr	r3, [pc, #316]	; (800620c <calWallConrol+0x1404>)
 80060d0:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L
 80060d2:	4b4f      	ldr	r3, [pc, #316]	; (8006210 <calWallConrol+0x1408>)
 80060d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d6:	2b82      	cmp	r3, #130	; 0x82
 80060d8:	dd1a      	ble.n	8006110 <calWallConrol+0x1308>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 80060da:	4b54      	ldr	r3, [pc, #336]	; (800622c <calWallConrol+0x1424>)
 80060dc:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060e6:	4b50      	ldr	r3, [pc, #320]	; (8006228 <calWallConrol+0x1420>)
 80060e8:	edd3 7a00 	vldr	s15, [r3]
 80060ec:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 80060f0:	eef0 7ae7 	vabs.f32	s15, s15
 80060f4:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8006230 <calWallConrol+0x1428>
 80060f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006100:	d506      	bpl.n	8006110 <calWallConrol+0x1308>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8006102:	4b42      	ldr	r3, [pc, #264]	; (800620c <calWallConrol+0x1404>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	f043 0301 	orr.w	r3, r3, #1
 800610a:	b2da      	uxtb	r2, r3
 800610c:	4b3f      	ldr	r3, [pc, #252]	; (800620c <calWallConrol+0x1404>)
 800610e:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT45_R
 8006110:	4b3f      	ldr	r3, [pc, #252]	; (8006210 <calWallConrol+0x1408>)
 8006112:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006116:	2b81      	cmp	r3, #129	; 0x81
 8006118:	dd13      	ble.n	8006142 <calWallConrol+0x133a>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 800611a:	4b44      	ldr	r3, [pc, #272]	; (800622c <calWallConrol+0x1424>)
 800611c:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006126:	4b3f      	ldr	r3, [pc, #252]	; (8006224 <calWallConrol+0x141c>)
 8006128:	edd3 7a00 	vldr	s15, [r3]
 800612c:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8006130:	eef0 7ae7 	vabs.f32	s15, s15
 8006134:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8006230 <calWallConrol+0x1428>
 8006138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800613c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006140:	dd06      	ble.n	8006150 <calWallConrol+0x1348>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8006142:	4b32      	ldr	r3, [pc, #200]	; (800620c <calWallConrol+0x1404>)
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	f023 0302 	bic.w	r3, r3, #2
 800614a:	b2da      	uxtb	r2, r3
 800614c:	4b2f      	ldr	r3, [pc, #188]	; (800620c <calWallConrol+0x1404>)
 800614e:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT45_L
 8006150:	4b2f      	ldr	r3, [pc, #188]	; (8006210 <calWallConrol+0x1408>)
 8006152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006154:	2b81      	cmp	r3, #129	; 0x81
 8006156:	dd13      	ble.n	8006180 <calWallConrol+0x1378>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8006158:	4b34      	ldr	r3, [pc, #208]	; (800622c <calWallConrol+0x1424>)
 800615a:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 800615c:	ee07 3a90 	vmov	s15, r3
 8006160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006164:	4b30      	ldr	r3, [pc, #192]	; (8006228 <calWallConrol+0x1420>)
 8006166:	edd3 7a00 	vldr	s15, [r3]
 800616a:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 800616e:	eef0 7ae7 	vabs.f32	s15, s15
 8006172:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006230 <calWallConrol+0x1428>
 8006176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800617a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800617e:	dd06      	ble.n	800618e <calWallConrol+0x1386>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8006180:	4b22      	ldr	r3, [pc, #136]	; (800620c <calWallConrol+0x1404>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	f023 0301 	bic.w	r3, r3, #1
 8006188:	b2da      	uxtb	r2, r3
 800618a:	4b20      	ldr	r3, [pc, #128]	; (800620c <calWallConrol+0x1404>)
 800618c:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus45) {
 800618e:	4b1f      	ldr	r3, [pc, #124]	; (800620c <calWallConrol+0x1404>)
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2b03      	cmp	r3, #3
 8006194:	f200 8155 	bhi.w	8006442 <calWallConrol+0x163a>
 8006198:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <calWallConrol+0x1398>)
 800619a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619e:	bf00      	nop
 80061a0:	080061b1 	.word	0x080061b1
 80061a4:	08006245 	.word	0x08006245
 80061a8:	080062e5 	.word	0x080062e5
 80061ac:	08006383 	.word	0x08006383
		case 0:			//両壁なし
			PID_wall += 0;
 80061b0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80061b4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006234 <calWallConrol+0x142c>
 80061b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061bc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_3(0);
 80061c0:	2000      	movs	r0, #0
 80061c2:	f000 ff5b 	bl	800707c <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 80061c6:	2000      	movs	r0, #0
 80061c8:	f000 ff6a 	bl	80070a0 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 80061cc:	4b10      	ldr	r3, [pc, #64]	; (8006210 <calWallConrol+0x1408>)
 80061ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061d2:	ee07 3a90 	vmov	s15, r3
 80061d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061da:	4b17      	ldr	r3, [pc, #92]	; (8006238 <calWallConrol+0x1430>)
 80061dc:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 80061e0:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <calWallConrol+0x1408>)
 80061e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e4:	ee07 3a90 	vmov	s15, r3
 80061e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061ec:	4b13      	ldr	r3, [pc, #76]	; (800623c <calWallConrol+0x1434>)
 80061ee:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = 0;
 80061f2:	4b13      	ldr	r3, [pc, #76]	; (8006240 <calWallConrol+0x1438>)
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]
			wall_slant45.delta_error = 0;
 80061fa:	4b11      	ldr	r3, [pc, #68]	; (8006240 <calWallConrol+0x1438>)
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	609a      	str	r2, [r3, #8]
			wall_slant45.old_error = 0;
 8006202:	4b0f      	ldr	r3, [pc, #60]	; (8006240 <calWallConrol+0x1438>)
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	605a      	str	r2, [r3, #4]
			break;
 800620a:	e11a      	b.n	8006442 <calWallConrol+0x163a>
 800620c:	20000574 	.word	0x20000574
 8006210:	20000298 	.word	0x20000298
 8006214:	200005bc 	.word	0x200005bc
 8006218:	200005c0 	.word	0x200005c0
 800621c:	20000648 	.word	0x20000648
 8006220:	20000678 	.word	0x20000678
 8006224:	200006b0 	.word	0x200006b0
 8006228:	200006b4 	.word	0x200006b4
 800622c:	20000428 	.word	0x20000428
 8006230:	42a00000 	.word	0x42a00000
 8006234:	00000000 	.word	0x00000000
 8006238:	20000584 	.word	0x20000584
 800623c:	20000588 	.word	0x20000588
 8006240:	20000564 	.word	0x20000564
		case 1:			//左壁のみ
			pl_yellow_LED_3(0);
 8006244:	2000      	movs	r0, #0
 8006246:	f000 ff19 	bl	800707c <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 800624a:	2001      	movs	r0, #1
 800624c:	f000 ff28 	bl	80070a0 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8006250:	4b87      	ldr	r3, [pc, #540]	; (8006470 <calWallConrol+0x1668>)
 8006252:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006256:	ee07 3a90 	vmov	s15, r3
 800625a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800625e:	4b85      	ldr	r3, [pc, #532]	; (8006474 <calWallConrol+0x166c>)
 8006260:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = CenterSlantL45;
 8006264:	4a84      	ldr	r2, [pc, #528]	; (8006478 <calWallConrol+0x1670>)
 8006266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006268:	6013      	str	r3, [r2, #0]
			wall_slant45.error =
					(-(float) (g_sensor[SENSOR_FRONT_LEFT][0] - CenterSlantL45)
 800626a:	4b81      	ldr	r3, [pc, #516]	; (8006470 <calWallConrol+0x1668>)
 800626c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626e:	ee07 3a90 	vmov	s15, r3
 8006272:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006276:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800627a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800627e:	eef1 6a67 	vneg.f32	s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_LEFT][0]));
 8006282:	4b7b      	ldr	r3, [pc, #492]	; (8006470 <calWallConrol+0x1668>)
 8006284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006286:	ee07 3a90 	vmov	s15, r3
 800628a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800628e:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error =
 8006292:	4b7a      	ldr	r3, [pc, #488]	; (800647c <calWallConrol+0x1674>)
 8006294:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006298:	4b78      	ldr	r3, [pc, #480]	; (800647c <calWallConrol+0x1674>)
 800629a:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 800629e:	4b77      	ldr	r3, [pc, #476]	; (800647c <calWallConrol+0x1674>)
 80062a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80062a4:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 80062a8:	4b74      	ldr	r3, [pc, #464]	; (800647c <calWallConrol+0x1674>)
 80062aa:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 80062ae:	4b73      	ldr	r3, [pc, #460]	; (800647c <calWallConrol+0x1674>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a72      	ldr	r2, [pc, #456]	; (800647c <calWallConrol+0x1674>)
 80062b4:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80062b6:	4b71      	ldr	r3, [pc, #452]	; (800647c <calWallConrol+0x1674>)
 80062b8:	ed93 7a00 	vldr	s14, [r3]
 80062bc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80062c0:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 80062c4:	4b6d      	ldr	r3, [pc, #436]	; (800647c <calWallConrol+0x1674>)
 80062c6:	edd3 6a02 	vldr	s13, [r3, #8]
 80062ca:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80062ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062d2:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80062d6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80062da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062de:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80062e2:	e0ae      	b.n	8006442 <calWallConrol+0x163a>
		case 2:			//右壁のみ
			pl_yellow_LED_3(1);
 80062e4:	2001      	movs	r0, #1
 80062e6:	f000 fec9 	bl	800707c <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 80062ea:	2000      	movs	r0, #0
 80062ec:	f000 fed8 	bl	80070a0 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 80062f0:	4a60      	ldr	r2, [pc, #384]	; (8006474 <calWallConrol+0x166c>)
 80062f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062f4:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 80062f6:	4b5e      	ldr	r3, [pc, #376]	; (8006470 <calWallConrol+0x1668>)
 80062f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006302:	4b5d      	ldr	r3, [pc, #372]	; (8006478 <calWallConrol+0x1670>)
 8006304:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8006308:	4b59      	ldr	r3, [pc, #356]	; (8006470 <calWallConrol+0x1668>)
 800630a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006316:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800631a:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR45)
					/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 800631e:	4b54      	ldr	r3, [pc, #336]	; (8006470 <calWallConrol+0x1668>)
 8006320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006324:	ee07 3a90 	vmov	s15, r3
 8006328:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800632c:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8006330:	4b52      	ldr	r3, [pc, #328]	; (800647c <calWallConrol+0x1674>)
 8006332:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006336:	4b51      	ldr	r3, [pc, #324]	; (800647c <calWallConrol+0x1674>)
 8006338:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 800633c:	4b4f      	ldr	r3, [pc, #316]	; (800647c <calWallConrol+0x1674>)
 800633e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006342:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006346:	4b4d      	ldr	r3, [pc, #308]	; (800647c <calWallConrol+0x1674>)
 8006348:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 800634c:	4b4b      	ldr	r3, [pc, #300]	; (800647c <calWallConrol+0x1674>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a4a      	ldr	r2, [pc, #296]	; (800647c <calWallConrol+0x1674>)
 8006352:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006354:	4b49      	ldr	r3, [pc, #292]	; (800647c <calWallConrol+0x1674>)
 8006356:	ed93 7a00 	vldr	s14, [r3]
 800635a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800635e:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006362:	4b46      	ldr	r3, [pc, #280]	; (800647c <calWallConrol+0x1674>)
 8006364:	edd3 6a02 	vldr	s13, [r3, #8]
 8006368:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800636c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006370:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006374:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800637c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006380:	e05f      	b.n	8006442 <calWallConrol+0x163a>
		case 3:			//両壁あり
			pl_yellow_LED_3(1);
 8006382:	2001      	movs	r0, #1
 8006384:	f000 fe7a 	bl	800707c <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8006388:	2001      	movs	r0, #1
 800638a:	f000 fe89 	bl	80070a0 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 800638e:	4a39      	ldr	r2, [pc, #228]	; (8006474 <calWallConrol+0x166c>)
 8006390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006392:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = CenterSlantL45;
 8006394:	4a38      	ldr	r2, [pc, #224]	; (8006478 <calWallConrol+0x1670>)
 8006396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006398:	6013      	str	r3, [r2, #0]
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 800639a:	4b35      	ldr	r3, [pc, #212]	; (8006470 <calWallConrol+0x1668>)
 800639c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800639e:	ee07 3a90 	vmov	s15, r3
 80063a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063a6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80063aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063ae:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL45) / (float) (g_sensor[SENSOR_FRONT_LEFT][0])
 80063b2:	4b2f      	ldr	r3, [pc, #188]	; (8006470 <calWallConrol+0x1668>)
 80063b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b6:	ee07 3a90 	vmov	s15, r3
 80063ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 80063c2:	4b2b      	ldr	r3, [pc, #172]	; (8006470 <calWallConrol+0x1668>)
 80063c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063c8:	ee07 3a90 	vmov	s15, r3
 80063cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80063d0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80063d4:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 80063d8:	4b25      	ldr	r3, [pc, #148]	; (8006470 <calWallConrol+0x1668>)
 80063da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063de:	ee07 3a90 	vmov	s15, r3
 80063e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80063e6:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 80063ea:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 80063ee:	4b23      	ldr	r3, [pc, #140]	; (800647c <calWallConrol+0x1674>)
 80063f0:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 80063f4:	4b21      	ldr	r3, [pc, #132]	; (800647c <calWallConrol+0x1674>)
 80063f6:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 80063fa:	4b20      	ldr	r3, [pc, #128]	; (800647c <calWallConrol+0x1674>)
 80063fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8006400:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006404:	4b1d      	ldr	r3, [pc, #116]	; (800647c <calWallConrol+0x1674>)
 8006406:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 800640a:	4b1c      	ldr	r3, [pc, #112]	; (800647c <calWallConrol+0x1674>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a1b      	ldr	r2, [pc, #108]	; (800647c <calWallConrol+0x1674>)
 8006410:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006412:	4b1a      	ldr	r3, [pc, #104]	; (800647c <calWallConrol+0x1674>)
 8006414:	ed93 7a00 	vldr	s14, [r3]
 8006418:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800641c:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006420:	4b16      	ldr	r3, [pc, #88]	; (800647c <calWallConrol+0x1674>)
 8006422:	edd3 6a02 	vldr	s13, [r3, #8]
 8006426:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800642a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800642e:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006432:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800643a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800643e:	e000      	b.n	8006442 <calWallConrol+0x163a>
			break;
 8006440:	bf00      	nop
		}

	}
	PID_w = PID_wall / MAXMOTOR * g_V_battery_mean;
 8006442:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006446:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006480 <calWallConrol+0x1678>
 800644a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800644e:	4b0d      	ldr	r3, [pc, #52]	; (8006484 <calWallConrol+0x167c>)
 8006450:	edd3 7a00 	vldr	s15, [r3]
 8006454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006458:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	return PID_w;
 800645c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800645e:	ee07 3a90 	vmov	s15, r3
}
 8006462:	eeb0 0a67 	vmov.f32	s0, s15
 8006466:	37a8      	adds	r7, #168	; 0xa8
 8006468:	46bd      	mov	sp, r7
 800646a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800646e:	bf00      	nop
 8006470:	20000298 	.word	0x20000298
 8006474:	20000584 	.word	0x20000584
 8006478:	20000588 	.word	0x20000588
 800647c:	20000564 	.word	0x20000564
 8006480:	44d1e000 	.word	0x44d1e000
 8006484:	200004b4 	.word	0x200004b4

08006488 <interrupt_WallCut>:
			*PID_frontwall_r = 0;
		}
	}
}

void interrupt_WallCut(void) {
 8006488:	b5b0      	push	{r4, r5, r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
//	if (maze_mode == 1 || (modeacc != 0 && modeacc != 3)) {}

	if (g_wallCut_mode == 1) {
 800648e:	4b98      	ldr	r3, [pc, #608]	; (80066f0 <interrupt_WallCut+0x268>)
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2b01      	cmp	r3, #1
 8006494:	f040 8537 	bne.w	8006f06 <interrupt_WallCut+0xa7e>
// 壁壁の検知判定()
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_90) {
 8006498:	4b96      	ldr	r3, [pc, #600]	; (80066f4 <interrupt_WallCut+0x26c>)
 800649a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800649e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064a2:	dd03      	ble.n	80064ac <interrupt_WallCut+0x24>
			front_wall_break_90 = 1;
 80064a4:	4b94      	ldr	r3, [pc, #592]	; (80066f8 <interrupt_WallCut+0x270>)
 80064a6:	2201      	movs	r2, #1
 80064a8:	701a      	strb	r2, [r3, #0]
 80064aa:	e002      	b.n	80064b2 <interrupt_WallCut+0x2a>
		} else {
			front_wall_break_90 = 0;
 80064ac:	4b92      	ldr	r3, [pc, #584]	; (80066f8 <interrupt_WallCut+0x270>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45) {
 80064b2:	4b90      	ldr	r3, [pc, #576]	; (80066f4 <interrupt_WallCut+0x26c>)
 80064b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80064bc:	dd03      	ble.n	80064c6 <interrupt_WallCut+0x3e>
			front_wall_break_45 = 1;
 80064be:	4b8f      	ldr	r3, [pc, #572]	; (80066fc <interrupt_WallCut+0x274>)
 80064c0:	2201      	movs	r2, #1
 80064c2:	701a      	strb	r2, [r3, #0]
 80064c4:	e002      	b.n	80064cc <interrupt_WallCut+0x44>
		} else {
			front_wall_break_45 = 0;
 80064c6:	4b8d      	ldr	r3, [pc, #564]	; (80066fc <interrupt_WallCut+0x274>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45SLANT) {
 80064cc:	4b89      	ldr	r3, [pc, #548]	; (80066f4 <interrupt_WallCut+0x26c>)
 80064ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80064d6:	dd03      	ble.n	80064e0 <interrupt_WallCut+0x58>
			front_wall_break_45slant = 1;
 80064d8:	4b89      	ldr	r3, [pc, #548]	; (8006700 <interrupt_WallCut+0x278>)
 80064da:	2201      	movs	r2, #1
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	e002      	b.n	80064e6 <interrupt_WallCut+0x5e>
		} else {
			front_wall_break_45slant = 0;
 80064e0:	4b87      	ldr	r3, [pc, #540]	; (8006700 <interrupt_WallCut+0x278>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	701a      	strb	r2, [r3, #0]
		}

// スラロームで用いる90度センサーの壁切れ
		if (g_sensor[SENSOR_LEFT][0] < WALLCUT_THRESHOLD_L90) {
 80064e6:	4b83      	ldr	r3, [pc, #524]	; (80066f4 <interrupt_WallCut+0x26c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2bc7      	cmp	r3, #199	; 0xc7
 80064ec:	dc30      	bgt.n	8006550 <interrupt_WallCut+0xc8>
			NoWallCountL90++;
 80064ee:	4b85      	ldr	r3, [pc, #532]	; (8006704 <interrupt_WallCut+0x27c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3301      	adds	r3, #1
 80064f4:	4a83      	ldr	r2, [pc, #524]	; (8006704 <interrupt_WallCut+0x27c>)
 80064f6:	6013      	str	r3, [r2, #0]
			//straight.velocityのほうが良き？
			NoWallDisplacementL90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 80064f8:	4b83      	ldr	r3, [pc, #524]	; (8006708 <interrupt_WallCut+0x280>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fa f84b 	bl	8000598 <__aeabi_f2d>
 8006502:	4604      	mov	r4, r0
 8006504:	460d      	mov	r5, r1
 8006506:	4b81      	ldr	r3, [pc, #516]	; (800670c <interrupt_WallCut+0x284>)
 8006508:	ed93 7a00 	vldr	s14, [r3]
 800650c:	4b80      	ldr	r3, [pc, #512]	; (8006710 <interrupt_WallCut+0x288>)
 800650e:	edd3 7a00 	vldr	s15, [r3]
 8006512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006516:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800651a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800651e:	ee16 0a90 	vmov	r0, s13
 8006522:	f7fa f839 	bl	8000598 <__aeabi_f2d>
 8006526:	a370      	add	r3, pc, #448	; (adr r3, 80066e8 <interrupt_WallCut+0x260>)
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	f7fa f88c 	bl	8000648 <__aeabi_dmul>
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	4620      	mov	r0, r4
 8006536:	4629      	mov	r1, r5
 8006538:	f7f9 fed0 	bl	80002dc <__adddf3>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4610      	mov	r0, r2
 8006542:	4619      	mov	r1, r3
 8006544:	f7fa fb58 	bl	8000bf8 <__aeabi_d2f>
 8006548:	4603      	mov	r3, r0
 800654a:	4a6f      	ldr	r2, [pc, #444]	; (8006708 <interrupt_WallCut+0x280>)
 800654c:	6013      	str	r3, [r2, #0]
 800654e:	e006      	b.n	800655e <interrupt_WallCut+0xd6>
//			straight.velocity*INTERRUPT_TIME - straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2
		} else {
			NoWallCountL90 = 0;
 8006550:	4b6c      	ldr	r3, [pc, #432]	; (8006704 <interrupt_WallCut+0x27c>)
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
			NoWallDisplacementL90 = 0;
 8006556:	4b6c      	ldr	r3, [pc, #432]	; (8006708 <interrupt_WallCut+0x280>)
 8006558:	f04f 0200 	mov.w	r2, #0
 800655c:	601a      	str	r2, [r3, #0]
		}

		if (g_sensor[SENSOR_RIGHT][0] < WALLCUT_THRESHOLD_R90) {
 800655e:	4b65      	ldr	r3, [pc, #404]	; (80066f4 <interrupt_WallCut+0x26c>)
 8006560:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006564:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8006568:	da30      	bge.n	80065cc <interrupt_WallCut+0x144>
			NoWallCountR90++;
 800656a:	4b6a      	ldr	r3, [pc, #424]	; (8006714 <interrupt_WallCut+0x28c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3301      	adds	r3, #1
 8006570:	4a68      	ldr	r2, [pc, #416]	; (8006714 <interrupt_WallCut+0x28c>)
 8006572:	6013      	str	r3, [r2, #0]
			NoWallDisplacementR90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006574:	4b68      	ldr	r3, [pc, #416]	; (8006718 <interrupt_WallCut+0x290>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4618      	mov	r0, r3
 800657a:	f7fa f80d 	bl	8000598 <__aeabi_f2d>
 800657e:	4604      	mov	r4, r0
 8006580:	460d      	mov	r5, r1
 8006582:	4b62      	ldr	r3, [pc, #392]	; (800670c <interrupt_WallCut+0x284>)
 8006584:	ed93 7a00 	vldr	s14, [r3]
 8006588:	4b61      	ldr	r3, [pc, #388]	; (8006710 <interrupt_WallCut+0x288>)
 800658a:	edd3 7a00 	vldr	s15, [r3]
 800658e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006592:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006596:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800659a:	ee16 0a90 	vmov	r0, s13
 800659e:	f7f9 fffb 	bl	8000598 <__aeabi_f2d>
 80065a2:	a351      	add	r3, pc, #324	; (adr r3, 80066e8 <interrupt_WallCut+0x260>)
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	f7fa f84e 	bl	8000648 <__aeabi_dmul>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4620      	mov	r0, r4
 80065b2:	4629      	mov	r1, r5
 80065b4:	f7f9 fe92 	bl	80002dc <__adddf3>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4610      	mov	r0, r2
 80065be:	4619      	mov	r1, r3
 80065c0:	f7fa fb1a 	bl	8000bf8 <__aeabi_d2f>
 80065c4:	4603      	mov	r3, r0
 80065c6:	4a54      	ldr	r2, [pc, #336]	; (8006718 <interrupt_WallCut+0x290>)
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	e006      	b.n	80065da <interrupt_WallCut+0x152>
		} else {
			NoWallCountR90 = 0;
 80065cc:	4b51      	ldr	r3, [pc, #324]	; (8006714 <interrupt_WallCut+0x28c>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]
			NoWallDisplacementR90 = 0;
 80065d2:	4b51      	ldr	r3, [pc, #324]	; (8006718 <interrupt_WallCut+0x290>)
 80065d4:	f04f 0200 	mov.w	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]
		}

// 大回りターンで用いる45度センサーの壁切れ
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 80065da:	4b50      	ldr	r3, [pc, #320]	; (800671c <interrupt_WallCut+0x294>)
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f113 0f45 	cmn.w	r3, #69	; 0x45
 80065e2:	da04      	bge.n	80065ee <interrupt_WallCut+0x166>
				> WALLCUT_THRESHOLD_DIFF_L45 || g_sensor[SENSOR_FRONT_LEFT][0]
 80065e4:	4b43      	ldr	r3, [pc, #268]	; (80066f4 <interrupt_WallCut+0x26c>)
 80065e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e8:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80065ec:	dd37      	ble.n	800665e <interrupt_WallCut+0x1d6>
																				> WALLCUT_THRESHOLD_L45) {
			g_sensor_max_fl = 0;			//CENTER_FL;
 80065ee:	4b4c      	ldr	r3, [pc, #304]	; (8006720 <interrupt_WallCut+0x298>)
 80065f0:	f04f 0200 	mov.w	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
			NoWallCountL45++;
 80065f6:	4b4b      	ldr	r3, [pc, #300]	; (8006724 <interrupt_WallCut+0x29c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3301      	adds	r3, #1
 80065fc:	4a49      	ldr	r2, [pc, #292]	; (8006724 <interrupt_WallCut+0x29c>)
 80065fe:	6013      	str	r3, [r2, #0]
			//pl_l_blue_LED(0);
			NoWallCountL45_flag = 0;
 8006600:	4b49      	ldr	r3, [pc, #292]	; (8006728 <interrupt_WallCut+0x2a0>)
 8006602:	2200      	movs	r2, #0
 8006604:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountL45_flag == 1) {
//			NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006606:	4b49      	ldr	r3, [pc, #292]	; (800672c <interrupt_WallCut+0x2a4>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4618      	mov	r0, r3
 800660c:	f7f9 ffc4 	bl	8000598 <__aeabi_f2d>
 8006610:	4604      	mov	r4, r0
 8006612:	460d      	mov	r5, r1
 8006614:	4b3d      	ldr	r3, [pc, #244]	; (800670c <interrupt_WallCut+0x284>)
 8006616:	ed93 7a00 	vldr	s14, [r3]
 800661a:	4b3d      	ldr	r3, [pc, #244]	; (8006710 <interrupt_WallCut+0x288>)
 800661c:	edd3 7a00 	vldr	s15, [r3]
 8006620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006624:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006628:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800662c:	ee16 0a90 	vmov	r0, s13
 8006630:	f7f9 ffb2 	bl	8000598 <__aeabi_f2d>
 8006634:	a32c      	add	r3, pc, #176	; (adr r3, 80066e8 <interrupt_WallCut+0x260>)
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	f7fa f805 	bl	8000648 <__aeabi_dmul>
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	4620      	mov	r0, r4
 8006644:	4629      	mov	r1, r5
 8006646:	f7f9 fe49 	bl	80002dc <__adddf3>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	4610      	mov	r0, r2
 8006650:	4619      	mov	r1, r3
 8006652:	f7fa fad1 	bl	8000bf8 <__aeabi_d2f>
 8006656:	4603      	mov	r3, r0
 8006658:	4a34      	ldr	r2, [pc, #208]	; (800672c <interrupt_WallCut+0x2a4>)
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	e09c      	b.n	8006798 <interrupt_WallCut+0x310>
//			}
		} else {

			if (NoWallCountL45_flag == 0) {
 800665e:	4b32      	ldr	r3, [pc, #200]	; (8006728 <interrupt_WallCut+0x2a0>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d168      	bne.n	8006738 <interrupt_WallCut+0x2b0>
				for (int i = 0; i <= 19; i++) {
 8006666:	2300      	movs	r3, #0
 8006668:	60fb      	str	r3, [r7, #12]
 800666a:	e01f      	b.n	80066ac <interrupt_WallCut+0x224>
					if (g_sensor_max_fl
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 800666c:	4a21      	ldr	r2, [pc, #132]	; (80066f4 <interrupt_WallCut+0x26c>)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3314      	adds	r3, #20
 8006672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006676:	ee07 3a90 	vmov	s15, r3
 800667a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800667e:	4b28      	ldr	r3, [pc, #160]	; (8006720 <interrupt_WallCut+0x298>)
 8006680:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl
 8006684:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800668c:	dd0b      	ble.n	80066a6 <interrupt_WallCut+0x21e>
						g_sensor_max_fl =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 800668e:	4a19      	ldr	r2, [pc, #100]	; (80066f4 <interrupt_WallCut+0x26c>)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3314      	adds	r3, #20
 8006694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006698:	ee07 3a90 	vmov	s15, r3
 800669c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl =
 80066a0:	4b1f      	ldr	r3, [pc, #124]	; (8006720 <interrupt_WallCut+0x298>)
 80066a2:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	3301      	adds	r3, #1
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b13      	cmp	r3, #19
 80066b0:	dddc      	ble.n	800666c <interrupt_WallCut+0x1e4>
					}
				}
				NoWallCountL45 = 0;
 80066b2:	4b1c      	ldr	r3, [pc, #112]	; (8006724 <interrupt_WallCut+0x29c>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]
				NoWallCountL45_flag = 1;
 80066b8:	4b1b      	ldr	r3, [pc, #108]	; (8006728 <interrupt_WallCut+0x2a0>)
 80066ba:	2201      	movs	r2, #1
 80066bc:	701a      	strb	r2, [r3, #0]
				//pl_l_blue_LED(1);
				//NoWallDisplacementL45 = 0;
				NoWallDisplacementL45 = GAIN_WALLCUT
						* (g_sensor_max_fl - CENTER_FL) / g_sensor_max_fl;
 80066be:	4b18      	ldr	r3, [pc, #96]	; (8006720 <interrupt_WallCut+0x298>)
 80066c0:	edd3 7a00 	vldr	s15, [r3]
 80066c4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006730 <interrupt_WallCut+0x2a8>
 80066c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80066cc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006734 <interrupt_WallCut+0x2ac>
 80066d0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80066d4:	4b12      	ldr	r3, [pc, #72]	; (8006720 <interrupt_WallCut+0x298>)
 80066d6:	ed93 7a00 	vldr	s14, [r3]
 80066da:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementL45 = GAIN_WALLCUT
 80066de:	4b13      	ldr	r3, [pc, #76]	; (800672c <interrupt_WallCut+0x2a4>)
 80066e0:	edc3 7a00 	vstr	s15, [r3]
 80066e4:	e058      	b.n	8006798 <interrupt_WallCut+0x310>
 80066e6:	bf00      	nop
 80066e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80066ec:	3f50624d 	.word	0x3f50624d
 80066f0:	20000572 	.word	0x20000572
 80066f4:	20000298 	.word	0x20000298
 80066f8:	200005d2 	.word	0x200005d2
 80066fc:	200005d3 	.word	0x200005d3
 8006700:	200005d4 	.word	0x200005d4
 8006704:	20000598 	.word	0x20000598
 8006708:	200005b0 	.word	0x200005b0
 800670c:	20000238 	.word	0x20000238
 8006710:	2000023c 	.word	0x2000023c
 8006714:	20000594 	.word	0x20000594
 8006718:	200005ac 	.word	0x200005ac
 800671c:	2000043c 	.word	0x2000043c
 8006720:	200005d8 	.word	0x200005d8
 8006724:	200005a0 	.word	0x200005a0
 8006728:	200005cc 	.word	0x200005cc
 800672c:	200005b8 	.word	0x200005b8
 8006730:	43f68000 	.word	0x43f68000
 8006734:	00000000 	.word	0x00000000
			} else {
				NoWallCountL45++;
 8006738:	4bab      	ldr	r3, [pc, #684]	; (80069e8 <interrupt_WallCut+0x560>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3301      	adds	r3, #1
 800673e:	4aaa      	ldr	r2, [pc, #680]	; (80069e8 <interrupt_WallCut+0x560>)
 8006740:	6013      	str	r3, [r2, #0]
//				NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 8006742:	4baa      	ldr	r3, [pc, #680]	; (80069ec <interrupt_WallCut+0x564>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4618      	mov	r0, r3
 8006748:	f7f9 ff26 	bl	8000598 <__aeabi_f2d>
 800674c:	4604      	mov	r4, r0
 800674e:	460d      	mov	r5, r1
 8006750:	4ba7      	ldr	r3, [pc, #668]	; (80069f0 <interrupt_WallCut+0x568>)
 8006752:	ed93 7a00 	vldr	s14, [r3]
 8006756:	4ba7      	ldr	r3, [pc, #668]	; (80069f4 <interrupt_WallCut+0x56c>)
 8006758:	edd3 7a00 	vldr	s15, [r3]
 800675c:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 8006760:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006764:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006768:	ee16 0a90 	vmov	r0, s13
 800676c:	f7f9 ff14 	bl	8000598 <__aeabi_f2d>
 8006770:	a39b      	add	r3, pc, #620	; (adr r3, 80069e0 <interrupt_WallCut+0x558>)
 8006772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006776:	f7f9 ff67 	bl	8000648 <__aeabi_dmul>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 800677e:	4620      	mov	r0, r4
 8006780:	4629      	mov	r1, r5
 8006782:	f7f9 fdab 	bl	80002dc <__adddf3>
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	4610      	mov	r0, r2
 800678c:	4619      	mov	r1, r3
 800678e:	f7fa fa33 	bl	8000bf8 <__aeabi_d2f>
 8006792:	4603      	mov	r3, r0
 8006794:	4a95      	ldr	r2, [pc, #596]	; (80069ec <interrupt_WallCut+0x564>)
 8006796:	6013      	str	r3, [r2, #0]
			}
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 8006798:	4b97      	ldr	r3, [pc, #604]	; (80069f8 <interrupt_WallCut+0x570>)
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f113 0f81 	cmn.w	r3, #129	; 0x81
 80067a0:	da05      	bge.n	80067ae <interrupt_WallCut+0x326>
				> WALLCUT_THRESHOLD_DIFF_R45 || g_sensor[SENSOR_FRONT_RIGHT][0]
 80067a2:	4b96      	ldr	r3, [pc, #600]	; (80069fc <interrupt_WallCut+0x574>)
 80067a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067a8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80067ac:	dd37      	ble.n	800681e <interrupt_WallCut+0x396>
																		> WALLCUT_THRESHOLD_R45) {
			g_sensor_max_fr = 0;			//CENTER_FR;
 80067ae:	4b94      	ldr	r3, [pc, #592]	; (8006a00 <interrupt_WallCut+0x578>)
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]
			NoWallCountR45++;
 80067b6:	4b93      	ldr	r3, [pc, #588]	; (8006a04 <interrupt_WallCut+0x57c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3301      	adds	r3, #1
 80067bc:	4a91      	ldr	r2, [pc, #580]	; (8006a04 <interrupt_WallCut+0x57c>)
 80067be:	6013      	str	r3, [r2, #0]
			//pl_r_blue_LED(0);
			NoWallCountR45_flag = 0;
 80067c0:	4b91      	ldr	r3, [pc, #580]	; (8006a08 <interrupt_WallCut+0x580>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountR45_flag == 1) {
//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 80067c6:	4b91      	ldr	r3, [pc, #580]	; (8006a0c <interrupt_WallCut+0x584>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7f9 fee4 	bl	8000598 <__aeabi_f2d>
 80067d0:	4604      	mov	r4, r0
 80067d2:	460d      	mov	r5, r1
 80067d4:	4b86      	ldr	r3, [pc, #536]	; (80069f0 <interrupt_WallCut+0x568>)
 80067d6:	ed93 7a00 	vldr	s14, [r3]
 80067da:	4b86      	ldr	r3, [pc, #536]	; (80069f4 <interrupt_WallCut+0x56c>)
 80067dc:	edd3 7a00 	vldr	s15, [r3]
 80067e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067e4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80067e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80067ec:	ee16 0a90 	vmov	r0, s13
 80067f0:	f7f9 fed2 	bl	8000598 <__aeabi_f2d>
 80067f4:	a37a      	add	r3, pc, #488	; (adr r3, 80069e0 <interrupt_WallCut+0x558>)
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	f7f9 ff25 	bl	8000648 <__aeabi_dmul>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	4620      	mov	r0, r4
 8006804:	4629      	mov	r1, r5
 8006806:	f7f9 fd69 	bl	80002dc <__adddf3>
 800680a:	4602      	mov	r2, r0
 800680c:	460b      	mov	r3, r1
 800680e:	4610      	mov	r0, r2
 8006810:	4619      	mov	r1, r3
 8006812:	f7fa f9f1 	bl	8000bf8 <__aeabi_d2f>
 8006816:	4603      	mov	r3, r0
 8006818:	4a7c      	ldr	r2, [pc, #496]	; (8006a0c <interrupt_WallCut+0x584>)
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	e073      	b.n	8006906 <interrupt_WallCut+0x47e>
//			}
		} else {
			if (NoWallCountR45_flag == 0) {
 800681e:	4b7a      	ldr	r3, [pc, #488]	; (8006a08 <interrupt_WallCut+0x580>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d13f      	bne.n	80068a6 <interrupt_WallCut+0x41e>
				for (int i = 0; i <= 19; i++) {
 8006826:	2300      	movs	r3, #0
 8006828:	60bb      	str	r3, [r7, #8]
 800682a:	e01f      	b.n	800686c <interrupt_WallCut+0x3e4>
					if (g_sensor_max_fr
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 800682c:	4a73      	ldr	r2, [pc, #460]	; (80069fc <interrupt_WallCut+0x574>)
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	333c      	adds	r3, #60	; 0x3c
 8006832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006836:	ee07 3a90 	vmov	s15, r3
 800683a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800683e:	4b70      	ldr	r3, [pc, #448]	; (8006a00 <interrupt_WallCut+0x578>)
 8006840:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr
 8006844:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800684c:	dd0b      	ble.n	8006866 <interrupt_WallCut+0x3de>
						g_sensor_max_fr =
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 800684e:	4a6b      	ldr	r2, [pc, #428]	; (80069fc <interrupt_WallCut+0x574>)
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	333c      	adds	r3, #60	; 0x3c
 8006854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006858:	ee07 3a90 	vmov	s15, r3
 800685c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr =
 8006860:	4b67      	ldr	r3, [pc, #412]	; (8006a00 <interrupt_WallCut+0x578>)
 8006862:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	3301      	adds	r3, #1
 800686a:	60bb      	str	r3, [r7, #8]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b13      	cmp	r3, #19
 8006870:	dddc      	ble.n	800682c <interrupt_WallCut+0x3a4>
					}
				}
				NoWallCountR45 = 0;
 8006872:	4b64      	ldr	r3, [pc, #400]	; (8006a04 <interrupt_WallCut+0x57c>)
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]
				NoWallCountR45_flag = 1;
 8006878:	4b63      	ldr	r3, [pc, #396]	; (8006a08 <interrupt_WallCut+0x580>)
 800687a:	2201      	movs	r2, #1
 800687c:	701a      	strb	r2, [r3, #0]
				//pl_r_blue_LED(1);
				//NoWallDisplacementR45 = 0;
				NoWallDisplacementR45 = GAIN_WALLCUT
						* (g_sensor_max_fr - CENTER_FR) / g_sensor_max_fr;
 800687e:	4b60      	ldr	r3, [pc, #384]	; (8006a00 <interrupt_WallCut+0x578>)
 8006880:	edd3 7a00 	vldr	s15, [r3]
 8006884:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8006a10 <interrupt_WallCut+0x588>
 8006888:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800688c:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8006a14 <interrupt_WallCut+0x58c>
 8006890:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006894:	4b5a      	ldr	r3, [pc, #360]	; (8006a00 <interrupt_WallCut+0x578>)
 8006896:	ed93 7a00 	vldr	s14, [r3]
 800689a:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementR45 = GAIN_WALLCUT
 800689e:	4b5b      	ldr	r3, [pc, #364]	; (8006a0c <interrupt_WallCut+0x584>)
 80068a0:	edc3 7a00 	vstr	s15, [r3]
 80068a4:	e02f      	b.n	8006906 <interrupt_WallCut+0x47e>
			} else {
				NoWallCountR45++;
 80068a6:	4b57      	ldr	r3, [pc, #348]	; (8006a04 <interrupt_WallCut+0x57c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3301      	adds	r3, #1
 80068ac:	4a55      	ldr	r2, [pc, #340]	; (8006a04 <interrupt_WallCut+0x57c>)
 80068ae:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 80068b0:	4b56      	ldr	r3, [pc, #344]	; (8006a0c <interrupt_WallCut+0x584>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7f9 fe6f 	bl	8000598 <__aeabi_f2d>
 80068ba:	4604      	mov	r4, r0
 80068bc:	460d      	mov	r5, r1
 80068be:	4b4c      	ldr	r3, [pc, #304]	; (80069f0 <interrupt_WallCut+0x568>)
 80068c0:	ed93 7a00 	vldr	s14, [r3]
 80068c4:	4b4b      	ldr	r3, [pc, #300]	; (80069f4 <interrupt_WallCut+0x56c>)
 80068c6:	edd3 7a00 	vldr	s15, [r3]
 80068ca:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 80068ce:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80068d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80068d6:	ee16 0a90 	vmov	r0, s13
 80068da:	f7f9 fe5d 	bl	8000598 <__aeabi_f2d>
 80068de:	a340      	add	r3, pc, #256	; (adr r3, 80069e0 <interrupt_WallCut+0x558>)
 80068e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e4:	f7f9 feb0 	bl	8000648 <__aeabi_dmul>
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 80068ec:	4620      	mov	r0, r4
 80068ee:	4629      	mov	r1, r5
 80068f0:	f7f9 fcf4 	bl	80002dc <__adddf3>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4610      	mov	r0, r2
 80068fa:	4619      	mov	r1, r3
 80068fc:	f7fa f97c 	bl	8000bf8 <__aeabi_d2f>
 8006900:	4603      	mov	r3, r0
 8006902:	4a42      	ldr	r2, [pc, #264]	; (8006a0c <interrupt_WallCut+0x584>)
 8006904:	6013      	str	r3, [r2, #0]
			}

		}

		// 大回りターンで用いる45度センサーの壁切れ(斜め)
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 8006906:	4b3c      	ldr	r3, [pc, #240]	; (80069f8 <interrupt_WallCut+0x570>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800690e:	dd5f      	ble.n	80069d0 <interrupt_WallCut+0x548>
				> WALLCUT_THRESHOLD_DIFF_L45_SLANT) {
			g_sensor_max_fl_slant = 0;			//CENTER_FL_SLANT;
 8006910:	4b41      	ldr	r3, [pc, #260]	; (8006a18 <interrupt_WallCut+0x590>)
 8006912:	f04f 0200 	mov.w	r2, #0
 8006916:	601a      	str	r2, [r3, #0]
			NoWallCountL45slant++;
 8006918:	4b40      	ldr	r3, [pc, #256]	; (8006a1c <interrupt_WallCut+0x594>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3301      	adds	r3, #1
 800691e:	4a3f      	ldr	r2, [pc, #252]	; (8006a1c <interrupt_WallCut+0x594>)
 8006920:	6013      	str	r3, [r2, #0]
			pl_l_blue_LED(0);
 8006922:	2000      	movs	r0, #0
 8006924:	f000 fd16 	bl	8007354 <pl_l_blue_LED>
			NoWallCountL45slant_flag = 0;
 8006928:	4b3d      	ldr	r3, [pc, #244]	; (8006a20 <interrupt_WallCut+0x598>)
 800692a:	2200      	movs	r2, #0
 800692c:	701a      	strb	r2, [r3, #0]
			//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 800692e:	4b3d      	ldr	r3, [pc, #244]	; (8006a24 <interrupt_WallCut+0x59c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4618      	mov	r0, r3
 8006934:	f7f9 fe30 	bl	8000598 <__aeabi_f2d>
 8006938:	4604      	mov	r4, r0
 800693a:	460d      	mov	r5, r1
 800693c:	4b2c      	ldr	r3, [pc, #176]	; (80069f0 <interrupt_WallCut+0x568>)
 800693e:	ed93 7a00 	vldr	s14, [r3]
 8006942:	4b2c      	ldr	r3, [pc, #176]	; (80069f4 <interrupt_WallCut+0x56c>)
 8006944:	edd3 7a00 	vldr	s15, [r3]
 8006948:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 800694c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006950:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006954:	ee16 0a90 	vmov	r0, s13
 8006958:	f7f9 fe1e 	bl	8000598 <__aeabi_f2d>
 800695c:	a320      	add	r3, pc, #128	; (adr r3, 80069e0 <interrupt_WallCut+0x558>)
 800695e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006962:	f7f9 fe71 	bl	8000648 <__aeabi_dmul>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 800696a:	4620      	mov	r0, r4
 800696c:	4629      	mov	r1, r5
 800696e:	f7f9 fcb5 	bl	80002dc <__adddf3>
 8006972:	4602      	mov	r2, r0
 8006974:	460b      	mov	r3, r1
 8006976:	4610      	mov	r0, r2
 8006978:	4619      	mov	r1, r3
 800697a:	f7fa f93d 	bl	8000bf8 <__aeabi_d2f>
 800697e:	4603      	mov	r3, r0
 8006980:	4a28      	ldr	r2, [pc, #160]	; (8006a24 <interrupt_WallCut+0x59c>)
 8006982:	6013      	str	r3, [r2, #0]
			if (slantWallControlL_flag == 1) {
 8006984:	4b28      	ldr	r3, [pc, #160]	; (8006a28 <interrupt_WallCut+0x5a0>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b01      	cmp	r3, #1
 800698a:	f040 8130 	bne.w	8006bee <interrupt_WallCut+0x766>
				NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 800698e:	4b27      	ldr	r3, [pc, #156]	; (8006a2c <interrupt_WallCut+0x5a4>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4618      	mov	r0, r3
 8006994:	f7f9 fe00 	bl	8000598 <__aeabi_f2d>
 8006998:	4604      	mov	r4, r0
 800699a:	460d      	mov	r5, r1
 800699c:	4b24      	ldr	r3, [pc, #144]	; (8006a30 <interrupt_WallCut+0x5a8>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7f9 fdf9 	bl	8000598 <__aeabi_f2d>
 80069a6:	a30e      	add	r3, pc, #56	; (adr r3, 80069e0 <interrupt_WallCut+0x558>)
 80069a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ac:	f7f9 fe4c 	bl	8000648 <__aeabi_dmul>
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	4620      	mov	r0, r4
 80069b6:	4629      	mov	r1, r5
 80069b8:	f7f9 fc90 	bl	80002dc <__adddf3>
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	4610      	mov	r0, r2
 80069c2:	4619      	mov	r1, r3
 80069c4:	f7fa f918 	bl	8000bf8 <__aeabi_d2f>
 80069c8:	4603      	mov	r3, r0
 80069ca:	4a18      	ldr	r2, [pc, #96]	; (8006a2c <interrupt_WallCut+0x5a4>)
 80069cc:	6013      	str	r3, [r2, #0]
 80069ce:	e10e      	b.n	8006bee <interrupt_WallCut+0x766>
				//NoWallDisplacementL45slant += (E_speedL + E_speedR)
				//		/ 2*INTERRUPT_TIME;
			}
		} else {
			if (NoWallCountL45slant_flag == 0) {
 80069d0:	4b13      	ldr	r3, [pc, #76]	; (8006a20 <interrupt_WallCut+0x598>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f040 80b3 	bne.w	8006b40 <interrupt_WallCut+0x6b8>
				for (int i = 0; i <= 19; i++) {
 80069da:	2300      	movs	r3, #0
 80069dc:	607b      	str	r3, [r7, #4]
 80069de:	e049      	b.n	8006a74 <interrupt_WallCut+0x5ec>
 80069e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80069e4:	3f50624d 	.word	0x3f50624d
 80069e8:	200005a0 	.word	0x200005a0
 80069ec:	200005b8 	.word	0x200005b8
 80069f0:	20000238 	.word	0x20000238
 80069f4:	2000023c 	.word	0x2000023c
 80069f8:	2000043c 	.word	0x2000043c
 80069fc:	20000298 	.word	0x20000298
 8006a00:	200005dc 	.word	0x200005dc
 8006a04:	2000059c 	.word	0x2000059c
 8006a08:	200005cd 	.word	0x200005cd
 8006a0c:	200005b4 	.word	0x200005b4
 8006a10:	44484000 	.word	0x44484000
 8006a14:	00000000 	.word	0x00000000
 8006a18:	200005e0 	.word	0x200005e0
 8006a1c:	200005a8 	.word	0x200005a8
 8006a20:	200005ce 	.word	0x200005ce
 8006a24:	200005c8 	.word	0x200005c8
 8006a28:	200005d0 	.word	0x200005d0
 8006a2c:	200005c0 	.word	0x200005c0
 8006a30:	200004b8 	.word	0x200004b8
					if (g_sensor_max_fl_slant
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 8006a34:	4aac      	ldr	r2, [pc, #688]	; (8006ce8 <interrupt_WallCut+0x860>)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	3314      	adds	r3, #20
 8006a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a46:	4ba9      	ldr	r3, [pc, #676]	; (8006cec <interrupt_WallCut+0x864>)
 8006a48:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl_slant
 8006a4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a54:	dd0b      	ble.n	8006a6e <interrupt_WallCut+0x5e6>
						g_sensor_max_fl_slant =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 8006a56:	4aa4      	ldr	r2, [pc, #656]	; (8006ce8 <interrupt_WallCut+0x860>)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3314      	adds	r3, #20
 8006a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a60:	ee07 3a90 	vmov	s15, r3
 8006a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl_slant =
 8006a68:	4ba0      	ldr	r3, [pc, #640]	; (8006cec <interrupt_WallCut+0x864>)
 8006a6a:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	3301      	adds	r3, #1
 8006a72:	607b      	str	r3, [r7, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b13      	cmp	r3, #19
 8006a78:	dddc      	ble.n	8006a34 <interrupt_WallCut+0x5ac>
					}
				}
				NoWallCountL45slant = 0;
 8006a7a:	4b9d      	ldr	r3, [pc, #628]	; (8006cf0 <interrupt_WallCut+0x868>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]
				NoWallCountL45slant_flag = 1;
 8006a80:	4b9c      	ldr	r3, [pc, #624]	; (8006cf4 <interrupt_WallCut+0x86c>)
 8006a82:	2201      	movs	r2, #1
 8006a84:	701a      	strb	r2, [r3, #0]
				pl_l_blue_LED(1);
 8006a86:	2001      	movs	r0, #1
 8006a88:	f000 fc64 	bl	8007354 <pl_l_blue_LED>
				//			NoWallDisplacementL45slant = 0;
				//			NoWallDisplacementL45slant2 = 0;
				if (g_sensor_max_fl_slant - CENTER_FL_SLANT >= 0) {
 8006a8c:	4b97      	ldr	r3, [pc, #604]	; (8006cec <interrupt_WallCut+0x864>)
 8006a8e:	edd3 7a00 	vldr	s15, [r3]
 8006a92:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8006cf8 <interrupt_WallCut+0x870>
 8006a96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa2:	db26      	blt.n	8006af2 <interrupt_WallCut+0x66a>
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006aa4:	4b91      	ldr	r3, [pc, #580]	; (8006cec <interrupt_WallCut+0x864>)
 8006aa6:	edd3 7a00 	vldr	s15, [r3]
 8006aaa:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8006cf8 <interrupt_WallCut+0x870>
 8006aae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ab2:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8006cfc <interrupt_WallCut+0x874>
 8006ab6:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006aba:	4b8c      	ldr	r3, [pc, #560]	; (8006cec <interrupt_WallCut+0x864>)
 8006abc:	ed93 7a00 	vldr	s14, [r3]
 8006ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
 8006ac4:	4b8e      	ldr	r3, [pc, #568]	; (8006d00 <interrupt_WallCut+0x878>)
 8006ac6:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006aca:	4b88      	ldr	r3, [pc, #544]	; (8006cec <interrupt_WallCut+0x864>)
 8006acc:	edd3 7a00 	vldr	s15, [r3]
 8006ad0:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8006cf8 <interrupt_WallCut+0x870>
 8006ad4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ad8:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8006cfc <interrupt_WallCut+0x874>
 8006adc:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006ae0:	4b82      	ldr	r3, [pc, #520]	; (8006cec <interrupt_WallCut+0x864>)
 8006ae2:	ed93 7a00 	vldr	s14, [r3]
 8006ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
 8006aea:	4b86      	ldr	r3, [pc, #536]	; (8006d04 <interrupt_WallCut+0x87c>)
 8006aec:	edc3 7a00 	vstr	s15, [r3]
 8006af0:	e07a      	b.n	8006be8 <interrupt_WallCut+0x760>
				} else {
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006af2:	4b7e      	ldr	r3, [pc, #504]	; (8006cec <interrupt_WallCut+0x864>)
 8006af4:	edd3 7a00 	vldr	s15, [r3]
 8006af8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8006cf8 <interrupt_WallCut+0x870>
 8006afc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b00:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8006cfc <interrupt_WallCut+0x874>
 8006b04:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006b08:	4b78      	ldr	r3, [pc, #480]	; (8006cec <interrupt_WallCut+0x864>)
 8006b0a:	ed93 7a00 	vldr	s14, [r3]
 8006b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
 8006b12:	4b7b      	ldr	r3, [pc, #492]	; (8006d00 <interrupt_WallCut+0x878>)
 8006b14:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006b18:	4b74      	ldr	r3, [pc, #464]	; (8006cec <interrupt_WallCut+0x864>)
 8006b1a:	edd3 7a00 	vldr	s15, [r3]
 8006b1e:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8006cf8 <interrupt_WallCut+0x870>
 8006b22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b26:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8006cfc <interrupt_WallCut+0x874>
 8006b2a:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006b2e:	4b6f      	ldr	r3, [pc, #444]	; (8006cec <interrupt_WallCut+0x864>)
 8006b30:	ed93 7a00 	vldr	s14, [r3]
 8006b34:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
 8006b38:	4b72      	ldr	r3, [pc, #456]	; (8006d04 <interrupt_WallCut+0x87c>)
 8006b3a:	edc3 7a00 	vstr	s15, [r3]
 8006b3e:	e053      	b.n	8006be8 <interrupt_WallCut+0x760>
				}

			} else {
				NoWallCountL45slant++;
 8006b40:	4b6b      	ldr	r3, [pc, #428]	; (8006cf0 <interrupt_WallCut+0x868>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3301      	adds	r3, #1
 8006b46:	4a6a      	ldr	r2, [pc, #424]	; (8006cf0 <interrupt_WallCut+0x868>)
 8006b48:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006b4a:	4b6e      	ldr	r3, [pc, #440]	; (8006d04 <interrupt_WallCut+0x87c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7f9 fd22 	bl	8000598 <__aeabi_f2d>
 8006b54:	4604      	mov	r4, r0
 8006b56:	460d      	mov	r5, r1
 8006b58:	4b6b      	ldr	r3, [pc, #428]	; (8006d08 <interrupt_WallCut+0x880>)
 8006b5a:	ed93 7a00 	vldr	s14, [r3]
 8006b5e:	4b6b      	ldr	r3, [pc, #428]	; (8006d0c <interrupt_WallCut+0x884>)
 8006b60:	edd3 7a00 	vldr	s15, [r3]
 8006b64:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006b68:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006b6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006b70:	ee16 0a90 	vmov	r0, s13
 8006b74:	f7f9 fd10 	bl	8000598 <__aeabi_f2d>
 8006b78:	a359      	add	r3, pc, #356	; (adr r3, 8006ce0 <interrupt_WallCut+0x858>)
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	f7f9 fd63 	bl	8000648 <__aeabi_dmul>
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006b86:	4620      	mov	r0, r4
 8006b88:	4629      	mov	r1, r5
 8006b8a:	f7f9 fba7 	bl	80002dc <__adddf3>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4610      	mov	r0, r2
 8006b94:	4619      	mov	r1, r3
 8006b96:	f7fa f82f 	bl	8000bf8 <__aeabi_d2f>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	4a59      	ldr	r2, [pc, #356]	; (8006d04 <interrupt_WallCut+0x87c>)
 8006b9e:	6013      	str	r3, [r2, #0]
				if (slantWallControlL_flag == 1) {
 8006ba0:	4b5b      	ldr	r3, [pc, #364]	; (8006d10 <interrupt_WallCut+0x888>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d11f      	bne.n	8006be8 <interrupt_WallCut+0x760>
					NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8006ba8:	4b55      	ldr	r3, [pc, #340]	; (8006d00 <interrupt_WallCut+0x878>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7f9 fcf3 	bl	8000598 <__aeabi_f2d>
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	460d      	mov	r5, r1
 8006bb6:	4b57      	ldr	r3, [pc, #348]	; (8006d14 <interrupt_WallCut+0x88c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7f9 fcec 	bl	8000598 <__aeabi_f2d>
 8006bc0:	a347      	add	r3, pc, #284	; (adr r3, 8006ce0 <interrupt_WallCut+0x858>)
 8006bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc6:	f7f9 fd3f 	bl	8000648 <__aeabi_dmul>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4620      	mov	r0, r4
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	f7f9 fb83 	bl	80002dc <__adddf3>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	4610      	mov	r0, r2
 8006bdc:	4619      	mov	r1, r3
 8006bde:	f7fa f80b 	bl	8000bf8 <__aeabi_d2f>
 8006be2:	4603      	mov	r3, r0
 8006be4:	4a46      	ldr	r2, [pc, #280]	; (8006d00 <interrupt_WallCut+0x878>)
 8006be6:	6013      	str	r3, [r2, #0]
//					NoWallDisplacementL45slant += (E_speedL + E_speedR)
//							/ 2*INTERRUPT_TIME;
				}
			}

			slantWallControlL_flag = 1;
 8006be8:	4b49      	ldr	r3, [pc, #292]	; (8006d10 <interrupt_WallCut+0x888>)
 8006bea:	2201      	movs	r2, #1
 8006bec:	701a      	strb	r2, [r3, #0]
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 8006bee:	4b4a      	ldr	r3, [pc, #296]	; (8006d18 <interrupt_WallCut+0x890>)
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8006bf6:	dd6a      	ble.n	8006cce <interrupt_WallCut+0x846>
				> WALLCUT_THRESHOLD_DIFF_R45_SLANT) {
			g_sensor_max_fr_slant = 0;				//CENTER_FR_SLANT;
 8006bf8:	4b48      	ldr	r3, [pc, #288]	; (8006d1c <interrupt_WallCut+0x894>)
 8006bfa:	f04f 0200 	mov.w	r2, #0
 8006bfe:	601a      	str	r2, [r3, #0]
			NoWallCountR45slant++;
 8006c00:	4b47      	ldr	r3, [pc, #284]	; (8006d20 <interrupt_WallCut+0x898>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	3301      	adds	r3, #1
 8006c06:	4a46      	ldr	r2, [pc, #280]	; (8006d20 <interrupt_WallCut+0x898>)
 8006c08:	6013      	str	r3, [r2, #0]
			pl_r_blue_LED(0);
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	f000 fb90 	bl	8007330 <pl_r_blue_LED>
			NoWallCountR45slant_flag = 0;
 8006c10:	4b44      	ldr	r3, [pc, #272]	; (8006d24 <interrupt_WallCut+0x89c>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	701a      	strb	r2, [r3, #0]
//	 		NoWallDisplacementR45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006c16:	4b44      	ldr	r3, [pc, #272]	; (8006d28 <interrupt_WallCut+0x8a0>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7f9 fcbc 	bl	8000598 <__aeabi_f2d>
 8006c20:	4604      	mov	r4, r0
 8006c22:	460d      	mov	r5, r1
 8006c24:	4b38      	ldr	r3, [pc, #224]	; (8006d08 <interrupt_WallCut+0x880>)
 8006c26:	ed93 7a00 	vldr	s14, [r3]
 8006c2a:	4b38      	ldr	r3, [pc, #224]	; (8006d0c <interrupt_WallCut+0x884>)
 8006c2c:	edd3 7a00 	vldr	s15, [r3]
 8006c30:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8006c34:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006c38:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006c3c:	ee16 0a90 	vmov	r0, s13
 8006c40:	f7f9 fcaa 	bl	8000598 <__aeabi_f2d>
 8006c44:	a326      	add	r3, pc, #152	; (adr r3, 8006ce0 <interrupt_WallCut+0x858>)
 8006c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4a:	f7f9 fcfd 	bl	8000648 <__aeabi_dmul>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006c52:	4620      	mov	r0, r4
 8006c54:	4629      	mov	r1, r5
 8006c56:	f7f9 fb41 	bl	80002dc <__adddf3>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	4610      	mov	r0, r2
 8006c60:	4619      	mov	r1, r3
 8006c62:	f7f9 ffc9 	bl	8000bf8 <__aeabi_d2f>
 8006c66:	4603      	mov	r3, r0
 8006c68:	4a2f      	ldr	r2, [pc, #188]	; (8006d28 <interrupt_WallCut+0x8a0>)
 8006c6a:	6013      	str	r3, [r2, #0]
			if (slantWallControlR_flag == 1) {
 8006c6c:	4b2f      	ldr	r3, [pc, #188]	; (8006d2c <interrupt_WallCut+0x8a4>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	f040 81a8 	bne.w	8006fc6 <interrupt_WallCut+0xb3e>
//				NoWallDisplacementR45slant += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006c76:	4b2e      	ldr	r3, [pc, #184]	; (8006d30 <interrupt_WallCut+0x8a8>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7f9 fc8c 	bl	8000598 <__aeabi_f2d>
 8006c80:	4604      	mov	r4, r0
 8006c82:	460d      	mov	r5, r1
 8006c84:	4b20      	ldr	r3, [pc, #128]	; (8006d08 <interrupt_WallCut+0x880>)
 8006c86:	ed93 7a00 	vldr	s14, [r3]
 8006c8a:	4b20      	ldr	r3, [pc, #128]	; (8006d0c <interrupt_WallCut+0x884>)
 8006c8c:	edd3 7a00 	vldr	s15, [r3]
 8006c90:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006c94:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006c98:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006c9c:	ee16 0a90 	vmov	r0, s13
 8006ca0:	f7f9 fc7a 	bl	8000598 <__aeabi_f2d>
 8006ca4:	a30e      	add	r3, pc, #56	; (adr r3, 8006ce0 <interrupt_WallCut+0x858>)
 8006ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006caa:	f7f9 fccd 	bl	8000648 <__aeabi_dmul>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	f7f9 fb11 	bl	80002dc <__adddf3>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	f7f9 ff99 	bl	8000bf8 <__aeabi_d2f>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	4a19      	ldr	r2, [pc, #100]	; (8006d30 <interrupt_WallCut+0x8a8>)
 8006cca:	6013      	str	r3, [r2, #0]
		g_sensor_max_fl_slant = 0;
		g_sensor_max_fr_slant = 0;

	}

}
 8006ccc:	e17b      	b.n	8006fc6 <interrupt_WallCut+0xb3e>
			if (NoWallCountR45slant_flag == 0) {
 8006cce:	4b15      	ldr	r3, [pc, #84]	; (8006d24 <interrupt_WallCut+0x89c>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f040 80b4 	bne.w	8006e40 <interrupt_WallCut+0x9b8>
				for (int i = 0; i <= 19; i++) {
 8006cd8:	2300      	movs	r3, #0
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	e04a      	b.n	8006d74 <interrupt_WallCut+0x8ec>
 8006cde:	bf00      	nop
 8006ce0:	d2f1a9fc 	.word	0xd2f1a9fc
 8006ce4:	3f50624d 	.word	0x3f50624d
 8006ce8:	20000298 	.word	0x20000298
 8006cec:	200005e0 	.word	0x200005e0
 8006cf0:	200005a8 	.word	0x200005a8
 8006cf4:	200005ce 	.word	0x200005ce
 8006cf8:	455ac000 	.word	0x455ac000
 8006cfc:	00000000 	.word	0x00000000
 8006d00:	200005c0 	.word	0x200005c0
 8006d04:	200005c8 	.word	0x200005c8
 8006d08:	20000238 	.word	0x20000238
 8006d0c:	2000023c 	.word	0x2000023c
 8006d10:	200005d0 	.word	0x200005d0
 8006d14:	200004b8 	.word	0x200004b8
 8006d18:	2000043c 	.word	0x2000043c
 8006d1c:	200005e4 	.word	0x200005e4
 8006d20:	200005a4 	.word	0x200005a4
 8006d24:	200005cf 	.word	0x200005cf
 8006d28:	200005c4 	.word	0x200005c4
 8006d2c:	200005d1 	.word	0x200005d1
 8006d30:	200005bc 	.word	0x200005bc
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 8006d34:	4aa8      	ldr	r2, [pc, #672]	; (8006fd8 <interrupt_WallCut+0xb50>)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	333c      	adds	r3, #60	; 0x3c
 8006d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d46:	4ba5      	ldr	r3, [pc, #660]	; (8006fdc <interrupt_WallCut+0xb54>)
 8006d48:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr_slant
 8006d4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d54:	dd0b      	ble.n	8006d6e <interrupt_WallCut+0x8e6>
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 8006d56:	4aa0      	ldr	r2, [pc, #640]	; (8006fd8 <interrupt_WallCut+0xb50>)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	333c      	adds	r3, #60	; 0x3c
 8006d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d60:	ee07 3a90 	vmov	s15, r3
 8006d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr_slant =
 8006d68:	4b9c      	ldr	r3, [pc, #624]	; (8006fdc <interrupt_WallCut+0xb54>)
 8006d6a:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	3301      	adds	r3, #1
 8006d72:	603b      	str	r3, [r7, #0]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2b13      	cmp	r3, #19
 8006d78:	dddc      	ble.n	8006d34 <interrupt_WallCut+0x8ac>
				NoWallCountR45slant = 0;
 8006d7a:	4b99      	ldr	r3, [pc, #612]	; (8006fe0 <interrupt_WallCut+0xb58>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]
				NoWallCountR45slant_flag = 1;
 8006d80:	4b98      	ldr	r3, [pc, #608]	; (8006fe4 <interrupt_WallCut+0xb5c>)
 8006d82:	2201      	movs	r2, #1
 8006d84:	701a      	strb	r2, [r3, #0]
				pl_r_blue_LED(1);
 8006d86:	2001      	movs	r0, #1
 8006d88:	f000 fad2 	bl	8007330 <pl_r_blue_LED>
				if (g_sensor_max_fr_slant - CENTER_FR_SLANT >= 0) {
 8006d8c:	4b93      	ldr	r3, [pc, #588]	; (8006fdc <interrupt_WallCut+0xb54>)
 8006d8e:	edd3 7a00 	vldr	s15, [r3]
 8006d92:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8006fe8 <interrupt_WallCut+0xb60>
 8006d96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da2:	db26      	blt.n	8006df2 <interrupt_WallCut+0x96a>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006da4:	4b8d      	ldr	r3, [pc, #564]	; (8006fdc <interrupt_WallCut+0xb54>)
 8006da6:	edd3 7a00 	vldr	s15, [r3]
 8006daa:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8006fe8 <interrupt_WallCut+0xb60>
 8006dae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006db2:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8006fec <interrupt_WallCut+0xb64>
 8006db6:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006dba:	4b88      	ldr	r3, [pc, #544]	; (8006fdc <interrupt_WallCut+0xb54>)
 8006dbc:	ed93 7a00 	vldr	s14, [r3]
 8006dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT
 8006dc4:	4b8a      	ldr	r3, [pc, #552]	; (8006ff0 <interrupt_WallCut+0xb68>)
 8006dc6:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006dca:	4b84      	ldr	r3, [pc, #528]	; (8006fdc <interrupt_WallCut+0xb54>)
 8006dcc:	edd3 7a00 	vldr	s15, [r3]
 8006dd0:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8006fe8 <interrupt_WallCut+0xb60>
 8006dd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006dd8:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8006fec <interrupt_WallCut+0xb64>
 8006ddc:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006de0:	4b7e      	ldr	r3, [pc, #504]	; (8006fdc <interrupt_WallCut+0xb54>)
 8006de2:	ed93 7a00 	vldr	s14, [r3]
 8006de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT
 8006dea:	4b82      	ldr	r3, [pc, #520]	; (8006ff4 <interrupt_WallCut+0xb6c>)
 8006dec:	edc3 7a00 	vstr	s15, [r3]
 8006df0:	e085      	b.n	8006efe <interrupt_WallCut+0xa76>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006df2:	4b7a      	ldr	r3, [pc, #488]	; (8006fdc <interrupt_WallCut+0xb54>)
 8006df4:	edd3 7a00 	vldr	s15, [r3]
 8006df8:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8006fe8 <interrupt_WallCut+0xb60>
 8006dfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e00:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8006fec <interrupt_WallCut+0xb64>
 8006e04:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006e08:	4b74      	ldr	r3, [pc, #464]	; (8006fdc <interrupt_WallCut+0xb54>)
 8006e0a:	ed93 7a00 	vldr	s14, [r3]
 8006e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT2
 8006e12:	4b77      	ldr	r3, [pc, #476]	; (8006ff0 <interrupt_WallCut+0xb68>)
 8006e14:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006e18:	4b70      	ldr	r3, [pc, #448]	; (8006fdc <interrupt_WallCut+0xb54>)
 8006e1a:	edd3 7a00 	vldr	s15, [r3]
 8006e1e:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8006fe8 <interrupt_WallCut+0xb60>
 8006e22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e26:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8006fec <interrupt_WallCut+0xb64>
 8006e2a:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006e2e:	4b6b      	ldr	r3, [pc, #428]	; (8006fdc <interrupt_WallCut+0xb54>)
 8006e30:	ed93 7a00 	vldr	s14, [r3]
 8006e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT2
 8006e38:	4b6e      	ldr	r3, [pc, #440]	; (8006ff4 <interrupt_WallCut+0xb6c>)
 8006e3a:	edc3 7a00 	vstr	s15, [r3]
 8006e3e:	e05e      	b.n	8006efe <interrupt_WallCut+0xa76>
				NoWallCountR45slant++;
 8006e40:	4b67      	ldr	r3, [pc, #412]	; (8006fe0 <interrupt_WallCut+0xb58>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3301      	adds	r3, #1
 8006e46:	4a66      	ldr	r2, [pc, #408]	; (8006fe0 <interrupt_WallCut+0xb58>)
 8006e48:	6013      	str	r3, [r2, #0]
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006e4a:	4b6a      	ldr	r3, [pc, #424]	; (8006ff4 <interrupt_WallCut+0xb6c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7f9 fba2 	bl	8000598 <__aeabi_f2d>
 8006e54:	4604      	mov	r4, r0
 8006e56:	460d      	mov	r5, r1
 8006e58:	4b67      	ldr	r3, [pc, #412]	; (8006ff8 <interrupt_WallCut+0xb70>)
 8006e5a:	ed93 7a00 	vldr	s14, [r3]
 8006e5e:	4b67      	ldr	r3, [pc, #412]	; (8006ffc <interrupt_WallCut+0xb74>)
 8006e60:	edd3 7a00 	vldr	s15, [r3]
 8006e64:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006e68:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006e6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006e70:	ee16 0a90 	vmov	r0, s13
 8006e74:	f7f9 fb90 	bl	8000598 <__aeabi_f2d>
 8006e78:	a355      	add	r3, pc, #340	; (adr r3, 8006fd0 <interrupt_WallCut+0xb48>)
 8006e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7e:	f7f9 fbe3 	bl	8000648 <__aeabi_dmul>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006e86:	4620      	mov	r0, r4
 8006e88:	4629      	mov	r1, r5
 8006e8a:	f7f9 fa27 	bl	80002dc <__adddf3>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	4610      	mov	r0, r2
 8006e94:	4619      	mov	r1, r3
 8006e96:	f7f9 feaf 	bl	8000bf8 <__aeabi_d2f>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	4a55      	ldr	r2, [pc, #340]	; (8006ff4 <interrupt_WallCut+0xb6c>)
 8006e9e:	6013      	str	r3, [r2, #0]
				if (slantWallControlR_flag == 1) {
 8006ea0:	4b57      	ldr	r3, [pc, #348]	; (8007000 <interrupt_WallCut+0xb78>)
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d12a      	bne.n	8006efe <interrupt_WallCut+0xa76>
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006ea8:	4b51      	ldr	r3, [pc, #324]	; (8006ff0 <interrupt_WallCut+0xb68>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7f9 fb73 	bl	8000598 <__aeabi_f2d>
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	460d      	mov	r5, r1
 8006eb6:	4b50      	ldr	r3, [pc, #320]	; (8006ff8 <interrupt_WallCut+0xb70>)
 8006eb8:	ed93 7a00 	vldr	s14, [r3]
 8006ebc:	4b4f      	ldr	r3, [pc, #316]	; (8006ffc <interrupt_WallCut+0xb74>)
 8006ebe:	edd3 7a00 	vldr	s15, [r3]
 8006ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
							/ 2*INTERRUPT_TIME;
 8006ec6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006eca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006ece:	ee16 0a90 	vmov	r0, s13
 8006ed2:	f7f9 fb61 	bl	8000598 <__aeabi_f2d>
 8006ed6:	a33e      	add	r3, pc, #248	; (adr r3, 8006fd0 <interrupt_WallCut+0xb48>)
 8006ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006edc:	f7f9 fbb4 	bl	8000648 <__aeabi_dmul>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	f7f9 f9f8 	bl	80002dc <__adddf3>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	f7f9 fe80 	bl	8000bf8 <__aeabi_d2f>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	4a3d      	ldr	r2, [pc, #244]	; (8006ff0 <interrupt_WallCut+0xb68>)
 8006efc:	6013      	str	r3, [r2, #0]
			slantWallControlR_flag = 1;
 8006efe:	4b40      	ldr	r3, [pc, #256]	; (8007000 <interrupt_WallCut+0xb78>)
 8006f00:	2201      	movs	r2, #1
 8006f02:	701a      	strb	r2, [r3, #0]
}
 8006f04:	e05f      	b.n	8006fc6 <interrupt_WallCut+0xb3e>
		NoWallCountL90 = 0;
 8006f06:	4b3f      	ldr	r3, [pc, #252]	; (8007004 <interrupt_WallCut+0xb7c>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]
		NoWallCountR90 = 0;
 8006f0c:	4b3e      	ldr	r3, [pc, #248]	; (8007008 <interrupt_WallCut+0xb80>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	601a      	str	r2, [r3, #0]
		NoWallCountL45 = 0;
 8006f12:	4b3e      	ldr	r3, [pc, #248]	; (800700c <interrupt_WallCut+0xb84>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]
		NoWallCountR45 = 0;
 8006f18:	4b3d      	ldr	r3, [pc, #244]	; (8007010 <interrupt_WallCut+0xb88>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]
		NoWallCountL45slant = 0;
 8006f1e:	4b3d      	ldr	r3, [pc, #244]	; (8007014 <interrupt_WallCut+0xb8c>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]
		NoWallCountR45slant = 0;
 8006f24:	4b2e      	ldr	r3, [pc, #184]	; (8006fe0 <interrupt_WallCut+0xb58>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL90 = 0;
 8006f2a:	4b3b      	ldr	r3, [pc, #236]	; (8007018 <interrupt_WallCut+0xb90>)
 8006f2c:	f04f 0200 	mov.w	r2, #0
 8006f30:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR90 = 0;
 8006f32:	4b3a      	ldr	r3, [pc, #232]	; (800701c <interrupt_WallCut+0xb94>)
 8006f34:	f04f 0200 	mov.w	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8006f3a:	4b39      	ldr	r3, [pc, #228]	; (8007020 <interrupt_WallCut+0xb98>)
 8006f3c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006f40:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8006f42:	4b38      	ldr	r3, [pc, #224]	; (8007024 <interrupt_WallCut+0xb9c>)
 8006f44:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006f48:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant = 0;
 8006f4a:	4b37      	ldr	r3, [pc, #220]	; (8007028 <interrupt_WallCut+0xba0>)
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant = 0;
 8006f52:	4b27      	ldr	r3, [pc, #156]	; (8006ff0 <interrupt_WallCut+0xb68>)
 8006f54:	f04f 0200 	mov.w	r2, #0
 8006f58:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant2 = 0;			//単純な壁切れ用
 8006f5a:	4b34      	ldr	r3, [pc, #208]	; (800702c <interrupt_WallCut+0xba4>)
 8006f5c:	f04f 0200 	mov.w	r2, #0
 8006f60:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant2 = 0;			//単純な壁切れ用
 8006f62:	4b24      	ldr	r3, [pc, #144]	; (8006ff4 <interrupt_WallCut+0xb6c>)
 8006f64:	f04f 0200 	mov.w	r2, #0
 8006f68:	601a      	str	r2, [r3, #0]
		NoWallCountL45_flag = 0;
 8006f6a:	4b31      	ldr	r3, [pc, #196]	; (8007030 <interrupt_WallCut+0xba8>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	701a      	strb	r2, [r3, #0]
		NoWallCountR45_flag = 0;
 8006f70:	4b30      	ldr	r3, [pc, #192]	; (8007034 <interrupt_WallCut+0xbac>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	701a      	strb	r2, [r3, #0]
		NoWallCountL45slant_flag = 0;
 8006f76:	4b30      	ldr	r3, [pc, #192]	; (8007038 <interrupt_WallCut+0xbb0>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	701a      	strb	r2, [r3, #0]
		NoWallCountR45slant_flag = 0;
 8006f7c:	4b19      	ldr	r3, [pc, #100]	; (8006fe4 <interrupt_WallCut+0xb5c>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	701a      	strb	r2, [r3, #0]
		slantWallControlL_flag = 0;
 8006f82:	4b2e      	ldr	r3, [pc, #184]	; (800703c <interrupt_WallCut+0xbb4>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	701a      	strb	r2, [r3, #0]
		slantWallControlR_flag = 0;
 8006f88:	4b1d      	ldr	r3, [pc, #116]	; (8007000 <interrupt_WallCut+0xb78>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	701a      	strb	r2, [r3, #0]
		front_wall_break_90 = 0;
 8006f8e:	4b2c      	ldr	r3, [pc, #176]	; (8007040 <interrupt_WallCut+0xbb8>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	701a      	strb	r2, [r3, #0]
		front_wall_break_45 = 0;
 8006f94:	4b2b      	ldr	r3, [pc, #172]	; (8007044 <interrupt_WallCut+0xbbc>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006f9a:	4b2b      	ldr	r3, [pc, #172]	; (8007048 <interrupt_WallCut+0xbc0>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006fa0:	4b29      	ldr	r3, [pc, #164]	; (8007048 <interrupt_WallCut+0xbc0>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	701a      	strb	r2, [r3, #0]
		g_sensor_max_fl = 0;
 8006fa6:	4b29      	ldr	r3, [pc, #164]	; (800704c <interrupt_WallCut+0xbc4>)
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr = 0;
 8006fae:	4b28      	ldr	r3, [pc, #160]	; (8007050 <interrupt_WallCut+0xbc8>)
 8006fb0:	f04f 0200 	mov.w	r2, #0
 8006fb4:	601a      	str	r2, [r3, #0]
		g_sensor_max_fl_slant = 0;
 8006fb6:	4b27      	ldr	r3, [pc, #156]	; (8007054 <interrupt_WallCut+0xbcc>)
 8006fb8:	f04f 0200 	mov.w	r2, #0
 8006fbc:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr_slant = 0;
 8006fbe:	4b07      	ldr	r3, [pc, #28]	; (8006fdc <interrupt_WallCut+0xb54>)
 8006fc0:	f04f 0200 	mov.w	r2, #0
 8006fc4:	601a      	str	r2, [r3, #0]
}
 8006fc6:	bf00      	nop
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8006fd4:	3f50624d 	.word	0x3f50624d
 8006fd8:	20000298 	.word	0x20000298
 8006fdc:	200005e4 	.word	0x200005e4
 8006fe0:	200005a4 	.word	0x200005a4
 8006fe4:	200005cf 	.word	0x200005cf
 8006fe8:	455ac000 	.word	0x455ac000
 8006fec:	00000000 	.word	0x00000000
 8006ff0:	200005bc 	.word	0x200005bc
 8006ff4:	200005c4 	.word	0x200005c4
 8006ff8:	20000238 	.word	0x20000238
 8006ffc:	2000023c 	.word	0x2000023c
 8007000:	200005d1 	.word	0x200005d1
 8007004:	20000598 	.word	0x20000598
 8007008:	20000594 	.word	0x20000594
 800700c:	200005a0 	.word	0x200005a0
 8007010:	2000059c 	.word	0x2000059c
 8007014:	200005a8 	.word	0x200005a8
 8007018:	200005b0 	.word	0x200005b0
 800701c:	200005ac 	.word	0x200005ac
 8007020:	200005b8 	.word	0x200005b8
 8007024:	200005b4 	.word	0x200005b4
 8007028:	200005c0 	.word	0x200005c0
 800702c:	200005c8 	.word	0x200005c8
 8007030:	200005cc 	.word	0x200005cc
 8007034:	200005cd 	.word	0x200005cd
 8007038:	200005ce 	.word	0x200005ce
 800703c:	200005d0 	.word	0x200005d0
 8007040:	200005d2 	.word	0x200005d2
 8007044:	200005d3 	.word	0x200005d3
 8007048:	200005d4 	.word	0x200005d4
 800704c:	200005d8 	.word	0x200005d8
 8007050:	200005dc 	.word	0x200005dc
 8007054:	200005e0 	.word	0x200005e0

08007058 <pl_yellow_LED_1>:
#include "gpio.h"
#include "main.h"



void pl_yellow_LED_1(int pin){
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,pin);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	b2db      	uxtb	r3, r3
 8007064:	461a      	mov	r2, r3
 8007066:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800706a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800706e:	f00c f95d 	bl	801332c <HAL_GPIO_WritePin>
}
 8007072:	bf00      	nop
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
	...

0800707c <pl_yellow_LED_3>:
void pl_yellow_LED_2(int pin){
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,pin);
}
void pl_yellow_LED_3(int pin){
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,pin);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	b2db      	uxtb	r3, r3
 8007088:	461a      	mov	r2, r3
 800708a:	2140      	movs	r1, #64	; 0x40
 800708c:	4803      	ldr	r0, [pc, #12]	; (800709c <pl_yellow_LED_3+0x20>)
 800708e:	f00c f94d 	bl	801332c <HAL_GPIO_WritePin>
}
 8007092:	bf00      	nop
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	48000800 	.word	0x48000800

080070a0 <pl_yellow_LED_6>:
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,pin);
}
void pl_yellow_LED_5(int pin){
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,pin);
}
void pl_yellow_LED_6(int pin){
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,pin);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	461a      	mov	r2, r3
 80070ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80070b2:	4803      	ldr	r0, [pc, #12]	; (80070c0 <pl_yellow_LED_6+0x20>)
 80070b4:	f00c f93a 	bl	801332c <HAL_GPIO_WritePin>
}
 80070b8:	bf00      	nop
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	48000400 	.word	0x48000400

080070c4 <pl_yellow_LED_8>:
void pl_yellow_LED_7(int pin){
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,pin);
}
void pl_yellow_LED_8(int pin){
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,pin);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	461a      	mov	r2, r3
 80070d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80070d6:	4803      	ldr	r0, [pc, #12]	; (80070e4 <pl_yellow_LED_8+0x20>)
 80070d8:	f00c f928 	bl	801332c <HAL_GPIO_WritePin>
}
 80070dc:	bf00      	nop
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	48000400 	.word	0x48000400

080070e8 <pl_yellow_LED_off>:




void pl_yellow_LED_off(void){
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 80070ec:	2200      	movs	r2, #0
 80070ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80070f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070f6:	f00c f919 	bl	801332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 80070fa:	2200      	movs	r2, #0
 80070fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007104:	f00c f912 	bl	801332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8007108:	2200      	movs	r2, #0
 800710a:	2140      	movs	r1, #64	; 0x40
 800710c:	4811      	ldr	r0, [pc, #68]	; (8007154 <pl_yellow_LED_off+0x6c>)
 800710e:	f00c f90d 	bl	801332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8007112:	2200      	movs	r2, #0
 8007114:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007118:	480f      	ldr	r0, [pc, #60]	; (8007158 <pl_yellow_LED_off+0x70>)
 800711a:	f00c f907 	bl	801332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 800711e:	2200      	movs	r2, #0
 8007120:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007124:	480c      	ldr	r0, [pc, #48]	; (8007158 <pl_yellow_LED_off+0x70>)
 8007126:	f00c f901 	bl	801332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 800712a:	2200      	movs	r2, #0
 800712c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007130:	4809      	ldr	r0, [pc, #36]	; (8007158 <pl_yellow_LED_off+0x70>)
 8007132:	f00c f8fb 	bl	801332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8007136:	2200      	movs	r2, #0
 8007138:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800713c:	4806      	ldr	r0, [pc, #24]	; (8007158 <pl_yellow_LED_off+0x70>)
 800713e:	f00c f8f5 	bl	801332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8007142:	2200      	movs	r2, #0
 8007144:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007148:	4803      	ldr	r0, [pc, #12]	; (8007158 <pl_yellow_LED_off+0x70>)
 800714a:	f00c f8ef 	bl	801332c <HAL_GPIO_WritePin>
}
 800714e:	bf00      	nop
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	48000800 	.word	0x48000800
 8007158:	48000400 	.word	0x48000400

0800715c <pl_yellow_LED_on>:

void pl_yellow_LED_on(void){
 800715c:	b580      	push	{r7, lr}
 800715e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8007160:	2201      	movs	r2, #1
 8007162:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800716a:	f00c f8df 	bl	801332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 800716e:	2201      	movs	r2, #1
 8007170:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007178:	f00c f8d8 	bl	801332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 800717c:	2201      	movs	r2, #1
 800717e:	2140      	movs	r1, #64	; 0x40
 8007180:	4811      	ldr	r0, [pc, #68]	; (80071c8 <pl_yellow_LED_on+0x6c>)
 8007182:	f00c f8d3 	bl	801332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8007186:	2201      	movs	r2, #1
 8007188:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800718c:	480f      	ldr	r0, [pc, #60]	; (80071cc <pl_yellow_LED_on+0x70>)
 800718e:	f00c f8cd 	bl	801332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 8007192:	2201      	movs	r2, #1
 8007194:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007198:	480c      	ldr	r0, [pc, #48]	; (80071cc <pl_yellow_LED_on+0x70>)
 800719a:	f00c f8c7 	bl	801332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 800719e:	2201      	movs	r2, #1
 80071a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80071a4:	4809      	ldr	r0, [pc, #36]	; (80071cc <pl_yellow_LED_on+0x70>)
 80071a6:	f00c f8c1 	bl	801332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 80071aa:	2201      	movs	r2, #1
 80071ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80071b0:	4806      	ldr	r0, [pc, #24]	; (80071cc <pl_yellow_LED_on+0x70>)
 80071b2:	f00c f8bb 	bl	801332c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 80071b6:	2201      	movs	r2, #1
 80071b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80071bc:	4803      	ldr	r0, [pc, #12]	; (80071cc <pl_yellow_LED_on+0x70>)
 80071be:	f00c f8b5 	bl	801332c <HAL_GPIO_WritePin>
}
 80071c2:	bf00      	nop
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	48000800 	.word	0x48000800
 80071cc:	48000400 	.word	0x48000400

080071d0 <pl_yellow_LED_count>:


void pl_yellow_LED_count(unsigned char yy){
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	4603      	mov	r3, r0
 80071d8:	71fb      	strb	r3, [r7, #7]

unsigned char yy1,yy2,yy3,yy4,yy5,yy6,yy7,yy8;

yy1 = yy & 1;
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	73fb      	strb	r3, [r7, #15]
yy2 = yy & 2;
 80071e2:	79fb      	ldrb	r3, [r7, #7]
 80071e4:	f003 0302 	and.w	r3, r3, #2
 80071e8:	73bb      	strb	r3, [r7, #14]
yy3 = yy & 4;
 80071ea:	79fb      	ldrb	r3, [r7, #7]
 80071ec:	f003 0304 	and.w	r3, r3, #4
 80071f0:	737b      	strb	r3, [r7, #13]
yy4 = yy & 8;
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	f003 0308 	and.w	r3, r3, #8
 80071f8:	733b      	strb	r3, [r7, #12]
yy5 = yy & 16;
 80071fa:	79fb      	ldrb	r3, [r7, #7]
 80071fc:	f003 0310 	and.w	r3, r3, #16
 8007200:	72fb      	strb	r3, [r7, #11]
yy6 = yy & 32;
 8007202:	79fb      	ldrb	r3, [r7, #7]
 8007204:	f003 0320 	and.w	r3, r3, #32
 8007208:	72bb      	strb	r3, [r7, #10]
yy7 = yy & 64;
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007210:	727b      	strb	r3, [r7, #9]
yy8 = yy & 128;
 8007212:	79fb      	ldrb	r3, [r7, #7]
 8007214:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007218:	723b      	strb	r3, [r7, #8]

if(yy1 >= 1){
 800721a:	7bfb      	ldrb	r3, [r7, #15]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d007      	beq.n	8007230 <pl_yellow_LED_count+0x60>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8007220:	2201      	movs	r2, #1
 8007222:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800722a:	f00c f87f 	bl	801332c <HAL_GPIO_WritePin>
 800722e:	e006      	b.n	800723e <pl_yellow_LED_count+0x6e>
}else{
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8007230:	2200      	movs	r2, #0
 8007232:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800723a:	f00c f877 	bl	801332c <HAL_GPIO_WritePin>
}
if(yy2 >= 1){
 800723e:	7bbb      	ldrb	r3, [r7, #14]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d007      	beq.n	8007254 <pl_yellow_LED_count+0x84>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8007244:	2201      	movs	r2, #1
 8007246:	f44f 7180 	mov.w	r1, #256	; 0x100
 800724a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800724e:	f00c f86d 	bl	801332c <HAL_GPIO_WritePin>
 8007252:	e006      	b.n	8007262 <pl_yellow_LED_count+0x92>
}
else{
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8007254:	2200      	movs	r2, #0
 8007256:	f44f 7180 	mov.w	r1, #256	; 0x100
 800725a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800725e:	f00c f865 	bl	801332c <HAL_GPIO_WritePin>
}
if(yy3 >= 1){
 8007262:	7b7b      	ldrb	r3, [r7, #13]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d005      	beq.n	8007274 <pl_yellow_LED_count+0xa4>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8007268:	2201      	movs	r2, #1
 800726a:	2140      	movs	r1, #64	; 0x40
 800726c:	482e      	ldr	r0, [pc, #184]	; (8007328 <pl_yellow_LED_count+0x158>)
 800726e:	f00c f85d 	bl	801332c <HAL_GPIO_WritePin>
 8007272:	e004      	b.n	800727e <pl_yellow_LED_count+0xae>
}else{
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8007274:	2200      	movs	r2, #0
 8007276:	2140      	movs	r1, #64	; 0x40
 8007278:	482b      	ldr	r0, [pc, #172]	; (8007328 <pl_yellow_LED_count+0x158>)
 800727a:	f00c f857 	bl	801332c <HAL_GPIO_WritePin>
}
if(yy4 >= 1){
 800727e:	7b3b      	ldrb	r3, [r7, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d006      	beq.n	8007292 <pl_yellow_LED_count+0xc2>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8007284:	2201      	movs	r2, #1
 8007286:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800728a:	4828      	ldr	r0, [pc, #160]	; (800732c <pl_yellow_LED_count+0x15c>)
 800728c:	f00c f84e 	bl	801332c <HAL_GPIO_WritePin>
 8007290:	e005      	b.n	800729e <pl_yellow_LED_count+0xce>
}else{
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8007292:	2200      	movs	r2, #0
 8007294:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007298:	4824      	ldr	r0, [pc, #144]	; (800732c <pl_yellow_LED_count+0x15c>)
 800729a:	f00c f847 	bl	801332c <HAL_GPIO_WritePin>
}
if(yy5 >= 1){
 800729e:	7afb      	ldrb	r3, [r7, #11]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d006      	beq.n	80072b2 <pl_yellow_LED_count+0xe2>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 80072a4:	2201      	movs	r2, #1
 80072a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80072aa:	4820      	ldr	r0, [pc, #128]	; (800732c <pl_yellow_LED_count+0x15c>)
 80072ac:	f00c f83e 	bl	801332c <HAL_GPIO_WritePin>
 80072b0:	e005      	b.n	80072be <pl_yellow_LED_count+0xee>
}else{
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 80072b2:	2200      	movs	r2, #0
 80072b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80072b8:	481c      	ldr	r0, [pc, #112]	; (800732c <pl_yellow_LED_count+0x15c>)
 80072ba:	f00c f837 	bl	801332c <HAL_GPIO_WritePin>
}
if(yy6 >= 1){
 80072be:	7abb      	ldrb	r3, [r7, #10]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d006      	beq.n	80072d2 <pl_yellow_LED_count+0x102>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 80072c4:	2201      	movs	r2, #1
 80072c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80072ca:	4818      	ldr	r0, [pc, #96]	; (800732c <pl_yellow_LED_count+0x15c>)
 80072cc:	f00c f82e 	bl	801332c <HAL_GPIO_WritePin>
 80072d0:	e005      	b.n	80072de <pl_yellow_LED_count+0x10e>
}else{
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 80072d2:	2200      	movs	r2, #0
 80072d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80072d8:	4814      	ldr	r0, [pc, #80]	; (800732c <pl_yellow_LED_count+0x15c>)
 80072da:	f00c f827 	bl	801332c <HAL_GPIO_WritePin>
}
if(yy7 >= 1){
 80072de:	7a7b      	ldrb	r3, [r7, #9]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d006      	beq.n	80072f2 <pl_yellow_LED_count+0x122>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 80072e4:	2201      	movs	r2, #1
 80072e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80072ea:	4810      	ldr	r0, [pc, #64]	; (800732c <pl_yellow_LED_count+0x15c>)
 80072ec:	f00c f81e 	bl	801332c <HAL_GPIO_WritePin>
 80072f0:	e005      	b.n	80072fe <pl_yellow_LED_count+0x12e>
}else{
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 80072f2:	2200      	movs	r2, #0
 80072f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80072f8:	480c      	ldr	r0, [pc, #48]	; (800732c <pl_yellow_LED_count+0x15c>)
 80072fa:	f00c f817 	bl	801332c <HAL_GPIO_WritePin>
}
if(yy8 >= 1){
 80072fe:	7a3b      	ldrb	r3, [r7, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d006      	beq.n	8007312 <pl_yellow_LED_count+0x142>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 8007304:	2201      	movs	r2, #1
 8007306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800730a:	4808      	ldr	r0, [pc, #32]	; (800732c <pl_yellow_LED_count+0x15c>)
 800730c:	f00c f80e 	bl	801332c <HAL_GPIO_WritePin>
}else{
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
}
}
 8007310:	e005      	b.n	800731e <pl_yellow_LED_count+0x14e>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8007312:	2200      	movs	r2, #0
 8007314:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007318:	4804      	ldr	r0, [pc, #16]	; (800732c <pl_yellow_LED_count+0x15c>)
 800731a:	f00c f807 	bl	801332c <HAL_GPIO_WritePin>
}
 800731e:	bf00      	nop
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	48000800 	.word	0x48000800
 800732c:	48000400 	.word	0x48000400

08007330 <pl_r_blue_LED>:


void pl_r_blue_LED(int pin){
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,pin);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	461a      	mov	r2, r3
 800733e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007342:	4803      	ldr	r0, [pc, #12]	; (8007350 <pl_r_blue_LED+0x20>)
 8007344:	f00b fff2 	bl	801332c <HAL_GPIO_WritePin>
}
 8007348:	bf00      	nop
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	48000800 	.word	0x48000800

08007354 <pl_l_blue_LED>:

void pl_l_blue_LED(int pin){
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,pin);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	461a      	mov	r2, r3
 8007362:	2104      	movs	r1, #4
 8007364:	4803      	ldr	r0, [pc, #12]	; (8007374 <pl_l_blue_LED+0x20>)
 8007366:	f00b ffe1 	bl	801332c <HAL_GPIO_WritePin>
}
 800736a:	bf00      	nop
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	48000400 	.word	0x48000400

08007378 <encoder_read_byte_R>:
#include "spi.h"
#include <stdio.h>

float encoder_R,encoder_L;

uint16_t encoder_read_byte_R(uint16_t address,uint16_t data){
 8007378:	b580      	push	{r7, lr}
 800737a:	b088      	sub	sp, #32
 800737c:	af00      	add	r7, sp, #0
 800737e:	4603      	mov	r3, r0
 8007380:	460a      	mov	r2, r1
 8007382:	80fb      	strh	r3, [r7, #6]
 8007384:	4613      	mov	r3, r2
 8007386:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007388:	2200      	movs	r2, #0
 800738a:	2110      	movs	r1, #16
 800738c:	4833      	ldr	r0, [pc, #204]	; (800745c <encoder_read_byte_R+0xe4>)
 800738e:	f00b ffcd 	bl	801332c <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 8007392:	88fb      	ldrh	r3, [r7, #6]
 8007394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007398:	80fb      	strh	r3, [r7, #6]
	parity=0;
 800739a:	2300      	movs	r3, #0
 800739c:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 800739e:	2300      	movs	r3, #0
 80073a0:	61bb      	str	r3, [r7, #24]
 80073a2:	e00d      	b.n	80073c0 <encoder_read_byte_R+0x48>
 80073a4:	88fa      	ldrh	r2, [r7, #6]
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	fa42 f303 	asr.w	r3, r2, r3
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	8bfb      	ldrh	r3, [r7, #30]
 80073b6:	4413      	add	r3, r2
 80073b8:	83fb      	strh	r3, [r7, #30]
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	3301      	adds	r3, #1
 80073be:	61bb      	str	r3, [r7, #24]
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	2b0e      	cmp	r3, #14
 80073c4:	ddee      	ble.n	80073a4 <encoder_read_byte_R+0x2c>
	address = address | ((parity % 2) << 15);
 80073c6:	8bfb      	ldrh	r3, [r7, #30]
 80073c8:	03db      	lsls	r3, r3, #15
 80073ca:	b21a      	sxth	r2, r3
 80073cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	b21b      	sxth	r3, r3
 80073d4:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 80073d6:	88fb      	ldrh	r3, [r7, #6]
 80073d8:	0a1b      	lsrs	r3, r3, #8
 80073da:	b29b      	uxth	r3, r3
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 80073e0:	88fb      	ldrh	r3, [r7, #6]
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	747b      	strb	r3, [r7, #17]


	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 80073e6:	f107 0110 	add.w	r1, r7, #16
 80073ea:	2364      	movs	r3, #100	; 0x64
 80073ec:	2202      	movs	r2, #2
 80073ee:	481c      	ldr	r0, [pc, #112]	; (8007460 <encoder_read_byte_R+0xe8>)
 80073f0:	f00d f87f 	bl	80144f2 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, address, 2, 100);

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80073f4:	2201      	movs	r2, #1
 80073f6:	2110      	movs	r1, #16
 80073f8:	4818      	ldr	r0, [pc, #96]	; (800745c <encoder_read_byte_R+0xe4>)
 80073fa:	f00b ff97 	bl	801332c <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 80073fe:	2300      	movs	r3, #0
 8007400:	617b      	str	r3, [r7, #20]
 8007402:	e002      	b.n	800740a <encoder_read_byte_R+0x92>
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	3301      	adds	r3, #1
 8007408:	617b      	str	r3, [r7, #20]
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2b95      	cmp	r3, #149	; 0x95
 800740e:	ddf9      	ble.n	8007404 <encoder_read_byte_R+0x8c>

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007410:	2200      	movs	r2, #0
 8007412:	2110      	movs	r1, #16
 8007414:	4811      	ldr	r0, [pc, #68]	; (800745c <encoder_read_byte_R+0xe4>)
 8007416:	f00b ff89 	bl	801332c <HAL_GPIO_WritePin>

//	data=0xC000;
	dataBuffer[0]=data>>8;
 800741a:	88bb      	ldrh	r3, [r7, #4]
 800741c:	0a1b      	lsrs	r3, r3, #8
 800741e:	b29b      	uxth	r3, r3
 8007420:	b2db      	uxtb	r3, r3
 8007422:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8007424:	88bb      	ldrh	r3, [r7, #4]
 8007426:	b2db      	uxtb	r3, r3
 8007428:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 800742a:	f107 010c 	add.w	r1, r7, #12
 800742e:	2364      	movs	r3, #100	; 0x64
 8007430:	2202      	movs	r2, #2
 8007432:	480b      	ldr	r0, [pc, #44]	; (8007460 <encoder_read_byte_R+0xe8>)
 8007434:	f00d f9cb 	bl	80147ce <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007438:	7b3b      	ldrb	r3, [r7, #12]
 800743a:	021b      	lsls	r3, r3, #8
 800743c:	b21a      	sxth	r2, r3
 800743e:	7b7b      	ldrb	r3, [r7, #13]
 8007440:	b21b      	sxth	r3, r3
 8007442:	4313      	orrs	r3, r2
 8007444:	b21b      	sxth	r3, r3
 8007446:	80bb      	strh	r3, [r7, #4]
//	HAL_SPI_Transmit(&hspi3, data, 2, 100);
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007448:	2201      	movs	r2, #1
 800744a:	2110      	movs	r1, #16
 800744c:	4803      	ldr	r0, [pc, #12]	; (800745c <encoder_read_byte_R+0xe4>)
 800744e:	f00b ff6d 	bl	801332c <HAL_GPIO_WritePin>

	return data;
 8007452:	88bb      	ldrh	r3, [r7, #4]

}
 8007454:	4618      	mov	r0, r3
 8007456:	3720      	adds	r7, #32
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	48000400 	.word	0x48000400
 8007460:	2000c3fc 	.word	0x2000c3fc

08007464 <encoder_read_byte_L>:
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;

}


uint16_t encoder_read_byte_L(uint16_t address,uint16_t data){
 8007464:	b580      	push	{r7, lr}
 8007466:	b088      	sub	sp, #32
 8007468:	af00      	add	r7, sp, #0
 800746a:	4603      	mov	r3, r0
 800746c:	460a      	mov	r2, r1
 800746e:	80fb      	strh	r3, [r7, #6]
 8007470:	4613      	mov	r3, r2
 8007472:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007474:	2200      	movs	r2, #0
 8007476:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800747a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800747e:	f00b ff55 	bl	801332c <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 8007482:	88fb      	ldrh	r3, [r7, #6]
 8007484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007488:	80fb      	strh	r3, [r7, #6]
	parity=0;
 800748a:	2300      	movs	r3, #0
 800748c:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 800748e:	2300      	movs	r3, #0
 8007490:	61bb      	str	r3, [r7, #24]
 8007492:	e00d      	b.n	80074b0 <encoder_read_byte_L+0x4c>
 8007494:	88fa      	ldrh	r2, [r7, #6]
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	fa42 f303 	asr.w	r3, r2, r3
 800749c:	b29b      	uxth	r3, r3
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	8bfb      	ldrh	r3, [r7, #30]
 80074a6:	4413      	add	r3, r2
 80074a8:	83fb      	strh	r3, [r7, #30]
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	3301      	adds	r3, #1
 80074ae:	61bb      	str	r3, [r7, #24]
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	2b0e      	cmp	r3, #14
 80074b4:	ddee      	ble.n	8007494 <encoder_read_byte_L+0x30>
	address = address | ((parity % 2) << 15);
 80074b6:	8bfb      	ldrh	r3, [r7, #30]
 80074b8:	03db      	lsls	r3, r3, #15
 80074ba:	b21a      	sxth	r2, r3
 80074bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	b21b      	sxth	r3, r3
 80074c4:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 80074c6:	88fb      	ldrh	r3, [r7, #6]
 80074c8:	0a1b      	lsrs	r3, r3, #8
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 80074d0:	88fb      	ldrh	r3, [r7, #6]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	747b      	strb	r3, [r7, #17]

	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 80074d6:	f107 0110 	add.w	r1, r7, #16
 80074da:	2364      	movs	r3, #100	; 0x64
 80074dc:	2202      	movs	r2, #2
 80074de:	481e      	ldr	r0, [pc, #120]	; (8007558 <encoder_read_byte_L+0xf4>)
 80074e0:	f00d f807 	bl	80144f2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80074e4:	2201      	movs	r2, #1
 80074e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80074ee:	f00b ff1d 	bl	801332c <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 80074f2:	2300      	movs	r3, #0
 80074f4:	617b      	str	r3, [r7, #20]
 80074f6:	e002      	b.n	80074fe <encoder_read_byte_L+0x9a>
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	3301      	adds	r3, #1
 80074fc:	617b      	str	r3, [r7, #20]
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	2b95      	cmp	r3, #149	; 0x95
 8007502:	ddf9      	ble.n	80074f8 <encoder_read_byte_L+0x94>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007504:	2200      	movs	r2, #0
 8007506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800750a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800750e:	f00b ff0d 	bl	801332c <HAL_GPIO_WritePin>

//	data=0x0000;
	dataBuffer[0]=data>>8;
 8007512:	88bb      	ldrh	r3, [r7, #4]
 8007514:	0a1b      	lsrs	r3, r3, #8
 8007516:	b29b      	uxth	r3, r3
 8007518:	b2db      	uxtb	r3, r3
 800751a:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 800751c:	88bb      	ldrh	r3, [r7, #4]
 800751e:	b2db      	uxtb	r3, r3
 8007520:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 8007522:	f107 010c 	add.w	r1, r7, #12
 8007526:	2364      	movs	r3, #100	; 0x64
 8007528:	2202      	movs	r2, #2
 800752a:	480b      	ldr	r0, [pc, #44]	; (8007558 <encoder_read_byte_L+0xf4>)
 800752c:	f00d f94f 	bl	80147ce <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007530:	7b3b      	ldrb	r3, [r7, #12]
 8007532:	021b      	lsls	r3, r3, #8
 8007534:	b21a      	sxth	r2, r3
 8007536:	7b7b      	ldrb	r3, [r7, #13]
 8007538:	b21b      	sxth	r3, r3
 800753a:	4313      	orrs	r3, r2
 800753c:	b21b      	sxth	r3, r3
 800753e:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007540:	2201      	movs	r2, #1
 8007542:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800754a:	f00b feef 	bl	801332c <HAL_GPIO_WritePin>

	return data;
 800754e:	88bb      	ldrh	r3, [r7, #4]

}
 8007550:	4618      	mov	r0, r3
 8007552:	3720      	adds	r7, #32
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	2000c3fc 	.word	0x2000c3fc

0800755c <AS5047_DataUpdate>:

}



void AS5047_DataUpdate(void){
 800755c:	b580      	push	{r7, lr}
 800755e:	af00      	add	r7, sp, #0

		//encoder_read_byte_L(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_R=(float)(encoder_read_byte_R(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 8007560:	2100      	movs	r1, #0
 8007562:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8007566:	f7ff ff07 	bl	8007378 <encoder_read_byte_R>
 800756a:	4603      	mov	r3, r0
 800756c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007570:	ee07 3a90 	vmov	s15, r3
 8007574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007578:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80075c0 <AS5047_DataUpdate+0x64>
 800757c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007580:	eddf 6a10 	vldr	s13, [pc, #64]	; 80075c4 <AS5047_DataUpdate+0x68>
 8007584:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007588:	4b0f      	ldr	r3, [pc, #60]	; (80075c8 <AS5047_DataUpdate+0x6c>)
 800758a:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(500);

		//encoder_read_byte_R(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_L=(float)(encoder_read_byte_L(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 800758e:	2100      	movs	r1, #0
 8007590:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8007594:	f7ff ff66 	bl	8007464 <encoder_read_byte_L>
 8007598:	4603      	mov	r3, r0
 800759a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075a6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80075c0 <AS5047_DataUpdate+0x64>
 80075aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80075ae:	eddf 6a05 	vldr	s13, [pc, #20]	; 80075c4 <AS5047_DataUpdate+0x68>
 80075b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075b6:	4b05      	ldr	r3, [pc, #20]	; (80075cc <AS5047_DataUpdate+0x70>)
 80075b8:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(5);

}
 80075bc:	bf00      	nop
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	43b40000 	.word	0x43b40000
 80075c4:	46800000 	.word	0x46800000
 80075c8:	200006b8 	.word	0x200006b8
 80075cc:	200006bc 	.word	0x200006bc

080075d0 <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	4603      	mov	r3, r0
 80075d8:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80075da:	2200      	movs	r2, #0
 80075dc:	2110      	movs	r1, #16
 80075de:	4810      	ldr	r0, [pc, #64]	; (8007620 <gyro_read_byte+0x50>)
 80075e0:	f00b fea4 	bl	801332c <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 80075e4:	79fb      	ldrb	r3, [r7, #7]
 80075e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 80075ee:	f107 010f 	add.w	r1, r7, #15
 80075f2:	2364      	movs	r3, #100	; 0x64
 80075f4:	2201      	movs	r2, #1
 80075f6:	480b      	ldr	r0, [pc, #44]	; (8007624 <gyro_read_byte+0x54>)
 80075f8:	f00c ff7b 	bl	80144f2 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 80075fc:	f107 010e 	add.w	r1, r7, #14
 8007600:	2364      	movs	r3, #100	; 0x64
 8007602:	2201      	movs	r2, #1
 8007604:	4807      	ldr	r0, [pc, #28]	; (8007624 <gyro_read_byte+0x54>)
 8007606:	f00d f8e2 	bl	80147ce <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 800760a:	2201      	movs	r2, #1
 800760c:	2110      	movs	r1, #16
 800760e:	4804      	ldr	r0, [pc, #16]	; (8007620 <gyro_read_byte+0x50>)
 8007610:	f00b fe8c 	bl	801332c <HAL_GPIO_WritePin>

	return val;
 8007614:	7bbb      	ldrb	r3, [r7, #14]

}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	48000800 	.word	0x48000800
 8007624:	2000c398 	.word	0x2000c398

08007628 <gyro_write_byte>:

void gyro_write_byte(uint8_t reg, uint8_t val)

{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	460a      	mov	r2, r1
 8007632:	71fb      	strb	r3, [r7, #7]
 8007634:	4613      	mov	r3, r2
 8007636:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;

	ret = reg & 0x7F;//先頭のbitを0に
 8007638:	79fb      	ldrb	r3, [r7, #7]
 800763a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800763e:	b2db      	uxtb	r3, r3
 8007640:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8007642:	2200      	movs	r2, #0
 8007644:	2110      	movs	r1, #16
 8007646:	480c      	ldr	r0, [pc, #48]	; (8007678 <gyro_write_byte+0x50>)
 8007648:	f00b fe70 	bl	801332c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 800764c:	f107 010f 	add.w	r1, r7, #15
 8007650:	2364      	movs	r3, #100	; 0x64
 8007652:	2201      	movs	r2, #1
 8007654:	4809      	ldr	r0, [pc, #36]	; (800767c <gyro_write_byte+0x54>)
 8007656:	f00c ff4c 	bl	80144f2 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &val, 1, 100);
 800765a:	1db9      	adds	r1, r7, #6
 800765c:	2364      	movs	r3, #100	; 0x64
 800765e:	2201      	movs	r2, #1
 8007660:	4806      	ldr	r0, [pc, #24]	; (800767c <gyro_write_byte+0x54>)
 8007662:	f00c ff46 	bl	80144f2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8007666:	2201      	movs	r2, #1
 8007668:	2110      	movs	r1, #16
 800766a:	4803      	ldr	r0, [pc, #12]	; (8007678 <gyro_write_byte+0x50>)
 800766c:	f00b fe5e 	bl	801332c <HAL_GPIO_WritePin>

}
 8007670:	bf00      	nop
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	48000800 	.word	0x48000800
 800767c:	2000c398 	.word	0x2000c398

08007680 <pl_gyro_init>:

void pl_gyro_init(void)

{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	71fb      	strb	r3, [r7, #7]

// check WHO_AM_I (0x75)

	who_am_i = gyro_read_byte(0x75);
 800768a:	2075      	movs	r0, #117	; 0x75
 800768c:	f7ff ffa0 	bl	80075d0 <gyro_read_byte>
 8007690:	4603      	mov	r3, r0
 8007692:	71fb      	strb	r3, [r7, #7]

// who am i = 0x12

	printf("\r\nwho_am_i = 0x%x\r\n", who_am_i);
 8007694:	79fb      	ldrb	r3, [r7, #7]
 8007696:	4619      	mov	r1, r3
 8007698:	481b      	ldr	r0, [pc, #108]	; (8007708 <pl_gyro_init+0x88>)
 800769a:	f010 fbdd 	bl	8017e58 <iprintf>

// recheck

	if (who_am_i != 0x98) {
 800769e:	79fb      	ldrb	r3, [r7, #7]
 80076a0:	2b98      	cmp	r3, #152	; 0x98
 80076a2:	d00e      	beq.n	80076c2 <pl_gyro_init+0x42>

		HAL_Delay(100);
 80076a4:	2064      	movs	r0, #100	; 0x64
 80076a6:	f008 feed 	bl	8010484 <HAL_Delay>

		who_am_i = gyro_read_byte(0x75);
 80076aa:	2075      	movs	r0, #117	; 0x75
 80076ac:	f7ff ff90 	bl	80075d0 <gyro_read_byte>
 80076b0:	4603      	mov	r3, r0
 80076b2:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x98) {
 80076b4:	79fb      	ldrb	r3, [r7, #7]
 80076b6:	2b98      	cmp	r3, #152	; 0x98
 80076b8:	d003      	beq.n	80076c2 <pl_gyro_init+0x42>

			while (1) {

				printf("gyro_error\r");
 80076ba:	4814      	ldr	r0, [pc, #80]	; (800770c <pl_gyro_init+0x8c>)
 80076bc:	f010 fbcc 	bl	8017e58 <iprintf>
 80076c0:	e7fb      	b.n	80076ba <pl_gyro_init+0x3a>

// set pwr might

// PWR_MIGHT_1 0x6B

	gyro_write_byte(0x6B, 0x00);
 80076c2:	2100      	movs	r1, #0
 80076c4:	206b      	movs	r0, #107	; 0x6b
 80076c6:	f7ff ffaf 	bl	8007628 <gyro_write_byte>

	HAL_Delay(50);
 80076ca:	2032      	movs	r0, #50	; 0x32
 80076cc:	f008 feda 	bl	8010484 <HAL_Delay>

// PWR_MIGHT_2 0x6C

	gyro_write_byte(0x6C, 0x00);
 80076d0:	2100      	movs	r1, #0
 80076d2:	206c      	movs	r0, #108	; 0x6c
 80076d4:	f7ff ffa8 	bl	8007628 <gyro_write_byte>

	HAL_Delay(50);
 80076d8:	2032      	movs	r0, #50	; 0x32
 80076da:	f008 fed3 	bl	8010484 <HAL_Delay>

// set gyro config

// GYRO_CONFIG 0x1B

	gyro_write_byte(0x1B, 0x18); // use 2000 dps
 80076de:	2118      	movs	r1, #24
 80076e0:	201b      	movs	r0, #27
 80076e2:	f7ff ffa1 	bl	8007628 <gyro_write_byte>

	HAL_Delay(50);
 80076e6:	2032      	movs	r0, #50	; 0x32
 80076e8:	f008 fecc 	bl	8010484 <HAL_Delay>

// ACCEL_CONFIG 0x1C

	gyro_write_byte(0x1C, 0x18); // use pm 16g
 80076ec:	2118      	movs	r1, #24
 80076ee:	201c      	movs	r0, #28
 80076f0:	f7ff ff9a 	bl	8007628 <gyro_write_byte>

	HAL_Delay(50);
 80076f4:	2032      	movs	r0, #50	; 0x32
 80076f6:	f008 fec5 	bl	8010484 <HAL_Delay>

	set_flag = 1;
 80076fa:	4b05      	ldr	r3, [pc, #20]	; (8007710 <pl_gyro_init+0x90>)
 80076fc:	2201      	movs	r2, #1
 80076fe:	701a      	strb	r2, [r3, #0]

}
 8007700:	bf00      	nop
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	0801a508 	.word	0x0801a508
 800770c:	0801a51c 	.word	0x0801a51c
 8007710:	200006c0 	.word	0x200006c0

08007714 <ICM20602_GYRO_READ>:

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 8007714:	b590      	push	{r4, r7, lr}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	4603      	mov	r3, r0
 800771c:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800771e:	79fb      	ldrb	r3, [r7, #7]
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff ff55 	bl	80075d0 <gyro_read_byte>
 8007726:	4603      	mov	r3, r0
 8007728:	021b      	lsls	r3, r3, #8
 800772a:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 800772c:	79fb      	ldrb	r3, [r7, #7]
 800772e:	3301      	adds	r3, #1
 8007730:	b2db      	uxtb	r3, r3
 8007732:	4618      	mov	r0, r3
 8007734:	f7ff ff4c 	bl	80075d0 <gyro_read_byte>
 8007738:	4603      	mov	r3, r0
 800773a:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800773c:	4323      	orrs	r3, r4
 800773e:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 8007740:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007744:	ee07 3a90 	vmov	s15, r3
 8007748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800774c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8007768 <ICM20602_GYRO_READ+0x54>
 8007750:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007754:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	ee07 3a90 	vmov	s15, r3

}
 800775e:	eeb0 0a67 	vmov.f32	s0, s15
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	bd90      	pop	{r4, r7, pc}
 8007768:	41833333 	.word	0x41833333

0800776c <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 800776c:	b590      	push	{r4, r7, lr}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	4603      	mov	r3, r0
 8007774:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007776:	79fb      	ldrb	r3, [r7, #7]
 8007778:	4618      	mov	r0, r3
 800777a:	f7ff ff29 	bl	80075d0 <gyro_read_byte>
 800777e:	4603      	mov	r3, r0
 8007780:	021b      	lsls	r3, r3, #8
 8007782:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 8007784:	79fb      	ldrb	r3, [r7, #7]
 8007786:	3301      	adds	r3, #1
 8007788:	b2db      	uxtb	r3, r3
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff ff20 	bl	80075d0 <gyro_read_byte>
 8007790:	4603      	mov	r3, r0
 8007792:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007794:	4323      	orrs	r3, r4
 8007796:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 8007798:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800779c:	ee07 3a90 	vmov	s15, r3
 80077a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077a4:	eddf 6a06 	vldr	s13, [pc, #24]	; 80077c0 <ICM20602_ACCEL_READ+0x54>
 80077a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077ac:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	ee07 3a90 	vmov	s15, r3

}
 80077b6:	eeb0 0a67 	vmov.f32	s0, s15
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd90      	pop	{r4, r7, pc}
 80077c0:	45000000 	.word	0x45000000

080077c4 <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 80077c8:	4b1a      	ldr	r3, [pc, #104]	; (8007834 <ICM20602_DataUpdate+0x70>)
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d12f      	bne.n	8007830 <ICM20602_DataUpdate+0x6c>

// get yawrate

		gyro.omega_y = ICM20602_GYRO_READ(0x43);
 80077d0:	2043      	movs	r0, #67	; 0x43
 80077d2:	f7ff ff9f 	bl	8007714 <ICM20602_GYRO_READ>
 80077d6:	eef0 7a40 	vmov.f32	s15, s0
 80077da:	4b17      	ldr	r3, [pc, #92]	; (8007838 <ICM20602_DataUpdate+0x74>)
 80077dc:	edc3 7a01 	vstr	s15, [r3, #4]

		gyro.omega_x = ICM20602_GYRO_READ(0x45);
 80077e0:	2045      	movs	r0, #69	; 0x45
 80077e2:	f7ff ff97 	bl	8007714 <ICM20602_GYRO_READ>
 80077e6:	eef0 7a40 	vmov.f32	s15, s0
 80077ea:	4b13      	ldr	r3, [pc, #76]	; (8007838 <ICM20602_DataUpdate+0x74>)
 80077ec:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 80077f0:	2047      	movs	r0, #71	; 0x47
 80077f2:	f7ff ff8f 	bl	8007714 <ICM20602_GYRO_READ>
 80077f6:	eef0 7a40 	vmov.f32	s15, s0
 80077fa:	4b0f      	ldr	r3, [pc, #60]	; (8007838 <ICM20602_DataUpdate+0x74>)
 80077fc:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_y = ICM20602_ACCEL_READ(0x3B);
 8007800:	203b      	movs	r0, #59	; 0x3b
 8007802:	f7ff ffb3 	bl	800776c <ICM20602_ACCEL_READ>
 8007806:	eef0 7a40 	vmov.f32	s15, s0
 800780a:	4b0b      	ldr	r3, [pc, #44]	; (8007838 <ICM20602_DataUpdate+0x74>)
 800780c:	edc3 7a04 	vstr	s15, [r3, #16]

		gyro.accel_x = ICM20602_ACCEL_READ(0x3D);
 8007810:	203d      	movs	r0, #61	; 0x3d
 8007812:	f7ff ffab 	bl	800776c <ICM20602_ACCEL_READ>
 8007816:	eef0 7a40 	vmov.f32	s15, s0
 800781a:	4b07      	ldr	r3, [pc, #28]	; (8007838 <ICM20602_DataUpdate+0x74>)
 800781c:	edc3 7a03 	vstr	s15, [r3, #12]

		gyro.accel_z = ICM20602_ACCEL_READ(0x3F);
 8007820:	203f      	movs	r0, #63	; 0x3f
 8007822:	f7ff ffa3 	bl	800776c <ICM20602_ACCEL_READ>
 8007826:	eef0 7a40 	vmov.f32	s15, s0
 800782a:	4b03      	ldr	r3, [pc, #12]	; (8007838 <ICM20602_DataUpdate+0x74>)
 800782c:	edc3 7a05 	vstr	s15, [r3, #20]

	}

}
 8007830:	bf00      	nop
 8007832:	bd80      	pop	{r7, pc}
 8007834:	200006c0 	.word	0x200006c0
 8007838:	200006c4 	.word	0x200006c4

0800783c <pl_motor_init>:
#include "PL_motor.h"
#include "tim.h"
#include "gpio.h"
#include "define.h"

void pl_motor_init(void){
 800783c:	b580      	push	{r7, lr}
 800783e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim8);//モータ
 8007840:	480f      	ldr	r0, [pc, #60]	; (8007880 <pl_motor_init+0x44>)
 8007842:	f00d fd1b 	bl	801527c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim8);//モータ
 8007846:	480e      	ldr	r0, [pc, #56]	; (8007880 <pl_motor_init+0x44>)
 8007848:	f007 ff82 	bl	800f750 <HAL_TIM_PWM_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);//吸
 800784c:	480d      	ldr	r0, [pc, #52]	; (8007884 <pl_motor_init+0x48>)
 800784e:	f00d fd15 	bl	801527c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim16);//吸
 8007852:	480c      	ldr	r0, [pc, #48]	; (8007884 <pl_motor_init+0x48>)
 8007854:	f007 ff7c 	bl	800f750 <HAL_TIM_PWM_MspInit>

	pl_L_DriveMotor_mode(MOTOR_FRONT);
 8007858:	2001      	movs	r0, #1
 800785a:	f000 f81f 	bl	800789c <pl_L_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,90);
 800785e:	4b08      	ldr	r3, [pc, #32]	; (8007880 <pl_motor_init+0x44>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	225a      	movs	r2, #90	; 0x5a
 8007864:	63da      	str	r2, [r3, #60]	; 0x3c
	pl_R_DriveMotor_mode(MOTOR_FRONT);
 8007866:	2001      	movs	r0, #1
 8007868:	f000 f840 	bl	80078ec <pl_R_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,90);
 800786c:	4b04      	ldr	r3, [pc, #16]	; (8007880 <pl_motor_init+0x44>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	225a      	movs	r2, #90	; 0x5a
 8007872:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,30);
 8007874:	4b03      	ldr	r3, [pc, #12]	; (8007884 <pl_motor_init+0x48>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	221e      	movs	r2, #30
 800787a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800787c:	bf00      	nop
 800787e:	bd80      	pop	{r7, pc}
 8007880:	2000c4b0 	.word	0x2000c4b0
 8007884:	2000c4fc 	.word	0x2000c4fc

08007888 <pl_DriveMotor_standby>:

void pl_DriveMotor_standby(int pin){
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, pin);
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <pl_L_DriveMotor_mode>:

void pl_L_DriveMotor_mode(int l_motor_mode){
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]

switch (l_motor_mode){
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d819      	bhi.n	80078de <pl_L_DriveMotor_mode+0x42>
 80078aa:	a201      	add	r2, pc, #4	; (adr r2, 80078b0 <pl_L_DriveMotor_mode+0x14>)
 80078ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b0:	080078dd 	.word	0x080078dd
 80078b4:	080078c1 	.word	0x080078c1
 80078b8:	080078cf 	.word	0x080078cf
 80078bc:	080078dd 	.word	0x080078dd
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 80078c0:	2200      	movs	r2, #0
 80078c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80078c6:	4808      	ldr	r0, [pc, #32]	; (80078e8 <pl_L_DriveMotor_mode+0x4c>)
 80078c8:	f00b fd30 	bl	801332c <HAL_GPIO_WritePin>
break;
 80078cc:	e007      	b.n	80078de <pl_L_DriveMotor_mode+0x42>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_SET);
 80078ce:	2201      	movs	r2, #1
 80078d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80078d4:	4804      	ldr	r0, [pc, #16]	; (80078e8 <pl_L_DriveMotor_mode+0x4c>)
 80078d6:	f00b fd29 	bl	801332c <HAL_GPIO_WritePin>
break;
 80078da:	e000      	b.n	80078de <pl_L_DriveMotor_mode+0x42>
break;
 80078dc:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 80078de:	bf00      	nop
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	48000800 	.word	0x48000800

080078ec <pl_R_DriveMotor_mode>:

void pl_R_DriveMotor_mode(int r_motor_mode){
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]

switch (r_motor_mode){
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d817      	bhi.n	800792a <pl_R_DriveMotor_mode+0x3e>
 80078fa:	a201      	add	r2, pc, #4	; (adr r2, 8007900 <pl_R_DriveMotor_mode+0x14>)
 80078fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007900:	08007929 	.word	0x08007929
 8007904:	08007911 	.word	0x08007911
 8007908:	0800791d 	.word	0x0800791d
 800790c:	08007929 	.word	0x08007929
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 8007910:	2201      	movs	r2, #1
 8007912:	2180      	movs	r1, #128	; 0x80
 8007914:	4807      	ldr	r0, [pc, #28]	; (8007934 <pl_R_DriveMotor_mode+0x48>)
 8007916:	f00b fd09 	bl	801332c <HAL_GPIO_WritePin>
break;
 800791a:	e006      	b.n	800792a <pl_R_DriveMotor_mode+0x3e>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_RESET);
 800791c:	2200      	movs	r2, #0
 800791e:	2180      	movs	r1, #128	; 0x80
 8007920:	4804      	ldr	r0, [pc, #16]	; (8007934 <pl_R_DriveMotor_mode+0x48>)
 8007922:	f00b fd03 	bl	801332c <HAL_GPIO_WritePin>
break;
 8007926:	e000      	b.n	800792a <pl_R_DriveMotor_mode+0x3e>
break;
 8007928:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 800792a:	bf00      	nop
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	48000400 	.word	0x48000400

08007938 <pl_DriveMotor_start>:



void pl_DriveMotor_start(void){
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800793c:	2108      	movs	r1, #8
 800793e:	4804      	ldr	r0, [pc, #16]	; (8007950 <pl_DriveMotor_start+0x18>)
 8007940:	f00d fd64 	bl	801540c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8007944:	2100      	movs	r1, #0
 8007946:	4802      	ldr	r0, [pc, #8]	; (8007950 <pl_DriveMotor_start+0x18>)
 8007948:	f00d fd60 	bl	801540c <HAL_TIM_PWM_Start>
}
 800794c:	bf00      	nop
 800794e:	bd80      	pop	{r7, pc}
 8007950:	2000c4b0 	.word	0x2000c4b0

08007954 <pl_DriveMotor_stop>:

void pl_DriveMotor_stop(void){
 8007954:	b580      	push	{r7, lr}
 8007956:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8007958:	2108      	movs	r1, #8
 800795a:	4804      	ldr	r0, [pc, #16]	; (800796c <pl_DriveMotor_stop+0x18>)
 800795c:	f00d fe62 	bl	8015624 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8007960:	2100      	movs	r1, #0
 8007962:	4802      	ldr	r0, [pc, #8]	; (800796c <pl_DriveMotor_stop+0x18>)
 8007964:	f00d fe5e 	bl	8015624 <HAL_TIM_PWM_Stop>
}
 8007968:	bf00      	nop
 800796a:	bd80      	pop	{r7, pc}
 800796c:	2000c4b0 	.word	0x2000c4b0

08007970 <pl_DriveMotor_duty>:

void pl_DriveMotor_duty(int duty_l,int duty_r){
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,duty_l);
 800797a:	4b07      	ldr	r3, [pc, #28]	; (8007998 <pl_DriveMotor_duty+0x28>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,duty_r);
 8007982:	4b05      	ldr	r3, [pc, #20]	; (8007998 <pl_DriveMotor_duty+0x28>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	635a      	str	r2, [r3, #52]	; 0x34
}
 800798a:	bf00      	nop
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	2000c4b0 	.word	0x2000c4b0

0800799c <pl_FunMotor_start>:



void pl_FunMotor_start(void){
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80079a0:	2100      	movs	r1, #0
 80079a2:	4802      	ldr	r0, [pc, #8]	; (80079ac <pl_FunMotor_start+0x10>)
 80079a4:	f00d fd32 	bl	801540c <HAL_TIM_PWM_Start>
}
 80079a8:	bf00      	nop
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	2000c4fc 	.word	0x2000c4fc

080079b0 <pl_FunMotor_stop>:

void pl_FunMotor_stop(void){
 80079b0:	b580      	push	{r7, lr}
 80079b2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80079b4:	2100      	movs	r1, #0
 80079b6:	4802      	ldr	r0, [pc, #8]	; (80079c0 <pl_FunMotor_stop+0x10>)
 80079b8:	f00d fe34 	bl	8015624 <HAL_TIM_PWM_Stop>
}
 80079bc:	bf00      	nop
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	2000c4fc 	.word	0x2000c4fc

080079c4 <pl_FunMotor_duty>:

void pl_FunMotor_duty(float fun_ratio){
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_fun=(int)(FUN_MAX_DUTY*fun_ratio);
 80079ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80079d2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007a08 <pl_FunMotor_duty+0x44>
 80079d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80079da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079de:	ee17 3a90 	vmov	r3, s15
 80079e2:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim16, FUN_MAX_DUTY);
 80079e4:	4b09      	ldr	r3, [pc, #36]	; (8007a0c <pl_FunMotor_duty+0x48>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2264      	movs	r2, #100	; 0x64
 80079ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80079ec:	4b07      	ldr	r3, [pc, #28]	; (8007a0c <pl_FunMotor_duty+0x48>)
 80079ee:	2264      	movs	r2, #100	; 0x64
 80079f0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,duty_fun);
 80079f2:	4b06      	ldr	r3, [pc, #24]	; (8007a0c <pl_FunMotor_duty+0x48>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	635a      	str	r2, [r3, #52]	; 0x34

}
 80079fa:	bf00      	nop
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	42c80000 	.word	0x42c80000
 8007a0c:	2000c4fc 	.word	0x2000c4fc

08007a10 <pl_sensor_init>:
/*******************************************************************/
/*	sensorのinit					(pl_sensor_init)	*/
/*******************************************************************/
/*	sensorを初期設定						*/
/*******************************************************************/
void pl_sensor_init(void){
 8007a10:	b580      	push	{r7, lr}
 8007a12:	af00      	add	r7, sp, #0
	AD_step=0;
 8007a14:	4b04      	ldr	r3, [pc, #16]	; (8007a28 <pl_sensor_init+0x18>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Init(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007a1a:	217f      	movs	r1, #127	; 0x7f
 8007a1c:	4803      	ldr	r0, [pc, #12]	; (8007a2c <pl_sensor_init+0x1c>)
 8007a1e:	f00a fdab 	bl	8012578 <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_ConfigChannel(&hadc1,&sConfig);
}
 8007a22:	bf00      	nop
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	200006e8 	.word	0x200006e8
 8007a2c:	20000714 	.word	0x20000714

08007a30 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 8007a36:	483c      	ldr	r0, [pc, #240]	; (8007b28 <pl_getbatt+0xf8>)
 8007a38:	f009 f98c 	bl	8010d54 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8007a3c:	2132      	movs	r1, #50	; 0x32
 8007a3e:	483a      	ldr	r0, [pc, #232]	; (8007b28 <pl_getbatt+0xf8>)
 8007a40:	f009 fa86 	bl	8010f50 <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 8007a44:	4838      	ldr	r0, [pc, #224]	; (8007b28 <pl_getbatt+0xf8>)
 8007a46:	f009 fca2 	bl	801138e <HAL_ADC_GetValue>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8007a4e:	4836      	ldr	r0, [pc, #216]	; (8007b28 <pl_getbatt+0xf8>)
 8007a50:	f009 fa4a 	bl	8010ee8 <HAL_ADC_Stop>
	batt = 3.3 * (float) battAD / 4095 * (10.0 + 10.0) / 10.0*1.15*3.7/3.86;//* 1.2975
 8007a54:	88fb      	ldrh	r3, [r7, #6]
 8007a56:	ee07 3a90 	vmov	s15, r3
 8007a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5e:	ee17 0a90 	vmov	r0, s15
 8007a62:	f7f8 fd99 	bl	8000598 <__aeabi_f2d>
 8007a66:	a326      	add	r3, pc, #152	; (adr r3, 8007b00 <pl_getbatt+0xd0>)
 8007a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6c:	f7f8 fdec 	bl	8000648 <__aeabi_dmul>
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	4610      	mov	r0, r2
 8007a76:	4619      	mov	r1, r3
 8007a78:	a323      	add	r3, pc, #140	; (adr r3, 8007b08 <pl_getbatt+0xd8>)
 8007a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7e:	f7f8 ff0d 	bl	800089c <__aeabi_ddiv>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	4610      	mov	r0, r2
 8007a88:	4619      	mov	r1, r3
 8007a8a:	f04f 0200 	mov.w	r2, #0
 8007a8e:	4b27      	ldr	r3, [pc, #156]	; (8007b2c <pl_getbatt+0xfc>)
 8007a90:	f7f8 fdda 	bl	8000648 <__aeabi_dmul>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	4610      	mov	r0, r2
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	f04f 0200 	mov.w	r2, #0
 8007aa0:	4b23      	ldr	r3, [pc, #140]	; (8007b30 <pl_getbatt+0x100>)
 8007aa2:	f7f8 fefb 	bl	800089c <__aeabi_ddiv>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	4610      	mov	r0, r2
 8007aac:	4619      	mov	r1, r3
 8007aae:	a318      	add	r3, pc, #96	; (adr r3, 8007b10 <pl_getbatt+0xe0>)
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	f7f8 fdc8 	bl	8000648 <__aeabi_dmul>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4610      	mov	r0, r2
 8007abe:	4619      	mov	r1, r3
 8007ac0:	a315      	add	r3, pc, #84	; (adr r3, 8007b18 <pl_getbatt+0xe8>)
 8007ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac6:	f7f8 fdbf 	bl	8000648 <__aeabi_dmul>
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	4610      	mov	r0, r2
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	a313      	add	r3, pc, #76	; (adr r3, 8007b20 <pl_getbatt+0xf0>)
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f7f8 fee0 	bl	800089c <__aeabi_ddiv>
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	f7f9 f888 	bl	8000bf8 <__aeabi_d2f>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	603b      	str	r3, [r7, #0]
return batt;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	ee07 3a90 	vmov	s15, r3
}
 8007af2:	eeb0 0a67 	vmov.f32	s0, s15
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	f3af 8000 	nop.w
 8007b00:	66666666 	.word	0x66666666
 8007b04:	400a6666 	.word	0x400a6666
 8007b08:	00000000 	.word	0x00000000
 8007b0c:	40affe00 	.word	0x40affe00
 8007b10:	66666666 	.word	0x66666666
 8007b14:	3ff26666 	.word	0x3ff26666
 8007b18:	9999999a 	.word	0x9999999a
 8007b1c:	400d9999 	.word	0x400d9999
 8007b20:	ae147ae1 	.word	0xae147ae1
 8007b24:	400ee147 	.word	0x400ee147
 8007b28:	20000714 	.word	0x20000714
 8007b2c:	40340000 	.word	0x40340000
 8007b30:	40240000 	.word	0x40240000
 8007b34:	00000000 	.word	0x00000000

08007b38 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 8007b3e:	4882      	ldr	r0, [pc, #520]	; (8007d48 <pl_callback_getSensor+0x210>)
 8007b40:	f009 fbc4 	bl	80112cc <HAL_ADC_Stop_DMA>


	switch (AD_step) {
 8007b44:	4b81      	ldr	r3, [pc, #516]	; (8007d4c <pl_callback_getSensor+0x214>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	f200 80d9 	bhi.w	8007d00 <pl_callback_getSensor+0x1c8>
 8007b4e:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <pl_callback_getSensor+0x1c>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007b69 	.word	0x08007b69
 8007b58:	08007ba1 	.word	0x08007ba1
 8007b5c:	08007c01 	.word	0x08007c01
 8007b60:	08007c41 	.word	0x08007c41
 8007b64:	08007d01 	.word	0x08007d01
	case 0:
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin, GPIO_PIN_SET);
 8007b68:	2201      	movs	r2, #1
 8007b6a:	2102      	movs	r1, #2
 8007b6c:	4878      	ldr	r0, [pc, #480]	; (8007d50 <pl_callback_getSensor+0x218>)
 8007b6e:	f00b fbdd 	bl	801332c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007b72:	2200      	movs	r2, #0
 8007b74:	2110      	movs	r1, #16
 8007b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b7a:	f00b fbd7 	bl	801332c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b84:	4873      	ldr	r0, [pc, #460]	; (8007d54 <pl_callback_getSensor+0x21c>)
 8007b86:	f00b fbd1 	bl	801332c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007b8e:	e002      	b.n	8007b96 <pl_callback_getSensor+0x5e>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	3301      	adds	r3, #1
 8007b94:	607b      	str	r3, [r7, #4]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b9c:	ddf8      	ble.n	8007b90 <pl_callback_getSensor+0x58>
		break;
 8007b9e:	e0af      	b.n	8007d00 <pl_callback_getSensor+0x1c8>
	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 8007ba0:	4b6d      	ldr	r3, [pc, #436]	; (8007d58 <pl_callback_getSensor+0x220>)
 8007ba2:	885a      	ldrh	r2, [r3, #2]
 8007ba4:	4b6d      	ldr	r3, [pc, #436]	; (8007d5c <pl_callback_getSensor+0x224>)
 8007ba6:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 8007ba8:	4b6b      	ldr	r3, [pc, #428]	; (8007d58 <pl_callback_getSensor+0x220>)
 8007baa:	889a      	ldrh	r2, [r3, #4]
 8007bac:	4b6b      	ldr	r3, [pc, #428]	; (8007d5c <pl_callback_getSensor+0x224>)
 8007bae:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 8007bb0:	4b69      	ldr	r3, [pc, #420]	; (8007d58 <pl_callback_getSensor+0x220>)
 8007bb2:	88da      	ldrh	r2, [r3, #6]
 8007bb4:	4b6a      	ldr	r3, [pc, #424]	; (8007d60 <pl_callback_getSensor+0x228>)
 8007bb6:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 8007bb8:	4b67      	ldr	r3, [pc, #412]	; (8007d58 <pl_callback_getSensor+0x220>)
 8007bba:	891a      	ldrh	r2, [r3, #8]
 8007bbc:	4b68      	ldr	r3, [pc, #416]	; (8007d60 <pl_callback_getSensor+0x228>)
 8007bbe:	80da      	strh	r2, [r3, #6]
		g_sensor_off[4] = g_ADCBuffer[5];
 8007bc0:	4b65      	ldr	r3, [pc, #404]	; (8007d58 <pl_callback_getSensor+0x220>)
 8007bc2:	895a      	ldrh	r2, [r3, #10]
 8007bc4:	4b66      	ldr	r3, [pc, #408]	; (8007d60 <pl_callback_getSensor+0x228>)
 8007bc6:	811a      	strh	r2, [r3, #8]

		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007bc8:	2200      	movs	r2, #0
 8007bca:	2102      	movs	r1, #2
 8007bcc:	4860      	ldr	r0, [pc, #384]	; (8007d50 <pl_callback_getSensor+0x218>)
 8007bce:	f00b fbad 	bl	801332c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin, GPIO_PIN_SET);
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	2110      	movs	r1, #16
 8007bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007bda:	f00b fba7 	bl	801332c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007bde:	2200      	movs	r2, #0
 8007be0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007be4:	485b      	ldr	r0, [pc, #364]	; (8007d54 <pl_callback_getSensor+0x21c>)
 8007be6:	f00b fba1 	bl	801332c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007bea:	2300      	movs	r3, #0
 8007bec:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007bee:	e002      	b.n	8007bf6 <pl_callback_getSensor+0xbe>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	607b      	str	r3, [r7, #4]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bfc:	ddf8      	ble.n	8007bf0 <pl_callback_getSensor+0xb8>
		break;
 8007bfe:	e07f      	b.n	8007d00 <pl_callback_getSensor+0x1c8>
	case 2:
		g_sensor_on[2] = g_ADCBuffer[3];
 8007c00:	4b55      	ldr	r3, [pc, #340]	; (8007d58 <pl_callback_getSensor+0x220>)
 8007c02:	88da      	ldrh	r2, [r3, #6]
 8007c04:	4b55      	ldr	r3, [pc, #340]	; (8007d5c <pl_callback_getSensor+0x224>)
 8007c06:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2102      	movs	r1, #2
 8007c0c:	4850      	ldr	r0, [pc, #320]	; (8007d50 <pl_callback_getSensor+0x218>)
 8007c0e:	f00b fb8d 	bl	801332c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007c12:	2200      	movs	r2, #0
 8007c14:	2110      	movs	r1, #16
 8007c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c1a:	f00b fb87 	bl	801332c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin, GPIO_PIN_SET);
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c24:	484b      	ldr	r0, [pc, #300]	; (8007d54 <pl_callback_getSensor+0x21c>)
 8007c26:	f00b fb81 	bl	801332c <HAL_GPIO_WritePin>
		j=0;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007c2e:	e002      	b.n	8007c36 <pl_callback_getSensor+0xfe>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	3301      	adds	r3, #1
 8007c34:	607b      	str	r3, [r7, #4]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c3c:	ddf8      	ble.n	8007c30 <pl_callback_getSensor+0xf8>
		break;
 8007c3e:	e05f      	b.n	8007d00 <pl_callback_getSensor+0x1c8>
	case 3:
		g_sensor_off[0] = g_ADCBuffer[1];
 8007c40:	4b45      	ldr	r3, [pc, #276]	; (8007d58 <pl_callback_getSensor+0x220>)
 8007c42:	885a      	ldrh	r2, [r3, #2]
 8007c44:	4b46      	ldr	r3, [pc, #280]	; (8007d60 <pl_callback_getSensor+0x228>)
 8007c46:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 8007c48:	4b43      	ldr	r3, [pc, #268]	; (8007d58 <pl_callback_getSensor+0x220>)
 8007c4a:	889a      	ldrh	r2, [r3, #4]
 8007c4c:	4b44      	ldr	r3, [pc, #272]	; (8007d60 <pl_callback_getSensor+0x228>)
 8007c4e:	805a      	strh	r2, [r3, #2]
		g_sensor_on[3] = g_ADCBuffer[4];
 8007c50:	4b41      	ldr	r3, [pc, #260]	; (8007d58 <pl_callback_getSensor+0x220>)
 8007c52:	891a      	ldrh	r2, [r3, #8]
 8007c54:	4b41      	ldr	r3, [pc, #260]	; (8007d5c <pl_callback_getSensor+0x224>)
 8007c56:	80da      	strh	r2, [r3, #6]
		g_sensor_on[4] = g_ADCBuffer[5];
 8007c58:	4b3f      	ldr	r3, [pc, #252]	; (8007d58 <pl_callback_getSensor+0x220>)
 8007c5a:	895a      	ldrh	r2, [r3, #10]
 8007c5c:	4b3f      	ldr	r3, [pc, #252]	; (8007d5c <pl_callback_getSensor+0x224>)
 8007c5e:	811a      	strh	r2, [r3, #8]


		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007c60:	2200      	movs	r2, #0
 8007c62:	2102      	movs	r1, #2
 8007c64:	483a      	ldr	r0, [pc, #232]	; (8007d50 <pl_callback_getSensor+0x218>)
 8007c66:	f00b fb61 	bl	801332c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2110      	movs	r1, #16
 8007c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c72:	f00b fb5b 	bl	801332c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007c76:	2200      	movs	r2, #0
 8007c78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c7c:	4835      	ldr	r0, [pc, #212]	; (8007d54 <pl_callback_getSensor+0x21c>)
 8007c7e:	f00b fb55 	bl	801332c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007c82:	2300      	movs	r3, #0
 8007c84:	607b      	str	r3, [r7, #4]
		while (j <= 50) {j++;}
 8007c86:	e002      	b.n	8007c8e <pl_callback_getSensor+0x156>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	607b      	str	r3, [r7, #4]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b32      	cmp	r3, #50	; 0x32
 8007c92:	ddf9      	ble.n	8007c88 <pl_callback_getSensor+0x150>
		V_battAD = g_ADCBuffer[0];
 8007c94:	4b30      	ldr	r3, [pc, #192]	; (8007d58 <pl_callback_getSensor+0x220>)
 8007c96:	881b      	ldrh	r3, [r3, #0]
 8007c98:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 4095.0 * (100.0 + 50.0) / 50.0;
 8007c9a:	887b      	ldrh	r3, [r7, #2]
 8007c9c:	ee07 3a90 	vmov	s15, r3
 8007ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca4:	ee17 0a90 	vmov	r0, s15
 8007ca8:	f7f8 fc76 	bl	8000598 <__aeabi_f2d>
 8007cac:	a320      	add	r3, pc, #128	; (adr r3, 8007d30 <pl_callback_getSensor+0x1f8>)
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	f7f8 fcc9 	bl	8000648 <__aeabi_dmul>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	4610      	mov	r0, r2
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	a31e      	add	r3, pc, #120	; (adr r3, 8007d38 <pl_callback_getSensor+0x200>)
 8007cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc4:	f7f8 fdea 	bl	800089c <__aeabi_ddiv>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4610      	mov	r0, r2
 8007cce:	4619      	mov	r1, r3
 8007cd0:	a31b      	add	r3, pc, #108	; (adr r3, 8007d40 <pl_callback_getSensor+0x208>)
 8007cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd6:	f7f8 fcb7 	bl	8000648 <__aeabi_dmul>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4610      	mov	r0, r2
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	f04f 0200 	mov.w	r2, #0
 8007ce6:	4b1f      	ldr	r3, [pc, #124]	; (8007d64 <pl_callback_getSensor+0x22c>)
 8007ce8:	f7f8 fdd8 	bl	800089c <__aeabi_ddiv>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	f7f8 ff80 	bl	8000bf8 <__aeabi_d2f>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	4a1b      	ldr	r2, [pc, #108]	; (8007d68 <pl_callback_getSensor+0x230>)
 8007cfc:	6013      	str	r3, [r2, #0]
		break;
 8007cfe:	bf00      	nop

		break;
	}


	AD_step++;
 8007d00:	4b12      	ldr	r3, [pc, #72]	; (8007d4c <pl_callback_getSensor+0x214>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	3301      	adds	r3, #1
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	4b10      	ldr	r3, [pc, #64]	; (8007d4c <pl_callback_getSensor+0x214>)
 8007d0a:	701a      	strb	r2, [r3, #0]
	//for(j=0;j<=2000;j++){}
	if (AD_step != 4) {
 8007d0c:	4b0f      	ldr	r3, [pc, #60]	; (8007d4c <pl_callback_getSensor+0x214>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	2b04      	cmp	r3, #4
 8007d12:	d005      	beq.n	8007d20 <pl_callback_getSensor+0x1e8>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007d14:	2206      	movs	r2, #6
 8007d16:	4910      	ldr	r1, [pc, #64]	; (8007d58 <pl_callback_getSensor+0x220>)
 8007d18:	480b      	ldr	r0, [pc, #44]	; (8007d48 <pl_callback_getSensor+0x210>)
 8007d1a:	f009 fa0d 	bl	8011138 <HAL_ADC_Start_DMA>
	 the HAL_ADC_ConvCpltCallback could be implemented in the user file
	 */
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer)/sizeof(uint16_t));
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
	//	sizeof(g_ADCBuffer) / sizeof(uint16_t));
}
 8007d1e:	e002      	b.n	8007d26 <pl_callback_getSensor+0x1ee>
		AD_step = 0;
 8007d20:	4b0a      	ldr	r3, [pc, #40]	; (8007d4c <pl_callback_getSensor+0x214>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	701a      	strb	r2, [r3, #0]
}
 8007d26:	bf00      	nop
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	66666666 	.word	0x66666666
 8007d34:	400a6666 	.word	0x400a6666
 8007d38:	00000000 	.word	0x00000000
 8007d3c:	40affe00 	.word	0x40affe00
 8007d40:	00000000 	.word	0x00000000
 8007d44:	4062c000 	.word	0x4062c000
 8007d48:	20000714 	.word	0x20000714
 8007d4c:	200006e8 	.word	0x200006e8
 8007d50:	48000400 	.word	0x48000400
 8007d54:	48000800 	.word	0x48000800
 8007d58:	200006dc 	.word	0x200006dc
 8007d5c:	200006ec 	.word	0x200006ec
 8007d60:	200006f8 	.word	0x200006f8
 8007d64:	40490000 	.word	0x40490000
 8007d68:	20000704 	.word	0x20000704

08007d6c <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007d70:	2206      	movs	r2, #6
 8007d72:	4903      	ldr	r1, [pc, #12]	; (8007d80 <pl_interupt_getSensor+0x14>)
 8007d74:	4803      	ldr	r0, [pc, #12]	; (8007d84 <pl_interupt_getSensor+0x18>)
 8007d76:	f009 f9df 	bl	8011138 <HAL_ADC_Start_DMA>

}
 8007d7a:	bf00      	nop
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	200006dc 	.word	0x200006dc
 8007d84:	20000714 	.word	0x20000714

08007d88 <pl_timer_init>:

volatile uint32_t g_timCount;
float g_timCount_sec;
uint8_t count_mode;

void pl_timer_init(void){
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	af00      	add	r7, sp, #0
	count_mode=0;
 8007d8c:	4b05      	ldr	r3, [pc, #20]	; (8007da4 <pl_timer_init+0x1c>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007d92:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <pl_timer_init+0x20>)
 8007d94:	f04f 0200 	mov.w	r2, #0
 8007d98:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);//割り込み
 8007d9a:	4804      	ldr	r0, [pc, #16]	; (8007dac <pl_timer_init+0x24>)
 8007d9c:	f00d fa6e 	bl	801527c <HAL_TIM_Base_Start_IT>
}
 8007da0:	bf00      	nop
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	20000710 	.word	0x20000710
 8007da8:	2000070c 	.word	0x2000070c
 8007dac:	2000c464 	.word	0x2000c464

08007db0 <interrupt_timer>:

void interrupt_timer(void){
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
	g_timCount++;
 8007db4:	4b10      	ldr	r3, [pc, #64]	; (8007df8 <interrupt_timer+0x48>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3301      	adds	r3, #1
 8007dba:	4a0f      	ldr	r2, [pc, #60]	; (8007df8 <interrupt_timer+0x48>)
 8007dbc:	6013      	str	r3, [r2, #0]
	if(count_mode==1){
 8007dbe:	4b0f      	ldr	r3, [pc, #60]	; (8007dfc <interrupt_timer+0x4c>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d112      	bne.n	8007dec <interrupt_timer+0x3c>
	g_timCount_sec=g_timCount_sec + INTERRUPT_TIME;
 8007dc6:	4b0e      	ldr	r3, [pc, #56]	; (8007e00 <interrupt_timer+0x50>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7f8 fbe4 	bl	8000598 <__aeabi_f2d>
 8007dd0:	a307      	add	r3, pc, #28	; (adr r3, 8007df0 <interrupt_timer+0x40>)
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	f7f8 fa81 	bl	80002dc <__adddf3>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4610      	mov	r0, r2
 8007de0:	4619      	mov	r1, r3
 8007de2:	f7f8 ff09 	bl	8000bf8 <__aeabi_d2f>
 8007de6:	4603      	mov	r3, r0
 8007de8:	4a05      	ldr	r2, [pc, #20]	; (8007e00 <interrupt_timer+0x50>)
 8007dea:	6013      	str	r3, [r2, #0]
	}

}
 8007dec:	bf00      	nop
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	d2f1a9fc 	.word	0xd2f1a9fc
 8007df4:	3f50624d 	.word	0x3f50624d
 8007df8:	20000708 	.word	0x20000708
 8007dfc:	20000710 	.word	0x20000710
 8007e00:	2000070c 	.word	0x2000070c
 8007e04:	00000000 	.word	0x00000000

08007e08 <wait_ms>:
	count_mode=0;
	g_timCount_sec=0;
	return timer;
}

void wait_ms(uint32_t waitTime) {
 8007e08:	b5b0      	push	{r4, r5, r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8007e10:	4b1d      	ldr	r3, [pc, #116]	; (8007e88 <wait_ms+0x80>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 8007e16:	4b1d      	ldr	r3, [pc, #116]	; (8007e8c <wait_ms+0x84>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	625a      	str	r2, [r3, #36]	; 0x24
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8007e1e:	bf00      	nop
 8007e20:	4b19      	ldr	r3, [pc, #100]	; (8007e88 <wait_ms+0x80>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	ee07 3a90 	vmov	s15, r3
 8007e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e2c:	ee17 0a90 	vmov	r0, s15
 8007e30:	f7f8 fbb2 	bl	8000598 <__aeabi_f2d>
 8007e34:	a312      	add	r3, pc, #72	; (adr r3, 8007e80 <wait_ms+0x78>)
 8007e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3a:	f7f8 fc05 	bl	8000648 <__aeabi_dmul>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	4610      	mov	r0, r2
 8007e44:	4619      	mov	r1, r3
 8007e46:	a30e      	add	r3, pc, #56	; (adr r3, 8007e80 <wait_ms+0x78>)
 8007e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4c:	f7f8 fd26 	bl	800089c <__aeabi_ddiv>
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	4614      	mov	r4, r2
 8007e56:	461d      	mov	r5, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7f8 fb7b 	bl	8000554 <__aeabi_ui2d>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	460b      	mov	r3, r1
 8007e62:	4620      	mov	r0, r4
 8007e64:	4629      	mov	r1, r5
 8007e66:	f7f8 fe61 	bl	8000b2c <__aeabi_dcmplt>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1d7      	bne.n	8007e20 <wait_ms+0x18>
        }

}
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bdb0      	pop	{r4, r5, r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	f3af 8000 	nop.w
 8007e80:	d2f1a9fc 	.word	0xd2f1a9fc
 8007e84:	3f50624d 	.word	0x3f50624d
 8007e88:	20000708 	.word	0x20000708
 8007e8c:	2000c464 	.word	0x2000c464

08007e90 <wait_ms_NoReset>:

void wait_ms_NoReset(uint32_t waitTime) {
 8007e90:	b5b0      	push	{r4, r5, r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8007e98:	4b1b      	ldr	r3, [pc, #108]	; (8007f08 <wait_ms_NoReset+0x78>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	601a      	str	r2, [r3, #0]
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8007e9e:	bf00      	nop
 8007ea0:	4b19      	ldr	r3, [pc, #100]	; (8007f08 <wait_ms_NoReset+0x78>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	ee07 3a90 	vmov	s15, r3
 8007ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eac:	ee17 0a90 	vmov	r0, s15
 8007eb0:	f7f8 fb72 	bl	8000598 <__aeabi_f2d>
 8007eb4:	a312      	add	r3, pc, #72	; (adr r3, 8007f00 <wait_ms_NoReset+0x70>)
 8007eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eba:	f7f8 fbc5 	bl	8000648 <__aeabi_dmul>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	a30e      	add	r3, pc, #56	; (adr r3, 8007f00 <wait_ms_NoReset+0x70>)
 8007ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ecc:	f7f8 fce6 	bl	800089c <__aeabi_ddiv>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4614      	mov	r4, r2
 8007ed6:	461d      	mov	r5, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7f8 fb3b 	bl	8000554 <__aeabi_ui2d>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	4629      	mov	r1, r5
 8007ee6:	f7f8 fe21 	bl	8000b2c <__aeabi_dcmplt>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1d7      	bne.n	8007ea0 <wait_ms_NoReset+0x10>
        }

}
 8007ef0:	bf00      	nop
 8007ef2:	bf00      	nop
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8007efa:	bf00      	nop
 8007efc:	f3af 8000 	nop.w
 8007f00:	d2f1a9fc 	.word	0xd2f1a9fc
 8007f04:	3f50624d 	.word	0x3f50624d
 8007f08:	20000708 	.word	0x20000708

08007f0c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08c      	sub	sp, #48	; 0x30
 8007f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8007f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f16:	2200      	movs	r2, #0
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	605a      	str	r2, [r3, #4]
 8007f1c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007f1e:	1d3b      	adds	r3, r7, #4
 8007f20:	2220      	movs	r2, #32
 8007f22:	2100      	movs	r1, #0
 8007f24:	4618      	mov	r0, r3
 8007f26:	f00f fb25 	bl	8017574 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007f2a:	4b56      	ldr	r3, [pc, #344]	; (8008084 <MX_ADC1_Init+0x178>)
 8007f2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f30:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007f32:	4b54      	ldr	r3, [pc, #336]	; (8008084 <MX_ADC1_Init+0x178>)
 8007f34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007f38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007f3a:	4b52      	ldr	r3, [pc, #328]	; (8008084 <MX_ADC1_Init+0x178>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007f40:	4b50      	ldr	r3, [pc, #320]	; (8008084 <MX_ADC1_Init+0x178>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8007f46:	4b4f      	ldr	r3, [pc, #316]	; (8008084 <MX_ADC1_Init+0x178>)
 8007f48:	2200      	movs	r2, #0
 8007f4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007f4c:	4b4d      	ldr	r3, [pc, #308]	; (8008084 <MX_ADC1_Init+0x178>)
 8007f4e:	2201      	movs	r2, #1
 8007f50:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007f52:	4b4c      	ldr	r3, [pc, #304]	; (8008084 <MX_ADC1_Init+0x178>)
 8007f54:	2208      	movs	r2, #8
 8007f56:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007f58:	4b4a      	ldr	r3, [pc, #296]	; (8008084 <MX_ADC1_Init+0x178>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007f5e:	4b49      	ldr	r3, [pc, #292]	; (8008084 <MX_ADC1_Init+0x178>)
 8007f60:	2201      	movs	r2, #1
 8007f62:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 8007f64:	4b47      	ldr	r3, [pc, #284]	; (8008084 <MX_ADC1_Init+0x178>)
 8007f66:	2206      	movs	r2, #6
 8007f68:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007f6a:	4b46      	ldr	r3, [pc, #280]	; (8008084 <MX_ADC1_Init+0x178>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007f72:	4b44      	ldr	r3, [pc, #272]	; (8008084 <MX_ADC1_Init+0x178>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007f78:	4b42      	ldr	r3, [pc, #264]	; (8008084 <MX_ADC1_Init+0x178>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007f7e:	4b41      	ldr	r3, [pc, #260]	; (8008084 <MX_ADC1_Init+0x178>)
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007f86:	4b3f      	ldr	r3, [pc, #252]	; (8008084 <MX_ADC1_Init+0x178>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8007f8c:	4b3d      	ldr	r3, [pc, #244]	; (8008084 <MX_ADC1_Init+0x178>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007f94:	483b      	ldr	r0, [pc, #236]	; (8008084 <MX_ADC1_Init+0x178>)
 8007f96:	f008 fd29 	bl	80109ec <HAL_ADC_Init>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8007fa0:	f001 fed3 	bl	8009d4a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fac:	4619      	mov	r1, r3
 8007fae:	4835      	ldr	r0, [pc, #212]	; (8008084 <MX_ADC1_Init+0x178>)
 8007fb0:	f00a fb76 	bl	80126a0 <HAL_ADCEx_MultiModeConfigChannel>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8007fba:	f001 fec6 	bl	8009d4a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8007fbe:	4b32      	ldr	r3, [pc, #200]	; (8008088 <MX_ADC1_Init+0x17c>)
 8007fc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007fc2:	2306      	movs	r3, #6
 8007fc4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007fca:	237f      	movs	r3, #127	; 0x7f
 8007fcc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007fce:	2304      	movs	r3, #4
 8007fd0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007fd6:	1d3b      	adds	r3, r7, #4
 8007fd8:	4619      	mov	r1, r3
 8007fda:	482a      	ldr	r0, [pc, #168]	; (8008084 <MX_ADC1_Init+0x178>)
 8007fdc:	f009 fc3c 	bl	8011858 <HAL_ADC_ConfigChannel>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8007fe6:	f001 feb0 	bl	8009d4a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007fea:	4b28      	ldr	r3, [pc, #160]	; (800808c <MX_ADC1_Init+0x180>)
 8007fec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8007fee:	230c      	movs	r3, #12
 8007ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007ff2:	1d3b      	adds	r3, r7, #4
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	4823      	ldr	r0, [pc, #140]	; (8008084 <MX_ADC1_Init+0x178>)
 8007ff8:	f009 fc2e 	bl	8011858 <HAL_ADC_ConfigChannel>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d001      	beq.n	8008006 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8008002:	f001 fea2 	bl	8009d4a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8008006:	4b22      	ldr	r3, [pc, #136]	; (8008090 <MX_ADC1_Init+0x184>)
 8008008:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800800a:	2312      	movs	r3, #18
 800800c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800800e:	1d3b      	adds	r3, r7, #4
 8008010:	4619      	mov	r1, r3
 8008012:	481c      	ldr	r0, [pc, #112]	; (8008084 <MX_ADC1_Init+0x178>)
 8008014:	f009 fc20 	bl	8011858 <HAL_ADC_ConfigChannel>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800801e:	f001 fe94 	bl	8009d4a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8008022:	4b1c      	ldr	r3, [pc, #112]	; (8008094 <MX_ADC1_Init+0x188>)
 8008024:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8008026:	2318      	movs	r3, #24
 8008028:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800802a:	1d3b      	adds	r3, r7, #4
 800802c:	4619      	mov	r1, r3
 800802e:	4815      	ldr	r0, [pc, #84]	; (8008084 <MX_ADC1_Init+0x178>)
 8008030:	f009 fc12 	bl	8011858 <HAL_ADC_ConfigChannel>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800803a:	f001 fe86 	bl	8009d4a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800803e:	4b16      	ldr	r3, [pc, #88]	; (8008098 <MX_ADC1_Init+0x18c>)
 8008040:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8008042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008046:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008048:	1d3b      	adds	r3, r7, #4
 800804a:	4619      	mov	r1, r3
 800804c:	480d      	ldr	r0, [pc, #52]	; (8008084 <MX_ADC1_Init+0x178>)
 800804e:	f009 fc03 	bl	8011858 <HAL_ADC_ConfigChannel>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8008058:	f001 fe77 	bl	8009d4a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800805c:	4b0f      	ldr	r3, [pc, #60]	; (800809c <MX_ADC1_Init+0x190>)
 800805e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8008060:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008064:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008066:	1d3b      	adds	r3, r7, #4
 8008068:	4619      	mov	r1, r3
 800806a:	4806      	ldr	r0, [pc, #24]	; (8008084 <MX_ADC1_Init+0x178>)
 800806c:	f009 fbf4 	bl	8011858 <HAL_ADC_ConfigChannel>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8008076:	f001 fe68 	bl	8009d4a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800807a:	bf00      	nop
 800807c:	3730      	adds	r7, #48	; 0x30
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20000714 	.word	0x20000714
 8008088:	2e300800 	.word	0x2e300800
 800808c:	3ef08000 	.word	0x3ef08000
 8008090:	10c00010 	.word	0x10c00010
 8008094:	0c900008 	.word	0x0c900008
 8008098:	08600004 	.word	0x08600004
 800809c:	04300002 	.word	0x04300002

080080a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b09e      	sub	sp, #120	; 0x78
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80080ac:	2200      	movs	r2, #0
 80080ae:	601a      	str	r2, [r3, #0]
 80080b0:	605a      	str	r2, [r3, #4]
 80080b2:	609a      	str	r2, [r3, #8]
 80080b4:	60da      	str	r2, [r3, #12]
 80080b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80080b8:	f107 0314 	add.w	r3, r7, #20
 80080bc:	2250      	movs	r2, #80	; 0x50
 80080be:	2100      	movs	r1, #0
 80080c0:	4618      	mov	r0, r3
 80080c2:	f00f fa57 	bl	8017574 <memset>
  if(adcHandle->Instance==ADC1)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080ce:	f040 8082 	bne.w	80081d6 <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80080d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80080d8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80080dc:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80080de:	f107 0314 	add.w	r3, r7, #20
 80080e2:	4618      	mov	r0, r3
 80080e4:	f00b ff1e 	bl	8013f24 <HAL_RCCEx_PeriphCLKConfig>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80080ee:	f001 fe2c 	bl	8009d4a <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80080f2:	4b3b      	ldr	r3, [pc, #236]	; (80081e0 <HAL_ADC_MspInit+0x140>)
 80080f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080f6:	4a3a      	ldr	r2, [pc, #232]	; (80081e0 <HAL_ADC_MspInit+0x140>)
 80080f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80080fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080fe:	4b38      	ldr	r3, [pc, #224]	; (80081e0 <HAL_ADC_MspInit+0x140>)
 8008100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008102:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008106:	613b      	str	r3, [r7, #16]
 8008108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800810a:	4b35      	ldr	r3, [pc, #212]	; (80081e0 <HAL_ADC_MspInit+0x140>)
 800810c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800810e:	4a34      	ldr	r2, [pc, #208]	; (80081e0 <HAL_ADC_MspInit+0x140>)
 8008110:	f043 0301 	orr.w	r3, r3, #1
 8008114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008116:	4b32      	ldr	r3, [pc, #200]	; (80081e0 <HAL_ADC_MspInit+0x140>)
 8008118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	60fb      	str	r3, [r7, #12]
 8008120:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008122:	4b2f      	ldr	r3, [pc, #188]	; (80081e0 <HAL_ADC_MspInit+0x140>)
 8008124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008126:	4a2e      	ldr	r2, [pc, #184]	; (80081e0 <HAL_ADC_MspInit+0x140>)
 8008128:	f043 0302 	orr.w	r3, r3, #2
 800812c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800812e:	4b2c      	ldr	r3, [pc, #176]	; (80081e0 <HAL_ADC_MspInit+0x140>)
 8008130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	60bb      	str	r3, [r7, #8]
 8008138:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 800813a:	230f      	movs	r3, #15
 800813c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800813e:	2303      	movs	r3, #3
 8008140:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008142:	2300      	movs	r3, #0
 8008144:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008146:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800814a:	4619      	mov	r1, r3
 800814c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008150:	f00a ff6a 	bl	8013028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 8008154:	f241 0301 	movw	r3, #4097	; 0x1001
 8008158:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800815a:	2303      	movs	r3, #3
 800815c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800815e:	2300      	movs	r3, #0
 8008160:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008162:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008166:	4619      	mov	r1, r3
 8008168:	481e      	ldr	r0, [pc, #120]	; (80081e4 <HAL_ADC_MspInit+0x144>)
 800816a:	f00a ff5d 	bl	8013028 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800816e:	4b1e      	ldr	r3, [pc, #120]	; (80081e8 <HAL_ADC_MspInit+0x148>)
 8008170:	4a1e      	ldr	r2, [pc, #120]	; (80081ec <HAL_ADC_MspInit+0x14c>)
 8008172:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8008174:	4b1c      	ldr	r3, [pc, #112]	; (80081e8 <HAL_ADC_MspInit+0x148>)
 8008176:	2205      	movs	r2, #5
 8008178:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800817a:	4b1b      	ldr	r3, [pc, #108]	; (80081e8 <HAL_ADC_MspInit+0x148>)
 800817c:	2200      	movs	r2, #0
 800817e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008180:	4b19      	ldr	r3, [pc, #100]	; (80081e8 <HAL_ADC_MspInit+0x148>)
 8008182:	2200      	movs	r2, #0
 8008184:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008186:	4b18      	ldr	r3, [pc, #96]	; (80081e8 <HAL_ADC_MspInit+0x148>)
 8008188:	2280      	movs	r2, #128	; 0x80
 800818a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800818c:	4b16      	ldr	r3, [pc, #88]	; (80081e8 <HAL_ADC_MspInit+0x148>)
 800818e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008192:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008194:	4b14      	ldr	r3, [pc, #80]	; (80081e8 <HAL_ADC_MspInit+0x148>)
 8008196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800819a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800819c:	4b12      	ldr	r3, [pc, #72]	; (80081e8 <HAL_ADC_MspInit+0x148>)
 800819e:	2220      	movs	r2, #32
 80081a0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80081a2:	4b11      	ldr	r3, [pc, #68]	; (80081e8 <HAL_ADC_MspInit+0x148>)
 80081a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80081a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80081aa:	480f      	ldr	r0, [pc, #60]	; (80081e8 <HAL_ADC_MspInit+0x148>)
 80081ac:	f00a fc70 	bl	8012a90 <HAL_DMA_Init>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 80081b6:	f001 fdc8 	bl	8009d4a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a0a      	ldr	r2, [pc, #40]	; (80081e8 <HAL_ADC_MspInit+0x148>)
 80081be:	655a      	str	r2, [r3, #84]	; 0x54
 80081c0:	4a09      	ldr	r2, [pc, #36]	; (80081e8 <HAL_ADC_MspInit+0x148>)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80081c6:	2200      	movs	r2, #0
 80081c8:	2100      	movs	r1, #0
 80081ca:	2012      	movs	r0, #18
 80081cc:	f00a fc2b 	bl	8012a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80081d0:	2012      	movs	r0, #18
 80081d2:	f00a fc42 	bl	8012a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80081d6:	bf00      	nop
 80081d8:	3778      	adds	r7, #120	; 0x78
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	40021000 	.word	0x40021000
 80081e4:	48000400 	.word	0x48000400
 80081e8:	20000780 	.word	0x20000780
 80081ec:	40020008 	.word	0x40020008

080081f0 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 80081f8:	f7ff fc9e 	bl	8007b38 <pl_callback_getSensor>
}
 80081fc:	bf00      	nop
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <cal_table>:

volatile char g_acc_flag;
volatile char g_MotorEnd_flag;


void cal_table(TRAPEZOID input,TARGET *target){
 8008204:	b084      	sub	sp, #16
 8008206:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	f107 0420 	add.w	r4, r7, #32
 8008212:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 8008216:	edd7 7a08 	vldr	s15, [r7, #32]
 800821a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800821e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008222:	f2c0 819d 	blt.w	8008560 <cal_table+0x35c>
	switch (g_acc_flag) {
 8008226:	4bcd      	ldr	r3, [pc, #820]	; (800855c <cal_table+0x358>)
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b06      	cmp	r3, #6
 800822e:	f200 833a 	bhi.w	80088a6 <cal_table+0x6a2>
 8008232:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <cal_table+0x34>)
 8008234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008238:	08008899 	.word	0x08008899
 800823c:	08008255 	.word	0x08008255
 8008240:	080083c7 	.word	0x080083c7
 8008244:	080084e5 	.word	0x080084e5
 8008248:	08008899 	.word	0x08008899
 800824c:	08008511 	.word	0x08008511
 8008250:	08008537 	.word	0x08008537
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 8008254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008256:	ed93 7a00 	vldr	s14, [r3]
 800825a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800825e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008266:	db0a      	blt.n	800827e <cal_table+0x7a>
				target->velocity = input.count_velocity;
 8008268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800826a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800826c:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 800826e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008270:	f04f 0200 	mov.w	r2, #0
 8008274:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 8008276:	4bb9      	ldr	r3, [pc, #740]	; (800855c <cal_table+0x358>)
 8008278:	2202      	movs	r2, #2
 800827a:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 800827c:	e313      	b.n	80088a6 <cal_table+0x6a2>
			else if((input.displacement <= (2*target->velocity*target->velocity
 800827e:	ed97 7a08 	vldr	s14, [r7, #32]
 8008282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008284:	edd3 7a00 	vldr	s15, [r3]
 8008288:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800828c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800828e:	edd3 7a00 	vldr	s15, [r3]
 8008292:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 8008296:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 800829a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800829e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80082a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 80082a6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80082aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80082ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 80082b2:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 80082b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80082ba:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80082be:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80082c2:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 80082c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80082ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ce:	d900      	bls.n	80082d2 <cal_table+0xce>
		break;
 80082d0:	e2e9      	b.n	80088a6 <cal_table+0x6a2>
				time_over=((2*target->velocity*target->velocity
 80082d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d4:	edd3 7a00 	vldr	s15, [r3]
 80082d8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80082dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082de:	edd3 7a00 	vldr	s15, [r3]
 80082e2:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 80082e6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80082ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80082ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80082f2:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 80082f6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80082fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80082fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008302:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 8008306:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800830a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800830e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008316:	edd7 7a08 	vldr	s15, [r7, #32]
 800831a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800831e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008320:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 8008324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008328:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 800832c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	4618      	mov	r0, r3
 8008332:	f7f8 f931 	bl	8000598 <__aeabi_f2d>
 8008336:	4604      	mov	r4, r0
 8008338:	460d      	mov	r5, r1
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	4618      	mov	r0, r3
 800833e:	f7f8 f92b 	bl	8000598 <__aeabi_f2d>
 8008342:	f04f 0200 	mov.w	r2, #0
 8008346:	f04f 0300 	mov.w	r3, #0
 800834a:	f7f8 f97d 	bl	8000648 <__aeabi_dmul>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4690      	mov	r8, r2
 8008354:	4699      	mov	r9, r3
 8008356:	edd7 7a01 	vldr	s15, [r7, #4]
 800835a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800835e:	ee17 0a90 	vmov	r0, s15
 8008362:	f7f8 f919 	bl	8000598 <__aeabi_f2d>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	4640      	mov	r0, r8
 800836c:	4649      	mov	r1, r9
 800836e:	f7f8 f96b 	bl	8000648 <__aeabi_dmul>
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	4620      	mov	r0, r4
 8008378:	4629      	mov	r1, r5
 800837a:	f7f7 ffad 	bl	80002d8 <__aeabi_dsub>
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	4610      	mov	r0, r2
 8008384:	4619      	mov	r1, r3
 8008386:	f7f8 fc37 	bl	8000bf8 <__aeabi_d2f>
 800838a:	4602      	mov	r2, r0
 800838c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800838e:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 8008390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008392:	ed93 7a00 	vldr	s14, [r3]
 8008396:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800839a:	edd7 7a01 	vldr	s15, [r7, #4]
 800839e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80083a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ac:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 80083b0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80083b4:	eef1 7a67 	vneg.f32	s15, s15
 80083b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ba:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 80083be:	4b67      	ldr	r3, [pc, #412]	; (800855c <cal_table+0x358>)
 80083c0:	2203      	movs	r2, #3
 80083c2:	701a      	strb	r2, [r3, #0]
		break;
 80083c4:	e26f      	b.n	80088a6 <cal_table+0x6a2>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 80083c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80083ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80083d0:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 80083d4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80083d8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80083dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 80083e0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80083e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80083e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80083ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80083f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80083f4:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80083f8:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80083fc:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 8008400:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008408:	d900      	bls.n	800840c <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 800840a:	e24c      	b.n	80088a6 <cal_table+0x6a2>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 800840c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008412:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008416:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800841a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 800841e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008422:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008426:	ee66 7a27 	vmul.f32	s15, s12, s15
 800842a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800842e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008432:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8008436:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800843a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 800843e:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8008442:	edd7 7a08 	vldr	s15, [r7, #32]
 8008446:	ee77 6a67 	vsub.f32	s13, s14, s15
 800844a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800844c:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8008450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008454:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8008458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	4618      	mov	r0, r3
 800845e:	f7f8 f89b 	bl	8000598 <__aeabi_f2d>
 8008462:	4604      	mov	r4, r0
 8008464:	460d      	mov	r5, r1
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	4618      	mov	r0, r3
 800846a:	f7f8 f895 	bl	8000598 <__aeabi_f2d>
 800846e:	f04f 0200 	mov.w	r2, #0
 8008472:	f04f 0300 	mov.w	r3, #0
 8008476:	f7f8 f8e7 	bl	8000648 <__aeabi_dmul>
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	4690      	mov	r8, r2
 8008480:	4699      	mov	r9, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7f8 f888 	bl	8000598 <__aeabi_f2d>
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	4640      	mov	r0, r8
 800848e:	4649      	mov	r1, r9
 8008490:	f7f8 f8da 	bl	8000648 <__aeabi_dmul>
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	4620      	mov	r0, r4
 800849a:	4629      	mov	r1, r5
 800849c:	f7f7 ff1c 	bl	80002d8 <__aeabi_dsub>
 80084a0:	4602      	mov	r2, r0
 80084a2:	460b      	mov	r3, r1
 80084a4:	4610      	mov	r0, r2
 80084a6:	4619      	mov	r1, r3
 80084a8:	f7f8 fba6 	bl	8000bf8 <__aeabi_d2f>
 80084ac:	4602      	mov	r2, r0
 80084ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b0:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 80084b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b4:	ed93 7a00 	vldr	s14, [r3]
 80084b8:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80084bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80084c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ca:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 80084ce:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80084d2:	eef1 7a67 	vneg.f32	s15, s15
 80084d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d8:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 80084dc:	4b1f      	ldr	r3, [pc, #124]	; (800855c <cal_table+0x358>)
 80084de:	2203      	movs	r2, #3
 80084e0:	701a      	strb	r2, [r3, #0]
		break;
 80084e2:	e1e0      	b.n	80088a6 <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 80084e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e6:	ed93 7a00 	vldr	s14, [r3]
 80084ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80084ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80084f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f6:	d900      	bls.n	80084fa <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80084f8:	e1d5      	b.n	80088a6 <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 80084fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fe:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8008500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008502:	f04f 0200 	mov.w	r2, #0
 8008506:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008508:	4b14      	ldr	r3, [pc, #80]	; (800855c <cal_table+0x358>)
 800850a:	2204      	movs	r2, #4
 800850c:	701a      	strb	r2, [r3, #0]
		break;
 800850e:	e1ca      	b.n	80088a6 <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 8008510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008512:	ed93 7a02 	vldr	s14, [r3, #8]
 8008516:	edd7 7a08 	vldr	s15, [r7, #32]
 800851a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800851e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008522:	da00      	bge.n	8008526 <cal_table+0x322>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008524:	e1bf      	b.n	80088a6 <cal_table+0x6a2>
			target->acceleration = 0;
 8008526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008528:	f04f 0200 	mov.w	r2, #0
 800852c:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800852e:	4b0b      	ldr	r3, [pc, #44]	; (800855c <cal_table+0x358>)
 8008530:	2204      	movs	r2, #4
 8008532:	701a      	strb	r2, [r3, #0]
		break;
 8008534:	e1b7      	b.n	80088a6 <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 8008536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008538:	ed93 7a02 	vldr	s14, [r3, #8]
 800853c:	edd7 7a08 	vldr	s15, [r7, #32]
 8008540:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008548:	da00      	bge.n	800854c <cal_table+0x348>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800854a:	e1ac      	b.n	80088a6 <cal_table+0x6a2>
			target->acceleration = 0;
 800854c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854e:	f04f 0200 	mov.w	r2, #0
 8008552:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008554:	4b01      	ldr	r3, [pc, #4]	; (800855c <cal_table+0x358>)
 8008556:	2204      	movs	r2, #4
 8008558:	701a      	strb	r2, [r3, #0]
		break;
 800855a:	e1a4      	b.n	80088a6 <cal_table+0x6a2>
 800855c:	200007e4 	.word	0x200007e4
	}
}else{
	switch (g_acc_flag) {
 8008560:	4bce      	ldr	r3, [pc, #824]	; (800889c <cal_table+0x698>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b06      	cmp	r3, #6
 8008568:	f200 819d 	bhi.w	80088a6 <cal_table+0x6a2>
 800856c:	a201      	add	r2, pc, #4	; (adr r2, 8008574 <cal_table+0x370>)
 800856e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008572:	bf00      	nop
 8008574:	080088a5 	.word	0x080088a5
 8008578:	08008591 	.word	0x08008591
 800857c:	08008703 	.word	0x08008703
 8008580:	08008819 	.word	0x08008819
 8008584:	08008845 	.word	0x08008845
 8008588:	0800884d 	.word	0x0800884d
 800858c:	08008873 	.word	0x08008873
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 8008590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008592:	ed93 7a00 	vldr	s14, [r3]
 8008596:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800859a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800859e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a2:	d80a      	bhi.n	80085ba <cal_table+0x3b6>
				target->velocity = input.count_velocity;
 80085a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a8:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 80085aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ac:	f04f 0200 	mov.w	r2, #0
 80085b0:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 80085b2:	4bba      	ldr	r3, [pc, #744]	; (800889c <cal_table+0x698>)
 80085b4:	2202      	movs	r2, #2
 80085b6:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 80085b8:	e175      	b.n	80088a6 <cal_table+0x6a2>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 80085ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80085be:	eeb1 7a67 	vneg.f32	s14, s15
 80085c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c4:	edd3 7a00 	vldr	s15, [r3]
 80085c8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80085cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ce:	edd3 7a00 	vldr	s15, [r3]
 80085d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 80085d6:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80085da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80085de:	ee66 7a27 	vmul.f32	s15, s12, s15
 80085e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 80085e6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80085ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80085ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80085f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 80085f6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80085fa:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80085fe:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008602:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8008606:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800860a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800860e:	d900      	bls.n	8008612 <cal_table+0x40e>
		break;
 8008610:	e149      	b.n	80088a6 <cal_table+0x6a2>
				time_over=(-(2*target->velocity*target->velocity
 8008612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008614:	edd3 7a00 	vldr	s15, [r3]
 8008618:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800861c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861e:	edd3 7a00 	vldr	s15, [r3]
 8008622:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 8008626:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800862a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800862e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008632:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 8008636:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800863a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800863e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008642:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 8008646:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 800864a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800864e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008652:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800865a:	edd7 7a08 	vldr	s15, [r7, #32]
 800865e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008664:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 8008668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800866c:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8008670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	4618      	mov	r0, r3
 8008676:	f7f7 ff8f 	bl	8000598 <__aeabi_f2d>
 800867a:	4604      	mov	r4, r0
 800867c:	460d      	mov	r5, r1
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	4618      	mov	r0, r3
 8008682:	f7f7 ff89 	bl	8000598 <__aeabi_f2d>
 8008686:	f04f 0200 	mov.w	r2, #0
 800868a:	f04f 0300 	mov.w	r3, #0
 800868e:	f7f7 ffdb 	bl	8000648 <__aeabi_dmul>
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	4690      	mov	r8, r2
 8008698:	4699      	mov	r9, r3
 800869a:	edd7 7a01 	vldr	s15, [r7, #4]
 800869e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80086a2:	ee17 0a90 	vmov	r0, s15
 80086a6:	f7f7 ff77 	bl	8000598 <__aeabi_f2d>
 80086aa:	4602      	mov	r2, r0
 80086ac:	460b      	mov	r3, r1
 80086ae:	4640      	mov	r0, r8
 80086b0:	4649      	mov	r1, r9
 80086b2:	f7f7 ffc9 	bl	8000648 <__aeabi_dmul>
 80086b6:	4602      	mov	r2, r0
 80086b8:	460b      	mov	r3, r1
 80086ba:	4620      	mov	r0, r4
 80086bc:	4629      	mov	r1, r5
 80086be:	f7f7 fe0d 	bl	80002dc <__adddf3>
 80086c2:	4602      	mov	r2, r0
 80086c4:	460b      	mov	r3, r1
 80086c6:	4610      	mov	r0, r2
 80086c8:	4619      	mov	r1, r3
 80086ca:	f7f8 fa95 	bl	8000bf8 <__aeabi_d2f>
 80086ce:	4602      	mov	r2, r0
 80086d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d2:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 80086d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d6:	ed93 7a00 	vldr	s14, [r3]
 80086da:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80086de:	edd7 7a01 	vldr	s15, [r7, #4]
 80086e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80086e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f0:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 80086f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f8:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 80086fa:	4b68      	ldr	r3, [pc, #416]	; (800889c <cal_table+0x698>)
 80086fc:	2203      	movs	r2, #3
 80086fe:	701a      	strb	r2, [r3, #0]
		break;
 8008700:	e0d1      	b.n	80088a6 <cal_table+0x6a2>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 8008702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008704:	ed93 7a02 	vldr	s14, [r3, #8]
 8008708:	edd7 7a08 	vldr	s15, [r7, #32]
 800870c:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8008710:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008714:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008718:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 800871c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008720:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008724:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008728:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800872c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008730:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008734:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008738:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 800873c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008744:	d900      	bls.n	8008748 <cal_table+0x544>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 8008746:	e0ae      	b.n	80088a6 <cal_table+0x6a2>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874a:	ed93 7a02 	vldr	s14, [r3, #8]
 800874e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008752:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008756:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 800875a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800875e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008762:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008766:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800876a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800876e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8008772:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008776:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 800877a:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 800877e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008782:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008788:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 800878c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008790:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8008794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	4618      	mov	r0, r3
 800879a:	f7f7 fefd 	bl	8000598 <__aeabi_f2d>
 800879e:	4604      	mov	r4, r0
 80087a0:	460d      	mov	r5, r1
 80087a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7f7 fef7 	bl	8000598 <__aeabi_f2d>
 80087aa:	f04f 0200 	mov.w	r2, #0
 80087ae:	f04f 0300 	mov.w	r3, #0
 80087b2:	f7f7 ff49 	bl	8000648 <__aeabi_dmul>
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	4690      	mov	r8, r2
 80087bc:	4699      	mov	r9, r3
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f7f7 feea 	bl	8000598 <__aeabi_f2d>
 80087c4:	4602      	mov	r2, r0
 80087c6:	460b      	mov	r3, r1
 80087c8:	4640      	mov	r0, r8
 80087ca:	4649      	mov	r1, r9
 80087cc:	f7f7 ff3c 	bl	8000648 <__aeabi_dmul>
 80087d0:	4602      	mov	r2, r0
 80087d2:	460b      	mov	r3, r1
 80087d4:	4620      	mov	r0, r4
 80087d6:	4629      	mov	r1, r5
 80087d8:	f7f7 fd80 	bl	80002dc <__adddf3>
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	4610      	mov	r0, r2
 80087e2:	4619      	mov	r1, r3
 80087e4:	f7f8 fa08 	bl	8000bf8 <__aeabi_d2f>
 80087e8:	4602      	mov	r2, r0
 80087ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ec:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 80087ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f0:	ed93 7a00 	vldr	s14, [r3]
 80087f4:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80087f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80087fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008806:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 800880a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800880c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880e:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8008810:	4b22      	ldr	r3, [pc, #136]	; (800889c <cal_table+0x698>)
 8008812:	2203      	movs	r2, #3
 8008814:	701a      	strb	r2, [r3, #0]
		break;
 8008816:	e046      	b.n	80088a6 <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8008818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881a:	ed93 7a00 	vldr	s14, [r3]
 800881e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008822:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800882a:	da00      	bge.n	800882e <cal_table+0x62a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800882c:	e03b      	b.n	80088a6 <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 800882e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008832:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8008834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008836:	f04f 0200 	mov.w	r2, #0
 800883a:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800883c:	4b17      	ldr	r3, [pc, #92]	; (800889c <cal_table+0x698>)
 800883e:	2204      	movs	r2, #4
 8008840:	701a      	strb	r2, [r3, #0]
		break;
 8008842:	e030      	b.n	80088a6 <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 8008844:	4b16      	ldr	r3, [pc, #88]	; (80088a0 <cal_table+0x69c>)
 8008846:	2201      	movs	r2, #1
 8008848:	701a      	strb	r2, [r3, #0]
		break;
 800884a:	e02c      	b.n	80088a6 <cal_table+0x6a2>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 800884c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008852:	edd7 7a08 	vldr	s15, [r7, #32]
 8008856:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800885a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800885e:	d900      	bls.n	8008862 <cal_table+0x65e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008860:	e021      	b.n	80088a6 <cal_table+0x6a2>
			target->acceleration = 0;
 8008862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008864:	f04f 0200 	mov.w	r2, #0
 8008868:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800886a:	4b0c      	ldr	r3, [pc, #48]	; (800889c <cal_table+0x698>)
 800886c:	2204      	movs	r2, #4
 800886e:	701a      	strb	r2, [r3, #0]
		break;
 8008870:	e019      	b.n	80088a6 <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 8008872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008874:	ed93 7a02 	vldr	s14, [r3, #8]
 8008878:	edd7 7a08 	vldr	s15, [r7, #32]
 800887c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008884:	d900      	bls.n	8008888 <cal_table+0x684>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008886:	e00e      	b.n	80088a6 <cal_table+0x6a2>
			target->acceleration = 0;
 8008888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888a:	f04f 0200 	mov.w	r2, #0
 800888e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008890:	4b02      	ldr	r3, [pc, #8]	; (800889c <cal_table+0x698>)
 8008892:	2204      	movs	r2, #4
 8008894:	701a      	strb	r2, [r3, #0]
		break;
 8008896:	e006      	b.n	80088a6 <cal_table+0x6a2>
		break;
 8008898:	bf00      	nop
 800889a:	e004      	b.n	80088a6 <cal_table+0x6a2>
 800889c:	200007e4 	.word	0x200007e4
 80088a0:	200007e5 	.word	0x200007e5
		break;
 80088a4:	bf00      	nop
	}

}

}
 80088a6:	bf00      	nop
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 80088b0:	b004      	add	sp, #16
 80088b2:	4770      	bx	lr
 80088b4:	0000      	movs	r0, r0
	...

080088b8 <cal_mollifier_table>:





void cal_mollifier_table(MOLLIFIER input,TARGET *target){
 80088b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088bc:	b08c      	sub	sp, #48	; 0x30
 80088be:	af00      	add	r7, sp, #0
 80088c0:	eef0 6a40 	vmov.f32	s13, s0
 80088c4:	eeb0 7a60 	vmov.f32	s14, s1
 80088c8:	eef0 7a41 	vmov.f32	s15, s2
 80088cc:	6138      	str	r0, [r7, #16]
 80088ce:	edc7 6a05 	vstr	s13, [r7, #20]
 80088d2:	ed87 7a06 	vstr	s14, [r7, #24]
 80088d6:	edc7 7a07 	vstr	s15, [r7, #28]

float mollifier_T;
float old_velocity;
float time_delay=15;
 80088da:	4be7      	ldr	r3, [pc, #924]	; (8008c78 <cal_mollifier_table+0x3c0>)
 80088dc:	62fb      	str	r3, [r7, #44]	; 0x2c
float time_delay2=-15;
 80088de:	4be7      	ldr	r3, [pc, #924]	; (8008c7c <cal_mollifier_table+0x3c4>)
 80088e0:	62bb      	str	r3, [r7, #40]	; 0x28
	mollifier_timer+=INTERRUPT_TIME;
 80088e2:	4be7      	ldr	r3, [pc, #924]	; (8008c80 <cal_mollifier_table+0x3c8>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7f7 fe56 	bl	8000598 <__aeabi_f2d>
 80088ec:	a3da      	add	r3, pc, #872	; (adr r3, 8008c58 <cal_mollifier_table+0x3a0>)
 80088ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f2:	f7f7 fcf3 	bl	80002dc <__adddf3>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4610      	mov	r0, r2
 80088fc:	4619      	mov	r1, r3
 80088fe:	f7f8 f97b 	bl	8000bf8 <__aeabi_d2f>
 8008902:	4603      	mov	r3, r0
 8008904:	4ade      	ldr	r2, [pc, #888]	; (8008c80 <cal_mollifier_table+0x3c8>)
 8008906:	6013      	str	r3, [r2, #0]
		mollifier_T=2*fabs(input.displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input.max_turning_velocity;
 8008908:	edd7 7a05 	vldr	s15, [r7, #20]
 800890c:	eef0 7ae7 	vabs.f32	s15, s15
 8008910:	ee17 0a90 	vmov	r0, s15
 8008914:	f7f7 fe40 	bl	8000598 <__aeabi_f2d>
 8008918:	4602      	mov	r2, r0
 800891a:	460b      	mov	r3, r1
 800891c:	f7f7 fcde 	bl	80002dc <__adddf3>
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	4610      	mov	r0, r2
 8008926:	4619      	mov	r1, r3
 8008928:	a3cd      	add	r3, pc, #820	; (adr r3, 8008c60 <cal_mollifier_table+0x3a8>)
 800892a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892e:	f7f7 ffb5 	bl	800089c <__aeabi_ddiv>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	4610      	mov	r0, r2
 8008938:	4619      	mov	r1, r3
 800893a:	a3cb      	add	r3, pc, #812	; (adr r3, 8008c68 <cal_mollifier_table+0x3b0>)
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f7f7 fe82 	bl	8000648 <__aeabi_dmul>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4614      	mov	r4, r2
 800894a:	461d      	mov	r5, r3
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	4618      	mov	r0, r3
 8008950:	f7f7 fe22 	bl	8000598 <__aeabi_f2d>
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	4620      	mov	r0, r4
 800895a:	4629      	mov	r1, r5
 800895c:	f7f7 ff9e 	bl	800089c <__aeabi_ddiv>
 8008960:	4602      	mov	r2, r0
 8008962:	460b      	mov	r3, r1
 8008964:	4610      	mov	r0, r2
 8008966:	4619      	mov	r1, r3
 8008968:	f7f8 f946 	bl	8000bf8 <__aeabi_d2f>
 800896c:	4603      	mov	r3, r0
 800896e:	627b      	str	r3, [r7, #36]	; 0x24
		if (mollifier_timer>-mollifier_T/2 && mollifier_timer<mollifier_T/2){
 8008970:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008974:	eef1 7a67 	vneg.f32	s15, s15
 8008978:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800897c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008980:	4bbf      	ldr	r3, [pc, #764]	; (8008c80 <cal_mollifier_table+0x3c8>)
 8008982:	edd3 7a00 	vldr	s15, [r3]
 8008986:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800898a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800898e:	f140 8698 	bpl.w	80096c2 <cal_mollifier_table+0xe0a>
 8008992:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008996:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800899a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800899e:	4bb8      	ldr	r3, [pc, #736]	; (8008c80 <cal_mollifier_table+0x3c8>)
 80089a0:	edd3 7a00 	vldr	s15, [r3]
 80089a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ac:	f340 8689 	ble.w	80096c2 <cal_mollifier_table+0xe0a>
			old_velocity=target->velocity;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	623b      	str	r3, [r7, #32]
			target->velocity = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-mollifier_timer*mollifier_timer));
 80089b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80089ba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80089be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80089c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ca:	ee17 0a90 	vmov	r0, s15
 80089ce:	f7f7 fde3 	bl	8000598 <__aeabi_f2d>
 80089d2:	a3a3      	add	r3, pc, #652	; (adr r3, 8008c60 <cal_mollifier_table+0x3a8>)
 80089d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d8:	f7f7 ff60 	bl	800089c <__aeabi_ddiv>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4614      	mov	r4, r2
 80089e2:	461d      	mov	r5, r3
 80089e4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80089e8:	eeb1 7a67 	vneg.f32	s14, s15
 80089ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80089f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80089f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80089fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008a04:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8008a08:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8008a0c:	4b9c      	ldr	r3, [pc, #624]	; (8008c80 <cal_mollifier_table+0x3c8>)
 8008a0e:	ed93 6a00 	vldr	s12, [r3]
 8008a12:	4b9b      	ldr	r3, [pc, #620]	; (8008c80 <cal_mollifier_table+0x3c8>)
 8008a14:	edd3 7a00 	vldr	s15, [r3]
 8008a18:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008a1c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008a20:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008a24:	ee16 0a90 	vmov	r0, s13
 8008a28:	f7f7 fdb6 	bl	8000598 <__aeabi_f2d>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	ec43 2b10 	vmov	d0, r2, r3
 8008a34:	f011 fb24 	bl	801a080 <exp>
 8008a38:	ec53 2b10 	vmov	r2, r3, d0
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	4629      	mov	r1, r5
 8008a40:	f7f7 fe02 	bl	8000648 <__aeabi_dmul>
 8008a44:	4602      	mov	r2, r0
 8008a46:	460b      	mov	r3, r1
 8008a48:	4610      	mov	r0, r2
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	f7f8 f8d4 	bl	8000bf8 <__aeabi_d2f>
 8008a50:	4602      	mov	r2, r0
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	601a      	str	r2, [r3, #0]
			//if(mollifier_timer<0){
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008a56:	4b8a      	ldr	r3, [pc, #552]	; (8008c80 <cal_mollifier_table+0x3c8>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7f7 fd9c 	bl	8000598 <__aeabi_f2d>
 8008a60:	4604      	mov	r4, r0
 8008a62:	460d      	mov	r5, r1
 8008a64:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a68:	eef1 7a67 	vneg.f32	s15, s15
 8008a6c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008a70:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008a74:	ee16 0a90 	vmov	r0, s13
 8008a78:	f7f7 fd8e 	bl	8000598 <__aeabi_f2d>
 8008a7c:	a37c      	add	r3, pc, #496	; (adr r3, 8008c70 <cal_mollifier_table+0x3b8>)
 8008a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a82:	f7f7 ff0b 	bl	800089c <__aeabi_ddiv>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	4690      	mov	r8, r2
 8008a8c:	4699      	mov	r9, r3
 8008a8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a90:	f7f7 fd82 	bl	8000598 <__aeabi_f2d>
 8008a94:	a370      	add	r3, pc, #448	; (adr r3, 8008c58 <cal_mollifier_table+0x3a0>)
 8008a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9a:	f7f7 fdd5 	bl	8000648 <__aeabi_dmul>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4640      	mov	r0, r8
 8008aa4:	4649      	mov	r1, r9
 8008aa6:	f7f7 fc19 	bl	80002dc <__adddf3>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4620      	mov	r0, r4
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	f7f8 f83b 	bl	8000b2c <__aeabi_dcmplt>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 8163 	beq.w	8008d84 <cal_mollifier_table+0x4cc>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(-mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)));
 8008abe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008ac2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aca:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ad2:	ee17 0a90 	vmov	r0, s15
 8008ad6:	f7f7 fd5f 	bl	8000598 <__aeabi_f2d>
 8008ada:	a361      	add	r3, pc, #388	; (adr r3, 8008c60 <cal_mollifier_table+0x3a8>)
 8008adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae0:	f7f7 fedc 	bl	800089c <__aeabi_ddiv>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008aec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008af0:	eeb1 7a67 	vneg.f32	s14, s15
 8008af4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008afc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008b00:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b04:	ee16 0a90 	vmov	r0, s13
 8008b08:	f7f7 fd46 	bl	8000598 <__aeabi_f2d>
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	460d      	mov	r5, r1
 8008b10:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b14:	eef1 7a67 	vneg.f32	s15, s15
 8008b18:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008b1c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b20:	ee16 0a90 	vmov	r0, s13
 8008b24:	f7f7 fd38 	bl	8000598 <__aeabi_f2d>
 8008b28:	a351      	add	r3, pc, #324	; (adr r3, 8008c70 <cal_mollifier_table+0x3b8>)
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	f7f7 feb5 	bl	800089c <__aeabi_ddiv>
 8008b32:	4602      	mov	r2, r0
 8008b34:	460b      	mov	r3, r1
 8008b36:	4620      	mov	r0, r4
 8008b38:	4629      	mov	r1, r5
 8008b3a:	f7f7 fd85 	bl	8000648 <__aeabi_dmul>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	4690      	mov	r8, r2
 8008b44:	4699      	mov	r9, r3
 8008b46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008b4e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008b52:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b56:	ee16 0a90 	vmov	r0, s13
 8008b5a:	f7f7 fd1d 	bl	8000598 <__aeabi_f2d>
 8008b5e:	4604      	mov	r4, r0
 8008b60:	460d      	mov	r5, r1
 8008b62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b66:	eef1 7a67 	vneg.f32	s15, s15
 8008b6a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008b6e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b72:	ee16 0a90 	vmov	r0, s13
 8008b76:	f7f7 fd0f 	bl	8000598 <__aeabi_f2d>
 8008b7a:	a33d      	add	r3, pc, #244	; (adr r3, 8008c70 <cal_mollifier_table+0x3b8>)
 8008b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b80:	f7f7 fe8c 	bl	800089c <__aeabi_ddiv>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	4692      	mov	sl, r2
 8008b8a:	469b      	mov	fp, r3
 8008b8c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b90:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008b94:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b98:	ee16 0a90 	vmov	r0, s13
 8008b9c:	f7f7 fcfc 	bl	8000598 <__aeabi_f2d>
 8008ba0:	a333      	add	r3, pc, #204	; (adr r3, 8008c70 <cal_mollifier_table+0x3b8>)
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	f7f7 fe79 	bl	800089c <__aeabi_ddiv>
 8008baa:	4602      	mov	r2, r0
 8008bac:	460b      	mov	r3, r1
 8008bae:	4650      	mov	r0, sl
 8008bb0:	4659      	mov	r1, fp
 8008bb2:	f7f7 fd49 	bl	8000648 <__aeabi_dmul>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	4620      	mov	r0, r4
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	f7f7 fb8d 	bl	80002dc <__adddf3>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4640      	mov	r0, r8
 8008bc8:	4649      	mov	r1, r9
 8008bca:	f7f7 fe67 	bl	800089c <__aeabi_ddiv>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	4690      	mov	r8, r2
 8008bd4:	4699      	mov	r9, r3
 8008bd6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008bda:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008bde:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008be2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008be6:	ee16 0a90 	vmov	r0, s13
 8008bea:	f7f7 fcd5 	bl	8000598 <__aeabi_f2d>
 8008bee:	4604      	mov	r4, r0
 8008bf0:	460d      	mov	r5, r1
 8008bf2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008bf6:	eef1 7a67 	vneg.f32	s15, s15
 8008bfa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008bfe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c02:	ee16 0a90 	vmov	r0, s13
 8008c06:	f7f7 fcc7 	bl	8000598 <__aeabi_f2d>
 8008c0a:	a319      	add	r3, pc, #100	; (adr r3, 8008c70 <cal_mollifier_table+0x3b8>)
 8008c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c10:	f7f7 fe44 	bl	800089c <__aeabi_ddiv>
 8008c14:	4602      	mov	r2, r0
 8008c16:	460b      	mov	r3, r1
 8008c18:	4692      	mov	sl, r2
 8008c1a:	469b      	mov	fp, r3
 8008c1c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c20:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c24:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c28:	ee16 0a90 	vmov	r0, s13
 8008c2c:	f7f7 fcb4 	bl	8000598 <__aeabi_f2d>
 8008c30:	a30f      	add	r3, pc, #60	; (adr r3, 8008c70 <cal_mollifier_table+0x3b8>)
 8008c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c36:	f7f7 fe31 	bl	800089c <__aeabi_ddiv>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	4650      	mov	r0, sl
 8008c40:	4659      	mov	r1, fp
 8008c42:	f7f7 fd01 	bl	8000648 <__aeabi_dmul>
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	4629      	mov	r1, r5
 8008c4e:	f7f7 fb45 	bl	80002dc <__adddf3>
 8008c52:	4602      	mov	r2, r0
 8008c54:	e016      	b.n	8008c84 <cal_mollifier_table+0x3cc>
 8008c56:	bf00      	nop
 8008c58:	d2f1a9fc 	.word	0xd2f1a9fc
 8008c5c:	3f50624d 	.word	0x3f50624d
 8008c60:	f9db22d1 	.word	0xf9db22d1
 8008c64:	3fdc6a7e 	.word	0x3fdc6a7e
 8008c68:	362cef38 	.word	0x362cef38
 8008c6c:	3fd78b56 	.word	0x3fd78b56
 8008c70:	04189375 	.word	0x04189375
 8008c74:	3ff50e56 	.word	0x3ff50e56
 8008c78:	41700000 	.word	0x41700000
 8008c7c:	c1700000 	.word	0xc1700000
 8008c80:	200007e0 	.word	0x200007e0
 8008c84:	460b      	mov	r3, r1
 8008c86:	4640      	mov	r0, r8
 8008c88:	4649      	mov	r1, r9
 8008c8a:	f7f7 fe07 	bl	800089c <__aeabi_ddiv>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c96:	f7f7 fcd7 	bl	8000648 <__aeabi_dmul>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4692      	mov	sl, r2
 8008ca0:	469b      	mov	fp, r3
 8008ca2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ca6:	eeb1 7a67 	vneg.f32	s14, s15
 8008caa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cb2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008cb6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008cba:	ee16 0a90 	vmov	r0, s13
 8008cbe:	f7f7 fc6b 	bl	8000598 <__aeabi_f2d>
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	460d      	mov	r5, r1
 8008cc6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008cca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008cce:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008cd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008cd6:	ee16 0a90 	vmov	r0, s13
 8008cda:	f7f7 fc5d 	bl	8000598 <__aeabi_f2d>
 8008cde:	4680      	mov	r8, r0
 8008ce0:	4689      	mov	r9, r1
 8008ce2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ce6:	eef1 7a67 	vneg.f32	s15, s15
 8008cea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008cee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008cf2:	ee16 0a90 	vmov	r0, s13
 8008cf6:	f7f7 fc4f 	bl	8000598 <__aeabi_f2d>
 8008cfa:	a3e1      	add	r3, pc, #900	; (adr r3, 8009080 <cal_mollifier_table+0x7c8>)
 8008cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d00:	f7f7 fdcc 	bl	800089c <__aeabi_ddiv>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008d0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d10:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008d14:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d18:	ee16 0a90 	vmov	r0, s13
 8008d1c:	f7f7 fc3c 	bl	8000598 <__aeabi_f2d>
 8008d20:	a3d7      	add	r3, pc, #860	; (adr r3, 8009080 <cal_mollifier_table+0x7c8>)
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	f7f7 fdb9 	bl	800089c <__aeabi_ddiv>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d32:	f7f7 fc89 	bl	8000648 <__aeabi_dmul>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4640      	mov	r0, r8
 8008d3c:	4649      	mov	r1, r9
 8008d3e:	f7f7 facd 	bl	80002dc <__adddf3>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4620      	mov	r0, r4
 8008d48:	4629      	mov	r1, r5
 8008d4a:	f7f7 fda7 	bl	800089c <__aeabi_ddiv>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	ec43 2b17 	vmov	d7, r2, r3
 8008d56:	eeb0 0a47 	vmov.f32	s0, s14
 8008d5a:	eef0 0a67 	vmov.f32	s1, s15
 8008d5e:	f011 f98f 	bl	801a080 <exp>
 8008d62:	ec53 2b10 	vmov	r2, r3, d0
 8008d66:	4650      	mov	r0, sl
 8008d68:	4659      	mov	r1, fp
 8008d6a:	f7f7 fc6d 	bl	8000648 <__aeabi_dmul>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	460b      	mov	r3, r1
 8008d72:	4610      	mov	r0, r2
 8008d74:	4619      	mov	r1, r3
 8008d76:	f7f7 ff3f 	bl	8000bf8 <__aeabi_d2f>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008d80:	f000 bcb4 	b.w	80096ec <cal_mollifier_table+0xe34>
			}else if(mollifier_timer<0){
 8008d84:	4bc0      	ldr	r3, [pc, #768]	; (8009088 <cal_mollifier_table+0x7d0>)
 8008d86:	edd3 7a00 	vldr	s15, [r3]
 8008d8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d92:	f140 817b 	bpl.w	800908c <cal_mollifier_table+0x7d4>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8008d96:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008d9a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008da2:	edd7 7a05 	vldr	s15, [r7, #20]
 8008da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008daa:	ee17 0a90 	vmov	r0, s15
 8008dae:	f7f7 fbf3 	bl	8000598 <__aeabi_f2d>
 8008db2:	a3af      	add	r3, pc, #700	; (adr r3, 8009070 <cal_mollifier_table+0x7b8>)
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	f7f7 fd70 	bl	800089c <__aeabi_ddiv>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008dc4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008dc8:	eeb1 7a67 	vneg.f32	s14, s15
 8008dcc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008dd8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ddc:	ee16 0a90 	vmov	r0, s13
 8008de0:	f7f7 fbda 	bl	8000598 <__aeabi_f2d>
 8008de4:	4604      	mov	r4, r0
 8008de6:	460d      	mov	r5, r1
 8008de8:	4ba7      	ldr	r3, [pc, #668]	; (8009088 <cal_mollifier_table+0x7d0>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7f7 fbd3 	bl	8000598 <__aeabi_f2d>
 8008df2:	4680      	mov	r8, r0
 8008df4:	4689      	mov	r9, r1
 8008df6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008df8:	f7f7 fbce 	bl	8000598 <__aeabi_f2d>
 8008dfc:	a39e      	add	r3, pc, #632	; (adr r3, 8009078 <cal_mollifier_table+0x7c0>)
 8008dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e02:	f7f7 fc21 	bl	8000648 <__aeabi_dmul>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4640      	mov	r0, r8
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	f7f7 fa63 	bl	80002d8 <__aeabi_dsub>
 8008e12:	4602      	mov	r2, r0
 8008e14:	460b      	mov	r3, r1
 8008e16:	4620      	mov	r0, r4
 8008e18:	4629      	mov	r1, r5
 8008e1a:	f7f7 fc15 	bl	8000648 <__aeabi_dmul>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	460b      	mov	r3, r1
 8008e22:	e9c7 2300 	strd	r2, r3, [r7]
 8008e26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e2a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008e2e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008e32:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e36:	ee16 0a90 	vmov	r0, s13
 8008e3a:	f7f7 fbad 	bl	8000598 <__aeabi_f2d>
 8008e3e:	4680      	mov	r8, r0
 8008e40:	4689      	mov	r9, r1
 8008e42:	4b91      	ldr	r3, [pc, #580]	; (8009088 <cal_mollifier_table+0x7d0>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7f7 fba6 	bl	8000598 <__aeabi_f2d>
 8008e4c:	4604      	mov	r4, r0
 8008e4e:	460d      	mov	r5, r1
 8008e50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e52:	f7f7 fba1 	bl	8000598 <__aeabi_f2d>
 8008e56:	a388      	add	r3, pc, #544	; (adr r3, 8009078 <cal_mollifier_table+0x7c0>)
 8008e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5c:	f7f7 fbf4 	bl	8000648 <__aeabi_dmul>
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	4620      	mov	r0, r4
 8008e66:	4629      	mov	r1, r5
 8008e68:	f7f7 fa36 	bl	80002d8 <__aeabi_dsub>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4692      	mov	sl, r2
 8008e72:	469b      	mov	fp, r3
 8008e74:	4b84      	ldr	r3, [pc, #528]	; (8009088 <cal_mollifier_table+0x7d0>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7f7 fb8d 	bl	8000598 <__aeabi_f2d>
 8008e7e:	4604      	mov	r4, r0
 8008e80:	460d      	mov	r5, r1
 8008e82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e84:	f7f7 fb88 	bl	8000598 <__aeabi_f2d>
 8008e88:	a37b      	add	r3, pc, #492	; (adr r3, 8009078 <cal_mollifier_table+0x7c0>)
 8008e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8e:	f7f7 fbdb 	bl	8000648 <__aeabi_dmul>
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	4620      	mov	r0, r4
 8008e98:	4629      	mov	r1, r5
 8008e9a:	f7f7 fa1d 	bl	80002d8 <__aeabi_dsub>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	4650      	mov	r0, sl
 8008ea4:	4659      	mov	r1, fp
 8008ea6:	f7f7 fbcf 	bl	8000648 <__aeabi_dmul>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	4640      	mov	r0, r8
 8008eb0:	4649      	mov	r1, r9
 8008eb2:	f7f7 fa11 	bl	80002d8 <__aeabi_dsub>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	460b      	mov	r3, r1
 8008eba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ebe:	f7f7 fced 	bl	800089c <__aeabi_ddiv>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	e9c7 2300 	strd	r2, r3, [r7]
 8008eca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ece:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008ed2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008ed6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008eda:	ee16 0a90 	vmov	r0, s13
 8008ede:	f7f7 fb5b 	bl	8000598 <__aeabi_f2d>
 8008ee2:	4680      	mov	r8, r0
 8008ee4:	4689      	mov	r9, r1
 8008ee6:	4b68      	ldr	r3, [pc, #416]	; (8009088 <cal_mollifier_table+0x7d0>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7f7 fb54 	bl	8000598 <__aeabi_f2d>
 8008ef0:	4604      	mov	r4, r0
 8008ef2:	460d      	mov	r5, r1
 8008ef4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ef6:	f7f7 fb4f 	bl	8000598 <__aeabi_f2d>
 8008efa:	a35f      	add	r3, pc, #380	; (adr r3, 8009078 <cal_mollifier_table+0x7c0>)
 8008efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f00:	f7f7 fba2 	bl	8000648 <__aeabi_dmul>
 8008f04:	4602      	mov	r2, r0
 8008f06:	460b      	mov	r3, r1
 8008f08:	4620      	mov	r0, r4
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	f7f7 f9e4 	bl	80002d8 <__aeabi_dsub>
 8008f10:	4602      	mov	r2, r0
 8008f12:	460b      	mov	r3, r1
 8008f14:	4692      	mov	sl, r2
 8008f16:	469b      	mov	fp, r3
 8008f18:	4b5b      	ldr	r3, [pc, #364]	; (8009088 <cal_mollifier_table+0x7d0>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7f7 fb3b 	bl	8000598 <__aeabi_f2d>
 8008f22:	4604      	mov	r4, r0
 8008f24:	460d      	mov	r5, r1
 8008f26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f28:	f7f7 fb36 	bl	8000598 <__aeabi_f2d>
 8008f2c:	a352      	add	r3, pc, #328	; (adr r3, 8009078 <cal_mollifier_table+0x7c0>)
 8008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f32:	f7f7 fb89 	bl	8000648 <__aeabi_dmul>
 8008f36:	4602      	mov	r2, r0
 8008f38:	460b      	mov	r3, r1
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	f7f7 f9cb 	bl	80002d8 <__aeabi_dsub>
 8008f42:	4602      	mov	r2, r0
 8008f44:	460b      	mov	r3, r1
 8008f46:	4650      	mov	r0, sl
 8008f48:	4659      	mov	r1, fp
 8008f4a:	f7f7 fb7d 	bl	8000648 <__aeabi_dmul>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	4640      	mov	r0, r8
 8008f54:	4649      	mov	r1, r9
 8008f56:	f7f7 f9bf 	bl	80002d8 <__aeabi_dsub>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f62:	f7f7 fc9b 	bl	800089c <__aeabi_ddiv>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f6e:	f7f7 fb6b 	bl	8000648 <__aeabi_dmul>
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008f7a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f7e:	eeb1 7a67 	vneg.f32	s14, s15
 8008f82:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f8a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008f8e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f92:	ee16 0a90 	vmov	r0, s13
 8008f96:	f7f7 faff 	bl	8000598 <__aeabi_f2d>
 8008f9a:	4680      	mov	r8, r0
 8008f9c:	4689      	mov	r9, r1
 8008f9e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008fa2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008fa6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008faa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008fae:	ee16 0a90 	vmov	r0, s13
 8008fb2:	f7f7 faf1 	bl	8000598 <__aeabi_f2d>
 8008fb6:	4682      	mov	sl, r0
 8008fb8:	468b      	mov	fp, r1
 8008fba:	4b33      	ldr	r3, [pc, #204]	; (8009088 <cal_mollifier_table+0x7d0>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7f7 faea 	bl	8000598 <__aeabi_f2d>
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	460d      	mov	r5, r1
 8008fc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fca:	f7f7 fae5 	bl	8000598 <__aeabi_f2d>
 8008fce:	a32a      	add	r3, pc, #168	; (adr r3, 8009078 <cal_mollifier_table+0x7c0>)
 8008fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd4:	f7f7 fb38 	bl	8000648 <__aeabi_dmul>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4620      	mov	r0, r4
 8008fde:	4629      	mov	r1, r5
 8008fe0:	f7f7 f97a 	bl	80002d8 <__aeabi_dsub>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	e9c7 2300 	strd	r2, r3, [r7]
 8008fec:	4b26      	ldr	r3, [pc, #152]	; (8009088 <cal_mollifier_table+0x7d0>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7f7 fad1 	bl	8000598 <__aeabi_f2d>
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	460d      	mov	r5, r1
 8008ffa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ffc:	f7f7 facc 	bl	8000598 <__aeabi_f2d>
 8009000:	a31d      	add	r3, pc, #116	; (adr r3, 8009078 <cal_mollifier_table+0x7c0>)
 8009002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009006:	f7f7 fb1f 	bl	8000648 <__aeabi_dmul>
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	4620      	mov	r0, r4
 8009010:	4629      	mov	r1, r5
 8009012:	f7f7 f961 	bl	80002d8 <__aeabi_dsub>
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800901e:	f7f7 fb13 	bl	8000648 <__aeabi_dmul>
 8009022:	4602      	mov	r2, r0
 8009024:	460b      	mov	r3, r1
 8009026:	4650      	mov	r0, sl
 8009028:	4659      	mov	r1, fp
 800902a:	f7f7 f955 	bl	80002d8 <__aeabi_dsub>
 800902e:	4602      	mov	r2, r0
 8009030:	460b      	mov	r3, r1
 8009032:	4640      	mov	r0, r8
 8009034:	4649      	mov	r1, r9
 8009036:	f7f7 fc31 	bl	800089c <__aeabi_ddiv>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	ec43 2b17 	vmov	d7, r2, r3
 8009042:	eeb0 0a47 	vmov.f32	s0, s14
 8009046:	eef0 0a67 	vmov.f32	s1, s15
 800904a:	f011 f819 	bl	801a080 <exp>
 800904e:	ec53 2b10 	vmov	r2, r3, d0
 8009052:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009056:	f7f7 faf7 	bl	8000648 <__aeabi_dmul>
 800905a:	4602      	mov	r2, r0
 800905c:	460b      	mov	r3, r1
 800905e:	4610      	mov	r0, r2
 8009060:	4619      	mov	r1, r3
 8009062:	f7f7 fdc9 	bl	8000bf8 <__aeabi_d2f>
 8009066:	4602      	mov	r2, r0
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 800906c:	e33e      	b.n	80096ec <cal_mollifier_table+0xe34>
 800906e:	bf00      	nop
 8009070:	f9db22d1 	.word	0xf9db22d1
 8009074:	3fdc6a7e 	.word	0x3fdc6a7e
 8009078:	d2f1a9fc 	.word	0xd2f1a9fc
 800907c:	3f50624d 	.word	0x3f50624d
 8009080:	04189375 	.word	0x04189375
 8009084:	3ff50e56 	.word	0x3ff50e56
 8009088:	200007e0 	.word	0x200007e0
			}else if(mollifier_timer<mollifier_T/2/1.316+time_delay2*INTERRUPT_TIME){
 800908c:	4bd4      	ldr	r3, [pc, #848]	; (80093e0 <cal_mollifier_table+0xb28>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4618      	mov	r0, r3
 8009092:	f7f7 fa81 	bl	8000598 <__aeabi_f2d>
 8009096:	4604      	mov	r4, r0
 8009098:	460d      	mov	r5, r1
 800909a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800909e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80090a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80090a6:	ee16 0a90 	vmov	r0, s13
 80090aa:	f7f7 fa75 	bl	8000598 <__aeabi_f2d>
 80090ae:	a3c6      	add	r3, pc, #792	; (adr r3, 80093c8 <cal_mollifier_table+0xb10>)
 80090b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b4:	f7f7 fbf2 	bl	800089c <__aeabi_ddiv>
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	4690      	mov	r8, r2
 80090be:	4699      	mov	r9, r3
 80090c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090c2:	f7f7 fa69 	bl	8000598 <__aeabi_f2d>
 80090c6:	a3c2      	add	r3, pc, #776	; (adr r3, 80093d0 <cal_mollifier_table+0xb18>)
 80090c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090cc:	f7f7 fabc 	bl	8000648 <__aeabi_dmul>
 80090d0:	4602      	mov	r2, r0
 80090d2:	460b      	mov	r3, r1
 80090d4:	4640      	mov	r0, r8
 80090d6:	4649      	mov	r1, r9
 80090d8:	f7f7 f900 	bl	80002dc <__adddf3>
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	4620      	mov	r0, r4
 80090e2:	4629      	mov	r1, r5
 80090e4:	f7f7 fd22 	bl	8000b2c <__aeabi_dcmplt>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f000 817a 	beq.w	80093e4 <cal_mollifier_table+0xb2c>
				//target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay2)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)));
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 80090f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80090f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80090f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8009100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009104:	ee17 0a90 	vmov	r0, s15
 8009108:	f7f7 fa46 	bl	8000598 <__aeabi_f2d>
 800910c:	a3b2      	add	r3, pc, #712	; (adr r3, 80093d8 <cal_mollifier_table+0xb20>)
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f7f7 fbc3 	bl	800089c <__aeabi_ddiv>
 8009116:	4602      	mov	r2, r0
 8009118:	460b      	mov	r3, r1
 800911a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800911e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009122:	eeb1 7a67 	vneg.f32	s14, s15
 8009126:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800912a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800912e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009132:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009136:	ee16 0a90 	vmov	r0, s13
 800913a:	f7f7 fa2d 	bl	8000598 <__aeabi_f2d>
 800913e:	4604      	mov	r4, r0
 8009140:	460d      	mov	r5, r1
 8009142:	4ba7      	ldr	r3, [pc, #668]	; (80093e0 <cal_mollifier_table+0xb28>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4618      	mov	r0, r3
 8009148:	f7f7 fa26 	bl	8000598 <__aeabi_f2d>
 800914c:	4680      	mov	r8, r0
 800914e:	4689      	mov	r9, r1
 8009150:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009152:	f7f7 fa21 	bl	8000598 <__aeabi_f2d>
 8009156:	a39e      	add	r3, pc, #632	; (adr r3, 80093d0 <cal_mollifier_table+0xb18>)
 8009158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915c:	f7f7 fa74 	bl	8000648 <__aeabi_dmul>
 8009160:	4602      	mov	r2, r0
 8009162:	460b      	mov	r3, r1
 8009164:	4640      	mov	r0, r8
 8009166:	4649      	mov	r1, r9
 8009168:	f7f7 f8b6 	bl	80002d8 <__aeabi_dsub>
 800916c:	4602      	mov	r2, r0
 800916e:	460b      	mov	r3, r1
 8009170:	4620      	mov	r0, r4
 8009172:	4629      	mov	r1, r5
 8009174:	f7f7 fa68 	bl	8000648 <__aeabi_dmul>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	e9c7 2300 	strd	r2, r3, [r7]
 8009180:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009184:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009188:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800918c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009190:	ee16 0a90 	vmov	r0, s13
 8009194:	f7f7 fa00 	bl	8000598 <__aeabi_f2d>
 8009198:	4680      	mov	r8, r0
 800919a:	4689      	mov	r9, r1
 800919c:	4b90      	ldr	r3, [pc, #576]	; (80093e0 <cal_mollifier_table+0xb28>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7f7 f9f9 	bl	8000598 <__aeabi_f2d>
 80091a6:	4604      	mov	r4, r0
 80091a8:	460d      	mov	r5, r1
 80091aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091ac:	f7f7 f9f4 	bl	8000598 <__aeabi_f2d>
 80091b0:	a387      	add	r3, pc, #540	; (adr r3, 80093d0 <cal_mollifier_table+0xb18>)
 80091b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b6:	f7f7 fa47 	bl	8000648 <__aeabi_dmul>
 80091ba:	4602      	mov	r2, r0
 80091bc:	460b      	mov	r3, r1
 80091be:	4620      	mov	r0, r4
 80091c0:	4629      	mov	r1, r5
 80091c2:	f7f7 f889 	bl	80002d8 <__aeabi_dsub>
 80091c6:	4602      	mov	r2, r0
 80091c8:	460b      	mov	r3, r1
 80091ca:	4692      	mov	sl, r2
 80091cc:	469b      	mov	fp, r3
 80091ce:	4b84      	ldr	r3, [pc, #528]	; (80093e0 <cal_mollifier_table+0xb28>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7f7 f9e0 	bl	8000598 <__aeabi_f2d>
 80091d8:	4604      	mov	r4, r0
 80091da:	460d      	mov	r5, r1
 80091dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091de:	f7f7 f9db 	bl	8000598 <__aeabi_f2d>
 80091e2:	a37b      	add	r3, pc, #492	; (adr r3, 80093d0 <cal_mollifier_table+0xb18>)
 80091e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e8:	f7f7 fa2e 	bl	8000648 <__aeabi_dmul>
 80091ec:	4602      	mov	r2, r0
 80091ee:	460b      	mov	r3, r1
 80091f0:	4620      	mov	r0, r4
 80091f2:	4629      	mov	r1, r5
 80091f4:	f7f7 f870 	bl	80002d8 <__aeabi_dsub>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4650      	mov	r0, sl
 80091fe:	4659      	mov	r1, fp
 8009200:	f7f7 fa22 	bl	8000648 <__aeabi_dmul>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	4640      	mov	r0, r8
 800920a:	4649      	mov	r1, r9
 800920c:	f7f7 f864 	bl	80002d8 <__aeabi_dsub>
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009218:	f7f7 fb40 	bl	800089c <__aeabi_ddiv>
 800921c:	4602      	mov	r2, r0
 800921e:	460b      	mov	r3, r1
 8009220:	e9c7 2300 	strd	r2, r3, [r7]
 8009224:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009228:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800922c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009230:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009234:	ee16 0a90 	vmov	r0, s13
 8009238:	f7f7 f9ae 	bl	8000598 <__aeabi_f2d>
 800923c:	4680      	mov	r8, r0
 800923e:	4689      	mov	r9, r1
 8009240:	4b67      	ldr	r3, [pc, #412]	; (80093e0 <cal_mollifier_table+0xb28>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4618      	mov	r0, r3
 8009246:	f7f7 f9a7 	bl	8000598 <__aeabi_f2d>
 800924a:	4604      	mov	r4, r0
 800924c:	460d      	mov	r5, r1
 800924e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009250:	f7f7 f9a2 	bl	8000598 <__aeabi_f2d>
 8009254:	a35e      	add	r3, pc, #376	; (adr r3, 80093d0 <cal_mollifier_table+0xb18>)
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	f7f7 f9f5 	bl	8000648 <__aeabi_dmul>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4620      	mov	r0, r4
 8009264:	4629      	mov	r1, r5
 8009266:	f7f7 f837 	bl	80002d8 <__aeabi_dsub>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	4692      	mov	sl, r2
 8009270:	469b      	mov	fp, r3
 8009272:	4b5b      	ldr	r3, [pc, #364]	; (80093e0 <cal_mollifier_table+0xb28>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4618      	mov	r0, r3
 8009278:	f7f7 f98e 	bl	8000598 <__aeabi_f2d>
 800927c:	4604      	mov	r4, r0
 800927e:	460d      	mov	r5, r1
 8009280:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009282:	f7f7 f989 	bl	8000598 <__aeabi_f2d>
 8009286:	a352      	add	r3, pc, #328	; (adr r3, 80093d0 <cal_mollifier_table+0xb18>)
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	f7f7 f9dc 	bl	8000648 <__aeabi_dmul>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	4620      	mov	r0, r4
 8009296:	4629      	mov	r1, r5
 8009298:	f7f7 f81e 	bl	80002d8 <__aeabi_dsub>
 800929c:	4602      	mov	r2, r0
 800929e:	460b      	mov	r3, r1
 80092a0:	4650      	mov	r0, sl
 80092a2:	4659      	mov	r1, fp
 80092a4:	f7f7 f9d0 	bl	8000648 <__aeabi_dmul>
 80092a8:	4602      	mov	r2, r0
 80092aa:	460b      	mov	r3, r1
 80092ac:	4640      	mov	r0, r8
 80092ae:	4649      	mov	r1, r9
 80092b0:	f7f7 f812 	bl	80002d8 <__aeabi_dsub>
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092bc:	f7f7 faee 	bl	800089c <__aeabi_ddiv>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80092c8:	f7f7 f9be 	bl	8000648 <__aeabi_dmul>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80092d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80092d8:	eeb1 7a67 	vneg.f32	s14, s15
 80092dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80092e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80092e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80092ec:	ee16 0a90 	vmov	r0, s13
 80092f0:	f7f7 f952 	bl	8000598 <__aeabi_f2d>
 80092f4:	4680      	mov	r8, r0
 80092f6:	4689      	mov	r9, r1
 80092f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80092fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009300:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009304:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009308:	ee16 0a90 	vmov	r0, s13
 800930c:	f7f7 f944 	bl	8000598 <__aeabi_f2d>
 8009310:	4682      	mov	sl, r0
 8009312:	468b      	mov	fp, r1
 8009314:	4b32      	ldr	r3, [pc, #200]	; (80093e0 <cal_mollifier_table+0xb28>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4618      	mov	r0, r3
 800931a:	f7f7 f93d 	bl	8000598 <__aeabi_f2d>
 800931e:	4604      	mov	r4, r0
 8009320:	460d      	mov	r5, r1
 8009322:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009324:	f7f7 f938 	bl	8000598 <__aeabi_f2d>
 8009328:	a329      	add	r3, pc, #164	; (adr r3, 80093d0 <cal_mollifier_table+0xb18>)
 800932a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932e:	f7f7 f98b 	bl	8000648 <__aeabi_dmul>
 8009332:	4602      	mov	r2, r0
 8009334:	460b      	mov	r3, r1
 8009336:	4620      	mov	r0, r4
 8009338:	4629      	mov	r1, r5
 800933a:	f7f6 ffcd 	bl	80002d8 <__aeabi_dsub>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	e9c7 2300 	strd	r2, r3, [r7]
 8009346:	4b26      	ldr	r3, [pc, #152]	; (80093e0 <cal_mollifier_table+0xb28>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4618      	mov	r0, r3
 800934c:	f7f7 f924 	bl	8000598 <__aeabi_f2d>
 8009350:	4604      	mov	r4, r0
 8009352:	460d      	mov	r5, r1
 8009354:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009356:	f7f7 f91f 	bl	8000598 <__aeabi_f2d>
 800935a:	a31d      	add	r3, pc, #116	; (adr r3, 80093d0 <cal_mollifier_table+0xb18>)
 800935c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009360:	f7f7 f972 	bl	8000648 <__aeabi_dmul>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	4620      	mov	r0, r4
 800936a:	4629      	mov	r1, r5
 800936c:	f7f6 ffb4 	bl	80002d8 <__aeabi_dsub>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009378:	f7f7 f966 	bl	8000648 <__aeabi_dmul>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	4650      	mov	r0, sl
 8009382:	4659      	mov	r1, fp
 8009384:	f7f6 ffa8 	bl	80002d8 <__aeabi_dsub>
 8009388:	4602      	mov	r2, r0
 800938a:	460b      	mov	r3, r1
 800938c:	4640      	mov	r0, r8
 800938e:	4649      	mov	r1, r9
 8009390:	f7f7 fa84 	bl	800089c <__aeabi_ddiv>
 8009394:	4602      	mov	r2, r0
 8009396:	460b      	mov	r3, r1
 8009398:	ec43 2b17 	vmov	d7, r2, r3
 800939c:	eeb0 0a47 	vmov.f32	s0, s14
 80093a0:	eef0 0a67 	vmov.f32	s1, s15
 80093a4:	f010 fe6c 	bl	801a080 <exp>
 80093a8:	ec53 2b10 	vmov	r2, r3, d0
 80093ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80093b0:	f7f7 f94a 	bl	8000648 <__aeabi_dmul>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4610      	mov	r0, r2
 80093ba:	4619      	mov	r1, r3
 80093bc:	f7f7 fc1c 	bl	8000bf8 <__aeabi_d2f>
 80093c0:	4602      	mov	r2, r0
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 80093c6:	e191      	b.n	80096ec <cal_mollifier_table+0xe34>
 80093c8:	04189375 	.word	0x04189375
 80093cc:	3ff50e56 	.word	0x3ff50e56
 80093d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80093d4:	3f50624d 	.word	0x3f50624d
 80093d8:	f9db22d1 	.word	0xf9db22d1
 80093dc:	3fdc6a7e 	.word	0x3fdc6a7e
 80093e0:	200007e0 	.word	0x200007e0
			}else{
				time_delay=0;
 80093e4:	f04f 0300 	mov.w	r3, #0
 80093e8:	62fb      	str	r3, [r7, #44]	; 0x2c
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 80093ea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80093ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80093f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80093fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093fe:	ee17 0a90 	vmov	r0, s15
 8009402:	f7f7 f8c9 	bl	8000598 <__aeabi_f2d>
 8009406:	a3c0      	add	r3, pc, #768	; (adr r3, 8009708 <cal_mollifier_table+0xe50>)
 8009408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940c:	f7f7 fa46 	bl	800089c <__aeabi_ddiv>
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009418:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800941c:	eeb1 7a67 	vneg.f32	s14, s15
 8009420:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009428:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800942c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009430:	ee16 0a90 	vmov	r0, s13
 8009434:	f7f7 f8b0 	bl	8000598 <__aeabi_f2d>
 8009438:	4604      	mov	r4, r0
 800943a:	460d      	mov	r5, r1
 800943c:	4bb0      	ldr	r3, [pc, #704]	; (8009700 <cal_mollifier_table+0xe48>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4618      	mov	r0, r3
 8009442:	f7f7 f8a9 	bl	8000598 <__aeabi_f2d>
 8009446:	4680      	mov	r8, r0
 8009448:	4689      	mov	r9, r1
 800944a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800944c:	f7f7 f8a4 	bl	8000598 <__aeabi_f2d>
 8009450:	a3a9      	add	r3, pc, #676	; (adr r3, 80096f8 <cal_mollifier_table+0xe40>)
 8009452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009456:	f7f7 f8f7 	bl	8000648 <__aeabi_dmul>
 800945a:	4602      	mov	r2, r0
 800945c:	460b      	mov	r3, r1
 800945e:	4640      	mov	r0, r8
 8009460:	4649      	mov	r1, r9
 8009462:	f7f6 ff39 	bl	80002d8 <__aeabi_dsub>
 8009466:	4602      	mov	r2, r0
 8009468:	460b      	mov	r3, r1
 800946a:	4620      	mov	r0, r4
 800946c:	4629      	mov	r1, r5
 800946e:	f7f7 f8eb 	bl	8000648 <__aeabi_dmul>
 8009472:	4602      	mov	r2, r0
 8009474:	460b      	mov	r3, r1
 8009476:	e9c7 2300 	strd	r2, r3, [r7]
 800947a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800947e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009482:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009486:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800948a:	ee16 0a90 	vmov	r0, s13
 800948e:	f7f7 f883 	bl	8000598 <__aeabi_f2d>
 8009492:	4680      	mov	r8, r0
 8009494:	4689      	mov	r9, r1
 8009496:	4b9a      	ldr	r3, [pc, #616]	; (8009700 <cal_mollifier_table+0xe48>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4618      	mov	r0, r3
 800949c:	f7f7 f87c 	bl	8000598 <__aeabi_f2d>
 80094a0:	4604      	mov	r4, r0
 80094a2:	460d      	mov	r5, r1
 80094a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094a6:	f7f7 f877 	bl	8000598 <__aeabi_f2d>
 80094aa:	a393      	add	r3, pc, #588	; (adr r3, 80096f8 <cal_mollifier_table+0xe40>)
 80094ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b0:	f7f7 f8ca 	bl	8000648 <__aeabi_dmul>
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	4620      	mov	r0, r4
 80094ba:	4629      	mov	r1, r5
 80094bc:	f7f6 ff0c 	bl	80002d8 <__aeabi_dsub>
 80094c0:	4602      	mov	r2, r0
 80094c2:	460b      	mov	r3, r1
 80094c4:	4692      	mov	sl, r2
 80094c6:	469b      	mov	fp, r3
 80094c8:	4b8d      	ldr	r3, [pc, #564]	; (8009700 <cal_mollifier_table+0xe48>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7f7 f863 	bl	8000598 <__aeabi_f2d>
 80094d2:	4604      	mov	r4, r0
 80094d4:	460d      	mov	r5, r1
 80094d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094d8:	f7f7 f85e 	bl	8000598 <__aeabi_f2d>
 80094dc:	a386      	add	r3, pc, #536	; (adr r3, 80096f8 <cal_mollifier_table+0xe40>)
 80094de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e2:	f7f7 f8b1 	bl	8000648 <__aeabi_dmul>
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	4620      	mov	r0, r4
 80094ec:	4629      	mov	r1, r5
 80094ee:	f7f6 fef3 	bl	80002d8 <__aeabi_dsub>
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	4650      	mov	r0, sl
 80094f8:	4659      	mov	r1, fp
 80094fa:	f7f7 f8a5 	bl	8000648 <__aeabi_dmul>
 80094fe:	4602      	mov	r2, r0
 8009500:	460b      	mov	r3, r1
 8009502:	4640      	mov	r0, r8
 8009504:	4649      	mov	r1, r9
 8009506:	f7f6 fee7 	bl	80002d8 <__aeabi_dsub>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009512:	f7f7 f9c3 	bl	800089c <__aeabi_ddiv>
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	e9c7 2300 	strd	r2, r3, [r7]
 800951e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009522:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009526:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800952a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800952e:	ee16 0a90 	vmov	r0, s13
 8009532:	f7f7 f831 	bl	8000598 <__aeabi_f2d>
 8009536:	4680      	mov	r8, r0
 8009538:	4689      	mov	r9, r1
 800953a:	4b71      	ldr	r3, [pc, #452]	; (8009700 <cal_mollifier_table+0xe48>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4618      	mov	r0, r3
 8009540:	f7f7 f82a 	bl	8000598 <__aeabi_f2d>
 8009544:	4604      	mov	r4, r0
 8009546:	460d      	mov	r5, r1
 8009548:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800954a:	f7f7 f825 	bl	8000598 <__aeabi_f2d>
 800954e:	a36a      	add	r3, pc, #424	; (adr r3, 80096f8 <cal_mollifier_table+0xe40>)
 8009550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009554:	f7f7 f878 	bl	8000648 <__aeabi_dmul>
 8009558:	4602      	mov	r2, r0
 800955a:	460b      	mov	r3, r1
 800955c:	4620      	mov	r0, r4
 800955e:	4629      	mov	r1, r5
 8009560:	f7f6 feba 	bl	80002d8 <__aeabi_dsub>
 8009564:	4602      	mov	r2, r0
 8009566:	460b      	mov	r3, r1
 8009568:	4692      	mov	sl, r2
 800956a:	469b      	mov	fp, r3
 800956c:	4b64      	ldr	r3, [pc, #400]	; (8009700 <cal_mollifier_table+0xe48>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4618      	mov	r0, r3
 8009572:	f7f7 f811 	bl	8000598 <__aeabi_f2d>
 8009576:	4604      	mov	r4, r0
 8009578:	460d      	mov	r5, r1
 800957a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800957c:	f7f7 f80c 	bl	8000598 <__aeabi_f2d>
 8009580:	a35d      	add	r3, pc, #372	; (adr r3, 80096f8 <cal_mollifier_table+0xe40>)
 8009582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009586:	f7f7 f85f 	bl	8000648 <__aeabi_dmul>
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
 800958e:	4620      	mov	r0, r4
 8009590:	4629      	mov	r1, r5
 8009592:	f7f6 fea1 	bl	80002d8 <__aeabi_dsub>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	4650      	mov	r0, sl
 800959c:	4659      	mov	r1, fp
 800959e:	f7f7 f853 	bl	8000648 <__aeabi_dmul>
 80095a2:	4602      	mov	r2, r0
 80095a4:	460b      	mov	r3, r1
 80095a6:	4640      	mov	r0, r8
 80095a8:	4649      	mov	r1, r9
 80095aa:	f7f6 fe95 	bl	80002d8 <__aeabi_dsub>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095b6:	f7f7 f971 	bl	800089c <__aeabi_ddiv>
 80095ba:	4602      	mov	r2, r0
 80095bc:	460b      	mov	r3, r1
 80095be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80095c2:	f7f7 f841 	bl	8000648 <__aeabi_dmul>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80095ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80095d2:	eeb1 7a67 	vneg.f32	s14, s15
 80095d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80095da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095de:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80095e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80095e6:	ee16 0a90 	vmov	r0, s13
 80095ea:	f7f6 ffd5 	bl	8000598 <__aeabi_f2d>
 80095ee:	4680      	mov	r8, r0
 80095f0:	4689      	mov	r9, r1
 80095f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80095f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80095fa:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80095fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009602:	ee16 0a90 	vmov	r0, s13
 8009606:	f7f6 ffc7 	bl	8000598 <__aeabi_f2d>
 800960a:	4682      	mov	sl, r0
 800960c:	468b      	mov	fp, r1
 800960e:	4b3c      	ldr	r3, [pc, #240]	; (8009700 <cal_mollifier_table+0xe48>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4618      	mov	r0, r3
 8009614:	f7f6 ffc0 	bl	8000598 <__aeabi_f2d>
 8009618:	4604      	mov	r4, r0
 800961a:	460d      	mov	r5, r1
 800961c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800961e:	f7f6 ffbb 	bl	8000598 <__aeabi_f2d>
 8009622:	a335      	add	r3, pc, #212	; (adr r3, 80096f8 <cal_mollifier_table+0xe40>)
 8009624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009628:	f7f7 f80e 	bl	8000648 <__aeabi_dmul>
 800962c:	4602      	mov	r2, r0
 800962e:	460b      	mov	r3, r1
 8009630:	4620      	mov	r0, r4
 8009632:	4629      	mov	r1, r5
 8009634:	f7f6 fe50 	bl	80002d8 <__aeabi_dsub>
 8009638:	4602      	mov	r2, r0
 800963a:	460b      	mov	r3, r1
 800963c:	e9c7 2300 	strd	r2, r3, [r7]
 8009640:	4b2f      	ldr	r3, [pc, #188]	; (8009700 <cal_mollifier_table+0xe48>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4618      	mov	r0, r3
 8009646:	f7f6 ffa7 	bl	8000598 <__aeabi_f2d>
 800964a:	4604      	mov	r4, r0
 800964c:	460d      	mov	r5, r1
 800964e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009650:	f7f6 ffa2 	bl	8000598 <__aeabi_f2d>
 8009654:	a328      	add	r3, pc, #160	; (adr r3, 80096f8 <cal_mollifier_table+0xe40>)
 8009656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965a:	f7f6 fff5 	bl	8000648 <__aeabi_dmul>
 800965e:	4602      	mov	r2, r0
 8009660:	460b      	mov	r3, r1
 8009662:	4620      	mov	r0, r4
 8009664:	4629      	mov	r1, r5
 8009666:	f7f6 fe37 	bl	80002d8 <__aeabi_dsub>
 800966a:	4602      	mov	r2, r0
 800966c:	460b      	mov	r3, r1
 800966e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009672:	f7f6 ffe9 	bl	8000648 <__aeabi_dmul>
 8009676:	4602      	mov	r2, r0
 8009678:	460b      	mov	r3, r1
 800967a:	4650      	mov	r0, sl
 800967c:	4659      	mov	r1, fp
 800967e:	f7f6 fe2b 	bl	80002d8 <__aeabi_dsub>
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	4640      	mov	r0, r8
 8009688:	4649      	mov	r1, r9
 800968a:	f7f7 f907 	bl	800089c <__aeabi_ddiv>
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	ec43 2b17 	vmov	d7, r2, r3
 8009696:	eeb0 0a47 	vmov.f32	s0, s14
 800969a:	eef0 0a67 	vmov.f32	s1, s15
 800969e:	f010 fcef 	bl	801a080 <exp>
 80096a2:	ec53 2b10 	vmov	r2, r3, d0
 80096a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80096aa:	f7f6 ffcd 	bl	8000648 <__aeabi_dmul>
 80096ae:	4602      	mov	r2, r0
 80096b0:	460b      	mov	r3, r1
 80096b2:	4610      	mov	r0, r2
 80096b4:	4619      	mov	r1, r3
 80096b6:	f7f7 fa9f 	bl	8000bf8 <__aeabi_d2f>
 80096ba:	4602      	mov	r2, r0
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 80096c0:	e014      	b.n	80096ec <cal_mollifier_table+0xe34>
//				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)));;
				//target->acceleration = 0;
			}
		}else{
			old_velocity=target->velocity;
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	623b      	str	r3, [r7, #32]
			target->velocity=0;
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	f04f 0200 	mov.w	r2, #0
 80096ce:	601a      	str	r2, [r3, #0]
			target->acceleration = target->velocity-old_velocity;
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	ed93 7a00 	vldr	s14, [r3]
 80096d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80096da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=4;
 80096e4:	4b07      	ldr	r3, [pc, #28]	; (8009704 <cal_mollifier_table+0xe4c>)
 80096e6:	2204      	movs	r2, #4
 80096e8:	701a      	strb	r2, [r3, #0]
		}

}
 80096ea:	bf00      	nop
 80096ec:	bf00      	nop
 80096ee:	3730      	adds	r7, #48	; 0x30
 80096f0:	46bd      	mov	sp, r7
 80096f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096f6:	bf00      	nop
 80096f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80096fc:	3f50624d 	.word	0x3f50624d
 8009700:	200007e0 	.word	0x200007e0
 8009704:	200007e4 	.word	0x200007e4
 8009708:	f9db22d1 	.word	0xf9db22d1
 800970c:	3fdc6a7e 	.word	0x3fdc6a7e

08009710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8009716:	4b16      	ldr	r3, [pc, #88]	; (8009770 <MX_DMA_Init+0x60>)
 8009718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800971a:	4a15      	ldr	r2, [pc, #84]	; (8009770 <MX_DMA_Init+0x60>)
 800971c:	f043 0304 	orr.w	r3, r3, #4
 8009720:	6493      	str	r3, [r2, #72]	; 0x48
 8009722:	4b13      	ldr	r3, [pc, #76]	; (8009770 <MX_DMA_Init+0x60>)
 8009724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009726:	f003 0304 	and.w	r3, r3, #4
 800972a:	607b      	str	r3, [r7, #4]
 800972c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800972e:	4b10      	ldr	r3, [pc, #64]	; (8009770 <MX_DMA_Init+0x60>)
 8009730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009732:	4a0f      	ldr	r2, [pc, #60]	; (8009770 <MX_DMA_Init+0x60>)
 8009734:	f043 0301 	orr.w	r3, r3, #1
 8009738:	6493      	str	r3, [r2, #72]	; 0x48
 800973a:	4b0d      	ldr	r3, [pc, #52]	; (8009770 <MX_DMA_Init+0x60>)
 800973c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800973e:	f003 0301 	and.w	r3, r3, #1
 8009742:	603b      	str	r3, [r7, #0]
 8009744:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8009746:	2200      	movs	r2, #0
 8009748:	2100      	movs	r1, #0
 800974a:	200b      	movs	r0, #11
 800974c:	f009 f96b 	bl	8012a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009750:	200b      	movs	r0, #11
 8009752:	f009 f982 	bl	8012a5a <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8009756:	2200      	movs	r2, #0
 8009758:	2100      	movs	r1, #0
 800975a:	205e      	movs	r0, #94	; 0x5e
 800975c:	f009 f963 	bl	8012a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8009760:	205e      	movs	r0, #94	; 0x5e
 8009762:	f009 f97a 	bl	8012a5a <HAL_NVIC_EnableIRQ>

}
 8009766:	bf00      	nop
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	40021000 	.word	0x40021000

08009774 <init_FailSafe>:
float encoder_PID_error_highspeed;
float gyro_PID_error_highspeed;
float gyro_x_error_highspeed;
int error_time_count;

void init_FailSafe(void){
 8009774:	b480      	push	{r7}
 8009776:	af00      	add	r7, sp, #0
	error_mode=0;
 8009778:	4b11      	ldr	r3, [pc, #68]	; (80097c0 <init_FailSafe+0x4c>)
 800977a:	2200      	movs	r2, #0
 800977c:	701a      	strb	r2, [r3, #0]
	no_safty=0;
 800977e:	4b11      	ldr	r3, [pc, #68]	; (80097c4 <init_FailSafe+0x50>)
 8009780:	2200      	movs	r2, #0
 8009782:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 8009784:	4b10      	ldr	r3, [pc, #64]	; (80097c8 <init_FailSafe+0x54>)
 8009786:	2200      	movs	r2, #0
 8009788:	701a      	strb	r2, [r3, #0]
	error_time_count=0;
 800978a:	4b10      	ldr	r3, [pc, #64]	; (80097cc <init_FailSafe+0x58>)
 800978c:	2200      	movs	r2, #0
 800978e:	601a      	str	r2, [r3, #0]
	encoder_PID_error=1200;
 8009790:	4b0f      	ldr	r3, [pc, #60]	; (80097d0 <init_FailSafe+0x5c>)
 8009792:	4a10      	ldr	r2, [pc, #64]	; (80097d4 <init_FailSafe+0x60>)
 8009794:	601a      	str	r2, [r3, #0]
	gyro_PID_error=1200;
 8009796:	4b10      	ldr	r3, [pc, #64]	; (80097d8 <init_FailSafe+0x64>)
 8009798:	4a0e      	ldr	r2, [pc, #56]	; (80097d4 <init_FailSafe+0x60>)
 800979a:	601a      	str	r2, [r3, #0]
	gyro_x_error=1200;
 800979c:	4b0f      	ldr	r3, [pc, #60]	; (80097dc <init_FailSafe+0x68>)
 800979e:	4a0d      	ldr	r2, [pc, #52]	; (80097d4 <init_FailSafe+0x60>)
 80097a0:	601a      	str	r2, [r3, #0]

	encoder_PID_error_highspeed=2000;//3000
 80097a2:	4b0f      	ldr	r3, [pc, #60]	; (80097e0 <init_FailSafe+0x6c>)
 80097a4:	4a0f      	ldr	r2, [pc, #60]	; (80097e4 <init_FailSafe+0x70>)
 80097a6:	601a      	str	r2, [r3, #0]
	gyro_PID_error_highspeed=2000;
 80097a8:	4b0f      	ldr	r3, [pc, #60]	; (80097e8 <init_FailSafe+0x74>)
 80097aa:	4a0e      	ldr	r2, [pc, #56]	; (80097e4 <init_FailSafe+0x70>)
 80097ac:	601a      	str	r2, [r3, #0]
	gyro_x_error_highspeed=1500;
 80097ae:	4b0f      	ldr	r3, [pc, #60]	; (80097ec <init_FailSafe+0x78>)
 80097b0:	4a0f      	ldr	r2, [pc, #60]	; (80097f0 <init_FailSafe+0x7c>)
 80097b2:	601a      	str	r2, [r3, #0]
}
 80097b4:	bf00      	nop
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	200007e7 	.word	0x200007e7
 80097c4:	200007e6 	.word	0x200007e6
 80097c8:	200007e8 	.word	0x200007e8
 80097cc:	20000804 	.word	0x20000804
 80097d0:	200007ec 	.word	0x200007ec
 80097d4:	44960000 	.word	0x44960000
 80097d8:	200007f0 	.word	0x200007f0
 80097dc:	200007f4 	.word	0x200007f4
 80097e0:	200007f8 	.word	0x200007f8
 80097e4:	44fa0000 	.word	0x44fa0000
 80097e8:	200007fc 	.word	0x200007fc
 80097ec:	20000800 	.word	0x20000800
 80097f0:	44bb8000 	.word	0x44bb8000

080097f4 <interrupt_FailSafe>:


void interrupt_FailSafe(void){
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
	float encoder_PID_error_in;
	float gyro_PID_error_in;
	float gyro_x_error_in;

	if (highspeed_mode == 0) {
 80097fa:	4b6e      	ldr	r3, [pc, #440]	; (80099b4 <interrupt_FailSafe+0x1c0>)
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d109      	bne.n	8009816 <interrupt_FailSafe+0x22>
		encoder_PID_error_in=encoder_PID_error;
 8009802:	4b6d      	ldr	r3, [pc, #436]	; (80099b8 <interrupt_FailSafe+0x1c4>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error;
 8009808:	4b6c      	ldr	r3, [pc, #432]	; (80099bc <interrupt_FailSafe+0x1c8>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error;
 800980e:	4b6c      	ldr	r3, [pc, #432]	; (80099c0 <interrupt_FailSafe+0x1cc>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	607b      	str	r3, [r7, #4]
 8009814:	e008      	b.n	8009828 <interrupt_FailSafe+0x34>
	}else{
		encoder_PID_error_in=encoder_PID_error_highspeed;
 8009816:	4b6b      	ldr	r3, [pc, #428]	; (80099c4 <interrupt_FailSafe+0x1d0>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error_highspeed;
 800981c:	4b6a      	ldr	r3, [pc, #424]	; (80099c8 <interrupt_FailSafe+0x1d4>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error_highspeed;
 8009822:	4b6a      	ldr	r3, [pc, #424]	; (80099cc <interrupt_FailSafe+0x1d8>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	607b      	str	r3, [r7, #4]
	}

	if (modeacc != 0 && modeacc != 3){
 8009828:	4b69      	ldr	r3, [pc, #420]	; (80099d0 <interrupt_FailSafe+0x1dc>)
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d062      	beq.n	80098f6 <interrupt_FailSafe+0x102>
 8009830:	4b67      	ldr	r3, [pc, #412]	; (80099d0 <interrupt_FailSafe+0x1dc>)
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	2b03      	cmp	r3, #3
 8009836:	d05e      	beq.n	80098f6 <interrupt_FailSafe+0x102>
		if (no_safty == 0 && error_mode == 0) {
 8009838:	4b66      	ldr	r3, [pc, #408]	; (80099d4 <interrupt_FailSafe+0x1e0>)
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d15a      	bne.n	80098f6 <interrupt_FailSafe+0x102>
 8009840:	4b65      	ldr	r3, [pc, #404]	; (80099d8 <interrupt_FailSafe+0x1e4>)
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d156      	bne.n	80098f6 <interrupt_FailSafe+0x102>
			//ジャイロの誤差が一定以上
					if (fabs(turning.velocity - angle_speed) >= gyro_PID_error_in ) {
 8009848:	4b64      	ldr	r3, [pc, #400]	; (80099dc <interrupt_FailSafe+0x1e8>)
 800984a:	ed93 7a00 	vldr	s14, [r3]
 800984e:	4b64      	ldr	r3, [pc, #400]	; (80099e0 <interrupt_FailSafe+0x1ec>)
 8009850:	edd3 7a00 	vldr	s15, [r3]
 8009854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009858:	eef0 7ae7 	vabs.f32	s15, s15
 800985c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009860:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009868:	d809      	bhi.n	800987e <interrupt_FailSafe+0x8a>
						//(gyro.omega_x >= 320 && gyro.omega_y >= 320) ||
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 800986a:	f7fe f8a1 	bl	80079b0 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(1);
 800986e:	2001      	movs	r0, #1
 8009870:	f7fd fcae 	bl	80071d0 <pl_yellow_LED_count>
						error_mode = 1;
 8009874:	4b58      	ldr	r3, [pc, #352]	; (80099d8 <interrupt_FailSafe+0x1e4>)
 8009876:	2201      	movs	r2, #1
 8009878:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800987a:	f7fb f8c7 	bl	8004a0c <clear_Ierror>
					}
					if (angle_speedx_set >= gyro_x_error_in) {
 800987e:	4b59      	ldr	r3, [pc, #356]	; (80099e4 <interrupt_FailSafe+0x1f0>)
 8009880:	edd3 7a00 	vldr	s15, [r3]
 8009884:	ed97 7a01 	vldr	s14, [r7, #4]
 8009888:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800988c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009890:	d809      	bhi.n	80098a6 <interrupt_FailSafe+0xb2>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009892:	f7fe f88d 	bl	80079b0 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(2);
 8009896:	2002      	movs	r0, #2
 8009898:	f7fd fc9a 	bl	80071d0 <pl_yellow_LED_count>
						error_mode = 1;
 800989c:	4b4e      	ldr	r3, [pc, #312]	; (80099d8 <interrupt_FailSafe+0x1e4>)
 800989e:	2201      	movs	r2, #1
 80098a0:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 80098a2:	f7fb f8b3 	bl	8004a0c <clear_Ierror>
					}
					if(fabs(straight.velocity - (fusion_speedR+fusion_speedL)/2) >= encoder_PID_error_in && modeacc==1){
 80098a6:	4b50      	ldr	r3, [pc, #320]	; (80099e8 <interrupt_FailSafe+0x1f4>)
 80098a8:	ed93 7a00 	vldr	s14, [r3]
 80098ac:	4b4f      	ldr	r3, [pc, #316]	; (80099ec <interrupt_FailSafe+0x1f8>)
 80098ae:	edd3 6a00 	vldr	s13, [r3]
 80098b2:	4b4f      	ldr	r3, [pc, #316]	; (80099f0 <interrupt_FailSafe+0x1fc>)
 80098b4:	edd3 7a00 	vldr	s15, [r3]
 80098b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80098bc:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80098c0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80098c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098c8:	eef0 7ae7 	vabs.f32	s15, s15
 80098cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80098d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098d8:	d80d      	bhi.n	80098f6 <interrupt_FailSafe+0x102>
 80098da:	4b3d      	ldr	r3, [pc, #244]	; (80099d0 <interrupt_FailSafe+0x1dc>)
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d109      	bne.n	80098f6 <interrupt_FailSafe+0x102>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 80098e2:	f7fe f865 	bl	80079b0 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(4);
 80098e6:	2004      	movs	r0, #4
 80098e8:	f7fd fc72 	bl	80071d0 <pl_yellow_LED_count>
						error_mode = 1;
 80098ec:	4b3a      	ldr	r3, [pc, #232]	; (80099d8 <interrupt_FailSafe+0x1e4>)
 80098ee:	2201      	movs	r2, #1
 80098f0:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 80098f2:	f7fb f88b 	bl	8004a0c <clear_Ierror>

				}

	}

	if(error_mode==1){
 80098f6:	4b38      	ldr	r3, [pc, #224]	; (80099d8 <interrupt_FailSafe+0x1e4>)
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d153      	bne.n	80099a6 <interrupt_FailSafe+0x1b2>
		record_mode=0;
 80098fe:	4b3d      	ldr	r3, [pc, #244]	; (80099f4 <interrupt_FailSafe+0x200>)
 8009900:	2200      	movs	r2, #0
 8009902:	701a      	strb	r2, [r3, #0]
		error_time_count++;
 8009904:	4b3c      	ldr	r3, [pc, #240]	; (80099f8 <interrupt_FailSafe+0x204>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	3301      	adds	r3, #1
 800990a:	4a3b      	ldr	r2, [pc, #236]	; (80099f8 <interrupt_FailSafe+0x204>)
 800990c:	6013      	str	r3, [r2, #0]
		if(error_time_count<=1000){
 800990e:	4b3a      	ldr	r3, [pc, #232]	; (80099f8 <interrupt_FailSafe+0x204>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009916:	dc05      	bgt.n	8009924 <interrupt_FailSafe+0x130>
			init_WallControl();
 8009918:	f7fb f9a4 	bl	8004c64 <init_WallControl>
			modeacc=100;//エラー用
 800991c:	4b2c      	ldr	r3, [pc, #176]	; (80099d0 <interrupt_FailSafe+0x1dc>)
 800991e:	2264      	movs	r2, #100	; 0x64
 8009920:	701a      	strb	r2, [r3, #0]
 8009922:	e009      	b.n	8009938 <interrupt_FailSafe+0x144>
			//pl_R_DriveMotor_mode(MOTOR_BREAK);
			//pl_L_DriveMotor_mode(MOTOR_BREAK);
		}else{
			pl_DriveMotor_standby(OFF);
 8009924:	2000      	movs	r0, #0
 8009926:	f7fd ffaf 	bl	8007888 <pl_DriveMotor_standby>
			pl_DriveMotor_stop();
 800992a:	f7fe f813 	bl	8007954 <pl_DriveMotor_stop>
			pl_FunMotor_stop();
 800992e:	f7fe f83f 	bl	80079b0 <pl_FunMotor_stop>
			modeacc=0;
 8009932:	4b27      	ldr	r3, [pc, #156]	; (80099d0 <interrupt_FailSafe+0x1dc>)
 8009934:	2200      	movs	r2, #0
 8009936:	701a      	strb	r2, [r3, #0]
		}
					NoWallCountL90 = 4294967295;
 8009938:	4b30      	ldr	r3, [pc, #192]	; (80099fc <interrupt_FailSafe+0x208>)
 800993a:	f04f 32ff 	mov.w	r2, #4294967295
 800993e:	601a      	str	r2, [r3, #0]
					NoWallCountR90 = 4294967295;
 8009940:	4b2f      	ldr	r3, [pc, #188]	; (8009a00 <interrupt_FailSafe+0x20c>)
 8009942:	f04f 32ff 	mov.w	r2, #4294967295
 8009946:	601a      	str	r2, [r3, #0]
					NoWallCountL45 = 4294967295;
 8009948:	4b2e      	ldr	r3, [pc, #184]	; (8009a04 <interrupt_FailSafe+0x210>)
 800994a:	f04f 32ff 	mov.w	r2, #4294967295
 800994e:	601a      	str	r2, [r3, #0]
					NoWallCountR45 = 4294967295;
 8009950:	4b2d      	ldr	r3, [pc, #180]	; (8009a08 <interrupt_FailSafe+0x214>)
 8009952:	f04f 32ff 	mov.w	r2, #4294967295
 8009956:	601a      	str	r2, [r3, #0]
					NoWallCountL45slant = 4294967295;
 8009958:	4b2c      	ldr	r3, [pc, #176]	; (8009a0c <interrupt_FailSafe+0x218>)
 800995a:	f04f 32ff 	mov.w	r2, #4294967295
 800995e:	601a      	str	r2, [r3, #0]
					NoWallCountR45slant = 4294967295;
 8009960:	4b2b      	ldr	r3, [pc, #172]	; (8009a10 <interrupt_FailSafe+0x21c>)
 8009962:	f04f 32ff 	mov.w	r2, #4294967295
 8009966:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL90 = 100;
 8009968:	4b2a      	ldr	r3, [pc, #168]	; (8009a14 <interrupt_FailSafe+0x220>)
 800996a:	4a2b      	ldr	r2, [pc, #172]	; (8009a18 <interrupt_FailSafe+0x224>)
 800996c:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR90 = 100;
 800996e:	4b2b      	ldr	r3, [pc, #172]	; (8009a1c <interrupt_FailSafe+0x228>)
 8009970:	4a29      	ldr	r2, [pc, #164]	; (8009a18 <interrupt_FailSafe+0x224>)
 8009972:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45 = 40;
 8009974:	4b2a      	ldr	r3, [pc, #168]	; (8009a20 <interrupt_FailSafe+0x22c>)
 8009976:	4a2b      	ldr	r2, [pc, #172]	; (8009a24 <interrupt_FailSafe+0x230>)
 8009978:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45 = 40;
 800997a:	4b2b      	ldr	r3, [pc, #172]	; (8009a28 <interrupt_FailSafe+0x234>)
 800997c:	4a29      	ldr	r2, [pc, #164]	; (8009a24 <interrupt_FailSafe+0x230>)
 800997e:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant = 70;
 8009980:	4b2a      	ldr	r3, [pc, #168]	; (8009a2c <interrupt_FailSafe+0x238>)
 8009982:	4a2b      	ldr	r2, [pc, #172]	; (8009a30 <interrupt_FailSafe+0x23c>)
 8009984:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant = 70;
 8009986:	4b2b      	ldr	r3, [pc, #172]	; (8009a34 <interrupt_FailSafe+0x240>)
 8009988:	4a29      	ldr	r2, [pc, #164]	; (8009a30 <interrupt_FailSafe+0x23c>)
 800998a:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant2 = 70;
 800998c:	4b2a      	ldr	r3, [pc, #168]	; (8009a38 <interrupt_FailSafe+0x244>)
 800998e:	4a28      	ldr	r2, [pc, #160]	; (8009a30 <interrupt_FailSafe+0x23c>)
 8009990:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant2 = 70;
 8009992:	4b2a      	ldr	r3, [pc, #168]	; (8009a3c <interrupt_FailSafe+0x248>)
 8009994:	4a26      	ldr	r2, [pc, #152]	; (8009a30 <interrupt_FailSafe+0x23c>)
 8009996:	601a      	str	r2, [r3, #0]
					g_acc_flag=4;
 8009998:	4b29      	ldr	r3, [pc, #164]	; (8009a40 <interrupt_FailSafe+0x24c>)
 800999a:	2204      	movs	r2, #4
 800999c:	701a      	strb	r2, [r3, #0]
					g_wallCut_mode = 0;
 800999e:	4b29      	ldr	r3, [pc, #164]	; (8009a44 <interrupt_FailSafe+0x250>)
 80099a0:	2200      	movs	r2, #0
 80099a2:	701a      	strb	r2, [r3, #0]
	}else{
		error_time_count=0;
	}


}
 80099a4:	e002      	b.n	80099ac <interrupt_FailSafe+0x1b8>
		error_time_count=0;
 80099a6:	4b14      	ldr	r3, [pc, #80]	; (80099f8 <interrupt_FailSafe+0x204>)
 80099a8:	2200      	movs	r2, #0
 80099aa:	601a      	str	r2, [r3, #0]
}
 80099ac:	bf00      	nop
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	200007e8 	.word	0x200007e8
 80099b8:	200007ec 	.word	0x200007ec
 80099bc:	200007f0 	.word	0x200007f0
 80099c0:	200007f4 	.word	0x200007f4
 80099c4:	200007f8 	.word	0x200007f8
 80099c8:	200007fc 	.word	0x200007fc
 80099cc:	20000800 	.word	0x20000800
 80099d0:	20000508 	.word	0x20000508
 80099d4:	200007e6 	.word	0x200007e6
 80099d8:	200007e7 	.word	0x200007e7
 80099dc:	200004c4 	.word	0x200004c4
 80099e0:	20000248 	.word	0x20000248
 80099e4:	20000254 	.word	0x20000254
 80099e8:	200004b8 	.word	0x200004b8
 80099ec:	2000023c 	.word	0x2000023c
 80099f0:	20000238 	.word	0x20000238
 80099f4:	2000c388 	.word	0x2000c388
 80099f8:	20000804 	.word	0x20000804
 80099fc:	20000598 	.word	0x20000598
 8009a00:	20000594 	.word	0x20000594
 8009a04:	200005a0 	.word	0x200005a0
 8009a08:	2000059c 	.word	0x2000059c
 8009a0c:	200005a8 	.word	0x200005a8
 8009a10:	200005a4 	.word	0x200005a4
 8009a14:	200005b0 	.word	0x200005b0
 8009a18:	42c80000 	.word	0x42c80000
 8009a1c:	200005ac 	.word	0x200005ac
 8009a20:	200005b8 	.word	0x200005b8
 8009a24:	42200000 	.word	0x42200000
 8009a28:	200005b4 	.word	0x200005b4
 8009a2c:	200005c0 	.word	0x200005c0
 8009a30:	428c0000 	.word	0x428c0000
 8009a34:	200005bc 	.word	0x200005bc
 8009a38:	200005c8 	.word	0x200005c8
 8009a3c:	200005c4 	.word	0x200005c4
 8009a40:	200007e4 	.word	0x200007e4
 8009a44:	20000572 	.word	0x20000572

08009a48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08a      	sub	sp, #40	; 0x28
 8009a4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a4e:	f107 0314 	add.w	r3, r7, #20
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]
 8009a56:	605a      	str	r2, [r3, #4]
 8009a58:	609a      	str	r2, [r3, #8]
 8009a5a:	60da      	str	r2, [r3, #12]
 8009a5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a5e:	4b3a      	ldr	r3, [pc, #232]	; (8009b48 <MX_GPIO_Init+0x100>)
 8009a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a62:	4a39      	ldr	r2, [pc, #228]	; (8009b48 <MX_GPIO_Init+0x100>)
 8009a64:	f043 0304 	orr.w	r3, r3, #4
 8009a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a6a:	4b37      	ldr	r3, [pc, #220]	; (8009b48 <MX_GPIO_Init+0x100>)
 8009a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a6e:	f003 0304 	and.w	r3, r3, #4
 8009a72:	613b      	str	r3, [r7, #16]
 8009a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009a76:	4b34      	ldr	r3, [pc, #208]	; (8009b48 <MX_GPIO_Init+0x100>)
 8009a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a7a:	4a33      	ldr	r2, [pc, #204]	; (8009b48 <MX_GPIO_Init+0x100>)
 8009a7c:	f043 0320 	orr.w	r3, r3, #32
 8009a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a82:	4b31      	ldr	r3, [pc, #196]	; (8009b48 <MX_GPIO_Init+0x100>)
 8009a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a86:	f003 0320 	and.w	r3, r3, #32
 8009a8a:	60fb      	str	r3, [r7, #12]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a8e:	4b2e      	ldr	r3, [pc, #184]	; (8009b48 <MX_GPIO_Init+0x100>)
 8009a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a92:	4a2d      	ldr	r2, [pc, #180]	; (8009b48 <MX_GPIO_Init+0x100>)
 8009a94:	f043 0301 	orr.w	r3, r3, #1
 8009a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a9a:	4b2b      	ldr	r3, [pc, #172]	; (8009b48 <MX_GPIO_Init+0x100>)
 8009a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a9e:	f003 0301 	and.w	r3, r3, #1
 8009aa2:	60bb      	str	r3, [r7, #8]
 8009aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009aa6:	4b28      	ldr	r3, [pc, #160]	; (8009b48 <MX_GPIO_Init+0x100>)
 8009aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aaa:	4a27      	ldr	r2, [pc, #156]	; (8009b48 <MX_GPIO_Init+0x100>)
 8009aac:	f043 0302 	orr.w	r3, r3, #2
 8009ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ab2:	4b25      	ldr	r3, [pc, #148]	; (8009b48 <MX_GPIO_Init+0x100>)
 8009ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ab6:	f003 0302 	and.w	r3, r3, #2
 8009aba:	607b      	str	r3, [r7, #4]
 8009abc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f24e 0150 	movw	r1, #57424	; 0xe050
 8009ac4:	4821      	ldr	r0, [pc, #132]	; (8009b4c <MX_GPIO_Init+0x104>)
 8009ac6:	f009 fc31 	bl	801332c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 8009aca:	2200      	movs	r2, #0
 8009acc:	f648 1110 	movw	r1, #35088	; 0x8910
 8009ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ad4:	f009 fc2a 	bl	801332c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f64e 4196 	movw	r1, #60566	; 0xec96
 8009ade:	481c      	ldr	r0, [pc, #112]	; (8009b50 <MX_GPIO_Init+0x108>)
 8009ae0:	f009 fc24 	bl	801332c <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009ae4:	f24e 0350 	movw	r3, #57424	; 0xe050
 8009ae8:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009aea:	2301      	movs	r3, #1
 8009aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009aee:	2300      	movs	r3, #0
 8009af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009af2:	2300      	movs	r3, #0
 8009af4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009af6:	f107 0314 	add.w	r3, r7, #20
 8009afa:	4619      	mov	r1, r3
 8009afc:	4813      	ldr	r0, [pc, #76]	; (8009b4c <MX_GPIO_Init+0x104>)
 8009afe:	f009 fa93 	bl	8013028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 8009b02:	f648 1310 	movw	r3, #35088	; 0x8910
 8009b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b10:	2300      	movs	r3, #0
 8009b12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b14:	f107 0314 	add.w	r3, r7, #20
 8009b18:	4619      	mov	r1, r3
 8009b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b1e:	f009 fa83 	bl	8013028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009b22:	f64e 4396 	movw	r3, #60566	; 0xec96
 8009b26:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b30:	2300      	movs	r3, #0
 8009b32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b34:	f107 0314 	add.w	r3, r7, #20
 8009b38:	4619      	mov	r1, r3
 8009b3a:	4805      	ldr	r0, [pc, #20]	; (8009b50 <MX_GPIO_Init+0x108>)
 8009b3c:	f009 fa74 	bl	8013028 <HAL_GPIO_Init>

}
 8009b40:	bf00      	nop
 8009b42:	3728      	adds	r7, #40	; 0x28
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	40021000 	.word	0x40021000
 8009b4c:	48000800 	.word	0x48000800
 8009b50:	48000400 	.word	0x48000400

08009b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009b54:	b590      	push	{r4, r7, lr}
 8009b56:	b087      	sub	sp, #28
 8009b58:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009b5a:	f006 fc22 	bl	80103a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009b5e:	f000 f8a9 	bl	8009cb4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8009b62:	f7ff fdd5 	bl	8009710 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009b66:	f7ff ff6f 	bl	8009a48 <MX_GPIO_Init>
  MX_ADC1_Init();
 8009b6a:	f7fe f9cf 	bl	8007f0c <MX_ADC1_Init>
  MX_SPI1_Init();
 8009b6e:	f005 f9f3 	bl	800ef58 <MX_SPI1_Init>
  MX_TIM6_Init();
 8009b72:	f005 fc65 	bl	800f440 <MX_TIM6_Init>
  MX_TIM8_Init();
 8009b76:	f005 fc99 	bl	800f4ac <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8009b7a:	f006 fb45 	bl	8010208 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8009b7e:	f7ff fdc7 	bl	8009710 <MX_DMA_Init>
  MX_SPI3_Init();
 8009b82:	f005 fa27 	bl	800efd4 <MX_SPI3_Init>
  MX_TIM16_Init();
 8009b86:	f005 fd31 	bl	800f5ec <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  pl_timer_init();
 8009b8a:	f7fe f8fd 	bl	8007d88 <pl_timer_init>
  pl_gyro_init();
 8009b8e:	f7fd fd77 	bl	8007680 <pl_gyro_init>
  pl_sensor_init();
 8009b92:	f7fd ff3d 	bl	8007a10 <pl_sensor_init>
  reset_distance();
 8009b96:	f7f7 fa01 	bl	8000f9c <reset_distance>
  reset_gyro();
 8009b9a:	f7f7 fe31 	bl	8001800 <reset_gyro>
  reset_speed();
 8009b9e:	f7f7 fa3b 	bl	8001018 <reset_speed>
  record_reset();
 8009ba2:	f004 ffe1 	bl	800eb68 <record_reset>
  pl_motor_init();
 8009ba6:	f7fd fe49 	bl	800783c <pl_motor_init>
  PID_Init();
 8009baa:	f7fa fef3 	bl	8004994 <PID_Init>
  init_WallControl();
 8009bae:	f7fb f859 	bl	8004c64 <init_WallControl>
  Control_mode_Init();
 8009bb2:	f7f8 f987 	bl	8001ec4 <Control_mode_Init>
  init_FailSafe();
 8009bb6:	f7ff fddd 	bl	8009774 <init_FailSafe>
  input_parameter();
 8009bba:	f005 fe57 	bl	800f86c <input_parameter>

	//uint8_t hello[] = "Hello World\n\r";
  //float PI=3.14;
  //uint8_t hoge = 3;
  int mode=0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60fb      	str	r3, [r7, #12]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009bc2:	4b37      	ldr	r3, [pc, #220]	; (8009ca0 <main+0x14c>)
 8009bc4:	881b      	ldrh	r3, [r3, #0]
 8009bc6:	4619      	mov	r1, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009bc8:	4b35      	ldr	r3, [pc, #212]	; (8009ca0 <main+0x14c>)
 8009bca:	885b      	ldrh	r3, [r3, #2]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009bcc:	4618      	mov	r0, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009bce:	4b34      	ldr	r3, [pc, #208]	; (8009ca0 <main+0x14c>)
 8009bd0:	889b      	ldrh	r3, [r3, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009bd2:	461c      	mov	r4, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009bd4:	4b32      	ldr	r3, [pc, #200]	; (8009ca0 <main+0x14c>)
 8009bd6:	88db      	ldrh	r3, [r3, #6]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009bd8:	461a      	mov	r2, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009bda:	4b31      	ldr	r3, [pc, #196]	; (8009ca0 <main+0x14c>)
 8009bdc:	891b      	ldrh	r3, [r3, #8]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009bde:	9301      	str	r3, [sp, #4]
 8009be0:	9200      	str	r2, [sp, #0]
 8009be2:	4623      	mov	r3, r4
 8009be4:	4602      	mov	r2, r0
 8009be6:	482f      	ldr	r0, [pc, #188]	; (8009ca4 <main+0x150>)
 8009be8:	f00e f936 	bl	8017e58 <iprintf>
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009bec:	4b2e      	ldr	r3, [pc, #184]	; (8009ca8 <main+0x154>)
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	4619      	mov	r1, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009bf2:	4b2d      	ldr	r3, [pc, #180]	; (8009ca8 <main+0x154>)
 8009bf4:	885b      	ldrh	r3, [r3, #2]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009bf6:	4618      	mov	r0, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009bf8:	4b2b      	ldr	r3, [pc, #172]	; (8009ca8 <main+0x154>)
 8009bfa:	889b      	ldrh	r3, [r3, #4]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009bfc:	461c      	mov	r4, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009bfe:	4b2a      	ldr	r3, [pc, #168]	; (8009ca8 <main+0x154>)
 8009c00:	88db      	ldrh	r3, [r3, #6]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c02:	461a      	mov	r2, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c04:	4b28      	ldr	r3, [pc, #160]	; (8009ca8 <main+0x154>)
 8009c06:	891b      	ldrh	r3, [r3, #8]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c08:	9301      	str	r3, [sp, #4]
 8009c0a:	9200      	str	r2, [sp, #0]
 8009c0c:	4623      	mov	r3, r4
 8009c0e:	4602      	mov	r2, r0
 8009c10:	4826      	ldr	r0, [pc, #152]	; (8009cac <main+0x158>)
 8009c12:	f00e f921 	bl	8017e58 <iprintf>
	battcheak();
 8009c16:	f7f7 ffff 	bl	8001c18 <battcheak>

//起動cheak
	int yellow_count=1;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009c1e:	2300      	movs	r3, #0
 8009c20:	607b      	str	r3, [r7, #4]
 8009c22:	e00d      	b.n	8009c40 <main+0xec>
		pl_yellow_LED_count(yellow_count);
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7fd fad1 	bl	80071d0 <pl_yellow_LED_count>
		HAL_Delay(50);
 8009c2e:	2032      	movs	r0, #50	; 0x32
 8009c30:	f006 fc28 	bl	8010484 <HAL_Delay>
		yellow_count=yellow_count*2;
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	005b      	lsls	r3, r3, #1
 8009c38:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	607b      	str	r3, [r7, #4]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b07      	cmp	r3, #7
 8009c44:	ddee      	ble.n	8009c24 <main+0xd0>
	}
	for(int i=0;i<9;i++){
 8009c46:	2300      	movs	r3, #0
 8009c48:	603b      	str	r3, [r7, #0]
 8009c4a:	e00f      	b.n	8009c6c <main+0x118>
			pl_yellow_LED_count(yellow_count);
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fd fabd 	bl	80071d0 <pl_yellow_LED_count>
			HAL_Delay(50);
 8009c56:	2032      	movs	r0, #50	; 0x32
 8009c58:	f006 fc14 	bl	8010484 <HAL_Delay>
			yellow_count=yellow_count/2;
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	0fda      	lsrs	r2, r3, #31
 8009c60:	4413      	add	r3, r2
 8009c62:	105b      	asrs	r3, r3, #1
 8009c64:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<9;i++){
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	603b      	str	r3, [r7, #0]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	2b08      	cmp	r3, #8
 8009c70:	ddec      	ble.n	8009c4c <main+0xf8>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  		mode=mode_decision(mode);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	4618      	mov	r0, r3
 8009c78:	f003 ffdc 	bl	800dc34 <mode_decision>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	60fb      	str	r3, [r7, #12]
//	  		clear_Ierror();
	  		reset_distance();
 8009c80:	f7f7 f98c 	bl	8000f9c <reset_distance>
	  		reset_gyro();
 8009c84:	f7f7 fdbc 	bl	8001800 <reset_gyro>
	  		reset_speed();
 8009c88:	f7f7 f9c6 	bl	8001018 <reset_speed>

	  		mode_execution(mode);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	4618      	mov	r0, r3
 8009c92:	f004 f8c9 	bl	800de28 <mode_execution>

	  		error_mode = 0;
 8009c96:	4b06      	ldr	r3, [pc, #24]	; (8009cb0 <main+0x15c>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	701a      	strb	r2, [r3, #0]
	  		mode=mode_decision(mode);
 8009c9c:	e7e9      	b.n	8009c72 <main+0x11e>
 8009c9e:	bf00      	nop
 8009ca0:	200006ec 	.word	0x200006ec
 8009ca4:	0801a528 	.word	0x0801a528
 8009ca8:	200006f8 	.word	0x200006f8
 8009cac:	0801a554 	.word	0x0801a554
 8009cb0:	200007e7 	.word	0x200007e7

08009cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b094      	sub	sp, #80	; 0x50
 8009cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009cba:	f107 0318 	add.w	r3, r7, #24
 8009cbe:	2238      	movs	r2, #56	; 0x38
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f00d fc56 	bl	8017574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009cc8:	1d3b      	adds	r3, r7, #4
 8009cca:	2200      	movs	r2, #0
 8009ccc:	601a      	str	r2, [r3, #0]
 8009cce:	605a      	str	r2, [r3, #4]
 8009cd0:	609a      	str	r2, [r3, #8]
 8009cd2:	60da      	str	r2, [r3, #12]
 8009cd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	f009 fb40 	bl	801335c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009ce0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ce4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009ce6:	2302      	movs	r3, #2
 8009ce8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009cea:	2303      	movs	r3, #3
 8009cec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8009cee:	2304      	movs	r3, #4
 8009cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8009cf2:	2355      	movs	r3, #85	; 0x55
 8009cf4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009cfa:	2302      	movs	r3, #2
 8009cfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009cfe:	2302      	movs	r3, #2
 8009d00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009d02:	f107 0318 	add.w	r3, r7, #24
 8009d06:	4618      	mov	r0, r3
 8009d08:	f009 fbdc 	bl	80134c4 <HAL_RCC_OscConfig>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8009d12:	f000 f81a 	bl	8009d4a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009d16:	230f      	movs	r3, #15
 8009d18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009d1a:	2303      	movs	r3, #3
 8009d1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009d22:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009d26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8009d28:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009d2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009d2e:	1d3b      	adds	r3, r7, #4
 8009d30:	2104      	movs	r1, #4
 8009d32:	4618      	mov	r0, r3
 8009d34:	f009 fede 	bl	8013af4 <HAL_RCC_ClockConfig>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d001      	beq.n	8009d42 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8009d3e:	f000 f804 	bl	8009d4a <Error_Handler>
  }
}
 8009d42:	bf00      	nop
 8009d44:	3750      	adds	r7, #80	; 0x50
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009d4e:	b672      	cpsid	i
}
 8009d50:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009d52:	e7fe      	b.n	8009d52 <Error_Handler+0x8>

08009d54 <slalomR>:
	wait_ms_NoReset(50);

}


void slalomR(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 8009d54:	b084      	sub	sp, #16
 8009d56:	b5b0      	push	{r4, r5, r7, lr}
 8009d58:	ed2d 8b02 	vpush	{d8}
 8009d5c:	b084      	sub	sp, #16
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8009d64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009d68:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 8009d6c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	f040 80f5 	bne.w	8009f60 <slalomR+0x20c>
		highspeed_mode = 0;
 8009d76:	4bcd      	ldr	r3, [pc, #820]	; (800a0ac <slalomR+0x358>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 8009d80:	2300      	movs	r3, #0
 8009d82:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 8009d84:	2300      	movs	r3, #0
 8009d86:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 8009d8c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d11f      	bne.n	8009dd4 <slalomR+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009d94:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009d98:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009d9c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009da0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009da4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009da8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009dac:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009db0:	eddf 5abf 	vldr	s11, [pc, #764]	; 800a0b0 <slalomR+0x35c>
 8009db4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	eeb0 2a47 	vmov.f32	s4, s14
 8009dbe:	eef0 1a46 	vmov.f32	s3, s12
 8009dc2:	eeb0 1a66 	vmov.f32	s2, s13
 8009dc6:	eddf 0abb 	vldr	s1, [pc, #748]	; 800a0b4 <slalomR+0x360>
 8009dca:	ed9f 0abb 	vldr	s0, [pc, #748]	; 800a0b8 <slalomR+0x364>
 8009dce:	f7f9 f969 	bl	80030a4 <straight_table2>
 8009dd2:	e01e      	b.n	8009e12 <slalomR+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009dd4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009dd8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009ddc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009de0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009de4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009de8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009dec:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009df0:	eddf 5aaf 	vldr	s11, [pc, #700]	; 800a0b0 <slalomR+0x35c>
 8009df4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	eeb0 2a47 	vmov.f32	s4, s14
 8009dfe:	eef0 1a46 	vmov.f32	s3, s12
 8009e02:	eeb0 1a66 	vmov.f32	s2, s13
 8009e06:	eddf 0aab 	vldr	s1, [pc, #684]	; 800a0b4 <slalomR+0x360>
 8009e0a:	ed9f 0aac 	vldr	s0, [pc, #688]	; 800a0bc <slalomR+0x368>
 8009e0e:	f7f9 f949 	bl	80030a4 <straight_table2>
		}
		wallmode.WallCutMode=1;
 8009e12:	2301      	movs	r3, #1
 8009e14:	73fb      	strb	r3, [r7, #15]
		wallmode.WallControlMode=0;
 8009e16:	2300      	movs	r3, #0
 8009e18:	733b      	strb	r3, [r7, #12]
		if(shortest_mode==0){
 8009e1a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d127      	bne.n	8009e72 <slalomR+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009e22:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009e26:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8009e2a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009e2e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009e32:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8009e36:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009e3a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009e3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009e42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e46:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8009e4a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009e4e:	eddf 4a98 	vldr	s9, [pc, #608]	; 800a0b0 <slalomR+0x35c>
 8009e52:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	eeb0 2a47 	vmov.f32	s4, s14
 8009e5c:	eef0 1a45 	vmov.f32	s3, s10
 8009e60:	eeb0 1a65 	vmov.f32	s2, s11
 8009e64:	eef0 0a46 	vmov.f32	s1, s12
 8009e68:	eeb0 0a66 	vmov.f32	s0, s13
 8009e6c:	f7f9 f91a 	bl	80030a4 <straight_table2>
 8009e70:	e022      	b.n	8009eb8 <slalomR+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009e72:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009e76:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009e7a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8009e7e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009e82:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009e86:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009e8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e8e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8009e92:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009e96:	eddf 4a86 	vldr	s9, [pc, #536]	; 800a0b0 <slalomR+0x35c>
 8009e9a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	eeb0 2a47 	vmov.f32	s4, s14
 8009ea4:	eef0 1a45 	vmov.f32	s3, s10
 8009ea8:	eeb0 1a65 	vmov.f32	s2, s11
 8009eac:	eef0 0a46 	vmov.f32	s1, s12
 8009eb0:	eeb0 0a66 	vmov.f32	s0, s13
 8009eb4:	f7f9 f8f6 	bl	80030a4 <straight_table2>
		}
		if(mollifier_mode == ON){
 8009eb8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d10c      	bne.n	8009eda <slalomR+0x186>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 8009ec0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009ec4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009ec8:	eeb0 1a47 	vmov.f32	s2, s14
 8009ecc:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800a0c0 <slalomR+0x36c>
 8009ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8009ed4:	f7f9 ffd8 	bl	8003e88 <mollifier_slalom_table>
 8009ed8:	e015      	b.n	8009f06 <slalomR+0x1b2>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8009eda:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009ede:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009ee2:	eef1 7a67 	vneg.f32	s15, s15
 8009ee6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8009eea:	eef0 2a66 	vmov.f32	s5, s13
 8009eee:	eeb0 2a67 	vmov.f32	s4, s15
 8009ef2:	eddf 1a70 	vldr	s3, [pc, #448]	; 800a0b4 <slalomR+0x360>
 8009ef6:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a0b4 <slalomR+0x360>
 8009efa:	eddf 0a71 	vldr	s1, [pc, #452]	; 800a0c0 <slalomR+0x36c>
 8009efe:	eeb0 0a47 	vmov.f32	s0, s14
 8009f02:	f7f9 fe81 	bl	8003c08 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 8009f06:	2300      	movs	r3, #0
 8009f08:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8009f0e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009f12:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a0b0 <slalomR+0x35c>
 8009f16:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009f1a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009f1e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009f22:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009f26:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009f2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f2e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8009f32:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8009f36:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800a0b0 <slalomR+0x35c>
 8009f3a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	eeb0 2a47 	vmov.f32	s4, s14
 8009f44:	eef0 1a65 	vmov.f32	s3, s11
 8009f48:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800a0b4 <slalomR+0x360>
 8009f4c:	eef0 0a46 	vmov.f32	s1, s12
 8009f50:	eeb0 0a66 	vmov.f32	s0, s13
 8009f54:	f7f9 f8a6 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 8009f58:	4b54      	ldr	r3, [pc, #336]	; (800a0ac <slalomR+0x358>)
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
//		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
//										fabs(end_velocity*end_velocity-turnpara.g_speed * turnpara.g_speed)  / 2 / turnpara.e_ofset,wallmode);
	}
}
 8009f5e:	e09c      	b.n	800a09a <slalomR+0x346>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 8009f60:	2300      	movs	r3, #0
 8009f62:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 8009f64:	2300      	movs	r3, #0
 8009f66:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009f70:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009f74:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009f78:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8009f7c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
													turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009f80:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009f84:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f8c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8009f90:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009f94:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a0b0 <slalomR+0x35c>
 8009f98:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	eeb0 2a47 	vmov.f32	s4, s14
 8009fa2:	eef0 1a45 	vmov.f32	s3, s10
 8009fa6:	eeb0 1a65 	vmov.f32	s2, s11
 8009faa:	eef0 0a46 	vmov.f32	s1, s12
 8009fae:	eeb0 0a66 	vmov.f32	s0, s13
 8009fb2:	f7f9 f877 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 8009fb6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d10c      	bne.n	8009fd8 <slalomR+0x284>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 8009fbe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009fc2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009fc6:	eeb0 1a47 	vmov.f32	s2, s14
 8009fca:	eddf 0a3d 	vldr	s1, [pc, #244]	; 800a0c0 <slalomR+0x36c>
 8009fce:	eeb0 0a67 	vmov.f32	s0, s15
 8009fd2:	f7f9 ff59 	bl	8003e88 <mollifier_slalom_table>
 8009fd6:	e015      	b.n	800a004 <slalomR+0x2b0>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8009fd8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009fdc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009fe0:	eef1 7a67 	vneg.f32	s15, s15
 8009fe4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8009fe8:	eef0 2a66 	vmov.f32	s5, s13
 8009fec:	eeb0 2a67 	vmov.f32	s4, s15
 8009ff0:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a0b4 <slalomR+0x360>
 8009ff4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a0b4 <slalomR+0x360>
 8009ff8:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a0c0 <slalomR+0x36c>
 8009ffc:	eeb0 0a47 	vmov.f32	s0, s14
 800a000:	f7f9 fe02 	bl	8003c08 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a004:	2300      	movs	r3, #0
 800a006:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a008:	2300      	movs	r3, #0
 800a00a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a00c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a010:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a014:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a018:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a01c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a020:	edd7 7a01 	vldr	s15, [r7, #4]
 800a024:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a02c:	eef0 7ae7 	vabs.f32	s15, s15
 800a030:	ee17 0a90 	vmov	r0, s15
 800a034:	f7f6 fab0 	bl	8000598 <__aeabi_f2d>
 800a038:	f04f 0200 	mov.w	r2, #0
 800a03c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a040:	f7f6 fc2c 	bl	800089c <__aeabi_ddiv>
 800a044:	4602      	mov	r2, r0
 800a046:	460b      	mov	r3, r1
 800a048:	4614      	mov	r4, r2
 800a04a:	461d      	mov	r5, r3
 800a04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04e:	4618      	mov	r0, r3
 800a050:	f7f6 faa2 	bl	8000598 <__aeabi_f2d>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	4620      	mov	r0, r4
 800a05a:	4629      	mov	r1, r5
 800a05c:	f7f6 fc1e 	bl	800089c <__aeabi_ddiv>
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4610      	mov	r0, r2
 800a066:	4619      	mov	r1, r3
 800a068:	f04f 0200 	mov.w	r2, #0
 800a06c:	4b15      	ldr	r3, [pc, #84]	; (800a0c4 <slalomR+0x370>)
 800a06e:	f7f6 f935 	bl	80002dc <__adddf3>
 800a072:	4602      	mov	r2, r0
 800a074:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a076:	4610      	mov	r0, r2
 800a078:	4619      	mov	r1, r3
 800a07a:	f7f6 fdbd 	bl	8000bf8 <__aeabi_d2f>
 800a07e:	4603      	mov	r3, r0
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	ee02 3a10 	vmov	s4, r3
 800a086:	edd7 1a01 	vldr	s3, [r7, #4]
 800a08a:	ed97 1a01 	vldr	s2, [r7, #4]
 800a08e:	eef0 0a68 	vmov.f32	s1, s17
 800a092:	eeb0 0a48 	vmov.f32	s0, s16
 800a096:	f7f9 f805 	bl	80030a4 <straight_table2>
}
 800a09a:	bf00      	nop
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	ecbd 8b02 	vpop	{d8}
 800a0a4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a0a8:	b004      	add	sp, #16
 800a0aa:	4770      	bx	lr
 800a0ac:	200007e8 	.word	0x200007e8
 800a0b0:	42340000 	.word	0x42340000
 800a0b4:	00000000 	.word	0x00000000
 800a0b8:	43200000 	.word	0x43200000
 800a0bc:	431a0000 	.word	0x431a0000
 800a0c0:	c2b40000 	.word	0xc2b40000
 800a0c4:	408f4000 	.word	0x408f4000

0800a0c8 <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800a0c8:	b084      	sub	sp, #16
 800a0ca:	b5b0      	push	{r4, r5, r7, lr}
 800a0cc:	ed2d 8b02 	vpush	{d8}
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a0d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a0dc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800a0e0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	f040 80f3 	bne.w	800a2d0 <slalomL+0x208>
		highspeed_mode = 0;
 800a0ea:	4bcb      	ldr	r3, [pc, #812]	; (800a418 <slalomL+0x350>)
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a100:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a104:	2b00      	cmp	r3, #0
 800a106:	d11f      	bne.n	800a148 <slalomL+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a108:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a10c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a110:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a114:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a118:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a11c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a120:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a124:	eddf 5abd 	vldr	s11, [pc, #756]	; 800a41c <slalomL+0x354>
 800a128:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	eeb0 2a47 	vmov.f32	s4, s14
 800a132:	eef0 1a46 	vmov.f32	s3, s12
 800a136:	eeb0 1a66 	vmov.f32	s2, s13
 800a13a:	eddf 0ab9 	vldr	s1, [pc, #740]	; 800a420 <slalomL+0x358>
 800a13e:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 800a424 <slalomL+0x35c>
 800a142:	f7f8 ffaf 	bl	80030a4 <straight_table2>
 800a146:	e01e      	b.n	800a186 <slalomL+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a148:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a14c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a150:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a154:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a15c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a160:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a164:	eddf 5aad 	vldr	s11, [pc, #692]	; 800a41c <slalomL+0x354>
 800a168:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	eeb0 2a47 	vmov.f32	s4, s14
 800a172:	eef0 1a46 	vmov.f32	s3, s12
 800a176:	eeb0 1a66 	vmov.f32	s2, s13
 800a17a:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800a420 <slalomL+0x358>
 800a17e:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 800a428 <slalomL+0x360>
 800a182:	f7f8 ff8f 	bl	80030a4 <straight_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a186:	2300      	movs	r3, #0
 800a188:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=1;
 800a18a:	2301      	movs	r3, #1
 800a18c:	73fb      	strb	r3, [r7, #15]
		if(shortest_mode==0){
 800a18e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a192:	2b00      	cmp	r3, #0
 800a194:	d127      	bne.n	800a1e6 <slalomL+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a196:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a19a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a19e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a1a2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a1a6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a1aa:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a1ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a1b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1ba:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a1be:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a1c2:	eddf 4a96 	vldr	s9, [pc, #600]	; 800a41c <slalomL+0x354>
 800a1c6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	eeb0 2a47 	vmov.f32	s4, s14
 800a1d0:	eef0 1a45 	vmov.f32	s3, s10
 800a1d4:	eeb0 1a65 	vmov.f32	s2, s11
 800a1d8:	eef0 0a46 	vmov.f32	s1, s12
 800a1dc:	eeb0 0a66 	vmov.f32	s0, s13
 800a1e0:	f7f8 ff60 	bl	80030a4 <straight_table2>
 800a1e4:	e022      	b.n	800a22c <slalomL+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a1e6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a1ea:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a1ee:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a1f2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a1f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a1fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a202:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a206:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a20a:	eddf 4a84 	vldr	s9, [pc, #528]	; 800a41c <slalomL+0x354>
 800a20e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	eeb0 2a47 	vmov.f32	s4, s14
 800a218:	eef0 1a45 	vmov.f32	s3, s10
 800a21c:	eeb0 1a65 	vmov.f32	s2, s11
 800a220:	eef0 0a46 	vmov.f32	s1, s12
 800a224:	eeb0 0a66 	vmov.f32	s0, s13
 800a228:	f7f8 ff3c 	bl	80030a4 <straight_table2>
		}
		if(mollifier_mode == ON){
 800a22c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a230:	2b01      	cmp	r3, #1
 800a232:	d10c      	bne.n	800a24e <slalomL+0x186>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a234:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a238:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a23c:	eeb0 1a47 	vmov.f32	s2, s14
 800a240:	eddf 0a7a 	vldr	s1, [pc, #488]	; 800a42c <slalomL+0x364>
 800a244:	eeb0 0a67 	vmov.f32	s0, s15
 800a248:	f7f9 fe1e 	bl	8003e88 <mollifier_slalom_table>
 800a24c:	e013      	b.n	800a276 <slalomL+0x1ae>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a24e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a252:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a256:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a25a:	eef0 2a66 	vmov.f32	s5, s13
 800a25e:	eeb0 2a47 	vmov.f32	s4, s14
 800a262:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800a420 <slalomL+0x358>
 800a266:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800a420 <slalomL+0x358>
 800a26a:	eddf 0a70 	vldr	s1, [pc, #448]	; 800a42c <slalomL+0x364>
 800a26e:	eeb0 0a67 	vmov.f32	s0, s15
 800a272:	f7f9 fcc9 	bl	8003c08 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a276:	2300      	movs	r3, #0
 800a278:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a27a:	2300      	movs	r3, #0
 800a27c:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a27e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a282:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800a41c <slalomL+0x354>
 800a286:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a28a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a28e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a292:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a296:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a29a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a29e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a2a2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a2a6:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800a41c <slalomL+0x354>
 800a2aa:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	eeb0 2a47 	vmov.f32	s4, s14
 800a2b4:	eef0 1a65 	vmov.f32	s3, s11
 800a2b8:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800a420 <slalomL+0x358>
 800a2bc:	eef0 0a46 	vmov.f32	s1, s12
 800a2c0:	eeb0 0a66 	vmov.f32	s0, s13
 800a2c4:	f7f8 feee 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800a2c8:	4b53      	ldr	r3, [pc, #332]	; (800a418 <slalomL+0x350>)
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	701a      	strb	r2, [r3, #0]
		wallmode.WallCutMode=0;
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}
}
 800a2ce:	e09a      	b.n	800a406 <slalomL+0x33e>
		wallmode.WallControlMode=0;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a2e0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a2e4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a2e8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a2ec:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
													turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a2f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a2f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a2f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2fc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a300:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a304:	eddf 4a45 	vldr	s9, [pc, #276]	; 800a41c <slalomL+0x354>
 800a308:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	eeb0 2a47 	vmov.f32	s4, s14
 800a312:	eef0 1a45 	vmov.f32	s3, s10
 800a316:	eeb0 1a65 	vmov.f32	s2, s11
 800a31a:	eef0 0a46 	vmov.f32	s1, s12
 800a31e:	eeb0 0a66 	vmov.f32	s0, s13
 800a322:	f7f8 febf 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800a326:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d10c      	bne.n	800a348 <slalomL+0x280>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a32e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a332:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a336:	eeb0 1a47 	vmov.f32	s2, s14
 800a33a:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a42c <slalomL+0x364>
 800a33e:	eeb0 0a67 	vmov.f32	s0, s15
 800a342:	f7f9 fda1 	bl	8003e88 <mollifier_slalom_table>
 800a346:	e013      	b.n	800a370 <slalomL+0x2a8>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a348:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a34c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a350:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a354:	eef0 2a66 	vmov.f32	s5, s13
 800a358:	eeb0 2a47 	vmov.f32	s4, s14
 800a35c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a420 <slalomL+0x358>
 800a360:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a420 <slalomL+0x358>
 800a364:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a42c <slalomL+0x364>
 800a368:	eeb0 0a67 	vmov.f32	s0, s15
 800a36c:	f7f9 fc4c 	bl	8003c08 <slalom_table2>
		wallmode.WallControlMode=0;
 800a370:	2300      	movs	r3, #0
 800a372:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a374:	2300      	movs	r3, #0
 800a376:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a378:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a37c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a380:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a384:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a388:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a38c:	edd7 7a01 	vldr	s15, [r7, #4]
 800a390:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a394:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a398:	eef0 7ae7 	vabs.f32	s15, s15
 800a39c:	ee17 0a90 	vmov	r0, s15
 800a3a0:	f7f6 f8fa 	bl	8000598 <__aeabi_f2d>
 800a3a4:	f04f 0200 	mov.w	r2, #0
 800a3a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a3ac:	f7f6 fa76 	bl	800089c <__aeabi_ddiv>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4614      	mov	r4, r2
 800a3b6:	461d      	mov	r5, r3
 800a3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7f6 f8ec 	bl	8000598 <__aeabi_f2d>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	f7f6 fa68 	bl	800089c <__aeabi_ddiv>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	4610      	mov	r0, r2
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	f04f 0200 	mov.w	r2, #0
 800a3d8:	4b15      	ldr	r3, [pc, #84]	; (800a430 <slalomL+0x368>)
 800a3da:	f7f5 ff7f 	bl	80002dc <__adddf3>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a3e2:	4610      	mov	r0, r2
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	f7f6 fc07 	bl	8000bf8 <__aeabi_d2f>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	ee02 3a10 	vmov	s4, r3
 800a3f2:	edd7 1a01 	vldr	s3, [r7, #4]
 800a3f6:	ed97 1a01 	vldr	s2, [r7, #4]
 800a3fa:	eef0 0a68 	vmov.f32	s1, s17
 800a3fe:	eeb0 0a48 	vmov.f32	s0, s16
 800a402:	f7f8 fe4f 	bl	80030a4 <straight_table2>
}
 800a406:	bf00      	nop
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	ecbd 8b02 	vpop	{d8}
 800a410:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a414:	b004      	add	sp, #16
 800a416:	4770      	bx	lr
 800a418:	200007e8 	.word	0x200007e8
 800a41c:	42340000 	.word	0x42340000
 800a420:	00000000 	.word	0x00000000
 800a424:	43200000 	.word	0x43200000
 800a428:	431a0000 	.word	0x431a0000
 800a42c:	42b40000 	.word	0x42b40000
 800a430:	408f4000 	.word	0x408f4000

0800a434 <turn90R>:


void turn90R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a434:	b084      	sub	sp, #16
 800a436:	b5b0      	push	{r4, r5, r7, lr}
 800a438:	ed2d 8b02 	vpush	{d8}
 800a43c:	b084      	sub	sp, #16
 800a43e:	af00      	add	r7, sp, #0
 800a440:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a444:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a448:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a44c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a450:	2b01      	cmp	r3, #1
 800a452:	f040 80a5 	bne.w	800a5a0 <turn90R+0x16c>
		highspeed_mode = 1;
 800a456:	4ba5      	ldr	r3, [pc, #660]	; (800a6ec <turn90R+0x2b8>)
 800a458:	2201      	movs	r2, #1
 800a45a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a45c:	2301      	movs	r3, #1
 800a45e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a460:	2300      	movs	r3, #0
 800a462:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a464:	2300      	movs	r3, #0
 800a466:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a468:	2300      	movs	r3, #0
 800a46a:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a46c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a470:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a474:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a478:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a47c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a480:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a484:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a488:	eddf 5a99 	vldr	s11, [pc, #612]	; 800a6f0 <turn90R+0x2bc>
 800a48c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	eeb0 2a47 	vmov.f32	s4, s14
 800a496:	eef0 1a46 	vmov.f32	s3, s12
 800a49a:	eeb0 1a66 	vmov.f32	s2, s13
 800a49e:	eddf 0a95 	vldr	s1, [pc, #596]	; 800a6f4 <turn90R+0x2c0>
 800a4a2:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800a6f8 <turn90R+0x2c4>
 800a4a6:	f7f8 fdfd 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800a4ae:	2302      	movs	r3, #2
 800a4b0:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a4b2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a4b6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a4ba:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a4be:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a4c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a4c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4ce:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a4d2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a4d6:	eddf 4a86 	vldr	s9, [pc, #536]	; 800a6f0 <turn90R+0x2bc>
 800a4da:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	eeb0 2a47 	vmov.f32	s4, s14
 800a4e4:	eef0 1a45 	vmov.f32	s3, s10
 800a4e8:	eeb0 1a65 	vmov.f32	s2, s11
 800a4ec:	eef0 0a46 	vmov.f32	s1, s12
 800a4f0:	eeb0 0a66 	vmov.f32	s0, s13
 800a4f4:	f7f8 fdd6 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800a4f8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d10c      	bne.n	800a51a <turn90R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a500:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a504:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a508:	eeb0 1a47 	vmov.f32	s2, s14
 800a50c:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800a6fc <turn90R+0x2c8>
 800a510:	eeb0 0a67 	vmov.f32	s0, s15
 800a514:	f7f9 fcb8 	bl	8003e88 <mollifier_slalom_table>
 800a518:	e015      	b.n	800a546 <turn90R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a51a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a51e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a522:	eef1 7a67 	vneg.f32	s15, s15
 800a526:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a52a:	eef0 2a66 	vmov.f32	s5, s13
 800a52e:	eeb0 2a67 	vmov.f32	s4, s15
 800a532:	eddf 1a70 	vldr	s3, [pc, #448]	; 800a6f4 <turn90R+0x2c0>
 800a536:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a6f4 <turn90R+0x2c0>
 800a53a:	eddf 0a70 	vldr	s1, [pc, #448]	; 800a6fc <turn90R+0x2c8>
 800a53e:	eeb0 0a47 	vmov.f32	s0, s14
 800a542:	f7f9 fb61 	bl	8003c08 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a546:	2300      	movs	r3, #0
 800a548:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a54e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a552:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800a700 <turn90R+0x2cc>
 800a556:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a55a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a55e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a562:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a566:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a56a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a56e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a572:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a576:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800a6f0 <turn90R+0x2bc>
 800a57a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	eeb0 2a47 	vmov.f32	s4, s14
 800a584:	eef0 1a65 	vmov.f32	s3, s11
 800a588:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800a6f4 <turn90R+0x2c0>
 800a58c:	eef0 0a46 	vmov.f32	s1, s12
 800a590:	eeb0 0a66 	vmov.f32	s0, s13
 800a594:	f7f8 fd86 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800a598:	4b54      	ldr	r3, [pc, #336]	; (800a6ec <turn90R+0x2b8>)
 800a59a:	2200      	movs	r2, #0
 800a59c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800a59e:	e09c      	b.n	800a6da <turn90R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800a5a8:	2302      	movs	r3, #2
 800a5aa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a5b0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a5b4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a5b8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a5bc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a5c0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a5c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a5c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a5cc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a5d0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a5d4:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a6f0 <turn90R+0x2bc>
 800a5d8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a5dc:	68f8      	ldr	r0, [r7, #12]
 800a5de:	eeb0 2a47 	vmov.f32	s4, s14
 800a5e2:	eef0 1a45 	vmov.f32	s3, s10
 800a5e6:	eeb0 1a65 	vmov.f32	s2, s11
 800a5ea:	eef0 0a46 	vmov.f32	s1, s12
 800a5ee:	eeb0 0a66 	vmov.f32	s0, s13
 800a5f2:	f7f8 fd57 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800a5f6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d10c      	bne.n	800a618 <turn90R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a5fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a602:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a606:	eeb0 1a47 	vmov.f32	s2, s14
 800a60a:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a6fc <turn90R+0x2c8>
 800a60e:	eeb0 0a67 	vmov.f32	s0, s15
 800a612:	f7f9 fc39 	bl	8003e88 <mollifier_slalom_table>
 800a616:	e015      	b.n	800a644 <turn90R+0x210>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a618:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a61c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a620:	eef1 7a67 	vneg.f32	s15, s15
 800a624:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a628:	eef0 2a66 	vmov.f32	s5, s13
 800a62c:	eeb0 2a67 	vmov.f32	s4, s15
 800a630:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a6f4 <turn90R+0x2c0>
 800a634:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a6f4 <turn90R+0x2c0>
 800a638:	eddf 0a30 	vldr	s1, [pc, #192]	; 800a6fc <turn90R+0x2c8>
 800a63c:	eeb0 0a47 	vmov.f32	s0, s14
 800a640:	f7f9 fae2 	bl	8003c08 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800a644:	2301      	movs	r3, #1
 800a646:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a648:	2300      	movs	r3, #0
 800a64a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a64c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a650:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a654:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a658:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a65c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a660:	edd7 7a01 	vldr	s15, [r7, #4]
 800a664:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a66c:	eef0 7ae7 	vabs.f32	s15, s15
 800a670:	ee17 0a90 	vmov	r0, s15
 800a674:	f7f5 ff90 	bl	8000598 <__aeabi_f2d>
 800a678:	f04f 0200 	mov.w	r2, #0
 800a67c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a680:	f7f6 f90c 	bl	800089c <__aeabi_ddiv>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	4614      	mov	r4, r2
 800a68a:	461d      	mov	r5, r3
 800a68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68e:	4618      	mov	r0, r3
 800a690:	f7f5 ff82 	bl	8000598 <__aeabi_f2d>
 800a694:	4602      	mov	r2, r0
 800a696:	460b      	mov	r3, r1
 800a698:	4620      	mov	r0, r4
 800a69a:	4629      	mov	r1, r5
 800a69c:	f7f6 f8fe 	bl	800089c <__aeabi_ddiv>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4610      	mov	r0, r2
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	f04f 0200 	mov.w	r2, #0
 800a6ac:	4b15      	ldr	r3, [pc, #84]	; (800a704 <turn90R+0x2d0>)
 800a6ae:	f7f5 fe15 	bl	80002dc <__adddf3>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a6b6:	4610      	mov	r0, r2
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	f7f6 fa9d 	bl	8000bf8 <__aeabi_d2f>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	ee02 3a10 	vmov	s4, r3
 800a6c6:	edd7 1a01 	vldr	s3, [r7, #4]
 800a6ca:	ed97 1a01 	vldr	s2, [r7, #4]
 800a6ce:	eef0 0a68 	vmov.f32	s1, s17
 800a6d2:	eeb0 0a48 	vmov.f32	s0, s16
 800a6d6:	f7f8 fce5 	bl	80030a4 <straight_table2>
}
 800a6da:	bf00      	nop
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	ecbd 8b02 	vpop	{d8}
 800a6e4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a6e8:	b004      	add	sp, #16
 800a6ea:	4770      	bx	lr
 800a6ec:	200007e8 	.word	0x200007e8
 800a6f0:	42340000 	.word	0x42340000
 800a6f4:	00000000 	.word	0x00000000
 800a6f8:	42da0000 	.word	0x42da0000
 800a6fc:	c2b40000 	.word	0xc2b40000
 800a700:	42b40000 	.word	0x42b40000
 800a704:	408f4000 	.word	0x408f4000

0800a708 <turn90L>:

void turn90L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a708:	b084      	sub	sp, #16
 800a70a:	b5b0      	push	{r4, r5, r7, lr}
 800a70c:	ed2d 8b02 	vpush	{d8}
 800a710:	b084      	sub	sp, #16
 800a712:	af00      	add	r7, sp, #0
 800a714:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a71c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a720:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a724:	2b01      	cmp	r3, #1
 800a726:	f040 80a3 	bne.w	800a870 <turn90L+0x168>
		highspeed_mode = 1;
 800a72a:	4ba3      	ldr	r3, [pc, #652]	; (800a9b8 <turn90L+0x2b0>)
 800a72c:	2201      	movs	r2, #1
 800a72e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a730:	2301      	movs	r3, #1
 800a732:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a734:	2300      	movs	r3, #0
 800a736:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a738:	2300      	movs	r3, #0
 800a73a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a73c:	2300      	movs	r3, #0
 800a73e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a740:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a744:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a748:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a74c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a750:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a754:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a758:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a75c:	eddf 5a97 	vldr	s11, [pc, #604]	; 800a9bc <turn90L+0x2b4>
 800a760:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	eeb0 2a47 	vmov.f32	s4, s14
 800a76a:	eef0 1a46 	vmov.f32	s3, s12
 800a76e:	eeb0 1a66 	vmov.f32	s2, s13
 800a772:	eddf 0a93 	vldr	s1, [pc, #588]	; 800a9c0 <turn90L+0x2b8>
 800a776:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800a9c4 <turn90L+0x2bc>
 800a77a:	f7f8 fc93 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800a77e:	2300      	movs	r3, #0
 800a780:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800a782:	2302      	movs	r3, #2
 800a784:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a786:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a78a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a78e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a792:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a796:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a79a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a79e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7a2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a7a6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a7aa:	eddf 4a84 	vldr	s9, [pc, #528]	; 800a9bc <turn90L+0x2b4>
 800a7ae:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	eeb0 2a47 	vmov.f32	s4, s14
 800a7b8:	eef0 1a45 	vmov.f32	s3, s10
 800a7bc:	eeb0 1a65 	vmov.f32	s2, s11
 800a7c0:	eef0 0a46 	vmov.f32	s1, s12
 800a7c4:	eeb0 0a66 	vmov.f32	s0, s13
 800a7c8:	f7f8 fc6c 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800a7cc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d10c      	bne.n	800a7ee <turn90L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a7d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a7dc:	eeb0 1a47 	vmov.f32	s2, s14
 800a7e0:	eddf 0a79 	vldr	s1, [pc, #484]	; 800a9c8 <turn90L+0x2c0>
 800a7e4:	eeb0 0a67 	vmov.f32	s0, s15
 800a7e8:	f7f9 fb4e 	bl	8003e88 <mollifier_slalom_table>
 800a7ec:	e013      	b.n	800a816 <turn90L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a7ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7f2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a7f6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a7fa:	eef0 2a66 	vmov.f32	s5, s13
 800a7fe:	eeb0 2a47 	vmov.f32	s4, s14
 800a802:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800a9c0 <turn90L+0x2b8>
 800a806:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800a9c0 <turn90L+0x2b8>
 800a80a:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800a9c8 <turn90L+0x2c0>
 800a80e:	eeb0 0a67 	vmov.f32	s0, s15
 800a812:	f7f9 f9f9 	bl	8003c08 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a816:	2300      	movs	r3, #0
 800a818:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a81a:	2300      	movs	r3, #0
 800a81c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a81e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a822:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800a9c8 <turn90L+0x2c0>
 800a826:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a82a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a82e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a832:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a836:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a83a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a83e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a842:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a846:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800a9bc <turn90L+0x2b4>
 800a84a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	eeb0 2a47 	vmov.f32	s4, s14
 800a854:	eef0 1a65 	vmov.f32	s3, s11
 800a858:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800a9c0 <turn90L+0x2b8>
 800a85c:	eef0 0a46 	vmov.f32	s1, s12
 800a860:	eeb0 0a66 	vmov.f32	s0, s13
 800a864:	f7f8 fc1e 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800a868:	4b53      	ldr	r3, [pc, #332]	; (800a9b8 <turn90L+0x2b0>)
 800a86a:	2200      	movs	r2, #0
 800a86c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800a86e:	e09a      	b.n	800a9a6 <turn90L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800a870:	2300      	movs	r3, #0
 800a872:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a874:	2300      	movs	r3, #0
 800a876:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800a878:	2302      	movs	r3, #2
 800a87a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a87c:	2300      	movs	r3, #0
 800a87e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a880:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a884:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a888:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a88c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a890:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a894:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a898:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a89c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a8a0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a8a4:	eddf 4a45 	vldr	s9, [pc, #276]	; 800a9bc <turn90L+0x2b4>
 800a8a8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a8ac:	68f8      	ldr	r0, [r7, #12]
 800a8ae:	eeb0 2a47 	vmov.f32	s4, s14
 800a8b2:	eef0 1a45 	vmov.f32	s3, s10
 800a8b6:	eeb0 1a65 	vmov.f32	s2, s11
 800a8ba:	eef0 0a46 	vmov.f32	s1, s12
 800a8be:	eeb0 0a66 	vmov.f32	s0, s13
 800a8c2:	f7f8 fbef 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800a8c6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d10c      	bne.n	800a8e8 <turn90L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a8ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a8d2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a8d6:	eeb0 1a47 	vmov.f32	s2, s14
 800a8da:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800a9c8 <turn90L+0x2c0>
 800a8de:	eeb0 0a67 	vmov.f32	s0, s15
 800a8e2:	f7f9 fad1 	bl	8003e88 <mollifier_slalom_table>
 800a8e6:	e013      	b.n	800a910 <turn90L+0x208>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a8e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a8ec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a8f0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a8f4:	eef0 2a66 	vmov.f32	s5, s13
 800a8f8:	eeb0 2a47 	vmov.f32	s4, s14
 800a8fc:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a9c0 <turn90L+0x2b8>
 800a900:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a9c0 <turn90L+0x2b8>
 800a904:	eddf 0a30 	vldr	s1, [pc, #192]	; 800a9c8 <turn90L+0x2c0>
 800a908:	eeb0 0a67 	vmov.f32	s0, s15
 800a90c:	f7f9 f97c 	bl	8003c08 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800a910:	2301      	movs	r3, #1
 800a912:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a914:	2300      	movs	r3, #0
 800a916:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a918:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a91c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a920:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a924:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a928:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a92c:	edd7 7a01 	vldr	s15, [r7, #4]
 800a930:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a934:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a938:	eef0 7ae7 	vabs.f32	s15, s15
 800a93c:	ee17 0a90 	vmov	r0, s15
 800a940:	f7f5 fe2a 	bl	8000598 <__aeabi_f2d>
 800a944:	f04f 0200 	mov.w	r2, #0
 800a948:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a94c:	f7f5 ffa6 	bl	800089c <__aeabi_ddiv>
 800a950:	4602      	mov	r2, r0
 800a952:	460b      	mov	r3, r1
 800a954:	4614      	mov	r4, r2
 800a956:	461d      	mov	r5, r3
 800a958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7f5 fe1c 	bl	8000598 <__aeabi_f2d>
 800a960:	4602      	mov	r2, r0
 800a962:	460b      	mov	r3, r1
 800a964:	4620      	mov	r0, r4
 800a966:	4629      	mov	r1, r5
 800a968:	f7f5 ff98 	bl	800089c <__aeabi_ddiv>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	4610      	mov	r0, r2
 800a972:	4619      	mov	r1, r3
 800a974:	f04f 0200 	mov.w	r2, #0
 800a978:	4b14      	ldr	r3, [pc, #80]	; (800a9cc <turn90L+0x2c4>)
 800a97a:	f7f5 fcaf 	bl	80002dc <__adddf3>
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a982:	4610      	mov	r0, r2
 800a984:	4619      	mov	r1, r3
 800a986:	f7f6 f937 	bl	8000bf8 <__aeabi_d2f>
 800a98a:	4603      	mov	r3, r0
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	ee02 3a10 	vmov	s4, r3
 800a992:	edd7 1a01 	vldr	s3, [r7, #4]
 800a996:	ed97 1a01 	vldr	s2, [r7, #4]
 800a99a:	eef0 0a68 	vmov.f32	s1, s17
 800a99e:	eeb0 0a48 	vmov.f32	s0, s16
 800a9a2:	f7f8 fb7f 	bl	80030a4 <straight_table2>
}
 800a9a6:	bf00      	nop
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	ecbd 8b02 	vpop	{d8}
 800a9b0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a9b4:	b004      	add	sp, #16
 800a9b6:	4770      	bx	lr
 800a9b8:	200007e8 	.word	0x200007e8
 800a9bc:	42340000 	.word	0x42340000
 800a9c0:	00000000 	.word	0x00000000
 800a9c4:	42da0000 	.word	0x42da0000
 800a9c8:	42b40000 	.word	0x42b40000
 800a9cc:	408f4000 	.word	0x408f4000

0800a9d0 <turn180R>:


void turn180R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a9d0:	b084      	sub	sp, #16
 800a9d2:	b5b0      	push	{r4, r5, r7, lr}
 800a9d4:	ed2d 8b02 	vpush	{d8}
 800a9d8:	b084      	sub	sp, #16
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a9e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a9e4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a9e8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	f040 80a5 	bne.w	800ab3c <turn180R+0x16c>
		highspeed_mode = 1;
 800a9f2:	4ba5      	ldr	r3, [pc, #660]	; (800ac88 <turn180R+0x2b8>)
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aa08:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800aa0c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa10:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa14:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa18:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa1c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800aa20:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aa24:	eddf 5a99 	vldr	s11, [pc, #612]	; 800ac8c <turn180R+0x2bc>
 800aa28:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	eeb0 2a47 	vmov.f32	s4, s14
 800aa32:	eef0 1a46 	vmov.f32	s3, s12
 800aa36:	eeb0 1a66 	vmov.f32	s2, s13
 800aa3a:	eddf 0a95 	vldr	s1, [pc, #596]	; 800ac90 <turn180R+0x2c0>
 800aa3e:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800ac94 <turn180R+0x2c4>
 800aa42:	f7f8 fb2f 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800aa4a:	2302      	movs	r3, #2
 800aa4c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aa4e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aa52:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aa56:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800aa5a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa5e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa62:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa66:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa6a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800aa6e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aa72:	eddf 4a86 	vldr	s9, [pc, #536]	; 800ac8c <turn180R+0x2bc>
 800aa76:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	eeb0 2a47 	vmov.f32	s4, s14
 800aa80:	eef0 1a45 	vmov.f32	s3, s10
 800aa84:	eeb0 1a65 	vmov.f32	s2, s11
 800aa88:	eef0 0a46 	vmov.f32	s1, s12
 800aa8c:	eeb0 0a66 	vmov.f32	s0, s13
 800aa90:	f7f8 fb08 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800aa94:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d10c      	bne.n	800aab6 <turn180R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800aa9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aaa0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aaa4:	eeb0 1a47 	vmov.f32	s2, s14
 800aaa8:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800ac98 <turn180R+0x2c8>
 800aaac:	eeb0 0a67 	vmov.f32	s0, s15
 800aab0:	f7f9 f9ea 	bl	8003e88 <mollifier_slalom_table>
 800aab4:	e015      	b.n	800aae2 <turn180R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800aab6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aaba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800aabe:	eef1 7a67 	vneg.f32	s15, s15
 800aac2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800aac6:	eef0 2a66 	vmov.f32	s5, s13
 800aaca:	eeb0 2a67 	vmov.f32	s4, s15
 800aace:	eddf 1a70 	vldr	s3, [pc, #448]	; 800ac90 <turn180R+0x2c0>
 800aad2:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800ac90 <turn180R+0x2c0>
 800aad6:	eddf 0a70 	vldr	s1, [pc, #448]	; 800ac98 <turn180R+0x2c8>
 800aada:	eeb0 0a47 	vmov.f32	s0, s14
 800aade:	f7f9 f893 	bl	8003c08 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800aaea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800aaee:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800ac9c <turn180R+0x2cc>
 800aaf2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800aaf6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aafa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aafe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab02:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab06:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab0a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ab0e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ab12:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800ac8c <turn180R+0x2bc>
 800ab16:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	eeb0 2a47 	vmov.f32	s4, s14
 800ab20:	eef0 1a65 	vmov.f32	s3, s11
 800ab24:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800ac90 <turn180R+0x2c0>
 800ab28:	eef0 0a46 	vmov.f32	s1, s12
 800ab2c:	eeb0 0a66 	vmov.f32	s0, s13
 800ab30:	f7f8 fab8 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800ab34:	4b54      	ldr	r3, [pc, #336]	; (800ac88 <turn180R+0x2b8>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ab3a:	e09c      	b.n	800ac76 <turn180R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ab40:	2300      	movs	r3, #0
 800ab42:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ab44:	2302      	movs	r3, #2
 800ab46:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab4c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ab50:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ab54:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ab58:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ab5c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab68:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ab6c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab70:	eddf 4a46 	vldr	s9, [pc, #280]	; 800ac8c <turn180R+0x2bc>
 800ab74:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	eeb0 2a47 	vmov.f32	s4, s14
 800ab7e:	eef0 1a45 	vmov.f32	s3, s10
 800ab82:	eeb0 1a65 	vmov.f32	s2, s11
 800ab86:	eef0 0a46 	vmov.f32	s1, s12
 800ab8a:	eeb0 0a66 	vmov.f32	s0, s13
 800ab8e:	f7f8 fa89 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800ab92:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d10c      	bne.n	800abb4 <turn180R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800ab9a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab9e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aba2:	eeb0 1a47 	vmov.f32	s2, s14
 800aba6:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800ac98 <turn180R+0x2c8>
 800abaa:	eeb0 0a67 	vmov.f32	s0, s15
 800abae:	f7f9 f96b 	bl	8003e88 <mollifier_slalom_table>
 800abb2:	e015      	b.n	800abe0 <turn180R+0x210>
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800abb4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800abb8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800abbc:	eef1 7a67 	vneg.f32	s15, s15
 800abc0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800abc4:	eef0 2a66 	vmov.f32	s5, s13
 800abc8:	eeb0 2a67 	vmov.f32	s4, s15
 800abcc:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ac90 <turn180R+0x2c0>
 800abd0:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ac90 <turn180R+0x2c0>
 800abd4:	eddf 0a30 	vldr	s1, [pc, #192]	; 800ac98 <turn180R+0x2c8>
 800abd8:	eeb0 0a47 	vmov.f32	s0, s14
 800abdc:	f7f9 f814 	bl	8003c08 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800abe0:	2301      	movs	r3, #1
 800abe2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800abe4:	2300      	movs	r3, #0
 800abe6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800abe8:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800abec:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800abf0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800abf4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abfc:	edd7 7a01 	vldr	s15, [r7, #4]
 800ac00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ac04:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac08:	eef0 7ae7 	vabs.f32	s15, s15
 800ac0c:	ee17 0a90 	vmov	r0, s15
 800ac10:	f7f5 fcc2 	bl	8000598 <__aeabi_f2d>
 800ac14:	f04f 0200 	mov.w	r2, #0
 800ac18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac1c:	f7f5 fe3e 	bl	800089c <__aeabi_ddiv>
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	4614      	mov	r4, r2
 800ac26:	461d      	mov	r5, r3
 800ac28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7f5 fcb4 	bl	8000598 <__aeabi_f2d>
 800ac30:	4602      	mov	r2, r0
 800ac32:	460b      	mov	r3, r1
 800ac34:	4620      	mov	r0, r4
 800ac36:	4629      	mov	r1, r5
 800ac38:	f7f5 fe30 	bl	800089c <__aeabi_ddiv>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	460b      	mov	r3, r1
 800ac40:	4610      	mov	r0, r2
 800ac42:	4619      	mov	r1, r3
 800ac44:	f04f 0200 	mov.w	r2, #0
 800ac48:	4b15      	ldr	r3, [pc, #84]	; (800aca0 <turn180R+0x2d0>)
 800ac4a:	f7f5 fb47 	bl	80002dc <__adddf3>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ac52:	4610      	mov	r0, r2
 800ac54:	4619      	mov	r1, r3
 800ac56:	f7f5 ffcf 	bl	8000bf8 <__aeabi_d2f>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	ee02 3a10 	vmov	s4, r3
 800ac62:	edd7 1a01 	vldr	s3, [r7, #4]
 800ac66:	ed97 1a01 	vldr	s2, [r7, #4]
 800ac6a:	eef0 0a68 	vmov.f32	s1, s17
 800ac6e:	eeb0 0a48 	vmov.f32	s0, s16
 800ac72:	f7f8 fa17 	bl	80030a4 <straight_table2>
}
 800ac76:	bf00      	nop
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	ecbd 8b02 	vpop	{d8}
 800ac80:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ac84:	b004      	add	sp, #16
 800ac86:	4770      	bx	lr
 800ac88:	200007e8 	.word	0x200007e8
 800ac8c:	42340000 	.word	0x42340000
 800ac90:	00000000 	.word	0x00000000
 800ac94:	42da0000 	.word	0x42da0000
 800ac98:	c3340000 	.word	0xc3340000
 800ac9c:	42b40000 	.word	0x42b40000
 800aca0:	408f4000 	.word	0x408f4000

0800aca4 <turn180L>:

void turn180L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800aca4:	b084      	sub	sp, #16
 800aca6:	b5b0      	push	{r4, r5, r7, lr}
 800aca8:	ed2d 8b02 	vpush	{d8}
 800acac:	b084      	sub	sp, #16
 800acae:	af00      	add	r7, sp, #0
 800acb0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800acb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800acb8:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800acbc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	f040 80a3 	bne.w	800ae0c <turn180L+0x168>
		highspeed_mode = 1;
 800acc6:	4ba3      	ldr	r3, [pc, #652]	; (800af54 <turn180L+0x2b0>)
 800acc8:	2201      	movs	r2, #1
 800acca:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800accc:	2301      	movs	r3, #1
 800acce:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800acd4:	2300      	movs	r3, #0
 800acd6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800acd8:	2300      	movs	r3, #0
 800acda:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800acdc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ace0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ace4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ace8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800acec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800acf0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800acf4:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800acf8:	eddf 5a97 	vldr	s11, [pc, #604]	; 800af58 <turn180L+0x2b4>
 800acfc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	eeb0 2a47 	vmov.f32	s4, s14
 800ad06:	eef0 1a46 	vmov.f32	s3, s12
 800ad0a:	eeb0 1a66 	vmov.f32	s2, s13
 800ad0e:	eddf 0a93 	vldr	s1, [pc, #588]	; 800af5c <turn180L+0x2b8>
 800ad12:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800af60 <turn180L+0x2bc>
 800ad16:	f7f8 f9c5 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800ad1e:	2302      	movs	r3, #2
 800ad20:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad22:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ad26:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ad2a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ad2e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ad32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad36:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad3e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ad42:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad46:	eddf 4a84 	vldr	s9, [pc, #528]	; 800af58 <turn180L+0x2b4>
 800ad4a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	eeb0 2a47 	vmov.f32	s4, s14
 800ad54:	eef0 1a45 	vmov.f32	s3, s10
 800ad58:	eeb0 1a65 	vmov.f32	s2, s11
 800ad5c:	eef0 0a46 	vmov.f32	s1, s12
 800ad60:	eeb0 0a66 	vmov.f32	s0, s13
 800ad64:	f7f8 f99e 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800ad68:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d10c      	bne.n	800ad8a <turn180L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800ad70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad74:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ad78:	eeb0 1a47 	vmov.f32	s2, s14
 800ad7c:	eddf 0a79 	vldr	s1, [pc, #484]	; 800af64 <turn180L+0x2c0>
 800ad80:	eeb0 0a67 	vmov.f32	s0, s15
 800ad84:	f7f9 f880 	bl	8003e88 <mollifier_slalom_table>
 800ad88:	e013      	b.n	800adb2 <turn180L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ad8a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad8e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ad92:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ad96:	eef0 2a66 	vmov.f32	s5, s13
 800ad9a:	eeb0 2a47 	vmov.f32	s4, s14
 800ad9e:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800af5c <turn180L+0x2b8>
 800ada2:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800af5c <turn180L+0x2b8>
 800ada6:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800af64 <turn180L+0x2c0>
 800adaa:	eeb0 0a67 	vmov.f32	s0, s15
 800adae:	f7f8 ff2b 	bl	8003c08 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800adb2:	2300      	movs	r3, #0
 800adb4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800adb6:	2300      	movs	r3, #0
 800adb8:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800adba:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800adbe:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800af68 <turn180L+0x2c4>
 800adc2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800adc6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800adca:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800adce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800add2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800add6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800adda:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800adde:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ade2:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800af58 <turn180L+0x2b4>
 800ade6:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	eeb0 2a47 	vmov.f32	s4, s14
 800adf0:	eef0 1a65 	vmov.f32	s3, s11
 800adf4:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800af5c <turn180L+0x2b8>
 800adf8:	eef0 0a46 	vmov.f32	s1, s12
 800adfc:	eeb0 0a66 	vmov.f32	s0, s13
 800ae00:	f7f8 f950 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800ae04:	4b53      	ldr	r3, [pc, #332]	; (800af54 <turn180L+0x2b0>)
 800ae06:	2200      	movs	r2, #0
 800ae08:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ae0a:	e09a      	b.n	800af42 <turn180L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ae10:	2300      	movs	r3, #0
 800ae12:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ae14:	2302      	movs	r3, #2
 800ae16:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ae1c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ae20:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ae24:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ae28:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ae2c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae30:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae34:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae38:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ae3c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ae40:	eddf 4a45 	vldr	s9, [pc, #276]	; 800af58 <turn180L+0x2b4>
 800ae44:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	eeb0 2a47 	vmov.f32	s4, s14
 800ae4e:	eef0 1a45 	vmov.f32	s3, s10
 800ae52:	eeb0 1a65 	vmov.f32	s2, s11
 800ae56:	eef0 0a46 	vmov.f32	s1, s12
 800ae5a:	eeb0 0a66 	vmov.f32	s0, s13
 800ae5e:	f7f8 f921 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800ae62:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d10c      	bne.n	800ae84 <turn180L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800ae6a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae6e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ae72:	eeb0 1a47 	vmov.f32	s2, s14
 800ae76:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800af64 <turn180L+0x2c0>
 800ae7a:	eeb0 0a67 	vmov.f32	s0, s15
 800ae7e:	f7f9 f803 	bl	8003e88 <mollifier_slalom_table>
 800ae82:	e013      	b.n	800aeac <turn180L+0x208>
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ae84:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae88:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ae8c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ae90:	eef0 2a66 	vmov.f32	s5, s13
 800ae94:	eeb0 2a47 	vmov.f32	s4, s14
 800ae98:	eddf 1a30 	vldr	s3, [pc, #192]	; 800af5c <turn180L+0x2b8>
 800ae9c:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800af5c <turn180L+0x2b8>
 800aea0:	eddf 0a30 	vldr	s1, [pc, #192]	; 800af64 <turn180L+0x2c0>
 800aea4:	eeb0 0a67 	vmov.f32	s0, s15
 800aea8:	f7f8 feae 	bl	8003c08 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800aeac:	2301      	movs	r3, #1
 800aeae:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800aeb4:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800aeb8:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800aebc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aec0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aec4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aec8:	edd7 7a01 	vldr	s15, [r7, #4]
 800aecc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aed4:	eef0 7ae7 	vabs.f32	s15, s15
 800aed8:	ee17 0a90 	vmov	r0, s15
 800aedc:	f7f5 fb5c 	bl	8000598 <__aeabi_f2d>
 800aee0:	f04f 0200 	mov.w	r2, #0
 800aee4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aee8:	f7f5 fcd8 	bl	800089c <__aeabi_ddiv>
 800aeec:	4602      	mov	r2, r0
 800aeee:	460b      	mov	r3, r1
 800aef0:	4614      	mov	r4, r2
 800aef2:	461d      	mov	r5, r3
 800aef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7f5 fb4e 	bl	8000598 <__aeabi_f2d>
 800aefc:	4602      	mov	r2, r0
 800aefe:	460b      	mov	r3, r1
 800af00:	4620      	mov	r0, r4
 800af02:	4629      	mov	r1, r5
 800af04:	f7f5 fcca 	bl	800089c <__aeabi_ddiv>
 800af08:	4602      	mov	r2, r0
 800af0a:	460b      	mov	r3, r1
 800af0c:	4610      	mov	r0, r2
 800af0e:	4619      	mov	r1, r3
 800af10:	f04f 0200 	mov.w	r2, #0
 800af14:	4b15      	ldr	r3, [pc, #84]	; (800af6c <turn180L+0x2c8>)
 800af16:	f7f5 f9e1 	bl	80002dc <__adddf3>
 800af1a:	4602      	mov	r2, r0
 800af1c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800af1e:	4610      	mov	r0, r2
 800af20:	4619      	mov	r1, r3
 800af22:	f7f5 fe69 	bl	8000bf8 <__aeabi_d2f>
 800af26:	4603      	mov	r3, r0
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	ee02 3a10 	vmov	s4, r3
 800af2e:	edd7 1a01 	vldr	s3, [r7, #4]
 800af32:	ed97 1a01 	vldr	s2, [r7, #4]
 800af36:	eef0 0a68 	vmov.f32	s1, s17
 800af3a:	eeb0 0a48 	vmov.f32	s0, s16
 800af3e:	f7f8 f8b1 	bl	80030a4 <straight_table2>
}
 800af42:	bf00      	nop
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	ecbd 8b02 	vpop	{d8}
 800af4c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800af50:	b004      	add	sp, #16
 800af52:	4770      	bx	lr
 800af54:	200007e8 	.word	0x200007e8
 800af58:	42340000 	.word	0x42340000
 800af5c:	00000000 	.word	0x00000000
 800af60:	42da0000 	.word	0x42da0000
 800af64:	43340000 	.word	0x43340000
 800af68:	42b40000 	.word	0x42b40000
 800af6c:	408f4000 	.word	0x408f4000

0800af70 <turn45inR>:



void turn45inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800af70:	b084      	sub	sp, #16
 800af72:	b5b0      	push	{r4, r5, r7, lr}
 800af74:	ed2d 8b02 	vpush	{d8}
 800af78:	b084      	sub	sp, #16
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800af80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800af84:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800af88:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	f040 80ae 	bne.w	800b0ee <turn45inR+0x17e>
		highspeed_mode = 1;
 800af92:	4bdd      	ldr	r3, [pc, #884]	; (800b308 <turn45inR+0x398>)
 800af94:	2201      	movs	r2, #1
 800af96:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800af98:	2301      	movs	r3, #1
 800af9a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800af9c:	2300      	movs	r3, #0
 800af9e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800afa4:	2300      	movs	r3, #0
 800afa6:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800afa8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800afac:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800afb0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800afb4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800afbc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800afc0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800afc4:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800b30c <turn45inR+0x39c>
 800afc8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800afcc:	68f8      	ldr	r0, [r7, #12]
 800afce:	eeb0 2a47 	vmov.f32	s4, s14
 800afd2:	eef0 1a46 	vmov.f32	s3, s12
 800afd6:	eeb0 1a66 	vmov.f32	s2, s13
 800afda:	eddf 0acf 	vldr	s1, [pc, #828]	; 800b318 <turn45inR+0x3a8>
 800afde:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800b310 <turn45inR+0x3a0>
 800afe2:	f7f8 f85f 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800afe6:	2300      	movs	r3, #0
 800afe8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800afea:	2302      	movs	r3, #2
 800afec:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800afee:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aff2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aff6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800affa:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800affe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b002:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b006:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b00a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b00e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b012:	eddf 4abe 	vldr	s9, [pc, #760]	; 800b30c <turn45inR+0x39c>
 800b016:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	eeb0 2a47 	vmov.f32	s4, s14
 800b020:	eef0 1a45 	vmov.f32	s3, s10
 800b024:	eeb0 1a65 	vmov.f32	s2, s11
 800b028:	eef0 0a46 	vmov.f32	s1, s12
 800b02c:	eeb0 0a66 	vmov.f32	s0, s13
 800b030:	f7f8 f838 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b034:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d10c      	bne.n	800b056 <turn45inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b03c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b040:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b044:	eeb0 1a47 	vmov.f32	s2, s14
 800b048:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800b31c <turn45inR+0x3ac>
 800b04c:	eeb0 0a67 	vmov.f32	s0, s15
 800b050:	f7f8 ff1a 	bl	8003e88 <mollifier_slalom_table>
 800b054:	e015      	b.n	800b082 <turn45inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b056:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b05a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b05e:	eef1 7a67 	vneg.f32	s15, s15
 800b062:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b066:	eef0 2a66 	vmov.f32	s5, s13
 800b06a:	eeb0 2a67 	vmov.f32	s4, s15
 800b06e:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800b318 <turn45inR+0x3a8>
 800b072:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800b318 <turn45inR+0x3a8>
 800b076:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800b31c <turn45inR+0x3ac>
 800b07a:	eeb0 0a47 	vmov.f32	s0, s14
 800b07e:	f7f8 fdc3 	bl	8003c08 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b082:	2300      	movs	r3, #0
 800b084:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b086:	2300      	movs	r3, #0
 800b088:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7f5 fa83 	bl	8000598 <__aeabi_f2d>
 800b092:	a39b      	add	r3, pc, #620	; (adr r3, 800b300 <turn45inR+0x390>)
 800b094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b098:	f7f5 f920 	bl	80002dc <__adddf3>
 800b09c:	4602      	mov	r2, r0
 800b09e:	460b      	mov	r3, r1
 800b0a0:	4610      	mov	r0, r2
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	f7f5 fda8 	bl	8000bf8 <__aeabi_d2f>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b0ae:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b0b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b0b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b0ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0be:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b0c2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b0c6:	eddf 5a91 	vldr	s11, [pc, #580]	; 800b30c <turn45inR+0x39c>
 800b0ca:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b0ce:	68f8      	ldr	r0, [r7, #12]
 800b0d0:	eeb0 2a47 	vmov.f32	s4, s14
 800b0d4:	eef0 1a46 	vmov.f32	s3, s12
 800b0d8:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800b318 <turn45inR+0x3a8>
 800b0dc:	eef0 0a66 	vmov.f32	s1, s13
 800b0e0:	ee00 3a10 	vmov	s0, r3
 800b0e4:	f7f7 ffde 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800b0e8:	4b87      	ldr	r3, [pc, #540]	; (800b308 <turn45inR+0x398>)
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b0ee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f040 809d 	bne.w	800b232 <turn45inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b100:	2302      	movs	r3, #2
 800b102:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b104:	2300      	movs	r3, #0
 800b106:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b108:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b10c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b110:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b114:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b118:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b11c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b120:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b124:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b128:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b12c:	eddf 4a77 	vldr	s9, [pc, #476]	; 800b30c <turn45inR+0x39c>
 800b130:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	eeb0 2a47 	vmov.f32	s4, s14
 800b13a:	eef0 1a45 	vmov.f32	s3, s10
 800b13e:	eeb0 1a65 	vmov.f32	s2, s11
 800b142:	eef0 0a46 	vmov.f32	s1, s12
 800b146:	eeb0 0a66 	vmov.f32	s0, s13
 800b14a:	f7f7 ffab 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b14e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b152:	2b01      	cmp	r3, #1
 800b154:	d10c      	bne.n	800b170 <turn45inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b156:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b15a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b15e:	eeb0 1a47 	vmov.f32	s2, s14
 800b162:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800b31c <turn45inR+0x3ac>
 800b166:	eeb0 0a67 	vmov.f32	s0, s15
 800b16a:	f7f8 fe8d 	bl	8003e88 <mollifier_slalom_table>
 800b16e:	e015      	b.n	800b19c <turn45inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b170:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b174:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b178:	eef1 7a67 	vneg.f32	s15, s15
 800b17c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b180:	eef0 2a66 	vmov.f32	s5, s13
 800b184:	eeb0 2a67 	vmov.f32	s4, s15
 800b188:	eddf 1a63 	vldr	s3, [pc, #396]	; 800b318 <turn45inR+0x3a8>
 800b18c:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800b318 <turn45inR+0x3a8>
 800b190:	eddf 0a62 	vldr	s1, [pc, #392]	; 800b31c <turn45inR+0x3ac>
 800b194:	eeb0 0a47 	vmov.f32	s0, s14
 800b198:	f7f8 fd36 	bl	8003c08 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b19c:	2303      	movs	r3, #3
 800b19e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b1a4:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b1a8:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b1ac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b1b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b1b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b1b8:	edd7 7a01 	vldr	s15, [r7, #4]
 800b1bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b1c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1c4:	eef0 7ae7 	vabs.f32	s15, s15
 800b1c8:	ee17 0a90 	vmov	r0, s15
 800b1cc:	f7f5 f9e4 	bl	8000598 <__aeabi_f2d>
 800b1d0:	f04f 0200 	mov.w	r2, #0
 800b1d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b1d8:	f7f5 fb60 	bl	800089c <__aeabi_ddiv>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	460b      	mov	r3, r1
 800b1e0:	4614      	mov	r4, r2
 800b1e2:	461d      	mov	r5, r3
 800b1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7f5 f9d6 	bl	8000598 <__aeabi_f2d>
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	4629      	mov	r1, r5
 800b1f4:	f7f5 fb52 	bl	800089c <__aeabi_ddiv>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	4610      	mov	r0, r2
 800b1fe:	4619      	mov	r1, r3
 800b200:	f04f 0200 	mov.w	r2, #0
 800b204:	4b43      	ldr	r3, [pc, #268]	; (800b314 <turn45inR+0x3a4>)
 800b206:	f7f5 f869 	bl	80002dc <__adddf3>
 800b20a:	4602      	mov	r2, r0
 800b20c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b20e:	4610      	mov	r0, r2
 800b210:	4619      	mov	r1, r3
 800b212:	f7f5 fcf1 	bl	8000bf8 <__aeabi_d2f>
 800b216:	4603      	mov	r3, r0
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	ee02 3a10 	vmov	s4, r3
 800b21e:	edd7 1a01 	vldr	s3, [r7, #4]
 800b222:	ed97 1a01 	vldr	s2, [r7, #4]
 800b226:	eef0 0a68 	vmov.f32	s1, s17
 800b22a:	eeb0 0a48 	vmov.f32	s0, s16
 800b22e:	f7f7 ff39 	bl	80030a4 <straight_table2>

	}
	if (test_mode >= 2) {
 800b232:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b236:	2b01      	cmp	r3, #1
 800b238:	f240 80d0 	bls.w	800b3dc <turn45inR+0x46c>

		highspeed_mode = 1;
 800b23c:	4b32      	ldr	r3, [pc, #200]	; (800b308 <turn45inR+0x398>)
 800b23e:	2201      	movs	r2, #1
 800b240:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b242:	2301      	movs	r3, #1
 800b244:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b246:	2300      	movs	r3, #0
 800b248:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b24a:	2300      	movs	r3, #0
 800b24c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b24e:	2300      	movs	r3, #0
 800b250:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b252:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b256:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b25a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b25e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b262:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b266:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b26a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b26e:	eddf 5a27 	vldr	s11, [pc, #156]	; 800b30c <turn45inR+0x39c>
 800b272:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	eeb0 2a47 	vmov.f32	s4, s14
 800b27c:	eef0 1a46 	vmov.f32	s3, s12
 800b280:	eeb0 1a66 	vmov.f32	s2, s13
 800b284:	eddf 0a24 	vldr	s1, [pc, #144]	; 800b318 <turn45inR+0x3a8>
 800b288:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b310 <turn45inR+0x3a0>
 800b28c:	f7f7 ff0a 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800b290:	2300      	movs	r3, #0
 800b292:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b294:	2302      	movs	r3, #2
 800b296:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b298:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b29c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b2a0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b2a4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b2a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b2ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b2b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b2b4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b2b8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b2bc:	eddf 4a13 	vldr	s9, [pc, #76]	; 800b30c <turn45inR+0x39c>
 800b2c0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	eeb0 2a47 	vmov.f32	s4, s14
 800b2ca:	eef0 1a45 	vmov.f32	s3, s10
 800b2ce:	eeb0 1a65 	vmov.f32	s2, s11
 800b2d2:	eef0 0a46 	vmov.f32	s1, s12
 800b2d6:	eeb0 0a66 	vmov.f32	s0, s13
 800b2da:	f7f7 fee3 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b2de:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d11c      	bne.n	800b320 <turn45inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b2e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b2ea:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b2ee:	eeb0 1a47 	vmov.f32	s2, s14
 800b2f2:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800b31c <turn45inR+0x3ac>
 800b2f6:	eeb0 0a67 	vmov.f32	s0, s15
 800b2fa:	f7f8 fdc5 	bl	8003e88 <mollifier_slalom_table>
 800b2fe:	e025      	b.n	800b34c <turn45inR+0x3dc>
 800b300:	c022ec18 	.word	0xc022ec18
 800b304:	405fd1de 	.word	0x405fd1de
 800b308:	200007e8 	.word	0x200007e8
 800b30c:	42340000 	.word	0x42340000
 800b310:	42da0000 	.word	0x42da0000
 800b314:	408f4000 	.word	0x408f4000
 800b318:	00000000 	.word	0x00000000
 800b31c:	c2340000 	.word	0xc2340000
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b320:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b324:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b328:	eef1 7a67 	vneg.f32	s15, s15
 800b32c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b330:	eef0 2a66 	vmov.f32	s5, s13
 800b334:	eeb0 2a67 	vmov.f32	s4, s15
 800b338:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800b318 <turn45inR+0x3a8>
 800b33c:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800b318 <turn45inR+0x3a8>
 800b340:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800b31c <turn45inR+0x3ac>
 800b344:	eeb0 0a47 	vmov.f32	s0, s14
 800b348:	f7f8 fc5e 	bl	8003c08 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b34c:	2300      	movs	r3, #0
 800b34e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b350:	2300      	movs	r3, #0
 800b352:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b354:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b358:	3b02      	subs	r3, #2
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7f5 f90a 	bl	8000574 <__aeabi_i2d>
 800b360:	a325      	add	r3, pc, #148	; (adr r3, 800b3f8 <turn45inR+0x488>)
 800b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b366:	f7f5 f96f 	bl	8000648 <__aeabi_dmul>
 800b36a:	4602      	mov	r2, r0
 800b36c:	460b      	mov	r3, r1
 800b36e:	4614      	mov	r4, r2
 800b370:	461d      	mov	r5, r3
 800b372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b374:	4618      	mov	r0, r3
 800b376:	f7f5 f90f 	bl	8000598 <__aeabi_f2d>
 800b37a:	4602      	mov	r2, r0
 800b37c:	460b      	mov	r3, r1
 800b37e:	4620      	mov	r0, r4
 800b380:	4629      	mov	r1, r5
 800b382:	f7f4 ffab 	bl	80002dc <__adddf3>
 800b386:	4602      	mov	r2, r0
 800b388:	460b      	mov	r3, r1
 800b38a:	4610      	mov	r0, r2
 800b38c:	4619      	mov	r1, r3
 800b38e:	f7f5 fc33 	bl	8000bf8 <__aeabi_d2f>
 800b392:	4603      	mov	r3, r0
 800b394:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b398:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b39c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b3a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b3a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b3a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b3ac:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b3b0:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b3b4:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800b3f0 <turn45inR+0x480>
 800b3b8:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	eeb0 2a47 	vmov.f32	s4, s14
 800b3c2:	eef0 1a65 	vmov.f32	s3, s11
 800b3c6:	eeb0 1a46 	vmov.f32	s2, s12
 800b3ca:	eef0 0a66 	vmov.f32	s1, s13
 800b3ce:	ee00 3a10 	vmov	s0, r3
 800b3d2:	f7f7 fe67 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800b3d6:	4b07      	ldr	r3, [pc, #28]	; (800b3f4 <turn45inR+0x484>)
 800b3d8:	2200      	movs	r2, #0
 800b3da:	701a      	strb	r2, [r3, #0]
	}

}
 800b3dc:	bf00      	nop
 800b3de:	3710      	adds	r7, #16
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	ecbd 8b02 	vpop	{d8}
 800b3e6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b3ea:	b004      	add	sp, #16
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	42340000 	.word	0x42340000
 800b3f4:	200007e8 	.word	0x200007e8
 800b3f8:	c022ec18 	.word	0xc022ec18
 800b3fc:	404fd1de 	.word	0x404fd1de

0800b400 <turn45inL>:

void turn45inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b400:	b084      	sub	sp, #16
 800b402:	b5b0      	push	{r4, r5, r7, lr}
 800b404:	ed2d 8b02 	vpush	{d8}
 800b408:	b084      	sub	sp, #16
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b414:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b418:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	f040 80ac 	bne.w	800b57a <turn45inL+0x17a>
		highspeed_mode = 1;
 800b422:	4bdb      	ldr	r3, [pc, #876]	; (800b790 <turn45inL+0x390>)
 800b424:	2201      	movs	r2, #1
 800b426:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b428:	2301      	movs	r3, #1
 800b42a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b42c:	2300      	movs	r3, #0
 800b42e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b430:	2300      	movs	r3, #0
 800b432:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b434:	2300      	movs	r3, #0
 800b436:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b438:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b43c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b440:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b444:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b448:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b44c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b450:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b454:	eddf 5ad2 	vldr	s11, [pc, #840]	; 800b7a0 <turn45inL+0x3a0>
 800b458:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	eeb0 2a47 	vmov.f32	s4, s14
 800b462:	eef0 1a46 	vmov.f32	s3, s12
 800b466:	eeb0 1a66 	vmov.f32	s2, s13
 800b46a:	eddf 0acc 	vldr	s1, [pc, #816]	; 800b79c <turn45inL+0x39c>
 800b46e:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800b794 <turn45inL+0x394>
 800b472:	f7f7 fe17 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800b476:	2300      	movs	r3, #0
 800b478:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b47a:	2302      	movs	r3, #2
 800b47c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b47e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b482:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b486:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b48a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b48e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b492:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b496:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b49a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b49e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b4a2:	eddf 4abf 	vldr	s9, [pc, #764]	; 800b7a0 <turn45inL+0x3a0>
 800b4a6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	eeb0 2a47 	vmov.f32	s4, s14
 800b4b0:	eef0 1a45 	vmov.f32	s3, s10
 800b4b4:	eeb0 1a65 	vmov.f32	s2, s11
 800b4b8:	eef0 0a46 	vmov.f32	s1, s12
 800b4bc:	eeb0 0a66 	vmov.f32	s0, s13
 800b4c0:	f7f7 fdf0 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b4c4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d10c      	bne.n	800b4e6 <turn45inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b4cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b4d0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b4d4:	eeb0 1a47 	vmov.f32	s2, s14
 800b4d8:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800b7a0 <turn45inL+0x3a0>
 800b4dc:	eeb0 0a67 	vmov.f32	s0, s15
 800b4e0:	f7f8 fcd2 	bl	8003e88 <mollifier_slalom_table>
 800b4e4:	e013      	b.n	800b50e <turn45inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b4e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b4ea:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b4ee:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b4f2:	eef0 2a66 	vmov.f32	s5, s13
 800b4f6:	eeb0 2a47 	vmov.f32	s4, s14
 800b4fa:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800b79c <turn45inL+0x39c>
 800b4fe:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 800b79c <turn45inL+0x39c>
 800b502:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800b7a0 <turn45inL+0x3a0>
 800b506:	eeb0 0a67 	vmov.f32	s0, s15
 800b50a:	f7f8 fb7d 	bl	8003c08 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b50e:	2300      	movs	r3, #0
 800b510:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b512:	2300      	movs	r3, #0
 800b514:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b518:	4618      	mov	r0, r3
 800b51a:	f7f5 f83d 	bl	8000598 <__aeabi_f2d>
 800b51e:	a39a      	add	r3, pc, #616	; (adr r3, 800b788 <turn45inL+0x388>)
 800b520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b524:	f7f4 feda 	bl	80002dc <__adddf3>
 800b528:	4602      	mov	r2, r0
 800b52a:	460b      	mov	r3, r1
 800b52c:	4610      	mov	r0, r2
 800b52e:	4619      	mov	r1, r3
 800b530:	f7f5 fb62 	bl	8000bf8 <__aeabi_d2f>
 800b534:	4603      	mov	r3, r0
 800b536:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b53a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b53e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b542:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b546:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b54a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b54e:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b552:	eddf 5a93 	vldr	s11, [pc, #588]	; 800b7a0 <turn45inL+0x3a0>
 800b556:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	eeb0 2a47 	vmov.f32	s4, s14
 800b560:	eef0 1a46 	vmov.f32	s3, s12
 800b564:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800b79c <turn45inL+0x39c>
 800b568:	eef0 0a66 	vmov.f32	s1, s13
 800b56c:	ee00 3a10 	vmov	s0, r3
 800b570:	f7f7 fd98 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800b574:	4b86      	ldr	r3, [pc, #536]	; (800b790 <turn45inL+0x390>)
 800b576:	2200      	movs	r2, #0
 800b578:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b57a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f040 809b 	bne.w	800b6ba <turn45inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b584:	2300      	movs	r3, #0
 800b586:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b588:	2300      	movs	r3, #0
 800b58a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b58c:	2302      	movs	r3, #2
 800b58e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b590:	2300      	movs	r3, #0
 800b592:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b594:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b598:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b59c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b5a0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b5a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b5a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b5ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5b0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b5b4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b5b8:	eddf 4a79 	vldr	s9, [pc, #484]	; 800b7a0 <turn45inL+0x3a0>
 800b5bc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	eeb0 2a47 	vmov.f32	s4, s14
 800b5c6:	eef0 1a45 	vmov.f32	s3, s10
 800b5ca:	eeb0 1a65 	vmov.f32	s2, s11
 800b5ce:	eef0 0a46 	vmov.f32	s1, s12
 800b5d2:	eeb0 0a66 	vmov.f32	s0, s13
 800b5d6:	f7f7 fd65 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b5da:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d10c      	bne.n	800b5fc <turn45inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b5e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b5e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b5ea:	eeb0 1a47 	vmov.f32	s2, s14
 800b5ee:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800b7a0 <turn45inL+0x3a0>
 800b5f2:	eeb0 0a67 	vmov.f32	s0, s15
 800b5f6:	f7f8 fc47 	bl	8003e88 <mollifier_slalom_table>
 800b5fa:	e013      	b.n	800b624 <turn45inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b5fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b600:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b604:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b608:	eef0 2a66 	vmov.f32	s5, s13
 800b60c:	eeb0 2a47 	vmov.f32	s4, s14
 800b610:	eddf 1a62 	vldr	s3, [pc, #392]	; 800b79c <turn45inL+0x39c>
 800b614:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800b79c <turn45inL+0x39c>
 800b618:	eddf 0a61 	vldr	s1, [pc, #388]	; 800b7a0 <turn45inL+0x3a0>
 800b61c:	eeb0 0a67 	vmov.f32	s0, s15
 800b620:	f7f8 faf2 	bl	8003c08 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b624:	2303      	movs	r3, #3
 800b626:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b628:	2300      	movs	r3, #0
 800b62a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b62c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b630:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b634:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b638:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b63c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b640:	edd7 7a01 	vldr	s15, [r7, #4]
 800b644:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b64c:	eef0 7ae7 	vabs.f32	s15, s15
 800b650:	ee17 0a90 	vmov	r0, s15
 800b654:	f7f4 ffa0 	bl	8000598 <__aeabi_f2d>
 800b658:	f04f 0200 	mov.w	r2, #0
 800b65c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b660:	f7f5 f91c 	bl	800089c <__aeabi_ddiv>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	4614      	mov	r4, r2
 800b66a:	461d      	mov	r5, r3
 800b66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66e:	4618      	mov	r0, r3
 800b670:	f7f4 ff92 	bl	8000598 <__aeabi_f2d>
 800b674:	4602      	mov	r2, r0
 800b676:	460b      	mov	r3, r1
 800b678:	4620      	mov	r0, r4
 800b67a:	4629      	mov	r1, r5
 800b67c:	f7f5 f90e 	bl	800089c <__aeabi_ddiv>
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	4610      	mov	r0, r2
 800b686:	4619      	mov	r1, r3
 800b688:	f04f 0200 	mov.w	r2, #0
 800b68c:	4b42      	ldr	r3, [pc, #264]	; (800b798 <turn45inL+0x398>)
 800b68e:	f7f4 fe25 	bl	80002dc <__adddf3>
 800b692:	4602      	mov	r2, r0
 800b694:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b696:	4610      	mov	r0, r2
 800b698:	4619      	mov	r1, r3
 800b69a:	f7f5 faad 	bl	8000bf8 <__aeabi_d2f>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	ee02 3a10 	vmov	s4, r3
 800b6a6:	edd7 1a01 	vldr	s3, [r7, #4]
 800b6aa:	ed97 1a01 	vldr	s2, [r7, #4]
 800b6ae:	eef0 0a68 	vmov.f32	s1, s17
 800b6b2:	eeb0 0a48 	vmov.f32	s0, s16
 800b6b6:	f7f7 fcf5 	bl	80030a4 <straight_table2>

	}
	if (test_mode >= 2) {
 800b6ba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	f240 80cc 	bls.w	800b85c <turn45inL+0x45c>

		highspeed_mode = 1;
 800b6c4:	4b32      	ldr	r3, [pc, #200]	; (800b790 <turn45inL+0x390>)
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b6da:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b6de:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b6e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b6e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b6ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b6ee:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b6f2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b6f6:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800b7a0 <turn45inL+0x3a0>
 800b6fa:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b6fe:	68f8      	ldr	r0, [r7, #12]
 800b700:	eeb0 2a47 	vmov.f32	s4, s14
 800b704:	eef0 1a46 	vmov.f32	s3, s12
 800b708:	eeb0 1a66 	vmov.f32	s2, s13
 800b70c:	eddf 0a23 	vldr	s1, [pc, #140]	; 800b79c <turn45inL+0x39c>
 800b710:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800b794 <turn45inL+0x394>
 800b714:	f7f7 fcc6 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800b718:	2300      	movs	r3, #0
 800b71a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b71c:	2302      	movs	r3, #2
 800b71e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b720:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b724:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b728:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b72c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b730:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b734:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b73c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b740:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b744:	eddf 4a16 	vldr	s9, [pc, #88]	; 800b7a0 <turn45inL+0x3a0>
 800b748:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b74c:	68f8      	ldr	r0, [r7, #12]
 800b74e:	eeb0 2a47 	vmov.f32	s4, s14
 800b752:	eef0 1a45 	vmov.f32	s3, s10
 800b756:	eeb0 1a65 	vmov.f32	s2, s11
 800b75a:	eef0 0a46 	vmov.f32	s1, s12
 800b75e:	eeb0 0a66 	vmov.f32	s0, s13
 800b762:	f7f7 fc9f 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b766:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d11a      	bne.n	800b7a4 <turn45inL+0x3a4>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b76e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b772:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b776:	eeb0 1a47 	vmov.f32	s2, s14
 800b77a:	eddf 0a09 	vldr	s1, [pc, #36]	; 800b7a0 <turn45inL+0x3a0>
 800b77e:	eeb0 0a67 	vmov.f32	s0, s15
 800b782:	f7f8 fb81 	bl	8003e88 <mollifier_slalom_table>
 800b786:	e021      	b.n	800b7cc <turn45inL+0x3cc>
 800b788:	c022ec18 	.word	0xc022ec18
 800b78c:	405fd1de 	.word	0x405fd1de
 800b790:	200007e8 	.word	0x200007e8
 800b794:	42da0000 	.word	0x42da0000
 800b798:	408f4000 	.word	0x408f4000
 800b79c:	00000000 	.word	0x00000000
 800b7a0:	42340000 	.word	0x42340000
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b7a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7a8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b7ac:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b7b0:	eef0 2a66 	vmov.f32	s5, s13
 800b7b4:	eeb0 2a47 	vmov.f32	s4, s14
 800b7b8:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800b79c <turn45inL+0x39c>
 800b7bc:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800b79c <turn45inL+0x39c>
 800b7c0:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800b7a0 <turn45inL+0x3a0>
 800b7c4:	eeb0 0a67 	vmov.f32	s0, s15
 800b7c8:	f7f8 fa1e 	bl	8003c08 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b7d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b7d8:	3b02      	subs	r3, #2
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7f4 feca 	bl	8000574 <__aeabi_i2d>
 800b7e0:	a325      	add	r3, pc, #148	; (adr r3, 800b878 <turn45inL+0x478>)
 800b7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e6:	f7f4 ff2f 	bl	8000648 <__aeabi_dmul>
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	460b      	mov	r3, r1
 800b7ee:	4614      	mov	r4, r2
 800b7f0:	461d      	mov	r5, r3
 800b7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7f4 fecf 	bl	8000598 <__aeabi_f2d>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	4620      	mov	r0, r4
 800b800:	4629      	mov	r1, r5
 800b802:	f7f4 fd6b 	bl	80002dc <__adddf3>
 800b806:	4602      	mov	r2, r0
 800b808:	460b      	mov	r3, r1
 800b80a:	4610      	mov	r0, r2
 800b80c:	4619      	mov	r1, r3
 800b80e:	f7f5 f9f3 	bl	8000bf8 <__aeabi_d2f>
 800b812:	4603      	mov	r3, r0
 800b814:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b818:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b81c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b820:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b824:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b828:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b82c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b830:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b834:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800b870 <turn45inL+0x470>
 800b838:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	eeb0 2a47 	vmov.f32	s4, s14
 800b842:	eef0 1a65 	vmov.f32	s3, s11
 800b846:	eeb0 1a46 	vmov.f32	s2, s12
 800b84a:	eef0 0a66 	vmov.f32	s1, s13
 800b84e:	ee00 3a10 	vmov	s0, r3
 800b852:	f7f7 fc27 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800b856:	4b07      	ldr	r3, [pc, #28]	; (800b874 <turn45inL+0x474>)
 800b858:	2200      	movs	r2, #0
 800b85a:	701a      	strb	r2, [r3, #0]
	}

}
 800b85c:	bf00      	nop
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	ecbd 8b02 	vpop	{d8}
 800b866:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b86a:	b004      	add	sp, #16
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	42340000 	.word	0x42340000
 800b874:	200007e8 	.word	0x200007e8
 800b878:	c022ec18 	.word	0xc022ec18
 800b87c:	404fd1de 	.word	0x404fd1de

0800b880 <turn135inR>:

void turn135inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b880:	b084      	sub	sp, #16
 800b882:	b5b0      	push	{r4, r5, r7, lr}
 800b884:	ed2d 8b02 	vpush	{d8}
 800b888:	b084      	sub	sp, #16
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b890:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b894:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b898:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	f040 80ae 	bne.w	800b9fe <turn135inR+0x17e>
		highspeed_mode = 1;
 800b8a2:	4bdd      	ldr	r3, [pc, #884]	; (800bc18 <turn135inR+0x398>)
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b8b8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b8bc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b8c0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b8c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8cc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b8d0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b8d4:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800bc1c <turn135inR+0x39c>
 800b8d8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	eeb0 2a47 	vmov.f32	s4, s14
 800b8e2:	eef0 1a46 	vmov.f32	s3, s12
 800b8e6:	eeb0 1a66 	vmov.f32	s2, s13
 800b8ea:	eddf 0acf 	vldr	s1, [pc, #828]	; 800bc28 <turn135inR+0x3a8>
 800b8ee:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800bc20 <turn135inR+0x3a0>
 800b8f2:	f7f7 fbd7 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b8fa:	2302      	movs	r3, #2
 800b8fc:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b8fe:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b902:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b906:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b90a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b90e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b912:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b916:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b91a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b91e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b922:	eddf 4abe 	vldr	s9, [pc, #760]	; 800bc1c <turn135inR+0x39c>
 800b926:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b92a:	68f8      	ldr	r0, [r7, #12]
 800b92c:	eeb0 2a47 	vmov.f32	s4, s14
 800b930:	eef0 1a45 	vmov.f32	s3, s10
 800b934:	eeb0 1a65 	vmov.f32	s2, s11
 800b938:	eef0 0a46 	vmov.f32	s1, s12
 800b93c:	eeb0 0a66 	vmov.f32	s0, s13
 800b940:	f7f7 fbb0 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800b944:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d10c      	bne.n	800b966 <turn135inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800b94c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b950:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b954:	eeb0 1a47 	vmov.f32	s2, s14
 800b958:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800bc2c <turn135inR+0x3ac>
 800b95c:	eeb0 0a67 	vmov.f32	s0, s15
 800b960:	f7f8 fa92 	bl	8003e88 <mollifier_slalom_table>
 800b964:	e015      	b.n	800b992 <turn135inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b966:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b96a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b96e:	eef1 7a67 	vneg.f32	s15, s15
 800b972:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b976:	eef0 2a66 	vmov.f32	s5, s13
 800b97a:	eeb0 2a67 	vmov.f32	s4, s15
 800b97e:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800bc28 <turn135inR+0x3a8>
 800b982:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800bc28 <turn135inR+0x3a8>
 800b986:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800bc2c <turn135inR+0x3ac>
 800b98a:	eeb0 0a47 	vmov.f32	s0, s14
 800b98e:	f7f8 f93b 	bl	8003c08 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b992:	2300      	movs	r3, #0
 800b994:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b996:	2300      	movs	r3, #0
 800b998:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7f4 fdfb 	bl	8000598 <__aeabi_f2d>
 800b9a2:	a39b      	add	r3, pc, #620	; (adr r3, 800bc10 <turn135inR+0x390>)
 800b9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a8:	f7f4 fc98 	bl	80002dc <__adddf3>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	4610      	mov	r0, r2
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	f7f5 f920 	bl	8000bf8 <__aeabi_d2f>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b9be:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b9c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b9c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b9ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9ce:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b9d2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b9d6:	eddf 5a91 	vldr	s11, [pc, #580]	; 800bc1c <turn135inR+0x39c>
 800b9da:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	eeb0 2a47 	vmov.f32	s4, s14
 800b9e4:	eef0 1a46 	vmov.f32	s3, s12
 800b9e8:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800bc28 <turn135inR+0x3a8>
 800b9ec:	eef0 0a66 	vmov.f32	s1, s13
 800b9f0:	ee00 3a10 	vmov	s0, r3
 800b9f4:	f7f7 fb56 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800b9f8:	4b87      	ldr	r3, [pc, #540]	; (800bc18 <turn135inR+0x398>)
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b9fe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	f040 809d 	bne.w	800bb42 <turn135inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ba10:	2302      	movs	r3, #2
 800ba12:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ba14:	2300      	movs	r3, #0
 800ba16:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ba18:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ba1c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ba20:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ba24:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ba28:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ba2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba30:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba34:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ba38:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ba3c:	eddf 4a77 	vldr	s9, [pc, #476]	; 800bc1c <turn135inR+0x39c>
 800ba40:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	eeb0 2a47 	vmov.f32	s4, s14
 800ba4a:	eef0 1a45 	vmov.f32	s3, s10
 800ba4e:	eeb0 1a65 	vmov.f32	s2, s11
 800ba52:	eef0 0a46 	vmov.f32	s1, s12
 800ba56:	eeb0 0a66 	vmov.f32	s0, s13
 800ba5a:	f7f7 fb23 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800ba5e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d10c      	bne.n	800ba80 <turn135inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800ba66:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba6a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ba6e:	eeb0 1a47 	vmov.f32	s2, s14
 800ba72:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800bc2c <turn135inR+0x3ac>
 800ba76:	eeb0 0a67 	vmov.f32	s0, s15
 800ba7a:	f7f8 fa05 	bl	8003e88 <mollifier_slalom_table>
 800ba7e:	e015      	b.n	800baac <turn135inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ba80:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ba84:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ba88:	eef1 7a67 	vneg.f32	s15, s15
 800ba8c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ba90:	eef0 2a66 	vmov.f32	s5, s13
 800ba94:	eeb0 2a67 	vmov.f32	s4, s15
 800ba98:	eddf 1a63 	vldr	s3, [pc, #396]	; 800bc28 <turn135inR+0x3a8>
 800ba9c:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800bc28 <turn135inR+0x3a8>
 800baa0:	eddf 0a62 	vldr	s1, [pc, #392]	; 800bc2c <turn135inR+0x3ac>
 800baa4:	eeb0 0a47 	vmov.f32	s0, s14
 800baa8:	f7f8 f8ae 	bl	8003c08 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800baac:	2303      	movs	r3, #3
 800baae:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bab0:	2300      	movs	r3, #0
 800bab2:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bab4:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bab8:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800babc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bac0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bac4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bac8:	edd7 7a01 	vldr	s15, [r7, #4]
 800bacc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bad4:	eef0 7ae7 	vabs.f32	s15, s15
 800bad8:	ee17 0a90 	vmov	r0, s15
 800badc:	f7f4 fd5c 	bl	8000598 <__aeabi_f2d>
 800bae0:	f04f 0200 	mov.w	r2, #0
 800bae4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bae8:	f7f4 fed8 	bl	800089c <__aeabi_ddiv>
 800baec:	4602      	mov	r2, r0
 800baee:	460b      	mov	r3, r1
 800baf0:	4614      	mov	r4, r2
 800baf2:	461d      	mov	r5, r3
 800baf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7f4 fd4e 	bl	8000598 <__aeabi_f2d>
 800bafc:	4602      	mov	r2, r0
 800bafe:	460b      	mov	r3, r1
 800bb00:	4620      	mov	r0, r4
 800bb02:	4629      	mov	r1, r5
 800bb04:	f7f4 feca 	bl	800089c <__aeabi_ddiv>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	4610      	mov	r0, r2
 800bb0e:	4619      	mov	r1, r3
 800bb10:	f04f 0200 	mov.w	r2, #0
 800bb14:	4b43      	ldr	r3, [pc, #268]	; (800bc24 <turn135inR+0x3a4>)
 800bb16:	f7f4 fbe1 	bl	80002dc <__adddf3>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bb1e:	4610      	mov	r0, r2
 800bb20:	4619      	mov	r1, r3
 800bb22:	f7f5 f869 	bl	8000bf8 <__aeabi_d2f>
 800bb26:	4603      	mov	r3, r0
 800bb28:	68f8      	ldr	r0, [r7, #12]
 800bb2a:	ee02 3a10 	vmov	s4, r3
 800bb2e:	edd7 1a01 	vldr	s3, [r7, #4]
 800bb32:	ed97 1a01 	vldr	s2, [r7, #4]
 800bb36:	eef0 0a68 	vmov.f32	s1, s17
 800bb3a:	eeb0 0a48 	vmov.f32	s0, s16
 800bb3e:	f7f7 fab1 	bl	80030a4 <straight_table2>

	}
	if (test_mode >= 2) {
 800bb42:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	f240 80d0 	bls.w	800bcec <turn135inR+0x46c>

		highspeed_mode = 1;
 800bb4c:	4b32      	ldr	r3, [pc, #200]	; (800bc18 <turn135inR+0x398>)
 800bb4e:	2201      	movs	r2, #1
 800bb50:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bb52:	2301      	movs	r3, #1
 800bb54:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bb56:	2300      	movs	r3, #0
 800bb58:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bb62:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bb66:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bb6a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bb6e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb72:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb76:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bb7a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bb7e:	eddf 5a27 	vldr	s11, [pc, #156]	; 800bc1c <turn135inR+0x39c>
 800bb82:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bb86:	68f8      	ldr	r0, [r7, #12]
 800bb88:	eeb0 2a47 	vmov.f32	s4, s14
 800bb8c:	eef0 1a46 	vmov.f32	s3, s12
 800bb90:	eeb0 1a66 	vmov.f32	s2, s13
 800bb94:	eddf 0a24 	vldr	s1, [pc, #144]	; 800bc28 <turn135inR+0x3a8>
 800bb98:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800bc20 <turn135inR+0x3a0>
 800bb9c:	f7f7 fa82 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800bba0:	2300      	movs	r3, #0
 800bba2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bba4:	2302      	movs	r3, #2
 800bba6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bba8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bbac:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bbb0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bbb4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bbb8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bbbc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bbc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbc4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bbc8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bbcc:	eddf 4a13 	vldr	s9, [pc, #76]	; 800bc1c <turn135inR+0x39c>
 800bbd0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bbd4:	68f8      	ldr	r0, [r7, #12]
 800bbd6:	eeb0 2a47 	vmov.f32	s4, s14
 800bbda:	eef0 1a45 	vmov.f32	s3, s10
 800bbde:	eeb0 1a65 	vmov.f32	s2, s11
 800bbe2:	eef0 0a46 	vmov.f32	s1, s12
 800bbe6:	eeb0 0a66 	vmov.f32	s0, s13
 800bbea:	f7f7 fa5b 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800bbee:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d11c      	bne.n	800bc30 <turn135inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bbf6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bbfa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bbfe:	eeb0 1a47 	vmov.f32	s2, s14
 800bc02:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800bc2c <turn135inR+0x3ac>
 800bc06:	eeb0 0a67 	vmov.f32	s0, s15
 800bc0a:	f7f8 f93d 	bl	8003e88 <mollifier_slalom_table>
 800bc0e:	e025      	b.n	800bc5c <turn135inR+0x3dc>
 800bc10:	c022ec18 	.word	0xc022ec18
 800bc14:	405fd1de 	.word	0x405fd1de
 800bc18:	200007e8 	.word	0x200007e8
 800bc1c:	42340000 	.word	0x42340000
 800bc20:	42da0000 	.word	0x42da0000
 800bc24:	408f4000 	.word	0x408f4000
 800bc28:	00000000 	.word	0x00000000
 800bc2c:	c3070000 	.word	0xc3070000
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bc30:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc34:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bc38:	eef1 7a67 	vneg.f32	s15, s15
 800bc3c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bc40:	eef0 2a66 	vmov.f32	s5, s13
 800bc44:	eeb0 2a67 	vmov.f32	s4, s15
 800bc48:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800bc28 <turn135inR+0x3a8>
 800bc4c:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800bc28 <turn135inR+0x3a8>
 800bc50:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800bc2c <turn135inR+0x3ac>
 800bc54:	eeb0 0a47 	vmov.f32	s0, s14
 800bc58:	f7f7 ffd6 	bl	8003c08 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bc60:	2300      	movs	r3, #0
 800bc62:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bc64:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bc68:	3b02      	subs	r3, #2
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7f4 fc82 	bl	8000574 <__aeabi_i2d>
 800bc70:	a325      	add	r3, pc, #148	; (adr r3, 800bd08 <turn135inR+0x488>)
 800bc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc76:	f7f4 fce7 	bl	8000648 <__aeabi_dmul>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	4614      	mov	r4, r2
 800bc80:	461d      	mov	r5, r3
 800bc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7f4 fc87 	bl	8000598 <__aeabi_f2d>
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	4620      	mov	r0, r4
 800bc90:	4629      	mov	r1, r5
 800bc92:	f7f4 fb23 	bl	80002dc <__adddf3>
 800bc96:	4602      	mov	r2, r0
 800bc98:	460b      	mov	r3, r1
 800bc9a:	4610      	mov	r0, r2
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	f7f4 ffab 	bl	8000bf8 <__aeabi_d2f>
 800bca2:	4603      	mov	r3, r0
 800bca4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bca8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bcac:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bcb0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bcb4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bcb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bcbc:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bcc0:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bcc4:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800bd00 <turn135inR+0x480>
 800bcc8:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	eeb0 2a47 	vmov.f32	s4, s14
 800bcd2:	eef0 1a65 	vmov.f32	s3, s11
 800bcd6:	eeb0 1a46 	vmov.f32	s2, s12
 800bcda:	eef0 0a66 	vmov.f32	s1, s13
 800bcde:	ee00 3a10 	vmov	s0, r3
 800bce2:	f7f7 f9df 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800bce6:	4b07      	ldr	r3, [pc, #28]	; (800bd04 <turn135inR+0x484>)
 800bce8:	2200      	movs	r2, #0
 800bcea:	701a      	strb	r2, [r3, #0]
	}

}
 800bcec:	bf00      	nop
 800bcee:	3710      	adds	r7, #16
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	ecbd 8b02 	vpop	{d8}
 800bcf6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bcfa:	b004      	add	sp, #16
 800bcfc:	4770      	bx	lr
 800bcfe:	bf00      	nop
 800bd00:	42340000 	.word	0x42340000
 800bd04:	200007e8 	.word	0x200007e8
 800bd08:	c022ec18 	.word	0xc022ec18
 800bd0c:	404fd1de 	.word	0x404fd1de

0800bd10 <turn135inL>:

void turn135inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bd10:	b084      	sub	sp, #16
 800bd12:	b5b0      	push	{r4, r5, r7, lr}
 800bd14:	ed2d 8b02 	vpush	{d8}
 800bd18:	b084      	sub	sp, #16
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bd20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bd24:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800bd28:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	f040 80ac 	bne.w	800be8a <turn135inL+0x17a>
		highspeed_mode = 1;
 800bd32:	4bdb      	ldr	r3, [pc, #876]	; (800c0a0 <turn135inL+0x390>)
 800bd34:	2201      	movs	r2, #1
 800bd36:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bd40:	2300      	movs	r3, #0
 800bd42:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bd44:	2300      	movs	r3, #0
 800bd46:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bd48:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bd4c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bd50:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd54:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd58:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd5c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bd60:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bd64:	eddf 5acf 	vldr	s11, [pc, #828]	; 800c0a4 <turn135inL+0x394>
 800bd68:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	eeb0 2a47 	vmov.f32	s4, s14
 800bd72:	eef0 1a46 	vmov.f32	s3, s12
 800bd76:	eeb0 1a66 	vmov.f32	s2, s13
 800bd7a:	eddf 0acd 	vldr	s1, [pc, #820]	; 800c0b0 <turn135inL+0x3a0>
 800bd7e:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800c0a8 <turn135inL+0x398>
 800bd82:	f7f7 f98f 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800bd86:	2300      	movs	r3, #0
 800bd88:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bd8a:	2302      	movs	r3, #2
 800bd8c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bd8e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bd92:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bd96:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bd9a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bd9e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bda2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bda6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdaa:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bdae:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bdb2:	eddf 4abc 	vldr	s9, [pc, #752]	; 800c0a4 <turn135inL+0x394>
 800bdb6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	eeb0 2a47 	vmov.f32	s4, s14
 800bdc0:	eef0 1a45 	vmov.f32	s3, s10
 800bdc4:	eeb0 1a65 	vmov.f32	s2, s11
 800bdc8:	eef0 0a46 	vmov.f32	s1, s12
 800bdcc:	eeb0 0a66 	vmov.f32	s0, s13
 800bdd0:	f7f7 f968 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800bdd4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d10c      	bne.n	800bdf6 <turn135inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800bddc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bde0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bde4:	eeb0 1a47 	vmov.f32	s2, s14
 800bde8:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800c0b4 <turn135inL+0x3a4>
 800bdec:	eeb0 0a67 	vmov.f32	s0, s15
 800bdf0:	f7f8 f84a 	bl	8003e88 <mollifier_slalom_table>
 800bdf4:	e013      	b.n	800be1e <turn135inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800bdf6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bdfa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bdfe:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800be02:	eef0 2a66 	vmov.f32	s5, s13
 800be06:	eeb0 2a47 	vmov.f32	s4, s14
 800be0a:	eddf 1aa9 	vldr	s3, [pc, #676]	; 800c0b0 <turn135inL+0x3a0>
 800be0e:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 800c0b0 <turn135inL+0x3a0>
 800be12:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800c0b4 <turn135inL+0x3a4>
 800be16:	eeb0 0a67 	vmov.f32	s0, s15
 800be1a:	f7f7 fef5 	bl	8003c08 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800be1e:	2300      	movs	r3, #0
 800be20:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800be22:	2300      	movs	r3, #0
 800be24:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800be26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be28:	4618      	mov	r0, r3
 800be2a:	f7f4 fbb5 	bl	8000598 <__aeabi_f2d>
 800be2e:	a39a      	add	r3, pc, #616	; (adr r3, 800c098 <turn135inL+0x388>)
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	f7f4 fa52 	bl	80002dc <__adddf3>
 800be38:	4602      	mov	r2, r0
 800be3a:	460b      	mov	r3, r1
 800be3c:	4610      	mov	r0, r2
 800be3e:	4619      	mov	r1, r3
 800be40:	f7f4 feda 	bl	8000bf8 <__aeabi_d2f>
 800be44:	4603      	mov	r3, r0
 800be46:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800be4a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be4e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be52:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be56:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be5a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800be5e:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800be62:	eddf 5a90 	vldr	s11, [pc, #576]	; 800c0a4 <turn135inL+0x394>
 800be66:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800be6a:	68f8      	ldr	r0, [r7, #12]
 800be6c:	eeb0 2a47 	vmov.f32	s4, s14
 800be70:	eef0 1a46 	vmov.f32	s3, s12
 800be74:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800c0b0 <turn135inL+0x3a0>
 800be78:	eef0 0a66 	vmov.f32	s1, s13
 800be7c:	ee00 3a10 	vmov	s0, r3
 800be80:	f7f7 f910 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800be84:	4b86      	ldr	r3, [pc, #536]	; (800c0a0 <turn135inL+0x390>)
 800be86:	2200      	movs	r2, #0
 800be88:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800be8a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f040 809b 	bne.w	800bfca <turn135inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800be94:	2300      	movs	r3, #0
 800be96:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800be98:	2300      	movs	r3, #0
 800be9a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800be9c:	2302      	movs	r3, #2
 800be9e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bea0:	2300      	movs	r3, #0
 800bea2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bea4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bea8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800beac:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800beb0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800beb4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800beb8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bebc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bec0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bec4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bec8:	eddf 4a76 	vldr	s9, [pc, #472]	; 800c0a4 <turn135inL+0x394>
 800becc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	eeb0 2a47 	vmov.f32	s4, s14
 800bed6:	eef0 1a45 	vmov.f32	s3, s10
 800beda:	eeb0 1a65 	vmov.f32	s2, s11
 800bede:	eef0 0a46 	vmov.f32	s1, s12
 800bee2:	eeb0 0a66 	vmov.f32	s0, s13
 800bee6:	f7f7 f8dd 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800beea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d10c      	bne.n	800bf0c <turn135inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800bef2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bef6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800befa:	eeb0 1a47 	vmov.f32	s2, s14
 800befe:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800c0b4 <turn135inL+0x3a4>
 800bf02:	eeb0 0a67 	vmov.f32	s0, s15
 800bf06:	f7f7 ffbf 	bl	8003e88 <mollifier_slalom_table>
 800bf0a:	e013      	b.n	800bf34 <turn135inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800bf0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf10:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bf14:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bf18:	eef0 2a66 	vmov.f32	s5, s13
 800bf1c:	eeb0 2a47 	vmov.f32	s4, s14
 800bf20:	eddf 1a63 	vldr	s3, [pc, #396]	; 800c0b0 <turn135inL+0x3a0>
 800bf24:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800c0b0 <turn135inL+0x3a0>
 800bf28:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c0b4 <turn135inL+0x3a4>
 800bf2c:	eeb0 0a67 	vmov.f32	s0, s15
 800bf30:	f7f7 fe6a 	bl	8003c08 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800bf34:	2303      	movs	r3, #3
 800bf36:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bf3c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bf40:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bf44:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf48:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf50:	edd7 7a01 	vldr	s15, [r7, #4]
 800bf54:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bf58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf5c:	eef0 7ae7 	vabs.f32	s15, s15
 800bf60:	ee17 0a90 	vmov	r0, s15
 800bf64:	f7f4 fb18 	bl	8000598 <__aeabi_f2d>
 800bf68:	f04f 0200 	mov.w	r2, #0
 800bf6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf70:	f7f4 fc94 	bl	800089c <__aeabi_ddiv>
 800bf74:	4602      	mov	r2, r0
 800bf76:	460b      	mov	r3, r1
 800bf78:	4614      	mov	r4, r2
 800bf7a:	461d      	mov	r5, r3
 800bf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7f4 fb0a 	bl	8000598 <__aeabi_f2d>
 800bf84:	4602      	mov	r2, r0
 800bf86:	460b      	mov	r3, r1
 800bf88:	4620      	mov	r0, r4
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	f7f4 fc86 	bl	800089c <__aeabi_ddiv>
 800bf90:	4602      	mov	r2, r0
 800bf92:	460b      	mov	r3, r1
 800bf94:	4610      	mov	r0, r2
 800bf96:	4619      	mov	r1, r3
 800bf98:	f04f 0200 	mov.w	r2, #0
 800bf9c:	4b43      	ldr	r3, [pc, #268]	; (800c0ac <turn135inL+0x39c>)
 800bf9e:	f7f4 f99d 	bl	80002dc <__adddf3>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bfa6:	4610      	mov	r0, r2
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	f7f4 fe25 	bl	8000bf8 <__aeabi_d2f>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	68f8      	ldr	r0, [r7, #12]
 800bfb2:	ee02 3a10 	vmov	s4, r3
 800bfb6:	edd7 1a01 	vldr	s3, [r7, #4]
 800bfba:	ed97 1a01 	vldr	s2, [r7, #4]
 800bfbe:	eef0 0a68 	vmov.f32	s1, s17
 800bfc2:	eeb0 0a48 	vmov.f32	s0, s16
 800bfc6:	f7f7 f86d 	bl	80030a4 <straight_table2>

	}
	if (test_mode >= 2) {
 800bfca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	f240 80ce 	bls.w	800c170 <turn135inL+0x460>

		highspeed_mode = 1;
 800bfd4:	4b32      	ldr	r3, [pc, #200]	; (800c0a0 <turn135inL+0x390>)
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bfea:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bfee:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bff2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bff6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bffa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bffe:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c002:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c006:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c0a4 <turn135inL+0x394>
 800c00a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c00e:	68f8      	ldr	r0, [r7, #12]
 800c010:	eeb0 2a47 	vmov.f32	s4, s14
 800c014:	eef0 1a46 	vmov.f32	s3, s12
 800c018:	eeb0 1a66 	vmov.f32	s2, s13
 800c01c:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c0b0 <turn135inL+0x3a0>
 800c020:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c0a8 <turn135inL+0x398>
 800c024:	f7f7 f83e 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800c028:	2300      	movs	r3, #0
 800c02a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c02c:	2302      	movs	r3, #2
 800c02e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c030:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c034:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c038:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c03c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c040:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c044:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c04c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c050:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c054:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c0a4 <turn135inL+0x394>
 800c058:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	eeb0 2a47 	vmov.f32	s4, s14
 800c062:	eef0 1a45 	vmov.f32	s3, s10
 800c066:	eeb0 1a65 	vmov.f32	s2, s11
 800c06a:	eef0 0a46 	vmov.f32	s1, s12
 800c06e:	eeb0 0a66 	vmov.f32	s0, s13
 800c072:	f7f7 f817 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800c076:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d11c      	bne.n	800c0b8 <turn135inL+0x3a8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c07e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c082:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c086:	eeb0 1a47 	vmov.f32	s2, s14
 800c08a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800c0b4 <turn135inL+0x3a4>
 800c08e:	eeb0 0a67 	vmov.f32	s0, s15
 800c092:	f7f7 fef9 	bl	8003e88 <mollifier_slalom_table>
 800c096:	e023      	b.n	800c0e0 <turn135inL+0x3d0>
 800c098:	c022ec18 	.word	0xc022ec18
 800c09c:	405fd1de 	.word	0x405fd1de
 800c0a0:	200007e8 	.word	0x200007e8
 800c0a4:	42340000 	.word	0x42340000
 800c0a8:	42da0000 	.word	0x42da0000
 800c0ac:	408f4000 	.word	0x408f4000
 800c0b0:	00000000 	.word	0x00000000
 800c0b4:	43070000 	.word	0x43070000
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c0b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0bc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c0c0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c0c4:	eef0 2a66 	vmov.f32	s5, s13
 800c0c8:	eeb0 2a47 	vmov.f32	s4, s14
 800c0cc:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800c0b0 <turn135inL+0x3a0>
 800c0d0:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800c0b0 <turn135inL+0x3a0>
 800c0d4:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800c0b4 <turn135inL+0x3a4>
 800c0d8:	eeb0 0a67 	vmov.f32	s0, s15
 800c0dc:	f7f7 fd94 	bl	8003c08 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c0e8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c0ec:	3b02      	subs	r3, #2
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7f4 fa40 	bl	8000574 <__aeabi_i2d>
 800c0f4:	a326      	add	r3, pc, #152	; (adr r3, 800c190 <turn135inL+0x480>)
 800c0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fa:	f7f4 faa5 	bl	8000648 <__aeabi_dmul>
 800c0fe:	4602      	mov	r2, r0
 800c100:	460b      	mov	r3, r1
 800c102:	4614      	mov	r4, r2
 800c104:	461d      	mov	r5, r3
 800c106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c108:	4618      	mov	r0, r3
 800c10a:	f7f4 fa45 	bl	8000598 <__aeabi_f2d>
 800c10e:	4602      	mov	r2, r0
 800c110:	460b      	mov	r3, r1
 800c112:	4620      	mov	r0, r4
 800c114:	4629      	mov	r1, r5
 800c116:	f7f4 f8e1 	bl	80002dc <__adddf3>
 800c11a:	4602      	mov	r2, r0
 800c11c:	460b      	mov	r3, r1
 800c11e:	4610      	mov	r0, r2
 800c120:	4619      	mov	r1, r3
 800c122:	f7f4 fd69 	bl	8000bf8 <__aeabi_d2f>
 800c126:	4603      	mov	r3, r0
 800c128:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c12c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c130:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c134:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c138:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c13c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c140:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c144:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c148:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 800c188 <turn135inL+0x478>
 800c14c:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c150:	68f8      	ldr	r0, [r7, #12]
 800c152:	eeb0 2a47 	vmov.f32	s4, s14
 800c156:	eef0 1a65 	vmov.f32	s3, s11
 800c15a:	eeb0 1a46 	vmov.f32	s2, s12
 800c15e:	eef0 0a66 	vmov.f32	s1, s13
 800c162:	ee00 3a10 	vmov	s0, r3
 800c166:	f7f6 ff9d 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800c16a:	4b08      	ldr	r3, [pc, #32]	; (800c18c <turn135inL+0x47c>)
 800c16c:	2200      	movs	r2, #0
 800c16e:	701a      	strb	r2, [r3, #0]
	}

}
 800c170:	bf00      	nop
 800c172:	3710      	adds	r7, #16
 800c174:	46bd      	mov	sp, r7
 800c176:	ecbd 8b02 	vpop	{d8}
 800c17a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c17e:	b004      	add	sp, #16
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	f3af 8000 	nop.w
 800c188:	42340000 	.word	0x42340000
 800c18c:	200007e8 	.word	0x200007e8
 800c190:	c022ec18 	.word	0xc022ec18
 800c194:	404fd1de 	.word	0x404fd1de

0800c198 <turn45outR>:


void turn45outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c198:	b084      	sub	sp, #16
 800c19a:	b5b0      	push	{r4, r5, r7, lr}
 800c19c:	ed2d 8b02 	vpush	{d8}
 800c1a0:	b084      	sub	sp, #16
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c1a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c1ac:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;

	if (test_mode == 1) {
 800c1b0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	f040 80a5 	bne.w	800c304 <turn45outR+0x16c>
		highspeed_mode = 1;
 800c1ba:	4be9      	ldr	r3, [pc, #932]	; (800c560 <turn45outR+0x3c8>)
 800c1bc:	2201      	movs	r2, #1
 800c1be:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c1d0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c1d4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c1d8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c1dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1e4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c1e8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c1ec:	eddf 5add 	vldr	s11, [pc, #884]	; 800c564 <turn45outR+0x3cc>
 800c1f0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c1f4:	68f8      	ldr	r0, [r7, #12]
 800c1f6:	eeb0 2a47 	vmov.f32	s4, s14
 800c1fa:	eef0 1a46 	vmov.f32	s3, s12
 800c1fe:	eeb0 1a66 	vmov.f32	s2, s13
 800c202:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800c568 <turn45outR+0x3d0>
 800c206:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800c56c <turn45outR+0x3d4>
 800c20a:	f7f6 ff4b 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800c20e:	2300      	movs	r3, #0
 800c210:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=3;
 800c212:	2303      	movs	r3, #3
 800c214:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c216:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c21a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c21e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c222:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c226:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c22a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c22e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c232:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c236:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c23a:	eddf 4aca 	vldr	s9, [pc, #808]	; 800c564 <turn45outR+0x3cc>
 800c23e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	eeb0 2a47 	vmov.f32	s4, s14
 800c248:	eef0 1a45 	vmov.f32	s3, s10
 800c24c:	eeb0 1a65 	vmov.f32	s2, s11
 800c250:	eef0 0a46 	vmov.f32	s1, s12
 800c254:	eeb0 0a66 	vmov.f32	s0, s13
 800c258:	f7f6 ff24 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800c25c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c260:	2b01      	cmp	r3, #1
 800c262:	d10c      	bne.n	800c27e <turn45outR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c264:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c268:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c26c:	eeb0 1a47 	vmov.f32	s2, s14
 800c270:	eddf 0abf 	vldr	s1, [pc, #764]	; 800c570 <turn45outR+0x3d8>
 800c274:	eeb0 0a67 	vmov.f32	s0, s15
 800c278:	f7f7 fe06 	bl	8003e88 <mollifier_slalom_table>
 800c27c:	e015      	b.n	800c2aa <turn45outR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c27e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c282:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c286:	eef1 7a67 	vneg.f32	s15, s15
 800c28a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c28e:	eef0 2a66 	vmov.f32	s5, s13
 800c292:	eeb0 2a67 	vmov.f32	s4, s15
 800c296:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800c568 <turn45outR+0x3d0>
 800c29a:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800c568 <turn45outR+0x3d0>
 800c29e:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800c570 <turn45outR+0x3d8>
 800c2a2:	eeb0 0a47 	vmov.f32	s0, s14
 800c2a6:	f7f7 fcaf 	bl	8003c08 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c2b2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c2b6:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800c574 <turn45outR+0x3dc>
 800c2ba:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c2be:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c2c2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c2c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c2ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2d2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c2d6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c2da:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800c564 <turn45outR+0x3cc>
 800c2de:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	eeb0 2a47 	vmov.f32	s4, s14
 800c2e8:	eef0 1a65 	vmov.f32	s3, s11
 800c2ec:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800c568 <turn45outR+0x3d0>
 800c2f0:	eef0 0a46 	vmov.f32	s1, s12
 800c2f4:	eeb0 0a66 	vmov.f32	s0, s13
 800c2f8:	f7f6 fed4 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800c2fc:	4b98      	ldr	r3, [pc, #608]	; (800c560 <turn45outR+0x3c8>)
 800c2fe:	2200      	movs	r2, #0
 800c300:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c302:	e123      	b.n	800c54c <turn45outR+0x3b4>
	}else if (test_mode >= 2) {
 800c304:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c308:	2b01      	cmp	r3, #1
 800c30a:	f240 8082 	bls.w	800c412 <turn45outR+0x27a>
		highspeed_mode = 1;
 800c30e:	4b94      	ldr	r3, [pc, #592]	; (800c560 <turn45outR+0x3c8>)
 800c310:	2201      	movs	r2, #1
 800c312:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c314:	2300      	movs	r3, #0
 800c316:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c318:	2300      	movs	r3, #0
 800c31a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c31c:	2303      	movs	r3, #3
 800c31e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c320:	2300      	movs	r3, #0
 800c322:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c324:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c328:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c32c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c330:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c334:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c338:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c33c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c340:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c344:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c348:	eddf 4a86 	vldr	s9, [pc, #536]	; 800c564 <turn45outR+0x3cc>
 800c34c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	eeb0 2a47 	vmov.f32	s4, s14
 800c356:	eef0 1a45 	vmov.f32	s3, s10
 800c35a:	eeb0 1a65 	vmov.f32	s2, s11
 800c35e:	eef0 0a46 	vmov.f32	s1, s12
 800c362:	eeb0 0a66 	vmov.f32	s0, s13
 800c366:	f7f6 fe9d 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800c36a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d10c      	bne.n	800c38c <turn45outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c372:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c376:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c37a:	eeb0 1a47 	vmov.f32	s2, s14
 800c37e:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800c570 <turn45outR+0x3d8>
 800c382:	eeb0 0a67 	vmov.f32	s0, s15
 800c386:	f7f7 fd7f 	bl	8003e88 <mollifier_slalom_table>
 800c38a:	e015      	b.n	800c3b8 <turn45outR+0x220>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c38c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c390:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c394:	eef1 7a67 	vneg.f32	s15, s15
 800c398:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c39c:	eef0 2a66 	vmov.f32	s5, s13
 800c3a0:	eeb0 2a67 	vmov.f32	s4, s15
 800c3a4:	eddf 1a70 	vldr	s3, [pc, #448]	; 800c568 <turn45outR+0x3d0>
 800c3a8:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800c568 <turn45outR+0x3d0>
 800c3ac:	eddf 0a70 	vldr	s1, [pc, #448]	; 800c570 <turn45outR+0x3d8>
 800c3b0:	eeb0 0a47 	vmov.f32	s0, s14
 800c3b4:	f7f7 fc28 	bl	8003c08 <slalom_table2>
		wallmode.WallControlMode=0;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c3c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c3c4:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800c574 <turn45outR+0x3dc>
 800c3c8:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c3cc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c3d0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c3d4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c3d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c3dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3e0:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c3e4:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c3e8:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800c564 <turn45outR+0x3cc>
 800c3ec:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	eeb0 2a47 	vmov.f32	s4, s14
 800c3f6:	eef0 1a65 	vmov.f32	s3, s11
 800c3fa:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800c568 <turn45outR+0x3d0>
 800c3fe:	eef0 0a46 	vmov.f32	s1, s12
 800c402:	eeb0 0a66 	vmov.f32	s0, s13
 800c406:	f7f6 fe4d 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800c40a:	4b55      	ldr	r3, [pc, #340]	; (800c560 <turn45outR+0x3c8>)
 800c40c:	2200      	movs	r2, #0
 800c40e:	701a      	strb	r2, [r3, #0]
}
 800c410:	e09c      	b.n	800c54c <turn45outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800c412:	2300      	movs	r3, #0
 800c414:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c416:	2300      	movs	r3, #0
 800c418:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c41a:	2303      	movs	r3, #3
 800c41c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c41e:	2300      	movs	r3, #0
 800c420:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c422:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c426:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c42a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c42e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c432:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c436:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c43a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c43e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c442:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c446:	eddf 4a47 	vldr	s9, [pc, #284]	; 800c564 <turn45outR+0x3cc>
 800c44a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	eeb0 2a47 	vmov.f32	s4, s14
 800c454:	eef0 1a45 	vmov.f32	s3, s10
 800c458:	eeb0 1a65 	vmov.f32	s2, s11
 800c45c:	eef0 0a46 	vmov.f32	s1, s12
 800c460:	eeb0 0a66 	vmov.f32	s0, s13
 800c464:	f7f6 fe1e 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800c468:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d10c      	bne.n	800c48a <turn45outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c470:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c474:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c478:	eeb0 1a47 	vmov.f32	s2, s14
 800c47c:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800c570 <turn45outR+0x3d8>
 800c480:	eeb0 0a67 	vmov.f32	s0, s15
 800c484:	f7f7 fd00 	bl	8003e88 <mollifier_slalom_table>
 800c488:	e015      	b.n	800c4b6 <turn45outR+0x31e>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c48a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c48e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c492:	eef1 7a67 	vneg.f32	s15, s15
 800c496:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c49a:	eef0 2a66 	vmov.f32	s5, s13
 800c49e:	eeb0 2a67 	vmov.f32	s4, s15
 800c4a2:	eddf 1a31 	vldr	s3, [pc, #196]	; 800c568 <turn45outR+0x3d0>
 800c4a6:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800c568 <turn45outR+0x3d0>
 800c4aa:	eddf 0a31 	vldr	s1, [pc, #196]	; 800c570 <turn45outR+0x3d8>
 800c4ae:	eeb0 0a47 	vmov.f32	s0, s14
 800c4b2:	f7f7 fba9 	bl	8003c08 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c4be:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c4c2:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c4c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c4ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c4ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4d2:	edd7 7a01 	vldr	s15, [r7, #4]
 800c4d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c4da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4de:	eef0 7ae7 	vabs.f32	s15, s15
 800c4e2:	ee17 0a90 	vmov	r0, s15
 800c4e6:	f7f4 f857 	bl	8000598 <__aeabi_f2d>
 800c4ea:	f04f 0200 	mov.w	r2, #0
 800c4ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c4f2:	f7f4 f9d3 	bl	800089c <__aeabi_ddiv>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	4614      	mov	r4, r2
 800c4fc:	461d      	mov	r5, r3
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c500:	4618      	mov	r0, r3
 800c502:	f7f4 f849 	bl	8000598 <__aeabi_f2d>
 800c506:	4602      	mov	r2, r0
 800c508:	460b      	mov	r3, r1
 800c50a:	4620      	mov	r0, r4
 800c50c:	4629      	mov	r1, r5
 800c50e:	f7f4 f9c5 	bl	800089c <__aeabi_ddiv>
 800c512:	4602      	mov	r2, r0
 800c514:	460b      	mov	r3, r1
 800c516:	4610      	mov	r0, r2
 800c518:	4619      	mov	r1, r3
 800c51a:	f04f 0200 	mov.w	r2, #0
 800c51e:	4b16      	ldr	r3, [pc, #88]	; (800c578 <turn45outR+0x3e0>)
 800c520:	f7f3 fedc 	bl	80002dc <__adddf3>
 800c524:	4602      	mov	r2, r0
 800c526:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c528:	4610      	mov	r0, r2
 800c52a:	4619      	mov	r1, r3
 800c52c:	f7f4 fb64 	bl	8000bf8 <__aeabi_d2f>
 800c530:	4603      	mov	r3, r0
 800c532:	68f8      	ldr	r0, [r7, #12]
 800c534:	ee02 3a10 	vmov	s4, r3
 800c538:	edd7 1a01 	vldr	s3, [r7, #4]
 800c53c:	ed97 1a01 	vldr	s2, [r7, #4]
 800c540:	eef0 0a68 	vmov.f32	s1, s17
 800c544:	eeb0 0a48 	vmov.f32	s0, s16
 800c548:	f7f6 fdac 	bl	80030a4 <straight_table2>
}
 800c54c:	bf00      	nop
 800c54e:	3710      	adds	r7, #16
 800c550:	46bd      	mov	sp, r7
 800c552:	ecbd 8b02 	vpop	{d8}
 800c556:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c55a:	b004      	add	sp, #16
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop
 800c560:	200007e8 	.word	0x200007e8
 800c564:	42340000 	.word	0x42340000
 800c568:	00000000 	.word	0x00000000
 800c56c:	42d3477b 	.word	0x42d3477b
 800c570:	c2340000 	.word	0xc2340000
 800c574:	42b40000 	.word	0x42b40000
 800c578:	408f4000 	.word	0x408f4000

0800c57c <turn45outL>:


void turn45outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c57c:	b084      	sub	sp, #16
 800c57e:	b5b0      	push	{r4, r5, r7, lr}
 800c580:	ed2d 8b02 	vpush	{d8}
 800c584:	b084      	sub	sp, #16
 800c586:	af00      	add	r7, sp, #0
 800c588:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c58c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c590:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c594:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c598:	2b01      	cmp	r3, #1
 800c59a:	f040 80a3 	bne.w	800c6e4 <turn45outL+0x168>
			highspeed_mode = 1;
 800c59e:	4be5      	ldr	r3, [pc, #916]	; (800c934 <turn45outL+0x3b8>)
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c5b4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c5b8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c5bc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c5c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c5c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5c8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c5cc:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c5d0:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800c938 <turn45outL+0x3bc>
 800c5d4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	eeb0 2a47 	vmov.f32	s4, s14
 800c5de:	eef0 1a46 	vmov.f32	s3, s12
 800c5e2:	eeb0 1a66 	vmov.f32	s2, s13
 800c5e6:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800c93c <turn45outL+0x3c0>
 800c5ea:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800c940 <turn45outL+0x3c4>
 800c5ee:	f7f6 fd59 	bl	80030a4 <straight_table2>
			wallmode.WallControlMode=0;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=4;
 800c5f6:	2304      	movs	r3, #4
 800c5f8:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c5fa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c5fe:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c602:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c606:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c60a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c60e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c612:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c616:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c61a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c61e:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800c938 <turn45outL+0x3bc>
 800c622:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c626:	68f8      	ldr	r0, [r7, #12]
 800c628:	eeb0 2a47 	vmov.f32	s4, s14
 800c62c:	eef0 1a45 	vmov.f32	s3, s10
 800c630:	eeb0 1a65 	vmov.f32	s2, s11
 800c634:	eef0 0a46 	vmov.f32	s1, s12
 800c638:	eeb0 0a66 	vmov.f32	s0, s13
 800c63c:	f7f6 fd32 	bl	80030a4 <straight_table2>
			if(mollifier_mode == ON){
 800c640:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c644:	2b01      	cmp	r3, #1
 800c646:	d10c      	bne.n	800c662 <turn45outL+0xe6>
				mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c648:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c64c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c650:	eeb0 1a47 	vmov.f32	s2, s14
 800c654:	eddf 0ab8 	vldr	s1, [pc, #736]	; 800c938 <turn45outL+0x3bc>
 800c658:	eeb0 0a67 	vmov.f32	s0, s15
 800c65c:	f7f7 fc14 	bl	8003e88 <mollifier_slalom_table>
 800c660:	e013      	b.n	800c68a <turn45outL+0x10e>
			}else{
				slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c662:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c666:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c66a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c66e:	eef0 2a66 	vmov.f32	s5, s13
 800c672:	eeb0 2a47 	vmov.f32	s4, s14
 800c676:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800c93c <turn45outL+0x3c0>
 800c67a:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800c93c <turn45outL+0x3c0>
 800c67e:	eddf 0aae 	vldr	s1, [pc, #696]	; 800c938 <turn45outL+0x3bc>
 800c682:	eeb0 0a67 	vmov.f32	s0, s15
 800c686:	f7f7 fabf 	bl	8003c08 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800c68a:	2300      	movs	r3, #0
 800c68c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800c68e:	2300      	movs	r3, #0
 800c690:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c692:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c696:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800c944 <turn45outL+0x3c8>
 800c69a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c69e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c6a2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c6a6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c6aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6b2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c6b6:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c6ba:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800c938 <turn45outL+0x3bc>
 800c6be:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c6c2:	68f8      	ldr	r0, [r7, #12]
 800c6c4:	eeb0 2a47 	vmov.f32	s4, s14
 800c6c8:	eef0 1a65 	vmov.f32	s3, s11
 800c6cc:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800c93c <turn45outL+0x3c0>
 800c6d0:	eef0 0a46 	vmov.f32	s1, s12
 800c6d4:	eeb0 0a66 	vmov.f32	s0, s13
 800c6d8:	f7f6 fce4 	bl	80030a4 <straight_table2>
			highspeed_mode = 0;
 800c6dc:	4b95      	ldr	r3, [pc, #596]	; (800c934 <turn45outL+0x3b8>)
 800c6de:	2200      	movs	r2, #0
 800c6e0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c6e2:	e11e      	b.n	800c922 <turn45outL+0x3a6>
		}else if (test_mode >= 2) {
 800c6e4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d97f      	bls.n	800c7ec <turn45outL+0x270>
		highspeed_mode = 1;
 800c6ec:	4b91      	ldr	r3, [pc, #580]	; (800c934 <turn45outL+0x3b8>)
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800c6fa:	2304      	movs	r3, #4
 800c6fc:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c6fe:	2300      	movs	r3, #0
 800c700:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c702:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c706:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c70a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c70e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c712:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c716:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c71a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c71e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c722:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c726:	eddf 4a84 	vldr	s9, [pc, #528]	; 800c938 <turn45outL+0x3bc>
 800c72a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c72e:	68f8      	ldr	r0, [r7, #12]
 800c730:	eeb0 2a47 	vmov.f32	s4, s14
 800c734:	eef0 1a45 	vmov.f32	s3, s10
 800c738:	eeb0 1a65 	vmov.f32	s2, s11
 800c73c:	eef0 0a46 	vmov.f32	s1, s12
 800c740:	eeb0 0a66 	vmov.f32	s0, s13
 800c744:	f7f6 fcae 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800c748:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d10c      	bne.n	800c76a <turn45outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c750:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c754:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c758:	eeb0 1a47 	vmov.f32	s2, s14
 800c75c:	eddf 0a76 	vldr	s1, [pc, #472]	; 800c938 <turn45outL+0x3bc>
 800c760:	eeb0 0a67 	vmov.f32	s0, s15
 800c764:	f7f7 fb90 	bl	8003e88 <mollifier_slalom_table>
 800c768:	e013      	b.n	800c792 <turn45outL+0x216>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c76a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c76e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c772:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c776:	eef0 2a66 	vmov.f32	s5, s13
 800c77a:	eeb0 2a47 	vmov.f32	s4, s14
 800c77e:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800c93c <turn45outL+0x3c0>
 800c782:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800c93c <turn45outL+0x3c0>
 800c786:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800c938 <turn45outL+0x3bc>
 800c78a:	eeb0 0a67 	vmov.f32	s0, s15
 800c78e:	f7f7 fa3b 	bl	8003c08 <slalom_table2>
		wallmode.WallControlMode=0;
 800c792:	2300      	movs	r3, #0
 800c794:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c796:	2300      	movs	r3, #0
 800c798:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c79a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c79e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800c944 <turn45outL+0x3c8>
 800c7a2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c7a6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c7aa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c7ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c7b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7ba:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c7be:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c7c2:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800c938 <turn45outL+0x3bc>
 800c7c6:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c7ca:	68f8      	ldr	r0, [r7, #12]
 800c7cc:	eeb0 2a47 	vmov.f32	s4, s14
 800c7d0:	eef0 1a65 	vmov.f32	s3, s11
 800c7d4:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800c93c <turn45outL+0x3c0>
 800c7d8:	eef0 0a46 	vmov.f32	s1, s12
 800c7dc:	eeb0 0a66 	vmov.f32	s0, s13
 800c7e0:	f7f6 fc60 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800c7e4:	4b53      	ldr	r3, [pc, #332]	; (800c934 <turn45outL+0x3b8>)
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	701a      	strb	r2, [r3, #0]
}
 800c7ea:	e09a      	b.n	800c922 <turn45outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800c7f4:	2304      	movs	r3, #4
 800c7f6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c7fc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c800:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c804:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c808:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c80c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c810:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c814:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c818:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c81c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c820:	eddf 4a45 	vldr	s9, [pc, #276]	; 800c938 <turn45outL+0x3bc>
 800c824:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	eeb0 2a47 	vmov.f32	s4, s14
 800c82e:	eef0 1a45 	vmov.f32	s3, s10
 800c832:	eeb0 1a65 	vmov.f32	s2, s11
 800c836:	eef0 0a46 	vmov.f32	s1, s12
 800c83a:	eeb0 0a66 	vmov.f32	s0, s13
 800c83e:	f7f6 fc31 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800c842:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c846:	2b01      	cmp	r3, #1
 800c848:	d10c      	bne.n	800c864 <turn45outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c84a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c84e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c852:	eeb0 1a47 	vmov.f32	s2, s14
 800c856:	eddf 0a38 	vldr	s1, [pc, #224]	; 800c938 <turn45outL+0x3bc>
 800c85a:	eeb0 0a67 	vmov.f32	s0, s15
 800c85e:	f7f7 fb13 	bl	8003e88 <mollifier_slalom_table>
 800c862:	e013      	b.n	800c88c <turn45outL+0x310>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c864:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c868:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c86c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c870:	eef0 2a66 	vmov.f32	s5, s13
 800c874:	eeb0 2a47 	vmov.f32	s4, s14
 800c878:	eddf 1a30 	vldr	s3, [pc, #192]	; 800c93c <turn45outL+0x3c0>
 800c87c:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800c93c <turn45outL+0x3c0>
 800c880:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800c938 <turn45outL+0x3bc>
 800c884:	eeb0 0a67 	vmov.f32	s0, s15
 800c888:	f7f7 f9be 	bl	8003c08 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800c88c:	2301      	movs	r3, #1
 800c88e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c890:	2300      	movs	r3, #0
 800c892:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c894:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c898:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c89c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c8a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c8a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8a8:	edd7 7a01 	vldr	s15, [r7, #4]
 800c8ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c8b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8b4:	eef0 7ae7 	vabs.f32	s15, s15
 800c8b8:	ee17 0a90 	vmov	r0, s15
 800c8bc:	f7f3 fe6c 	bl	8000598 <__aeabi_f2d>
 800c8c0:	f04f 0200 	mov.w	r2, #0
 800c8c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c8c8:	f7f3 ffe8 	bl	800089c <__aeabi_ddiv>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	4614      	mov	r4, r2
 800c8d2:	461d      	mov	r5, r3
 800c8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7f3 fe5e 	bl	8000598 <__aeabi_f2d>
 800c8dc:	4602      	mov	r2, r0
 800c8de:	460b      	mov	r3, r1
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	4629      	mov	r1, r5
 800c8e4:	f7f3 ffda 	bl	800089c <__aeabi_ddiv>
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	460b      	mov	r3, r1
 800c8ec:	4610      	mov	r0, r2
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	f04f 0200 	mov.w	r2, #0
 800c8f4:	4b14      	ldr	r3, [pc, #80]	; (800c948 <turn45outL+0x3cc>)
 800c8f6:	f7f3 fcf1 	bl	80002dc <__adddf3>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c8fe:	4610      	mov	r0, r2
 800c900:	4619      	mov	r1, r3
 800c902:	f7f4 f979 	bl	8000bf8 <__aeabi_d2f>
 800c906:	4603      	mov	r3, r0
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	ee02 3a10 	vmov	s4, r3
 800c90e:	edd7 1a01 	vldr	s3, [r7, #4]
 800c912:	ed97 1a01 	vldr	s2, [r7, #4]
 800c916:	eef0 0a68 	vmov.f32	s1, s17
 800c91a:	eeb0 0a48 	vmov.f32	s0, s16
 800c91e:	f7f6 fbc1 	bl	80030a4 <straight_table2>
}
 800c922:	bf00      	nop
 800c924:	3710      	adds	r7, #16
 800c926:	46bd      	mov	sp, r7
 800c928:	ecbd 8b02 	vpop	{d8}
 800c92c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c930:	b004      	add	sp, #16
 800c932:	4770      	bx	lr
 800c934:	200007e8 	.word	0x200007e8
 800c938:	42340000 	.word	0x42340000
 800c93c:	00000000 	.word	0x00000000
 800c940:	42d3477b 	.word	0x42d3477b
 800c944:	42b40000 	.word	0x42b40000
 800c948:	408f4000 	.word	0x408f4000

0800c94c <turn135outR>:



void turn135outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c94c:	b084      	sub	sp, #16
 800c94e:	b5b0      	push	{r4, r5, r7, lr}
 800c950:	ed2d 8b02 	vpush	{d8}
 800c954:	b084      	sub	sp, #16
 800c956:	af00      	add	r7, sp, #0
 800c958:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c95c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c960:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c964:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c968:	2b01      	cmp	r3, #1
 800c96a:	f040 80a5 	bne.w	800cab8 <turn135outR+0x16c>
			highspeed_mode = 1;
 800c96e:	4be9      	ldr	r3, [pc, #932]	; (800cd14 <turn135outR+0x3c8>)
 800c970:	2201      	movs	r2, #1
 800c972:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800c974:	2300      	movs	r3, #0
 800c976:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800c978:	2300      	movs	r3, #0
 800c97a:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800c97c:	2300      	movs	r3, #0
 800c97e:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800c980:	2300      	movs	r3, #0
 800c982:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c984:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c988:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c98c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c990:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c994:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c998:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c99c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c9a0:	eddf 5add 	vldr	s11, [pc, #884]	; 800cd18 <turn135outR+0x3cc>
 800c9a4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c9a8:	68f8      	ldr	r0, [r7, #12]
 800c9aa:	eeb0 2a47 	vmov.f32	s4, s14
 800c9ae:	eef0 1a46 	vmov.f32	s3, s12
 800c9b2:	eeb0 1a66 	vmov.f32	s2, s13
 800c9b6:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800cd1c <turn135outR+0x3d0>
 800c9ba:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800cd20 <turn135outR+0x3d4>
 800c9be:	f7f6 fb71 	bl	80030a4 <straight_table2>
			wallmode.WallControlMode=0;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800c9c6:	2303      	movs	r3, #3
 800c9c8:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c9ca:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c9ce:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c9d2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c9d6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c9da:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c9de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c9e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9e6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c9ea:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c9ee:	eddf 4aca 	vldr	s9, [pc, #808]	; 800cd18 <turn135outR+0x3cc>
 800c9f2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c9f6:	68f8      	ldr	r0, [r7, #12]
 800c9f8:	eeb0 2a47 	vmov.f32	s4, s14
 800c9fc:	eef0 1a45 	vmov.f32	s3, s10
 800ca00:	eeb0 1a65 	vmov.f32	s2, s11
 800ca04:	eef0 0a46 	vmov.f32	s1, s12
 800ca08:	eeb0 0a66 	vmov.f32	s0, s13
 800ca0c:	f7f6 fb4a 	bl	80030a4 <straight_table2>
			if(mollifier_mode == ON){
 800ca10:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d10c      	bne.n	800ca32 <turn135outR+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800ca18:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca1c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ca20:	eeb0 1a47 	vmov.f32	s2, s14
 800ca24:	eddf 0abf 	vldr	s1, [pc, #764]	; 800cd24 <turn135outR+0x3d8>
 800ca28:	eeb0 0a67 	vmov.f32	s0, s15
 800ca2c:	f7f7 fa2c 	bl	8003e88 <mollifier_slalom_table>
 800ca30:	e015      	b.n	800ca5e <turn135outR+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ca32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca36:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ca3a:	eef1 7a67 	vneg.f32	s15, s15
 800ca3e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ca42:	eef0 2a66 	vmov.f32	s5, s13
 800ca46:	eeb0 2a67 	vmov.f32	s4, s15
 800ca4a:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800cd1c <turn135outR+0x3d0>
 800ca4e:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800cd1c <turn135outR+0x3d0>
 800ca52:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800cd24 <turn135outR+0x3d8>
 800ca56:	eeb0 0a47 	vmov.f32	s0, s14
 800ca5a:	f7f7 f8d5 	bl	8003c08 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800ca62:	2300      	movs	r3, #0
 800ca64:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ca66:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ca6a:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800cd28 <turn135outR+0x3dc>
 800ca6e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ca72:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ca76:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ca7a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca7e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca82:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca86:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ca8a:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ca8e:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800cd18 <turn135outR+0x3cc>
 800ca92:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ca96:	68f8      	ldr	r0, [r7, #12]
 800ca98:	eeb0 2a47 	vmov.f32	s4, s14
 800ca9c:	eef0 1a65 	vmov.f32	s3, s11
 800caa0:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800cd1c <turn135outR+0x3d0>
 800caa4:	eef0 0a46 	vmov.f32	s1, s12
 800caa8:	eeb0 0a66 	vmov.f32	s0, s13
 800caac:	f7f6 fafa 	bl	80030a4 <straight_table2>
			highspeed_mode = 0;
 800cab0:	4b98      	ldr	r3, [pc, #608]	; (800cd14 <turn135outR+0x3c8>)
 800cab2:	2200      	movs	r2, #0
 800cab4:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800cab6:	e123      	b.n	800cd00 <turn135outR+0x3b4>
		}else if (test_mode >= 2) {
 800cab8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	f240 8082 	bls.w	800cbc6 <turn135outR+0x27a>
		highspeed_mode = 1;
 800cac2:	4b94      	ldr	r3, [pc, #592]	; (800cd14 <turn135outR+0x3c8>)
 800cac4:	2201      	movs	r2, #1
 800cac6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cac8:	2300      	movs	r3, #0
 800caca:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cacc:	2300      	movs	r3, #0
 800cace:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800cad0:	2303      	movs	r3, #3
 800cad2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cad4:	2300      	movs	r3, #0
 800cad6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cad8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cadc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cae0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cae4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cae8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800caec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800caf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800caf4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800caf8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cafc:	eddf 4a86 	vldr	s9, [pc, #536]	; 800cd18 <turn135outR+0x3cc>
 800cb00:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cb04:	68f8      	ldr	r0, [r7, #12]
 800cb06:	eeb0 2a47 	vmov.f32	s4, s14
 800cb0a:	eef0 1a45 	vmov.f32	s3, s10
 800cb0e:	eeb0 1a65 	vmov.f32	s2, s11
 800cb12:	eef0 0a46 	vmov.f32	s1, s12
 800cb16:	eeb0 0a66 	vmov.f32	s0, s13
 800cb1a:	f7f6 fac3 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800cb1e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d10c      	bne.n	800cb40 <turn135outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cb26:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb2a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cb2e:	eeb0 1a47 	vmov.f32	s2, s14
 800cb32:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800cd24 <turn135outR+0x3d8>
 800cb36:	eeb0 0a67 	vmov.f32	s0, s15
 800cb3a:	f7f7 f9a5 	bl	8003e88 <mollifier_slalom_table>
 800cb3e:	e015      	b.n	800cb6c <turn135outR+0x220>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cb40:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb44:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cb48:	eef1 7a67 	vneg.f32	s15, s15
 800cb4c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cb50:	eef0 2a66 	vmov.f32	s5, s13
 800cb54:	eeb0 2a67 	vmov.f32	s4, s15
 800cb58:	eddf 1a70 	vldr	s3, [pc, #448]	; 800cd1c <turn135outR+0x3d0>
 800cb5c:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800cd1c <turn135outR+0x3d0>
 800cb60:	eddf 0a70 	vldr	s1, [pc, #448]	; 800cd24 <turn135outR+0x3d8>
 800cb64:	eeb0 0a47 	vmov.f32	s0, s14
 800cb68:	f7f7 f84e 	bl	8003c08 <slalom_table2>
		wallmode.WallControlMode=0;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cb70:	2300      	movs	r3, #0
 800cb72:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cb74:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cb78:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800cd28 <turn135outR+0x3dc>
 800cb7c:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cb80:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cb84:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cb88:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb94:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cb98:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cb9c:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800cd18 <turn135outR+0x3cc>
 800cba0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cba4:	68f8      	ldr	r0, [r7, #12]
 800cba6:	eeb0 2a47 	vmov.f32	s4, s14
 800cbaa:	eef0 1a65 	vmov.f32	s3, s11
 800cbae:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800cd1c <turn135outR+0x3d0>
 800cbb2:	eef0 0a46 	vmov.f32	s1, s12
 800cbb6:	eeb0 0a66 	vmov.f32	s0, s13
 800cbba:	f7f6 fa73 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800cbbe:	4b55      	ldr	r3, [pc, #340]	; (800cd14 <turn135outR+0x3c8>)
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	701a      	strb	r2, [r3, #0]
}
 800cbc4:	e09c      	b.n	800cd00 <turn135outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800cbce:	2303      	movs	r3, #3
 800cbd0:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cbd6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cbda:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cbde:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cbe2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cbe6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cbea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cbee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbf2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cbf6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cbfa:	eddf 4a47 	vldr	s9, [pc, #284]	; 800cd18 <turn135outR+0x3cc>
 800cbfe:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cc02:	68f8      	ldr	r0, [r7, #12]
 800cc04:	eeb0 2a47 	vmov.f32	s4, s14
 800cc08:	eef0 1a45 	vmov.f32	s3, s10
 800cc0c:	eeb0 1a65 	vmov.f32	s2, s11
 800cc10:	eef0 0a46 	vmov.f32	s1, s12
 800cc14:	eeb0 0a66 	vmov.f32	s0, s13
 800cc18:	f7f6 fa44 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800cc1c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d10c      	bne.n	800cc3e <turn135outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cc24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc28:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cc2c:	eeb0 1a47 	vmov.f32	s2, s14
 800cc30:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800cd24 <turn135outR+0x3d8>
 800cc34:	eeb0 0a67 	vmov.f32	s0, s15
 800cc38:	f7f7 f926 	bl	8003e88 <mollifier_slalom_table>
 800cc3c:	e015      	b.n	800cc6a <turn135outR+0x31e>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cc3e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc42:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cc46:	eef1 7a67 	vneg.f32	s15, s15
 800cc4a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cc4e:	eef0 2a66 	vmov.f32	s5, s13
 800cc52:	eeb0 2a67 	vmov.f32	s4, s15
 800cc56:	eddf 1a31 	vldr	s3, [pc, #196]	; 800cd1c <turn135outR+0x3d0>
 800cc5a:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800cd1c <turn135outR+0x3d0>
 800cc5e:	eddf 0a31 	vldr	s1, [pc, #196]	; 800cd24 <turn135outR+0x3d8>
 800cc62:	eeb0 0a47 	vmov.f32	s0, s14
 800cc66:	f7f6 ffcf 	bl	8003c08 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cc72:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cc76:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cc7a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc7e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc82:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc86:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cc8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc92:	eef0 7ae7 	vabs.f32	s15, s15
 800cc96:	ee17 0a90 	vmov	r0, s15
 800cc9a:	f7f3 fc7d 	bl	8000598 <__aeabi_f2d>
 800cc9e:	f04f 0200 	mov.w	r2, #0
 800cca2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cca6:	f7f3 fdf9 	bl	800089c <__aeabi_ddiv>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	460b      	mov	r3, r1
 800ccae:	4614      	mov	r4, r2
 800ccb0:	461d      	mov	r5, r3
 800ccb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7f3 fc6f 	bl	8000598 <__aeabi_f2d>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	f7f3 fdeb 	bl	800089c <__aeabi_ddiv>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	460b      	mov	r3, r1
 800ccca:	4610      	mov	r0, r2
 800cccc:	4619      	mov	r1, r3
 800ccce:	f04f 0200 	mov.w	r2, #0
 800ccd2:	4b16      	ldr	r3, [pc, #88]	; (800cd2c <turn135outR+0x3e0>)
 800ccd4:	f7f3 fb02 	bl	80002dc <__adddf3>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ccdc:	4610      	mov	r0, r2
 800ccde:	4619      	mov	r1, r3
 800cce0:	f7f3 ff8a 	bl	8000bf8 <__aeabi_d2f>
 800cce4:	4603      	mov	r3, r0
 800cce6:	68f8      	ldr	r0, [r7, #12]
 800cce8:	ee02 3a10 	vmov	s4, r3
 800ccec:	edd7 1a01 	vldr	s3, [r7, #4]
 800ccf0:	ed97 1a01 	vldr	s2, [r7, #4]
 800ccf4:	eef0 0a68 	vmov.f32	s1, s17
 800ccf8:	eeb0 0a48 	vmov.f32	s0, s16
 800ccfc:	f7f6 f9d2 	bl	80030a4 <straight_table2>
}
 800cd00:	bf00      	nop
 800cd02:	3710      	adds	r7, #16
 800cd04:	46bd      	mov	sp, r7
 800cd06:	ecbd 8b02 	vpop	{d8}
 800cd0a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cd0e:	b004      	add	sp, #16
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
 800cd14:	200007e8 	.word	0x200007e8
 800cd18:	42340000 	.word	0x42340000
 800cd1c:	00000000 	.word	0x00000000
 800cd20:	42d3477b 	.word	0x42d3477b
 800cd24:	c3070000 	.word	0xc3070000
 800cd28:	42b40000 	.word	0x42b40000
 800cd2c:	408f4000 	.word	0x408f4000

0800cd30 <turn135outL>:


void turn135outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800cd30:	b084      	sub	sp, #16
 800cd32:	b5b0      	push	{r4, r5, r7, lr}
 800cd34:	ed2d 8b02 	vpush	{d8}
 800cd38:	b084      	sub	sp, #16
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800cd40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cd44:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800cd48:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	f040 80a3 	bne.w	800ce98 <turn135outL+0x168>
		highspeed_mode = 1;
 800cd52:	4be5      	ldr	r3, [pc, #916]	; (800d0e8 <turn135outL+0x3b8>)
 800cd54:	2201      	movs	r2, #1
 800cd56:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800cd60:	2300      	movs	r3, #0
 800cd62:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cd64:	2300      	movs	r3, #0
 800cd66:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cd68:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cd6c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cd70:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd74:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd78:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd7c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cd80:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cd84:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800d0ec <turn135outL+0x3bc>
 800cd88:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cd8c:	68f8      	ldr	r0, [r7, #12]
 800cd8e:	eeb0 2a47 	vmov.f32	s4, s14
 800cd92:	eef0 1a46 	vmov.f32	s3, s12
 800cd96:	eeb0 1a66 	vmov.f32	s2, s13
 800cd9a:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800d0f0 <turn135outL+0x3c0>
 800cd9e:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800d0f4 <turn135outL+0x3c4>
 800cda2:	f7f6 f97f 	bl	80030a4 <straight_table2>
		wallmode.WallControlMode=0;
 800cda6:	2300      	movs	r3, #0
 800cda8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=4;
 800cdaa:	2304      	movs	r3, #4
 800cdac:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cdae:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cdb2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cdb6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cdba:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cdbe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cdc2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cdc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdca:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cdce:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cdd2:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800d0ec <turn135outL+0x3bc>
 800cdd6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cdda:	68f8      	ldr	r0, [r7, #12]
 800cddc:	eeb0 2a47 	vmov.f32	s4, s14
 800cde0:	eef0 1a45 	vmov.f32	s3, s10
 800cde4:	eeb0 1a65 	vmov.f32	s2, s11
 800cde8:	eef0 0a46 	vmov.f32	s1, s12
 800cdec:	eeb0 0a66 	vmov.f32	s0, s13
 800cdf0:	f7f6 f958 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800cdf4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cdf8:	2b01      	cmp	r3, #1
 800cdfa:	d10c      	bne.n	800ce16 <turn135outL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800cdfc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce00:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ce04:	eeb0 1a47 	vmov.f32	s2, s14
 800ce08:	eddf 0abb 	vldr	s1, [pc, #748]	; 800d0f8 <turn135outL+0x3c8>
 800ce0c:	eeb0 0a67 	vmov.f32	s0, s15
 800ce10:	f7f7 f83a 	bl	8003e88 <mollifier_slalom_table>
 800ce14:	e013      	b.n	800ce3e <turn135outL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ce16:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce1a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ce1e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ce22:	eef0 2a66 	vmov.f32	s5, s13
 800ce26:	eeb0 2a47 	vmov.f32	s4, s14
 800ce2a:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800d0f0 <turn135outL+0x3c0>
 800ce2e:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800d0f0 <turn135outL+0x3c0>
 800ce32:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800d0f8 <turn135outL+0x3c8>
 800ce36:	eeb0 0a67 	vmov.f32	s0, s15
 800ce3a:	f7f6 fee5 	bl	8003c08 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ce42:	2300      	movs	r3, #0
 800ce44:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ce46:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ce4a:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800d0fc <turn135outL+0x3cc>
 800ce4e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ce52:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ce56:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ce5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce62:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce66:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ce6a:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ce6e:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800d0ec <turn135outL+0x3bc>
 800ce72:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ce76:	68f8      	ldr	r0, [r7, #12]
 800ce78:	eeb0 2a47 	vmov.f32	s4, s14
 800ce7c:	eef0 1a65 	vmov.f32	s3, s11
 800ce80:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800d0f0 <turn135outL+0x3c0>
 800ce84:	eef0 0a46 	vmov.f32	s1, s12
 800ce88:	eeb0 0a66 	vmov.f32	s0, s13
 800ce8c:	f7f6 f90a 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800ce90:	4b95      	ldr	r3, [pc, #596]	; (800d0e8 <turn135outL+0x3b8>)
 800ce92:	2200      	movs	r2, #0
 800ce94:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ce96:	e11e      	b.n	800d0d6 <turn135outL+0x3a6>
	}else if (test_mode >= 2) {
 800ce98:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d97f      	bls.n	800cfa0 <turn135outL+0x270>
		highspeed_mode = 1;
 800cea0:	4b91      	ldr	r3, [pc, #580]	; (800d0e8 <turn135outL+0x3b8>)
 800cea2:	2201      	movs	r2, #1
 800cea4:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cea6:	2300      	movs	r3, #0
 800cea8:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800ceae:	2304      	movs	r3, #4
 800ceb0:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ceb6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ceba:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cebe:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cec2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cec6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ceca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cece:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ced2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ced6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ceda:	eddf 4a84 	vldr	s9, [pc, #528]	; 800d0ec <turn135outL+0x3bc>
 800cede:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cee2:	68f8      	ldr	r0, [r7, #12]
 800cee4:	eeb0 2a47 	vmov.f32	s4, s14
 800cee8:	eef0 1a45 	vmov.f32	s3, s10
 800ceec:	eeb0 1a65 	vmov.f32	s2, s11
 800cef0:	eef0 0a46 	vmov.f32	s1, s12
 800cef4:	eeb0 0a66 	vmov.f32	s0, s13
 800cef8:	f7f6 f8d4 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800cefc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d10c      	bne.n	800cf1e <turn135outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800cf04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf08:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cf0c:	eeb0 1a47 	vmov.f32	s2, s14
 800cf10:	eddf 0a79 	vldr	s1, [pc, #484]	; 800d0f8 <turn135outL+0x3c8>
 800cf14:	eeb0 0a67 	vmov.f32	s0, s15
 800cf18:	f7f6 ffb6 	bl	8003e88 <mollifier_slalom_table>
 800cf1c:	e013      	b.n	800cf46 <turn135outL+0x216>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cf1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf22:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cf26:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cf2a:	eef0 2a66 	vmov.f32	s5, s13
 800cf2e:	eeb0 2a47 	vmov.f32	s4, s14
 800cf32:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800d0f0 <turn135outL+0x3c0>
 800cf36:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800d0f0 <turn135outL+0x3c0>
 800cf3a:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800d0f8 <turn135outL+0x3c8>
 800cf3e:	eeb0 0a67 	vmov.f32	s0, s15
 800cf42:	f7f6 fe61 	bl	8003c08 <slalom_table2>
		wallmode.WallControlMode=0;
 800cf46:	2300      	movs	r3, #0
 800cf48:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cf4e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cf52:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800d0fc <turn135outL+0x3cc>
 800cf56:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cf5a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cf5e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cf62:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf66:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf6e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cf72:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cf76:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800d0ec <turn135outL+0x3bc>
 800cf7a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cf7e:	68f8      	ldr	r0, [r7, #12]
 800cf80:	eeb0 2a47 	vmov.f32	s4, s14
 800cf84:	eef0 1a65 	vmov.f32	s3, s11
 800cf88:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800d0f0 <turn135outL+0x3c0>
 800cf8c:	eef0 0a46 	vmov.f32	s1, s12
 800cf90:	eeb0 0a66 	vmov.f32	s0, s13
 800cf94:	f7f6 f886 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800cf98:	4b53      	ldr	r3, [pc, #332]	; (800d0e8 <turn135outL+0x3b8>)
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	701a      	strb	r2, [r3, #0]
}
 800cf9e:	e09a      	b.n	800d0d6 <turn135outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800cfa8:	2304      	movs	r3, #4
 800cfaa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cfac:	2300      	movs	r3, #0
 800cfae:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cfb0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cfb4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cfb8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cfbc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cfc0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cfc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cfc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cfcc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cfd0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cfd4:	eddf 4a45 	vldr	s9, [pc, #276]	; 800d0ec <turn135outL+0x3bc>
 800cfd8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cfdc:	68f8      	ldr	r0, [r7, #12]
 800cfde:	eeb0 2a47 	vmov.f32	s4, s14
 800cfe2:	eef0 1a45 	vmov.f32	s3, s10
 800cfe6:	eeb0 1a65 	vmov.f32	s2, s11
 800cfea:	eef0 0a46 	vmov.f32	s1, s12
 800cfee:	eeb0 0a66 	vmov.f32	s0, s13
 800cff2:	f7f6 f857 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800cff6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	d10c      	bne.n	800d018 <turn135outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800cffe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d002:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d006:	eeb0 1a47 	vmov.f32	s2, s14
 800d00a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800d0f8 <turn135outL+0x3c8>
 800d00e:	eeb0 0a67 	vmov.f32	s0, s15
 800d012:	f7f6 ff39 	bl	8003e88 <mollifier_slalom_table>
 800d016:	e013      	b.n	800d040 <turn135outL+0x310>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d018:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d01c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d020:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d024:	eef0 2a66 	vmov.f32	s5, s13
 800d028:	eeb0 2a47 	vmov.f32	s4, s14
 800d02c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800d0f0 <turn135outL+0x3c0>
 800d030:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800d0f0 <turn135outL+0x3c0>
 800d034:	eddf 0a30 	vldr	s1, [pc, #192]	; 800d0f8 <turn135outL+0x3c8>
 800d038:	eeb0 0a67 	vmov.f32	s0, s15
 800d03c:	f7f6 fde4 	bl	8003c08 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d040:	2301      	movs	r3, #1
 800d042:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d044:	2300      	movs	r3, #0
 800d046:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d048:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d04c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d050:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d054:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d05c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d060:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d064:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d068:	eef0 7ae7 	vabs.f32	s15, s15
 800d06c:	ee17 0a90 	vmov	r0, s15
 800d070:	f7f3 fa92 	bl	8000598 <__aeabi_f2d>
 800d074:	f04f 0200 	mov.w	r2, #0
 800d078:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d07c:	f7f3 fc0e 	bl	800089c <__aeabi_ddiv>
 800d080:	4602      	mov	r2, r0
 800d082:	460b      	mov	r3, r1
 800d084:	4614      	mov	r4, r2
 800d086:	461d      	mov	r5, r3
 800d088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7f3 fa84 	bl	8000598 <__aeabi_f2d>
 800d090:	4602      	mov	r2, r0
 800d092:	460b      	mov	r3, r1
 800d094:	4620      	mov	r0, r4
 800d096:	4629      	mov	r1, r5
 800d098:	f7f3 fc00 	bl	800089c <__aeabi_ddiv>
 800d09c:	4602      	mov	r2, r0
 800d09e:	460b      	mov	r3, r1
 800d0a0:	4610      	mov	r0, r2
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	f04f 0200 	mov.w	r2, #0
 800d0a8:	4b15      	ldr	r3, [pc, #84]	; (800d100 <turn135outL+0x3d0>)
 800d0aa:	f7f3 f917 	bl	80002dc <__adddf3>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d0b2:	4610      	mov	r0, r2
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	f7f3 fd9f 	bl	8000bf8 <__aeabi_d2f>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	68f8      	ldr	r0, [r7, #12]
 800d0be:	ee02 3a10 	vmov	s4, r3
 800d0c2:	edd7 1a01 	vldr	s3, [r7, #4]
 800d0c6:	ed97 1a01 	vldr	s2, [r7, #4]
 800d0ca:	eef0 0a68 	vmov.f32	s1, s17
 800d0ce:	eeb0 0a48 	vmov.f32	s0, s16
 800d0d2:	f7f5 ffe7 	bl	80030a4 <straight_table2>
}
 800d0d6:	bf00      	nop
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	ecbd 8b02 	vpop	{d8}
 800d0e0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d0e4:	b004      	add	sp, #16
 800d0e6:	4770      	bx	lr
 800d0e8:	200007e8 	.word	0x200007e8
 800d0ec:	42340000 	.word	0x42340000
 800d0f0:	00000000 	.word	0x00000000
 800d0f4:	42d3477b 	.word	0x42d3477b
 800d0f8:	43070000 	.word	0x43070000
 800d0fc:	42b40000 	.word	0x42b40000
 800d100:	408f4000 	.word	0x408f4000
 800d104:	00000000 	.word	0x00000000

0800d108 <V90R>:


void V90R(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d108:	b084      	sub	sp, #16
 800d10a:	b5b0      	push	{r4, r5, r7, lr}
 800d10c:	ed2d 8b02 	vpush	{d8}
 800d110:	b084      	sub	sp, #16
 800d112:	af00      	add	r7, sp, #0
 800d114:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d118:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d11c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d120:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d124:	2b01      	cmp	r3, #1
 800d126:	f040 80af 	bne.w	800d288 <V90R+0x180>
			highspeed_mode = 1;
 800d12a:	4bc1      	ldr	r3, [pc, #772]	; (800d430 <V90R+0x328>)
 800d12c:	2201      	movs	r2, #1
 800d12e:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800d130:	2300      	movs	r3, #0
 800d132:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800d134:	2300      	movs	r3, #0
 800d136:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800d138:	2300      	movs	r3, #0
 800d13a:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800d13c:	2300      	movs	r3, #0
 800d13e:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d140:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d144:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d148:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d14c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d150:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d154:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d158:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d15c:	eddf 5ab5 	vldr	s11, [pc, #724]	; 800d434 <V90R+0x32c>
 800d160:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d164:	68f8      	ldr	r0, [r7, #12]
 800d166:	eeb0 2a47 	vmov.f32	s4, s14
 800d16a:	eef0 1a46 	vmov.f32	s3, s12
 800d16e:	eeb0 1a66 	vmov.f32	s2, s13
 800d172:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800d43c <V90R+0x334>
 800d176:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800d438 <V90R+0x330>
 800d17a:	f7f5 ff93 	bl	80030a4 <straight_table2>
			wallmode.WallControlMode=0;
 800d17e:	2300      	movs	r3, #0
 800d180:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800d182:	2303      	movs	r3, #3
 800d184:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d186:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d18a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d18e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d192:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d196:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d19a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d19e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1a2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d1a6:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d1aa:	eddf 4aa2 	vldr	s9, [pc, #648]	; 800d434 <V90R+0x32c>
 800d1ae:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	eeb0 2a47 	vmov.f32	s4, s14
 800d1b8:	eef0 1a45 	vmov.f32	s3, s10
 800d1bc:	eeb0 1a65 	vmov.f32	s2, s11
 800d1c0:	eef0 0a46 	vmov.f32	s1, s12
 800d1c4:	eeb0 0a66 	vmov.f32	s0, s13
 800d1c8:	f7f5 ff6c 	bl	80030a4 <straight_table2>
			if(mollifier_mode == ON){
 800d1cc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d10c      	bne.n	800d1ee <V90R+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d1d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d1dc:	eeb0 1a47 	vmov.f32	s2, s14
 800d1e0:	eddf 0a97 	vldr	s1, [pc, #604]	; 800d440 <V90R+0x338>
 800d1e4:	eeb0 0a67 	vmov.f32	s0, s15
 800d1e8:	f7f6 fe4e 	bl	8003e88 <mollifier_slalom_table>
 800d1ec:	e015      	b.n	800d21a <V90R+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d1ee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d1f2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d1f6:	eef1 7a67 	vneg.f32	s15, s15
 800d1fa:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d1fe:	eef0 2a66 	vmov.f32	s5, s13
 800d202:	eeb0 2a67 	vmov.f32	s4, s15
 800d206:	eddf 1a8d 	vldr	s3, [pc, #564]	; 800d43c <V90R+0x334>
 800d20a:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 800d43c <V90R+0x334>
 800d20e:	eddf 0a8c 	vldr	s1, [pc, #560]	; 800d440 <V90R+0x338>
 800d212:	eeb0 0a47 	vmov.f32	s0, s14
 800d216:	f7f6 fcf7 	bl	8003c08 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d21a:	2300      	movs	r3, #0
 800d21c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d21e:	2300      	movs	r3, #0
 800d220:	73fb      	strb	r3, [r7, #15]
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d224:	4618      	mov	r0, r3
 800d226:	f7f3 f9b7 	bl	8000598 <__aeabi_f2d>
 800d22a:	a37f      	add	r3, pc, #508	; (adr r3, 800d428 <V90R+0x320>)
 800d22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d230:	f7f3 f854 	bl	80002dc <__adddf3>
 800d234:	4602      	mov	r2, r0
 800d236:	460b      	mov	r3, r1
 800d238:	4610      	mov	r0, r2
 800d23a:	4619      	mov	r1, r3
 800d23c:	f7f3 fcdc 	bl	8000bf8 <__aeabi_d2f>
 800d240:	4603      	mov	r3, r0
 800d242:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d246:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d24a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d24e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d252:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d256:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d25a:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d25e:	eddf 5a75 	vldr	s11, [pc, #468]	; 800d434 <V90R+0x32c>
 800d262:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d266:	68f8      	ldr	r0, [r7, #12]
 800d268:	eeb0 2a47 	vmov.f32	s4, s14
 800d26c:	eef0 1a46 	vmov.f32	s3, s12
 800d270:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800d43c <V90R+0x334>
 800d274:	eef0 0a66 	vmov.f32	s1, s13
 800d278:	ee00 3a10 	vmov	s0, r3
 800d27c:	f7f5 ff12 	bl	80030a4 <straight_table2>
			highspeed_mode = 0;
 800d280:	4b6b      	ldr	r3, [pc, #428]	; (800d430 <V90R+0x328>)
 800d282:	2200      	movs	r2, #0
 800d284:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d286:	e13e      	b.n	800d506 <V90R+0x3fe>
		}else if (test_mode >= 2) {
 800d288:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	f240 808c 	bls.w	800d3aa <V90R+0x2a2>
		highspeed_mode = 1;
 800d292:	4b67      	ldr	r3, [pc, #412]	; (800d430 <V90R+0x328>)
 800d294:	2201      	movs	r2, #1
 800d296:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d298:	2300      	movs	r3, #0
 800d29a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d29c:	2300      	movs	r3, #0
 800d29e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d2a0:	2303      	movs	r3, #3
 800d2a2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d2a8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d2ac:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d2b0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d2b4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d2b8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d2bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2c4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d2c8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d2cc:	eddf 4a59 	vldr	s9, [pc, #356]	; 800d434 <V90R+0x32c>
 800d2d0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	eeb0 2a47 	vmov.f32	s4, s14
 800d2da:	eef0 1a45 	vmov.f32	s3, s10
 800d2de:	eeb0 1a65 	vmov.f32	s2, s11
 800d2e2:	eef0 0a46 	vmov.f32	s1, s12
 800d2e6:	eeb0 0a66 	vmov.f32	s0, s13
 800d2ea:	f7f5 fedb 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800d2ee:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d10c      	bne.n	800d310 <V90R+0x208>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d2f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2fa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d2fe:	eeb0 1a47 	vmov.f32	s2, s14
 800d302:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800d440 <V90R+0x338>
 800d306:	eeb0 0a67 	vmov.f32	s0, s15
 800d30a:	f7f6 fdbd 	bl	8003e88 <mollifier_slalom_table>
 800d30e:	e015      	b.n	800d33c <V90R+0x234>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d310:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d314:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d318:	eef1 7a67 	vneg.f32	s15, s15
 800d31c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d320:	eef0 2a66 	vmov.f32	s5, s13
 800d324:	eeb0 2a67 	vmov.f32	s4, s15
 800d328:	eddf 1a44 	vldr	s3, [pc, #272]	; 800d43c <V90R+0x334>
 800d32c:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800d43c <V90R+0x334>
 800d330:	eddf 0a43 	vldr	s1, [pc, #268]	; 800d440 <V90R+0x338>
 800d334:	eeb0 0a47 	vmov.f32	s0, s14
 800d338:	f7f6 fc66 	bl	8003c08 <slalom_table2>
		wallmode.WallControlMode=0;
 800d33c:	2300      	movs	r3, #0
 800d33e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d340:	2300      	movs	r3, #0
 800d342:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d346:	4618      	mov	r0, r3
 800d348:	f7f3 f926 	bl	8000598 <__aeabi_f2d>
 800d34c:	a336      	add	r3, pc, #216	; (adr r3, 800d428 <V90R+0x320>)
 800d34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d352:	f7f2 ffc3 	bl	80002dc <__adddf3>
 800d356:	4602      	mov	r2, r0
 800d358:	460b      	mov	r3, r1
 800d35a:	4610      	mov	r0, r2
 800d35c:	4619      	mov	r1, r3
 800d35e:	f7f3 fc4b 	bl	8000bf8 <__aeabi_d2f>
 800d362:	4603      	mov	r3, r0
 800d364:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d368:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d36c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d370:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d374:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d378:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d37c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d380:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d434 <V90R+0x32c>
 800d384:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d388:	68f8      	ldr	r0, [r7, #12]
 800d38a:	eeb0 2a47 	vmov.f32	s4, s14
 800d38e:	eef0 1a46 	vmov.f32	s3, s12
 800d392:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800d43c <V90R+0x334>
 800d396:	eef0 0a66 	vmov.f32	s1, s13
 800d39a:	ee00 3a10 	vmov	s0, r3
 800d39e:	f7f5 fe81 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800d3a2:	4b23      	ldr	r3, [pc, #140]	; (800d430 <V90R+0x328>)
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	701a      	strb	r2, [r3, #0]
}
 800d3a8:	e0ad      	b.n	800d506 <V90R+0x3fe>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d3b2:	2303      	movs	r3, #3
 800d3b4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d3ba:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d3be:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d3c2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d3c6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d3ca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d3ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d3d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3d6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d3da:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d3de:	eddf 4a15 	vldr	s9, [pc, #84]	; 800d434 <V90R+0x32c>
 800d3e2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d3e6:	68f8      	ldr	r0, [r7, #12]
 800d3e8:	eeb0 2a47 	vmov.f32	s4, s14
 800d3ec:	eef0 1a45 	vmov.f32	s3, s10
 800d3f0:	eeb0 1a65 	vmov.f32	s2, s11
 800d3f4:	eef0 0a46 	vmov.f32	s1, s12
 800d3f8:	eeb0 0a66 	vmov.f32	s0, s13
 800d3fc:	f7f5 fe52 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800d400:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d404:	2b01      	cmp	r3, #1
 800d406:	d11d      	bne.n	800d444 <V90R+0x33c>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d408:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d40c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d410:	eeb0 1a47 	vmov.f32	s2, s14
 800d414:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800d440 <V90R+0x338>
 800d418:	eeb0 0a67 	vmov.f32	s0, s15
 800d41c:	f7f6 fd34 	bl	8003e88 <mollifier_slalom_table>
 800d420:	e026      	b.n	800d470 <V90R+0x368>
 800d422:	bf00      	nop
 800d424:	f3af 8000 	nop.w
 800d428:	c022ec18 	.word	0xc022ec18
 800d42c:	405fd1de 	.word	0x405fd1de
 800d430:	200007e8 	.word	0x200007e8
 800d434:	42340000 	.word	0x42340000
 800d438:	42d3477b 	.word	0x42d3477b
 800d43c:	00000000 	.word	0x00000000
 800d440:	c2b40000 	.word	0xc2b40000
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d444:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d448:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d44c:	eef1 7a67 	vneg.f32	s15, s15
 800d450:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d454:	eef0 2a66 	vmov.f32	s5, s13
 800d458:	eeb0 2a67 	vmov.f32	s4, s15
 800d45c:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800d43c <V90R+0x334>
 800d460:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800d43c <V90R+0x334>
 800d464:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800d440 <V90R+0x338>
 800d468:	eeb0 0a47 	vmov.f32	s0, s14
 800d46c:	f7f6 fbcc 	bl	8003c08 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800d470:	2303      	movs	r3, #3
 800d472:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d474:	2300      	movs	r3, #0
 800d476:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d478:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d47c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d480:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d484:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d488:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d48c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d490:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d494:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d498:	eef0 7ae7 	vabs.f32	s15, s15
 800d49c:	ee17 0a90 	vmov	r0, s15
 800d4a0:	f7f3 f87a 	bl	8000598 <__aeabi_f2d>
 800d4a4:	f04f 0200 	mov.w	r2, #0
 800d4a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d4ac:	f7f3 f9f6 	bl	800089c <__aeabi_ddiv>
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	460b      	mov	r3, r1
 800d4b4:	4614      	mov	r4, r2
 800d4b6:	461d      	mov	r5, r3
 800d4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7f3 f86c 	bl	8000598 <__aeabi_f2d>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	4629      	mov	r1, r5
 800d4c8:	f7f3 f9e8 	bl	800089c <__aeabi_ddiv>
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	4610      	mov	r0, r2
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	f04f 0200 	mov.w	r2, #0
 800d4d8:	4b0f      	ldr	r3, [pc, #60]	; (800d518 <V90R+0x410>)
 800d4da:	f7f2 feff 	bl	80002dc <__adddf3>
 800d4de:	4602      	mov	r2, r0
 800d4e0:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d4e2:	4610      	mov	r0, r2
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	f7f3 fb87 	bl	8000bf8 <__aeabi_d2f>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	68f8      	ldr	r0, [r7, #12]
 800d4ee:	ee02 3a10 	vmov	s4, r3
 800d4f2:	edd7 1a01 	vldr	s3, [r7, #4]
 800d4f6:	ed97 1a01 	vldr	s2, [r7, #4]
 800d4fa:	eef0 0a68 	vmov.f32	s1, s17
 800d4fe:	eeb0 0a48 	vmov.f32	s0, s16
 800d502:	f7f5 fdcf 	bl	80030a4 <straight_table2>
}
 800d506:	bf00      	nop
 800d508:	3710      	adds	r7, #16
 800d50a:	46bd      	mov	sp, r7
 800d50c:	ecbd 8b02 	vpop	{d8}
 800d510:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d514:	b004      	add	sp, #16
 800d516:	4770      	bx	lr
 800d518:	408f4000 	.word	0x408f4000
 800d51c:	00000000 	.word	0x00000000

0800d520 <V90L>:

void V90L(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d520:	b084      	sub	sp, #16
 800d522:	b5b0      	push	{r4, r5, r7, lr}
 800d524:	ed2d 8b02 	vpush	{d8}
 800d528:	b084      	sub	sp, #16
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d530:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d534:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d538:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	f040 80ad 	bne.w	800d69c <V90L+0x17c>
				highspeed_mode = 1;
 800d542:	4bbf      	ldr	r3, [pc, #764]	; (800d840 <V90L+0x320>)
 800d544:	2201      	movs	r2, #1
 800d546:	701a      	strb	r2, [r3, #0]
				wallmode.WallControlMode=0;
 800d548:	2300      	movs	r3, #0
 800d54a:	733b      	strb	r3, [r7, #12]
				wallmode.WallControlStatus=0;
 800d54c:	2300      	movs	r3, #0
 800d54e:	737b      	strb	r3, [r7, #13]
				wallmode.WallCutMode=0;
 800d550:	2300      	movs	r3, #0
 800d552:	73fb      	strb	r3, [r7, #15]
				wallmode.calMazeMode=0;
 800d554:	2300      	movs	r3, #0
 800d556:	73bb      	strb	r3, [r7, #14]
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d558:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d55c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
							turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d560:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d564:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d568:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d56c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d570:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d574:	eddf 5ab3 	vldr	s11, [pc, #716]	; 800d844 <V90L+0x324>
 800d578:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	eeb0 2a47 	vmov.f32	s4, s14
 800d582:	eef0 1a46 	vmov.f32	s3, s12
 800d586:	eeb0 1a66 	vmov.f32	s2, s13
 800d58a:	eddf 0ab0 	vldr	s1, [pc, #704]	; 800d84c <V90L+0x32c>
 800d58e:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800d848 <V90L+0x328>
 800d592:	f7f5 fd87 	bl	80030a4 <straight_table2>
				wallmode.WallControlMode=0;
 800d596:	2300      	movs	r3, #0
 800d598:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=4;
 800d59a:	2304      	movs	r3, #4
 800d59c:	73fb      	strb	r3, [r7, #15]
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d59e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d5a2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d5a6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d5aa:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d5ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d5b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d5b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5ba:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d5be:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d5c2:	eddf 4aa0 	vldr	s9, [pc, #640]	; 800d844 <V90L+0x324>
 800d5c6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d5ca:	68f8      	ldr	r0, [r7, #12]
 800d5cc:	eeb0 2a47 	vmov.f32	s4, s14
 800d5d0:	eef0 1a45 	vmov.f32	s3, s10
 800d5d4:	eeb0 1a65 	vmov.f32	s2, s11
 800d5d8:	eef0 0a46 	vmov.f32	s1, s12
 800d5dc:	eeb0 0a66 	vmov.f32	s0, s13
 800d5e0:	f7f5 fd60 	bl	80030a4 <straight_table2>
				if(mollifier_mode == ON){
 800d5e4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d10c      	bne.n	800d606 <V90L+0xe6>
					mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d5ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d5f0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d5f4:	eeb0 1a47 	vmov.f32	s2, s14
 800d5f8:	eddf 0a95 	vldr	s1, [pc, #596]	; 800d850 <V90L+0x330>
 800d5fc:	eeb0 0a67 	vmov.f32	s0, s15
 800d600:	f7f6 fc42 	bl	8003e88 <mollifier_slalom_table>
 800d604:	e013      	b.n	800d62e <V90L+0x10e>
				}else{
					slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d606:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d60a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d60e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d612:	eef0 2a66 	vmov.f32	s5, s13
 800d616:	eeb0 2a47 	vmov.f32	s4, s14
 800d61a:	eddf 1a8c 	vldr	s3, [pc, #560]	; 800d84c <V90L+0x32c>
 800d61e:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 800d84c <V90L+0x32c>
 800d622:	eddf 0a8b 	vldr	s1, [pc, #556]	; 800d850 <V90L+0x330>
 800d626:	eeb0 0a67 	vmov.f32	s0, s15
 800d62a:	f7f6 faed 	bl	8003c08 <slalom_table2>
				}
				wallmode.WallControlMode=0;
 800d62e:	2300      	movs	r3, #0
 800d630:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=0;
 800d632:	2300      	movs	r3, #0
 800d634:	73fb      	strb	r3, [r7, #15]
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d638:	4618      	mov	r0, r3
 800d63a:	f7f2 ffad 	bl	8000598 <__aeabi_f2d>
 800d63e:	a37e      	add	r3, pc, #504	; (adr r3, 800d838 <V90L+0x318>)
 800d640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d644:	f7f2 fe4a 	bl	80002dc <__adddf3>
 800d648:	4602      	mov	r2, r0
 800d64a:	460b      	mov	r3, r1
 800d64c:	4610      	mov	r0, r2
 800d64e:	4619      	mov	r1, r3
 800d650:	f7f3 fad2 	bl	8000bf8 <__aeabi_d2f>
 800d654:	4603      	mov	r3, r0
 800d656:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d65a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d65e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d662:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d66a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d66e:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d672:	eddf 5a74 	vldr	s11, [pc, #464]	; 800d844 <V90L+0x324>
 800d676:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d67a:	68f8      	ldr	r0, [r7, #12]
 800d67c:	eeb0 2a47 	vmov.f32	s4, s14
 800d680:	eef0 1a46 	vmov.f32	s3, s12
 800d684:	ed9f 1a71 	vldr	s2, [pc, #452]	; 800d84c <V90L+0x32c>
 800d688:	eef0 0a66 	vmov.f32	s1, s13
 800d68c:	ee00 3a10 	vmov	s0, r3
 800d690:	f7f5 fd08 	bl	80030a4 <straight_table2>
				highspeed_mode = 0;
 800d694:	4b6a      	ldr	r3, [pc, #424]	; (800d840 <V90L+0x320>)
 800d696:	2200      	movs	r2, #0
 800d698:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d69a:	e13a      	b.n	800d912 <V90L+0x3f2>
			}else if (test_mode >= 2) {
 800d69c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	f240 808a 	bls.w	800d7ba <V90L+0x29a>
		highspeed_mode = 1;
 800d6a6:	4b66      	ldr	r3, [pc, #408]	; (800d840 <V90L+0x320>)
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d6b4:	2304      	movs	r3, #4
 800d6b6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d6bc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d6c0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d6c4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d6c8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d6cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d6d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6d8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d6dc:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d6e0:	eddf 4a58 	vldr	s9, [pc, #352]	; 800d844 <V90L+0x324>
 800d6e4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	eeb0 2a47 	vmov.f32	s4, s14
 800d6ee:	eef0 1a45 	vmov.f32	s3, s10
 800d6f2:	eeb0 1a65 	vmov.f32	s2, s11
 800d6f6:	eef0 0a46 	vmov.f32	s1, s12
 800d6fa:	eeb0 0a66 	vmov.f32	s0, s13
 800d6fe:	f7f5 fcd1 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800d702:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d706:	2b01      	cmp	r3, #1
 800d708:	d10c      	bne.n	800d724 <V90L+0x204>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d70a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d70e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d712:	eeb0 1a47 	vmov.f32	s2, s14
 800d716:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800d850 <V90L+0x330>
 800d71a:	eeb0 0a67 	vmov.f32	s0, s15
 800d71e:	f7f6 fbb3 	bl	8003e88 <mollifier_slalom_table>
 800d722:	e013      	b.n	800d74c <V90L+0x22c>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d724:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d728:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d72c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d730:	eef0 2a66 	vmov.f32	s5, s13
 800d734:	eeb0 2a47 	vmov.f32	s4, s14
 800d738:	eddf 1a44 	vldr	s3, [pc, #272]	; 800d84c <V90L+0x32c>
 800d73c:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800d84c <V90L+0x32c>
 800d740:	eddf 0a43 	vldr	s1, [pc, #268]	; 800d850 <V90L+0x330>
 800d744:	eeb0 0a67 	vmov.f32	s0, s15
 800d748:	f7f6 fa5e 	bl	8003c08 <slalom_table2>
		wallmode.WallControlMode=0;
 800d74c:	2300      	movs	r3, #0
 800d74e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d750:	2300      	movs	r3, #0
 800d752:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d756:	4618      	mov	r0, r3
 800d758:	f7f2 ff1e 	bl	8000598 <__aeabi_f2d>
 800d75c:	a336      	add	r3, pc, #216	; (adr r3, 800d838 <V90L+0x318>)
 800d75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d762:	f7f2 fdbb 	bl	80002dc <__adddf3>
 800d766:	4602      	mov	r2, r0
 800d768:	460b      	mov	r3, r1
 800d76a:	4610      	mov	r0, r2
 800d76c:	4619      	mov	r1, r3
 800d76e:	f7f3 fa43 	bl	8000bf8 <__aeabi_d2f>
 800d772:	4603      	mov	r3, r0
 800d774:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d778:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d77c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d780:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d784:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d788:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d78c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d790:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d844 <V90L+0x324>
 800d794:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d798:	68f8      	ldr	r0, [r7, #12]
 800d79a:	eeb0 2a47 	vmov.f32	s4, s14
 800d79e:	eef0 1a46 	vmov.f32	s3, s12
 800d7a2:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800d84c <V90L+0x32c>
 800d7a6:	eef0 0a66 	vmov.f32	s1, s13
 800d7aa:	ee00 3a10 	vmov	s0, r3
 800d7ae:	f7f5 fc79 	bl	80030a4 <straight_table2>
		highspeed_mode = 0;
 800d7b2:	4b23      	ldr	r3, [pc, #140]	; (800d840 <V90L+0x320>)
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	701a      	strb	r2, [r3, #0]
}
 800d7b8:	e0ab      	b.n	800d912 <V90L+0x3f2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d7c2:	2304      	movs	r3, #4
 800d7c4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d7ca:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d7ce:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d7d2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d7d6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d7da:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d7de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d7e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7e6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d7ea:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d7ee:	eddf 4a15 	vldr	s9, [pc, #84]	; 800d844 <V90L+0x324>
 800d7f2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d7f6:	68f8      	ldr	r0, [r7, #12]
 800d7f8:	eeb0 2a47 	vmov.f32	s4, s14
 800d7fc:	eef0 1a45 	vmov.f32	s3, s10
 800d800:	eeb0 1a65 	vmov.f32	s2, s11
 800d804:	eef0 0a46 	vmov.f32	s1, s12
 800d808:	eeb0 0a66 	vmov.f32	s0, s13
 800d80c:	f7f5 fc4a 	bl	80030a4 <straight_table2>
		if(mollifier_mode == ON){
 800d810:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d814:	2b01      	cmp	r3, #1
 800d816:	d11d      	bne.n	800d854 <V90L+0x334>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d818:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d81c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d820:	eeb0 1a47 	vmov.f32	s2, s14
 800d824:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800d850 <V90L+0x330>
 800d828:	eeb0 0a67 	vmov.f32	s0, s15
 800d82c:	f7f6 fb2c 	bl	8003e88 <mollifier_slalom_table>
 800d830:	e024      	b.n	800d87c <V90L+0x35c>
 800d832:	bf00      	nop
 800d834:	f3af 8000 	nop.w
 800d838:	c022ec18 	.word	0xc022ec18
 800d83c:	405fd1de 	.word	0x405fd1de
 800d840:	200007e8 	.word	0x200007e8
 800d844:	42340000 	.word	0x42340000
 800d848:	42df477b 	.word	0x42df477b
 800d84c:	00000000 	.word	0x00000000
 800d850:	42b40000 	.word	0x42b40000
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d854:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d858:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d85c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d860:	eef0 2a66 	vmov.f32	s5, s13
 800d864:	eeb0 2a47 	vmov.f32	s4, s14
 800d868:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800d84c <V90L+0x32c>
 800d86c:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800d84c <V90L+0x32c>
 800d870:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800d850 <V90L+0x330>
 800d874:	eeb0 0a67 	vmov.f32	s0, s15
 800d878:	f7f6 f9c6 	bl	8003c08 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800d87c:	2303      	movs	r3, #3
 800d87e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d880:	2300      	movs	r3, #0
 800d882:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d884:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d888:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d88c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d890:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d894:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d898:	edd7 7a01 	vldr	s15, [r7, #4]
 800d89c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d8a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8a4:	eef0 7ae7 	vabs.f32	s15, s15
 800d8a8:	ee17 0a90 	vmov	r0, s15
 800d8ac:	f7f2 fe74 	bl	8000598 <__aeabi_f2d>
 800d8b0:	f04f 0200 	mov.w	r2, #0
 800d8b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d8b8:	f7f2 fff0 	bl	800089c <__aeabi_ddiv>
 800d8bc:	4602      	mov	r2, r0
 800d8be:	460b      	mov	r3, r1
 800d8c0:	4614      	mov	r4, r2
 800d8c2:	461d      	mov	r5, r3
 800d8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7f2 fe66 	bl	8000598 <__aeabi_f2d>
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	460b      	mov	r3, r1
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	4629      	mov	r1, r5
 800d8d4:	f7f2 ffe2 	bl	800089c <__aeabi_ddiv>
 800d8d8:	4602      	mov	r2, r0
 800d8da:	460b      	mov	r3, r1
 800d8dc:	4610      	mov	r0, r2
 800d8de:	4619      	mov	r1, r3
 800d8e0:	f04f 0200 	mov.w	r2, #0
 800d8e4:	4b0f      	ldr	r3, [pc, #60]	; (800d924 <V90L+0x404>)
 800d8e6:	f7f2 fcf9 	bl	80002dc <__adddf3>
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d8ee:	4610      	mov	r0, r2
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	f7f3 f981 	bl	8000bf8 <__aeabi_d2f>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	68f8      	ldr	r0, [r7, #12]
 800d8fa:	ee02 3a10 	vmov	s4, r3
 800d8fe:	edd7 1a01 	vldr	s3, [r7, #4]
 800d902:	ed97 1a01 	vldr	s2, [r7, #4]
 800d906:	eef0 0a68 	vmov.f32	s1, s17
 800d90a:	eeb0 0a48 	vmov.f32	s0, s16
 800d90e:	f7f5 fbc9 	bl	80030a4 <straight_table2>
}
 800d912:	bf00      	nop
 800d914:	3710      	adds	r7, #16
 800d916:	46bd      	mov	sp, r7
 800d918:	ecbd 8b02 	vpop	{d8}
 800d91c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d920:	b004      	add	sp, #16
 800d922:	4770      	bx	lr
 800d924:	408f4000 	.word	0x408f4000

0800d928 <testturning>:


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode,char funmode,float funduty,char mollifier_mode){
 800d928:	b084      	sub	sp, #16
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b086      	sub	sp, #24
 800d92e:	af04      	add	r7, sp, #16
 800d930:	f107 0c10 	add.w	ip, r7, #16
 800d934:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800d938:	ed87 0a01 	vstr	s0, [r7, #4]
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L
	if(funmode==ON){
 800d93c:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 800d940:	2b01      	cmp	r3, #1
 800d942:	d116      	bne.n	800d972 <testturning+0x4a>
		pl_DriveMotor_standby(ON);
 800d944:	2001      	movs	r0, #1
 800d946:	f7f9 ff9f 	bl	8007888 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800d94a:	2003      	movs	r0, #3
 800d94c:	f7f9 ffa6 	bl	800789c <pl_L_DriveMotor_mode>
		pl_FunMotor_duty(funduty);
 800d950:	ed97 0a01 	vldr	s0, [r7, #4]
 800d954:	f7fa f836 	bl	80079c4 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800d958:	f7fa f820 	bl	800799c <pl_FunMotor_start>
		HAL_Delay(600);
 800d95c:	f44f 7016 	mov.w	r0, #600	; 0x258
 800d960:	f002 fd90 	bl	8010484 <HAL_Delay>
		reset_gyro();
 800d964:	f7f3 ff4c 	bl	8001800 <reset_gyro>
		reset_speed();
 800d968:	f7f3 fb56 	bl	8001018 <reset_speed>
		clear_Ierror();
 800d96c:	f7f7 f84e 	bl	8004a0c <clear_Ierror>
 800d970:	e00b      	b.n	800d98a <testturning+0x62>

	}else{
		pl_DriveMotor_standby(ON);
 800d972:	2001      	movs	r0, #1
 800d974:	f7f9 ff88 	bl	8007888 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800d978:	2003      	movs	r0, #3
 800d97a:	f7f9 ff8f 	bl	800789c <pl_L_DriveMotor_mode>
		reset_gyro();
 800d97e:	f7f3 ff3f 	bl	8001800 <reset_gyro>
		reset_speed();
 800d982:	f7f3 fb49 	bl	8001018 <reset_speed>
		clear_Ierror();
 800d986:	f7f7 f841 	bl	8004a0c <clear_Ierror>

	}
	record_mode=2;
 800d98a:	4ba8      	ldr	r3, [pc, #672]	; (800dc2c <testturning+0x304>)
 800d98c:	2202      	movs	r2, #2
 800d98e:	701a      	strb	r2, [r3, #0]
//	if(turnmode==0){test_mollifier_slalomR(Howspeed.slalom_R);}
	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode,mollifier_mode,-100);}
 800d990:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d994:	2b00      	cmp	r3, #0
 800d996:	d110      	bne.n	800d9ba <testturning+0x92>
 800d998:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800d99c:	9303      	str	r3, [sp, #12]
 800d99e:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800d9a2:	9302      	str	r3, [sp, #8]
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	9301      	str	r3, [sp, #4]
 800d9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9aa:	9300      	str	r3, [sp, #0]
 800d9ac:	f107 0318 	add.w	r3, r7, #24
 800d9b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d9b2:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800dc30 <testturning+0x308>
 800d9b6:	f7fc f9cd 	bl	8009d54 <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode,mollifier_mode,-100);}
 800d9ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d110      	bne.n	800d9e4 <testturning+0xbc>
 800d9c2:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800d9c6:	9303      	str	r3, [sp, #12]
 800d9c8:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800d9cc:	9302      	str	r3, [sp, #8]
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	9301      	str	r3, [sp, #4]
 800d9d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9d4:	9300      	str	r3, [sp, #0]
 800d9d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d9da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d9dc:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800dc30 <testturning+0x308>
 800d9e0:	f7fc fb72 	bl	800a0c8 <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON,mollifier_mode,-100);}
 800d9e4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d9e8:	2b02      	cmp	r3, #2
 800d9ea:	d10d      	bne.n	800da08 <testturning+0xe0>
 800d9ec:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800d9f0:	9302      	str	r3, [sp, #8]
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	9301      	str	r3, [sp, #4]
 800d9f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9f8:	9300      	str	r3, [sp, #0]
 800d9fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d9fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da00:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800dc30 <testturning+0x308>
 800da04:	f7fc fd16 	bl	800a434 <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON,mollifier_mode,-100);}
 800da08:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800da0c:	2b03      	cmp	r3, #3
 800da0e:	d10d      	bne.n	800da2c <testturning+0x104>
 800da10:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800da14:	9302      	str	r3, [sp, #8]
 800da16:	2301      	movs	r3, #1
 800da18:	9301      	str	r3, [sp, #4]
 800da1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da1c:	9300      	str	r3, [sp, #0]
 800da1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800da22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da24:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800dc30 <testturning+0x308>
 800da28:	f7fc fe6e 	bl	800a708 <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON,mollifier_mode,-100);}
 800da2c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800da30:	2b04      	cmp	r3, #4
 800da32:	d10d      	bne.n	800da50 <testturning+0x128>
 800da34:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800da38:	9302      	str	r3, [sp, #8]
 800da3a:	2301      	movs	r3, #1
 800da3c:	9301      	str	r3, [sp, #4]
 800da3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da40:	9300      	str	r3, [sp, #0]
 800da42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800da46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da48:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800dc30 <testturning+0x308>
 800da4c:	f7fc ffc0 	bl	800a9d0 <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON,mollifier_mode,-100);}
 800da50:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800da54:	2b05      	cmp	r3, #5
 800da56:	d10e      	bne.n	800da76 <testturning+0x14e>
 800da58:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800da5c:	9302      	str	r3, [sp, #8]
 800da5e:	2301      	movs	r3, #1
 800da60:	9301      	str	r3, [sp, #4]
 800da62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800da66:	9300      	str	r3, [sp, #0]
 800da68:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800da6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da6e:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800dc30 <testturning+0x308>
 800da72:	f7fd f917 	bl	800aca4 <turn180L>
	if(turnmode==6){turn45inR(Howspeed.turn45in_R,ON,mollifier_mode,-100);}
 800da76:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800da7a:	2b06      	cmp	r3, #6
 800da7c:	d10e      	bne.n	800da9c <testturning+0x174>
 800da7e:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800da82:	9302      	str	r3, [sp, #8]
 800da84:	2301      	movs	r3, #1
 800da86:	9301      	str	r3, [sp, #4]
 800da88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da8c:	9300      	str	r3, [sp, #0]
 800da8e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800da92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da94:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800dc30 <testturning+0x308>
 800da98:	f7fd fa6a 	bl	800af70 <turn45inR>
	if(turnmode==7){turn45inL(Howspeed.turn45in_L,ON,mollifier_mode,-100);}
 800da9c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800daa0:	2b07      	cmp	r3, #7
 800daa2:	d10e      	bne.n	800dac2 <testturning+0x19a>
 800daa4:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800daa8:	9302      	str	r3, [sp, #8]
 800daaa:	2301      	movs	r3, #1
 800daac:	9301      	str	r3, [sp, #4]
 800daae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dab2:	9300      	str	r3, [sp, #0]
 800dab4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dab8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800daba:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800dc30 <testturning+0x308>
 800dabe:	f7fd fc9f 	bl	800b400 <turn45inL>
	if(turnmode==8){turn135inR(Howspeed.turn135in_R,ON,mollifier_mode,-100);}
 800dac2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dac6:	2b08      	cmp	r3, #8
 800dac8:	d10e      	bne.n	800dae8 <testturning+0x1c0>
 800daca:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dace:	9302      	str	r3, [sp, #8]
 800dad0:	2301      	movs	r3, #1
 800dad2:	9301      	str	r3, [sp, #4]
 800dad4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dad8:	9300      	str	r3, [sp, #0]
 800dada:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800dade:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dae0:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800dc30 <testturning+0x308>
 800dae4:	f7fd fecc 	bl	800b880 <turn135inR>
	if(turnmode==9){turn135inL(Howspeed.turn135in_L,ON,mollifier_mode,-100);}
 800dae8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800daec:	2b09      	cmp	r3, #9
 800daee:	d10e      	bne.n	800db0e <testturning+0x1e6>
 800daf0:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800daf4:	9302      	str	r3, [sp, #8]
 800daf6:	2301      	movs	r3, #1
 800daf8:	9301      	str	r3, [sp, #4]
 800dafa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dafe:	9300      	str	r3, [sp, #0]
 800db00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800db04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db06:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800dc30 <testturning+0x308>
 800db0a:	f7fe f901 	bl	800bd10 <turn135inL>
	if(turnmode==10){turn45outR(Howspeed.turn45out_R,ON,mollifier_mode,-100);}
 800db0e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800db12:	2b0a      	cmp	r3, #10
 800db14:	d10e      	bne.n	800db34 <testturning+0x20c>
 800db16:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800db1a:	9302      	str	r3, [sp, #8]
 800db1c:	2301      	movs	r3, #1
 800db1e:	9301      	str	r3, [sp, #4]
 800db20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800db24:	9300      	str	r3, [sp, #0]
 800db26:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800db2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db2c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800dc30 <testturning+0x308>
 800db30:	f7fe fb32 	bl	800c198 <turn45outR>
	if(turnmode==11){turn45outL(Howspeed.turn45out_L,ON,mollifier_mode,-100);}
 800db34:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800db38:	2b0b      	cmp	r3, #11
 800db3a:	d10e      	bne.n	800db5a <testturning+0x232>
 800db3c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800db40:	9302      	str	r3, [sp, #8]
 800db42:	2301      	movs	r3, #1
 800db44:	9301      	str	r3, [sp, #4]
 800db46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db4a:	9300      	str	r3, [sp, #0]
 800db4c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800db50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db52:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800dc30 <testturning+0x308>
 800db56:	f7fe fd11 	bl	800c57c <turn45outL>
	if(turnmode==12){turn135outR(Howspeed.turn135out_R,ON,mollifier_mode,-100);}
 800db5a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800db5e:	2b0c      	cmp	r3, #12
 800db60:	d10e      	bne.n	800db80 <testturning+0x258>
 800db62:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800db66:	9302      	str	r3, [sp, #8]
 800db68:	2301      	movs	r3, #1
 800db6a:	9301      	str	r3, [sp, #4]
 800db6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800db70:	9300      	str	r3, [sp, #0]
 800db72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db78:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800dc30 <testturning+0x308>
 800db7c:	f7fe fee6 	bl	800c94c <turn135outR>
	if(turnmode==13){turn135outL(Howspeed.turn135out_L,ON,mollifier_mode,-100);}
 800db80:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800db84:	2b0d      	cmp	r3, #13
 800db86:	d10e      	bne.n	800dba6 <testturning+0x27e>
 800db88:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800db8c:	9302      	str	r3, [sp, #8]
 800db8e:	2301      	movs	r3, #1
 800db90:	9301      	str	r3, [sp, #4]
 800db92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800db9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db9e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800dc30 <testturning+0x308>
 800dba2:	f7ff f8c5 	bl	800cd30 <turn135outL>
	if(turnmode==14){V90R(Howspeed.V90_R,ON,mollifier_mode,-100);}
 800dba6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dbaa:	2b0e      	cmp	r3, #14
 800dbac:	d10e      	bne.n	800dbcc <testturning+0x2a4>
 800dbae:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dbb2:	9302      	str	r3, [sp, #8]
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	9301      	str	r3, [sp, #4]
 800dbb8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800dbbc:	9300      	str	r3, [sp, #0]
 800dbbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dbc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dbc4:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800dc30 <testturning+0x308>
 800dbc8:	f7ff fa9e 	bl	800d108 <V90R>
	if(turnmode==15){V90L(Howspeed.V90_L,ON,mollifier_mode,-100);}
 800dbcc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dbd0:	2b0f      	cmp	r3, #15
 800dbd2:	d10e      	bne.n	800dbf2 <testturning+0x2ca>
 800dbd4:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dbd8:	9302      	str	r3, [sp, #8]
 800dbda:	2301      	movs	r3, #1
 800dbdc:	9301      	str	r3, [sp, #4]
 800dbde:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800dbe2:	9300      	str	r3, [sp, #0]
 800dbe4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800dbe8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dbea:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800dc30 <testturning+0x308>
 800dbee:	f7ff fc97 	bl	800d520 <V90L>
//	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,CONNECT);}
//	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,CONNECT);}
//	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,CONNECT);}
//	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,CONNECT);}

	record_mode=0;
 800dbf2:	4b0e      	ldr	r3, [pc, #56]	; (800dc2c <testturning+0x304>)
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800dbf8:	2003      	movs	r0, #3
 800dbfa:	f7f9 fe77 	bl	80078ec <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dbfe:	2003      	movs	r0, #3
 800dc00:	f7f9 fe4c 	bl	800789c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800dc04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dc08:	f7fa f942 	bl	8007e90 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800dc0c:	f7f9 fed0 	bl	80079b0 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 800dc10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dc14:	f7fa f93c 	bl	8007e90 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800dc18:	2000      	movs	r0, #0
 800dc1a:	f7f9 fe35 	bl	8007888 <pl_DriveMotor_standby>

}
 800dc1e:	bf00      	nop
 800dc20:	3708      	adds	r7, #8
 800dc22:	46bd      	mov	sp, r7
 800dc24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc28:	b004      	add	sp, #16
 800dc2a:	4770      	bx	lr
 800dc2c:	2000c388 	.word	0x2000c388
 800dc30:	c2c80000 	.word	0xc2c80000

0800dc34 <mode_decision>:
#include "fail_safe.h"




unsigned char mode_decision(unsigned char now_mode){
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 800dc42:	2300      	movs	r3, #0
 800dc44:	73bb      	strb	r3, [r7, #14]
unsigned char main_mode=0;
 800dc46:	2300      	movs	r3, #0
 800dc48:	737b      	strb	r3, [r7, #13]
float dis8 =10;
 800dc4a:	4b71      	ldr	r3, [pc, #452]	; (800de10 <mode_decision+0x1dc>)
 800dc4c:	60bb      	str	r3, [r7, #8]
main_modeR=now_mode & 0x0F;
 800dc4e:	79fb      	ldrb	r3, [r7, #7]
 800dc50:	f003 030f 	and.w	r3, r3, #15
 800dc54:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 800dc56:	79fb      	ldrb	r3, [r7, #7]
 800dc58:	091b      	lsrs	r3, r3, #4
 800dc5a:	73bb      	strb	r3, [r7, #14]

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 800dc5c:	7bbb      	ldrb	r3, [r7, #14]
 800dc5e:	011b      	lsls	r3, r3, #4
 800dc60:	b2da      	uxtb	r2, r3
 800dc62:	7bfb      	ldrb	r3, [r7, #15]
 800dc64:	4413      	add	r3, r2
 800dc66:	b2db      	uxtb	r3, r3
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7f9 fab1 	bl	80071d0 <pl_yellow_LED_count>
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 400) {
 800dc6e:	e07f      	b.n	800dd70 <mode_decision+0x13c>
				HAL_Delay(1);
 800dc70:	2001      	movs	r0, #1
 800dc72:	f002 fc07 	bl	8010484 <HAL_Delay>
				if (E_distanceR >= dis8) {
 800dc76:	4b67      	ldr	r3, [pc, #412]	; (800de14 <mode_decision+0x1e0>)
 800dc78:	edd3 7a00 	vldr	s15, [r3]
 800dc7c:	ed97 7a02 	vldr	s14, [r7, #8]
 800dc80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc88:	d813      	bhi.n	800dcb2 <mode_decision+0x7e>
					if (main_modeR == 15) {
 800dc8a:	7bfb      	ldrb	r3, [r7, #15]
 800dc8c:	2b0f      	cmp	r3, #15
 800dc8e:	d102      	bne.n	800dc96 <mode_decision+0x62>
						main_modeR = 0;
 800dc90:	2300      	movs	r3, #0
 800dc92:	73fb      	strb	r3, [r7, #15]
 800dc94:	e002      	b.n	800dc9c <mode_decision+0x68>
					} else {
						main_modeR++;
 800dc96:	7bfb      	ldrb	r3, [r7, #15]
 800dc98:	3301      	adds	r3, #1
 800dc9a:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 800dc9c:	f7f3 f97e 	bl	8000f9c <reset_distance>

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 800dca0:	7bbb      	ldrb	r3, [r7, #14]
 800dca2:	011b      	lsls	r3, r3, #4
 800dca4:	b2da      	uxtb	r2, r3
 800dca6:	7bfb      	ldrb	r3, [r7, #15]
 800dca8:	4413      	add	r3, r2
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7f9 fa8f 	bl	80071d0 <pl_yellow_LED_count>
				}
				if (E_distanceR <= -dis8) {
 800dcb2:	edd7 7a02 	vldr	s15, [r7, #8]
 800dcb6:	eeb1 7a67 	vneg.f32	s14, s15
 800dcba:	4b56      	ldr	r3, [pc, #344]	; (800de14 <mode_decision+0x1e0>)
 800dcbc:	edd3 7a00 	vldr	s15, [r3]
 800dcc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dcc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcc8:	db13      	blt.n	800dcf2 <mode_decision+0xbe>
					if (main_modeR == 0) {
 800dcca:	7bfb      	ldrb	r3, [r7, #15]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d102      	bne.n	800dcd6 <mode_decision+0xa2>
						main_modeR = 15;
 800dcd0:	230f      	movs	r3, #15
 800dcd2:	73fb      	strb	r3, [r7, #15]
 800dcd4:	e002      	b.n	800dcdc <mode_decision+0xa8>
					} else {
						main_modeR = main_modeR - 1;
 800dcd6:	7bfb      	ldrb	r3, [r7, #15]
 800dcd8:	3b01      	subs	r3, #1
 800dcda:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 800dcdc:	f7f3 f95e 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 800dce0:	7bbb      	ldrb	r3, [r7, #14]
 800dce2:	011b      	lsls	r3, r3, #4
 800dce4:	b2da      	uxtb	r2, r3
 800dce6:	7bfb      	ldrb	r3, [r7, #15]
 800dce8:	4413      	add	r3, r2
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7f9 fa6f 	bl	80071d0 <pl_yellow_LED_count>
				}
				if (E_distanceL >= dis8) {
 800dcf2:	4b49      	ldr	r3, [pc, #292]	; (800de18 <mode_decision+0x1e4>)
 800dcf4:	edd3 7a00 	vldr	s15, [r3]
 800dcf8:	ed97 7a02 	vldr	s14, [r7, #8]
 800dcfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd04:	d813      	bhi.n	800dd2e <mode_decision+0xfa>
					if (main_modeL == 15) {
 800dd06:	7bbb      	ldrb	r3, [r7, #14]
 800dd08:	2b0f      	cmp	r3, #15
 800dd0a:	d102      	bne.n	800dd12 <mode_decision+0xde>
						main_modeL = 0;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	73bb      	strb	r3, [r7, #14]
 800dd10:	e002      	b.n	800dd18 <mode_decision+0xe4>
					} else {
						main_modeL = main_modeL + 1;
 800dd12:	7bbb      	ldrb	r3, [r7, #14]
 800dd14:	3301      	adds	r3, #1
 800dd16:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 800dd18:	f7f3 f940 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 800dd1c:	7bbb      	ldrb	r3, [r7, #14]
 800dd1e:	011b      	lsls	r3, r3, #4
 800dd20:	b2da      	uxtb	r2, r3
 800dd22:	7bfb      	ldrb	r3, [r7, #15]
 800dd24:	4413      	add	r3, r2
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7f9 fa51 	bl	80071d0 <pl_yellow_LED_count>
				}
				if (E_distanceL <= -dis8) {
 800dd2e:	edd7 7a02 	vldr	s15, [r7, #8]
 800dd32:	eeb1 7a67 	vneg.f32	s14, s15
 800dd36:	4b38      	ldr	r3, [pc, #224]	; (800de18 <mode_decision+0x1e4>)
 800dd38:	edd3 7a00 	vldr	s15, [r3]
 800dd3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd44:	da00      	bge.n	800dd48 <mode_decision+0x114>
 800dd46:	e013      	b.n	800dd70 <mode_decision+0x13c>
					if (main_modeL == 0) {
 800dd48:	7bbb      	ldrb	r3, [r7, #14]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d102      	bne.n	800dd54 <mode_decision+0x120>
						main_modeL = 15;
 800dd4e:	230f      	movs	r3, #15
 800dd50:	73bb      	strb	r3, [r7, #14]
 800dd52:	e002      	b.n	800dd5a <mode_decision+0x126>
					} else {
						main_modeL = main_modeL - 1;
 800dd54:	7bbb      	ldrb	r3, [r7, #14]
 800dd56:	3b01      	subs	r3, #1
 800dd58:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 800dd5a:	f7f3 f91f 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 800dd5e:	7bbb      	ldrb	r3, [r7, #14]
 800dd60:	011b      	lsls	r3, r3, #4
 800dd62:	b2da      	uxtb	r2, r3
 800dd64:	7bfb      	ldrb	r3, [r7, #15]
 800dd66:	4413      	add	r3, r2
 800dd68:	b2db      	uxtb	r3, r3
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7f9 fa30 	bl	80071d0 <pl_yellow_LED_count>
			while (angle_speedx <= 400) {
 800dd70:	4b2a      	ldr	r3, [pc, #168]	; (800de1c <mode_decision+0x1e8>)
 800dd72:	edd3 7a00 	vldr	s15, [r3]
 800dd76:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800de20 <mode_decision+0x1ec>
 800dd7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dd7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd82:	f67f af75 	bls.w	800dc70 <mode_decision+0x3c>
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_on();
 800dd86:	f7f9 f9e9 	bl	800715c <pl_yellow_LED_on>
			pl_r_blue_LED(ON);
 800dd8a:	2001      	movs	r0, #1
 800dd8c:	f7f9 fad0 	bl	8007330 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 800dd90:	2001      	movs	r0, #1
 800dd92:	f7f9 fadf 	bl	8007354 <pl_l_blue_LED>
			HAL_Delay(1000);
 800dd96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800dd9a:	f002 fb73 	bl	8010484 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 800dd9e:	e011      	b.n	800ddc4 <mode_decision+0x190>

				if (angle_speedx >= 400) {
 800dda0:	4b1e      	ldr	r3, [pc, #120]	; (800de1c <mode_decision+0x1e8>)
 800dda2:	edd3 7a00 	vldr	s15, [r3]
 800dda6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800de20 <mode_decision+0x1ec>
 800ddaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ddae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb2:	db04      	blt.n	800ddbe <mode_decision+0x18a>
					main_modeL = 0;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	73bb      	strb	r3, [r7, #14]
					main_modeR = 0;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	73fb      	strb	r3, [r7, #15]
					break;
 800ddbc:	e013      	b.n	800dde6 <mode_decision+0x1b2>
				}
				HAL_Delay(1);
 800ddbe:	2001      	movs	r0, #1
 800ddc0:	f002 fb60 	bl	8010484 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 800ddc4:	4b17      	ldr	r3, [pc, #92]	; (800de24 <mode_decision+0x1f0>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800ddcc:	dde8      	ble.n	800dda0 <mode_decision+0x16c>
 800ddce:	4b15      	ldr	r3, [pc, #84]	; (800de24 <mode_decision+0x1f0>)
 800ddd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ddd4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800ddd8:	dde2      	ble.n	800dda0 <mode_decision+0x16c>
 800ddda:	4b12      	ldr	r3, [pc, #72]	; (800de24 <mode_decision+0x1f0>)
 800dddc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800dde0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800dde4:	dddc      	ble.n	800dda0 <mode_decision+0x16c>
			}
			pl_r_blue_LED(OFF);
 800dde6:	2000      	movs	r0, #0
 800dde8:	f7f9 faa2 	bl	8007330 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 800ddec:	2000      	movs	r0, #0
 800ddee:	f7f9 fab1 	bl	8007354 <pl_l_blue_LED>
			pl_yellow_LED_off();
 800ddf2:	f7f9 f979 	bl	80070e8 <pl_yellow_LED_off>

			main_mode=main_modeL << 4 | main_modeR;
 800ddf6:	7bbb      	ldrb	r3, [r7, #14]
 800ddf8:	011b      	lsls	r3, r3, #4
 800ddfa:	b25a      	sxtb	r2, r3
 800ddfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de00:	4313      	orrs	r3, r2
 800de02:	b25b      	sxtb	r3, r3
 800de04:	737b      	strb	r3, [r7, #13]

return main_mode;
 800de06:	7b7b      	ldrb	r3, [r7, #13]
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3710      	adds	r7, #16
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	41200000 	.word	0x41200000
 800de14:	20000204 	.word	0x20000204
 800de18:	20000200 	.word	0x20000200
 800de1c:	20000250 	.word	0x20000250
 800de20:	43c80000 	.word	0x43c80000
 800de24:	20000298 	.word	0x20000298

0800de28 <mode_execution>:


void mode_execution(unsigned char now_mode){
 800de28:	b580      	push	{r7, lr}
 800de2a:	b084      	sub	sp, #16
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	4603      	mov	r3, r0
 800de30:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 800de32:	2300      	movs	r3, #0
 800de34:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 800de36:	2300      	movs	r3, #0
 800de38:	73bb      	strb	r3, [r7, #14]

main_modeR=now_mode & 0x0F;
 800de3a:	79fb      	ldrb	r3, [r7, #7]
 800de3c:	f003 030f 	and.w	r3, r3, #15
 800de40:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 800de42:	79fb      	ldrb	r3, [r7, #7]
 800de44:	091b      	lsrs	r3, r3, #4
 800de46:	73bb      	strb	r3, [r7, #14]


switch (main_modeL) {
 800de48:	7bbb      	ldrb	r3, [r7, #14]
 800de4a:	2b0f      	cmp	r3, #15
 800de4c:	d832      	bhi.n	800deb4 <mode_execution+0x8c>
 800de4e:	a201      	add	r2, pc, #4	; (adr r2, 800de54 <mode_execution+0x2c>)
 800de50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de54:	0800de95 	.word	0x0800de95
 800de58:	0800deb3 	.word	0x0800deb3
 800de5c:	0800deb3 	.word	0x0800deb3
 800de60:	0800de9f 	.word	0x0800de9f
 800de64:	0800dea9 	.word	0x0800dea9
 800de68:	0800deb3 	.word	0x0800deb3
 800de6c:	0800deb3 	.word	0x0800deb3
 800de70:	0800deb3 	.word	0x0800deb3
 800de74:	0800deb3 	.word	0x0800deb3
 800de78:	0800deb3 	.word	0x0800deb3
 800de7c:	0800deb3 	.word	0x0800deb3
 800de80:	0800deb3 	.word	0x0800deb3
 800de84:	0800deb3 	.word	0x0800deb3
 800de88:	0800deb3 	.word	0x0800deb3
 800de8c:	0800deb3 	.word	0x0800deb3
 800de90:	0800deb3 	.word	0x0800deb3
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
 800de94:	7bfb      	ldrb	r3, [r7, #15]
 800de96:	4618      	mov	r0, r3
 800de98:	f000 f810 	bl	800debc <mode_PLtest>
	break;
 800de9c:	e00a      	b.n	800deb4 <mode_execution+0x8c>

	break;
	case 0b0010://実行モード2
	break;
	case 0b0011:
		mode_Tuning0(main_modeR);
 800de9e:	7bfb      	ldrb	r3, [r7, #15]
 800dea0:	4618      	mov	r0, r3
 800dea2:	f000 f97f 	bl	800e1a4 <mode_Tuning0>
	break;
 800dea6:	e005      	b.n	800deb4 <mode_execution+0x8c>
	case 0b0100:
		mode_WallSensorTuning(main_modeR);
 800dea8:	7bfb      	ldrb	r3, [r7, #15]
 800deaa:	4618      	mov	r0, r3
 800deac:	f000 fc28 	bl	800e700 <mode_WallSensorTuning>
	break;
 800deb0:	e000      	b.n	800deb4 <mode_execution+0x8c>
	break;
 800deb2:	bf00      	nop
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}
 800deb4:	bf00      	nop
 800deb6:	3710      	adds	r7, #16
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <mode_PLtest>:



void mode_PLtest(unsigned char main_modeR) {
 800debc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dec0:	b090      	sub	sp, #64	; 0x40
 800dec2:	af0a      	add	r7, sp, #40	; 0x28
 800dec4:	4603      	mov	r3, r0
 800dec6:	75fb      	strb	r3, [r7, #23]

	switch (main_modeR) {
 800dec8:	7dfb      	ldrb	r3, [r7, #23]
 800deca:	2b0f      	cmp	r3, #15
 800decc:	f200 8159 	bhi.w	800e182 <mode_PLtest+0x2c6>
 800ded0:	a201      	add	r2, pc, #4	; (adr r2, 800ded8 <mode_PLtest+0x1c>)
 800ded2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ded6:	bf00      	nop
 800ded8:	0800e181 	.word	0x0800e181
 800dedc:	0800df19 	.word	0x0800df19
 800dee0:	0800df4b 	.word	0x0800df4b
 800dee4:	0800dfc7 	.word	0x0800dfc7
 800dee8:	0800e02b 	.word	0x0800e02b
 800deec:	0800e183 	.word	0x0800e183
 800def0:	0800e183 	.word	0x0800e183
 800def4:	0800e183 	.word	0x0800e183
 800def8:	0800e183 	.word	0x0800e183
 800defc:	0800e0ab 	.word	0x0800e0ab
 800df00:	0800e113 	.word	0x0800e113
 800df04:	0800e183 	.word	0x0800e183
 800df08:	0800e183 	.word	0x0800e183
 800df0c:	0800e183 	.word	0x0800e183
 800df10:	0800e183 	.word	0x0800e183
 800df14:	0800e17b 	.word	0x0800e17b
	case 0b0000:
		//飛ばすerror
		break;
	case 0b0001:	//sensor
		while (1) {
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 800df18:	4b9c      	ldr	r3, [pc, #624]	; (800e18c <mode_PLtest+0x2d0>)
 800df1a:	6819      	ldr	r1, [r3, #0]
 800df1c:	4b9b      	ldr	r3, [pc, #620]	; (800e18c <mode_PLtest+0x2d0>)
 800df1e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800df20:	4b9a      	ldr	r3, [pc, #616]	; (800e18c <mode_PLtest+0x2d0>)
 800df22:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 800df26:	4b99      	ldr	r3, [pc, #612]	; (800e18c <mode_PLtest+0x2d0>)
 800df28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800df2c:	4a97      	ldr	r2, [pc, #604]	; (800e18c <mode_PLtest+0x2d0>)
 800df2e:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 800df32:	9201      	str	r2, [sp, #4]
 800df34:	9300      	str	r3, [sp, #0]
 800df36:	4623      	mov	r3, r4
 800df38:	4602      	mov	r2, r0
 800df3a:	4895      	ldr	r0, [pc, #596]	; (800e190 <mode_PLtest+0x2d4>)
 800df3c:	f009 ff8c 	bl	8017e58 <iprintf>
					g_sensor[1][0], g_sensor[2][0], g_sensor[3][0],
					g_sensor[4][0]);
			wait_ms(500);
 800df40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800df44:	f7f9 ff60 	bl	8007e08 <wait_ms>
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 800df48:	e7e6      	b.n	800df18 <mode_PLtest+0x5c>
		}
		break;
	case 0b0010:	//encoder
		pl_r_blue_LED(ON);
 800df4a:	2001      	movs	r0, #1
 800df4c:	f7f9 f9f0 	bl	8007330 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 800df50:	2001      	movs	r0, #1
 800df52:	f7f9 f9ff 	bl	8007354 <pl_l_blue_LED>
		record_mode = 1;
 800df56:	4b8f      	ldr	r3, [pc, #572]	; (800e194 <mode_PLtest+0x2d8>)
 800df58:	2201      	movs	r2, #1
 800df5a:	701a      	strb	r2, [r3, #0]
		pl_DriveMotor_duty(900, 900);
 800df5c:	f44f 7161 	mov.w	r1, #900	; 0x384
 800df60:	f44f 7061 	mov.w	r0, #900	; 0x384
 800df64:	f7f9 fd04 	bl	8007970 <pl_DriveMotor_duty>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 800df68:	2001      	movs	r0, #1
 800df6a:	f7f9 fcbf 	bl	80078ec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 800df6e:	2001      	movs	r0, #1
 800df70:	f7f9 fc94 	bl	800789c <pl_L_DriveMotor_mode>
		pl_DriveMotor_start();
 800df74:	f7f9 fce0 	bl	8007938 <pl_DriveMotor_start>
		wait_ms(2500);
 800df78:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800df7c:	f7f9 ff44 	bl	8007e08 <wait_ms>
		pl_DriveMotor_stop();
 800df80:	f7f9 fce8 	bl	8007954 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 800df84:	2000      	movs	r0, #0
 800df86:	f7f9 f9d3 	bl	8007330 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 800df8a:	2000      	movs	r0, #0
 800df8c:	f7f9 f9e2 	bl	8007354 <pl_l_blue_LED>
		record_mode = 0;
 800df90:	4b80      	ldr	r3, [pc, #512]	; (800e194 <mode_PLtest+0x2d8>)
 800df92:	2200      	movs	r2, #0
 800df94:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 800df96:	e002      	b.n	800df9e <mode_PLtest+0xe2>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 800df98:	2001      	movs	r0, #1
 800df9a:	f7f9 ff35 	bl	8007e08 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 800df9e:	4b7b      	ldr	r3, [pc, #492]	; (800e18c <mode_PLtest+0x2d0>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800dfa6:	ddf7      	ble.n	800df98 <mode_PLtest+0xdc>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 800dfa8:	4b78      	ldr	r3, [pc, #480]	; (800e18c <mode_PLtest+0x2d0>)
 800dfaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800dfae:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800dfb2:	ddf1      	ble.n	800df98 <mode_PLtest+0xdc>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 800dfb4:	4b75      	ldr	r3, [pc, #468]	; (800e18c <mode_PLtest+0x2d0>)
 800dfb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800dfba:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800dfbe:	ddeb      	ble.n	800df98 <mode_PLtest+0xdc>
		}
		record_print();
 800dfc0:	f000 fe2e 	bl	800ec20 <record_print>
		break;
 800dfc4:	e0dd      	b.n	800e182 <mode_PLtest+0x2c6>
	case 0b0011:	//gyro
		reset_gyro();
 800dfc6:	f7f3 fc1b 	bl	8001800 <reset_gyro>
		reset_speed();
 800dfca:	f7f3 f825 	bl	8001018 <reset_speed>
		pl_r_blue_LED(ON);
 800dfce:	2001      	movs	r0, #1
 800dfd0:	f7f9 f9ae 	bl	8007330 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 800dfd4:	2001      	movs	r0, #1
 800dfd6:	f7f9 f9bd 	bl	8007354 <pl_l_blue_LED>
		record_mode = 2;
 800dfda:	4b6e      	ldr	r3, [pc, #440]	; (800e194 <mode_PLtest+0x2d8>)
 800dfdc:	2202      	movs	r2, #2
 800dfde:	701a      	strb	r2, [r3, #0]
		wait_ms(2500);
 800dfe0:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800dfe4:	f7f9 ff10 	bl	8007e08 <wait_ms>
		pl_r_blue_LED(OFF);
 800dfe8:	2000      	movs	r0, #0
 800dfea:	f7f9 f9a1 	bl	8007330 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 800dfee:	2000      	movs	r0, #0
 800dff0:	f7f9 f9b0 	bl	8007354 <pl_l_blue_LED>
		record_mode = 0;
 800dff4:	4b67      	ldr	r3, [pc, #412]	; (800e194 <mode_PLtest+0x2d8>)
 800dff6:	2200      	movs	r2, #0
 800dff8:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 800dffa:	e002      	b.n	800e002 <mode_PLtest+0x146>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 800dffc:	2001      	movs	r0, #1
 800dffe:	f7f9 ff03 	bl	8007e08 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 800e002:	4b62      	ldr	r3, [pc, #392]	; (800e18c <mode_PLtest+0x2d0>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e00a:	ddf7      	ble.n	800dffc <mode_PLtest+0x140>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 800e00c:	4b5f      	ldr	r3, [pc, #380]	; (800e18c <mode_PLtest+0x2d0>)
 800e00e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e012:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e016:	ddf1      	ble.n	800dffc <mode_PLtest+0x140>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 800e018:	4b5c      	ldr	r3, [pc, #368]	; (800e18c <mode_PLtest+0x2d0>)
 800e01a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e01e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e022:	ddeb      	ble.n	800dffc <mode_PLtest+0x140>
		}
		record_print();
 800e024:	f000 fdfc 	bl	800ec20 <record_print>
		break;
 800e028:	e0ab      	b.n	800e182 <mode_PLtest+0x2c6>
	case 0b0100://speaker
		while (1) {
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 800e02a:	4b5b      	ldr	r3, [pc, #364]	; (800e198 <mode_PLtest+0x2dc>)
 800e02c:	681b      	ldr	r3, [r3, #0]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 800e02e:	4618      	mov	r0, r3
 800e030:	f7f2 fab2 	bl	8000598 <__aeabi_f2d>
 800e034:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 800e038:	4b57      	ldr	r3, [pc, #348]	; (800e198 <mode_PLtest+0x2dc>)
 800e03a:	685b      	ldr	r3, [r3, #4]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 800e03c:	4618      	mov	r0, r3
 800e03e:	f7f2 faab 	bl	8000598 <__aeabi_f2d>
 800e042:	4604      	mov	r4, r0
 800e044:	460d      	mov	r5, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 800e046:	4b54      	ldr	r3, [pc, #336]	; (800e198 <mode_PLtest+0x2dc>)
 800e048:	689b      	ldr	r3, [r3, #8]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7f2 faa4 	bl	8000598 <__aeabi_f2d>
 800e050:	4680      	mov	r8, r0
 800e052:	4689      	mov	r9, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 800e054:	4b50      	ldr	r3, [pc, #320]	; (800e198 <mode_PLtest+0x2dc>)
 800e056:	68db      	ldr	r3, [r3, #12]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 800e058:	4618      	mov	r0, r3
 800e05a:	f7f2 fa9d 	bl	8000598 <__aeabi_f2d>
 800e05e:	4682      	mov	sl, r0
 800e060:	468b      	mov	fp, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 800e062:	4b4d      	ldr	r3, [pc, #308]	; (800e198 <mode_PLtest+0x2dc>)
 800e064:	691b      	ldr	r3, [r3, #16]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 800e066:	4618      	mov	r0, r3
 800e068:	f7f2 fa96 	bl	8000598 <__aeabi_f2d>
 800e06c:	e9c7 0100 	strd	r0, r1, [r7]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 800e070:	4b49      	ldr	r3, [pc, #292]	; (800e198 <mode_PLtest+0x2dc>)
 800e072:	695b      	ldr	r3, [r3, #20]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 800e074:	4618      	mov	r0, r3
 800e076:	f7f2 fa8f 	bl	8000598 <__aeabi_f2d>
 800e07a:	4602      	mov	r2, r0
 800e07c:	460b      	mov	r3, r1
 800e07e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e082:	ed97 7b00 	vldr	d7, [r7]
 800e086:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e08a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800e08e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e092:	e9cd 4500 	strd	r4, r5, [sp]
 800e096:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e09a:	4840      	ldr	r0, [pc, #256]	; (800e19c <mode_PLtest+0x2e0>)
 800e09c:	f009 fedc 	bl	8017e58 <iprintf>
			wait_ms(500);
 800e0a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e0a4:	f7f9 feb0 	bl	8007e08 <wait_ms>
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 800e0a8:	e7bf      	b.n	800e02a <mode_PLtest+0x16e>
		}
	break;
	case 0b1001://fun
			pl_FunMotor_duty(0.5);
 800e0aa:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800e0ae:	f7f9 fc89 	bl	80079c4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 800e0b2:	f7f9 fc73 	bl	800799c <pl_FunMotor_start>
			HAL_Delay(2000);
 800e0b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e0ba:	f002 f9e3 	bl	8010484 <HAL_Delay>
			reset_gyro();
 800e0be:	f7f3 fb9f 	bl	8001800 <reset_gyro>
			reset_speed();
 800e0c2:	f7f2 ffa9 	bl	8001018 <reset_speed>
			clear_Ierror();
 800e0c6:	f7f6 fca1 	bl	8004a0c <clear_Ierror>
			pl_r_blue_LED(ON);
 800e0ca:	2001      	movs	r0, #1
 800e0cc:	f7f9 f930 	bl	8007330 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 800e0d0:	2001      	movs	r0, #1
 800e0d2:	f7f9 f93f 	bl	8007354 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 800e0d6:	e002      	b.n	800e0de <mode_PLtest+0x222>
				HAL_Delay(1);
 800e0d8:	2001      	movs	r0, #1
 800e0da:	f002 f9d3 	bl	8010484 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 800e0de:	4b2b      	ldr	r3, [pc, #172]	; (800e18c <mode_PLtest+0x2d0>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e0e6:	ddf7      	ble.n	800e0d8 <mode_PLtest+0x21c>
 800e0e8:	4b28      	ldr	r3, [pc, #160]	; (800e18c <mode_PLtest+0x2d0>)
 800e0ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e0ee:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e0f2:	ddf1      	ble.n	800e0d8 <mode_PLtest+0x21c>
 800e0f4:	4b25      	ldr	r3, [pc, #148]	; (800e18c <mode_PLtest+0x2d0>)
 800e0f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e0fa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e0fe:	ddeb      	ble.n	800e0d8 <mode_PLtest+0x21c>
			}
			pl_r_blue_LED(OFF);
 800e100:	2000      	movs	r0, #0
 800e102:	f7f9 f915 	bl	8007330 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 800e106:	2000      	movs	r0, #0
 800e108:	f7f9 f924 	bl	8007354 <pl_l_blue_LED>
			pl_FunMotor_stop();
 800e10c:	f7f9 fc50 	bl	80079b0 <pl_FunMotor_stop>
		break;
 800e110:	e037      	b.n	800e182 <mode_PLtest+0x2c6>
	case 0b1010://fun
			pl_FunMotor_duty(0.99);
 800e112:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800e1a0 <mode_PLtest+0x2e4>
 800e116:	f7f9 fc55 	bl	80079c4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 800e11a:	f7f9 fc3f 	bl	800799c <pl_FunMotor_start>
			HAL_Delay(2000);
 800e11e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e122:	f002 f9af 	bl	8010484 <HAL_Delay>
			reset_gyro();
 800e126:	f7f3 fb6b 	bl	8001800 <reset_gyro>
			reset_speed();
 800e12a:	f7f2 ff75 	bl	8001018 <reset_speed>
			clear_Ierror();
 800e12e:	f7f6 fc6d 	bl	8004a0c <clear_Ierror>
			pl_r_blue_LED(ON);
 800e132:	2001      	movs	r0, #1
 800e134:	f7f9 f8fc 	bl	8007330 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 800e138:	2001      	movs	r0, #1
 800e13a:	f7f9 f90b 	bl	8007354 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 800e13e:	e002      	b.n	800e146 <mode_PLtest+0x28a>
				HAL_Delay(1);
 800e140:	2001      	movs	r0, #1
 800e142:	f002 f99f 	bl	8010484 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 800e146:	4b11      	ldr	r3, [pc, #68]	; (800e18c <mode_PLtest+0x2d0>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e14e:	ddf7      	ble.n	800e140 <mode_PLtest+0x284>
 800e150:	4b0e      	ldr	r3, [pc, #56]	; (800e18c <mode_PLtest+0x2d0>)
 800e152:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e156:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e15a:	ddf1      	ble.n	800e140 <mode_PLtest+0x284>
 800e15c:	4b0b      	ldr	r3, [pc, #44]	; (800e18c <mode_PLtest+0x2d0>)
 800e15e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e162:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e166:	ddeb      	ble.n	800e140 <mode_PLtest+0x284>
			}
			pl_r_blue_LED(OFF);
 800e168:	2000      	movs	r0, #0
 800e16a:	f7f9 f8e1 	bl	8007330 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 800e16e:	2000      	movs	r0, #0
 800e170:	f7f9 f8f0 	bl	8007354 <pl_l_blue_LED>
			pl_FunMotor_stop();
 800e174:	f7f9 fc1c 	bl	80079b0 <pl_FunMotor_stop>
		break;
 800e178:	e003      	b.n	800e182 <mode_PLtest+0x2c6>
	case 0b1111:	//record_out
		record_print();
 800e17a:	f000 fd51 	bl	800ec20 <record_print>
		break;
 800e17e:	e000      	b.n	800e182 <mode_PLtest+0x2c6>
		break;
 800e180:	bf00      	nop
//			record_print();
//		break;
	}
//

}
 800e182:	bf00      	nop
 800e184:	3718      	adds	r7, #24
 800e186:	46bd      	mov	sp, r7
 800e188:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e18c:	20000298 	.word	0x20000298
 800e190:	0801a584 	.word	0x0801a584
 800e194:	2000c388 	.word	0x2000c388
 800e198:	200006c4 	.word	0x200006c4
 800e19c:	0801a5b0 	.word	0x0801a5b0
 800e1a0:	3f7d70a4 	.word	0x3f7d70a4

0800e1a4 <mode_Tuning0>:



void mode_Tuning0(unsigned char main_modeR){
 800e1a4:	b590      	push	{r4, r7, lr}
 800e1a6:	b0d7      	sub	sp, #348	; 0x15c
 800e1a8:	af52      	add	r7, sp, #328	; 0x148
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e1be:	2003      	movs	r0, #3
 800e1c0:	f7f9 fb6c 	bl	800789c <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e1c4:	2003      	movs	r0, #3
 800e1c6:	f7f9 fb91 	bl	80078ec <pl_R_DriveMotor_mode>
	reset_gyro();
 800e1ca:	f7f3 fb19 	bl	8001800 <reset_gyro>
	reset_speed();
 800e1ce:	f7f2 ff23 	bl	8001018 <reset_speed>
	reset_distance();
 800e1d2:	f7f2 fee3 	bl	8000f9c <reset_distance>
	clear_Ierror();
 800e1d6:	f7f6 fc19 	bl	8004a0c <clear_Ierror>

	switch (main_modeR) {
 800e1da:	79fb      	ldrb	r3, [r7, #7]
 800e1dc:	2b0f      	cmp	r3, #15
 800e1de:	f200 823f 	bhi.w	800e660 <mode_Tuning0+0x4bc>
 800e1e2:	a201      	add	r2, pc, #4	; (adr r2, 800e1e8 <mode_Tuning0+0x44>)
 800e1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1e8:	0800e229 	.word	0x0800e229
 800e1ec:	0800e2b3 	.word	0x0800e2b3
 800e1f0:	0800e2d9 	.word	0x0800e2d9
 800e1f4:	0800e2ff 	.word	0x0800e2ff
 800e1f8:	0800e32f 	.word	0x0800e32f
 800e1fc:	0800e35f 	.word	0x0800e35f
 800e200:	0800e385 	.word	0x0800e385
 800e204:	0800e3ab 	.word	0x0800e3ab
 800e208:	0800e3d1 	.word	0x0800e3d1
 800e20c:	0800e3f5 	.word	0x0800e3f5
 800e210:	0800e475 	.word	0x0800e475
 800e214:	0800e4f5 	.word	0x0800e4f5
 800e218:	0800e51b 	.word	0x0800e51b
 800e21c:	0800e54d 	.word	0x0800e54d
 800e220:	0800e5c5 	.word	0x0800e5c5
 800e224:	0800e615 	.word	0x0800e615
		case 0://タイヤ径　エンコーダ+PID
			record_mode=3;
 800e228:	4bd0      	ldr	r3, [pc, #832]	; (800e56c <mode_Tuning0+0x3c8>)
 800e22a:	2203      	movs	r2, #3
 800e22c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 800e22e:	2300      	movs	r3, #0
 800e230:	723b      	strb	r3, [r7, #8]
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			straight_table2(540, 0, 0, 1600, 13000,mode);
 800e232:	68b8      	ldr	r0, [r7, #8]
 800e234:	ed9f 2ace 	vldr	s4, [pc, #824]	; 800e570 <mode_Tuning0+0x3cc>
 800e238:	eddf 1ace 	vldr	s3, [pc, #824]	; 800e574 <mode_Tuning0+0x3d0>
 800e23c:	ed9f 1ace 	vldr	s2, [pc, #824]	; 800e578 <mode_Tuning0+0x3d4>
 800e240:	eddf 0acd 	vldr	s1, [pc, #820]	; 800e578 <mode_Tuning0+0x3d4>
 800e244:	ed9f 0acd 	vldr	s0, [pc, #820]	; 800e57c <mode_Tuning0+0x3d8>
 800e248:	f7f4 ff2c 	bl	80030a4 <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 800e24c:	ed9f 2acc 	vldr	s4, [pc, #816]	; 800e580 <mode_Tuning0+0x3dc>
 800e250:	eddf 1acc 	vldr	s3, [pc, #816]	; 800e584 <mode_Tuning0+0x3e0>
 800e254:	ed9f 1ac8 	vldr	s2, [pc, #800]	; 800e578 <mode_Tuning0+0x3d4>
 800e258:	eddf 0ac7 	vldr	s1, [pc, #796]	; 800e578 <mode_Tuning0+0x3d4>
 800e25c:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800e588 <mode_Tuning0+0x3e4>
 800e260:	f7f5 fbca 	bl	80039f8 <turning_table2>
			straight_table2(540, 0, 0, 2000, 15000,mode);
 800e264:	68b8      	ldr	r0, [r7, #8]
 800e266:	ed9f 2ac9 	vldr	s4, [pc, #804]	; 800e58c <mode_Tuning0+0x3e8>
 800e26a:	eddf 1ac9 	vldr	s3, [pc, #804]	; 800e590 <mode_Tuning0+0x3ec>
 800e26e:	ed9f 1ac2 	vldr	s2, [pc, #776]	; 800e578 <mode_Tuning0+0x3d4>
 800e272:	eddf 0ac1 	vldr	s1, [pc, #772]	; 800e578 <mode_Tuning0+0x3d4>
 800e276:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800e57c <mode_Tuning0+0x3d8>
 800e27a:	f7f4 ff13 	bl	80030a4 <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 800e27e:	ed9f 2ac0 	vldr	s4, [pc, #768]	; 800e580 <mode_Tuning0+0x3dc>
 800e282:	eddf 1ac0 	vldr	s3, [pc, #768]	; 800e584 <mode_Tuning0+0x3e0>
 800e286:	ed9f 1abc 	vldr	s2, [pc, #752]	; 800e578 <mode_Tuning0+0x3d4>
 800e28a:	eddf 0abb 	vldr	s1, [pc, #748]	; 800e578 <mode_Tuning0+0x3d4>
 800e28e:	ed9f 0abe 	vldr	s0, [pc, #760]	; 800e588 <mode_Tuning0+0x3e4>
 800e292:	f7f5 fbb1 	bl	80039f8 <turning_table2>
			straight_table2(540, 0, 0, 2400, 20000,mode);
 800e296:	68b8      	ldr	r0, [r7, #8]
 800e298:	ed9f 2abe 	vldr	s4, [pc, #760]	; 800e594 <mode_Tuning0+0x3f0>
 800e29c:	eddf 1abe 	vldr	s3, [pc, #760]	; 800e598 <mode_Tuning0+0x3f4>
 800e2a0:	ed9f 1ab5 	vldr	s2, [pc, #724]	; 800e578 <mode_Tuning0+0x3d4>
 800e2a4:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800e578 <mode_Tuning0+0x3d4>
 800e2a8:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 800e57c <mode_Tuning0+0x3d8>
 800e2ac:	f7f4 fefa 	bl	80030a4 <straight_table2>
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			//straight_table2(450, 0, 0, 1000, 13000,mode);
			//control_test_motor2(0,0,10);
		break;
 800e2b0:	e1d6      	b.n	800e660 <mode_Tuning0+0x4bc>
		case 1://トレッド幅??ジャイロ
			record_mode = 5;
 800e2b2:	4bae      	ldr	r3, [pc, #696]	; (800e56c <mode_Tuning0+0x3c8>)
 800e2b4:	2205      	movs	r2, #5
 800e2b6:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	723b      	strb	r3, [r7, #8]
			straight_table2(400, 0, 0, 400, 3000,mode);
 800e2bc:	68b8      	ldr	r0, [r7, #8]
 800e2be:	ed9f 2ab7 	vldr	s4, [pc, #732]	; 800e59c <mode_Tuning0+0x3f8>
 800e2c2:	eddf 1ab0 	vldr	s3, [pc, #704]	; 800e584 <mode_Tuning0+0x3e0>
 800e2c6:	ed9f 1aac 	vldr	s2, [pc, #688]	; 800e578 <mode_Tuning0+0x3d4>
 800e2ca:	eddf 0aab 	vldr	s1, [pc, #684]	; 800e578 <mode_Tuning0+0x3d4>
 800e2ce:	ed9f 0aad 	vldr	s0, [pc, #692]	; 800e584 <mode_Tuning0+0x3e0>
 800e2d2:	f7f4 fee7 	bl	80030a4 <straight_table2>
			//turning_table2(360*10, 0, 0, 800, 8000);
			//control_test_motor2(1,0,5);
		break;
 800e2d6:	e1c3      	b.n	800e660 <mode_Tuning0+0x4bc>
		case 2://壁制御
			record_mode=6;
 800e2d8:	4ba4      	ldr	r3, [pc, #656]	; (800e56c <mode_Tuning0+0x3c8>)
 800e2da:	2206      	movs	r2, #6
 800e2dc:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 800e2de:	2301      	movs	r3, #1
 800e2e0:	723b      	strb	r3, [r7, #8]
			straight_table2(90*8, 0, 0, 300, 6000,mode);
 800e2e2:	68b8      	ldr	r0, [r7, #8]
 800e2e4:	ed9f 2aae 	vldr	s4, [pc, #696]	; 800e5a0 <mode_Tuning0+0x3fc>
 800e2e8:	eddf 1aae 	vldr	s3, [pc, #696]	; 800e5a4 <mode_Tuning0+0x400>
 800e2ec:	ed9f 1aa2 	vldr	s2, [pc, #648]	; 800e578 <mode_Tuning0+0x3d4>
 800e2f0:	eddf 0aa1 	vldr	s1, [pc, #644]	; 800e578 <mode_Tuning0+0x3d4>
 800e2f4:	ed9f 0aac 	vldr	s0, [pc, #688]	; 800e5a8 <mode_Tuning0+0x404>
 800e2f8:	f7f4 fed4 	bl	80030a4 <straight_table2>
			//control_test_motor2(0,1,6);
		break;
 800e2fc:	e1b0      	b.n	800e660 <mode_Tuning0+0x4bc>
		case 3://右スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,-90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
			testturning(speed300_exploration,0,0,0,0,0);
 800e2fe:	4cab      	ldr	r4, [pc, #684]	; (800e5ac <mode_Tuning0+0x408>)
 800e300:	2300      	movs	r3, #0
 800e302:	9351      	str	r3, [sp, #324]	; 0x144
 800e304:	2300      	movs	r3, #0
 800e306:	9350      	str	r3, [sp, #320]	; 0x140
 800e308:	2300      	movs	r3, #0
 800e30a:	934f      	str	r3, [sp, #316]	; 0x13c
 800e30c:	2300      	movs	r3, #0
 800e30e:	934e      	str	r3, [sp, #312]	; 0x138
 800e310:	4668      	mov	r0, sp
 800e312:	f104 0310 	add.w	r3, r4, #16
 800e316:	f44f 729c 	mov.w	r2, #312	; 0x138
 800e31a:	4619      	mov	r1, r3
 800e31c:	f009 f91c 	bl	8017558 <memcpy>
 800e320:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e324:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800e578 <mode_Tuning0+0x3d4>
 800e328:	f7ff fafe 	bl	800d928 <testturning>
		break;
 800e32c:	e198      	b.n	800e660 <mode_Tuning0+0x4bc>
		case 4://左スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
			testturning(speed300_exploration,1,0,0,0,0);
 800e32e:	4c9f      	ldr	r4, [pc, #636]	; (800e5ac <mode_Tuning0+0x408>)
 800e330:	2300      	movs	r3, #0
 800e332:	9351      	str	r3, [sp, #324]	; 0x144
 800e334:	2300      	movs	r3, #0
 800e336:	9350      	str	r3, [sp, #320]	; 0x140
 800e338:	2300      	movs	r3, #0
 800e33a:	934f      	str	r3, [sp, #316]	; 0x13c
 800e33c:	2301      	movs	r3, #1
 800e33e:	934e      	str	r3, [sp, #312]	; 0x138
 800e340:	4668      	mov	r0, sp
 800e342:	f104 0310 	add.w	r3, r4, #16
 800e346:	f44f 729c 	mov.w	r2, #312	; 0x138
 800e34a:	4619      	mov	r1, r3
 800e34c:	f009 f904 	bl	8017558 <memcpy>
 800e350:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e354:	ed9f 0a88 	vldr	s0, [pc, #544]	; 800e578 <mode_Tuning0+0x3d4>
 800e358:	f7ff fae6 	bl	800d928 <testturning>
		break;
 800e35c:	e180      	b.n	800e660 <mode_Tuning0+0x4bc>
		case 5://直進(制御なし)
			record_mode=7;
 800e35e:	4b83      	ldr	r3, [pc, #524]	; (800e56c <mode_Tuning0+0x3c8>)
 800e360:	2207      	movs	r2, #7
 800e362:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 800e364:	2300      	movs	r3, #0
 800e366:	723b      	strb	r3, [r7, #8]
			straight_table2(180, 0, 0, 300, 6000,mode);
 800e368:	68b8      	ldr	r0, [r7, #8]
 800e36a:	ed9f 2a8d 	vldr	s4, [pc, #564]	; 800e5a0 <mode_Tuning0+0x3fc>
 800e36e:	eddf 1a8d 	vldr	s3, [pc, #564]	; 800e5a4 <mode_Tuning0+0x400>
 800e372:	ed9f 1a81 	vldr	s2, [pc, #516]	; 800e578 <mode_Tuning0+0x3d4>
 800e376:	eddf 0a80 	vldr	s1, [pc, #512]	; 800e578 <mode_Tuning0+0x3d4>
 800e37a:	ed9f 0a83 	vldr	s0, [pc, #524]	; 800e588 <mode_Tuning0+0x3e4>
 800e37e:	f7f4 fe91 	bl	80030a4 <straight_table2>
		break;
 800e382:	e16d      	b.n	800e660 <mode_Tuning0+0x4bc>
		case 6://斜め直進(制御あり)
			record_mode=7;//or3
 800e384:	4b79      	ldr	r3, [pc, #484]	; (800e56c <mode_Tuning0+0x3c8>)
 800e386:	2207      	movs	r2, #7
 800e388:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 800e38a:	2300      	movs	r3, #0
 800e38c:	723b      	strb	r3, [r7, #8]
			straight_table2(180*3*sqrt(2), 0, 0, 500, 6000,mode);
 800e38e:	68b8      	ldr	r0, [r7, #8]
 800e390:	ed9f 2a83 	vldr	s4, [pc, #524]	; 800e5a0 <mode_Tuning0+0x3fc>
 800e394:	eddf 1a86 	vldr	s3, [pc, #536]	; 800e5b0 <mode_Tuning0+0x40c>
 800e398:	ed9f 1a77 	vldr	s2, [pc, #476]	; 800e578 <mode_Tuning0+0x3d4>
 800e39c:	eddf 0a76 	vldr	s1, [pc, #472]	; 800e578 <mode_Tuning0+0x3d4>
 800e3a0:	ed9f 0a84 	vldr	s0, [pc, #528]	; 800e5b4 <mode_Tuning0+0x410>
 800e3a4:	f7f4 fe7e 	bl	80030a4 <straight_table2>
		break;
 800e3a8:	e15a      	b.n	800e660 <mode_Tuning0+0x4bc>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=7;
 800e3aa:	4b70      	ldr	r3, [pc, #448]	; (800e56c <mode_Tuning0+0x3c8>)
 800e3ac:	2207      	movs	r2, #7
 800e3ae:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 800e3b0:	2303      	movs	r3, #3
 800e3b2:	723b      	strb	r3, [r7, #8]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 6000,mode);
 800e3b4:	68b8      	ldr	r0, [r7, #8]
 800e3b6:	ed9f 2a7a 	vldr	s4, [pc, #488]	; 800e5a0 <mode_Tuning0+0x3fc>
 800e3ba:	eddf 1a75 	vldr	s3, [pc, #468]	; 800e590 <mode_Tuning0+0x3ec>
 800e3be:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800e578 <mode_Tuning0+0x3d4>
 800e3c2:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800e578 <mode_Tuning0+0x3d4>
 800e3c6:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 800e5b4 <mode_Tuning0+0x410>
 800e3ca:	f7f4 fe6b 	bl	80030a4 <straight_table2>
		break;
 800e3ce:	e147      	b.n	800e660 <mode_Tuning0+0x4bc>
		case 8://宴会芸
			record_mode=2;
 800e3d0:	4b66      	ldr	r3, [pc, #408]	; (800e56c <mode_Tuning0+0x3c8>)
 800e3d2:	2202      	movs	r2, #2
 800e3d4:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 800e3d6:	2001      	movs	r0, #1
 800e3d8:	f7f8 ffaa 	bl	8007330 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 800e3dc:	2001      	movs	r0, #1
 800e3de:	f7f8 ffb9 	bl	8007354 <pl_l_blue_LED>
			no_angle();
 800e3e2:	f7f5 fd0d 	bl	8003e00 <no_angle>
			pl_r_blue_LED(OFF);
 800e3e6:	2000      	movs	r0, #0
 800e3e8:	f7f8 ffa2 	bl	8007330 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 800e3ec:	2000      	movs	r0, #0
 800e3ee:	f7f8 ffb1 	bl	8007354 <pl_l_blue_LED>
		break;
 800e3f2:	e135      	b.n	800e660 <mode_Tuning0+0x4bc>
		case 9://システム同定enc
			record_mode=6;
 800e3f4:	4b5d      	ldr	r3, [pc, #372]	; (800e56c <mode_Tuning0+0x3c8>)
 800e3f6:	2206      	movs	r2, #6
 800e3f8:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 800e3fa:	2001      	movs	r0, #1
 800e3fc:	f7f8 ff98 	bl	8007330 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 800e400:	2001      	movs	r0, #1
 800e402:	f7f8 ffa7 	bl	8007354 <pl_l_blue_LED>
			straight_table_ff(90, 0, 300, 300, 500);
 800e406:	ed9f 2a6a 	vldr	s4, [pc, #424]	; 800e5b0 <mode_Tuning0+0x40c>
 800e40a:	eddf 1a66 	vldr	s3, [pc, #408]	; 800e5a4 <mode_Tuning0+0x400>
 800e40e:	ed9f 1a65 	vldr	s2, [pc, #404]	; 800e5a4 <mode_Tuning0+0x400>
 800e412:	eddf 0a59 	vldr	s1, [pc, #356]	; 800e578 <mode_Tuning0+0x3d4>
 800e416:	ed9f 0a68 	vldr	s0, [pc, #416]	; 800e5b8 <mode_Tuning0+0x414>
 800e41a:	f7f5 fe01 	bl	8004020 <straight_table_ff>
			straight_table_ff(90, 300, 600, 600, 1500);
 800e41e:	ed9f 2a67 	vldr	s4, [pc, #412]	; 800e5bc <mode_Tuning0+0x418>
 800e422:	eddf 1a67 	vldr	s3, [pc, #412]	; 800e5c0 <mode_Tuning0+0x41c>
 800e426:	ed9f 1a66 	vldr	s2, [pc, #408]	; 800e5c0 <mode_Tuning0+0x41c>
 800e42a:	eddf 0a5e 	vldr	s1, [pc, #376]	; 800e5a4 <mode_Tuning0+0x400>
 800e42e:	ed9f 0a62 	vldr	s0, [pc, #392]	; 800e5b8 <mode_Tuning0+0x414>
 800e432:	f7f5 fdf5 	bl	8004020 <straight_table_ff>
			straight_table_ff(90, 600, 300, 600, 1500);
 800e436:	ed9f 2a61 	vldr	s4, [pc, #388]	; 800e5bc <mode_Tuning0+0x418>
 800e43a:	eddf 1a61 	vldr	s3, [pc, #388]	; 800e5c0 <mode_Tuning0+0x41c>
 800e43e:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800e5a4 <mode_Tuning0+0x400>
 800e442:	eddf 0a5f 	vldr	s1, [pc, #380]	; 800e5c0 <mode_Tuning0+0x41c>
 800e446:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 800e5b8 <mode_Tuning0+0x414>
 800e44a:	f7f5 fde9 	bl	8004020 <straight_table_ff>
			straight_table_ff(90, 300, 0, 300, 500);
 800e44e:	ed9f 2a58 	vldr	s4, [pc, #352]	; 800e5b0 <mode_Tuning0+0x40c>
 800e452:	eddf 1a54 	vldr	s3, [pc, #336]	; 800e5a4 <mode_Tuning0+0x400>
 800e456:	ed9f 1a48 	vldr	s2, [pc, #288]	; 800e578 <mode_Tuning0+0x3d4>
 800e45a:	eddf 0a52 	vldr	s1, [pc, #328]	; 800e5a4 <mode_Tuning0+0x400>
 800e45e:	ed9f 0a56 	vldr	s0, [pc, #344]	; 800e5b8 <mode_Tuning0+0x414>
 800e462:	f7f5 fddd 	bl	8004020 <straight_table_ff>
//				if(record_rupe_flag==1){
//					break;
//				}
//			}
//			pl_DriveMotor_stop();
			pl_r_blue_LED(OFF);
 800e466:	2000      	movs	r0, #0
 800e468:	f7f8 ff62 	bl	8007330 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 800e46c:	2000      	movs	r0, #0
 800e46e:	f7f8 ff71 	bl	8007354 <pl_l_blue_LED>
		break;
 800e472:	e0f5      	b.n	800e660 <mode_Tuning0+0x4bc>
		case 10://システム同定gyro
			record_mode=2;
 800e474:	4b3d      	ldr	r3, [pc, #244]	; (800e56c <mode_Tuning0+0x3c8>)
 800e476:	2202      	movs	r2, #2
 800e478:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 800e47a:	2001      	movs	r0, #1
 800e47c:	f7f8 ff58 	bl	8007330 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 800e480:	2001      	movs	r0, #1
 800e482:	f7f8 ff67 	bl	8007354 <pl_l_blue_LED>
			turning_table_ff(90, 0, 300, 300, 500);
 800e486:	ed9f 2a4a 	vldr	s4, [pc, #296]	; 800e5b0 <mode_Tuning0+0x40c>
 800e48a:	eddf 1a46 	vldr	s3, [pc, #280]	; 800e5a4 <mode_Tuning0+0x400>
 800e48e:	ed9f 1a45 	vldr	s2, [pc, #276]	; 800e5a4 <mode_Tuning0+0x400>
 800e492:	eddf 0a39 	vldr	s1, [pc, #228]	; 800e578 <mode_Tuning0+0x3d4>
 800e496:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800e5b8 <mode_Tuning0+0x414>
 800e49a:	f7f5 fef9 	bl	8004290 <turning_table_ff>
			turning_table_ff(90, 300, 600, 600, 1500);
 800e49e:	ed9f 2a47 	vldr	s4, [pc, #284]	; 800e5bc <mode_Tuning0+0x418>
 800e4a2:	eddf 1a47 	vldr	s3, [pc, #284]	; 800e5c0 <mode_Tuning0+0x41c>
 800e4a6:	ed9f 1a46 	vldr	s2, [pc, #280]	; 800e5c0 <mode_Tuning0+0x41c>
 800e4aa:	eddf 0a3e 	vldr	s1, [pc, #248]	; 800e5a4 <mode_Tuning0+0x400>
 800e4ae:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800e5b8 <mode_Tuning0+0x414>
 800e4b2:	f7f5 feed 	bl	8004290 <turning_table_ff>
			turning_table_ff(90, 600, 300, 600, 1500);
 800e4b6:	ed9f 2a41 	vldr	s4, [pc, #260]	; 800e5bc <mode_Tuning0+0x418>
 800e4ba:	eddf 1a41 	vldr	s3, [pc, #260]	; 800e5c0 <mode_Tuning0+0x41c>
 800e4be:	ed9f 1a39 	vldr	s2, [pc, #228]	; 800e5a4 <mode_Tuning0+0x400>
 800e4c2:	eddf 0a3f 	vldr	s1, [pc, #252]	; 800e5c0 <mode_Tuning0+0x41c>
 800e4c6:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800e5b8 <mode_Tuning0+0x414>
 800e4ca:	f7f5 fee1 	bl	8004290 <turning_table_ff>
			turning_table_ff(90, 300, 0, 300, 500);
 800e4ce:	ed9f 2a38 	vldr	s4, [pc, #224]	; 800e5b0 <mode_Tuning0+0x40c>
 800e4d2:	eddf 1a34 	vldr	s3, [pc, #208]	; 800e5a4 <mode_Tuning0+0x400>
 800e4d6:	ed9f 1a28 	vldr	s2, [pc, #160]	; 800e578 <mode_Tuning0+0x3d4>
 800e4da:	eddf 0a32 	vldr	s1, [pc, #200]	; 800e5a4 <mode_Tuning0+0x400>
 800e4de:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800e5b8 <mode_Tuning0+0x414>
 800e4e2:	f7f5 fed5 	bl	8004290 <turning_table_ff>
//					record_mode=0;
//					break;
//				}
//			}
//			pl_DriveMotor_stop();
			pl_r_blue_LED(OFF);
 800e4e6:	2000      	movs	r0, #0
 800e4e8:	f7f8 ff22 	bl	8007330 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 800e4ec:	2000      	movs	r0, #0
 800e4ee:	f7f8 ff31 	bl	8007354 <pl_l_blue_LED>
		break;
 800e4f2:	e0b5      	b.n	800e660 <mode_Tuning0+0x4bc>
		case 11:
		record_mode=1;
 800e4f4:	4b1d      	ldr	r3, [pc, #116]	; (800e56c <mode_Tuning0+0x3c8>)
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=0;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	723b      	strb	r3, [r7, #8]
		straight_table2(BACK_TO_CENTER, 0, 0, 300, 6000,mode);
 800e4fe:	68b8      	ldr	r0, [r7, #8]
 800e500:	ed9f 2a27 	vldr	s4, [pc, #156]	; 800e5a0 <mode_Tuning0+0x3fc>
 800e504:	eddf 1a27 	vldr	s3, [pc, #156]	; 800e5a4 <mode_Tuning0+0x400>
 800e508:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 800e578 <mode_Tuning0+0x3d4>
 800e50c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800e578 <mode_Tuning0+0x3d4>
 800e510:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 800e514:	f7f4 fdc6 	bl	80030a4 <straight_table2>
		break;
 800e518:	e0a2      	b.n	800e660 <mode_Tuning0+0x4bc>
		case 12:
		record_mode=17;
 800e51a:	4b14      	ldr	r3, [pc, #80]	; (800e56c <mode_Tuning0+0x3c8>)
 800e51c:	2211      	movs	r2, #17
 800e51e:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<40;i++){
 800e520:	2300      	movs	r3, #0
 800e522:	60fb      	str	r3, [r7, #12]
 800e524:	e00e      	b.n	800e544 <mode_Tuning0+0x3a0>
		turning_table2(90, 0, 0, 400, 3000);
 800e526:	ed9f 2a1d 	vldr	s4, [pc, #116]	; 800e59c <mode_Tuning0+0x3f8>
 800e52a:	eddf 1a16 	vldr	s3, [pc, #88]	; 800e584 <mode_Tuning0+0x3e0>
 800e52e:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800e578 <mode_Tuning0+0x3d4>
 800e532:	eddf 0a11 	vldr	s1, [pc, #68]	; 800e578 <mode_Tuning0+0x3d4>
 800e536:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800e5b8 <mode_Tuning0+0x414>
 800e53a:	f7f5 fa5d 	bl	80039f8 <turning_table2>
		for(int i=0;i<40;i++){
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	3301      	adds	r3, #1
 800e542:	60fb      	str	r3, [r7, #12]
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2b27      	cmp	r3, #39	; 0x27
 800e548:	dded      	ble.n	800e526 <mode_Tuning0+0x382>
		}
		break;
 800e54a:	e089      	b.n	800e660 <mode_Tuning0+0x4bc>
		case 13:
			pl_r_blue_LED(ON);
 800e54c:	2001      	movs	r0, #1
 800e54e:	f7f8 feef 	bl	8007330 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 800e552:	2001      	movs	r0, #1
 800e554:	f7f8 fefe 	bl	8007354 <pl_l_blue_LED>
			no_frontwall_straight();
 800e558:	f7f5 fd2a 	bl	8003fb0 <no_frontwall_straight>
			pl_r_blue_LED(OFF);
 800e55c:	2000      	movs	r0, #0
 800e55e:	f7f8 fee7 	bl	8007330 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 800e562:	2000      	movs	r0, #0
 800e564:	f7f8 fef6 	bl	8007354 <pl_l_blue_LED>
		break;
 800e568:	e07a      	b.n	800e660 <mode_Tuning0+0x4bc>
 800e56a:	bf00      	nop
 800e56c:	2000c388 	.word	0x2000c388
 800e570:	464b2000 	.word	0x464b2000
 800e574:	44c80000 	.word	0x44c80000
 800e578:	00000000 	.word	0x00000000
 800e57c:	44070000 	.word	0x44070000
 800e580:	457a0000 	.word	0x457a0000
 800e584:	43c80000 	.word	0x43c80000
 800e588:	43340000 	.word	0x43340000
 800e58c:	466a6000 	.word	0x466a6000
 800e590:	44fa0000 	.word	0x44fa0000
 800e594:	469c4000 	.word	0x469c4000
 800e598:	45160000 	.word	0x45160000
 800e59c:	453b8000 	.word	0x453b8000
 800e5a0:	45bb8000 	.word	0x45bb8000
 800e5a4:	43960000 	.word	0x43960000
 800e5a8:	44340000 	.word	0x44340000
 800e5ac:	2000c548 	.word	0x2000c548
 800e5b0:	43fa0000 	.word	0x43fa0000
 800e5b4:	443eeb39 	.word	0x443eeb39
 800e5b8:	42b40000 	.word	0x42b40000
 800e5bc:	44bb8000 	.word	0x44bb8000
 800e5c0:	44160000 	.word	0x44160000
		case 14://宴会芸＋吸引
			highspeed_mode = 1;
 800e5c4:	4b43      	ldr	r3, [pc, #268]	; (800e6d4 <mode_Tuning0+0x530>)
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 800e5ca:	ed9f 0a43 	vldr	s0, [pc, #268]	; 800e6d8 <mode_Tuning0+0x534>
 800e5ce:	f7f9 f9f9 	bl	80079c4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 800e5d2:	f7f9 f9e3 	bl	800799c <pl_FunMotor_start>
			HAL_Delay(600);
 800e5d6:	f44f 7016 	mov.w	r0, #600	; 0x258
 800e5da:	f001 ff53 	bl	8010484 <HAL_Delay>
			reset_gyro();
 800e5de:	f7f3 f90f 	bl	8001800 <reset_gyro>
			reset_speed();
 800e5e2:	f7f2 fd19 	bl	8001018 <reset_speed>
			reset_distance();
 800e5e6:	f7f2 fcd9 	bl	8000f9c <reset_distance>
			clear_Ierror();
 800e5ea:	f7f6 fa0f 	bl	8004a0c <clear_Ierror>
			record_mode=3;
 800e5ee:	4b3b      	ldr	r3, [pc, #236]	; (800e6dc <mode_Tuning0+0x538>)
 800e5f0:	2203      	movs	r2, #3
 800e5f2:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=1;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	723b      	strb	r3, [r7, #8]
			straight_table2(90*8, 0, 0, 3000, 12000,mode);
 800e5f8:	68b8      	ldr	r0, [r7, #8]
 800e5fa:	ed9f 2a39 	vldr	s4, [pc, #228]	; 800e6e0 <mode_Tuning0+0x53c>
 800e5fe:	eddf 1a39 	vldr	s3, [pc, #228]	; 800e6e4 <mode_Tuning0+0x540>
 800e602:	ed9f 1a39 	vldr	s2, [pc, #228]	; 800e6e8 <mode_Tuning0+0x544>
 800e606:	eddf 0a38 	vldr	s1, [pc, #224]	; 800e6e8 <mode_Tuning0+0x544>
 800e60a:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800e6ec <mode_Tuning0+0x548>
 800e60e:	f7f4 fd49 	bl	80030a4 <straight_table2>
		break;
 800e612:	e025      	b.n	800e660 <mode_Tuning0+0x4bc>
		case 15:
			highspeed_mode = 1;
 800e614:	4b2f      	ldr	r3, [pc, #188]	; (800e6d4 <mode_Tuning0+0x530>)
 800e616:	2201      	movs	r2, #1
 800e618:	701a      	strb	r2, [r3, #0]
						pl_FunMotor_duty(0.95);
 800e61a:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800e6f0 <mode_Tuning0+0x54c>
 800e61e:	f7f9 f9d1 	bl	80079c4 <pl_FunMotor_duty>
						//pl_FunMotor_start();
						HAL_Delay(600);
 800e622:	f44f 7016 	mov.w	r0, #600	; 0x258
 800e626:	f001 ff2d 	bl	8010484 <HAL_Delay>
						reset_gyro();
 800e62a:	f7f3 f8e9 	bl	8001800 <reset_gyro>
						reset_speed();
 800e62e:	f7f2 fcf3 	bl	8001018 <reset_speed>
						reset_distance();
 800e632:	f7f2 fcb3 	bl	8000f9c <reset_distance>
						clear_Ierror();
 800e636:	f7f6 f9e9 	bl	8004a0c <clear_Ierror>
						record_mode=3;
 800e63a:	4b28      	ldr	r3, [pc, #160]	; (800e6dc <mode_Tuning0+0x538>)
 800e63c:	2203      	movs	r2, #3
 800e63e:	701a      	strb	r2, [r3, #0]
			//			mode.WallControlMode=0;
			//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
						mode.WallControlMode=1;
 800e640:	2301      	movs	r3, #1
 800e642:	723b      	strb	r3, [r7, #8]
						straight_table2(90*8, 0, 0, 1000, 7000,mode);
 800e644:	68b8      	ldr	r0, [r7, #8]
 800e646:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800e6f4 <mode_Tuning0+0x550>
 800e64a:	eddf 1a2b 	vldr	s3, [pc, #172]	; 800e6f8 <mode_Tuning0+0x554>
 800e64e:	ed9f 1a26 	vldr	s2, [pc, #152]	; 800e6e8 <mode_Tuning0+0x544>
 800e652:	eddf 0a25 	vldr	s1, [pc, #148]	; 800e6e8 <mode_Tuning0+0x544>
 800e656:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800e6ec <mode_Tuning0+0x548>
 800e65a:	f7f4 fd23 	bl	80030a4 <straight_table2>
//			record_mode=1;
//			mode.WallControlMode=0;
//			straight_table2(BACK_TO_CENTER_SLANT, 0, 0, 300, 6000,mode);
		break;
 800e65e:	bf00      	nop
	}
	record_mode=0;
 800e660:	4b1e      	ldr	r3, [pc, #120]	; (800e6dc <mode_Tuning0+0x538>)
 800e662:	2200      	movs	r2, #0
 800e664:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e666:	2003      	movs	r0, #3
 800e668:	f7f9 f940 	bl	80078ec <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e66c:	2003      	movs	r0, #3
 800e66e:	f7f9 f915 	bl	800789c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800e672:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e676:	f7f9 fc0b 	bl	8007e90 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800e67a:	f7f9 f999 	bl	80079b0 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 800e67e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e682:	f7f9 fc05 	bl	8007e90 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800e686:	2000      	movs	r0, #0
 800e688:	f7f9 f8fe 	bl	8007888 <pl_DriveMotor_standby>
	record_mode=0;
 800e68c:	4b13      	ldr	r3, [pc, #76]	; (800e6dc <mode_Tuning0+0x538>)
 800e68e:	2200      	movs	r2, #0
 800e690:	701a      	strb	r2, [r3, #0]
	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 800e692:	e002      	b.n	800e69a <mode_Tuning0+0x4f6>
		HAL_Delay(1);
 800e694:	2001      	movs	r0, #1
 800e696:	f001 fef5 	bl	8010484 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 800e69a:	4b18      	ldr	r3, [pc, #96]	; (800e6fc <mode_Tuning0+0x558>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e6a2:	ddf7      	ble.n	800e694 <mode_Tuning0+0x4f0>
 800e6a4:	4b15      	ldr	r3, [pc, #84]	; (800e6fc <mode_Tuning0+0x558>)
 800e6a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e6aa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e6ae:	ddf1      	ble.n	800e694 <mode_Tuning0+0x4f0>
 800e6b0:	4b12      	ldr	r3, [pc, #72]	; (800e6fc <mode_Tuning0+0x558>)
 800e6b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e6b6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e6ba:	ddeb      	ble.n	800e694 <mode_Tuning0+0x4f0>
	}
	pl_r_blue_LED(ON);
 800e6bc:	2001      	movs	r0, #1
 800e6be:	f7f8 fe37 	bl	8007330 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 800e6c2:	2001      	movs	r0, #1
 800e6c4:	f7f8 fe46 	bl	8007354 <pl_l_blue_LED>
	record_print();
 800e6c8:	f000 faaa 	bl	800ec20 <record_print>



}
 800e6cc:	bf00      	nop
 800e6ce:	3714      	adds	r7, #20
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd90      	pop	{r4, r7, pc}
 800e6d4:	200007e8 	.word	0x200007e8
 800e6d8:	3f7d70a4 	.word	0x3f7d70a4
 800e6dc:	2000c388 	.word	0x2000c388
 800e6e0:	463b8000 	.word	0x463b8000
 800e6e4:	453b8000 	.word	0x453b8000
 800e6e8:	00000000 	.word	0x00000000
 800e6ec:	44340000 	.word	0x44340000
 800e6f0:	3f733333 	.word	0x3f733333
 800e6f4:	45dac000 	.word	0x45dac000
 800e6f8:	447a0000 	.word	0x447a0000
 800e6fc:	20000298 	.word	0x20000298

0800e700 <mode_WallSensorTuning>:


void mode_WallSensorTuning(unsigned char main_modeR){
 800e700:	b580      	push	{r7, lr}
 800e702:	b084      	sub	sp, #16
 800e704:	af00      	add	r7, sp, #0
 800e706:	4603      	mov	r3, r0
 800e708:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 800e70a:	2300      	movs	r3, #0
 800e70c:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 800e70e:	2300      	movs	r3, #0
 800e710:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 800e712:	2300      	movs	r3, #0
 800e714:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 800e716:	2300      	movs	r3, #0
 800e718:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 800e71a:	2001      	movs	r0, #1
 800e71c:	f7f9 f8b4 	bl	8007888 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e720:	2003      	movs	r0, #3
 800e722:	f7f9 f8bb 	bl	800789c <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e726:	2003      	movs	r0, #3
 800e728:	f7f9 f8e0 	bl	80078ec <pl_R_DriveMotor_mode>
	reset_gyro();
 800e72c:	f7f3 f868 	bl	8001800 <reset_gyro>
	reset_speed();
 800e730:	f7f2 fc72 	bl	8001018 <reset_speed>
	clear_Ierror();
 800e734:	f7f6 f96a 	bl	8004a0c <clear_Ierror>

	switch (main_modeR) {
 800e738:	79fb      	ldrb	r3, [r7, #7]
 800e73a:	2b0f      	cmp	r3, #15
 800e73c:	f200 81ad 	bhi.w	800ea9a <mode_WallSensorTuning+0x39a>
 800e740:	a201      	add	r2, pc, #4	; (adr r2, 800e748 <mode_WallSensorTuning+0x48>)
 800e742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e746:	bf00      	nop
 800e748:	0800e789 	.word	0x0800e789
 800e74c:	0800e7af 	.word	0x0800e7af
 800e750:	0800e7c7 	.word	0x0800e7c7
 800e754:	0800e83d 	.word	0x0800e83d
 800e758:	0800e8b3 	.word	0x0800e8b3
 800e75c:	0800e923 	.word	0x0800e923
 800e760:	0800e993 	.word	0x0800e993
 800e764:	0800e9b9 	.word	0x0800e9b9
 800e768:	0800e9df 	.word	0x0800e9df
 800e76c:	0800ea05 	.word	0x0800ea05
 800e770:	0800ea9b 	.word	0x0800ea9b
 800e774:	0800ea9b 	.word	0x0800ea9b
 800e778:	0800ea9b 	.word	0x0800ea9b
 800e77c:	0800ea9b 	.word	0x0800ea9b
 800e780:	0800ea9b 	.word	0x0800ea9b
 800e784:	0800ea2b 	.word	0x0800ea2b
		case 0://横壁追従制御
			record_mode=16;
 800e788:	4be1      	ldr	r3, [pc, #900]	; (800eb10 <mode_WallSensorTuning+0x410>)
 800e78a:	2210      	movs	r2, #16
 800e78c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 800e78e:	2301      	movs	r3, #1
 800e790:	723b      	strb	r3, [r7, #8]
			straight_table2(180*8, 0, 0, 500, 5000,mode);
 800e792:	68b8      	ldr	r0, [r7, #8]
 800e794:	ed9f 2adf 	vldr	s4, [pc, #892]	; 800eb14 <mode_WallSensorTuning+0x414>
 800e798:	eddf 1adf 	vldr	s3, [pc, #892]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e79c:	ed9f 1adf 	vldr	s2, [pc, #892]	; 800eb1c <mode_WallSensorTuning+0x41c>
 800e7a0:	eddf 0ade 	vldr	s1, [pc, #888]	; 800eb1c <mode_WallSensorTuning+0x41c>
 800e7a4:	ed9f 0ade 	vldr	s0, [pc, #888]	; 800eb20 <mode_WallSensorTuning+0x420>
 800e7a8:	f7f4 fc7c 	bl	80030a4 <straight_table2>
		break;
 800e7ac:	e175      	b.n	800ea9a <mode_WallSensorTuning+0x39a>
		case 1://前壁制御
			for(int ii=0;ii<=20;ii++){
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	60fb      	str	r3, [r7, #12]
 800e7b2:	e004      	b.n	800e7be <mode_WallSensorTuning+0xbe>
			no_frontwall_straight();
 800e7b4:	f7f5 fbfc 	bl	8003fb0 <no_frontwall_straight>
			for(int ii=0;ii<=20;ii++){
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	60fb      	str	r3, [r7, #12]
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2b14      	cmp	r3, #20
 800e7c2:	ddf7      	ble.n	800e7b4 <mode_WallSensorTuning+0xb4>
			}
		break;
 800e7c4:	e169      	b.n	800ea9a <mode_WallSensorTuning+0x39a>
		case 2://壁切れ90度
			record_mode = 4;
 800e7c6:	4bd2      	ldr	r3, [pc, #840]	; (800eb10 <mode_WallSensorTuning+0x410>)
 800e7c8:	2204      	movs	r2, #4
 800e7ca:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 270, 0, 500, 500,1500,mode);
 800e7dc:	68b8      	ldr	r0, [r7, #8]
 800e7de:	ed9f 2ad1 	vldr	s4, [pc, #836]	; 800eb24 <mode_WallSensorTuning+0x424>
 800e7e2:	eddf 1acd 	vldr	s3, [pc, #820]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e7e6:	ed9f 1acc 	vldr	s2, [pc, #816]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e7ea:	eddf 0acc 	vldr	s1, [pc, #816]	; 800eb1c <mode_WallSensorTuning+0x41c>
 800e7ee:	ed9f 0ace 	vldr	s0, [pc, #824]	; 800eb28 <mode_WallSensorTuning+0x428>
 800e7f2:	f7f4 fc57 	bl	80030a4 <straight_table2>
			mode.WallCutMode=1;
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 800e7fe:	68b8      	ldr	r0, [r7, #8]
 800e800:	ed9f 2ac8 	vldr	s4, [pc, #800]	; 800eb24 <mode_WallSensorTuning+0x424>
 800e804:	eddf 1ac4 	vldr	s3, [pc, #784]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e808:	ed9f 1ac3 	vldr	s2, [pc, #780]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e80c:	eddf 0ac2 	vldr	s1, [pc, #776]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e810:	ed9f 0ac6 	vldr	s0, [pc, #792]	; 800eb2c <mode_WallSensorTuning+0x42c>
 800e814:	f7f4 fc46 	bl	80030a4 <straight_table2>
			mode.WallControlMode=0;
 800e818:	2300      	movs	r3, #0
 800e81a:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 800e81c:	2300      	movs	r3, #0
 800e81e:	72fb      	strb	r3, [r7, #11]
			straight_table2(90 + 45, 500, 0, 500,1500,mode);
 800e820:	68b8      	ldr	r0, [r7, #8]
 800e822:	ed9f 2ac0 	vldr	s4, [pc, #768]	; 800eb24 <mode_WallSensorTuning+0x424>
 800e826:	eddf 1abc 	vldr	s3, [pc, #752]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e82a:	ed9f 1abc 	vldr	s2, [pc, #752]	; 800eb1c <mode_WallSensorTuning+0x41c>
 800e82e:	eddf 0aba 	vldr	s1, [pc, #744]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e832:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800eb30 <mode_WallSensorTuning+0x430>
 800e836:	f7f4 fc35 	bl	80030a4 <straight_table2>
		break;
 800e83a:	e12e      	b.n	800ea9a <mode_WallSensorTuning+0x39a>
		case 3://壁切れ45度//90°大回り
			record_mode=1;
 800e83c:	4bb4      	ldr	r3, [pc, #720]	; (800eb10 <mode_WallSensorTuning+0x410>)
 800e83e:	2201      	movs	r2, #1
 800e840:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 800e842:	2300      	movs	r3, #0
 800e844:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 800e846:	2300      	movs	r3, #0
 800e848:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 800e84a:	2300      	movs	r3, #0
 800e84c:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 800e84e:	2300      	movs	r3, #0
 800e850:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_FRONT + 180, 0, 500, 500,1500,mode);
 800e852:	68b8      	ldr	r0, [r7, #8]
 800e854:	ed9f 2ab3 	vldr	s4, [pc, #716]	; 800eb24 <mode_WallSensorTuning+0x424>
 800e858:	eddf 1aaf 	vldr	s3, [pc, #700]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e85c:	ed9f 1aae 	vldr	s2, [pc, #696]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e860:	eddf 0aae 	vldr	s1, [pc, #696]	; 800eb1c <mode_WallSensorTuning+0x41c>
 800e864:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 800eb34 <mode_WallSensorTuning+0x434>
 800e868:	f7f4 fc1c 	bl	80030a4 <straight_table2>
			mode.WallCutMode=2;
 800e86c:	2302      	movs	r3, #2
 800e86e:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 800e870:	2300      	movs	r3, #0
 800e872:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 800e874:	68b8      	ldr	r0, [r7, #8]
 800e876:	ed9f 2aab 	vldr	s4, [pc, #684]	; 800eb24 <mode_WallSensorTuning+0x424>
 800e87a:	eddf 1aa7 	vldr	s3, [pc, #668]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e87e:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e882:	eddf 0aa5 	vldr	s1, [pc, #660]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e886:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 800eb2c <mode_WallSensorTuning+0x42c>
 800e88a:	f7f4 fc0b 	bl	80030a4 <straight_table2>
			mode.WallControlMode=0;
 800e88e:	2300      	movs	r3, #0
 800e890:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 800e892:	2300      	movs	r3, #0
 800e894:	72fb      	strb	r3, [r7, #11]
			straight_table2(90+45, 500, 0, 500,1500,mode);
 800e896:	68b8      	ldr	r0, [r7, #8]
 800e898:	ed9f 2aa2 	vldr	s4, [pc, #648]	; 800eb24 <mode_WallSensorTuning+0x424>
 800e89c:	eddf 1a9e 	vldr	s3, [pc, #632]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e8a0:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800eb1c <mode_WallSensorTuning+0x41c>
 800e8a4:	eddf 0a9c 	vldr	s1, [pc, #624]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e8a8:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 800eb30 <mode_WallSensorTuning+0x430>
 800e8ac:	f7f4 fbfa 	bl	80030a4 <straight_table2>
		break;
 800e8b0:	e0f3      	b.n	800ea9a <mode_WallSensorTuning+0x39a>
		case 4://壁切れ45度斜め(考え中)
			mode.WallControlMode=0;//3でもいいかも
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT + 180*sqrt(2), 0, 500, 500,1500,mode);
 800e8c2:	68b8      	ldr	r0, [r7, #8]
 800e8c4:	ed9f 2a97 	vldr	s4, [pc, #604]	; 800eb24 <mode_WallSensorTuning+0x424>
 800e8c8:	eddf 1a93 	vldr	s3, [pc, #588]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e8cc:	ed9f 1a92 	vldr	s2, [pc, #584]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e8d0:	eddf 0a92 	vldr	s1, [pc, #584]	; 800eb1c <mode_WallSensorTuning+0x41c>
 800e8d4:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800eb38 <mode_WallSensorTuning+0x438>
 800e8d8:	f7f4 fbe4 	bl	80030a4 <straight_table2>
			mode.WallCutMode=3;
 800e8dc:	2303      	movs	r3, #3
 800e8de:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	723b      	strb	r3, [r7, #8]
			straight_table2(45*sqrt(2), 500, 500, 500,1500,mode);
 800e8e4:	68b8      	ldr	r0, [r7, #8]
 800e8e6:	ed9f 2a8f 	vldr	s4, [pc, #572]	; 800eb24 <mode_WallSensorTuning+0x424>
 800e8ea:	eddf 1a8b 	vldr	s3, [pc, #556]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e8ee:	ed9f 1a8a 	vldr	s2, [pc, #552]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e8f2:	eddf 0a89 	vldr	s1, [pc, #548]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e8f6:	ed9f 0a91 	vldr	s0, [pc, #580]	; 800eb3c <mode_WallSensorTuning+0x43c>
 800e8fa:	f7f4 fbd3 	bl	80030a4 <straight_table2>
			mode.WallControlMode=0;
 800e8fe:	2300      	movs	r3, #0
 800e900:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 800e902:	2300      	movs	r3, #0
 800e904:	72fb      	strb	r3, [r7, #11]
			straight_table2(90*sqrt(2) + 45*sqrt(2), 500, 0, 500,1500,mode);
 800e906:	68b8      	ldr	r0, [r7, #8]
 800e908:	ed9f 2a86 	vldr	s4, [pc, #536]	; 800eb24 <mode_WallSensorTuning+0x424>
 800e90c:	eddf 1a82 	vldr	s3, [pc, #520]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e910:	ed9f 1a82 	vldr	s2, [pc, #520]	; 800eb1c <mode_WallSensorTuning+0x41c>
 800e914:	eddf 0a80 	vldr	s1, [pc, #512]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e918:	ed9f 0a89 	vldr	s0, [pc, #548]	; 800eb40 <mode_WallSensorTuning+0x440>
 800e91c:	f7f4 fbc2 	bl	80030a4 <straight_table2>
		break;
 800e920:	e0bb      	b.n	800ea9a <mode_WallSensorTuning+0x39a>
		case 5://壁切れ45度斜め(考え中)
			mode.WallControlMode=0;//3でもいいかも
 800e922:	2300      	movs	r3, #0
 800e924:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 800e926:	2300      	movs	r3, #0
 800e928:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 800e92a:	2300      	movs	r3, #0
 800e92c:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 800e92e:	2300      	movs	r3, #0
 800e930:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT+180*sqrt(2), 0, 500, 500,1500,mode);
 800e932:	68b8      	ldr	r0, [r7, #8]
 800e934:	ed9f 2a7b 	vldr	s4, [pc, #492]	; 800eb24 <mode_WallSensorTuning+0x424>
 800e938:	eddf 1a77 	vldr	s3, [pc, #476]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e93c:	ed9f 1a76 	vldr	s2, [pc, #472]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e940:	eddf 0a76 	vldr	s1, [pc, #472]	; 800eb1c <mode_WallSensorTuning+0x41c>
 800e944:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 800eb38 <mode_WallSensorTuning+0x438>
 800e948:	f7f4 fbac 	bl	80030a4 <straight_table2>
			mode.WallCutMode=4;
 800e94c:	2304      	movs	r3, #4
 800e94e:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 800e950:	2300      	movs	r3, #0
 800e952:	723b      	strb	r3, [r7, #8]
			straight_table2(45*sqrt(2), 500, 500, 500,1500,mode);
 800e954:	68b8      	ldr	r0, [r7, #8]
 800e956:	ed9f 2a73 	vldr	s4, [pc, #460]	; 800eb24 <mode_WallSensorTuning+0x424>
 800e95a:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e95e:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e962:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e966:	ed9f 0a75 	vldr	s0, [pc, #468]	; 800eb3c <mode_WallSensorTuning+0x43c>
 800e96a:	f7f4 fb9b 	bl	80030a4 <straight_table2>
			mode.WallControlMode=0;
 800e96e:	2300      	movs	r3, #0
 800e970:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 800e972:	2300      	movs	r3, #0
 800e974:	72fb      	strb	r3, [r7, #11]
			straight_table2(90*sqrt(2) + 45*sqrt(2), 500, 0, 500,1500,mode);
 800e976:	68b8      	ldr	r0, [r7, #8]
 800e978:	ed9f 2a6a 	vldr	s4, [pc, #424]	; 800eb24 <mode_WallSensorTuning+0x424>
 800e97c:	eddf 1a66 	vldr	s3, [pc, #408]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e980:	ed9f 1a66 	vldr	s2, [pc, #408]	; 800eb1c <mode_WallSensorTuning+0x41c>
 800e984:	eddf 0a64 	vldr	s1, [pc, #400]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e988:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800eb40 <mode_WallSensorTuning+0x440>
 800e98c:	f7f4 fb8a 	bl	80030a4 <straight_table2>
		break;
 800e990:	e083      	b.n	800ea9a <mode_WallSensorTuning+0x39a>
		case 6://斜め直進(制御あり)
			record_mode=7;
 800e992:	4b5f      	ldr	r3, [pc, #380]	; (800eb10 <mode_WallSensorTuning+0x410>)
 800e994:	2207      	movs	r2, #7
 800e996:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 800e998:	2300      	movs	r3, #0
 800e99a:	723b      	strb	r3, [r7, #8]
			straight_table2(180*3*sqrt(2), 0, 0, 500, 6000,mode);
 800e99c:	68b8      	ldr	r0, [r7, #8]
 800e99e:	ed9f 2a69 	vldr	s4, [pc, #420]	; 800eb44 <mode_WallSensorTuning+0x444>
 800e9a2:	eddf 1a5d 	vldr	s3, [pc, #372]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e9a6:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 800eb1c <mode_WallSensorTuning+0x41c>
 800e9aa:	eddf 0a5c 	vldr	s1, [pc, #368]	; 800eb1c <mode_WallSensorTuning+0x41c>
 800e9ae:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800eb48 <mode_WallSensorTuning+0x448>
 800e9b2:	f7f4 fb77 	bl	80030a4 <straight_table2>
		break;
 800e9b6:	e070      	b.n	800ea9a <mode_WallSensorTuning+0x39a>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=9;
 800e9b8:	4b55      	ldr	r3, [pc, #340]	; (800eb10 <mode_WallSensorTuning+0x410>)
 800e9ba:	2209      	movs	r2, #9
 800e9bc:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	723b      	strb	r3, [r7, #8]
			straight_table2(180*3*sqrt(2), 0, 0, 500, 6000,mode);
 800e9c2:	68b8      	ldr	r0, [r7, #8]
 800e9c4:	ed9f 2a5f 	vldr	s4, [pc, #380]	; 800eb44 <mode_WallSensorTuning+0x444>
 800e9c8:	eddf 1a53 	vldr	s3, [pc, #332]	; 800eb18 <mode_WallSensorTuning+0x418>
 800e9cc:	ed9f 1a53 	vldr	s2, [pc, #332]	; 800eb1c <mode_WallSensorTuning+0x41c>
 800e9d0:	eddf 0a52 	vldr	s1, [pc, #328]	; 800eb1c <mode_WallSensorTuning+0x41c>
 800e9d4:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 800eb48 <mode_WallSensorTuning+0x448>
 800e9d8:	f7f4 fb64 	bl	80030a4 <straight_table2>

		break;
 800e9dc:	e05d      	b.n	800ea9a <mode_WallSensorTuning+0x39a>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 800e9de:	4b4c      	ldr	r3, [pc, #304]	; (800eb10 <mode_WallSensorTuning+0x410>)
 800e9e0:	2207      	movs	r2, #7
 800e9e2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 800e9e4:	2303      	movs	r3, #3
 800e9e6:	723b      	strb	r3, [r7, #8]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 15000,mode);
 800e9e8:	68b8      	ldr	r0, [r7, #8]
 800e9ea:	ed9f 2a58 	vldr	s4, [pc, #352]	; 800eb4c <mode_WallSensorTuning+0x44c>
 800e9ee:	eddf 1a58 	vldr	s3, [pc, #352]	; 800eb50 <mode_WallSensorTuning+0x450>
 800e9f2:	ed9f 1a4a 	vldr	s2, [pc, #296]	; 800eb1c <mode_WallSensorTuning+0x41c>
 800e9f6:	eddf 0a49 	vldr	s1, [pc, #292]	; 800eb1c <mode_WallSensorTuning+0x41c>
 800e9fa:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800eb48 <mode_WallSensorTuning+0x448>
 800e9fe:	f7f4 fb51 	bl	80030a4 <straight_table2>
		break;
 800ea02:	e04a      	b.n	800ea9a <mode_WallSensorTuning+0x39a>
		case 9:
			record_mode=8;
 800ea04:	4b42      	ldr	r3, [pc, #264]	; (800eb10 <mode_WallSensorTuning+0x410>)
 800ea06:	2208      	movs	r2, #8
 800ea08:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 800ea0a:	2303      	movs	r3, #3
 800ea0c:	723b      	strb	r3, [r7, #8]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 700, 10000,mode);
 800ea0e:	68b8      	ldr	r0, [r7, #8]
 800ea10:	ed9f 2a50 	vldr	s4, [pc, #320]	; 800eb54 <mode_WallSensorTuning+0x454>
 800ea14:	eddf 1a50 	vldr	s3, [pc, #320]	; 800eb58 <mode_WallSensorTuning+0x458>
 800ea18:	ed9f 1a40 	vldr	s2, [pc, #256]	; 800eb1c <mode_WallSensorTuning+0x41c>
 800ea1c:	eddf 0a3f 	vldr	s1, [pc, #252]	; 800eb1c <mode_WallSensorTuning+0x41c>
 800ea20:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800eb5c <mode_WallSensorTuning+0x45c>
 800ea24:	f7f4 fb3e 	bl	80030a4 <straight_table2>
		break;
 800ea28:	e037      	b.n	800ea9a <mode_WallSensorTuning+0x39a>
		case 10:
		break;
		case 11:
		break;
		case 15:
			mode.WallControlMode=5;
 800ea2a:	2305      	movs	r3, #5
 800ea2c:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 800ea32:	2300      	movs	r3, #0
 800ea34:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 800ea36:	2300      	movs	r3, #0
 800ea38:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 180, 0, 500, 500,1500,mode);
 800ea3a:	68b8      	ldr	r0, [r7, #8]
 800ea3c:	ed9f 2a39 	vldr	s4, [pc, #228]	; 800eb24 <mode_WallSensorTuning+0x424>
 800ea40:	eddf 1a35 	vldr	s3, [pc, #212]	; 800eb18 <mode_WallSensorTuning+0x418>
 800ea44:	ed9f 1a34 	vldr	s2, [pc, #208]	; 800eb18 <mode_WallSensorTuning+0x418>
 800ea48:	eddf 0a34 	vldr	s1, [pc, #208]	; 800eb1c <mode_WallSensorTuning+0x41c>
 800ea4c:	ed9f 0a44 	vldr	s0, [pc, #272]	; 800eb60 <mode_WallSensorTuning+0x460>
 800ea50:	f7f4 fb28 	bl	80030a4 <straight_table2>
			mode.WallCutMode=2;
 800ea54:	2302      	movs	r3, #2
 800ea56:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 800ea5c:	68b8      	ldr	r0, [r7, #8]
 800ea5e:	ed9f 2a31 	vldr	s4, [pc, #196]	; 800eb24 <mode_WallSensorTuning+0x424>
 800ea62:	eddf 1a2d 	vldr	s3, [pc, #180]	; 800eb18 <mode_WallSensorTuning+0x418>
 800ea66:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 800eb18 <mode_WallSensorTuning+0x418>
 800ea6a:	eddf 0a2b 	vldr	s1, [pc, #172]	; 800eb18 <mode_WallSensorTuning+0x418>
 800ea6e:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800eb2c <mode_WallSensorTuning+0x42c>
 800ea72:	f7f4 fb17 	bl	80030a4 <straight_table2>
			mode.WallControlMode=0;
 800ea76:	2300      	movs	r3, #0
 800ea78:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	72fb      	strb	r3, [r7, #11]
			straight_table2(90+45, 500, 0, 500,1500,mode);
 800ea7e:	68b8      	ldr	r0, [r7, #8]
 800ea80:	ed9f 2a28 	vldr	s4, [pc, #160]	; 800eb24 <mode_WallSensorTuning+0x424>
 800ea84:	eddf 1a24 	vldr	s3, [pc, #144]	; 800eb18 <mode_WallSensorTuning+0x418>
 800ea88:	ed9f 1a24 	vldr	s2, [pc, #144]	; 800eb1c <mode_WallSensorTuning+0x41c>
 800ea8c:	eddf 0a22 	vldr	s1, [pc, #136]	; 800eb18 <mode_WallSensorTuning+0x418>
 800ea90:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800eb30 <mode_WallSensorTuning+0x430>
 800ea94:	f7f4 fb06 	bl	80030a4 <straight_table2>
		break;
 800ea98:	bf00      	nop
	}
	record_mode=0;
 800ea9a:	4b1d      	ldr	r3, [pc, #116]	; (800eb10 <mode_WallSensorTuning+0x410>)
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800eaa0:	2003      	movs	r0, #3
 800eaa2:	f7f8 ff23 	bl	80078ec <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800eaa6:	2003      	movs	r0, #3
 800eaa8:	f7f8 fef8 	bl	800789c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800eaac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800eab0:	f7f9 f9ee 	bl	8007e90 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800eab4:	f7f8 ff7c 	bl	80079b0 <pl_FunMotor_stop>
	record_mode=0;
 800eab8:	4b15      	ldr	r3, [pc, #84]	; (800eb10 <mode_WallSensorTuning+0x410>)
 800eaba:	2200      	movs	r2, #0
 800eabc:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 800eabe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800eac2:	f7f9 f9e5 	bl	8007e90 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800eac6:	2000      	movs	r0, #0
 800eac8:	f7f8 fede 	bl	8007888 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 800eacc:	e002      	b.n	800ead4 <mode_WallSensorTuning+0x3d4>
		HAL_Delay(1);
 800eace:	2001      	movs	r0, #1
 800ead0:	f001 fcd8 	bl	8010484 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 800ead4:	4b23      	ldr	r3, [pc, #140]	; (800eb64 <mode_WallSensorTuning+0x464>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800eadc:	ddf7      	ble.n	800eace <mode_WallSensorTuning+0x3ce>
 800eade:	4b21      	ldr	r3, [pc, #132]	; (800eb64 <mode_WallSensorTuning+0x464>)
 800eae0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800eae4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800eae8:	ddf1      	ble.n	800eace <mode_WallSensorTuning+0x3ce>
 800eaea:	4b1e      	ldr	r3, [pc, #120]	; (800eb64 <mode_WallSensorTuning+0x464>)
 800eaec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800eaf0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800eaf4:	ddeb      	ble.n	800eace <mode_WallSensorTuning+0x3ce>
	}
	pl_r_blue_LED(ON);
 800eaf6:	2001      	movs	r0, #1
 800eaf8:	f7f8 fc1a 	bl	8007330 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 800eafc:	2001      	movs	r0, #1
 800eafe:	f7f8 fc29 	bl	8007354 <pl_l_blue_LED>
	record_print();
 800eb02:	f000 f88d 	bl	800ec20 <record_print>



}
 800eb06:	bf00      	nop
 800eb08:	3710      	adds	r7, #16
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	2000c388 	.word	0x2000c388
 800eb14:	459c4000 	.word	0x459c4000
 800eb18:	43fa0000 	.word	0x43fa0000
 800eb1c:	00000000 	.word	0x00000000
 800eb20:	44b40000 	.word	0x44b40000
 800eb24:	44bb8000 	.word	0x44bb8000
 800eb28:	43938000 	.word	0x43938000
 800eb2c:	42340000 	.word	0x42340000
 800eb30:	43070000 	.word	0x43070000
 800eb34:	43470000 	.word	0x43470000
 800eb38:	4397477b 	.word	0x4397477b
 800eb3c:	427e8ef6 	.word	0x427e8ef6
 800eb40:	433eeb39 	.word	0x433eeb39
 800eb44:	45bb8000 	.word	0x45bb8000
 800eb48:	443eeb39 	.word	0x443eeb39
 800eb4c:	466a6000 	.word	0x466a6000
 800eb50:	44fa0000 	.word	0x44fa0000
 800eb54:	461c4000 	.word	0x461c4000
 800eb58:	442f0000 	.word	0x442f0000
 800eb5c:	4485477b 	.word	0x4485477b
 800eb60:	434d0000 	.word	0x434d0000
 800eb64:	20000298 	.word	0x20000298

0800eb68 <record_reset>:
char record_rupe_flag;

//int SEN_record[5][15];
//int SEN_recordD[5][15];

void record_reset(void) {
 800eb68:	b480      	push	{r7}
 800eb6a:	af00      	add	r7, sp, #0
	record_mode = 0;
 800eb6c:	4b06      	ldr	r3, [pc, #24]	; (800eb88 <record_reset+0x20>)
 800eb6e:	2200      	movs	r2, #0
 800eb70:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 800eb72:	4b06      	ldr	r3, [pc, #24]	; (800eb8c <record_reset+0x24>)
 800eb74:	2200      	movs	r2, #0
 800eb76:	601a      	str	r2, [r3, #0]
	record_rupe_flag = 0;
 800eb78:	4b05      	ldr	r3, [pc, #20]	; (800eb90 <record_reset+0x28>)
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	701a      	strb	r2, [r3, #0]
}
 800eb7e:	bf00      	nop
 800eb80:	46bd      	mov	sp, r7
 800eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb86:	4770      	bx	lr
 800eb88:	2000c388 	.word	0x2000c388
 800eb8c:	2000c38c 	.word	0x2000c38c
 800eb90:	2000c394 	.word	0x2000c394

0800eb94 <record_data>:

void record_data(float *input_record_data, int numlen) {
 800eb94:	b490      	push	{r4, r7}
 800eb96:	b084      	sub	sp, #16
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	6039      	str	r1, [r7, #0]

	for (int record_count = 0; record_count < numlen; record_count++) {
 800eb9e:	2300      	movs	r3, #0
 800eba0:	60fb      	str	r3, [r7, #12]
 800eba2:	e013      	b.n	800ebcc <record_data+0x38>
		record_value[record_count][record_time] =
				input_record_data[record_count];
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	009b      	lsls	r3, r3, #2
 800eba8:	687a      	ldr	r2, [r7, #4]
 800ebaa:	441a      	add	r2, r3
		record_value[record_count][record_time] =
 800ebac:	4b18      	ldr	r3, [pc, #96]	; (800ec10 <record_data+0x7c>)
 800ebae:	681b      	ldr	r3, [r3, #0]
				input_record_data[record_count];
 800ebb0:	6812      	ldr	r2, [r2, #0]
		record_value[record_count][record_time] =
 800ebb2:	4818      	ldr	r0, [pc, #96]	; (800ec14 <record_data+0x80>)
 800ebb4:	68f9      	ldr	r1, [r7, #12]
 800ebb6:	f640 34b8 	movw	r4, #3000	; 0xbb8
 800ebba:	fb04 f101 	mul.w	r1, r4, r1
 800ebbe:	440b      	add	r3, r1
 800ebc0:	009b      	lsls	r3, r3, #2
 800ebc2:	4403      	add	r3, r0
 800ebc4:	601a      	str	r2, [r3, #0]
	for (int record_count = 0; record_count < numlen; record_count++) {
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	3301      	adds	r3, #1
 800ebca:	60fb      	str	r3, [r7, #12]
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	dbe7      	blt.n	800eba4 <record_data+0x10>
	}
	if (record_rupe_flag == 1) {
 800ebd4:	4b10      	ldr	r3, [pc, #64]	; (800ec18 <record_data+0x84>)
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d103      	bne.n	800ebe4 <record_data+0x50>
		record_end_point = record_time;
 800ebdc:	4b0c      	ldr	r3, [pc, #48]	; (800ec10 <record_data+0x7c>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4a0e      	ldr	r2, [pc, #56]	; (800ec1c <record_data+0x88>)
 800ebe2:	6013      	str	r3, [r2, #0]
	}
	record_time++;
 800ebe4:	4b0a      	ldr	r3, [pc, #40]	; (800ec10 <record_data+0x7c>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	3301      	adds	r3, #1
 800ebea:	4a09      	ldr	r2, [pc, #36]	; (800ec10 <record_data+0x7c>)
 800ebec:	6013      	str	r3, [r2, #0]
	if (record_time >= max_record_time) {
 800ebee:	4b08      	ldr	r3, [pc, #32]	; (800ec10 <record_data+0x7c>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	dd05      	ble.n	800ec06 <record_data+0x72>
		record_time = 0;
 800ebfa:	4b05      	ldr	r3, [pc, #20]	; (800ec10 <record_data+0x7c>)
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	601a      	str	r2, [r3, #0]
		record_rupe_flag = 1;
 800ec00:	4b05      	ldr	r3, [pc, #20]	; (800ec18 <record_data+0x84>)
 800ec02:	2201      	movs	r2, #1
 800ec04:	701a      	strb	r2, [r3, #0]
	}

}
 800ec06:	bf00      	nop
 800ec08:	3710      	adds	r7, #16
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bc90      	pop	{r4, r7}
 800ec0e:	4770      	bx	lr
 800ec10:	2000c38c 	.word	0x2000c38c
 800ec14:	20000808 	.word	0x20000808
 800ec18:	2000c394 	.word	0x2000c394
 800ec1c:	2000c390 	.word	0x2000c390

0800ec20 <record_print>:

void record_print(void) {
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b084      	sub	sp, #16
 800ec24:	af00      	add	r7, sp, #0
	int a, time_index;
	if (record_rupe_flag == 0) {
 800ec26:	4b3a      	ldr	r3, [pc, #232]	; (800ed10 <record_print+0xf0>)
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d12e      	bne.n	800ec8c <record_print+0x6c>
		for (a = 0; a <= record_time - 1; a++) {
 800ec2e:	2300      	movs	r3, #0
 800ec30:	60fb      	str	r3, [r7, #12]
 800ec32:	e025      	b.n	800ec80 <record_print+0x60>

			printf("%d", a);
 800ec34:	68f9      	ldr	r1, [r7, #12]
 800ec36:	4837      	ldr	r0, [pc, #220]	; (800ed14 <record_print+0xf4>)
 800ec38:	f009 f90e 	bl	8017e58 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	607b      	str	r3, [r7, #4]
 800ec40:	e015      	b.n	800ec6e <record_print+0x4e>
					record_count++) {
				printf(",%f", record_value[record_count][a]);
 800ec42:	4935      	ldr	r1, [pc, #212]	; (800ed18 <record_print+0xf8>)
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800ec4a:	fb03 f202 	mul.w	r2, r3, r2
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	4413      	add	r3, r2
 800ec52:	009b      	lsls	r3, r3, #2
 800ec54:	440b      	add	r3, r1
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f7f1 fc9d 	bl	8000598 <__aeabi_f2d>
 800ec5e:	4602      	mov	r2, r0
 800ec60:	460b      	mov	r3, r1
 800ec62:	482e      	ldr	r0, [pc, #184]	; (800ed1c <record_print+0xfc>)
 800ec64:	f009 f8f8 	bl	8017e58 <iprintf>
					record_count++) {
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	3301      	adds	r3, #1
 800ec6c:	607b      	str	r3, [r7, #4]
			for (int record_count = 0; record_count < max_record_num;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2b03      	cmp	r3, #3
 800ec72:	dde6      	ble.n	800ec42 <record_print+0x22>
			}
			printf("\n");
 800ec74:	200a      	movs	r0, #10
 800ec76:	f009 f907 	bl	8017e88 <putchar>
		for (a = 0; a <= record_time - 1; a++) {
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	60fb      	str	r3, [r7, #12]
 800ec80:	4b27      	ldr	r3, [pc, #156]	; (800ed20 <record_print+0x100>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	68fa      	ldr	r2, [r7, #12]
 800ec86:	429a      	cmp	r2, r3
 800ec88:	dbd4      	blt.n	800ec34 <record_print+0x14>
			}
			printf("\n");
		}
	}

}
 800ec8a:	e03c      	b.n	800ed06 <record_print+0xe6>
		for (a = 0; a <= max_record_time - 1; a++) {
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	60fb      	str	r3, [r7, #12]
 800ec90:	e034      	b.n	800ecfc <record_print+0xdc>
			time_index = record_end_point + 1 + a;
 800ec92:	4b24      	ldr	r3, [pc, #144]	; (800ed24 <record_print+0x104>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	3301      	adds	r3, #1
 800ec98:	68fa      	ldr	r2, [r7, #12]
 800ec9a:	4413      	add	r3, r2
 800ec9c:	60bb      	str	r3, [r7, #8]
			if (time_index >= max_record_time) {
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800eca4:	4293      	cmp	r3, r2
 800eca6:	dd03      	ble.n	800ecb0 <record_print+0x90>
				time_index -= max_record_time;
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 800ecae:	60bb      	str	r3, [r7, #8]
			printf("%d", a);
 800ecb0:	68f9      	ldr	r1, [r7, #12]
 800ecb2:	4818      	ldr	r0, [pc, #96]	; (800ed14 <record_print+0xf4>)
 800ecb4:	f009 f8d0 	bl	8017e58 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	603b      	str	r3, [r7, #0]
 800ecbc:	e015      	b.n	800ecea <record_print+0xca>
				printf(",%f", record_value[record_count][time_index]);
 800ecbe:	4916      	ldr	r1, [pc, #88]	; (800ed18 <record_print+0xf8>)
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800ecc6:	fb03 f202 	mul.w	r2, r3, r2
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	4413      	add	r3, r2
 800ecce:	009b      	lsls	r3, r3, #2
 800ecd0:	440b      	add	r3, r1
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7f1 fc5f 	bl	8000598 <__aeabi_f2d>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	460b      	mov	r3, r1
 800ecde:	480f      	ldr	r0, [pc, #60]	; (800ed1c <record_print+0xfc>)
 800ece0:	f009 f8ba 	bl	8017e58 <iprintf>
					record_count++) {
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	3301      	adds	r3, #1
 800ece8:	603b      	str	r3, [r7, #0]
			for (int record_count = 0; record_count < max_record_num;
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	2b03      	cmp	r3, #3
 800ecee:	dde6      	ble.n	800ecbe <record_print+0x9e>
			printf("\n");
 800ecf0:	200a      	movs	r0, #10
 800ecf2:	f009 f8c9 	bl	8017e88 <putchar>
		for (a = 0; a <= max_record_time - 1; a++) {
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	60fb      	str	r3, [r7, #12]
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800ed02:	4293      	cmp	r3, r2
 800ed04:	ddc5      	ble.n	800ec92 <record_print+0x72>
}
 800ed06:	bf00      	nop
 800ed08:	3710      	adds	r7, #16
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}
 800ed0e:	bf00      	nop
 800ed10:	2000c394 	.word	0x2000c394
 800ed14:	0801a5fc 	.word	0x0801a5fc
 800ed18:	20000808 	.word	0x20000808
 800ed1c:	0801a600 	.word	0x0801a600
 800ed20:	2000c38c 	.word	0x2000c38c
 800ed24:	2000c390 	.word	0x2000c390

0800ed28 <interrupt_record>:

void interrupt_record(void) {
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b084      	sub	sp, #16
 800ed2c:	af00      	add	r7, sp, #0

	float r_data[4];

	if (record_mode == 1) {
 800ed2e:	4b76      	ldr	r3, [pc, #472]	; (800ef08 <interrupt_record+0x1e0>)
 800ed30:	781b      	ldrb	r3, [r3, #0]
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	d110      	bne.n	800ed58 <interrupt_record+0x30>
			r_data[0] = E_speedR;
 800ed36:	4b75      	ldr	r3, [pc, #468]	; (800ef0c <interrupt_record+0x1e4>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	603b      	str	r3, [r7, #0]
			r_data[1] = E_speedL;
 800ed3c:	4b74      	ldr	r3, [pc, #464]	; (800ef10 <interrupt_record+0x1e8>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceR;
 800ed42:	4b74      	ldr	r3, [pc, #464]	; (800ef14 <interrupt_record+0x1ec>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	60bb      	str	r3, [r7, #8]
			r_data[3] = E_distanceL;
 800ed48:	4b73      	ldr	r3, [pc, #460]	; (800ef18 <interrupt_record+0x1f0>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 800ed4e:	463b      	mov	r3, r7
 800ed50:	2104      	movs	r1, #4
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7ff ff1e 	bl	800eb94 <record_data>
		}
	if (record_mode == 2) {
 800ed58:	4b6b      	ldr	r3, [pc, #428]	; (800ef08 <interrupt_record+0x1e0>)
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	2b02      	cmp	r3, #2
 800ed5e:	d110      	bne.n	800ed82 <interrupt_record+0x5a>
		r_data[0] = turning.velocity;
 800ed60:	4b6e      	ldr	r3, [pc, #440]	; (800ef1c <interrupt_record+0x1f4>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	603b      	str	r3, [r7, #0]
		r_data[1] = turning.acceleration;
 800ed66:	4b6d      	ldr	r3, [pc, #436]	; (800ef1c <interrupt_record+0x1f4>)
 800ed68:	685b      	ldr	r3, [r3, #4]
 800ed6a:	607b      	str	r3, [r7, #4]
		r_data[2] = angle_speed;
 800ed6c:	4b6c      	ldr	r3, [pc, #432]	; (800ef20 <interrupt_record+0x1f8>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	60bb      	str	r3, [r7, #8]
		r_data[3] = angle; //g_V_R;
 800ed72:	4b6c      	ldr	r3, [pc, #432]	; (800ef24 <interrupt_record+0x1fc>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 800ed78:	463b      	mov	r3, r7
 800ed7a:	2104      	movs	r1, #4
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7ff ff09 	bl	800eb94 <record_data>
		}
	if (record_mode == 3) {
 800ed82:	4b61      	ldr	r3, [pc, #388]	; (800ef08 <interrupt_record+0x1e0>)
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	2b03      	cmp	r3, #3
 800ed88:	d126      	bne.n	800edd8 <interrupt_record+0xb0>
			r_data[0] = straight.velocity;
 800ed8a:	4b67      	ldr	r3, [pc, #412]	; (800ef28 <interrupt_record+0x200>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	603b      	str	r3, [r7, #0]
			r_data[1] = straight.displacement;
 800ed90:	4b65      	ldr	r3, [pc, #404]	; (800ef28 <interrupt_record+0x200>)
 800ed92:	689b      	ldr	r3, [r3, #8]
 800ed94:	607b      	str	r3, [r7, #4]
			r_data[2] = (fusion_speedR + fusion_speedL) / 2;
 800ed96:	4b65      	ldr	r3, [pc, #404]	; (800ef2c <interrupt_record+0x204>)
 800ed98:	ed93 7a00 	vldr	s14, [r3]
 800ed9c:	4b64      	ldr	r3, [pc, #400]	; (800ef30 <interrupt_record+0x208>)
 800ed9e:	edd3 7a00 	vldr	s15, [r3]
 800eda2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eda6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800edaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800edae:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 800edb2:	4b60      	ldr	r3, [pc, #384]	; (800ef34 <interrupt_record+0x20c>)
 800edb4:	ed93 7a00 	vldr	s14, [r3]
 800edb8:	4b5f      	ldr	r3, [pc, #380]	; (800ef38 <interrupt_record+0x210>)
 800edba:	edd3 7a00 	vldr	s15, [r3]
 800edbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800edc2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800edc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800edca:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 800edce:	463b      	mov	r3, r7
 800edd0:	2104      	movs	r1, #4
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7ff fede 	bl	800eb94 <record_data>
		}
	if (record_mode == 4) { //距離の比較
 800edd8:	4b4b      	ldr	r3, [pc, #300]	; (800ef08 <interrupt_record+0x1e0>)
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	2b04      	cmp	r3, #4
 800edde:	d126      	bne.n	800ee2e <interrupt_record+0x106>
			r_data[0] = straight.displacement;
 800ede0:	4b51      	ldr	r3, [pc, #324]	; (800ef28 <interrupt_record+0x200>)
 800ede2:	689b      	ldr	r3, [r3, #8]
 800ede4:	603b      	str	r3, [r7, #0]
			r_data[1] = (E_distanceR + E_distanceL) / 2;
 800ede6:	4b4b      	ldr	r3, [pc, #300]	; (800ef14 <interrupt_record+0x1ec>)
 800ede8:	ed93 7a00 	vldr	s14, [r3]
 800edec:	4b4a      	ldr	r3, [pc, #296]	; (800ef18 <interrupt_record+0x1f0>)
 800edee:	edd3 7a00 	vldr	s15, [r3]
 800edf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800edf6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800edfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800edfe:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = gf_distance;
 800ee02:	4b4e      	ldr	r3, [pc, #312]	; (800ef3c <interrupt_record+0x214>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	60bb      	str	r3, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 800ee08:	4b4a      	ldr	r3, [pc, #296]	; (800ef34 <interrupt_record+0x20c>)
 800ee0a:	ed93 7a00 	vldr	s14, [r3]
 800ee0e:	4b4a      	ldr	r3, [pc, #296]	; (800ef38 <interrupt_record+0x210>)
 800ee10:	edd3 7a00 	vldr	s15, [r3]
 800ee14:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ee18:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ee1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ee20:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 800ee24:	463b      	mov	r3, r7
 800ee26:	2104      	movs	r1, #4
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f7ff feb3 	bl	800eb94 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 800ee2e:	4b36      	ldr	r3, [pc, #216]	; (800ef08 <interrupt_record+0x1e0>)
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	2b05      	cmp	r3, #5
 800ee34:	d110      	bne.n	800ee58 <interrupt_record+0x130>
			r_data[0] = straight.displacement;
 800ee36:	4b3c      	ldr	r3, [pc, #240]	; (800ef28 <interrupt_record+0x200>)
 800ee38:	689b      	ldr	r3, [r3, #8]
 800ee3a:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 800ee3c:	4b35      	ldr	r3, [pc, #212]	; (800ef14 <interrupt_record+0x1ec>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 800ee42:	4b35      	ldr	r3, [pc, #212]	; (800ef18 <interrupt_record+0x1f0>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 800ee48:	4b3c      	ldr	r3, [pc, #240]	; (800ef3c <interrupt_record+0x214>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 800ee4e:	463b      	mov	r3, r7
 800ee50:	2104      	movs	r1, #4
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7ff fe9e 	bl	800eb94 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 800ee58:	4b2b      	ldr	r3, [pc, #172]	; (800ef08 <interrupt_record+0x1e0>)
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	2b05      	cmp	r3, #5
 800ee5e:	d110      	bne.n	800ee82 <interrupt_record+0x15a>
			r_data[0] = g_V_L;
 800ee60:	4b37      	ldr	r3, [pc, #220]	; (800ef40 <interrupt_record+0x218>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 800ee66:	4b2b      	ldr	r3, [pc, #172]	; (800ef14 <interrupt_record+0x1ec>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 800ee6c:	4b2a      	ldr	r3, [pc, #168]	; (800ef18 <interrupt_record+0x1f0>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 800ee72:	4b32      	ldr	r3, [pc, #200]	; (800ef3c <interrupt_record+0x214>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 800ee78:	463b      	mov	r3, r7
 800ee7a:	2104      	movs	r1, #4
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7ff fe89 	bl	800eb94 <record_data>
		}
	if (record_mode == 6) { //距離の比較
 800ee82:	4b21      	ldr	r3, [pc, #132]	; (800ef08 <interrupt_record+0x1e0>)
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	2b06      	cmp	r3, #6
 800ee88:	d110      	bne.n	800eeac <interrupt_record+0x184>
				r_data[0] = straight.velocity;
 800ee8a:	4b27      	ldr	r3, [pc, #156]	; (800ef28 <interrupt_record+0x200>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	603b      	str	r3, [r7, #0]
				r_data[1] = E_lpf_speedL;
 800ee90:	4b2c      	ldr	r3, [pc, #176]	; (800ef44 <interrupt_record+0x21c>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	607b      	str	r3, [r7, #4]
				r_data[2] = E_lpf_speedR;
 800ee96:	4b2c      	ldr	r3, [pc, #176]	; (800ef48 <interrupt_record+0x220>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_speed;
 800ee9c:	4b2b      	ldr	r3, [pc, #172]	; (800ef4c <interrupt_record+0x224>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 800eea2:	463b      	mov	r3, r7
 800eea4:	2104      	movs	r1, #4
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7ff fe74 	bl	800eb94 <record_data>
			}
	if (record_mode == 7) {
 800eeac:	4b16      	ldr	r3, [pc, #88]	; (800ef08 <interrupt_record+0x1e0>)
 800eeae:	781b      	ldrb	r3, [r3, #0]
 800eeb0:	2b07      	cmp	r3, #7
 800eeb2:	d125      	bne.n	800ef00 <interrupt_record+0x1d8>
			r_data[0] = (float) g_sensor[0][0];
 800eeb4:	4b26      	ldr	r3, [pc, #152]	; (800ef50 <interrupt_record+0x228>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	ee07 3a90 	vmov	s15, r3
 800eebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eec0:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff[0];
 800eec4:	4b23      	ldr	r3, [pc, #140]	; (800ef54 <interrupt_record+0x22c>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	ee07 3a90 	vmov	s15, r3
 800eecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eed0:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[4][0];
 800eed4:	4b1e      	ldr	r3, [pc, #120]	; (800ef50 <interrupt_record+0x228>)
 800eed6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800eeda:	ee07 3a90 	vmov	s15, r3
 800eede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eee2:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff[4];
 800eee6:	4b1b      	ldr	r3, [pc, #108]	; (800ef54 <interrupt_record+0x22c>)
 800eee8:	691b      	ldr	r3, [r3, #16]
 800eeea:	ee07 3a90 	vmov	s15, r3
 800eeee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eef2:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 800eef6:	463b      	mov	r3, r7
 800eef8:	2104      	movs	r1, #4
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7ff fe4a 	bl	800eb94 <record_data>
		r_data[3] = g_V_L;
		record_data(r_data, 4);
	}
*/

}
 800ef00:	bf00      	nop
 800ef02:	3710      	adds	r7, #16
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}
 800ef08:	2000c388 	.word	0x2000c388
 800ef0c:	2000020c 	.word	0x2000020c
 800ef10:	20000208 	.word	0x20000208
 800ef14:	20000204 	.word	0x20000204
 800ef18:	20000200 	.word	0x20000200
 800ef1c:	200004c4 	.word	0x200004c4
 800ef20:	20000248 	.word	0x20000248
 800ef24:	20000244 	.word	0x20000244
 800ef28:	200004b8 	.word	0x200004b8
 800ef2c:	2000023c 	.word	0x2000023c
 800ef30:	20000238 	.word	0x20000238
 800ef34:	20000234 	.word	0x20000234
 800ef38:	20000230 	.word	0x20000230
 800ef3c:	2000025c 	.word	0x2000025c
 800ef40:	2000050c 	.word	0x2000050c
 800ef44:	20000218 	.word	0x20000218
 800ef48:	2000021c 	.word	0x2000021c
 800ef4c:	20000258 	.word	0x20000258
 800ef50:	20000298 	.word	0x20000298
 800ef54:	20000428 	.word	0x20000428

0800ef58 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800ef5c:	4b1b      	ldr	r3, [pc, #108]	; (800efcc <MX_SPI1_Init+0x74>)
 800ef5e:	4a1c      	ldr	r2, [pc, #112]	; (800efd0 <MX_SPI1_Init+0x78>)
 800ef60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800ef62:	4b1a      	ldr	r3, [pc, #104]	; (800efcc <MX_SPI1_Init+0x74>)
 800ef64:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ef68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800ef6a:	4b18      	ldr	r3, [pc, #96]	; (800efcc <MX_SPI1_Init+0x74>)
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800ef70:	4b16      	ldr	r3, [pc, #88]	; (800efcc <MX_SPI1_Init+0x74>)
 800ef72:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800ef76:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ef78:	4b14      	ldr	r3, [pc, #80]	; (800efcc <MX_SPI1_Init+0x74>)
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ef7e:	4b13      	ldr	r3, [pc, #76]	; (800efcc <MX_SPI1_Init+0x74>)
 800ef80:	2200      	movs	r2, #0
 800ef82:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800ef84:	4b11      	ldr	r3, [pc, #68]	; (800efcc <MX_SPI1_Init+0x74>)
 800ef86:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef8a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800ef8c:	4b0f      	ldr	r3, [pc, #60]	; (800efcc <MX_SPI1_Init+0x74>)
 800ef8e:	2218      	movs	r2, #24
 800ef90:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ef92:	4b0e      	ldr	r3, [pc, #56]	; (800efcc <MX_SPI1_Init+0x74>)
 800ef94:	2200      	movs	r2, #0
 800ef96:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ef98:	4b0c      	ldr	r3, [pc, #48]	; (800efcc <MX_SPI1_Init+0x74>)
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ef9e:	4b0b      	ldr	r3, [pc, #44]	; (800efcc <MX_SPI1_Init+0x74>)
 800efa0:	2200      	movs	r2, #0
 800efa2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800efa4:	4b09      	ldr	r3, [pc, #36]	; (800efcc <MX_SPI1_Init+0x74>)
 800efa6:	2207      	movs	r2, #7
 800efa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800efaa:	4b08      	ldr	r3, [pc, #32]	; (800efcc <MX_SPI1_Init+0x74>)
 800efac:	2200      	movs	r2, #0
 800efae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800efb0:	4b06      	ldr	r3, [pc, #24]	; (800efcc <MX_SPI1_Init+0x74>)
 800efb2:	2208      	movs	r2, #8
 800efb4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800efb6:	4805      	ldr	r0, [pc, #20]	; (800efcc <MX_SPI1_Init+0x74>)
 800efb8:	f005 f9f0 	bl	801439c <HAL_SPI_Init>
 800efbc:	4603      	mov	r3, r0
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d001      	beq.n	800efc6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800efc2:	f7fa fec2 	bl	8009d4a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800efc6:	bf00      	nop
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	bf00      	nop
 800efcc:	2000c398 	.word	0x2000c398
 800efd0:	40013000 	.word	0x40013000

0800efd4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800efd8:	4b1b      	ldr	r3, [pc, #108]	; (800f048 <MX_SPI3_Init+0x74>)
 800efda:	4a1c      	ldr	r2, [pc, #112]	; (800f04c <MX_SPI3_Init+0x78>)
 800efdc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800efde:	4b1a      	ldr	r3, [pc, #104]	; (800f048 <MX_SPI3_Init+0x74>)
 800efe0:	f44f 7282 	mov.w	r2, #260	; 0x104
 800efe4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800efe6:	4b18      	ldr	r3, [pc, #96]	; (800f048 <MX_SPI3_Init+0x74>)
 800efe8:	2200      	movs	r2, #0
 800efea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800efec:	4b16      	ldr	r3, [pc, #88]	; (800f048 <MX_SPI3_Init+0x74>)
 800efee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800eff2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800eff4:	4b14      	ldr	r3, [pc, #80]	; (800f048 <MX_SPI3_Init+0x74>)
 800eff6:	2200      	movs	r2, #0
 800eff8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800effa:	4b13      	ldr	r3, [pc, #76]	; (800f048 <MX_SPI3_Init+0x74>)
 800effc:	2201      	movs	r2, #1
 800effe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800f000:	4b11      	ldr	r3, [pc, #68]	; (800f048 <MX_SPI3_Init+0x74>)
 800f002:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f006:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800f008:	4b0f      	ldr	r3, [pc, #60]	; (800f048 <MX_SPI3_Init+0x74>)
 800f00a:	2218      	movs	r2, #24
 800f00c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800f00e:	4b0e      	ldr	r3, [pc, #56]	; (800f048 <MX_SPI3_Init+0x74>)
 800f010:	2200      	movs	r2, #0
 800f012:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800f014:	4b0c      	ldr	r3, [pc, #48]	; (800f048 <MX_SPI3_Init+0x74>)
 800f016:	2200      	movs	r2, #0
 800f018:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f01a:	4b0b      	ldr	r3, [pc, #44]	; (800f048 <MX_SPI3_Init+0x74>)
 800f01c:	2200      	movs	r2, #0
 800f01e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800f020:	4b09      	ldr	r3, [pc, #36]	; (800f048 <MX_SPI3_Init+0x74>)
 800f022:	2207      	movs	r2, #7
 800f024:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800f026:	4b08      	ldr	r3, [pc, #32]	; (800f048 <MX_SPI3_Init+0x74>)
 800f028:	2200      	movs	r2, #0
 800f02a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800f02c:	4b06      	ldr	r3, [pc, #24]	; (800f048 <MX_SPI3_Init+0x74>)
 800f02e:	2200      	movs	r2, #0
 800f030:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800f032:	4805      	ldr	r0, [pc, #20]	; (800f048 <MX_SPI3_Init+0x74>)
 800f034:	f005 f9b2 	bl	801439c <HAL_SPI_Init>
 800f038:	4603      	mov	r3, r0
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d001      	beq.n	800f042 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800f03e:	f7fa fe84 	bl	8009d4a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800f042:	bf00      	nop
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	2000c3fc 	.word	0x2000c3fc
 800f04c:	40003c00 	.word	0x40003c00

0800f050 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b08c      	sub	sp, #48	; 0x30
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f058:	f107 031c 	add.w	r3, r7, #28
 800f05c:	2200      	movs	r2, #0
 800f05e:	601a      	str	r2, [r3, #0]
 800f060:	605a      	str	r2, [r3, #4]
 800f062:	609a      	str	r2, [r3, #8]
 800f064:	60da      	str	r2, [r3, #12]
 800f066:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4a3d      	ldr	r2, [pc, #244]	; (800f164 <HAL_SPI_MspInit+0x114>)
 800f06e:	4293      	cmp	r3, r2
 800f070:	d129      	bne.n	800f0c6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800f072:	4b3d      	ldr	r3, [pc, #244]	; (800f168 <HAL_SPI_MspInit+0x118>)
 800f074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f076:	4a3c      	ldr	r2, [pc, #240]	; (800f168 <HAL_SPI_MspInit+0x118>)
 800f078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f07c:	6613      	str	r3, [r2, #96]	; 0x60
 800f07e:	4b3a      	ldr	r3, [pc, #232]	; (800f168 <HAL_SPI_MspInit+0x118>)
 800f080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f086:	61bb      	str	r3, [r7, #24]
 800f088:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f08a:	4b37      	ldr	r3, [pc, #220]	; (800f168 <HAL_SPI_MspInit+0x118>)
 800f08c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f08e:	4a36      	ldr	r2, [pc, #216]	; (800f168 <HAL_SPI_MspInit+0x118>)
 800f090:	f043 0301 	orr.w	r3, r3, #1
 800f094:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f096:	4b34      	ldr	r3, [pc, #208]	; (800f168 <HAL_SPI_MspInit+0x118>)
 800f098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f09a:	f003 0301 	and.w	r3, r3, #1
 800f09e:	617b      	str	r3, [r7, #20]
 800f0a0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800f0a2:	23e0      	movs	r3, #224	; 0xe0
 800f0a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0a6:	2302      	movs	r3, #2
 800f0a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800f0b2:	2305      	movs	r3, #5
 800f0b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f0b6:	f107 031c 	add.w	r3, r7, #28
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f0c0:	f003 ffb2 	bl	8013028 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800f0c4:	e049      	b.n	800f15a <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	4a28      	ldr	r2, [pc, #160]	; (800f16c <HAL_SPI_MspInit+0x11c>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d144      	bne.n	800f15a <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800f0d0:	4b25      	ldr	r3, [pc, #148]	; (800f168 <HAL_SPI_MspInit+0x118>)
 800f0d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0d4:	4a24      	ldr	r2, [pc, #144]	; (800f168 <HAL_SPI_MspInit+0x118>)
 800f0d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f0da:	6593      	str	r3, [r2, #88]	; 0x58
 800f0dc:	4b22      	ldr	r3, [pc, #136]	; (800f168 <HAL_SPI_MspInit+0x118>)
 800f0de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f0e4:	613b      	str	r3, [r7, #16]
 800f0e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f0e8:	4b1f      	ldr	r3, [pc, #124]	; (800f168 <HAL_SPI_MspInit+0x118>)
 800f0ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0ec:	4a1e      	ldr	r2, [pc, #120]	; (800f168 <HAL_SPI_MspInit+0x118>)
 800f0ee:	f043 0304 	orr.w	r3, r3, #4
 800f0f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f0f4:	4b1c      	ldr	r3, [pc, #112]	; (800f168 <HAL_SPI_MspInit+0x118>)
 800f0f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0f8:	f003 0304 	and.w	r3, r3, #4
 800f0fc:	60fb      	str	r3, [r7, #12]
 800f0fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f100:	4b19      	ldr	r3, [pc, #100]	; (800f168 <HAL_SPI_MspInit+0x118>)
 800f102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f104:	4a18      	ldr	r2, [pc, #96]	; (800f168 <HAL_SPI_MspInit+0x118>)
 800f106:	f043 0302 	orr.w	r3, r3, #2
 800f10a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f10c:	4b16      	ldr	r3, [pc, #88]	; (800f168 <HAL_SPI_MspInit+0x118>)
 800f10e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f110:	f003 0302 	and.w	r3, r3, #2
 800f114:	60bb      	str	r3, [r7, #8]
 800f116:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800f118:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f11c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f11e:	2302      	movs	r3, #2
 800f120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f122:	2300      	movs	r3, #0
 800f124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f126:	2300      	movs	r3, #0
 800f128:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800f12a:	2306      	movs	r3, #6
 800f12c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f12e:	f107 031c 	add.w	r3, r7, #28
 800f132:	4619      	mov	r1, r3
 800f134:	480e      	ldr	r0, [pc, #56]	; (800f170 <HAL_SPI_MspInit+0x120>)
 800f136:	f003 ff77 	bl	8013028 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800f13a:	2320      	movs	r3, #32
 800f13c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f13e:	2302      	movs	r3, #2
 800f140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f142:	2300      	movs	r3, #0
 800f144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f146:	2300      	movs	r3, #0
 800f148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800f14a:	2306      	movs	r3, #6
 800f14c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f14e:	f107 031c 	add.w	r3, r7, #28
 800f152:	4619      	mov	r1, r3
 800f154:	4807      	ldr	r0, [pc, #28]	; (800f174 <HAL_SPI_MspInit+0x124>)
 800f156:	f003 ff67 	bl	8013028 <HAL_GPIO_Init>
}
 800f15a:	bf00      	nop
 800f15c:	3730      	adds	r7, #48	; 0x30
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	40013000 	.word	0x40013000
 800f168:	40021000 	.word	0x40021000
 800f16c:	40003c00 	.word	0x40003c00
 800f170:	48000800 	.word	0x48000800
 800f174:	48000400 	.word	0x48000400

0800f178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b082      	sub	sp, #8
 800f17c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f17e:	4b0f      	ldr	r3, [pc, #60]	; (800f1bc <HAL_MspInit+0x44>)
 800f180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f182:	4a0e      	ldr	r2, [pc, #56]	; (800f1bc <HAL_MspInit+0x44>)
 800f184:	f043 0301 	orr.w	r3, r3, #1
 800f188:	6613      	str	r3, [r2, #96]	; 0x60
 800f18a:	4b0c      	ldr	r3, [pc, #48]	; (800f1bc <HAL_MspInit+0x44>)
 800f18c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f18e:	f003 0301 	and.w	r3, r3, #1
 800f192:	607b      	str	r3, [r7, #4]
 800f194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800f196:	4b09      	ldr	r3, [pc, #36]	; (800f1bc <HAL_MspInit+0x44>)
 800f198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f19a:	4a08      	ldr	r2, [pc, #32]	; (800f1bc <HAL_MspInit+0x44>)
 800f19c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f1a0:	6593      	str	r3, [r2, #88]	; 0x58
 800f1a2:	4b06      	ldr	r3, [pc, #24]	; (800f1bc <HAL_MspInit+0x44>)
 800f1a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1aa:	603b      	str	r3, [r7, #0]
 800f1ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800f1ae:	f004 f979 	bl	80134a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f1b2:	bf00      	nop
 800f1b4:	3708      	adds	r7, #8
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}
 800f1ba:	bf00      	nop
 800f1bc:	40021000 	.word	0x40021000

0800f1c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800f1c4:	e7fe      	b.n	800f1c4 <NMI_Handler+0x4>

0800f1c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f1c6:	b480      	push	{r7}
 800f1c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */

	while (1)
 800f1ca:	e7fe      	b.n	800f1ca <HardFault_Handler+0x4>

0800f1cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f1d0:	e7fe      	b.n	800f1d0 <MemManage_Handler+0x4>

0800f1d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f1d2:	b480      	push	{r7}
 800f1d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f1d6:	e7fe      	b.n	800f1d6 <BusFault_Handler+0x4>

0800f1d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f1dc:	e7fe      	b.n	800f1dc <UsageFault_Handler+0x4>

0800f1de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800f1de:	b480      	push	{r7}
 800f1e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800f1e2:	bf00      	nop
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ea:	4770      	bx	lr

0800f1ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f1f0:	bf00      	nop
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr

0800f1fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800f1fa:	b480      	push	{r7}
 800f1fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800f1fe:	bf00      	nop
 800f200:	46bd      	mov	sp, r7
 800f202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f206:	4770      	bx	lr

0800f208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800f20c:	f001 f91c 	bl	8010448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800f210:	bf00      	nop
 800f212:	bd80      	pop	{r7, pc}

0800f214 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800f218:	4802      	ldr	r0, [pc, #8]	; (800f224 <DMA1_Channel1_IRQHandler+0x10>)
 800f21a:	f003 fdb5 	bl	8012d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800f21e:	bf00      	nop
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	20000780 	.word	0x20000780

0800f228 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800f22c:	4802      	ldr	r0, [pc, #8]	; (800f238 <ADC1_2_IRQHandler+0x10>)
 800f22e:	f002 f8bb 	bl	80113a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
//  pl_callback_getSensor();
  /* USER CODE END ADC1_2_IRQn 1 */
}
 800f232:	bf00      	nop
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop
 800f238:	20000714 	.word	0x20000714

0800f23c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800f240:	480d      	ldr	r0, [pc, #52]	; (800f278 <TIM6_DAC_IRQHandler+0x3c>)
 800f242:	f006 fa8b 	bl	801575c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_timer();
 800f246:	f7f8 fdb3 	bl	8007db0 <interrupt_timer>
  interupt_calSensor();
 800f24a:	f7f2 fd5f 	bl	8001d0c <interupt_calSensor>
  ICM20602_DataUpdate();
 800f24e:	f7f8 fab9 	bl	80077c4 <ICM20602_DataUpdate>
  interrupt_calGyro();
 800f252:	f7f2 fb69 	bl	8001928 <interrupt_calGyro>
  AS5047_DataUpdate();
 800f256:	f7f8 f981 	bl	800755c <AS5047_DataUpdate>
  interupt_calEncoder();
 800f25a:	f7f1 ff05 	bl	8001068 <interupt_calEncoder>
  interupt_calFusion();
 800f25e:	f7f2 f8c3 	bl	80013e8 <interupt_calFusion>
  interrupt_WallCut();
 800f262:	f7f7 f911 	bl	8006488 <interrupt_WallCut>
  interupt_DriveMotor();
 800f266:	f7f2 fedb 	bl	8002020 <interupt_DriveMotor>

  interrupt_FailSafe();
 800f26a:	f7fa fac3 	bl	80097f4 <interrupt_FailSafe>
  interrupt_record();
 800f26e:	f7ff fd5b 	bl	800ed28 <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800f272:	bf00      	nop
 800f274:	bd80      	pop	{r7, pc}
 800f276:	bf00      	nop
 800f278:	2000c464 	.word	0x2000c464

0800f27c <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 800f27c:	b480      	push	{r7}
 800f27e:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 800f280:	bf00      	nop
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr

0800f28a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800f28a:	b480      	push	{r7}
 800f28c:	af00      	add	r7, sp, #0
	return 1;
 800f28e:	2301      	movs	r3, #1
}
 800f290:	4618      	mov	r0, r3
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr

0800f29a <_kill>:

int _kill(int pid, int sig)
{
 800f29a:	b580      	push	{r7, lr}
 800f29c:	b082      	sub	sp, #8
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	6078      	str	r0, [r7, #4]
 800f2a2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800f2a4:	f008 f92e 	bl	8017504 <__errno>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	2216      	movs	r2, #22
 800f2ac:	601a      	str	r2, [r3, #0]
	return -1;
 800f2ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3708      	adds	r7, #8
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}

0800f2ba <_exit>:

void _exit (int status)
{
 800f2ba:	b580      	push	{r7, lr}
 800f2bc:	b082      	sub	sp, #8
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800f2c2:	f04f 31ff 	mov.w	r1, #4294967295
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f7ff ffe7 	bl	800f29a <_kill>
	while (1) {}		/* Make sure we hang here */
 800f2cc:	e7fe      	b.n	800f2cc <_exit+0x12>

0800f2ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800f2ce:	b580      	push	{r7, lr}
 800f2d0:	b086      	sub	sp, #24
 800f2d2:	af00      	add	r7, sp, #0
 800f2d4:	60f8      	str	r0, [r7, #12]
 800f2d6:	60b9      	str	r1, [r7, #8]
 800f2d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f2da:	2300      	movs	r3, #0
 800f2dc:	617b      	str	r3, [r7, #20]
 800f2de:	e00a      	b.n	800f2f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800f2e0:	f3af 8000 	nop.w
 800f2e4:	4601      	mov	r1, r0
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	1c5a      	adds	r2, r3, #1
 800f2ea:	60ba      	str	r2, [r7, #8]
 800f2ec:	b2ca      	uxtb	r2, r1
 800f2ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	617b      	str	r3, [r7, #20]
 800f2f6:	697a      	ldr	r2, [r7, #20]
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	dbf0      	blt.n	800f2e0 <_read+0x12>
	}

return len;
 800f2fe:	687b      	ldr	r3, [r7, #4]
}
 800f300:	4618      	mov	r0, r3
 800f302:	3718      	adds	r7, #24
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}

0800f308 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b086      	sub	sp, #24
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	60f8      	str	r0, [r7, #12]
 800f310:	60b9      	str	r1, [r7, #8]
 800f312:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f314:	2300      	movs	r3, #0
 800f316:	617b      	str	r3, [r7, #20]
 800f318:	e00a      	b.n	800f330 <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 800f31a:	68b9      	ldr	r1, [r7, #8]
 800f31c:	1c4b      	adds	r3, r1, #1
 800f31e:	60bb      	str	r3, [r7, #8]
 800f320:	2301      	movs	r3, #1
 800f322:	2201      	movs	r2, #1
 800f324:	4807      	ldr	r0, [pc, #28]	; (800f344 <_write+0x3c>)
 800f326:	f007 faa3 	bl	8016870 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	3301      	adds	r3, #1
 800f32e:	617b      	str	r3, [r7, #20]
 800f330:	697a      	ldr	r2, [r7, #20]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	429a      	cmp	r2, r3
 800f336:	dbf0      	blt.n	800f31a <_write+0x12>
	}
	return len;
 800f338:	687b      	ldr	r3, [r7, #4]
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3718      	adds	r7, #24
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
 800f342:	bf00      	nop
 800f344:	2000ca68 	.word	0x2000ca68

0800f348 <_close>:

int _close(int file)
{
 800f348:	b480      	push	{r7}
 800f34a:	b083      	sub	sp, #12
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
	return -1;
 800f350:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f354:	4618      	mov	r0, r3
 800f356:	370c      	adds	r7, #12
 800f358:	46bd      	mov	sp, r7
 800f35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35e:	4770      	bx	lr

0800f360 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800f360:	b480      	push	{r7}
 800f362:	b083      	sub	sp, #12
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f370:	605a      	str	r2, [r3, #4]
	return 0;
 800f372:	2300      	movs	r3, #0
}
 800f374:	4618      	mov	r0, r3
 800f376:	370c      	adds	r7, #12
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr

0800f380 <_isatty>:

int _isatty(int file)
{
 800f380:	b480      	push	{r7}
 800f382:	b083      	sub	sp, #12
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
	return 1;
 800f388:	2301      	movs	r3, #1
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	370c      	adds	r7, #12
 800f38e:	46bd      	mov	sp, r7
 800f390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f394:	4770      	bx	lr

0800f396 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800f396:	b480      	push	{r7}
 800f398:	b085      	sub	sp, #20
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	60f8      	str	r0, [r7, #12]
 800f39e:	60b9      	str	r1, [r7, #8]
 800f3a0:	607a      	str	r2, [r7, #4]
	return 0;
 800f3a2:	2300      	movs	r3, #0
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3714      	adds	r7, #20
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr

0800f3b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b086      	sub	sp, #24
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800f3b8:	4a14      	ldr	r2, [pc, #80]	; (800f40c <_sbrk+0x5c>)
 800f3ba:	4b15      	ldr	r3, [pc, #84]	; (800f410 <_sbrk+0x60>)
 800f3bc:	1ad3      	subs	r3, r2, r3
 800f3be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800f3c4:	4b13      	ldr	r3, [pc, #76]	; (800f414 <_sbrk+0x64>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d102      	bne.n	800f3d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800f3cc:	4b11      	ldr	r3, [pc, #68]	; (800f414 <_sbrk+0x64>)
 800f3ce:	4a12      	ldr	r2, [pc, #72]	; (800f418 <_sbrk+0x68>)
 800f3d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800f3d2:	4b10      	ldr	r3, [pc, #64]	; (800f414 <_sbrk+0x64>)
 800f3d4:	681a      	ldr	r2, [r3, #0]
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	4413      	add	r3, r2
 800f3da:	693a      	ldr	r2, [r7, #16]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d207      	bcs.n	800f3f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800f3e0:	f008 f890 	bl	8017504 <__errno>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	220c      	movs	r2, #12
 800f3e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800f3ea:	f04f 33ff 	mov.w	r3, #4294967295
 800f3ee:	e009      	b.n	800f404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800f3f0:	4b08      	ldr	r3, [pc, #32]	; (800f414 <_sbrk+0x64>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800f3f6:	4b07      	ldr	r3, [pc, #28]	; (800f414 <_sbrk+0x64>)
 800f3f8:	681a      	ldr	r2, [r3, #0]
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	4413      	add	r3, r2
 800f3fe:	4a05      	ldr	r2, [pc, #20]	; (800f414 <_sbrk+0x64>)
 800f400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800f402:	68fb      	ldr	r3, [r7, #12]
}
 800f404:	4618      	mov	r0, r3
 800f406:	3718      	adds	r7, #24
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}
 800f40c:	2001c000 	.word	0x2001c000
 800f410:	00000400 	.word	0x00000400
 800f414:	2000c460 	.word	0x2000c460
 800f418:	2000cb10 	.word	0x2000cb10

0800f41c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800f41c:	b480      	push	{r7}
 800f41e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800f420:	4b06      	ldr	r3, [pc, #24]	; (800f43c <SystemInit+0x20>)
 800f422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f426:	4a05      	ldr	r2, [pc, #20]	; (800f43c <SystemInit+0x20>)
 800f428:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f42c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800f430:	bf00      	nop
 800f432:	46bd      	mov	sp, r7
 800f434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f438:	4770      	bx	lr
 800f43a:	bf00      	nop
 800f43c:	e000ed00 	.word	0xe000ed00

0800f440 <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b084      	sub	sp, #16
 800f444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f446:	1d3b      	adds	r3, r7, #4
 800f448:	2200      	movs	r2, #0
 800f44a:	601a      	str	r2, [r3, #0]
 800f44c:	605a      	str	r2, [r3, #4]
 800f44e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800f450:	4b14      	ldr	r3, [pc, #80]	; (800f4a4 <MX_TIM6_Init+0x64>)
 800f452:	4a15      	ldr	r2, [pc, #84]	; (800f4a8 <MX_TIM6_Init+0x68>)
 800f454:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 85-1;
 800f456:	4b13      	ldr	r3, [pc, #76]	; (800f4a4 <MX_TIM6_Init+0x64>)
 800f458:	2254      	movs	r2, #84	; 0x54
 800f45a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f45c:	4b11      	ldr	r3, [pc, #68]	; (800f4a4 <MX_TIM6_Init+0x64>)
 800f45e:	2200      	movs	r2, #0
 800f460:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800f462:	4b10      	ldr	r3, [pc, #64]	; (800f4a4 <MX_TIM6_Init+0x64>)
 800f464:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f468:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f46a:	4b0e      	ldr	r3, [pc, #56]	; (800f4a4 <MX_TIM6_Init+0x64>)
 800f46c:	2200      	movs	r2, #0
 800f46e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800f470:	480c      	ldr	r0, [pc, #48]	; (800f4a4 <MX_TIM6_Init+0x64>)
 800f472:	f005 feab 	bl	80151cc <HAL_TIM_Base_Init>
 800f476:	4603      	mov	r3, r0
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d001      	beq.n	800f480 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800f47c:	f7fa fc65 	bl	8009d4a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f480:	2300      	movs	r3, #0
 800f482:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f484:	2300      	movs	r3, #0
 800f486:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800f488:	1d3b      	adds	r3, r7, #4
 800f48a:	4619      	mov	r1, r3
 800f48c:	4805      	ldr	r0, [pc, #20]	; (800f4a4 <MX_TIM6_Init+0x64>)
 800f48e:	f007 f819 	bl	80164c4 <HAL_TIMEx_MasterConfigSynchronization>
 800f492:	4603      	mov	r3, r0
 800f494:	2b00      	cmp	r3, #0
 800f496:	d001      	beq.n	800f49c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800f498:	f7fa fc57 	bl	8009d4a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800f49c:	bf00      	nop
 800f49e:	3710      	adds	r7, #16
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}
 800f4a4:	2000c464 	.word	0x2000c464
 800f4a8:	40001000 	.word	0x40001000

0800f4ac <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b098      	sub	sp, #96	; 0x60
 800f4b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f4b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	601a      	str	r2, [r3, #0]
 800f4ba:	605a      	str	r2, [r3, #4]
 800f4bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f4be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	601a      	str	r2, [r3, #0]
 800f4c6:	605a      	str	r2, [r3, #4]
 800f4c8:	609a      	str	r2, [r3, #8]
 800f4ca:	60da      	str	r2, [r3, #12]
 800f4cc:	611a      	str	r2, [r3, #16]
 800f4ce:	615a      	str	r2, [r3, #20]
 800f4d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800f4d2:	1d3b      	adds	r3, r7, #4
 800f4d4:	2234      	movs	r2, #52	; 0x34
 800f4d6:	2100      	movs	r1, #0
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f008 f84b 	bl	8017574 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800f4de:	4b41      	ldr	r3, [pc, #260]	; (800f5e4 <MX_TIM8_Init+0x138>)
 800f4e0:	4a41      	ldr	r2, [pc, #260]	; (800f5e8 <MX_TIM8_Init+0x13c>)
 800f4e2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 800f4e4:	4b3f      	ldr	r3, [pc, #252]	; (800f5e4 <MX_TIM8_Init+0x138>)
 800f4e6:	2201      	movs	r2, #1
 800f4e8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f4ea:	4b3e      	ldr	r3, [pc, #248]	; (800f5e4 <MX_TIM8_Init+0x138>)
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 800f4f0:	4b3c      	ldr	r3, [pc, #240]	; (800f5e4 <MX_TIM8_Init+0x138>)
 800f4f2:	f240 628f 	movw	r2, #1679	; 0x68f
 800f4f6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f4f8:	4b3a      	ldr	r3, [pc, #232]	; (800f5e4 <MX_TIM8_Init+0x138>)
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800f4fe:	4b39      	ldr	r3, [pc, #228]	; (800f5e4 <MX_TIM8_Init+0x138>)
 800f500:	2200      	movs	r2, #0
 800f502:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f504:	4b37      	ldr	r3, [pc, #220]	; (800f5e4 <MX_TIM8_Init+0x138>)
 800f506:	2200      	movs	r2, #0
 800f508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800f50a:	4836      	ldr	r0, [pc, #216]	; (800f5e4 <MX_TIM8_Init+0x138>)
 800f50c:	f005 ff26 	bl	801535c <HAL_TIM_PWM_Init>
 800f510:	4603      	mov	r3, r0
 800f512:	2b00      	cmp	r3, #0
 800f514:	d001      	beq.n	800f51a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800f516:	f7fa fc18 	bl	8009d4a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f51a:	2300      	movs	r3, #0
 800f51c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800f51e:	2300      	movs	r3, #0
 800f520:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f522:	2300      	movs	r3, #0
 800f524:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800f526:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f52a:	4619      	mov	r1, r3
 800f52c:	482d      	ldr	r0, [pc, #180]	; (800f5e4 <MX_TIM8_Init+0x138>)
 800f52e:	f006 ffc9 	bl	80164c4 <HAL_TIMEx_MasterConfigSynchronization>
 800f532:	4603      	mov	r3, r0
 800f534:	2b00      	cmp	r3, #0
 800f536:	d001      	beq.n	800f53c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800f538:	f7fa fc07 	bl	8009d4a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f53c:	2360      	movs	r3, #96	; 0x60
 800f53e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 419;
 800f540:	f240 13a3 	movw	r3, #419	; 0x1a3
 800f544:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f546:	2300      	movs	r3, #0
 800f548:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f54a:	2300      	movs	r3, #0
 800f54c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f54e:	2300      	movs	r3, #0
 800f550:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f552:	2300      	movs	r3, #0
 800f554:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f556:	2300      	movs	r3, #0
 800f558:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f55a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f55e:	2200      	movs	r2, #0
 800f560:	4619      	mov	r1, r3
 800f562:	4820      	ldr	r0, [pc, #128]	; (800f5e4 <MX_TIM8_Init+0x138>)
 800f564:	f006 fa7a 	bl	8015a5c <HAL_TIM_PWM_ConfigChannel>
 800f568:	4603      	mov	r3, r0
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d001      	beq.n	800f572 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 800f56e:	f7fa fbec 	bl	8009d4a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800f572:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f576:	2208      	movs	r2, #8
 800f578:	4619      	mov	r1, r3
 800f57a:	481a      	ldr	r0, [pc, #104]	; (800f5e4 <MX_TIM8_Init+0x138>)
 800f57c:	f006 fa6e 	bl	8015a5c <HAL_TIM_PWM_ConfigChannel>
 800f580:	4603      	mov	r3, r0
 800f582:	2b00      	cmp	r3, #0
 800f584:	d001      	beq.n	800f58a <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 800f586:	f7fa fbe0 	bl	8009d4a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f58a:	2300      	movs	r3, #0
 800f58c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f58e:	2300      	movs	r3, #0
 800f590:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f592:	2300      	movs	r3, #0
 800f594:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800f596:	2300      	movs	r3, #0
 800f598:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f59a:	2300      	movs	r3, #0
 800f59c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f59e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f5a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800f5b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f5b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800f5c2:	1d3b      	adds	r3, r7, #4
 800f5c4:	4619      	mov	r1, r3
 800f5c6:	4807      	ldr	r0, [pc, #28]	; (800f5e4 <MX_TIM8_Init+0x138>)
 800f5c8:	f007 f80a 	bl	80165e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d001      	beq.n	800f5d6 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800f5d2:	f7fa fbba 	bl	8009d4a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800f5d6:	4803      	ldr	r0, [pc, #12]	; (800f5e4 <MX_TIM8_Init+0x138>)
 800f5d8:	f000 f8da 	bl	800f790 <HAL_TIM_MspPostInit>

}
 800f5dc:	bf00      	nop
 800f5de:	3760      	adds	r7, #96	; 0x60
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}
 800f5e4:	2000c4b0 	.word	0x2000c4b0
 800f5e8:	40013400 	.word	0x40013400

0800f5ec <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b094      	sub	sp, #80	; 0x50
 800f5f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800f5f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	601a      	str	r2, [r3, #0]
 800f5fa:	605a      	str	r2, [r3, #4]
 800f5fc:	609a      	str	r2, [r3, #8]
 800f5fe:	60da      	str	r2, [r3, #12]
 800f600:	611a      	str	r2, [r3, #16]
 800f602:	615a      	str	r2, [r3, #20]
 800f604:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800f606:	463b      	mov	r3, r7
 800f608:	2234      	movs	r2, #52	; 0x34
 800f60a:	2100      	movs	r1, #0
 800f60c:	4618      	mov	r0, r3
 800f60e:	f007 ffb1 	bl	8017574 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800f612:	4b30      	ldr	r3, [pc, #192]	; (800f6d4 <MX_TIM16_Init+0xe8>)
 800f614:	4a30      	ldr	r2, [pc, #192]	; (800f6d8 <MX_TIM16_Init+0xec>)
 800f616:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 800f618:	4b2e      	ldr	r3, [pc, #184]	; (800f6d4 <MX_TIM16_Init+0xe8>)
 800f61a:	2201      	movs	r2, #1
 800f61c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f61e:	4b2d      	ldr	r3, [pc, #180]	; (800f6d4 <MX_TIM16_Init+0xe8>)
 800f620:	2200      	movs	r2, #0
 800f622:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 800f624:	4b2b      	ldr	r3, [pc, #172]	; (800f6d4 <MX_TIM16_Init+0xe8>)
 800f626:	2264      	movs	r2, #100	; 0x64
 800f628:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f62a:	4b2a      	ldr	r3, [pc, #168]	; (800f6d4 <MX_TIM16_Init+0xe8>)
 800f62c:	2200      	movs	r2, #0
 800f62e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800f630:	4b28      	ldr	r3, [pc, #160]	; (800f6d4 <MX_TIM16_Init+0xe8>)
 800f632:	2200      	movs	r2, #0
 800f634:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f636:	4b27      	ldr	r3, [pc, #156]	; (800f6d4 <MX_TIM16_Init+0xe8>)
 800f638:	2200      	movs	r2, #0
 800f63a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800f63c:	4825      	ldr	r0, [pc, #148]	; (800f6d4 <MX_TIM16_Init+0xe8>)
 800f63e:	f005 fdc5 	bl	80151cc <HAL_TIM_Base_Init>
 800f642:	4603      	mov	r3, r0
 800f644:	2b00      	cmp	r3, #0
 800f646:	d001      	beq.n	800f64c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 800f648:	f7fa fb7f 	bl	8009d4a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800f64c:	4821      	ldr	r0, [pc, #132]	; (800f6d4 <MX_TIM16_Init+0xe8>)
 800f64e:	f005 fe85 	bl	801535c <HAL_TIM_PWM_Init>
 800f652:	4603      	mov	r3, r0
 800f654:	2b00      	cmp	r3, #0
 800f656:	d001      	beq.n	800f65c <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 800f658:	f7fa fb77 	bl	8009d4a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f65c:	2360      	movs	r3, #96	; 0x60
 800f65e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 30;
 800f660:	231e      	movs	r3, #30
 800f662:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f664:	2300      	movs	r3, #0
 800f666:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f668:	2300      	movs	r3, #0
 800f66a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f66c:	2300      	movs	r3, #0
 800f66e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f670:	2300      	movs	r3, #0
 800f672:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f674:	2300      	movs	r3, #0
 800f676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f678:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f67c:	2200      	movs	r2, #0
 800f67e:	4619      	mov	r1, r3
 800f680:	4814      	ldr	r0, [pc, #80]	; (800f6d4 <MX_TIM16_Init+0xe8>)
 800f682:	f006 f9eb 	bl	8015a5c <HAL_TIM_PWM_ConfigChannel>
 800f686:	4603      	mov	r3, r0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d001      	beq.n	800f690 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 800f68c:	f7fa fb5d 	bl	8009d4a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f690:	2300      	movs	r3, #0
 800f692:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f694:	2300      	movs	r3, #0
 800f696:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f698:	2300      	movs	r3, #0
 800f69a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800f69c:	2300      	movs	r3, #0
 800f69e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f6a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f6a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800f6b2:	463b      	mov	r3, r7
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	4807      	ldr	r0, [pc, #28]	; (800f6d4 <MX_TIM16_Init+0xe8>)
 800f6b8:	f006 ff92 	bl	80165e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d001      	beq.n	800f6c6 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 800f6c2:	f7fa fb42 	bl	8009d4a <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800f6c6:	4803      	ldr	r0, [pc, #12]	; (800f6d4 <MX_TIM16_Init+0xe8>)
 800f6c8:	f000 f862 	bl	800f790 <HAL_TIM_MspPostInit>

}
 800f6cc:	bf00      	nop
 800f6ce:	3750      	adds	r7, #80	; 0x50
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}
 800f6d4:	2000c4fc 	.word	0x2000c4fc
 800f6d8:	40014400 	.word	0x40014400

0800f6dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b084      	sub	sp, #16
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4a16      	ldr	r2, [pc, #88]	; (800f744 <HAL_TIM_Base_MspInit+0x68>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d114      	bne.n	800f718 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800f6ee:	4b16      	ldr	r3, [pc, #88]	; (800f748 <HAL_TIM_Base_MspInit+0x6c>)
 800f6f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6f2:	4a15      	ldr	r2, [pc, #84]	; (800f748 <HAL_TIM_Base_MspInit+0x6c>)
 800f6f4:	f043 0310 	orr.w	r3, r3, #16
 800f6f8:	6593      	str	r3, [r2, #88]	; 0x58
 800f6fa:	4b13      	ldr	r3, [pc, #76]	; (800f748 <HAL_TIM_Base_MspInit+0x6c>)
 800f6fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6fe:	f003 0310 	and.w	r3, r3, #16
 800f702:	60fb      	str	r3, [r7, #12]
 800f704:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 800f706:	2200      	movs	r2, #0
 800f708:	2103      	movs	r1, #3
 800f70a:	2036      	movs	r0, #54	; 0x36
 800f70c:	f003 f98b 	bl	8012a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800f710:	2036      	movs	r0, #54	; 0x36
 800f712:	f003 f9a2 	bl	8012a5a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800f716:	e010      	b.n	800f73a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	4a0b      	ldr	r2, [pc, #44]	; (800f74c <HAL_TIM_Base_MspInit+0x70>)
 800f71e:	4293      	cmp	r3, r2
 800f720:	d10b      	bne.n	800f73a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800f722:	4b09      	ldr	r3, [pc, #36]	; (800f748 <HAL_TIM_Base_MspInit+0x6c>)
 800f724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f726:	4a08      	ldr	r2, [pc, #32]	; (800f748 <HAL_TIM_Base_MspInit+0x6c>)
 800f728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f72c:	6613      	str	r3, [r2, #96]	; 0x60
 800f72e:	4b06      	ldr	r3, [pc, #24]	; (800f748 <HAL_TIM_Base_MspInit+0x6c>)
 800f730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f736:	60bb      	str	r3, [r7, #8]
 800f738:	68bb      	ldr	r3, [r7, #8]
}
 800f73a:	bf00      	nop
 800f73c:	3710      	adds	r7, #16
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
 800f742:	bf00      	nop
 800f744:	40001000 	.word	0x40001000
 800f748:	40021000 	.word	0x40021000
 800f74c:	40014400 	.word	0x40014400

0800f750 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800f750:	b480      	push	{r7}
 800f752:	b085      	sub	sp, #20
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	4a0a      	ldr	r2, [pc, #40]	; (800f788 <HAL_TIM_PWM_MspInit+0x38>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d10b      	bne.n	800f77a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800f762:	4b0a      	ldr	r3, [pc, #40]	; (800f78c <HAL_TIM_PWM_MspInit+0x3c>)
 800f764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f766:	4a09      	ldr	r2, [pc, #36]	; (800f78c <HAL_TIM_PWM_MspInit+0x3c>)
 800f768:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f76c:	6613      	str	r3, [r2, #96]	; 0x60
 800f76e:	4b07      	ldr	r3, [pc, #28]	; (800f78c <HAL_TIM_PWM_MspInit+0x3c>)
 800f770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f772:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f776:	60fb      	str	r3, [r7, #12]
 800f778:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800f77a:	bf00      	nop
 800f77c:	3714      	adds	r7, #20
 800f77e:	46bd      	mov	sp, r7
 800f780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f784:	4770      	bx	lr
 800f786:	bf00      	nop
 800f788:	40013400 	.word	0x40013400
 800f78c:	40021000 	.word	0x40021000

0800f790 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b08a      	sub	sp, #40	; 0x28
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f798:	f107 0314 	add.w	r3, r7, #20
 800f79c:	2200      	movs	r2, #0
 800f79e:	601a      	str	r2, [r3, #0]
 800f7a0:	605a      	str	r2, [r3, #4]
 800f7a2:	609a      	str	r2, [r3, #8]
 800f7a4:	60da      	str	r2, [r3, #12]
 800f7a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	4a2b      	ldr	r2, [pc, #172]	; (800f85c <HAL_TIM_MspPostInit+0xcc>)
 800f7ae:	4293      	cmp	r3, r2
 800f7b0:	d12d      	bne.n	800f80e <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f7b2:	4b2b      	ldr	r3, [pc, #172]	; (800f860 <HAL_TIM_MspPostInit+0xd0>)
 800f7b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7b6:	4a2a      	ldr	r2, [pc, #168]	; (800f860 <HAL_TIM_MspPostInit+0xd0>)
 800f7b8:	f043 0302 	orr.w	r3, r3, #2
 800f7bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f7be:	4b28      	ldr	r3, [pc, #160]	; (800f860 <HAL_TIM_MspPostInit+0xd0>)
 800f7c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7c2:	f003 0302 	and.w	r3, r3, #2
 800f7c6:	613b      	str	r3, [r7, #16]
 800f7c8:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 800f7ca:	2340      	movs	r3, #64	; 0x40
 800f7cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7ce:	2302      	movs	r3, #2
 800f7d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 800f7da:	2305      	movs	r3, #5
 800f7dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800f7de:	f107 0314 	add.w	r3, r7, #20
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	481f      	ldr	r0, [pc, #124]	; (800f864 <HAL_TIM_MspPostInit+0xd4>)
 800f7e6:	f003 fc1f 	bl	8013028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 800f7ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f7ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7f0:	2302      	movs	r3, #2
 800f7f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800f7fc:	230a      	movs	r3, #10
 800f7fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800f800:	f107 0314 	add.w	r3, r7, #20
 800f804:	4619      	mov	r1, r3
 800f806:	4817      	ldr	r0, [pc, #92]	; (800f864 <HAL_TIM_MspPostInit+0xd4>)
 800f808:	f003 fc0e 	bl	8013028 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800f80c:	e022      	b.n	800f854 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	4a15      	ldr	r2, [pc, #84]	; (800f868 <HAL_TIM_MspPostInit+0xd8>)
 800f814:	4293      	cmp	r3, r2
 800f816:	d11d      	bne.n	800f854 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f818:	4b11      	ldr	r3, [pc, #68]	; (800f860 <HAL_TIM_MspPostInit+0xd0>)
 800f81a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f81c:	4a10      	ldr	r2, [pc, #64]	; (800f860 <HAL_TIM_MspPostInit+0xd0>)
 800f81e:	f043 0301 	orr.w	r3, r3, #1
 800f822:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f824:	4b0e      	ldr	r3, [pc, #56]	; (800f860 <HAL_TIM_MspPostInit+0xd0>)
 800f826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f828:	f003 0301 	and.w	r3, r3, #1
 800f82c:	60fb      	str	r3, [r7, #12]
 800f82e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 800f830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f836:	2302      	movs	r3, #2
 800f838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f83a:	2300      	movs	r3, #0
 800f83c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f83e:	2300      	movs	r3, #0
 800f840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800f842:	2301      	movs	r3, #1
 800f844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 800f846:	f107 0314 	add.w	r3, r7, #20
 800f84a:	4619      	mov	r1, r3
 800f84c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f850:	f003 fbea 	bl	8013028 <HAL_GPIO_Init>
}
 800f854:	bf00      	nop
 800f856:	3728      	adds	r7, #40	; 0x28
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	40013400 	.word	0x40013400
 800f860:	40021000 	.word	0x40021000
 800f864:	48000400 	.word	0x48000400
 800f868:	40014400 	.word	0x40014400

0800f86c <input_parameter>:
	}

	return End_velocity;
}

void input_parameter(void) {
 800f86c:	b480      	push	{r7}
 800f86e:	af00      	add	r7, sp, #0

	speed300_exploration.SlalomCentervelocity = 300;
 800f870:	4b95      	ldr	r3, [pc, #596]	; (800fac8 <input_parameter+0x25c>)
 800f872:	4a96      	ldr	r2, [pc, #600]	; (800facc <input_parameter+0x260>)
 800f874:	601a      	str	r2, [r3, #0]
	speed300_exploration.TurnCentervelocity = 300;
 800f876:	4b94      	ldr	r3, [pc, #592]	; (800fac8 <input_parameter+0x25c>)
 800f878:	4a94      	ldr	r2, [pc, #592]	; (800facc <input_parameter+0x260>)
 800f87a:	605a      	str	r2, [r3, #4]

	speed300_exploration.slalom_R.g_speed =
			speed300_exploration.SlalomCentervelocity;
 800f87c:	4b92      	ldr	r3, [pc, #584]	; (800fac8 <input_parameter+0x25c>)
 800f87e:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_R.g_speed =
 800f880:	4a91      	ldr	r2, [pc, #580]	; (800fac8 <input_parameter+0x25c>)
 800f882:	6093      	str	r3, [r2, #8]
	speed300_exploration.slalom_R.t_speed = 700; //550
 800f884:	4b90      	ldr	r3, [pc, #576]	; (800fac8 <input_parameter+0x25c>)
 800f886:	4a92      	ldr	r2, [pc, #584]	; (800fad0 <input_parameter+0x264>)
 800f888:	615a      	str	r2, [r3, #20]
	speed300_exploration.slalom_R.t_acc = 8000; //10000
 800f88a:	4b8f      	ldr	r3, [pc, #572]	; (800fac8 <input_parameter+0x25c>)
 800f88c:	4a91      	ldr	r2, [pc, #580]	; (800fad4 <input_parameter+0x268>)
 800f88e:	619a      	str	r2, [r3, #24]
	speed300_exploration.slalom_R.f_ofset = 7; //55;
 800f890:	4b8d      	ldr	r3, [pc, #564]	; (800fac8 <input_parameter+0x25c>)
 800f892:	4a91      	ldr	r2, [pc, #580]	; (800fad8 <input_parameter+0x26c>)
 800f894:	60da      	str	r2, [r3, #12]
	speed300_exploration.slalom_R.e_ofset = 20;
 800f896:	4b8c      	ldr	r3, [pc, #560]	; (800fac8 <input_parameter+0x25c>)
 800f898:	4a90      	ldr	r2, [pc, #576]	; (800fadc <input_parameter+0x270>)
 800f89a:	611a      	str	r2, [r3, #16]

	speed300_exploration.slalom_L.g_speed =
			speed300_exploration.SlalomCentervelocity;
 800f89c:	4b8a      	ldr	r3, [pc, #552]	; (800fac8 <input_parameter+0x25c>)
 800f89e:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_L.g_speed =
 800f8a0:	4a89      	ldr	r2, [pc, #548]	; (800fac8 <input_parameter+0x25c>)
 800f8a2:	61d3      	str	r3, [r2, #28]
	speed300_exploration.slalom_L.t_speed = 700;
 800f8a4:	4b88      	ldr	r3, [pc, #544]	; (800fac8 <input_parameter+0x25c>)
 800f8a6:	4a8a      	ldr	r2, [pc, #552]	; (800fad0 <input_parameter+0x264>)
 800f8a8:	629a      	str	r2, [r3, #40]	; 0x28
	speed300_exploration.slalom_L.t_acc = 8000;
 800f8aa:	4b87      	ldr	r3, [pc, #540]	; (800fac8 <input_parameter+0x25c>)
 800f8ac:	4a89      	ldr	r2, [pc, #548]	; (800fad4 <input_parameter+0x268>)
 800f8ae:	62da      	str	r2, [r3, #44]	; 0x2c
	speed300_exploration.slalom_L.f_ofset = 1; //50;
 800f8b0:	4b85      	ldr	r3, [pc, #532]	; (800fac8 <input_parameter+0x25c>)
 800f8b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f8b6:	621a      	str	r2, [r3, #32]
	speed300_exploration.slalom_L.e_ofset = 19;
 800f8b8:	4b83      	ldr	r3, [pc, #524]	; (800fac8 <input_parameter+0x25c>)
 800f8ba:	4a89      	ldr	r2, [pc, #548]	; (800fae0 <input_parameter+0x274>)
 800f8bc:	625a      	str	r2, [r3, #36]	; 0x24

	speed300_shortest.SlalomCentervelocity =
			speed300_exploration.SlalomCentervelocity;
 800f8be:	4b82      	ldr	r3, [pc, #520]	; (800fac8 <input_parameter+0x25c>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
	speed300_shortest.SlalomCentervelocity =
 800f8c2:	4a88      	ldr	r2, [pc, #544]	; (800fae4 <input_parameter+0x278>)
 800f8c4:	6013      	str	r3, [r2, #0]
	speed300_shortest.TurnCentervelocity =
			speed300_exploration.TurnCentervelocity + 200;
 800f8c6:	4b80      	ldr	r3, [pc, #512]	; (800fac8 <input_parameter+0x25c>)
 800f8c8:	edd3 7a01 	vldr	s15, [r3, #4]
 800f8cc:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800fae8 <input_parameter+0x27c>
 800f8d0:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.TurnCentervelocity =
 800f8d4:	4b83      	ldr	r3, [pc, #524]	; (800fae4 <input_parameter+0x278>)
 800f8d6:	edc3 7a01 	vstr	s15, [r3, #4]

	speed300_shortest.slalom_R.g_speed = speed300_exploration.slalom_R.g_speed;
 800f8da:	4b7b      	ldr	r3, [pc, #492]	; (800fac8 <input_parameter+0x25c>)
 800f8dc:	689b      	ldr	r3, [r3, #8]
 800f8de:	4a81      	ldr	r2, [pc, #516]	; (800fae4 <input_parameter+0x278>)
 800f8e0:	6093      	str	r3, [r2, #8]
	speed300_shortest.slalom_R.t_speed = speed300_exploration.slalom_R.t_speed;
 800f8e2:	4b79      	ldr	r3, [pc, #484]	; (800fac8 <input_parameter+0x25c>)
 800f8e4:	695b      	ldr	r3, [r3, #20]
 800f8e6:	4a7f      	ldr	r2, [pc, #508]	; (800fae4 <input_parameter+0x278>)
 800f8e8:	6153      	str	r3, [r2, #20]
	speed300_shortest.slalom_R.t_acc = speed300_exploration.slalom_R.t_acc;
 800f8ea:	4b77      	ldr	r3, [pc, #476]	; (800fac8 <input_parameter+0x25c>)
 800f8ec:	699b      	ldr	r3, [r3, #24]
 800f8ee:	4a7d      	ldr	r2, [pc, #500]	; (800fae4 <input_parameter+0x278>)
 800f8f0:	6193      	str	r3, [r2, #24]
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 800f8f2:	4b75      	ldr	r3, [pc, #468]	; (800fac8 <input_parameter+0x25c>)
 800f8f4:	edd3 7a03 	vldr	s15, [r3, #12]
			+ MAZE_OFFSET; //55;
 800f8f8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800f8fc:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 800f900:	4b78      	ldr	r3, [pc, #480]	; (800fae4 <input_parameter+0x278>)
 800f902:	edc3 7a03 	vstr	s15, [r3, #12]
	speed300_shortest.slalom_R.e_ofset = speed300_exploration.slalom_R.e_ofset;
 800f906:	4b70      	ldr	r3, [pc, #448]	; (800fac8 <input_parameter+0x25c>)
 800f908:	691b      	ldr	r3, [r3, #16]
 800f90a:	4a76      	ldr	r2, [pc, #472]	; (800fae4 <input_parameter+0x278>)
 800f90c:	6113      	str	r3, [r2, #16]

	speed300_shortest.slalom_L.g_speed = speed300_exploration.slalom_L.g_speed;
 800f90e:	4b6e      	ldr	r3, [pc, #440]	; (800fac8 <input_parameter+0x25c>)
 800f910:	69db      	ldr	r3, [r3, #28]
 800f912:	4a74      	ldr	r2, [pc, #464]	; (800fae4 <input_parameter+0x278>)
 800f914:	61d3      	str	r3, [r2, #28]
	speed300_shortest.slalom_L.t_speed = speed300_exploration.slalom_L.t_speed;
 800f916:	4b6c      	ldr	r3, [pc, #432]	; (800fac8 <input_parameter+0x25c>)
 800f918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f91a:	4a72      	ldr	r2, [pc, #456]	; (800fae4 <input_parameter+0x278>)
 800f91c:	6293      	str	r3, [r2, #40]	; 0x28
	speed300_shortest.slalom_L.t_acc = speed300_exploration.slalom_L.t_acc;
 800f91e:	4b6a      	ldr	r3, [pc, #424]	; (800fac8 <input_parameter+0x25c>)
 800f920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f922:	4a70      	ldr	r2, [pc, #448]	; (800fae4 <input_parameter+0x278>)
 800f924:	62d3      	str	r3, [r2, #44]	; 0x2c
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 800f926:	4b68      	ldr	r3, [pc, #416]	; (800fac8 <input_parameter+0x25c>)
 800f928:	edd3 7a08 	vldr	s15, [r3, #32]
			+ MAZE_OFFSET; //50;
 800f92c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800f930:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 800f934:	4b6b      	ldr	r3, [pc, #428]	; (800fae4 <input_parameter+0x278>)
 800f936:	edc3 7a08 	vstr	s15, [r3, #32]
	speed300_shortest.slalom_L.e_ofset = speed300_exploration.slalom_L.e_ofset;
 800f93a:	4b63      	ldr	r3, [pc, #396]	; (800fac8 <input_parameter+0x25c>)
 800f93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f93e:	4a69      	ldr	r2, [pc, #420]	; (800fae4 <input_parameter+0x278>)
 800f940:	6253      	str	r3, [r2, #36]	; 0x24

	speed300_shortest.turn90_R.g_speed = speed300_shortest.TurnCentervelocity;
 800f942:	4b68      	ldr	r3, [pc, #416]	; (800fae4 <input_parameter+0x278>)
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	4a67      	ldr	r2, [pc, #412]	; (800fae4 <input_parameter+0x278>)
 800f948:	6313      	str	r3, [r2, #48]	; 0x30
	speed300_shortest.turn90_R.t_speed = 600;
 800f94a:	4b66      	ldr	r3, [pc, #408]	; (800fae4 <input_parameter+0x278>)
 800f94c:	4a67      	ldr	r2, [pc, #412]	; (800faec <input_parameter+0x280>)
 800f94e:	63da      	str	r2, [r3, #60]	; 0x3c
	speed300_shortest.turn90_R.t_acc = 10000;
 800f950:	4b64      	ldr	r3, [pc, #400]	; (800fae4 <input_parameter+0x278>)
 800f952:	4a67      	ldr	r2, [pc, #412]	; (800faf0 <input_parameter+0x284>)
 800f954:	641a      	str	r2, [r3, #64]	; 0x40
	speed300_shortest.turn90_R.f_ofset = 76;
 800f956:	4b63      	ldr	r3, [pc, #396]	; (800fae4 <input_parameter+0x278>)
 800f958:	4a66      	ldr	r2, [pc, #408]	; (800faf4 <input_parameter+0x288>)
 800f95a:	635a      	str	r2, [r3, #52]	; 0x34
	speed300_shortest.turn90_R.e_ofset = 107;
 800f95c:	4b61      	ldr	r3, [pc, #388]	; (800fae4 <input_parameter+0x278>)
 800f95e:	4a66      	ldr	r2, [pc, #408]	; (800faf8 <input_parameter+0x28c>)
 800f960:	639a      	str	r2, [r3, #56]	; 0x38

	speed300_shortest.turn90_L.g_speed = speed300_shortest.TurnCentervelocity;
 800f962:	4b60      	ldr	r3, [pc, #384]	; (800fae4 <input_parameter+0x278>)
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	4a5f      	ldr	r2, [pc, #380]	; (800fae4 <input_parameter+0x278>)
 800f968:	6453      	str	r3, [r2, #68]	; 0x44
	speed300_shortest.turn90_L.t_speed = 600;
 800f96a:	4b5e      	ldr	r3, [pc, #376]	; (800fae4 <input_parameter+0x278>)
 800f96c:	4a5f      	ldr	r2, [pc, #380]	; (800faec <input_parameter+0x280>)
 800f96e:	651a      	str	r2, [r3, #80]	; 0x50
	speed300_shortest.turn90_L.t_acc = 10000;
 800f970:	4b5c      	ldr	r3, [pc, #368]	; (800fae4 <input_parameter+0x278>)
 800f972:	4a5f      	ldr	r2, [pc, #380]	; (800faf0 <input_parameter+0x284>)
 800f974:	655a      	str	r2, [r3, #84]	; 0x54
	speed300_shortest.turn90_L.f_ofset = 77;
 800f976:	4b5b      	ldr	r3, [pc, #364]	; (800fae4 <input_parameter+0x278>)
 800f978:	4a60      	ldr	r2, [pc, #384]	; (800fafc <input_parameter+0x290>)
 800f97a:	649a      	str	r2, [r3, #72]	; 0x48
	speed300_shortest.turn90_L.e_ofset = 103;
 800f97c:	4b59      	ldr	r3, [pc, #356]	; (800fae4 <input_parameter+0x278>)
 800f97e:	4a60      	ldr	r2, [pc, #384]	; (800fb00 <input_parameter+0x294>)
 800f980:	64da      	str	r2, [r3, #76]	; 0x4c

	speed300_shortest.turn180_R.g_speed = speed300_shortest.TurnCentervelocity;
 800f982:	4b58      	ldr	r3, [pc, #352]	; (800fae4 <input_parameter+0x278>)
 800f984:	685b      	ldr	r3, [r3, #4]
 800f986:	4a57      	ldr	r2, [pc, #348]	; (800fae4 <input_parameter+0x278>)
 800f988:	6593      	str	r3, [r2, #88]	; 0x58
	speed300_shortest.turn180_R.t_speed = 430;
 800f98a:	4b56      	ldr	r3, [pc, #344]	; (800fae4 <input_parameter+0x278>)
 800f98c:	4a5d      	ldr	r2, [pc, #372]	; (800fb04 <input_parameter+0x298>)
 800f98e:	665a      	str	r2, [r3, #100]	; 0x64
	speed300_shortest.turn180_R.t_acc = 8000;
 800f990:	4b54      	ldr	r3, [pc, #336]	; (800fae4 <input_parameter+0x278>)
 800f992:	4a50      	ldr	r2, [pc, #320]	; (800fad4 <input_parameter+0x268>)
 800f994:	669a      	str	r2, [r3, #104]	; 0x68
	speed300_shortest.turn180_R.f_ofset = 65;
 800f996:	4b53      	ldr	r3, [pc, #332]	; (800fae4 <input_parameter+0x278>)
 800f998:	4a5b      	ldr	r2, [pc, #364]	; (800fb08 <input_parameter+0x29c>)
 800f99a:	65da      	str	r2, [r3, #92]	; 0x5c
	speed300_shortest.turn180_R.e_ofset = 80;
 800f99c:	4b51      	ldr	r3, [pc, #324]	; (800fae4 <input_parameter+0x278>)
 800f99e:	4a5b      	ldr	r2, [pc, #364]	; (800fb0c <input_parameter+0x2a0>)
 800f9a0:	661a      	str	r2, [r3, #96]	; 0x60

	speed300_shortest.turn180_L.g_speed = speed300_shortest.TurnCentervelocity;
 800f9a2:	4b50      	ldr	r3, [pc, #320]	; (800fae4 <input_parameter+0x278>)
 800f9a4:	685b      	ldr	r3, [r3, #4]
 800f9a6:	4a4f      	ldr	r2, [pc, #316]	; (800fae4 <input_parameter+0x278>)
 800f9a8:	66d3      	str	r3, [r2, #108]	; 0x6c
	speed300_shortest.turn180_L.t_speed = 450;
 800f9aa:	4b4e      	ldr	r3, [pc, #312]	; (800fae4 <input_parameter+0x278>)
 800f9ac:	4a58      	ldr	r2, [pc, #352]	; (800fb10 <input_parameter+0x2a4>)
 800f9ae:	679a      	str	r2, [r3, #120]	; 0x78
	speed300_shortest.turn180_L.t_acc = 8000;
 800f9b0:	4b4c      	ldr	r3, [pc, #304]	; (800fae4 <input_parameter+0x278>)
 800f9b2:	4a48      	ldr	r2, [pc, #288]	; (800fad4 <input_parameter+0x268>)
 800f9b4:	67da      	str	r2, [r3, #124]	; 0x7c
	speed300_shortest.turn180_L.f_ofset = 60;
 800f9b6:	4b4b      	ldr	r3, [pc, #300]	; (800fae4 <input_parameter+0x278>)
 800f9b8:	4a56      	ldr	r2, [pc, #344]	; (800fb14 <input_parameter+0x2a8>)
 800f9ba:	671a      	str	r2, [r3, #112]	; 0x70
	speed300_shortest.turn180_L.e_ofset = 71;
 800f9bc:	4b49      	ldr	r3, [pc, #292]	; (800fae4 <input_parameter+0x278>)
 800f9be:	4a56      	ldr	r2, [pc, #344]	; (800fb18 <input_parameter+0x2ac>)
 800f9c0:	675a      	str	r2, [r3, #116]	; 0x74

	speed300_shortest.turn45in_R.g_speed = speed300_shortest.TurnCentervelocity;
 800f9c2:	4b48      	ldr	r3, [pc, #288]	; (800fae4 <input_parameter+0x278>)
 800f9c4:	685b      	ldr	r3, [r3, #4]
 800f9c6:	4a47      	ldr	r2, [pc, #284]	; (800fae4 <input_parameter+0x278>)
 800f9c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	speed300_shortest.turn45in_R.t_speed = 600;
 800f9cc:	4b45      	ldr	r3, [pc, #276]	; (800fae4 <input_parameter+0x278>)
 800f9ce:	4a47      	ldr	r2, [pc, #284]	; (800faec <input_parameter+0x280>)
 800f9d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed300_shortest.turn45in_R.t_acc = 10000;
 800f9d4:	4b43      	ldr	r3, [pc, #268]	; (800fae4 <input_parameter+0x278>)
 800f9d6:	4a46      	ldr	r2, [pc, #280]	; (800faf0 <input_parameter+0x284>)
 800f9d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed300_shortest.turn45in_R.f_ofset = 27;
 800f9dc:	4b41      	ldr	r3, [pc, #260]	; (800fae4 <input_parameter+0x278>)
 800f9de:	4a4f      	ldr	r2, [pc, #316]	; (800fb1c <input_parameter+0x2b0>)
 800f9e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed300_shortest.turn45in_R.e_ofset = 89;
 800f9e4:	4b3f      	ldr	r3, [pc, #252]	; (800fae4 <input_parameter+0x278>)
 800f9e6:	4a4e      	ldr	r2, [pc, #312]	; (800fb20 <input_parameter+0x2b4>)
 800f9e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed300_shortest.turn45in_L.g_speed = speed300_shortest.TurnCentervelocity;
 800f9ec:	4b3d      	ldr	r3, [pc, #244]	; (800fae4 <input_parameter+0x278>)
 800f9ee:	685b      	ldr	r3, [r3, #4]
 800f9f0:	4a3c      	ldr	r2, [pc, #240]	; (800fae4 <input_parameter+0x278>)
 800f9f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	speed300_shortest.turn45in_L.t_speed = 600;
 800f9f6:	4b3b      	ldr	r3, [pc, #236]	; (800fae4 <input_parameter+0x278>)
 800f9f8:	4a3c      	ldr	r2, [pc, #240]	; (800faec <input_parameter+0x280>)
 800f9fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed300_shortest.turn45in_L.t_acc = 10000;
 800f9fe:	4b39      	ldr	r3, [pc, #228]	; (800fae4 <input_parameter+0x278>)
 800fa00:	4a3b      	ldr	r2, [pc, #236]	; (800faf0 <input_parameter+0x284>)
 800fa02:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed300_shortest.turn45in_L.f_ofset = 33;
 800fa06:	4b37      	ldr	r3, [pc, #220]	; (800fae4 <input_parameter+0x278>)
 800fa08:	4a46      	ldr	r2, [pc, #280]	; (800fb24 <input_parameter+0x2b8>)
 800fa0a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed300_shortest.turn45in_L.e_ofset = 90;
 800fa0e:	4b35      	ldr	r3, [pc, #212]	; (800fae4 <input_parameter+0x278>)
 800fa10:	4a45      	ldr	r2, [pc, #276]	; (800fb28 <input_parameter+0x2bc>)
 800fa12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed300_shortest.turn135in_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 800fa16:	4b33      	ldr	r3, [pc, #204]	; (800fae4 <input_parameter+0x278>)
 800fa18:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_R.g_speed =
 800fa1a:	4a32      	ldr	r2, [pc, #200]	; (800fae4 <input_parameter+0x278>)
 800fa1c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	speed300_shortest.turn135in_R.t_speed = 610;
 800fa20:	4b30      	ldr	r3, [pc, #192]	; (800fae4 <input_parameter+0x278>)
 800fa22:	4a42      	ldr	r2, [pc, #264]	; (800fb2c <input_parameter+0x2c0>)
 800fa24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed300_shortest.turn135in_R.t_acc = 8000;
 800fa28:	4b2e      	ldr	r3, [pc, #184]	; (800fae4 <input_parameter+0x278>)
 800fa2a:	4a2a      	ldr	r2, [pc, #168]	; (800fad4 <input_parameter+0x268>)
 800fa2c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed300_shortest.turn135in_R.f_ofset = 67;
 800fa30:	4b2c      	ldr	r3, [pc, #176]	; (800fae4 <input_parameter+0x278>)
 800fa32:	4a3f      	ldr	r2, [pc, #252]	; (800fb30 <input_parameter+0x2c4>)
 800fa34:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed300_shortest.turn135in_R.e_ofset = 73;
 800fa38:	4b2a      	ldr	r3, [pc, #168]	; (800fae4 <input_parameter+0x278>)
 800fa3a:	4a3e      	ldr	r2, [pc, #248]	; (800fb34 <input_parameter+0x2c8>)
 800fa3c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed300_shortest.turn135in_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 800fa40:	4b28      	ldr	r3, [pc, #160]	; (800fae4 <input_parameter+0x278>)
 800fa42:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_L.g_speed =
 800fa44:	4a27      	ldr	r2, [pc, #156]	; (800fae4 <input_parameter+0x278>)
 800fa46:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	speed300_shortest.turn135in_L.t_speed = 610;
 800fa4a:	4b26      	ldr	r3, [pc, #152]	; (800fae4 <input_parameter+0x278>)
 800fa4c:	4a37      	ldr	r2, [pc, #220]	; (800fb2c <input_parameter+0x2c0>)
 800fa4e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed300_shortest.turn135in_L.t_acc = 8000;
 800fa52:	4b24      	ldr	r3, [pc, #144]	; (800fae4 <input_parameter+0x278>)
 800fa54:	4a1f      	ldr	r2, [pc, #124]	; (800fad4 <input_parameter+0x268>)
 800fa56:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed300_shortest.turn135in_L.f_ofset = 67;
 800fa5a:	4b22      	ldr	r3, [pc, #136]	; (800fae4 <input_parameter+0x278>)
 800fa5c:	4a34      	ldr	r2, [pc, #208]	; (800fb30 <input_parameter+0x2c4>)
 800fa5e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed300_shortest.turn135in_L.e_ofset = 73;
 800fa62:	4b20      	ldr	r3, [pc, #128]	; (800fae4 <input_parameter+0x278>)
 800fa64:	4a33      	ldr	r2, [pc, #204]	; (800fb34 <input_parameter+0x2c8>)
 800fa66:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed300_shortest.turn45out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 800fa6a:	4b1e      	ldr	r3, [pc, #120]	; (800fae4 <input_parameter+0x278>)
 800fa6c:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_R.g_speed =
 800fa6e:	4a1d      	ldr	r2, [pc, #116]	; (800fae4 <input_parameter+0x278>)
 800fa70:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	speed300_shortest.turn45out_R.t_speed = 600;
 800fa74:	4b1b      	ldr	r3, [pc, #108]	; (800fae4 <input_parameter+0x278>)
 800fa76:	4a1d      	ldr	r2, [pc, #116]	; (800faec <input_parameter+0x280>)
 800fa78:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed300_shortest.turn45out_R.t_acc = 10000;
 800fa7c:	4b19      	ldr	r3, [pc, #100]	; (800fae4 <input_parameter+0x278>)
 800fa7e:	4a1c      	ldr	r2, [pc, #112]	; (800faf0 <input_parameter+0x284>)
 800fa80:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed300_shortest.turn45out_R.f_ofset = 57;
 800fa84:	4b17      	ldr	r3, [pc, #92]	; (800fae4 <input_parameter+0x278>)
 800fa86:	4a2c      	ldr	r2, [pc, #176]	; (800fb38 <input_parameter+0x2cc>)
 800fa88:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed300_shortest.turn45out_R.e_ofset = 57;
 800fa8c:	4b15      	ldr	r3, [pc, #84]	; (800fae4 <input_parameter+0x278>)
 800fa8e:	4a2a      	ldr	r2, [pc, #168]	; (800fb38 <input_parameter+0x2cc>)
 800fa90:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed300_shortest.turn45out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 800fa94:	4b13      	ldr	r3, [pc, #76]	; (800fae4 <input_parameter+0x278>)
 800fa96:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_L.g_speed =
 800fa98:	4a12      	ldr	r2, [pc, #72]	; (800fae4 <input_parameter+0x278>)
 800fa9a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	speed300_shortest.turn45out_L.t_speed = 600;
 800fa9e:	4b11      	ldr	r3, [pc, #68]	; (800fae4 <input_parameter+0x278>)
 800faa0:	4a12      	ldr	r2, [pc, #72]	; (800faec <input_parameter+0x280>)
 800faa2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed300_shortest.turn45out_L.t_acc = 10000;
 800faa6:	4b0f      	ldr	r3, [pc, #60]	; (800fae4 <input_parameter+0x278>)
 800faa8:	4a11      	ldr	r2, [pc, #68]	; (800faf0 <input_parameter+0x284>)
 800faaa:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed300_shortest.turn45out_L.f_ofset = 64;
 800faae:	4b0d      	ldr	r3, [pc, #52]	; (800fae4 <input_parameter+0x278>)
 800fab0:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 800fab4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed300_shortest.turn45out_L.e_ofset = 52;
 800fab8:	4b0a      	ldr	r3, [pc, #40]	; (800fae4 <input_parameter+0x278>)
 800faba:	4a20      	ldr	r2, [pc, #128]	; (800fb3c <input_parameter+0x2d0>)
 800fabc:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed300_shortest.turn135out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 800fac0:	4b08      	ldr	r3, [pc, #32]	; (800fae4 <input_parameter+0x278>)
 800fac2:	685b      	ldr	r3, [r3, #4]
 800fac4:	e03c      	b.n	800fb40 <input_parameter+0x2d4>
 800fac6:	bf00      	nop
 800fac8:	2000c548 	.word	0x2000c548
 800facc:	43960000 	.word	0x43960000
 800fad0:	442f0000 	.word	0x442f0000
 800fad4:	45fa0000 	.word	0x45fa0000
 800fad8:	40e00000 	.word	0x40e00000
 800fadc:	41a00000 	.word	0x41a00000
 800fae0:	41980000 	.word	0x41980000
 800fae4:	2000c690 	.word	0x2000c690
 800fae8:	43480000 	.word	0x43480000
 800faec:	44160000 	.word	0x44160000
 800faf0:	461c4000 	.word	0x461c4000
 800faf4:	42980000 	.word	0x42980000
 800faf8:	42d60000 	.word	0x42d60000
 800fafc:	429a0000 	.word	0x429a0000
 800fb00:	42ce0000 	.word	0x42ce0000
 800fb04:	43d70000 	.word	0x43d70000
 800fb08:	42820000 	.word	0x42820000
 800fb0c:	42a00000 	.word	0x42a00000
 800fb10:	43e10000 	.word	0x43e10000
 800fb14:	42700000 	.word	0x42700000
 800fb18:	428e0000 	.word	0x428e0000
 800fb1c:	41d80000 	.word	0x41d80000
 800fb20:	42b20000 	.word	0x42b20000
 800fb24:	42040000 	.word	0x42040000
 800fb28:	42b40000 	.word	0x42b40000
 800fb2c:	44188000 	.word	0x44188000
 800fb30:	42860000 	.word	0x42860000
 800fb34:	42920000 	.word	0x42920000
 800fb38:	42640000 	.word	0x42640000
 800fb3c:	42500000 	.word	0x42500000
	speed300_shortest.turn135out_R.g_speed =
 800fb40:	4a9a      	ldr	r2, [pc, #616]	; (800fdac <input_parameter+0x540>)
 800fb42:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	speed300_shortest.turn135out_R.t_speed = 660;
 800fb46:	4b99      	ldr	r3, [pc, #612]	; (800fdac <input_parameter+0x540>)
 800fb48:	4a99      	ldr	r2, [pc, #612]	; (800fdb0 <input_parameter+0x544>)
 800fb4a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed300_shortest.turn135out_R.t_acc = 8000;
 800fb4e:	4b97      	ldr	r3, [pc, #604]	; (800fdac <input_parameter+0x540>)
 800fb50:	4a98      	ldr	r2, [pc, #608]	; (800fdb4 <input_parameter+0x548>)
 800fb52:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed300_shortest.turn135out_R.f_ofset = 55;
 800fb56:	4b95      	ldr	r3, [pc, #596]	; (800fdac <input_parameter+0x540>)
 800fb58:	4a97      	ldr	r2, [pc, #604]	; (800fdb8 <input_parameter+0x54c>)
 800fb5a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed300_shortest.turn135out_R.e_ofset = 100;
 800fb5e:	4b93      	ldr	r3, [pc, #588]	; (800fdac <input_parameter+0x540>)
 800fb60:	4a96      	ldr	r2, [pc, #600]	; (800fdbc <input_parameter+0x550>)
 800fb62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed300_shortest.turn135out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 800fb66:	4b91      	ldr	r3, [pc, #580]	; (800fdac <input_parameter+0x540>)
 800fb68:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_L.g_speed =
 800fb6a:	4a90      	ldr	r2, [pc, #576]	; (800fdac <input_parameter+0x540>)
 800fb6c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	speed300_shortest.turn135out_L.t_speed = 660;
 800fb70:	4b8e      	ldr	r3, [pc, #568]	; (800fdac <input_parameter+0x540>)
 800fb72:	4a8f      	ldr	r2, [pc, #572]	; (800fdb0 <input_parameter+0x544>)
 800fb74:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed300_shortest.turn135out_L.t_acc = 8000;
 800fb78:	4b8c      	ldr	r3, [pc, #560]	; (800fdac <input_parameter+0x540>)
 800fb7a:	4a8e      	ldr	r2, [pc, #568]	; (800fdb4 <input_parameter+0x548>)
 800fb7c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed300_shortest.turn135out_L.f_ofset = 55;
 800fb80:	4b8a      	ldr	r3, [pc, #552]	; (800fdac <input_parameter+0x540>)
 800fb82:	4a8d      	ldr	r2, [pc, #564]	; (800fdb8 <input_parameter+0x54c>)
 800fb84:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed300_shortest.turn135out_L.e_ofset = 103;
 800fb88:	4b88      	ldr	r3, [pc, #544]	; (800fdac <input_parameter+0x540>)
 800fb8a:	4a8d      	ldr	r2, [pc, #564]	; (800fdc0 <input_parameter+0x554>)
 800fb8c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed300_shortest.V90_R.g_speed = speed300_shortest.TurnCentervelocity;
 800fb90:	4b86      	ldr	r3, [pc, #536]	; (800fdac <input_parameter+0x540>)
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	4a85      	ldr	r2, [pc, #532]	; (800fdac <input_parameter+0x540>)
 800fb96:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	speed300_shortest.V90_R.t_speed = 700;
 800fb9a:	4b84      	ldr	r3, [pc, #528]	; (800fdac <input_parameter+0x540>)
 800fb9c:	4a89      	ldr	r2, [pc, #548]	; (800fdc4 <input_parameter+0x558>)
 800fb9e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed300_shortest.V90_R.t_acc = 11000;
 800fba2:	4b82      	ldr	r3, [pc, #520]	; (800fdac <input_parameter+0x540>)
 800fba4:	4a88      	ldr	r2, [pc, #544]	; (800fdc8 <input_parameter+0x55c>)
 800fba6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed300_shortest.V90_R.f_ofset = 35;
 800fbaa:	4b80      	ldr	r3, [pc, #512]	; (800fdac <input_parameter+0x540>)
 800fbac:	4a87      	ldr	r2, [pc, #540]	; (800fdcc <input_parameter+0x560>)
 800fbae:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed300_shortest.V90_R.e_ofset = 56;
 800fbb2:	4b7e      	ldr	r3, [pc, #504]	; (800fdac <input_parameter+0x540>)
 800fbb4:	4a86      	ldr	r2, [pc, #536]	; (800fdd0 <input_parameter+0x564>)
 800fbb6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed300_shortest.V90_L.g_speed = speed300_shortest.TurnCentervelocity;
 800fbba:	4b7c      	ldr	r3, [pc, #496]	; (800fdac <input_parameter+0x540>)
 800fbbc:	685b      	ldr	r3, [r3, #4]
 800fbbe:	4a7b      	ldr	r2, [pc, #492]	; (800fdac <input_parameter+0x540>)
 800fbc0:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	speed300_shortest.V90_L.t_speed = 700;
 800fbc4:	4b79      	ldr	r3, [pc, #484]	; (800fdac <input_parameter+0x540>)
 800fbc6:	4a7f      	ldr	r2, [pc, #508]	; (800fdc4 <input_parameter+0x558>)
 800fbc8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed300_shortest.V90_L.t_acc = 11000;
 800fbcc:	4b77      	ldr	r3, [pc, #476]	; (800fdac <input_parameter+0x540>)
 800fbce:	4a7e      	ldr	r2, [pc, #504]	; (800fdc8 <input_parameter+0x55c>)
 800fbd0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed300_shortest.V90_L.f_ofset = 32;
 800fbd4:	4b75      	ldr	r3, [pc, #468]	; (800fdac <input_parameter+0x540>)
 800fbd6:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 800fbda:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed300_shortest.V90_L.e_ofset = 60;
 800fbde:	4b73      	ldr	r3, [pc, #460]	; (800fdac <input_parameter+0x540>)
 800fbe0:	4a7c      	ldr	r2, [pc, #496]	; (800fdd4 <input_parameter+0x568>)
 800fbe2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

//*********************************800********************************************

	speed800_shortest.SlalomCentervelocity = 500;
 800fbe6:	4b7c      	ldr	r3, [pc, #496]	; (800fdd8 <input_parameter+0x56c>)
 800fbe8:	4a7c      	ldr	r2, [pc, #496]	; (800fddc <input_parameter+0x570>)
 800fbea:	601a      	str	r2, [r3, #0]
	speed800_shortest.TurnCentervelocity = 500;
 800fbec:	4b7a      	ldr	r3, [pc, #488]	; (800fdd8 <input_parameter+0x56c>)
 800fbee:	4a7b      	ldr	r2, [pc, #492]	; (800fddc <input_parameter+0x570>)
 800fbf0:	605a      	str	r2, [r3, #4]

	speed800_shortest.slalom_R.g_speed = 1000;
 800fbf2:	4b79      	ldr	r3, [pc, #484]	; (800fdd8 <input_parameter+0x56c>)
 800fbf4:	4a7a      	ldr	r2, [pc, #488]	; (800fde0 <input_parameter+0x574>)
 800fbf6:	609a      	str	r2, [r3, #8]
	speed800_shortest.slalom_R.t_speed = 1000;
 800fbf8:	4b77      	ldr	r3, [pc, #476]	; (800fdd8 <input_parameter+0x56c>)
 800fbfa:	4a79      	ldr	r2, [pc, #484]	; (800fde0 <input_parameter+0x574>)
 800fbfc:	615a      	str	r2, [r3, #20]
	speed800_shortest.slalom_R.t_acc = 14000;
 800fbfe:	4b76      	ldr	r3, [pc, #472]	; (800fdd8 <input_parameter+0x56c>)
 800fc00:	4a78      	ldr	r2, [pc, #480]	; (800fde4 <input_parameter+0x578>)
 800fc02:	619a      	str	r2, [r3, #24]
	speed800_shortest.slalom_R.f_ofset = 0;
 800fc04:	4b74      	ldr	r3, [pc, #464]	; (800fdd8 <input_parameter+0x56c>)
 800fc06:	f04f 0200 	mov.w	r2, #0
 800fc0a:	60da      	str	r2, [r3, #12]
	speed800_shortest.slalom_R.e_ofset = 15;
 800fc0c:	4b72      	ldr	r3, [pc, #456]	; (800fdd8 <input_parameter+0x56c>)
 800fc0e:	4a76      	ldr	r2, [pc, #472]	; (800fde8 <input_parameter+0x57c>)
 800fc10:	611a      	str	r2, [r3, #16]

	speed800_shortest.slalom_L.g_speed = 1000;
 800fc12:	4b71      	ldr	r3, [pc, #452]	; (800fdd8 <input_parameter+0x56c>)
 800fc14:	4a72      	ldr	r2, [pc, #456]	; (800fde0 <input_parameter+0x574>)
 800fc16:	61da      	str	r2, [r3, #28]
	speed800_shortest.slalom_L.t_speed = 1000;
 800fc18:	4b6f      	ldr	r3, [pc, #444]	; (800fdd8 <input_parameter+0x56c>)
 800fc1a:	4a71      	ldr	r2, [pc, #452]	; (800fde0 <input_parameter+0x574>)
 800fc1c:	629a      	str	r2, [r3, #40]	; 0x28
	speed800_shortest.slalom_L.t_acc = 14000;
 800fc1e:	4b6e      	ldr	r3, [pc, #440]	; (800fdd8 <input_parameter+0x56c>)
 800fc20:	4a70      	ldr	r2, [pc, #448]	; (800fde4 <input_parameter+0x578>)
 800fc22:	62da      	str	r2, [r3, #44]	; 0x2c
	speed800_shortest.slalom_L.f_ofset = 5;
 800fc24:	4b6c      	ldr	r3, [pc, #432]	; (800fdd8 <input_parameter+0x56c>)
 800fc26:	4a71      	ldr	r2, [pc, #452]	; (800fdec <input_parameter+0x580>)
 800fc28:	621a      	str	r2, [r3, #32]
	speed800_shortest.slalom_L.e_ofset = 5;
 800fc2a:	4b6b      	ldr	r3, [pc, #428]	; (800fdd8 <input_parameter+0x56c>)
 800fc2c:	4a6f      	ldr	r2, [pc, #444]	; (800fdec <input_parameter+0x580>)
 800fc2e:	625a      	str	r2, [r3, #36]	; 0x24

	speed800_shortest.turn90_R.g_speed = 500;
 800fc30:	4b69      	ldr	r3, [pc, #420]	; (800fdd8 <input_parameter+0x56c>)
 800fc32:	4a6a      	ldr	r2, [pc, #424]	; (800fddc <input_parameter+0x570>)
 800fc34:	631a      	str	r2, [r3, #48]	; 0x30
	speed800_shortest.turn90_R.t_speed = 650;
 800fc36:	4b68      	ldr	r3, [pc, #416]	; (800fdd8 <input_parameter+0x56c>)
 800fc38:	4a6d      	ldr	r2, [pc, #436]	; (800fdf0 <input_parameter+0x584>)
 800fc3a:	63da      	str	r2, [r3, #60]	; 0x3c
	speed800_shortest.turn90_R.t_acc = 15000;
 800fc3c:	4b66      	ldr	r3, [pc, #408]	; (800fdd8 <input_parameter+0x56c>)
 800fc3e:	4a6d      	ldr	r2, [pc, #436]	; (800fdf4 <input_parameter+0x588>)
 800fc40:	641a      	str	r2, [r3, #64]	; 0x40
	speed800_shortest.turn90_R.f_ofset = 69;
 800fc42:	4b65      	ldr	r3, [pc, #404]	; (800fdd8 <input_parameter+0x56c>)
 800fc44:	4a6c      	ldr	r2, [pc, #432]	; (800fdf8 <input_parameter+0x58c>)
 800fc46:	635a      	str	r2, [r3, #52]	; 0x34
	speed800_shortest.turn90_R.e_ofset = 52;
 800fc48:	4b63      	ldr	r3, [pc, #396]	; (800fdd8 <input_parameter+0x56c>)
 800fc4a:	4a6c      	ldr	r2, [pc, #432]	; (800fdfc <input_parameter+0x590>)
 800fc4c:	639a      	str	r2, [r3, #56]	; 0x38

	speed800_shortest.turn90_L.g_speed = 500;
 800fc4e:	4b62      	ldr	r3, [pc, #392]	; (800fdd8 <input_parameter+0x56c>)
 800fc50:	4a62      	ldr	r2, [pc, #392]	; (800fddc <input_parameter+0x570>)
 800fc52:	645a      	str	r2, [r3, #68]	; 0x44
	speed800_shortest.turn90_L.t_speed = 650;
 800fc54:	4b60      	ldr	r3, [pc, #384]	; (800fdd8 <input_parameter+0x56c>)
 800fc56:	4a66      	ldr	r2, [pc, #408]	; (800fdf0 <input_parameter+0x584>)
 800fc58:	651a      	str	r2, [r3, #80]	; 0x50
	speed800_shortest.turn90_L.t_acc = 15000;
 800fc5a:	4b5f      	ldr	r3, [pc, #380]	; (800fdd8 <input_parameter+0x56c>)
 800fc5c:	4a65      	ldr	r2, [pc, #404]	; (800fdf4 <input_parameter+0x588>)
 800fc5e:	655a      	str	r2, [r3, #84]	; 0x54
	speed800_shortest.turn90_L.f_ofset = 79;
 800fc60:	4b5d      	ldr	r3, [pc, #372]	; (800fdd8 <input_parameter+0x56c>)
 800fc62:	4a67      	ldr	r2, [pc, #412]	; (800fe00 <input_parameter+0x594>)
 800fc64:	649a      	str	r2, [r3, #72]	; 0x48
	speed800_shortest.turn90_L.e_ofset = 49;
 800fc66:	4b5c      	ldr	r3, [pc, #368]	; (800fdd8 <input_parameter+0x56c>)
 800fc68:	4a66      	ldr	r2, [pc, #408]	; (800fe04 <input_parameter+0x598>)
 800fc6a:	64da      	str	r2, [r3, #76]	; 0x4c

	speed800_shortest.turn180_R.g_speed = 500;
 800fc6c:	4b5a      	ldr	r3, [pc, #360]	; (800fdd8 <input_parameter+0x56c>)
 800fc6e:	4a5b      	ldr	r2, [pc, #364]	; (800fddc <input_parameter+0x570>)
 800fc70:	659a      	str	r2, [r3, #88]	; 0x58
	speed800_shortest.turn180_R.t_speed = 600;
 800fc72:	4b59      	ldr	r3, [pc, #356]	; (800fdd8 <input_parameter+0x56c>)
 800fc74:	4a64      	ldr	r2, [pc, #400]	; (800fe08 <input_parameter+0x59c>)
 800fc76:	665a      	str	r2, [r3, #100]	; 0x64
	speed800_shortest.turn180_R.t_acc = 15000;
 800fc78:	4b57      	ldr	r3, [pc, #348]	; (800fdd8 <input_parameter+0x56c>)
 800fc7a:	4a5e      	ldr	r2, [pc, #376]	; (800fdf4 <input_parameter+0x588>)
 800fc7c:	669a      	str	r2, [r3, #104]	; 0x68
	speed800_shortest.turn180_R.f_ofset = 65;
 800fc7e:	4b56      	ldr	r3, [pc, #344]	; (800fdd8 <input_parameter+0x56c>)
 800fc80:	4a62      	ldr	r2, [pc, #392]	; (800fe0c <input_parameter+0x5a0>)
 800fc82:	65da      	str	r2, [r3, #92]	; 0x5c
	speed800_shortest.turn180_R.e_ofset = 50;
 800fc84:	4b54      	ldr	r3, [pc, #336]	; (800fdd8 <input_parameter+0x56c>)
 800fc86:	4a62      	ldr	r2, [pc, #392]	; (800fe10 <input_parameter+0x5a4>)
 800fc88:	661a      	str	r2, [r3, #96]	; 0x60

	speed800_shortest.turn180_L.g_speed = 500;
 800fc8a:	4b53      	ldr	r3, [pc, #332]	; (800fdd8 <input_parameter+0x56c>)
 800fc8c:	4a53      	ldr	r2, [pc, #332]	; (800fddc <input_parameter+0x570>)
 800fc8e:	66da      	str	r2, [r3, #108]	; 0x6c
	speed800_shortest.turn180_L.t_speed = 600;
 800fc90:	4b51      	ldr	r3, [pc, #324]	; (800fdd8 <input_parameter+0x56c>)
 800fc92:	4a5d      	ldr	r2, [pc, #372]	; (800fe08 <input_parameter+0x59c>)
 800fc94:	679a      	str	r2, [r3, #120]	; 0x78
	speed800_shortest.turn180_L.t_acc = 15000;
 800fc96:	4b50      	ldr	r3, [pc, #320]	; (800fdd8 <input_parameter+0x56c>)
 800fc98:	4a56      	ldr	r2, [pc, #344]	; (800fdf4 <input_parameter+0x588>)
 800fc9a:	67da      	str	r2, [r3, #124]	; 0x7c
	speed800_shortest.turn180_L.f_ofset = 60;
 800fc9c:	4b4e      	ldr	r3, [pc, #312]	; (800fdd8 <input_parameter+0x56c>)
 800fc9e:	4a4d      	ldr	r2, [pc, #308]	; (800fdd4 <input_parameter+0x568>)
 800fca0:	671a      	str	r2, [r3, #112]	; 0x70
	speed800_shortest.turn180_L.e_ofset = 54;
 800fca2:	4b4d      	ldr	r3, [pc, #308]	; (800fdd8 <input_parameter+0x56c>)
 800fca4:	4a5b      	ldr	r2, [pc, #364]	; (800fe14 <input_parameter+0x5a8>)
 800fca6:	675a      	str	r2, [r3, #116]	; 0x74

	speed800_shortest.turn45in_R.g_speed = 500;
 800fca8:	4b4b      	ldr	r3, [pc, #300]	; (800fdd8 <input_parameter+0x56c>)
 800fcaa:	4a4c      	ldr	r2, [pc, #304]	; (800fddc <input_parameter+0x570>)
 800fcac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	speed800_shortest.turn45in_R.t_speed = 650;
 800fcb0:	4b49      	ldr	r3, [pc, #292]	; (800fdd8 <input_parameter+0x56c>)
 800fcb2:	4a4f      	ldr	r2, [pc, #316]	; (800fdf0 <input_parameter+0x584>)
 800fcb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed800_shortest.turn45in_R.t_acc = 15000;
 800fcb8:	4b47      	ldr	r3, [pc, #284]	; (800fdd8 <input_parameter+0x56c>)
 800fcba:	4a4e      	ldr	r2, [pc, #312]	; (800fdf4 <input_parameter+0x588>)
 800fcbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed800_shortest.turn45in_R.f_ofset = 60;
 800fcc0:	4b45      	ldr	r3, [pc, #276]	; (800fdd8 <input_parameter+0x56c>)
 800fcc2:	4a44      	ldr	r2, [pc, #272]	; (800fdd4 <input_parameter+0x568>)
 800fcc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed800_shortest.turn45in_R.e_ofset = 40;
 800fcc8:	4b43      	ldr	r3, [pc, #268]	; (800fdd8 <input_parameter+0x56c>)
 800fcca:	4a53      	ldr	r2, [pc, #332]	; (800fe18 <input_parameter+0x5ac>)
 800fccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed800_shortest.turn45in_L.g_speed = 500;
 800fcd0:	4b41      	ldr	r3, [pc, #260]	; (800fdd8 <input_parameter+0x56c>)
 800fcd2:	4a42      	ldr	r2, [pc, #264]	; (800fddc <input_parameter+0x570>)
 800fcd4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	speed800_shortest.turn45in_L.t_speed = 650;
 800fcd8:	4b3f      	ldr	r3, [pc, #252]	; (800fdd8 <input_parameter+0x56c>)
 800fcda:	4a45      	ldr	r2, [pc, #276]	; (800fdf0 <input_parameter+0x584>)
 800fcdc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed800_shortest.turn45in_L.t_acc = 15000;
 800fce0:	4b3d      	ldr	r3, [pc, #244]	; (800fdd8 <input_parameter+0x56c>)
 800fce2:	4a44      	ldr	r2, [pc, #272]	; (800fdf4 <input_parameter+0x588>)
 800fce4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed800_shortest.turn45in_L.f_ofset = 64;
 800fce8:	4b3b      	ldr	r3, [pc, #236]	; (800fdd8 <input_parameter+0x56c>)
 800fcea:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 800fcee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed800_shortest.turn45in_L.e_ofset = 44;
 800fcf2:	4b39      	ldr	r3, [pc, #228]	; (800fdd8 <input_parameter+0x56c>)
 800fcf4:	4a49      	ldr	r2, [pc, #292]	; (800fe1c <input_parameter+0x5b0>)
 800fcf6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed800_shortest.turn135in_R.g_speed = 500;
 800fcfa:	4b37      	ldr	r3, [pc, #220]	; (800fdd8 <input_parameter+0x56c>)
 800fcfc:	4a37      	ldr	r2, [pc, #220]	; (800fddc <input_parameter+0x570>)
 800fcfe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	speed800_shortest.turn135in_R.t_speed = 650;
 800fd02:	4b35      	ldr	r3, [pc, #212]	; (800fdd8 <input_parameter+0x56c>)
 800fd04:	4a3a      	ldr	r2, [pc, #232]	; (800fdf0 <input_parameter+0x584>)
 800fd06:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed800_shortest.turn135in_R.t_acc = 15000;
 800fd0a:	4b33      	ldr	r3, [pc, #204]	; (800fdd8 <input_parameter+0x56c>)
 800fd0c:	4a39      	ldr	r2, [pc, #228]	; (800fdf4 <input_parameter+0x588>)
 800fd0e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed800_shortest.turn135in_R.f_ofset = 75;
 800fd12:	4b31      	ldr	r3, [pc, #196]	; (800fdd8 <input_parameter+0x56c>)
 800fd14:	4a42      	ldr	r2, [pc, #264]	; (800fe20 <input_parameter+0x5b4>)
 800fd16:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed800_shortest.turn135in_R.e_ofset = 40;
 800fd1a:	4b2f      	ldr	r3, [pc, #188]	; (800fdd8 <input_parameter+0x56c>)
 800fd1c:	4a3e      	ldr	r2, [pc, #248]	; (800fe18 <input_parameter+0x5ac>)
 800fd1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed800_shortest.turn135in_L.g_speed = 500;
 800fd22:	4b2d      	ldr	r3, [pc, #180]	; (800fdd8 <input_parameter+0x56c>)
 800fd24:	4a2d      	ldr	r2, [pc, #180]	; (800fddc <input_parameter+0x570>)
 800fd26:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	speed800_shortest.turn135in_L.t_speed = 650;
 800fd2a:	4b2b      	ldr	r3, [pc, #172]	; (800fdd8 <input_parameter+0x56c>)
 800fd2c:	4a30      	ldr	r2, [pc, #192]	; (800fdf0 <input_parameter+0x584>)
 800fd2e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed800_shortest.turn135in_L.t_acc = 15000;
 800fd32:	4b29      	ldr	r3, [pc, #164]	; (800fdd8 <input_parameter+0x56c>)
 800fd34:	4a2f      	ldr	r2, [pc, #188]	; (800fdf4 <input_parameter+0x588>)
 800fd36:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed800_shortest.turn135in_L.f_ofset = 70;
 800fd3a:	4b27      	ldr	r3, [pc, #156]	; (800fdd8 <input_parameter+0x56c>)
 800fd3c:	4a39      	ldr	r2, [pc, #228]	; (800fe24 <input_parameter+0x5b8>)
 800fd3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed800_shortest.turn135in_L.e_ofset = 44;
 800fd42:	4b25      	ldr	r3, [pc, #148]	; (800fdd8 <input_parameter+0x56c>)
 800fd44:	4a35      	ldr	r2, [pc, #212]	; (800fe1c <input_parameter+0x5b0>)
 800fd46:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed800_shortest.turn45out_R.g_speed = 500;
 800fd4a:	4b23      	ldr	r3, [pc, #140]	; (800fdd8 <input_parameter+0x56c>)
 800fd4c:	4a23      	ldr	r2, [pc, #140]	; (800fddc <input_parameter+0x570>)
 800fd4e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	speed800_shortest.turn45out_R.t_speed = 650;
 800fd52:	4b21      	ldr	r3, [pc, #132]	; (800fdd8 <input_parameter+0x56c>)
 800fd54:	4a26      	ldr	r2, [pc, #152]	; (800fdf0 <input_parameter+0x584>)
 800fd56:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed800_shortest.turn45out_R.t_acc = 15000;
 800fd5a:	4b1f      	ldr	r3, [pc, #124]	; (800fdd8 <input_parameter+0x56c>)
 800fd5c:	4a25      	ldr	r2, [pc, #148]	; (800fdf4 <input_parameter+0x588>)
 800fd5e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed800_shortest.turn45out_R.f_ofset = 75;
 800fd62:	4b1d      	ldr	r3, [pc, #116]	; (800fdd8 <input_parameter+0x56c>)
 800fd64:	4a2e      	ldr	r2, [pc, #184]	; (800fe20 <input_parameter+0x5b4>)
 800fd66:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed800_shortest.turn45out_R.e_ofset = 48;
 800fd6a:	4b1b      	ldr	r3, [pc, #108]	; (800fdd8 <input_parameter+0x56c>)
 800fd6c:	4a2e      	ldr	r2, [pc, #184]	; (800fe28 <input_parameter+0x5bc>)
 800fd6e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed800_shortest.turn45out_L.g_speed = 500;
 800fd72:	4b19      	ldr	r3, [pc, #100]	; (800fdd8 <input_parameter+0x56c>)
 800fd74:	4a19      	ldr	r2, [pc, #100]	; (800fddc <input_parameter+0x570>)
 800fd76:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	speed800_shortest.turn45out_L.t_speed = 650;
 800fd7a:	4b17      	ldr	r3, [pc, #92]	; (800fdd8 <input_parameter+0x56c>)
 800fd7c:	4a1c      	ldr	r2, [pc, #112]	; (800fdf0 <input_parameter+0x584>)
 800fd7e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed800_shortest.turn45out_L.t_acc = 15000;
 800fd82:	4b15      	ldr	r3, [pc, #84]	; (800fdd8 <input_parameter+0x56c>)
 800fd84:	4a1b      	ldr	r2, [pc, #108]	; (800fdf4 <input_parameter+0x588>)
 800fd86:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed800_shortest.turn45out_L.f_ofset = 58;
 800fd8a:	4b13      	ldr	r3, [pc, #76]	; (800fdd8 <input_parameter+0x56c>)
 800fd8c:	4a27      	ldr	r2, [pc, #156]	; (800fe2c <input_parameter+0x5c0>)
 800fd8e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed800_shortest.turn45out_L.e_ofset = 48;
 800fd92:	4b11      	ldr	r3, [pc, #68]	; (800fdd8 <input_parameter+0x56c>)
 800fd94:	4a24      	ldr	r2, [pc, #144]	; (800fe28 <input_parameter+0x5bc>)
 800fd96:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed800_shortest.turn135out_R.g_speed = 500;
 800fd9a:	4b0f      	ldr	r3, [pc, #60]	; (800fdd8 <input_parameter+0x56c>)
 800fd9c:	4a0f      	ldr	r2, [pc, #60]	; (800fddc <input_parameter+0x570>)
 800fd9e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	speed800_shortest.turn135out_R.t_speed = 650;
 800fda2:	4b0d      	ldr	r3, [pc, #52]	; (800fdd8 <input_parameter+0x56c>)
 800fda4:	4a12      	ldr	r2, [pc, #72]	; (800fdf0 <input_parameter+0x584>)
 800fda6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800fdaa:	e041      	b.n	800fe30 <input_parameter+0x5c4>
 800fdac:	2000c690 	.word	0x2000c690
 800fdb0:	44250000 	.word	0x44250000
 800fdb4:	45fa0000 	.word	0x45fa0000
 800fdb8:	425c0000 	.word	0x425c0000
 800fdbc:	42c80000 	.word	0x42c80000
 800fdc0:	42ce0000 	.word	0x42ce0000
 800fdc4:	442f0000 	.word	0x442f0000
 800fdc8:	462be000 	.word	0x462be000
 800fdcc:	420c0000 	.word	0x420c0000
 800fdd0:	42600000 	.word	0x42600000
 800fdd4:	42700000 	.word	0x42700000
 800fdd8:	2000c7d8 	.word	0x2000c7d8
 800fddc:	43fa0000 	.word	0x43fa0000
 800fde0:	447a0000 	.word	0x447a0000
 800fde4:	465ac000 	.word	0x465ac000
 800fde8:	41700000 	.word	0x41700000
 800fdec:	40a00000 	.word	0x40a00000
 800fdf0:	44228000 	.word	0x44228000
 800fdf4:	466a6000 	.word	0x466a6000
 800fdf8:	428a0000 	.word	0x428a0000
 800fdfc:	42500000 	.word	0x42500000
 800fe00:	429e0000 	.word	0x429e0000
 800fe04:	42440000 	.word	0x42440000
 800fe08:	44160000 	.word	0x44160000
 800fe0c:	42820000 	.word	0x42820000
 800fe10:	42480000 	.word	0x42480000
 800fe14:	42580000 	.word	0x42580000
 800fe18:	42200000 	.word	0x42200000
 800fe1c:	42300000 	.word	0x42300000
 800fe20:	42960000 	.word	0x42960000
 800fe24:	428c0000 	.word	0x428c0000
 800fe28:	42400000 	.word	0x42400000
 800fe2c:	42680000 	.word	0x42680000
	speed800_shortest.turn135out_R.t_acc = 15000;
 800fe30:	4b9b      	ldr	r3, [pc, #620]	; (80100a0 <input_parameter+0x834>)
 800fe32:	4a9c      	ldr	r2, [pc, #624]	; (80100a4 <input_parameter+0x838>)
 800fe34:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed800_shortest.turn135out_R.f_ofset = 75;
 800fe38:	4b99      	ldr	r3, [pc, #612]	; (80100a0 <input_parameter+0x834>)
 800fe3a:	4a9b      	ldr	r2, [pc, #620]	; (80100a8 <input_parameter+0x83c>)
 800fe3c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed800_shortest.turn135out_R.e_ofset = 60;
 800fe40:	4b97      	ldr	r3, [pc, #604]	; (80100a0 <input_parameter+0x834>)
 800fe42:	4a9a      	ldr	r2, [pc, #616]	; (80100ac <input_parameter+0x840>)
 800fe44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed800_shortest.turn135out_L.g_speed = 500;
 800fe48:	4b95      	ldr	r3, [pc, #596]	; (80100a0 <input_parameter+0x834>)
 800fe4a:	4a99      	ldr	r2, [pc, #612]	; (80100b0 <input_parameter+0x844>)
 800fe4c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	speed800_shortest.turn135out_L.t_speed = 650;
 800fe50:	4b93      	ldr	r3, [pc, #588]	; (80100a0 <input_parameter+0x834>)
 800fe52:	4a98      	ldr	r2, [pc, #608]	; (80100b4 <input_parameter+0x848>)
 800fe54:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed800_shortest.turn135out_L.t_acc = 15000;
 800fe58:	4b91      	ldr	r3, [pc, #580]	; (80100a0 <input_parameter+0x834>)
 800fe5a:	4a92      	ldr	r2, [pc, #584]	; (80100a4 <input_parameter+0x838>)
 800fe5c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed800_shortest.turn135out_L.f_ofset = 80;
 800fe60:	4b8f      	ldr	r3, [pc, #572]	; (80100a0 <input_parameter+0x834>)
 800fe62:	4a95      	ldr	r2, [pc, #596]	; (80100b8 <input_parameter+0x84c>)
 800fe64:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed800_shortest.turn135out_L.e_ofset = 64;
 800fe68:	4b8d      	ldr	r3, [pc, #564]	; (80100a0 <input_parameter+0x834>)
 800fe6a:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 800fe6e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed800_shortest.V90_R.g_speed = 500;
 800fe72:	4b8b      	ldr	r3, [pc, #556]	; (80100a0 <input_parameter+0x834>)
 800fe74:	4a8e      	ldr	r2, [pc, #568]	; (80100b0 <input_parameter+0x844>)
 800fe76:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	speed800_shortest.V90_R.t_speed = 650;
 800fe7a:	4b89      	ldr	r3, [pc, #548]	; (80100a0 <input_parameter+0x834>)
 800fe7c:	4a8d      	ldr	r2, [pc, #564]	; (80100b4 <input_parameter+0x848>)
 800fe7e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed800_shortest.V90_R.t_acc = 15000;
 800fe82:	4b87      	ldr	r3, [pc, #540]	; (80100a0 <input_parameter+0x834>)
 800fe84:	4a87      	ldr	r2, [pc, #540]	; (80100a4 <input_parameter+0x838>)
 800fe86:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed800_shortest.V90_R.f_ofset = 55;
 800fe8a:	4b85      	ldr	r3, [pc, #532]	; (80100a0 <input_parameter+0x834>)
 800fe8c:	4a8b      	ldr	r2, [pc, #556]	; (80100bc <input_parameter+0x850>)
 800fe8e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed800_shortest.V90_R.e_ofset = 40;
 800fe92:	4b83      	ldr	r3, [pc, #524]	; (80100a0 <input_parameter+0x834>)
 800fe94:	4a8a      	ldr	r2, [pc, #552]	; (80100c0 <input_parameter+0x854>)
 800fe96:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed800_shortest.V90_L.g_speed = 500;
 800fe9a:	4b81      	ldr	r3, [pc, #516]	; (80100a0 <input_parameter+0x834>)
 800fe9c:	4a84      	ldr	r2, [pc, #528]	; (80100b0 <input_parameter+0x844>)
 800fe9e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	speed800_shortest.V90_L.t_speed = 650;
 800fea2:	4b7f      	ldr	r3, [pc, #508]	; (80100a0 <input_parameter+0x834>)
 800fea4:	4a83      	ldr	r2, [pc, #524]	; (80100b4 <input_parameter+0x848>)
 800fea6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed800_shortest.V90_L.t_acc = 15000;
 800feaa:	4b7d      	ldr	r3, [pc, #500]	; (80100a0 <input_parameter+0x834>)
 800feac:	4a7d      	ldr	r2, [pc, #500]	; (80100a4 <input_parameter+0x838>)
 800feae:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed800_shortest.V90_L.f_ofset = 50;
 800feb2:	4b7b      	ldr	r3, [pc, #492]	; (80100a0 <input_parameter+0x834>)
 800feb4:	4a83      	ldr	r2, [pc, #524]	; (80100c4 <input_parameter+0x858>)
 800feb6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed800_shortest.V90_L.e_ofset = 44;
 800feba:	4b79      	ldr	r3, [pc, #484]	; (80100a0 <input_parameter+0x834>)
 800febc:	4a82      	ldr	r2, [pc, #520]	; (80100c8 <input_parameter+0x85c>)
 800febe:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


	//********************************800********************************************
	speed800_shortest_mollifier.SlalomCentervelocity = 800;
 800fec2:	4b82      	ldr	r3, [pc, #520]	; (80100cc <input_parameter+0x860>)
 800fec4:	4a82      	ldr	r2, [pc, #520]	; (80100d0 <input_parameter+0x864>)
 800fec6:	601a      	str	r2, [r3, #0]
	speed800_shortest_mollifier.TurnCentervelocity = 800;
 800fec8:	4b80      	ldr	r3, [pc, #512]	; (80100cc <input_parameter+0x860>)
 800feca:	4a81      	ldr	r2, [pc, #516]	; (80100d0 <input_parameter+0x864>)
 800fecc:	605a      	str	r2, [r3, #4]

	speed800_shortest_mollifier.slalom_R.g_speed =
			speed800_shortest_mollifier.SlalomCentervelocity;
 800fece:	4b7f      	ldr	r3, [pc, #508]	; (80100cc <input_parameter+0x860>)
 800fed0:	681b      	ldr	r3, [r3, #0]
	speed800_shortest_mollifier.slalom_R.g_speed =
 800fed2:	4a7e      	ldr	r2, [pc, #504]	; (80100cc <input_parameter+0x860>)
 800fed4:	6093      	str	r3, [r2, #8]
	speed800_shortest_mollifier.slalom_R.t_speed = 1600;
 800fed6:	4b7d      	ldr	r3, [pc, #500]	; (80100cc <input_parameter+0x860>)
 800fed8:	4a7e      	ldr	r2, [pc, #504]	; (80100d4 <input_parameter+0x868>)
 800feda:	615a      	str	r2, [r3, #20]
	speed800_shortest_mollifier.slalom_R.t_acc = 60000;
 800fedc:	4b7b      	ldr	r3, [pc, #492]	; (80100cc <input_parameter+0x860>)
 800fede:	4a7e      	ldr	r2, [pc, #504]	; (80100d8 <input_parameter+0x86c>)
 800fee0:	619a      	str	r2, [r3, #24]
	speed800_shortest_mollifier.slalom_R.f_ofset = 15;
 800fee2:	4b7a      	ldr	r3, [pc, #488]	; (80100cc <input_parameter+0x860>)
 800fee4:	4a7d      	ldr	r2, [pc, #500]	; (80100dc <input_parameter+0x870>)
 800fee6:	60da      	str	r2, [r3, #12]
	speed800_shortest_mollifier.slalom_R.e_ofset = 28;
 800fee8:	4b78      	ldr	r3, [pc, #480]	; (80100cc <input_parameter+0x860>)
 800feea:	4a7d      	ldr	r2, [pc, #500]	; (80100e0 <input_parameter+0x874>)
 800feec:	611a      	str	r2, [r3, #16]

	speed800_shortest_mollifier.slalom_L.g_speed =
			speed800_shortest_mollifier.SlalomCentervelocity;
 800feee:	4b77      	ldr	r3, [pc, #476]	; (80100cc <input_parameter+0x860>)
 800fef0:	681b      	ldr	r3, [r3, #0]
	speed800_shortest_mollifier.slalom_L.g_speed =
 800fef2:	4a76      	ldr	r2, [pc, #472]	; (80100cc <input_parameter+0x860>)
 800fef4:	61d3      	str	r3, [r2, #28]
	speed800_shortest_mollifier.slalom_L.t_speed = 800;
 800fef6:	4b75      	ldr	r3, [pc, #468]	; (80100cc <input_parameter+0x860>)
 800fef8:	4a75      	ldr	r2, [pc, #468]	; (80100d0 <input_parameter+0x864>)
 800fefa:	629a      	str	r2, [r3, #40]	; 0x28
	speed800_shortest_mollifier.slalom_L.t_acc = 60000;
 800fefc:	4b73      	ldr	r3, [pc, #460]	; (80100cc <input_parameter+0x860>)
 800fefe:	4a76      	ldr	r2, [pc, #472]	; (80100d8 <input_parameter+0x86c>)
 800ff00:	62da      	str	r2, [r3, #44]	; 0x2c
	speed800_shortest_mollifier.slalom_L.f_ofset = 15;
 800ff02:	4b72      	ldr	r3, [pc, #456]	; (80100cc <input_parameter+0x860>)
 800ff04:	4a75      	ldr	r2, [pc, #468]	; (80100dc <input_parameter+0x870>)
 800ff06:	621a      	str	r2, [r3, #32]
	speed800_shortest_mollifier.slalom_L.e_ofset = 32;
 800ff08:	4b70      	ldr	r3, [pc, #448]	; (80100cc <input_parameter+0x860>)
 800ff0a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 800ff0e:	625a      	str	r2, [r3, #36]	; 0x24

	speed800_shortest_mollifier.turn90_R.g_speed = 800;
 800ff10:	4b6e      	ldr	r3, [pc, #440]	; (80100cc <input_parameter+0x860>)
 800ff12:	4a6f      	ldr	r2, [pc, #444]	; (80100d0 <input_parameter+0x864>)
 800ff14:	631a      	str	r2, [r3, #48]	; 0x30
	speed800_shortest_mollifier.turn90_R.t_speed = 1400;
 800ff16:	4b6d      	ldr	r3, [pc, #436]	; (80100cc <input_parameter+0x860>)
 800ff18:	4a72      	ldr	r2, [pc, #456]	; (80100e4 <input_parameter+0x878>)
 800ff1a:	63da      	str	r2, [r3, #60]	; 0x3c
	speed800_shortest_mollifier.turn90_R.t_acc = 31000;
 800ff1c:	4b6b      	ldr	r3, [pc, #428]	; (80100cc <input_parameter+0x860>)
 800ff1e:	4a72      	ldr	r2, [pc, #456]	; (80100e8 <input_parameter+0x87c>)
 800ff20:	641a      	str	r2, [r3, #64]	; 0x40
	speed800_shortest_mollifier.turn90_R.f_ofset = 49;
 800ff22:	4b6a      	ldr	r3, [pc, #424]	; (80100cc <input_parameter+0x860>)
 800ff24:	4a71      	ldr	r2, [pc, #452]	; (80100ec <input_parameter+0x880>)
 800ff26:	635a      	str	r2, [r3, #52]	; 0x34
	speed800_shortest_mollifier.turn90_R.e_ofset = 91;
 800ff28:	4b68      	ldr	r3, [pc, #416]	; (80100cc <input_parameter+0x860>)
 800ff2a:	4a71      	ldr	r2, [pc, #452]	; (80100f0 <input_parameter+0x884>)
 800ff2c:	639a      	str	r2, [r3, #56]	; 0x38

	speed800_shortest_mollifier.turn90_L.g_speed = 800;
 800ff2e:	4b67      	ldr	r3, [pc, #412]	; (80100cc <input_parameter+0x860>)
 800ff30:	4a67      	ldr	r2, [pc, #412]	; (80100d0 <input_parameter+0x864>)
 800ff32:	645a      	str	r2, [r3, #68]	; 0x44
	speed800_shortest_mollifier.turn90_L.t_speed = 1400;
 800ff34:	4b65      	ldr	r3, [pc, #404]	; (80100cc <input_parameter+0x860>)
 800ff36:	4a6b      	ldr	r2, [pc, #428]	; (80100e4 <input_parameter+0x878>)
 800ff38:	651a      	str	r2, [r3, #80]	; 0x50
	speed800_shortest_mollifier.turn90_L.t_acc = 31000;
 800ff3a:	4b64      	ldr	r3, [pc, #400]	; (80100cc <input_parameter+0x860>)
 800ff3c:	4a6a      	ldr	r2, [pc, #424]	; (80100e8 <input_parameter+0x87c>)
 800ff3e:	655a      	str	r2, [r3, #84]	; 0x54
	speed800_shortest_mollifier.turn90_L.f_ofset = 49;
 800ff40:	4b62      	ldr	r3, [pc, #392]	; (80100cc <input_parameter+0x860>)
 800ff42:	4a6a      	ldr	r2, [pc, #424]	; (80100ec <input_parameter+0x880>)
 800ff44:	649a      	str	r2, [r3, #72]	; 0x48
	speed800_shortest_mollifier.turn90_L.e_ofset = 95;
 800ff46:	4b61      	ldr	r3, [pc, #388]	; (80100cc <input_parameter+0x860>)
 800ff48:	4a6a      	ldr	r2, [pc, #424]	; (80100f4 <input_parameter+0x888>)
 800ff4a:	64da      	str	r2, [r3, #76]	; 0x4c

	speed800_shortest_mollifier.turn180_R.g_speed =800;
 800ff4c:	4b5f      	ldr	r3, [pc, #380]	; (80100cc <input_parameter+0x860>)
 800ff4e:	4a60      	ldr	r2, [pc, #384]	; (80100d0 <input_parameter+0x864>)
 800ff50:	659a      	str	r2, [r3, #88]	; 0x58
	speed800_shortest_mollifier.turn180_R.t_speed = 1320;
 800ff52:	4b5e      	ldr	r3, [pc, #376]	; (80100cc <input_parameter+0x860>)
 800ff54:	4a68      	ldr	r2, [pc, #416]	; (80100f8 <input_parameter+0x88c>)
 800ff56:	665a      	str	r2, [r3, #100]	; 0x64
	speed800_shortest_mollifier.turn180_R.t_acc = 19000;
 800ff58:	4b5c      	ldr	r3, [pc, #368]	; (80100cc <input_parameter+0x860>)
 800ff5a:	4a68      	ldr	r2, [pc, #416]	; (80100fc <input_parameter+0x890>)
 800ff5c:	669a      	str	r2, [r3, #104]	; 0x68
	speed800_shortest_mollifier.turn180_R.f_ofset = 7;
 800ff5e:	4b5b      	ldr	r3, [pc, #364]	; (80100cc <input_parameter+0x860>)
 800ff60:	4a67      	ldr	r2, [pc, #412]	; (8010100 <input_parameter+0x894>)
 800ff62:	65da      	str	r2, [r3, #92]	; 0x5c
	speed800_shortest_mollifier.turn180_R.e_ofset = 95;
 800ff64:	4b59      	ldr	r3, [pc, #356]	; (80100cc <input_parameter+0x860>)
 800ff66:	4a63      	ldr	r2, [pc, #396]	; (80100f4 <input_parameter+0x888>)
 800ff68:	661a      	str	r2, [r3, #96]	; 0x60

	speed800_shortest_mollifier.turn180_L.g_speed = 800;
 800ff6a:	4b58      	ldr	r3, [pc, #352]	; (80100cc <input_parameter+0x860>)
 800ff6c:	4a58      	ldr	r2, [pc, #352]	; (80100d0 <input_parameter+0x864>)
 800ff6e:	66da      	str	r2, [r3, #108]	; 0x6c
	speed800_shortest_mollifier.turn180_L.t_speed = 1320;
 800ff70:	4b56      	ldr	r3, [pc, #344]	; (80100cc <input_parameter+0x860>)
 800ff72:	4a61      	ldr	r2, [pc, #388]	; (80100f8 <input_parameter+0x88c>)
 800ff74:	679a      	str	r2, [r3, #120]	; 0x78
	speed800_shortest_mollifier.turn180_L.t_acc = 19000;
 800ff76:	4b55      	ldr	r3, [pc, #340]	; (80100cc <input_parameter+0x860>)
 800ff78:	4a60      	ldr	r2, [pc, #384]	; (80100fc <input_parameter+0x890>)
 800ff7a:	67da      	str	r2, [r3, #124]	; 0x7c
	speed800_shortest_mollifier.turn180_L.f_ofset = 7;
 800ff7c:	4b53      	ldr	r3, [pc, #332]	; (80100cc <input_parameter+0x860>)
 800ff7e:	4a60      	ldr	r2, [pc, #384]	; (8010100 <input_parameter+0x894>)
 800ff80:	671a      	str	r2, [r3, #112]	; 0x70
	speed800_shortest_mollifier.turn180_L.e_ofset = 93;
 800ff82:	4b52      	ldr	r3, [pc, #328]	; (80100cc <input_parameter+0x860>)
 800ff84:	4a5f      	ldr	r2, [pc, #380]	; (8010104 <input_parameter+0x898>)
 800ff86:	675a      	str	r2, [r3, #116]	; 0x74

	speed800_shortest_mollifier.turn45in_R.g_speed = 800;
 800ff88:	4b50      	ldr	r3, [pc, #320]	; (80100cc <input_parameter+0x860>)
 800ff8a:	4a51      	ldr	r2, [pc, #324]	; (80100d0 <input_parameter+0x864>)
 800ff8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	speed800_shortest_mollifier.turn45in_R.t_speed = 1130;
 800ff90:	4b4e      	ldr	r3, [pc, #312]	; (80100cc <input_parameter+0x860>)
 800ff92:	4a5d      	ldr	r2, [pc, #372]	; (8010108 <input_parameter+0x89c>)
 800ff94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed800_shortest_mollifier.turn45in_R.t_acc = 66000;
 800ff98:	4b4c      	ldr	r3, [pc, #304]	; (80100cc <input_parameter+0x860>)
 800ff9a:	4a5c      	ldr	r2, [pc, #368]	; (801010c <input_parameter+0x8a0>)
 800ff9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed800_shortest_mollifier.turn45in_R.f_ofset = 13;
 800ffa0:	4b4a      	ldr	r3, [pc, #296]	; (80100cc <input_parameter+0x860>)
 800ffa2:	4a5b      	ldr	r2, [pc, #364]	; (8010110 <input_parameter+0x8a4>)
 800ffa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed800_shortest_mollifier.turn45in_R.e_ofset = 78;
 800ffa8:	4b48      	ldr	r3, [pc, #288]	; (80100cc <input_parameter+0x860>)
 800ffaa:	4a5a      	ldr	r2, [pc, #360]	; (8010114 <input_parameter+0x8a8>)
 800ffac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed800_shortest_mollifier.turn45in_L.g_speed = 800;
 800ffb0:	4b46      	ldr	r3, [pc, #280]	; (80100cc <input_parameter+0x860>)
 800ffb2:	4a47      	ldr	r2, [pc, #284]	; (80100d0 <input_parameter+0x864>)
 800ffb4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	speed800_shortest_mollifier.turn45in_L.t_speed = 1130;
 800ffb8:	4b44      	ldr	r3, [pc, #272]	; (80100cc <input_parameter+0x860>)
 800ffba:	4a53      	ldr	r2, [pc, #332]	; (8010108 <input_parameter+0x89c>)
 800ffbc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed800_shortest_mollifier.turn45in_L.t_acc = 67000;
 800ffc0:	4b42      	ldr	r3, [pc, #264]	; (80100cc <input_parameter+0x860>)
 800ffc2:	4a55      	ldr	r2, [pc, #340]	; (8010118 <input_parameter+0x8ac>)
 800ffc4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed800_shortest_mollifier.turn45in_L.f_ofset = 11;
 800ffc8:	4b40      	ldr	r3, [pc, #256]	; (80100cc <input_parameter+0x860>)
 800ffca:	4a54      	ldr	r2, [pc, #336]	; (801011c <input_parameter+0x8b0>)
 800ffcc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed800_shortest_mollifier.turn45in_L.e_ofset = 76;
 800ffd0:	4b3e      	ldr	r3, [pc, #248]	; (80100cc <input_parameter+0x860>)
 800ffd2:	4a53      	ldr	r2, [pc, #332]	; (8010120 <input_parameter+0x8b4>)
 800ffd4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed800_shortest_mollifier.turn135in_R.g_speed = 800;
 800ffd8:	4b3c      	ldr	r3, [pc, #240]	; (80100cc <input_parameter+0x860>)
 800ffda:	4a3d      	ldr	r2, [pc, #244]	; (80100d0 <input_parameter+0x864>)
 800ffdc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	speed800_shortest_mollifier.turn135in_R.t_speed = 1470;
 800ffe0:	4b3a      	ldr	r3, [pc, #232]	; (80100cc <input_parameter+0x860>)
 800ffe2:	4a50      	ldr	r2, [pc, #320]	; (8010124 <input_parameter+0x8b8>)
 800ffe4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed800_shortest_mollifier.turn135in_R.t_acc = 34000;
 800ffe8:	4b38      	ldr	r3, [pc, #224]	; (80100cc <input_parameter+0x860>)
 800ffea:	4a4f      	ldr	r2, [pc, #316]	; (8010128 <input_parameter+0x8bc>)
 800ffec:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed800_shortest_mollifier.turn135in_R.f_ofset = 8;
 800fff0:	4b36      	ldr	r3, [pc, #216]	; (80100cc <input_parameter+0x860>)
 800fff2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800fff6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed800_shortest_mollifier.turn135in_R.e_ofset = 106;
 800fffa:	4b34      	ldr	r3, [pc, #208]	; (80100cc <input_parameter+0x860>)
 800fffc:	4a4b      	ldr	r2, [pc, #300]	; (801012c <input_parameter+0x8c0>)
 800fffe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed800_shortest_mollifier.turn135in_L.g_speed = 800;
 8010002:	4b32      	ldr	r3, [pc, #200]	; (80100cc <input_parameter+0x860>)
 8010004:	4a32      	ldr	r2, [pc, #200]	; (80100d0 <input_parameter+0x864>)
 8010006:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	speed800_shortest_mollifier.turn135in_L.t_speed = 1470;
 801000a:	4b30      	ldr	r3, [pc, #192]	; (80100cc <input_parameter+0x860>)
 801000c:	4a45      	ldr	r2, [pc, #276]	; (8010124 <input_parameter+0x8b8>)
 801000e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed800_shortest_mollifier.turn135in_L.t_acc = 34000;
 8010012:	4b2e      	ldr	r3, [pc, #184]	; (80100cc <input_parameter+0x860>)
 8010014:	4a44      	ldr	r2, [pc, #272]	; (8010128 <input_parameter+0x8bc>)
 8010016:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed800_shortest_mollifier.turn135in_L.f_ofset = 8;
 801001a:	4b2c      	ldr	r3, [pc, #176]	; (80100cc <input_parameter+0x860>)
 801001c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8010020:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed800_shortest_mollifier.turn135in_L.e_ofset = 101;
 8010024:	4b29      	ldr	r3, [pc, #164]	; (80100cc <input_parameter+0x860>)
 8010026:	4a42      	ldr	r2, [pc, #264]	; (8010130 <input_parameter+0x8c4>)
 8010028:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed800_shortest_mollifier.turn45out_R.g_speed = 800;
 801002c:	4b27      	ldr	r3, [pc, #156]	; (80100cc <input_parameter+0x860>)
 801002e:	4a28      	ldr	r2, [pc, #160]	; (80100d0 <input_parameter+0x864>)
 8010030:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	speed800_shortest_mollifier.turn45out_R.t_speed = 1120;
 8010034:	4b25      	ldr	r3, [pc, #148]	; (80100cc <input_parameter+0x860>)
 8010036:	4a3f      	ldr	r2, [pc, #252]	; (8010134 <input_parameter+0x8c8>)
 8010038:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed800_shortest_mollifier.turn45out_R.t_acc = 42000;
 801003c:	4b23      	ldr	r3, [pc, #140]	; (80100cc <input_parameter+0x860>)
 801003e:	4a3e      	ldr	r2, [pc, #248]	; (8010138 <input_parameter+0x8cc>)
 8010040:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed800_shortest_mollifier.turn45out_R.f_ofset = 43;
 8010044:	4b21      	ldr	r3, [pc, #132]	; (80100cc <input_parameter+0x860>)
 8010046:	4a3d      	ldr	r2, [pc, #244]	; (801013c <input_parameter+0x8d0>)
 8010048:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed800_shortest_mollifier.turn45out_R.e_ofset = 58;
 801004c:	4b1f      	ldr	r3, [pc, #124]	; (80100cc <input_parameter+0x860>)
 801004e:	4a3c      	ldr	r2, [pc, #240]	; (8010140 <input_parameter+0x8d4>)
 8010050:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed800_shortest_mollifier.turn45out_L.g_speed = 800;
 8010054:	4b1d      	ldr	r3, [pc, #116]	; (80100cc <input_parameter+0x860>)
 8010056:	4a1e      	ldr	r2, [pc, #120]	; (80100d0 <input_parameter+0x864>)
 8010058:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	speed800_shortest_mollifier.turn45out_L.t_speed = 1120;
 801005c:	4b1b      	ldr	r3, [pc, #108]	; (80100cc <input_parameter+0x860>)
 801005e:	4a35      	ldr	r2, [pc, #212]	; (8010134 <input_parameter+0x8c8>)
 8010060:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed800_shortest_mollifier.turn45out_L.t_acc = 42000;
 8010064:	4b19      	ldr	r3, [pc, #100]	; (80100cc <input_parameter+0x860>)
 8010066:	4a34      	ldr	r2, [pc, #208]	; (8010138 <input_parameter+0x8cc>)
 8010068:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed800_shortest_mollifier.turn45out_L.f_ofset = 46;
 801006c:	4b17      	ldr	r3, [pc, #92]	; (80100cc <input_parameter+0x860>)
 801006e:	4a35      	ldr	r2, [pc, #212]	; (8010144 <input_parameter+0x8d8>)
 8010070:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed800_shortest_mollifier.turn45out_L.e_ofset = 81;
 8010074:	4b15      	ldr	r3, [pc, #84]	; (80100cc <input_parameter+0x860>)
 8010076:	4a34      	ldr	r2, [pc, #208]	; (8010148 <input_parameter+0x8dc>)
 8010078:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed800_shortest_mollifier.turn135out_R.g_speed = 800;
 801007c:	4b13      	ldr	r3, [pc, #76]	; (80100cc <input_parameter+0x860>)
 801007e:	4a14      	ldr	r2, [pc, #80]	; (80100d0 <input_parameter+0x864>)
 8010080:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	speed800_shortest_mollifier.turn135out_R.t_speed = 1550;
 8010084:	4b11      	ldr	r3, [pc, #68]	; (80100cc <input_parameter+0x860>)
 8010086:	4a31      	ldr	r2, [pc, #196]	; (801014c <input_parameter+0x8e0>)
 8010088:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed800_shortest_mollifier.turn135out_R.t_acc = 34000;
 801008c:	4b0f      	ldr	r3, [pc, #60]	; (80100cc <input_parameter+0x860>)
 801008e:	4a26      	ldr	r2, [pc, #152]	; (8010128 <input_parameter+0x8bc>)
 8010090:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed800_shortest_mollifier.turn135out_R.f_ofset = 15;
 8010094:	4b0d      	ldr	r3, [pc, #52]	; (80100cc <input_parameter+0x860>)
 8010096:	4a11      	ldr	r2, [pc, #68]	; (80100dc <input_parameter+0x870>)
 8010098:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 801009c:	e058      	b.n	8010150 <input_parameter+0x8e4>
 801009e:	bf00      	nop
 80100a0:	2000c7d8 	.word	0x2000c7d8
 80100a4:	466a6000 	.word	0x466a6000
 80100a8:	42960000 	.word	0x42960000
 80100ac:	42700000 	.word	0x42700000
 80100b0:	43fa0000 	.word	0x43fa0000
 80100b4:	44228000 	.word	0x44228000
 80100b8:	42a00000 	.word	0x42a00000
 80100bc:	425c0000 	.word	0x425c0000
 80100c0:	42200000 	.word	0x42200000
 80100c4:	42480000 	.word	0x42480000
 80100c8:	42300000 	.word	0x42300000
 80100cc:	2000c920 	.word	0x2000c920
 80100d0:	44480000 	.word	0x44480000
 80100d4:	44c80000 	.word	0x44c80000
 80100d8:	476a6000 	.word	0x476a6000
 80100dc:	41700000 	.word	0x41700000
 80100e0:	41e00000 	.word	0x41e00000
 80100e4:	44af0000 	.word	0x44af0000
 80100e8:	46f23000 	.word	0x46f23000
 80100ec:	42440000 	.word	0x42440000
 80100f0:	42b60000 	.word	0x42b60000
 80100f4:	42be0000 	.word	0x42be0000
 80100f8:	44a50000 	.word	0x44a50000
 80100fc:	46947000 	.word	0x46947000
 8010100:	40e00000 	.word	0x40e00000
 8010104:	42ba0000 	.word	0x42ba0000
 8010108:	448d4000 	.word	0x448d4000
 801010c:	4780e800 	.word	0x4780e800
 8010110:	41500000 	.word	0x41500000
 8010114:	429c0000 	.word	0x429c0000
 8010118:	4782dc00 	.word	0x4782dc00
 801011c:	41300000 	.word	0x41300000
 8010120:	42980000 	.word	0x42980000
 8010124:	44b7c000 	.word	0x44b7c000
 8010128:	4704d000 	.word	0x4704d000
 801012c:	42d40000 	.word	0x42d40000
 8010130:	42ca0000 	.word	0x42ca0000
 8010134:	448c0000 	.word	0x448c0000
 8010138:	47241000 	.word	0x47241000
 801013c:	422c0000 	.word	0x422c0000
 8010140:	42680000 	.word	0x42680000
 8010144:	42380000 	.word	0x42380000
 8010148:	42a20000 	.word	0x42a20000
 801014c:	44c1c000 	.word	0x44c1c000
	speed800_shortest_mollifier.turn135out_R.e_ofset = 118;
 8010150:	4b22      	ldr	r3, [pc, #136]	; (80101dc <input_parameter+0x970>)
 8010152:	4a23      	ldr	r2, [pc, #140]	; (80101e0 <input_parameter+0x974>)
 8010154:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed800_shortest_mollifier.turn135out_L.g_speed = 800;
 8010158:	4b20      	ldr	r3, [pc, #128]	; (80101dc <input_parameter+0x970>)
 801015a:	4a22      	ldr	r2, [pc, #136]	; (80101e4 <input_parameter+0x978>)
 801015c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	speed800_shortest_mollifier.turn135out_L.t_speed = 1550;
 8010160:	4b1e      	ldr	r3, [pc, #120]	; (80101dc <input_parameter+0x970>)
 8010162:	4a21      	ldr	r2, [pc, #132]	; (80101e8 <input_parameter+0x97c>)
 8010164:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed800_shortest_mollifier.turn135out_L.t_acc = 34000;
 8010168:	4b1c      	ldr	r3, [pc, #112]	; (80101dc <input_parameter+0x970>)
 801016a:	4a20      	ldr	r2, [pc, #128]	; (80101ec <input_parameter+0x980>)
 801016c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed800_shortest_mollifier.turn135out_L.f_ofset = 15;
 8010170:	4b1a      	ldr	r3, [pc, #104]	; (80101dc <input_parameter+0x970>)
 8010172:	4a1f      	ldr	r2, [pc, #124]	; (80101f0 <input_parameter+0x984>)
 8010174:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed800_shortest_mollifier.turn135out_L.e_ofset = 116;
 8010178:	4b18      	ldr	r3, [pc, #96]	; (80101dc <input_parameter+0x970>)
 801017a:	4a1e      	ldr	r2, [pc, #120]	; (80101f4 <input_parameter+0x988>)
 801017c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed800_shortest_mollifier.V90_R.g_speed = 800;
 8010180:	4b16      	ldr	r3, [pc, #88]	; (80101dc <input_parameter+0x970>)
 8010182:	4a18      	ldr	r2, [pc, #96]	; (80101e4 <input_parameter+0x978>)
 8010184:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	speed800_shortest_mollifier.V90_R.t_speed = 1640;
 8010188:	4b14      	ldr	r3, [pc, #80]	; (80101dc <input_parameter+0x970>)
 801018a:	4a1b      	ldr	r2, [pc, #108]	; (80101f8 <input_parameter+0x98c>)
 801018c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed800_shortest_mollifier.V90_R.t_acc = 33000;
 8010190:	4b12      	ldr	r3, [pc, #72]	; (80101dc <input_parameter+0x970>)
 8010192:	4a1a      	ldr	r2, [pc, #104]	; (80101fc <input_parameter+0x990>)
 8010194:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed800_shortest_mollifier.V90_R.f_ofset = 20;
 8010198:	4b10      	ldr	r3, [pc, #64]	; (80101dc <input_parameter+0x970>)
 801019a:	4a19      	ldr	r2, [pc, #100]	; (8010200 <input_parameter+0x994>)
 801019c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed800_shortest_mollifier.V90_R.e_ofset = 72;
 80101a0:	4b0e      	ldr	r3, [pc, #56]	; (80101dc <input_parameter+0x970>)
 80101a2:	4a18      	ldr	r2, [pc, #96]	; (8010204 <input_parameter+0x998>)
 80101a4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed800_shortest_mollifier.V90_L.g_speed = 800;
 80101a8:	4b0c      	ldr	r3, [pc, #48]	; (80101dc <input_parameter+0x970>)
 80101aa:	4a0e      	ldr	r2, [pc, #56]	; (80101e4 <input_parameter+0x978>)
 80101ac:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	speed800_shortest_mollifier.V90_L.t_speed = 1640;
 80101b0:	4b0a      	ldr	r3, [pc, #40]	; (80101dc <input_parameter+0x970>)
 80101b2:	4a11      	ldr	r2, [pc, #68]	; (80101f8 <input_parameter+0x98c>)
 80101b4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed800_shortest_mollifier.V90_L.t_acc = 33000;
 80101b8:	4b08      	ldr	r3, [pc, #32]	; (80101dc <input_parameter+0x970>)
 80101ba:	4a10      	ldr	r2, [pc, #64]	; (80101fc <input_parameter+0x990>)
 80101bc:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed800_shortest_mollifier.V90_L.f_ofset = 20;
 80101c0:	4b06      	ldr	r3, [pc, #24]	; (80101dc <input_parameter+0x970>)
 80101c2:	4a0f      	ldr	r2, [pc, #60]	; (8010200 <input_parameter+0x994>)
 80101c4:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed800_shortest_mollifier.V90_L.e_ofset = 72;
 80101c8:	4b04      	ldr	r3, [pc, #16]	; (80101dc <input_parameter+0x970>)
 80101ca:	4a0e      	ldr	r2, [pc, #56]	; (8010204 <input_parameter+0x998>)
 80101cc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



}
 80101d0:	bf00      	nop
 80101d2:	46bd      	mov	sp, r7
 80101d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d8:	4770      	bx	lr
 80101da:	bf00      	nop
 80101dc:	2000c920 	.word	0x2000c920
 80101e0:	42ec0000 	.word	0x42ec0000
 80101e4:	44480000 	.word	0x44480000
 80101e8:	44c1c000 	.word	0x44c1c000
 80101ec:	4704d000 	.word	0x4704d000
 80101f0:	41700000 	.word	0x41700000
 80101f4:	42e80000 	.word	0x42e80000
 80101f8:	44cd0000 	.word	0x44cd0000
 80101fc:	4700e800 	.word	0x4700e800
 8010200:	41a00000 	.word	0x41a00000
 8010204:	42900000 	.word	0x42900000

08010208 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 801020c:	4b22      	ldr	r3, [pc, #136]	; (8010298 <MX_USART1_UART_Init+0x90>)
 801020e:	4a23      	ldr	r2, [pc, #140]	; (801029c <MX_USART1_UART_Init+0x94>)
 8010210:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8010212:	4b21      	ldr	r3, [pc, #132]	; (8010298 <MX_USART1_UART_Init+0x90>)
 8010214:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8010218:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801021a:	4b1f      	ldr	r3, [pc, #124]	; (8010298 <MX_USART1_UART_Init+0x90>)
 801021c:	2200      	movs	r2, #0
 801021e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8010220:	4b1d      	ldr	r3, [pc, #116]	; (8010298 <MX_USART1_UART_Init+0x90>)
 8010222:	2200      	movs	r2, #0
 8010224:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8010226:	4b1c      	ldr	r3, [pc, #112]	; (8010298 <MX_USART1_UART_Init+0x90>)
 8010228:	2200      	movs	r2, #0
 801022a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801022c:	4b1a      	ldr	r3, [pc, #104]	; (8010298 <MX_USART1_UART_Init+0x90>)
 801022e:	220c      	movs	r2, #12
 8010230:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010232:	4b19      	ldr	r3, [pc, #100]	; (8010298 <MX_USART1_UART_Init+0x90>)
 8010234:	2200      	movs	r2, #0
 8010236:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8010238:	4b17      	ldr	r3, [pc, #92]	; (8010298 <MX_USART1_UART_Init+0x90>)
 801023a:	2200      	movs	r2, #0
 801023c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801023e:	4b16      	ldr	r3, [pc, #88]	; (8010298 <MX_USART1_UART_Init+0x90>)
 8010240:	2200      	movs	r2, #0
 8010242:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8010244:	4b14      	ldr	r3, [pc, #80]	; (8010298 <MX_USART1_UART_Init+0x90>)
 8010246:	2200      	movs	r2, #0
 8010248:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801024a:	4b13      	ldr	r3, [pc, #76]	; (8010298 <MX_USART1_UART_Init+0x90>)
 801024c:	2200      	movs	r2, #0
 801024e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8010250:	4811      	ldr	r0, [pc, #68]	; (8010298 <MX_USART1_UART_Init+0x90>)
 8010252:	f006 fabd 	bl	80167d0 <HAL_UART_Init>
 8010256:	4603      	mov	r3, r0
 8010258:	2b00      	cmp	r3, #0
 801025a:	d001      	beq.n	8010260 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 801025c:	f7f9 fd75 	bl	8009d4a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8010260:	2100      	movs	r1, #0
 8010262:	480d      	ldr	r0, [pc, #52]	; (8010298 <MX_USART1_UART_Init+0x90>)
 8010264:	f007 f884 	bl	8017370 <HAL_UARTEx_SetTxFifoThreshold>
 8010268:	4603      	mov	r3, r0
 801026a:	2b00      	cmp	r3, #0
 801026c:	d001      	beq.n	8010272 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 801026e:	f7f9 fd6c 	bl	8009d4a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8010272:	2100      	movs	r1, #0
 8010274:	4808      	ldr	r0, [pc, #32]	; (8010298 <MX_USART1_UART_Init+0x90>)
 8010276:	f007 f8b9 	bl	80173ec <HAL_UARTEx_SetRxFifoThreshold>
 801027a:	4603      	mov	r3, r0
 801027c:	2b00      	cmp	r3, #0
 801027e:	d001      	beq.n	8010284 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8010280:	f7f9 fd63 	bl	8009d4a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8010284:	4804      	ldr	r0, [pc, #16]	; (8010298 <MX_USART1_UART_Init+0x90>)
 8010286:	f007 f83a 	bl	80172fe <HAL_UARTEx_DisableFifoMode>
 801028a:	4603      	mov	r3, r0
 801028c:	2b00      	cmp	r3, #0
 801028e:	d001      	beq.n	8010294 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8010290:	f7f9 fd5b 	bl	8009d4a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8010294:	bf00      	nop
 8010296:	bd80      	pop	{r7, pc}
 8010298:	2000ca68 	.word	0x2000ca68
 801029c:	40013800 	.word	0x40013800

080102a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b09e      	sub	sp, #120	; 0x78
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80102a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80102ac:	2200      	movs	r2, #0
 80102ae:	601a      	str	r2, [r3, #0]
 80102b0:	605a      	str	r2, [r3, #4]
 80102b2:	609a      	str	r2, [r3, #8]
 80102b4:	60da      	str	r2, [r3, #12]
 80102b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80102b8:	f107 0314 	add.w	r3, r7, #20
 80102bc:	2250      	movs	r2, #80	; 0x50
 80102be:	2100      	movs	r1, #0
 80102c0:	4618      	mov	r0, r3
 80102c2:	f007 f957 	bl	8017574 <memset>
  if(uartHandle->Instance==USART1)
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	4a1f      	ldr	r2, [pc, #124]	; (8010348 <HAL_UART_MspInit+0xa8>)
 80102cc:	4293      	cmp	r3, r2
 80102ce:	d137      	bne.n	8010340 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80102d0:	2301      	movs	r3, #1
 80102d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80102d4:	2300      	movs	r3, #0
 80102d6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80102d8:	f107 0314 	add.w	r3, r7, #20
 80102dc:	4618      	mov	r0, r3
 80102de:	f003 fe21 	bl	8013f24 <HAL_RCCEx_PeriphCLKConfig>
 80102e2:	4603      	mov	r3, r0
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d001      	beq.n	80102ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80102e8:	f7f9 fd2f 	bl	8009d4a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80102ec:	4b17      	ldr	r3, [pc, #92]	; (801034c <HAL_UART_MspInit+0xac>)
 80102ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80102f0:	4a16      	ldr	r2, [pc, #88]	; (801034c <HAL_UART_MspInit+0xac>)
 80102f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80102f6:	6613      	str	r3, [r2, #96]	; 0x60
 80102f8:	4b14      	ldr	r3, [pc, #80]	; (801034c <HAL_UART_MspInit+0xac>)
 80102fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80102fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010300:	613b      	str	r3, [r7, #16]
 8010302:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010304:	4b11      	ldr	r3, [pc, #68]	; (801034c <HAL_UART_MspInit+0xac>)
 8010306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010308:	4a10      	ldr	r2, [pc, #64]	; (801034c <HAL_UART_MspInit+0xac>)
 801030a:	f043 0301 	orr.w	r3, r3, #1
 801030e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010310:	4b0e      	ldr	r3, [pc, #56]	; (801034c <HAL_UART_MspInit+0xac>)
 8010312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010314:	f003 0301 	and.w	r3, r3, #1
 8010318:	60fb      	str	r3, [r7, #12]
 801031a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801031c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8010320:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010322:	2302      	movs	r3, #2
 8010324:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010326:	2300      	movs	r3, #0
 8010328:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801032a:	2300      	movs	r3, #0
 801032c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801032e:	2307      	movs	r3, #7
 8010330:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010332:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010336:	4619      	mov	r1, r3
 8010338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801033c:	f002 fe74 	bl	8013028 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8010340:	bf00      	nop
 8010342:	3778      	adds	r7, #120	; 0x78
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}
 8010348:	40013800 	.word	0x40013800
 801034c:	40021000 	.word	0x40021000

08010350 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8010350:	480d      	ldr	r0, [pc, #52]	; (8010388 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8010352:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8010354:	480d      	ldr	r0, [pc, #52]	; (801038c <LoopForever+0x6>)
  ldr r1, =_edata
 8010356:	490e      	ldr	r1, [pc, #56]	; (8010390 <LoopForever+0xa>)
  ldr r2, =_sidata
 8010358:	4a0e      	ldr	r2, [pc, #56]	; (8010394 <LoopForever+0xe>)
  movs r3, #0
 801035a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 801035c:	e002      	b.n	8010364 <LoopCopyDataInit>

0801035e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801035e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010362:	3304      	adds	r3, #4

08010364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010368:	d3f9      	bcc.n	801035e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801036a:	4a0b      	ldr	r2, [pc, #44]	; (8010398 <LoopForever+0x12>)
  ldr r4, =_ebss
 801036c:	4c0b      	ldr	r4, [pc, #44]	; (801039c <LoopForever+0x16>)
  movs r3, #0
 801036e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010370:	e001      	b.n	8010376 <LoopFillZerobss>

08010372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010374:	3204      	adds	r2, #4

08010376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010378:	d3fb      	bcc.n	8010372 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801037a:	f7ff f84f 	bl	800f41c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801037e:	f007 f8c7 	bl	8017510 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8010382:	f7f9 fbe7 	bl	8009b54 <main>

08010386 <LoopForever>:

LoopForever:
    b LoopForever
 8010386:	e7fe      	b.n	8010386 <LoopForever>
  ldr   r0, =_estack
 8010388:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 801038c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010390:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8010394:	0801aa60 	.word	0x0801aa60
  ldr r2, =_sbss
 8010398:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 801039c:	2000cb0c 	.word	0x2000cb0c

080103a0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80103a0:	e7fe      	b.n	80103a0 <ADC3_IRQHandler>

080103a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80103a2:	b580      	push	{r7, lr}
 80103a4:	b082      	sub	sp, #8
 80103a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80103a8:	2300      	movs	r3, #0
 80103aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80103ac:	2003      	movs	r0, #3
 80103ae:	f002 fb2f 	bl	8012a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80103b2:	200f      	movs	r0, #15
 80103b4:	f000 f80e 	bl	80103d4 <HAL_InitTick>
 80103b8:	4603      	mov	r3, r0
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d002      	beq.n	80103c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80103be:	2301      	movs	r3, #1
 80103c0:	71fb      	strb	r3, [r7, #7]
 80103c2:	e001      	b.n	80103c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80103c4:	f7fe fed8 	bl	800f178 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80103c8:	79fb      	ldrb	r3, [r7, #7]

}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3708      	adds	r7, #8
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}
	...

080103d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b084      	sub	sp, #16
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80103dc:	2300      	movs	r3, #0
 80103de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80103e0:	4b16      	ldr	r3, [pc, #88]	; (801043c <HAL_InitTick+0x68>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d022      	beq.n	801042e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80103e8:	4b15      	ldr	r3, [pc, #84]	; (8010440 <HAL_InitTick+0x6c>)
 80103ea:	681a      	ldr	r2, [r3, #0]
 80103ec:	4b13      	ldr	r3, [pc, #76]	; (801043c <HAL_InitTick+0x68>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80103f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80103f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80103fc:	4618      	mov	r0, r3
 80103fe:	f002 fb3a 	bl	8012a76 <HAL_SYSTICK_Config>
 8010402:	4603      	mov	r3, r0
 8010404:	2b00      	cmp	r3, #0
 8010406:	d10f      	bne.n	8010428 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2b0f      	cmp	r3, #15
 801040c:	d809      	bhi.n	8010422 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801040e:	2200      	movs	r2, #0
 8010410:	6879      	ldr	r1, [r7, #4]
 8010412:	f04f 30ff 	mov.w	r0, #4294967295
 8010416:	f002 fb06 	bl	8012a26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801041a:	4a0a      	ldr	r2, [pc, #40]	; (8010444 <HAL_InitTick+0x70>)
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	6013      	str	r3, [r2, #0]
 8010420:	e007      	b.n	8010432 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8010422:	2301      	movs	r3, #1
 8010424:	73fb      	strb	r3, [r7, #15]
 8010426:	e004      	b.n	8010432 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8010428:	2301      	movs	r3, #1
 801042a:	73fb      	strb	r3, [r7, #15]
 801042c:	e001      	b.n	8010432 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 801042e:	2301      	movs	r3, #1
 8010430:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8010432:	7bfb      	ldrb	r3, [r7, #15]
}
 8010434:	4618      	mov	r0, r3
 8010436:	3710      	adds	r7, #16
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}
 801043c:	20000008 	.word	0x20000008
 8010440:	20000000 	.word	0x20000000
 8010444:	20000004 	.word	0x20000004

08010448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010448:	b480      	push	{r7}
 801044a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801044c:	4b05      	ldr	r3, [pc, #20]	; (8010464 <HAL_IncTick+0x1c>)
 801044e:	681a      	ldr	r2, [r3, #0]
 8010450:	4b05      	ldr	r3, [pc, #20]	; (8010468 <HAL_IncTick+0x20>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	4413      	add	r3, r2
 8010456:	4a03      	ldr	r2, [pc, #12]	; (8010464 <HAL_IncTick+0x1c>)
 8010458:	6013      	str	r3, [r2, #0]
}
 801045a:	bf00      	nop
 801045c:	46bd      	mov	sp, r7
 801045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010462:	4770      	bx	lr
 8010464:	2000caf8 	.word	0x2000caf8
 8010468:	20000008 	.word	0x20000008

0801046c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801046c:	b480      	push	{r7}
 801046e:	af00      	add	r7, sp, #0
  return uwTick;
 8010470:	4b03      	ldr	r3, [pc, #12]	; (8010480 <HAL_GetTick+0x14>)
 8010472:	681b      	ldr	r3, [r3, #0]
}
 8010474:	4618      	mov	r0, r3
 8010476:	46bd      	mov	sp, r7
 8010478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047c:	4770      	bx	lr
 801047e:	bf00      	nop
 8010480:	2000caf8 	.word	0x2000caf8

08010484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b084      	sub	sp, #16
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801048c:	f7ff ffee 	bl	801046c <HAL_GetTick>
 8010490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	f1b3 3fff 	cmp.w	r3, #4294967295
 801049c:	d004      	beq.n	80104a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 801049e:	4b09      	ldr	r3, [pc, #36]	; (80104c4 <HAL_Delay+0x40>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	68fa      	ldr	r2, [r7, #12]
 80104a4:	4413      	add	r3, r2
 80104a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80104a8:	bf00      	nop
 80104aa:	f7ff ffdf 	bl	801046c <HAL_GetTick>
 80104ae:	4602      	mov	r2, r0
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	1ad3      	subs	r3, r2, r3
 80104b4:	68fa      	ldr	r2, [r7, #12]
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d8f7      	bhi.n	80104aa <HAL_Delay+0x26>
  {
  }
}
 80104ba:	bf00      	nop
 80104bc:	bf00      	nop
 80104be:	3710      	adds	r7, #16
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}
 80104c4:	20000008 	.word	0x20000008

080104c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80104c8:	b480      	push	{r7}
 80104ca:	b083      	sub	sp, #12
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
 80104d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	689b      	ldr	r3, [r3, #8]
 80104d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	431a      	orrs	r2, r3
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	609a      	str	r2, [r3, #8]
}
 80104e2:	bf00      	nop
 80104e4:	370c      	adds	r7, #12
 80104e6:	46bd      	mov	sp, r7
 80104e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ec:	4770      	bx	lr

080104ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80104ee:	b480      	push	{r7}
 80104f0:	b083      	sub	sp, #12
 80104f2:	af00      	add	r7, sp, #0
 80104f4:	6078      	str	r0, [r7, #4]
 80104f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	689b      	ldr	r3, [r3, #8]
 80104fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	431a      	orrs	r2, r3
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	609a      	str	r2, [r3, #8]
}
 8010508:	bf00      	nop
 801050a:	370c      	adds	r7, #12
 801050c:	46bd      	mov	sp, r7
 801050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010512:	4770      	bx	lr

08010514 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8010514:	b480      	push	{r7}
 8010516:	b083      	sub	sp, #12
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	689b      	ldr	r3, [r3, #8]
 8010520:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8010524:	4618      	mov	r0, r3
 8010526:	370c      	adds	r7, #12
 8010528:	46bd      	mov	sp, r7
 801052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052e:	4770      	bx	lr

08010530 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8010530:	b480      	push	{r7}
 8010532:	b087      	sub	sp, #28
 8010534:	af00      	add	r7, sp, #0
 8010536:	60f8      	str	r0, [r7, #12]
 8010538:	60b9      	str	r1, [r7, #8]
 801053a:	607a      	str	r2, [r7, #4]
 801053c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	3360      	adds	r3, #96	; 0x60
 8010542:	461a      	mov	r2, r3
 8010544:	68bb      	ldr	r3, [r7, #8]
 8010546:	009b      	lsls	r3, r3, #2
 8010548:	4413      	add	r3, r2
 801054a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	681a      	ldr	r2, [r3, #0]
 8010550:	4b08      	ldr	r3, [pc, #32]	; (8010574 <LL_ADC_SetOffset+0x44>)
 8010552:	4013      	ands	r3, r2
 8010554:	687a      	ldr	r2, [r7, #4]
 8010556:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 801055a:	683a      	ldr	r2, [r7, #0]
 801055c:	430a      	orrs	r2, r1
 801055e:	4313      	orrs	r3, r2
 8010560:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8010564:	697b      	ldr	r3, [r7, #20]
 8010566:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8010568:	bf00      	nop
 801056a:	371c      	adds	r7, #28
 801056c:	46bd      	mov	sp, r7
 801056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010572:	4770      	bx	lr
 8010574:	03fff000 	.word	0x03fff000

08010578 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8010578:	b480      	push	{r7}
 801057a:	b085      	sub	sp, #20
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	3360      	adds	r3, #96	; 0x60
 8010586:	461a      	mov	r2, r3
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	009b      	lsls	r3, r3, #2
 801058c:	4413      	add	r3, r2
 801058e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8010598:	4618      	mov	r0, r3
 801059a:	3714      	adds	r7, #20
 801059c:	46bd      	mov	sp, r7
 801059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a2:	4770      	bx	lr

080105a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80105a4:	b480      	push	{r7}
 80105a6:	b087      	sub	sp, #28
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	60f8      	str	r0, [r7, #12]
 80105ac:	60b9      	str	r1, [r7, #8]
 80105ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	3360      	adds	r3, #96	; 0x60
 80105b4:	461a      	mov	r2, r3
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	009b      	lsls	r3, r3, #2
 80105ba:	4413      	add	r3, r2
 80105bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	431a      	orrs	r2, r3
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80105ce:	bf00      	nop
 80105d0:	371c      	adds	r7, #28
 80105d2:	46bd      	mov	sp, r7
 80105d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d8:	4770      	bx	lr

080105da <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80105da:	b480      	push	{r7}
 80105dc:	b087      	sub	sp, #28
 80105de:	af00      	add	r7, sp, #0
 80105e0:	60f8      	str	r0, [r7, #12]
 80105e2:	60b9      	str	r1, [r7, #8]
 80105e4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	3360      	adds	r3, #96	; 0x60
 80105ea:	461a      	mov	r2, r3
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	009b      	lsls	r3, r3, #2
 80105f0:	4413      	add	r3, r2
 80105f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	431a      	orrs	r2, r3
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8010604:	bf00      	nop
 8010606:	371c      	adds	r7, #28
 8010608:	46bd      	mov	sp, r7
 801060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060e:	4770      	bx	lr

08010610 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8010610:	b480      	push	{r7}
 8010612:	b087      	sub	sp, #28
 8010614:	af00      	add	r7, sp, #0
 8010616:	60f8      	str	r0, [r7, #12]
 8010618:	60b9      	str	r1, [r7, #8]
 801061a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	3360      	adds	r3, #96	; 0x60
 8010620:	461a      	mov	r2, r3
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	009b      	lsls	r3, r3, #2
 8010626:	4413      	add	r3, r2
 8010628:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	431a      	orrs	r2, r3
 8010636:	697b      	ldr	r3, [r7, #20]
 8010638:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 801063a:	bf00      	nop
 801063c:	371c      	adds	r7, #28
 801063e:	46bd      	mov	sp, r7
 8010640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010644:	4770      	bx	lr

08010646 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8010646:	b480      	push	{r7}
 8010648:	b083      	sub	sp, #12
 801064a:	af00      	add	r7, sp, #0
 801064c:	6078      	str	r0, [r7, #4]
 801064e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	695b      	ldr	r3, [r3, #20]
 8010654:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	431a      	orrs	r2, r3
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	615a      	str	r2, [r3, #20]
}
 8010660:	bf00      	nop
 8010662:	370c      	adds	r7, #12
 8010664:	46bd      	mov	sp, r7
 8010666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066a:	4770      	bx	lr

0801066c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 801066c:	b480      	push	{r7}
 801066e:	b083      	sub	sp, #12
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	68db      	ldr	r3, [r3, #12]
 8010678:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801067c:	2b00      	cmp	r3, #0
 801067e:	d101      	bne.n	8010684 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8010680:	2301      	movs	r3, #1
 8010682:	e000      	b.n	8010686 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8010684:	2300      	movs	r3, #0
}
 8010686:	4618      	mov	r0, r3
 8010688:	370c      	adds	r7, #12
 801068a:	46bd      	mov	sp, r7
 801068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010690:	4770      	bx	lr

08010692 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8010692:	b480      	push	{r7}
 8010694:	b087      	sub	sp, #28
 8010696:	af00      	add	r7, sp, #0
 8010698:	60f8      	str	r0, [r7, #12]
 801069a:	60b9      	str	r1, [r7, #8]
 801069c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	3330      	adds	r3, #48	; 0x30
 80106a2:	461a      	mov	r2, r3
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	0a1b      	lsrs	r3, r3, #8
 80106a8:	009b      	lsls	r3, r3, #2
 80106aa:	f003 030c 	and.w	r3, r3, #12
 80106ae:	4413      	add	r3, r2
 80106b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	681a      	ldr	r2, [r3, #0]
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	f003 031f 	and.w	r3, r3, #31
 80106bc:	211f      	movs	r1, #31
 80106be:	fa01 f303 	lsl.w	r3, r1, r3
 80106c2:	43db      	mvns	r3, r3
 80106c4:	401a      	ands	r2, r3
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	0e9b      	lsrs	r3, r3, #26
 80106ca:	f003 011f 	and.w	r1, r3, #31
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	f003 031f 	and.w	r3, r3, #31
 80106d4:	fa01 f303 	lsl.w	r3, r1, r3
 80106d8:	431a      	orrs	r2, r3
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80106de:	bf00      	nop
 80106e0:	371c      	adds	r7, #28
 80106e2:	46bd      	mov	sp, r7
 80106e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e8:	4770      	bx	lr

080106ea <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80106ea:	b480      	push	{r7}
 80106ec:	b083      	sub	sp, #12
 80106ee:	af00      	add	r7, sp, #0
 80106f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80106f6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d101      	bne.n	8010702 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80106fe:	2301      	movs	r3, #1
 8010700:	e000      	b.n	8010704 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8010702:	2300      	movs	r3, #0
}
 8010704:	4618      	mov	r0, r3
 8010706:	370c      	adds	r7, #12
 8010708:	46bd      	mov	sp, r7
 801070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070e:	4770      	bx	lr

08010710 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8010710:	b480      	push	{r7}
 8010712:	b087      	sub	sp, #28
 8010714:	af00      	add	r7, sp, #0
 8010716:	60f8      	str	r0, [r7, #12]
 8010718:	60b9      	str	r1, [r7, #8]
 801071a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	3314      	adds	r3, #20
 8010720:	461a      	mov	r2, r3
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	0e5b      	lsrs	r3, r3, #25
 8010726:	009b      	lsls	r3, r3, #2
 8010728:	f003 0304 	and.w	r3, r3, #4
 801072c:	4413      	add	r3, r2
 801072e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	681a      	ldr	r2, [r3, #0]
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	0d1b      	lsrs	r3, r3, #20
 8010738:	f003 031f 	and.w	r3, r3, #31
 801073c:	2107      	movs	r1, #7
 801073e:	fa01 f303 	lsl.w	r3, r1, r3
 8010742:	43db      	mvns	r3, r3
 8010744:	401a      	ands	r2, r3
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	0d1b      	lsrs	r3, r3, #20
 801074a:	f003 031f 	and.w	r3, r3, #31
 801074e:	6879      	ldr	r1, [r7, #4]
 8010750:	fa01 f303 	lsl.w	r3, r1, r3
 8010754:	431a      	orrs	r2, r3
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 801075a:	bf00      	nop
 801075c:	371c      	adds	r7, #28
 801075e:	46bd      	mov	sp, r7
 8010760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010764:	4770      	bx	lr
	...

08010768 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8010768:	b480      	push	{r7}
 801076a:	b085      	sub	sp, #20
 801076c:	af00      	add	r7, sp, #0
 801076e:	60f8      	str	r0, [r7, #12]
 8010770:	60b9      	str	r1, [r7, #8]
 8010772:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	4a0f      	ldr	r2, [pc, #60]	; (80107b4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8010778:	4293      	cmp	r3, r2
 801077a:	d10a      	bne.n	8010792 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010788:	431a      	orrs	r2, r3
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8010790:	e00a      	b.n	80107a8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801079e:	43db      	mvns	r3, r3
 80107a0:	401a      	ands	r2, r3
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80107a8:	bf00      	nop
 80107aa:	3714      	adds	r7, #20
 80107ac:	46bd      	mov	sp, r7
 80107ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b2:	4770      	bx	lr
 80107b4:	407f0000 	.word	0x407f0000

080107b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80107b8:	b480      	push	{r7}
 80107ba:	b083      	sub	sp, #12
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	689b      	ldr	r3, [r3, #8]
 80107c4:	f003 031f 	and.w	r3, r3, #31
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	370c      	adds	r7, #12
 80107cc:	46bd      	mov	sp, r7
 80107ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d2:	4770      	bx	lr

080107d4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80107d4:	b480      	push	{r7}
 80107d6:	b083      	sub	sp, #12
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	689b      	ldr	r3, [r3, #8]
 80107e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80107e4:	4618      	mov	r0, r3
 80107e6:	370c      	adds	r7, #12
 80107e8:	46bd      	mov	sp, r7
 80107ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ee:	4770      	bx	lr

080107f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80107f0:	b480      	push	{r7}
 80107f2:	b083      	sub	sp, #12
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	689b      	ldr	r3, [r3, #8]
 80107fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8010800:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8010804:	687a      	ldr	r2, [r7, #4]
 8010806:	6093      	str	r3, [r2, #8]
}
 8010808:	bf00      	nop
 801080a:	370c      	adds	r7, #12
 801080c:	46bd      	mov	sp, r7
 801080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010812:	4770      	bx	lr

08010814 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8010814:	b480      	push	{r7}
 8010816:	b083      	sub	sp, #12
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	689b      	ldr	r3, [r3, #8]
 8010820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010828:	d101      	bne.n	801082e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 801082a:	2301      	movs	r3, #1
 801082c:	e000      	b.n	8010830 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 801082e:	2300      	movs	r3, #0
}
 8010830:	4618      	mov	r0, r3
 8010832:	370c      	adds	r7, #12
 8010834:	46bd      	mov	sp, r7
 8010836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083a:	4770      	bx	lr

0801083c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 801083c:	b480      	push	{r7}
 801083e:	b083      	sub	sp, #12
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	689b      	ldr	r3, [r3, #8]
 8010848:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 801084c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8010850:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8010858:	bf00      	nop
 801085a:	370c      	adds	r7, #12
 801085c:	46bd      	mov	sp, r7
 801085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010862:	4770      	bx	lr

08010864 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8010864:	b480      	push	{r7}
 8010866:	b083      	sub	sp, #12
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	689b      	ldr	r3, [r3, #8]
 8010870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010874:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010878:	d101      	bne.n	801087e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 801087a:	2301      	movs	r3, #1
 801087c:	e000      	b.n	8010880 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 801087e:	2300      	movs	r3, #0
}
 8010880:	4618      	mov	r0, r3
 8010882:	370c      	adds	r7, #12
 8010884:	46bd      	mov	sp, r7
 8010886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088a:	4770      	bx	lr

0801088c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 801088c:	b480      	push	{r7}
 801088e:	b083      	sub	sp, #12
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	689b      	ldr	r3, [r3, #8]
 8010898:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801089c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80108a0:	f043 0201 	orr.w	r2, r3, #1
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80108a8:	bf00      	nop
 80108aa:	370c      	adds	r7, #12
 80108ac:	46bd      	mov	sp, r7
 80108ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b2:	4770      	bx	lr

080108b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80108b4:	b480      	push	{r7}
 80108b6:	b083      	sub	sp, #12
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	689b      	ldr	r3, [r3, #8]
 80108c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80108c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80108c8:	f043 0202 	orr.w	r2, r3, #2
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80108d0:	bf00      	nop
 80108d2:	370c      	adds	r7, #12
 80108d4:	46bd      	mov	sp, r7
 80108d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108da:	4770      	bx	lr

080108dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80108dc:	b480      	push	{r7}
 80108de:	b083      	sub	sp, #12
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	689b      	ldr	r3, [r3, #8]
 80108e8:	f003 0301 	and.w	r3, r3, #1
 80108ec:	2b01      	cmp	r3, #1
 80108ee:	d101      	bne.n	80108f4 <LL_ADC_IsEnabled+0x18>
 80108f0:	2301      	movs	r3, #1
 80108f2:	e000      	b.n	80108f6 <LL_ADC_IsEnabled+0x1a>
 80108f4:	2300      	movs	r3, #0
}
 80108f6:	4618      	mov	r0, r3
 80108f8:	370c      	adds	r7, #12
 80108fa:	46bd      	mov	sp, r7
 80108fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010900:	4770      	bx	lr

08010902 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8010902:	b480      	push	{r7}
 8010904:	b083      	sub	sp, #12
 8010906:	af00      	add	r7, sp, #0
 8010908:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	689b      	ldr	r3, [r3, #8]
 801090e:	f003 0302 	and.w	r3, r3, #2
 8010912:	2b02      	cmp	r3, #2
 8010914:	d101      	bne.n	801091a <LL_ADC_IsDisableOngoing+0x18>
 8010916:	2301      	movs	r3, #1
 8010918:	e000      	b.n	801091c <LL_ADC_IsDisableOngoing+0x1a>
 801091a:	2300      	movs	r3, #0
}
 801091c:	4618      	mov	r0, r3
 801091e:	370c      	adds	r7, #12
 8010920:	46bd      	mov	sp, r7
 8010922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010926:	4770      	bx	lr

08010928 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8010928:	b480      	push	{r7}
 801092a:	b083      	sub	sp, #12
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	689b      	ldr	r3, [r3, #8]
 8010934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010938:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801093c:	f043 0204 	orr.w	r2, r3, #4
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8010944:	bf00      	nop
 8010946:	370c      	adds	r7, #12
 8010948:	46bd      	mov	sp, r7
 801094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094e:	4770      	bx	lr

08010950 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8010950:	b480      	push	{r7}
 8010952:	b083      	sub	sp, #12
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	689b      	ldr	r3, [r3, #8]
 801095c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010960:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8010964:	f043 0210 	orr.w	r2, r3, #16
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 801096c:	bf00      	nop
 801096e:	370c      	adds	r7, #12
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr

08010978 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8010978:	b480      	push	{r7}
 801097a:	b083      	sub	sp, #12
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	689b      	ldr	r3, [r3, #8]
 8010984:	f003 0304 	and.w	r3, r3, #4
 8010988:	2b04      	cmp	r3, #4
 801098a:	d101      	bne.n	8010990 <LL_ADC_REG_IsConversionOngoing+0x18>
 801098c:	2301      	movs	r3, #1
 801098e:	e000      	b.n	8010992 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8010990:	2300      	movs	r3, #0
}
 8010992:	4618      	mov	r0, r3
 8010994:	370c      	adds	r7, #12
 8010996:	46bd      	mov	sp, r7
 8010998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099c:	4770      	bx	lr

0801099e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 801099e:	b480      	push	{r7}
 80109a0:	b083      	sub	sp, #12
 80109a2:	af00      	add	r7, sp, #0
 80109a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	689b      	ldr	r3, [r3, #8]
 80109aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80109ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80109b2:	f043 0220 	orr.w	r2, r3, #32
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80109ba:	bf00      	nop
 80109bc:	370c      	adds	r7, #12
 80109be:	46bd      	mov	sp, r7
 80109c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c4:	4770      	bx	lr

080109c6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80109c6:	b480      	push	{r7}
 80109c8:	b083      	sub	sp, #12
 80109ca:	af00      	add	r7, sp, #0
 80109cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	689b      	ldr	r3, [r3, #8]
 80109d2:	f003 0308 	and.w	r3, r3, #8
 80109d6:	2b08      	cmp	r3, #8
 80109d8:	d101      	bne.n	80109de <LL_ADC_INJ_IsConversionOngoing+0x18>
 80109da:	2301      	movs	r3, #1
 80109dc:	e000      	b.n	80109e0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80109de:	2300      	movs	r3, #0
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	370c      	adds	r7, #12
 80109e4:	46bd      	mov	sp, r7
 80109e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ea:	4770      	bx	lr

080109ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80109ec:	b590      	push	{r4, r7, lr}
 80109ee:	b089      	sub	sp, #36	; 0x24
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80109f4:	2300      	movs	r3, #0
 80109f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80109f8:	2300      	movs	r3, #0
 80109fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d101      	bne.n	8010a06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8010a02:	2301      	movs	r3, #1
 8010a04:	e1a1      	b.n	8010d4a <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	695b      	ldr	r3, [r3, #20]
 8010a0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d109      	bne.n	8010a28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	f7f7 fb43 	bl	80080a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2200      	movs	r2, #0
 8010a24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f7ff fef1 	bl	8010814 <LL_ADC_IsDeepPowerDownEnabled>
 8010a32:	4603      	mov	r3, r0
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d004      	beq.n	8010a42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7ff fed7 	bl	80107f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	4618      	mov	r0, r3
 8010a48:	f7ff ff0c 	bl	8010864 <LL_ADC_IsInternalRegulatorEnabled>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d115      	bne.n	8010a7e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7ff fef0 	bl	801083c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8010a5c:	4b9a      	ldr	r3, [pc, #616]	; (8010cc8 <HAL_ADC_Init+0x2dc>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	099b      	lsrs	r3, r3, #6
 8010a62:	4a9a      	ldr	r2, [pc, #616]	; (8010ccc <HAL_ADC_Init+0x2e0>)
 8010a64:	fba2 2303 	umull	r2, r3, r2, r3
 8010a68:	099b      	lsrs	r3, r3, #6
 8010a6a:	3301      	adds	r3, #1
 8010a6c:	005b      	lsls	r3, r3, #1
 8010a6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8010a70:	e002      	b.n	8010a78 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	3b01      	subs	r3, #1
 8010a76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8010a78:	68bb      	ldr	r3, [r7, #8]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d1f9      	bne.n	8010a72 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7ff feee 	bl	8010864 <LL_ADC_IsInternalRegulatorEnabled>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d10d      	bne.n	8010aaa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a92:	f043 0210 	orr.w	r2, r3, #16
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010a9e:	f043 0201 	orr.w	r2, r3, #1
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7ff ff62 	bl	8010978 <LL_ADC_REG_IsConversionOngoing>
 8010ab4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010aba:	f003 0310 	and.w	r3, r3, #16
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	f040 813a 	bne.w	8010d38 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	f040 8136 	bne.w	8010d38 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ad0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8010ad4:	f043 0202 	orr.w	r2, r3, #2
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f7ff fefb 	bl	80108dc <LL_ADC_IsEnabled>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d137      	bne.n	8010b5c <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010af4:	d004      	beq.n	8010b00 <HAL_ADC_Init+0x114>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	4a75      	ldr	r2, [pc, #468]	; (8010cd0 <HAL_ADC_Init+0x2e4>)
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d10f      	bne.n	8010b20 <HAL_ADC_Init+0x134>
 8010b00:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8010b04:	f7ff feea 	bl	80108dc <LL_ADC_IsEnabled>
 8010b08:	4604      	mov	r4, r0
 8010b0a:	4871      	ldr	r0, [pc, #452]	; (8010cd0 <HAL_ADC_Init+0x2e4>)
 8010b0c:	f7ff fee6 	bl	80108dc <LL_ADC_IsEnabled>
 8010b10:	4603      	mov	r3, r0
 8010b12:	4323      	orrs	r3, r4
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	bf0c      	ite	eq
 8010b18:	2301      	moveq	r3, #1
 8010b1a:	2300      	movne	r3, #0
 8010b1c:	b2db      	uxtb	r3, r3
 8010b1e:	e008      	b.n	8010b32 <HAL_ADC_Init+0x146>
 8010b20:	486c      	ldr	r0, [pc, #432]	; (8010cd4 <HAL_ADC_Init+0x2e8>)
 8010b22:	f7ff fedb 	bl	80108dc <LL_ADC_IsEnabled>
 8010b26:	4603      	mov	r3, r0
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	bf0c      	ite	eq
 8010b2c:	2301      	moveq	r3, #1
 8010b2e:	2300      	movne	r3, #0
 8010b30:	b2db      	uxtb	r3, r3
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d012      	beq.n	8010b5c <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010b3e:	d004      	beq.n	8010b4a <HAL_ADC_Init+0x15e>
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	4a62      	ldr	r2, [pc, #392]	; (8010cd0 <HAL_ADC_Init+0x2e4>)
 8010b46:	4293      	cmp	r3, r2
 8010b48:	d101      	bne.n	8010b4e <HAL_ADC_Init+0x162>
 8010b4a:	4a63      	ldr	r2, [pc, #396]	; (8010cd8 <HAL_ADC_Init+0x2ec>)
 8010b4c:	e000      	b.n	8010b50 <HAL_ADC_Init+0x164>
 8010b4e:	4a63      	ldr	r2, [pc, #396]	; (8010cdc <HAL_ADC_Init+0x2f0>)
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	4619      	mov	r1, r3
 8010b56:	4610      	mov	r0, r2
 8010b58:	f7ff fcb6 	bl	80104c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	7f5b      	ldrb	r3, [r3, #29]
 8010b60:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8010b66:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8010b6c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8010b72:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010b7a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8010b7c:	4313      	orrs	r3, r2
 8010b7e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010b86:	2b01      	cmp	r3, #1
 8010b88:	d106      	bne.n	8010b98 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b8e:	3b01      	subs	r3, #1
 8010b90:	045b      	lsls	r3, r3, #17
 8010b92:	69ba      	ldr	r2, [r7, #24]
 8010b94:	4313      	orrs	r3, r2
 8010b96:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d009      	beq.n	8010bb4 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ba4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8010bae:	69ba      	ldr	r2, [r7, #24]
 8010bb0:	4313      	orrs	r3, r2
 8010bb2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	68da      	ldr	r2, [r3, #12]
 8010bba:	4b49      	ldr	r3, [pc, #292]	; (8010ce0 <HAL_ADC_Init+0x2f4>)
 8010bbc:	4013      	ands	r3, r2
 8010bbe:	687a      	ldr	r2, [r7, #4]
 8010bc0:	6812      	ldr	r2, [r2, #0]
 8010bc2:	69b9      	ldr	r1, [r7, #24]
 8010bc4:	430b      	orrs	r3, r1
 8010bc6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	691b      	ldr	r3, [r3, #16]
 8010bce:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	430a      	orrs	r2, r1
 8010bdc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7ff fec8 	bl	8010978 <LL_ADC_REG_IsConversionOngoing>
 8010be8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f7ff fee9 	bl	80109c6 <LL_ADC_INJ_IsConversionOngoing>
 8010bf4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8010bf6:	693b      	ldr	r3, [r7, #16]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d17b      	bne.n	8010cf4 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d178      	bne.n	8010cf4 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8010c06:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010c0e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8010c10:	4313      	orrs	r3, r2
 8010c12:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	68db      	ldr	r3, [r3, #12]
 8010c1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010c1e:	f023 0302 	bic.w	r3, r3, #2
 8010c22:	687a      	ldr	r2, [r7, #4]
 8010c24:	6812      	ldr	r2, [r2, #0]
 8010c26:	69b9      	ldr	r1, [r7, #24]
 8010c28:	430b      	orrs	r3, r1
 8010c2a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	691b      	ldr	r3, [r3, #16]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d017      	beq.n	8010c64 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	691a      	ldr	r2, [r3, #16]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8010c42:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8010c4c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8010c50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8010c54:	687a      	ldr	r2, [r7, #4]
 8010c56:	6911      	ldr	r1, [r2, #16]
 8010c58:	687a      	ldr	r2, [r7, #4]
 8010c5a:	6812      	ldr	r2, [r2, #0]
 8010c5c:	430b      	orrs	r3, r1
 8010c5e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8010c62:	e013      	b.n	8010c8c <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	691a      	ldr	r2, [r3, #16]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010c72:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8010c7c:	687a      	ldr	r2, [r7, #4]
 8010c7e:	6812      	ldr	r2, [r2, #0]
 8010c80:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8010c84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8010c88:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c92:	2b01      	cmp	r3, #1
 8010c94:	d126      	bne.n	8010ce4 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	691b      	ldr	r3, [r3, #16]
 8010c9c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010ca0:	f023 0304 	bic.w	r3, r3, #4
 8010ca4:	687a      	ldr	r2, [r7, #4]
 8010ca6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8010ca8:	687a      	ldr	r2, [r7, #4]
 8010caa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010cac:	4311      	orrs	r1, r2
 8010cae:	687a      	ldr	r2, [r7, #4]
 8010cb0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8010cb2:	4311      	orrs	r1, r2
 8010cb4:	687a      	ldr	r2, [r7, #4]
 8010cb6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8010cb8:	430a      	orrs	r2, r1
 8010cba:	431a      	orrs	r2, r3
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	f042 0201 	orr.w	r2, r2, #1
 8010cc4:	611a      	str	r2, [r3, #16]
 8010cc6:	e015      	b.n	8010cf4 <HAL_ADC_Init+0x308>
 8010cc8:	20000000 	.word	0x20000000
 8010ccc:	053e2d63 	.word	0x053e2d63
 8010cd0:	50000100 	.word	0x50000100
 8010cd4:	50000400 	.word	0x50000400
 8010cd8:	50000300 	.word	0x50000300
 8010cdc:	50000700 	.word	0x50000700
 8010ce0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	691a      	ldr	r2, [r3, #16]
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	f022 0201 	bic.w	r2, r2, #1
 8010cf2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	695b      	ldr	r3, [r3, #20]
 8010cf8:	2b01      	cmp	r3, #1
 8010cfa:	d10c      	bne.n	8010d16 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d02:	f023 010f 	bic.w	r1, r3, #15
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6a1b      	ldr	r3, [r3, #32]
 8010d0a:	1e5a      	subs	r2, r3, #1
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	430a      	orrs	r2, r1
 8010d12:	631a      	str	r2, [r3, #48]	; 0x30
 8010d14:	e007      	b.n	8010d26 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	f022 020f 	bic.w	r2, r2, #15
 8010d24:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d2a:	f023 0303 	bic.w	r3, r3, #3
 8010d2e:	f043 0201 	orr.w	r2, r3, #1
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	65da      	str	r2, [r3, #92]	; 0x5c
 8010d36:	e007      	b.n	8010d48 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d3c:	f043 0210 	orr.w	r2, r3, #16
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8010d44:	2301      	movs	r3, #1
 8010d46:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8010d48:	7ffb      	ldrb	r3, [r7, #31]
}
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	3724      	adds	r7, #36	; 0x24
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd90      	pop	{r4, r7, pc}
 8010d52:	bf00      	nop

08010d54 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b086      	sub	sp, #24
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d64:	d004      	beq.n	8010d70 <HAL_ADC_Start+0x1c>
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	4a5c      	ldr	r2, [pc, #368]	; (8010edc <HAL_ADC_Start+0x188>)
 8010d6c:	4293      	cmp	r3, r2
 8010d6e:	d101      	bne.n	8010d74 <HAL_ADC_Start+0x20>
 8010d70:	4b5b      	ldr	r3, [pc, #364]	; (8010ee0 <HAL_ADC_Start+0x18c>)
 8010d72:	e000      	b.n	8010d76 <HAL_ADC_Start+0x22>
 8010d74:	4b5b      	ldr	r3, [pc, #364]	; (8010ee4 <HAL_ADC_Start+0x190>)
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7ff fd1e 	bl	80107b8 <LL_ADC_GetMultimode>
 8010d7c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7ff fdf8 	bl	8010978 <LL_ADC_REG_IsConversionOngoing>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	f040 809f 	bne.w	8010ece <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010d96:	2b01      	cmp	r3, #1
 8010d98:	d101      	bne.n	8010d9e <HAL_ADC_Start+0x4a>
 8010d9a:	2302      	movs	r3, #2
 8010d9c:	e09a      	b.n	8010ed4 <HAL_ADC_Start+0x180>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2201      	movs	r2, #1
 8010da2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f001 fa3e 	bl	8012228 <ADC_Enable>
 8010dac:	4603      	mov	r3, r0
 8010dae:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8010db0:	7dfb      	ldrb	r3, [r7, #23]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	f040 8086 	bne.w	8010ec4 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010dbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8010dc0:	f023 0301 	bic.w	r3, r3, #1
 8010dc4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4a42      	ldr	r2, [pc, #264]	; (8010edc <HAL_ADC_Start+0x188>)
 8010dd2:	4293      	cmp	r3, r2
 8010dd4:	d002      	beq.n	8010ddc <HAL_ADC_Start+0x88>
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	e001      	b.n	8010de0 <HAL_ADC_Start+0x8c>
 8010ddc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8010de0:	687a      	ldr	r2, [r7, #4]
 8010de2:	6812      	ldr	r2, [r2, #0]
 8010de4:	4293      	cmp	r3, r2
 8010de6:	d002      	beq.n	8010dee <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8010de8:	693b      	ldr	r3, [r7, #16]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d105      	bne.n	8010dfa <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010df2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010e06:	d106      	bne.n	8010e16 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010e0c:	f023 0206 	bic.w	r2, r3, #6
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	661a      	str	r2, [r3, #96]	; 0x60
 8010e14:	e002      	b.n	8010e1c <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	2200      	movs	r2, #0
 8010e1a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	221c      	movs	r2, #28
 8010e22:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2200      	movs	r2, #0
 8010e28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	4a2a      	ldr	r2, [pc, #168]	; (8010edc <HAL_ADC_Start+0x188>)
 8010e32:	4293      	cmp	r3, r2
 8010e34:	d002      	beq.n	8010e3c <HAL_ADC_Start+0xe8>
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	e001      	b.n	8010e40 <HAL_ADC_Start+0xec>
 8010e3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8010e40:	687a      	ldr	r2, [r7, #4]
 8010e42:	6812      	ldr	r2, [r2, #0]
 8010e44:	4293      	cmp	r3, r2
 8010e46:	d008      	beq.n	8010e5a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8010e48:	693b      	ldr	r3, [r7, #16]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d005      	beq.n	8010e5a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8010e4e:	693b      	ldr	r3, [r7, #16]
 8010e50:	2b05      	cmp	r3, #5
 8010e52:	d002      	beq.n	8010e5a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	2b09      	cmp	r3, #9
 8010e58:	d114      	bne.n	8010e84 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	68db      	ldr	r3, [r3, #12]
 8010e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d007      	beq.n	8010e78 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8010e70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f7ff fd53 	bl	8010928 <LL_ADC_REG_StartConversion>
 8010e82:	e026      	b.n	8010ed2 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e88:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	4a11      	ldr	r2, [pc, #68]	; (8010edc <HAL_ADC_Start+0x188>)
 8010e96:	4293      	cmp	r3, r2
 8010e98:	d002      	beq.n	8010ea0 <HAL_ADC_Start+0x14c>
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	e001      	b.n	8010ea4 <HAL_ADC_Start+0x150>
 8010ea0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8010ea4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	68db      	ldr	r3, [r3, #12]
 8010eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d00f      	beq.n	8010ed2 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010eb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8010eba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	65da      	str	r2, [r3, #92]	; 0x5c
 8010ec2:	e006      	b.n	8010ed2 <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8010ecc:	e001      	b.n	8010ed2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8010ece:	2302      	movs	r3, #2
 8010ed0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8010ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	3718      	adds	r7, #24
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}
 8010edc:	50000100 	.word	0x50000100
 8010ee0:	50000300 	.word	0x50000300
 8010ee4:	50000700 	.word	0x50000700

08010ee8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b084      	sub	sp, #16
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010ef6:	2b01      	cmp	r3, #1
 8010ef8:	d101      	bne.n	8010efe <HAL_ADC_Stop+0x16>
 8010efa:	2302      	movs	r3, #2
 8010efc:	e023      	b.n	8010f46 <HAL_ADC_Stop+0x5e>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	2201      	movs	r2, #1
 8010f02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8010f06:	2103      	movs	r1, #3
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f001 f8d1 	bl	80120b0 <ADC_ConversionStop>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8010f12:	7bfb      	ldrb	r3, [r7, #15]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d111      	bne.n	8010f3c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f001 f9e7 	bl	80122ec <ADC_Disable>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8010f22:	7bfb      	ldrb	r3, [r7, #15]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d109      	bne.n	8010f3c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8010f30:	f023 0301 	bic.w	r3, r3, #1
 8010f34:	f043 0201 	orr.w	r2, r3, #1
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2200      	movs	r2, #0
 8010f40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8010f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3710      	adds	r7, #16
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}
	...

08010f50 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b088      	sub	sp, #32
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
 8010f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010f62:	d004      	beq.n	8010f6e <HAL_ADC_PollForConversion+0x1e>
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	4a70      	ldr	r2, [pc, #448]	; (801112c <HAL_ADC_PollForConversion+0x1dc>)
 8010f6a:	4293      	cmp	r3, r2
 8010f6c:	d101      	bne.n	8010f72 <HAL_ADC_PollForConversion+0x22>
 8010f6e:	4b70      	ldr	r3, [pc, #448]	; (8011130 <HAL_ADC_PollForConversion+0x1e0>)
 8010f70:	e000      	b.n	8010f74 <HAL_ADC_PollForConversion+0x24>
 8010f72:	4b70      	ldr	r3, [pc, #448]	; (8011134 <HAL_ADC_PollForConversion+0x1e4>)
 8010f74:	4618      	mov	r0, r3
 8010f76:	f7ff fc1f 	bl	80107b8 <LL_ADC_GetMultimode>
 8010f7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	699b      	ldr	r3, [r3, #24]
 8010f80:	2b08      	cmp	r3, #8
 8010f82:	d102      	bne.n	8010f8a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8010f84:	2308      	movs	r3, #8
 8010f86:	61fb      	str	r3, [r7, #28]
 8010f88:	e037      	b.n	8010ffa <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d005      	beq.n	8010f9c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	2b05      	cmp	r3, #5
 8010f94:	d002      	beq.n	8010f9c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	2b09      	cmp	r3, #9
 8010f9a:	d111      	bne.n	8010fc0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	68db      	ldr	r3, [r3, #12]
 8010fa2:	f003 0301 	and.w	r3, r3, #1
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d007      	beq.n	8010fba <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010fae:	f043 0220 	orr.w	r2, r3, #32
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	e0b3      	b.n	8011122 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8010fba:	2304      	movs	r3, #4
 8010fbc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8010fbe:	e01c      	b.n	8010ffa <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010fc8:	d004      	beq.n	8010fd4 <HAL_ADC_PollForConversion+0x84>
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	4a57      	ldr	r2, [pc, #348]	; (801112c <HAL_ADC_PollForConversion+0x1dc>)
 8010fd0:	4293      	cmp	r3, r2
 8010fd2:	d101      	bne.n	8010fd8 <HAL_ADC_PollForConversion+0x88>
 8010fd4:	4b56      	ldr	r3, [pc, #344]	; (8011130 <HAL_ADC_PollForConversion+0x1e0>)
 8010fd6:	e000      	b.n	8010fda <HAL_ADC_PollForConversion+0x8a>
 8010fd8:	4b56      	ldr	r3, [pc, #344]	; (8011134 <HAL_ADC_PollForConversion+0x1e4>)
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7ff fbfa 	bl	80107d4 <LL_ADC_GetMultiDMATransfer>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d007      	beq.n	8010ff6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010fea:	f043 0220 	orr.w	r2, r3, #32
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	e095      	b.n	8011122 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8010ff6:	2304      	movs	r3, #4
 8010ff8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8010ffa:	f7ff fa37 	bl	801046c <HAL_GetTick>
 8010ffe:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8011000:	e021      	b.n	8011046 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011008:	d01d      	beq.n	8011046 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 801100a:	f7ff fa2f 	bl	801046c <HAL_GetTick>
 801100e:	4602      	mov	r2, r0
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	1ad3      	subs	r3, r2, r3
 8011014:	683a      	ldr	r2, [r7, #0]
 8011016:	429a      	cmp	r2, r3
 8011018:	d302      	bcc.n	8011020 <HAL_ADC_PollForConversion+0xd0>
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d112      	bne.n	8011046 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	681a      	ldr	r2, [r3, #0]
 8011026:	69fb      	ldr	r3, [r7, #28]
 8011028:	4013      	ands	r3, r2
 801102a:	2b00      	cmp	r3, #0
 801102c:	d10b      	bne.n	8011046 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011032:	f043 0204 	orr.w	r2, r3, #4
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	2200      	movs	r2, #0
 801103e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8011042:	2303      	movs	r3, #3
 8011044:	e06d      	b.n	8011122 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	681a      	ldr	r2, [r3, #0]
 801104c:	69fb      	ldr	r3, [r7, #28]
 801104e:	4013      	ands	r3, r2
 8011050:	2b00      	cmp	r3, #0
 8011052:	d0d6      	beq.n	8011002 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011058:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	4618      	mov	r0, r3
 8011066:	f7ff fb01 	bl	801066c <LL_ADC_REG_IsTriggerSourceSWStart>
 801106a:	4603      	mov	r3, r0
 801106c:	2b00      	cmp	r3, #0
 801106e:	d01c      	beq.n	80110aa <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	7f5b      	ldrb	r3, [r3, #29]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d118      	bne.n	80110aa <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	f003 0308 	and.w	r3, r3, #8
 8011082:	2b08      	cmp	r3, #8
 8011084:	d111      	bne.n	80110aa <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801108a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801109a:	2b00      	cmp	r3, #0
 801109c:	d105      	bne.n	80110aa <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110a2:	f043 0201 	orr.w	r2, r3, #1
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	4a1f      	ldr	r2, [pc, #124]	; (801112c <HAL_ADC_PollForConversion+0x1dc>)
 80110b0:	4293      	cmp	r3, r2
 80110b2:	d002      	beq.n	80110ba <HAL_ADC_PollForConversion+0x16a>
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	e001      	b.n	80110be <HAL_ADC_PollForConversion+0x16e>
 80110ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80110be:	687a      	ldr	r2, [r7, #4]
 80110c0:	6812      	ldr	r2, [r2, #0]
 80110c2:	4293      	cmp	r3, r2
 80110c4:	d008      	beq.n	80110d8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80110c6:	697b      	ldr	r3, [r7, #20]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d005      	beq.n	80110d8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	2b05      	cmp	r3, #5
 80110d0:	d002      	beq.n	80110d8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80110d2:	697b      	ldr	r3, [r7, #20]
 80110d4:	2b09      	cmp	r3, #9
 80110d6:	d104      	bne.n	80110e2 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	68db      	ldr	r3, [r3, #12]
 80110de:	61bb      	str	r3, [r7, #24]
 80110e0:	e00d      	b.n	80110fe <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	4a11      	ldr	r2, [pc, #68]	; (801112c <HAL_ADC_PollForConversion+0x1dc>)
 80110e8:	4293      	cmp	r3, r2
 80110ea:	d002      	beq.n	80110f2 <HAL_ADC_PollForConversion+0x1a2>
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	e001      	b.n	80110f6 <HAL_ADC_PollForConversion+0x1a6>
 80110f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80110f6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	68db      	ldr	r3, [r3, #12]
 80110fc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80110fe:	69fb      	ldr	r3, [r7, #28]
 8011100:	2b08      	cmp	r3, #8
 8011102:	d104      	bne.n	801110e <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	2208      	movs	r2, #8
 801110a:	601a      	str	r2, [r3, #0]
 801110c:	e008      	b.n	8011120 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 801110e:	69bb      	ldr	r3, [r7, #24]
 8011110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011114:	2b00      	cmp	r3, #0
 8011116:	d103      	bne.n	8011120 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	220c      	movs	r2, #12
 801111e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8011120:	2300      	movs	r3, #0
}
 8011122:	4618      	mov	r0, r3
 8011124:	3720      	adds	r7, #32
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}
 801112a:	bf00      	nop
 801112c:	50000100 	.word	0x50000100
 8011130:	50000300 	.word	0x50000300
 8011134:	50000700 	.word	0x50000700

08011138 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b086      	sub	sp, #24
 801113c:	af00      	add	r7, sp, #0
 801113e:	60f8      	str	r0, [r7, #12]
 8011140:	60b9      	str	r1, [r7, #8]
 8011142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801114c:	d004      	beq.n	8011158 <HAL_ADC_Start_DMA+0x20>
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	4a57      	ldr	r2, [pc, #348]	; (80112b0 <HAL_ADC_Start_DMA+0x178>)
 8011154:	4293      	cmp	r3, r2
 8011156:	d101      	bne.n	801115c <HAL_ADC_Start_DMA+0x24>
 8011158:	4b56      	ldr	r3, [pc, #344]	; (80112b4 <HAL_ADC_Start_DMA+0x17c>)
 801115a:	e000      	b.n	801115e <HAL_ADC_Start_DMA+0x26>
 801115c:	4b56      	ldr	r3, [pc, #344]	; (80112b8 <HAL_ADC_Start_DMA+0x180>)
 801115e:	4618      	mov	r0, r3
 8011160:	f7ff fb2a 	bl	80107b8 <LL_ADC_GetMultimode>
 8011164:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	4618      	mov	r0, r3
 801116c:	f7ff fc04 	bl	8010978 <LL_ADC_REG_IsConversionOngoing>
 8011170:	4603      	mov	r3, r0
 8011172:	2b00      	cmp	r3, #0
 8011174:	f040 8094 	bne.w	80112a0 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801117e:	2b01      	cmp	r3, #1
 8011180:	d101      	bne.n	8011186 <HAL_ADC_Start_DMA+0x4e>
 8011182:	2302      	movs	r3, #2
 8011184:	e08f      	b.n	80112a6 <HAL_ADC_Start_DMA+0x16e>
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	2201      	movs	r2, #1
 801118a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	4a4a      	ldr	r2, [pc, #296]	; (80112bc <HAL_ADC_Start_DMA+0x184>)
 8011194:	4293      	cmp	r3, r2
 8011196:	d008      	beq.n	80111aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8011198:	693b      	ldr	r3, [r7, #16]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d005      	beq.n	80111aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801119e:	693b      	ldr	r3, [r7, #16]
 80111a0:	2b05      	cmp	r3, #5
 80111a2:	d002      	beq.n	80111aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	2b09      	cmp	r3, #9
 80111a8:	d173      	bne.n	8011292 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80111aa:	68f8      	ldr	r0, [r7, #12]
 80111ac:	f001 f83c 	bl	8012228 <ADC_Enable>
 80111b0:	4603      	mov	r3, r0
 80111b2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80111b4:	7dfb      	ldrb	r3, [r7, #23]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d166      	bne.n	8011288 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80111be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80111c2:	f023 0301 	bic.w	r3, r3, #1
 80111c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	4a37      	ldr	r2, [pc, #220]	; (80112b0 <HAL_ADC_Start_DMA+0x178>)
 80111d4:	4293      	cmp	r3, r2
 80111d6:	d002      	beq.n	80111de <HAL_ADC_Start_DMA+0xa6>
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	e001      	b.n	80111e2 <HAL_ADC_Start_DMA+0xaa>
 80111de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80111e2:	68fa      	ldr	r2, [r7, #12]
 80111e4:	6812      	ldr	r2, [r2, #0]
 80111e6:	4293      	cmp	r3, r2
 80111e8:	d002      	beq.n	80111f0 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d105      	bne.n	80111fc <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80111f4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011204:	2b00      	cmp	r3, #0
 8011206:	d006      	beq.n	8011216 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801120c:	f023 0206 	bic.w	r2, r3, #6
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	661a      	str	r2, [r3, #96]	; 0x60
 8011214:	e002      	b.n	801121c <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	2200      	movs	r2, #0
 801121a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011220:	4a27      	ldr	r2, [pc, #156]	; (80112c0 <HAL_ADC_Start_DMA+0x188>)
 8011222:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011228:	4a26      	ldr	r2, [pc, #152]	; (80112c4 <HAL_ADC_Start_DMA+0x18c>)
 801122a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011230:	4a25      	ldr	r2, [pc, #148]	; (80112c8 <HAL_ADC_Start_DMA+0x190>)
 8011232:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	221c      	movs	r2, #28
 801123a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	2200      	movs	r2, #0
 8011240:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	685a      	ldr	r2, [r3, #4]
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	f042 0210 	orr.w	r2, r2, #16
 8011252:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	68da      	ldr	r2, [r3, #12]
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	f042 0201 	orr.w	r2, r2, #1
 8011262:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	3340      	adds	r3, #64	; 0x40
 801126e:	4619      	mov	r1, r3
 8011270:	68ba      	ldr	r2, [r7, #8]
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	f001 fcb4 	bl	8012be0 <HAL_DMA_Start_IT>
 8011278:	4603      	mov	r3, r0
 801127a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	4618      	mov	r0, r3
 8011282:	f7ff fb51 	bl	8010928 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8011286:	e00d      	b.n	80112a4 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	2200      	movs	r2, #0
 801128c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8011290:	e008      	b.n	80112a4 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8011292:	2301      	movs	r3, #1
 8011294:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	2200      	movs	r2, #0
 801129a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 801129e:	e001      	b.n	80112a4 <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80112a0:	2302      	movs	r3, #2
 80112a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80112a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	3718      	adds	r7, #24
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd80      	pop	{r7, pc}
 80112ae:	bf00      	nop
 80112b0:	50000100 	.word	0x50000100
 80112b4:	50000300 	.word	0x50000300
 80112b8:	50000700 	.word	0x50000700
 80112bc:	50000400 	.word	0x50000400
 80112c0:	080123ab 	.word	0x080123ab
 80112c4:	08012483 	.word	0x08012483
 80112c8:	0801249f 	.word	0x0801249f

080112cc <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b084      	sub	sp, #16
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80112da:	2b01      	cmp	r3, #1
 80112dc:	d101      	bne.n	80112e2 <HAL_ADC_Stop_DMA+0x16>
 80112de:	2302      	movs	r3, #2
 80112e0:	e051      	b.n	8011386 <HAL_ADC_Stop_DMA+0xba>
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2201      	movs	r2, #1
 80112e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80112ea:	2103      	movs	r1, #3
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f000 fedf 	bl	80120b0 <ADC_ConversionStop>
 80112f2:	4603      	mov	r3, r0
 80112f4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80112f6:	7bfb      	ldrb	r3, [r7, #15]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d13f      	bne.n	801137c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	68da      	ldr	r2, [r3, #12]
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	f022 0201 	bic.w	r2, r2, #1
 801130a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011310:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8011314:	b2db      	uxtb	r3, r3
 8011316:	2b02      	cmp	r3, #2
 8011318:	d10f      	bne.n	801133a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801131e:	4618      	mov	r0, r3
 8011320:	f001 fcd9 	bl	8012cd6 <HAL_DMA_Abort>
 8011324:	4603      	mov	r3, r0
 8011326:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8011328:	7bfb      	ldrb	r3, [r7, #15]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d005      	beq.n	801133a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011332:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	685a      	ldr	r2, [r3, #4]
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	f022 0210 	bic.w	r2, r2, #16
 8011348:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 801134a:	7bfb      	ldrb	r3, [r7, #15]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d105      	bne.n	801135c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	f000 ffcb 	bl	80122ec <ADC_Disable>
 8011356:	4603      	mov	r3, r0
 8011358:	73fb      	strb	r3, [r7, #15]
 801135a:	e002      	b.n	8011362 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f000 ffc5 	bl	80122ec <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8011362:	7bfb      	ldrb	r3, [r7, #15]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d109      	bne.n	801137c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801136c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8011370:	f023 0301 	bic.w	r3, r3, #1
 8011374:	f043 0201 	orr.w	r2, r3, #1
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	2200      	movs	r2, #0
 8011380:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8011384:	7bfb      	ldrb	r3, [r7, #15]
}
 8011386:	4618      	mov	r0, r3
 8011388:	3710      	adds	r7, #16
 801138a:	46bd      	mov	sp, r7
 801138c:	bd80      	pop	{r7, pc}

0801138e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 801138e:	b480      	push	{r7}
 8011390:	b083      	sub	sp, #12
 8011392:	af00      	add	r7, sp, #0
 8011394:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 801139c:	4618      	mov	r0, r3
 801139e:	370c      	adds	r7, #12
 80113a0:	46bd      	mov	sp, r7
 80113a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a6:	4770      	bx	lr

080113a8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b08a      	sub	sp, #40	; 0x28
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80113b0:	2300      	movs	r3, #0
 80113b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	685b      	ldr	r3, [r3, #4]
 80113c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80113cc:	d004      	beq.n	80113d8 <HAL_ADC_IRQHandler+0x30>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	4a87      	ldr	r2, [pc, #540]	; (80115f0 <HAL_ADC_IRQHandler+0x248>)
 80113d4:	4293      	cmp	r3, r2
 80113d6:	d101      	bne.n	80113dc <HAL_ADC_IRQHandler+0x34>
 80113d8:	4b86      	ldr	r3, [pc, #536]	; (80115f4 <HAL_ADC_IRQHandler+0x24c>)
 80113da:	e000      	b.n	80113de <HAL_ADC_IRQHandler+0x36>
 80113dc:	4b86      	ldr	r3, [pc, #536]	; (80115f8 <HAL_ADC_IRQHandler+0x250>)
 80113de:	4618      	mov	r0, r3
 80113e0:	f7ff f9ea 	bl	80107b8 <LL_ADC_GetMultimode>
 80113e4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80113e6:	69fb      	ldr	r3, [r7, #28]
 80113e8:	f003 0302 	and.w	r3, r3, #2
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d017      	beq.n	8011420 <HAL_ADC_IRQHandler+0x78>
 80113f0:	69bb      	ldr	r3, [r7, #24]
 80113f2:	f003 0302 	and.w	r3, r3, #2
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d012      	beq.n	8011420 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80113fe:	f003 0310 	and.w	r3, r3, #16
 8011402:	2b00      	cmp	r3, #0
 8011404:	d105      	bne.n	8011412 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801140a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	f001 f93a 	bl	801268c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	2202      	movs	r2, #2
 801141e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8011420:	69fb      	ldr	r3, [r7, #28]
 8011422:	f003 0304 	and.w	r3, r3, #4
 8011426:	2b00      	cmp	r3, #0
 8011428:	d004      	beq.n	8011434 <HAL_ADC_IRQHandler+0x8c>
 801142a:	69bb      	ldr	r3, [r7, #24]
 801142c:	f003 0304 	and.w	r3, r3, #4
 8011430:	2b00      	cmp	r3, #0
 8011432:	d10a      	bne.n	801144a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8011434:	69fb      	ldr	r3, [r7, #28]
 8011436:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 801143a:	2b00      	cmp	r3, #0
 801143c:	f000 8085 	beq.w	801154a <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8011440:	69bb      	ldr	r3, [r7, #24]
 8011442:	f003 0308 	and.w	r3, r3, #8
 8011446:	2b00      	cmp	r3, #0
 8011448:	d07f      	beq.n	801154a <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801144e:	f003 0310 	and.w	r3, r3, #16
 8011452:	2b00      	cmp	r3, #0
 8011454:	d105      	bne.n	8011462 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801145a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	4618      	mov	r0, r3
 8011468:	f7ff f900 	bl	801066c <LL_ADC_REG_IsTriggerSourceSWStart>
 801146c:	4603      	mov	r3, r0
 801146e:	2b00      	cmp	r3, #0
 8011470:	d064      	beq.n	801153c <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	4a5e      	ldr	r2, [pc, #376]	; (80115f0 <HAL_ADC_IRQHandler+0x248>)
 8011478:	4293      	cmp	r3, r2
 801147a:	d002      	beq.n	8011482 <HAL_ADC_IRQHandler+0xda>
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	e001      	b.n	8011486 <HAL_ADC_IRQHandler+0xde>
 8011482:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8011486:	687a      	ldr	r2, [r7, #4]
 8011488:	6812      	ldr	r2, [r2, #0]
 801148a:	4293      	cmp	r3, r2
 801148c:	d008      	beq.n	80114a0 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d005      	beq.n	80114a0 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8011494:	697b      	ldr	r3, [r7, #20]
 8011496:	2b05      	cmp	r3, #5
 8011498:	d002      	beq.n	80114a0 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	2b09      	cmp	r3, #9
 801149e:	d104      	bne.n	80114aa <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	68db      	ldr	r3, [r3, #12]
 80114a6:	623b      	str	r3, [r7, #32]
 80114a8:	e00d      	b.n	80114c6 <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	4a50      	ldr	r2, [pc, #320]	; (80115f0 <HAL_ADC_IRQHandler+0x248>)
 80114b0:	4293      	cmp	r3, r2
 80114b2:	d002      	beq.n	80114ba <HAL_ADC_IRQHandler+0x112>
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	e001      	b.n	80114be <HAL_ADC_IRQHandler+0x116>
 80114ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80114be:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80114c0:	693b      	ldr	r3, [r7, #16]
 80114c2:	68db      	ldr	r3, [r3, #12]
 80114c4:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80114c6:	6a3b      	ldr	r3, [r7, #32]
 80114c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d135      	bne.n	801153c <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	f003 0308 	and.w	r3, r3, #8
 80114da:	2b08      	cmp	r3, #8
 80114dc:	d12e      	bne.n	801153c <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	4618      	mov	r0, r3
 80114e4:	f7ff fa48 	bl	8010978 <LL_ADC_REG_IsConversionOngoing>
 80114e8:	4603      	mov	r3, r0
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d11a      	bne.n	8011524 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	685a      	ldr	r2, [r3, #4]
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	f022 020c 	bic.w	r2, r2, #12
 80114fc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801150e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011512:	2b00      	cmp	r3, #0
 8011514:	d112      	bne.n	801153c <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801151a:	f043 0201 	orr.w	r2, r3, #1
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	65da      	str	r2, [r3, #92]	; 0x5c
 8011522:	e00b      	b.n	801153c <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011528:	f043 0210 	orr.w	r2, r3, #16
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011534:	f043 0201 	orr.w	r2, r3, #1
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801153c:	6878      	ldr	r0, [r7, #4]
 801153e:	f7f6 fe57 	bl	80081f0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	220c      	movs	r2, #12
 8011548:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 801154a:	69fb      	ldr	r3, [r7, #28]
 801154c:	f003 0320 	and.w	r3, r3, #32
 8011550:	2b00      	cmp	r3, #0
 8011552:	d004      	beq.n	801155e <HAL_ADC_IRQHandler+0x1b6>
 8011554:	69bb      	ldr	r3, [r7, #24]
 8011556:	f003 0320 	and.w	r3, r3, #32
 801155a:	2b00      	cmp	r3, #0
 801155c:	d10b      	bne.n	8011576 <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 801155e:	69fb      	ldr	r3, [r7, #28]
 8011560:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8011564:	2b00      	cmp	r3, #0
 8011566:	f000 80a1 	beq.w	80116ac <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 801156a:	69bb      	ldr	r3, [r7, #24]
 801156c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011570:	2b00      	cmp	r3, #0
 8011572:	f000 809b 	beq.w	80116ac <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801157a:	f003 0310 	and.w	r3, r3, #16
 801157e:	2b00      	cmp	r3, #0
 8011580:	d105      	bne.n	801158e <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011586:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	4618      	mov	r0, r3
 8011594:	f7ff f8a9 	bl	80106ea <LL_ADC_INJ_IsTriggerSourceSWStart>
 8011598:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	4618      	mov	r0, r3
 80115a0:	f7ff f864 	bl	801066c <LL_ADC_REG_IsTriggerSourceSWStart>
 80115a4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	4a11      	ldr	r2, [pc, #68]	; (80115f0 <HAL_ADC_IRQHandler+0x248>)
 80115ac:	4293      	cmp	r3, r2
 80115ae:	d002      	beq.n	80115b6 <HAL_ADC_IRQHandler+0x20e>
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	e001      	b.n	80115ba <HAL_ADC_IRQHandler+0x212>
 80115b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80115ba:	687a      	ldr	r2, [r7, #4]
 80115bc:	6812      	ldr	r2, [r2, #0]
 80115be:	4293      	cmp	r3, r2
 80115c0:	d008      	beq.n	80115d4 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80115c2:	697b      	ldr	r3, [r7, #20]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d005      	beq.n	80115d4 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	2b06      	cmp	r3, #6
 80115cc:	d002      	beq.n	80115d4 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	2b07      	cmp	r3, #7
 80115d2:	d104      	bne.n	80115de <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	68db      	ldr	r3, [r3, #12]
 80115da:	623b      	str	r3, [r7, #32]
 80115dc:	e014      	b.n	8011608 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	4a03      	ldr	r2, [pc, #12]	; (80115f0 <HAL_ADC_IRQHandler+0x248>)
 80115e4:	4293      	cmp	r3, r2
 80115e6:	d009      	beq.n	80115fc <HAL_ADC_IRQHandler+0x254>
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	e008      	b.n	8011600 <HAL_ADC_IRQHandler+0x258>
 80115ee:	bf00      	nop
 80115f0:	50000100 	.word	0x50000100
 80115f4:	50000300 	.word	0x50000300
 80115f8:	50000700 	.word	0x50000700
 80115fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8011600:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8011602:	693b      	ldr	r3, [r7, #16]
 8011604:	68db      	ldr	r3, [r3, #12]
 8011606:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d047      	beq.n	801169e <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 801160e:	6a3b      	ldr	r3, [r7, #32]
 8011610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011614:	2b00      	cmp	r3, #0
 8011616:	d007      	beq.n	8011628 <HAL_ADC_IRQHandler+0x280>
 8011618:	68bb      	ldr	r3, [r7, #8]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d03f      	beq.n	801169e <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 801161e:	6a3b      	ldr	r3, [r7, #32]
 8011620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8011624:	2b00      	cmp	r3, #0
 8011626:	d13a      	bne.n	801169e <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011632:	2b40      	cmp	r3, #64	; 0x40
 8011634:	d133      	bne.n	801169e <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8011636:	6a3b      	ldr	r3, [r7, #32]
 8011638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801163c:	2b00      	cmp	r3, #0
 801163e:	d12e      	bne.n	801169e <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	4618      	mov	r0, r3
 8011646:	f7ff f9be 	bl	80109c6 <LL_ADC_INJ_IsConversionOngoing>
 801164a:	4603      	mov	r3, r0
 801164c:	2b00      	cmp	r3, #0
 801164e:	d11a      	bne.n	8011686 <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	685a      	ldr	r2, [r3, #4]
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801165e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011664:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011674:	2b00      	cmp	r3, #0
 8011676:	d112      	bne.n	801169e <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801167c:	f043 0201 	orr.w	r2, r3, #1
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	65da      	str	r2, [r3, #92]	; 0x5c
 8011684:	e00b      	b.n	801169e <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801168a:	f043 0210 	orr.w	r2, r3, #16
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011696:	f043 0201 	orr.w	r2, r3, #1
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f000 ffcc 	bl	801263c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	2260      	movs	r2, #96	; 0x60
 80116aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80116ac:	69fb      	ldr	r3, [r7, #28]
 80116ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d011      	beq.n	80116da <HAL_ADC_IRQHandler+0x332>
 80116b6:	69bb      	ldr	r3, [r7, #24]
 80116b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d00c      	beq.n	80116da <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80116c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f000 f8af 	bl	8011830 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	2280      	movs	r2, #128	; 0x80
 80116d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80116da:	69fb      	ldr	r3, [r7, #28]
 80116dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d012      	beq.n	801170a <HAL_ADC_IRQHandler+0x362>
 80116e4:	69bb      	ldr	r3, [r7, #24]
 80116e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d00d      	beq.n	801170a <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80116f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80116fa:	6878      	ldr	r0, [r7, #4]
 80116fc:	f000 ffb2 	bl	8012664 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011708:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 801170a:	69fb      	ldr	r3, [r7, #28]
 801170c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011710:	2b00      	cmp	r3, #0
 8011712:	d012      	beq.n	801173a <HAL_ADC_IRQHandler+0x392>
 8011714:	69bb      	ldr	r3, [r7, #24]
 8011716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801171a:	2b00      	cmp	r3, #0
 801171c:	d00d      	beq.n	801173a <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011722:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f000 ffa4 	bl	8012678 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011738:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 801173a:	69fb      	ldr	r3, [r7, #28]
 801173c:	f003 0310 	and.w	r3, r3, #16
 8011740:	2b00      	cmp	r3, #0
 8011742:	d043      	beq.n	80117cc <HAL_ADC_IRQHandler+0x424>
 8011744:	69bb      	ldr	r3, [r7, #24]
 8011746:	f003 0310 	and.w	r3, r3, #16
 801174a:	2b00      	cmp	r3, #0
 801174c:	d03e      	beq.n	80117cc <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011752:	2b00      	cmp	r3, #0
 8011754:	d102      	bne.n	801175c <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 8011756:	2301      	movs	r3, #1
 8011758:	627b      	str	r3, [r7, #36]	; 0x24
 801175a:	e021      	b.n	80117a0 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d015      	beq.n	801178e <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801176a:	d004      	beq.n	8011776 <HAL_ADC_IRQHandler+0x3ce>
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	4a27      	ldr	r2, [pc, #156]	; (8011810 <HAL_ADC_IRQHandler+0x468>)
 8011772:	4293      	cmp	r3, r2
 8011774:	d101      	bne.n	801177a <HAL_ADC_IRQHandler+0x3d2>
 8011776:	4b27      	ldr	r3, [pc, #156]	; (8011814 <HAL_ADC_IRQHandler+0x46c>)
 8011778:	e000      	b.n	801177c <HAL_ADC_IRQHandler+0x3d4>
 801177a:	4b27      	ldr	r3, [pc, #156]	; (8011818 <HAL_ADC_IRQHandler+0x470>)
 801177c:	4618      	mov	r0, r3
 801177e:	f7ff f829 	bl	80107d4 <LL_ADC_GetMultiDMATransfer>
 8011782:	4603      	mov	r3, r0
 8011784:	2b00      	cmp	r3, #0
 8011786:	d00b      	beq.n	80117a0 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8011788:	2301      	movs	r3, #1
 801178a:	627b      	str	r3, [r7, #36]	; 0x24
 801178c:	e008      	b.n	80117a0 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	68db      	ldr	r3, [r3, #12]
 8011794:	f003 0301 	and.w	r3, r3, #1
 8011798:	2b00      	cmp	r3, #0
 801179a:	d001      	beq.n	80117a0 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 801179c:	2301      	movs	r3, #1
 801179e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80117a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117a2:	2b01      	cmp	r3, #1
 80117a4:	d10e      	bne.n	80117c4 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80117aa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80117b6:	f043 0202 	orr.w	r2, r3, #2
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f000 f840 	bl	8011844 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	2210      	movs	r2, #16
 80117ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80117cc:	69fb      	ldr	r3, [r7, #28]
 80117ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d018      	beq.n	8011808 <HAL_ADC_IRQHandler+0x460>
 80117d6:	69bb      	ldr	r3, [r7, #24]
 80117d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d013      	beq.n	8011808 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80117e4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80117f0:	f043 0208 	orr.w	r2, r3, #8
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011800:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f000 ff24 	bl	8012650 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8011808:	bf00      	nop
 801180a:	3728      	adds	r7, #40	; 0x28
 801180c:	46bd      	mov	sp, r7
 801180e:	bd80      	pop	{r7, pc}
 8011810:	50000100 	.word	0x50000100
 8011814:	50000300 	.word	0x50000300
 8011818:	50000700 	.word	0x50000700

0801181c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 801181c:	b480      	push	{r7}
 801181e:	b083      	sub	sp, #12
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8011824:	bf00      	nop
 8011826:	370c      	adds	r7, #12
 8011828:	46bd      	mov	sp, r7
 801182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182e:	4770      	bx	lr

08011830 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8011830:	b480      	push	{r7}
 8011832:	b083      	sub	sp, #12
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8011838:	bf00      	nop
 801183a:	370c      	adds	r7, #12
 801183c:	46bd      	mov	sp, r7
 801183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011842:	4770      	bx	lr

08011844 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8011844:	b480      	push	{r7}
 8011846:	b083      	sub	sp, #12
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 801184c:	bf00      	nop
 801184e:	370c      	adds	r7, #12
 8011850:	46bd      	mov	sp, r7
 8011852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011856:	4770      	bx	lr

08011858 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b0b6      	sub	sp, #216	; 0xd8
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011862:	2300      	movs	r3, #0
 8011864:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8011868:	2300      	movs	r3, #0
 801186a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8011872:	2b01      	cmp	r3, #1
 8011874:	d102      	bne.n	801187c <HAL_ADC_ConfigChannel+0x24>
 8011876:	2302      	movs	r3, #2
 8011878:	f000 bc04 	b.w	8012084 <HAL_ADC_ConfigChannel+0x82c>
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	2201      	movs	r2, #1
 8011880:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	4618      	mov	r0, r3
 801188a:	f7ff f875 	bl	8010978 <LL_ADC_REG_IsConversionOngoing>
 801188e:	4603      	mov	r3, r0
 8011890:	2b00      	cmp	r3, #0
 8011892:	f040 83e8 	bne.w	8012066 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6818      	ldr	r0, [r3, #0]
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	6859      	ldr	r1, [r3, #4]
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	461a      	mov	r2, r3
 80118a4:	f7fe fef5 	bl	8010692 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	4618      	mov	r0, r3
 80118ae:	f7ff f863 	bl	8010978 <LL_ADC_REG_IsConversionOngoing>
 80118b2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	4618      	mov	r0, r3
 80118bc:	f7ff f883 	bl	80109c6 <LL_ADC_INJ_IsConversionOngoing>
 80118c0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80118c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	f040 81d9 	bne.w	8011c80 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80118ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	f040 81d4 	bne.w	8011c80 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	689b      	ldr	r3, [r3, #8]
 80118dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80118e0:	d10f      	bne.n	8011902 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	6818      	ldr	r0, [r3, #0]
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	2200      	movs	r2, #0
 80118ec:	4619      	mov	r1, r3
 80118ee:	f7fe ff0f 	bl	8010710 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80118fa:	4618      	mov	r0, r3
 80118fc:	f7fe fea3 	bl	8010646 <LL_ADC_SetSamplingTimeCommonConfig>
 8011900:	e00e      	b.n	8011920 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	6818      	ldr	r0, [r3, #0]
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	6819      	ldr	r1, [r3, #0]
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	689b      	ldr	r3, [r3, #8]
 801190e:	461a      	mov	r2, r3
 8011910:	f7fe fefe 	bl	8010710 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	2100      	movs	r1, #0
 801191a:	4618      	mov	r0, r3
 801191c:	f7fe fe93 	bl	8010646 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	695a      	ldr	r2, [r3, #20]
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	68db      	ldr	r3, [r3, #12]
 801192a:	08db      	lsrs	r3, r3, #3
 801192c:	f003 0303 	and.w	r3, r3, #3
 8011930:	005b      	lsls	r3, r3, #1
 8011932:	fa02 f303 	lsl.w	r3, r2, r3
 8011936:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	691b      	ldr	r3, [r3, #16]
 801193e:	2b04      	cmp	r3, #4
 8011940:	d022      	beq.n	8011988 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6818      	ldr	r0, [r3, #0]
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	6919      	ldr	r1, [r3, #16]
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	681a      	ldr	r2, [r3, #0]
 801194e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011952:	f7fe fded 	bl	8010530 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	6818      	ldr	r0, [r3, #0]
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	6919      	ldr	r1, [r3, #16]
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	699b      	ldr	r3, [r3, #24]
 8011962:	461a      	mov	r2, r3
 8011964:	f7fe fe39 	bl	80105da <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6818      	ldr	r0, [r3, #0]
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	6919      	ldr	r1, [r3, #16]
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	7f1b      	ldrb	r3, [r3, #28]
 8011974:	2b01      	cmp	r3, #1
 8011976:	d102      	bne.n	801197e <HAL_ADC_ConfigChannel+0x126>
 8011978:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801197c:	e000      	b.n	8011980 <HAL_ADC_ConfigChannel+0x128>
 801197e:	2300      	movs	r3, #0
 8011980:	461a      	mov	r2, r3
 8011982:	f7fe fe45 	bl	8010610 <LL_ADC_SetOffsetSaturation>
 8011986:	e17b      	b.n	8011c80 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	2100      	movs	r1, #0
 801198e:	4618      	mov	r0, r3
 8011990:	f7fe fdf2 	bl	8010578 <LL_ADC_GetOffsetChannel>
 8011994:	4603      	mov	r3, r0
 8011996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801199a:	2b00      	cmp	r3, #0
 801199c:	d10a      	bne.n	80119b4 <HAL_ADC_ConfigChannel+0x15c>
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	2100      	movs	r1, #0
 80119a4:	4618      	mov	r0, r3
 80119a6:	f7fe fde7 	bl	8010578 <LL_ADC_GetOffsetChannel>
 80119aa:	4603      	mov	r3, r0
 80119ac:	0e9b      	lsrs	r3, r3, #26
 80119ae:	f003 021f 	and.w	r2, r3, #31
 80119b2:	e01e      	b.n	80119f2 <HAL_ADC_ConfigChannel+0x19a>
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	2100      	movs	r1, #0
 80119ba:	4618      	mov	r0, r3
 80119bc:	f7fe fddc 	bl	8010578 <LL_ADC_GetOffsetChannel>
 80119c0:	4603      	mov	r3, r0
 80119c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80119c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80119ca:	fa93 f3a3 	rbit	r3, r3
 80119ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80119d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80119d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80119da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d101      	bne.n	80119e6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80119e2:	2320      	movs	r3, #32
 80119e4:	e004      	b.n	80119f0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80119e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80119ea:	fab3 f383 	clz	r3, r3
 80119ee:	b2db      	uxtb	r3, r3
 80119f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80119f2:	683b      	ldr	r3, [r7, #0]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d105      	bne.n	8011a0a <HAL_ADC_ConfigChannel+0x1b2>
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	0e9b      	lsrs	r3, r3, #26
 8011a04:	f003 031f 	and.w	r3, r3, #31
 8011a08:	e018      	b.n	8011a3c <HAL_ADC_ConfigChannel+0x1e4>
 8011a0a:	683b      	ldr	r3, [r7, #0]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011a12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011a16:	fa93 f3a3 	rbit	r3, r3
 8011a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8011a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011a22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8011a26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d101      	bne.n	8011a32 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8011a2e:	2320      	movs	r3, #32
 8011a30:	e004      	b.n	8011a3c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8011a32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011a36:	fab3 f383 	clz	r3, r3
 8011a3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8011a3c:	429a      	cmp	r2, r3
 8011a3e:	d106      	bne.n	8011a4e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	2200      	movs	r2, #0
 8011a46:	2100      	movs	r1, #0
 8011a48:	4618      	mov	r0, r3
 8011a4a:	f7fe fdab 	bl	80105a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	2101      	movs	r1, #1
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7fe fd8f 	bl	8010578 <LL_ADC_GetOffsetChannel>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d10a      	bne.n	8011a7a <HAL_ADC_ConfigChannel+0x222>
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	2101      	movs	r1, #1
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7fe fd84 	bl	8010578 <LL_ADC_GetOffsetChannel>
 8011a70:	4603      	mov	r3, r0
 8011a72:	0e9b      	lsrs	r3, r3, #26
 8011a74:	f003 021f 	and.w	r2, r3, #31
 8011a78:	e01e      	b.n	8011ab8 <HAL_ADC_ConfigChannel+0x260>
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	2101      	movs	r1, #1
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7fe fd79 	bl	8010578 <LL_ADC_GetOffsetChannel>
 8011a86:	4603      	mov	r3, r0
 8011a88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011a8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011a90:	fa93 f3a3 	rbit	r3, r3
 8011a94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8011a98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8011aa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d101      	bne.n	8011aac <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8011aa8:	2320      	movs	r3, #32
 8011aaa:	e004      	b.n	8011ab6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8011aac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011ab0:	fab3 f383 	clz	r3, r3
 8011ab4:	b2db      	uxtb	r3, r3
 8011ab6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d105      	bne.n	8011ad0 <HAL_ADC_ConfigChannel+0x278>
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	0e9b      	lsrs	r3, r3, #26
 8011aca:	f003 031f 	and.w	r3, r3, #31
 8011ace:	e018      	b.n	8011b02 <HAL_ADC_ConfigChannel+0x2aa>
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011adc:	fa93 f3a3 	rbit	r3, r3
 8011ae0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8011ae4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011ae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8011aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d101      	bne.n	8011af8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8011af4:	2320      	movs	r3, #32
 8011af6:	e004      	b.n	8011b02 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8011af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011afc:	fab3 f383 	clz	r3, r3
 8011b00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d106      	bne.n	8011b14 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	2101      	movs	r1, #1
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7fe fd48 	bl	80105a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	2102      	movs	r1, #2
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f7fe fd2c 	bl	8010578 <LL_ADC_GetOffsetChannel>
 8011b20:	4603      	mov	r3, r0
 8011b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d10a      	bne.n	8011b40 <HAL_ADC_ConfigChannel+0x2e8>
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	2102      	movs	r1, #2
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7fe fd21 	bl	8010578 <LL_ADC_GetOffsetChannel>
 8011b36:	4603      	mov	r3, r0
 8011b38:	0e9b      	lsrs	r3, r3, #26
 8011b3a:	f003 021f 	and.w	r2, r3, #31
 8011b3e:	e01e      	b.n	8011b7e <HAL_ADC_ConfigChannel+0x326>
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	2102      	movs	r1, #2
 8011b46:	4618      	mov	r0, r3
 8011b48:	f7fe fd16 	bl	8010578 <LL_ADC_GetOffsetChannel>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011b52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011b56:	fa93 f3a3 	rbit	r3, r3
 8011b5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8011b5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011b62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8011b66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d101      	bne.n	8011b72 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8011b6e:	2320      	movs	r3, #32
 8011b70:	e004      	b.n	8011b7c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8011b72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011b76:	fab3 f383 	clz	r3, r3
 8011b7a:	b2db      	uxtb	r3, r3
 8011b7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d105      	bne.n	8011b96 <HAL_ADC_ConfigChannel+0x33e>
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	0e9b      	lsrs	r3, r3, #26
 8011b90:	f003 031f 	and.w	r3, r3, #31
 8011b94:	e016      	b.n	8011bc4 <HAL_ADC_ConfigChannel+0x36c>
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011b9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011ba2:	fa93 f3a3 	rbit	r3, r3
 8011ba6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8011ba8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011baa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8011bae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d101      	bne.n	8011bba <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8011bb6:	2320      	movs	r3, #32
 8011bb8:	e004      	b.n	8011bc4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8011bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011bbe:	fab3 f383 	clz	r3, r3
 8011bc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	d106      	bne.n	8011bd6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	2200      	movs	r2, #0
 8011bce:	2102      	movs	r1, #2
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f7fe fce7 	bl	80105a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	2103      	movs	r1, #3
 8011bdc:	4618      	mov	r0, r3
 8011bde:	f7fe fccb 	bl	8010578 <LL_ADC_GetOffsetChannel>
 8011be2:	4603      	mov	r3, r0
 8011be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d10a      	bne.n	8011c02 <HAL_ADC_ConfigChannel+0x3aa>
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	2103      	movs	r1, #3
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7fe fcc0 	bl	8010578 <LL_ADC_GetOffsetChannel>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	0e9b      	lsrs	r3, r3, #26
 8011bfc:	f003 021f 	and.w	r2, r3, #31
 8011c00:	e017      	b.n	8011c32 <HAL_ADC_ConfigChannel+0x3da>
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	2103      	movs	r1, #3
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f7fe fcb5 	bl	8010578 <LL_ADC_GetOffsetChannel>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011c14:	fa93 f3a3 	rbit	r3, r3
 8011c18:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8011c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011c1c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8011c1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d101      	bne.n	8011c28 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8011c24:	2320      	movs	r3, #32
 8011c26:	e003      	b.n	8011c30 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8011c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011c2a:	fab3 f383 	clz	r3, r3
 8011c2e:	b2db      	uxtb	r3, r3
 8011c30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d105      	bne.n	8011c4a <HAL_ADC_ConfigChannel+0x3f2>
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	0e9b      	lsrs	r3, r3, #26
 8011c44:	f003 031f 	and.w	r3, r3, #31
 8011c48:	e011      	b.n	8011c6e <HAL_ADC_ConfigChannel+0x416>
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011c50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c52:	fa93 f3a3 	rbit	r3, r3
 8011c56:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8011c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8011c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d101      	bne.n	8011c66 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8011c62:	2320      	movs	r3, #32
 8011c64:	e003      	b.n	8011c6e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8011c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c68:	fab3 f383 	clz	r3, r3
 8011c6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	d106      	bne.n	8011c80 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	2200      	movs	r2, #0
 8011c78:	2103      	movs	r1, #3
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f7fe fc92 	bl	80105a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7fe fe29 	bl	80108dc <LL_ADC_IsEnabled>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	f040 813d 	bne.w	8011f0c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	6818      	ldr	r0, [r3, #0]
 8011c96:	683b      	ldr	r3, [r7, #0]
 8011c98:	6819      	ldr	r1, [r3, #0]
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	68db      	ldr	r3, [r3, #12]
 8011c9e:	461a      	mov	r2, r3
 8011ca0:	f7fe fd62 	bl	8010768 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	68db      	ldr	r3, [r3, #12]
 8011ca8:	4aa2      	ldr	r2, [pc, #648]	; (8011f34 <HAL_ADC_ConfigChannel+0x6dc>)
 8011caa:	4293      	cmp	r3, r2
 8011cac:	f040 812e 	bne.w	8011f0c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d10b      	bne.n	8011cd8 <HAL_ADC_ConfigChannel+0x480>
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	0e9b      	lsrs	r3, r3, #26
 8011cc6:	3301      	adds	r3, #1
 8011cc8:	f003 031f 	and.w	r3, r3, #31
 8011ccc:	2b09      	cmp	r3, #9
 8011cce:	bf94      	ite	ls
 8011cd0:	2301      	movls	r3, #1
 8011cd2:	2300      	movhi	r3, #0
 8011cd4:	b2db      	uxtb	r3, r3
 8011cd6:	e019      	b.n	8011d0c <HAL_ADC_ConfigChannel+0x4b4>
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011ce0:	fa93 f3a3 	rbit	r3, r3
 8011ce4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8011ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011ce8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8011cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d101      	bne.n	8011cf4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8011cf0:	2320      	movs	r3, #32
 8011cf2:	e003      	b.n	8011cfc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8011cf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011cf6:	fab3 f383 	clz	r3, r3
 8011cfa:	b2db      	uxtb	r3, r3
 8011cfc:	3301      	adds	r3, #1
 8011cfe:	f003 031f 	and.w	r3, r3, #31
 8011d02:	2b09      	cmp	r3, #9
 8011d04:	bf94      	ite	ls
 8011d06:	2301      	movls	r3, #1
 8011d08:	2300      	movhi	r3, #0
 8011d0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d079      	beq.n	8011e04 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d107      	bne.n	8011d2c <HAL_ADC_ConfigChannel+0x4d4>
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	0e9b      	lsrs	r3, r3, #26
 8011d22:	3301      	adds	r3, #1
 8011d24:	069b      	lsls	r3, r3, #26
 8011d26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8011d2a:	e015      	b.n	8011d58 <HAL_ADC_ConfigChannel+0x500>
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d34:	fa93 f3a3 	rbit	r3, r3
 8011d38:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8011d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8011d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d101      	bne.n	8011d48 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8011d44:	2320      	movs	r3, #32
 8011d46:	e003      	b.n	8011d50 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8011d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d4a:	fab3 f383 	clz	r3, r3
 8011d4e:	b2db      	uxtb	r3, r3
 8011d50:	3301      	adds	r3, #1
 8011d52:	069b      	lsls	r3, r3, #26
 8011d54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d109      	bne.n	8011d78 <HAL_ADC_ConfigChannel+0x520>
 8011d64:	683b      	ldr	r3, [r7, #0]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	0e9b      	lsrs	r3, r3, #26
 8011d6a:	3301      	adds	r3, #1
 8011d6c:	f003 031f 	and.w	r3, r3, #31
 8011d70:	2101      	movs	r1, #1
 8011d72:	fa01 f303 	lsl.w	r3, r1, r3
 8011d76:	e017      	b.n	8011da8 <HAL_ADC_ConfigChannel+0x550>
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d80:	fa93 f3a3 	rbit	r3, r3
 8011d84:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8011d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8011d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d101      	bne.n	8011d94 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8011d90:	2320      	movs	r3, #32
 8011d92:	e003      	b.n	8011d9c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8011d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d96:	fab3 f383 	clz	r3, r3
 8011d9a:	b2db      	uxtb	r3, r3
 8011d9c:	3301      	adds	r3, #1
 8011d9e:	f003 031f 	and.w	r3, r3, #31
 8011da2:	2101      	movs	r1, #1
 8011da4:	fa01 f303 	lsl.w	r3, r1, r3
 8011da8:	ea42 0103 	orr.w	r1, r2, r3
 8011dac:	683b      	ldr	r3, [r7, #0]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d10a      	bne.n	8011dce <HAL_ADC_ConfigChannel+0x576>
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	0e9b      	lsrs	r3, r3, #26
 8011dbe:	3301      	adds	r3, #1
 8011dc0:	f003 021f 	and.w	r2, r3, #31
 8011dc4:	4613      	mov	r3, r2
 8011dc6:	005b      	lsls	r3, r3, #1
 8011dc8:	4413      	add	r3, r2
 8011dca:	051b      	lsls	r3, r3, #20
 8011dcc:	e018      	b.n	8011e00 <HAL_ADC_ConfigChannel+0x5a8>
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd6:	fa93 f3a3 	rbit	r3, r3
 8011dda:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8011ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8011de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d101      	bne.n	8011dea <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8011de6:	2320      	movs	r3, #32
 8011de8:	e003      	b.n	8011df2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8011dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dec:	fab3 f383 	clz	r3, r3
 8011df0:	b2db      	uxtb	r3, r3
 8011df2:	3301      	adds	r3, #1
 8011df4:	f003 021f 	and.w	r2, r3, #31
 8011df8:	4613      	mov	r3, r2
 8011dfa:	005b      	lsls	r3, r3, #1
 8011dfc:	4413      	add	r3, r2
 8011dfe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8011e00:	430b      	orrs	r3, r1
 8011e02:	e07e      	b.n	8011f02 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d107      	bne.n	8011e20 <HAL_ADC_ConfigChannel+0x5c8>
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	0e9b      	lsrs	r3, r3, #26
 8011e16:	3301      	adds	r3, #1
 8011e18:	069b      	lsls	r3, r3, #26
 8011e1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8011e1e:	e015      	b.n	8011e4c <HAL_ADC_ConfigChannel+0x5f4>
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e28:	fa93 f3a3 	rbit	r3, r3
 8011e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8011e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e30:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8011e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d101      	bne.n	8011e3c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8011e38:	2320      	movs	r3, #32
 8011e3a:	e003      	b.n	8011e44 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8011e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e3e:	fab3 f383 	clz	r3, r3
 8011e42:	b2db      	uxtb	r3, r3
 8011e44:	3301      	adds	r3, #1
 8011e46:	069b      	lsls	r3, r3, #26
 8011e48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d109      	bne.n	8011e6c <HAL_ADC_ConfigChannel+0x614>
 8011e58:	683b      	ldr	r3, [r7, #0]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	0e9b      	lsrs	r3, r3, #26
 8011e5e:	3301      	adds	r3, #1
 8011e60:	f003 031f 	and.w	r3, r3, #31
 8011e64:	2101      	movs	r1, #1
 8011e66:	fa01 f303 	lsl.w	r3, r1, r3
 8011e6a:	e017      	b.n	8011e9c <HAL_ADC_ConfigChannel+0x644>
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011e72:	6a3b      	ldr	r3, [r7, #32]
 8011e74:	fa93 f3a3 	rbit	r3, r3
 8011e78:	61fb      	str	r3, [r7, #28]
  return result;
 8011e7a:	69fb      	ldr	r3, [r7, #28]
 8011e7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8011e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d101      	bne.n	8011e88 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8011e84:	2320      	movs	r3, #32
 8011e86:	e003      	b.n	8011e90 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8011e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e8a:	fab3 f383 	clz	r3, r3
 8011e8e:	b2db      	uxtb	r3, r3
 8011e90:	3301      	adds	r3, #1
 8011e92:	f003 031f 	and.w	r3, r3, #31
 8011e96:	2101      	movs	r1, #1
 8011e98:	fa01 f303 	lsl.w	r3, r1, r3
 8011e9c:	ea42 0103 	orr.w	r1, r2, r3
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d10d      	bne.n	8011ec8 <HAL_ADC_ConfigChannel+0x670>
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	0e9b      	lsrs	r3, r3, #26
 8011eb2:	3301      	adds	r3, #1
 8011eb4:	f003 021f 	and.w	r2, r3, #31
 8011eb8:	4613      	mov	r3, r2
 8011eba:	005b      	lsls	r3, r3, #1
 8011ebc:	4413      	add	r3, r2
 8011ebe:	3b1e      	subs	r3, #30
 8011ec0:	051b      	lsls	r3, r3, #20
 8011ec2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011ec6:	e01b      	b.n	8011f00 <HAL_ADC_ConfigChannel+0x6a8>
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011ece:	697b      	ldr	r3, [r7, #20]
 8011ed0:	fa93 f3a3 	rbit	r3, r3
 8011ed4:	613b      	str	r3, [r7, #16]
  return result;
 8011ed6:	693b      	ldr	r3, [r7, #16]
 8011ed8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8011eda:	69bb      	ldr	r3, [r7, #24]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d101      	bne.n	8011ee4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8011ee0:	2320      	movs	r3, #32
 8011ee2:	e003      	b.n	8011eec <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8011ee4:	69bb      	ldr	r3, [r7, #24]
 8011ee6:	fab3 f383 	clz	r3, r3
 8011eea:	b2db      	uxtb	r3, r3
 8011eec:	3301      	adds	r3, #1
 8011eee:	f003 021f 	and.w	r2, r3, #31
 8011ef2:	4613      	mov	r3, r2
 8011ef4:	005b      	lsls	r3, r3, #1
 8011ef6:	4413      	add	r3, r2
 8011ef8:	3b1e      	subs	r3, #30
 8011efa:	051b      	lsls	r3, r3, #20
 8011efc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8011f00:	430b      	orrs	r3, r1
 8011f02:	683a      	ldr	r2, [r7, #0]
 8011f04:	6892      	ldr	r2, [r2, #8]
 8011f06:	4619      	mov	r1, r3
 8011f08:	f7fe fc02 	bl	8010710 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	681a      	ldr	r2, [r3, #0]
 8011f10:	4b09      	ldr	r3, [pc, #36]	; (8011f38 <HAL_ADC_ConfigChannel+0x6e0>)
 8011f12:	4013      	ands	r3, r2
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	f000 80af 	beq.w	8012078 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011f22:	d004      	beq.n	8011f2e <HAL_ADC_ConfigChannel+0x6d6>
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	4a04      	ldr	r2, [pc, #16]	; (8011f3c <HAL_ADC_ConfigChannel+0x6e4>)
 8011f2a:	4293      	cmp	r3, r2
 8011f2c:	d10a      	bne.n	8011f44 <HAL_ADC_ConfigChannel+0x6ec>
 8011f2e:	4b04      	ldr	r3, [pc, #16]	; (8011f40 <HAL_ADC_ConfigChannel+0x6e8>)
 8011f30:	e009      	b.n	8011f46 <HAL_ADC_ConfigChannel+0x6ee>
 8011f32:	bf00      	nop
 8011f34:	407f0000 	.word	0x407f0000
 8011f38:	80080000 	.word	0x80080000
 8011f3c:	50000100 	.word	0x50000100
 8011f40:	50000300 	.word	0x50000300
 8011f44:	4b51      	ldr	r3, [pc, #324]	; (801208c <HAL_ADC_ConfigChannel+0x834>)
 8011f46:	4618      	mov	r0, r3
 8011f48:	f7fe fae4 	bl	8010514 <LL_ADC_GetCommonPathInternalCh>
 8011f4c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	4a4e      	ldr	r2, [pc, #312]	; (8012090 <HAL_ADC_ConfigChannel+0x838>)
 8011f56:	4293      	cmp	r3, r2
 8011f58:	d004      	beq.n	8011f64 <HAL_ADC_ConfigChannel+0x70c>
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	4a4d      	ldr	r2, [pc, #308]	; (8012094 <HAL_ADC_ConfigChannel+0x83c>)
 8011f60:	4293      	cmp	r3, r2
 8011f62:	d134      	bne.n	8011fce <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8011f64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d12e      	bne.n	8011fce <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011f78:	d17e      	bne.n	8012078 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011f82:	d004      	beq.n	8011f8e <HAL_ADC_ConfigChannel+0x736>
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	4a43      	ldr	r2, [pc, #268]	; (8012098 <HAL_ADC_ConfigChannel+0x840>)
 8011f8a:	4293      	cmp	r3, r2
 8011f8c:	d101      	bne.n	8011f92 <HAL_ADC_ConfigChannel+0x73a>
 8011f8e:	4a43      	ldr	r2, [pc, #268]	; (801209c <HAL_ADC_ConfigChannel+0x844>)
 8011f90:	e000      	b.n	8011f94 <HAL_ADC_ConfigChannel+0x73c>
 8011f92:	4a3e      	ldr	r2, [pc, #248]	; (801208c <HAL_ADC_ConfigChannel+0x834>)
 8011f94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011f98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011f9c:	4619      	mov	r1, r3
 8011f9e:	4610      	mov	r0, r2
 8011fa0:	f7fe faa5 	bl	80104ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8011fa4:	4b3e      	ldr	r3, [pc, #248]	; (80120a0 <HAL_ADC_ConfigChannel+0x848>)
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	099b      	lsrs	r3, r3, #6
 8011faa:	4a3e      	ldr	r2, [pc, #248]	; (80120a4 <HAL_ADC_ConfigChannel+0x84c>)
 8011fac:	fba2 2303 	umull	r2, r3, r2, r3
 8011fb0:	099b      	lsrs	r3, r3, #6
 8011fb2:	1c5a      	adds	r2, r3, #1
 8011fb4:	4613      	mov	r3, r2
 8011fb6:	005b      	lsls	r3, r3, #1
 8011fb8:	4413      	add	r3, r2
 8011fba:	009b      	lsls	r3, r3, #2
 8011fbc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8011fbe:	e002      	b.n	8011fc6 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	3b01      	subs	r3, #1
 8011fc4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d1f9      	bne.n	8011fc0 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8011fcc:	e054      	b.n	8012078 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	4a35      	ldr	r2, [pc, #212]	; (80120a8 <HAL_ADC_ConfigChannel+0x850>)
 8011fd4:	4293      	cmp	r3, r2
 8011fd6:	d120      	bne.n	801201a <HAL_ADC_ConfigChannel+0x7c2>
 8011fd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011fdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d11a      	bne.n	801201a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011fec:	d144      	bne.n	8012078 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011ff6:	d004      	beq.n	8012002 <HAL_ADC_ConfigChannel+0x7aa>
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	4a26      	ldr	r2, [pc, #152]	; (8012098 <HAL_ADC_ConfigChannel+0x840>)
 8011ffe:	4293      	cmp	r3, r2
 8012000:	d101      	bne.n	8012006 <HAL_ADC_ConfigChannel+0x7ae>
 8012002:	4a26      	ldr	r2, [pc, #152]	; (801209c <HAL_ADC_ConfigChannel+0x844>)
 8012004:	e000      	b.n	8012008 <HAL_ADC_ConfigChannel+0x7b0>
 8012006:	4a21      	ldr	r2, [pc, #132]	; (801208c <HAL_ADC_ConfigChannel+0x834>)
 8012008:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801200c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012010:	4619      	mov	r1, r3
 8012012:	4610      	mov	r0, r2
 8012014:	f7fe fa6b 	bl	80104ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8012018:	e02e      	b.n	8012078 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	4a23      	ldr	r2, [pc, #140]	; (80120ac <HAL_ADC_ConfigChannel+0x854>)
 8012020:	4293      	cmp	r3, r2
 8012022:	d129      	bne.n	8012078 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8012024:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801202c:	2b00      	cmp	r3, #0
 801202e:	d123      	bne.n	8012078 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	4a18      	ldr	r2, [pc, #96]	; (8012098 <HAL_ADC_ConfigChannel+0x840>)
 8012036:	4293      	cmp	r3, r2
 8012038:	d01e      	beq.n	8012078 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012042:	d004      	beq.n	801204e <HAL_ADC_ConfigChannel+0x7f6>
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	4a13      	ldr	r2, [pc, #76]	; (8012098 <HAL_ADC_ConfigChannel+0x840>)
 801204a:	4293      	cmp	r3, r2
 801204c:	d101      	bne.n	8012052 <HAL_ADC_ConfigChannel+0x7fa>
 801204e:	4a13      	ldr	r2, [pc, #76]	; (801209c <HAL_ADC_ConfigChannel+0x844>)
 8012050:	e000      	b.n	8012054 <HAL_ADC_ConfigChannel+0x7fc>
 8012052:	4a0e      	ldr	r2, [pc, #56]	; (801208c <HAL_ADC_ConfigChannel+0x834>)
 8012054:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801205c:	4619      	mov	r1, r3
 801205e:	4610      	mov	r0, r2
 8012060:	f7fe fa45 	bl	80104ee <LL_ADC_SetCommonPathInternalCh>
 8012064:	e008      	b.n	8012078 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801206a:	f043 0220 	orr.w	r2, r3, #32
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8012072:	2301      	movs	r3, #1
 8012074:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2200      	movs	r2, #0
 801207c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8012080:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8012084:	4618      	mov	r0, r3
 8012086:	37d8      	adds	r7, #216	; 0xd8
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}
 801208c:	50000700 	.word	0x50000700
 8012090:	c3210000 	.word	0xc3210000
 8012094:	90c00010 	.word	0x90c00010
 8012098:	50000100 	.word	0x50000100
 801209c:	50000300 	.word	0x50000300
 80120a0:	20000000 	.word	0x20000000
 80120a4:	053e2d63 	.word	0x053e2d63
 80120a8:	c7520000 	.word	0xc7520000
 80120ac:	cb840000 	.word	0xcb840000

080120b0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b088      	sub	sp, #32
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
 80120b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80120ba:	2300      	movs	r3, #0
 80120bc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	4618      	mov	r0, r3
 80120c8:	f7fe fc56 	bl	8010978 <LL_ADC_REG_IsConversionOngoing>
 80120cc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7fe fc77 	bl	80109c6 <LL_ADC_INJ_IsConversionOngoing>
 80120d8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80120da:	693b      	ldr	r3, [r7, #16]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d103      	bne.n	80120e8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	f000 8098 	beq.w	8012218 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	68db      	ldr	r3, [r3, #12]
 80120ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d02a      	beq.n	801214c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	7f5b      	ldrb	r3, [r3, #29]
 80120fa:	2b01      	cmp	r3, #1
 80120fc:	d126      	bne.n	801214c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	7f1b      	ldrb	r3, [r3, #28]
 8012102:	2b01      	cmp	r3, #1
 8012104:	d122      	bne.n	801214c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8012106:	2301      	movs	r3, #1
 8012108:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801210a:	e014      	b.n	8012136 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 801210c:	69fb      	ldr	r3, [r7, #28]
 801210e:	4a45      	ldr	r2, [pc, #276]	; (8012224 <ADC_ConversionStop+0x174>)
 8012110:	4293      	cmp	r3, r2
 8012112:	d90d      	bls.n	8012130 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012118:	f043 0210 	orr.w	r2, r3, #16
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012124:	f043 0201 	orr.w	r2, r3, #1
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801212c:	2301      	movs	r3, #1
 801212e:	e074      	b.n	801221a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8012130:	69fb      	ldr	r3, [r7, #28]
 8012132:	3301      	adds	r3, #1
 8012134:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012140:	2b40      	cmp	r3, #64	; 0x40
 8012142:	d1e3      	bne.n	801210c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	2240      	movs	r2, #64	; 0x40
 801214a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 801214c:	69bb      	ldr	r3, [r7, #24]
 801214e:	2b02      	cmp	r3, #2
 8012150:	d014      	beq.n	801217c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	4618      	mov	r0, r3
 8012158:	f7fe fc0e 	bl	8010978 <LL_ADC_REG_IsConversionOngoing>
 801215c:	4603      	mov	r3, r0
 801215e:	2b00      	cmp	r3, #0
 8012160:	d00c      	beq.n	801217c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	4618      	mov	r0, r3
 8012168:	f7fe fbcb 	bl	8010902 <LL_ADC_IsDisableOngoing>
 801216c:	4603      	mov	r3, r0
 801216e:	2b00      	cmp	r3, #0
 8012170:	d104      	bne.n	801217c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	4618      	mov	r0, r3
 8012178:	f7fe fbea 	bl	8010950 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 801217c:	69bb      	ldr	r3, [r7, #24]
 801217e:	2b01      	cmp	r3, #1
 8012180:	d014      	beq.n	80121ac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	4618      	mov	r0, r3
 8012188:	f7fe fc1d 	bl	80109c6 <LL_ADC_INJ_IsConversionOngoing>
 801218c:	4603      	mov	r3, r0
 801218e:	2b00      	cmp	r3, #0
 8012190:	d00c      	beq.n	80121ac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	4618      	mov	r0, r3
 8012198:	f7fe fbb3 	bl	8010902 <LL_ADC_IsDisableOngoing>
 801219c:	4603      	mov	r3, r0
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d104      	bne.n	80121ac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	4618      	mov	r0, r3
 80121a8:	f7fe fbf9 	bl	801099e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80121ac:	69bb      	ldr	r3, [r7, #24]
 80121ae:	2b02      	cmp	r3, #2
 80121b0:	d005      	beq.n	80121be <ADC_ConversionStop+0x10e>
 80121b2:	69bb      	ldr	r3, [r7, #24]
 80121b4:	2b03      	cmp	r3, #3
 80121b6:	d105      	bne.n	80121c4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80121b8:	230c      	movs	r3, #12
 80121ba:	617b      	str	r3, [r7, #20]
        break;
 80121bc:	e005      	b.n	80121ca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80121be:	2308      	movs	r3, #8
 80121c0:	617b      	str	r3, [r7, #20]
        break;
 80121c2:	e002      	b.n	80121ca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80121c4:	2304      	movs	r3, #4
 80121c6:	617b      	str	r3, [r7, #20]
        break;
 80121c8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80121ca:	f7fe f94f 	bl	801046c <HAL_GetTick>
 80121ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80121d0:	e01b      	b.n	801220a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80121d2:	f7fe f94b 	bl	801046c <HAL_GetTick>
 80121d6:	4602      	mov	r2, r0
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	1ad3      	subs	r3, r2, r3
 80121dc:	2b05      	cmp	r3, #5
 80121de:	d914      	bls.n	801220a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	689a      	ldr	r2, [r3, #8]
 80121e6:	697b      	ldr	r3, [r7, #20]
 80121e8:	4013      	ands	r3, r2
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d00d      	beq.n	801220a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80121f2:	f043 0210 	orr.w	r2, r3, #16
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80121fe:	f043 0201 	orr.w	r2, r3, #1
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8012206:	2301      	movs	r3, #1
 8012208:	e007      	b.n	801221a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	689a      	ldr	r2, [r3, #8]
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	4013      	ands	r3, r2
 8012214:	2b00      	cmp	r3, #0
 8012216:	d1dc      	bne.n	80121d2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8012218:	2300      	movs	r3, #0
}
 801221a:	4618      	mov	r0, r3
 801221c:	3720      	adds	r7, #32
 801221e:	46bd      	mov	sp, r7
 8012220:	bd80      	pop	{r7, pc}
 8012222:	bf00      	nop
 8012224:	a33fffff 	.word	0xa33fffff

08012228 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b084      	sub	sp, #16
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	4618      	mov	r0, r3
 8012236:	f7fe fb51 	bl	80108dc <LL_ADC_IsEnabled>
 801223a:	4603      	mov	r3, r0
 801223c:	2b00      	cmp	r3, #0
 801223e:	d14d      	bne.n	80122dc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	689a      	ldr	r2, [r3, #8]
 8012246:	4b28      	ldr	r3, [pc, #160]	; (80122e8 <ADC_Enable+0xc0>)
 8012248:	4013      	ands	r3, r2
 801224a:	2b00      	cmp	r3, #0
 801224c:	d00d      	beq.n	801226a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012252:	f043 0210 	orr.w	r2, r3, #16
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801225e:	f043 0201 	orr.w	r2, r3, #1
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8012266:	2301      	movs	r3, #1
 8012268:	e039      	b.n	80122de <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	4618      	mov	r0, r3
 8012270:	f7fe fb0c 	bl	801088c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8012274:	f7fe f8fa 	bl	801046c <HAL_GetTick>
 8012278:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801227a:	e028      	b.n	80122ce <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	4618      	mov	r0, r3
 8012282:	f7fe fb2b 	bl	80108dc <LL_ADC_IsEnabled>
 8012286:	4603      	mov	r3, r0
 8012288:	2b00      	cmp	r3, #0
 801228a:	d104      	bne.n	8012296 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	4618      	mov	r0, r3
 8012292:	f7fe fafb 	bl	801088c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8012296:	f7fe f8e9 	bl	801046c <HAL_GetTick>
 801229a:	4602      	mov	r2, r0
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	1ad3      	subs	r3, r2, r3
 80122a0:	2b02      	cmp	r3, #2
 80122a2:	d914      	bls.n	80122ce <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	f003 0301 	and.w	r3, r3, #1
 80122ae:	2b01      	cmp	r3, #1
 80122b0:	d00d      	beq.n	80122ce <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80122b6:	f043 0210 	orr.w	r2, r3, #16
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80122c2:	f043 0201 	orr.w	r2, r3, #1
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80122ca:	2301      	movs	r3, #1
 80122cc:	e007      	b.n	80122de <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	f003 0301 	and.w	r3, r3, #1
 80122d8:	2b01      	cmp	r3, #1
 80122da:	d1cf      	bne.n	801227c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80122dc:	2300      	movs	r3, #0
}
 80122de:	4618      	mov	r0, r3
 80122e0:	3710      	adds	r7, #16
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}
 80122e6:	bf00      	nop
 80122e8:	8000003f 	.word	0x8000003f

080122ec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b084      	sub	sp, #16
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	4618      	mov	r0, r3
 80122fa:	f7fe fb02 	bl	8010902 <LL_ADC_IsDisableOngoing>
 80122fe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	4618      	mov	r0, r3
 8012306:	f7fe fae9 	bl	80108dc <LL_ADC_IsEnabled>
 801230a:	4603      	mov	r3, r0
 801230c:	2b00      	cmp	r3, #0
 801230e:	d047      	beq.n	80123a0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d144      	bne.n	80123a0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	689b      	ldr	r3, [r3, #8]
 801231c:	f003 030d 	and.w	r3, r3, #13
 8012320:	2b01      	cmp	r3, #1
 8012322:	d10c      	bne.n	801233e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	4618      	mov	r0, r3
 801232a:	f7fe fac3 	bl	80108b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	2203      	movs	r2, #3
 8012334:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8012336:	f7fe f899 	bl	801046c <HAL_GetTick>
 801233a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801233c:	e029      	b.n	8012392 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012342:	f043 0210 	orr.w	r2, r3, #16
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801234e:	f043 0201 	orr.w	r2, r3, #1
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8012356:	2301      	movs	r3, #1
 8012358:	e023      	b.n	80123a2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801235a:	f7fe f887 	bl	801046c <HAL_GetTick>
 801235e:	4602      	mov	r2, r0
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	1ad3      	subs	r3, r2, r3
 8012364:	2b02      	cmp	r3, #2
 8012366:	d914      	bls.n	8012392 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	689b      	ldr	r3, [r3, #8]
 801236e:	f003 0301 	and.w	r3, r3, #1
 8012372:	2b00      	cmp	r3, #0
 8012374:	d00d      	beq.n	8012392 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801237a:	f043 0210 	orr.w	r2, r3, #16
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012386:	f043 0201 	orr.w	r2, r3, #1
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801238e:	2301      	movs	r3, #1
 8012390:	e007      	b.n	80123a2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	689b      	ldr	r3, [r3, #8]
 8012398:	f003 0301 	and.w	r3, r3, #1
 801239c:	2b00      	cmp	r3, #0
 801239e:	d1dc      	bne.n	801235a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80123a0:	2300      	movs	r3, #0
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3710      	adds	r7, #16
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}

080123aa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80123aa:	b580      	push	{r7, lr}
 80123ac:	b084      	sub	sp, #16
 80123ae:	af00      	add	r7, sp, #0
 80123b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123b6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80123bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d14b      	bne.n	801245c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80123c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	f003 0308 	and.w	r3, r3, #8
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d021      	beq.n	8012422 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	4618      	mov	r0, r3
 80123e4:	f7fe f942 	bl	801066c <LL_ADC_REG_IsTriggerSourceSWStart>
 80123e8:	4603      	mov	r3, r0
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d032      	beq.n	8012454 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	68db      	ldr	r3, [r3, #12]
 80123f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d12b      	bne.n	8012454 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012400:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801240c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012410:	2b00      	cmp	r3, #0
 8012412:	d11f      	bne.n	8012454 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012418:	f043 0201 	orr.w	r2, r3, #1
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	65da      	str	r2, [r3, #92]	; 0x5c
 8012420:	e018      	b.n	8012454 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	68db      	ldr	r3, [r3, #12]
 8012428:	f003 0302 	and.w	r3, r3, #2
 801242c:	2b00      	cmp	r3, #0
 801242e:	d111      	bne.n	8012454 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012434:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012444:	2b00      	cmp	r3, #0
 8012446:	d105      	bne.n	8012454 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801244c:	f043 0201 	orr.w	r2, r3, #1
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8012454:	68f8      	ldr	r0, [r7, #12]
 8012456:	f7f5 fecb 	bl	80081f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801245a:	e00e      	b.n	801247a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012460:	f003 0310 	and.w	r3, r3, #16
 8012464:	2b00      	cmp	r3, #0
 8012466:	d003      	beq.n	8012470 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8012468:	68f8      	ldr	r0, [r7, #12]
 801246a:	f7ff f9eb 	bl	8011844 <HAL_ADC_ErrorCallback>
}
 801246e:	e004      	b.n	801247a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	4798      	blx	r3
}
 801247a:	bf00      	nop
 801247c:	3710      	adds	r7, #16
 801247e:	46bd      	mov	sp, r7
 8012480:	bd80      	pop	{r7, pc}

08012482 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8012482:	b580      	push	{r7, lr}
 8012484:	b084      	sub	sp, #16
 8012486:	af00      	add	r7, sp, #0
 8012488:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801248e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8012490:	68f8      	ldr	r0, [r7, #12]
 8012492:	f7ff f9c3 	bl	801181c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8012496:	bf00      	nop
 8012498:	3710      	adds	r7, #16
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}

0801249e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 801249e:	b580      	push	{r7, lr}
 80124a0:	b084      	sub	sp, #16
 80124a2:	af00      	add	r7, sp, #0
 80124a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124aa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80124b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80124bc:	f043 0204 	orr.w	r2, r3, #4
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80124c4:	68f8      	ldr	r0, [r7, #12]
 80124c6:	f7ff f9bd 	bl	8011844 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80124ca:	bf00      	nop
 80124cc:	3710      	adds	r7, #16
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd80      	pop	{r7, pc}

080124d2 <LL_ADC_IsEnabled>:
{
 80124d2:	b480      	push	{r7}
 80124d4:	b083      	sub	sp, #12
 80124d6:	af00      	add	r7, sp, #0
 80124d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	689b      	ldr	r3, [r3, #8]
 80124de:	f003 0301 	and.w	r3, r3, #1
 80124e2:	2b01      	cmp	r3, #1
 80124e4:	d101      	bne.n	80124ea <LL_ADC_IsEnabled+0x18>
 80124e6:	2301      	movs	r3, #1
 80124e8:	e000      	b.n	80124ec <LL_ADC_IsEnabled+0x1a>
 80124ea:	2300      	movs	r3, #0
}
 80124ec:	4618      	mov	r0, r3
 80124ee:	370c      	adds	r7, #12
 80124f0:	46bd      	mov	sp, r7
 80124f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f6:	4770      	bx	lr

080124f8 <LL_ADC_StartCalibration>:
{
 80124f8:	b480      	push	{r7}
 80124fa:	b083      	sub	sp, #12
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
 8012500:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	689b      	ldr	r3, [r3, #8]
 8012506:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801250a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801250e:	683a      	ldr	r2, [r7, #0]
 8012510:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8012514:	4313      	orrs	r3, r2
 8012516:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	609a      	str	r2, [r3, #8]
}
 801251e:	bf00      	nop
 8012520:	370c      	adds	r7, #12
 8012522:	46bd      	mov	sp, r7
 8012524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012528:	4770      	bx	lr

0801252a <LL_ADC_IsCalibrationOnGoing>:
{
 801252a:	b480      	push	{r7}
 801252c:	b083      	sub	sp, #12
 801252e:	af00      	add	r7, sp, #0
 8012530:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	689b      	ldr	r3, [r3, #8]
 8012536:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801253a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801253e:	d101      	bne.n	8012544 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8012540:	2301      	movs	r3, #1
 8012542:	e000      	b.n	8012546 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8012544:	2300      	movs	r3, #0
}
 8012546:	4618      	mov	r0, r3
 8012548:	370c      	adds	r7, #12
 801254a:	46bd      	mov	sp, r7
 801254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012550:	4770      	bx	lr

08012552 <LL_ADC_REG_IsConversionOngoing>:
{
 8012552:	b480      	push	{r7}
 8012554:	b083      	sub	sp, #12
 8012556:	af00      	add	r7, sp, #0
 8012558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	689b      	ldr	r3, [r3, #8]
 801255e:	f003 0304 	and.w	r3, r3, #4
 8012562:	2b04      	cmp	r3, #4
 8012564:	d101      	bne.n	801256a <LL_ADC_REG_IsConversionOngoing+0x18>
 8012566:	2301      	movs	r3, #1
 8012568:	e000      	b.n	801256c <LL_ADC_REG_IsConversionOngoing+0x1a>
 801256a:	2300      	movs	r3, #0
}
 801256c:	4618      	mov	r0, r3
 801256e:	370c      	adds	r7, #12
 8012570:	46bd      	mov	sp, r7
 8012572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012576:	4770      	bx	lr

08012578 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b084      	sub	sp, #16
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
 8012580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8012582:	2300      	movs	r3, #0
 8012584:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801258c:	2b01      	cmp	r3, #1
 801258e:	d101      	bne.n	8012594 <HAL_ADCEx_Calibration_Start+0x1c>
 8012590:	2302      	movs	r3, #2
 8012592:	e04d      	b.n	8012630 <HAL_ADCEx_Calibration_Start+0xb8>
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	2201      	movs	r2, #1
 8012598:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f7ff fea5 	bl	80122ec <ADC_Disable>
 80125a2:	4603      	mov	r3, r0
 80125a4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80125a6:	7bfb      	ldrb	r3, [r7, #15]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d136      	bne.n	801261a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80125b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80125b4:	f023 0302 	bic.w	r3, r3, #2
 80125b8:	f043 0202 	orr.w	r2, r3, #2
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	6839      	ldr	r1, [r7, #0]
 80125c6:	4618      	mov	r0, r3
 80125c8:	f7ff ff96 	bl	80124f8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80125cc:	e014      	b.n	80125f8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	3301      	adds	r3, #1
 80125d2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80125d4:	68bb      	ldr	r3, [r7, #8]
 80125d6:	4a18      	ldr	r2, [pc, #96]	; (8012638 <HAL_ADCEx_Calibration_Start+0xc0>)
 80125d8:	4293      	cmp	r3, r2
 80125da:	d90d      	bls.n	80125f8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80125e0:	f023 0312 	bic.w	r3, r3, #18
 80125e4:	f043 0210 	orr.w	r2, r3, #16
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2200      	movs	r2, #0
 80125f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80125f4:	2301      	movs	r3, #1
 80125f6:	e01b      	b.n	8012630 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	4618      	mov	r0, r3
 80125fe:	f7ff ff94 	bl	801252a <LL_ADC_IsCalibrationOnGoing>
 8012602:	4603      	mov	r3, r0
 8012604:	2b00      	cmp	r3, #0
 8012606:	d1e2      	bne.n	80125ce <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801260c:	f023 0303 	bic.w	r3, r3, #3
 8012610:	f043 0201 	orr.w	r2, r3, #1
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	65da      	str	r2, [r3, #92]	; 0x5c
 8012618:	e005      	b.n	8012626 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801261e:	f043 0210 	orr.w	r2, r3, #16
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	2200      	movs	r2, #0
 801262a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801262e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012630:	4618      	mov	r0, r3
 8012632:	3710      	adds	r7, #16
 8012634:	46bd      	mov	sp, r7
 8012636:	bd80      	pop	{r7, pc}
 8012638:	0004de01 	.word	0x0004de01

0801263c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 801263c:	b480      	push	{r7}
 801263e:	b083      	sub	sp, #12
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8012644:	bf00      	nop
 8012646:	370c      	adds	r7, #12
 8012648:	46bd      	mov	sp, r7
 801264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264e:	4770      	bx	lr

08012650 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8012650:	b480      	push	{r7}
 8012652:	b083      	sub	sp, #12
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8012658:	bf00      	nop
 801265a:	370c      	adds	r7, #12
 801265c:	46bd      	mov	sp, r7
 801265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012662:	4770      	bx	lr

08012664 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8012664:	b480      	push	{r7}
 8012666:	b083      	sub	sp, #12
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 801266c:	bf00      	nop
 801266e:	370c      	adds	r7, #12
 8012670:	46bd      	mov	sp, r7
 8012672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012676:	4770      	bx	lr

08012678 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8012678:	b480      	push	{r7}
 801267a:	b083      	sub	sp, #12
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8012680:	bf00      	nop
 8012682:	370c      	adds	r7, #12
 8012684:	46bd      	mov	sp, r7
 8012686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268a:	4770      	bx	lr

0801268c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 801268c:	b480      	push	{r7}
 801268e:	b083      	sub	sp, #12
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8012694:	bf00      	nop
 8012696:	370c      	adds	r7, #12
 8012698:	46bd      	mov	sp, r7
 801269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269e:	4770      	bx	lr

080126a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80126a0:	b590      	push	{r4, r7, lr}
 80126a2:	b0a1      	sub	sp, #132	; 0x84
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80126aa:	2300      	movs	r3, #0
 80126ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80126b6:	2b01      	cmp	r3, #1
 80126b8:	d101      	bne.n	80126be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80126ba:	2302      	movs	r3, #2
 80126bc:	e0cb      	b.n	8012856 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	2201      	movs	r2, #1
 80126c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80126c6:	2300      	movs	r3, #0
 80126c8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80126ca:	2300      	movs	r3, #0
 80126cc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80126d6:	d102      	bne.n	80126de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80126d8:	4b61      	ldr	r3, [pc, #388]	; (8012860 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80126da:	60bb      	str	r3, [r7, #8]
 80126dc:	e001      	b.n	80126e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80126de:	2300      	movs	r3, #0
 80126e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80126e2:	68bb      	ldr	r3, [r7, #8]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d10b      	bne.n	8012700 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80126ec:	f043 0220 	orr.w	r2, r3, #32
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	2200      	movs	r2, #0
 80126f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80126fc:	2301      	movs	r3, #1
 80126fe:	e0aa      	b.n	8012856 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8012700:	68bb      	ldr	r3, [r7, #8]
 8012702:	4618      	mov	r0, r3
 8012704:	f7ff ff25 	bl	8012552 <LL_ADC_REG_IsConversionOngoing>
 8012708:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	4618      	mov	r0, r3
 8012710:	f7ff ff1f 	bl	8012552 <LL_ADC_REG_IsConversionOngoing>
 8012714:	4603      	mov	r3, r0
 8012716:	2b00      	cmp	r3, #0
 8012718:	f040 808c 	bne.w	8012834 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 801271c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801271e:	2b00      	cmp	r3, #0
 8012720:	f040 8088 	bne.w	8012834 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801272c:	d004      	beq.n	8012738 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	4a4b      	ldr	r2, [pc, #300]	; (8012860 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8012734:	4293      	cmp	r3, r2
 8012736:	d101      	bne.n	801273c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8012738:	4b4a      	ldr	r3, [pc, #296]	; (8012864 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 801273a:	e000      	b.n	801273e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 801273c:	4b4a      	ldr	r3, [pc, #296]	; (8012868 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 801273e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d041      	beq.n	80127cc <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8012748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801274a:	689b      	ldr	r3, [r3, #8]
 801274c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	6859      	ldr	r1, [r3, #4]
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801275a:	035b      	lsls	r3, r3, #13
 801275c:	430b      	orrs	r3, r1
 801275e:	431a      	orrs	r2, r3
 8012760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012762:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801276c:	d004      	beq.n	8012778 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	4a3b      	ldr	r2, [pc, #236]	; (8012860 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8012774:	4293      	cmp	r3, r2
 8012776:	d10f      	bne.n	8012798 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8012778:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801277c:	f7ff fea9 	bl	80124d2 <LL_ADC_IsEnabled>
 8012780:	4604      	mov	r4, r0
 8012782:	4837      	ldr	r0, [pc, #220]	; (8012860 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8012784:	f7ff fea5 	bl	80124d2 <LL_ADC_IsEnabled>
 8012788:	4603      	mov	r3, r0
 801278a:	4323      	orrs	r3, r4
 801278c:	2b00      	cmp	r3, #0
 801278e:	bf0c      	ite	eq
 8012790:	2301      	moveq	r3, #1
 8012792:	2300      	movne	r3, #0
 8012794:	b2db      	uxtb	r3, r3
 8012796:	e008      	b.n	80127aa <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8012798:	4834      	ldr	r0, [pc, #208]	; (801286c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801279a:	f7ff fe9a 	bl	80124d2 <LL_ADC_IsEnabled>
 801279e:	4603      	mov	r3, r0
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	bf0c      	ite	eq
 80127a4:	2301      	moveq	r3, #1
 80127a6:	2300      	movne	r3, #0
 80127a8:	b2db      	uxtb	r3, r3
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d04c      	beq.n	8012848 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80127ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80127b0:	689b      	ldr	r3, [r3, #8]
 80127b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80127b6:	f023 030f 	bic.w	r3, r3, #15
 80127ba:	683a      	ldr	r2, [r7, #0]
 80127bc:	6811      	ldr	r1, [r2, #0]
 80127be:	683a      	ldr	r2, [r7, #0]
 80127c0:	6892      	ldr	r2, [r2, #8]
 80127c2:	430a      	orrs	r2, r1
 80127c4:	431a      	orrs	r2, r3
 80127c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80127c8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80127ca:	e03d      	b.n	8012848 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80127cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80127ce:	689b      	ldr	r3, [r3, #8]
 80127d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80127d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80127d6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80127e0:	d004      	beq.n	80127ec <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	4a1e      	ldr	r2, [pc, #120]	; (8012860 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80127e8:	4293      	cmp	r3, r2
 80127ea:	d10f      	bne.n	801280c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80127ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80127f0:	f7ff fe6f 	bl	80124d2 <LL_ADC_IsEnabled>
 80127f4:	4604      	mov	r4, r0
 80127f6:	481a      	ldr	r0, [pc, #104]	; (8012860 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80127f8:	f7ff fe6b 	bl	80124d2 <LL_ADC_IsEnabled>
 80127fc:	4603      	mov	r3, r0
 80127fe:	4323      	orrs	r3, r4
 8012800:	2b00      	cmp	r3, #0
 8012802:	bf0c      	ite	eq
 8012804:	2301      	moveq	r3, #1
 8012806:	2300      	movne	r3, #0
 8012808:	b2db      	uxtb	r3, r3
 801280a:	e008      	b.n	801281e <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 801280c:	4817      	ldr	r0, [pc, #92]	; (801286c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801280e:	f7ff fe60 	bl	80124d2 <LL_ADC_IsEnabled>
 8012812:	4603      	mov	r3, r0
 8012814:	2b00      	cmp	r3, #0
 8012816:	bf0c      	ite	eq
 8012818:	2301      	moveq	r3, #1
 801281a:	2300      	movne	r3, #0
 801281c:	b2db      	uxtb	r3, r3
 801281e:	2b00      	cmp	r3, #0
 8012820:	d012      	beq.n	8012848 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8012822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012824:	689b      	ldr	r3, [r3, #8]
 8012826:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801282a:	f023 030f 	bic.w	r3, r3, #15
 801282e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012830:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8012832:	e009      	b.n	8012848 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012838:	f043 0220 	orr.w	r2, r3, #32
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8012840:	2301      	movs	r3, #1
 8012842:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8012846:	e000      	b.n	801284a <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8012848:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	2200      	movs	r2, #0
 801284e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8012852:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8012856:	4618      	mov	r0, r3
 8012858:	3784      	adds	r7, #132	; 0x84
 801285a:	46bd      	mov	sp, r7
 801285c:	bd90      	pop	{r4, r7, pc}
 801285e:	bf00      	nop
 8012860:	50000100 	.word	0x50000100
 8012864:	50000300 	.word	0x50000300
 8012868:	50000700 	.word	0x50000700
 801286c:	50000400 	.word	0x50000400

08012870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012870:	b480      	push	{r7}
 8012872:	b085      	sub	sp, #20
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	f003 0307 	and.w	r3, r3, #7
 801287e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012880:	4b0c      	ldr	r3, [pc, #48]	; (80128b4 <__NVIC_SetPriorityGrouping+0x44>)
 8012882:	68db      	ldr	r3, [r3, #12]
 8012884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012886:	68ba      	ldr	r2, [r7, #8]
 8012888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801288c:	4013      	ands	r3, r2
 801288e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8012898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801289c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80128a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80128a2:	4a04      	ldr	r2, [pc, #16]	; (80128b4 <__NVIC_SetPriorityGrouping+0x44>)
 80128a4:	68bb      	ldr	r3, [r7, #8]
 80128a6:	60d3      	str	r3, [r2, #12]
}
 80128a8:	bf00      	nop
 80128aa:	3714      	adds	r7, #20
 80128ac:	46bd      	mov	sp, r7
 80128ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b2:	4770      	bx	lr
 80128b4:	e000ed00 	.word	0xe000ed00

080128b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80128b8:	b480      	push	{r7}
 80128ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80128bc:	4b04      	ldr	r3, [pc, #16]	; (80128d0 <__NVIC_GetPriorityGrouping+0x18>)
 80128be:	68db      	ldr	r3, [r3, #12]
 80128c0:	0a1b      	lsrs	r3, r3, #8
 80128c2:	f003 0307 	and.w	r3, r3, #7
}
 80128c6:	4618      	mov	r0, r3
 80128c8:	46bd      	mov	sp, r7
 80128ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ce:	4770      	bx	lr
 80128d0:	e000ed00 	.word	0xe000ed00

080128d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80128d4:	b480      	push	{r7}
 80128d6:	b083      	sub	sp, #12
 80128d8:	af00      	add	r7, sp, #0
 80128da:	4603      	mov	r3, r0
 80128dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80128de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	db0b      	blt.n	80128fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80128e6:	79fb      	ldrb	r3, [r7, #7]
 80128e8:	f003 021f 	and.w	r2, r3, #31
 80128ec:	4907      	ldr	r1, [pc, #28]	; (801290c <__NVIC_EnableIRQ+0x38>)
 80128ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80128f2:	095b      	lsrs	r3, r3, #5
 80128f4:	2001      	movs	r0, #1
 80128f6:	fa00 f202 	lsl.w	r2, r0, r2
 80128fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80128fe:	bf00      	nop
 8012900:	370c      	adds	r7, #12
 8012902:	46bd      	mov	sp, r7
 8012904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012908:	4770      	bx	lr
 801290a:	bf00      	nop
 801290c:	e000e100 	.word	0xe000e100

08012910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012910:	b480      	push	{r7}
 8012912:	b083      	sub	sp, #12
 8012914:	af00      	add	r7, sp, #0
 8012916:	4603      	mov	r3, r0
 8012918:	6039      	str	r1, [r7, #0]
 801291a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012920:	2b00      	cmp	r3, #0
 8012922:	db0a      	blt.n	801293a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	b2da      	uxtb	r2, r3
 8012928:	490c      	ldr	r1, [pc, #48]	; (801295c <__NVIC_SetPriority+0x4c>)
 801292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801292e:	0112      	lsls	r2, r2, #4
 8012930:	b2d2      	uxtb	r2, r2
 8012932:	440b      	add	r3, r1
 8012934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012938:	e00a      	b.n	8012950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801293a:	683b      	ldr	r3, [r7, #0]
 801293c:	b2da      	uxtb	r2, r3
 801293e:	4908      	ldr	r1, [pc, #32]	; (8012960 <__NVIC_SetPriority+0x50>)
 8012940:	79fb      	ldrb	r3, [r7, #7]
 8012942:	f003 030f 	and.w	r3, r3, #15
 8012946:	3b04      	subs	r3, #4
 8012948:	0112      	lsls	r2, r2, #4
 801294a:	b2d2      	uxtb	r2, r2
 801294c:	440b      	add	r3, r1
 801294e:	761a      	strb	r2, [r3, #24]
}
 8012950:	bf00      	nop
 8012952:	370c      	adds	r7, #12
 8012954:	46bd      	mov	sp, r7
 8012956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295a:	4770      	bx	lr
 801295c:	e000e100 	.word	0xe000e100
 8012960:	e000ed00 	.word	0xe000ed00

08012964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012964:	b480      	push	{r7}
 8012966:	b089      	sub	sp, #36	; 0x24
 8012968:	af00      	add	r7, sp, #0
 801296a:	60f8      	str	r0, [r7, #12]
 801296c:	60b9      	str	r1, [r7, #8]
 801296e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	f003 0307 	and.w	r3, r3, #7
 8012976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012978:	69fb      	ldr	r3, [r7, #28]
 801297a:	f1c3 0307 	rsb	r3, r3, #7
 801297e:	2b04      	cmp	r3, #4
 8012980:	bf28      	it	cs
 8012982:	2304      	movcs	r3, #4
 8012984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012986:	69fb      	ldr	r3, [r7, #28]
 8012988:	3304      	adds	r3, #4
 801298a:	2b06      	cmp	r3, #6
 801298c:	d902      	bls.n	8012994 <NVIC_EncodePriority+0x30>
 801298e:	69fb      	ldr	r3, [r7, #28]
 8012990:	3b03      	subs	r3, #3
 8012992:	e000      	b.n	8012996 <NVIC_EncodePriority+0x32>
 8012994:	2300      	movs	r3, #0
 8012996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012998:	f04f 32ff 	mov.w	r2, #4294967295
 801299c:	69bb      	ldr	r3, [r7, #24]
 801299e:	fa02 f303 	lsl.w	r3, r2, r3
 80129a2:	43da      	mvns	r2, r3
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	401a      	ands	r2, r3
 80129a8:	697b      	ldr	r3, [r7, #20]
 80129aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80129ac:	f04f 31ff 	mov.w	r1, #4294967295
 80129b0:	697b      	ldr	r3, [r7, #20]
 80129b2:	fa01 f303 	lsl.w	r3, r1, r3
 80129b6:	43d9      	mvns	r1, r3
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80129bc:	4313      	orrs	r3, r2
         );
}
 80129be:	4618      	mov	r0, r3
 80129c0:	3724      	adds	r7, #36	; 0x24
 80129c2:	46bd      	mov	sp, r7
 80129c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c8:	4770      	bx	lr
	...

080129cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b082      	sub	sp, #8
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	3b01      	subs	r3, #1
 80129d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80129dc:	d301      	bcc.n	80129e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80129de:	2301      	movs	r3, #1
 80129e0:	e00f      	b.n	8012a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80129e2:	4a0a      	ldr	r2, [pc, #40]	; (8012a0c <SysTick_Config+0x40>)
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	3b01      	subs	r3, #1
 80129e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80129ea:	210f      	movs	r1, #15
 80129ec:	f04f 30ff 	mov.w	r0, #4294967295
 80129f0:	f7ff ff8e 	bl	8012910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80129f4:	4b05      	ldr	r3, [pc, #20]	; (8012a0c <SysTick_Config+0x40>)
 80129f6:	2200      	movs	r2, #0
 80129f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80129fa:	4b04      	ldr	r3, [pc, #16]	; (8012a0c <SysTick_Config+0x40>)
 80129fc:	2207      	movs	r2, #7
 80129fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8012a00:	2300      	movs	r3, #0
}
 8012a02:	4618      	mov	r0, r3
 8012a04:	3708      	adds	r7, #8
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bd80      	pop	{r7, pc}
 8012a0a:	bf00      	nop
 8012a0c:	e000e010 	.word	0xe000e010

08012a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b082      	sub	sp, #8
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f7ff ff29 	bl	8012870 <__NVIC_SetPriorityGrouping>
}
 8012a1e:	bf00      	nop
 8012a20:	3708      	adds	r7, #8
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}

08012a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012a26:	b580      	push	{r7, lr}
 8012a28:	b086      	sub	sp, #24
 8012a2a:	af00      	add	r7, sp, #0
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	60b9      	str	r1, [r7, #8]
 8012a30:	607a      	str	r2, [r7, #4]
 8012a32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8012a34:	f7ff ff40 	bl	80128b8 <__NVIC_GetPriorityGrouping>
 8012a38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012a3a:	687a      	ldr	r2, [r7, #4]
 8012a3c:	68b9      	ldr	r1, [r7, #8]
 8012a3e:	6978      	ldr	r0, [r7, #20]
 8012a40:	f7ff ff90 	bl	8012964 <NVIC_EncodePriority>
 8012a44:	4602      	mov	r2, r0
 8012a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a4a:	4611      	mov	r1, r2
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f7ff ff5f 	bl	8012910 <__NVIC_SetPriority>
}
 8012a52:	bf00      	nop
 8012a54:	3718      	adds	r7, #24
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bd80      	pop	{r7, pc}

08012a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012a5a:	b580      	push	{r7, lr}
 8012a5c:	b082      	sub	sp, #8
 8012a5e:	af00      	add	r7, sp, #0
 8012a60:	4603      	mov	r3, r0
 8012a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f7ff ff33 	bl	80128d4 <__NVIC_EnableIRQ>
}
 8012a6e:	bf00      	nop
 8012a70:	3708      	adds	r7, #8
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd80      	pop	{r7, pc}

08012a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012a76:	b580      	push	{r7, lr}
 8012a78:	b082      	sub	sp, #8
 8012a7a:	af00      	add	r7, sp, #0
 8012a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8012a7e:	6878      	ldr	r0, [r7, #4]
 8012a80:	f7ff ffa4 	bl	80129cc <SysTick_Config>
 8012a84:	4603      	mov	r3, r0
}
 8012a86:	4618      	mov	r0, r3
 8012a88:	3708      	adds	r7, #8
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}
	...

08012a90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b084      	sub	sp, #16
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d101      	bne.n	8012aa2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	e08d      	b.n	8012bbe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	461a      	mov	r2, r3
 8012aa8:	4b47      	ldr	r3, [pc, #284]	; (8012bc8 <HAL_DMA_Init+0x138>)
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d80f      	bhi.n	8012ace <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	461a      	mov	r2, r3
 8012ab4:	4b45      	ldr	r3, [pc, #276]	; (8012bcc <HAL_DMA_Init+0x13c>)
 8012ab6:	4413      	add	r3, r2
 8012ab8:	4a45      	ldr	r2, [pc, #276]	; (8012bd0 <HAL_DMA_Init+0x140>)
 8012aba:	fba2 2303 	umull	r2, r3, r2, r3
 8012abe:	091b      	lsrs	r3, r3, #4
 8012ac0:	009a      	lsls	r2, r3, #2
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	4a42      	ldr	r2, [pc, #264]	; (8012bd4 <HAL_DMA_Init+0x144>)
 8012aca:	641a      	str	r2, [r3, #64]	; 0x40
 8012acc:	e00e      	b.n	8012aec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	461a      	mov	r2, r3
 8012ad4:	4b40      	ldr	r3, [pc, #256]	; (8012bd8 <HAL_DMA_Init+0x148>)
 8012ad6:	4413      	add	r3, r2
 8012ad8:	4a3d      	ldr	r2, [pc, #244]	; (8012bd0 <HAL_DMA_Init+0x140>)
 8012ada:	fba2 2303 	umull	r2, r3, r2, r3
 8012ade:	091b      	lsrs	r3, r3, #4
 8012ae0:	009a      	lsls	r2, r3, #2
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	4a3c      	ldr	r2, [pc, #240]	; (8012bdc <HAL_DMA_Init+0x14c>)
 8012aea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	2202      	movs	r2, #2
 8012af0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8012b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012b06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8012b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	691b      	ldr	r3, [r3, #16]
 8012b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	699b      	ldr	r3, [r3, #24]
 8012b22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012b28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	6a1b      	ldr	r3, [r3, #32]
 8012b2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8012b30:	68fa      	ldr	r2, [r7, #12]
 8012b32:	4313      	orrs	r3, r2
 8012b34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	68fa      	ldr	r2, [r7, #12]
 8012b3c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8012b3e:	6878      	ldr	r0, [r7, #4]
 8012b40:	f000 fa10 	bl	8012f64 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	689b      	ldr	r3, [r3, #8]
 8012b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012b4c:	d102      	bne.n	8012b54 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	2200      	movs	r2, #0
 8012b52:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	685a      	ldr	r2, [r3, #4]
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012b5c:	b2d2      	uxtb	r2, r2
 8012b5e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b64:	687a      	ldr	r2, [r7, #4]
 8012b66:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8012b68:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	685b      	ldr	r3, [r3, #4]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d010      	beq.n	8012b94 <HAL_DMA_Init+0x104>
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	685b      	ldr	r3, [r3, #4]
 8012b76:	2b04      	cmp	r3, #4
 8012b78:	d80c      	bhi.n	8012b94 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8012b7a:	6878      	ldr	r0, [r7, #4]
 8012b7c:	f000 fa30 	bl	8012fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b84:	2200      	movs	r2, #0
 8012b86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012b8c:	687a      	ldr	r2, [r7, #4]
 8012b8e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012b90:	605a      	str	r2, [r3, #4]
 8012b92:	e008      	b.n	8012ba6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2200      	movs	r2, #0
 8012b98:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	2200      	movs	r2, #0
 8012baa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	2201      	movs	r2, #1
 8012bb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8012bbc:	2300      	movs	r3, #0
}
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	3710      	adds	r7, #16
 8012bc2:	46bd      	mov	sp, r7
 8012bc4:	bd80      	pop	{r7, pc}
 8012bc6:	bf00      	nop
 8012bc8:	40020407 	.word	0x40020407
 8012bcc:	bffdfff8 	.word	0xbffdfff8
 8012bd0:	cccccccd 	.word	0xcccccccd
 8012bd4:	40020000 	.word	0x40020000
 8012bd8:	bffdfbf8 	.word	0xbffdfbf8
 8012bdc:	40020400 	.word	0x40020400

08012be0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b086      	sub	sp, #24
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	60f8      	str	r0, [r7, #12]
 8012be8:	60b9      	str	r1, [r7, #8]
 8012bea:	607a      	str	r2, [r7, #4]
 8012bec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012bee:	2300      	movs	r3, #0
 8012bf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012bf8:	2b01      	cmp	r3, #1
 8012bfa:	d101      	bne.n	8012c00 <HAL_DMA_Start_IT+0x20>
 8012bfc:	2302      	movs	r3, #2
 8012bfe:	e066      	b.n	8012cce <HAL_DMA_Start_IT+0xee>
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	2201      	movs	r2, #1
 8012c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8012c0e:	b2db      	uxtb	r3, r3
 8012c10:	2b01      	cmp	r3, #1
 8012c12:	d155      	bne.n	8012cc0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	2202      	movs	r2, #2
 8012c18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	2200      	movs	r2, #0
 8012c20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	681a      	ldr	r2, [r3, #0]
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	f022 0201 	bic.w	r2, r2, #1
 8012c30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012c32:	683b      	ldr	r3, [r7, #0]
 8012c34:	687a      	ldr	r2, [r7, #4]
 8012c36:	68b9      	ldr	r1, [r7, #8]
 8012c38:	68f8      	ldr	r0, [r7, #12]
 8012c3a:	f000 f954 	bl	8012ee6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d008      	beq.n	8012c58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	681a      	ldr	r2, [r3, #0]
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	f042 020e 	orr.w	r2, r2, #14
 8012c54:	601a      	str	r2, [r3, #0]
 8012c56:	e00f      	b.n	8012c78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	681a      	ldr	r2, [r3, #0]
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	f022 0204 	bic.w	r2, r2, #4
 8012c66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	681a      	ldr	r2, [r3, #0]
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	f042 020a 	orr.w	r2, r2, #10
 8012c76:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d007      	beq.n	8012c96 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012c8a:	681a      	ldr	r2, [r3, #0]
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012c94:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d007      	beq.n	8012cae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ca2:	681a      	ldr	r2, [r3, #0]
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012cac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	681a      	ldr	r2, [r3, #0]
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	f042 0201 	orr.w	r2, r2, #1
 8012cbc:	601a      	str	r2, [r3, #0]
 8012cbe:	e005      	b.n	8012ccc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8012cc8:	2302      	movs	r3, #2
 8012cca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8012ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3718      	adds	r7, #24
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}

08012cd6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8012cd6:	b480      	push	{r7}
 8012cd8:	b085      	sub	sp, #20
 8012cda:	af00      	add	r7, sp, #0
 8012cdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012cde:	2300      	movs	r3, #0
 8012ce0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8012ce8:	b2db      	uxtb	r3, r3
 8012cea:	2b02      	cmp	r3, #2
 8012cec:	d005      	beq.n	8012cfa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	2204      	movs	r2, #4
 8012cf2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8012cf4:	2301      	movs	r3, #1
 8012cf6:	73fb      	strb	r3, [r7, #15]
 8012cf8:	e037      	b.n	8012d6a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	681a      	ldr	r2, [r3, #0]
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	f022 020e 	bic.w	r2, r2, #14
 8012d08:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012d0e:	681a      	ldr	r2, [r3, #0]
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012d18:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	681a      	ldr	r2, [r3, #0]
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	f022 0201 	bic.w	r2, r2, #1
 8012d28:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d2e:	f003 021f 	and.w	r2, r3, #31
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d36:	2101      	movs	r1, #1
 8012d38:	fa01 f202 	lsl.w	r2, r1, r2
 8012d3c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012d42:	687a      	ldr	r2, [r7, #4]
 8012d44:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8012d46:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d00c      	beq.n	8012d6a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d54:	681a      	ldr	r2, [r3, #0]
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012d5e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d64:	687a      	ldr	r2, [r7, #4]
 8012d66:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012d68:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	2201      	movs	r2, #1
 8012d6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	2200      	movs	r2, #0
 8012d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8012d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	3714      	adds	r7, #20
 8012d80:	46bd      	mov	sp, r7
 8012d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d86:	4770      	bx	lr

08012d88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b084      	sub	sp, #16
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012da4:	f003 031f 	and.w	r3, r3, #31
 8012da8:	2204      	movs	r2, #4
 8012daa:	409a      	lsls	r2, r3
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	4013      	ands	r3, r2
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d026      	beq.n	8012e02 <HAL_DMA_IRQHandler+0x7a>
 8012db4:	68bb      	ldr	r3, [r7, #8]
 8012db6:	f003 0304 	and.w	r3, r3, #4
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d021      	beq.n	8012e02 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	f003 0320 	and.w	r3, r3, #32
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d107      	bne.n	8012ddc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	681a      	ldr	r2, [r3, #0]
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	f022 0204 	bic.w	r2, r2, #4
 8012dda:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012de0:	f003 021f 	and.w	r2, r3, #31
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012de8:	2104      	movs	r1, #4
 8012dea:	fa01 f202 	lsl.w	r2, r1, r2
 8012dee:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d071      	beq.n	8012edc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8012e00:	e06c      	b.n	8012edc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e06:	f003 031f 	and.w	r3, r3, #31
 8012e0a:	2202      	movs	r2, #2
 8012e0c:	409a      	lsls	r2, r3
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	4013      	ands	r3, r2
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d02e      	beq.n	8012e74 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	f003 0302 	and.w	r3, r3, #2
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d029      	beq.n	8012e74 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	f003 0320 	and.w	r3, r3, #32
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d10b      	bne.n	8012e46 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	681a      	ldr	r2, [r3, #0]
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	f022 020a 	bic.w	r2, r2, #10
 8012e3c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	2201      	movs	r2, #1
 8012e42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e4a:	f003 021f 	and.w	r2, r3, #31
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e52:	2102      	movs	r1, #2
 8012e54:	fa01 f202 	lsl.w	r2, r1, r2
 8012e58:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d038      	beq.n	8012edc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e6e:	6878      	ldr	r0, [r7, #4]
 8012e70:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8012e72:	e033      	b.n	8012edc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e78:	f003 031f 	and.w	r3, r3, #31
 8012e7c:	2208      	movs	r2, #8
 8012e7e:	409a      	lsls	r2, r3
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	4013      	ands	r3, r2
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d02a      	beq.n	8012ede <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8012e88:	68bb      	ldr	r3, [r7, #8]
 8012e8a:	f003 0308 	and.w	r3, r3, #8
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d025      	beq.n	8012ede <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	681a      	ldr	r2, [r3, #0]
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	f022 020e 	bic.w	r2, r2, #14
 8012ea0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ea6:	f003 021f 	and.w	r2, r3, #31
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012eae:	2101      	movs	r1, #1
 8012eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8012eb4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	2201      	movs	r2, #1
 8012eba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	2201      	movs	r2, #1
 8012ec0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d004      	beq.n	8012ede <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ed8:	6878      	ldr	r0, [r7, #4]
 8012eda:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8012edc:	bf00      	nop
 8012ede:	bf00      	nop
}
 8012ee0:	3710      	adds	r7, #16
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}

08012ee6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012ee6:	b480      	push	{r7}
 8012ee8:	b085      	sub	sp, #20
 8012eea:	af00      	add	r7, sp, #0
 8012eec:	60f8      	str	r0, [r7, #12]
 8012eee:	60b9      	str	r1, [r7, #8]
 8012ef0:	607a      	str	r2, [r7, #4]
 8012ef2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ef8:	68fa      	ldr	r2, [r7, #12]
 8012efa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8012efc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d004      	beq.n	8012f10 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f0a:	68fa      	ldr	r2, [r7, #12]
 8012f0c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012f0e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f14:	f003 021f 	and.w	r2, r3, #31
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f1c:	2101      	movs	r1, #1
 8012f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8012f22:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	683a      	ldr	r2, [r7, #0]
 8012f2a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	689b      	ldr	r3, [r3, #8]
 8012f30:	2b10      	cmp	r3, #16
 8012f32:	d108      	bne.n	8012f46 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	687a      	ldr	r2, [r7, #4]
 8012f3a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	68ba      	ldr	r2, [r7, #8]
 8012f42:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8012f44:	e007      	b.n	8012f56 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	68ba      	ldr	r2, [r7, #8]
 8012f4c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	687a      	ldr	r2, [r7, #4]
 8012f54:	60da      	str	r2, [r3, #12]
}
 8012f56:	bf00      	nop
 8012f58:	3714      	adds	r7, #20
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f60:	4770      	bx	lr
	...

08012f64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8012f64:	b480      	push	{r7}
 8012f66:	b087      	sub	sp, #28
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	461a      	mov	r2, r3
 8012f72:	4b16      	ldr	r3, [pc, #88]	; (8012fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8012f74:	429a      	cmp	r2, r3
 8012f76:	d802      	bhi.n	8012f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8012f78:	4b15      	ldr	r3, [pc, #84]	; (8012fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8012f7a:	617b      	str	r3, [r7, #20]
 8012f7c:	e001      	b.n	8012f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8012f7e:	4b15      	ldr	r3, [pc, #84]	; (8012fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8012f80:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8012f82:	697b      	ldr	r3, [r7, #20]
 8012f84:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	b2db      	uxtb	r3, r3
 8012f8c:	3b08      	subs	r3, #8
 8012f8e:	4a12      	ldr	r2, [pc, #72]	; (8012fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8012f90:	fba2 2303 	umull	r2, r3, r2, r3
 8012f94:	091b      	lsrs	r3, r3, #4
 8012f96:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f9c:	089b      	lsrs	r3, r3, #2
 8012f9e:	009a      	lsls	r2, r3, #2
 8012fa0:	693b      	ldr	r3, [r7, #16]
 8012fa2:	4413      	add	r3, r2
 8012fa4:	461a      	mov	r2, r3
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	4a0b      	ldr	r2, [pc, #44]	; (8012fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8012fae:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	f003 031f 	and.w	r3, r3, #31
 8012fb6:	2201      	movs	r2, #1
 8012fb8:	409a      	lsls	r2, r3
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8012fbe:	bf00      	nop
 8012fc0:	371c      	adds	r7, #28
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc8:	4770      	bx	lr
 8012fca:	bf00      	nop
 8012fcc:	40020407 	.word	0x40020407
 8012fd0:	40020800 	.word	0x40020800
 8012fd4:	40020820 	.word	0x40020820
 8012fd8:	cccccccd 	.word	0xcccccccd
 8012fdc:	40020880 	.word	0x40020880

08012fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8012fe0:	b480      	push	{r7}
 8012fe2:	b085      	sub	sp, #20
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	685b      	ldr	r3, [r3, #4]
 8012fec:	b2db      	uxtb	r3, r3
 8012fee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8012ff0:	68fa      	ldr	r2, [r7, #12]
 8012ff2:	4b0b      	ldr	r3, [pc, #44]	; (8013020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8012ff4:	4413      	add	r3, r2
 8012ff6:	009b      	lsls	r3, r3, #2
 8012ff8:	461a      	mov	r2, r3
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	4a08      	ldr	r2, [pc, #32]	; (8013024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8013002:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	3b01      	subs	r3, #1
 8013008:	f003 031f 	and.w	r3, r3, #31
 801300c:	2201      	movs	r2, #1
 801300e:	409a      	lsls	r2, r3
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8013014:	bf00      	nop
 8013016:	3714      	adds	r7, #20
 8013018:	46bd      	mov	sp, r7
 801301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301e:	4770      	bx	lr
 8013020:	1000823f 	.word	0x1000823f
 8013024:	40020940 	.word	0x40020940

08013028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8013028:	b480      	push	{r7}
 801302a:	b087      	sub	sp, #28
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
 8013030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8013032:	2300      	movs	r3, #0
 8013034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8013036:	e15a      	b.n	80132ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	681a      	ldr	r2, [r3, #0]
 801303c:	2101      	movs	r1, #1
 801303e:	697b      	ldr	r3, [r7, #20]
 8013040:	fa01 f303 	lsl.w	r3, r1, r3
 8013044:	4013      	ands	r3, r2
 8013046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	2b00      	cmp	r3, #0
 801304c:	f000 814c 	beq.w	80132e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	685b      	ldr	r3, [r3, #4]
 8013054:	f003 0303 	and.w	r3, r3, #3
 8013058:	2b01      	cmp	r3, #1
 801305a:	d005      	beq.n	8013068 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801305c:	683b      	ldr	r3, [r7, #0]
 801305e:	685b      	ldr	r3, [r3, #4]
 8013060:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8013064:	2b02      	cmp	r3, #2
 8013066:	d130      	bne.n	80130ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	689b      	ldr	r3, [r3, #8]
 801306c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801306e:	697b      	ldr	r3, [r7, #20]
 8013070:	005b      	lsls	r3, r3, #1
 8013072:	2203      	movs	r2, #3
 8013074:	fa02 f303 	lsl.w	r3, r2, r3
 8013078:	43db      	mvns	r3, r3
 801307a:	693a      	ldr	r2, [r7, #16]
 801307c:	4013      	ands	r3, r2
 801307e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8013080:	683b      	ldr	r3, [r7, #0]
 8013082:	68da      	ldr	r2, [r3, #12]
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	005b      	lsls	r3, r3, #1
 8013088:	fa02 f303 	lsl.w	r3, r2, r3
 801308c:	693a      	ldr	r2, [r7, #16]
 801308e:	4313      	orrs	r3, r2
 8013090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	693a      	ldr	r2, [r7, #16]
 8013096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	685b      	ldr	r3, [r3, #4]
 801309c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801309e:	2201      	movs	r2, #1
 80130a0:	697b      	ldr	r3, [r7, #20]
 80130a2:	fa02 f303 	lsl.w	r3, r2, r3
 80130a6:	43db      	mvns	r3, r3
 80130a8:	693a      	ldr	r2, [r7, #16]
 80130aa:	4013      	ands	r3, r2
 80130ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80130ae:	683b      	ldr	r3, [r7, #0]
 80130b0:	685b      	ldr	r3, [r3, #4]
 80130b2:	091b      	lsrs	r3, r3, #4
 80130b4:	f003 0201 	and.w	r2, r3, #1
 80130b8:	697b      	ldr	r3, [r7, #20]
 80130ba:	fa02 f303 	lsl.w	r3, r2, r3
 80130be:	693a      	ldr	r2, [r7, #16]
 80130c0:	4313      	orrs	r3, r2
 80130c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	693a      	ldr	r2, [r7, #16]
 80130c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80130ca:	683b      	ldr	r3, [r7, #0]
 80130cc:	685b      	ldr	r3, [r3, #4]
 80130ce:	f003 0303 	and.w	r3, r3, #3
 80130d2:	2b03      	cmp	r3, #3
 80130d4:	d017      	beq.n	8013106 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	68db      	ldr	r3, [r3, #12]
 80130da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	005b      	lsls	r3, r3, #1
 80130e0:	2203      	movs	r2, #3
 80130e2:	fa02 f303 	lsl.w	r3, r2, r3
 80130e6:	43db      	mvns	r3, r3
 80130e8:	693a      	ldr	r2, [r7, #16]
 80130ea:	4013      	ands	r3, r2
 80130ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	689a      	ldr	r2, [r3, #8]
 80130f2:	697b      	ldr	r3, [r7, #20]
 80130f4:	005b      	lsls	r3, r3, #1
 80130f6:	fa02 f303 	lsl.w	r3, r2, r3
 80130fa:	693a      	ldr	r2, [r7, #16]
 80130fc:	4313      	orrs	r3, r2
 80130fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	693a      	ldr	r2, [r7, #16]
 8013104:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8013106:	683b      	ldr	r3, [r7, #0]
 8013108:	685b      	ldr	r3, [r3, #4]
 801310a:	f003 0303 	and.w	r3, r3, #3
 801310e:	2b02      	cmp	r3, #2
 8013110:	d123      	bne.n	801315a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8013112:	697b      	ldr	r3, [r7, #20]
 8013114:	08da      	lsrs	r2, r3, #3
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	3208      	adds	r2, #8
 801311a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801311e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8013120:	697b      	ldr	r3, [r7, #20]
 8013122:	f003 0307 	and.w	r3, r3, #7
 8013126:	009b      	lsls	r3, r3, #2
 8013128:	220f      	movs	r2, #15
 801312a:	fa02 f303 	lsl.w	r3, r2, r3
 801312e:	43db      	mvns	r3, r3
 8013130:	693a      	ldr	r2, [r7, #16]
 8013132:	4013      	ands	r3, r2
 8013134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8013136:	683b      	ldr	r3, [r7, #0]
 8013138:	691a      	ldr	r2, [r3, #16]
 801313a:	697b      	ldr	r3, [r7, #20]
 801313c:	f003 0307 	and.w	r3, r3, #7
 8013140:	009b      	lsls	r3, r3, #2
 8013142:	fa02 f303 	lsl.w	r3, r2, r3
 8013146:	693a      	ldr	r2, [r7, #16]
 8013148:	4313      	orrs	r3, r2
 801314a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	08da      	lsrs	r2, r3, #3
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	3208      	adds	r2, #8
 8013154:	6939      	ldr	r1, [r7, #16]
 8013156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	005b      	lsls	r3, r3, #1
 8013164:	2203      	movs	r2, #3
 8013166:	fa02 f303 	lsl.w	r3, r2, r3
 801316a:	43db      	mvns	r3, r3
 801316c:	693a      	ldr	r2, [r7, #16]
 801316e:	4013      	ands	r3, r2
 8013170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8013172:	683b      	ldr	r3, [r7, #0]
 8013174:	685b      	ldr	r3, [r3, #4]
 8013176:	f003 0203 	and.w	r2, r3, #3
 801317a:	697b      	ldr	r3, [r7, #20]
 801317c:	005b      	lsls	r3, r3, #1
 801317e:	fa02 f303 	lsl.w	r3, r2, r3
 8013182:	693a      	ldr	r2, [r7, #16]
 8013184:	4313      	orrs	r3, r2
 8013186:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	693a      	ldr	r2, [r7, #16]
 801318c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801318e:	683b      	ldr	r3, [r7, #0]
 8013190:	685b      	ldr	r3, [r3, #4]
 8013192:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8013196:	2b00      	cmp	r3, #0
 8013198:	f000 80a6 	beq.w	80132e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801319c:	4b5b      	ldr	r3, [pc, #364]	; (801330c <HAL_GPIO_Init+0x2e4>)
 801319e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80131a0:	4a5a      	ldr	r2, [pc, #360]	; (801330c <HAL_GPIO_Init+0x2e4>)
 80131a2:	f043 0301 	orr.w	r3, r3, #1
 80131a6:	6613      	str	r3, [r2, #96]	; 0x60
 80131a8:	4b58      	ldr	r3, [pc, #352]	; (801330c <HAL_GPIO_Init+0x2e4>)
 80131aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80131ac:	f003 0301 	and.w	r3, r3, #1
 80131b0:	60bb      	str	r3, [r7, #8]
 80131b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80131b4:	4a56      	ldr	r2, [pc, #344]	; (8013310 <HAL_GPIO_Init+0x2e8>)
 80131b6:	697b      	ldr	r3, [r7, #20]
 80131b8:	089b      	lsrs	r3, r3, #2
 80131ba:	3302      	adds	r3, #2
 80131bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80131c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	f003 0303 	and.w	r3, r3, #3
 80131c8:	009b      	lsls	r3, r3, #2
 80131ca:	220f      	movs	r2, #15
 80131cc:	fa02 f303 	lsl.w	r3, r2, r3
 80131d0:	43db      	mvns	r3, r3
 80131d2:	693a      	ldr	r2, [r7, #16]
 80131d4:	4013      	ands	r3, r2
 80131d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80131de:	d01f      	beq.n	8013220 <HAL_GPIO_Init+0x1f8>
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	4a4c      	ldr	r2, [pc, #304]	; (8013314 <HAL_GPIO_Init+0x2ec>)
 80131e4:	4293      	cmp	r3, r2
 80131e6:	d019      	beq.n	801321c <HAL_GPIO_Init+0x1f4>
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	4a4b      	ldr	r2, [pc, #300]	; (8013318 <HAL_GPIO_Init+0x2f0>)
 80131ec:	4293      	cmp	r3, r2
 80131ee:	d013      	beq.n	8013218 <HAL_GPIO_Init+0x1f0>
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	4a4a      	ldr	r2, [pc, #296]	; (801331c <HAL_GPIO_Init+0x2f4>)
 80131f4:	4293      	cmp	r3, r2
 80131f6:	d00d      	beq.n	8013214 <HAL_GPIO_Init+0x1ec>
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	4a49      	ldr	r2, [pc, #292]	; (8013320 <HAL_GPIO_Init+0x2f8>)
 80131fc:	4293      	cmp	r3, r2
 80131fe:	d007      	beq.n	8013210 <HAL_GPIO_Init+0x1e8>
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	4a48      	ldr	r2, [pc, #288]	; (8013324 <HAL_GPIO_Init+0x2fc>)
 8013204:	4293      	cmp	r3, r2
 8013206:	d101      	bne.n	801320c <HAL_GPIO_Init+0x1e4>
 8013208:	2305      	movs	r3, #5
 801320a:	e00a      	b.n	8013222 <HAL_GPIO_Init+0x1fa>
 801320c:	2306      	movs	r3, #6
 801320e:	e008      	b.n	8013222 <HAL_GPIO_Init+0x1fa>
 8013210:	2304      	movs	r3, #4
 8013212:	e006      	b.n	8013222 <HAL_GPIO_Init+0x1fa>
 8013214:	2303      	movs	r3, #3
 8013216:	e004      	b.n	8013222 <HAL_GPIO_Init+0x1fa>
 8013218:	2302      	movs	r3, #2
 801321a:	e002      	b.n	8013222 <HAL_GPIO_Init+0x1fa>
 801321c:	2301      	movs	r3, #1
 801321e:	e000      	b.n	8013222 <HAL_GPIO_Init+0x1fa>
 8013220:	2300      	movs	r3, #0
 8013222:	697a      	ldr	r2, [r7, #20]
 8013224:	f002 0203 	and.w	r2, r2, #3
 8013228:	0092      	lsls	r2, r2, #2
 801322a:	4093      	lsls	r3, r2
 801322c:	693a      	ldr	r2, [r7, #16]
 801322e:	4313      	orrs	r3, r2
 8013230:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8013232:	4937      	ldr	r1, [pc, #220]	; (8013310 <HAL_GPIO_Init+0x2e8>)
 8013234:	697b      	ldr	r3, [r7, #20]
 8013236:	089b      	lsrs	r3, r3, #2
 8013238:	3302      	adds	r3, #2
 801323a:	693a      	ldr	r2, [r7, #16]
 801323c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8013240:	4b39      	ldr	r3, [pc, #228]	; (8013328 <HAL_GPIO_Init+0x300>)
 8013242:	689b      	ldr	r3, [r3, #8]
 8013244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	43db      	mvns	r3, r3
 801324a:	693a      	ldr	r2, [r7, #16]
 801324c:	4013      	ands	r3, r2
 801324e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8013250:	683b      	ldr	r3, [r7, #0]
 8013252:	685b      	ldr	r3, [r3, #4]
 8013254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013258:	2b00      	cmp	r3, #0
 801325a:	d003      	beq.n	8013264 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 801325c:	693a      	ldr	r2, [r7, #16]
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	4313      	orrs	r3, r2
 8013262:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8013264:	4a30      	ldr	r2, [pc, #192]	; (8013328 <HAL_GPIO_Init+0x300>)
 8013266:	693b      	ldr	r3, [r7, #16]
 8013268:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801326a:	4b2f      	ldr	r3, [pc, #188]	; (8013328 <HAL_GPIO_Init+0x300>)
 801326c:	68db      	ldr	r3, [r3, #12]
 801326e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	43db      	mvns	r3, r3
 8013274:	693a      	ldr	r2, [r7, #16]
 8013276:	4013      	ands	r3, r2
 8013278:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013282:	2b00      	cmp	r3, #0
 8013284:	d003      	beq.n	801328e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8013286:	693a      	ldr	r2, [r7, #16]
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	4313      	orrs	r3, r2
 801328c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801328e:	4a26      	ldr	r2, [pc, #152]	; (8013328 <HAL_GPIO_Init+0x300>)
 8013290:	693b      	ldr	r3, [r7, #16]
 8013292:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8013294:	4b24      	ldr	r3, [pc, #144]	; (8013328 <HAL_GPIO_Init+0x300>)
 8013296:	685b      	ldr	r3, [r3, #4]
 8013298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	43db      	mvns	r3, r3
 801329e:	693a      	ldr	r2, [r7, #16]
 80132a0:	4013      	ands	r3, r2
 80132a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80132a4:	683b      	ldr	r3, [r7, #0]
 80132a6:	685b      	ldr	r3, [r3, #4]
 80132a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d003      	beq.n	80132b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80132b0:	693a      	ldr	r2, [r7, #16]
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	4313      	orrs	r3, r2
 80132b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80132b8:	4a1b      	ldr	r2, [pc, #108]	; (8013328 <HAL_GPIO_Init+0x300>)
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80132be:	4b1a      	ldr	r3, [pc, #104]	; (8013328 <HAL_GPIO_Init+0x300>)
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	43db      	mvns	r3, r3
 80132c8:	693a      	ldr	r2, [r7, #16]
 80132ca:	4013      	ands	r3, r2
 80132cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	685b      	ldr	r3, [r3, #4]
 80132d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d003      	beq.n	80132e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80132da:	693a      	ldr	r2, [r7, #16]
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	4313      	orrs	r3, r2
 80132e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80132e2:	4a11      	ldr	r2, [pc, #68]	; (8013328 <HAL_GPIO_Init+0x300>)
 80132e4:	693b      	ldr	r3, [r7, #16]
 80132e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80132e8:	697b      	ldr	r3, [r7, #20]
 80132ea:	3301      	adds	r3, #1
 80132ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80132ee:	683b      	ldr	r3, [r7, #0]
 80132f0:	681a      	ldr	r2, [r3, #0]
 80132f2:	697b      	ldr	r3, [r7, #20]
 80132f4:	fa22 f303 	lsr.w	r3, r2, r3
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	f47f ae9d 	bne.w	8013038 <HAL_GPIO_Init+0x10>
  }
}
 80132fe:	bf00      	nop
 8013300:	bf00      	nop
 8013302:	371c      	adds	r7, #28
 8013304:	46bd      	mov	sp, r7
 8013306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801330a:	4770      	bx	lr
 801330c:	40021000 	.word	0x40021000
 8013310:	40010000 	.word	0x40010000
 8013314:	48000400 	.word	0x48000400
 8013318:	48000800 	.word	0x48000800
 801331c:	48000c00 	.word	0x48000c00
 8013320:	48001000 	.word	0x48001000
 8013324:	48001400 	.word	0x48001400
 8013328:	40010400 	.word	0x40010400

0801332c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801332c:	b480      	push	{r7}
 801332e:	b083      	sub	sp, #12
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
 8013334:	460b      	mov	r3, r1
 8013336:	807b      	strh	r3, [r7, #2]
 8013338:	4613      	mov	r3, r2
 801333a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801333c:	787b      	ldrb	r3, [r7, #1]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d003      	beq.n	801334a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8013342:	887a      	ldrh	r2, [r7, #2]
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8013348:	e002      	b.n	8013350 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801334a:	887a      	ldrh	r2, [r7, #2]
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8013350:	bf00      	nop
 8013352:	370c      	adds	r7, #12
 8013354:	46bd      	mov	sp, r7
 8013356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335a:	4770      	bx	lr

0801335c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801335c:	b480      	push	{r7}
 801335e:	b085      	sub	sp, #20
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d141      	bne.n	80133ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801336a:	4b4b      	ldr	r3, [pc, #300]	; (8013498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013376:	d131      	bne.n	80133dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8013378:	4b47      	ldr	r3, [pc, #284]	; (8013498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801337a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801337e:	4a46      	ldr	r2, [pc, #280]	; (8013498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8013380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013384:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8013388:	4b43      	ldr	r3, [pc, #268]	; (8013498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8013390:	4a41      	ldr	r2, [pc, #260]	; (8013498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8013392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013396:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8013398:	4b40      	ldr	r3, [pc, #256]	; (801349c <HAL_PWREx_ControlVoltageScaling+0x140>)
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	2232      	movs	r2, #50	; 0x32
 801339e:	fb02 f303 	mul.w	r3, r2, r3
 80133a2:	4a3f      	ldr	r2, [pc, #252]	; (80134a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80133a4:	fba2 2303 	umull	r2, r3, r2, r3
 80133a8:	0c9b      	lsrs	r3, r3, #18
 80133aa:	3301      	adds	r3, #1
 80133ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80133ae:	e002      	b.n	80133b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	3b01      	subs	r3, #1
 80133b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80133b6:	4b38      	ldr	r3, [pc, #224]	; (8013498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80133b8:	695b      	ldr	r3, [r3, #20]
 80133ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80133be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80133c2:	d102      	bne.n	80133ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d1f2      	bne.n	80133b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80133ca:	4b33      	ldr	r3, [pc, #204]	; (8013498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80133cc:	695b      	ldr	r3, [r3, #20]
 80133ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80133d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80133d6:	d158      	bne.n	801348a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80133d8:	2303      	movs	r3, #3
 80133da:	e057      	b.n	801348c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80133dc:	4b2e      	ldr	r3, [pc, #184]	; (8013498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80133de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80133e2:	4a2d      	ldr	r2, [pc, #180]	; (8013498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80133e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80133e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80133ec:	e04d      	b.n	801348a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80133f4:	d141      	bne.n	801347a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80133f6:	4b28      	ldr	r3, [pc, #160]	; (8013498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80133fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013402:	d131      	bne.n	8013468 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8013404:	4b24      	ldr	r3, [pc, #144]	; (8013498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8013406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801340a:	4a23      	ldr	r2, [pc, #140]	; (8013498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801340c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013410:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8013414:	4b20      	ldr	r3, [pc, #128]	; (8013498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801341c:	4a1e      	ldr	r2, [pc, #120]	; (8013498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801341e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013422:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8013424:	4b1d      	ldr	r3, [pc, #116]	; (801349c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	2232      	movs	r2, #50	; 0x32
 801342a:	fb02 f303 	mul.w	r3, r2, r3
 801342e:	4a1c      	ldr	r2, [pc, #112]	; (80134a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8013430:	fba2 2303 	umull	r2, r3, r2, r3
 8013434:	0c9b      	lsrs	r3, r3, #18
 8013436:	3301      	adds	r3, #1
 8013438:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801343a:	e002      	b.n	8013442 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	3b01      	subs	r3, #1
 8013440:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8013442:	4b15      	ldr	r3, [pc, #84]	; (8013498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8013444:	695b      	ldr	r3, [r3, #20]
 8013446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801344a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801344e:	d102      	bne.n	8013456 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d1f2      	bne.n	801343c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8013456:	4b10      	ldr	r3, [pc, #64]	; (8013498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8013458:	695b      	ldr	r3, [r3, #20]
 801345a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801345e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013462:	d112      	bne.n	801348a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8013464:	2303      	movs	r3, #3
 8013466:	e011      	b.n	801348c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8013468:	4b0b      	ldr	r3, [pc, #44]	; (8013498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801346a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801346e:	4a0a      	ldr	r2, [pc, #40]	; (8013498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8013470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013474:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8013478:	e007      	b.n	801348a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801347a:	4b07      	ldr	r3, [pc, #28]	; (8013498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8013482:	4a05      	ldr	r2, [pc, #20]	; (8013498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8013484:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013488:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 801348a:	2300      	movs	r3, #0
}
 801348c:	4618      	mov	r0, r3
 801348e:	3714      	adds	r7, #20
 8013490:	46bd      	mov	sp, r7
 8013492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013496:	4770      	bx	lr
 8013498:	40007000 	.word	0x40007000
 801349c:	20000000 	.word	0x20000000
 80134a0:	431bde83 	.word	0x431bde83

080134a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80134a4:	b480      	push	{r7}
 80134a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80134a8:	4b05      	ldr	r3, [pc, #20]	; (80134c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80134aa:	689b      	ldr	r3, [r3, #8]
 80134ac:	4a04      	ldr	r2, [pc, #16]	; (80134c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80134ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80134b2:	6093      	str	r3, [r2, #8]
}
 80134b4:	bf00      	nop
 80134b6:	46bd      	mov	sp, r7
 80134b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134bc:	4770      	bx	lr
 80134be:	bf00      	nop
 80134c0:	40007000 	.word	0x40007000

080134c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b088      	sub	sp, #32
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d101      	bne.n	80134d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80134d2:	2301      	movs	r3, #1
 80134d4:	e306      	b.n	8013ae4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	f003 0301 	and.w	r3, r3, #1
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d075      	beq.n	80135ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80134e2:	4b97      	ldr	r3, [pc, #604]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 80134e4:	689b      	ldr	r3, [r3, #8]
 80134e6:	f003 030c 	and.w	r3, r3, #12
 80134ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80134ec:	4b94      	ldr	r3, [pc, #592]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 80134ee:	68db      	ldr	r3, [r3, #12]
 80134f0:	f003 0303 	and.w	r3, r3, #3
 80134f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80134f6:	69bb      	ldr	r3, [r7, #24]
 80134f8:	2b0c      	cmp	r3, #12
 80134fa:	d102      	bne.n	8013502 <HAL_RCC_OscConfig+0x3e>
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	2b03      	cmp	r3, #3
 8013500:	d002      	beq.n	8013508 <HAL_RCC_OscConfig+0x44>
 8013502:	69bb      	ldr	r3, [r7, #24]
 8013504:	2b08      	cmp	r3, #8
 8013506:	d10b      	bne.n	8013520 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013508:	4b8d      	ldr	r3, [pc, #564]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013510:	2b00      	cmp	r3, #0
 8013512:	d05b      	beq.n	80135cc <HAL_RCC_OscConfig+0x108>
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	685b      	ldr	r3, [r3, #4]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d157      	bne.n	80135cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801351c:	2301      	movs	r3, #1
 801351e:	e2e1      	b.n	8013ae4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	685b      	ldr	r3, [r3, #4]
 8013524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013528:	d106      	bne.n	8013538 <HAL_RCC_OscConfig+0x74>
 801352a:	4b85      	ldr	r3, [pc, #532]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	4a84      	ldr	r2, [pc, #528]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 8013530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013534:	6013      	str	r3, [r2, #0]
 8013536:	e01d      	b.n	8013574 <HAL_RCC_OscConfig+0xb0>
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	685b      	ldr	r3, [r3, #4]
 801353c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013540:	d10c      	bne.n	801355c <HAL_RCC_OscConfig+0x98>
 8013542:	4b7f      	ldr	r3, [pc, #508]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	4a7e      	ldr	r2, [pc, #504]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 8013548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801354c:	6013      	str	r3, [r2, #0]
 801354e:	4b7c      	ldr	r3, [pc, #496]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	4a7b      	ldr	r2, [pc, #492]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 8013554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013558:	6013      	str	r3, [r2, #0]
 801355a:	e00b      	b.n	8013574 <HAL_RCC_OscConfig+0xb0>
 801355c:	4b78      	ldr	r3, [pc, #480]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	4a77      	ldr	r2, [pc, #476]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 8013562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013566:	6013      	str	r3, [r2, #0]
 8013568:	4b75      	ldr	r3, [pc, #468]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	4a74      	ldr	r2, [pc, #464]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 801356e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	685b      	ldr	r3, [r3, #4]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d013      	beq.n	80135a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801357c:	f7fc ff76 	bl	801046c <HAL_GetTick>
 8013580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013582:	e008      	b.n	8013596 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013584:	f7fc ff72 	bl	801046c <HAL_GetTick>
 8013588:	4602      	mov	r2, r0
 801358a:	693b      	ldr	r3, [r7, #16]
 801358c:	1ad3      	subs	r3, r2, r3
 801358e:	2b64      	cmp	r3, #100	; 0x64
 8013590:	d901      	bls.n	8013596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8013592:	2303      	movs	r3, #3
 8013594:	e2a6      	b.n	8013ae4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013596:	4b6a      	ldr	r3, [pc, #424]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d0f0      	beq.n	8013584 <HAL_RCC_OscConfig+0xc0>
 80135a2:	e014      	b.n	80135ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80135a4:	f7fc ff62 	bl	801046c <HAL_GetTick>
 80135a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80135aa:	e008      	b.n	80135be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80135ac:	f7fc ff5e 	bl	801046c <HAL_GetTick>
 80135b0:	4602      	mov	r2, r0
 80135b2:	693b      	ldr	r3, [r7, #16]
 80135b4:	1ad3      	subs	r3, r2, r3
 80135b6:	2b64      	cmp	r3, #100	; 0x64
 80135b8:	d901      	bls.n	80135be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80135ba:	2303      	movs	r3, #3
 80135bc:	e292      	b.n	8013ae4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80135be:	4b60      	ldr	r3, [pc, #384]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d1f0      	bne.n	80135ac <HAL_RCC_OscConfig+0xe8>
 80135ca:	e000      	b.n	80135ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80135cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	f003 0302 	and.w	r3, r3, #2
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d075      	beq.n	80136c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80135da:	4b59      	ldr	r3, [pc, #356]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 80135dc:	689b      	ldr	r3, [r3, #8]
 80135de:	f003 030c 	and.w	r3, r3, #12
 80135e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80135e4:	4b56      	ldr	r3, [pc, #344]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 80135e6:	68db      	ldr	r3, [r3, #12]
 80135e8:	f003 0303 	and.w	r3, r3, #3
 80135ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80135ee:	69bb      	ldr	r3, [r7, #24]
 80135f0:	2b0c      	cmp	r3, #12
 80135f2:	d102      	bne.n	80135fa <HAL_RCC_OscConfig+0x136>
 80135f4:	697b      	ldr	r3, [r7, #20]
 80135f6:	2b02      	cmp	r3, #2
 80135f8:	d002      	beq.n	8013600 <HAL_RCC_OscConfig+0x13c>
 80135fa:	69bb      	ldr	r3, [r7, #24]
 80135fc:	2b04      	cmp	r3, #4
 80135fe:	d11f      	bne.n	8013640 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013600:	4b4f      	ldr	r3, [pc, #316]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013608:	2b00      	cmp	r3, #0
 801360a:	d005      	beq.n	8013618 <HAL_RCC_OscConfig+0x154>
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	68db      	ldr	r3, [r3, #12]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d101      	bne.n	8013618 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8013614:	2301      	movs	r3, #1
 8013616:	e265      	b.n	8013ae4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013618:	4b49      	ldr	r3, [pc, #292]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 801361a:	685b      	ldr	r3, [r3, #4]
 801361c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	691b      	ldr	r3, [r3, #16]
 8013624:	061b      	lsls	r3, r3, #24
 8013626:	4946      	ldr	r1, [pc, #280]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 8013628:	4313      	orrs	r3, r2
 801362a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801362c:	4b45      	ldr	r3, [pc, #276]	; (8013744 <HAL_RCC_OscConfig+0x280>)
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	4618      	mov	r0, r3
 8013632:	f7fc fecf 	bl	80103d4 <HAL_InitTick>
 8013636:	4603      	mov	r3, r0
 8013638:	2b00      	cmp	r3, #0
 801363a:	d043      	beq.n	80136c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 801363c:	2301      	movs	r3, #1
 801363e:	e251      	b.n	8013ae4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	68db      	ldr	r3, [r3, #12]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d023      	beq.n	8013690 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013648:	4b3d      	ldr	r3, [pc, #244]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	4a3c      	ldr	r2, [pc, #240]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 801364e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013654:	f7fc ff0a 	bl	801046c <HAL_GetTick>
 8013658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801365a:	e008      	b.n	801366e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801365c:	f7fc ff06 	bl	801046c <HAL_GetTick>
 8013660:	4602      	mov	r2, r0
 8013662:	693b      	ldr	r3, [r7, #16]
 8013664:	1ad3      	subs	r3, r2, r3
 8013666:	2b02      	cmp	r3, #2
 8013668:	d901      	bls.n	801366e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801366a:	2303      	movs	r3, #3
 801366c:	e23a      	b.n	8013ae4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801366e:	4b34      	ldr	r3, [pc, #208]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013676:	2b00      	cmp	r3, #0
 8013678:	d0f0      	beq.n	801365c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801367a:	4b31      	ldr	r3, [pc, #196]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 801367c:	685b      	ldr	r3, [r3, #4]
 801367e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	691b      	ldr	r3, [r3, #16]
 8013686:	061b      	lsls	r3, r3, #24
 8013688:	492d      	ldr	r1, [pc, #180]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 801368a:	4313      	orrs	r3, r2
 801368c:	604b      	str	r3, [r1, #4]
 801368e:	e01a      	b.n	80136c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013690:	4b2b      	ldr	r3, [pc, #172]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	4a2a      	ldr	r2, [pc, #168]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 8013696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801369a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801369c:	f7fc fee6 	bl	801046c <HAL_GetTick>
 80136a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80136a2:	e008      	b.n	80136b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80136a4:	f7fc fee2 	bl	801046c <HAL_GetTick>
 80136a8:	4602      	mov	r2, r0
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	1ad3      	subs	r3, r2, r3
 80136ae:	2b02      	cmp	r3, #2
 80136b0:	d901      	bls.n	80136b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80136b2:	2303      	movs	r3, #3
 80136b4:	e216      	b.n	8013ae4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80136b6:	4b22      	ldr	r3, [pc, #136]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d1f0      	bne.n	80136a4 <HAL_RCC_OscConfig+0x1e0>
 80136c2:	e000      	b.n	80136c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80136c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	f003 0308 	and.w	r3, r3, #8
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d041      	beq.n	8013756 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	695b      	ldr	r3, [r3, #20]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d01c      	beq.n	8013714 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80136da:	4b19      	ldr	r3, [pc, #100]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 80136dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80136e0:	4a17      	ldr	r2, [pc, #92]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 80136e2:	f043 0301 	orr.w	r3, r3, #1
 80136e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80136ea:	f7fc febf 	bl	801046c <HAL_GetTick>
 80136ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80136f0:	e008      	b.n	8013704 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80136f2:	f7fc febb 	bl	801046c <HAL_GetTick>
 80136f6:	4602      	mov	r2, r0
 80136f8:	693b      	ldr	r3, [r7, #16]
 80136fa:	1ad3      	subs	r3, r2, r3
 80136fc:	2b02      	cmp	r3, #2
 80136fe:	d901      	bls.n	8013704 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8013700:	2303      	movs	r3, #3
 8013702:	e1ef      	b.n	8013ae4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8013704:	4b0e      	ldr	r3, [pc, #56]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 8013706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801370a:	f003 0302 	and.w	r3, r3, #2
 801370e:	2b00      	cmp	r3, #0
 8013710:	d0ef      	beq.n	80136f2 <HAL_RCC_OscConfig+0x22e>
 8013712:	e020      	b.n	8013756 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013714:	4b0a      	ldr	r3, [pc, #40]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 8013716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801371a:	4a09      	ldr	r2, [pc, #36]	; (8013740 <HAL_RCC_OscConfig+0x27c>)
 801371c:	f023 0301 	bic.w	r3, r3, #1
 8013720:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013724:	f7fc fea2 	bl	801046c <HAL_GetTick>
 8013728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801372a:	e00d      	b.n	8013748 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801372c:	f7fc fe9e 	bl	801046c <HAL_GetTick>
 8013730:	4602      	mov	r2, r0
 8013732:	693b      	ldr	r3, [r7, #16]
 8013734:	1ad3      	subs	r3, r2, r3
 8013736:	2b02      	cmp	r3, #2
 8013738:	d906      	bls.n	8013748 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801373a:	2303      	movs	r3, #3
 801373c:	e1d2      	b.n	8013ae4 <HAL_RCC_OscConfig+0x620>
 801373e:	bf00      	nop
 8013740:	40021000 	.word	0x40021000
 8013744:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8013748:	4b8c      	ldr	r3, [pc, #560]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 801374a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801374e:	f003 0302 	and.w	r3, r3, #2
 8013752:	2b00      	cmp	r3, #0
 8013754:	d1ea      	bne.n	801372c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	f003 0304 	and.w	r3, r3, #4
 801375e:	2b00      	cmp	r3, #0
 8013760:	f000 80a6 	beq.w	80138b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013764:	2300      	movs	r3, #0
 8013766:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8013768:	4b84      	ldr	r3, [pc, #528]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 801376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801376c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013770:	2b00      	cmp	r3, #0
 8013772:	d101      	bne.n	8013778 <HAL_RCC_OscConfig+0x2b4>
 8013774:	2301      	movs	r3, #1
 8013776:	e000      	b.n	801377a <HAL_RCC_OscConfig+0x2b6>
 8013778:	2300      	movs	r3, #0
 801377a:	2b00      	cmp	r3, #0
 801377c:	d00d      	beq.n	801379a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801377e:	4b7f      	ldr	r3, [pc, #508]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 8013780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013782:	4a7e      	ldr	r2, [pc, #504]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 8013784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013788:	6593      	str	r3, [r2, #88]	; 0x58
 801378a:	4b7c      	ldr	r3, [pc, #496]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 801378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013792:	60fb      	str	r3, [r7, #12]
 8013794:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8013796:	2301      	movs	r3, #1
 8013798:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801379a:	4b79      	ldr	r3, [pc, #484]	; (8013980 <HAL_RCC_OscConfig+0x4bc>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d118      	bne.n	80137d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80137a6:	4b76      	ldr	r3, [pc, #472]	; (8013980 <HAL_RCC_OscConfig+0x4bc>)
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	4a75      	ldr	r2, [pc, #468]	; (8013980 <HAL_RCC_OscConfig+0x4bc>)
 80137ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80137b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80137b2:	f7fc fe5b 	bl	801046c <HAL_GetTick>
 80137b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80137b8:	e008      	b.n	80137cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80137ba:	f7fc fe57 	bl	801046c <HAL_GetTick>
 80137be:	4602      	mov	r2, r0
 80137c0:	693b      	ldr	r3, [r7, #16]
 80137c2:	1ad3      	subs	r3, r2, r3
 80137c4:	2b02      	cmp	r3, #2
 80137c6:	d901      	bls.n	80137cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80137c8:	2303      	movs	r3, #3
 80137ca:	e18b      	b.n	8013ae4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80137cc:	4b6c      	ldr	r3, [pc, #432]	; (8013980 <HAL_RCC_OscConfig+0x4bc>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d0f0      	beq.n	80137ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	689b      	ldr	r3, [r3, #8]
 80137dc:	2b01      	cmp	r3, #1
 80137de:	d108      	bne.n	80137f2 <HAL_RCC_OscConfig+0x32e>
 80137e0:	4b66      	ldr	r3, [pc, #408]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 80137e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80137e6:	4a65      	ldr	r2, [pc, #404]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 80137e8:	f043 0301 	orr.w	r3, r3, #1
 80137ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80137f0:	e024      	b.n	801383c <HAL_RCC_OscConfig+0x378>
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	689b      	ldr	r3, [r3, #8]
 80137f6:	2b05      	cmp	r3, #5
 80137f8:	d110      	bne.n	801381c <HAL_RCC_OscConfig+0x358>
 80137fa:	4b60      	ldr	r3, [pc, #384]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 80137fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013800:	4a5e      	ldr	r2, [pc, #376]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 8013802:	f043 0304 	orr.w	r3, r3, #4
 8013806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801380a:	4b5c      	ldr	r3, [pc, #368]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 801380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013810:	4a5a      	ldr	r2, [pc, #360]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 8013812:	f043 0301 	orr.w	r3, r3, #1
 8013816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801381a:	e00f      	b.n	801383c <HAL_RCC_OscConfig+0x378>
 801381c:	4b57      	ldr	r3, [pc, #348]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 801381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013822:	4a56      	ldr	r2, [pc, #344]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 8013824:	f023 0301 	bic.w	r3, r3, #1
 8013828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801382c:	4b53      	ldr	r3, [pc, #332]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 801382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013832:	4a52      	ldr	r2, [pc, #328]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 8013834:	f023 0304 	bic.w	r3, r3, #4
 8013838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	689b      	ldr	r3, [r3, #8]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d016      	beq.n	8013872 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013844:	f7fc fe12 	bl	801046c <HAL_GetTick>
 8013848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801384a:	e00a      	b.n	8013862 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801384c:	f7fc fe0e 	bl	801046c <HAL_GetTick>
 8013850:	4602      	mov	r2, r0
 8013852:	693b      	ldr	r3, [r7, #16]
 8013854:	1ad3      	subs	r3, r2, r3
 8013856:	f241 3288 	movw	r2, #5000	; 0x1388
 801385a:	4293      	cmp	r3, r2
 801385c:	d901      	bls.n	8013862 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 801385e:	2303      	movs	r3, #3
 8013860:	e140      	b.n	8013ae4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013862:	4b46      	ldr	r3, [pc, #280]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 8013864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013868:	f003 0302 	and.w	r3, r3, #2
 801386c:	2b00      	cmp	r3, #0
 801386e:	d0ed      	beq.n	801384c <HAL_RCC_OscConfig+0x388>
 8013870:	e015      	b.n	801389e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013872:	f7fc fdfb 	bl	801046c <HAL_GetTick>
 8013876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8013878:	e00a      	b.n	8013890 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801387a:	f7fc fdf7 	bl	801046c <HAL_GetTick>
 801387e:	4602      	mov	r2, r0
 8013880:	693b      	ldr	r3, [r7, #16]
 8013882:	1ad3      	subs	r3, r2, r3
 8013884:	f241 3288 	movw	r2, #5000	; 0x1388
 8013888:	4293      	cmp	r3, r2
 801388a:	d901      	bls.n	8013890 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 801388c:	2303      	movs	r3, #3
 801388e:	e129      	b.n	8013ae4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8013890:	4b3a      	ldr	r3, [pc, #232]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 8013892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013896:	f003 0302 	and.w	r3, r3, #2
 801389a:	2b00      	cmp	r3, #0
 801389c:	d1ed      	bne.n	801387a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801389e:	7ffb      	ldrb	r3, [r7, #31]
 80138a0:	2b01      	cmp	r3, #1
 80138a2:	d105      	bne.n	80138b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80138a4:	4b35      	ldr	r3, [pc, #212]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 80138a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80138a8:	4a34      	ldr	r2, [pc, #208]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 80138aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80138ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	f003 0320 	and.w	r3, r3, #32
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d03c      	beq.n	8013936 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	699b      	ldr	r3, [r3, #24]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d01c      	beq.n	80138fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80138c4:	4b2d      	ldr	r3, [pc, #180]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 80138c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80138ca:	4a2c      	ldr	r2, [pc, #176]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 80138cc:	f043 0301 	orr.w	r3, r3, #1
 80138d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80138d4:	f7fc fdca 	bl	801046c <HAL_GetTick>
 80138d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80138da:	e008      	b.n	80138ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80138dc:	f7fc fdc6 	bl	801046c <HAL_GetTick>
 80138e0:	4602      	mov	r2, r0
 80138e2:	693b      	ldr	r3, [r7, #16]
 80138e4:	1ad3      	subs	r3, r2, r3
 80138e6:	2b02      	cmp	r3, #2
 80138e8:	d901      	bls.n	80138ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80138ea:	2303      	movs	r3, #3
 80138ec:	e0fa      	b.n	8013ae4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80138ee:	4b23      	ldr	r3, [pc, #140]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 80138f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80138f4:	f003 0302 	and.w	r3, r3, #2
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d0ef      	beq.n	80138dc <HAL_RCC_OscConfig+0x418>
 80138fc:	e01b      	b.n	8013936 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80138fe:	4b1f      	ldr	r3, [pc, #124]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 8013900:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013904:	4a1d      	ldr	r2, [pc, #116]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 8013906:	f023 0301 	bic.w	r3, r3, #1
 801390a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801390e:	f7fc fdad 	bl	801046c <HAL_GetTick>
 8013912:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8013914:	e008      	b.n	8013928 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013916:	f7fc fda9 	bl	801046c <HAL_GetTick>
 801391a:	4602      	mov	r2, r0
 801391c:	693b      	ldr	r3, [r7, #16]
 801391e:	1ad3      	subs	r3, r2, r3
 8013920:	2b02      	cmp	r3, #2
 8013922:	d901      	bls.n	8013928 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8013924:	2303      	movs	r3, #3
 8013926:	e0dd      	b.n	8013ae4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8013928:	4b14      	ldr	r3, [pc, #80]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 801392a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801392e:	f003 0302 	and.w	r3, r3, #2
 8013932:	2b00      	cmp	r3, #0
 8013934:	d1ef      	bne.n	8013916 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	69db      	ldr	r3, [r3, #28]
 801393a:	2b00      	cmp	r3, #0
 801393c:	f000 80d1 	beq.w	8013ae2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013940:	4b0e      	ldr	r3, [pc, #56]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 8013942:	689b      	ldr	r3, [r3, #8]
 8013944:	f003 030c 	and.w	r3, r3, #12
 8013948:	2b0c      	cmp	r3, #12
 801394a:	f000 808b 	beq.w	8013a64 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	69db      	ldr	r3, [r3, #28]
 8013952:	2b02      	cmp	r3, #2
 8013954:	d15e      	bne.n	8013a14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013956:	4b09      	ldr	r3, [pc, #36]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	4a08      	ldr	r2, [pc, #32]	; (801397c <HAL_RCC_OscConfig+0x4b8>)
 801395c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013962:	f7fc fd83 	bl	801046c <HAL_GetTick>
 8013966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013968:	e00c      	b.n	8013984 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801396a:	f7fc fd7f 	bl	801046c <HAL_GetTick>
 801396e:	4602      	mov	r2, r0
 8013970:	693b      	ldr	r3, [r7, #16]
 8013972:	1ad3      	subs	r3, r2, r3
 8013974:	2b02      	cmp	r3, #2
 8013976:	d905      	bls.n	8013984 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8013978:	2303      	movs	r3, #3
 801397a:	e0b3      	b.n	8013ae4 <HAL_RCC_OscConfig+0x620>
 801397c:	40021000 	.word	0x40021000
 8013980:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013984:	4b59      	ldr	r3, [pc, #356]	; (8013aec <HAL_RCC_OscConfig+0x628>)
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801398c:	2b00      	cmp	r3, #0
 801398e:	d1ec      	bne.n	801396a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013990:	4b56      	ldr	r3, [pc, #344]	; (8013aec <HAL_RCC_OscConfig+0x628>)
 8013992:	68da      	ldr	r2, [r3, #12]
 8013994:	4b56      	ldr	r3, [pc, #344]	; (8013af0 <HAL_RCC_OscConfig+0x62c>)
 8013996:	4013      	ands	r3, r2
 8013998:	687a      	ldr	r2, [r7, #4]
 801399a:	6a11      	ldr	r1, [r2, #32]
 801399c:	687a      	ldr	r2, [r7, #4]
 801399e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80139a0:	3a01      	subs	r2, #1
 80139a2:	0112      	lsls	r2, r2, #4
 80139a4:	4311      	orrs	r1, r2
 80139a6:	687a      	ldr	r2, [r7, #4]
 80139a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80139aa:	0212      	lsls	r2, r2, #8
 80139ac:	4311      	orrs	r1, r2
 80139ae:	687a      	ldr	r2, [r7, #4]
 80139b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80139b2:	0852      	lsrs	r2, r2, #1
 80139b4:	3a01      	subs	r2, #1
 80139b6:	0552      	lsls	r2, r2, #21
 80139b8:	4311      	orrs	r1, r2
 80139ba:	687a      	ldr	r2, [r7, #4]
 80139bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80139be:	0852      	lsrs	r2, r2, #1
 80139c0:	3a01      	subs	r2, #1
 80139c2:	0652      	lsls	r2, r2, #25
 80139c4:	4311      	orrs	r1, r2
 80139c6:	687a      	ldr	r2, [r7, #4]
 80139c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80139ca:	06d2      	lsls	r2, r2, #27
 80139cc:	430a      	orrs	r2, r1
 80139ce:	4947      	ldr	r1, [pc, #284]	; (8013aec <HAL_RCC_OscConfig+0x628>)
 80139d0:	4313      	orrs	r3, r2
 80139d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80139d4:	4b45      	ldr	r3, [pc, #276]	; (8013aec <HAL_RCC_OscConfig+0x628>)
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	4a44      	ldr	r2, [pc, #272]	; (8013aec <HAL_RCC_OscConfig+0x628>)
 80139da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80139de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80139e0:	4b42      	ldr	r3, [pc, #264]	; (8013aec <HAL_RCC_OscConfig+0x628>)
 80139e2:	68db      	ldr	r3, [r3, #12]
 80139e4:	4a41      	ldr	r2, [pc, #260]	; (8013aec <HAL_RCC_OscConfig+0x628>)
 80139e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80139ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80139ec:	f7fc fd3e 	bl	801046c <HAL_GetTick>
 80139f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80139f2:	e008      	b.n	8013a06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80139f4:	f7fc fd3a 	bl	801046c <HAL_GetTick>
 80139f8:	4602      	mov	r2, r0
 80139fa:	693b      	ldr	r3, [r7, #16]
 80139fc:	1ad3      	subs	r3, r2, r3
 80139fe:	2b02      	cmp	r3, #2
 8013a00:	d901      	bls.n	8013a06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8013a02:	2303      	movs	r3, #3
 8013a04:	e06e      	b.n	8013ae4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013a06:	4b39      	ldr	r3, [pc, #228]	; (8013aec <HAL_RCC_OscConfig+0x628>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d0f0      	beq.n	80139f4 <HAL_RCC_OscConfig+0x530>
 8013a12:	e066      	b.n	8013ae2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013a14:	4b35      	ldr	r3, [pc, #212]	; (8013aec <HAL_RCC_OscConfig+0x628>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	4a34      	ldr	r2, [pc, #208]	; (8013aec <HAL_RCC_OscConfig+0x628>)
 8013a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013a1e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8013a20:	4b32      	ldr	r3, [pc, #200]	; (8013aec <HAL_RCC_OscConfig+0x628>)
 8013a22:	68db      	ldr	r3, [r3, #12]
 8013a24:	4a31      	ldr	r2, [pc, #196]	; (8013aec <HAL_RCC_OscConfig+0x628>)
 8013a26:	f023 0303 	bic.w	r3, r3, #3
 8013a2a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8013a2c:	4b2f      	ldr	r3, [pc, #188]	; (8013aec <HAL_RCC_OscConfig+0x628>)
 8013a2e:	68db      	ldr	r3, [r3, #12]
 8013a30:	4a2e      	ldr	r2, [pc, #184]	; (8013aec <HAL_RCC_OscConfig+0x628>)
 8013a32:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8013a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013a3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013a3c:	f7fc fd16 	bl	801046c <HAL_GetTick>
 8013a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013a42:	e008      	b.n	8013a56 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013a44:	f7fc fd12 	bl	801046c <HAL_GetTick>
 8013a48:	4602      	mov	r2, r0
 8013a4a:	693b      	ldr	r3, [r7, #16]
 8013a4c:	1ad3      	subs	r3, r2, r3
 8013a4e:	2b02      	cmp	r3, #2
 8013a50:	d901      	bls.n	8013a56 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8013a52:	2303      	movs	r3, #3
 8013a54:	e046      	b.n	8013ae4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013a56:	4b25      	ldr	r3, [pc, #148]	; (8013aec <HAL_RCC_OscConfig+0x628>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d1f0      	bne.n	8013a44 <HAL_RCC_OscConfig+0x580>
 8013a62:	e03e      	b.n	8013ae2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	69db      	ldr	r3, [r3, #28]
 8013a68:	2b01      	cmp	r3, #1
 8013a6a:	d101      	bne.n	8013a70 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8013a6c:	2301      	movs	r3, #1
 8013a6e:	e039      	b.n	8013ae4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8013a70:	4b1e      	ldr	r3, [pc, #120]	; (8013aec <HAL_RCC_OscConfig+0x628>)
 8013a72:	68db      	ldr	r3, [r3, #12]
 8013a74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013a76:	697b      	ldr	r3, [r7, #20]
 8013a78:	f003 0203 	and.w	r2, r3, #3
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	6a1b      	ldr	r3, [r3, #32]
 8013a80:	429a      	cmp	r2, r3
 8013a82:	d12c      	bne.n	8013ade <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8013a84:	697b      	ldr	r3, [r7, #20]
 8013a86:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a8e:	3b01      	subs	r3, #1
 8013a90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013a92:	429a      	cmp	r2, r3
 8013a94:	d123      	bne.n	8013ade <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8013a96:	697b      	ldr	r3, [r7, #20]
 8013a98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013aa0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	d11b      	bne.n	8013ade <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8013aa6:	697b      	ldr	r3, [r7, #20]
 8013aa8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ab0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8013ab2:	429a      	cmp	r2, r3
 8013ab4:	d113      	bne.n	8013ade <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8013ab6:	697b      	ldr	r3, [r7, #20]
 8013ab8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ac0:	085b      	lsrs	r3, r3, #1
 8013ac2:	3b01      	subs	r3, #1
 8013ac4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8013ac6:	429a      	cmp	r2, r3
 8013ac8:	d109      	bne.n	8013ade <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8013aca:	697b      	ldr	r3, [r7, #20]
 8013acc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ad4:	085b      	lsrs	r3, r3, #1
 8013ad6:	3b01      	subs	r3, #1
 8013ad8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8013ada:	429a      	cmp	r2, r3
 8013adc:	d001      	beq.n	8013ae2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8013ade:	2301      	movs	r3, #1
 8013ae0:	e000      	b.n	8013ae4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8013ae2:	2300      	movs	r3, #0
}
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	3720      	adds	r7, #32
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	bd80      	pop	{r7, pc}
 8013aec:	40021000 	.word	0x40021000
 8013af0:	019f800c 	.word	0x019f800c

08013af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b086      	sub	sp, #24
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
 8013afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8013afe:	2300      	movs	r3, #0
 8013b00:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d101      	bne.n	8013b0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8013b08:	2301      	movs	r3, #1
 8013b0a:	e11e      	b.n	8013d4a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8013b0c:	4b91      	ldr	r3, [pc, #580]	; (8013d54 <HAL_RCC_ClockConfig+0x260>)
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	f003 030f 	and.w	r3, r3, #15
 8013b14:	683a      	ldr	r2, [r7, #0]
 8013b16:	429a      	cmp	r2, r3
 8013b18:	d910      	bls.n	8013b3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013b1a:	4b8e      	ldr	r3, [pc, #568]	; (8013d54 <HAL_RCC_ClockConfig+0x260>)
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	f023 020f 	bic.w	r2, r3, #15
 8013b22:	498c      	ldr	r1, [pc, #560]	; (8013d54 <HAL_RCC_ClockConfig+0x260>)
 8013b24:	683b      	ldr	r3, [r7, #0]
 8013b26:	4313      	orrs	r3, r2
 8013b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013b2a:	4b8a      	ldr	r3, [pc, #552]	; (8013d54 <HAL_RCC_ClockConfig+0x260>)
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	f003 030f 	and.w	r3, r3, #15
 8013b32:	683a      	ldr	r2, [r7, #0]
 8013b34:	429a      	cmp	r2, r3
 8013b36:	d001      	beq.n	8013b3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8013b38:	2301      	movs	r3, #1
 8013b3a:	e106      	b.n	8013d4a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	f003 0301 	and.w	r3, r3, #1
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d073      	beq.n	8013c30 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	685b      	ldr	r3, [r3, #4]
 8013b4c:	2b03      	cmp	r3, #3
 8013b4e:	d129      	bne.n	8013ba4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013b50:	4b81      	ldr	r3, [pc, #516]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d101      	bne.n	8013b60 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8013b5c:	2301      	movs	r3, #1
 8013b5e:	e0f4      	b.n	8013d4a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8013b60:	f000 f99c 	bl	8013e9c <RCC_GetSysClockFreqFromPLLSource>
 8013b64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8013b66:	693b      	ldr	r3, [r7, #16]
 8013b68:	4a7c      	ldr	r2, [pc, #496]	; (8013d5c <HAL_RCC_ClockConfig+0x268>)
 8013b6a:	4293      	cmp	r3, r2
 8013b6c:	d93f      	bls.n	8013bee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8013b6e:	4b7a      	ldr	r3, [pc, #488]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013b70:	689b      	ldr	r3, [r3, #8]
 8013b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d009      	beq.n	8013b8e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d033      	beq.n	8013bee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d12f      	bne.n	8013bee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8013b8e:	4b72      	ldr	r3, [pc, #456]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013b90:	689b      	ldr	r3, [r3, #8]
 8013b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013b96:	4a70      	ldr	r2, [pc, #448]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8013b9e:	2380      	movs	r3, #128	; 0x80
 8013ba0:	617b      	str	r3, [r7, #20]
 8013ba2:	e024      	b.n	8013bee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	685b      	ldr	r3, [r3, #4]
 8013ba8:	2b02      	cmp	r3, #2
 8013baa:	d107      	bne.n	8013bbc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013bac:	4b6a      	ldr	r3, [pc, #424]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d109      	bne.n	8013bcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8013bb8:	2301      	movs	r3, #1
 8013bba:	e0c6      	b.n	8013d4a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8013bbc:	4b66      	ldr	r3, [pc, #408]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d101      	bne.n	8013bcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8013bc8:	2301      	movs	r3, #1
 8013bca:	e0be      	b.n	8013d4a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8013bcc:	f000 f8ce 	bl	8013d6c <HAL_RCC_GetSysClockFreq>
 8013bd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8013bd2:	693b      	ldr	r3, [r7, #16]
 8013bd4:	4a61      	ldr	r2, [pc, #388]	; (8013d5c <HAL_RCC_ClockConfig+0x268>)
 8013bd6:	4293      	cmp	r3, r2
 8013bd8:	d909      	bls.n	8013bee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8013bda:	4b5f      	ldr	r3, [pc, #380]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013bdc:	689b      	ldr	r3, [r3, #8]
 8013bde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013be2:	4a5d      	ldr	r2, [pc, #372]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013be8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8013bea:	2380      	movs	r3, #128	; 0x80
 8013bec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8013bee:	4b5a      	ldr	r3, [pc, #360]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013bf0:	689b      	ldr	r3, [r3, #8]
 8013bf2:	f023 0203 	bic.w	r2, r3, #3
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	685b      	ldr	r3, [r3, #4]
 8013bfa:	4957      	ldr	r1, [pc, #348]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013bfc:	4313      	orrs	r3, r2
 8013bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013c00:	f7fc fc34 	bl	801046c <HAL_GetTick>
 8013c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013c06:	e00a      	b.n	8013c1e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013c08:	f7fc fc30 	bl	801046c <HAL_GetTick>
 8013c0c:	4602      	mov	r2, r0
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	1ad3      	subs	r3, r2, r3
 8013c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8013c16:	4293      	cmp	r3, r2
 8013c18:	d901      	bls.n	8013c1e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8013c1a:	2303      	movs	r3, #3
 8013c1c:	e095      	b.n	8013d4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013c1e:	4b4e      	ldr	r3, [pc, #312]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013c20:	689b      	ldr	r3, [r3, #8]
 8013c22:	f003 020c 	and.w	r2, r3, #12
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	685b      	ldr	r3, [r3, #4]
 8013c2a:	009b      	lsls	r3, r3, #2
 8013c2c:	429a      	cmp	r2, r3
 8013c2e:	d1eb      	bne.n	8013c08 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	f003 0302 	and.w	r3, r3, #2
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d023      	beq.n	8013c84 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	f003 0304 	and.w	r3, r3, #4
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d005      	beq.n	8013c54 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013c48:	4b43      	ldr	r3, [pc, #268]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013c4a:	689b      	ldr	r3, [r3, #8]
 8013c4c:	4a42      	ldr	r2, [pc, #264]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013c4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8013c52:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	f003 0308 	and.w	r3, r3, #8
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d007      	beq.n	8013c70 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8013c60:	4b3d      	ldr	r3, [pc, #244]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013c62:	689b      	ldr	r3, [r3, #8]
 8013c64:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013c68:	4a3b      	ldr	r2, [pc, #236]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013c6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8013c6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013c70:	4b39      	ldr	r3, [pc, #228]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013c72:	689b      	ldr	r3, [r3, #8]
 8013c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	689b      	ldr	r3, [r3, #8]
 8013c7c:	4936      	ldr	r1, [pc, #216]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013c7e:	4313      	orrs	r3, r2
 8013c80:	608b      	str	r3, [r1, #8]
 8013c82:	e008      	b.n	8013c96 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8013c84:	697b      	ldr	r3, [r7, #20]
 8013c86:	2b80      	cmp	r3, #128	; 0x80
 8013c88:	d105      	bne.n	8013c96 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8013c8a:	4b33      	ldr	r3, [pc, #204]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013c8c:	689b      	ldr	r3, [r3, #8]
 8013c8e:	4a32      	ldr	r2, [pc, #200]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013c90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013c94:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8013c96:	4b2f      	ldr	r3, [pc, #188]	; (8013d54 <HAL_RCC_ClockConfig+0x260>)
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	f003 030f 	and.w	r3, r3, #15
 8013c9e:	683a      	ldr	r2, [r7, #0]
 8013ca0:	429a      	cmp	r2, r3
 8013ca2:	d21d      	bcs.n	8013ce0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013ca4:	4b2b      	ldr	r3, [pc, #172]	; (8013d54 <HAL_RCC_ClockConfig+0x260>)
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	f023 020f 	bic.w	r2, r3, #15
 8013cac:	4929      	ldr	r1, [pc, #164]	; (8013d54 <HAL_RCC_ClockConfig+0x260>)
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	4313      	orrs	r3, r2
 8013cb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8013cb4:	f7fc fbda 	bl	801046c <HAL_GetTick>
 8013cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013cba:	e00a      	b.n	8013cd2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013cbc:	f7fc fbd6 	bl	801046c <HAL_GetTick>
 8013cc0:	4602      	mov	r2, r0
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	1ad3      	subs	r3, r2, r3
 8013cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8013cca:	4293      	cmp	r3, r2
 8013ccc:	d901      	bls.n	8013cd2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8013cce:	2303      	movs	r3, #3
 8013cd0:	e03b      	b.n	8013d4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013cd2:	4b20      	ldr	r3, [pc, #128]	; (8013d54 <HAL_RCC_ClockConfig+0x260>)
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	f003 030f 	and.w	r3, r3, #15
 8013cda:	683a      	ldr	r2, [r7, #0]
 8013cdc:	429a      	cmp	r2, r3
 8013cde:	d1ed      	bne.n	8013cbc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	f003 0304 	and.w	r3, r3, #4
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d008      	beq.n	8013cfe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013cec:	4b1a      	ldr	r3, [pc, #104]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013cee:	689b      	ldr	r3, [r3, #8]
 8013cf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	68db      	ldr	r3, [r3, #12]
 8013cf8:	4917      	ldr	r1, [pc, #92]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013cfa:	4313      	orrs	r3, r2
 8013cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	f003 0308 	and.w	r3, r3, #8
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d009      	beq.n	8013d1e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013d0a:	4b13      	ldr	r3, [pc, #76]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013d0c:	689b      	ldr	r3, [r3, #8]
 8013d0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	691b      	ldr	r3, [r3, #16]
 8013d16:	00db      	lsls	r3, r3, #3
 8013d18:	490f      	ldr	r1, [pc, #60]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013d1a:	4313      	orrs	r3, r2
 8013d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8013d1e:	f000 f825 	bl	8013d6c <HAL_RCC_GetSysClockFreq>
 8013d22:	4602      	mov	r2, r0
 8013d24:	4b0c      	ldr	r3, [pc, #48]	; (8013d58 <HAL_RCC_ClockConfig+0x264>)
 8013d26:	689b      	ldr	r3, [r3, #8]
 8013d28:	091b      	lsrs	r3, r3, #4
 8013d2a:	f003 030f 	and.w	r3, r3, #15
 8013d2e:	490c      	ldr	r1, [pc, #48]	; (8013d60 <HAL_RCC_ClockConfig+0x26c>)
 8013d30:	5ccb      	ldrb	r3, [r1, r3]
 8013d32:	f003 031f 	and.w	r3, r3, #31
 8013d36:	fa22 f303 	lsr.w	r3, r2, r3
 8013d3a:	4a0a      	ldr	r2, [pc, #40]	; (8013d64 <HAL_RCC_ClockConfig+0x270>)
 8013d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8013d3e:	4b0a      	ldr	r3, [pc, #40]	; (8013d68 <HAL_RCC_ClockConfig+0x274>)
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	4618      	mov	r0, r3
 8013d44:	f7fc fb46 	bl	80103d4 <HAL_InitTick>
 8013d48:	4603      	mov	r3, r0
}
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	3718      	adds	r7, #24
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	bd80      	pop	{r7, pc}
 8013d52:	bf00      	nop
 8013d54:	40022000 	.word	0x40022000
 8013d58:	40021000 	.word	0x40021000
 8013d5c:	04c4b400 	.word	0x04c4b400
 8013d60:	0801a604 	.word	0x0801a604
 8013d64:	20000000 	.word	0x20000000
 8013d68:	20000004 	.word	0x20000004

08013d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013d6c:	b480      	push	{r7}
 8013d6e:	b087      	sub	sp, #28
 8013d70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8013d72:	4b2c      	ldr	r3, [pc, #176]	; (8013e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013d74:	689b      	ldr	r3, [r3, #8]
 8013d76:	f003 030c 	and.w	r3, r3, #12
 8013d7a:	2b04      	cmp	r3, #4
 8013d7c:	d102      	bne.n	8013d84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8013d7e:	4b2a      	ldr	r3, [pc, #168]	; (8013e28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8013d80:	613b      	str	r3, [r7, #16]
 8013d82:	e047      	b.n	8013e14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8013d84:	4b27      	ldr	r3, [pc, #156]	; (8013e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013d86:	689b      	ldr	r3, [r3, #8]
 8013d88:	f003 030c 	and.w	r3, r3, #12
 8013d8c:	2b08      	cmp	r3, #8
 8013d8e:	d102      	bne.n	8013d96 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8013d90:	4b25      	ldr	r3, [pc, #148]	; (8013e28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8013d92:	613b      	str	r3, [r7, #16]
 8013d94:	e03e      	b.n	8013e14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8013d96:	4b23      	ldr	r3, [pc, #140]	; (8013e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013d98:	689b      	ldr	r3, [r3, #8]
 8013d9a:	f003 030c 	and.w	r3, r3, #12
 8013d9e:	2b0c      	cmp	r3, #12
 8013da0:	d136      	bne.n	8013e10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8013da2:	4b20      	ldr	r3, [pc, #128]	; (8013e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013da4:	68db      	ldr	r3, [r3, #12]
 8013da6:	f003 0303 	and.w	r3, r3, #3
 8013daa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8013dac:	4b1d      	ldr	r3, [pc, #116]	; (8013e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013dae:	68db      	ldr	r3, [r3, #12]
 8013db0:	091b      	lsrs	r3, r3, #4
 8013db2:	f003 030f 	and.w	r3, r3, #15
 8013db6:	3301      	adds	r3, #1
 8013db8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	2b03      	cmp	r3, #3
 8013dbe:	d10c      	bne.n	8013dda <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8013dc0:	4a19      	ldr	r2, [pc, #100]	; (8013e28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8013dc8:	4a16      	ldr	r2, [pc, #88]	; (8013e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013dca:	68d2      	ldr	r2, [r2, #12]
 8013dcc:	0a12      	lsrs	r2, r2, #8
 8013dce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013dd2:	fb02 f303 	mul.w	r3, r2, r3
 8013dd6:	617b      	str	r3, [r7, #20]
      break;
 8013dd8:	e00c      	b.n	8013df4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8013dda:	4a13      	ldr	r2, [pc, #76]	; (8013e28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8013ddc:	68bb      	ldr	r3, [r7, #8]
 8013dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8013de2:	4a10      	ldr	r2, [pc, #64]	; (8013e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013de4:	68d2      	ldr	r2, [r2, #12]
 8013de6:	0a12      	lsrs	r2, r2, #8
 8013de8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013dec:	fb02 f303 	mul.w	r3, r2, r3
 8013df0:	617b      	str	r3, [r7, #20]
      break;
 8013df2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8013df4:	4b0b      	ldr	r3, [pc, #44]	; (8013e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013df6:	68db      	ldr	r3, [r3, #12]
 8013df8:	0e5b      	lsrs	r3, r3, #25
 8013dfa:	f003 0303 	and.w	r3, r3, #3
 8013dfe:	3301      	adds	r3, #1
 8013e00:	005b      	lsls	r3, r3, #1
 8013e02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8013e04:	697a      	ldr	r2, [r7, #20]
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e0c:	613b      	str	r3, [r7, #16]
 8013e0e:	e001      	b.n	8013e14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8013e10:	2300      	movs	r3, #0
 8013e12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8013e14:	693b      	ldr	r3, [r7, #16]
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	371c      	adds	r7, #28
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e20:	4770      	bx	lr
 8013e22:	bf00      	nop
 8013e24:	40021000 	.word	0x40021000
 8013e28:	00f42400 	.word	0x00f42400

08013e2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013e2c:	b480      	push	{r7}
 8013e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013e30:	4b03      	ldr	r3, [pc, #12]	; (8013e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8013e32:	681b      	ldr	r3, [r3, #0]
}
 8013e34:	4618      	mov	r0, r3
 8013e36:	46bd      	mov	sp, r7
 8013e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3c:	4770      	bx	lr
 8013e3e:	bf00      	nop
 8013e40:	20000000 	.word	0x20000000

08013e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8013e48:	f7ff fff0 	bl	8013e2c <HAL_RCC_GetHCLKFreq>
 8013e4c:	4602      	mov	r2, r0
 8013e4e:	4b06      	ldr	r3, [pc, #24]	; (8013e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013e50:	689b      	ldr	r3, [r3, #8]
 8013e52:	0a1b      	lsrs	r3, r3, #8
 8013e54:	f003 0307 	and.w	r3, r3, #7
 8013e58:	4904      	ldr	r1, [pc, #16]	; (8013e6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8013e5a:	5ccb      	ldrb	r3, [r1, r3]
 8013e5c:	f003 031f 	and.w	r3, r3, #31
 8013e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013e64:	4618      	mov	r0, r3
 8013e66:	bd80      	pop	{r7, pc}
 8013e68:	40021000 	.word	0x40021000
 8013e6c:	0801a614 	.word	0x0801a614

08013e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8013e74:	f7ff ffda 	bl	8013e2c <HAL_RCC_GetHCLKFreq>
 8013e78:	4602      	mov	r2, r0
 8013e7a:	4b06      	ldr	r3, [pc, #24]	; (8013e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013e7c:	689b      	ldr	r3, [r3, #8]
 8013e7e:	0adb      	lsrs	r3, r3, #11
 8013e80:	f003 0307 	and.w	r3, r3, #7
 8013e84:	4904      	ldr	r1, [pc, #16]	; (8013e98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8013e86:	5ccb      	ldrb	r3, [r1, r3]
 8013e88:	f003 031f 	and.w	r3, r3, #31
 8013e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013e90:	4618      	mov	r0, r3
 8013e92:	bd80      	pop	{r7, pc}
 8013e94:	40021000 	.word	0x40021000
 8013e98:	0801a614 	.word	0x0801a614

08013e9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8013e9c:	b480      	push	{r7}
 8013e9e:	b087      	sub	sp, #28
 8013ea0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8013ea2:	4b1e      	ldr	r3, [pc, #120]	; (8013f1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8013ea4:	68db      	ldr	r3, [r3, #12]
 8013ea6:	f003 0303 	and.w	r3, r3, #3
 8013eaa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8013eac:	4b1b      	ldr	r3, [pc, #108]	; (8013f1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8013eae:	68db      	ldr	r3, [r3, #12]
 8013eb0:	091b      	lsrs	r3, r3, #4
 8013eb2:	f003 030f 	and.w	r3, r3, #15
 8013eb6:	3301      	adds	r3, #1
 8013eb8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8013eba:	693b      	ldr	r3, [r7, #16]
 8013ebc:	2b03      	cmp	r3, #3
 8013ebe:	d10c      	bne.n	8013eda <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8013ec0:	4a17      	ldr	r2, [pc, #92]	; (8013f20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ec8:	4a14      	ldr	r2, [pc, #80]	; (8013f1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8013eca:	68d2      	ldr	r2, [r2, #12]
 8013ecc:	0a12      	lsrs	r2, r2, #8
 8013ece:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013ed2:	fb02 f303 	mul.w	r3, r2, r3
 8013ed6:	617b      	str	r3, [r7, #20]
    break;
 8013ed8:	e00c      	b.n	8013ef4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8013eda:	4a11      	ldr	r2, [pc, #68]	; (8013f20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ee2:	4a0e      	ldr	r2, [pc, #56]	; (8013f1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8013ee4:	68d2      	ldr	r2, [r2, #12]
 8013ee6:	0a12      	lsrs	r2, r2, #8
 8013ee8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013eec:	fb02 f303 	mul.w	r3, r2, r3
 8013ef0:	617b      	str	r3, [r7, #20]
    break;
 8013ef2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8013ef4:	4b09      	ldr	r3, [pc, #36]	; (8013f1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8013ef6:	68db      	ldr	r3, [r3, #12]
 8013ef8:	0e5b      	lsrs	r3, r3, #25
 8013efa:	f003 0303 	and.w	r3, r3, #3
 8013efe:	3301      	adds	r3, #1
 8013f00:	005b      	lsls	r3, r3, #1
 8013f02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8013f04:	697a      	ldr	r2, [r7, #20]
 8013f06:	68bb      	ldr	r3, [r7, #8]
 8013f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8013f0e:	687b      	ldr	r3, [r7, #4]
}
 8013f10:	4618      	mov	r0, r3
 8013f12:	371c      	adds	r7, #28
 8013f14:	46bd      	mov	sp, r7
 8013f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1a:	4770      	bx	lr
 8013f1c:	40021000 	.word	0x40021000
 8013f20:	00f42400 	.word	0x00f42400

08013f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b086      	sub	sp, #24
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8013f30:	2300      	movs	r3, #0
 8013f32:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	f000 8098 	beq.w	8014072 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013f42:	2300      	movs	r3, #0
 8013f44:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013f46:	4b43      	ldr	r3, [pc, #268]	; (8014054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d10d      	bne.n	8013f6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013f52:	4b40      	ldr	r3, [pc, #256]	; (8014054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f56:	4a3f      	ldr	r2, [pc, #252]	; (8014054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8013f5e:	4b3d      	ldr	r3, [pc, #244]	; (8014054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013f66:	60bb      	str	r3, [r7, #8]
 8013f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013f6a:	2301      	movs	r3, #1
 8013f6c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013f6e:	4b3a      	ldr	r3, [pc, #232]	; (8014058 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	4a39      	ldr	r2, [pc, #228]	; (8014058 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8013f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013f78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8013f7a:	f7fc fa77 	bl	801046c <HAL_GetTick>
 8013f7e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013f80:	e009      	b.n	8013f96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013f82:	f7fc fa73 	bl	801046c <HAL_GetTick>
 8013f86:	4602      	mov	r2, r0
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	1ad3      	subs	r3, r2, r3
 8013f8c:	2b02      	cmp	r3, #2
 8013f8e:	d902      	bls.n	8013f96 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8013f90:	2303      	movs	r3, #3
 8013f92:	74fb      	strb	r3, [r7, #19]
        break;
 8013f94:	e005      	b.n	8013fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013f96:	4b30      	ldr	r3, [pc, #192]	; (8014058 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d0ef      	beq.n	8013f82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8013fa2:	7cfb      	ldrb	r3, [r7, #19]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d159      	bne.n	801405c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8013fa8:	4b2a      	ldr	r3, [pc, #168]	; (8014054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013fb2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8013fb4:	697b      	ldr	r3, [r7, #20]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d01e      	beq.n	8013ff8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013fbe:	697a      	ldr	r2, [r7, #20]
 8013fc0:	429a      	cmp	r2, r3
 8013fc2:	d019      	beq.n	8013ff8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8013fc4:	4b23      	ldr	r3, [pc, #140]	; (8014054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013fce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8013fd0:	4b20      	ldr	r3, [pc, #128]	; (8014054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013fd6:	4a1f      	ldr	r2, [pc, #124]	; (8014054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8013fe0:	4b1c      	ldr	r3, [pc, #112]	; (8014054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013fe6:	4a1b      	ldr	r2, [pc, #108]	; (8014054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8013ff0:	4a18      	ldr	r2, [pc, #96]	; (8014054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013ff2:	697b      	ldr	r3, [r7, #20]
 8013ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8013ff8:	697b      	ldr	r3, [r7, #20]
 8013ffa:	f003 0301 	and.w	r3, r3, #1
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d016      	beq.n	8014030 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014002:	f7fc fa33 	bl	801046c <HAL_GetTick>
 8014006:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014008:	e00b      	b.n	8014022 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801400a:	f7fc fa2f 	bl	801046c <HAL_GetTick>
 801400e:	4602      	mov	r2, r0
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	1ad3      	subs	r3, r2, r3
 8014014:	f241 3288 	movw	r2, #5000	; 0x1388
 8014018:	4293      	cmp	r3, r2
 801401a:	d902      	bls.n	8014022 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 801401c:	2303      	movs	r3, #3
 801401e:	74fb      	strb	r3, [r7, #19]
            break;
 8014020:	e006      	b.n	8014030 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014022:	4b0c      	ldr	r3, [pc, #48]	; (8014054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8014024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014028:	f003 0302 	and.w	r3, r3, #2
 801402c:	2b00      	cmp	r3, #0
 801402e:	d0ec      	beq.n	801400a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8014030:	7cfb      	ldrb	r3, [r7, #19]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d10b      	bne.n	801404e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8014036:	4b07      	ldr	r3, [pc, #28]	; (8014054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8014038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801403c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014044:	4903      	ldr	r1, [pc, #12]	; (8014054 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8014046:	4313      	orrs	r3, r2
 8014048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801404c:	e008      	b.n	8014060 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801404e:	7cfb      	ldrb	r3, [r7, #19]
 8014050:	74bb      	strb	r3, [r7, #18]
 8014052:	e005      	b.n	8014060 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8014054:	40021000 	.word	0x40021000
 8014058:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801405c:	7cfb      	ldrb	r3, [r7, #19]
 801405e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8014060:	7c7b      	ldrb	r3, [r7, #17]
 8014062:	2b01      	cmp	r3, #1
 8014064:	d105      	bne.n	8014072 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014066:	4ba7      	ldr	r3, [pc, #668]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801406a:	4aa6      	ldr	r2, [pc, #664]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801406c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014070:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	f003 0301 	and.w	r3, r3, #1
 801407a:	2b00      	cmp	r3, #0
 801407c:	d00a      	beq.n	8014094 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801407e:	4ba1      	ldr	r3, [pc, #644]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014084:	f023 0203 	bic.w	r2, r3, #3
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	685b      	ldr	r3, [r3, #4]
 801408c:	499d      	ldr	r1, [pc, #628]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801408e:	4313      	orrs	r3, r2
 8014090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	f003 0302 	and.w	r3, r3, #2
 801409c:	2b00      	cmp	r3, #0
 801409e:	d00a      	beq.n	80140b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80140a0:	4b98      	ldr	r3, [pc, #608]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80140a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80140a6:	f023 020c 	bic.w	r2, r3, #12
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	689b      	ldr	r3, [r3, #8]
 80140ae:	4995      	ldr	r1, [pc, #596]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80140b0:	4313      	orrs	r3, r2
 80140b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	f003 0304 	and.w	r3, r3, #4
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d00a      	beq.n	80140d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80140c2:	4b90      	ldr	r3, [pc, #576]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80140c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80140c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	68db      	ldr	r3, [r3, #12]
 80140d0:	498c      	ldr	r1, [pc, #560]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80140d2:	4313      	orrs	r3, r2
 80140d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	f003 0308 	and.w	r3, r3, #8
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d00a      	beq.n	80140fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80140e4:	4b87      	ldr	r3, [pc, #540]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80140e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80140ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	691b      	ldr	r3, [r3, #16]
 80140f2:	4984      	ldr	r1, [pc, #528]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80140f4:	4313      	orrs	r3, r2
 80140f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	f003 0310 	and.w	r3, r3, #16
 8014102:	2b00      	cmp	r3, #0
 8014104:	d00a      	beq.n	801411c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8014106:	4b7f      	ldr	r3, [pc, #508]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801410c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	695b      	ldr	r3, [r3, #20]
 8014114:	497b      	ldr	r1, [pc, #492]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014116:	4313      	orrs	r3, r2
 8014118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	f003 0320 	and.w	r3, r3, #32
 8014124:	2b00      	cmp	r3, #0
 8014126:	d00a      	beq.n	801413e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8014128:	4b76      	ldr	r3, [pc, #472]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801412e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	699b      	ldr	r3, [r3, #24]
 8014136:	4973      	ldr	r1, [pc, #460]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014138:	4313      	orrs	r3, r2
 801413a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014146:	2b00      	cmp	r3, #0
 8014148:	d00a      	beq.n	8014160 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801414a:	4b6e      	ldr	r3, [pc, #440]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014150:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	69db      	ldr	r3, [r3, #28]
 8014158:	496a      	ldr	r1, [pc, #424]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801415a:	4313      	orrs	r3, r2
 801415c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014168:	2b00      	cmp	r3, #0
 801416a:	d00a      	beq.n	8014182 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801416c:	4b65      	ldr	r3, [pc, #404]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014172:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	6a1b      	ldr	r3, [r3, #32]
 801417a:	4962      	ldr	r1, [pc, #392]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801417c:	4313      	orrs	r3, r2
 801417e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801418a:	2b00      	cmp	r3, #0
 801418c:	d00a      	beq.n	80141a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801418e:	4b5d      	ldr	r3, [pc, #372]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014194:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801419c:	4959      	ldr	r1, [pc, #356]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801419e:	4313      	orrs	r3, r2
 80141a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d00a      	beq.n	80141c6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80141b0:	4b54      	ldr	r3, [pc, #336]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80141b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80141b6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141be:	4951      	ldr	r1, [pc, #324]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80141c0:	4313      	orrs	r3, r2
 80141c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d015      	beq.n	80141fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80141d2:	4b4c      	ldr	r3, [pc, #304]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80141d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80141d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141e0:	4948      	ldr	r1, [pc, #288]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80141e2:	4313      	orrs	r3, r2
 80141e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80141f0:	d105      	bne.n	80141fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80141f2:	4b44      	ldr	r3, [pc, #272]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80141f4:	68db      	ldr	r3, [r3, #12]
 80141f6:	4a43      	ldr	r2, [pc, #268]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80141f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80141fc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014206:	2b00      	cmp	r3, #0
 8014208:	d015      	beq.n	8014236 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801420a:	4b3e      	ldr	r3, [pc, #248]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014210:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014218:	493a      	ldr	r1, [pc, #232]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801421a:	4313      	orrs	r3, r2
 801421c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014224:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014228:	d105      	bne.n	8014236 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801422a:	4b36      	ldr	r3, [pc, #216]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801422c:	68db      	ldr	r3, [r3, #12]
 801422e:	4a35      	ldr	r2, [pc, #212]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014234:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801423e:	2b00      	cmp	r3, #0
 8014240:	d015      	beq.n	801426e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8014242:	4b30      	ldr	r3, [pc, #192]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014248:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014250:	492c      	ldr	r1, [pc, #176]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014252:	4313      	orrs	r3, r2
 8014254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801425c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8014260:	d105      	bne.n	801426e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8014262:	4b28      	ldr	r3, [pc, #160]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014264:	68db      	ldr	r3, [r3, #12]
 8014266:	4a27      	ldr	r2, [pc, #156]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8014268:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801426c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014276:	2b00      	cmp	r3, #0
 8014278:	d015      	beq.n	80142a6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801427a:	4b22      	ldr	r3, [pc, #136]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801427c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014280:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014288:	491e      	ldr	r1, [pc, #120]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801428a:	4313      	orrs	r3, r2
 801428c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8014298:	d105      	bne.n	80142a6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801429a:	4b1a      	ldr	r3, [pc, #104]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801429c:	68db      	ldr	r3, [r3, #12]
 801429e:	4a19      	ldr	r2, [pc, #100]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80142a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80142a4:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d015      	beq.n	80142de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80142b2:	4b14      	ldr	r3, [pc, #80]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80142b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80142b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80142c0:	4910      	ldr	r1, [pc, #64]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80142c2:	4313      	orrs	r3, r2
 80142c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80142cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80142d0:	d105      	bne.n	80142de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80142d2:	4b0c      	ldr	r3, [pc, #48]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80142d4:	68db      	ldr	r3, [r3, #12]
 80142d6:	4a0b      	ldr	r2, [pc, #44]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80142d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80142dc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d018      	beq.n	801431c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80142ea:	4b06      	ldr	r3, [pc, #24]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80142ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80142f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142f8:	4902      	ldr	r1, [pc, #8]	; (8014304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80142fa:	4313      	orrs	r3, r2
 80142fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	e001      	b.n	8014308 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8014304:	40021000 	.word	0x40021000
 8014308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801430a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801430e:	d105      	bne.n	801431c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8014310:	4b21      	ldr	r3, [pc, #132]	; (8014398 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8014312:	68db      	ldr	r3, [r3, #12]
 8014314:	4a20      	ldr	r2, [pc, #128]	; (8014398 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8014316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801431a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014324:	2b00      	cmp	r3, #0
 8014326:	d015      	beq.n	8014354 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8014328:	4b1b      	ldr	r3, [pc, #108]	; (8014398 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801432e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014336:	4918      	ldr	r1, [pc, #96]	; (8014398 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8014338:	4313      	orrs	r3, r2
 801433a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014346:	d105      	bne.n	8014354 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8014348:	4b13      	ldr	r3, [pc, #76]	; (8014398 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801434a:	68db      	ldr	r3, [r3, #12]
 801434c:	4a12      	ldr	r2, [pc, #72]	; (8014398 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801434e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014352:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801435c:	2b00      	cmp	r3, #0
 801435e:	d015      	beq.n	801438c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8014360:	4b0d      	ldr	r3, [pc, #52]	; (8014398 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8014362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014366:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801436e:	490a      	ldr	r1, [pc, #40]	; (8014398 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8014370:	4313      	orrs	r3, r2
 8014372:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801437a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801437e:	d105      	bne.n	801438c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8014380:	4b05      	ldr	r3, [pc, #20]	; (8014398 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8014382:	68db      	ldr	r3, [r3, #12]
 8014384:	4a04      	ldr	r2, [pc, #16]	; (8014398 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8014386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801438a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 801438c:	7cbb      	ldrb	r3, [r7, #18]
}
 801438e:	4618      	mov	r0, r3
 8014390:	3718      	adds	r7, #24
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}
 8014396:	bf00      	nop
 8014398:	40021000 	.word	0x40021000

0801439c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b084      	sub	sp, #16
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d101      	bne.n	80143ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80143aa:	2301      	movs	r3, #1
 80143ac:	e09d      	b.n	80144ea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d108      	bne.n	80143c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	685b      	ldr	r3, [r3, #4]
 80143ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80143be:	d009      	beq.n	80143d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	2200      	movs	r2, #0
 80143c4:	61da      	str	r2, [r3, #28]
 80143c6:	e005      	b.n	80143d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	2200      	movs	r2, #0
 80143cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	2200      	movs	r2, #0
 80143d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2200      	movs	r2, #0
 80143d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80143e0:	b2db      	uxtb	r3, r3
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d106      	bne.n	80143f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	2200      	movs	r2, #0
 80143ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80143ee:	6878      	ldr	r0, [r7, #4]
 80143f0:	f7fa fe2e 	bl	800f050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	2202      	movs	r2, #2
 80143f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	681a      	ldr	r2, [r3, #0]
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801440a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	68db      	ldr	r3, [r3, #12]
 8014410:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014414:	d902      	bls.n	801441c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8014416:	2300      	movs	r3, #0
 8014418:	60fb      	str	r3, [r7, #12]
 801441a:	e002      	b.n	8014422 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801441c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014420:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	68db      	ldr	r3, [r3, #12]
 8014426:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801442a:	d007      	beq.n	801443c <HAL_SPI_Init+0xa0>
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	68db      	ldr	r3, [r3, #12]
 8014430:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014434:	d002      	beq.n	801443c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	2200      	movs	r2, #0
 801443a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	685b      	ldr	r3, [r3, #4]
 8014440:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	689b      	ldr	r3, [r3, #8]
 8014448:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801444c:	431a      	orrs	r2, r3
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	691b      	ldr	r3, [r3, #16]
 8014452:	f003 0302 	and.w	r3, r3, #2
 8014456:	431a      	orrs	r2, r3
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	695b      	ldr	r3, [r3, #20]
 801445c:	f003 0301 	and.w	r3, r3, #1
 8014460:	431a      	orrs	r2, r3
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	699b      	ldr	r3, [r3, #24]
 8014466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801446a:	431a      	orrs	r2, r3
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	69db      	ldr	r3, [r3, #28]
 8014470:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014474:	431a      	orrs	r2, r3
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	6a1b      	ldr	r3, [r3, #32]
 801447a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801447e:	ea42 0103 	orr.w	r1, r2, r3
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014486:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	430a      	orrs	r2, r1
 8014490:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	699b      	ldr	r3, [r3, #24]
 8014496:	0c1b      	lsrs	r3, r3, #16
 8014498:	f003 0204 	and.w	r2, r3, #4
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144a0:	f003 0310 	and.w	r3, r3, #16
 80144a4:	431a      	orrs	r2, r3
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144aa:	f003 0308 	and.w	r3, r3, #8
 80144ae:	431a      	orrs	r2, r3
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	68db      	ldr	r3, [r3, #12]
 80144b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80144b8:	ea42 0103 	orr.w	r1, r2, r3
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	430a      	orrs	r2, r1
 80144c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	69da      	ldr	r2, [r3, #28]
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80144d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	2200      	movs	r2, #0
 80144de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	2201      	movs	r2, #1
 80144e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80144e8:	2300      	movs	r3, #0
}
 80144ea:	4618      	mov	r0, r3
 80144ec:	3710      	adds	r7, #16
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bd80      	pop	{r7, pc}

080144f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80144f2:	b580      	push	{r7, lr}
 80144f4:	b088      	sub	sp, #32
 80144f6:	af00      	add	r7, sp, #0
 80144f8:	60f8      	str	r0, [r7, #12]
 80144fa:	60b9      	str	r1, [r7, #8]
 80144fc:	603b      	str	r3, [r7, #0]
 80144fe:	4613      	mov	r3, r2
 8014500:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014502:	2300      	movs	r3, #0
 8014504:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801450c:	2b01      	cmp	r3, #1
 801450e:	d101      	bne.n	8014514 <HAL_SPI_Transmit+0x22>
 8014510:	2302      	movs	r3, #2
 8014512:	e158      	b.n	80147c6 <HAL_SPI_Transmit+0x2d4>
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	2201      	movs	r2, #1
 8014518:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801451c:	f7fb ffa6 	bl	801046c <HAL_GetTick>
 8014520:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8014522:	88fb      	ldrh	r3, [r7, #6]
 8014524:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801452c:	b2db      	uxtb	r3, r3
 801452e:	2b01      	cmp	r3, #1
 8014530:	d002      	beq.n	8014538 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8014532:	2302      	movs	r3, #2
 8014534:	77fb      	strb	r3, [r7, #31]
    goto error;
 8014536:	e13d      	b.n	80147b4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d002      	beq.n	8014544 <HAL_SPI_Transmit+0x52>
 801453e:	88fb      	ldrh	r3, [r7, #6]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d102      	bne.n	801454a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8014544:	2301      	movs	r3, #1
 8014546:	77fb      	strb	r3, [r7, #31]
    goto error;
 8014548:	e134      	b.n	80147b4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	2203      	movs	r2, #3
 801454e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	2200      	movs	r2, #0
 8014556:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	68ba      	ldr	r2, [r7, #8]
 801455c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	88fa      	ldrh	r2, [r7, #6]
 8014562:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	88fa      	ldrh	r2, [r7, #6]
 8014568:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	2200      	movs	r2, #0
 801456e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	2200      	movs	r2, #0
 8014574:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	2200      	movs	r2, #0
 801457c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	2200      	movs	r2, #0
 8014584:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	2200      	movs	r2, #0
 801458a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	689b      	ldr	r3, [r3, #8]
 8014590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014594:	d10f      	bne.n	80145b6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	681a      	ldr	r2, [r3, #0]
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80145a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	681a      	ldr	r2, [r3, #0]
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80145b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80145c0:	2b40      	cmp	r3, #64	; 0x40
 80145c2:	d007      	beq.n	80145d4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	681a      	ldr	r2, [r3, #0]
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80145d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	68db      	ldr	r3, [r3, #12]
 80145d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80145dc:	d94b      	bls.n	8014676 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	685b      	ldr	r3, [r3, #4]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d002      	beq.n	80145ec <HAL_SPI_Transmit+0xfa>
 80145e6:	8afb      	ldrh	r3, [r7, #22]
 80145e8:	2b01      	cmp	r3, #1
 80145ea:	d13e      	bne.n	801466a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145f0:	881a      	ldrh	r2, [r3, #0]
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145fc:	1c9a      	adds	r2, r3, #2
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014606:	b29b      	uxth	r3, r3
 8014608:	3b01      	subs	r3, #1
 801460a:	b29a      	uxth	r2, r3
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8014610:	e02b      	b.n	801466a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	689b      	ldr	r3, [r3, #8]
 8014618:	f003 0302 	and.w	r3, r3, #2
 801461c:	2b02      	cmp	r3, #2
 801461e:	d112      	bne.n	8014646 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014624:	881a      	ldrh	r2, [r3, #0]
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014630:	1c9a      	adds	r2, r3, #2
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801463a:	b29b      	uxth	r3, r3
 801463c:	3b01      	subs	r3, #1
 801463e:	b29a      	uxth	r2, r3
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014644:	e011      	b.n	801466a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014646:	f7fb ff11 	bl	801046c <HAL_GetTick>
 801464a:	4602      	mov	r2, r0
 801464c:	69bb      	ldr	r3, [r7, #24]
 801464e:	1ad3      	subs	r3, r2, r3
 8014650:	683a      	ldr	r2, [r7, #0]
 8014652:	429a      	cmp	r2, r3
 8014654:	d803      	bhi.n	801465e <HAL_SPI_Transmit+0x16c>
 8014656:	683b      	ldr	r3, [r7, #0]
 8014658:	f1b3 3fff 	cmp.w	r3, #4294967295
 801465c:	d102      	bne.n	8014664 <HAL_SPI_Transmit+0x172>
 801465e:	683b      	ldr	r3, [r7, #0]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d102      	bne.n	801466a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8014664:	2303      	movs	r3, #3
 8014666:	77fb      	strb	r3, [r7, #31]
          goto error;
 8014668:	e0a4      	b.n	80147b4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801466e:	b29b      	uxth	r3, r3
 8014670:	2b00      	cmp	r3, #0
 8014672:	d1ce      	bne.n	8014612 <HAL_SPI_Transmit+0x120>
 8014674:	e07c      	b.n	8014770 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	685b      	ldr	r3, [r3, #4]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d002      	beq.n	8014684 <HAL_SPI_Transmit+0x192>
 801467e:	8afb      	ldrh	r3, [r7, #22]
 8014680:	2b01      	cmp	r3, #1
 8014682:	d170      	bne.n	8014766 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014688:	b29b      	uxth	r3, r3
 801468a:	2b01      	cmp	r3, #1
 801468c:	d912      	bls.n	80146b4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014692:	881a      	ldrh	r2, [r3, #0]
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801469e:	1c9a      	adds	r2, r3, #2
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80146a8:	b29b      	uxth	r3, r3
 80146aa:	3b02      	subs	r3, #2
 80146ac:	b29a      	uxth	r2, r3
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80146b2:	e058      	b.n	8014766 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	330c      	adds	r3, #12
 80146be:	7812      	ldrb	r2, [r2, #0]
 80146c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146c6:	1c5a      	adds	r2, r3, #1
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80146d0:	b29b      	uxth	r3, r3
 80146d2:	3b01      	subs	r3, #1
 80146d4:	b29a      	uxth	r2, r3
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80146da:	e044      	b.n	8014766 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	689b      	ldr	r3, [r3, #8]
 80146e2:	f003 0302 	and.w	r3, r3, #2
 80146e6:	2b02      	cmp	r3, #2
 80146e8:	d12b      	bne.n	8014742 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80146ee:	b29b      	uxth	r3, r3
 80146f0:	2b01      	cmp	r3, #1
 80146f2:	d912      	bls.n	801471a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146f8:	881a      	ldrh	r2, [r3, #0]
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014704:	1c9a      	adds	r2, r3, #2
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801470e:	b29b      	uxth	r3, r3
 8014710:	3b02      	subs	r3, #2
 8014712:	b29a      	uxth	r2, r3
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014718:	e025      	b.n	8014766 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	330c      	adds	r3, #12
 8014724:	7812      	ldrb	r2, [r2, #0]
 8014726:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801472c:	1c5a      	adds	r2, r3, #1
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014736:	b29b      	uxth	r3, r3
 8014738:	3b01      	subs	r3, #1
 801473a:	b29a      	uxth	r2, r3
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014740:	e011      	b.n	8014766 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014742:	f7fb fe93 	bl	801046c <HAL_GetTick>
 8014746:	4602      	mov	r2, r0
 8014748:	69bb      	ldr	r3, [r7, #24]
 801474a:	1ad3      	subs	r3, r2, r3
 801474c:	683a      	ldr	r2, [r7, #0]
 801474e:	429a      	cmp	r2, r3
 8014750:	d803      	bhi.n	801475a <HAL_SPI_Transmit+0x268>
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014758:	d102      	bne.n	8014760 <HAL_SPI_Transmit+0x26e>
 801475a:	683b      	ldr	r3, [r7, #0]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d102      	bne.n	8014766 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8014760:	2303      	movs	r3, #3
 8014762:	77fb      	strb	r3, [r7, #31]
          goto error;
 8014764:	e026      	b.n	80147b4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801476a:	b29b      	uxth	r3, r3
 801476c:	2b00      	cmp	r3, #0
 801476e:	d1b5      	bne.n	80146dc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014770:	69ba      	ldr	r2, [r7, #24]
 8014772:	6839      	ldr	r1, [r7, #0]
 8014774:	68f8      	ldr	r0, [r7, #12]
 8014776:	f000 fce3 	bl	8015140 <SPI_EndRxTxTransaction>
 801477a:	4603      	mov	r3, r0
 801477c:	2b00      	cmp	r3, #0
 801477e:	d002      	beq.n	8014786 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	2220      	movs	r2, #32
 8014784:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	689b      	ldr	r3, [r3, #8]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d10a      	bne.n	80147a4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801478e:	2300      	movs	r3, #0
 8014790:	613b      	str	r3, [r7, #16]
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	68db      	ldr	r3, [r3, #12]
 8014798:	613b      	str	r3, [r7, #16]
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	689b      	ldr	r3, [r3, #8]
 80147a0:	613b      	str	r3, [r7, #16]
 80147a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d002      	beq.n	80147b2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80147ac:	2301      	movs	r3, #1
 80147ae:	77fb      	strb	r3, [r7, #31]
 80147b0:	e000      	b.n	80147b4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80147b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	2201      	movs	r2, #1
 80147b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	2200      	movs	r2, #0
 80147c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80147c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80147c6:	4618      	mov	r0, r3
 80147c8:	3720      	adds	r7, #32
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}

080147ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80147ce:	b580      	push	{r7, lr}
 80147d0:	b088      	sub	sp, #32
 80147d2:	af02      	add	r7, sp, #8
 80147d4:	60f8      	str	r0, [r7, #12]
 80147d6:	60b9      	str	r1, [r7, #8]
 80147d8:	603b      	str	r3, [r7, #0]
 80147da:	4613      	mov	r3, r2
 80147dc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80147de:	2300      	movs	r3, #0
 80147e0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	685b      	ldr	r3, [r3, #4]
 80147e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80147ea:	d112      	bne.n	8014812 <HAL_SPI_Receive+0x44>
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	689b      	ldr	r3, [r3, #8]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d10e      	bne.n	8014812 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	2204      	movs	r2, #4
 80147f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80147fc:	88fa      	ldrh	r2, [r7, #6]
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	9300      	str	r3, [sp, #0]
 8014802:	4613      	mov	r3, r2
 8014804:	68ba      	ldr	r2, [r7, #8]
 8014806:	68b9      	ldr	r1, [r7, #8]
 8014808:	68f8      	ldr	r0, [r7, #12]
 801480a:	f000 f910 	bl	8014a2e <HAL_SPI_TransmitReceive>
 801480e:	4603      	mov	r3, r0
 8014810:	e109      	b.n	8014a26 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8014818:	2b01      	cmp	r3, #1
 801481a:	d101      	bne.n	8014820 <HAL_SPI_Receive+0x52>
 801481c:	2302      	movs	r3, #2
 801481e:	e102      	b.n	8014a26 <HAL_SPI_Receive+0x258>
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	2201      	movs	r2, #1
 8014824:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014828:	f7fb fe20 	bl	801046c <HAL_GetTick>
 801482c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014834:	b2db      	uxtb	r3, r3
 8014836:	2b01      	cmp	r3, #1
 8014838:	d002      	beq.n	8014840 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801483a:	2302      	movs	r3, #2
 801483c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801483e:	e0e9      	b.n	8014a14 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8014840:	68bb      	ldr	r3, [r7, #8]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d002      	beq.n	801484c <HAL_SPI_Receive+0x7e>
 8014846:	88fb      	ldrh	r3, [r7, #6]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d102      	bne.n	8014852 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801484c:	2301      	movs	r3, #1
 801484e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8014850:	e0e0      	b.n	8014a14 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	2204      	movs	r2, #4
 8014856:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	2200      	movs	r2, #0
 801485e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	68ba      	ldr	r2, [r7, #8]
 8014864:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	88fa      	ldrh	r2, [r7, #6]
 801486a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	88fa      	ldrh	r2, [r7, #6]
 8014872:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	2200      	movs	r2, #0
 801487a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	2200      	movs	r2, #0
 8014880:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	2200      	movs	r2, #0
 8014886:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	2200      	movs	r2, #0
 801488c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	2200      	movs	r2, #0
 8014892:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	68db      	ldr	r3, [r3, #12]
 8014898:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801489c:	d908      	bls.n	80148b0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	685a      	ldr	r2, [r3, #4]
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80148ac:	605a      	str	r2, [r3, #4]
 80148ae:	e007      	b.n	80148c0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	685a      	ldr	r2, [r3, #4]
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80148be:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	689b      	ldr	r3, [r3, #8]
 80148c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80148c8:	d10f      	bne.n	80148ea <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	681a      	ldr	r2, [r3, #0]
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80148d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	681a      	ldr	r2, [r3, #0]
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80148e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148f4:	2b40      	cmp	r3, #64	; 0x40
 80148f6:	d007      	beq.n	8014908 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	681a      	ldr	r2, [r3, #0]
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014906:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	68db      	ldr	r3, [r3, #12]
 801490c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014910:	d867      	bhi.n	80149e2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8014912:	e030      	b.n	8014976 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	689b      	ldr	r3, [r3, #8]
 801491a:	f003 0301 	and.w	r3, r3, #1
 801491e:	2b01      	cmp	r3, #1
 8014920:	d117      	bne.n	8014952 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	f103 020c 	add.w	r2, r3, #12
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801492e:	7812      	ldrb	r2, [r2, #0]
 8014930:	b2d2      	uxtb	r2, r2
 8014932:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014938:	1c5a      	adds	r2, r3, #1
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014944:	b29b      	uxth	r3, r3
 8014946:	3b01      	subs	r3, #1
 8014948:	b29a      	uxth	r2, r3
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8014950:	e011      	b.n	8014976 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014952:	f7fb fd8b 	bl	801046c <HAL_GetTick>
 8014956:	4602      	mov	r2, r0
 8014958:	693b      	ldr	r3, [r7, #16]
 801495a:	1ad3      	subs	r3, r2, r3
 801495c:	683a      	ldr	r2, [r7, #0]
 801495e:	429a      	cmp	r2, r3
 8014960:	d803      	bhi.n	801496a <HAL_SPI_Receive+0x19c>
 8014962:	683b      	ldr	r3, [r7, #0]
 8014964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014968:	d102      	bne.n	8014970 <HAL_SPI_Receive+0x1a2>
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d102      	bne.n	8014976 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8014970:	2303      	movs	r3, #3
 8014972:	75fb      	strb	r3, [r7, #23]
          goto error;
 8014974:	e04e      	b.n	8014a14 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801497c:	b29b      	uxth	r3, r3
 801497e:	2b00      	cmp	r3, #0
 8014980:	d1c8      	bne.n	8014914 <HAL_SPI_Receive+0x146>
 8014982:	e034      	b.n	80149ee <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	689b      	ldr	r3, [r3, #8]
 801498a:	f003 0301 	and.w	r3, r3, #1
 801498e:	2b01      	cmp	r3, #1
 8014990:	d115      	bne.n	80149be <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	68da      	ldr	r2, [r3, #12]
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801499c:	b292      	uxth	r2, r2
 801499e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149a4:	1c9a      	adds	r2, r3, #2
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80149b0:	b29b      	uxth	r3, r3
 80149b2:	3b01      	subs	r3, #1
 80149b4:	b29a      	uxth	r2, r3
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80149bc:	e011      	b.n	80149e2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80149be:	f7fb fd55 	bl	801046c <HAL_GetTick>
 80149c2:	4602      	mov	r2, r0
 80149c4:	693b      	ldr	r3, [r7, #16]
 80149c6:	1ad3      	subs	r3, r2, r3
 80149c8:	683a      	ldr	r2, [r7, #0]
 80149ca:	429a      	cmp	r2, r3
 80149cc:	d803      	bhi.n	80149d6 <HAL_SPI_Receive+0x208>
 80149ce:	683b      	ldr	r3, [r7, #0]
 80149d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149d4:	d102      	bne.n	80149dc <HAL_SPI_Receive+0x20e>
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d102      	bne.n	80149e2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80149dc:	2303      	movs	r3, #3
 80149de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80149e0:	e018      	b.n	8014a14 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80149e8:	b29b      	uxth	r3, r3
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d1ca      	bne.n	8014984 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80149ee:	693a      	ldr	r2, [r7, #16]
 80149f0:	6839      	ldr	r1, [r7, #0]
 80149f2:	68f8      	ldr	r0, [r7, #12]
 80149f4:	f000 fb4c 	bl	8015090 <SPI_EndRxTransaction>
 80149f8:	4603      	mov	r3, r0
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d002      	beq.n	8014a04 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	2220      	movs	r2, #32
 8014a02:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d002      	beq.n	8014a12 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8014a0c:	2301      	movs	r3, #1
 8014a0e:	75fb      	strb	r3, [r7, #23]
 8014a10:	e000      	b.n	8014a14 <HAL_SPI_Receive+0x246>
  }

error :
 8014a12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	2201      	movs	r2, #1
 8014a18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	2200      	movs	r2, #0
 8014a20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8014a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a26:	4618      	mov	r0, r3
 8014a28:	3718      	adds	r7, #24
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	bd80      	pop	{r7, pc}

08014a2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8014a2e:	b580      	push	{r7, lr}
 8014a30:	b08a      	sub	sp, #40	; 0x28
 8014a32:	af00      	add	r7, sp, #0
 8014a34:	60f8      	str	r0, [r7, #12]
 8014a36:	60b9      	str	r1, [r7, #8]
 8014a38:	607a      	str	r2, [r7, #4]
 8014a3a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8014a3c:	2301      	movs	r3, #1
 8014a3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8014a40:	2300      	movs	r3, #0
 8014a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8014a4c:	2b01      	cmp	r3, #1
 8014a4e:	d101      	bne.n	8014a54 <HAL_SPI_TransmitReceive+0x26>
 8014a50:	2302      	movs	r3, #2
 8014a52:	e1fb      	b.n	8014e4c <HAL_SPI_TransmitReceive+0x41e>
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	2201      	movs	r2, #1
 8014a58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014a5c:	f7fb fd06 	bl	801046c <HAL_GetTick>
 8014a60:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014a68:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	685b      	ldr	r3, [r3, #4]
 8014a6e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8014a70:	887b      	ldrh	r3, [r7, #2]
 8014a72:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8014a74:	887b      	ldrh	r3, [r7, #2]
 8014a76:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8014a78:	7efb      	ldrb	r3, [r7, #27]
 8014a7a:	2b01      	cmp	r3, #1
 8014a7c:	d00e      	beq.n	8014a9c <HAL_SPI_TransmitReceive+0x6e>
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014a84:	d106      	bne.n	8014a94 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	689b      	ldr	r3, [r3, #8]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d102      	bne.n	8014a94 <HAL_SPI_TransmitReceive+0x66>
 8014a8e:	7efb      	ldrb	r3, [r7, #27]
 8014a90:	2b04      	cmp	r3, #4
 8014a92:	d003      	beq.n	8014a9c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8014a94:	2302      	movs	r3, #2
 8014a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8014a9a:	e1cd      	b.n	8014e38 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8014a9c:	68bb      	ldr	r3, [r7, #8]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d005      	beq.n	8014aae <HAL_SPI_TransmitReceive+0x80>
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d002      	beq.n	8014aae <HAL_SPI_TransmitReceive+0x80>
 8014aa8:	887b      	ldrh	r3, [r7, #2]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d103      	bne.n	8014ab6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8014aae:	2301      	movs	r3, #1
 8014ab0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8014ab4:	e1c0      	b.n	8014e38 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014abc:	b2db      	uxtb	r3, r3
 8014abe:	2b04      	cmp	r3, #4
 8014ac0:	d003      	beq.n	8014aca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	2205      	movs	r2, #5
 8014ac6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	2200      	movs	r2, #0
 8014ace:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	687a      	ldr	r2, [r7, #4]
 8014ad4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	887a      	ldrh	r2, [r7, #2]
 8014ada:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	887a      	ldrh	r2, [r7, #2]
 8014ae2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	68ba      	ldr	r2, [r7, #8]
 8014aea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	887a      	ldrh	r2, [r7, #2]
 8014af0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	887a      	ldrh	r2, [r7, #2]
 8014af6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	2200      	movs	r2, #0
 8014afc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	2200      	movs	r2, #0
 8014b02:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	68db      	ldr	r3, [r3, #12]
 8014b08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014b0c:	d802      	bhi.n	8014b14 <HAL_SPI_TransmitReceive+0xe6>
 8014b0e:	8a3b      	ldrh	r3, [r7, #16]
 8014b10:	2b01      	cmp	r3, #1
 8014b12:	d908      	bls.n	8014b26 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	685a      	ldr	r2, [r3, #4]
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8014b22:	605a      	str	r2, [r3, #4]
 8014b24:	e007      	b.n	8014b36 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	685a      	ldr	r2, [r3, #4]
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8014b34:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b40:	2b40      	cmp	r3, #64	; 0x40
 8014b42:	d007      	beq.n	8014b54 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	681a      	ldr	r2, [r3, #0]
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014b52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	68db      	ldr	r3, [r3, #12]
 8014b58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014b5c:	d97c      	bls.n	8014c58 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	685b      	ldr	r3, [r3, #4]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d002      	beq.n	8014b6c <HAL_SPI_TransmitReceive+0x13e>
 8014b66:	8a7b      	ldrh	r3, [r7, #18]
 8014b68:	2b01      	cmp	r3, #1
 8014b6a:	d169      	bne.n	8014c40 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b70:	881a      	ldrh	r2, [r3, #0]
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b7c:	1c9a      	adds	r2, r3, #2
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014b86:	b29b      	uxth	r3, r3
 8014b88:	3b01      	subs	r3, #1
 8014b8a:	b29a      	uxth	r2, r3
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014b90:	e056      	b.n	8014c40 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	689b      	ldr	r3, [r3, #8]
 8014b98:	f003 0302 	and.w	r3, r3, #2
 8014b9c:	2b02      	cmp	r3, #2
 8014b9e:	d11b      	bne.n	8014bd8 <HAL_SPI_TransmitReceive+0x1aa>
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014ba4:	b29b      	uxth	r3, r3
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d016      	beq.n	8014bd8 <HAL_SPI_TransmitReceive+0x1aa>
 8014baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bac:	2b01      	cmp	r3, #1
 8014bae:	d113      	bne.n	8014bd8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bb4:	881a      	ldrh	r2, [r3, #0]
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bc0:	1c9a      	adds	r2, r3, #2
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014bca:	b29b      	uxth	r3, r3
 8014bcc:	3b01      	subs	r3, #1
 8014bce:	b29a      	uxth	r2, r3
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	689b      	ldr	r3, [r3, #8]
 8014bde:	f003 0301 	and.w	r3, r3, #1
 8014be2:	2b01      	cmp	r3, #1
 8014be4:	d11c      	bne.n	8014c20 <HAL_SPI_TransmitReceive+0x1f2>
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014bec:	b29b      	uxth	r3, r3
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d016      	beq.n	8014c20 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	68da      	ldr	r2, [r3, #12]
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bfc:	b292      	uxth	r2, r2
 8014bfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c04:	1c9a      	adds	r2, r3, #2
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014c10:	b29b      	uxth	r3, r3
 8014c12:	3b01      	subs	r3, #1
 8014c14:	b29a      	uxth	r2, r3
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014c1c:	2301      	movs	r3, #1
 8014c1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8014c20:	f7fb fc24 	bl	801046c <HAL_GetTick>
 8014c24:	4602      	mov	r2, r0
 8014c26:	69fb      	ldr	r3, [r7, #28]
 8014c28:	1ad3      	subs	r3, r2, r3
 8014c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c2c:	429a      	cmp	r2, r3
 8014c2e:	d807      	bhi.n	8014c40 <HAL_SPI_TransmitReceive+0x212>
 8014c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c36:	d003      	beq.n	8014c40 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8014c38:	2303      	movs	r3, #3
 8014c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8014c3e:	e0fb      	b.n	8014e38 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014c44:	b29b      	uxth	r3, r3
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d1a3      	bne.n	8014b92 <HAL_SPI_TransmitReceive+0x164>
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014c50:	b29b      	uxth	r3, r3
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d19d      	bne.n	8014b92 <HAL_SPI_TransmitReceive+0x164>
 8014c56:	e0df      	b.n	8014e18 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	685b      	ldr	r3, [r3, #4]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d003      	beq.n	8014c68 <HAL_SPI_TransmitReceive+0x23a>
 8014c60:	8a7b      	ldrh	r3, [r7, #18]
 8014c62:	2b01      	cmp	r3, #1
 8014c64:	f040 80cb 	bne.w	8014dfe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014c6c:	b29b      	uxth	r3, r3
 8014c6e:	2b01      	cmp	r3, #1
 8014c70:	d912      	bls.n	8014c98 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c76:	881a      	ldrh	r2, [r3, #0]
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c82:	1c9a      	adds	r2, r3, #2
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014c8c:	b29b      	uxth	r3, r3
 8014c8e:	3b02      	subs	r3, #2
 8014c90:	b29a      	uxth	r2, r3
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014c96:	e0b2      	b.n	8014dfe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	330c      	adds	r3, #12
 8014ca2:	7812      	ldrb	r2, [r2, #0]
 8014ca4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014caa:	1c5a      	adds	r2, r3, #1
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014cb4:	b29b      	uxth	r3, r3
 8014cb6:	3b01      	subs	r3, #1
 8014cb8:	b29a      	uxth	r2, r3
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014cbe:	e09e      	b.n	8014dfe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	689b      	ldr	r3, [r3, #8]
 8014cc6:	f003 0302 	and.w	r3, r3, #2
 8014cca:	2b02      	cmp	r3, #2
 8014ccc:	d134      	bne.n	8014d38 <HAL_SPI_TransmitReceive+0x30a>
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014cd2:	b29b      	uxth	r3, r3
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d02f      	beq.n	8014d38 <HAL_SPI_TransmitReceive+0x30a>
 8014cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cda:	2b01      	cmp	r3, #1
 8014cdc:	d12c      	bne.n	8014d38 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014ce2:	b29b      	uxth	r3, r3
 8014ce4:	2b01      	cmp	r3, #1
 8014ce6:	d912      	bls.n	8014d0e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cec:	881a      	ldrh	r2, [r3, #0]
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cf8:	1c9a      	adds	r2, r3, #2
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014d02:	b29b      	uxth	r3, r3
 8014d04:	3b02      	subs	r3, #2
 8014d06:	b29a      	uxth	r2, r3
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014d0c:	e012      	b.n	8014d34 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	330c      	adds	r3, #12
 8014d18:	7812      	ldrb	r2, [r2, #0]
 8014d1a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d20:	1c5a      	adds	r2, r3, #1
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014d2a:	b29b      	uxth	r3, r3
 8014d2c:	3b01      	subs	r3, #1
 8014d2e:	b29a      	uxth	r2, r3
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014d34:	2300      	movs	r3, #0
 8014d36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	689b      	ldr	r3, [r3, #8]
 8014d3e:	f003 0301 	and.w	r3, r3, #1
 8014d42:	2b01      	cmp	r3, #1
 8014d44:	d148      	bne.n	8014dd8 <HAL_SPI_TransmitReceive+0x3aa>
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014d4c:	b29b      	uxth	r3, r3
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d042      	beq.n	8014dd8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014d58:	b29b      	uxth	r3, r3
 8014d5a:	2b01      	cmp	r3, #1
 8014d5c:	d923      	bls.n	8014da6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	68da      	ldr	r2, [r3, #12]
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d68:	b292      	uxth	r2, r2
 8014d6a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d70:	1c9a      	adds	r2, r3, #2
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014d7c:	b29b      	uxth	r3, r3
 8014d7e:	3b02      	subs	r3, #2
 8014d80:	b29a      	uxth	r2, r3
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014d8e:	b29b      	uxth	r3, r3
 8014d90:	2b01      	cmp	r3, #1
 8014d92:	d81f      	bhi.n	8014dd4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	685a      	ldr	r2, [r3, #4]
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8014da2:	605a      	str	r2, [r3, #4]
 8014da4:	e016      	b.n	8014dd4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	f103 020c 	add.w	r2, r3, #12
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014db2:	7812      	ldrb	r2, [r2, #0]
 8014db4:	b2d2      	uxtb	r2, r2
 8014db6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014dbc:	1c5a      	adds	r2, r3, #1
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014dc8:	b29b      	uxth	r3, r3
 8014dca:	3b01      	subs	r3, #1
 8014dcc:	b29a      	uxth	r2, r3
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014dd4:	2301      	movs	r3, #1
 8014dd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8014dd8:	f7fb fb48 	bl	801046c <HAL_GetTick>
 8014ddc:	4602      	mov	r2, r0
 8014dde:	69fb      	ldr	r3, [r7, #28]
 8014de0:	1ad3      	subs	r3, r2, r3
 8014de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014de4:	429a      	cmp	r2, r3
 8014de6:	d803      	bhi.n	8014df0 <HAL_SPI_TransmitReceive+0x3c2>
 8014de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dee:	d102      	bne.n	8014df6 <HAL_SPI_TransmitReceive+0x3c8>
 8014df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d103      	bne.n	8014dfe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8014df6:	2303      	movs	r3, #3
 8014df8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8014dfc:	e01c      	b.n	8014e38 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014e02:	b29b      	uxth	r3, r3
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	f47f af5b 	bne.w	8014cc0 <HAL_SPI_TransmitReceive+0x292>
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014e10:	b29b      	uxth	r3, r3
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	f47f af54 	bne.w	8014cc0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014e18:	69fa      	ldr	r2, [r7, #28]
 8014e1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014e1c:	68f8      	ldr	r0, [r7, #12]
 8014e1e:	f000 f98f 	bl	8015140 <SPI_EndRxTxTransaction>
 8014e22:	4603      	mov	r3, r0
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d006      	beq.n	8014e36 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8014e28:	2301      	movs	r3, #1
 8014e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	2220      	movs	r2, #32
 8014e32:	661a      	str	r2, [r3, #96]	; 0x60
 8014e34:	e000      	b.n	8014e38 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8014e36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	2201      	movs	r2, #1
 8014e3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	2200      	movs	r2, #0
 8014e44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8014e48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	3728      	adds	r7, #40	; 0x28
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd80      	pop	{r7, pc}

08014e54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b088      	sub	sp, #32
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	60f8      	str	r0, [r7, #12]
 8014e5c:	60b9      	str	r1, [r7, #8]
 8014e5e:	603b      	str	r3, [r7, #0]
 8014e60:	4613      	mov	r3, r2
 8014e62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8014e64:	f7fb fb02 	bl	801046c <HAL_GetTick>
 8014e68:	4602      	mov	r2, r0
 8014e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e6c:	1a9b      	subs	r3, r3, r2
 8014e6e:	683a      	ldr	r2, [r7, #0]
 8014e70:	4413      	add	r3, r2
 8014e72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8014e74:	f7fb fafa 	bl	801046c <HAL_GetTick>
 8014e78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8014e7a:	4b39      	ldr	r3, [pc, #228]	; (8014f60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	015b      	lsls	r3, r3, #5
 8014e80:	0d1b      	lsrs	r3, r3, #20
 8014e82:	69fa      	ldr	r2, [r7, #28]
 8014e84:	fb02 f303 	mul.w	r3, r2, r3
 8014e88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014e8a:	e054      	b.n	8014f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e92:	d050      	beq.n	8014f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8014e94:	f7fb faea 	bl	801046c <HAL_GetTick>
 8014e98:	4602      	mov	r2, r0
 8014e9a:	69bb      	ldr	r3, [r7, #24]
 8014e9c:	1ad3      	subs	r3, r2, r3
 8014e9e:	69fa      	ldr	r2, [r7, #28]
 8014ea0:	429a      	cmp	r2, r3
 8014ea2:	d902      	bls.n	8014eaa <SPI_WaitFlagStateUntilTimeout+0x56>
 8014ea4:	69fb      	ldr	r3, [r7, #28]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d13d      	bne.n	8014f26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	685a      	ldr	r2, [r3, #4]
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014eb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	685b      	ldr	r3, [r3, #4]
 8014ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014ec2:	d111      	bne.n	8014ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	689b      	ldr	r3, [r3, #8]
 8014ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014ecc:	d004      	beq.n	8014ed8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	689b      	ldr	r3, [r3, #8]
 8014ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014ed6:	d107      	bne.n	8014ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	681a      	ldr	r2, [r3, #0]
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014ee6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014ef0:	d10f      	bne.n	8014f12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	681a      	ldr	r2, [r3, #0]
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014f00:	601a      	str	r2, [r3, #0]
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	681a      	ldr	r2, [r3, #0]
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014f10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	2201      	movs	r2, #1
 8014f16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8014f22:	2303      	movs	r3, #3
 8014f24:	e017      	b.n	8014f56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8014f26:	697b      	ldr	r3, [r7, #20]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d101      	bne.n	8014f30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8014f30:	697b      	ldr	r3, [r7, #20]
 8014f32:	3b01      	subs	r3, #1
 8014f34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	689a      	ldr	r2, [r3, #8]
 8014f3c:	68bb      	ldr	r3, [r7, #8]
 8014f3e:	4013      	ands	r3, r2
 8014f40:	68ba      	ldr	r2, [r7, #8]
 8014f42:	429a      	cmp	r2, r3
 8014f44:	bf0c      	ite	eq
 8014f46:	2301      	moveq	r3, #1
 8014f48:	2300      	movne	r3, #0
 8014f4a:	b2db      	uxtb	r3, r3
 8014f4c:	461a      	mov	r2, r3
 8014f4e:	79fb      	ldrb	r3, [r7, #7]
 8014f50:	429a      	cmp	r2, r3
 8014f52:	d19b      	bne.n	8014e8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8014f54:	2300      	movs	r3, #0
}
 8014f56:	4618      	mov	r0, r3
 8014f58:	3720      	adds	r7, #32
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	bd80      	pop	{r7, pc}
 8014f5e:	bf00      	nop
 8014f60:	20000000 	.word	0x20000000

08014f64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b08a      	sub	sp, #40	; 0x28
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	60f8      	str	r0, [r7, #12]
 8014f6c:	60b9      	str	r1, [r7, #8]
 8014f6e:	607a      	str	r2, [r7, #4]
 8014f70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8014f72:	2300      	movs	r3, #0
 8014f74:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8014f76:	f7fb fa79 	bl	801046c <HAL_GetTick>
 8014f7a:	4602      	mov	r2, r0
 8014f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f7e:	1a9b      	subs	r3, r3, r2
 8014f80:	683a      	ldr	r2, [r7, #0]
 8014f82:	4413      	add	r3, r2
 8014f84:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8014f86:	f7fb fa71 	bl	801046c <HAL_GetTick>
 8014f8a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	330c      	adds	r3, #12
 8014f92:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8014f94:	4b3d      	ldr	r3, [pc, #244]	; (801508c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8014f96:	681a      	ldr	r2, [r3, #0]
 8014f98:	4613      	mov	r3, r2
 8014f9a:	009b      	lsls	r3, r3, #2
 8014f9c:	4413      	add	r3, r2
 8014f9e:	00da      	lsls	r2, r3, #3
 8014fa0:	1ad3      	subs	r3, r2, r3
 8014fa2:	0d1b      	lsrs	r3, r3, #20
 8014fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fa6:	fb02 f303 	mul.w	r3, r2, r3
 8014faa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8014fac:	e060      	b.n	8015070 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8014fae:	68bb      	ldr	r3, [r7, #8]
 8014fb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8014fb4:	d107      	bne.n	8014fc6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d104      	bne.n	8014fc6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8014fbc:	69fb      	ldr	r3, [r7, #28]
 8014fbe:	781b      	ldrb	r3, [r3, #0]
 8014fc0:	b2db      	uxtb	r3, r3
 8014fc2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8014fc4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8014fc6:	683b      	ldr	r3, [r7, #0]
 8014fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fcc:	d050      	beq.n	8015070 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8014fce:	f7fb fa4d 	bl	801046c <HAL_GetTick>
 8014fd2:	4602      	mov	r2, r0
 8014fd4:	6a3b      	ldr	r3, [r7, #32]
 8014fd6:	1ad3      	subs	r3, r2, r3
 8014fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fda:	429a      	cmp	r2, r3
 8014fdc:	d902      	bls.n	8014fe4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8014fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d13d      	bne.n	8015060 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	685a      	ldr	r2, [r3, #4]
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014ff2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	685b      	ldr	r3, [r3, #4]
 8014ff8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014ffc:	d111      	bne.n	8015022 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	689b      	ldr	r3, [r3, #8]
 8015002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015006:	d004      	beq.n	8015012 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	689b      	ldr	r3, [r3, #8]
 801500c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015010:	d107      	bne.n	8015022 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	681a      	ldr	r2, [r3, #0]
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015020:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801502a:	d10f      	bne.n	801504c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	681a      	ldr	r2, [r3, #0]
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801503a:	601a      	str	r2, [r3, #0]
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	681a      	ldr	r2, [r3, #0]
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801504a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	2201      	movs	r2, #1
 8015050:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	2200      	movs	r2, #0
 8015058:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801505c:	2303      	movs	r3, #3
 801505e:	e010      	b.n	8015082 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8015060:	69bb      	ldr	r3, [r7, #24]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d101      	bne.n	801506a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8015066:	2300      	movs	r3, #0
 8015068:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801506a:	69bb      	ldr	r3, [r7, #24]
 801506c:	3b01      	subs	r3, #1
 801506e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	689a      	ldr	r2, [r3, #8]
 8015076:	68bb      	ldr	r3, [r7, #8]
 8015078:	4013      	ands	r3, r2
 801507a:	687a      	ldr	r2, [r7, #4]
 801507c:	429a      	cmp	r2, r3
 801507e:	d196      	bne.n	8014fae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8015080:	2300      	movs	r3, #0
}
 8015082:	4618      	mov	r0, r3
 8015084:	3728      	adds	r7, #40	; 0x28
 8015086:	46bd      	mov	sp, r7
 8015088:	bd80      	pop	{r7, pc}
 801508a:	bf00      	nop
 801508c:	20000000 	.word	0x20000000

08015090 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8015090:	b580      	push	{r7, lr}
 8015092:	b086      	sub	sp, #24
 8015094:	af02      	add	r7, sp, #8
 8015096:	60f8      	str	r0, [r7, #12]
 8015098:	60b9      	str	r1, [r7, #8]
 801509a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	685b      	ldr	r3, [r3, #4]
 80150a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80150a4:	d111      	bne.n	80150ca <SPI_EndRxTransaction+0x3a>
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	689b      	ldr	r3, [r3, #8]
 80150aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80150ae:	d004      	beq.n	80150ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	689b      	ldr	r3, [r3, #8]
 80150b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80150b8:	d107      	bne.n	80150ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	681a      	ldr	r2, [r3, #0]
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80150c8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	9300      	str	r3, [sp, #0]
 80150ce:	68bb      	ldr	r3, [r7, #8]
 80150d0:	2200      	movs	r2, #0
 80150d2:	2180      	movs	r1, #128	; 0x80
 80150d4:	68f8      	ldr	r0, [r7, #12]
 80150d6:	f7ff febd 	bl	8014e54 <SPI_WaitFlagStateUntilTimeout>
 80150da:	4603      	mov	r3, r0
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d007      	beq.n	80150f0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80150e4:	f043 0220 	orr.w	r2, r3, #32
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80150ec:	2303      	movs	r3, #3
 80150ee:	e023      	b.n	8015138 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	685b      	ldr	r3, [r3, #4]
 80150f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80150f8:	d11d      	bne.n	8015136 <SPI_EndRxTransaction+0xa6>
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	689b      	ldr	r3, [r3, #8]
 80150fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015102:	d004      	beq.n	801510e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	689b      	ldr	r3, [r3, #8]
 8015108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801510c:	d113      	bne.n	8015136 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	9300      	str	r3, [sp, #0]
 8015112:	68bb      	ldr	r3, [r7, #8]
 8015114:	2200      	movs	r2, #0
 8015116:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801511a:	68f8      	ldr	r0, [r7, #12]
 801511c:	f7ff ff22 	bl	8014f64 <SPI_WaitFifoStateUntilTimeout>
 8015120:	4603      	mov	r3, r0
 8015122:	2b00      	cmp	r3, #0
 8015124:	d007      	beq.n	8015136 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801512a:	f043 0220 	orr.w	r2, r3, #32
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8015132:	2303      	movs	r3, #3
 8015134:	e000      	b.n	8015138 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8015136:	2300      	movs	r3, #0
}
 8015138:	4618      	mov	r0, r3
 801513a:	3710      	adds	r7, #16
 801513c:	46bd      	mov	sp, r7
 801513e:	bd80      	pop	{r7, pc}

08015140 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8015140:	b580      	push	{r7, lr}
 8015142:	b086      	sub	sp, #24
 8015144:	af02      	add	r7, sp, #8
 8015146:	60f8      	str	r0, [r7, #12]
 8015148:	60b9      	str	r1, [r7, #8]
 801514a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	9300      	str	r3, [sp, #0]
 8015150:	68bb      	ldr	r3, [r7, #8]
 8015152:	2200      	movs	r2, #0
 8015154:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8015158:	68f8      	ldr	r0, [r7, #12]
 801515a:	f7ff ff03 	bl	8014f64 <SPI_WaitFifoStateUntilTimeout>
 801515e:	4603      	mov	r3, r0
 8015160:	2b00      	cmp	r3, #0
 8015162:	d007      	beq.n	8015174 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015168:	f043 0220 	orr.w	r2, r3, #32
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8015170:	2303      	movs	r3, #3
 8015172:	e027      	b.n	80151c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	9300      	str	r3, [sp, #0]
 8015178:	68bb      	ldr	r3, [r7, #8]
 801517a:	2200      	movs	r2, #0
 801517c:	2180      	movs	r1, #128	; 0x80
 801517e:	68f8      	ldr	r0, [r7, #12]
 8015180:	f7ff fe68 	bl	8014e54 <SPI_WaitFlagStateUntilTimeout>
 8015184:	4603      	mov	r3, r0
 8015186:	2b00      	cmp	r3, #0
 8015188:	d007      	beq.n	801519a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801518e:	f043 0220 	orr.w	r2, r3, #32
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8015196:	2303      	movs	r3, #3
 8015198:	e014      	b.n	80151c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	9300      	str	r3, [sp, #0]
 801519e:	68bb      	ldr	r3, [r7, #8]
 80151a0:	2200      	movs	r2, #0
 80151a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80151a6:	68f8      	ldr	r0, [r7, #12]
 80151a8:	f7ff fedc 	bl	8014f64 <SPI_WaitFifoStateUntilTimeout>
 80151ac:	4603      	mov	r3, r0
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d007      	beq.n	80151c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80151b6:	f043 0220 	orr.w	r2, r3, #32
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80151be:	2303      	movs	r3, #3
 80151c0:	e000      	b.n	80151c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80151c2:	2300      	movs	r3, #0
}
 80151c4:	4618      	mov	r0, r3
 80151c6:	3710      	adds	r7, #16
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd80      	pop	{r7, pc}

080151cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b082      	sub	sp, #8
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d101      	bne.n	80151de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80151da:	2301      	movs	r3, #1
 80151dc:	e049      	b.n	8015272 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80151e4:	b2db      	uxtb	r3, r3
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d106      	bne.n	80151f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	2200      	movs	r2, #0
 80151ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80151f2:	6878      	ldr	r0, [r7, #4]
 80151f4:	f7fa fa72 	bl	800f6dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	2202      	movs	r2, #2
 80151fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	681a      	ldr	r2, [r3, #0]
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	3304      	adds	r3, #4
 8015208:	4619      	mov	r1, r3
 801520a:	4610      	mov	r0, r2
 801520c:	f000 fd6c 	bl	8015ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	2201      	movs	r2, #1
 8015214:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	2201      	movs	r2, #1
 801521c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	2201      	movs	r2, #1
 8015224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	2201      	movs	r2, #1
 801522c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	2201      	movs	r2, #1
 8015234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	2201      	movs	r2, #1
 801523c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	2201      	movs	r2, #1
 8015244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	2201      	movs	r2, #1
 801524c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	2201      	movs	r2, #1
 8015254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	2201      	movs	r2, #1
 801525c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	2201      	movs	r2, #1
 8015264:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	2201      	movs	r2, #1
 801526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015270:	2300      	movs	r3, #0
}
 8015272:	4618      	mov	r0, r3
 8015274:	3708      	adds	r7, #8
 8015276:	46bd      	mov	sp, r7
 8015278:	bd80      	pop	{r7, pc}
	...

0801527c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801527c:	b480      	push	{r7}
 801527e:	b085      	sub	sp, #20
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801528a:	b2db      	uxtb	r3, r3
 801528c:	2b01      	cmp	r3, #1
 801528e:	d001      	beq.n	8015294 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8015290:	2301      	movs	r3, #1
 8015292:	e04f      	b.n	8015334 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	2202      	movs	r2, #2
 8015298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	68da      	ldr	r2, [r3, #12]
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	f042 0201 	orr.w	r2, r2, #1
 80152aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	4a23      	ldr	r2, [pc, #140]	; (8015340 <HAL_TIM_Base_Start_IT+0xc4>)
 80152b2:	4293      	cmp	r3, r2
 80152b4:	d01d      	beq.n	80152f2 <HAL_TIM_Base_Start_IT+0x76>
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80152be:	d018      	beq.n	80152f2 <HAL_TIM_Base_Start_IT+0x76>
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	4a1f      	ldr	r2, [pc, #124]	; (8015344 <HAL_TIM_Base_Start_IT+0xc8>)
 80152c6:	4293      	cmp	r3, r2
 80152c8:	d013      	beq.n	80152f2 <HAL_TIM_Base_Start_IT+0x76>
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	4a1e      	ldr	r2, [pc, #120]	; (8015348 <HAL_TIM_Base_Start_IT+0xcc>)
 80152d0:	4293      	cmp	r3, r2
 80152d2:	d00e      	beq.n	80152f2 <HAL_TIM_Base_Start_IT+0x76>
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	4a1c      	ldr	r2, [pc, #112]	; (801534c <HAL_TIM_Base_Start_IT+0xd0>)
 80152da:	4293      	cmp	r3, r2
 80152dc:	d009      	beq.n	80152f2 <HAL_TIM_Base_Start_IT+0x76>
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	4a1b      	ldr	r2, [pc, #108]	; (8015350 <HAL_TIM_Base_Start_IT+0xd4>)
 80152e4:	4293      	cmp	r3, r2
 80152e6:	d004      	beq.n	80152f2 <HAL_TIM_Base_Start_IT+0x76>
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	4a19      	ldr	r2, [pc, #100]	; (8015354 <HAL_TIM_Base_Start_IT+0xd8>)
 80152ee:	4293      	cmp	r3, r2
 80152f0:	d115      	bne.n	801531e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	689a      	ldr	r2, [r3, #8]
 80152f8:	4b17      	ldr	r3, [pc, #92]	; (8015358 <HAL_TIM_Base_Start_IT+0xdc>)
 80152fa:	4013      	ands	r3, r2
 80152fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	2b06      	cmp	r3, #6
 8015302:	d015      	beq.n	8015330 <HAL_TIM_Base_Start_IT+0xb4>
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801530a:	d011      	beq.n	8015330 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	681a      	ldr	r2, [r3, #0]
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	f042 0201 	orr.w	r2, r2, #1
 801531a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801531c:	e008      	b.n	8015330 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	681a      	ldr	r2, [r3, #0]
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	f042 0201 	orr.w	r2, r2, #1
 801532c:	601a      	str	r2, [r3, #0]
 801532e:	e000      	b.n	8015332 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015330:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015332:	2300      	movs	r3, #0
}
 8015334:	4618      	mov	r0, r3
 8015336:	3714      	adds	r7, #20
 8015338:	46bd      	mov	sp, r7
 801533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801533e:	4770      	bx	lr
 8015340:	40012c00 	.word	0x40012c00
 8015344:	40000400 	.word	0x40000400
 8015348:	40000800 	.word	0x40000800
 801534c:	40013400 	.word	0x40013400
 8015350:	40014000 	.word	0x40014000
 8015354:	40015000 	.word	0x40015000
 8015358:	00010007 	.word	0x00010007

0801535c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801535c:	b580      	push	{r7, lr}
 801535e:	b082      	sub	sp, #8
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d101      	bne.n	801536e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801536a:	2301      	movs	r3, #1
 801536c:	e049      	b.n	8015402 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015374:	b2db      	uxtb	r3, r3
 8015376:	2b00      	cmp	r3, #0
 8015378:	d106      	bne.n	8015388 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	2200      	movs	r2, #0
 801537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015382:	6878      	ldr	r0, [r7, #4]
 8015384:	f7fa f9e4 	bl	800f750 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	2202      	movs	r2, #2
 801538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	681a      	ldr	r2, [r3, #0]
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	3304      	adds	r3, #4
 8015398:	4619      	mov	r1, r3
 801539a:	4610      	mov	r0, r2
 801539c:	f000 fca4 	bl	8015ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	2201      	movs	r2, #1
 80153a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	2201      	movs	r2, #1
 80153ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	2201      	movs	r2, #1
 80153b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2201      	movs	r2, #1
 80153bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	2201      	movs	r2, #1
 80153c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	2201      	movs	r2, #1
 80153cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2201      	movs	r2, #1
 80153d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	2201      	movs	r2, #1
 80153dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	2201      	movs	r2, #1
 80153e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	2201      	movs	r2, #1
 80153ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	2201      	movs	r2, #1
 80153f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	2201      	movs	r2, #1
 80153fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015400:	2300      	movs	r3, #0
}
 8015402:	4618      	mov	r0, r3
 8015404:	3708      	adds	r7, #8
 8015406:	46bd      	mov	sp, r7
 8015408:	bd80      	pop	{r7, pc}
	...

0801540c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b084      	sub	sp, #16
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
 8015414:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8015416:	683b      	ldr	r3, [r7, #0]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d109      	bne.n	8015430 <HAL_TIM_PWM_Start+0x24>
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015422:	b2db      	uxtb	r3, r3
 8015424:	2b01      	cmp	r3, #1
 8015426:	bf14      	ite	ne
 8015428:	2301      	movne	r3, #1
 801542a:	2300      	moveq	r3, #0
 801542c:	b2db      	uxtb	r3, r3
 801542e:	e03c      	b.n	80154aa <HAL_TIM_PWM_Start+0x9e>
 8015430:	683b      	ldr	r3, [r7, #0]
 8015432:	2b04      	cmp	r3, #4
 8015434:	d109      	bne.n	801544a <HAL_TIM_PWM_Start+0x3e>
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801543c:	b2db      	uxtb	r3, r3
 801543e:	2b01      	cmp	r3, #1
 8015440:	bf14      	ite	ne
 8015442:	2301      	movne	r3, #1
 8015444:	2300      	moveq	r3, #0
 8015446:	b2db      	uxtb	r3, r3
 8015448:	e02f      	b.n	80154aa <HAL_TIM_PWM_Start+0x9e>
 801544a:	683b      	ldr	r3, [r7, #0]
 801544c:	2b08      	cmp	r3, #8
 801544e:	d109      	bne.n	8015464 <HAL_TIM_PWM_Start+0x58>
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015456:	b2db      	uxtb	r3, r3
 8015458:	2b01      	cmp	r3, #1
 801545a:	bf14      	ite	ne
 801545c:	2301      	movne	r3, #1
 801545e:	2300      	moveq	r3, #0
 8015460:	b2db      	uxtb	r3, r3
 8015462:	e022      	b.n	80154aa <HAL_TIM_PWM_Start+0x9e>
 8015464:	683b      	ldr	r3, [r7, #0]
 8015466:	2b0c      	cmp	r3, #12
 8015468:	d109      	bne.n	801547e <HAL_TIM_PWM_Start+0x72>
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015470:	b2db      	uxtb	r3, r3
 8015472:	2b01      	cmp	r3, #1
 8015474:	bf14      	ite	ne
 8015476:	2301      	movne	r3, #1
 8015478:	2300      	moveq	r3, #0
 801547a:	b2db      	uxtb	r3, r3
 801547c:	e015      	b.n	80154aa <HAL_TIM_PWM_Start+0x9e>
 801547e:	683b      	ldr	r3, [r7, #0]
 8015480:	2b10      	cmp	r3, #16
 8015482:	d109      	bne.n	8015498 <HAL_TIM_PWM_Start+0x8c>
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801548a:	b2db      	uxtb	r3, r3
 801548c:	2b01      	cmp	r3, #1
 801548e:	bf14      	ite	ne
 8015490:	2301      	movne	r3, #1
 8015492:	2300      	moveq	r3, #0
 8015494:	b2db      	uxtb	r3, r3
 8015496:	e008      	b.n	80154aa <HAL_TIM_PWM_Start+0x9e>
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801549e:	b2db      	uxtb	r3, r3
 80154a0:	2b01      	cmp	r3, #1
 80154a2:	bf14      	ite	ne
 80154a4:	2301      	movne	r3, #1
 80154a6:	2300      	moveq	r3, #0
 80154a8:	b2db      	uxtb	r3, r3
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d001      	beq.n	80154b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80154ae:	2301      	movs	r3, #1
 80154b0:	e0a1      	b.n	80155f6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80154b2:	683b      	ldr	r3, [r7, #0]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d104      	bne.n	80154c2 <HAL_TIM_PWM_Start+0xb6>
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	2202      	movs	r2, #2
 80154bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80154c0:	e023      	b.n	801550a <HAL_TIM_PWM_Start+0xfe>
 80154c2:	683b      	ldr	r3, [r7, #0]
 80154c4:	2b04      	cmp	r3, #4
 80154c6:	d104      	bne.n	80154d2 <HAL_TIM_PWM_Start+0xc6>
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	2202      	movs	r2, #2
 80154cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80154d0:	e01b      	b.n	801550a <HAL_TIM_PWM_Start+0xfe>
 80154d2:	683b      	ldr	r3, [r7, #0]
 80154d4:	2b08      	cmp	r3, #8
 80154d6:	d104      	bne.n	80154e2 <HAL_TIM_PWM_Start+0xd6>
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	2202      	movs	r2, #2
 80154dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80154e0:	e013      	b.n	801550a <HAL_TIM_PWM_Start+0xfe>
 80154e2:	683b      	ldr	r3, [r7, #0]
 80154e4:	2b0c      	cmp	r3, #12
 80154e6:	d104      	bne.n	80154f2 <HAL_TIM_PWM_Start+0xe6>
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	2202      	movs	r2, #2
 80154ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80154f0:	e00b      	b.n	801550a <HAL_TIM_PWM_Start+0xfe>
 80154f2:	683b      	ldr	r3, [r7, #0]
 80154f4:	2b10      	cmp	r3, #16
 80154f6:	d104      	bne.n	8015502 <HAL_TIM_PWM_Start+0xf6>
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	2202      	movs	r2, #2
 80154fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015500:	e003      	b.n	801550a <HAL_TIM_PWM_Start+0xfe>
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	2202      	movs	r2, #2
 8015506:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	2201      	movs	r2, #1
 8015510:	6839      	ldr	r1, [r7, #0]
 8015512:	4618      	mov	r0, r3
 8015514:	f000 ffb0 	bl	8016478 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	4a38      	ldr	r2, [pc, #224]	; (8015600 <HAL_TIM_PWM_Start+0x1f4>)
 801551e:	4293      	cmp	r3, r2
 8015520:	d018      	beq.n	8015554 <HAL_TIM_PWM_Start+0x148>
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	4a37      	ldr	r2, [pc, #220]	; (8015604 <HAL_TIM_PWM_Start+0x1f8>)
 8015528:	4293      	cmp	r3, r2
 801552a:	d013      	beq.n	8015554 <HAL_TIM_PWM_Start+0x148>
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	4a35      	ldr	r2, [pc, #212]	; (8015608 <HAL_TIM_PWM_Start+0x1fc>)
 8015532:	4293      	cmp	r3, r2
 8015534:	d00e      	beq.n	8015554 <HAL_TIM_PWM_Start+0x148>
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	4a34      	ldr	r2, [pc, #208]	; (801560c <HAL_TIM_PWM_Start+0x200>)
 801553c:	4293      	cmp	r3, r2
 801553e:	d009      	beq.n	8015554 <HAL_TIM_PWM_Start+0x148>
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	4a32      	ldr	r2, [pc, #200]	; (8015610 <HAL_TIM_PWM_Start+0x204>)
 8015546:	4293      	cmp	r3, r2
 8015548:	d004      	beq.n	8015554 <HAL_TIM_PWM_Start+0x148>
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	4a31      	ldr	r2, [pc, #196]	; (8015614 <HAL_TIM_PWM_Start+0x208>)
 8015550:	4293      	cmp	r3, r2
 8015552:	d101      	bne.n	8015558 <HAL_TIM_PWM_Start+0x14c>
 8015554:	2301      	movs	r3, #1
 8015556:	e000      	b.n	801555a <HAL_TIM_PWM_Start+0x14e>
 8015558:	2300      	movs	r3, #0
 801555a:	2b00      	cmp	r3, #0
 801555c:	d007      	beq.n	801556e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801556c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	4a23      	ldr	r2, [pc, #140]	; (8015600 <HAL_TIM_PWM_Start+0x1f4>)
 8015574:	4293      	cmp	r3, r2
 8015576:	d01d      	beq.n	80155b4 <HAL_TIM_PWM_Start+0x1a8>
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015580:	d018      	beq.n	80155b4 <HAL_TIM_PWM_Start+0x1a8>
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	4a24      	ldr	r2, [pc, #144]	; (8015618 <HAL_TIM_PWM_Start+0x20c>)
 8015588:	4293      	cmp	r3, r2
 801558a:	d013      	beq.n	80155b4 <HAL_TIM_PWM_Start+0x1a8>
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	4a22      	ldr	r2, [pc, #136]	; (801561c <HAL_TIM_PWM_Start+0x210>)
 8015592:	4293      	cmp	r3, r2
 8015594:	d00e      	beq.n	80155b4 <HAL_TIM_PWM_Start+0x1a8>
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	4a1a      	ldr	r2, [pc, #104]	; (8015604 <HAL_TIM_PWM_Start+0x1f8>)
 801559c:	4293      	cmp	r3, r2
 801559e:	d009      	beq.n	80155b4 <HAL_TIM_PWM_Start+0x1a8>
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	4a18      	ldr	r2, [pc, #96]	; (8015608 <HAL_TIM_PWM_Start+0x1fc>)
 80155a6:	4293      	cmp	r3, r2
 80155a8:	d004      	beq.n	80155b4 <HAL_TIM_PWM_Start+0x1a8>
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	4a19      	ldr	r2, [pc, #100]	; (8015614 <HAL_TIM_PWM_Start+0x208>)
 80155b0:	4293      	cmp	r3, r2
 80155b2:	d115      	bne.n	80155e0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	689a      	ldr	r2, [r3, #8]
 80155ba:	4b19      	ldr	r3, [pc, #100]	; (8015620 <HAL_TIM_PWM_Start+0x214>)
 80155bc:	4013      	ands	r3, r2
 80155be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	2b06      	cmp	r3, #6
 80155c4:	d015      	beq.n	80155f2 <HAL_TIM_PWM_Start+0x1e6>
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80155cc:	d011      	beq.n	80155f2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	681a      	ldr	r2, [r3, #0]
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	f042 0201 	orr.w	r2, r2, #1
 80155dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80155de:	e008      	b.n	80155f2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	681a      	ldr	r2, [r3, #0]
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	f042 0201 	orr.w	r2, r2, #1
 80155ee:	601a      	str	r2, [r3, #0]
 80155f0:	e000      	b.n	80155f4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80155f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80155f4:	2300      	movs	r3, #0
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	3710      	adds	r7, #16
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bd80      	pop	{r7, pc}
 80155fe:	bf00      	nop
 8015600:	40012c00 	.word	0x40012c00
 8015604:	40013400 	.word	0x40013400
 8015608:	40014000 	.word	0x40014000
 801560c:	40014400 	.word	0x40014400
 8015610:	40014800 	.word	0x40014800
 8015614:	40015000 	.word	0x40015000
 8015618:	40000400 	.word	0x40000400
 801561c:	40000800 	.word	0x40000800
 8015620:	00010007 	.word	0x00010007

08015624 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015624:	b580      	push	{r7, lr}
 8015626:	b082      	sub	sp, #8
 8015628:	af00      	add	r7, sp, #0
 801562a:	6078      	str	r0, [r7, #4]
 801562c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	2200      	movs	r2, #0
 8015634:	6839      	ldr	r1, [r7, #0]
 8015636:	4618      	mov	r0, r3
 8015638:	f000 ff1e 	bl	8016478 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	4a40      	ldr	r2, [pc, #256]	; (8015744 <HAL_TIM_PWM_Stop+0x120>)
 8015642:	4293      	cmp	r3, r2
 8015644:	d018      	beq.n	8015678 <HAL_TIM_PWM_Stop+0x54>
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	4a3f      	ldr	r2, [pc, #252]	; (8015748 <HAL_TIM_PWM_Stop+0x124>)
 801564c:	4293      	cmp	r3, r2
 801564e:	d013      	beq.n	8015678 <HAL_TIM_PWM_Stop+0x54>
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	4a3d      	ldr	r2, [pc, #244]	; (801574c <HAL_TIM_PWM_Stop+0x128>)
 8015656:	4293      	cmp	r3, r2
 8015658:	d00e      	beq.n	8015678 <HAL_TIM_PWM_Stop+0x54>
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	4a3c      	ldr	r2, [pc, #240]	; (8015750 <HAL_TIM_PWM_Stop+0x12c>)
 8015660:	4293      	cmp	r3, r2
 8015662:	d009      	beq.n	8015678 <HAL_TIM_PWM_Stop+0x54>
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	4a3a      	ldr	r2, [pc, #232]	; (8015754 <HAL_TIM_PWM_Stop+0x130>)
 801566a:	4293      	cmp	r3, r2
 801566c:	d004      	beq.n	8015678 <HAL_TIM_PWM_Stop+0x54>
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	4a39      	ldr	r2, [pc, #228]	; (8015758 <HAL_TIM_PWM_Stop+0x134>)
 8015674:	4293      	cmp	r3, r2
 8015676:	d101      	bne.n	801567c <HAL_TIM_PWM_Stop+0x58>
 8015678:	2301      	movs	r3, #1
 801567a:	e000      	b.n	801567e <HAL_TIM_PWM_Stop+0x5a>
 801567c:	2300      	movs	r3, #0
 801567e:	2b00      	cmp	r3, #0
 8015680:	d017      	beq.n	80156b2 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	6a1a      	ldr	r2, [r3, #32]
 8015688:	f241 1311 	movw	r3, #4369	; 0x1111
 801568c:	4013      	ands	r3, r2
 801568e:	2b00      	cmp	r3, #0
 8015690:	d10f      	bne.n	80156b2 <HAL_TIM_PWM_Stop+0x8e>
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	6a1a      	ldr	r2, [r3, #32]
 8015698:	f244 4344 	movw	r3, #17476	; 0x4444
 801569c:	4013      	ands	r3, r2
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d107      	bne.n	80156b2 <HAL_TIM_PWM_Stop+0x8e>
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80156b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	6a1a      	ldr	r2, [r3, #32]
 80156b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80156bc:	4013      	ands	r3, r2
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d10f      	bne.n	80156e2 <HAL_TIM_PWM_Stop+0xbe>
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	6a1a      	ldr	r2, [r3, #32]
 80156c8:	f244 4344 	movw	r3, #17476	; 0x4444
 80156cc:	4013      	ands	r3, r2
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d107      	bne.n	80156e2 <HAL_TIM_PWM_Stop+0xbe>
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	681a      	ldr	r2, [r3, #0]
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	f022 0201 	bic.w	r2, r2, #1
 80156e0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80156e2:	683b      	ldr	r3, [r7, #0]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d104      	bne.n	80156f2 <HAL_TIM_PWM_Stop+0xce>
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	2201      	movs	r2, #1
 80156ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80156f0:	e023      	b.n	801573a <HAL_TIM_PWM_Stop+0x116>
 80156f2:	683b      	ldr	r3, [r7, #0]
 80156f4:	2b04      	cmp	r3, #4
 80156f6:	d104      	bne.n	8015702 <HAL_TIM_PWM_Stop+0xde>
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	2201      	movs	r2, #1
 80156fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015700:	e01b      	b.n	801573a <HAL_TIM_PWM_Stop+0x116>
 8015702:	683b      	ldr	r3, [r7, #0]
 8015704:	2b08      	cmp	r3, #8
 8015706:	d104      	bne.n	8015712 <HAL_TIM_PWM_Stop+0xee>
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	2201      	movs	r2, #1
 801570c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015710:	e013      	b.n	801573a <HAL_TIM_PWM_Stop+0x116>
 8015712:	683b      	ldr	r3, [r7, #0]
 8015714:	2b0c      	cmp	r3, #12
 8015716:	d104      	bne.n	8015722 <HAL_TIM_PWM_Stop+0xfe>
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	2201      	movs	r2, #1
 801571c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8015720:	e00b      	b.n	801573a <HAL_TIM_PWM_Stop+0x116>
 8015722:	683b      	ldr	r3, [r7, #0]
 8015724:	2b10      	cmp	r3, #16
 8015726:	d104      	bne.n	8015732 <HAL_TIM_PWM_Stop+0x10e>
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	2201      	movs	r2, #1
 801572c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015730:	e003      	b.n	801573a <HAL_TIM_PWM_Stop+0x116>
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	2201      	movs	r2, #1
 8015736:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 801573a:	2300      	movs	r3, #0
}
 801573c:	4618      	mov	r0, r3
 801573e:	3708      	adds	r7, #8
 8015740:	46bd      	mov	sp, r7
 8015742:	bd80      	pop	{r7, pc}
 8015744:	40012c00 	.word	0x40012c00
 8015748:	40013400 	.word	0x40013400
 801574c:	40014000 	.word	0x40014000
 8015750:	40014400 	.word	0x40014400
 8015754:	40014800 	.word	0x40014800
 8015758:	40015000 	.word	0x40015000

0801575c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801575c:	b580      	push	{r7, lr}
 801575e:	b082      	sub	sp, #8
 8015760:	af00      	add	r7, sp, #0
 8015762:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	691b      	ldr	r3, [r3, #16]
 801576a:	f003 0302 	and.w	r3, r3, #2
 801576e:	2b02      	cmp	r3, #2
 8015770:	d122      	bne.n	80157b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	68db      	ldr	r3, [r3, #12]
 8015778:	f003 0302 	and.w	r3, r3, #2
 801577c:	2b02      	cmp	r3, #2
 801577e:	d11b      	bne.n	80157b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	f06f 0202 	mvn.w	r2, #2
 8015788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	2201      	movs	r2, #1
 801578e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	699b      	ldr	r3, [r3, #24]
 8015796:	f003 0303 	and.w	r3, r3, #3
 801579a:	2b00      	cmp	r3, #0
 801579c:	d003      	beq.n	80157a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801579e:	6878      	ldr	r0, [r7, #4]
 80157a0:	f000 fa84 	bl	8015cac <HAL_TIM_IC_CaptureCallback>
 80157a4:	e005      	b.n	80157b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80157a6:	6878      	ldr	r0, [r7, #4]
 80157a8:	f000 fa76 	bl	8015c98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80157ac:	6878      	ldr	r0, [r7, #4]
 80157ae:	f000 fa87 	bl	8015cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	2200      	movs	r2, #0
 80157b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	691b      	ldr	r3, [r3, #16]
 80157be:	f003 0304 	and.w	r3, r3, #4
 80157c2:	2b04      	cmp	r3, #4
 80157c4:	d122      	bne.n	801580c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	68db      	ldr	r3, [r3, #12]
 80157cc:	f003 0304 	and.w	r3, r3, #4
 80157d0:	2b04      	cmp	r3, #4
 80157d2:	d11b      	bne.n	801580c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	f06f 0204 	mvn.w	r2, #4
 80157dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	2202      	movs	r2, #2
 80157e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	699b      	ldr	r3, [r3, #24]
 80157ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d003      	beq.n	80157fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80157f2:	6878      	ldr	r0, [r7, #4]
 80157f4:	f000 fa5a 	bl	8015cac <HAL_TIM_IC_CaptureCallback>
 80157f8:	e005      	b.n	8015806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80157fa:	6878      	ldr	r0, [r7, #4]
 80157fc:	f000 fa4c 	bl	8015c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015800:	6878      	ldr	r0, [r7, #4]
 8015802:	f000 fa5d 	bl	8015cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	2200      	movs	r2, #0
 801580a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	691b      	ldr	r3, [r3, #16]
 8015812:	f003 0308 	and.w	r3, r3, #8
 8015816:	2b08      	cmp	r3, #8
 8015818:	d122      	bne.n	8015860 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	68db      	ldr	r3, [r3, #12]
 8015820:	f003 0308 	and.w	r3, r3, #8
 8015824:	2b08      	cmp	r3, #8
 8015826:	d11b      	bne.n	8015860 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	f06f 0208 	mvn.w	r2, #8
 8015830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	2204      	movs	r2, #4
 8015836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	69db      	ldr	r3, [r3, #28]
 801583e:	f003 0303 	and.w	r3, r3, #3
 8015842:	2b00      	cmp	r3, #0
 8015844:	d003      	beq.n	801584e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015846:	6878      	ldr	r0, [r7, #4]
 8015848:	f000 fa30 	bl	8015cac <HAL_TIM_IC_CaptureCallback>
 801584c:	e005      	b.n	801585a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801584e:	6878      	ldr	r0, [r7, #4]
 8015850:	f000 fa22 	bl	8015c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015854:	6878      	ldr	r0, [r7, #4]
 8015856:	f000 fa33 	bl	8015cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	2200      	movs	r2, #0
 801585e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	691b      	ldr	r3, [r3, #16]
 8015866:	f003 0310 	and.w	r3, r3, #16
 801586a:	2b10      	cmp	r3, #16
 801586c:	d122      	bne.n	80158b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	68db      	ldr	r3, [r3, #12]
 8015874:	f003 0310 	and.w	r3, r3, #16
 8015878:	2b10      	cmp	r3, #16
 801587a:	d11b      	bne.n	80158b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	f06f 0210 	mvn.w	r2, #16
 8015884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	2208      	movs	r2, #8
 801588a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	69db      	ldr	r3, [r3, #28]
 8015892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015896:	2b00      	cmp	r3, #0
 8015898:	d003      	beq.n	80158a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801589a:	6878      	ldr	r0, [r7, #4]
 801589c:	f000 fa06 	bl	8015cac <HAL_TIM_IC_CaptureCallback>
 80158a0:	e005      	b.n	80158ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80158a2:	6878      	ldr	r0, [r7, #4]
 80158a4:	f000 f9f8 	bl	8015c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80158a8:	6878      	ldr	r0, [r7, #4]
 80158aa:	f000 fa09 	bl	8015cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	2200      	movs	r2, #0
 80158b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	691b      	ldr	r3, [r3, #16]
 80158ba:	f003 0301 	and.w	r3, r3, #1
 80158be:	2b01      	cmp	r3, #1
 80158c0:	d10e      	bne.n	80158e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	68db      	ldr	r3, [r3, #12]
 80158c8:	f003 0301 	and.w	r3, r3, #1
 80158cc:	2b01      	cmp	r3, #1
 80158ce:	d107      	bne.n	80158e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	f06f 0201 	mvn.w	r2, #1
 80158d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80158da:	6878      	ldr	r0, [r7, #4]
 80158dc:	f000 f9d2 	bl	8015c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	691b      	ldr	r3, [r3, #16]
 80158e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80158ea:	2b80      	cmp	r3, #128	; 0x80
 80158ec:	d10e      	bne.n	801590c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	68db      	ldr	r3, [r3, #12]
 80158f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80158f8:	2b80      	cmp	r3, #128	; 0x80
 80158fa:	d107      	bne.n	801590c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8015904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8015906:	6878      	ldr	r0, [r7, #4]
 8015908:	f000 ff26 	bl	8016758 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	691b      	ldr	r3, [r3, #16]
 8015912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801591a:	d10e      	bne.n	801593a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	68db      	ldr	r3, [r3, #12]
 8015922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015926:	2b80      	cmp	r3, #128	; 0x80
 8015928:	d107      	bne.n	801593a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8015932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8015934:	6878      	ldr	r0, [r7, #4]
 8015936:	f000 ff19 	bl	801676c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	691b      	ldr	r3, [r3, #16]
 8015940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015944:	2b40      	cmp	r3, #64	; 0x40
 8015946:	d10e      	bne.n	8015966 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	68db      	ldr	r3, [r3, #12]
 801594e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015952:	2b40      	cmp	r3, #64	; 0x40
 8015954:	d107      	bne.n	8015966 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801595e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8015960:	6878      	ldr	r0, [r7, #4]
 8015962:	f000 f9b7 	bl	8015cd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	691b      	ldr	r3, [r3, #16]
 801596c:	f003 0320 	and.w	r3, r3, #32
 8015970:	2b20      	cmp	r3, #32
 8015972:	d10e      	bne.n	8015992 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	68db      	ldr	r3, [r3, #12]
 801597a:	f003 0320 	and.w	r3, r3, #32
 801597e:	2b20      	cmp	r3, #32
 8015980:	d107      	bne.n	8015992 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	f06f 0220 	mvn.w	r2, #32
 801598a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801598c:	6878      	ldr	r0, [r7, #4]
 801598e:	f000 fed9 	bl	8016744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	691b      	ldr	r3, [r3, #16]
 8015998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801599c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80159a0:	d10f      	bne.n	80159c2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	68db      	ldr	r3, [r3, #12]
 80159a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80159ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80159b0:	d107      	bne.n	80159c2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80159ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80159bc:	6878      	ldr	r0, [r7, #4]
 80159be:	f000 fedf 	bl	8016780 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	691b      	ldr	r3, [r3, #16]
 80159c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80159cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80159d0:	d10f      	bne.n	80159f2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	68db      	ldr	r3, [r3, #12]
 80159d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80159dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80159e0:	d107      	bne.n	80159f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80159ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80159ec:	6878      	ldr	r0, [r7, #4]
 80159ee:	f000 fed1 	bl	8016794 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	691b      	ldr	r3, [r3, #16]
 80159f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80159fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015a00:	d10f      	bne.n	8015a22 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	68db      	ldr	r3, [r3, #12]
 8015a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015a10:	d107      	bne.n	8015a22 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8015a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8015a1c:	6878      	ldr	r0, [r7, #4]
 8015a1e:	f000 fec3 	bl	80167a8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	691b      	ldr	r3, [r3, #16]
 8015a28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015a2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015a30:	d10f      	bne.n	8015a52 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	68db      	ldr	r3, [r3, #12]
 8015a38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015a3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015a40:	d107      	bne.n	8015a52 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8015a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8015a4c:	6878      	ldr	r0, [r7, #4]
 8015a4e:	f000 feb5 	bl	80167bc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8015a52:	bf00      	nop
 8015a54:	3708      	adds	r7, #8
 8015a56:	46bd      	mov	sp, r7
 8015a58:	bd80      	pop	{r7, pc}
	...

08015a5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b086      	sub	sp, #24
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	60f8      	str	r0, [r7, #12]
 8015a64:	60b9      	str	r1, [r7, #8]
 8015a66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015a68:	2300      	movs	r3, #0
 8015a6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015a72:	2b01      	cmp	r3, #1
 8015a74:	d101      	bne.n	8015a7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8015a76:	2302      	movs	r3, #2
 8015a78:	e0ff      	b.n	8015c7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	2201      	movs	r2, #1
 8015a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	2b14      	cmp	r3, #20
 8015a86:	f200 80f0 	bhi.w	8015c6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8015a8a:	a201      	add	r2, pc, #4	; (adr r2, 8015a90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8015a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a90:	08015ae5 	.word	0x08015ae5
 8015a94:	08015c6b 	.word	0x08015c6b
 8015a98:	08015c6b 	.word	0x08015c6b
 8015a9c:	08015c6b 	.word	0x08015c6b
 8015aa0:	08015b25 	.word	0x08015b25
 8015aa4:	08015c6b 	.word	0x08015c6b
 8015aa8:	08015c6b 	.word	0x08015c6b
 8015aac:	08015c6b 	.word	0x08015c6b
 8015ab0:	08015b67 	.word	0x08015b67
 8015ab4:	08015c6b 	.word	0x08015c6b
 8015ab8:	08015c6b 	.word	0x08015c6b
 8015abc:	08015c6b 	.word	0x08015c6b
 8015ac0:	08015ba7 	.word	0x08015ba7
 8015ac4:	08015c6b 	.word	0x08015c6b
 8015ac8:	08015c6b 	.word	0x08015c6b
 8015acc:	08015c6b 	.word	0x08015c6b
 8015ad0:	08015be9 	.word	0x08015be9
 8015ad4:	08015c6b 	.word	0x08015c6b
 8015ad8:	08015c6b 	.word	0x08015c6b
 8015adc:	08015c6b 	.word	0x08015c6b
 8015ae0:	08015c29 	.word	0x08015c29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	68b9      	ldr	r1, [r7, #8]
 8015aea:	4618      	mov	r0, r3
 8015aec:	f000 f99a 	bl	8015e24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	699a      	ldr	r2, [r3, #24]
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	f042 0208 	orr.w	r2, r2, #8
 8015afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	699a      	ldr	r2, [r3, #24]
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	f022 0204 	bic.w	r2, r2, #4
 8015b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	6999      	ldr	r1, [r3, #24]
 8015b16:	68bb      	ldr	r3, [r7, #8]
 8015b18:	691a      	ldr	r2, [r3, #16]
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	430a      	orrs	r2, r1
 8015b20:	619a      	str	r2, [r3, #24]
      break;
 8015b22:	e0a5      	b.n	8015c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	68b9      	ldr	r1, [r7, #8]
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	f000 fa14 	bl	8015f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	699a      	ldr	r2, [r3, #24]
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	699a      	ldr	r2, [r3, #24]
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	6999      	ldr	r1, [r3, #24]
 8015b56:	68bb      	ldr	r3, [r7, #8]
 8015b58:	691b      	ldr	r3, [r3, #16]
 8015b5a:	021a      	lsls	r2, r3, #8
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	430a      	orrs	r2, r1
 8015b62:	619a      	str	r2, [r3, #24]
      break;
 8015b64:	e084      	b.n	8015c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	68b9      	ldr	r1, [r7, #8]
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	f000 fa87 	bl	8016080 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	69da      	ldr	r2, [r3, #28]
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	f042 0208 	orr.w	r2, r2, #8
 8015b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	69da      	ldr	r2, [r3, #28]
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	f022 0204 	bic.w	r2, r2, #4
 8015b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	69d9      	ldr	r1, [r3, #28]
 8015b98:	68bb      	ldr	r3, [r7, #8]
 8015b9a:	691a      	ldr	r2, [r3, #16]
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	430a      	orrs	r2, r1
 8015ba2:	61da      	str	r2, [r3, #28]
      break;
 8015ba4:	e064      	b.n	8015c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	68b9      	ldr	r1, [r7, #8]
 8015bac:	4618      	mov	r0, r3
 8015bae:	f000 faf9 	bl	80161a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	69da      	ldr	r2, [r3, #28]
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	69da      	ldr	r2, [r3, #28]
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	69d9      	ldr	r1, [r3, #28]
 8015bd8:	68bb      	ldr	r3, [r7, #8]
 8015bda:	691b      	ldr	r3, [r3, #16]
 8015bdc:	021a      	lsls	r2, r3, #8
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	430a      	orrs	r2, r1
 8015be4:	61da      	str	r2, [r3, #28]
      break;
 8015be6:	e043      	b.n	8015c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	68b9      	ldr	r1, [r7, #8]
 8015bee:	4618      	mov	r0, r3
 8015bf0:	f000 fb6c 	bl	80162cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	f042 0208 	orr.w	r2, r2, #8
 8015c02:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	f022 0204 	bic.w	r2, r2, #4
 8015c12:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8015c1a:	68bb      	ldr	r3, [r7, #8]
 8015c1c:	691a      	ldr	r2, [r3, #16]
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	430a      	orrs	r2, r1
 8015c24:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8015c26:	e023      	b.n	8015c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	68b9      	ldr	r1, [r7, #8]
 8015c2e:	4618      	mov	r0, r3
 8015c30:	f000 fbb6 	bl	80163a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015c42:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015c52:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8015c5a:	68bb      	ldr	r3, [r7, #8]
 8015c5c:	691b      	ldr	r3, [r3, #16]
 8015c5e:	021a      	lsls	r2, r3, #8
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	430a      	orrs	r2, r1
 8015c66:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8015c68:	e002      	b.n	8015c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8015c6a:	2301      	movs	r3, #1
 8015c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8015c6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	2200      	movs	r2, #0
 8015c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8015c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	3718      	adds	r7, #24
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	bd80      	pop	{r7, pc}
 8015c82:	bf00      	nop

08015c84 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015c84:	b480      	push	{r7}
 8015c86:	b083      	sub	sp, #12
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8015c8c:	bf00      	nop
 8015c8e:	370c      	adds	r7, #12
 8015c90:	46bd      	mov	sp, r7
 8015c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c96:	4770      	bx	lr

08015c98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015c98:	b480      	push	{r7}
 8015c9a:	b083      	sub	sp, #12
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015ca0:	bf00      	nop
 8015ca2:	370c      	adds	r7, #12
 8015ca4:	46bd      	mov	sp, r7
 8015ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015caa:	4770      	bx	lr

08015cac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8015cac:	b480      	push	{r7}
 8015cae:	b083      	sub	sp, #12
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8015cb4:	bf00      	nop
 8015cb6:	370c      	adds	r7, #12
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cbe:	4770      	bx	lr

08015cc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8015cc0:	b480      	push	{r7}
 8015cc2:	b083      	sub	sp, #12
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015cc8:	bf00      	nop
 8015cca:	370c      	adds	r7, #12
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cd2:	4770      	bx	lr

08015cd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8015cd4:	b480      	push	{r7}
 8015cd6:	b083      	sub	sp, #12
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8015cdc:	bf00      	nop
 8015cde:	370c      	adds	r7, #12
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce6:	4770      	bx	lr

08015ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8015ce8:	b480      	push	{r7}
 8015cea:	b085      	sub	sp, #20
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
 8015cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	4a42      	ldr	r2, [pc, #264]	; (8015e04 <TIM_Base_SetConfig+0x11c>)
 8015cfc:	4293      	cmp	r3, r2
 8015cfe:	d013      	beq.n	8015d28 <TIM_Base_SetConfig+0x40>
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015d06:	d00f      	beq.n	8015d28 <TIM_Base_SetConfig+0x40>
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	4a3f      	ldr	r2, [pc, #252]	; (8015e08 <TIM_Base_SetConfig+0x120>)
 8015d0c:	4293      	cmp	r3, r2
 8015d0e:	d00b      	beq.n	8015d28 <TIM_Base_SetConfig+0x40>
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	4a3e      	ldr	r2, [pc, #248]	; (8015e0c <TIM_Base_SetConfig+0x124>)
 8015d14:	4293      	cmp	r3, r2
 8015d16:	d007      	beq.n	8015d28 <TIM_Base_SetConfig+0x40>
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	4a3d      	ldr	r2, [pc, #244]	; (8015e10 <TIM_Base_SetConfig+0x128>)
 8015d1c:	4293      	cmp	r3, r2
 8015d1e:	d003      	beq.n	8015d28 <TIM_Base_SetConfig+0x40>
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	4a3c      	ldr	r2, [pc, #240]	; (8015e14 <TIM_Base_SetConfig+0x12c>)
 8015d24:	4293      	cmp	r3, r2
 8015d26:	d108      	bne.n	8015d3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015d30:	683b      	ldr	r3, [r7, #0]
 8015d32:	685b      	ldr	r3, [r3, #4]
 8015d34:	68fa      	ldr	r2, [r7, #12]
 8015d36:	4313      	orrs	r3, r2
 8015d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	4a31      	ldr	r2, [pc, #196]	; (8015e04 <TIM_Base_SetConfig+0x11c>)
 8015d3e:	4293      	cmp	r3, r2
 8015d40:	d01f      	beq.n	8015d82 <TIM_Base_SetConfig+0x9a>
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015d48:	d01b      	beq.n	8015d82 <TIM_Base_SetConfig+0x9a>
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	4a2e      	ldr	r2, [pc, #184]	; (8015e08 <TIM_Base_SetConfig+0x120>)
 8015d4e:	4293      	cmp	r3, r2
 8015d50:	d017      	beq.n	8015d82 <TIM_Base_SetConfig+0x9a>
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	4a2d      	ldr	r2, [pc, #180]	; (8015e0c <TIM_Base_SetConfig+0x124>)
 8015d56:	4293      	cmp	r3, r2
 8015d58:	d013      	beq.n	8015d82 <TIM_Base_SetConfig+0x9a>
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	4a2c      	ldr	r2, [pc, #176]	; (8015e10 <TIM_Base_SetConfig+0x128>)
 8015d5e:	4293      	cmp	r3, r2
 8015d60:	d00f      	beq.n	8015d82 <TIM_Base_SetConfig+0x9a>
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	4a2c      	ldr	r2, [pc, #176]	; (8015e18 <TIM_Base_SetConfig+0x130>)
 8015d66:	4293      	cmp	r3, r2
 8015d68:	d00b      	beq.n	8015d82 <TIM_Base_SetConfig+0x9a>
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	4a2b      	ldr	r2, [pc, #172]	; (8015e1c <TIM_Base_SetConfig+0x134>)
 8015d6e:	4293      	cmp	r3, r2
 8015d70:	d007      	beq.n	8015d82 <TIM_Base_SetConfig+0x9a>
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	4a2a      	ldr	r2, [pc, #168]	; (8015e20 <TIM_Base_SetConfig+0x138>)
 8015d76:	4293      	cmp	r3, r2
 8015d78:	d003      	beq.n	8015d82 <TIM_Base_SetConfig+0x9a>
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	4a25      	ldr	r2, [pc, #148]	; (8015e14 <TIM_Base_SetConfig+0x12c>)
 8015d7e:	4293      	cmp	r3, r2
 8015d80:	d108      	bne.n	8015d94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015d8a:	683b      	ldr	r3, [r7, #0]
 8015d8c:	68db      	ldr	r3, [r3, #12]
 8015d8e:	68fa      	ldr	r2, [r7, #12]
 8015d90:	4313      	orrs	r3, r2
 8015d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015d9a:	683b      	ldr	r3, [r7, #0]
 8015d9c:	695b      	ldr	r3, [r3, #20]
 8015d9e:	4313      	orrs	r3, r2
 8015da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	68fa      	ldr	r2, [r7, #12]
 8015da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015da8:	683b      	ldr	r3, [r7, #0]
 8015daa:	689a      	ldr	r2, [r3, #8]
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015db0:	683b      	ldr	r3, [r7, #0]
 8015db2:	681a      	ldr	r2, [r3, #0]
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	4a12      	ldr	r2, [pc, #72]	; (8015e04 <TIM_Base_SetConfig+0x11c>)
 8015dbc:	4293      	cmp	r3, r2
 8015dbe:	d013      	beq.n	8015de8 <TIM_Base_SetConfig+0x100>
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	4a13      	ldr	r2, [pc, #76]	; (8015e10 <TIM_Base_SetConfig+0x128>)
 8015dc4:	4293      	cmp	r3, r2
 8015dc6:	d00f      	beq.n	8015de8 <TIM_Base_SetConfig+0x100>
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	4a13      	ldr	r2, [pc, #76]	; (8015e18 <TIM_Base_SetConfig+0x130>)
 8015dcc:	4293      	cmp	r3, r2
 8015dce:	d00b      	beq.n	8015de8 <TIM_Base_SetConfig+0x100>
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	4a12      	ldr	r2, [pc, #72]	; (8015e1c <TIM_Base_SetConfig+0x134>)
 8015dd4:	4293      	cmp	r3, r2
 8015dd6:	d007      	beq.n	8015de8 <TIM_Base_SetConfig+0x100>
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	4a11      	ldr	r2, [pc, #68]	; (8015e20 <TIM_Base_SetConfig+0x138>)
 8015ddc:	4293      	cmp	r3, r2
 8015dde:	d003      	beq.n	8015de8 <TIM_Base_SetConfig+0x100>
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	4a0c      	ldr	r2, [pc, #48]	; (8015e14 <TIM_Base_SetConfig+0x12c>)
 8015de4:	4293      	cmp	r3, r2
 8015de6:	d103      	bne.n	8015df0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015de8:	683b      	ldr	r3, [r7, #0]
 8015dea:	691a      	ldr	r2, [r3, #16]
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	2201      	movs	r2, #1
 8015df4:	615a      	str	r2, [r3, #20]
}
 8015df6:	bf00      	nop
 8015df8:	3714      	adds	r7, #20
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e00:	4770      	bx	lr
 8015e02:	bf00      	nop
 8015e04:	40012c00 	.word	0x40012c00
 8015e08:	40000400 	.word	0x40000400
 8015e0c:	40000800 	.word	0x40000800
 8015e10:	40013400 	.word	0x40013400
 8015e14:	40015000 	.word	0x40015000
 8015e18:	40014000 	.word	0x40014000
 8015e1c:	40014400 	.word	0x40014400
 8015e20:	40014800 	.word	0x40014800

08015e24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015e24:	b480      	push	{r7}
 8015e26:	b087      	sub	sp, #28
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
 8015e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	6a1b      	ldr	r3, [r3, #32]
 8015e32:	f023 0201 	bic.w	r2, r3, #1
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	6a1b      	ldr	r3, [r3, #32]
 8015e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	685b      	ldr	r3, [r3, #4]
 8015e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	699b      	ldr	r3, [r3, #24]
 8015e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	f023 0303 	bic.w	r3, r3, #3
 8015e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015e60:	683b      	ldr	r3, [r7, #0]
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	68fa      	ldr	r2, [r7, #12]
 8015e66:	4313      	orrs	r3, r2
 8015e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8015e6a:	697b      	ldr	r3, [r7, #20]
 8015e6c:	f023 0302 	bic.w	r3, r3, #2
 8015e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8015e72:	683b      	ldr	r3, [r7, #0]
 8015e74:	689b      	ldr	r3, [r3, #8]
 8015e76:	697a      	ldr	r2, [r7, #20]
 8015e78:	4313      	orrs	r3, r2
 8015e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	4a30      	ldr	r2, [pc, #192]	; (8015f40 <TIM_OC1_SetConfig+0x11c>)
 8015e80:	4293      	cmp	r3, r2
 8015e82:	d013      	beq.n	8015eac <TIM_OC1_SetConfig+0x88>
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	4a2f      	ldr	r2, [pc, #188]	; (8015f44 <TIM_OC1_SetConfig+0x120>)
 8015e88:	4293      	cmp	r3, r2
 8015e8a:	d00f      	beq.n	8015eac <TIM_OC1_SetConfig+0x88>
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	4a2e      	ldr	r2, [pc, #184]	; (8015f48 <TIM_OC1_SetConfig+0x124>)
 8015e90:	4293      	cmp	r3, r2
 8015e92:	d00b      	beq.n	8015eac <TIM_OC1_SetConfig+0x88>
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	4a2d      	ldr	r2, [pc, #180]	; (8015f4c <TIM_OC1_SetConfig+0x128>)
 8015e98:	4293      	cmp	r3, r2
 8015e9a:	d007      	beq.n	8015eac <TIM_OC1_SetConfig+0x88>
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	4a2c      	ldr	r2, [pc, #176]	; (8015f50 <TIM_OC1_SetConfig+0x12c>)
 8015ea0:	4293      	cmp	r3, r2
 8015ea2:	d003      	beq.n	8015eac <TIM_OC1_SetConfig+0x88>
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	4a2b      	ldr	r2, [pc, #172]	; (8015f54 <TIM_OC1_SetConfig+0x130>)
 8015ea8:	4293      	cmp	r3, r2
 8015eaa:	d10c      	bne.n	8015ec6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8015eac:	697b      	ldr	r3, [r7, #20]
 8015eae:	f023 0308 	bic.w	r3, r3, #8
 8015eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8015eb4:	683b      	ldr	r3, [r7, #0]
 8015eb6:	68db      	ldr	r3, [r3, #12]
 8015eb8:	697a      	ldr	r2, [r7, #20]
 8015eba:	4313      	orrs	r3, r2
 8015ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8015ebe:	697b      	ldr	r3, [r7, #20]
 8015ec0:	f023 0304 	bic.w	r3, r3, #4
 8015ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	4a1d      	ldr	r2, [pc, #116]	; (8015f40 <TIM_OC1_SetConfig+0x11c>)
 8015eca:	4293      	cmp	r3, r2
 8015ecc:	d013      	beq.n	8015ef6 <TIM_OC1_SetConfig+0xd2>
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	4a1c      	ldr	r2, [pc, #112]	; (8015f44 <TIM_OC1_SetConfig+0x120>)
 8015ed2:	4293      	cmp	r3, r2
 8015ed4:	d00f      	beq.n	8015ef6 <TIM_OC1_SetConfig+0xd2>
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	4a1b      	ldr	r2, [pc, #108]	; (8015f48 <TIM_OC1_SetConfig+0x124>)
 8015eda:	4293      	cmp	r3, r2
 8015edc:	d00b      	beq.n	8015ef6 <TIM_OC1_SetConfig+0xd2>
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	4a1a      	ldr	r2, [pc, #104]	; (8015f4c <TIM_OC1_SetConfig+0x128>)
 8015ee2:	4293      	cmp	r3, r2
 8015ee4:	d007      	beq.n	8015ef6 <TIM_OC1_SetConfig+0xd2>
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	4a19      	ldr	r2, [pc, #100]	; (8015f50 <TIM_OC1_SetConfig+0x12c>)
 8015eea:	4293      	cmp	r3, r2
 8015eec:	d003      	beq.n	8015ef6 <TIM_OC1_SetConfig+0xd2>
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	4a18      	ldr	r2, [pc, #96]	; (8015f54 <TIM_OC1_SetConfig+0x130>)
 8015ef2:	4293      	cmp	r3, r2
 8015ef4:	d111      	bne.n	8015f1a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8015ef6:	693b      	ldr	r3, [r7, #16]
 8015ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8015efe:	693b      	ldr	r3, [r7, #16]
 8015f00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8015f06:	683b      	ldr	r3, [r7, #0]
 8015f08:	695b      	ldr	r3, [r3, #20]
 8015f0a:	693a      	ldr	r2, [r7, #16]
 8015f0c:	4313      	orrs	r3, r2
 8015f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8015f10:	683b      	ldr	r3, [r7, #0]
 8015f12:	699b      	ldr	r3, [r3, #24]
 8015f14:	693a      	ldr	r2, [r7, #16]
 8015f16:	4313      	orrs	r3, r2
 8015f18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	693a      	ldr	r2, [r7, #16]
 8015f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	68fa      	ldr	r2, [r7, #12]
 8015f24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8015f26:	683b      	ldr	r3, [r7, #0]
 8015f28:	685a      	ldr	r2, [r3, #4]
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	697a      	ldr	r2, [r7, #20]
 8015f32:	621a      	str	r2, [r3, #32]
}
 8015f34:	bf00      	nop
 8015f36:	371c      	adds	r7, #28
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f3e:	4770      	bx	lr
 8015f40:	40012c00 	.word	0x40012c00
 8015f44:	40013400 	.word	0x40013400
 8015f48:	40014000 	.word	0x40014000
 8015f4c:	40014400 	.word	0x40014400
 8015f50:	40014800 	.word	0x40014800
 8015f54:	40015000 	.word	0x40015000

08015f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015f58:	b480      	push	{r7}
 8015f5a:	b087      	sub	sp, #28
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
 8015f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	6a1b      	ldr	r3, [r3, #32]
 8015f66:	f023 0210 	bic.w	r2, r3, #16
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	6a1b      	ldr	r3, [r3, #32]
 8015f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	685b      	ldr	r3, [r3, #4]
 8015f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	699b      	ldr	r3, [r3, #24]
 8015f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8015f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015f94:	683b      	ldr	r3, [r7, #0]
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	021b      	lsls	r3, r3, #8
 8015f9a:	68fa      	ldr	r2, [r7, #12]
 8015f9c:	4313      	orrs	r3, r2
 8015f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8015fa0:	697b      	ldr	r3, [r7, #20]
 8015fa2:	f023 0320 	bic.w	r3, r3, #32
 8015fa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8015fa8:	683b      	ldr	r3, [r7, #0]
 8015faa:	689b      	ldr	r3, [r3, #8]
 8015fac:	011b      	lsls	r3, r3, #4
 8015fae:	697a      	ldr	r2, [r7, #20]
 8015fb0:	4313      	orrs	r3, r2
 8015fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	4a2c      	ldr	r2, [pc, #176]	; (8016068 <TIM_OC2_SetConfig+0x110>)
 8015fb8:	4293      	cmp	r3, r2
 8015fba:	d007      	beq.n	8015fcc <TIM_OC2_SetConfig+0x74>
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	4a2b      	ldr	r2, [pc, #172]	; (801606c <TIM_OC2_SetConfig+0x114>)
 8015fc0:	4293      	cmp	r3, r2
 8015fc2:	d003      	beq.n	8015fcc <TIM_OC2_SetConfig+0x74>
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	4a2a      	ldr	r2, [pc, #168]	; (8016070 <TIM_OC2_SetConfig+0x118>)
 8015fc8:	4293      	cmp	r3, r2
 8015fca:	d10d      	bne.n	8015fe8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8015fd4:	683b      	ldr	r3, [r7, #0]
 8015fd6:	68db      	ldr	r3, [r3, #12]
 8015fd8:	011b      	lsls	r3, r3, #4
 8015fda:	697a      	ldr	r2, [r7, #20]
 8015fdc:	4313      	orrs	r3, r2
 8015fde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8015fe0:	697b      	ldr	r3, [r7, #20]
 8015fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015fe6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	4a1f      	ldr	r2, [pc, #124]	; (8016068 <TIM_OC2_SetConfig+0x110>)
 8015fec:	4293      	cmp	r3, r2
 8015fee:	d013      	beq.n	8016018 <TIM_OC2_SetConfig+0xc0>
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	4a1e      	ldr	r2, [pc, #120]	; (801606c <TIM_OC2_SetConfig+0x114>)
 8015ff4:	4293      	cmp	r3, r2
 8015ff6:	d00f      	beq.n	8016018 <TIM_OC2_SetConfig+0xc0>
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	4a1e      	ldr	r2, [pc, #120]	; (8016074 <TIM_OC2_SetConfig+0x11c>)
 8015ffc:	4293      	cmp	r3, r2
 8015ffe:	d00b      	beq.n	8016018 <TIM_OC2_SetConfig+0xc0>
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	4a1d      	ldr	r2, [pc, #116]	; (8016078 <TIM_OC2_SetConfig+0x120>)
 8016004:	4293      	cmp	r3, r2
 8016006:	d007      	beq.n	8016018 <TIM_OC2_SetConfig+0xc0>
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	4a1c      	ldr	r2, [pc, #112]	; (801607c <TIM_OC2_SetConfig+0x124>)
 801600c:	4293      	cmp	r3, r2
 801600e:	d003      	beq.n	8016018 <TIM_OC2_SetConfig+0xc0>
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	4a17      	ldr	r2, [pc, #92]	; (8016070 <TIM_OC2_SetConfig+0x118>)
 8016014:	4293      	cmp	r3, r2
 8016016:	d113      	bne.n	8016040 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8016018:	693b      	ldr	r3, [r7, #16]
 801601a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801601e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8016020:	693b      	ldr	r3, [r7, #16]
 8016022:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016026:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8016028:	683b      	ldr	r3, [r7, #0]
 801602a:	695b      	ldr	r3, [r3, #20]
 801602c:	009b      	lsls	r3, r3, #2
 801602e:	693a      	ldr	r2, [r7, #16]
 8016030:	4313      	orrs	r3, r2
 8016032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8016034:	683b      	ldr	r3, [r7, #0]
 8016036:	699b      	ldr	r3, [r3, #24]
 8016038:	009b      	lsls	r3, r3, #2
 801603a:	693a      	ldr	r2, [r7, #16]
 801603c:	4313      	orrs	r3, r2
 801603e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	693a      	ldr	r2, [r7, #16]
 8016044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	68fa      	ldr	r2, [r7, #12]
 801604a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801604c:	683b      	ldr	r3, [r7, #0]
 801604e:	685a      	ldr	r2, [r3, #4]
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	697a      	ldr	r2, [r7, #20]
 8016058:	621a      	str	r2, [r3, #32]
}
 801605a:	bf00      	nop
 801605c:	371c      	adds	r7, #28
 801605e:	46bd      	mov	sp, r7
 8016060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016064:	4770      	bx	lr
 8016066:	bf00      	nop
 8016068:	40012c00 	.word	0x40012c00
 801606c:	40013400 	.word	0x40013400
 8016070:	40015000 	.word	0x40015000
 8016074:	40014000 	.word	0x40014000
 8016078:	40014400 	.word	0x40014400
 801607c:	40014800 	.word	0x40014800

08016080 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016080:	b480      	push	{r7}
 8016082:	b087      	sub	sp, #28
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
 8016088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	6a1b      	ldr	r3, [r3, #32]
 801608e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	6a1b      	ldr	r3, [r3, #32]
 801609a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	685b      	ldr	r3, [r3, #4]
 80160a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	69db      	ldr	r3, [r3, #28]
 80160a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80160ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80160b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	f023 0303 	bic.w	r3, r3, #3
 80160ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80160bc:	683b      	ldr	r3, [r7, #0]
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	68fa      	ldr	r2, [r7, #12]
 80160c2:	4313      	orrs	r3, r2
 80160c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80160c6:	697b      	ldr	r3, [r7, #20]
 80160c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80160cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80160ce:	683b      	ldr	r3, [r7, #0]
 80160d0:	689b      	ldr	r3, [r3, #8]
 80160d2:	021b      	lsls	r3, r3, #8
 80160d4:	697a      	ldr	r2, [r7, #20]
 80160d6:	4313      	orrs	r3, r2
 80160d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	4a2b      	ldr	r2, [pc, #172]	; (801618c <TIM_OC3_SetConfig+0x10c>)
 80160de:	4293      	cmp	r3, r2
 80160e0:	d007      	beq.n	80160f2 <TIM_OC3_SetConfig+0x72>
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	4a2a      	ldr	r2, [pc, #168]	; (8016190 <TIM_OC3_SetConfig+0x110>)
 80160e6:	4293      	cmp	r3, r2
 80160e8:	d003      	beq.n	80160f2 <TIM_OC3_SetConfig+0x72>
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	4a29      	ldr	r2, [pc, #164]	; (8016194 <TIM_OC3_SetConfig+0x114>)
 80160ee:	4293      	cmp	r3, r2
 80160f0:	d10d      	bne.n	801610e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80160f2:	697b      	ldr	r3, [r7, #20]
 80160f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80160f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	68db      	ldr	r3, [r3, #12]
 80160fe:	021b      	lsls	r3, r3, #8
 8016100:	697a      	ldr	r2, [r7, #20]
 8016102:	4313      	orrs	r3, r2
 8016104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8016106:	697b      	ldr	r3, [r7, #20]
 8016108:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801610c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	4a1e      	ldr	r2, [pc, #120]	; (801618c <TIM_OC3_SetConfig+0x10c>)
 8016112:	4293      	cmp	r3, r2
 8016114:	d013      	beq.n	801613e <TIM_OC3_SetConfig+0xbe>
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	4a1d      	ldr	r2, [pc, #116]	; (8016190 <TIM_OC3_SetConfig+0x110>)
 801611a:	4293      	cmp	r3, r2
 801611c:	d00f      	beq.n	801613e <TIM_OC3_SetConfig+0xbe>
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	4a1d      	ldr	r2, [pc, #116]	; (8016198 <TIM_OC3_SetConfig+0x118>)
 8016122:	4293      	cmp	r3, r2
 8016124:	d00b      	beq.n	801613e <TIM_OC3_SetConfig+0xbe>
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	4a1c      	ldr	r2, [pc, #112]	; (801619c <TIM_OC3_SetConfig+0x11c>)
 801612a:	4293      	cmp	r3, r2
 801612c:	d007      	beq.n	801613e <TIM_OC3_SetConfig+0xbe>
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	4a1b      	ldr	r2, [pc, #108]	; (80161a0 <TIM_OC3_SetConfig+0x120>)
 8016132:	4293      	cmp	r3, r2
 8016134:	d003      	beq.n	801613e <TIM_OC3_SetConfig+0xbe>
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	4a16      	ldr	r2, [pc, #88]	; (8016194 <TIM_OC3_SetConfig+0x114>)
 801613a:	4293      	cmp	r3, r2
 801613c:	d113      	bne.n	8016166 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801613e:	693b      	ldr	r3, [r7, #16]
 8016140:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8016146:	693b      	ldr	r3, [r7, #16]
 8016148:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801614c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801614e:	683b      	ldr	r3, [r7, #0]
 8016150:	695b      	ldr	r3, [r3, #20]
 8016152:	011b      	lsls	r3, r3, #4
 8016154:	693a      	ldr	r2, [r7, #16]
 8016156:	4313      	orrs	r3, r2
 8016158:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801615a:	683b      	ldr	r3, [r7, #0]
 801615c:	699b      	ldr	r3, [r3, #24]
 801615e:	011b      	lsls	r3, r3, #4
 8016160:	693a      	ldr	r2, [r7, #16]
 8016162:	4313      	orrs	r3, r2
 8016164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	693a      	ldr	r2, [r7, #16]
 801616a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	68fa      	ldr	r2, [r7, #12]
 8016170:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016172:	683b      	ldr	r3, [r7, #0]
 8016174:	685a      	ldr	r2, [r3, #4]
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	697a      	ldr	r2, [r7, #20]
 801617e:	621a      	str	r2, [r3, #32]
}
 8016180:	bf00      	nop
 8016182:	371c      	adds	r7, #28
 8016184:	46bd      	mov	sp, r7
 8016186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801618a:	4770      	bx	lr
 801618c:	40012c00 	.word	0x40012c00
 8016190:	40013400 	.word	0x40013400
 8016194:	40015000 	.word	0x40015000
 8016198:	40014000 	.word	0x40014000
 801619c:	40014400 	.word	0x40014400
 80161a0:	40014800 	.word	0x40014800

080161a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80161a4:	b480      	push	{r7}
 80161a6:	b087      	sub	sp, #28
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	6078      	str	r0, [r7, #4]
 80161ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	6a1b      	ldr	r3, [r3, #32]
 80161b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	6a1b      	ldr	r3, [r3, #32]
 80161be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	685b      	ldr	r3, [r3, #4]
 80161c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	69db      	ldr	r3, [r3, #28]
 80161ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80161d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80161d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80161de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80161e0:	683b      	ldr	r3, [r7, #0]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	021b      	lsls	r3, r3, #8
 80161e6:	68fa      	ldr	r2, [r7, #12]
 80161e8:	4313      	orrs	r3, r2
 80161ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80161ec:	697b      	ldr	r3, [r7, #20]
 80161ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80161f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80161f4:	683b      	ldr	r3, [r7, #0]
 80161f6:	689b      	ldr	r3, [r3, #8]
 80161f8:	031b      	lsls	r3, r3, #12
 80161fa:	697a      	ldr	r2, [r7, #20]
 80161fc:	4313      	orrs	r3, r2
 80161fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	4a2c      	ldr	r2, [pc, #176]	; (80162b4 <TIM_OC4_SetConfig+0x110>)
 8016204:	4293      	cmp	r3, r2
 8016206:	d007      	beq.n	8016218 <TIM_OC4_SetConfig+0x74>
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	4a2b      	ldr	r2, [pc, #172]	; (80162b8 <TIM_OC4_SetConfig+0x114>)
 801620c:	4293      	cmp	r3, r2
 801620e:	d003      	beq.n	8016218 <TIM_OC4_SetConfig+0x74>
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	4a2a      	ldr	r2, [pc, #168]	; (80162bc <TIM_OC4_SetConfig+0x118>)
 8016214:	4293      	cmp	r3, r2
 8016216:	d10d      	bne.n	8016234 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8016218:	697b      	ldr	r3, [r7, #20]
 801621a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801621e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8016220:	683b      	ldr	r3, [r7, #0]
 8016222:	68db      	ldr	r3, [r3, #12]
 8016224:	031b      	lsls	r3, r3, #12
 8016226:	697a      	ldr	r2, [r7, #20]
 8016228:	4313      	orrs	r3, r2
 801622a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 801622c:	697b      	ldr	r3, [r7, #20]
 801622e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8016232:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	4a1f      	ldr	r2, [pc, #124]	; (80162b4 <TIM_OC4_SetConfig+0x110>)
 8016238:	4293      	cmp	r3, r2
 801623a:	d013      	beq.n	8016264 <TIM_OC4_SetConfig+0xc0>
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	4a1e      	ldr	r2, [pc, #120]	; (80162b8 <TIM_OC4_SetConfig+0x114>)
 8016240:	4293      	cmp	r3, r2
 8016242:	d00f      	beq.n	8016264 <TIM_OC4_SetConfig+0xc0>
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	4a1e      	ldr	r2, [pc, #120]	; (80162c0 <TIM_OC4_SetConfig+0x11c>)
 8016248:	4293      	cmp	r3, r2
 801624a:	d00b      	beq.n	8016264 <TIM_OC4_SetConfig+0xc0>
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	4a1d      	ldr	r2, [pc, #116]	; (80162c4 <TIM_OC4_SetConfig+0x120>)
 8016250:	4293      	cmp	r3, r2
 8016252:	d007      	beq.n	8016264 <TIM_OC4_SetConfig+0xc0>
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	4a1c      	ldr	r2, [pc, #112]	; (80162c8 <TIM_OC4_SetConfig+0x124>)
 8016258:	4293      	cmp	r3, r2
 801625a:	d003      	beq.n	8016264 <TIM_OC4_SetConfig+0xc0>
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	4a17      	ldr	r2, [pc, #92]	; (80162bc <TIM_OC4_SetConfig+0x118>)
 8016260:	4293      	cmp	r3, r2
 8016262:	d113      	bne.n	801628c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8016264:	693b      	ldr	r3, [r7, #16]
 8016266:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801626a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 801626c:	693b      	ldr	r3, [r7, #16]
 801626e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8016272:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8016274:	683b      	ldr	r3, [r7, #0]
 8016276:	695b      	ldr	r3, [r3, #20]
 8016278:	019b      	lsls	r3, r3, #6
 801627a:	693a      	ldr	r2, [r7, #16]
 801627c:	4313      	orrs	r3, r2
 801627e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8016280:	683b      	ldr	r3, [r7, #0]
 8016282:	699b      	ldr	r3, [r3, #24]
 8016284:	019b      	lsls	r3, r3, #6
 8016286:	693a      	ldr	r2, [r7, #16]
 8016288:	4313      	orrs	r3, r2
 801628a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	693a      	ldr	r2, [r7, #16]
 8016290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	68fa      	ldr	r2, [r7, #12]
 8016296:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016298:	683b      	ldr	r3, [r7, #0]
 801629a:	685a      	ldr	r2, [r3, #4]
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	697a      	ldr	r2, [r7, #20]
 80162a4:	621a      	str	r2, [r3, #32]
}
 80162a6:	bf00      	nop
 80162a8:	371c      	adds	r7, #28
 80162aa:	46bd      	mov	sp, r7
 80162ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b0:	4770      	bx	lr
 80162b2:	bf00      	nop
 80162b4:	40012c00 	.word	0x40012c00
 80162b8:	40013400 	.word	0x40013400
 80162bc:	40015000 	.word	0x40015000
 80162c0:	40014000 	.word	0x40014000
 80162c4:	40014400 	.word	0x40014400
 80162c8:	40014800 	.word	0x40014800

080162cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80162cc:	b480      	push	{r7}
 80162ce:	b087      	sub	sp, #28
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
 80162d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	6a1b      	ldr	r3, [r3, #32]
 80162da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	6a1b      	ldr	r3, [r3, #32]
 80162e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	685b      	ldr	r3, [r3, #4]
 80162ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80162f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80162fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80162fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016300:	683b      	ldr	r3, [r7, #0]
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	68fa      	ldr	r2, [r7, #12]
 8016306:	4313      	orrs	r3, r2
 8016308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801630a:	693b      	ldr	r3, [r7, #16]
 801630c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8016310:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8016312:	683b      	ldr	r3, [r7, #0]
 8016314:	689b      	ldr	r3, [r3, #8]
 8016316:	041b      	lsls	r3, r3, #16
 8016318:	693a      	ldr	r2, [r7, #16]
 801631a:	4313      	orrs	r3, r2
 801631c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	4a19      	ldr	r2, [pc, #100]	; (8016388 <TIM_OC5_SetConfig+0xbc>)
 8016322:	4293      	cmp	r3, r2
 8016324:	d013      	beq.n	801634e <TIM_OC5_SetConfig+0x82>
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	4a18      	ldr	r2, [pc, #96]	; (801638c <TIM_OC5_SetConfig+0xc0>)
 801632a:	4293      	cmp	r3, r2
 801632c:	d00f      	beq.n	801634e <TIM_OC5_SetConfig+0x82>
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	4a17      	ldr	r2, [pc, #92]	; (8016390 <TIM_OC5_SetConfig+0xc4>)
 8016332:	4293      	cmp	r3, r2
 8016334:	d00b      	beq.n	801634e <TIM_OC5_SetConfig+0x82>
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	4a16      	ldr	r2, [pc, #88]	; (8016394 <TIM_OC5_SetConfig+0xc8>)
 801633a:	4293      	cmp	r3, r2
 801633c:	d007      	beq.n	801634e <TIM_OC5_SetConfig+0x82>
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	4a15      	ldr	r2, [pc, #84]	; (8016398 <TIM_OC5_SetConfig+0xcc>)
 8016342:	4293      	cmp	r3, r2
 8016344:	d003      	beq.n	801634e <TIM_OC5_SetConfig+0x82>
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	4a14      	ldr	r2, [pc, #80]	; (801639c <TIM_OC5_SetConfig+0xd0>)
 801634a:	4293      	cmp	r3, r2
 801634c:	d109      	bne.n	8016362 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801634e:	697b      	ldr	r3, [r7, #20]
 8016350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016354:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8016356:	683b      	ldr	r3, [r7, #0]
 8016358:	695b      	ldr	r3, [r3, #20]
 801635a:	021b      	lsls	r3, r3, #8
 801635c:	697a      	ldr	r2, [r7, #20]
 801635e:	4313      	orrs	r3, r2
 8016360:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	697a      	ldr	r2, [r7, #20]
 8016366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	68fa      	ldr	r2, [r7, #12]
 801636c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801636e:	683b      	ldr	r3, [r7, #0]
 8016370:	685a      	ldr	r2, [r3, #4]
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	693a      	ldr	r2, [r7, #16]
 801637a:	621a      	str	r2, [r3, #32]
}
 801637c:	bf00      	nop
 801637e:	371c      	adds	r7, #28
 8016380:	46bd      	mov	sp, r7
 8016382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016386:	4770      	bx	lr
 8016388:	40012c00 	.word	0x40012c00
 801638c:	40013400 	.word	0x40013400
 8016390:	40014000 	.word	0x40014000
 8016394:	40014400 	.word	0x40014400
 8016398:	40014800 	.word	0x40014800
 801639c:	40015000 	.word	0x40015000

080163a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80163a0:	b480      	push	{r7}
 80163a2:	b087      	sub	sp, #28
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
 80163a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	6a1b      	ldr	r3, [r3, #32]
 80163ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	6a1b      	ldr	r3, [r3, #32]
 80163ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	685b      	ldr	r3, [r3, #4]
 80163c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80163c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80163ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80163d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80163d4:	683b      	ldr	r3, [r7, #0]
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	021b      	lsls	r3, r3, #8
 80163da:	68fa      	ldr	r2, [r7, #12]
 80163dc:	4313      	orrs	r3, r2
 80163de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80163e0:	693b      	ldr	r3, [r7, #16]
 80163e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80163e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80163e8:	683b      	ldr	r3, [r7, #0]
 80163ea:	689b      	ldr	r3, [r3, #8]
 80163ec:	051b      	lsls	r3, r3, #20
 80163ee:	693a      	ldr	r2, [r7, #16]
 80163f0:	4313      	orrs	r3, r2
 80163f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	4a1a      	ldr	r2, [pc, #104]	; (8016460 <TIM_OC6_SetConfig+0xc0>)
 80163f8:	4293      	cmp	r3, r2
 80163fa:	d013      	beq.n	8016424 <TIM_OC6_SetConfig+0x84>
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	4a19      	ldr	r2, [pc, #100]	; (8016464 <TIM_OC6_SetConfig+0xc4>)
 8016400:	4293      	cmp	r3, r2
 8016402:	d00f      	beq.n	8016424 <TIM_OC6_SetConfig+0x84>
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	4a18      	ldr	r2, [pc, #96]	; (8016468 <TIM_OC6_SetConfig+0xc8>)
 8016408:	4293      	cmp	r3, r2
 801640a:	d00b      	beq.n	8016424 <TIM_OC6_SetConfig+0x84>
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	4a17      	ldr	r2, [pc, #92]	; (801646c <TIM_OC6_SetConfig+0xcc>)
 8016410:	4293      	cmp	r3, r2
 8016412:	d007      	beq.n	8016424 <TIM_OC6_SetConfig+0x84>
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	4a16      	ldr	r2, [pc, #88]	; (8016470 <TIM_OC6_SetConfig+0xd0>)
 8016418:	4293      	cmp	r3, r2
 801641a:	d003      	beq.n	8016424 <TIM_OC6_SetConfig+0x84>
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	4a15      	ldr	r2, [pc, #84]	; (8016474 <TIM_OC6_SetConfig+0xd4>)
 8016420:	4293      	cmp	r3, r2
 8016422:	d109      	bne.n	8016438 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8016424:	697b      	ldr	r3, [r7, #20]
 8016426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801642a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801642c:	683b      	ldr	r3, [r7, #0]
 801642e:	695b      	ldr	r3, [r3, #20]
 8016430:	029b      	lsls	r3, r3, #10
 8016432:	697a      	ldr	r2, [r7, #20]
 8016434:	4313      	orrs	r3, r2
 8016436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	697a      	ldr	r2, [r7, #20]
 801643c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	68fa      	ldr	r2, [r7, #12]
 8016442:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8016444:	683b      	ldr	r3, [r7, #0]
 8016446:	685a      	ldr	r2, [r3, #4]
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	693a      	ldr	r2, [r7, #16]
 8016450:	621a      	str	r2, [r3, #32]
}
 8016452:	bf00      	nop
 8016454:	371c      	adds	r7, #28
 8016456:	46bd      	mov	sp, r7
 8016458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801645c:	4770      	bx	lr
 801645e:	bf00      	nop
 8016460:	40012c00 	.word	0x40012c00
 8016464:	40013400 	.word	0x40013400
 8016468:	40014000 	.word	0x40014000
 801646c:	40014400 	.word	0x40014400
 8016470:	40014800 	.word	0x40014800
 8016474:	40015000 	.word	0x40015000

08016478 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8016478:	b480      	push	{r7}
 801647a:	b087      	sub	sp, #28
 801647c:	af00      	add	r7, sp, #0
 801647e:	60f8      	str	r0, [r7, #12]
 8016480:	60b9      	str	r1, [r7, #8]
 8016482:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	f003 031f 	and.w	r3, r3, #31
 801648a:	2201      	movs	r2, #1
 801648c:	fa02 f303 	lsl.w	r3, r2, r3
 8016490:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	6a1a      	ldr	r2, [r3, #32]
 8016496:	697b      	ldr	r3, [r7, #20]
 8016498:	43db      	mvns	r3, r3
 801649a:	401a      	ands	r2, r3
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	6a1a      	ldr	r2, [r3, #32]
 80164a4:	68bb      	ldr	r3, [r7, #8]
 80164a6:	f003 031f 	and.w	r3, r3, #31
 80164aa:	6879      	ldr	r1, [r7, #4]
 80164ac:	fa01 f303 	lsl.w	r3, r1, r3
 80164b0:	431a      	orrs	r2, r3
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	621a      	str	r2, [r3, #32]
}
 80164b6:	bf00      	nop
 80164b8:	371c      	adds	r7, #28
 80164ba:	46bd      	mov	sp, r7
 80164bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c0:	4770      	bx	lr
	...

080164c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80164c4:	b480      	push	{r7}
 80164c6:	b085      	sub	sp, #20
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	6078      	str	r0, [r7, #4]
 80164cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80164d4:	2b01      	cmp	r3, #1
 80164d6:	d101      	bne.n	80164dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80164d8:	2302      	movs	r3, #2
 80164da:	e06f      	b.n	80165bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	2201      	movs	r2, #1
 80164e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	2202      	movs	r2, #2
 80164e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	685b      	ldr	r3, [r3, #4]
 80164f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	689b      	ldr	r3, [r3, #8]
 80164fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	4a31      	ldr	r2, [pc, #196]	; (80165c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8016502:	4293      	cmp	r3, r2
 8016504:	d009      	beq.n	801651a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	4a30      	ldr	r2, [pc, #192]	; (80165cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801650c:	4293      	cmp	r3, r2
 801650e:	d004      	beq.n	801651a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	4a2e      	ldr	r2, [pc, #184]	; (80165d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8016516:	4293      	cmp	r3, r2
 8016518:	d108      	bne.n	801652c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8016520:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8016522:	683b      	ldr	r3, [r7, #0]
 8016524:	685b      	ldr	r3, [r3, #4]
 8016526:	68fa      	ldr	r2, [r7, #12]
 8016528:	4313      	orrs	r3, r2
 801652a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8016532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8016538:	683b      	ldr	r3, [r7, #0]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	68fa      	ldr	r2, [r7, #12]
 801653e:	4313      	orrs	r3, r2
 8016540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	68fa      	ldr	r2, [r7, #12]
 8016548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	4a1e      	ldr	r2, [pc, #120]	; (80165c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8016550:	4293      	cmp	r3, r2
 8016552:	d01d      	beq.n	8016590 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801655c:	d018      	beq.n	8016590 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	4a1c      	ldr	r2, [pc, #112]	; (80165d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8016564:	4293      	cmp	r3, r2
 8016566:	d013      	beq.n	8016590 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	4a1a      	ldr	r2, [pc, #104]	; (80165d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801656e:	4293      	cmp	r3, r2
 8016570:	d00e      	beq.n	8016590 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	4a15      	ldr	r2, [pc, #84]	; (80165cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8016578:	4293      	cmp	r3, r2
 801657a:	d009      	beq.n	8016590 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	4a16      	ldr	r2, [pc, #88]	; (80165dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8016582:	4293      	cmp	r3, r2
 8016584:	d004      	beq.n	8016590 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	4a11      	ldr	r2, [pc, #68]	; (80165d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801658c:	4293      	cmp	r3, r2
 801658e:	d10c      	bne.n	80165aa <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8016590:	68bb      	ldr	r3, [r7, #8]
 8016592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016596:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016598:	683b      	ldr	r3, [r7, #0]
 801659a:	689b      	ldr	r3, [r3, #8]
 801659c:	68ba      	ldr	r2, [r7, #8]
 801659e:	4313      	orrs	r3, r2
 80165a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	68ba      	ldr	r2, [r7, #8]
 80165a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	2201      	movs	r2, #1
 80165ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	2200      	movs	r2, #0
 80165b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80165ba:	2300      	movs	r3, #0
}
 80165bc:	4618      	mov	r0, r3
 80165be:	3714      	adds	r7, #20
 80165c0:	46bd      	mov	sp, r7
 80165c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c6:	4770      	bx	lr
 80165c8:	40012c00 	.word	0x40012c00
 80165cc:	40013400 	.word	0x40013400
 80165d0:	40015000 	.word	0x40015000
 80165d4:	40000400 	.word	0x40000400
 80165d8:	40000800 	.word	0x40000800
 80165dc:	40014000 	.word	0x40014000

080165e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80165e0:	b480      	push	{r7}
 80165e2:	b085      	sub	sp, #20
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	6078      	str	r0, [r7, #4]
 80165e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80165ea:	2300      	movs	r3, #0
 80165ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80165f4:	2b01      	cmp	r3, #1
 80165f6:	d101      	bne.n	80165fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80165f8:	2302      	movs	r3, #2
 80165fa:	e096      	b.n	801672a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	2201      	movs	r2, #1
 8016600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801660a:	683b      	ldr	r3, [r7, #0]
 801660c:	68db      	ldr	r3, [r3, #12]
 801660e:	4313      	orrs	r3, r2
 8016610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8016618:	683b      	ldr	r3, [r7, #0]
 801661a:	689b      	ldr	r3, [r3, #8]
 801661c:	4313      	orrs	r3, r2
 801661e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8016626:	683b      	ldr	r3, [r7, #0]
 8016628:	685b      	ldr	r3, [r3, #4]
 801662a:	4313      	orrs	r3, r2
 801662c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8016634:	683b      	ldr	r3, [r7, #0]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	4313      	orrs	r3, r2
 801663a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8016642:	683b      	ldr	r3, [r7, #0]
 8016644:	691b      	ldr	r3, [r3, #16]
 8016646:	4313      	orrs	r3, r2
 8016648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8016650:	683b      	ldr	r3, [r7, #0]
 8016652:	695b      	ldr	r3, [r3, #20]
 8016654:	4313      	orrs	r3, r2
 8016656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801665e:	683b      	ldr	r3, [r7, #0]
 8016660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016662:	4313      	orrs	r3, r2
 8016664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801666c:	683b      	ldr	r3, [r7, #0]
 801666e:	699b      	ldr	r3, [r3, #24]
 8016670:	041b      	lsls	r3, r3, #16
 8016672:	4313      	orrs	r3, r2
 8016674:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	4a2f      	ldr	r2, [pc, #188]	; (8016738 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801667c:	4293      	cmp	r3, r2
 801667e:	d009      	beq.n	8016694 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	4a2d      	ldr	r2, [pc, #180]	; (801673c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8016686:	4293      	cmp	r3, r2
 8016688:	d004      	beq.n	8016694 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	4a2c      	ldr	r2, [pc, #176]	; (8016740 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8016690:	4293      	cmp	r3, r2
 8016692:	d106      	bne.n	80166a2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801669a:	683b      	ldr	r3, [r7, #0]
 801669c:	69db      	ldr	r3, [r3, #28]
 801669e:	4313      	orrs	r3, r2
 80166a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	4a24      	ldr	r2, [pc, #144]	; (8016738 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80166a8:	4293      	cmp	r3, r2
 80166aa:	d009      	beq.n	80166c0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	4a22      	ldr	r2, [pc, #136]	; (801673c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80166b2:	4293      	cmp	r3, r2
 80166b4:	d004      	beq.n	80166c0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	4a21      	ldr	r2, [pc, #132]	; (8016740 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80166bc:	4293      	cmp	r3, r2
 80166be:	d12b      	bne.n	8016718 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80166c6:	683b      	ldr	r3, [r7, #0]
 80166c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166ca:	051b      	lsls	r3, r3, #20
 80166cc:	4313      	orrs	r3, r2
 80166ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80166d6:	683b      	ldr	r3, [r7, #0]
 80166d8:	6a1b      	ldr	r3, [r3, #32]
 80166da:	4313      	orrs	r3, r2
 80166dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80166e4:	683b      	ldr	r3, [r7, #0]
 80166e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166e8:	4313      	orrs	r3, r2
 80166ea:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	4a11      	ldr	r2, [pc, #68]	; (8016738 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80166f2:	4293      	cmp	r3, r2
 80166f4:	d009      	beq.n	801670a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	4a10      	ldr	r2, [pc, #64]	; (801673c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80166fc:	4293      	cmp	r3, r2
 80166fe:	d004      	beq.n	801670a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	4a0e      	ldr	r2, [pc, #56]	; (8016740 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8016706:	4293      	cmp	r3, r2
 8016708:	d106      	bne.n	8016718 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8016710:	683b      	ldr	r3, [r7, #0]
 8016712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016714:	4313      	orrs	r3, r2
 8016716:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	68fa      	ldr	r2, [r7, #12]
 801671e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	2200      	movs	r2, #0
 8016724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016728:	2300      	movs	r3, #0
}
 801672a:	4618      	mov	r0, r3
 801672c:	3714      	adds	r7, #20
 801672e:	46bd      	mov	sp, r7
 8016730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016734:	4770      	bx	lr
 8016736:	bf00      	nop
 8016738:	40012c00 	.word	0x40012c00
 801673c:	40013400 	.word	0x40013400
 8016740:	40015000 	.word	0x40015000

08016744 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8016744:	b480      	push	{r7}
 8016746:	b083      	sub	sp, #12
 8016748:	af00      	add	r7, sp, #0
 801674a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801674c:	bf00      	nop
 801674e:	370c      	adds	r7, #12
 8016750:	46bd      	mov	sp, r7
 8016752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016756:	4770      	bx	lr

08016758 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8016758:	b480      	push	{r7}
 801675a:	b083      	sub	sp, #12
 801675c:	af00      	add	r7, sp, #0
 801675e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8016760:	bf00      	nop
 8016762:	370c      	adds	r7, #12
 8016764:	46bd      	mov	sp, r7
 8016766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801676a:	4770      	bx	lr

0801676c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801676c:	b480      	push	{r7}
 801676e:	b083      	sub	sp, #12
 8016770:	af00      	add	r7, sp, #0
 8016772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8016774:	bf00      	nop
 8016776:	370c      	adds	r7, #12
 8016778:	46bd      	mov	sp, r7
 801677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801677e:	4770      	bx	lr

08016780 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8016780:	b480      	push	{r7}
 8016782:	b083      	sub	sp, #12
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8016788:	bf00      	nop
 801678a:	370c      	adds	r7, #12
 801678c:	46bd      	mov	sp, r7
 801678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016792:	4770      	bx	lr

08016794 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8016794:	b480      	push	{r7}
 8016796:	b083      	sub	sp, #12
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 801679c:	bf00      	nop
 801679e:	370c      	adds	r7, #12
 80167a0:	46bd      	mov	sp, r7
 80167a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a6:	4770      	bx	lr

080167a8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80167a8:	b480      	push	{r7}
 80167aa:	b083      	sub	sp, #12
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80167b0:	bf00      	nop
 80167b2:	370c      	adds	r7, #12
 80167b4:	46bd      	mov	sp, r7
 80167b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ba:	4770      	bx	lr

080167bc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80167bc:	b480      	push	{r7}
 80167be:	b083      	sub	sp, #12
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80167c4:	bf00      	nop
 80167c6:	370c      	adds	r7, #12
 80167c8:	46bd      	mov	sp, r7
 80167ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ce:	4770      	bx	lr

080167d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b082      	sub	sp, #8
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d101      	bne.n	80167e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80167de:	2301      	movs	r3, #1
 80167e0:	e042      	b.n	8016868 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d106      	bne.n	80167fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	2200      	movs	r2, #0
 80167f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80167f4:	6878      	ldr	r0, [r7, #4]
 80167f6:	f7f9 fd53 	bl	80102a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	2224      	movs	r2, #36	; 0x24
 80167fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	681a      	ldr	r2, [r3, #0]
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	f022 0201 	bic.w	r2, r2, #1
 8016810:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8016812:	6878      	ldr	r0, [r7, #4]
 8016814:	f000 f8c2 	bl	801699c <UART_SetConfig>
 8016818:	4603      	mov	r3, r0
 801681a:	2b01      	cmp	r3, #1
 801681c:	d101      	bne.n	8016822 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801681e:	2301      	movs	r3, #1
 8016820:	e022      	b.n	8016868 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016826:	2b00      	cmp	r3, #0
 8016828:	d002      	beq.n	8016830 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801682a:	6878      	ldr	r0, [r7, #4]
 801682c:	f000 fbb2 	bl	8016f94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	685a      	ldr	r2, [r3, #4]
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801683e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	689a      	ldr	r2, [r3, #8]
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801684e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	681a      	ldr	r2, [r3, #0]
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	f042 0201 	orr.w	r2, r2, #1
 801685e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8016860:	6878      	ldr	r0, [r7, #4]
 8016862:	f000 fc39 	bl	80170d8 <UART_CheckIdleState>
 8016866:	4603      	mov	r3, r0
}
 8016868:	4618      	mov	r0, r3
 801686a:	3708      	adds	r7, #8
 801686c:	46bd      	mov	sp, r7
 801686e:	bd80      	pop	{r7, pc}

08016870 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016870:	b580      	push	{r7, lr}
 8016872:	b08a      	sub	sp, #40	; 0x28
 8016874:	af02      	add	r7, sp, #8
 8016876:	60f8      	str	r0, [r7, #12]
 8016878:	60b9      	str	r1, [r7, #8]
 801687a:	603b      	str	r3, [r7, #0]
 801687c:	4613      	mov	r3, r2
 801687e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016886:	2b20      	cmp	r3, #32
 8016888:	f040 8083 	bne.w	8016992 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 801688c:	68bb      	ldr	r3, [r7, #8]
 801688e:	2b00      	cmp	r3, #0
 8016890:	d002      	beq.n	8016898 <HAL_UART_Transmit+0x28>
 8016892:	88fb      	ldrh	r3, [r7, #6]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d101      	bne.n	801689c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8016898:	2301      	movs	r3, #1
 801689a:	e07b      	b.n	8016994 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80168a2:	2b01      	cmp	r3, #1
 80168a4:	d101      	bne.n	80168aa <HAL_UART_Transmit+0x3a>
 80168a6:	2302      	movs	r3, #2
 80168a8:	e074      	b.n	8016994 <HAL_UART_Transmit+0x124>
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	2201      	movs	r2, #1
 80168ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	2200      	movs	r2, #0
 80168b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	2221      	movs	r2, #33	; 0x21
 80168be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80168c2:	f7f9 fdd3 	bl	801046c <HAL_GetTick>
 80168c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	88fa      	ldrh	r2, [r7, #6]
 80168cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	88fa      	ldrh	r2, [r7, #6]
 80168d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	689b      	ldr	r3, [r3, #8]
 80168dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80168e0:	d108      	bne.n	80168f4 <HAL_UART_Transmit+0x84>
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	691b      	ldr	r3, [r3, #16]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d104      	bne.n	80168f4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80168ea:	2300      	movs	r3, #0
 80168ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80168ee:	68bb      	ldr	r3, [r7, #8]
 80168f0:	61bb      	str	r3, [r7, #24]
 80168f2:	e003      	b.n	80168fc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80168f4:	68bb      	ldr	r3, [r7, #8]
 80168f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80168f8:	2300      	movs	r3, #0
 80168fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	2200      	movs	r2, #0
 8016900:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8016904:	e02c      	b.n	8016960 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8016906:	683b      	ldr	r3, [r7, #0]
 8016908:	9300      	str	r3, [sp, #0]
 801690a:	697b      	ldr	r3, [r7, #20]
 801690c:	2200      	movs	r2, #0
 801690e:	2180      	movs	r1, #128	; 0x80
 8016910:	68f8      	ldr	r0, [r7, #12]
 8016912:	f000 fc2c 	bl	801716e <UART_WaitOnFlagUntilTimeout>
 8016916:	4603      	mov	r3, r0
 8016918:	2b00      	cmp	r3, #0
 801691a:	d001      	beq.n	8016920 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 801691c:	2303      	movs	r3, #3
 801691e:	e039      	b.n	8016994 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8016920:	69fb      	ldr	r3, [r7, #28]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d10b      	bne.n	801693e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8016926:	69bb      	ldr	r3, [r7, #24]
 8016928:	881b      	ldrh	r3, [r3, #0]
 801692a:	461a      	mov	r2, r3
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8016934:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8016936:	69bb      	ldr	r3, [r7, #24]
 8016938:	3302      	adds	r3, #2
 801693a:	61bb      	str	r3, [r7, #24]
 801693c:	e007      	b.n	801694e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801693e:	69fb      	ldr	r3, [r7, #28]
 8016940:	781a      	ldrb	r2, [r3, #0]
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8016948:	69fb      	ldr	r3, [r7, #28]
 801694a:	3301      	adds	r3, #1
 801694c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8016954:	b29b      	uxth	r3, r3
 8016956:	3b01      	subs	r3, #1
 8016958:	b29a      	uxth	r2, r3
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8016966:	b29b      	uxth	r3, r3
 8016968:	2b00      	cmp	r3, #0
 801696a:	d1cc      	bne.n	8016906 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801696c:	683b      	ldr	r3, [r7, #0]
 801696e:	9300      	str	r3, [sp, #0]
 8016970:	697b      	ldr	r3, [r7, #20]
 8016972:	2200      	movs	r2, #0
 8016974:	2140      	movs	r1, #64	; 0x40
 8016976:	68f8      	ldr	r0, [r7, #12]
 8016978:	f000 fbf9 	bl	801716e <UART_WaitOnFlagUntilTimeout>
 801697c:	4603      	mov	r3, r0
 801697e:	2b00      	cmp	r3, #0
 8016980:	d001      	beq.n	8016986 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8016982:	2303      	movs	r3, #3
 8016984:	e006      	b.n	8016994 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	2220      	movs	r2, #32
 801698a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801698e:	2300      	movs	r3, #0
 8016990:	e000      	b.n	8016994 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8016992:	2302      	movs	r3, #2
  }
}
 8016994:	4618      	mov	r0, r3
 8016996:	3720      	adds	r7, #32
 8016998:	46bd      	mov	sp, r7
 801699a:	bd80      	pop	{r7, pc}

0801699c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801699c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80169a0:	b08c      	sub	sp, #48	; 0x30
 80169a2:	af00      	add	r7, sp, #0
 80169a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80169a6:	2300      	movs	r3, #0
 80169a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80169ac:	697b      	ldr	r3, [r7, #20]
 80169ae:	689a      	ldr	r2, [r3, #8]
 80169b0:	697b      	ldr	r3, [r7, #20]
 80169b2:	691b      	ldr	r3, [r3, #16]
 80169b4:	431a      	orrs	r2, r3
 80169b6:	697b      	ldr	r3, [r7, #20]
 80169b8:	695b      	ldr	r3, [r3, #20]
 80169ba:	431a      	orrs	r2, r3
 80169bc:	697b      	ldr	r3, [r7, #20]
 80169be:	69db      	ldr	r3, [r3, #28]
 80169c0:	4313      	orrs	r3, r2
 80169c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80169c4:	697b      	ldr	r3, [r7, #20]
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	681a      	ldr	r2, [r3, #0]
 80169ca:	4baa      	ldr	r3, [pc, #680]	; (8016c74 <UART_SetConfig+0x2d8>)
 80169cc:	4013      	ands	r3, r2
 80169ce:	697a      	ldr	r2, [r7, #20]
 80169d0:	6812      	ldr	r2, [r2, #0]
 80169d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80169d4:	430b      	orrs	r3, r1
 80169d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80169d8:	697b      	ldr	r3, [r7, #20]
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	685b      	ldr	r3, [r3, #4]
 80169de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80169e2:	697b      	ldr	r3, [r7, #20]
 80169e4:	68da      	ldr	r2, [r3, #12]
 80169e6:	697b      	ldr	r3, [r7, #20]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	430a      	orrs	r2, r1
 80169ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80169ee:	697b      	ldr	r3, [r7, #20]
 80169f0:	699b      	ldr	r3, [r3, #24]
 80169f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80169f4:	697b      	ldr	r3, [r7, #20]
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	4a9f      	ldr	r2, [pc, #636]	; (8016c78 <UART_SetConfig+0x2dc>)
 80169fa:	4293      	cmp	r3, r2
 80169fc:	d004      	beq.n	8016a08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80169fe:	697b      	ldr	r3, [r7, #20]
 8016a00:	6a1b      	ldr	r3, [r3, #32]
 8016a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a04:	4313      	orrs	r3, r2
 8016a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016a08:	697b      	ldr	r3, [r7, #20]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	689b      	ldr	r3, [r3, #8]
 8016a0e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8016a12:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8016a16:	697a      	ldr	r2, [r7, #20]
 8016a18:	6812      	ldr	r2, [r2, #0]
 8016a1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016a1c:	430b      	orrs	r3, r1
 8016a1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8016a20:	697b      	ldr	r3, [r7, #20]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a26:	f023 010f 	bic.w	r1, r3, #15
 8016a2a:	697b      	ldr	r3, [r7, #20]
 8016a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016a2e:	697b      	ldr	r3, [r7, #20]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	430a      	orrs	r2, r1
 8016a34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016a36:	697b      	ldr	r3, [r7, #20]
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	4a90      	ldr	r2, [pc, #576]	; (8016c7c <UART_SetConfig+0x2e0>)
 8016a3c:	4293      	cmp	r3, r2
 8016a3e:	d125      	bne.n	8016a8c <UART_SetConfig+0xf0>
 8016a40:	4b8f      	ldr	r3, [pc, #572]	; (8016c80 <UART_SetConfig+0x2e4>)
 8016a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016a46:	f003 0303 	and.w	r3, r3, #3
 8016a4a:	2b03      	cmp	r3, #3
 8016a4c:	d81a      	bhi.n	8016a84 <UART_SetConfig+0xe8>
 8016a4e:	a201      	add	r2, pc, #4	; (adr r2, 8016a54 <UART_SetConfig+0xb8>)
 8016a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a54:	08016a65 	.word	0x08016a65
 8016a58:	08016a75 	.word	0x08016a75
 8016a5c:	08016a6d 	.word	0x08016a6d
 8016a60:	08016a7d 	.word	0x08016a7d
 8016a64:	2301      	movs	r3, #1
 8016a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016a6a:	e116      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016a6c:	2302      	movs	r3, #2
 8016a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016a72:	e112      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016a74:	2304      	movs	r3, #4
 8016a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016a7a:	e10e      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016a7c:	2308      	movs	r3, #8
 8016a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016a82:	e10a      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016a84:	2310      	movs	r3, #16
 8016a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016a8a:	e106      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016a8c:	697b      	ldr	r3, [r7, #20]
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	4a7c      	ldr	r2, [pc, #496]	; (8016c84 <UART_SetConfig+0x2e8>)
 8016a92:	4293      	cmp	r3, r2
 8016a94:	d138      	bne.n	8016b08 <UART_SetConfig+0x16c>
 8016a96:	4b7a      	ldr	r3, [pc, #488]	; (8016c80 <UART_SetConfig+0x2e4>)
 8016a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016a9c:	f003 030c 	and.w	r3, r3, #12
 8016aa0:	2b0c      	cmp	r3, #12
 8016aa2:	d82d      	bhi.n	8016b00 <UART_SetConfig+0x164>
 8016aa4:	a201      	add	r2, pc, #4	; (adr r2, 8016aac <UART_SetConfig+0x110>)
 8016aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016aaa:	bf00      	nop
 8016aac:	08016ae1 	.word	0x08016ae1
 8016ab0:	08016b01 	.word	0x08016b01
 8016ab4:	08016b01 	.word	0x08016b01
 8016ab8:	08016b01 	.word	0x08016b01
 8016abc:	08016af1 	.word	0x08016af1
 8016ac0:	08016b01 	.word	0x08016b01
 8016ac4:	08016b01 	.word	0x08016b01
 8016ac8:	08016b01 	.word	0x08016b01
 8016acc:	08016ae9 	.word	0x08016ae9
 8016ad0:	08016b01 	.word	0x08016b01
 8016ad4:	08016b01 	.word	0x08016b01
 8016ad8:	08016b01 	.word	0x08016b01
 8016adc:	08016af9 	.word	0x08016af9
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016ae6:	e0d8      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016ae8:	2302      	movs	r3, #2
 8016aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016aee:	e0d4      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016af0:	2304      	movs	r3, #4
 8016af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016af6:	e0d0      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016af8:	2308      	movs	r3, #8
 8016afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016afe:	e0cc      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016b00:	2310      	movs	r3, #16
 8016b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016b06:	e0c8      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016b08:	697b      	ldr	r3, [r7, #20]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	4a5e      	ldr	r2, [pc, #376]	; (8016c88 <UART_SetConfig+0x2ec>)
 8016b0e:	4293      	cmp	r3, r2
 8016b10:	d125      	bne.n	8016b5e <UART_SetConfig+0x1c2>
 8016b12:	4b5b      	ldr	r3, [pc, #364]	; (8016c80 <UART_SetConfig+0x2e4>)
 8016b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016b18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8016b1c:	2b30      	cmp	r3, #48	; 0x30
 8016b1e:	d016      	beq.n	8016b4e <UART_SetConfig+0x1b2>
 8016b20:	2b30      	cmp	r3, #48	; 0x30
 8016b22:	d818      	bhi.n	8016b56 <UART_SetConfig+0x1ba>
 8016b24:	2b20      	cmp	r3, #32
 8016b26:	d00a      	beq.n	8016b3e <UART_SetConfig+0x1a2>
 8016b28:	2b20      	cmp	r3, #32
 8016b2a:	d814      	bhi.n	8016b56 <UART_SetConfig+0x1ba>
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d002      	beq.n	8016b36 <UART_SetConfig+0x19a>
 8016b30:	2b10      	cmp	r3, #16
 8016b32:	d008      	beq.n	8016b46 <UART_SetConfig+0x1aa>
 8016b34:	e00f      	b.n	8016b56 <UART_SetConfig+0x1ba>
 8016b36:	2300      	movs	r3, #0
 8016b38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016b3c:	e0ad      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016b3e:	2302      	movs	r3, #2
 8016b40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016b44:	e0a9      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016b46:	2304      	movs	r3, #4
 8016b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016b4c:	e0a5      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016b4e:	2308      	movs	r3, #8
 8016b50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016b54:	e0a1      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016b56:	2310      	movs	r3, #16
 8016b58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016b5c:	e09d      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016b5e:	697b      	ldr	r3, [r7, #20]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	4a4a      	ldr	r2, [pc, #296]	; (8016c8c <UART_SetConfig+0x2f0>)
 8016b64:	4293      	cmp	r3, r2
 8016b66:	d125      	bne.n	8016bb4 <UART_SetConfig+0x218>
 8016b68:	4b45      	ldr	r3, [pc, #276]	; (8016c80 <UART_SetConfig+0x2e4>)
 8016b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016b6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8016b72:	2bc0      	cmp	r3, #192	; 0xc0
 8016b74:	d016      	beq.n	8016ba4 <UART_SetConfig+0x208>
 8016b76:	2bc0      	cmp	r3, #192	; 0xc0
 8016b78:	d818      	bhi.n	8016bac <UART_SetConfig+0x210>
 8016b7a:	2b80      	cmp	r3, #128	; 0x80
 8016b7c:	d00a      	beq.n	8016b94 <UART_SetConfig+0x1f8>
 8016b7e:	2b80      	cmp	r3, #128	; 0x80
 8016b80:	d814      	bhi.n	8016bac <UART_SetConfig+0x210>
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d002      	beq.n	8016b8c <UART_SetConfig+0x1f0>
 8016b86:	2b40      	cmp	r3, #64	; 0x40
 8016b88:	d008      	beq.n	8016b9c <UART_SetConfig+0x200>
 8016b8a:	e00f      	b.n	8016bac <UART_SetConfig+0x210>
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016b92:	e082      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016b94:	2302      	movs	r3, #2
 8016b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016b9a:	e07e      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016b9c:	2304      	movs	r3, #4
 8016b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016ba2:	e07a      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016ba4:	2308      	movs	r3, #8
 8016ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016baa:	e076      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016bac:	2310      	movs	r3, #16
 8016bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016bb2:	e072      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016bb4:	697b      	ldr	r3, [r7, #20]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	4a35      	ldr	r2, [pc, #212]	; (8016c90 <UART_SetConfig+0x2f4>)
 8016bba:	4293      	cmp	r3, r2
 8016bbc:	d12a      	bne.n	8016c14 <UART_SetConfig+0x278>
 8016bbe:	4b30      	ldr	r3, [pc, #192]	; (8016c80 <UART_SetConfig+0x2e4>)
 8016bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016bc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016bcc:	d01a      	beq.n	8016c04 <UART_SetConfig+0x268>
 8016bce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016bd2:	d81b      	bhi.n	8016c0c <UART_SetConfig+0x270>
 8016bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016bd8:	d00c      	beq.n	8016bf4 <UART_SetConfig+0x258>
 8016bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016bde:	d815      	bhi.n	8016c0c <UART_SetConfig+0x270>
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d003      	beq.n	8016bec <UART_SetConfig+0x250>
 8016be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016be8:	d008      	beq.n	8016bfc <UART_SetConfig+0x260>
 8016bea:	e00f      	b.n	8016c0c <UART_SetConfig+0x270>
 8016bec:	2300      	movs	r3, #0
 8016bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016bf2:	e052      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016bf4:	2302      	movs	r3, #2
 8016bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016bfa:	e04e      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016bfc:	2304      	movs	r3, #4
 8016bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016c02:	e04a      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016c04:	2308      	movs	r3, #8
 8016c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016c0a:	e046      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016c0c:	2310      	movs	r3, #16
 8016c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016c12:	e042      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016c14:	697b      	ldr	r3, [r7, #20]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	4a17      	ldr	r2, [pc, #92]	; (8016c78 <UART_SetConfig+0x2dc>)
 8016c1a:	4293      	cmp	r3, r2
 8016c1c:	d13a      	bne.n	8016c94 <UART_SetConfig+0x2f8>
 8016c1e:	4b18      	ldr	r3, [pc, #96]	; (8016c80 <UART_SetConfig+0x2e4>)
 8016c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016c24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8016c28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8016c2c:	d01a      	beq.n	8016c64 <UART_SetConfig+0x2c8>
 8016c2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8016c32:	d81b      	bhi.n	8016c6c <UART_SetConfig+0x2d0>
 8016c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016c38:	d00c      	beq.n	8016c54 <UART_SetConfig+0x2b8>
 8016c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016c3e:	d815      	bhi.n	8016c6c <UART_SetConfig+0x2d0>
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d003      	beq.n	8016c4c <UART_SetConfig+0x2b0>
 8016c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016c48:	d008      	beq.n	8016c5c <UART_SetConfig+0x2c0>
 8016c4a:	e00f      	b.n	8016c6c <UART_SetConfig+0x2d0>
 8016c4c:	2300      	movs	r3, #0
 8016c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016c52:	e022      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016c54:	2302      	movs	r3, #2
 8016c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016c5a:	e01e      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016c5c:	2304      	movs	r3, #4
 8016c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016c62:	e01a      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016c64:	2308      	movs	r3, #8
 8016c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016c6a:	e016      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016c6c:	2310      	movs	r3, #16
 8016c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016c72:	e012      	b.n	8016c9a <UART_SetConfig+0x2fe>
 8016c74:	cfff69f3 	.word	0xcfff69f3
 8016c78:	40008000 	.word	0x40008000
 8016c7c:	40013800 	.word	0x40013800
 8016c80:	40021000 	.word	0x40021000
 8016c84:	40004400 	.word	0x40004400
 8016c88:	40004800 	.word	0x40004800
 8016c8c:	40004c00 	.word	0x40004c00
 8016c90:	40005000 	.word	0x40005000
 8016c94:	2310      	movs	r3, #16
 8016c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8016c9a:	697b      	ldr	r3, [r7, #20]
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	4aae      	ldr	r2, [pc, #696]	; (8016f58 <UART_SetConfig+0x5bc>)
 8016ca0:	4293      	cmp	r3, r2
 8016ca2:	f040 8097 	bne.w	8016dd4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8016ca6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016caa:	2b08      	cmp	r3, #8
 8016cac:	d823      	bhi.n	8016cf6 <UART_SetConfig+0x35a>
 8016cae:	a201      	add	r2, pc, #4	; (adr r2, 8016cb4 <UART_SetConfig+0x318>)
 8016cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cb4:	08016cd9 	.word	0x08016cd9
 8016cb8:	08016cf7 	.word	0x08016cf7
 8016cbc:	08016ce1 	.word	0x08016ce1
 8016cc0:	08016cf7 	.word	0x08016cf7
 8016cc4:	08016ce7 	.word	0x08016ce7
 8016cc8:	08016cf7 	.word	0x08016cf7
 8016ccc:	08016cf7 	.word	0x08016cf7
 8016cd0:	08016cf7 	.word	0x08016cf7
 8016cd4:	08016cef 	.word	0x08016cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016cd8:	f7fd f8b4 	bl	8013e44 <HAL_RCC_GetPCLK1Freq>
 8016cdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8016cde:	e010      	b.n	8016d02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016ce0:	4b9e      	ldr	r3, [pc, #632]	; (8016f5c <UART_SetConfig+0x5c0>)
 8016ce2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016ce4:	e00d      	b.n	8016d02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016ce6:	f7fd f841 	bl	8013d6c <HAL_RCC_GetSysClockFreq>
 8016cea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8016cec:	e009      	b.n	8016d02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016cf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016cf4:	e005      	b.n	8016d02 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8016cfa:	2301      	movs	r3, #1
 8016cfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8016d00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8016d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	f000 8130 	beq.w	8016f6a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8016d0a:	697b      	ldr	r3, [r7, #20]
 8016d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d0e:	4a94      	ldr	r2, [pc, #592]	; (8016f60 <UART_SetConfig+0x5c4>)
 8016d10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016d14:	461a      	mov	r2, r3
 8016d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d18:	fbb3 f3f2 	udiv	r3, r3, r2
 8016d1c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016d1e:	697b      	ldr	r3, [r7, #20]
 8016d20:	685a      	ldr	r2, [r3, #4]
 8016d22:	4613      	mov	r3, r2
 8016d24:	005b      	lsls	r3, r3, #1
 8016d26:	4413      	add	r3, r2
 8016d28:	69ba      	ldr	r2, [r7, #24]
 8016d2a:	429a      	cmp	r2, r3
 8016d2c:	d305      	bcc.n	8016d3a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8016d2e:	697b      	ldr	r3, [r7, #20]
 8016d30:	685b      	ldr	r3, [r3, #4]
 8016d32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016d34:	69ba      	ldr	r2, [r7, #24]
 8016d36:	429a      	cmp	r2, r3
 8016d38:	d903      	bls.n	8016d42 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8016d3a:	2301      	movs	r3, #1
 8016d3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8016d40:	e113      	b.n	8016f6a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d44:	2200      	movs	r2, #0
 8016d46:	60bb      	str	r3, [r7, #8]
 8016d48:	60fa      	str	r2, [r7, #12]
 8016d4a:	697b      	ldr	r3, [r7, #20]
 8016d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d4e:	4a84      	ldr	r2, [pc, #528]	; (8016f60 <UART_SetConfig+0x5c4>)
 8016d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016d54:	b29b      	uxth	r3, r3
 8016d56:	2200      	movs	r2, #0
 8016d58:	603b      	str	r3, [r7, #0]
 8016d5a:	607a      	str	r2, [r7, #4]
 8016d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016d60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016d64:	f7e9 ff98 	bl	8000c98 <__aeabi_uldivmod>
 8016d68:	4602      	mov	r2, r0
 8016d6a:	460b      	mov	r3, r1
 8016d6c:	4610      	mov	r0, r2
 8016d6e:	4619      	mov	r1, r3
 8016d70:	f04f 0200 	mov.w	r2, #0
 8016d74:	f04f 0300 	mov.w	r3, #0
 8016d78:	020b      	lsls	r3, r1, #8
 8016d7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8016d7e:	0202      	lsls	r2, r0, #8
 8016d80:	6979      	ldr	r1, [r7, #20]
 8016d82:	6849      	ldr	r1, [r1, #4]
 8016d84:	0849      	lsrs	r1, r1, #1
 8016d86:	2000      	movs	r0, #0
 8016d88:	460c      	mov	r4, r1
 8016d8a:	4605      	mov	r5, r0
 8016d8c:	eb12 0804 	adds.w	r8, r2, r4
 8016d90:	eb43 0905 	adc.w	r9, r3, r5
 8016d94:	697b      	ldr	r3, [r7, #20]
 8016d96:	685b      	ldr	r3, [r3, #4]
 8016d98:	2200      	movs	r2, #0
 8016d9a:	469a      	mov	sl, r3
 8016d9c:	4693      	mov	fp, r2
 8016d9e:	4652      	mov	r2, sl
 8016da0:	465b      	mov	r3, fp
 8016da2:	4640      	mov	r0, r8
 8016da4:	4649      	mov	r1, r9
 8016da6:	f7e9 ff77 	bl	8000c98 <__aeabi_uldivmod>
 8016daa:	4602      	mov	r2, r0
 8016dac:	460b      	mov	r3, r1
 8016dae:	4613      	mov	r3, r2
 8016db0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016db2:	6a3b      	ldr	r3, [r7, #32]
 8016db4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016db8:	d308      	bcc.n	8016dcc <UART_SetConfig+0x430>
 8016dba:	6a3b      	ldr	r3, [r7, #32]
 8016dbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016dc0:	d204      	bcs.n	8016dcc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8016dc2:	697b      	ldr	r3, [r7, #20]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	6a3a      	ldr	r2, [r7, #32]
 8016dc8:	60da      	str	r2, [r3, #12]
 8016dca:	e0ce      	b.n	8016f6a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8016dcc:	2301      	movs	r3, #1
 8016dce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8016dd2:	e0ca      	b.n	8016f6a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016dd4:	697b      	ldr	r3, [r7, #20]
 8016dd6:	69db      	ldr	r3, [r3, #28]
 8016dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016ddc:	d166      	bne.n	8016eac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8016dde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016de2:	2b08      	cmp	r3, #8
 8016de4:	d827      	bhi.n	8016e36 <UART_SetConfig+0x49a>
 8016de6:	a201      	add	r2, pc, #4	; (adr r2, 8016dec <UART_SetConfig+0x450>)
 8016de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016dec:	08016e11 	.word	0x08016e11
 8016df0:	08016e19 	.word	0x08016e19
 8016df4:	08016e21 	.word	0x08016e21
 8016df8:	08016e37 	.word	0x08016e37
 8016dfc:	08016e27 	.word	0x08016e27
 8016e00:	08016e37 	.word	0x08016e37
 8016e04:	08016e37 	.word	0x08016e37
 8016e08:	08016e37 	.word	0x08016e37
 8016e0c:	08016e2f 	.word	0x08016e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016e10:	f7fd f818 	bl	8013e44 <HAL_RCC_GetPCLK1Freq>
 8016e14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8016e16:	e014      	b.n	8016e42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016e18:	f7fd f82a 	bl	8013e70 <HAL_RCC_GetPCLK2Freq>
 8016e1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8016e1e:	e010      	b.n	8016e42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016e20:	4b4e      	ldr	r3, [pc, #312]	; (8016f5c <UART_SetConfig+0x5c0>)
 8016e22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016e24:	e00d      	b.n	8016e42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016e26:	f7fc ffa1 	bl	8013d6c <HAL_RCC_GetSysClockFreq>
 8016e2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8016e2c:	e009      	b.n	8016e42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016e32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016e34:	e005      	b.n	8016e42 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8016e36:	2300      	movs	r3, #0
 8016e38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8016e3a:	2301      	movs	r3, #1
 8016e3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8016e40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8016e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	f000 8090 	beq.w	8016f6a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016e4a:	697b      	ldr	r3, [r7, #20]
 8016e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e4e:	4a44      	ldr	r2, [pc, #272]	; (8016f60 <UART_SetConfig+0x5c4>)
 8016e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016e54:	461a      	mov	r2, r3
 8016e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8016e5c:	005a      	lsls	r2, r3, #1
 8016e5e:	697b      	ldr	r3, [r7, #20]
 8016e60:	685b      	ldr	r3, [r3, #4]
 8016e62:	085b      	lsrs	r3, r3, #1
 8016e64:	441a      	add	r2, r3
 8016e66:	697b      	ldr	r3, [r7, #20]
 8016e68:	685b      	ldr	r3, [r3, #4]
 8016e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8016e6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016e70:	6a3b      	ldr	r3, [r7, #32]
 8016e72:	2b0f      	cmp	r3, #15
 8016e74:	d916      	bls.n	8016ea4 <UART_SetConfig+0x508>
 8016e76:	6a3b      	ldr	r3, [r7, #32]
 8016e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016e7c:	d212      	bcs.n	8016ea4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016e7e:	6a3b      	ldr	r3, [r7, #32]
 8016e80:	b29b      	uxth	r3, r3
 8016e82:	f023 030f 	bic.w	r3, r3, #15
 8016e86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8016e88:	6a3b      	ldr	r3, [r7, #32]
 8016e8a:	085b      	lsrs	r3, r3, #1
 8016e8c:	b29b      	uxth	r3, r3
 8016e8e:	f003 0307 	and.w	r3, r3, #7
 8016e92:	b29a      	uxth	r2, r3
 8016e94:	8bfb      	ldrh	r3, [r7, #30]
 8016e96:	4313      	orrs	r3, r2
 8016e98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8016e9a:	697b      	ldr	r3, [r7, #20]
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	8bfa      	ldrh	r2, [r7, #30]
 8016ea0:	60da      	str	r2, [r3, #12]
 8016ea2:	e062      	b.n	8016f6a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8016ea4:	2301      	movs	r3, #1
 8016ea6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8016eaa:	e05e      	b.n	8016f6a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8016eac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016eb0:	2b08      	cmp	r3, #8
 8016eb2:	d828      	bhi.n	8016f06 <UART_SetConfig+0x56a>
 8016eb4:	a201      	add	r2, pc, #4	; (adr r2, 8016ebc <UART_SetConfig+0x520>)
 8016eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016eba:	bf00      	nop
 8016ebc:	08016ee1 	.word	0x08016ee1
 8016ec0:	08016ee9 	.word	0x08016ee9
 8016ec4:	08016ef1 	.word	0x08016ef1
 8016ec8:	08016f07 	.word	0x08016f07
 8016ecc:	08016ef7 	.word	0x08016ef7
 8016ed0:	08016f07 	.word	0x08016f07
 8016ed4:	08016f07 	.word	0x08016f07
 8016ed8:	08016f07 	.word	0x08016f07
 8016edc:	08016eff 	.word	0x08016eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016ee0:	f7fc ffb0 	bl	8013e44 <HAL_RCC_GetPCLK1Freq>
 8016ee4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8016ee6:	e014      	b.n	8016f12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016ee8:	f7fc ffc2 	bl	8013e70 <HAL_RCC_GetPCLK2Freq>
 8016eec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8016eee:	e010      	b.n	8016f12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016ef0:	4b1a      	ldr	r3, [pc, #104]	; (8016f5c <UART_SetConfig+0x5c0>)
 8016ef2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016ef4:	e00d      	b.n	8016f12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016ef6:	f7fc ff39 	bl	8013d6c <HAL_RCC_GetSysClockFreq>
 8016efa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8016efc:	e009      	b.n	8016f12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016f02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016f04:	e005      	b.n	8016f12 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8016f06:	2300      	movs	r3, #0
 8016f08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8016f0a:	2301      	movs	r3, #1
 8016f0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8016f10:	bf00      	nop
    }

    if (pclk != 0U)
 8016f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d028      	beq.n	8016f6a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016f18:	697b      	ldr	r3, [r7, #20]
 8016f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f1c:	4a10      	ldr	r2, [pc, #64]	; (8016f60 <UART_SetConfig+0x5c4>)
 8016f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016f22:	461a      	mov	r2, r3
 8016f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f26:	fbb3 f2f2 	udiv	r2, r3, r2
 8016f2a:	697b      	ldr	r3, [r7, #20]
 8016f2c:	685b      	ldr	r3, [r3, #4]
 8016f2e:	085b      	lsrs	r3, r3, #1
 8016f30:	441a      	add	r2, r3
 8016f32:	697b      	ldr	r3, [r7, #20]
 8016f34:	685b      	ldr	r3, [r3, #4]
 8016f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8016f3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016f3c:	6a3b      	ldr	r3, [r7, #32]
 8016f3e:	2b0f      	cmp	r3, #15
 8016f40:	d910      	bls.n	8016f64 <UART_SetConfig+0x5c8>
 8016f42:	6a3b      	ldr	r3, [r7, #32]
 8016f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016f48:	d20c      	bcs.n	8016f64 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8016f4a:	6a3b      	ldr	r3, [r7, #32]
 8016f4c:	b29a      	uxth	r2, r3
 8016f4e:	697b      	ldr	r3, [r7, #20]
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	60da      	str	r2, [r3, #12]
 8016f54:	e009      	b.n	8016f6a <UART_SetConfig+0x5ce>
 8016f56:	bf00      	nop
 8016f58:	40008000 	.word	0x40008000
 8016f5c:	00f42400 	.word	0x00f42400
 8016f60:	0801a61c 	.word	0x0801a61c
      }
      else
      {
        ret = HAL_ERROR;
 8016f64:	2301      	movs	r3, #1
 8016f66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8016f6a:	697b      	ldr	r3, [r7, #20]
 8016f6c:	2201      	movs	r2, #1
 8016f6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8016f72:	697b      	ldr	r3, [r7, #20]
 8016f74:	2201      	movs	r2, #1
 8016f76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8016f7a:	697b      	ldr	r3, [r7, #20]
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8016f80:	697b      	ldr	r3, [r7, #20]
 8016f82:	2200      	movs	r2, #0
 8016f84:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8016f86:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	3730      	adds	r7, #48	; 0x30
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08016f94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016f94:	b480      	push	{r7}
 8016f96:	b083      	sub	sp, #12
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016fa0:	f003 0301 	and.w	r3, r3, #1
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d00a      	beq.n	8016fbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	685b      	ldr	r3, [r3, #4]
 8016fae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	430a      	orrs	r2, r1
 8016fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016fc2:	f003 0302 	and.w	r3, r3, #2
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d00a      	beq.n	8016fe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	685b      	ldr	r3, [r3, #4]
 8016fd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	430a      	orrs	r2, r1
 8016fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016fe4:	f003 0304 	and.w	r3, r3, #4
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d00a      	beq.n	8017002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	685b      	ldr	r3, [r3, #4]
 8016ff2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	430a      	orrs	r2, r1
 8017000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017006:	f003 0308 	and.w	r3, r3, #8
 801700a:	2b00      	cmp	r3, #0
 801700c:	d00a      	beq.n	8017024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	685b      	ldr	r3, [r3, #4]
 8017014:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	430a      	orrs	r2, r1
 8017022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017028:	f003 0310 	and.w	r3, r3, #16
 801702c:	2b00      	cmp	r3, #0
 801702e:	d00a      	beq.n	8017046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	689b      	ldr	r3, [r3, #8]
 8017036:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	430a      	orrs	r2, r1
 8017044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801704a:	f003 0320 	and.w	r3, r3, #32
 801704e:	2b00      	cmp	r3, #0
 8017050:	d00a      	beq.n	8017068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	689b      	ldr	r3, [r3, #8]
 8017058:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	430a      	orrs	r2, r1
 8017066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017070:	2b00      	cmp	r3, #0
 8017072:	d01a      	beq.n	80170aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	685b      	ldr	r3, [r3, #4]
 801707a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	430a      	orrs	r2, r1
 8017088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801708e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017092:	d10a      	bne.n	80170aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	685b      	ldr	r3, [r3, #4]
 801709a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	430a      	orrs	r2, r1
 80170a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80170ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d00a      	beq.n	80170cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	685b      	ldr	r3, [r3, #4]
 80170bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	430a      	orrs	r2, r1
 80170ca:	605a      	str	r2, [r3, #4]
  }
}
 80170cc:	bf00      	nop
 80170ce:	370c      	adds	r7, #12
 80170d0:	46bd      	mov	sp, r7
 80170d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d6:	4770      	bx	lr

080170d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80170d8:	b580      	push	{r7, lr}
 80170da:	b086      	sub	sp, #24
 80170dc:	af02      	add	r7, sp, #8
 80170de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	2200      	movs	r2, #0
 80170e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80170e8:	f7f9 f9c0 	bl	801046c <HAL_GetTick>
 80170ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	f003 0308 	and.w	r3, r3, #8
 80170f8:	2b08      	cmp	r3, #8
 80170fa:	d10e      	bne.n	801711a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80170fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8017100:	9300      	str	r3, [sp, #0]
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	2200      	movs	r2, #0
 8017106:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801710a:	6878      	ldr	r0, [r7, #4]
 801710c:	f000 f82f 	bl	801716e <UART_WaitOnFlagUntilTimeout>
 8017110:	4603      	mov	r3, r0
 8017112:	2b00      	cmp	r3, #0
 8017114:	d001      	beq.n	801711a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017116:	2303      	movs	r3, #3
 8017118:	e025      	b.n	8017166 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	f003 0304 	and.w	r3, r3, #4
 8017124:	2b04      	cmp	r3, #4
 8017126:	d10e      	bne.n	8017146 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017128:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801712c:	9300      	str	r3, [sp, #0]
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	2200      	movs	r2, #0
 8017132:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8017136:	6878      	ldr	r0, [r7, #4]
 8017138:	f000 f819 	bl	801716e <UART_WaitOnFlagUntilTimeout>
 801713c:	4603      	mov	r3, r0
 801713e:	2b00      	cmp	r3, #0
 8017140:	d001      	beq.n	8017146 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017142:	2303      	movs	r3, #3
 8017144:	e00f      	b.n	8017166 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	2220      	movs	r2, #32
 801714a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	2220      	movs	r2, #32
 8017152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	2200      	movs	r2, #0
 801715a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	2200      	movs	r2, #0
 8017160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8017164:	2300      	movs	r3, #0
}
 8017166:	4618      	mov	r0, r3
 8017168:	3710      	adds	r7, #16
 801716a:	46bd      	mov	sp, r7
 801716c:	bd80      	pop	{r7, pc}

0801716e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801716e:	b580      	push	{r7, lr}
 8017170:	b09c      	sub	sp, #112	; 0x70
 8017172:	af00      	add	r7, sp, #0
 8017174:	60f8      	str	r0, [r7, #12]
 8017176:	60b9      	str	r1, [r7, #8]
 8017178:	603b      	str	r3, [r7, #0]
 801717a:	4613      	mov	r3, r2
 801717c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801717e:	e0a9      	b.n	80172d4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017186:	f000 80a5 	beq.w	80172d4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801718a:	f7f9 f96f 	bl	801046c <HAL_GetTick>
 801718e:	4602      	mov	r2, r0
 8017190:	683b      	ldr	r3, [r7, #0]
 8017192:	1ad3      	subs	r3, r2, r3
 8017194:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8017196:	429a      	cmp	r2, r3
 8017198:	d302      	bcc.n	80171a0 <UART_WaitOnFlagUntilTimeout+0x32>
 801719a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801719c:	2b00      	cmp	r3, #0
 801719e:	d140      	bne.n	8017222 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80171a8:	e853 3f00 	ldrex	r3, [r3]
 80171ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80171ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80171b4:	667b      	str	r3, [r7, #100]	; 0x64
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	461a      	mov	r2, r3
 80171bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80171be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80171c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80171c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80171c6:	e841 2300 	strex	r3, r2, [r1]
 80171ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80171cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d1e6      	bne.n	80171a0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	3308      	adds	r3, #8
 80171d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80171dc:	e853 3f00 	ldrex	r3, [r3]
 80171e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80171e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171e4:	f023 0301 	bic.w	r3, r3, #1
 80171e8:	663b      	str	r3, [r7, #96]	; 0x60
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	3308      	adds	r3, #8
 80171f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80171f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80171f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80171f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80171fa:	e841 2300 	strex	r3, r2, [r1]
 80171fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8017200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017202:	2b00      	cmp	r3, #0
 8017204:	d1e5      	bne.n	80171d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	2220      	movs	r2, #32
 801720a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	2220      	movs	r2, #32
 8017212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	2200      	movs	r2, #0
 801721a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801721e:	2303      	movs	r3, #3
 8017220:	e069      	b.n	80172f6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	f003 0304 	and.w	r3, r3, #4
 801722c:	2b00      	cmp	r3, #0
 801722e:	d051      	beq.n	80172d4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	69db      	ldr	r3, [r3, #28]
 8017236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801723a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801723e:	d149      	bne.n	80172d4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017248:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017252:	e853 3f00 	ldrex	r3, [r3]
 8017256:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801725a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801725e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	461a      	mov	r2, r3
 8017266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017268:	637b      	str	r3, [r7, #52]	; 0x34
 801726a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801726c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801726e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017270:	e841 2300 	strex	r3, r2, [r1]
 8017274:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8017276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017278:	2b00      	cmp	r3, #0
 801727a:	d1e6      	bne.n	801724a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	3308      	adds	r3, #8
 8017282:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017284:	697b      	ldr	r3, [r7, #20]
 8017286:	e853 3f00 	ldrex	r3, [r3]
 801728a:	613b      	str	r3, [r7, #16]
   return(result);
 801728c:	693b      	ldr	r3, [r7, #16]
 801728e:	f023 0301 	bic.w	r3, r3, #1
 8017292:	66bb      	str	r3, [r7, #104]	; 0x68
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	3308      	adds	r3, #8
 801729a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801729c:	623a      	str	r2, [r7, #32]
 801729e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172a0:	69f9      	ldr	r1, [r7, #28]
 80172a2:	6a3a      	ldr	r2, [r7, #32]
 80172a4:	e841 2300 	strex	r3, r2, [r1]
 80172a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80172aa:	69bb      	ldr	r3, [r7, #24]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d1e5      	bne.n	801727c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	2220      	movs	r2, #32
 80172b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	2220      	movs	r2, #32
 80172bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	2220      	movs	r2, #32
 80172c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	2200      	movs	r2, #0
 80172cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80172d0:	2303      	movs	r3, #3
 80172d2:	e010      	b.n	80172f6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	69da      	ldr	r2, [r3, #28]
 80172da:	68bb      	ldr	r3, [r7, #8]
 80172dc:	4013      	ands	r3, r2
 80172de:	68ba      	ldr	r2, [r7, #8]
 80172e0:	429a      	cmp	r2, r3
 80172e2:	bf0c      	ite	eq
 80172e4:	2301      	moveq	r3, #1
 80172e6:	2300      	movne	r3, #0
 80172e8:	b2db      	uxtb	r3, r3
 80172ea:	461a      	mov	r2, r3
 80172ec:	79fb      	ldrb	r3, [r7, #7]
 80172ee:	429a      	cmp	r2, r3
 80172f0:	f43f af46 	beq.w	8017180 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80172f4:	2300      	movs	r3, #0
}
 80172f6:	4618      	mov	r0, r3
 80172f8:	3770      	adds	r7, #112	; 0x70
 80172fa:	46bd      	mov	sp, r7
 80172fc:	bd80      	pop	{r7, pc}

080172fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80172fe:	b480      	push	{r7}
 8017300:	b085      	sub	sp, #20
 8017302:	af00      	add	r7, sp, #0
 8017304:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801730c:	2b01      	cmp	r3, #1
 801730e:	d101      	bne.n	8017314 <HAL_UARTEx_DisableFifoMode+0x16>
 8017310:	2302      	movs	r3, #2
 8017312:	e027      	b.n	8017364 <HAL_UARTEx_DisableFifoMode+0x66>
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	2201      	movs	r2, #1
 8017318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	2224      	movs	r2, #36	; 0x24
 8017320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	681a      	ldr	r2, [r3, #0]
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	f022 0201 	bic.w	r2, r2, #1
 801733a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8017342:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	2200      	movs	r2, #0
 8017348:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	68fa      	ldr	r2, [r7, #12]
 8017350:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	2220      	movs	r2, #32
 8017356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	2200      	movs	r2, #0
 801735e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8017362:	2300      	movs	r3, #0
}
 8017364:	4618      	mov	r0, r3
 8017366:	3714      	adds	r7, #20
 8017368:	46bd      	mov	sp, r7
 801736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801736e:	4770      	bx	lr

08017370 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b084      	sub	sp, #16
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
 8017378:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8017380:	2b01      	cmp	r3, #1
 8017382:	d101      	bne.n	8017388 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8017384:	2302      	movs	r3, #2
 8017386:	e02d      	b.n	80173e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	2201      	movs	r2, #1
 801738c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	2224      	movs	r2, #36	; 0x24
 8017394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	681a      	ldr	r2, [r3, #0]
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	f022 0201 	bic.w	r2, r2, #1
 80173ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	689b      	ldr	r3, [r3, #8]
 80173b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	681b      	ldr	r3, [r3, #0]
 80173be:	683a      	ldr	r2, [r7, #0]
 80173c0:	430a      	orrs	r2, r1
 80173c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80173c4:	6878      	ldr	r0, [r7, #4]
 80173c6:	f000 f84f 	bl	8017468 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	68fa      	ldr	r2, [r7, #12]
 80173d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	2220      	movs	r2, #32
 80173d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	2200      	movs	r2, #0
 80173de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80173e2:	2300      	movs	r3, #0
}
 80173e4:	4618      	mov	r0, r3
 80173e6:	3710      	adds	r7, #16
 80173e8:	46bd      	mov	sp, r7
 80173ea:	bd80      	pop	{r7, pc}

080173ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80173ec:	b580      	push	{r7, lr}
 80173ee:	b084      	sub	sp, #16
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	6078      	str	r0, [r7, #4]
 80173f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80173fc:	2b01      	cmp	r3, #1
 80173fe:	d101      	bne.n	8017404 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8017400:	2302      	movs	r3, #2
 8017402:	e02d      	b.n	8017460 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	2201      	movs	r2, #1
 8017408:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	2224      	movs	r2, #36	; 0x24
 8017410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	681a      	ldr	r2, [r3, #0]
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	f022 0201 	bic.w	r2, r2, #1
 801742a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	689b      	ldr	r3, [r3, #8]
 8017432:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	683a      	ldr	r2, [r7, #0]
 801743c:	430a      	orrs	r2, r1
 801743e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8017440:	6878      	ldr	r0, [r7, #4]
 8017442:	f000 f811 	bl	8017468 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	68fa      	ldr	r2, [r7, #12]
 801744c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	2220      	movs	r2, #32
 8017452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	2200      	movs	r2, #0
 801745a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801745e:	2300      	movs	r3, #0
}
 8017460:	4618      	mov	r0, r3
 8017462:	3710      	adds	r7, #16
 8017464:	46bd      	mov	sp, r7
 8017466:	bd80      	pop	{r7, pc}

08017468 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8017468:	b480      	push	{r7}
 801746a:	b085      	sub	sp, #20
 801746c:	af00      	add	r7, sp, #0
 801746e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017474:	2b00      	cmp	r3, #0
 8017476:	d108      	bne.n	801748a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	2201      	movs	r2, #1
 801747c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	2201      	movs	r2, #1
 8017484:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8017488:	e031      	b.n	80174ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801748a:	2308      	movs	r3, #8
 801748c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801748e:	2308      	movs	r3, #8
 8017490:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	689b      	ldr	r3, [r3, #8]
 8017498:	0e5b      	lsrs	r3, r3, #25
 801749a:	b2db      	uxtb	r3, r3
 801749c:	f003 0307 	and.w	r3, r3, #7
 80174a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	689b      	ldr	r3, [r3, #8]
 80174a8:	0f5b      	lsrs	r3, r3, #29
 80174aa:	b2db      	uxtb	r3, r3
 80174ac:	f003 0307 	and.w	r3, r3, #7
 80174b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80174b2:	7bbb      	ldrb	r3, [r7, #14]
 80174b4:	7b3a      	ldrb	r2, [r7, #12]
 80174b6:	4911      	ldr	r1, [pc, #68]	; (80174fc <UARTEx_SetNbDataToProcess+0x94>)
 80174b8:	5c8a      	ldrb	r2, [r1, r2]
 80174ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80174be:	7b3a      	ldrb	r2, [r7, #12]
 80174c0:	490f      	ldr	r1, [pc, #60]	; (8017500 <UARTEx_SetNbDataToProcess+0x98>)
 80174c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80174c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80174c8:	b29a      	uxth	r2, r3
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80174d0:	7bfb      	ldrb	r3, [r7, #15]
 80174d2:	7b7a      	ldrb	r2, [r7, #13]
 80174d4:	4909      	ldr	r1, [pc, #36]	; (80174fc <UARTEx_SetNbDataToProcess+0x94>)
 80174d6:	5c8a      	ldrb	r2, [r1, r2]
 80174d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80174dc:	7b7a      	ldrb	r2, [r7, #13]
 80174de:	4908      	ldr	r1, [pc, #32]	; (8017500 <UARTEx_SetNbDataToProcess+0x98>)
 80174e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80174e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80174e6:	b29a      	uxth	r2, r3
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80174ee:	bf00      	nop
 80174f0:	3714      	adds	r7, #20
 80174f2:	46bd      	mov	sp, r7
 80174f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f8:	4770      	bx	lr
 80174fa:	bf00      	nop
 80174fc:	0801a634 	.word	0x0801a634
 8017500:	0801a63c 	.word	0x0801a63c

08017504 <__errno>:
 8017504:	4b01      	ldr	r3, [pc, #4]	; (801750c <__errno+0x8>)
 8017506:	6818      	ldr	r0, [r3, #0]
 8017508:	4770      	bx	lr
 801750a:	bf00      	nop
 801750c:	2000000c 	.word	0x2000000c

08017510 <__libc_init_array>:
 8017510:	b570      	push	{r4, r5, r6, lr}
 8017512:	4d0d      	ldr	r5, [pc, #52]	; (8017548 <__libc_init_array+0x38>)
 8017514:	4c0d      	ldr	r4, [pc, #52]	; (801754c <__libc_init_array+0x3c>)
 8017516:	1b64      	subs	r4, r4, r5
 8017518:	10a4      	asrs	r4, r4, #2
 801751a:	2600      	movs	r6, #0
 801751c:	42a6      	cmp	r6, r4
 801751e:	d109      	bne.n	8017534 <__libc_init_array+0x24>
 8017520:	4d0b      	ldr	r5, [pc, #44]	; (8017550 <__libc_init_array+0x40>)
 8017522:	4c0c      	ldr	r4, [pc, #48]	; (8017554 <__libc_init_array+0x44>)
 8017524:	f002 ffb2 	bl	801a48c <_init>
 8017528:	1b64      	subs	r4, r4, r5
 801752a:	10a4      	asrs	r4, r4, #2
 801752c:	2600      	movs	r6, #0
 801752e:	42a6      	cmp	r6, r4
 8017530:	d105      	bne.n	801753e <__libc_init_array+0x2e>
 8017532:	bd70      	pop	{r4, r5, r6, pc}
 8017534:	f855 3b04 	ldr.w	r3, [r5], #4
 8017538:	4798      	blx	r3
 801753a:	3601      	adds	r6, #1
 801753c:	e7ee      	b.n	801751c <__libc_init_array+0xc>
 801753e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017542:	4798      	blx	r3
 8017544:	3601      	adds	r6, #1
 8017546:	e7f2      	b.n	801752e <__libc_init_array+0x1e>
 8017548:	0801aa58 	.word	0x0801aa58
 801754c:	0801aa58 	.word	0x0801aa58
 8017550:	0801aa58 	.word	0x0801aa58
 8017554:	0801aa5c 	.word	0x0801aa5c

08017558 <memcpy>:
 8017558:	440a      	add	r2, r1
 801755a:	4291      	cmp	r1, r2
 801755c:	f100 33ff 	add.w	r3, r0, #4294967295
 8017560:	d100      	bne.n	8017564 <memcpy+0xc>
 8017562:	4770      	bx	lr
 8017564:	b510      	push	{r4, lr}
 8017566:	f811 4b01 	ldrb.w	r4, [r1], #1
 801756a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801756e:	4291      	cmp	r1, r2
 8017570:	d1f9      	bne.n	8017566 <memcpy+0xe>
 8017572:	bd10      	pop	{r4, pc}

08017574 <memset>:
 8017574:	4402      	add	r2, r0
 8017576:	4603      	mov	r3, r0
 8017578:	4293      	cmp	r3, r2
 801757a:	d100      	bne.n	801757e <memset+0xa>
 801757c:	4770      	bx	lr
 801757e:	f803 1b01 	strb.w	r1, [r3], #1
 8017582:	e7f9      	b.n	8017578 <memset+0x4>

08017584 <__cvt>:
 8017584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017588:	ec55 4b10 	vmov	r4, r5, d0
 801758c:	2d00      	cmp	r5, #0
 801758e:	460e      	mov	r6, r1
 8017590:	4619      	mov	r1, r3
 8017592:	462b      	mov	r3, r5
 8017594:	bfbb      	ittet	lt
 8017596:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801759a:	461d      	movlt	r5, r3
 801759c:	2300      	movge	r3, #0
 801759e:	232d      	movlt	r3, #45	; 0x2d
 80175a0:	700b      	strb	r3, [r1, #0]
 80175a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80175a8:	4691      	mov	r9, r2
 80175aa:	f023 0820 	bic.w	r8, r3, #32
 80175ae:	bfbc      	itt	lt
 80175b0:	4622      	movlt	r2, r4
 80175b2:	4614      	movlt	r4, r2
 80175b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80175b8:	d005      	beq.n	80175c6 <__cvt+0x42>
 80175ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80175be:	d100      	bne.n	80175c2 <__cvt+0x3e>
 80175c0:	3601      	adds	r6, #1
 80175c2:	2102      	movs	r1, #2
 80175c4:	e000      	b.n	80175c8 <__cvt+0x44>
 80175c6:	2103      	movs	r1, #3
 80175c8:	ab03      	add	r3, sp, #12
 80175ca:	9301      	str	r3, [sp, #4]
 80175cc:	ab02      	add	r3, sp, #8
 80175ce:	9300      	str	r3, [sp, #0]
 80175d0:	ec45 4b10 	vmov	d0, r4, r5
 80175d4:	4653      	mov	r3, sl
 80175d6:	4632      	mov	r2, r6
 80175d8:	f000 fdba 	bl	8018150 <_dtoa_r>
 80175dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80175e0:	4607      	mov	r7, r0
 80175e2:	d102      	bne.n	80175ea <__cvt+0x66>
 80175e4:	f019 0f01 	tst.w	r9, #1
 80175e8:	d022      	beq.n	8017630 <__cvt+0xac>
 80175ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80175ee:	eb07 0906 	add.w	r9, r7, r6
 80175f2:	d110      	bne.n	8017616 <__cvt+0x92>
 80175f4:	783b      	ldrb	r3, [r7, #0]
 80175f6:	2b30      	cmp	r3, #48	; 0x30
 80175f8:	d10a      	bne.n	8017610 <__cvt+0x8c>
 80175fa:	2200      	movs	r2, #0
 80175fc:	2300      	movs	r3, #0
 80175fe:	4620      	mov	r0, r4
 8017600:	4629      	mov	r1, r5
 8017602:	f7e9 fa89 	bl	8000b18 <__aeabi_dcmpeq>
 8017606:	b918      	cbnz	r0, 8017610 <__cvt+0x8c>
 8017608:	f1c6 0601 	rsb	r6, r6, #1
 801760c:	f8ca 6000 	str.w	r6, [sl]
 8017610:	f8da 3000 	ldr.w	r3, [sl]
 8017614:	4499      	add	r9, r3
 8017616:	2200      	movs	r2, #0
 8017618:	2300      	movs	r3, #0
 801761a:	4620      	mov	r0, r4
 801761c:	4629      	mov	r1, r5
 801761e:	f7e9 fa7b 	bl	8000b18 <__aeabi_dcmpeq>
 8017622:	b108      	cbz	r0, 8017628 <__cvt+0xa4>
 8017624:	f8cd 900c 	str.w	r9, [sp, #12]
 8017628:	2230      	movs	r2, #48	; 0x30
 801762a:	9b03      	ldr	r3, [sp, #12]
 801762c:	454b      	cmp	r3, r9
 801762e:	d307      	bcc.n	8017640 <__cvt+0xbc>
 8017630:	9b03      	ldr	r3, [sp, #12]
 8017632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017634:	1bdb      	subs	r3, r3, r7
 8017636:	4638      	mov	r0, r7
 8017638:	6013      	str	r3, [r2, #0]
 801763a:	b004      	add	sp, #16
 801763c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017640:	1c59      	adds	r1, r3, #1
 8017642:	9103      	str	r1, [sp, #12]
 8017644:	701a      	strb	r2, [r3, #0]
 8017646:	e7f0      	b.n	801762a <__cvt+0xa6>

08017648 <__exponent>:
 8017648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801764a:	4603      	mov	r3, r0
 801764c:	2900      	cmp	r1, #0
 801764e:	bfb8      	it	lt
 8017650:	4249      	neglt	r1, r1
 8017652:	f803 2b02 	strb.w	r2, [r3], #2
 8017656:	bfb4      	ite	lt
 8017658:	222d      	movlt	r2, #45	; 0x2d
 801765a:	222b      	movge	r2, #43	; 0x2b
 801765c:	2909      	cmp	r1, #9
 801765e:	7042      	strb	r2, [r0, #1]
 8017660:	dd2a      	ble.n	80176b8 <__exponent+0x70>
 8017662:	f10d 0407 	add.w	r4, sp, #7
 8017666:	46a4      	mov	ip, r4
 8017668:	270a      	movs	r7, #10
 801766a:	46a6      	mov	lr, r4
 801766c:	460a      	mov	r2, r1
 801766e:	fb91 f6f7 	sdiv	r6, r1, r7
 8017672:	fb07 1516 	mls	r5, r7, r6, r1
 8017676:	3530      	adds	r5, #48	; 0x30
 8017678:	2a63      	cmp	r2, #99	; 0x63
 801767a:	f104 34ff 	add.w	r4, r4, #4294967295
 801767e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8017682:	4631      	mov	r1, r6
 8017684:	dcf1      	bgt.n	801766a <__exponent+0x22>
 8017686:	3130      	adds	r1, #48	; 0x30
 8017688:	f1ae 0502 	sub.w	r5, lr, #2
 801768c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8017690:	1c44      	adds	r4, r0, #1
 8017692:	4629      	mov	r1, r5
 8017694:	4561      	cmp	r1, ip
 8017696:	d30a      	bcc.n	80176ae <__exponent+0x66>
 8017698:	f10d 0209 	add.w	r2, sp, #9
 801769c:	eba2 020e 	sub.w	r2, r2, lr
 80176a0:	4565      	cmp	r5, ip
 80176a2:	bf88      	it	hi
 80176a4:	2200      	movhi	r2, #0
 80176a6:	4413      	add	r3, r2
 80176a8:	1a18      	subs	r0, r3, r0
 80176aa:	b003      	add	sp, #12
 80176ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80176b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80176b6:	e7ed      	b.n	8017694 <__exponent+0x4c>
 80176b8:	2330      	movs	r3, #48	; 0x30
 80176ba:	3130      	adds	r1, #48	; 0x30
 80176bc:	7083      	strb	r3, [r0, #2]
 80176be:	70c1      	strb	r1, [r0, #3]
 80176c0:	1d03      	adds	r3, r0, #4
 80176c2:	e7f1      	b.n	80176a8 <__exponent+0x60>

080176c4 <_printf_float>:
 80176c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176c8:	ed2d 8b02 	vpush	{d8}
 80176cc:	b08d      	sub	sp, #52	; 0x34
 80176ce:	460c      	mov	r4, r1
 80176d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80176d4:	4616      	mov	r6, r2
 80176d6:	461f      	mov	r7, r3
 80176d8:	4605      	mov	r5, r0
 80176da:	f001 fcdf 	bl	801909c <_localeconv_r>
 80176de:	f8d0 a000 	ldr.w	sl, [r0]
 80176e2:	4650      	mov	r0, sl
 80176e4:	f7e8 fd9c 	bl	8000220 <strlen>
 80176e8:	2300      	movs	r3, #0
 80176ea:	930a      	str	r3, [sp, #40]	; 0x28
 80176ec:	6823      	ldr	r3, [r4, #0]
 80176ee:	9305      	str	r3, [sp, #20]
 80176f0:	f8d8 3000 	ldr.w	r3, [r8]
 80176f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80176f8:	3307      	adds	r3, #7
 80176fa:	f023 0307 	bic.w	r3, r3, #7
 80176fe:	f103 0208 	add.w	r2, r3, #8
 8017702:	f8c8 2000 	str.w	r2, [r8]
 8017706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801770a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801770e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8017712:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017716:	9307      	str	r3, [sp, #28]
 8017718:	f8cd 8018 	str.w	r8, [sp, #24]
 801771c:	ee08 0a10 	vmov	s16, r0
 8017720:	4b9f      	ldr	r3, [pc, #636]	; (80179a0 <_printf_float+0x2dc>)
 8017722:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017726:	f04f 32ff 	mov.w	r2, #4294967295
 801772a:	f7e9 fa27 	bl	8000b7c <__aeabi_dcmpun>
 801772e:	bb88      	cbnz	r0, 8017794 <_printf_float+0xd0>
 8017730:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017734:	4b9a      	ldr	r3, [pc, #616]	; (80179a0 <_printf_float+0x2dc>)
 8017736:	f04f 32ff 	mov.w	r2, #4294967295
 801773a:	f7e9 fa01 	bl	8000b40 <__aeabi_dcmple>
 801773e:	bb48      	cbnz	r0, 8017794 <_printf_float+0xd0>
 8017740:	2200      	movs	r2, #0
 8017742:	2300      	movs	r3, #0
 8017744:	4640      	mov	r0, r8
 8017746:	4649      	mov	r1, r9
 8017748:	f7e9 f9f0 	bl	8000b2c <__aeabi_dcmplt>
 801774c:	b110      	cbz	r0, 8017754 <_printf_float+0x90>
 801774e:	232d      	movs	r3, #45	; 0x2d
 8017750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017754:	4b93      	ldr	r3, [pc, #588]	; (80179a4 <_printf_float+0x2e0>)
 8017756:	4894      	ldr	r0, [pc, #592]	; (80179a8 <_printf_float+0x2e4>)
 8017758:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801775c:	bf94      	ite	ls
 801775e:	4698      	movls	r8, r3
 8017760:	4680      	movhi	r8, r0
 8017762:	2303      	movs	r3, #3
 8017764:	6123      	str	r3, [r4, #16]
 8017766:	9b05      	ldr	r3, [sp, #20]
 8017768:	f023 0204 	bic.w	r2, r3, #4
 801776c:	6022      	str	r2, [r4, #0]
 801776e:	f04f 0900 	mov.w	r9, #0
 8017772:	9700      	str	r7, [sp, #0]
 8017774:	4633      	mov	r3, r6
 8017776:	aa0b      	add	r2, sp, #44	; 0x2c
 8017778:	4621      	mov	r1, r4
 801777a:	4628      	mov	r0, r5
 801777c:	f000 f9d8 	bl	8017b30 <_printf_common>
 8017780:	3001      	adds	r0, #1
 8017782:	f040 8090 	bne.w	80178a6 <_printf_float+0x1e2>
 8017786:	f04f 30ff 	mov.w	r0, #4294967295
 801778a:	b00d      	add	sp, #52	; 0x34
 801778c:	ecbd 8b02 	vpop	{d8}
 8017790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017794:	4642      	mov	r2, r8
 8017796:	464b      	mov	r3, r9
 8017798:	4640      	mov	r0, r8
 801779a:	4649      	mov	r1, r9
 801779c:	f7e9 f9ee 	bl	8000b7c <__aeabi_dcmpun>
 80177a0:	b140      	cbz	r0, 80177b4 <_printf_float+0xf0>
 80177a2:	464b      	mov	r3, r9
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	bfbc      	itt	lt
 80177a8:	232d      	movlt	r3, #45	; 0x2d
 80177aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80177ae:	487f      	ldr	r0, [pc, #508]	; (80179ac <_printf_float+0x2e8>)
 80177b0:	4b7f      	ldr	r3, [pc, #508]	; (80179b0 <_printf_float+0x2ec>)
 80177b2:	e7d1      	b.n	8017758 <_printf_float+0x94>
 80177b4:	6863      	ldr	r3, [r4, #4]
 80177b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80177ba:	9206      	str	r2, [sp, #24]
 80177bc:	1c5a      	adds	r2, r3, #1
 80177be:	d13f      	bne.n	8017840 <_printf_float+0x17c>
 80177c0:	2306      	movs	r3, #6
 80177c2:	6063      	str	r3, [r4, #4]
 80177c4:	9b05      	ldr	r3, [sp, #20]
 80177c6:	6861      	ldr	r1, [r4, #4]
 80177c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80177cc:	2300      	movs	r3, #0
 80177ce:	9303      	str	r3, [sp, #12]
 80177d0:	ab0a      	add	r3, sp, #40	; 0x28
 80177d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80177d6:	ab09      	add	r3, sp, #36	; 0x24
 80177d8:	ec49 8b10 	vmov	d0, r8, r9
 80177dc:	9300      	str	r3, [sp, #0]
 80177de:	6022      	str	r2, [r4, #0]
 80177e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80177e4:	4628      	mov	r0, r5
 80177e6:	f7ff fecd 	bl	8017584 <__cvt>
 80177ea:	9b06      	ldr	r3, [sp, #24]
 80177ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80177ee:	2b47      	cmp	r3, #71	; 0x47
 80177f0:	4680      	mov	r8, r0
 80177f2:	d108      	bne.n	8017806 <_printf_float+0x142>
 80177f4:	1cc8      	adds	r0, r1, #3
 80177f6:	db02      	blt.n	80177fe <_printf_float+0x13a>
 80177f8:	6863      	ldr	r3, [r4, #4]
 80177fa:	4299      	cmp	r1, r3
 80177fc:	dd41      	ble.n	8017882 <_printf_float+0x1be>
 80177fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8017802:	fa5f fb8b 	uxtb.w	fp, fp
 8017806:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801780a:	d820      	bhi.n	801784e <_printf_float+0x18a>
 801780c:	3901      	subs	r1, #1
 801780e:	465a      	mov	r2, fp
 8017810:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017814:	9109      	str	r1, [sp, #36]	; 0x24
 8017816:	f7ff ff17 	bl	8017648 <__exponent>
 801781a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801781c:	1813      	adds	r3, r2, r0
 801781e:	2a01      	cmp	r2, #1
 8017820:	4681      	mov	r9, r0
 8017822:	6123      	str	r3, [r4, #16]
 8017824:	dc02      	bgt.n	801782c <_printf_float+0x168>
 8017826:	6822      	ldr	r2, [r4, #0]
 8017828:	07d2      	lsls	r2, r2, #31
 801782a:	d501      	bpl.n	8017830 <_printf_float+0x16c>
 801782c:	3301      	adds	r3, #1
 801782e:	6123      	str	r3, [r4, #16]
 8017830:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017834:	2b00      	cmp	r3, #0
 8017836:	d09c      	beq.n	8017772 <_printf_float+0xae>
 8017838:	232d      	movs	r3, #45	; 0x2d
 801783a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801783e:	e798      	b.n	8017772 <_printf_float+0xae>
 8017840:	9a06      	ldr	r2, [sp, #24]
 8017842:	2a47      	cmp	r2, #71	; 0x47
 8017844:	d1be      	bne.n	80177c4 <_printf_float+0x100>
 8017846:	2b00      	cmp	r3, #0
 8017848:	d1bc      	bne.n	80177c4 <_printf_float+0x100>
 801784a:	2301      	movs	r3, #1
 801784c:	e7b9      	b.n	80177c2 <_printf_float+0xfe>
 801784e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017852:	d118      	bne.n	8017886 <_printf_float+0x1c2>
 8017854:	2900      	cmp	r1, #0
 8017856:	6863      	ldr	r3, [r4, #4]
 8017858:	dd0b      	ble.n	8017872 <_printf_float+0x1ae>
 801785a:	6121      	str	r1, [r4, #16]
 801785c:	b913      	cbnz	r3, 8017864 <_printf_float+0x1a0>
 801785e:	6822      	ldr	r2, [r4, #0]
 8017860:	07d0      	lsls	r0, r2, #31
 8017862:	d502      	bpl.n	801786a <_printf_float+0x1a6>
 8017864:	3301      	adds	r3, #1
 8017866:	440b      	add	r3, r1
 8017868:	6123      	str	r3, [r4, #16]
 801786a:	65a1      	str	r1, [r4, #88]	; 0x58
 801786c:	f04f 0900 	mov.w	r9, #0
 8017870:	e7de      	b.n	8017830 <_printf_float+0x16c>
 8017872:	b913      	cbnz	r3, 801787a <_printf_float+0x1b6>
 8017874:	6822      	ldr	r2, [r4, #0]
 8017876:	07d2      	lsls	r2, r2, #31
 8017878:	d501      	bpl.n	801787e <_printf_float+0x1ba>
 801787a:	3302      	adds	r3, #2
 801787c:	e7f4      	b.n	8017868 <_printf_float+0x1a4>
 801787e:	2301      	movs	r3, #1
 8017880:	e7f2      	b.n	8017868 <_printf_float+0x1a4>
 8017882:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017888:	4299      	cmp	r1, r3
 801788a:	db05      	blt.n	8017898 <_printf_float+0x1d4>
 801788c:	6823      	ldr	r3, [r4, #0]
 801788e:	6121      	str	r1, [r4, #16]
 8017890:	07d8      	lsls	r0, r3, #31
 8017892:	d5ea      	bpl.n	801786a <_printf_float+0x1a6>
 8017894:	1c4b      	adds	r3, r1, #1
 8017896:	e7e7      	b.n	8017868 <_printf_float+0x1a4>
 8017898:	2900      	cmp	r1, #0
 801789a:	bfd4      	ite	le
 801789c:	f1c1 0202 	rsble	r2, r1, #2
 80178a0:	2201      	movgt	r2, #1
 80178a2:	4413      	add	r3, r2
 80178a4:	e7e0      	b.n	8017868 <_printf_float+0x1a4>
 80178a6:	6823      	ldr	r3, [r4, #0]
 80178a8:	055a      	lsls	r2, r3, #21
 80178aa:	d407      	bmi.n	80178bc <_printf_float+0x1f8>
 80178ac:	6923      	ldr	r3, [r4, #16]
 80178ae:	4642      	mov	r2, r8
 80178b0:	4631      	mov	r1, r6
 80178b2:	4628      	mov	r0, r5
 80178b4:	47b8      	blx	r7
 80178b6:	3001      	adds	r0, #1
 80178b8:	d12c      	bne.n	8017914 <_printf_float+0x250>
 80178ba:	e764      	b.n	8017786 <_printf_float+0xc2>
 80178bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80178c0:	f240 80e0 	bls.w	8017a84 <_printf_float+0x3c0>
 80178c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80178c8:	2200      	movs	r2, #0
 80178ca:	2300      	movs	r3, #0
 80178cc:	f7e9 f924 	bl	8000b18 <__aeabi_dcmpeq>
 80178d0:	2800      	cmp	r0, #0
 80178d2:	d034      	beq.n	801793e <_printf_float+0x27a>
 80178d4:	4a37      	ldr	r2, [pc, #220]	; (80179b4 <_printf_float+0x2f0>)
 80178d6:	2301      	movs	r3, #1
 80178d8:	4631      	mov	r1, r6
 80178da:	4628      	mov	r0, r5
 80178dc:	47b8      	blx	r7
 80178de:	3001      	adds	r0, #1
 80178e0:	f43f af51 	beq.w	8017786 <_printf_float+0xc2>
 80178e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80178e8:	429a      	cmp	r2, r3
 80178ea:	db02      	blt.n	80178f2 <_printf_float+0x22e>
 80178ec:	6823      	ldr	r3, [r4, #0]
 80178ee:	07d8      	lsls	r0, r3, #31
 80178f0:	d510      	bpl.n	8017914 <_printf_float+0x250>
 80178f2:	ee18 3a10 	vmov	r3, s16
 80178f6:	4652      	mov	r2, sl
 80178f8:	4631      	mov	r1, r6
 80178fa:	4628      	mov	r0, r5
 80178fc:	47b8      	blx	r7
 80178fe:	3001      	adds	r0, #1
 8017900:	f43f af41 	beq.w	8017786 <_printf_float+0xc2>
 8017904:	f04f 0800 	mov.w	r8, #0
 8017908:	f104 091a 	add.w	r9, r4, #26
 801790c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801790e:	3b01      	subs	r3, #1
 8017910:	4543      	cmp	r3, r8
 8017912:	dc09      	bgt.n	8017928 <_printf_float+0x264>
 8017914:	6823      	ldr	r3, [r4, #0]
 8017916:	079b      	lsls	r3, r3, #30
 8017918:	f100 8105 	bmi.w	8017b26 <_printf_float+0x462>
 801791c:	68e0      	ldr	r0, [r4, #12]
 801791e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017920:	4298      	cmp	r0, r3
 8017922:	bfb8      	it	lt
 8017924:	4618      	movlt	r0, r3
 8017926:	e730      	b.n	801778a <_printf_float+0xc6>
 8017928:	2301      	movs	r3, #1
 801792a:	464a      	mov	r2, r9
 801792c:	4631      	mov	r1, r6
 801792e:	4628      	mov	r0, r5
 8017930:	47b8      	blx	r7
 8017932:	3001      	adds	r0, #1
 8017934:	f43f af27 	beq.w	8017786 <_printf_float+0xc2>
 8017938:	f108 0801 	add.w	r8, r8, #1
 801793c:	e7e6      	b.n	801790c <_printf_float+0x248>
 801793e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017940:	2b00      	cmp	r3, #0
 8017942:	dc39      	bgt.n	80179b8 <_printf_float+0x2f4>
 8017944:	4a1b      	ldr	r2, [pc, #108]	; (80179b4 <_printf_float+0x2f0>)
 8017946:	2301      	movs	r3, #1
 8017948:	4631      	mov	r1, r6
 801794a:	4628      	mov	r0, r5
 801794c:	47b8      	blx	r7
 801794e:	3001      	adds	r0, #1
 8017950:	f43f af19 	beq.w	8017786 <_printf_float+0xc2>
 8017954:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017958:	4313      	orrs	r3, r2
 801795a:	d102      	bne.n	8017962 <_printf_float+0x29e>
 801795c:	6823      	ldr	r3, [r4, #0]
 801795e:	07d9      	lsls	r1, r3, #31
 8017960:	d5d8      	bpl.n	8017914 <_printf_float+0x250>
 8017962:	ee18 3a10 	vmov	r3, s16
 8017966:	4652      	mov	r2, sl
 8017968:	4631      	mov	r1, r6
 801796a:	4628      	mov	r0, r5
 801796c:	47b8      	blx	r7
 801796e:	3001      	adds	r0, #1
 8017970:	f43f af09 	beq.w	8017786 <_printf_float+0xc2>
 8017974:	f04f 0900 	mov.w	r9, #0
 8017978:	f104 0a1a 	add.w	sl, r4, #26
 801797c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801797e:	425b      	negs	r3, r3
 8017980:	454b      	cmp	r3, r9
 8017982:	dc01      	bgt.n	8017988 <_printf_float+0x2c4>
 8017984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017986:	e792      	b.n	80178ae <_printf_float+0x1ea>
 8017988:	2301      	movs	r3, #1
 801798a:	4652      	mov	r2, sl
 801798c:	4631      	mov	r1, r6
 801798e:	4628      	mov	r0, r5
 8017990:	47b8      	blx	r7
 8017992:	3001      	adds	r0, #1
 8017994:	f43f aef7 	beq.w	8017786 <_printf_float+0xc2>
 8017998:	f109 0901 	add.w	r9, r9, #1
 801799c:	e7ee      	b.n	801797c <_printf_float+0x2b8>
 801799e:	bf00      	nop
 80179a0:	7fefffff 	.word	0x7fefffff
 80179a4:	0801a648 	.word	0x0801a648
 80179a8:	0801a64c 	.word	0x0801a64c
 80179ac:	0801a654 	.word	0x0801a654
 80179b0:	0801a650 	.word	0x0801a650
 80179b4:	0801a658 	.word	0x0801a658
 80179b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80179ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80179bc:	429a      	cmp	r2, r3
 80179be:	bfa8      	it	ge
 80179c0:	461a      	movge	r2, r3
 80179c2:	2a00      	cmp	r2, #0
 80179c4:	4691      	mov	r9, r2
 80179c6:	dc37      	bgt.n	8017a38 <_printf_float+0x374>
 80179c8:	f04f 0b00 	mov.w	fp, #0
 80179cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80179d0:	f104 021a 	add.w	r2, r4, #26
 80179d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80179d6:	9305      	str	r3, [sp, #20]
 80179d8:	eba3 0309 	sub.w	r3, r3, r9
 80179dc:	455b      	cmp	r3, fp
 80179de:	dc33      	bgt.n	8017a48 <_printf_float+0x384>
 80179e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80179e4:	429a      	cmp	r2, r3
 80179e6:	db3b      	blt.n	8017a60 <_printf_float+0x39c>
 80179e8:	6823      	ldr	r3, [r4, #0]
 80179ea:	07da      	lsls	r2, r3, #31
 80179ec:	d438      	bmi.n	8017a60 <_printf_float+0x39c>
 80179ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80179f0:	9a05      	ldr	r2, [sp, #20]
 80179f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80179f4:	1a9a      	subs	r2, r3, r2
 80179f6:	eba3 0901 	sub.w	r9, r3, r1
 80179fa:	4591      	cmp	r9, r2
 80179fc:	bfa8      	it	ge
 80179fe:	4691      	movge	r9, r2
 8017a00:	f1b9 0f00 	cmp.w	r9, #0
 8017a04:	dc35      	bgt.n	8017a72 <_printf_float+0x3ae>
 8017a06:	f04f 0800 	mov.w	r8, #0
 8017a0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017a0e:	f104 0a1a 	add.w	sl, r4, #26
 8017a12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017a16:	1a9b      	subs	r3, r3, r2
 8017a18:	eba3 0309 	sub.w	r3, r3, r9
 8017a1c:	4543      	cmp	r3, r8
 8017a1e:	f77f af79 	ble.w	8017914 <_printf_float+0x250>
 8017a22:	2301      	movs	r3, #1
 8017a24:	4652      	mov	r2, sl
 8017a26:	4631      	mov	r1, r6
 8017a28:	4628      	mov	r0, r5
 8017a2a:	47b8      	blx	r7
 8017a2c:	3001      	adds	r0, #1
 8017a2e:	f43f aeaa 	beq.w	8017786 <_printf_float+0xc2>
 8017a32:	f108 0801 	add.w	r8, r8, #1
 8017a36:	e7ec      	b.n	8017a12 <_printf_float+0x34e>
 8017a38:	4613      	mov	r3, r2
 8017a3a:	4631      	mov	r1, r6
 8017a3c:	4642      	mov	r2, r8
 8017a3e:	4628      	mov	r0, r5
 8017a40:	47b8      	blx	r7
 8017a42:	3001      	adds	r0, #1
 8017a44:	d1c0      	bne.n	80179c8 <_printf_float+0x304>
 8017a46:	e69e      	b.n	8017786 <_printf_float+0xc2>
 8017a48:	2301      	movs	r3, #1
 8017a4a:	4631      	mov	r1, r6
 8017a4c:	4628      	mov	r0, r5
 8017a4e:	9205      	str	r2, [sp, #20]
 8017a50:	47b8      	blx	r7
 8017a52:	3001      	adds	r0, #1
 8017a54:	f43f ae97 	beq.w	8017786 <_printf_float+0xc2>
 8017a58:	9a05      	ldr	r2, [sp, #20]
 8017a5a:	f10b 0b01 	add.w	fp, fp, #1
 8017a5e:	e7b9      	b.n	80179d4 <_printf_float+0x310>
 8017a60:	ee18 3a10 	vmov	r3, s16
 8017a64:	4652      	mov	r2, sl
 8017a66:	4631      	mov	r1, r6
 8017a68:	4628      	mov	r0, r5
 8017a6a:	47b8      	blx	r7
 8017a6c:	3001      	adds	r0, #1
 8017a6e:	d1be      	bne.n	80179ee <_printf_float+0x32a>
 8017a70:	e689      	b.n	8017786 <_printf_float+0xc2>
 8017a72:	9a05      	ldr	r2, [sp, #20]
 8017a74:	464b      	mov	r3, r9
 8017a76:	4442      	add	r2, r8
 8017a78:	4631      	mov	r1, r6
 8017a7a:	4628      	mov	r0, r5
 8017a7c:	47b8      	blx	r7
 8017a7e:	3001      	adds	r0, #1
 8017a80:	d1c1      	bne.n	8017a06 <_printf_float+0x342>
 8017a82:	e680      	b.n	8017786 <_printf_float+0xc2>
 8017a84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017a86:	2a01      	cmp	r2, #1
 8017a88:	dc01      	bgt.n	8017a8e <_printf_float+0x3ca>
 8017a8a:	07db      	lsls	r3, r3, #31
 8017a8c:	d538      	bpl.n	8017b00 <_printf_float+0x43c>
 8017a8e:	2301      	movs	r3, #1
 8017a90:	4642      	mov	r2, r8
 8017a92:	4631      	mov	r1, r6
 8017a94:	4628      	mov	r0, r5
 8017a96:	47b8      	blx	r7
 8017a98:	3001      	adds	r0, #1
 8017a9a:	f43f ae74 	beq.w	8017786 <_printf_float+0xc2>
 8017a9e:	ee18 3a10 	vmov	r3, s16
 8017aa2:	4652      	mov	r2, sl
 8017aa4:	4631      	mov	r1, r6
 8017aa6:	4628      	mov	r0, r5
 8017aa8:	47b8      	blx	r7
 8017aaa:	3001      	adds	r0, #1
 8017aac:	f43f ae6b 	beq.w	8017786 <_printf_float+0xc2>
 8017ab0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017ab4:	2200      	movs	r2, #0
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	f7e9 f82e 	bl	8000b18 <__aeabi_dcmpeq>
 8017abc:	b9d8      	cbnz	r0, 8017af6 <_printf_float+0x432>
 8017abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ac0:	f108 0201 	add.w	r2, r8, #1
 8017ac4:	3b01      	subs	r3, #1
 8017ac6:	4631      	mov	r1, r6
 8017ac8:	4628      	mov	r0, r5
 8017aca:	47b8      	blx	r7
 8017acc:	3001      	adds	r0, #1
 8017ace:	d10e      	bne.n	8017aee <_printf_float+0x42a>
 8017ad0:	e659      	b.n	8017786 <_printf_float+0xc2>
 8017ad2:	2301      	movs	r3, #1
 8017ad4:	4652      	mov	r2, sl
 8017ad6:	4631      	mov	r1, r6
 8017ad8:	4628      	mov	r0, r5
 8017ada:	47b8      	blx	r7
 8017adc:	3001      	adds	r0, #1
 8017ade:	f43f ae52 	beq.w	8017786 <_printf_float+0xc2>
 8017ae2:	f108 0801 	add.w	r8, r8, #1
 8017ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ae8:	3b01      	subs	r3, #1
 8017aea:	4543      	cmp	r3, r8
 8017aec:	dcf1      	bgt.n	8017ad2 <_printf_float+0x40e>
 8017aee:	464b      	mov	r3, r9
 8017af0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017af4:	e6dc      	b.n	80178b0 <_printf_float+0x1ec>
 8017af6:	f04f 0800 	mov.w	r8, #0
 8017afa:	f104 0a1a 	add.w	sl, r4, #26
 8017afe:	e7f2      	b.n	8017ae6 <_printf_float+0x422>
 8017b00:	2301      	movs	r3, #1
 8017b02:	4642      	mov	r2, r8
 8017b04:	e7df      	b.n	8017ac6 <_printf_float+0x402>
 8017b06:	2301      	movs	r3, #1
 8017b08:	464a      	mov	r2, r9
 8017b0a:	4631      	mov	r1, r6
 8017b0c:	4628      	mov	r0, r5
 8017b0e:	47b8      	blx	r7
 8017b10:	3001      	adds	r0, #1
 8017b12:	f43f ae38 	beq.w	8017786 <_printf_float+0xc2>
 8017b16:	f108 0801 	add.w	r8, r8, #1
 8017b1a:	68e3      	ldr	r3, [r4, #12]
 8017b1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017b1e:	1a5b      	subs	r3, r3, r1
 8017b20:	4543      	cmp	r3, r8
 8017b22:	dcf0      	bgt.n	8017b06 <_printf_float+0x442>
 8017b24:	e6fa      	b.n	801791c <_printf_float+0x258>
 8017b26:	f04f 0800 	mov.w	r8, #0
 8017b2a:	f104 0919 	add.w	r9, r4, #25
 8017b2e:	e7f4      	b.n	8017b1a <_printf_float+0x456>

08017b30 <_printf_common>:
 8017b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b34:	4616      	mov	r6, r2
 8017b36:	4699      	mov	r9, r3
 8017b38:	688a      	ldr	r2, [r1, #8]
 8017b3a:	690b      	ldr	r3, [r1, #16]
 8017b3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017b40:	4293      	cmp	r3, r2
 8017b42:	bfb8      	it	lt
 8017b44:	4613      	movlt	r3, r2
 8017b46:	6033      	str	r3, [r6, #0]
 8017b48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017b4c:	4607      	mov	r7, r0
 8017b4e:	460c      	mov	r4, r1
 8017b50:	b10a      	cbz	r2, 8017b56 <_printf_common+0x26>
 8017b52:	3301      	adds	r3, #1
 8017b54:	6033      	str	r3, [r6, #0]
 8017b56:	6823      	ldr	r3, [r4, #0]
 8017b58:	0699      	lsls	r1, r3, #26
 8017b5a:	bf42      	ittt	mi
 8017b5c:	6833      	ldrmi	r3, [r6, #0]
 8017b5e:	3302      	addmi	r3, #2
 8017b60:	6033      	strmi	r3, [r6, #0]
 8017b62:	6825      	ldr	r5, [r4, #0]
 8017b64:	f015 0506 	ands.w	r5, r5, #6
 8017b68:	d106      	bne.n	8017b78 <_printf_common+0x48>
 8017b6a:	f104 0a19 	add.w	sl, r4, #25
 8017b6e:	68e3      	ldr	r3, [r4, #12]
 8017b70:	6832      	ldr	r2, [r6, #0]
 8017b72:	1a9b      	subs	r3, r3, r2
 8017b74:	42ab      	cmp	r3, r5
 8017b76:	dc26      	bgt.n	8017bc6 <_printf_common+0x96>
 8017b78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017b7c:	1e13      	subs	r3, r2, #0
 8017b7e:	6822      	ldr	r2, [r4, #0]
 8017b80:	bf18      	it	ne
 8017b82:	2301      	movne	r3, #1
 8017b84:	0692      	lsls	r2, r2, #26
 8017b86:	d42b      	bmi.n	8017be0 <_printf_common+0xb0>
 8017b88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017b8c:	4649      	mov	r1, r9
 8017b8e:	4638      	mov	r0, r7
 8017b90:	47c0      	blx	r8
 8017b92:	3001      	adds	r0, #1
 8017b94:	d01e      	beq.n	8017bd4 <_printf_common+0xa4>
 8017b96:	6823      	ldr	r3, [r4, #0]
 8017b98:	68e5      	ldr	r5, [r4, #12]
 8017b9a:	6832      	ldr	r2, [r6, #0]
 8017b9c:	f003 0306 	and.w	r3, r3, #6
 8017ba0:	2b04      	cmp	r3, #4
 8017ba2:	bf08      	it	eq
 8017ba4:	1aad      	subeq	r5, r5, r2
 8017ba6:	68a3      	ldr	r3, [r4, #8]
 8017ba8:	6922      	ldr	r2, [r4, #16]
 8017baa:	bf0c      	ite	eq
 8017bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017bb0:	2500      	movne	r5, #0
 8017bb2:	4293      	cmp	r3, r2
 8017bb4:	bfc4      	itt	gt
 8017bb6:	1a9b      	subgt	r3, r3, r2
 8017bb8:	18ed      	addgt	r5, r5, r3
 8017bba:	2600      	movs	r6, #0
 8017bbc:	341a      	adds	r4, #26
 8017bbe:	42b5      	cmp	r5, r6
 8017bc0:	d11a      	bne.n	8017bf8 <_printf_common+0xc8>
 8017bc2:	2000      	movs	r0, #0
 8017bc4:	e008      	b.n	8017bd8 <_printf_common+0xa8>
 8017bc6:	2301      	movs	r3, #1
 8017bc8:	4652      	mov	r2, sl
 8017bca:	4649      	mov	r1, r9
 8017bcc:	4638      	mov	r0, r7
 8017bce:	47c0      	blx	r8
 8017bd0:	3001      	adds	r0, #1
 8017bd2:	d103      	bne.n	8017bdc <_printf_common+0xac>
 8017bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8017bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bdc:	3501      	adds	r5, #1
 8017bde:	e7c6      	b.n	8017b6e <_printf_common+0x3e>
 8017be0:	18e1      	adds	r1, r4, r3
 8017be2:	1c5a      	adds	r2, r3, #1
 8017be4:	2030      	movs	r0, #48	; 0x30
 8017be6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017bea:	4422      	add	r2, r4
 8017bec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017bf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017bf4:	3302      	adds	r3, #2
 8017bf6:	e7c7      	b.n	8017b88 <_printf_common+0x58>
 8017bf8:	2301      	movs	r3, #1
 8017bfa:	4622      	mov	r2, r4
 8017bfc:	4649      	mov	r1, r9
 8017bfe:	4638      	mov	r0, r7
 8017c00:	47c0      	blx	r8
 8017c02:	3001      	adds	r0, #1
 8017c04:	d0e6      	beq.n	8017bd4 <_printf_common+0xa4>
 8017c06:	3601      	adds	r6, #1
 8017c08:	e7d9      	b.n	8017bbe <_printf_common+0x8e>
	...

08017c0c <_printf_i>:
 8017c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017c10:	7e0f      	ldrb	r7, [r1, #24]
 8017c12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017c14:	2f78      	cmp	r7, #120	; 0x78
 8017c16:	4691      	mov	r9, r2
 8017c18:	4680      	mov	r8, r0
 8017c1a:	460c      	mov	r4, r1
 8017c1c:	469a      	mov	sl, r3
 8017c1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017c22:	d807      	bhi.n	8017c34 <_printf_i+0x28>
 8017c24:	2f62      	cmp	r7, #98	; 0x62
 8017c26:	d80a      	bhi.n	8017c3e <_printf_i+0x32>
 8017c28:	2f00      	cmp	r7, #0
 8017c2a:	f000 80d8 	beq.w	8017dde <_printf_i+0x1d2>
 8017c2e:	2f58      	cmp	r7, #88	; 0x58
 8017c30:	f000 80a3 	beq.w	8017d7a <_printf_i+0x16e>
 8017c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017c38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017c3c:	e03a      	b.n	8017cb4 <_printf_i+0xa8>
 8017c3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017c42:	2b15      	cmp	r3, #21
 8017c44:	d8f6      	bhi.n	8017c34 <_printf_i+0x28>
 8017c46:	a101      	add	r1, pc, #4	; (adr r1, 8017c4c <_printf_i+0x40>)
 8017c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017c4c:	08017ca5 	.word	0x08017ca5
 8017c50:	08017cb9 	.word	0x08017cb9
 8017c54:	08017c35 	.word	0x08017c35
 8017c58:	08017c35 	.word	0x08017c35
 8017c5c:	08017c35 	.word	0x08017c35
 8017c60:	08017c35 	.word	0x08017c35
 8017c64:	08017cb9 	.word	0x08017cb9
 8017c68:	08017c35 	.word	0x08017c35
 8017c6c:	08017c35 	.word	0x08017c35
 8017c70:	08017c35 	.word	0x08017c35
 8017c74:	08017c35 	.word	0x08017c35
 8017c78:	08017dc5 	.word	0x08017dc5
 8017c7c:	08017ce9 	.word	0x08017ce9
 8017c80:	08017da7 	.word	0x08017da7
 8017c84:	08017c35 	.word	0x08017c35
 8017c88:	08017c35 	.word	0x08017c35
 8017c8c:	08017de7 	.word	0x08017de7
 8017c90:	08017c35 	.word	0x08017c35
 8017c94:	08017ce9 	.word	0x08017ce9
 8017c98:	08017c35 	.word	0x08017c35
 8017c9c:	08017c35 	.word	0x08017c35
 8017ca0:	08017daf 	.word	0x08017daf
 8017ca4:	682b      	ldr	r3, [r5, #0]
 8017ca6:	1d1a      	adds	r2, r3, #4
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	602a      	str	r2, [r5, #0]
 8017cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017cb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017cb4:	2301      	movs	r3, #1
 8017cb6:	e0a3      	b.n	8017e00 <_printf_i+0x1f4>
 8017cb8:	6820      	ldr	r0, [r4, #0]
 8017cba:	6829      	ldr	r1, [r5, #0]
 8017cbc:	0606      	lsls	r6, r0, #24
 8017cbe:	f101 0304 	add.w	r3, r1, #4
 8017cc2:	d50a      	bpl.n	8017cda <_printf_i+0xce>
 8017cc4:	680e      	ldr	r6, [r1, #0]
 8017cc6:	602b      	str	r3, [r5, #0]
 8017cc8:	2e00      	cmp	r6, #0
 8017cca:	da03      	bge.n	8017cd4 <_printf_i+0xc8>
 8017ccc:	232d      	movs	r3, #45	; 0x2d
 8017cce:	4276      	negs	r6, r6
 8017cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017cd4:	485e      	ldr	r0, [pc, #376]	; (8017e50 <_printf_i+0x244>)
 8017cd6:	230a      	movs	r3, #10
 8017cd8:	e019      	b.n	8017d0e <_printf_i+0x102>
 8017cda:	680e      	ldr	r6, [r1, #0]
 8017cdc:	602b      	str	r3, [r5, #0]
 8017cde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017ce2:	bf18      	it	ne
 8017ce4:	b236      	sxthne	r6, r6
 8017ce6:	e7ef      	b.n	8017cc8 <_printf_i+0xbc>
 8017ce8:	682b      	ldr	r3, [r5, #0]
 8017cea:	6820      	ldr	r0, [r4, #0]
 8017cec:	1d19      	adds	r1, r3, #4
 8017cee:	6029      	str	r1, [r5, #0]
 8017cf0:	0601      	lsls	r1, r0, #24
 8017cf2:	d501      	bpl.n	8017cf8 <_printf_i+0xec>
 8017cf4:	681e      	ldr	r6, [r3, #0]
 8017cf6:	e002      	b.n	8017cfe <_printf_i+0xf2>
 8017cf8:	0646      	lsls	r6, r0, #25
 8017cfa:	d5fb      	bpl.n	8017cf4 <_printf_i+0xe8>
 8017cfc:	881e      	ldrh	r6, [r3, #0]
 8017cfe:	4854      	ldr	r0, [pc, #336]	; (8017e50 <_printf_i+0x244>)
 8017d00:	2f6f      	cmp	r7, #111	; 0x6f
 8017d02:	bf0c      	ite	eq
 8017d04:	2308      	moveq	r3, #8
 8017d06:	230a      	movne	r3, #10
 8017d08:	2100      	movs	r1, #0
 8017d0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017d0e:	6865      	ldr	r5, [r4, #4]
 8017d10:	60a5      	str	r5, [r4, #8]
 8017d12:	2d00      	cmp	r5, #0
 8017d14:	bfa2      	ittt	ge
 8017d16:	6821      	ldrge	r1, [r4, #0]
 8017d18:	f021 0104 	bicge.w	r1, r1, #4
 8017d1c:	6021      	strge	r1, [r4, #0]
 8017d1e:	b90e      	cbnz	r6, 8017d24 <_printf_i+0x118>
 8017d20:	2d00      	cmp	r5, #0
 8017d22:	d04d      	beq.n	8017dc0 <_printf_i+0x1b4>
 8017d24:	4615      	mov	r5, r2
 8017d26:	fbb6 f1f3 	udiv	r1, r6, r3
 8017d2a:	fb03 6711 	mls	r7, r3, r1, r6
 8017d2e:	5dc7      	ldrb	r7, [r0, r7]
 8017d30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017d34:	4637      	mov	r7, r6
 8017d36:	42bb      	cmp	r3, r7
 8017d38:	460e      	mov	r6, r1
 8017d3a:	d9f4      	bls.n	8017d26 <_printf_i+0x11a>
 8017d3c:	2b08      	cmp	r3, #8
 8017d3e:	d10b      	bne.n	8017d58 <_printf_i+0x14c>
 8017d40:	6823      	ldr	r3, [r4, #0]
 8017d42:	07de      	lsls	r6, r3, #31
 8017d44:	d508      	bpl.n	8017d58 <_printf_i+0x14c>
 8017d46:	6923      	ldr	r3, [r4, #16]
 8017d48:	6861      	ldr	r1, [r4, #4]
 8017d4a:	4299      	cmp	r1, r3
 8017d4c:	bfde      	ittt	le
 8017d4e:	2330      	movle	r3, #48	; 0x30
 8017d50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017d54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017d58:	1b52      	subs	r2, r2, r5
 8017d5a:	6122      	str	r2, [r4, #16]
 8017d5c:	f8cd a000 	str.w	sl, [sp]
 8017d60:	464b      	mov	r3, r9
 8017d62:	aa03      	add	r2, sp, #12
 8017d64:	4621      	mov	r1, r4
 8017d66:	4640      	mov	r0, r8
 8017d68:	f7ff fee2 	bl	8017b30 <_printf_common>
 8017d6c:	3001      	adds	r0, #1
 8017d6e:	d14c      	bne.n	8017e0a <_printf_i+0x1fe>
 8017d70:	f04f 30ff 	mov.w	r0, #4294967295
 8017d74:	b004      	add	sp, #16
 8017d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d7a:	4835      	ldr	r0, [pc, #212]	; (8017e50 <_printf_i+0x244>)
 8017d7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017d80:	6829      	ldr	r1, [r5, #0]
 8017d82:	6823      	ldr	r3, [r4, #0]
 8017d84:	f851 6b04 	ldr.w	r6, [r1], #4
 8017d88:	6029      	str	r1, [r5, #0]
 8017d8a:	061d      	lsls	r5, r3, #24
 8017d8c:	d514      	bpl.n	8017db8 <_printf_i+0x1ac>
 8017d8e:	07df      	lsls	r7, r3, #31
 8017d90:	bf44      	itt	mi
 8017d92:	f043 0320 	orrmi.w	r3, r3, #32
 8017d96:	6023      	strmi	r3, [r4, #0]
 8017d98:	b91e      	cbnz	r6, 8017da2 <_printf_i+0x196>
 8017d9a:	6823      	ldr	r3, [r4, #0]
 8017d9c:	f023 0320 	bic.w	r3, r3, #32
 8017da0:	6023      	str	r3, [r4, #0]
 8017da2:	2310      	movs	r3, #16
 8017da4:	e7b0      	b.n	8017d08 <_printf_i+0xfc>
 8017da6:	6823      	ldr	r3, [r4, #0]
 8017da8:	f043 0320 	orr.w	r3, r3, #32
 8017dac:	6023      	str	r3, [r4, #0]
 8017dae:	2378      	movs	r3, #120	; 0x78
 8017db0:	4828      	ldr	r0, [pc, #160]	; (8017e54 <_printf_i+0x248>)
 8017db2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017db6:	e7e3      	b.n	8017d80 <_printf_i+0x174>
 8017db8:	0659      	lsls	r1, r3, #25
 8017dba:	bf48      	it	mi
 8017dbc:	b2b6      	uxthmi	r6, r6
 8017dbe:	e7e6      	b.n	8017d8e <_printf_i+0x182>
 8017dc0:	4615      	mov	r5, r2
 8017dc2:	e7bb      	b.n	8017d3c <_printf_i+0x130>
 8017dc4:	682b      	ldr	r3, [r5, #0]
 8017dc6:	6826      	ldr	r6, [r4, #0]
 8017dc8:	6961      	ldr	r1, [r4, #20]
 8017dca:	1d18      	adds	r0, r3, #4
 8017dcc:	6028      	str	r0, [r5, #0]
 8017dce:	0635      	lsls	r5, r6, #24
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	d501      	bpl.n	8017dd8 <_printf_i+0x1cc>
 8017dd4:	6019      	str	r1, [r3, #0]
 8017dd6:	e002      	b.n	8017dde <_printf_i+0x1d2>
 8017dd8:	0670      	lsls	r0, r6, #25
 8017dda:	d5fb      	bpl.n	8017dd4 <_printf_i+0x1c8>
 8017ddc:	8019      	strh	r1, [r3, #0]
 8017dde:	2300      	movs	r3, #0
 8017de0:	6123      	str	r3, [r4, #16]
 8017de2:	4615      	mov	r5, r2
 8017de4:	e7ba      	b.n	8017d5c <_printf_i+0x150>
 8017de6:	682b      	ldr	r3, [r5, #0]
 8017de8:	1d1a      	adds	r2, r3, #4
 8017dea:	602a      	str	r2, [r5, #0]
 8017dec:	681d      	ldr	r5, [r3, #0]
 8017dee:	6862      	ldr	r2, [r4, #4]
 8017df0:	2100      	movs	r1, #0
 8017df2:	4628      	mov	r0, r5
 8017df4:	f7e8 fa1c 	bl	8000230 <memchr>
 8017df8:	b108      	cbz	r0, 8017dfe <_printf_i+0x1f2>
 8017dfa:	1b40      	subs	r0, r0, r5
 8017dfc:	6060      	str	r0, [r4, #4]
 8017dfe:	6863      	ldr	r3, [r4, #4]
 8017e00:	6123      	str	r3, [r4, #16]
 8017e02:	2300      	movs	r3, #0
 8017e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017e08:	e7a8      	b.n	8017d5c <_printf_i+0x150>
 8017e0a:	6923      	ldr	r3, [r4, #16]
 8017e0c:	462a      	mov	r2, r5
 8017e0e:	4649      	mov	r1, r9
 8017e10:	4640      	mov	r0, r8
 8017e12:	47d0      	blx	sl
 8017e14:	3001      	adds	r0, #1
 8017e16:	d0ab      	beq.n	8017d70 <_printf_i+0x164>
 8017e18:	6823      	ldr	r3, [r4, #0]
 8017e1a:	079b      	lsls	r3, r3, #30
 8017e1c:	d413      	bmi.n	8017e46 <_printf_i+0x23a>
 8017e1e:	68e0      	ldr	r0, [r4, #12]
 8017e20:	9b03      	ldr	r3, [sp, #12]
 8017e22:	4298      	cmp	r0, r3
 8017e24:	bfb8      	it	lt
 8017e26:	4618      	movlt	r0, r3
 8017e28:	e7a4      	b.n	8017d74 <_printf_i+0x168>
 8017e2a:	2301      	movs	r3, #1
 8017e2c:	4632      	mov	r2, r6
 8017e2e:	4649      	mov	r1, r9
 8017e30:	4640      	mov	r0, r8
 8017e32:	47d0      	blx	sl
 8017e34:	3001      	adds	r0, #1
 8017e36:	d09b      	beq.n	8017d70 <_printf_i+0x164>
 8017e38:	3501      	adds	r5, #1
 8017e3a:	68e3      	ldr	r3, [r4, #12]
 8017e3c:	9903      	ldr	r1, [sp, #12]
 8017e3e:	1a5b      	subs	r3, r3, r1
 8017e40:	42ab      	cmp	r3, r5
 8017e42:	dcf2      	bgt.n	8017e2a <_printf_i+0x21e>
 8017e44:	e7eb      	b.n	8017e1e <_printf_i+0x212>
 8017e46:	2500      	movs	r5, #0
 8017e48:	f104 0619 	add.w	r6, r4, #25
 8017e4c:	e7f5      	b.n	8017e3a <_printf_i+0x22e>
 8017e4e:	bf00      	nop
 8017e50:	0801a65a 	.word	0x0801a65a
 8017e54:	0801a66b 	.word	0x0801a66b

08017e58 <iprintf>:
 8017e58:	b40f      	push	{r0, r1, r2, r3}
 8017e5a:	4b0a      	ldr	r3, [pc, #40]	; (8017e84 <iprintf+0x2c>)
 8017e5c:	b513      	push	{r0, r1, r4, lr}
 8017e5e:	681c      	ldr	r4, [r3, #0]
 8017e60:	b124      	cbz	r4, 8017e6c <iprintf+0x14>
 8017e62:	69a3      	ldr	r3, [r4, #24]
 8017e64:	b913      	cbnz	r3, 8017e6c <iprintf+0x14>
 8017e66:	4620      	mov	r0, r4
 8017e68:	f001 f87a 	bl	8018f60 <__sinit>
 8017e6c:	ab05      	add	r3, sp, #20
 8017e6e:	9a04      	ldr	r2, [sp, #16]
 8017e70:	68a1      	ldr	r1, [r4, #8]
 8017e72:	9301      	str	r3, [sp, #4]
 8017e74:	4620      	mov	r0, r4
 8017e76:	f001 fe29 	bl	8019acc <_vfiprintf_r>
 8017e7a:	b002      	add	sp, #8
 8017e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e80:	b004      	add	sp, #16
 8017e82:	4770      	bx	lr
 8017e84:	2000000c 	.word	0x2000000c

08017e88 <putchar>:
 8017e88:	4b09      	ldr	r3, [pc, #36]	; (8017eb0 <putchar+0x28>)
 8017e8a:	b513      	push	{r0, r1, r4, lr}
 8017e8c:	681c      	ldr	r4, [r3, #0]
 8017e8e:	4601      	mov	r1, r0
 8017e90:	b134      	cbz	r4, 8017ea0 <putchar+0x18>
 8017e92:	69a3      	ldr	r3, [r4, #24]
 8017e94:	b923      	cbnz	r3, 8017ea0 <putchar+0x18>
 8017e96:	9001      	str	r0, [sp, #4]
 8017e98:	4620      	mov	r0, r4
 8017e9a:	f001 f861 	bl	8018f60 <__sinit>
 8017e9e:	9901      	ldr	r1, [sp, #4]
 8017ea0:	68a2      	ldr	r2, [r4, #8]
 8017ea2:	4620      	mov	r0, r4
 8017ea4:	b002      	add	sp, #8
 8017ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017eaa:	f001 bf3f 	b.w	8019d2c <_putc_r>
 8017eae:	bf00      	nop
 8017eb0:	2000000c 	.word	0x2000000c

08017eb4 <__swbuf_r>:
 8017eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017eb6:	460e      	mov	r6, r1
 8017eb8:	4614      	mov	r4, r2
 8017eba:	4605      	mov	r5, r0
 8017ebc:	b118      	cbz	r0, 8017ec6 <__swbuf_r+0x12>
 8017ebe:	6983      	ldr	r3, [r0, #24]
 8017ec0:	b90b      	cbnz	r3, 8017ec6 <__swbuf_r+0x12>
 8017ec2:	f001 f84d 	bl	8018f60 <__sinit>
 8017ec6:	4b21      	ldr	r3, [pc, #132]	; (8017f4c <__swbuf_r+0x98>)
 8017ec8:	429c      	cmp	r4, r3
 8017eca:	d12b      	bne.n	8017f24 <__swbuf_r+0x70>
 8017ecc:	686c      	ldr	r4, [r5, #4]
 8017ece:	69a3      	ldr	r3, [r4, #24]
 8017ed0:	60a3      	str	r3, [r4, #8]
 8017ed2:	89a3      	ldrh	r3, [r4, #12]
 8017ed4:	071a      	lsls	r2, r3, #28
 8017ed6:	d52f      	bpl.n	8017f38 <__swbuf_r+0x84>
 8017ed8:	6923      	ldr	r3, [r4, #16]
 8017eda:	b36b      	cbz	r3, 8017f38 <__swbuf_r+0x84>
 8017edc:	6923      	ldr	r3, [r4, #16]
 8017ede:	6820      	ldr	r0, [r4, #0]
 8017ee0:	1ac0      	subs	r0, r0, r3
 8017ee2:	6963      	ldr	r3, [r4, #20]
 8017ee4:	b2f6      	uxtb	r6, r6
 8017ee6:	4283      	cmp	r3, r0
 8017ee8:	4637      	mov	r7, r6
 8017eea:	dc04      	bgt.n	8017ef6 <__swbuf_r+0x42>
 8017eec:	4621      	mov	r1, r4
 8017eee:	4628      	mov	r0, r5
 8017ef0:	f000 ffa2 	bl	8018e38 <_fflush_r>
 8017ef4:	bb30      	cbnz	r0, 8017f44 <__swbuf_r+0x90>
 8017ef6:	68a3      	ldr	r3, [r4, #8]
 8017ef8:	3b01      	subs	r3, #1
 8017efa:	60a3      	str	r3, [r4, #8]
 8017efc:	6823      	ldr	r3, [r4, #0]
 8017efe:	1c5a      	adds	r2, r3, #1
 8017f00:	6022      	str	r2, [r4, #0]
 8017f02:	701e      	strb	r6, [r3, #0]
 8017f04:	6963      	ldr	r3, [r4, #20]
 8017f06:	3001      	adds	r0, #1
 8017f08:	4283      	cmp	r3, r0
 8017f0a:	d004      	beq.n	8017f16 <__swbuf_r+0x62>
 8017f0c:	89a3      	ldrh	r3, [r4, #12]
 8017f0e:	07db      	lsls	r3, r3, #31
 8017f10:	d506      	bpl.n	8017f20 <__swbuf_r+0x6c>
 8017f12:	2e0a      	cmp	r6, #10
 8017f14:	d104      	bne.n	8017f20 <__swbuf_r+0x6c>
 8017f16:	4621      	mov	r1, r4
 8017f18:	4628      	mov	r0, r5
 8017f1a:	f000 ff8d 	bl	8018e38 <_fflush_r>
 8017f1e:	b988      	cbnz	r0, 8017f44 <__swbuf_r+0x90>
 8017f20:	4638      	mov	r0, r7
 8017f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f24:	4b0a      	ldr	r3, [pc, #40]	; (8017f50 <__swbuf_r+0x9c>)
 8017f26:	429c      	cmp	r4, r3
 8017f28:	d101      	bne.n	8017f2e <__swbuf_r+0x7a>
 8017f2a:	68ac      	ldr	r4, [r5, #8]
 8017f2c:	e7cf      	b.n	8017ece <__swbuf_r+0x1a>
 8017f2e:	4b09      	ldr	r3, [pc, #36]	; (8017f54 <__swbuf_r+0xa0>)
 8017f30:	429c      	cmp	r4, r3
 8017f32:	bf08      	it	eq
 8017f34:	68ec      	ldreq	r4, [r5, #12]
 8017f36:	e7ca      	b.n	8017ece <__swbuf_r+0x1a>
 8017f38:	4621      	mov	r1, r4
 8017f3a:	4628      	mov	r0, r5
 8017f3c:	f000 f80c 	bl	8017f58 <__swsetup_r>
 8017f40:	2800      	cmp	r0, #0
 8017f42:	d0cb      	beq.n	8017edc <__swbuf_r+0x28>
 8017f44:	f04f 37ff 	mov.w	r7, #4294967295
 8017f48:	e7ea      	b.n	8017f20 <__swbuf_r+0x6c>
 8017f4a:	bf00      	nop
 8017f4c:	0801a72c 	.word	0x0801a72c
 8017f50:	0801a74c 	.word	0x0801a74c
 8017f54:	0801a70c 	.word	0x0801a70c

08017f58 <__swsetup_r>:
 8017f58:	4b32      	ldr	r3, [pc, #200]	; (8018024 <__swsetup_r+0xcc>)
 8017f5a:	b570      	push	{r4, r5, r6, lr}
 8017f5c:	681d      	ldr	r5, [r3, #0]
 8017f5e:	4606      	mov	r6, r0
 8017f60:	460c      	mov	r4, r1
 8017f62:	b125      	cbz	r5, 8017f6e <__swsetup_r+0x16>
 8017f64:	69ab      	ldr	r3, [r5, #24]
 8017f66:	b913      	cbnz	r3, 8017f6e <__swsetup_r+0x16>
 8017f68:	4628      	mov	r0, r5
 8017f6a:	f000 fff9 	bl	8018f60 <__sinit>
 8017f6e:	4b2e      	ldr	r3, [pc, #184]	; (8018028 <__swsetup_r+0xd0>)
 8017f70:	429c      	cmp	r4, r3
 8017f72:	d10f      	bne.n	8017f94 <__swsetup_r+0x3c>
 8017f74:	686c      	ldr	r4, [r5, #4]
 8017f76:	89a3      	ldrh	r3, [r4, #12]
 8017f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017f7c:	0719      	lsls	r1, r3, #28
 8017f7e:	d42c      	bmi.n	8017fda <__swsetup_r+0x82>
 8017f80:	06dd      	lsls	r5, r3, #27
 8017f82:	d411      	bmi.n	8017fa8 <__swsetup_r+0x50>
 8017f84:	2309      	movs	r3, #9
 8017f86:	6033      	str	r3, [r6, #0]
 8017f88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017f8c:	81a3      	strh	r3, [r4, #12]
 8017f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8017f92:	e03e      	b.n	8018012 <__swsetup_r+0xba>
 8017f94:	4b25      	ldr	r3, [pc, #148]	; (801802c <__swsetup_r+0xd4>)
 8017f96:	429c      	cmp	r4, r3
 8017f98:	d101      	bne.n	8017f9e <__swsetup_r+0x46>
 8017f9a:	68ac      	ldr	r4, [r5, #8]
 8017f9c:	e7eb      	b.n	8017f76 <__swsetup_r+0x1e>
 8017f9e:	4b24      	ldr	r3, [pc, #144]	; (8018030 <__swsetup_r+0xd8>)
 8017fa0:	429c      	cmp	r4, r3
 8017fa2:	bf08      	it	eq
 8017fa4:	68ec      	ldreq	r4, [r5, #12]
 8017fa6:	e7e6      	b.n	8017f76 <__swsetup_r+0x1e>
 8017fa8:	0758      	lsls	r0, r3, #29
 8017faa:	d512      	bpl.n	8017fd2 <__swsetup_r+0x7a>
 8017fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017fae:	b141      	cbz	r1, 8017fc2 <__swsetup_r+0x6a>
 8017fb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017fb4:	4299      	cmp	r1, r3
 8017fb6:	d002      	beq.n	8017fbe <__swsetup_r+0x66>
 8017fb8:	4630      	mov	r0, r6
 8017fba:	f001 fc7d 	bl	80198b8 <_free_r>
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	6363      	str	r3, [r4, #52]	; 0x34
 8017fc2:	89a3      	ldrh	r3, [r4, #12]
 8017fc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017fc8:	81a3      	strh	r3, [r4, #12]
 8017fca:	2300      	movs	r3, #0
 8017fcc:	6063      	str	r3, [r4, #4]
 8017fce:	6923      	ldr	r3, [r4, #16]
 8017fd0:	6023      	str	r3, [r4, #0]
 8017fd2:	89a3      	ldrh	r3, [r4, #12]
 8017fd4:	f043 0308 	orr.w	r3, r3, #8
 8017fd8:	81a3      	strh	r3, [r4, #12]
 8017fda:	6923      	ldr	r3, [r4, #16]
 8017fdc:	b94b      	cbnz	r3, 8017ff2 <__swsetup_r+0x9a>
 8017fde:	89a3      	ldrh	r3, [r4, #12]
 8017fe0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017fe8:	d003      	beq.n	8017ff2 <__swsetup_r+0x9a>
 8017fea:	4621      	mov	r1, r4
 8017fec:	4630      	mov	r0, r6
 8017fee:	f001 f881 	bl	80190f4 <__smakebuf_r>
 8017ff2:	89a0      	ldrh	r0, [r4, #12]
 8017ff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017ff8:	f010 0301 	ands.w	r3, r0, #1
 8017ffc:	d00a      	beq.n	8018014 <__swsetup_r+0xbc>
 8017ffe:	2300      	movs	r3, #0
 8018000:	60a3      	str	r3, [r4, #8]
 8018002:	6963      	ldr	r3, [r4, #20]
 8018004:	425b      	negs	r3, r3
 8018006:	61a3      	str	r3, [r4, #24]
 8018008:	6923      	ldr	r3, [r4, #16]
 801800a:	b943      	cbnz	r3, 801801e <__swsetup_r+0xc6>
 801800c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018010:	d1ba      	bne.n	8017f88 <__swsetup_r+0x30>
 8018012:	bd70      	pop	{r4, r5, r6, pc}
 8018014:	0781      	lsls	r1, r0, #30
 8018016:	bf58      	it	pl
 8018018:	6963      	ldrpl	r3, [r4, #20]
 801801a:	60a3      	str	r3, [r4, #8]
 801801c:	e7f4      	b.n	8018008 <__swsetup_r+0xb0>
 801801e:	2000      	movs	r0, #0
 8018020:	e7f7      	b.n	8018012 <__swsetup_r+0xba>
 8018022:	bf00      	nop
 8018024:	2000000c 	.word	0x2000000c
 8018028:	0801a72c 	.word	0x0801a72c
 801802c:	0801a74c 	.word	0x0801a74c
 8018030:	0801a70c 	.word	0x0801a70c

08018034 <quorem>:
 8018034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018038:	6903      	ldr	r3, [r0, #16]
 801803a:	690c      	ldr	r4, [r1, #16]
 801803c:	42a3      	cmp	r3, r4
 801803e:	4607      	mov	r7, r0
 8018040:	f2c0 8081 	blt.w	8018146 <quorem+0x112>
 8018044:	3c01      	subs	r4, #1
 8018046:	f101 0814 	add.w	r8, r1, #20
 801804a:	f100 0514 	add.w	r5, r0, #20
 801804e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018052:	9301      	str	r3, [sp, #4]
 8018054:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018058:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801805c:	3301      	adds	r3, #1
 801805e:	429a      	cmp	r2, r3
 8018060:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018064:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018068:	fbb2 f6f3 	udiv	r6, r2, r3
 801806c:	d331      	bcc.n	80180d2 <quorem+0x9e>
 801806e:	f04f 0e00 	mov.w	lr, #0
 8018072:	4640      	mov	r0, r8
 8018074:	46ac      	mov	ip, r5
 8018076:	46f2      	mov	sl, lr
 8018078:	f850 2b04 	ldr.w	r2, [r0], #4
 801807c:	b293      	uxth	r3, r2
 801807e:	fb06 e303 	mla	r3, r6, r3, lr
 8018082:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8018086:	b29b      	uxth	r3, r3
 8018088:	ebaa 0303 	sub.w	r3, sl, r3
 801808c:	f8dc a000 	ldr.w	sl, [ip]
 8018090:	0c12      	lsrs	r2, r2, #16
 8018092:	fa13 f38a 	uxtah	r3, r3, sl
 8018096:	fb06 e202 	mla	r2, r6, r2, lr
 801809a:	9300      	str	r3, [sp, #0]
 801809c:	9b00      	ldr	r3, [sp, #0]
 801809e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80180a2:	b292      	uxth	r2, r2
 80180a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80180a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80180ac:	f8bd 3000 	ldrh.w	r3, [sp]
 80180b0:	4581      	cmp	r9, r0
 80180b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80180b6:	f84c 3b04 	str.w	r3, [ip], #4
 80180ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80180be:	d2db      	bcs.n	8018078 <quorem+0x44>
 80180c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80180c4:	b92b      	cbnz	r3, 80180d2 <quorem+0x9e>
 80180c6:	9b01      	ldr	r3, [sp, #4]
 80180c8:	3b04      	subs	r3, #4
 80180ca:	429d      	cmp	r5, r3
 80180cc:	461a      	mov	r2, r3
 80180ce:	d32e      	bcc.n	801812e <quorem+0xfa>
 80180d0:	613c      	str	r4, [r7, #16]
 80180d2:	4638      	mov	r0, r7
 80180d4:	f001 fad8 	bl	8019688 <__mcmp>
 80180d8:	2800      	cmp	r0, #0
 80180da:	db24      	blt.n	8018126 <quorem+0xf2>
 80180dc:	3601      	adds	r6, #1
 80180de:	4628      	mov	r0, r5
 80180e0:	f04f 0c00 	mov.w	ip, #0
 80180e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80180e8:	f8d0 e000 	ldr.w	lr, [r0]
 80180ec:	b293      	uxth	r3, r2
 80180ee:	ebac 0303 	sub.w	r3, ip, r3
 80180f2:	0c12      	lsrs	r2, r2, #16
 80180f4:	fa13 f38e 	uxtah	r3, r3, lr
 80180f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80180fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018100:	b29b      	uxth	r3, r3
 8018102:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018106:	45c1      	cmp	r9, r8
 8018108:	f840 3b04 	str.w	r3, [r0], #4
 801810c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018110:	d2e8      	bcs.n	80180e4 <quorem+0xb0>
 8018112:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018116:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801811a:	b922      	cbnz	r2, 8018126 <quorem+0xf2>
 801811c:	3b04      	subs	r3, #4
 801811e:	429d      	cmp	r5, r3
 8018120:	461a      	mov	r2, r3
 8018122:	d30a      	bcc.n	801813a <quorem+0x106>
 8018124:	613c      	str	r4, [r7, #16]
 8018126:	4630      	mov	r0, r6
 8018128:	b003      	add	sp, #12
 801812a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801812e:	6812      	ldr	r2, [r2, #0]
 8018130:	3b04      	subs	r3, #4
 8018132:	2a00      	cmp	r2, #0
 8018134:	d1cc      	bne.n	80180d0 <quorem+0x9c>
 8018136:	3c01      	subs	r4, #1
 8018138:	e7c7      	b.n	80180ca <quorem+0x96>
 801813a:	6812      	ldr	r2, [r2, #0]
 801813c:	3b04      	subs	r3, #4
 801813e:	2a00      	cmp	r2, #0
 8018140:	d1f0      	bne.n	8018124 <quorem+0xf0>
 8018142:	3c01      	subs	r4, #1
 8018144:	e7eb      	b.n	801811e <quorem+0xea>
 8018146:	2000      	movs	r0, #0
 8018148:	e7ee      	b.n	8018128 <quorem+0xf4>
 801814a:	0000      	movs	r0, r0
 801814c:	0000      	movs	r0, r0
	...

08018150 <_dtoa_r>:
 8018150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018154:	ed2d 8b04 	vpush	{d8-d9}
 8018158:	ec57 6b10 	vmov	r6, r7, d0
 801815c:	b093      	sub	sp, #76	; 0x4c
 801815e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018160:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018164:	9106      	str	r1, [sp, #24]
 8018166:	ee10 aa10 	vmov	sl, s0
 801816a:	4604      	mov	r4, r0
 801816c:	9209      	str	r2, [sp, #36]	; 0x24
 801816e:	930c      	str	r3, [sp, #48]	; 0x30
 8018170:	46bb      	mov	fp, r7
 8018172:	b975      	cbnz	r5, 8018192 <_dtoa_r+0x42>
 8018174:	2010      	movs	r0, #16
 8018176:	f000 fffd 	bl	8019174 <malloc>
 801817a:	4602      	mov	r2, r0
 801817c:	6260      	str	r0, [r4, #36]	; 0x24
 801817e:	b920      	cbnz	r0, 801818a <_dtoa_r+0x3a>
 8018180:	4ba7      	ldr	r3, [pc, #668]	; (8018420 <_dtoa_r+0x2d0>)
 8018182:	21ea      	movs	r1, #234	; 0xea
 8018184:	48a7      	ldr	r0, [pc, #668]	; (8018424 <_dtoa_r+0x2d4>)
 8018186:	f001 fe7f 	bl	8019e88 <__assert_func>
 801818a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801818e:	6005      	str	r5, [r0, #0]
 8018190:	60c5      	str	r5, [r0, #12]
 8018192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018194:	6819      	ldr	r1, [r3, #0]
 8018196:	b151      	cbz	r1, 80181ae <_dtoa_r+0x5e>
 8018198:	685a      	ldr	r2, [r3, #4]
 801819a:	604a      	str	r2, [r1, #4]
 801819c:	2301      	movs	r3, #1
 801819e:	4093      	lsls	r3, r2
 80181a0:	608b      	str	r3, [r1, #8]
 80181a2:	4620      	mov	r0, r4
 80181a4:	f001 f82e 	bl	8019204 <_Bfree>
 80181a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80181aa:	2200      	movs	r2, #0
 80181ac:	601a      	str	r2, [r3, #0]
 80181ae:	1e3b      	subs	r3, r7, #0
 80181b0:	bfaa      	itet	ge
 80181b2:	2300      	movge	r3, #0
 80181b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80181b8:	f8c8 3000 	strge.w	r3, [r8]
 80181bc:	4b9a      	ldr	r3, [pc, #616]	; (8018428 <_dtoa_r+0x2d8>)
 80181be:	bfbc      	itt	lt
 80181c0:	2201      	movlt	r2, #1
 80181c2:	f8c8 2000 	strlt.w	r2, [r8]
 80181c6:	ea33 030b 	bics.w	r3, r3, fp
 80181ca:	d11b      	bne.n	8018204 <_dtoa_r+0xb4>
 80181cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80181ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80181d2:	6013      	str	r3, [r2, #0]
 80181d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80181d8:	4333      	orrs	r3, r6
 80181da:	f000 8592 	beq.w	8018d02 <_dtoa_r+0xbb2>
 80181de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80181e0:	b963      	cbnz	r3, 80181fc <_dtoa_r+0xac>
 80181e2:	4b92      	ldr	r3, [pc, #584]	; (801842c <_dtoa_r+0x2dc>)
 80181e4:	e022      	b.n	801822c <_dtoa_r+0xdc>
 80181e6:	4b92      	ldr	r3, [pc, #584]	; (8018430 <_dtoa_r+0x2e0>)
 80181e8:	9301      	str	r3, [sp, #4]
 80181ea:	3308      	adds	r3, #8
 80181ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80181ee:	6013      	str	r3, [r2, #0]
 80181f0:	9801      	ldr	r0, [sp, #4]
 80181f2:	b013      	add	sp, #76	; 0x4c
 80181f4:	ecbd 8b04 	vpop	{d8-d9}
 80181f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181fc:	4b8b      	ldr	r3, [pc, #556]	; (801842c <_dtoa_r+0x2dc>)
 80181fe:	9301      	str	r3, [sp, #4]
 8018200:	3303      	adds	r3, #3
 8018202:	e7f3      	b.n	80181ec <_dtoa_r+0x9c>
 8018204:	2200      	movs	r2, #0
 8018206:	2300      	movs	r3, #0
 8018208:	4650      	mov	r0, sl
 801820a:	4659      	mov	r1, fp
 801820c:	f7e8 fc84 	bl	8000b18 <__aeabi_dcmpeq>
 8018210:	ec4b ab19 	vmov	d9, sl, fp
 8018214:	4680      	mov	r8, r0
 8018216:	b158      	cbz	r0, 8018230 <_dtoa_r+0xe0>
 8018218:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801821a:	2301      	movs	r3, #1
 801821c:	6013      	str	r3, [r2, #0]
 801821e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018220:	2b00      	cmp	r3, #0
 8018222:	f000 856b 	beq.w	8018cfc <_dtoa_r+0xbac>
 8018226:	4883      	ldr	r0, [pc, #524]	; (8018434 <_dtoa_r+0x2e4>)
 8018228:	6018      	str	r0, [r3, #0]
 801822a:	1e43      	subs	r3, r0, #1
 801822c:	9301      	str	r3, [sp, #4]
 801822e:	e7df      	b.n	80181f0 <_dtoa_r+0xa0>
 8018230:	ec4b ab10 	vmov	d0, sl, fp
 8018234:	aa10      	add	r2, sp, #64	; 0x40
 8018236:	a911      	add	r1, sp, #68	; 0x44
 8018238:	4620      	mov	r0, r4
 801823a:	f001 facb 	bl	80197d4 <__d2b>
 801823e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8018242:	ee08 0a10 	vmov	s16, r0
 8018246:	2d00      	cmp	r5, #0
 8018248:	f000 8084 	beq.w	8018354 <_dtoa_r+0x204>
 801824c:	ee19 3a90 	vmov	r3, s19
 8018250:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018254:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8018258:	4656      	mov	r6, sl
 801825a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801825e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8018262:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8018266:	4b74      	ldr	r3, [pc, #464]	; (8018438 <_dtoa_r+0x2e8>)
 8018268:	2200      	movs	r2, #0
 801826a:	4630      	mov	r0, r6
 801826c:	4639      	mov	r1, r7
 801826e:	f7e8 f833 	bl	80002d8 <__aeabi_dsub>
 8018272:	a365      	add	r3, pc, #404	; (adr r3, 8018408 <_dtoa_r+0x2b8>)
 8018274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018278:	f7e8 f9e6 	bl	8000648 <__aeabi_dmul>
 801827c:	a364      	add	r3, pc, #400	; (adr r3, 8018410 <_dtoa_r+0x2c0>)
 801827e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018282:	f7e8 f82b 	bl	80002dc <__adddf3>
 8018286:	4606      	mov	r6, r0
 8018288:	4628      	mov	r0, r5
 801828a:	460f      	mov	r7, r1
 801828c:	f7e8 f972 	bl	8000574 <__aeabi_i2d>
 8018290:	a361      	add	r3, pc, #388	; (adr r3, 8018418 <_dtoa_r+0x2c8>)
 8018292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018296:	f7e8 f9d7 	bl	8000648 <__aeabi_dmul>
 801829a:	4602      	mov	r2, r0
 801829c:	460b      	mov	r3, r1
 801829e:	4630      	mov	r0, r6
 80182a0:	4639      	mov	r1, r7
 80182a2:	f7e8 f81b 	bl	80002dc <__adddf3>
 80182a6:	4606      	mov	r6, r0
 80182a8:	460f      	mov	r7, r1
 80182aa:	f7e8 fc7d 	bl	8000ba8 <__aeabi_d2iz>
 80182ae:	2200      	movs	r2, #0
 80182b0:	9000      	str	r0, [sp, #0]
 80182b2:	2300      	movs	r3, #0
 80182b4:	4630      	mov	r0, r6
 80182b6:	4639      	mov	r1, r7
 80182b8:	f7e8 fc38 	bl	8000b2c <__aeabi_dcmplt>
 80182bc:	b150      	cbz	r0, 80182d4 <_dtoa_r+0x184>
 80182be:	9800      	ldr	r0, [sp, #0]
 80182c0:	f7e8 f958 	bl	8000574 <__aeabi_i2d>
 80182c4:	4632      	mov	r2, r6
 80182c6:	463b      	mov	r3, r7
 80182c8:	f7e8 fc26 	bl	8000b18 <__aeabi_dcmpeq>
 80182cc:	b910      	cbnz	r0, 80182d4 <_dtoa_r+0x184>
 80182ce:	9b00      	ldr	r3, [sp, #0]
 80182d0:	3b01      	subs	r3, #1
 80182d2:	9300      	str	r3, [sp, #0]
 80182d4:	9b00      	ldr	r3, [sp, #0]
 80182d6:	2b16      	cmp	r3, #22
 80182d8:	d85a      	bhi.n	8018390 <_dtoa_r+0x240>
 80182da:	9a00      	ldr	r2, [sp, #0]
 80182dc:	4b57      	ldr	r3, [pc, #348]	; (801843c <_dtoa_r+0x2ec>)
 80182de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80182e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182e6:	ec51 0b19 	vmov	r0, r1, d9
 80182ea:	f7e8 fc1f 	bl	8000b2c <__aeabi_dcmplt>
 80182ee:	2800      	cmp	r0, #0
 80182f0:	d050      	beq.n	8018394 <_dtoa_r+0x244>
 80182f2:	9b00      	ldr	r3, [sp, #0]
 80182f4:	3b01      	subs	r3, #1
 80182f6:	9300      	str	r3, [sp, #0]
 80182f8:	2300      	movs	r3, #0
 80182fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80182fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80182fe:	1b5d      	subs	r5, r3, r5
 8018300:	1e6b      	subs	r3, r5, #1
 8018302:	9305      	str	r3, [sp, #20]
 8018304:	bf45      	ittet	mi
 8018306:	f1c5 0301 	rsbmi	r3, r5, #1
 801830a:	9304      	strmi	r3, [sp, #16]
 801830c:	2300      	movpl	r3, #0
 801830e:	2300      	movmi	r3, #0
 8018310:	bf4c      	ite	mi
 8018312:	9305      	strmi	r3, [sp, #20]
 8018314:	9304      	strpl	r3, [sp, #16]
 8018316:	9b00      	ldr	r3, [sp, #0]
 8018318:	2b00      	cmp	r3, #0
 801831a:	db3d      	blt.n	8018398 <_dtoa_r+0x248>
 801831c:	9b05      	ldr	r3, [sp, #20]
 801831e:	9a00      	ldr	r2, [sp, #0]
 8018320:	920a      	str	r2, [sp, #40]	; 0x28
 8018322:	4413      	add	r3, r2
 8018324:	9305      	str	r3, [sp, #20]
 8018326:	2300      	movs	r3, #0
 8018328:	9307      	str	r3, [sp, #28]
 801832a:	9b06      	ldr	r3, [sp, #24]
 801832c:	2b09      	cmp	r3, #9
 801832e:	f200 8089 	bhi.w	8018444 <_dtoa_r+0x2f4>
 8018332:	2b05      	cmp	r3, #5
 8018334:	bfc4      	itt	gt
 8018336:	3b04      	subgt	r3, #4
 8018338:	9306      	strgt	r3, [sp, #24]
 801833a:	9b06      	ldr	r3, [sp, #24]
 801833c:	f1a3 0302 	sub.w	r3, r3, #2
 8018340:	bfcc      	ite	gt
 8018342:	2500      	movgt	r5, #0
 8018344:	2501      	movle	r5, #1
 8018346:	2b03      	cmp	r3, #3
 8018348:	f200 8087 	bhi.w	801845a <_dtoa_r+0x30a>
 801834c:	e8df f003 	tbb	[pc, r3]
 8018350:	59383a2d 	.word	0x59383a2d
 8018354:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8018358:	441d      	add	r5, r3
 801835a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801835e:	2b20      	cmp	r3, #32
 8018360:	bfc1      	itttt	gt
 8018362:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018366:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801836a:	fa0b f303 	lslgt.w	r3, fp, r3
 801836e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018372:	bfda      	itte	le
 8018374:	f1c3 0320 	rsble	r3, r3, #32
 8018378:	fa06 f003 	lslle.w	r0, r6, r3
 801837c:	4318      	orrgt	r0, r3
 801837e:	f7e8 f8e9 	bl	8000554 <__aeabi_ui2d>
 8018382:	2301      	movs	r3, #1
 8018384:	4606      	mov	r6, r0
 8018386:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801838a:	3d01      	subs	r5, #1
 801838c:	930e      	str	r3, [sp, #56]	; 0x38
 801838e:	e76a      	b.n	8018266 <_dtoa_r+0x116>
 8018390:	2301      	movs	r3, #1
 8018392:	e7b2      	b.n	80182fa <_dtoa_r+0x1aa>
 8018394:	900b      	str	r0, [sp, #44]	; 0x2c
 8018396:	e7b1      	b.n	80182fc <_dtoa_r+0x1ac>
 8018398:	9b04      	ldr	r3, [sp, #16]
 801839a:	9a00      	ldr	r2, [sp, #0]
 801839c:	1a9b      	subs	r3, r3, r2
 801839e:	9304      	str	r3, [sp, #16]
 80183a0:	4253      	negs	r3, r2
 80183a2:	9307      	str	r3, [sp, #28]
 80183a4:	2300      	movs	r3, #0
 80183a6:	930a      	str	r3, [sp, #40]	; 0x28
 80183a8:	e7bf      	b.n	801832a <_dtoa_r+0x1da>
 80183aa:	2300      	movs	r3, #0
 80183ac:	9308      	str	r3, [sp, #32]
 80183ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	dc55      	bgt.n	8018460 <_dtoa_r+0x310>
 80183b4:	2301      	movs	r3, #1
 80183b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80183ba:	461a      	mov	r2, r3
 80183bc:	9209      	str	r2, [sp, #36]	; 0x24
 80183be:	e00c      	b.n	80183da <_dtoa_r+0x28a>
 80183c0:	2301      	movs	r3, #1
 80183c2:	e7f3      	b.n	80183ac <_dtoa_r+0x25c>
 80183c4:	2300      	movs	r3, #0
 80183c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80183c8:	9308      	str	r3, [sp, #32]
 80183ca:	9b00      	ldr	r3, [sp, #0]
 80183cc:	4413      	add	r3, r2
 80183ce:	9302      	str	r3, [sp, #8]
 80183d0:	3301      	adds	r3, #1
 80183d2:	2b01      	cmp	r3, #1
 80183d4:	9303      	str	r3, [sp, #12]
 80183d6:	bfb8      	it	lt
 80183d8:	2301      	movlt	r3, #1
 80183da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80183dc:	2200      	movs	r2, #0
 80183de:	6042      	str	r2, [r0, #4]
 80183e0:	2204      	movs	r2, #4
 80183e2:	f102 0614 	add.w	r6, r2, #20
 80183e6:	429e      	cmp	r6, r3
 80183e8:	6841      	ldr	r1, [r0, #4]
 80183ea:	d93d      	bls.n	8018468 <_dtoa_r+0x318>
 80183ec:	4620      	mov	r0, r4
 80183ee:	f000 fec9 	bl	8019184 <_Balloc>
 80183f2:	9001      	str	r0, [sp, #4]
 80183f4:	2800      	cmp	r0, #0
 80183f6:	d13b      	bne.n	8018470 <_dtoa_r+0x320>
 80183f8:	4b11      	ldr	r3, [pc, #68]	; (8018440 <_dtoa_r+0x2f0>)
 80183fa:	4602      	mov	r2, r0
 80183fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8018400:	e6c0      	b.n	8018184 <_dtoa_r+0x34>
 8018402:	2301      	movs	r3, #1
 8018404:	e7df      	b.n	80183c6 <_dtoa_r+0x276>
 8018406:	bf00      	nop
 8018408:	636f4361 	.word	0x636f4361
 801840c:	3fd287a7 	.word	0x3fd287a7
 8018410:	8b60c8b3 	.word	0x8b60c8b3
 8018414:	3fc68a28 	.word	0x3fc68a28
 8018418:	509f79fb 	.word	0x509f79fb
 801841c:	3fd34413 	.word	0x3fd34413
 8018420:	0801a689 	.word	0x0801a689
 8018424:	0801a6a0 	.word	0x0801a6a0
 8018428:	7ff00000 	.word	0x7ff00000
 801842c:	0801a685 	.word	0x0801a685
 8018430:	0801a67c 	.word	0x0801a67c
 8018434:	0801a659 	.word	0x0801a659
 8018438:	3ff80000 	.word	0x3ff80000
 801843c:	0801a7f0 	.word	0x0801a7f0
 8018440:	0801a6fb 	.word	0x0801a6fb
 8018444:	2501      	movs	r5, #1
 8018446:	2300      	movs	r3, #0
 8018448:	9306      	str	r3, [sp, #24]
 801844a:	9508      	str	r5, [sp, #32]
 801844c:	f04f 33ff 	mov.w	r3, #4294967295
 8018450:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8018454:	2200      	movs	r2, #0
 8018456:	2312      	movs	r3, #18
 8018458:	e7b0      	b.n	80183bc <_dtoa_r+0x26c>
 801845a:	2301      	movs	r3, #1
 801845c:	9308      	str	r3, [sp, #32]
 801845e:	e7f5      	b.n	801844c <_dtoa_r+0x2fc>
 8018460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018462:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8018466:	e7b8      	b.n	80183da <_dtoa_r+0x28a>
 8018468:	3101      	adds	r1, #1
 801846a:	6041      	str	r1, [r0, #4]
 801846c:	0052      	lsls	r2, r2, #1
 801846e:	e7b8      	b.n	80183e2 <_dtoa_r+0x292>
 8018470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018472:	9a01      	ldr	r2, [sp, #4]
 8018474:	601a      	str	r2, [r3, #0]
 8018476:	9b03      	ldr	r3, [sp, #12]
 8018478:	2b0e      	cmp	r3, #14
 801847a:	f200 809d 	bhi.w	80185b8 <_dtoa_r+0x468>
 801847e:	2d00      	cmp	r5, #0
 8018480:	f000 809a 	beq.w	80185b8 <_dtoa_r+0x468>
 8018484:	9b00      	ldr	r3, [sp, #0]
 8018486:	2b00      	cmp	r3, #0
 8018488:	dd32      	ble.n	80184f0 <_dtoa_r+0x3a0>
 801848a:	4ab7      	ldr	r2, [pc, #732]	; (8018768 <_dtoa_r+0x618>)
 801848c:	f003 030f 	and.w	r3, r3, #15
 8018490:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018494:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018498:	9b00      	ldr	r3, [sp, #0]
 801849a:	05d8      	lsls	r0, r3, #23
 801849c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80184a0:	d516      	bpl.n	80184d0 <_dtoa_r+0x380>
 80184a2:	4bb2      	ldr	r3, [pc, #712]	; (801876c <_dtoa_r+0x61c>)
 80184a4:	ec51 0b19 	vmov	r0, r1, d9
 80184a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80184ac:	f7e8 f9f6 	bl	800089c <__aeabi_ddiv>
 80184b0:	f007 070f 	and.w	r7, r7, #15
 80184b4:	4682      	mov	sl, r0
 80184b6:	468b      	mov	fp, r1
 80184b8:	2503      	movs	r5, #3
 80184ba:	4eac      	ldr	r6, [pc, #688]	; (801876c <_dtoa_r+0x61c>)
 80184bc:	b957      	cbnz	r7, 80184d4 <_dtoa_r+0x384>
 80184be:	4642      	mov	r2, r8
 80184c0:	464b      	mov	r3, r9
 80184c2:	4650      	mov	r0, sl
 80184c4:	4659      	mov	r1, fp
 80184c6:	f7e8 f9e9 	bl	800089c <__aeabi_ddiv>
 80184ca:	4682      	mov	sl, r0
 80184cc:	468b      	mov	fp, r1
 80184ce:	e028      	b.n	8018522 <_dtoa_r+0x3d2>
 80184d0:	2502      	movs	r5, #2
 80184d2:	e7f2      	b.n	80184ba <_dtoa_r+0x36a>
 80184d4:	07f9      	lsls	r1, r7, #31
 80184d6:	d508      	bpl.n	80184ea <_dtoa_r+0x39a>
 80184d8:	4640      	mov	r0, r8
 80184da:	4649      	mov	r1, r9
 80184dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80184e0:	f7e8 f8b2 	bl	8000648 <__aeabi_dmul>
 80184e4:	3501      	adds	r5, #1
 80184e6:	4680      	mov	r8, r0
 80184e8:	4689      	mov	r9, r1
 80184ea:	107f      	asrs	r7, r7, #1
 80184ec:	3608      	adds	r6, #8
 80184ee:	e7e5      	b.n	80184bc <_dtoa_r+0x36c>
 80184f0:	f000 809b 	beq.w	801862a <_dtoa_r+0x4da>
 80184f4:	9b00      	ldr	r3, [sp, #0]
 80184f6:	4f9d      	ldr	r7, [pc, #628]	; (801876c <_dtoa_r+0x61c>)
 80184f8:	425e      	negs	r6, r3
 80184fa:	4b9b      	ldr	r3, [pc, #620]	; (8018768 <_dtoa_r+0x618>)
 80184fc:	f006 020f 	and.w	r2, r6, #15
 8018500:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018508:	ec51 0b19 	vmov	r0, r1, d9
 801850c:	f7e8 f89c 	bl	8000648 <__aeabi_dmul>
 8018510:	1136      	asrs	r6, r6, #4
 8018512:	4682      	mov	sl, r0
 8018514:	468b      	mov	fp, r1
 8018516:	2300      	movs	r3, #0
 8018518:	2502      	movs	r5, #2
 801851a:	2e00      	cmp	r6, #0
 801851c:	d17a      	bne.n	8018614 <_dtoa_r+0x4c4>
 801851e:	2b00      	cmp	r3, #0
 8018520:	d1d3      	bne.n	80184ca <_dtoa_r+0x37a>
 8018522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018524:	2b00      	cmp	r3, #0
 8018526:	f000 8082 	beq.w	801862e <_dtoa_r+0x4de>
 801852a:	4b91      	ldr	r3, [pc, #580]	; (8018770 <_dtoa_r+0x620>)
 801852c:	2200      	movs	r2, #0
 801852e:	4650      	mov	r0, sl
 8018530:	4659      	mov	r1, fp
 8018532:	f7e8 fafb 	bl	8000b2c <__aeabi_dcmplt>
 8018536:	2800      	cmp	r0, #0
 8018538:	d079      	beq.n	801862e <_dtoa_r+0x4de>
 801853a:	9b03      	ldr	r3, [sp, #12]
 801853c:	2b00      	cmp	r3, #0
 801853e:	d076      	beq.n	801862e <_dtoa_r+0x4de>
 8018540:	9b02      	ldr	r3, [sp, #8]
 8018542:	2b00      	cmp	r3, #0
 8018544:	dd36      	ble.n	80185b4 <_dtoa_r+0x464>
 8018546:	9b00      	ldr	r3, [sp, #0]
 8018548:	4650      	mov	r0, sl
 801854a:	4659      	mov	r1, fp
 801854c:	1e5f      	subs	r7, r3, #1
 801854e:	2200      	movs	r2, #0
 8018550:	4b88      	ldr	r3, [pc, #544]	; (8018774 <_dtoa_r+0x624>)
 8018552:	f7e8 f879 	bl	8000648 <__aeabi_dmul>
 8018556:	9e02      	ldr	r6, [sp, #8]
 8018558:	4682      	mov	sl, r0
 801855a:	468b      	mov	fp, r1
 801855c:	3501      	adds	r5, #1
 801855e:	4628      	mov	r0, r5
 8018560:	f7e8 f808 	bl	8000574 <__aeabi_i2d>
 8018564:	4652      	mov	r2, sl
 8018566:	465b      	mov	r3, fp
 8018568:	f7e8 f86e 	bl	8000648 <__aeabi_dmul>
 801856c:	4b82      	ldr	r3, [pc, #520]	; (8018778 <_dtoa_r+0x628>)
 801856e:	2200      	movs	r2, #0
 8018570:	f7e7 feb4 	bl	80002dc <__adddf3>
 8018574:	46d0      	mov	r8, sl
 8018576:	46d9      	mov	r9, fp
 8018578:	4682      	mov	sl, r0
 801857a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801857e:	2e00      	cmp	r6, #0
 8018580:	d158      	bne.n	8018634 <_dtoa_r+0x4e4>
 8018582:	4b7e      	ldr	r3, [pc, #504]	; (801877c <_dtoa_r+0x62c>)
 8018584:	2200      	movs	r2, #0
 8018586:	4640      	mov	r0, r8
 8018588:	4649      	mov	r1, r9
 801858a:	f7e7 fea5 	bl	80002d8 <__aeabi_dsub>
 801858e:	4652      	mov	r2, sl
 8018590:	465b      	mov	r3, fp
 8018592:	4680      	mov	r8, r0
 8018594:	4689      	mov	r9, r1
 8018596:	f7e8 fae7 	bl	8000b68 <__aeabi_dcmpgt>
 801859a:	2800      	cmp	r0, #0
 801859c:	f040 8295 	bne.w	8018aca <_dtoa_r+0x97a>
 80185a0:	4652      	mov	r2, sl
 80185a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80185a6:	4640      	mov	r0, r8
 80185a8:	4649      	mov	r1, r9
 80185aa:	f7e8 fabf 	bl	8000b2c <__aeabi_dcmplt>
 80185ae:	2800      	cmp	r0, #0
 80185b0:	f040 8289 	bne.w	8018ac6 <_dtoa_r+0x976>
 80185b4:	ec5b ab19 	vmov	sl, fp, d9
 80185b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	f2c0 8148 	blt.w	8018850 <_dtoa_r+0x700>
 80185c0:	9a00      	ldr	r2, [sp, #0]
 80185c2:	2a0e      	cmp	r2, #14
 80185c4:	f300 8144 	bgt.w	8018850 <_dtoa_r+0x700>
 80185c8:	4b67      	ldr	r3, [pc, #412]	; (8018768 <_dtoa_r+0x618>)
 80185ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80185ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80185d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	f280 80d5 	bge.w	8018784 <_dtoa_r+0x634>
 80185da:	9b03      	ldr	r3, [sp, #12]
 80185dc:	2b00      	cmp	r3, #0
 80185de:	f300 80d1 	bgt.w	8018784 <_dtoa_r+0x634>
 80185e2:	f040 826f 	bne.w	8018ac4 <_dtoa_r+0x974>
 80185e6:	4b65      	ldr	r3, [pc, #404]	; (801877c <_dtoa_r+0x62c>)
 80185e8:	2200      	movs	r2, #0
 80185ea:	4640      	mov	r0, r8
 80185ec:	4649      	mov	r1, r9
 80185ee:	f7e8 f82b 	bl	8000648 <__aeabi_dmul>
 80185f2:	4652      	mov	r2, sl
 80185f4:	465b      	mov	r3, fp
 80185f6:	f7e8 faad 	bl	8000b54 <__aeabi_dcmpge>
 80185fa:	9e03      	ldr	r6, [sp, #12]
 80185fc:	4637      	mov	r7, r6
 80185fe:	2800      	cmp	r0, #0
 8018600:	f040 8245 	bne.w	8018a8e <_dtoa_r+0x93e>
 8018604:	9d01      	ldr	r5, [sp, #4]
 8018606:	2331      	movs	r3, #49	; 0x31
 8018608:	f805 3b01 	strb.w	r3, [r5], #1
 801860c:	9b00      	ldr	r3, [sp, #0]
 801860e:	3301      	adds	r3, #1
 8018610:	9300      	str	r3, [sp, #0]
 8018612:	e240      	b.n	8018a96 <_dtoa_r+0x946>
 8018614:	07f2      	lsls	r2, r6, #31
 8018616:	d505      	bpl.n	8018624 <_dtoa_r+0x4d4>
 8018618:	e9d7 2300 	ldrd	r2, r3, [r7]
 801861c:	f7e8 f814 	bl	8000648 <__aeabi_dmul>
 8018620:	3501      	adds	r5, #1
 8018622:	2301      	movs	r3, #1
 8018624:	1076      	asrs	r6, r6, #1
 8018626:	3708      	adds	r7, #8
 8018628:	e777      	b.n	801851a <_dtoa_r+0x3ca>
 801862a:	2502      	movs	r5, #2
 801862c:	e779      	b.n	8018522 <_dtoa_r+0x3d2>
 801862e:	9f00      	ldr	r7, [sp, #0]
 8018630:	9e03      	ldr	r6, [sp, #12]
 8018632:	e794      	b.n	801855e <_dtoa_r+0x40e>
 8018634:	9901      	ldr	r1, [sp, #4]
 8018636:	4b4c      	ldr	r3, [pc, #304]	; (8018768 <_dtoa_r+0x618>)
 8018638:	4431      	add	r1, r6
 801863a:	910d      	str	r1, [sp, #52]	; 0x34
 801863c:	9908      	ldr	r1, [sp, #32]
 801863e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8018642:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018646:	2900      	cmp	r1, #0
 8018648:	d043      	beq.n	80186d2 <_dtoa_r+0x582>
 801864a:	494d      	ldr	r1, [pc, #308]	; (8018780 <_dtoa_r+0x630>)
 801864c:	2000      	movs	r0, #0
 801864e:	f7e8 f925 	bl	800089c <__aeabi_ddiv>
 8018652:	4652      	mov	r2, sl
 8018654:	465b      	mov	r3, fp
 8018656:	f7e7 fe3f 	bl	80002d8 <__aeabi_dsub>
 801865a:	9d01      	ldr	r5, [sp, #4]
 801865c:	4682      	mov	sl, r0
 801865e:	468b      	mov	fp, r1
 8018660:	4649      	mov	r1, r9
 8018662:	4640      	mov	r0, r8
 8018664:	f7e8 faa0 	bl	8000ba8 <__aeabi_d2iz>
 8018668:	4606      	mov	r6, r0
 801866a:	f7e7 ff83 	bl	8000574 <__aeabi_i2d>
 801866e:	4602      	mov	r2, r0
 8018670:	460b      	mov	r3, r1
 8018672:	4640      	mov	r0, r8
 8018674:	4649      	mov	r1, r9
 8018676:	f7e7 fe2f 	bl	80002d8 <__aeabi_dsub>
 801867a:	3630      	adds	r6, #48	; 0x30
 801867c:	f805 6b01 	strb.w	r6, [r5], #1
 8018680:	4652      	mov	r2, sl
 8018682:	465b      	mov	r3, fp
 8018684:	4680      	mov	r8, r0
 8018686:	4689      	mov	r9, r1
 8018688:	f7e8 fa50 	bl	8000b2c <__aeabi_dcmplt>
 801868c:	2800      	cmp	r0, #0
 801868e:	d163      	bne.n	8018758 <_dtoa_r+0x608>
 8018690:	4642      	mov	r2, r8
 8018692:	464b      	mov	r3, r9
 8018694:	4936      	ldr	r1, [pc, #216]	; (8018770 <_dtoa_r+0x620>)
 8018696:	2000      	movs	r0, #0
 8018698:	f7e7 fe1e 	bl	80002d8 <__aeabi_dsub>
 801869c:	4652      	mov	r2, sl
 801869e:	465b      	mov	r3, fp
 80186a0:	f7e8 fa44 	bl	8000b2c <__aeabi_dcmplt>
 80186a4:	2800      	cmp	r0, #0
 80186a6:	f040 80b5 	bne.w	8018814 <_dtoa_r+0x6c4>
 80186aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80186ac:	429d      	cmp	r5, r3
 80186ae:	d081      	beq.n	80185b4 <_dtoa_r+0x464>
 80186b0:	4b30      	ldr	r3, [pc, #192]	; (8018774 <_dtoa_r+0x624>)
 80186b2:	2200      	movs	r2, #0
 80186b4:	4650      	mov	r0, sl
 80186b6:	4659      	mov	r1, fp
 80186b8:	f7e7 ffc6 	bl	8000648 <__aeabi_dmul>
 80186bc:	4b2d      	ldr	r3, [pc, #180]	; (8018774 <_dtoa_r+0x624>)
 80186be:	4682      	mov	sl, r0
 80186c0:	468b      	mov	fp, r1
 80186c2:	4640      	mov	r0, r8
 80186c4:	4649      	mov	r1, r9
 80186c6:	2200      	movs	r2, #0
 80186c8:	f7e7 ffbe 	bl	8000648 <__aeabi_dmul>
 80186cc:	4680      	mov	r8, r0
 80186ce:	4689      	mov	r9, r1
 80186d0:	e7c6      	b.n	8018660 <_dtoa_r+0x510>
 80186d2:	4650      	mov	r0, sl
 80186d4:	4659      	mov	r1, fp
 80186d6:	f7e7 ffb7 	bl	8000648 <__aeabi_dmul>
 80186da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80186dc:	9d01      	ldr	r5, [sp, #4]
 80186de:	930f      	str	r3, [sp, #60]	; 0x3c
 80186e0:	4682      	mov	sl, r0
 80186e2:	468b      	mov	fp, r1
 80186e4:	4649      	mov	r1, r9
 80186e6:	4640      	mov	r0, r8
 80186e8:	f7e8 fa5e 	bl	8000ba8 <__aeabi_d2iz>
 80186ec:	4606      	mov	r6, r0
 80186ee:	f7e7 ff41 	bl	8000574 <__aeabi_i2d>
 80186f2:	3630      	adds	r6, #48	; 0x30
 80186f4:	4602      	mov	r2, r0
 80186f6:	460b      	mov	r3, r1
 80186f8:	4640      	mov	r0, r8
 80186fa:	4649      	mov	r1, r9
 80186fc:	f7e7 fdec 	bl	80002d8 <__aeabi_dsub>
 8018700:	f805 6b01 	strb.w	r6, [r5], #1
 8018704:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018706:	429d      	cmp	r5, r3
 8018708:	4680      	mov	r8, r0
 801870a:	4689      	mov	r9, r1
 801870c:	f04f 0200 	mov.w	r2, #0
 8018710:	d124      	bne.n	801875c <_dtoa_r+0x60c>
 8018712:	4b1b      	ldr	r3, [pc, #108]	; (8018780 <_dtoa_r+0x630>)
 8018714:	4650      	mov	r0, sl
 8018716:	4659      	mov	r1, fp
 8018718:	f7e7 fde0 	bl	80002dc <__adddf3>
 801871c:	4602      	mov	r2, r0
 801871e:	460b      	mov	r3, r1
 8018720:	4640      	mov	r0, r8
 8018722:	4649      	mov	r1, r9
 8018724:	f7e8 fa20 	bl	8000b68 <__aeabi_dcmpgt>
 8018728:	2800      	cmp	r0, #0
 801872a:	d173      	bne.n	8018814 <_dtoa_r+0x6c4>
 801872c:	4652      	mov	r2, sl
 801872e:	465b      	mov	r3, fp
 8018730:	4913      	ldr	r1, [pc, #76]	; (8018780 <_dtoa_r+0x630>)
 8018732:	2000      	movs	r0, #0
 8018734:	f7e7 fdd0 	bl	80002d8 <__aeabi_dsub>
 8018738:	4602      	mov	r2, r0
 801873a:	460b      	mov	r3, r1
 801873c:	4640      	mov	r0, r8
 801873e:	4649      	mov	r1, r9
 8018740:	f7e8 f9f4 	bl	8000b2c <__aeabi_dcmplt>
 8018744:	2800      	cmp	r0, #0
 8018746:	f43f af35 	beq.w	80185b4 <_dtoa_r+0x464>
 801874a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801874c:	1e6b      	subs	r3, r5, #1
 801874e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018750:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018754:	2b30      	cmp	r3, #48	; 0x30
 8018756:	d0f8      	beq.n	801874a <_dtoa_r+0x5fa>
 8018758:	9700      	str	r7, [sp, #0]
 801875a:	e049      	b.n	80187f0 <_dtoa_r+0x6a0>
 801875c:	4b05      	ldr	r3, [pc, #20]	; (8018774 <_dtoa_r+0x624>)
 801875e:	f7e7 ff73 	bl	8000648 <__aeabi_dmul>
 8018762:	4680      	mov	r8, r0
 8018764:	4689      	mov	r9, r1
 8018766:	e7bd      	b.n	80186e4 <_dtoa_r+0x594>
 8018768:	0801a7f0 	.word	0x0801a7f0
 801876c:	0801a7c8 	.word	0x0801a7c8
 8018770:	3ff00000 	.word	0x3ff00000
 8018774:	40240000 	.word	0x40240000
 8018778:	401c0000 	.word	0x401c0000
 801877c:	40140000 	.word	0x40140000
 8018780:	3fe00000 	.word	0x3fe00000
 8018784:	9d01      	ldr	r5, [sp, #4]
 8018786:	4656      	mov	r6, sl
 8018788:	465f      	mov	r7, fp
 801878a:	4642      	mov	r2, r8
 801878c:	464b      	mov	r3, r9
 801878e:	4630      	mov	r0, r6
 8018790:	4639      	mov	r1, r7
 8018792:	f7e8 f883 	bl	800089c <__aeabi_ddiv>
 8018796:	f7e8 fa07 	bl	8000ba8 <__aeabi_d2iz>
 801879a:	4682      	mov	sl, r0
 801879c:	f7e7 feea 	bl	8000574 <__aeabi_i2d>
 80187a0:	4642      	mov	r2, r8
 80187a2:	464b      	mov	r3, r9
 80187a4:	f7e7 ff50 	bl	8000648 <__aeabi_dmul>
 80187a8:	4602      	mov	r2, r0
 80187aa:	460b      	mov	r3, r1
 80187ac:	4630      	mov	r0, r6
 80187ae:	4639      	mov	r1, r7
 80187b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80187b4:	f7e7 fd90 	bl	80002d8 <__aeabi_dsub>
 80187b8:	f805 6b01 	strb.w	r6, [r5], #1
 80187bc:	9e01      	ldr	r6, [sp, #4]
 80187be:	9f03      	ldr	r7, [sp, #12]
 80187c0:	1bae      	subs	r6, r5, r6
 80187c2:	42b7      	cmp	r7, r6
 80187c4:	4602      	mov	r2, r0
 80187c6:	460b      	mov	r3, r1
 80187c8:	d135      	bne.n	8018836 <_dtoa_r+0x6e6>
 80187ca:	f7e7 fd87 	bl	80002dc <__adddf3>
 80187ce:	4642      	mov	r2, r8
 80187d0:	464b      	mov	r3, r9
 80187d2:	4606      	mov	r6, r0
 80187d4:	460f      	mov	r7, r1
 80187d6:	f7e8 f9c7 	bl	8000b68 <__aeabi_dcmpgt>
 80187da:	b9d0      	cbnz	r0, 8018812 <_dtoa_r+0x6c2>
 80187dc:	4642      	mov	r2, r8
 80187de:	464b      	mov	r3, r9
 80187e0:	4630      	mov	r0, r6
 80187e2:	4639      	mov	r1, r7
 80187e4:	f7e8 f998 	bl	8000b18 <__aeabi_dcmpeq>
 80187e8:	b110      	cbz	r0, 80187f0 <_dtoa_r+0x6a0>
 80187ea:	f01a 0f01 	tst.w	sl, #1
 80187ee:	d110      	bne.n	8018812 <_dtoa_r+0x6c2>
 80187f0:	4620      	mov	r0, r4
 80187f2:	ee18 1a10 	vmov	r1, s16
 80187f6:	f000 fd05 	bl	8019204 <_Bfree>
 80187fa:	2300      	movs	r3, #0
 80187fc:	9800      	ldr	r0, [sp, #0]
 80187fe:	702b      	strb	r3, [r5, #0]
 8018800:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018802:	3001      	adds	r0, #1
 8018804:	6018      	str	r0, [r3, #0]
 8018806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018808:	2b00      	cmp	r3, #0
 801880a:	f43f acf1 	beq.w	80181f0 <_dtoa_r+0xa0>
 801880e:	601d      	str	r5, [r3, #0]
 8018810:	e4ee      	b.n	80181f0 <_dtoa_r+0xa0>
 8018812:	9f00      	ldr	r7, [sp, #0]
 8018814:	462b      	mov	r3, r5
 8018816:	461d      	mov	r5, r3
 8018818:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801881c:	2a39      	cmp	r2, #57	; 0x39
 801881e:	d106      	bne.n	801882e <_dtoa_r+0x6de>
 8018820:	9a01      	ldr	r2, [sp, #4]
 8018822:	429a      	cmp	r2, r3
 8018824:	d1f7      	bne.n	8018816 <_dtoa_r+0x6c6>
 8018826:	9901      	ldr	r1, [sp, #4]
 8018828:	2230      	movs	r2, #48	; 0x30
 801882a:	3701      	adds	r7, #1
 801882c:	700a      	strb	r2, [r1, #0]
 801882e:	781a      	ldrb	r2, [r3, #0]
 8018830:	3201      	adds	r2, #1
 8018832:	701a      	strb	r2, [r3, #0]
 8018834:	e790      	b.n	8018758 <_dtoa_r+0x608>
 8018836:	4ba6      	ldr	r3, [pc, #664]	; (8018ad0 <_dtoa_r+0x980>)
 8018838:	2200      	movs	r2, #0
 801883a:	f7e7 ff05 	bl	8000648 <__aeabi_dmul>
 801883e:	2200      	movs	r2, #0
 8018840:	2300      	movs	r3, #0
 8018842:	4606      	mov	r6, r0
 8018844:	460f      	mov	r7, r1
 8018846:	f7e8 f967 	bl	8000b18 <__aeabi_dcmpeq>
 801884a:	2800      	cmp	r0, #0
 801884c:	d09d      	beq.n	801878a <_dtoa_r+0x63a>
 801884e:	e7cf      	b.n	80187f0 <_dtoa_r+0x6a0>
 8018850:	9a08      	ldr	r2, [sp, #32]
 8018852:	2a00      	cmp	r2, #0
 8018854:	f000 80d7 	beq.w	8018a06 <_dtoa_r+0x8b6>
 8018858:	9a06      	ldr	r2, [sp, #24]
 801885a:	2a01      	cmp	r2, #1
 801885c:	f300 80ba 	bgt.w	80189d4 <_dtoa_r+0x884>
 8018860:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018862:	2a00      	cmp	r2, #0
 8018864:	f000 80b2 	beq.w	80189cc <_dtoa_r+0x87c>
 8018868:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801886c:	9e07      	ldr	r6, [sp, #28]
 801886e:	9d04      	ldr	r5, [sp, #16]
 8018870:	9a04      	ldr	r2, [sp, #16]
 8018872:	441a      	add	r2, r3
 8018874:	9204      	str	r2, [sp, #16]
 8018876:	9a05      	ldr	r2, [sp, #20]
 8018878:	2101      	movs	r1, #1
 801887a:	441a      	add	r2, r3
 801887c:	4620      	mov	r0, r4
 801887e:	9205      	str	r2, [sp, #20]
 8018880:	f000 fd78 	bl	8019374 <__i2b>
 8018884:	4607      	mov	r7, r0
 8018886:	2d00      	cmp	r5, #0
 8018888:	dd0c      	ble.n	80188a4 <_dtoa_r+0x754>
 801888a:	9b05      	ldr	r3, [sp, #20]
 801888c:	2b00      	cmp	r3, #0
 801888e:	dd09      	ble.n	80188a4 <_dtoa_r+0x754>
 8018890:	42ab      	cmp	r3, r5
 8018892:	9a04      	ldr	r2, [sp, #16]
 8018894:	bfa8      	it	ge
 8018896:	462b      	movge	r3, r5
 8018898:	1ad2      	subs	r2, r2, r3
 801889a:	9204      	str	r2, [sp, #16]
 801889c:	9a05      	ldr	r2, [sp, #20]
 801889e:	1aed      	subs	r5, r5, r3
 80188a0:	1ad3      	subs	r3, r2, r3
 80188a2:	9305      	str	r3, [sp, #20]
 80188a4:	9b07      	ldr	r3, [sp, #28]
 80188a6:	b31b      	cbz	r3, 80188f0 <_dtoa_r+0x7a0>
 80188a8:	9b08      	ldr	r3, [sp, #32]
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	f000 80af 	beq.w	8018a0e <_dtoa_r+0x8be>
 80188b0:	2e00      	cmp	r6, #0
 80188b2:	dd13      	ble.n	80188dc <_dtoa_r+0x78c>
 80188b4:	4639      	mov	r1, r7
 80188b6:	4632      	mov	r2, r6
 80188b8:	4620      	mov	r0, r4
 80188ba:	f000 fe1b 	bl	80194f4 <__pow5mult>
 80188be:	ee18 2a10 	vmov	r2, s16
 80188c2:	4601      	mov	r1, r0
 80188c4:	4607      	mov	r7, r0
 80188c6:	4620      	mov	r0, r4
 80188c8:	f000 fd6a 	bl	80193a0 <__multiply>
 80188cc:	ee18 1a10 	vmov	r1, s16
 80188d0:	4680      	mov	r8, r0
 80188d2:	4620      	mov	r0, r4
 80188d4:	f000 fc96 	bl	8019204 <_Bfree>
 80188d8:	ee08 8a10 	vmov	s16, r8
 80188dc:	9b07      	ldr	r3, [sp, #28]
 80188de:	1b9a      	subs	r2, r3, r6
 80188e0:	d006      	beq.n	80188f0 <_dtoa_r+0x7a0>
 80188e2:	ee18 1a10 	vmov	r1, s16
 80188e6:	4620      	mov	r0, r4
 80188e8:	f000 fe04 	bl	80194f4 <__pow5mult>
 80188ec:	ee08 0a10 	vmov	s16, r0
 80188f0:	2101      	movs	r1, #1
 80188f2:	4620      	mov	r0, r4
 80188f4:	f000 fd3e 	bl	8019374 <__i2b>
 80188f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	4606      	mov	r6, r0
 80188fe:	f340 8088 	ble.w	8018a12 <_dtoa_r+0x8c2>
 8018902:	461a      	mov	r2, r3
 8018904:	4601      	mov	r1, r0
 8018906:	4620      	mov	r0, r4
 8018908:	f000 fdf4 	bl	80194f4 <__pow5mult>
 801890c:	9b06      	ldr	r3, [sp, #24]
 801890e:	2b01      	cmp	r3, #1
 8018910:	4606      	mov	r6, r0
 8018912:	f340 8081 	ble.w	8018a18 <_dtoa_r+0x8c8>
 8018916:	f04f 0800 	mov.w	r8, #0
 801891a:	6933      	ldr	r3, [r6, #16]
 801891c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018920:	6918      	ldr	r0, [r3, #16]
 8018922:	f000 fcd7 	bl	80192d4 <__hi0bits>
 8018926:	f1c0 0020 	rsb	r0, r0, #32
 801892a:	9b05      	ldr	r3, [sp, #20]
 801892c:	4418      	add	r0, r3
 801892e:	f010 001f 	ands.w	r0, r0, #31
 8018932:	f000 8092 	beq.w	8018a5a <_dtoa_r+0x90a>
 8018936:	f1c0 0320 	rsb	r3, r0, #32
 801893a:	2b04      	cmp	r3, #4
 801893c:	f340 808a 	ble.w	8018a54 <_dtoa_r+0x904>
 8018940:	f1c0 001c 	rsb	r0, r0, #28
 8018944:	9b04      	ldr	r3, [sp, #16]
 8018946:	4403      	add	r3, r0
 8018948:	9304      	str	r3, [sp, #16]
 801894a:	9b05      	ldr	r3, [sp, #20]
 801894c:	4403      	add	r3, r0
 801894e:	4405      	add	r5, r0
 8018950:	9305      	str	r3, [sp, #20]
 8018952:	9b04      	ldr	r3, [sp, #16]
 8018954:	2b00      	cmp	r3, #0
 8018956:	dd07      	ble.n	8018968 <_dtoa_r+0x818>
 8018958:	ee18 1a10 	vmov	r1, s16
 801895c:	461a      	mov	r2, r3
 801895e:	4620      	mov	r0, r4
 8018960:	f000 fe22 	bl	80195a8 <__lshift>
 8018964:	ee08 0a10 	vmov	s16, r0
 8018968:	9b05      	ldr	r3, [sp, #20]
 801896a:	2b00      	cmp	r3, #0
 801896c:	dd05      	ble.n	801897a <_dtoa_r+0x82a>
 801896e:	4631      	mov	r1, r6
 8018970:	461a      	mov	r2, r3
 8018972:	4620      	mov	r0, r4
 8018974:	f000 fe18 	bl	80195a8 <__lshift>
 8018978:	4606      	mov	r6, r0
 801897a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801897c:	2b00      	cmp	r3, #0
 801897e:	d06e      	beq.n	8018a5e <_dtoa_r+0x90e>
 8018980:	ee18 0a10 	vmov	r0, s16
 8018984:	4631      	mov	r1, r6
 8018986:	f000 fe7f 	bl	8019688 <__mcmp>
 801898a:	2800      	cmp	r0, #0
 801898c:	da67      	bge.n	8018a5e <_dtoa_r+0x90e>
 801898e:	9b00      	ldr	r3, [sp, #0]
 8018990:	3b01      	subs	r3, #1
 8018992:	ee18 1a10 	vmov	r1, s16
 8018996:	9300      	str	r3, [sp, #0]
 8018998:	220a      	movs	r2, #10
 801899a:	2300      	movs	r3, #0
 801899c:	4620      	mov	r0, r4
 801899e:	f000 fc53 	bl	8019248 <__multadd>
 80189a2:	9b08      	ldr	r3, [sp, #32]
 80189a4:	ee08 0a10 	vmov	s16, r0
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	f000 81b1 	beq.w	8018d10 <_dtoa_r+0xbc0>
 80189ae:	2300      	movs	r3, #0
 80189b0:	4639      	mov	r1, r7
 80189b2:	220a      	movs	r2, #10
 80189b4:	4620      	mov	r0, r4
 80189b6:	f000 fc47 	bl	8019248 <__multadd>
 80189ba:	9b02      	ldr	r3, [sp, #8]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	4607      	mov	r7, r0
 80189c0:	f300 808e 	bgt.w	8018ae0 <_dtoa_r+0x990>
 80189c4:	9b06      	ldr	r3, [sp, #24]
 80189c6:	2b02      	cmp	r3, #2
 80189c8:	dc51      	bgt.n	8018a6e <_dtoa_r+0x91e>
 80189ca:	e089      	b.n	8018ae0 <_dtoa_r+0x990>
 80189cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80189ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80189d2:	e74b      	b.n	801886c <_dtoa_r+0x71c>
 80189d4:	9b03      	ldr	r3, [sp, #12]
 80189d6:	1e5e      	subs	r6, r3, #1
 80189d8:	9b07      	ldr	r3, [sp, #28]
 80189da:	42b3      	cmp	r3, r6
 80189dc:	bfbf      	itttt	lt
 80189de:	9b07      	ldrlt	r3, [sp, #28]
 80189e0:	9607      	strlt	r6, [sp, #28]
 80189e2:	1af2      	sublt	r2, r6, r3
 80189e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80189e6:	bfb6      	itet	lt
 80189e8:	189b      	addlt	r3, r3, r2
 80189ea:	1b9e      	subge	r6, r3, r6
 80189ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80189ee:	9b03      	ldr	r3, [sp, #12]
 80189f0:	bfb8      	it	lt
 80189f2:	2600      	movlt	r6, #0
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	bfb7      	itett	lt
 80189f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80189fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8018a00:	1a9d      	sublt	r5, r3, r2
 8018a02:	2300      	movlt	r3, #0
 8018a04:	e734      	b.n	8018870 <_dtoa_r+0x720>
 8018a06:	9e07      	ldr	r6, [sp, #28]
 8018a08:	9d04      	ldr	r5, [sp, #16]
 8018a0a:	9f08      	ldr	r7, [sp, #32]
 8018a0c:	e73b      	b.n	8018886 <_dtoa_r+0x736>
 8018a0e:	9a07      	ldr	r2, [sp, #28]
 8018a10:	e767      	b.n	80188e2 <_dtoa_r+0x792>
 8018a12:	9b06      	ldr	r3, [sp, #24]
 8018a14:	2b01      	cmp	r3, #1
 8018a16:	dc18      	bgt.n	8018a4a <_dtoa_r+0x8fa>
 8018a18:	f1ba 0f00 	cmp.w	sl, #0
 8018a1c:	d115      	bne.n	8018a4a <_dtoa_r+0x8fa>
 8018a1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018a22:	b993      	cbnz	r3, 8018a4a <_dtoa_r+0x8fa>
 8018a24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018a28:	0d1b      	lsrs	r3, r3, #20
 8018a2a:	051b      	lsls	r3, r3, #20
 8018a2c:	b183      	cbz	r3, 8018a50 <_dtoa_r+0x900>
 8018a2e:	9b04      	ldr	r3, [sp, #16]
 8018a30:	3301      	adds	r3, #1
 8018a32:	9304      	str	r3, [sp, #16]
 8018a34:	9b05      	ldr	r3, [sp, #20]
 8018a36:	3301      	adds	r3, #1
 8018a38:	9305      	str	r3, [sp, #20]
 8018a3a:	f04f 0801 	mov.w	r8, #1
 8018a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	f47f af6a 	bne.w	801891a <_dtoa_r+0x7ca>
 8018a46:	2001      	movs	r0, #1
 8018a48:	e76f      	b.n	801892a <_dtoa_r+0x7da>
 8018a4a:	f04f 0800 	mov.w	r8, #0
 8018a4e:	e7f6      	b.n	8018a3e <_dtoa_r+0x8ee>
 8018a50:	4698      	mov	r8, r3
 8018a52:	e7f4      	b.n	8018a3e <_dtoa_r+0x8ee>
 8018a54:	f43f af7d 	beq.w	8018952 <_dtoa_r+0x802>
 8018a58:	4618      	mov	r0, r3
 8018a5a:	301c      	adds	r0, #28
 8018a5c:	e772      	b.n	8018944 <_dtoa_r+0x7f4>
 8018a5e:	9b03      	ldr	r3, [sp, #12]
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	dc37      	bgt.n	8018ad4 <_dtoa_r+0x984>
 8018a64:	9b06      	ldr	r3, [sp, #24]
 8018a66:	2b02      	cmp	r3, #2
 8018a68:	dd34      	ble.n	8018ad4 <_dtoa_r+0x984>
 8018a6a:	9b03      	ldr	r3, [sp, #12]
 8018a6c:	9302      	str	r3, [sp, #8]
 8018a6e:	9b02      	ldr	r3, [sp, #8]
 8018a70:	b96b      	cbnz	r3, 8018a8e <_dtoa_r+0x93e>
 8018a72:	4631      	mov	r1, r6
 8018a74:	2205      	movs	r2, #5
 8018a76:	4620      	mov	r0, r4
 8018a78:	f000 fbe6 	bl	8019248 <__multadd>
 8018a7c:	4601      	mov	r1, r0
 8018a7e:	4606      	mov	r6, r0
 8018a80:	ee18 0a10 	vmov	r0, s16
 8018a84:	f000 fe00 	bl	8019688 <__mcmp>
 8018a88:	2800      	cmp	r0, #0
 8018a8a:	f73f adbb 	bgt.w	8018604 <_dtoa_r+0x4b4>
 8018a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a90:	9d01      	ldr	r5, [sp, #4]
 8018a92:	43db      	mvns	r3, r3
 8018a94:	9300      	str	r3, [sp, #0]
 8018a96:	f04f 0800 	mov.w	r8, #0
 8018a9a:	4631      	mov	r1, r6
 8018a9c:	4620      	mov	r0, r4
 8018a9e:	f000 fbb1 	bl	8019204 <_Bfree>
 8018aa2:	2f00      	cmp	r7, #0
 8018aa4:	f43f aea4 	beq.w	80187f0 <_dtoa_r+0x6a0>
 8018aa8:	f1b8 0f00 	cmp.w	r8, #0
 8018aac:	d005      	beq.n	8018aba <_dtoa_r+0x96a>
 8018aae:	45b8      	cmp	r8, r7
 8018ab0:	d003      	beq.n	8018aba <_dtoa_r+0x96a>
 8018ab2:	4641      	mov	r1, r8
 8018ab4:	4620      	mov	r0, r4
 8018ab6:	f000 fba5 	bl	8019204 <_Bfree>
 8018aba:	4639      	mov	r1, r7
 8018abc:	4620      	mov	r0, r4
 8018abe:	f000 fba1 	bl	8019204 <_Bfree>
 8018ac2:	e695      	b.n	80187f0 <_dtoa_r+0x6a0>
 8018ac4:	2600      	movs	r6, #0
 8018ac6:	4637      	mov	r7, r6
 8018ac8:	e7e1      	b.n	8018a8e <_dtoa_r+0x93e>
 8018aca:	9700      	str	r7, [sp, #0]
 8018acc:	4637      	mov	r7, r6
 8018ace:	e599      	b.n	8018604 <_dtoa_r+0x4b4>
 8018ad0:	40240000 	.word	0x40240000
 8018ad4:	9b08      	ldr	r3, [sp, #32]
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	f000 80ca 	beq.w	8018c70 <_dtoa_r+0xb20>
 8018adc:	9b03      	ldr	r3, [sp, #12]
 8018ade:	9302      	str	r3, [sp, #8]
 8018ae0:	2d00      	cmp	r5, #0
 8018ae2:	dd05      	ble.n	8018af0 <_dtoa_r+0x9a0>
 8018ae4:	4639      	mov	r1, r7
 8018ae6:	462a      	mov	r2, r5
 8018ae8:	4620      	mov	r0, r4
 8018aea:	f000 fd5d 	bl	80195a8 <__lshift>
 8018aee:	4607      	mov	r7, r0
 8018af0:	f1b8 0f00 	cmp.w	r8, #0
 8018af4:	d05b      	beq.n	8018bae <_dtoa_r+0xa5e>
 8018af6:	6879      	ldr	r1, [r7, #4]
 8018af8:	4620      	mov	r0, r4
 8018afa:	f000 fb43 	bl	8019184 <_Balloc>
 8018afe:	4605      	mov	r5, r0
 8018b00:	b928      	cbnz	r0, 8018b0e <_dtoa_r+0x9be>
 8018b02:	4b87      	ldr	r3, [pc, #540]	; (8018d20 <_dtoa_r+0xbd0>)
 8018b04:	4602      	mov	r2, r0
 8018b06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018b0a:	f7ff bb3b 	b.w	8018184 <_dtoa_r+0x34>
 8018b0e:	693a      	ldr	r2, [r7, #16]
 8018b10:	3202      	adds	r2, #2
 8018b12:	0092      	lsls	r2, r2, #2
 8018b14:	f107 010c 	add.w	r1, r7, #12
 8018b18:	300c      	adds	r0, #12
 8018b1a:	f7fe fd1d 	bl	8017558 <memcpy>
 8018b1e:	2201      	movs	r2, #1
 8018b20:	4629      	mov	r1, r5
 8018b22:	4620      	mov	r0, r4
 8018b24:	f000 fd40 	bl	80195a8 <__lshift>
 8018b28:	9b01      	ldr	r3, [sp, #4]
 8018b2a:	f103 0901 	add.w	r9, r3, #1
 8018b2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8018b32:	4413      	add	r3, r2
 8018b34:	9305      	str	r3, [sp, #20]
 8018b36:	f00a 0301 	and.w	r3, sl, #1
 8018b3a:	46b8      	mov	r8, r7
 8018b3c:	9304      	str	r3, [sp, #16]
 8018b3e:	4607      	mov	r7, r0
 8018b40:	4631      	mov	r1, r6
 8018b42:	ee18 0a10 	vmov	r0, s16
 8018b46:	f7ff fa75 	bl	8018034 <quorem>
 8018b4a:	4641      	mov	r1, r8
 8018b4c:	9002      	str	r0, [sp, #8]
 8018b4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8018b52:	ee18 0a10 	vmov	r0, s16
 8018b56:	f000 fd97 	bl	8019688 <__mcmp>
 8018b5a:	463a      	mov	r2, r7
 8018b5c:	9003      	str	r0, [sp, #12]
 8018b5e:	4631      	mov	r1, r6
 8018b60:	4620      	mov	r0, r4
 8018b62:	f000 fdad 	bl	80196c0 <__mdiff>
 8018b66:	68c2      	ldr	r2, [r0, #12]
 8018b68:	f109 3bff 	add.w	fp, r9, #4294967295
 8018b6c:	4605      	mov	r5, r0
 8018b6e:	bb02      	cbnz	r2, 8018bb2 <_dtoa_r+0xa62>
 8018b70:	4601      	mov	r1, r0
 8018b72:	ee18 0a10 	vmov	r0, s16
 8018b76:	f000 fd87 	bl	8019688 <__mcmp>
 8018b7a:	4602      	mov	r2, r0
 8018b7c:	4629      	mov	r1, r5
 8018b7e:	4620      	mov	r0, r4
 8018b80:	9207      	str	r2, [sp, #28]
 8018b82:	f000 fb3f 	bl	8019204 <_Bfree>
 8018b86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8018b8a:	ea43 0102 	orr.w	r1, r3, r2
 8018b8e:	9b04      	ldr	r3, [sp, #16]
 8018b90:	430b      	orrs	r3, r1
 8018b92:	464d      	mov	r5, r9
 8018b94:	d10f      	bne.n	8018bb6 <_dtoa_r+0xa66>
 8018b96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8018b9a:	d02a      	beq.n	8018bf2 <_dtoa_r+0xaa2>
 8018b9c:	9b03      	ldr	r3, [sp, #12]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	dd02      	ble.n	8018ba8 <_dtoa_r+0xa58>
 8018ba2:	9b02      	ldr	r3, [sp, #8]
 8018ba4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8018ba8:	f88b a000 	strb.w	sl, [fp]
 8018bac:	e775      	b.n	8018a9a <_dtoa_r+0x94a>
 8018bae:	4638      	mov	r0, r7
 8018bb0:	e7ba      	b.n	8018b28 <_dtoa_r+0x9d8>
 8018bb2:	2201      	movs	r2, #1
 8018bb4:	e7e2      	b.n	8018b7c <_dtoa_r+0xa2c>
 8018bb6:	9b03      	ldr	r3, [sp, #12]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	db04      	blt.n	8018bc6 <_dtoa_r+0xa76>
 8018bbc:	9906      	ldr	r1, [sp, #24]
 8018bbe:	430b      	orrs	r3, r1
 8018bc0:	9904      	ldr	r1, [sp, #16]
 8018bc2:	430b      	orrs	r3, r1
 8018bc4:	d122      	bne.n	8018c0c <_dtoa_r+0xabc>
 8018bc6:	2a00      	cmp	r2, #0
 8018bc8:	ddee      	ble.n	8018ba8 <_dtoa_r+0xa58>
 8018bca:	ee18 1a10 	vmov	r1, s16
 8018bce:	2201      	movs	r2, #1
 8018bd0:	4620      	mov	r0, r4
 8018bd2:	f000 fce9 	bl	80195a8 <__lshift>
 8018bd6:	4631      	mov	r1, r6
 8018bd8:	ee08 0a10 	vmov	s16, r0
 8018bdc:	f000 fd54 	bl	8019688 <__mcmp>
 8018be0:	2800      	cmp	r0, #0
 8018be2:	dc03      	bgt.n	8018bec <_dtoa_r+0xa9c>
 8018be4:	d1e0      	bne.n	8018ba8 <_dtoa_r+0xa58>
 8018be6:	f01a 0f01 	tst.w	sl, #1
 8018bea:	d0dd      	beq.n	8018ba8 <_dtoa_r+0xa58>
 8018bec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8018bf0:	d1d7      	bne.n	8018ba2 <_dtoa_r+0xa52>
 8018bf2:	2339      	movs	r3, #57	; 0x39
 8018bf4:	f88b 3000 	strb.w	r3, [fp]
 8018bf8:	462b      	mov	r3, r5
 8018bfa:	461d      	mov	r5, r3
 8018bfc:	3b01      	subs	r3, #1
 8018bfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018c02:	2a39      	cmp	r2, #57	; 0x39
 8018c04:	d071      	beq.n	8018cea <_dtoa_r+0xb9a>
 8018c06:	3201      	adds	r2, #1
 8018c08:	701a      	strb	r2, [r3, #0]
 8018c0a:	e746      	b.n	8018a9a <_dtoa_r+0x94a>
 8018c0c:	2a00      	cmp	r2, #0
 8018c0e:	dd07      	ble.n	8018c20 <_dtoa_r+0xad0>
 8018c10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8018c14:	d0ed      	beq.n	8018bf2 <_dtoa_r+0xaa2>
 8018c16:	f10a 0301 	add.w	r3, sl, #1
 8018c1a:	f88b 3000 	strb.w	r3, [fp]
 8018c1e:	e73c      	b.n	8018a9a <_dtoa_r+0x94a>
 8018c20:	9b05      	ldr	r3, [sp, #20]
 8018c22:	f809 ac01 	strb.w	sl, [r9, #-1]
 8018c26:	4599      	cmp	r9, r3
 8018c28:	d047      	beq.n	8018cba <_dtoa_r+0xb6a>
 8018c2a:	ee18 1a10 	vmov	r1, s16
 8018c2e:	2300      	movs	r3, #0
 8018c30:	220a      	movs	r2, #10
 8018c32:	4620      	mov	r0, r4
 8018c34:	f000 fb08 	bl	8019248 <__multadd>
 8018c38:	45b8      	cmp	r8, r7
 8018c3a:	ee08 0a10 	vmov	s16, r0
 8018c3e:	f04f 0300 	mov.w	r3, #0
 8018c42:	f04f 020a 	mov.w	r2, #10
 8018c46:	4641      	mov	r1, r8
 8018c48:	4620      	mov	r0, r4
 8018c4a:	d106      	bne.n	8018c5a <_dtoa_r+0xb0a>
 8018c4c:	f000 fafc 	bl	8019248 <__multadd>
 8018c50:	4680      	mov	r8, r0
 8018c52:	4607      	mov	r7, r0
 8018c54:	f109 0901 	add.w	r9, r9, #1
 8018c58:	e772      	b.n	8018b40 <_dtoa_r+0x9f0>
 8018c5a:	f000 faf5 	bl	8019248 <__multadd>
 8018c5e:	4639      	mov	r1, r7
 8018c60:	4680      	mov	r8, r0
 8018c62:	2300      	movs	r3, #0
 8018c64:	220a      	movs	r2, #10
 8018c66:	4620      	mov	r0, r4
 8018c68:	f000 faee 	bl	8019248 <__multadd>
 8018c6c:	4607      	mov	r7, r0
 8018c6e:	e7f1      	b.n	8018c54 <_dtoa_r+0xb04>
 8018c70:	9b03      	ldr	r3, [sp, #12]
 8018c72:	9302      	str	r3, [sp, #8]
 8018c74:	9d01      	ldr	r5, [sp, #4]
 8018c76:	ee18 0a10 	vmov	r0, s16
 8018c7a:	4631      	mov	r1, r6
 8018c7c:	f7ff f9da 	bl	8018034 <quorem>
 8018c80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8018c84:	9b01      	ldr	r3, [sp, #4]
 8018c86:	f805 ab01 	strb.w	sl, [r5], #1
 8018c8a:	1aea      	subs	r2, r5, r3
 8018c8c:	9b02      	ldr	r3, [sp, #8]
 8018c8e:	4293      	cmp	r3, r2
 8018c90:	dd09      	ble.n	8018ca6 <_dtoa_r+0xb56>
 8018c92:	ee18 1a10 	vmov	r1, s16
 8018c96:	2300      	movs	r3, #0
 8018c98:	220a      	movs	r2, #10
 8018c9a:	4620      	mov	r0, r4
 8018c9c:	f000 fad4 	bl	8019248 <__multadd>
 8018ca0:	ee08 0a10 	vmov	s16, r0
 8018ca4:	e7e7      	b.n	8018c76 <_dtoa_r+0xb26>
 8018ca6:	9b02      	ldr	r3, [sp, #8]
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	bfc8      	it	gt
 8018cac:	461d      	movgt	r5, r3
 8018cae:	9b01      	ldr	r3, [sp, #4]
 8018cb0:	bfd8      	it	le
 8018cb2:	2501      	movle	r5, #1
 8018cb4:	441d      	add	r5, r3
 8018cb6:	f04f 0800 	mov.w	r8, #0
 8018cba:	ee18 1a10 	vmov	r1, s16
 8018cbe:	2201      	movs	r2, #1
 8018cc0:	4620      	mov	r0, r4
 8018cc2:	f000 fc71 	bl	80195a8 <__lshift>
 8018cc6:	4631      	mov	r1, r6
 8018cc8:	ee08 0a10 	vmov	s16, r0
 8018ccc:	f000 fcdc 	bl	8019688 <__mcmp>
 8018cd0:	2800      	cmp	r0, #0
 8018cd2:	dc91      	bgt.n	8018bf8 <_dtoa_r+0xaa8>
 8018cd4:	d102      	bne.n	8018cdc <_dtoa_r+0xb8c>
 8018cd6:	f01a 0f01 	tst.w	sl, #1
 8018cda:	d18d      	bne.n	8018bf8 <_dtoa_r+0xaa8>
 8018cdc:	462b      	mov	r3, r5
 8018cde:	461d      	mov	r5, r3
 8018ce0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018ce4:	2a30      	cmp	r2, #48	; 0x30
 8018ce6:	d0fa      	beq.n	8018cde <_dtoa_r+0xb8e>
 8018ce8:	e6d7      	b.n	8018a9a <_dtoa_r+0x94a>
 8018cea:	9a01      	ldr	r2, [sp, #4]
 8018cec:	429a      	cmp	r2, r3
 8018cee:	d184      	bne.n	8018bfa <_dtoa_r+0xaaa>
 8018cf0:	9b00      	ldr	r3, [sp, #0]
 8018cf2:	3301      	adds	r3, #1
 8018cf4:	9300      	str	r3, [sp, #0]
 8018cf6:	2331      	movs	r3, #49	; 0x31
 8018cf8:	7013      	strb	r3, [r2, #0]
 8018cfa:	e6ce      	b.n	8018a9a <_dtoa_r+0x94a>
 8018cfc:	4b09      	ldr	r3, [pc, #36]	; (8018d24 <_dtoa_r+0xbd4>)
 8018cfe:	f7ff ba95 	b.w	801822c <_dtoa_r+0xdc>
 8018d02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	f47f aa6e 	bne.w	80181e6 <_dtoa_r+0x96>
 8018d0a:	4b07      	ldr	r3, [pc, #28]	; (8018d28 <_dtoa_r+0xbd8>)
 8018d0c:	f7ff ba8e 	b.w	801822c <_dtoa_r+0xdc>
 8018d10:	9b02      	ldr	r3, [sp, #8]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	dcae      	bgt.n	8018c74 <_dtoa_r+0xb24>
 8018d16:	9b06      	ldr	r3, [sp, #24]
 8018d18:	2b02      	cmp	r3, #2
 8018d1a:	f73f aea8 	bgt.w	8018a6e <_dtoa_r+0x91e>
 8018d1e:	e7a9      	b.n	8018c74 <_dtoa_r+0xb24>
 8018d20:	0801a6fb 	.word	0x0801a6fb
 8018d24:	0801a658 	.word	0x0801a658
 8018d28:	0801a67c 	.word	0x0801a67c

08018d2c <__sflush_r>:
 8018d2c:	898a      	ldrh	r2, [r1, #12]
 8018d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d32:	4605      	mov	r5, r0
 8018d34:	0710      	lsls	r0, r2, #28
 8018d36:	460c      	mov	r4, r1
 8018d38:	d458      	bmi.n	8018dec <__sflush_r+0xc0>
 8018d3a:	684b      	ldr	r3, [r1, #4]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	dc05      	bgt.n	8018d4c <__sflush_r+0x20>
 8018d40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	dc02      	bgt.n	8018d4c <__sflush_r+0x20>
 8018d46:	2000      	movs	r0, #0
 8018d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018d4e:	2e00      	cmp	r6, #0
 8018d50:	d0f9      	beq.n	8018d46 <__sflush_r+0x1a>
 8018d52:	2300      	movs	r3, #0
 8018d54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018d58:	682f      	ldr	r7, [r5, #0]
 8018d5a:	602b      	str	r3, [r5, #0]
 8018d5c:	d032      	beq.n	8018dc4 <__sflush_r+0x98>
 8018d5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018d60:	89a3      	ldrh	r3, [r4, #12]
 8018d62:	075a      	lsls	r2, r3, #29
 8018d64:	d505      	bpl.n	8018d72 <__sflush_r+0x46>
 8018d66:	6863      	ldr	r3, [r4, #4]
 8018d68:	1ac0      	subs	r0, r0, r3
 8018d6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018d6c:	b10b      	cbz	r3, 8018d72 <__sflush_r+0x46>
 8018d6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018d70:	1ac0      	subs	r0, r0, r3
 8018d72:	2300      	movs	r3, #0
 8018d74:	4602      	mov	r2, r0
 8018d76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018d78:	6a21      	ldr	r1, [r4, #32]
 8018d7a:	4628      	mov	r0, r5
 8018d7c:	47b0      	blx	r6
 8018d7e:	1c43      	adds	r3, r0, #1
 8018d80:	89a3      	ldrh	r3, [r4, #12]
 8018d82:	d106      	bne.n	8018d92 <__sflush_r+0x66>
 8018d84:	6829      	ldr	r1, [r5, #0]
 8018d86:	291d      	cmp	r1, #29
 8018d88:	d82c      	bhi.n	8018de4 <__sflush_r+0xb8>
 8018d8a:	4a2a      	ldr	r2, [pc, #168]	; (8018e34 <__sflush_r+0x108>)
 8018d8c:	40ca      	lsrs	r2, r1
 8018d8e:	07d6      	lsls	r6, r2, #31
 8018d90:	d528      	bpl.n	8018de4 <__sflush_r+0xb8>
 8018d92:	2200      	movs	r2, #0
 8018d94:	6062      	str	r2, [r4, #4]
 8018d96:	04d9      	lsls	r1, r3, #19
 8018d98:	6922      	ldr	r2, [r4, #16]
 8018d9a:	6022      	str	r2, [r4, #0]
 8018d9c:	d504      	bpl.n	8018da8 <__sflush_r+0x7c>
 8018d9e:	1c42      	adds	r2, r0, #1
 8018da0:	d101      	bne.n	8018da6 <__sflush_r+0x7a>
 8018da2:	682b      	ldr	r3, [r5, #0]
 8018da4:	b903      	cbnz	r3, 8018da8 <__sflush_r+0x7c>
 8018da6:	6560      	str	r0, [r4, #84]	; 0x54
 8018da8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018daa:	602f      	str	r7, [r5, #0]
 8018dac:	2900      	cmp	r1, #0
 8018dae:	d0ca      	beq.n	8018d46 <__sflush_r+0x1a>
 8018db0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018db4:	4299      	cmp	r1, r3
 8018db6:	d002      	beq.n	8018dbe <__sflush_r+0x92>
 8018db8:	4628      	mov	r0, r5
 8018dba:	f000 fd7d 	bl	80198b8 <_free_r>
 8018dbe:	2000      	movs	r0, #0
 8018dc0:	6360      	str	r0, [r4, #52]	; 0x34
 8018dc2:	e7c1      	b.n	8018d48 <__sflush_r+0x1c>
 8018dc4:	6a21      	ldr	r1, [r4, #32]
 8018dc6:	2301      	movs	r3, #1
 8018dc8:	4628      	mov	r0, r5
 8018dca:	47b0      	blx	r6
 8018dcc:	1c41      	adds	r1, r0, #1
 8018dce:	d1c7      	bne.n	8018d60 <__sflush_r+0x34>
 8018dd0:	682b      	ldr	r3, [r5, #0]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d0c4      	beq.n	8018d60 <__sflush_r+0x34>
 8018dd6:	2b1d      	cmp	r3, #29
 8018dd8:	d001      	beq.n	8018dde <__sflush_r+0xb2>
 8018dda:	2b16      	cmp	r3, #22
 8018ddc:	d101      	bne.n	8018de2 <__sflush_r+0xb6>
 8018dde:	602f      	str	r7, [r5, #0]
 8018de0:	e7b1      	b.n	8018d46 <__sflush_r+0x1a>
 8018de2:	89a3      	ldrh	r3, [r4, #12]
 8018de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018de8:	81a3      	strh	r3, [r4, #12]
 8018dea:	e7ad      	b.n	8018d48 <__sflush_r+0x1c>
 8018dec:	690f      	ldr	r7, [r1, #16]
 8018dee:	2f00      	cmp	r7, #0
 8018df0:	d0a9      	beq.n	8018d46 <__sflush_r+0x1a>
 8018df2:	0793      	lsls	r3, r2, #30
 8018df4:	680e      	ldr	r6, [r1, #0]
 8018df6:	bf08      	it	eq
 8018df8:	694b      	ldreq	r3, [r1, #20]
 8018dfa:	600f      	str	r7, [r1, #0]
 8018dfc:	bf18      	it	ne
 8018dfe:	2300      	movne	r3, #0
 8018e00:	eba6 0807 	sub.w	r8, r6, r7
 8018e04:	608b      	str	r3, [r1, #8]
 8018e06:	f1b8 0f00 	cmp.w	r8, #0
 8018e0a:	dd9c      	ble.n	8018d46 <__sflush_r+0x1a>
 8018e0c:	6a21      	ldr	r1, [r4, #32]
 8018e0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018e10:	4643      	mov	r3, r8
 8018e12:	463a      	mov	r2, r7
 8018e14:	4628      	mov	r0, r5
 8018e16:	47b0      	blx	r6
 8018e18:	2800      	cmp	r0, #0
 8018e1a:	dc06      	bgt.n	8018e2a <__sflush_r+0xfe>
 8018e1c:	89a3      	ldrh	r3, [r4, #12]
 8018e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e22:	81a3      	strh	r3, [r4, #12]
 8018e24:	f04f 30ff 	mov.w	r0, #4294967295
 8018e28:	e78e      	b.n	8018d48 <__sflush_r+0x1c>
 8018e2a:	4407      	add	r7, r0
 8018e2c:	eba8 0800 	sub.w	r8, r8, r0
 8018e30:	e7e9      	b.n	8018e06 <__sflush_r+0xda>
 8018e32:	bf00      	nop
 8018e34:	20400001 	.word	0x20400001

08018e38 <_fflush_r>:
 8018e38:	b538      	push	{r3, r4, r5, lr}
 8018e3a:	690b      	ldr	r3, [r1, #16]
 8018e3c:	4605      	mov	r5, r0
 8018e3e:	460c      	mov	r4, r1
 8018e40:	b913      	cbnz	r3, 8018e48 <_fflush_r+0x10>
 8018e42:	2500      	movs	r5, #0
 8018e44:	4628      	mov	r0, r5
 8018e46:	bd38      	pop	{r3, r4, r5, pc}
 8018e48:	b118      	cbz	r0, 8018e52 <_fflush_r+0x1a>
 8018e4a:	6983      	ldr	r3, [r0, #24]
 8018e4c:	b90b      	cbnz	r3, 8018e52 <_fflush_r+0x1a>
 8018e4e:	f000 f887 	bl	8018f60 <__sinit>
 8018e52:	4b14      	ldr	r3, [pc, #80]	; (8018ea4 <_fflush_r+0x6c>)
 8018e54:	429c      	cmp	r4, r3
 8018e56:	d11b      	bne.n	8018e90 <_fflush_r+0x58>
 8018e58:	686c      	ldr	r4, [r5, #4]
 8018e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d0ef      	beq.n	8018e42 <_fflush_r+0xa>
 8018e62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018e64:	07d0      	lsls	r0, r2, #31
 8018e66:	d404      	bmi.n	8018e72 <_fflush_r+0x3a>
 8018e68:	0599      	lsls	r1, r3, #22
 8018e6a:	d402      	bmi.n	8018e72 <_fflush_r+0x3a>
 8018e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018e6e:	f000 f91a 	bl	80190a6 <__retarget_lock_acquire_recursive>
 8018e72:	4628      	mov	r0, r5
 8018e74:	4621      	mov	r1, r4
 8018e76:	f7ff ff59 	bl	8018d2c <__sflush_r>
 8018e7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018e7c:	07da      	lsls	r2, r3, #31
 8018e7e:	4605      	mov	r5, r0
 8018e80:	d4e0      	bmi.n	8018e44 <_fflush_r+0xc>
 8018e82:	89a3      	ldrh	r3, [r4, #12]
 8018e84:	059b      	lsls	r3, r3, #22
 8018e86:	d4dd      	bmi.n	8018e44 <_fflush_r+0xc>
 8018e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018e8a:	f000 f90d 	bl	80190a8 <__retarget_lock_release_recursive>
 8018e8e:	e7d9      	b.n	8018e44 <_fflush_r+0xc>
 8018e90:	4b05      	ldr	r3, [pc, #20]	; (8018ea8 <_fflush_r+0x70>)
 8018e92:	429c      	cmp	r4, r3
 8018e94:	d101      	bne.n	8018e9a <_fflush_r+0x62>
 8018e96:	68ac      	ldr	r4, [r5, #8]
 8018e98:	e7df      	b.n	8018e5a <_fflush_r+0x22>
 8018e9a:	4b04      	ldr	r3, [pc, #16]	; (8018eac <_fflush_r+0x74>)
 8018e9c:	429c      	cmp	r4, r3
 8018e9e:	bf08      	it	eq
 8018ea0:	68ec      	ldreq	r4, [r5, #12]
 8018ea2:	e7da      	b.n	8018e5a <_fflush_r+0x22>
 8018ea4:	0801a72c 	.word	0x0801a72c
 8018ea8:	0801a74c 	.word	0x0801a74c
 8018eac:	0801a70c 	.word	0x0801a70c

08018eb0 <std>:
 8018eb0:	2300      	movs	r3, #0
 8018eb2:	b510      	push	{r4, lr}
 8018eb4:	4604      	mov	r4, r0
 8018eb6:	e9c0 3300 	strd	r3, r3, [r0]
 8018eba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018ebe:	6083      	str	r3, [r0, #8]
 8018ec0:	8181      	strh	r1, [r0, #12]
 8018ec2:	6643      	str	r3, [r0, #100]	; 0x64
 8018ec4:	81c2      	strh	r2, [r0, #14]
 8018ec6:	6183      	str	r3, [r0, #24]
 8018ec8:	4619      	mov	r1, r3
 8018eca:	2208      	movs	r2, #8
 8018ecc:	305c      	adds	r0, #92	; 0x5c
 8018ece:	f7fe fb51 	bl	8017574 <memset>
 8018ed2:	4b05      	ldr	r3, [pc, #20]	; (8018ee8 <std+0x38>)
 8018ed4:	6263      	str	r3, [r4, #36]	; 0x24
 8018ed6:	4b05      	ldr	r3, [pc, #20]	; (8018eec <std+0x3c>)
 8018ed8:	62a3      	str	r3, [r4, #40]	; 0x28
 8018eda:	4b05      	ldr	r3, [pc, #20]	; (8018ef0 <std+0x40>)
 8018edc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018ede:	4b05      	ldr	r3, [pc, #20]	; (8018ef4 <std+0x44>)
 8018ee0:	6224      	str	r4, [r4, #32]
 8018ee2:	6323      	str	r3, [r4, #48]	; 0x30
 8018ee4:	bd10      	pop	{r4, pc}
 8018ee6:	bf00      	nop
 8018ee8:	08019ddd 	.word	0x08019ddd
 8018eec:	08019dff 	.word	0x08019dff
 8018ef0:	08019e37 	.word	0x08019e37
 8018ef4:	08019e5b 	.word	0x08019e5b

08018ef8 <_cleanup_r>:
 8018ef8:	4901      	ldr	r1, [pc, #4]	; (8018f00 <_cleanup_r+0x8>)
 8018efa:	f000 b8af 	b.w	801905c <_fwalk_reent>
 8018efe:	bf00      	nop
 8018f00:	08018e39 	.word	0x08018e39

08018f04 <__sfmoreglue>:
 8018f04:	b570      	push	{r4, r5, r6, lr}
 8018f06:	2268      	movs	r2, #104	; 0x68
 8018f08:	1e4d      	subs	r5, r1, #1
 8018f0a:	4355      	muls	r5, r2
 8018f0c:	460e      	mov	r6, r1
 8018f0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018f12:	f000 fd3d 	bl	8019990 <_malloc_r>
 8018f16:	4604      	mov	r4, r0
 8018f18:	b140      	cbz	r0, 8018f2c <__sfmoreglue+0x28>
 8018f1a:	2100      	movs	r1, #0
 8018f1c:	e9c0 1600 	strd	r1, r6, [r0]
 8018f20:	300c      	adds	r0, #12
 8018f22:	60a0      	str	r0, [r4, #8]
 8018f24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018f28:	f7fe fb24 	bl	8017574 <memset>
 8018f2c:	4620      	mov	r0, r4
 8018f2e:	bd70      	pop	{r4, r5, r6, pc}

08018f30 <__sfp_lock_acquire>:
 8018f30:	4801      	ldr	r0, [pc, #4]	; (8018f38 <__sfp_lock_acquire+0x8>)
 8018f32:	f000 b8b8 	b.w	80190a6 <__retarget_lock_acquire_recursive>
 8018f36:	bf00      	nop
 8018f38:	2000cafd 	.word	0x2000cafd

08018f3c <__sfp_lock_release>:
 8018f3c:	4801      	ldr	r0, [pc, #4]	; (8018f44 <__sfp_lock_release+0x8>)
 8018f3e:	f000 b8b3 	b.w	80190a8 <__retarget_lock_release_recursive>
 8018f42:	bf00      	nop
 8018f44:	2000cafd 	.word	0x2000cafd

08018f48 <__sinit_lock_acquire>:
 8018f48:	4801      	ldr	r0, [pc, #4]	; (8018f50 <__sinit_lock_acquire+0x8>)
 8018f4a:	f000 b8ac 	b.w	80190a6 <__retarget_lock_acquire_recursive>
 8018f4e:	bf00      	nop
 8018f50:	2000cafe 	.word	0x2000cafe

08018f54 <__sinit_lock_release>:
 8018f54:	4801      	ldr	r0, [pc, #4]	; (8018f5c <__sinit_lock_release+0x8>)
 8018f56:	f000 b8a7 	b.w	80190a8 <__retarget_lock_release_recursive>
 8018f5a:	bf00      	nop
 8018f5c:	2000cafe 	.word	0x2000cafe

08018f60 <__sinit>:
 8018f60:	b510      	push	{r4, lr}
 8018f62:	4604      	mov	r4, r0
 8018f64:	f7ff fff0 	bl	8018f48 <__sinit_lock_acquire>
 8018f68:	69a3      	ldr	r3, [r4, #24]
 8018f6a:	b11b      	cbz	r3, 8018f74 <__sinit+0x14>
 8018f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f70:	f7ff bff0 	b.w	8018f54 <__sinit_lock_release>
 8018f74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018f78:	6523      	str	r3, [r4, #80]	; 0x50
 8018f7a:	4b13      	ldr	r3, [pc, #76]	; (8018fc8 <__sinit+0x68>)
 8018f7c:	4a13      	ldr	r2, [pc, #76]	; (8018fcc <__sinit+0x6c>)
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	62a2      	str	r2, [r4, #40]	; 0x28
 8018f82:	42a3      	cmp	r3, r4
 8018f84:	bf04      	itt	eq
 8018f86:	2301      	moveq	r3, #1
 8018f88:	61a3      	streq	r3, [r4, #24]
 8018f8a:	4620      	mov	r0, r4
 8018f8c:	f000 f820 	bl	8018fd0 <__sfp>
 8018f90:	6060      	str	r0, [r4, #4]
 8018f92:	4620      	mov	r0, r4
 8018f94:	f000 f81c 	bl	8018fd0 <__sfp>
 8018f98:	60a0      	str	r0, [r4, #8]
 8018f9a:	4620      	mov	r0, r4
 8018f9c:	f000 f818 	bl	8018fd0 <__sfp>
 8018fa0:	2200      	movs	r2, #0
 8018fa2:	60e0      	str	r0, [r4, #12]
 8018fa4:	2104      	movs	r1, #4
 8018fa6:	6860      	ldr	r0, [r4, #4]
 8018fa8:	f7ff ff82 	bl	8018eb0 <std>
 8018fac:	68a0      	ldr	r0, [r4, #8]
 8018fae:	2201      	movs	r2, #1
 8018fb0:	2109      	movs	r1, #9
 8018fb2:	f7ff ff7d 	bl	8018eb0 <std>
 8018fb6:	68e0      	ldr	r0, [r4, #12]
 8018fb8:	2202      	movs	r2, #2
 8018fba:	2112      	movs	r1, #18
 8018fbc:	f7ff ff78 	bl	8018eb0 <std>
 8018fc0:	2301      	movs	r3, #1
 8018fc2:	61a3      	str	r3, [r4, #24]
 8018fc4:	e7d2      	b.n	8018f6c <__sinit+0xc>
 8018fc6:	bf00      	nop
 8018fc8:	0801a644 	.word	0x0801a644
 8018fcc:	08018ef9 	.word	0x08018ef9

08018fd0 <__sfp>:
 8018fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fd2:	4607      	mov	r7, r0
 8018fd4:	f7ff ffac 	bl	8018f30 <__sfp_lock_acquire>
 8018fd8:	4b1e      	ldr	r3, [pc, #120]	; (8019054 <__sfp+0x84>)
 8018fda:	681e      	ldr	r6, [r3, #0]
 8018fdc:	69b3      	ldr	r3, [r6, #24]
 8018fde:	b913      	cbnz	r3, 8018fe6 <__sfp+0x16>
 8018fe0:	4630      	mov	r0, r6
 8018fe2:	f7ff ffbd 	bl	8018f60 <__sinit>
 8018fe6:	3648      	adds	r6, #72	; 0x48
 8018fe8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018fec:	3b01      	subs	r3, #1
 8018fee:	d503      	bpl.n	8018ff8 <__sfp+0x28>
 8018ff0:	6833      	ldr	r3, [r6, #0]
 8018ff2:	b30b      	cbz	r3, 8019038 <__sfp+0x68>
 8018ff4:	6836      	ldr	r6, [r6, #0]
 8018ff6:	e7f7      	b.n	8018fe8 <__sfp+0x18>
 8018ff8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018ffc:	b9d5      	cbnz	r5, 8019034 <__sfp+0x64>
 8018ffe:	4b16      	ldr	r3, [pc, #88]	; (8019058 <__sfp+0x88>)
 8019000:	60e3      	str	r3, [r4, #12]
 8019002:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019006:	6665      	str	r5, [r4, #100]	; 0x64
 8019008:	f000 f84c 	bl	80190a4 <__retarget_lock_init_recursive>
 801900c:	f7ff ff96 	bl	8018f3c <__sfp_lock_release>
 8019010:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019014:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019018:	6025      	str	r5, [r4, #0]
 801901a:	61a5      	str	r5, [r4, #24]
 801901c:	2208      	movs	r2, #8
 801901e:	4629      	mov	r1, r5
 8019020:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019024:	f7fe faa6 	bl	8017574 <memset>
 8019028:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801902c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019030:	4620      	mov	r0, r4
 8019032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019034:	3468      	adds	r4, #104	; 0x68
 8019036:	e7d9      	b.n	8018fec <__sfp+0x1c>
 8019038:	2104      	movs	r1, #4
 801903a:	4638      	mov	r0, r7
 801903c:	f7ff ff62 	bl	8018f04 <__sfmoreglue>
 8019040:	4604      	mov	r4, r0
 8019042:	6030      	str	r0, [r6, #0]
 8019044:	2800      	cmp	r0, #0
 8019046:	d1d5      	bne.n	8018ff4 <__sfp+0x24>
 8019048:	f7ff ff78 	bl	8018f3c <__sfp_lock_release>
 801904c:	230c      	movs	r3, #12
 801904e:	603b      	str	r3, [r7, #0]
 8019050:	e7ee      	b.n	8019030 <__sfp+0x60>
 8019052:	bf00      	nop
 8019054:	0801a644 	.word	0x0801a644
 8019058:	ffff0001 	.word	0xffff0001

0801905c <_fwalk_reent>:
 801905c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019060:	4606      	mov	r6, r0
 8019062:	4688      	mov	r8, r1
 8019064:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019068:	2700      	movs	r7, #0
 801906a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801906e:	f1b9 0901 	subs.w	r9, r9, #1
 8019072:	d505      	bpl.n	8019080 <_fwalk_reent+0x24>
 8019074:	6824      	ldr	r4, [r4, #0]
 8019076:	2c00      	cmp	r4, #0
 8019078:	d1f7      	bne.n	801906a <_fwalk_reent+0xe>
 801907a:	4638      	mov	r0, r7
 801907c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019080:	89ab      	ldrh	r3, [r5, #12]
 8019082:	2b01      	cmp	r3, #1
 8019084:	d907      	bls.n	8019096 <_fwalk_reent+0x3a>
 8019086:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801908a:	3301      	adds	r3, #1
 801908c:	d003      	beq.n	8019096 <_fwalk_reent+0x3a>
 801908e:	4629      	mov	r1, r5
 8019090:	4630      	mov	r0, r6
 8019092:	47c0      	blx	r8
 8019094:	4307      	orrs	r7, r0
 8019096:	3568      	adds	r5, #104	; 0x68
 8019098:	e7e9      	b.n	801906e <_fwalk_reent+0x12>
	...

0801909c <_localeconv_r>:
 801909c:	4800      	ldr	r0, [pc, #0]	; (80190a0 <_localeconv_r+0x4>)
 801909e:	4770      	bx	lr
 80190a0:	20000160 	.word	0x20000160

080190a4 <__retarget_lock_init_recursive>:
 80190a4:	4770      	bx	lr

080190a6 <__retarget_lock_acquire_recursive>:
 80190a6:	4770      	bx	lr

080190a8 <__retarget_lock_release_recursive>:
 80190a8:	4770      	bx	lr

080190aa <__swhatbuf_r>:
 80190aa:	b570      	push	{r4, r5, r6, lr}
 80190ac:	460e      	mov	r6, r1
 80190ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190b2:	2900      	cmp	r1, #0
 80190b4:	b096      	sub	sp, #88	; 0x58
 80190b6:	4614      	mov	r4, r2
 80190b8:	461d      	mov	r5, r3
 80190ba:	da08      	bge.n	80190ce <__swhatbuf_r+0x24>
 80190bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80190c0:	2200      	movs	r2, #0
 80190c2:	602a      	str	r2, [r5, #0]
 80190c4:	061a      	lsls	r2, r3, #24
 80190c6:	d410      	bmi.n	80190ea <__swhatbuf_r+0x40>
 80190c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80190cc:	e00e      	b.n	80190ec <__swhatbuf_r+0x42>
 80190ce:	466a      	mov	r2, sp
 80190d0:	f000 ff1a 	bl	8019f08 <_fstat_r>
 80190d4:	2800      	cmp	r0, #0
 80190d6:	dbf1      	blt.n	80190bc <__swhatbuf_r+0x12>
 80190d8:	9a01      	ldr	r2, [sp, #4]
 80190da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80190de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80190e2:	425a      	negs	r2, r3
 80190e4:	415a      	adcs	r2, r3
 80190e6:	602a      	str	r2, [r5, #0]
 80190e8:	e7ee      	b.n	80190c8 <__swhatbuf_r+0x1e>
 80190ea:	2340      	movs	r3, #64	; 0x40
 80190ec:	2000      	movs	r0, #0
 80190ee:	6023      	str	r3, [r4, #0]
 80190f0:	b016      	add	sp, #88	; 0x58
 80190f2:	bd70      	pop	{r4, r5, r6, pc}

080190f4 <__smakebuf_r>:
 80190f4:	898b      	ldrh	r3, [r1, #12]
 80190f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80190f8:	079d      	lsls	r5, r3, #30
 80190fa:	4606      	mov	r6, r0
 80190fc:	460c      	mov	r4, r1
 80190fe:	d507      	bpl.n	8019110 <__smakebuf_r+0x1c>
 8019100:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019104:	6023      	str	r3, [r4, #0]
 8019106:	6123      	str	r3, [r4, #16]
 8019108:	2301      	movs	r3, #1
 801910a:	6163      	str	r3, [r4, #20]
 801910c:	b002      	add	sp, #8
 801910e:	bd70      	pop	{r4, r5, r6, pc}
 8019110:	ab01      	add	r3, sp, #4
 8019112:	466a      	mov	r2, sp
 8019114:	f7ff ffc9 	bl	80190aa <__swhatbuf_r>
 8019118:	9900      	ldr	r1, [sp, #0]
 801911a:	4605      	mov	r5, r0
 801911c:	4630      	mov	r0, r6
 801911e:	f000 fc37 	bl	8019990 <_malloc_r>
 8019122:	b948      	cbnz	r0, 8019138 <__smakebuf_r+0x44>
 8019124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019128:	059a      	lsls	r2, r3, #22
 801912a:	d4ef      	bmi.n	801910c <__smakebuf_r+0x18>
 801912c:	f023 0303 	bic.w	r3, r3, #3
 8019130:	f043 0302 	orr.w	r3, r3, #2
 8019134:	81a3      	strh	r3, [r4, #12]
 8019136:	e7e3      	b.n	8019100 <__smakebuf_r+0xc>
 8019138:	4b0d      	ldr	r3, [pc, #52]	; (8019170 <__smakebuf_r+0x7c>)
 801913a:	62b3      	str	r3, [r6, #40]	; 0x28
 801913c:	89a3      	ldrh	r3, [r4, #12]
 801913e:	6020      	str	r0, [r4, #0]
 8019140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019144:	81a3      	strh	r3, [r4, #12]
 8019146:	9b00      	ldr	r3, [sp, #0]
 8019148:	6163      	str	r3, [r4, #20]
 801914a:	9b01      	ldr	r3, [sp, #4]
 801914c:	6120      	str	r0, [r4, #16]
 801914e:	b15b      	cbz	r3, 8019168 <__smakebuf_r+0x74>
 8019150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019154:	4630      	mov	r0, r6
 8019156:	f000 fee9 	bl	8019f2c <_isatty_r>
 801915a:	b128      	cbz	r0, 8019168 <__smakebuf_r+0x74>
 801915c:	89a3      	ldrh	r3, [r4, #12]
 801915e:	f023 0303 	bic.w	r3, r3, #3
 8019162:	f043 0301 	orr.w	r3, r3, #1
 8019166:	81a3      	strh	r3, [r4, #12]
 8019168:	89a0      	ldrh	r0, [r4, #12]
 801916a:	4305      	orrs	r5, r0
 801916c:	81a5      	strh	r5, [r4, #12]
 801916e:	e7cd      	b.n	801910c <__smakebuf_r+0x18>
 8019170:	08018ef9 	.word	0x08018ef9

08019174 <malloc>:
 8019174:	4b02      	ldr	r3, [pc, #8]	; (8019180 <malloc+0xc>)
 8019176:	4601      	mov	r1, r0
 8019178:	6818      	ldr	r0, [r3, #0]
 801917a:	f000 bc09 	b.w	8019990 <_malloc_r>
 801917e:	bf00      	nop
 8019180:	2000000c 	.word	0x2000000c

08019184 <_Balloc>:
 8019184:	b570      	push	{r4, r5, r6, lr}
 8019186:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019188:	4604      	mov	r4, r0
 801918a:	460d      	mov	r5, r1
 801918c:	b976      	cbnz	r6, 80191ac <_Balloc+0x28>
 801918e:	2010      	movs	r0, #16
 8019190:	f7ff fff0 	bl	8019174 <malloc>
 8019194:	4602      	mov	r2, r0
 8019196:	6260      	str	r0, [r4, #36]	; 0x24
 8019198:	b920      	cbnz	r0, 80191a4 <_Balloc+0x20>
 801919a:	4b18      	ldr	r3, [pc, #96]	; (80191fc <_Balloc+0x78>)
 801919c:	4818      	ldr	r0, [pc, #96]	; (8019200 <_Balloc+0x7c>)
 801919e:	2166      	movs	r1, #102	; 0x66
 80191a0:	f000 fe72 	bl	8019e88 <__assert_func>
 80191a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80191a8:	6006      	str	r6, [r0, #0]
 80191aa:	60c6      	str	r6, [r0, #12]
 80191ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80191ae:	68f3      	ldr	r3, [r6, #12]
 80191b0:	b183      	cbz	r3, 80191d4 <_Balloc+0x50>
 80191b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80191b4:	68db      	ldr	r3, [r3, #12]
 80191b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80191ba:	b9b8      	cbnz	r0, 80191ec <_Balloc+0x68>
 80191bc:	2101      	movs	r1, #1
 80191be:	fa01 f605 	lsl.w	r6, r1, r5
 80191c2:	1d72      	adds	r2, r6, #5
 80191c4:	0092      	lsls	r2, r2, #2
 80191c6:	4620      	mov	r0, r4
 80191c8:	f000 fb60 	bl	801988c <_calloc_r>
 80191cc:	b160      	cbz	r0, 80191e8 <_Balloc+0x64>
 80191ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80191d2:	e00e      	b.n	80191f2 <_Balloc+0x6e>
 80191d4:	2221      	movs	r2, #33	; 0x21
 80191d6:	2104      	movs	r1, #4
 80191d8:	4620      	mov	r0, r4
 80191da:	f000 fb57 	bl	801988c <_calloc_r>
 80191de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80191e0:	60f0      	str	r0, [r6, #12]
 80191e2:	68db      	ldr	r3, [r3, #12]
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d1e4      	bne.n	80191b2 <_Balloc+0x2e>
 80191e8:	2000      	movs	r0, #0
 80191ea:	bd70      	pop	{r4, r5, r6, pc}
 80191ec:	6802      	ldr	r2, [r0, #0]
 80191ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80191f2:	2300      	movs	r3, #0
 80191f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80191f8:	e7f7      	b.n	80191ea <_Balloc+0x66>
 80191fa:	bf00      	nop
 80191fc:	0801a689 	.word	0x0801a689
 8019200:	0801a76c 	.word	0x0801a76c

08019204 <_Bfree>:
 8019204:	b570      	push	{r4, r5, r6, lr}
 8019206:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019208:	4605      	mov	r5, r0
 801920a:	460c      	mov	r4, r1
 801920c:	b976      	cbnz	r6, 801922c <_Bfree+0x28>
 801920e:	2010      	movs	r0, #16
 8019210:	f7ff ffb0 	bl	8019174 <malloc>
 8019214:	4602      	mov	r2, r0
 8019216:	6268      	str	r0, [r5, #36]	; 0x24
 8019218:	b920      	cbnz	r0, 8019224 <_Bfree+0x20>
 801921a:	4b09      	ldr	r3, [pc, #36]	; (8019240 <_Bfree+0x3c>)
 801921c:	4809      	ldr	r0, [pc, #36]	; (8019244 <_Bfree+0x40>)
 801921e:	218a      	movs	r1, #138	; 0x8a
 8019220:	f000 fe32 	bl	8019e88 <__assert_func>
 8019224:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019228:	6006      	str	r6, [r0, #0]
 801922a:	60c6      	str	r6, [r0, #12]
 801922c:	b13c      	cbz	r4, 801923e <_Bfree+0x3a>
 801922e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019230:	6862      	ldr	r2, [r4, #4]
 8019232:	68db      	ldr	r3, [r3, #12]
 8019234:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019238:	6021      	str	r1, [r4, #0]
 801923a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801923e:	bd70      	pop	{r4, r5, r6, pc}
 8019240:	0801a689 	.word	0x0801a689
 8019244:	0801a76c 	.word	0x0801a76c

08019248 <__multadd>:
 8019248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801924c:	690d      	ldr	r5, [r1, #16]
 801924e:	4607      	mov	r7, r0
 8019250:	460c      	mov	r4, r1
 8019252:	461e      	mov	r6, r3
 8019254:	f101 0c14 	add.w	ip, r1, #20
 8019258:	2000      	movs	r0, #0
 801925a:	f8dc 3000 	ldr.w	r3, [ip]
 801925e:	b299      	uxth	r1, r3
 8019260:	fb02 6101 	mla	r1, r2, r1, r6
 8019264:	0c1e      	lsrs	r6, r3, #16
 8019266:	0c0b      	lsrs	r3, r1, #16
 8019268:	fb02 3306 	mla	r3, r2, r6, r3
 801926c:	b289      	uxth	r1, r1
 801926e:	3001      	adds	r0, #1
 8019270:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019274:	4285      	cmp	r5, r0
 8019276:	f84c 1b04 	str.w	r1, [ip], #4
 801927a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801927e:	dcec      	bgt.n	801925a <__multadd+0x12>
 8019280:	b30e      	cbz	r6, 80192c6 <__multadd+0x7e>
 8019282:	68a3      	ldr	r3, [r4, #8]
 8019284:	42ab      	cmp	r3, r5
 8019286:	dc19      	bgt.n	80192bc <__multadd+0x74>
 8019288:	6861      	ldr	r1, [r4, #4]
 801928a:	4638      	mov	r0, r7
 801928c:	3101      	adds	r1, #1
 801928e:	f7ff ff79 	bl	8019184 <_Balloc>
 8019292:	4680      	mov	r8, r0
 8019294:	b928      	cbnz	r0, 80192a2 <__multadd+0x5a>
 8019296:	4602      	mov	r2, r0
 8019298:	4b0c      	ldr	r3, [pc, #48]	; (80192cc <__multadd+0x84>)
 801929a:	480d      	ldr	r0, [pc, #52]	; (80192d0 <__multadd+0x88>)
 801929c:	21b5      	movs	r1, #181	; 0xb5
 801929e:	f000 fdf3 	bl	8019e88 <__assert_func>
 80192a2:	6922      	ldr	r2, [r4, #16]
 80192a4:	3202      	adds	r2, #2
 80192a6:	f104 010c 	add.w	r1, r4, #12
 80192aa:	0092      	lsls	r2, r2, #2
 80192ac:	300c      	adds	r0, #12
 80192ae:	f7fe f953 	bl	8017558 <memcpy>
 80192b2:	4621      	mov	r1, r4
 80192b4:	4638      	mov	r0, r7
 80192b6:	f7ff ffa5 	bl	8019204 <_Bfree>
 80192ba:	4644      	mov	r4, r8
 80192bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80192c0:	3501      	adds	r5, #1
 80192c2:	615e      	str	r6, [r3, #20]
 80192c4:	6125      	str	r5, [r4, #16]
 80192c6:	4620      	mov	r0, r4
 80192c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192cc:	0801a6fb 	.word	0x0801a6fb
 80192d0:	0801a76c 	.word	0x0801a76c

080192d4 <__hi0bits>:
 80192d4:	0c03      	lsrs	r3, r0, #16
 80192d6:	041b      	lsls	r3, r3, #16
 80192d8:	b9d3      	cbnz	r3, 8019310 <__hi0bits+0x3c>
 80192da:	0400      	lsls	r0, r0, #16
 80192dc:	2310      	movs	r3, #16
 80192de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80192e2:	bf04      	itt	eq
 80192e4:	0200      	lsleq	r0, r0, #8
 80192e6:	3308      	addeq	r3, #8
 80192e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80192ec:	bf04      	itt	eq
 80192ee:	0100      	lsleq	r0, r0, #4
 80192f0:	3304      	addeq	r3, #4
 80192f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80192f6:	bf04      	itt	eq
 80192f8:	0080      	lsleq	r0, r0, #2
 80192fa:	3302      	addeq	r3, #2
 80192fc:	2800      	cmp	r0, #0
 80192fe:	db05      	blt.n	801930c <__hi0bits+0x38>
 8019300:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019304:	f103 0301 	add.w	r3, r3, #1
 8019308:	bf08      	it	eq
 801930a:	2320      	moveq	r3, #32
 801930c:	4618      	mov	r0, r3
 801930e:	4770      	bx	lr
 8019310:	2300      	movs	r3, #0
 8019312:	e7e4      	b.n	80192de <__hi0bits+0xa>

08019314 <__lo0bits>:
 8019314:	6803      	ldr	r3, [r0, #0]
 8019316:	f013 0207 	ands.w	r2, r3, #7
 801931a:	4601      	mov	r1, r0
 801931c:	d00b      	beq.n	8019336 <__lo0bits+0x22>
 801931e:	07da      	lsls	r2, r3, #31
 8019320:	d423      	bmi.n	801936a <__lo0bits+0x56>
 8019322:	0798      	lsls	r0, r3, #30
 8019324:	bf49      	itett	mi
 8019326:	085b      	lsrmi	r3, r3, #1
 8019328:	089b      	lsrpl	r3, r3, #2
 801932a:	2001      	movmi	r0, #1
 801932c:	600b      	strmi	r3, [r1, #0]
 801932e:	bf5c      	itt	pl
 8019330:	600b      	strpl	r3, [r1, #0]
 8019332:	2002      	movpl	r0, #2
 8019334:	4770      	bx	lr
 8019336:	b298      	uxth	r0, r3
 8019338:	b9a8      	cbnz	r0, 8019366 <__lo0bits+0x52>
 801933a:	0c1b      	lsrs	r3, r3, #16
 801933c:	2010      	movs	r0, #16
 801933e:	b2da      	uxtb	r2, r3
 8019340:	b90a      	cbnz	r2, 8019346 <__lo0bits+0x32>
 8019342:	3008      	adds	r0, #8
 8019344:	0a1b      	lsrs	r3, r3, #8
 8019346:	071a      	lsls	r2, r3, #28
 8019348:	bf04      	itt	eq
 801934a:	091b      	lsreq	r3, r3, #4
 801934c:	3004      	addeq	r0, #4
 801934e:	079a      	lsls	r2, r3, #30
 8019350:	bf04      	itt	eq
 8019352:	089b      	lsreq	r3, r3, #2
 8019354:	3002      	addeq	r0, #2
 8019356:	07da      	lsls	r2, r3, #31
 8019358:	d403      	bmi.n	8019362 <__lo0bits+0x4e>
 801935a:	085b      	lsrs	r3, r3, #1
 801935c:	f100 0001 	add.w	r0, r0, #1
 8019360:	d005      	beq.n	801936e <__lo0bits+0x5a>
 8019362:	600b      	str	r3, [r1, #0]
 8019364:	4770      	bx	lr
 8019366:	4610      	mov	r0, r2
 8019368:	e7e9      	b.n	801933e <__lo0bits+0x2a>
 801936a:	2000      	movs	r0, #0
 801936c:	4770      	bx	lr
 801936e:	2020      	movs	r0, #32
 8019370:	4770      	bx	lr
	...

08019374 <__i2b>:
 8019374:	b510      	push	{r4, lr}
 8019376:	460c      	mov	r4, r1
 8019378:	2101      	movs	r1, #1
 801937a:	f7ff ff03 	bl	8019184 <_Balloc>
 801937e:	4602      	mov	r2, r0
 8019380:	b928      	cbnz	r0, 801938e <__i2b+0x1a>
 8019382:	4b05      	ldr	r3, [pc, #20]	; (8019398 <__i2b+0x24>)
 8019384:	4805      	ldr	r0, [pc, #20]	; (801939c <__i2b+0x28>)
 8019386:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801938a:	f000 fd7d 	bl	8019e88 <__assert_func>
 801938e:	2301      	movs	r3, #1
 8019390:	6144      	str	r4, [r0, #20]
 8019392:	6103      	str	r3, [r0, #16]
 8019394:	bd10      	pop	{r4, pc}
 8019396:	bf00      	nop
 8019398:	0801a6fb 	.word	0x0801a6fb
 801939c:	0801a76c 	.word	0x0801a76c

080193a0 <__multiply>:
 80193a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193a4:	4691      	mov	r9, r2
 80193a6:	690a      	ldr	r2, [r1, #16]
 80193a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80193ac:	429a      	cmp	r2, r3
 80193ae:	bfb8      	it	lt
 80193b0:	460b      	movlt	r3, r1
 80193b2:	460c      	mov	r4, r1
 80193b4:	bfbc      	itt	lt
 80193b6:	464c      	movlt	r4, r9
 80193b8:	4699      	movlt	r9, r3
 80193ba:	6927      	ldr	r7, [r4, #16]
 80193bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80193c0:	68a3      	ldr	r3, [r4, #8]
 80193c2:	6861      	ldr	r1, [r4, #4]
 80193c4:	eb07 060a 	add.w	r6, r7, sl
 80193c8:	42b3      	cmp	r3, r6
 80193ca:	b085      	sub	sp, #20
 80193cc:	bfb8      	it	lt
 80193ce:	3101      	addlt	r1, #1
 80193d0:	f7ff fed8 	bl	8019184 <_Balloc>
 80193d4:	b930      	cbnz	r0, 80193e4 <__multiply+0x44>
 80193d6:	4602      	mov	r2, r0
 80193d8:	4b44      	ldr	r3, [pc, #272]	; (80194ec <__multiply+0x14c>)
 80193da:	4845      	ldr	r0, [pc, #276]	; (80194f0 <__multiply+0x150>)
 80193dc:	f240 115d 	movw	r1, #349	; 0x15d
 80193e0:	f000 fd52 	bl	8019e88 <__assert_func>
 80193e4:	f100 0514 	add.w	r5, r0, #20
 80193e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80193ec:	462b      	mov	r3, r5
 80193ee:	2200      	movs	r2, #0
 80193f0:	4543      	cmp	r3, r8
 80193f2:	d321      	bcc.n	8019438 <__multiply+0x98>
 80193f4:	f104 0314 	add.w	r3, r4, #20
 80193f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80193fc:	f109 0314 	add.w	r3, r9, #20
 8019400:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019404:	9202      	str	r2, [sp, #8]
 8019406:	1b3a      	subs	r2, r7, r4
 8019408:	3a15      	subs	r2, #21
 801940a:	f022 0203 	bic.w	r2, r2, #3
 801940e:	3204      	adds	r2, #4
 8019410:	f104 0115 	add.w	r1, r4, #21
 8019414:	428f      	cmp	r7, r1
 8019416:	bf38      	it	cc
 8019418:	2204      	movcc	r2, #4
 801941a:	9201      	str	r2, [sp, #4]
 801941c:	9a02      	ldr	r2, [sp, #8]
 801941e:	9303      	str	r3, [sp, #12]
 8019420:	429a      	cmp	r2, r3
 8019422:	d80c      	bhi.n	801943e <__multiply+0x9e>
 8019424:	2e00      	cmp	r6, #0
 8019426:	dd03      	ble.n	8019430 <__multiply+0x90>
 8019428:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801942c:	2b00      	cmp	r3, #0
 801942e:	d05a      	beq.n	80194e6 <__multiply+0x146>
 8019430:	6106      	str	r6, [r0, #16]
 8019432:	b005      	add	sp, #20
 8019434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019438:	f843 2b04 	str.w	r2, [r3], #4
 801943c:	e7d8      	b.n	80193f0 <__multiply+0x50>
 801943e:	f8b3 a000 	ldrh.w	sl, [r3]
 8019442:	f1ba 0f00 	cmp.w	sl, #0
 8019446:	d024      	beq.n	8019492 <__multiply+0xf2>
 8019448:	f104 0e14 	add.w	lr, r4, #20
 801944c:	46a9      	mov	r9, r5
 801944e:	f04f 0c00 	mov.w	ip, #0
 8019452:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019456:	f8d9 1000 	ldr.w	r1, [r9]
 801945a:	fa1f fb82 	uxth.w	fp, r2
 801945e:	b289      	uxth	r1, r1
 8019460:	fb0a 110b 	mla	r1, sl, fp, r1
 8019464:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019468:	f8d9 2000 	ldr.w	r2, [r9]
 801946c:	4461      	add	r1, ip
 801946e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019472:	fb0a c20b 	mla	r2, sl, fp, ip
 8019476:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801947a:	b289      	uxth	r1, r1
 801947c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019480:	4577      	cmp	r7, lr
 8019482:	f849 1b04 	str.w	r1, [r9], #4
 8019486:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801948a:	d8e2      	bhi.n	8019452 <__multiply+0xb2>
 801948c:	9a01      	ldr	r2, [sp, #4]
 801948e:	f845 c002 	str.w	ip, [r5, r2]
 8019492:	9a03      	ldr	r2, [sp, #12]
 8019494:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019498:	3304      	adds	r3, #4
 801949a:	f1b9 0f00 	cmp.w	r9, #0
 801949e:	d020      	beq.n	80194e2 <__multiply+0x142>
 80194a0:	6829      	ldr	r1, [r5, #0]
 80194a2:	f104 0c14 	add.w	ip, r4, #20
 80194a6:	46ae      	mov	lr, r5
 80194a8:	f04f 0a00 	mov.w	sl, #0
 80194ac:	f8bc b000 	ldrh.w	fp, [ip]
 80194b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80194b4:	fb09 220b 	mla	r2, r9, fp, r2
 80194b8:	4492      	add	sl, r2
 80194ba:	b289      	uxth	r1, r1
 80194bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80194c0:	f84e 1b04 	str.w	r1, [lr], #4
 80194c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80194c8:	f8be 1000 	ldrh.w	r1, [lr]
 80194cc:	0c12      	lsrs	r2, r2, #16
 80194ce:	fb09 1102 	mla	r1, r9, r2, r1
 80194d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80194d6:	4567      	cmp	r7, ip
 80194d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80194dc:	d8e6      	bhi.n	80194ac <__multiply+0x10c>
 80194de:	9a01      	ldr	r2, [sp, #4]
 80194e0:	50a9      	str	r1, [r5, r2]
 80194e2:	3504      	adds	r5, #4
 80194e4:	e79a      	b.n	801941c <__multiply+0x7c>
 80194e6:	3e01      	subs	r6, #1
 80194e8:	e79c      	b.n	8019424 <__multiply+0x84>
 80194ea:	bf00      	nop
 80194ec:	0801a6fb 	.word	0x0801a6fb
 80194f0:	0801a76c 	.word	0x0801a76c

080194f4 <__pow5mult>:
 80194f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80194f8:	4615      	mov	r5, r2
 80194fa:	f012 0203 	ands.w	r2, r2, #3
 80194fe:	4606      	mov	r6, r0
 8019500:	460f      	mov	r7, r1
 8019502:	d007      	beq.n	8019514 <__pow5mult+0x20>
 8019504:	4c25      	ldr	r4, [pc, #148]	; (801959c <__pow5mult+0xa8>)
 8019506:	3a01      	subs	r2, #1
 8019508:	2300      	movs	r3, #0
 801950a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801950e:	f7ff fe9b 	bl	8019248 <__multadd>
 8019512:	4607      	mov	r7, r0
 8019514:	10ad      	asrs	r5, r5, #2
 8019516:	d03d      	beq.n	8019594 <__pow5mult+0xa0>
 8019518:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801951a:	b97c      	cbnz	r4, 801953c <__pow5mult+0x48>
 801951c:	2010      	movs	r0, #16
 801951e:	f7ff fe29 	bl	8019174 <malloc>
 8019522:	4602      	mov	r2, r0
 8019524:	6270      	str	r0, [r6, #36]	; 0x24
 8019526:	b928      	cbnz	r0, 8019534 <__pow5mult+0x40>
 8019528:	4b1d      	ldr	r3, [pc, #116]	; (80195a0 <__pow5mult+0xac>)
 801952a:	481e      	ldr	r0, [pc, #120]	; (80195a4 <__pow5mult+0xb0>)
 801952c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019530:	f000 fcaa 	bl	8019e88 <__assert_func>
 8019534:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019538:	6004      	str	r4, [r0, #0]
 801953a:	60c4      	str	r4, [r0, #12]
 801953c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019540:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019544:	b94c      	cbnz	r4, 801955a <__pow5mult+0x66>
 8019546:	f240 2171 	movw	r1, #625	; 0x271
 801954a:	4630      	mov	r0, r6
 801954c:	f7ff ff12 	bl	8019374 <__i2b>
 8019550:	2300      	movs	r3, #0
 8019552:	f8c8 0008 	str.w	r0, [r8, #8]
 8019556:	4604      	mov	r4, r0
 8019558:	6003      	str	r3, [r0, #0]
 801955a:	f04f 0900 	mov.w	r9, #0
 801955e:	07eb      	lsls	r3, r5, #31
 8019560:	d50a      	bpl.n	8019578 <__pow5mult+0x84>
 8019562:	4639      	mov	r1, r7
 8019564:	4622      	mov	r2, r4
 8019566:	4630      	mov	r0, r6
 8019568:	f7ff ff1a 	bl	80193a0 <__multiply>
 801956c:	4639      	mov	r1, r7
 801956e:	4680      	mov	r8, r0
 8019570:	4630      	mov	r0, r6
 8019572:	f7ff fe47 	bl	8019204 <_Bfree>
 8019576:	4647      	mov	r7, r8
 8019578:	106d      	asrs	r5, r5, #1
 801957a:	d00b      	beq.n	8019594 <__pow5mult+0xa0>
 801957c:	6820      	ldr	r0, [r4, #0]
 801957e:	b938      	cbnz	r0, 8019590 <__pow5mult+0x9c>
 8019580:	4622      	mov	r2, r4
 8019582:	4621      	mov	r1, r4
 8019584:	4630      	mov	r0, r6
 8019586:	f7ff ff0b 	bl	80193a0 <__multiply>
 801958a:	6020      	str	r0, [r4, #0]
 801958c:	f8c0 9000 	str.w	r9, [r0]
 8019590:	4604      	mov	r4, r0
 8019592:	e7e4      	b.n	801955e <__pow5mult+0x6a>
 8019594:	4638      	mov	r0, r7
 8019596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801959a:	bf00      	nop
 801959c:	0801a8b8 	.word	0x0801a8b8
 80195a0:	0801a689 	.word	0x0801a689
 80195a4:	0801a76c 	.word	0x0801a76c

080195a8 <__lshift>:
 80195a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195ac:	460c      	mov	r4, r1
 80195ae:	6849      	ldr	r1, [r1, #4]
 80195b0:	6923      	ldr	r3, [r4, #16]
 80195b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80195b6:	68a3      	ldr	r3, [r4, #8]
 80195b8:	4607      	mov	r7, r0
 80195ba:	4691      	mov	r9, r2
 80195bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80195c0:	f108 0601 	add.w	r6, r8, #1
 80195c4:	42b3      	cmp	r3, r6
 80195c6:	db0b      	blt.n	80195e0 <__lshift+0x38>
 80195c8:	4638      	mov	r0, r7
 80195ca:	f7ff fddb 	bl	8019184 <_Balloc>
 80195ce:	4605      	mov	r5, r0
 80195d0:	b948      	cbnz	r0, 80195e6 <__lshift+0x3e>
 80195d2:	4602      	mov	r2, r0
 80195d4:	4b2a      	ldr	r3, [pc, #168]	; (8019680 <__lshift+0xd8>)
 80195d6:	482b      	ldr	r0, [pc, #172]	; (8019684 <__lshift+0xdc>)
 80195d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80195dc:	f000 fc54 	bl	8019e88 <__assert_func>
 80195e0:	3101      	adds	r1, #1
 80195e2:	005b      	lsls	r3, r3, #1
 80195e4:	e7ee      	b.n	80195c4 <__lshift+0x1c>
 80195e6:	2300      	movs	r3, #0
 80195e8:	f100 0114 	add.w	r1, r0, #20
 80195ec:	f100 0210 	add.w	r2, r0, #16
 80195f0:	4618      	mov	r0, r3
 80195f2:	4553      	cmp	r3, sl
 80195f4:	db37      	blt.n	8019666 <__lshift+0xbe>
 80195f6:	6920      	ldr	r0, [r4, #16]
 80195f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80195fc:	f104 0314 	add.w	r3, r4, #20
 8019600:	f019 091f 	ands.w	r9, r9, #31
 8019604:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019608:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801960c:	d02f      	beq.n	801966e <__lshift+0xc6>
 801960e:	f1c9 0e20 	rsb	lr, r9, #32
 8019612:	468a      	mov	sl, r1
 8019614:	f04f 0c00 	mov.w	ip, #0
 8019618:	681a      	ldr	r2, [r3, #0]
 801961a:	fa02 f209 	lsl.w	r2, r2, r9
 801961e:	ea42 020c 	orr.w	r2, r2, ip
 8019622:	f84a 2b04 	str.w	r2, [sl], #4
 8019626:	f853 2b04 	ldr.w	r2, [r3], #4
 801962a:	4298      	cmp	r0, r3
 801962c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8019630:	d8f2      	bhi.n	8019618 <__lshift+0x70>
 8019632:	1b03      	subs	r3, r0, r4
 8019634:	3b15      	subs	r3, #21
 8019636:	f023 0303 	bic.w	r3, r3, #3
 801963a:	3304      	adds	r3, #4
 801963c:	f104 0215 	add.w	r2, r4, #21
 8019640:	4290      	cmp	r0, r2
 8019642:	bf38      	it	cc
 8019644:	2304      	movcc	r3, #4
 8019646:	f841 c003 	str.w	ip, [r1, r3]
 801964a:	f1bc 0f00 	cmp.w	ip, #0
 801964e:	d001      	beq.n	8019654 <__lshift+0xac>
 8019650:	f108 0602 	add.w	r6, r8, #2
 8019654:	3e01      	subs	r6, #1
 8019656:	4638      	mov	r0, r7
 8019658:	612e      	str	r6, [r5, #16]
 801965a:	4621      	mov	r1, r4
 801965c:	f7ff fdd2 	bl	8019204 <_Bfree>
 8019660:	4628      	mov	r0, r5
 8019662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019666:	f842 0f04 	str.w	r0, [r2, #4]!
 801966a:	3301      	adds	r3, #1
 801966c:	e7c1      	b.n	80195f2 <__lshift+0x4a>
 801966e:	3904      	subs	r1, #4
 8019670:	f853 2b04 	ldr.w	r2, [r3], #4
 8019674:	f841 2f04 	str.w	r2, [r1, #4]!
 8019678:	4298      	cmp	r0, r3
 801967a:	d8f9      	bhi.n	8019670 <__lshift+0xc8>
 801967c:	e7ea      	b.n	8019654 <__lshift+0xac>
 801967e:	bf00      	nop
 8019680:	0801a6fb 	.word	0x0801a6fb
 8019684:	0801a76c 	.word	0x0801a76c

08019688 <__mcmp>:
 8019688:	b530      	push	{r4, r5, lr}
 801968a:	6902      	ldr	r2, [r0, #16]
 801968c:	690c      	ldr	r4, [r1, #16]
 801968e:	1b12      	subs	r2, r2, r4
 8019690:	d10e      	bne.n	80196b0 <__mcmp+0x28>
 8019692:	f100 0314 	add.w	r3, r0, #20
 8019696:	3114      	adds	r1, #20
 8019698:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801969c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80196a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80196a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80196a8:	42a5      	cmp	r5, r4
 80196aa:	d003      	beq.n	80196b4 <__mcmp+0x2c>
 80196ac:	d305      	bcc.n	80196ba <__mcmp+0x32>
 80196ae:	2201      	movs	r2, #1
 80196b0:	4610      	mov	r0, r2
 80196b2:	bd30      	pop	{r4, r5, pc}
 80196b4:	4283      	cmp	r3, r0
 80196b6:	d3f3      	bcc.n	80196a0 <__mcmp+0x18>
 80196b8:	e7fa      	b.n	80196b0 <__mcmp+0x28>
 80196ba:	f04f 32ff 	mov.w	r2, #4294967295
 80196be:	e7f7      	b.n	80196b0 <__mcmp+0x28>

080196c0 <__mdiff>:
 80196c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196c4:	460c      	mov	r4, r1
 80196c6:	4606      	mov	r6, r0
 80196c8:	4611      	mov	r1, r2
 80196ca:	4620      	mov	r0, r4
 80196cc:	4690      	mov	r8, r2
 80196ce:	f7ff ffdb 	bl	8019688 <__mcmp>
 80196d2:	1e05      	subs	r5, r0, #0
 80196d4:	d110      	bne.n	80196f8 <__mdiff+0x38>
 80196d6:	4629      	mov	r1, r5
 80196d8:	4630      	mov	r0, r6
 80196da:	f7ff fd53 	bl	8019184 <_Balloc>
 80196de:	b930      	cbnz	r0, 80196ee <__mdiff+0x2e>
 80196e0:	4b3a      	ldr	r3, [pc, #232]	; (80197cc <__mdiff+0x10c>)
 80196e2:	4602      	mov	r2, r0
 80196e4:	f240 2132 	movw	r1, #562	; 0x232
 80196e8:	4839      	ldr	r0, [pc, #228]	; (80197d0 <__mdiff+0x110>)
 80196ea:	f000 fbcd 	bl	8019e88 <__assert_func>
 80196ee:	2301      	movs	r3, #1
 80196f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80196f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196f8:	bfa4      	itt	ge
 80196fa:	4643      	movge	r3, r8
 80196fc:	46a0      	movge	r8, r4
 80196fe:	4630      	mov	r0, r6
 8019700:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019704:	bfa6      	itte	ge
 8019706:	461c      	movge	r4, r3
 8019708:	2500      	movge	r5, #0
 801970a:	2501      	movlt	r5, #1
 801970c:	f7ff fd3a 	bl	8019184 <_Balloc>
 8019710:	b920      	cbnz	r0, 801971c <__mdiff+0x5c>
 8019712:	4b2e      	ldr	r3, [pc, #184]	; (80197cc <__mdiff+0x10c>)
 8019714:	4602      	mov	r2, r0
 8019716:	f44f 7110 	mov.w	r1, #576	; 0x240
 801971a:	e7e5      	b.n	80196e8 <__mdiff+0x28>
 801971c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019720:	6926      	ldr	r6, [r4, #16]
 8019722:	60c5      	str	r5, [r0, #12]
 8019724:	f104 0914 	add.w	r9, r4, #20
 8019728:	f108 0514 	add.w	r5, r8, #20
 801972c:	f100 0e14 	add.w	lr, r0, #20
 8019730:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019734:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019738:	f108 0210 	add.w	r2, r8, #16
 801973c:	46f2      	mov	sl, lr
 801973e:	2100      	movs	r1, #0
 8019740:	f859 3b04 	ldr.w	r3, [r9], #4
 8019744:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019748:	fa1f f883 	uxth.w	r8, r3
 801974c:	fa11 f18b 	uxtah	r1, r1, fp
 8019750:	0c1b      	lsrs	r3, r3, #16
 8019752:	eba1 0808 	sub.w	r8, r1, r8
 8019756:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801975a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801975e:	fa1f f888 	uxth.w	r8, r8
 8019762:	1419      	asrs	r1, r3, #16
 8019764:	454e      	cmp	r6, r9
 8019766:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801976a:	f84a 3b04 	str.w	r3, [sl], #4
 801976e:	d8e7      	bhi.n	8019740 <__mdiff+0x80>
 8019770:	1b33      	subs	r3, r6, r4
 8019772:	3b15      	subs	r3, #21
 8019774:	f023 0303 	bic.w	r3, r3, #3
 8019778:	3304      	adds	r3, #4
 801977a:	3415      	adds	r4, #21
 801977c:	42a6      	cmp	r6, r4
 801977e:	bf38      	it	cc
 8019780:	2304      	movcc	r3, #4
 8019782:	441d      	add	r5, r3
 8019784:	4473      	add	r3, lr
 8019786:	469e      	mov	lr, r3
 8019788:	462e      	mov	r6, r5
 801978a:	4566      	cmp	r6, ip
 801978c:	d30e      	bcc.n	80197ac <__mdiff+0xec>
 801978e:	f10c 0203 	add.w	r2, ip, #3
 8019792:	1b52      	subs	r2, r2, r5
 8019794:	f022 0203 	bic.w	r2, r2, #3
 8019798:	3d03      	subs	r5, #3
 801979a:	45ac      	cmp	ip, r5
 801979c:	bf38      	it	cc
 801979e:	2200      	movcc	r2, #0
 80197a0:	441a      	add	r2, r3
 80197a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80197a6:	b17b      	cbz	r3, 80197c8 <__mdiff+0x108>
 80197a8:	6107      	str	r7, [r0, #16]
 80197aa:	e7a3      	b.n	80196f4 <__mdiff+0x34>
 80197ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80197b0:	fa11 f288 	uxtah	r2, r1, r8
 80197b4:	1414      	asrs	r4, r2, #16
 80197b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80197ba:	b292      	uxth	r2, r2
 80197bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80197c0:	f84e 2b04 	str.w	r2, [lr], #4
 80197c4:	1421      	asrs	r1, r4, #16
 80197c6:	e7e0      	b.n	801978a <__mdiff+0xca>
 80197c8:	3f01      	subs	r7, #1
 80197ca:	e7ea      	b.n	80197a2 <__mdiff+0xe2>
 80197cc:	0801a6fb 	.word	0x0801a6fb
 80197d0:	0801a76c 	.word	0x0801a76c

080197d4 <__d2b>:
 80197d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80197d8:	4689      	mov	r9, r1
 80197da:	2101      	movs	r1, #1
 80197dc:	ec57 6b10 	vmov	r6, r7, d0
 80197e0:	4690      	mov	r8, r2
 80197e2:	f7ff fccf 	bl	8019184 <_Balloc>
 80197e6:	4604      	mov	r4, r0
 80197e8:	b930      	cbnz	r0, 80197f8 <__d2b+0x24>
 80197ea:	4602      	mov	r2, r0
 80197ec:	4b25      	ldr	r3, [pc, #148]	; (8019884 <__d2b+0xb0>)
 80197ee:	4826      	ldr	r0, [pc, #152]	; (8019888 <__d2b+0xb4>)
 80197f0:	f240 310a 	movw	r1, #778	; 0x30a
 80197f4:	f000 fb48 	bl	8019e88 <__assert_func>
 80197f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80197fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019800:	bb35      	cbnz	r5, 8019850 <__d2b+0x7c>
 8019802:	2e00      	cmp	r6, #0
 8019804:	9301      	str	r3, [sp, #4]
 8019806:	d028      	beq.n	801985a <__d2b+0x86>
 8019808:	4668      	mov	r0, sp
 801980a:	9600      	str	r6, [sp, #0]
 801980c:	f7ff fd82 	bl	8019314 <__lo0bits>
 8019810:	9900      	ldr	r1, [sp, #0]
 8019812:	b300      	cbz	r0, 8019856 <__d2b+0x82>
 8019814:	9a01      	ldr	r2, [sp, #4]
 8019816:	f1c0 0320 	rsb	r3, r0, #32
 801981a:	fa02 f303 	lsl.w	r3, r2, r3
 801981e:	430b      	orrs	r3, r1
 8019820:	40c2      	lsrs	r2, r0
 8019822:	6163      	str	r3, [r4, #20]
 8019824:	9201      	str	r2, [sp, #4]
 8019826:	9b01      	ldr	r3, [sp, #4]
 8019828:	61a3      	str	r3, [r4, #24]
 801982a:	2b00      	cmp	r3, #0
 801982c:	bf14      	ite	ne
 801982e:	2202      	movne	r2, #2
 8019830:	2201      	moveq	r2, #1
 8019832:	6122      	str	r2, [r4, #16]
 8019834:	b1d5      	cbz	r5, 801986c <__d2b+0x98>
 8019836:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801983a:	4405      	add	r5, r0
 801983c:	f8c9 5000 	str.w	r5, [r9]
 8019840:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019844:	f8c8 0000 	str.w	r0, [r8]
 8019848:	4620      	mov	r0, r4
 801984a:	b003      	add	sp, #12
 801984c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019854:	e7d5      	b.n	8019802 <__d2b+0x2e>
 8019856:	6161      	str	r1, [r4, #20]
 8019858:	e7e5      	b.n	8019826 <__d2b+0x52>
 801985a:	a801      	add	r0, sp, #4
 801985c:	f7ff fd5a 	bl	8019314 <__lo0bits>
 8019860:	9b01      	ldr	r3, [sp, #4]
 8019862:	6163      	str	r3, [r4, #20]
 8019864:	2201      	movs	r2, #1
 8019866:	6122      	str	r2, [r4, #16]
 8019868:	3020      	adds	r0, #32
 801986a:	e7e3      	b.n	8019834 <__d2b+0x60>
 801986c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019870:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019874:	f8c9 0000 	str.w	r0, [r9]
 8019878:	6918      	ldr	r0, [r3, #16]
 801987a:	f7ff fd2b 	bl	80192d4 <__hi0bits>
 801987e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019882:	e7df      	b.n	8019844 <__d2b+0x70>
 8019884:	0801a6fb 	.word	0x0801a6fb
 8019888:	0801a76c 	.word	0x0801a76c

0801988c <_calloc_r>:
 801988c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801988e:	fba1 2402 	umull	r2, r4, r1, r2
 8019892:	b94c      	cbnz	r4, 80198a8 <_calloc_r+0x1c>
 8019894:	4611      	mov	r1, r2
 8019896:	9201      	str	r2, [sp, #4]
 8019898:	f000 f87a 	bl	8019990 <_malloc_r>
 801989c:	9a01      	ldr	r2, [sp, #4]
 801989e:	4605      	mov	r5, r0
 80198a0:	b930      	cbnz	r0, 80198b0 <_calloc_r+0x24>
 80198a2:	4628      	mov	r0, r5
 80198a4:	b003      	add	sp, #12
 80198a6:	bd30      	pop	{r4, r5, pc}
 80198a8:	220c      	movs	r2, #12
 80198aa:	6002      	str	r2, [r0, #0]
 80198ac:	2500      	movs	r5, #0
 80198ae:	e7f8      	b.n	80198a2 <_calloc_r+0x16>
 80198b0:	4621      	mov	r1, r4
 80198b2:	f7fd fe5f 	bl	8017574 <memset>
 80198b6:	e7f4      	b.n	80198a2 <_calloc_r+0x16>

080198b8 <_free_r>:
 80198b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80198ba:	2900      	cmp	r1, #0
 80198bc:	d044      	beq.n	8019948 <_free_r+0x90>
 80198be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80198c2:	9001      	str	r0, [sp, #4]
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	f1a1 0404 	sub.w	r4, r1, #4
 80198ca:	bfb8      	it	lt
 80198cc:	18e4      	addlt	r4, r4, r3
 80198ce:	f000 fb61 	bl	8019f94 <__malloc_lock>
 80198d2:	4a1e      	ldr	r2, [pc, #120]	; (801994c <_free_r+0x94>)
 80198d4:	9801      	ldr	r0, [sp, #4]
 80198d6:	6813      	ldr	r3, [r2, #0]
 80198d8:	b933      	cbnz	r3, 80198e8 <_free_r+0x30>
 80198da:	6063      	str	r3, [r4, #4]
 80198dc:	6014      	str	r4, [r2, #0]
 80198de:	b003      	add	sp, #12
 80198e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80198e4:	f000 bb5c 	b.w	8019fa0 <__malloc_unlock>
 80198e8:	42a3      	cmp	r3, r4
 80198ea:	d908      	bls.n	80198fe <_free_r+0x46>
 80198ec:	6825      	ldr	r5, [r4, #0]
 80198ee:	1961      	adds	r1, r4, r5
 80198f0:	428b      	cmp	r3, r1
 80198f2:	bf01      	itttt	eq
 80198f4:	6819      	ldreq	r1, [r3, #0]
 80198f6:	685b      	ldreq	r3, [r3, #4]
 80198f8:	1949      	addeq	r1, r1, r5
 80198fa:	6021      	streq	r1, [r4, #0]
 80198fc:	e7ed      	b.n	80198da <_free_r+0x22>
 80198fe:	461a      	mov	r2, r3
 8019900:	685b      	ldr	r3, [r3, #4]
 8019902:	b10b      	cbz	r3, 8019908 <_free_r+0x50>
 8019904:	42a3      	cmp	r3, r4
 8019906:	d9fa      	bls.n	80198fe <_free_r+0x46>
 8019908:	6811      	ldr	r1, [r2, #0]
 801990a:	1855      	adds	r5, r2, r1
 801990c:	42a5      	cmp	r5, r4
 801990e:	d10b      	bne.n	8019928 <_free_r+0x70>
 8019910:	6824      	ldr	r4, [r4, #0]
 8019912:	4421      	add	r1, r4
 8019914:	1854      	adds	r4, r2, r1
 8019916:	42a3      	cmp	r3, r4
 8019918:	6011      	str	r1, [r2, #0]
 801991a:	d1e0      	bne.n	80198de <_free_r+0x26>
 801991c:	681c      	ldr	r4, [r3, #0]
 801991e:	685b      	ldr	r3, [r3, #4]
 8019920:	6053      	str	r3, [r2, #4]
 8019922:	4421      	add	r1, r4
 8019924:	6011      	str	r1, [r2, #0]
 8019926:	e7da      	b.n	80198de <_free_r+0x26>
 8019928:	d902      	bls.n	8019930 <_free_r+0x78>
 801992a:	230c      	movs	r3, #12
 801992c:	6003      	str	r3, [r0, #0]
 801992e:	e7d6      	b.n	80198de <_free_r+0x26>
 8019930:	6825      	ldr	r5, [r4, #0]
 8019932:	1961      	adds	r1, r4, r5
 8019934:	428b      	cmp	r3, r1
 8019936:	bf04      	itt	eq
 8019938:	6819      	ldreq	r1, [r3, #0]
 801993a:	685b      	ldreq	r3, [r3, #4]
 801993c:	6063      	str	r3, [r4, #4]
 801993e:	bf04      	itt	eq
 8019940:	1949      	addeq	r1, r1, r5
 8019942:	6021      	streq	r1, [r4, #0]
 8019944:	6054      	str	r4, [r2, #4]
 8019946:	e7ca      	b.n	80198de <_free_r+0x26>
 8019948:	b003      	add	sp, #12
 801994a:	bd30      	pop	{r4, r5, pc}
 801994c:	2000cb00 	.word	0x2000cb00

08019950 <sbrk_aligned>:
 8019950:	b570      	push	{r4, r5, r6, lr}
 8019952:	4e0e      	ldr	r6, [pc, #56]	; (801998c <sbrk_aligned+0x3c>)
 8019954:	460c      	mov	r4, r1
 8019956:	6831      	ldr	r1, [r6, #0]
 8019958:	4605      	mov	r5, r0
 801995a:	b911      	cbnz	r1, 8019962 <sbrk_aligned+0x12>
 801995c:	f000 fa2e 	bl	8019dbc <_sbrk_r>
 8019960:	6030      	str	r0, [r6, #0]
 8019962:	4621      	mov	r1, r4
 8019964:	4628      	mov	r0, r5
 8019966:	f000 fa29 	bl	8019dbc <_sbrk_r>
 801996a:	1c43      	adds	r3, r0, #1
 801996c:	d00a      	beq.n	8019984 <sbrk_aligned+0x34>
 801996e:	1cc4      	adds	r4, r0, #3
 8019970:	f024 0403 	bic.w	r4, r4, #3
 8019974:	42a0      	cmp	r0, r4
 8019976:	d007      	beq.n	8019988 <sbrk_aligned+0x38>
 8019978:	1a21      	subs	r1, r4, r0
 801997a:	4628      	mov	r0, r5
 801997c:	f000 fa1e 	bl	8019dbc <_sbrk_r>
 8019980:	3001      	adds	r0, #1
 8019982:	d101      	bne.n	8019988 <sbrk_aligned+0x38>
 8019984:	f04f 34ff 	mov.w	r4, #4294967295
 8019988:	4620      	mov	r0, r4
 801998a:	bd70      	pop	{r4, r5, r6, pc}
 801998c:	2000cb04 	.word	0x2000cb04

08019990 <_malloc_r>:
 8019990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019994:	1ccd      	adds	r5, r1, #3
 8019996:	f025 0503 	bic.w	r5, r5, #3
 801999a:	3508      	adds	r5, #8
 801999c:	2d0c      	cmp	r5, #12
 801999e:	bf38      	it	cc
 80199a0:	250c      	movcc	r5, #12
 80199a2:	2d00      	cmp	r5, #0
 80199a4:	4607      	mov	r7, r0
 80199a6:	db01      	blt.n	80199ac <_malloc_r+0x1c>
 80199a8:	42a9      	cmp	r1, r5
 80199aa:	d905      	bls.n	80199b8 <_malloc_r+0x28>
 80199ac:	230c      	movs	r3, #12
 80199ae:	603b      	str	r3, [r7, #0]
 80199b0:	2600      	movs	r6, #0
 80199b2:	4630      	mov	r0, r6
 80199b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199b8:	4e2e      	ldr	r6, [pc, #184]	; (8019a74 <_malloc_r+0xe4>)
 80199ba:	f000 faeb 	bl	8019f94 <__malloc_lock>
 80199be:	6833      	ldr	r3, [r6, #0]
 80199c0:	461c      	mov	r4, r3
 80199c2:	bb34      	cbnz	r4, 8019a12 <_malloc_r+0x82>
 80199c4:	4629      	mov	r1, r5
 80199c6:	4638      	mov	r0, r7
 80199c8:	f7ff ffc2 	bl	8019950 <sbrk_aligned>
 80199cc:	1c43      	adds	r3, r0, #1
 80199ce:	4604      	mov	r4, r0
 80199d0:	d14d      	bne.n	8019a6e <_malloc_r+0xde>
 80199d2:	6834      	ldr	r4, [r6, #0]
 80199d4:	4626      	mov	r6, r4
 80199d6:	2e00      	cmp	r6, #0
 80199d8:	d140      	bne.n	8019a5c <_malloc_r+0xcc>
 80199da:	6823      	ldr	r3, [r4, #0]
 80199dc:	4631      	mov	r1, r6
 80199de:	4638      	mov	r0, r7
 80199e0:	eb04 0803 	add.w	r8, r4, r3
 80199e4:	f000 f9ea 	bl	8019dbc <_sbrk_r>
 80199e8:	4580      	cmp	r8, r0
 80199ea:	d13a      	bne.n	8019a62 <_malloc_r+0xd2>
 80199ec:	6821      	ldr	r1, [r4, #0]
 80199ee:	3503      	adds	r5, #3
 80199f0:	1a6d      	subs	r5, r5, r1
 80199f2:	f025 0503 	bic.w	r5, r5, #3
 80199f6:	3508      	adds	r5, #8
 80199f8:	2d0c      	cmp	r5, #12
 80199fa:	bf38      	it	cc
 80199fc:	250c      	movcc	r5, #12
 80199fe:	4629      	mov	r1, r5
 8019a00:	4638      	mov	r0, r7
 8019a02:	f7ff ffa5 	bl	8019950 <sbrk_aligned>
 8019a06:	3001      	adds	r0, #1
 8019a08:	d02b      	beq.n	8019a62 <_malloc_r+0xd2>
 8019a0a:	6823      	ldr	r3, [r4, #0]
 8019a0c:	442b      	add	r3, r5
 8019a0e:	6023      	str	r3, [r4, #0]
 8019a10:	e00e      	b.n	8019a30 <_malloc_r+0xa0>
 8019a12:	6822      	ldr	r2, [r4, #0]
 8019a14:	1b52      	subs	r2, r2, r5
 8019a16:	d41e      	bmi.n	8019a56 <_malloc_r+0xc6>
 8019a18:	2a0b      	cmp	r2, #11
 8019a1a:	d916      	bls.n	8019a4a <_malloc_r+0xba>
 8019a1c:	1961      	adds	r1, r4, r5
 8019a1e:	42a3      	cmp	r3, r4
 8019a20:	6025      	str	r5, [r4, #0]
 8019a22:	bf18      	it	ne
 8019a24:	6059      	strne	r1, [r3, #4]
 8019a26:	6863      	ldr	r3, [r4, #4]
 8019a28:	bf08      	it	eq
 8019a2a:	6031      	streq	r1, [r6, #0]
 8019a2c:	5162      	str	r2, [r4, r5]
 8019a2e:	604b      	str	r3, [r1, #4]
 8019a30:	4638      	mov	r0, r7
 8019a32:	f104 060b 	add.w	r6, r4, #11
 8019a36:	f000 fab3 	bl	8019fa0 <__malloc_unlock>
 8019a3a:	f026 0607 	bic.w	r6, r6, #7
 8019a3e:	1d23      	adds	r3, r4, #4
 8019a40:	1af2      	subs	r2, r6, r3
 8019a42:	d0b6      	beq.n	80199b2 <_malloc_r+0x22>
 8019a44:	1b9b      	subs	r3, r3, r6
 8019a46:	50a3      	str	r3, [r4, r2]
 8019a48:	e7b3      	b.n	80199b2 <_malloc_r+0x22>
 8019a4a:	6862      	ldr	r2, [r4, #4]
 8019a4c:	42a3      	cmp	r3, r4
 8019a4e:	bf0c      	ite	eq
 8019a50:	6032      	streq	r2, [r6, #0]
 8019a52:	605a      	strne	r2, [r3, #4]
 8019a54:	e7ec      	b.n	8019a30 <_malloc_r+0xa0>
 8019a56:	4623      	mov	r3, r4
 8019a58:	6864      	ldr	r4, [r4, #4]
 8019a5a:	e7b2      	b.n	80199c2 <_malloc_r+0x32>
 8019a5c:	4634      	mov	r4, r6
 8019a5e:	6876      	ldr	r6, [r6, #4]
 8019a60:	e7b9      	b.n	80199d6 <_malloc_r+0x46>
 8019a62:	230c      	movs	r3, #12
 8019a64:	603b      	str	r3, [r7, #0]
 8019a66:	4638      	mov	r0, r7
 8019a68:	f000 fa9a 	bl	8019fa0 <__malloc_unlock>
 8019a6c:	e7a1      	b.n	80199b2 <_malloc_r+0x22>
 8019a6e:	6025      	str	r5, [r4, #0]
 8019a70:	e7de      	b.n	8019a30 <_malloc_r+0xa0>
 8019a72:	bf00      	nop
 8019a74:	2000cb00 	.word	0x2000cb00

08019a78 <__sfputc_r>:
 8019a78:	6893      	ldr	r3, [r2, #8]
 8019a7a:	3b01      	subs	r3, #1
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	b410      	push	{r4}
 8019a80:	6093      	str	r3, [r2, #8]
 8019a82:	da08      	bge.n	8019a96 <__sfputc_r+0x1e>
 8019a84:	6994      	ldr	r4, [r2, #24]
 8019a86:	42a3      	cmp	r3, r4
 8019a88:	db01      	blt.n	8019a8e <__sfputc_r+0x16>
 8019a8a:	290a      	cmp	r1, #10
 8019a8c:	d103      	bne.n	8019a96 <__sfputc_r+0x1e>
 8019a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a92:	f7fe ba0f 	b.w	8017eb4 <__swbuf_r>
 8019a96:	6813      	ldr	r3, [r2, #0]
 8019a98:	1c58      	adds	r0, r3, #1
 8019a9a:	6010      	str	r0, [r2, #0]
 8019a9c:	7019      	strb	r1, [r3, #0]
 8019a9e:	4608      	mov	r0, r1
 8019aa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019aa4:	4770      	bx	lr

08019aa6 <__sfputs_r>:
 8019aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019aa8:	4606      	mov	r6, r0
 8019aaa:	460f      	mov	r7, r1
 8019aac:	4614      	mov	r4, r2
 8019aae:	18d5      	adds	r5, r2, r3
 8019ab0:	42ac      	cmp	r4, r5
 8019ab2:	d101      	bne.n	8019ab8 <__sfputs_r+0x12>
 8019ab4:	2000      	movs	r0, #0
 8019ab6:	e007      	b.n	8019ac8 <__sfputs_r+0x22>
 8019ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019abc:	463a      	mov	r2, r7
 8019abe:	4630      	mov	r0, r6
 8019ac0:	f7ff ffda 	bl	8019a78 <__sfputc_r>
 8019ac4:	1c43      	adds	r3, r0, #1
 8019ac6:	d1f3      	bne.n	8019ab0 <__sfputs_r+0xa>
 8019ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019acc <_vfiprintf_r>:
 8019acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ad0:	460d      	mov	r5, r1
 8019ad2:	b09d      	sub	sp, #116	; 0x74
 8019ad4:	4614      	mov	r4, r2
 8019ad6:	4698      	mov	r8, r3
 8019ad8:	4606      	mov	r6, r0
 8019ada:	b118      	cbz	r0, 8019ae4 <_vfiprintf_r+0x18>
 8019adc:	6983      	ldr	r3, [r0, #24]
 8019ade:	b90b      	cbnz	r3, 8019ae4 <_vfiprintf_r+0x18>
 8019ae0:	f7ff fa3e 	bl	8018f60 <__sinit>
 8019ae4:	4b89      	ldr	r3, [pc, #548]	; (8019d0c <_vfiprintf_r+0x240>)
 8019ae6:	429d      	cmp	r5, r3
 8019ae8:	d11b      	bne.n	8019b22 <_vfiprintf_r+0x56>
 8019aea:	6875      	ldr	r5, [r6, #4]
 8019aec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019aee:	07d9      	lsls	r1, r3, #31
 8019af0:	d405      	bmi.n	8019afe <_vfiprintf_r+0x32>
 8019af2:	89ab      	ldrh	r3, [r5, #12]
 8019af4:	059a      	lsls	r2, r3, #22
 8019af6:	d402      	bmi.n	8019afe <_vfiprintf_r+0x32>
 8019af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019afa:	f7ff fad4 	bl	80190a6 <__retarget_lock_acquire_recursive>
 8019afe:	89ab      	ldrh	r3, [r5, #12]
 8019b00:	071b      	lsls	r3, r3, #28
 8019b02:	d501      	bpl.n	8019b08 <_vfiprintf_r+0x3c>
 8019b04:	692b      	ldr	r3, [r5, #16]
 8019b06:	b9eb      	cbnz	r3, 8019b44 <_vfiprintf_r+0x78>
 8019b08:	4629      	mov	r1, r5
 8019b0a:	4630      	mov	r0, r6
 8019b0c:	f7fe fa24 	bl	8017f58 <__swsetup_r>
 8019b10:	b1c0      	cbz	r0, 8019b44 <_vfiprintf_r+0x78>
 8019b12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019b14:	07dc      	lsls	r4, r3, #31
 8019b16:	d50e      	bpl.n	8019b36 <_vfiprintf_r+0x6a>
 8019b18:	f04f 30ff 	mov.w	r0, #4294967295
 8019b1c:	b01d      	add	sp, #116	; 0x74
 8019b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b22:	4b7b      	ldr	r3, [pc, #492]	; (8019d10 <_vfiprintf_r+0x244>)
 8019b24:	429d      	cmp	r5, r3
 8019b26:	d101      	bne.n	8019b2c <_vfiprintf_r+0x60>
 8019b28:	68b5      	ldr	r5, [r6, #8]
 8019b2a:	e7df      	b.n	8019aec <_vfiprintf_r+0x20>
 8019b2c:	4b79      	ldr	r3, [pc, #484]	; (8019d14 <_vfiprintf_r+0x248>)
 8019b2e:	429d      	cmp	r5, r3
 8019b30:	bf08      	it	eq
 8019b32:	68f5      	ldreq	r5, [r6, #12]
 8019b34:	e7da      	b.n	8019aec <_vfiprintf_r+0x20>
 8019b36:	89ab      	ldrh	r3, [r5, #12]
 8019b38:	0598      	lsls	r0, r3, #22
 8019b3a:	d4ed      	bmi.n	8019b18 <_vfiprintf_r+0x4c>
 8019b3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019b3e:	f7ff fab3 	bl	80190a8 <__retarget_lock_release_recursive>
 8019b42:	e7e9      	b.n	8019b18 <_vfiprintf_r+0x4c>
 8019b44:	2300      	movs	r3, #0
 8019b46:	9309      	str	r3, [sp, #36]	; 0x24
 8019b48:	2320      	movs	r3, #32
 8019b4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019b4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019b52:	2330      	movs	r3, #48	; 0x30
 8019b54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019d18 <_vfiprintf_r+0x24c>
 8019b58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019b5c:	f04f 0901 	mov.w	r9, #1
 8019b60:	4623      	mov	r3, r4
 8019b62:	469a      	mov	sl, r3
 8019b64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019b68:	b10a      	cbz	r2, 8019b6e <_vfiprintf_r+0xa2>
 8019b6a:	2a25      	cmp	r2, #37	; 0x25
 8019b6c:	d1f9      	bne.n	8019b62 <_vfiprintf_r+0x96>
 8019b6e:	ebba 0b04 	subs.w	fp, sl, r4
 8019b72:	d00b      	beq.n	8019b8c <_vfiprintf_r+0xc0>
 8019b74:	465b      	mov	r3, fp
 8019b76:	4622      	mov	r2, r4
 8019b78:	4629      	mov	r1, r5
 8019b7a:	4630      	mov	r0, r6
 8019b7c:	f7ff ff93 	bl	8019aa6 <__sfputs_r>
 8019b80:	3001      	adds	r0, #1
 8019b82:	f000 80aa 	beq.w	8019cda <_vfiprintf_r+0x20e>
 8019b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019b88:	445a      	add	r2, fp
 8019b8a:	9209      	str	r2, [sp, #36]	; 0x24
 8019b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	f000 80a2 	beq.w	8019cda <_vfiprintf_r+0x20e>
 8019b96:	2300      	movs	r3, #0
 8019b98:	f04f 32ff 	mov.w	r2, #4294967295
 8019b9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019ba0:	f10a 0a01 	add.w	sl, sl, #1
 8019ba4:	9304      	str	r3, [sp, #16]
 8019ba6:	9307      	str	r3, [sp, #28]
 8019ba8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019bac:	931a      	str	r3, [sp, #104]	; 0x68
 8019bae:	4654      	mov	r4, sl
 8019bb0:	2205      	movs	r2, #5
 8019bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019bb6:	4858      	ldr	r0, [pc, #352]	; (8019d18 <_vfiprintf_r+0x24c>)
 8019bb8:	f7e6 fb3a 	bl	8000230 <memchr>
 8019bbc:	9a04      	ldr	r2, [sp, #16]
 8019bbe:	b9d8      	cbnz	r0, 8019bf8 <_vfiprintf_r+0x12c>
 8019bc0:	06d1      	lsls	r1, r2, #27
 8019bc2:	bf44      	itt	mi
 8019bc4:	2320      	movmi	r3, #32
 8019bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019bca:	0713      	lsls	r3, r2, #28
 8019bcc:	bf44      	itt	mi
 8019bce:	232b      	movmi	r3, #43	; 0x2b
 8019bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8019bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8019bda:	d015      	beq.n	8019c08 <_vfiprintf_r+0x13c>
 8019bdc:	9a07      	ldr	r2, [sp, #28]
 8019bde:	4654      	mov	r4, sl
 8019be0:	2000      	movs	r0, #0
 8019be2:	f04f 0c0a 	mov.w	ip, #10
 8019be6:	4621      	mov	r1, r4
 8019be8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019bec:	3b30      	subs	r3, #48	; 0x30
 8019bee:	2b09      	cmp	r3, #9
 8019bf0:	d94e      	bls.n	8019c90 <_vfiprintf_r+0x1c4>
 8019bf2:	b1b0      	cbz	r0, 8019c22 <_vfiprintf_r+0x156>
 8019bf4:	9207      	str	r2, [sp, #28]
 8019bf6:	e014      	b.n	8019c22 <_vfiprintf_r+0x156>
 8019bf8:	eba0 0308 	sub.w	r3, r0, r8
 8019bfc:	fa09 f303 	lsl.w	r3, r9, r3
 8019c00:	4313      	orrs	r3, r2
 8019c02:	9304      	str	r3, [sp, #16]
 8019c04:	46a2      	mov	sl, r4
 8019c06:	e7d2      	b.n	8019bae <_vfiprintf_r+0xe2>
 8019c08:	9b03      	ldr	r3, [sp, #12]
 8019c0a:	1d19      	adds	r1, r3, #4
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	9103      	str	r1, [sp, #12]
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	bfbb      	ittet	lt
 8019c14:	425b      	neglt	r3, r3
 8019c16:	f042 0202 	orrlt.w	r2, r2, #2
 8019c1a:	9307      	strge	r3, [sp, #28]
 8019c1c:	9307      	strlt	r3, [sp, #28]
 8019c1e:	bfb8      	it	lt
 8019c20:	9204      	strlt	r2, [sp, #16]
 8019c22:	7823      	ldrb	r3, [r4, #0]
 8019c24:	2b2e      	cmp	r3, #46	; 0x2e
 8019c26:	d10c      	bne.n	8019c42 <_vfiprintf_r+0x176>
 8019c28:	7863      	ldrb	r3, [r4, #1]
 8019c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8019c2c:	d135      	bne.n	8019c9a <_vfiprintf_r+0x1ce>
 8019c2e:	9b03      	ldr	r3, [sp, #12]
 8019c30:	1d1a      	adds	r2, r3, #4
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	9203      	str	r2, [sp, #12]
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	bfb8      	it	lt
 8019c3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8019c3e:	3402      	adds	r4, #2
 8019c40:	9305      	str	r3, [sp, #20]
 8019c42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019d28 <_vfiprintf_r+0x25c>
 8019c46:	7821      	ldrb	r1, [r4, #0]
 8019c48:	2203      	movs	r2, #3
 8019c4a:	4650      	mov	r0, sl
 8019c4c:	f7e6 faf0 	bl	8000230 <memchr>
 8019c50:	b140      	cbz	r0, 8019c64 <_vfiprintf_r+0x198>
 8019c52:	2340      	movs	r3, #64	; 0x40
 8019c54:	eba0 000a 	sub.w	r0, r0, sl
 8019c58:	fa03 f000 	lsl.w	r0, r3, r0
 8019c5c:	9b04      	ldr	r3, [sp, #16]
 8019c5e:	4303      	orrs	r3, r0
 8019c60:	3401      	adds	r4, #1
 8019c62:	9304      	str	r3, [sp, #16]
 8019c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c68:	482c      	ldr	r0, [pc, #176]	; (8019d1c <_vfiprintf_r+0x250>)
 8019c6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019c6e:	2206      	movs	r2, #6
 8019c70:	f7e6 fade 	bl	8000230 <memchr>
 8019c74:	2800      	cmp	r0, #0
 8019c76:	d03f      	beq.n	8019cf8 <_vfiprintf_r+0x22c>
 8019c78:	4b29      	ldr	r3, [pc, #164]	; (8019d20 <_vfiprintf_r+0x254>)
 8019c7a:	bb1b      	cbnz	r3, 8019cc4 <_vfiprintf_r+0x1f8>
 8019c7c:	9b03      	ldr	r3, [sp, #12]
 8019c7e:	3307      	adds	r3, #7
 8019c80:	f023 0307 	bic.w	r3, r3, #7
 8019c84:	3308      	adds	r3, #8
 8019c86:	9303      	str	r3, [sp, #12]
 8019c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c8a:	443b      	add	r3, r7
 8019c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8019c8e:	e767      	b.n	8019b60 <_vfiprintf_r+0x94>
 8019c90:	fb0c 3202 	mla	r2, ip, r2, r3
 8019c94:	460c      	mov	r4, r1
 8019c96:	2001      	movs	r0, #1
 8019c98:	e7a5      	b.n	8019be6 <_vfiprintf_r+0x11a>
 8019c9a:	2300      	movs	r3, #0
 8019c9c:	3401      	adds	r4, #1
 8019c9e:	9305      	str	r3, [sp, #20]
 8019ca0:	4619      	mov	r1, r3
 8019ca2:	f04f 0c0a 	mov.w	ip, #10
 8019ca6:	4620      	mov	r0, r4
 8019ca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019cac:	3a30      	subs	r2, #48	; 0x30
 8019cae:	2a09      	cmp	r2, #9
 8019cb0:	d903      	bls.n	8019cba <_vfiprintf_r+0x1ee>
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	d0c5      	beq.n	8019c42 <_vfiprintf_r+0x176>
 8019cb6:	9105      	str	r1, [sp, #20]
 8019cb8:	e7c3      	b.n	8019c42 <_vfiprintf_r+0x176>
 8019cba:	fb0c 2101 	mla	r1, ip, r1, r2
 8019cbe:	4604      	mov	r4, r0
 8019cc0:	2301      	movs	r3, #1
 8019cc2:	e7f0      	b.n	8019ca6 <_vfiprintf_r+0x1da>
 8019cc4:	ab03      	add	r3, sp, #12
 8019cc6:	9300      	str	r3, [sp, #0]
 8019cc8:	462a      	mov	r2, r5
 8019cca:	4b16      	ldr	r3, [pc, #88]	; (8019d24 <_vfiprintf_r+0x258>)
 8019ccc:	a904      	add	r1, sp, #16
 8019cce:	4630      	mov	r0, r6
 8019cd0:	f7fd fcf8 	bl	80176c4 <_printf_float>
 8019cd4:	4607      	mov	r7, r0
 8019cd6:	1c78      	adds	r0, r7, #1
 8019cd8:	d1d6      	bne.n	8019c88 <_vfiprintf_r+0x1bc>
 8019cda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019cdc:	07d9      	lsls	r1, r3, #31
 8019cde:	d405      	bmi.n	8019cec <_vfiprintf_r+0x220>
 8019ce0:	89ab      	ldrh	r3, [r5, #12]
 8019ce2:	059a      	lsls	r2, r3, #22
 8019ce4:	d402      	bmi.n	8019cec <_vfiprintf_r+0x220>
 8019ce6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019ce8:	f7ff f9de 	bl	80190a8 <__retarget_lock_release_recursive>
 8019cec:	89ab      	ldrh	r3, [r5, #12]
 8019cee:	065b      	lsls	r3, r3, #25
 8019cf0:	f53f af12 	bmi.w	8019b18 <_vfiprintf_r+0x4c>
 8019cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019cf6:	e711      	b.n	8019b1c <_vfiprintf_r+0x50>
 8019cf8:	ab03      	add	r3, sp, #12
 8019cfa:	9300      	str	r3, [sp, #0]
 8019cfc:	462a      	mov	r2, r5
 8019cfe:	4b09      	ldr	r3, [pc, #36]	; (8019d24 <_vfiprintf_r+0x258>)
 8019d00:	a904      	add	r1, sp, #16
 8019d02:	4630      	mov	r0, r6
 8019d04:	f7fd ff82 	bl	8017c0c <_printf_i>
 8019d08:	e7e4      	b.n	8019cd4 <_vfiprintf_r+0x208>
 8019d0a:	bf00      	nop
 8019d0c:	0801a72c 	.word	0x0801a72c
 8019d10:	0801a74c 	.word	0x0801a74c
 8019d14:	0801a70c 	.word	0x0801a70c
 8019d18:	0801a8c4 	.word	0x0801a8c4
 8019d1c:	0801a8ce 	.word	0x0801a8ce
 8019d20:	080176c5 	.word	0x080176c5
 8019d24:	08019aa7 	.word	0x08019aa7
 8019d28:	0801a8ca 	.word	0x0801a8ca

08019d2c <_putc_r>:
 8019d2c:	b570      	push	{r4, r5, r6, lr}
 8019d2e:	460d      	mov	r5, r1
 8019d30:	4614      	mov	r4, r2
 8019d32:	4606      	mov	r6, r0
 8019d34:	b118      	cbz	r0, 8019d3e <_putc_r+0x12>
 8019d36:	6983      	ldr	r3, [r0, #24]
 8019d38:	b90b      	cbnz	r3, 8019d3e <_putc_r+0x12>
 8019d3a:	f7ff f911 	bl	8018f60 <__sinit>
 8019d3e:	4b1c      	ldr	r3, [pc, #112]	; (8019db0 <_putc_r+0x84>)
 8019d40:	429c      	cmp	r4, r3
 8019d42:	d124      	bne.n	8019d8e <_putc_r+0x62>
 8019d44:	6874      	ldr	r4, [r6, #4]
 8019d46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019d48:	07d8      	lsls	r0, r3, #31
 8019d4a:	d405      	bmi.n	8019d58 <_putc_r+0x2c>
 8019d4c:	89a3      	ldrh	r3, [r4, #12]
 8019d4e:	0599      	lsls	r1, r3, #22
 8019d50:	d402      	bmi.n	8019d58 <_putc_r+0x2c>
 8019d52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d54:	f7ff f9a7 	bl	80190a6 <__retarget_lock_acquire_recursive>
 8019d58:	68a3      	ldr	r3, [r4, #8]
 8019d5a:	3b01      	subs	r3, #1
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	60a3      	str	r3, [r4, #8]
 8019d60:	da05      	bge.n	8019d6e <_putc_r+0x42>
 8019d62:	69a2      	ldr	r2, [r4, #24]
 8019d64:	4293      	cmp	r3, r2
 8019d66:	db1c      	blt.n	8019da2 <_putc_r+0x76>
 8019d68:	b2eb      	uxtb	r3, r5
 8019d6a:	2b0a      	cmp	r3, #10
 8019d6c:	d019      	beq.n	8019da2 <_putc_r+0x76>
 8019d6e:	6823      	ldr	r3, [r4, #0]
 8019d70:	1c5a      	adds	r2, r3, #1
 8019d72:	6022      	str	r2, [r4, #0]
 8019d74:	701d      	strb	r5, [r3, #0]
 8019d76:	b2ed      	uxtb	r5, r5
 8019d78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019d7a:	07da      	lsls	r2, r3, #31
 8019d7c:	d405      	bmi.n	8019d8a <_putc_r+0x5e>
 8019d7e:	89a3      	ldrh	r3, [r4, #12]
 8019d80:	059b      	lsls	r3, r3, #22
 8019d82:	d402      	bmi.n	8019d8a <_putc_r+0x5e>
 8019d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d86:	f7ff f98f 	bl	80190a8 <__retarget_lock_release_recursive>
 8019d8a:	4628      	mov	r0, r5
 8019d8c:	bd70      	pop	{r4, r5, r6, pc}
 8019d8e:	4b09      	ldr	r3, [pc, #36]	; (8019db4 <_putc_r+0x88>)
 8019d90:	429c      	cmp	r4, r3
 8019d92:	d101      	bne.n	8019d98 <_putc_r+0x6c>
 8019d94:	68b4      	ldr	r4, [r6, #8]
 8019d96:	e7d6      	b.n	8019d46 <_putc_r+0x1a>
 8019d98:	4b07      	ldr	r3, [pc, #28]	; (8019db8 <_putc_r+0x8c>)
 8019d9a:	429c      	cmp	r4, r3
 8019d9c:	bf08      	it	eq
 8019d9e:	68f4      	ldreq	r4, [r6, #12]
 8019da0:	e7d1      	b.n	8019d46 <_putc_r+0x1a>
 8019da2:	4629      	mov	r1, r5
 8019da4:	4622      	mov	r2, r4
 8019da6:	4630      	mov	r0, r6
 8019da8:	f7fe f884 	bl	8017eb4 <__swbuf_r>
 8019dac:	4605      	mov	r5, r0
 8019dae:	e7e3      	b.n	8019d78 <_putc_r+0x4c>
 8019db0:	0801a72c 	.word	0x0801a72c
 8019db4:	0801a74c 	.word	0x0801a74c
 8019db8:	0801a70c 	.word	0x0801a70c

08019dbc <_sbrk_r>:
 8019dbc:	b538      	push	{r3, r4, r5, lr}
 8019dbe:	4d06      	ldr	r5, [pc, #24]	; (8019dd8 <_sbrk_r+0x1c>)
 8019dc0:	2300      	movs	r3, #0
 8019dc2:	4604      	mov	r4, r0
 8019dc4:	4608      	mov	r0, r1
 8019dc6:	602b      	str	r3, [r5, #0]
 8019dc8:	f7f5 faf2 	bl	800f3b0 <_sbrk>
 8019dcc:	1c43      	adds	r3, r0, #1
 8019dce:	d102      	bne.n	8019dd6 <_sbrk_r+0x1a>
 8019dd0:	682b      	ldr	r3, [r5, #0]
 8019dd2:	b103      	cbz	r3, 8019dd6 <_sbrk_r+0x1a>
 8019dd4:	6023      	str	r3, [r4, #0]
 8019dd6:	bd38      	pop	{r3, r4, r5, pc}
 8019dd8:	2000cb08 	.word	0x2000cb08

08019ddc <__sread>:
 8019ddc:	b510      	push	{r4, lr}
 8019dde:	460c      	mov	r4, r1
 8019de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019de4:	f000 f8e2 	bl	8019fac <_read_r>
 8019de8:	2800      	cmp	r0, #0
 8019dea:	bfab      	itete	ge
 8019dec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019dee:	89a3      	ldrhlt	r3, [r4, #12]
 8019df0:	181b      	addge	r3, r3, r0
 8019df2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019df6:	bfac      	ite	ge
 8019df8:	6563      	strge	r3, [r4, #84]	; 0x54
 8019dfa:	81a3      	strhlt	r3, [r4, #12]
 8019dfc:	bd10      	pop	{r4, pc}

08019dfe <__swrite>:
 8019dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e02:	461f      	mov	r7, r3
 8019e04:	898b      	ldrh	r3, [r1, #12]
 8019e06:	05db      	lsls	r3, r3, #23
 8019e08:	4605      	mov	r5, r0
 8019e0a:	460c      	mov	r4, r1
 8019e0c:	4616      	mov	r6, r2
 8019e0e:	d505      	bpl.n	8019e1c <__swrite+0x1e>
 8019e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e14:	2302      	movs	r3, #2
 8019e16:	2200      	movs	r2, #0
 8019e18:	f000 f898 	bl	8019f4c <_lseek_r>
 8019e1c:	89a3      	ldrh	r3, [r4, #12]
 8019e1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019e22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019e26:	81a3      	strh	r3, [r4, #12]
 8019e28:	4632      	mov	r2, r6
 8019e2a:	463b      	mov	r3, r7
 8019e2c:	4628      	mov	r0, r5
 8019e2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019e32:	f000 b817 	b.w	8019e64 <_write_r>

08019e36 <__sseek>:
 8019e36:	b510      	push	{r4, lr}
 8019e38:	460c      	mov	r4, r1
 8019e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e3e:	f000 f885 	bl	8019f4c <_lseek_r>
 8019e42:	1c43      	adds	r3, r0, #1
 8019e44:	89a3      	ldrh	r3, [r4, #12]
 8019e46:	bf15      	itete	ne
 8019e48:	6560      	strne	r0, [r4, #84]	; 0x54
 8019e4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019e4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019e52:	81a3      	strheq	r3, [r4, #12]
 8019e54:	bf18      	it	ne
 8019e56:	81a3      	strhne	r3, [r4, #12]
 8019e58:	bd10      	pop	{r4, pc}

08019e5a <__sclose>:
 8019e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e5e:	f000 b831 	b.w	8019ec4 <_close_r>
	...

08019e64 <_write_r>:
 8019e64:	b538      	push	{r3, r4, r5, lr}
 8019e66:	4d07      	ldr	r5, [pc, #28]	; (8019e84 <_write_r+0x20>)
 8019e68:	4604      	mov	r4, r0
 8019e6a:	4608      	mov	r0, r1
 8019e6c:	4611      	mov	r1, r2
 8019e6e:	2200      	movs	r2, #0
 8019e70:	602a      	str	r2, [r5, #0]
 8019e72:	461a      	mov	r2, r3
 8019e74:	f7f5 fa48 	bl	800f308 <_write>
 8019e78:	1c43      	adds	r3, r0, #1
 8019e7a:	d102      	bne.n	8019e82 <_write_r+0x1e>
 8019e7c:	682b      	ldr	r3, [r5, #0]
 8019e7e:	b103      	cbz	r3, 8019e82 <_write_r+0x1e>
 8019e80:	6023      	str	r3, [r4, #0]
 8019e82:	bd38      	pop	{r3, r4, r5, pc}
 8019e84:	2000cb08 	.word	0x2000cb08

08019e88 <__assert_func>:
 8019e88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019e8a:	4614      	mov	r4, r2
 8019e8c:	461a      	mov	r2, r3
 8019e8e:	4b09      	ldr	r3, [pc, #36]	; (8019eb4 <__assert_func+0x2c>)
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	4605      	mov	r5, r0
 8019e94:	68d8      	ldr	r0, [r3, #12]
 8019e96:	b14c      	cbz	r4, 8019eac <__assert_func+0x24>
 8019e98:	4b07      	ldr	r3, [pc, #28]	; (8019eb8 <__assert_func+0x30>)
 8019e9a:	9100      	str	r1, [sp, #0]
 8019e9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019ea0:	4906      	ldr	r1, [pc, #24]	; (8019ebc <__assert_func+0x34>)
 8019ea2:	462b      	mov	r3, r5
 8019ea4:	f000 f81e 	bl	8019ee4 <fiprintf>
 8019ea8:	f000 f89f 	bl	8019fea <abort>
 8019eac:	4b04      	ldr	r3, [pc, #16]	; (8019ec0 <__assert_func+0x38>)
 8019eae:	461c      	mov	r4, r3
 8019eb0:	e7f3      	b.n	8019e9a <__assert_func+0x12>
 8019eb2:	bf00      	nop
 8019eb4:	2000000c 	.word	0x2000000c
 8019eb8:	0801a8d5 	.word	0x0801a8d5
 8019ebc:	0801a8e2 	.word	0x0801a8e2
 8019ec0:	0801a910 	.word	0x0801a910

08019ec4 <_close_r>:
 8019ec4:	b538      	push	{r3, r4, r5, lr}
 8019ec6:	4d06      	ldr	r5, [pc, #24]	; (8019ee0 <_close_r+0x1c>)
 8019ec8:	2300      	movs	r3, #0
 8019eca:	4604      	mov	r4, r0
 8019ecc:	4608      	mov	r0, r1
 8019ece:	602b      	str	r3, [r5, #0]
 8019ed0:	f7f5 fa3a 	bl	800f348 <_close>
 8019ed4:	1c43      	adds	r3, r0, #1
 8019ed6:	d102      	bne.n	8019ede <_close_r+0x1a>
 8019ed8:	682b      	ldr	r3, [r5, #0]
 8019eda:	b103      	cbz	r3, 8019ede <_close_r+0x1a>
 8019edc:	6023      	str	r3, [r4, #0]
 8019ede:	bd38      	pop	{r3, r4, r5, pc}
 8019ee0:	2000cb08 	.word	0x2000cb08

08019ee4 <fiprintf>:
 8019ee4:	b40e      	push	{r1, r2, r3}
 8019ee6:	b503      	push	{r0, r1, lr}
 8019ee8:	4601      	mov	r1, r0
 8019eea:	ab03      	add	r3, sp, #12
 8019eec:	4805      	ldr	r0, [pc, #20]	; (8019f04 <fiprintf+0x20>)
 8019eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ef2:	6800      	ldr	r0, [r0, #0]
 8019ef4:	9301      	str	r3, [sp, #4]
 8019ef6:	f7ff fde9 	bl	8019acc <_vfiprintf_r>
 8019efa:	b002      	add	sp, #8
 8019efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8019f00:	b003      	add	sp, #12
 8019f02:	4770      	bx	lr
 8019f04:	2000000c 	.word	0x2000000c

08019f08 <_fstat_r>:
 8019f08:	b538      	push	{r3, r4, r5, lr}
 8019f0a:	4d07      	ldr	r5, [pc, #28]	; (8019f28 <_fstat_r+0x20>)
 8019f0c:	2300      	movs	r3, #0
 8019f0e:	4604      	mov	r4, r0
 8019f10:	4608      	mov	r0, r1
 8019f12:	4611      	mov	r1, r2
 8019f14:	602b      	str	r3, [r5, #0]
 8019f16:	f7f5 fa23 	bl	800f360 <_fstat>
 8019f1a:	1c43      	adds	r3, r0, #1
 8019f1c:	d102      	bne.n	8019f24 <_fstat_r+0x1c>
 8019f1e:	682b      	ldr	r3, [r5, #0]
 8019f20:	b103      	cbz	r3, 8019f24 <_fstat_r+0x1c>
 8019f22:	6023      	str	r3, [r4, #0]
 8019f24:	bd38      	pop	{r3, r4, r5, pc}
 8019f26:	bf00      	nop
 8019f28:	2000cb08 	.word	0x2000cb08

08019f2c <_isatty_r>:
 8019f2c:	b538      	push	{r3, r4, r5, lr}
 8019f2e:	4d06      	ldr	r5, [pc, #24]	; (8019f48 <_isatty_r+0x1c>)
 8019f30:	2300      	movs	r3, #0
 8019f32:	4604      	mov	r4, r0
 8019f34:	4608      	mov	r0, r1
 8019f36:	602b      	str	r3, [r5, #0]
 8019f38:	f7f5 fa22 	bl	800f380 <_isatty>
 8019f3c:	1c43      	adds	r3, r0, #1
 8019f3e:	d102      	bne.n	8019f46 <_isatty_r+0x1a>
 8019f40:	682b      	ldr	r3, [r5, #0]
 8019f42:	b103      	cbz	r3, 8019f46 <_isatty_r+0x1a>
 8019f44:	6023      	str	r3, [r4, #0]
 8019f46:	bd38      	pop	{r3, r4, r5, pc}
 8019f48:	2000cb08 	.word	0x2000cb08

08019f4c <_lseek_r>:
 8019f4c:	b538      	push	{r3, r4, r5, lr}
 8019f4e:	4d07      	ldr	r5, [pc, #28]	; (8019f6c <_lseek_r+0x20>)
 8019f50:	4604      	mov	r4, r0
 8019f52:	4608      	mov	r0, r1
 8019f54:	4611      	mov	r1, r2
 8019f56:	2200      	movs	r2, #0
 8019f58:	602a      	str	r2, [r5, #0]
 8019f5a:	461a      	mov	r2, r3
 8019f5c:	f7f5 fa1b 	bl	800f396 <_lseek>
 8019f60:	1c43      	adds	r3, r0, #1
 8019f62:	d102      	bne.n	8019f6a <_lseek_r+0x1e>
 8019f64:	682b      	ldr	r3, [r5, #0]
 8019f66:	b103      	cbz	r3, 8019f6a <_lseek_r+0x1e>
 8019f68:	6023      	str	r3, [r4, #0]
 8019f6a:	bd38      	pop	{r3, r4, r5, pc}
 8019f6c:	2000cb08 	.word	0x2000cb08

08019f70 <__ascii_mbtowc>:
 8019f70:	b082      	sub	sp, #8
 8019f72:	b901      	cbnz	r1, 8019f76 <__ascii_mbtowc+0x6>
 8019f74:	a901      	add	r1, sp, #4
 8019f76:	b142      	cbz	r2, 8019f8a <__ascii_mbtowc+0x1a>
 8019f78:	b14b      	cbz	r3, 8019f8e <__ascii_mbtowc+0x1e>
 8019f7a:	7813      	ldrb	r3, [r2, #0]
 8019f7c:	600b      	str	r3, [r1, #0]
 8019f7e:	7812      	ldrb	r2, [r2, #0]
 8019f80:	1e10      	subs	r0, r2, #0
 8019f82:	bf18      	it	ne
 8019f84:	2001      	movne	r0, #1
 8019f86:	b002      	add	sp, #8
 8019f88:	4770      	bx	lr
 8019f8a:	4610      	mov	r0, r2
 8019f8c:	e7fb      	b.n	8019f86 <__ascii_mbtowc+0x16>
 8019f8e:	f06f 0001 	mvn.w	r0, #1
 8019f92:	e7f8      	b.n	8019f86 <__ascii_mbtowc+0x16>

08019f94 <__malloc_lock>:
 8019f94:	4801      	ldr	r0, [pc, #4]	; (8019f9c <__malloc_lock+0x8>)
 8019f96:	f7ff b886 	b.w	80190a6 <__retarget_lock_acquire_recursive>
 8019f9a:	bf00      	nop
 8019f9c:	2000cafc 	.word	0x2000cafc

08019fa0 <__malloc_unlock>:
 8019fa0:	4801      	ldr	r0, [pc, #4]	; (8019fa8 <__malloc_unlock+0x8>)
 8019fa2:	f7ff b881 	b.w	80190a8 <__retarget_lock_release_recursive>
 8019fa6:	bf00      	nop
 8019fa8:	2000cafc 	.word	0x2000cafc

08019fac <_read_r>:
 8019fac:	b538      	push	{r3, r4, r5, lr}
 8019fae:	4d07      	ldr	r5, [pc, #28]	; (8019fcc <_read_r+0x20>)
 8019fb0:	4604      	mov	r4, r0
 8019fb2:	4608      	mov	r0, r1
 8019fb4:	4611      	mov	r1, r2
 8019fb6:	2200      	movs	r2, #0
 8019fb8:	602a      	str	r2, [r5, #0]
 8019fba:	461a      	mov	r2, r3
 8019fbc:	f7f5 f987 	bl	800f2ce <_read>
 8019fc0:	1c43      	adds	r3, r0, #1
 8019fc2:	d102      	bne.n	8019fca <_read_r+0x1e>
 8019fc4:	682b      	ldr	r3, [r5, #0]
 8019fc6:	b103      	cbz	r3, 8019fca <_read_r+0x1e>
 8019fc8:	6023      	str	r3, [r4, #0]
 8019fca:	bd38      	pop	{r3, r4, r5, pc}
 8019fcc:	2000cb08 	.word	0x2000cb08

08019fd0 <__ascii_wctomb>:
 8019fd0:	b149      	cbz	r1, 8019fe6 <__ascii_wctomb+0x16>
 8019fd2:	2aff      	cmp	r2, #255	; 0xff
 8019fd4:	bf85      	ittet	hi
 8019fd6:	238a      	movhi	r3, #138	; 0x8a
 8019fd8:	6003      	strhi	r3, [r0, #0]
 8019fda:	700a      	strbls	r2, [r1, #0]
 8019fdc:	f04f 30ff 	movhi.w	r0, #4294967295
 8019fe0:	bf98      	it	ls
 8019fe2:	2001      	movls	r0, #1
 8019fe4:	4770      	bx	lr
 8019fe6:	4608      	mov	r0, r1
 8019fe8:	4770      	bx	lr

08019fea <abort>:
 8019fea:	b508      	push	{r3, lr}
 8019fec:	2006      	movs	r0, #6
 8019fee:	f000 f82b 	bl	801a048 <raise>
 8019ff2:	2001      	movs	r0, #1
 8019ff4:	f7f5 f961 	bl	800f2ba <_exit>

08019ff8 <_raise_r>:
 8019ff8:	291f      	cmp	r1, #31
 8019ffa:	b538      	push	{r3, r4, r5, lr}
 8019ffc:	4604      	mov	r4, r0
 8019ffe:	460d      	mov	r5, r1
 801a000:	d904      	bls.n	801a00c <_raise_r+0x14>
 801a002:	2316      	movs	r3, #22
 801a004:	6003      	str	r3, [r0, #0]
 801a006:	f04f 30ff 	mov.w	r0, #4294967295
 801a00a:	bd38      	pop	{r3, r4, r5, pc}
 801a00c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a00e:	b112      	cbz	r2, 801a016 <_raise_r+0x1e>
 801a010:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a014:	b94b      	cbnz	r3, 801a02a <_raise_r+0x32>
 801a016:	4620      	mov	r0, r4
 801a018:	f000 f830 	bl	801a07c <_getpid_r>
 801a01c:	462a      	mov	r2, r5
 801a01e:	4601      	mov	r1, r0
 801a020:	4620      	mov	r0, r4
 801a022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a026:	f000 b817 	b.w	801a058 <_kill_r>
 801a02a:	2b01      	cmp	r3, #1
 801a02c:	d00a      	beq.n	801a044 <_raise_r+0x4c>
 801a02e:	1c59      	adds	r1, r3, #1
 801a030:	d103      	bne.n	801a03a <_raise_r+0x42>
 801a032:	2316      	movs	r3, #22
 801a034:	6003      	str	r3, [r0, #0]
 801a036:	2001      	movs	r0, #1
 801a038:	e7e7      	b.n	801a00a <_raise_r+0x12>
 801a03a:	2400      	movs	r4, #0
 801a03c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a040:	4628      	mov	r0, r5
 801a042:	4798      	blx	r3
 801a044:	2000      	movs	r0, #0
 801a046:	e7e0      	b.n	801a00a <_raise_r+0x12>

0801a048 <raise>:
 801a048:	4b02      	ldr	r3, [pc, #8]	; (801a054 <raise+0xc>)
 801a04a:	4601      	mov	r1, r0
 801a04c:	6818      	ldr	r0, [r3, #0]
 801a04e:	f7ff bfd3 	b.w	8019ff8 <_raise_r>
 801a052:	bf00      	nop
 801a054:	2000000c 	.word	0x2000000c

0801a058 <_kill_r>:
 801a058:	b538      	push	{r3, r4, r5, lr}
 801a05a:	4d07      	ldr	r5, [pc, #28]	; (801a078 <_kill_r+0x20>)
 801a05c:	2300      	movs	r3, #0
 801a05e:	4604      	mov	r4, r0
 801a060:	4608      	mov	r0, r1
 801a062:	4611      	mov	r1, r2
 801a064:	602b      	str	r3, [r5, #0]
 801a066:	f7f5 f918 	bl	800f29a <_kill>
 801a06a:	1c43      	adds	r3, r0, #1
 801a06c:	d102      	bne.n	801a074 <_kill_r+0x1c>
 801a06e:	682b      	ldr	r3, [r5, #0]
 801a070:	b103      	cbz	r3, 801a074 <_kill_r+0x1c>
 801a072:	6023      	str	r3, [r4, #0]
 801a074:	bd38      	pop	{r3, r4, r5, pc}
 801a076:	bf00      	nop
 801a078:	2000cb08 	.word	0x2000cb08

0801a07c <_getpid_r>:
 801a07c:	f7f5 b905 	b.w	800f28a <_getpid>

0801a080 <exp>:
 801a080:	b538      	push	{r3, r4, r5, lr}
 801a082:	ed2d 8b02 	vpush	{d8}
 801a086:	ec55 4b10 	vmov	r4, r5, d0
 801a08a:	f000 f841 	bl	801a110 <__ieee754_exp>
 801a08e:	eeb0 8a40 	vmov.f32	s16, s0
 801a092:	eef0 8a60 	vmov.f32	s17, s1
 801a096:	ec45 4b10 	vmov	d0, r4, r5
 801a09a:	f000 f9eb 	bl	801a474 <finite>
 801a09e:	b168      	cbz	r0, 801a0bc <exp+0x3c>
 801a0a0:	a317      	add	r3, pc, #92	; (adr r3, 801a100 <exp+0x80>)
 801a0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0a6:	4620      	mov	r0, r4
 801a0a8:	4629      	mov	r1, r5
 801a0aa:	f7e6 fd5d 	bl	8000b68 <__aeabi_dcmpgt>
 801a0ae:	b160      	cbz	r0, 801a0ca <exp+0x4a>
 801a0b0:	f7fd fa28 	bl	8017504 <__errno>
 801a0b4:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 801a0f0 <exp+0x70>
 801a0b8:	2322      	movs	r3, #34	; 0x22
 801a0ba:	6003      	str	r3, [r0, #0]
 801a0bc:	eeb0 0a48 	vmov.f32	s0, s16
 801a0c0:	eef0 0a68 	vmov.f32	s1, s17
 801a0c4:	ecbd 8b02 	vpop	{d8}
 801a0c8:	bd38      	pop	{r3, r4, r5, pc}
 801a0ca:	a30f      	add	r3, pc, #60	; (adr r3, 801a108 <exp+0x88>)
 801a0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0d0:	4620      	mov	r0, r4
 801a0d2:	4629      	mov	r1, r5
 801a0d4:	f7e6 fd2a 	bl	8000b2c <__aeabi_dcmplt>
 801a0d8:	2800      	cmp	r0, #0
 801a0da:	d0ef      	beq.n	801a0bc <exp+0x3c>
 801a0dc:	f7fd fa12 	bl	8017504 <__errno>
 801a0e0:	2322      	movs	r3, #34	; 0x22
 801a0e2:	ed9f 8b05 	vldr	d8, [pc, #20]	; 801a0f8 <exp+0x78>
 801a0e6:	6003      	str	r3, [r0, #0]
 801a0e8:	e7e8      	b.n	801a0bc <exp+0x3c>
 801a0ea:	bf00      	nop
 801a0ec:	f3af 8000 	nop.w
 801a0f0:	00000000 	.word	0x00000000
 801a0f4:	7ff00000 	.word	0x7ff00000
	...
 801a100:	fefa39ef 	.word	0xfefa39ef
 801a104:	40862e42 	.word	0x40862e42
 801a108:	d52d3051 	.word	0xd52d3051
 801a10c:	c0874910 	.word	0xc0874910

0801a110 <__ieee754_exp>:
 801a110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a114:	ec55 4b10 	vmov	r4, r5, d0
 801a118:	49b5      	ldr	r1, [pc, #724]	; (801a3f0 <__ieee754_exp+0x2e0>)
 801a11a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a11e:	428b      	cmp	r3, r1
 801a120:	ed2d 8b04 	vpush	{d8-d9}
 801a124:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 801a128:	d93d      	bls.n	801a1a6 <__ieee754_exp+0x96>
 801a12a:	49b2      	ldr	r1, [pc, #712]	; (801a3f4 <__ieee754_exp+0x2e4>)
 801a12c:	428b      	cmp	r3, r1
 801a12e:	d918      	bls.n	801a162 <__ieee754_exp+0x52>
 801a130:	ee10 3a10 	vmov	r3, s0
 801a134:	f3c5 0213 	ubfx	r2, r5, #0, #20
 801a138:	4313      	orrs	r3, r2
 801a13a:	d009      	beq.n	801a150 <__ieee754_exp+0x40>
 801a13c:	ee10 2a10 	vmov	r2, s0
 801a140:	462b      	mov	r3, r5
 801a142:	4620      	mov	r0, r4
 801a144:	4629      	mov	r1, r5
 801a146:	f7e6 f8c9 	bl	80002dc <__adddf3>
 801a14a:	4604      	mov	r4, r0
 801a14c:	460d      	mov	r5, r1
 801a14e:	e002      	b.n	801a156 <__ieee754_exp+0x46>
 801a150:	b10e      	cbz	r6, 801a156 <__ieee754_exp+0x46>
 801a152:	2400      	movs	r4, #0
 801a154:	2500      	movs	r5, #0
 801a156:	ecbd 8b04 	vpop	{d8-d9}
 801a15a:	ec45 4b10 	vmov	d0, r4, r5
 801a15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a162:	a38d      	add	r3, pc, #564	; (adr r3, 801a398 <__ieee754_exp+0x288>)
 801a164:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a168:	ee10 0a10 	vmov	r0, s0
 801a16c:	4629      	mov	r1, r5
 801a16e:	f7e6 fcfb 	bl	8000b68 <__aeabi_dcmpgt>
 801a172:	4607      	mov	r7, r0
 801a174:	b130      	cbz	r0, 801a184 <__ieee754_exp+0x74>
 801a176:	ecbd 8b04 	vpop	{d8-d9}
 801a17a:	2000      	movs	r0, #0
 801a17c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a180:	f000 b96f 	b.w	801a462 <__math_oflow>
 801a184:	a386      	add	r3, pc, #536	; (adr r3, 801a3a0 <__ieee754_exp+0x290>)
 801a186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a18a:	4620      	mov	r0, r4
 801a18c:	4629      	mov	r1, r5
 801a18e:	f7e6 fccd 	bl	8000b2c <__aeabi_dcmplt>
 801a192:	2800      	cmp	r0, #0
 801a194:	f000 808b 	beq.w	801a2ae <__ieee754_exp+0x19e>
 801a198:	ecbd 8b04 	vpop	{d8-d9}
 801a19c:	4638      	mov	r0, r7
 801a19e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1a2:	f000 b955 	b.w	801a450 <__math_uflow>
 801a1a6:	4a94      	ldr	r2, [pc, #592]	; (801a3f8 <__ieee754_exp+0x2e8>)
 801a1a8:	4293      	cmp	r3, r2
 801a1aa:	f240 80ac 	bls.w	801a306 <__ieee754_exp+0x1f6>
 801a1ae:	4a93      	ldr	r2, [pc, #588]	; (801a3fc <__ieee754_exp+0x2ec>)
 801a1b0:	4293      	cmp	r3, r2
 801a1b2:	d87c      	bhi.n	801a2ae <__ieee754_exp+0x19e>
 801a1b4:	4b92      	ldr	r3, [pc, #584]	; (801a400 <__ieee754_exp+0x2f0>)
 801a1b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1be:	ee10 0a10 	vmov	r0, s0
 801a1c2:	4629      	mov	r1, r5
 801a1c4:	f7e6 f888 	bl	80002d8 <__aeabi_dsub>
 801a1c8:	4b8e      	ldr	r3, [pc, #568]	; (801a404 <__ieee754_exp+0x2f4>)
 801a1ca:	00f7      	lsls	r7, r6, #3
 801a1cc:	443b      	add	r3, r7
 801a1ce:	ed93 7b00 	vldr	d7, [r3]
 801a1d2:	f1c6 0a01 	rsb	sl, r6, #1
 801a1d6:	4680      	mov	r8, r0
 801a1d8:	4689      	mov	r9, r1
 801a1da:	ebaa 0a06 	sub.w	sl, sl, r6
 801a1de:	eeb0 8a47 	vmov.f32	s16, s14
 801a1e2:	eef0 8a67 	vmov.f32	s17, s15
 801a1e6:	ec53 2b18 	vmov	r2, r3, d8
 801a1ea:	4640      	mov	r0, r8
 801a1ec:	4649      	mov	r1, r9
 801a1ee:	f7e6 f873 	bl	80002d8 <__aeabi_dsub>
 801a1f2:	4604      	mov	r4, r0
 801a1f4:	460d      	mov	r5, r1
 801a1f6:	4622      	mov	r2, r4
 801a1f8:	462b      	mov	r3, r5
 801a1fa:	4620      	mov	r0, r4
 801a1fc:	4629      	mov	r1, r5
 801a1fe:	f7e6 fa23 	bl	8000648 <__aeabi_dmul>
 801a202:	a369      	add	r3, pc, #420	; (adr r3, 801a3a8 <__ieee754_exp+0x298>)
 801a204:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a208:	4606      	mov	r6, r0
 801a20a:	460f      	mov	r7, r1
 801a20c:	f7e6 fa1c 	bl	8000648 <__aeabi_dmul>
 801a210:	a367      	add	r3, pc, #412	; (adr r3, 801a3b0 <__ieee754_exp+0x2a0>)
 801a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a216:	f7e6 f85f 	bl	80002d8 <__aeabi_dsub>
 801a21a:	4632      	mov	r2, r6
 801a21c:	463b      	mov	r3, r7
 801a21e:	f7e6 fa13 	bl	8000648 <__aeabi_dmul>
 801a222:	a365      	add	r3, pc, #404	; (adr r3, 801a3b8 <__ieee754_exp+0x2a8>)
 801a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a228:	f7e6 f858 	bl	80002dc <__adddf3>
 801a22c:	4632      	mov	r2, r6
 801a22e:	463b      	mov	r3, r7
 801a230:	f7e6 fa0a 	bl	8000648 <__aeabi_dmul>
 801a234:	a362      	add	r3, pc, #392	; (adr r3, 801a3c0 <__ieee754_exp+0x2b0>)
 801a236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a23a:	f7e6 f84d 	bl	80002d8 <__aeabi_dsub>
 801a23e:	4632      	mov	r2, r6
 801a240:	463b      	mov	r3, r7
 801a242:	f7e6 fa01 	bl	8000648 <__aeabi_dmul>
 801a246:	a360      	add	r3, pc, #384	; (adr r3, 801a3c8 <__ieee754_exp+0x2b8>)
 801a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a24c:	f7e6 f846 	bl	80002dc <__adddf3>
 801a250:	4632      	mov	r2, r6
 801a252:	463b      	mov	r3, r7
 801a254:	f7e6 f9f8 	bl	8000648 <__aeabi_dmul>
 801a258:	4602      	mov	r2, r0
 801a25a:	460b      	mov	r3, r1
 801a25c:	4620      	mov	r0, r4
 801a25e:	4629      	mov	r1, r5
 801a260:	f7e6 f83a 	bl	80002d8 <__aeabi_dsub>
 801a264:	4602      	mov	r2, r0
 801a266:	460b      	mov	r3, r1
 801a268:	4606      	mov	r6, r0
 801a26a:	460f      	mov	r7, r1
 801a26c:	4620      	mov	r0, r4
 801a26e:	4629      	mov	r1, r5
 801a270:	f7e6 f9ea 	bl	8000648 <__aeabi_dmul>
 801a274:	ec41 0b19 	vmov	d9, r0, r1
 801a278:	f1ba 0f00 	cmp.w	sl, #0
 801a27c:	d15d      	bne.n	801a33a <__ieee754_exp+0x22a>
 801a27e:	2200      	movs	r2, #0
 801a280:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a284:	4630      	mov	r0, r6
 801a286:	4639      	mov	r1, r7
 801a288:	f7e6 f826 	bl	80002d8 <__aeabi_dsub>
 801a28c:	4602      	mov	r2, r0
 801a28e:	460b      	mov	r3, r1
 801a290:	ec51 0b19 	vmov	r0, r1, d9
 801a294:	f7e6 fb02 	bl	800089c <__aeabi_ddiv>
 801a298:	4622      	mov	r2, r4
 801a29a:	462b      	mov	r3, r5
 801a29c:	f7e6 f81c 	bl	80002d8 <__aeabi_dsub>
 801a2a0:	4602      	mov	r2, r0
 801a2a2:	460b      	mov	r3, r1
 801a2a4:	2000      	movs	r0, #0
 801a2a6:	4958      	ldr	r1, [pc, #352]	; (801a408 <__ieee754_exp+0x2f8>)
 801a2a8:	f7e6 f816 	bl	80002d8 <__aeabi_dsub>
 801a2ac:	e74d      	b.n	801a14a <__ieee754_exp+0x3a>
 801a2ae:	4857      	ldr	r0, [pc, #348]	; (801a40c <__ieee754_exp+0x2fc>)
 801a2b0:	a347      	add	r3, pc, #284	; (adr r3, 801a3d0 <__ieee754_exp+0x2c0>)
 801a2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2b6:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801a2ba:	4629      	mov	r1, r5
 801a2bc:	4620      	mov	r0, r4
 801a2be:	f7e6 f9c3 	bl	8000648 <__aeabi_dmul>
 801a2c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a2c6:	f7e6 f809 	bl	80002dc <__adddf3>
 801a2ca:	f7e6 fc6d 	bl	8000ba8 <__aeabi_d2iz>
 801a2ce:	4682      	mov	sl, r0
 801a2d0:	f7e6 f950 	bl	8000574 <__aeabi_i2d>
 801a2d4:	a340      	add	r3, pc, #256	; (adr r3, 801a3d8 <__ieee754_exp+0x2c8>)
 801a2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2da:	4606      	mov	r6, r0
 801a2dc:	460f      	mov	r7, r1
 801a2de:	f7e6 f9b3 	bl	8000648 <__aeabi_dmul>
 801a2e2:	4602      	mov	r2, r0
 801a2e4:	460b      	mov	r3, r1
 801a2e6:	4620      	mov	r0, r4
 801a2e8:	4629      	mov	r1, r5
 801a2ea:	f7e5 fff5 	bl	80002d8 <__aeabi_dsub>
 801a2ee:	a33c      	add	r3, pc, #240	; (adr r3, 801a3e0 <__ieee754_exp+0x2d0>)
 801a2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2f4:	4680      	mov	r8, r0
 801a2f6:	4689      	mov	r9, r1
 801a2f8:	4630      	mov	r0, r6
 801a2fa:	4639      	mov	r1, r7
 801a2fc:	f7e6 f9a4 	bl	8000648 <__aeabi_dmul>
 801a300:	ec41 0b18 	vmov	d8, r0, r1
 801a304:	e76f      	b.n	801a1e6 <__ieee754_exp+0xd6>
 801a306:	4a42      	ldr	r2, [pc, #264]	; (801a410 <__ieee754_exp+0x300>)
 801a308:	4293      	cmp	r3, r2
 801a30a:	d811      	bhi.n	801a330 <__ieee754_exp+0x220>
 801a30c:	a336      	add	r3, pc, #216	; (adr r3, 801a3e8 <__ieee754_exp+0x2d8>)
 801a30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a312:	ee10 0a10 	vmov	r0, s0
 801a316:	4629      	mov	r1, r5
 801a318:	f7e5 ffe0 	bl	80002dc <__adddf3>
 801a31c:	4b3a      	ldr	r3, [pc, #232]	; (801a408 <__ieee754_exp+0x2f8>)
 801a31e:	2200      	movs	r2, #0
 801a320:	f7e6 fc22 	bl	8000b68 <__aeabi_dcmpgt>
 801a324:	b138      	cbz	r0, 801a336 <__ieee754_exp+0x226>
 801a326:	4b38      	ldr	r3, [pc, #224]	; (801a408 <__ieee754_exp+0x2f8>)
 801a328:	2200      	movs	r2, #0
 801a32a:	4620      	mov	r0, r4
 801a32c:	4629      	mov	r1, r5
 801a32e:	e70a      	b.n	801a146 <__ieee754_exp+0x36>
 801a330:	f04f 0a00 	mov.w	sl, #0
 801a334:	e75f      	b.n	801a1f6 <__ieee754_exp+0xe6>
 801a336:	4682      	mov	sl, r0
 801a338:	e75d      	b.n	801a1f6 <__ieee754_exp+0xe6>
 801a33a:	4632      	mov	r2, r6
 801a33c:	463b      	mov	r3, r7
 801a33e:	2000      	movs	r0, #0
 801a340:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801a344:	f7e5 ffc8 	bl	80002d8 <__aeabi_dsub>
 801a348:	4602      	mov	r2, r0
 801a34a:	460b      	mov	r3, r1
 801a34c:	ec51 0b19 	vmov	r0, r1, d9
 801a350:	f7e6 faa4 	bl	800089c <__aeabi_ddiv>
 801a354:	4602      	mov	r2, r0
 801a356:	460b      	mov	r3, r1
 801a358:	ec51 0b18 	vmov	r0, r1, d8
 801a35c:	f7e5 ffbc 	bl	80002d8 <__aeabi_dsub>
 801a360:	4642      	mov	r2, r8
 801a362:	464b      	mov	r3, r9
 801a364:	f7e5 ffb8 	bl	80002d8 <__aeabi_dsub>
 801a368:	4602      	mov	r2, r0
 801a36a:	460b      	mov	r3, r1
 801a36c:	2000      	movs	r0, #0
 801a36e:	4926      	ldr	r1, [pc, #152]	; (801a408 <__ieee754_exp+0x2f8>)
 801a370:	f7e5 ffb2 	bl	80002d8 <__aeabi_dsub>
 801a374:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 801a378:	4592      	cmp	sl, r2
 801a37a:	db02      	blt.n	801a382 <__ieee754_exp+0x272>
 801a37c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801a380:	e6e3      	b.n	801a14a <__ieee754_exp+0x3a>
 801a382:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801a386:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801a38a:	2200      	movs	r2, #0
 801a38c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 801a390:	f7e6 f95a 	bl	8000648 <__aeabi_dmul>
 801a394:	e6d9      	b.n	801a14a <__ieee754_exp+0x3a>
 801a396:	bf00      	nop
 801a398:	fefa39ef 	.word	0xfefa39ef
 801a39c:	40862e42 	.word	0x40862e42
 801a3a0:	d52d3051 	.word	0xd52d3051
 801a3a4:	c0874910 	.word	0xc0874910
 801a3a8:	72bea4d0 	.word	0x72bea4d0
 801a3ac:	3e663769 	.word	0x3e663769
 801a3b0:	c5d26bf1 	.word	0xc5d26bf1
 801a3b4:	3ebbbd41 	.word	0x3ebbbd41
 801a3b8:	af25de2c 	.word	0xaf25de2c
 801a3bc:	3f11566a 	.word	0x3f11566a
 801a3c0:	16bebd93 	.word	0x16bebd93
 801a3c4:	3f66c16c 	.word	0x3f66c16c
 801a3c8:	5555553e 	.word	0x5555553e
 801a3cc:	3fc55555 	.word	0x3fc55555
 801a3d0:	652b82fe 	.word	0x652b82fe
 801a3d4:	3ff71547 	.word	0x3ff71547
 801a3d8:	fee00000 	.word	0xfee00000
 801a3dc:	3fe62e42 	.word	0x3fe62e42
 801a3e0:	35793c76 	.word	0x35793c76
 801a3e4:	3dea39ef 	.word	0x3dea39ef
 801a3e8:	8800759c 	.word	0x8800759c
 801a3ec:	7e37e43c 	.word	0x7e37e43c
 801a3f0:	40862e41 	.word	0x40862e41
 801a3f4:	7fefffff 	.word	0x7fefffff
 801a3f8:	3fd62e42 	.word	0x3fd62e42
 801a3fc:	3ff0a2b1 	.word	0x3ff0a2b1
 801a400:	0801aa30 	.word	0x0801aa30
 801a404:	0801aa40 	.word	0x0801aa40
 801a408:	3ff00000 	.word	0x3ff00000
 801a40c:	0801aa20 	.word	0x0801aa20
 801a410:	3defffff 	.word	0x3defffff

0801a414 <with_errno>:
 801a414:	b570      	push	{r4, r5, r6, lr}
 801a416:	4604      	mov	r4, r0
 801a418:	460d      	mov	r5, r1
 801a41a:	4616      	mov	r6, r2
 801a41c:	f7fd f872 	bl	8017504 <__errno>
 801a420:	4629      	mov	r1, r5
 801a422:	6006      	str	r6, [r0, #0]
 801a424:	4620      	mov	r0, r4
 801a426:	bd70      	pop	{r4, r5, r6, pc}

0801a428 <xflow>:
 801a428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a42a:	4614      	mov	r4, r2
 801a42c:	461d      	mov	r5, r3
 801a42e:	b108      	cbz	r0, 801a434 <xflow+0xc>
 801a430:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a434:	e9cd 2300 	strd	r2, r3, [sp]
 801a438:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a43c:	4620      	mov	r0, r4
 801a43e:	4629      	mov	r1, r5
 801a440:	f7e6 f902 	bl	8000648 <__aeabi_dmul>
 801a444:	2222      	movs	r2, #34	; 0x22
 801a446:	b003      	add	sp, #12
 801a448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a44c:	f7ff bfe2 	b.w	801a414 <with_errno>

0801a450 <__math_uflow>:
 801a450:	b508      	push	{r3, lr}
 801a452:	2200      	movs	r2, #0
 801a454:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801a458:	f7ff ffe6 	bl	801a428 <xflow>
 801a45c:	ec41 0b10 	vmov	d0, r0, r1
 801a460:	bd08      	pop	{r3, pc}

0801a462 <__math_oflow>:
 801a462:	b508      	push	{r3, lr}
 801a464:	2200      	movs	r2, #0
 801a466:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801a46a:	f7ff ffdd 	bl	801a428 <xflow>
 801a46e:	ec41 0b10 	vmov	d0, r0, r1
 801a472:	bd08      	pop	{r3, pc}

0801a474 <finite>:
 801a474:	b082      	sub	sp, #8
 801a476:	ed8d 0b00 	vstr	d0, [sp]
 801a47a:	9801      	ldr	r0, [sp, #4]
 801a47c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a480:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a484:	0fc0      	lsrs	r0, r0, #31
 801a486:	b002      	add	sp, #8
 801a488:	4770      	bx	lr
	...

0801a48c <_init>:
 801a48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a48e:	bf00      	nop
 801a490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a492:	bc08      	pop	{r3}
 801a494:	469e      	mov	lr, r3
 801a496:	4770      	bx	lr

0801a498 <_fini>:
 801a498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a49a:	bf00      	nop
 801a49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a49e:	bc08      	pop	{r3}
 801a4a0:	469e      	mov	lr, r3
 801a4a2:	4770      	bx	lr
